[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +        final Set<String> requestedFollowerIndices = request.indices() != null ?, +            new HashSet<>(Arrays.asList(request.indices())) : Collections.emptySet();, +            .filter(followerIndex -> requestedFollowerIndices.isEmpty() || requestedFollowerIndices.contains(followerIndex)), +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +        final Set<String> requestedFollowerIndices = request.indices() != null ?, +            new HashSet<>(Arrays.asList(request.indices())) : Collections.emptySet();, +            .filter(followerIndex -> requestedFollowerIndices.isEmpty() || requestedFollowerIndices.contains(followerIndex)), +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrSingleNodeTestCase.java, +    protected ResumeFollowAction.Request getResumeFollowRequest(String followerIndex) {, +        request.setFollowerIndex(followerIndex);, +    protected PutFollowAction.Request getPutFollowRequest(String leaderIndex, String followerIndex) {, +        request.setLeaderIndex(leaderIndex);, +        request.setFollowRequest(getResumeFollowRequest(followerIndex));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +        final Set<String> requestedFollowerIndices = request.indices() != null ?, +            new HashSet<>(Arrays.asList(request.indices())) : Collections.emptySet();, +            .filter(followerIndex -> requestedFollowerIndices.isEmpty() || requestedFollowerIndices.contains(followerIndex)), +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrSingleNodeTestCase.java, +    protected ResumeFollowAction.Request getResumeFollowRequest(String followerIndex) {, +        request.setFollowerIndex(followerIndex);, +    protected PutFollowAction.Request getPutFollowRequest(String leaderIndex, String followerIndex) {, +        request.setLeaderIndex(leaderIndex);, +        request.setFollowRequest(getResumeFollowRequest(followerIndex));, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrLicenseIT.java, +        final ResumeFollowAction.Request followRequest = getResumeFollowRequest("follower");, +        final PutFollowAction.Request createAndFollowRequest = getPutFollowRequest("leader", "follower");, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +        final Set<String> requestedFollowerIndices = request.indices() != null ?, +            new HashSet<>(Arrays.asList(request.indices())) : Collections.emptySet();, +            .filter(followerIndex -> requestedFollowerIndices.isEmpty() || requestedFollowerIndices.contains(followerIndex)), +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrSingleNodeTestCase.java, +    protected ResumeFollowAction.Request getResumeFollowRequest(String followerIndex) {, +        request.setFollowerIndex(followerIndex);, +    protected PutFollowAction.Request getPutFollowRequest(String leaderIndex, String followerIndex) {, +        request.setLeaderIndex(leaderIndex);, +        request.setFollowRequest(getResumeFollowRequest(followerIndex));, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrLicenseIT.java, +        final ResumeFollowAction.Request followRequest = getResumeFollowRequest("follower");, +        final PutFollowAction.Request createAndFollowRequest = getPutFollowRequest("leader", "follower");, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/LocalIndexFollowingIT.java, +import org.elasticsearch.xpack.core.ccr.action.FollowStatsAction;, +import java.util.Comparator;, +        final PutFollowAction.Request followRequest = getPutFollowRequest("leader", "follower");, +        client().execute(ResumeFollowAction.INSTANCE, getResumeFollowRequest("follower")).get();, +    public void testFollowStatsApiFollowerIndexFiltering() throws Exception {, +        final String leaderIndexSettings = getIndexSettings(1, 0,, +            singletonMap(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), "true"));, +        assertAcked(client().admin().indices().prepareCreate("leader1").setSource(leaderIndexSettings, XContentType.JSON));, +        ensureGreen("leader1");, +        assertAcked(client().admin().indices().prepareCreate("leader2").setSource(leaderIndexSettings, XContentType.JSON));, +        ensureGreen("leader2");, +, +        PutFollowAction.Request followRequest = getPutFollowRequest("leader1", "follower1");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +, +        followRequest = getPutFollowRequest("leader2", "follower2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +, +        FollowStatsAction.StatsRequest statsRequest = new FollowStatsAction.StatsRequest();, +        statsRequest.setIndices(new String[] {"follower1"});, +        FollowStatsAction.StatsResponses response = client().execute(FollowStatsAction.INSTANCE, statsRequest).actionGet();, +        assertThat(response.getStatsResponses().size(), equalTo(1));, +        assertThat(response.getStatsResponses().get(0).status().followerIndex(), equalTo("follower1"));, +, +        statsRequest = new FollowStatsAction.StatsRequest();, +        statsRequest.setIndices(new String[] {"follower2"});, +        response = client().execute(FollowStatsAction.INSTANCE, statsRequest).actionGet();, +        assertThat(response.getStatsResponses().size(), equalTo(1));, +        assertThat(response.getStatsResponses().get(0).status().followerIndex(), equalTo("follower2"));, +, +        response = client().execute(FollowStatsAction.INSTANCE,  new FollowStatsAction.StatsRequest()).actionGet();, +        assertThat(response.getStatsResponses().size(), equalTo(2));, +        response.getStatsResponses().sort(Comparator.comparing(o -> o.status().followerIndex()));, +        assertThat(response.getStatsResponses().get(0).status().followerIndex(), equalTo("follower1"));, +        assertThat(response.getStatsResponses().get(1).status().followerIndex(), equalTo("follower2"));, +    }, +, +        ResumeFollowAction.Request followRequest = getResumeFollowRequest("follower");, +        PutFollowAction.Request putFollowRequest = getPutFollowRequest("leader", "follower");]