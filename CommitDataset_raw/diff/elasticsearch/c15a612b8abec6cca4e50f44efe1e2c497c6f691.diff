[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetResponse.java, +import org.elasticsearch.common.xcontent.*;, +    static final class Fields {, +        static final XContentBuilderString _INDEX = new XContentBuilderString("_index");, +        static final XContentBuilderString _TYPE = new XContentBuilderString("_type");, +        static final XContentBuilderString _ID = new XContentBuilderString("_id");, +        static final XContentBuilderString FIELDS = new XContentBuilderString("fields");, +    }, +, +            builder.field(Fields._INDEX, index);, +            builder.field(Fields._TYPE, type);, +            builder.field(Fields._ID, id);, +            builder.field(Fields._INDEX, index);, +            builder.field(Fields._TYPE, type);, +            builder.field(Fields._ID, id);, +                builder.startObject(Fields.FIELDS);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetResponse.java, +import org.elasticsearch.common.xcontent.*;, +    static final class Fields {, +        static final XContentBuilderString _INDEX = new XContentBuilderString("_index");, +        static final XContentBuilderString _TYPE = new XContentBuilderString("_type");, +        static final XContentBuilderString _ID = new XContentBuilderString("_id");, +        static final XContentBuilderString FIELDS = new XContentBuilderString("fields");, +    }, +, +            builder.field(Fields._INDEX, index);, +            builder.field(Fields._TYPE, type);, +            builder.field(Fields._ID, id);, +            builder.field(Fields._INDEX, index);, +            builder.field(Fields._TYPE, type);, +            builder.field(Fields._ID, id);, +                builder.startObject(Fields.FIELDS);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/admin/indices/delete/RestDeleteIndexAction.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, + * @author kimchy (shay.banon), +                            .field(Fields.OK, true), +                            .field(Fields.ACKNOWLEDGED, response.acknowledged()), +, +    static final class Fields {, +        static final XContentBuilderString OK = new XContentBuilderString("ok");, +        static final XContentBuilderString ACKNOWLEDGED = new XContentBuilderString("acknowledged");, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetResponse.java, +import org.elasticsearch.common.xcontent.*;, +    static final class Fields {, +        static final XContentBuilderString _INDEX = new XContentBuilderString("_index");, +        static final XContentBuilderString _TYPE = new XContentBuilderString("_type");, +        static final XContentBuilderString _ID = new XContentBuilderString("_id");, +        static final XContentBuilderString FIELDS = new XContentBuilderString("fields");, +    }, +, +            builder.field(Fields._INDEX, index);, +            builder.field(Fields._TYPE, type);, +            builder.field(Fields._ID, id);, +            builder.field(Fields._INDEX, index);, +            builder.field(Fields._TYPE, type);, +            builder.field(Fields._ID, id);, +                builder.startObject(Fields.FIELDS);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/admin/indices/delete/RestDeleteIndexAction.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, + * @author kimchy (shay.banon), +                            .field(Fields.OK, true), +                            .field(Fields.ACKNOWLEDGED, response.acknowledged()), +, +    static final class Fields {, +        static final XContentBuilderString OK = new XContentBuilderString("ok");, +        static final XContentBuilderString ACKNOWLEDGED = new XContentBuilderString("acknowledged");, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/index/RestIndexAction.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +                            .field(Fields.OK, true), +                            .field(Fields._INDEX, result.index()), +                            .field(Fields._TYPE, result.type()), +                            .field(Fields._ID, result.id()), +, +    static final class Fields {, +        static final XContentBuilderString OK = new XContentBuilderString("ok");, +        static final XContentBuilderString _INDEX = new XContentBuilderString("_index");, +        static final XContentBuilderString _TYPE = new XContentBuilderString("_type");, +        static final XContentBuilderString _ID = new XContentBuilderString("_id");, +    }, +]