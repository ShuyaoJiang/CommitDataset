[+++ b/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +    /**, +     * Try to parse an externalValue if any, +     * @param clazz Expected class for external value, +     * @return null if no external value has been set or the value, +     */, +    public <T> T parseExternalValue(Class<T> clazz) {, +        if (!externalValueSet() || externalValue() == null) {, +            return null;, +        }, +, +        if (!clazz.isInstance(externalValue())) {, +            throw new ElasticsearchIllegalArgumentException("illegal external value class [", +                    + externalValue().getClass().getName() + "]. Should be " + clazz.getName());, +        }, +        return (T) externalValue();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +    /**, +     * Try to parse an externalValue if any, +     * @param clazz Expected class for external value, +     * @return null if no external value has been set or the value, +     */, +    public <T> T parseExternalValue(Class<T> clazz) {, +        if (!externalValueSet() || externalValue() == null) {, +            return null;, +        }, +, +        if (!clazz.isInstance(externalValue())) {, +            throw new ElasticsearchIllegalArgumentException("illegal external value class [", +                    + externalValue().getClass().getName() + "]. Should be " + clazz.getName());, +        }, +        return (T) externalValue();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        byte[] value = context.parseExternalValue(byte[].class);, +        if (value == null) {, +            }, +        }, +        if (value == null) {, +            return;, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +    /**, +     * Try to parse an externalValue if any, +     * @param clazz Expected class for external value, +     * @return null if no external value has been set or the value, +     */, +    public <T> T parseExternalValue(Class<T> clazz) {, +        if (!externalValueSet() || externalValue() == null) {, +            return null;, +        }, +, +        if (!clazz.isInstance(externalValue())) {, +            throw new ElasticsearchIllegalArgumentException("illegal external value class [", +                    + externalValue().getClass().getName() + "]. Should be " + clazz.getName());, +        }, +        return (T) externalValue();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        byte[] value = context.parseExternalValue(byte[].class);, +        if (value == null) {, +            }, +        }, +        if (value == null) {, +            return;, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +, +        Boolean value = context.parseExternalValue(Boolean.class);, +        if (value == null) {, +                    value = nullValue;, +                value = context.parser().booleanValue();, +        }, +, +        fields.add(new Field(names.indexName(), value ? "T" : "F", fieldType));, +++ b/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +    /**, +     * Try to parse an externalValue if any, +     * @param clazz Expected class for external value, +     * @return null if no external value has been set or the value, +     */, +    public <T> T parseExternalValue(Class<T> clazz) {, +        if (!externalValueSet() || externalValue() == null) {, +            return null;, +        }, +, +        if (!clazz.isInstance(externalValue())) {, +            throw new ElasticsearchIllegalArgumentException("illegal external value class [", +                    + externalValue().getClass().getName() + "]. Should be " + clazz.getName());, +        }, +        return (T) externalValue();, +    }]