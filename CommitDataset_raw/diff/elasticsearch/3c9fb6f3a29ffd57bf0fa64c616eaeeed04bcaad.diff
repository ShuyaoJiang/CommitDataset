[+++ b/core/pom.xml, +        <version>2.0.0-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>2.0.0-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_0_0_ID = 2000099;, +    public static final Version V_2_0_0 = new Version(V_2_0_0_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final Version CURRENT = V_2_0_0;, +            case V_2_0_0_ID:, +                return V_2_0_0;, +++ b/core/pom.xml, +        <version>2.0.0-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_0_0_ID = 2000099;, +    public static final Version V_2_0_0 = new Version(V_2_0_0_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final Version CURRENT = V_2_0_0;, +            case V_2_0_0_ID:, +                return V_2_0_0;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/ShardUpgradeResponse.java, +    private org.apache.lucene.util.Version version;, +    ShardUpgradeResponse(ShardId shardId, boolean primary, org.apache.lucene.util.Version version) {, +        this.version = version;, +    public org.apache.lucene.util.Version version() {, +        return this.version;, +            version = org.apache.lucene.util.Version.parse(in.readString());, +            throw new IOException("failed to parse lucene version [" + version + "]", ex);, +        out.writeString(version.toString());, +++ b/core/pom.xml, +        <version>2.0.0-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_0_0_ID = 2000099;, +    public static final Version V_2_0_0 = new Version(V_2_0_0_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final Version CURRENT = V_2_0_0;, +            case V_2_0_0_ID:, +                return V_2_0_0;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/ShardUpgradeResponse.java, +    private org.apache.lucene.util.Version version;, +    ShardUpgradeResponse(ShardId shardId, boolean primary, org.apache.lucene.util.Version version) {, +        this.version = version;, +    public org.apache.lucene.util.Version version() {, +        return this.version;, +            version = org.apache.lucene.util.Version.parse(in.readString());, +            throw new IOException("failed to parse lucene version [" + version + "]", ex);, +        out.writeString(version.toString());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.apache.lucene.util.Version;, +        Map<String, Version> versions = newHashMap();, +                Version version = versions.get(index);, +                if (version == null || shardUpgradeResponse.version().onOrAfter(version) == false) {, +                    versions.put(index, shardUpgradeResponse.version());, +        Map<String, String> updatedVersions = newHashMap();, +        for (Map.Entry<String, Version> versionEntry : versions.entrySet()) {, +                updatedVersions.put(index, versionEntry.getValue().toString());, +        org.apache.lucene.util.Version version = indexShard.upgrade(request.upgradeRequest());, +        return new ShardUpgradeResponse(request.shardId(), indexShard.routingEntry().primary(), version);, +++ b/core/pom.xml, +        <version>2.0.0-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_0_0_ID = 2000099;, +    public static final Version V_2_0_0 = new Version(V_2_0_0_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final Version CURRENT = V_2_0_0;, +            case V_2_0_0_ID:, +                return V_2_0_0;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/ShardUpgradeResponse.java, +    private org.apache.lucene.util.Version version;, +    ShardUpgradeResponse(ShardId shardId, boolean primary, org.apache.lucene.util.Version version) {, +        this.version = version;, +    public org.apache.lucene.util.Version version() {, +        return this.version;, +            version = org.apache.lucene.util.Version.parse(in.readString());, +            throw new IOException("failed to parse lucene version [" + version + "]", ex);, +        out.writeString(version.toString());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.apache.lucene.util.Version;, +        Map<String, Version> versions = newHashMap();, +                Version version = versions.get(index);, +                if (version == null || shardUpgradeResponse.version().onOrAfter(version) == false) {, +                    versions.put(index, shardUpgradeResponse.version());, +        Map<String, String> updatedVersions = newHashMap();, +        for (Map.Entry<String, Version> versionEntry : versions.entrySet()) {, +                updatedVersions.put(index, versionEntry.getValue().toString());, +        org.apache.lucene.util.Version version = indexShard.upgrade(request.upgradeRequest());, +        return new ShardUpgradeResponse(request.shardId(), indexShard.routingEntry().primary(), version);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeResponse.java, +    private Map<String, String> versions;, +    UpgradeResponse(Map<String, String> versions, int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures) {, +            String version = in.readString();, +            versions.put(index, version);, +        for(Map.Entry<String, String> entry : versions.entrySet()) {, +            out.writeString(entry.getValue());, +    public Map<String, String> versions() {, +++ b/core/pom.xml, +        <version>2.0.0-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_0_0_ID = 2000099;, +    public static final Version V_2_0_0 = new Version(V_2_0_0_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final Version CURRENT = V_2_0_0;, +            case V_2_0_0_ID:, +                return V_2_0_0;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/ShardUpgradeResponse.java]