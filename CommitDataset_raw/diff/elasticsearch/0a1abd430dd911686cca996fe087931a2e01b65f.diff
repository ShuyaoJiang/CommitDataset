[+++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksRequest;, +import org.elasticsearch.tasks.TaskCancelledException;, +import org.elasticsearch.tasks.TaskManager;, +    private Logger logger;, +    private TaskManager taskManager;, +     * <p>, +    void init(PersistentTasksService persistentTasksService, TaskManager taskManager, Logger logger, long persistentTaskId, long, +            allocationId) {, +        this.logger = logger;, +        this.taskManager = taskManager;, +        return state.compareAndSet(AllocatedPersistentTask.State.STARTED, AllocatedPersistentTask.State.PENDING_CANCEL);, +        PENDING_CANCEL, // the task is cancelled on master, cancelling it locally, +, +    public void markAsCompleted() {, +        completeAndNotifyIfNeeded(null);, +    }, +, +    public void markAsFailed(Exception e) {, +        if (CancelTasksRequest.DEFAULT_REASON.equals(getReasonCancelled())) {, +            completeAndNotifyIfNeeded(null);, +        } else {, +            completeAndNotifyIfNeeded(e);, +        }, +, +    }, +, +    private void completeAndNotifyIfNeeded(@Nullable Exception failure) {, +        State prevState = state.getAndSet(AllocatedPersistentTask.State.COMPLETED);, +        if (prevState == State.COMPLETED) {, +            logger.warn("attempt to complete task {} in the {} state", getPersistentTaskId(), prevState);, +        } else {, +            if (failure != null) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage(, +                        "task {} failed with an exception", getPersistentTaskId()), failure);, +            }, +            try {, +                this.failure = failure;, +                if (prevState == State.STARTED) {, +                    logger.trace("sending notification for completed task {}", getPersistentTaskId());, +                    persistentTasksService.sendCompletionNotification(getPersistentTaskId(), failure, new, +                            ActionListener<PersistentTasksCustomMetaData.PersistentTask<?>>() {, +                                @Override, +                                public void onResponse(PersistentTasksCustomMetaData.PersistentTask<?> persistentTask) {, +                                    logger.trace("notification for task {} was successful", getId());, +                                }, +, +                                @Override, +                                public void onFailure(Exception e) {, +                                    logger.warn((Supplier<?>) () ->, +                                            new ParameterizedMessage("notification for task {} failed", getPersistentTaskId()), e);, +                                }, +                            });, +                }, +            } finally {, +                taskManager.unregister(this);, +            }, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksRequest;, +import org.elasticsearch.tasks.TaskCancelledException;, +import org.elasticsearch.tasks.TaskManager;, +    private Logger logger;, +    private TaskManager taskManager;, +     * <p>, +    void init(PersistentTasksService persistentTasksService, TaskManager taskManager, Logger logger, long persistentTaskId, long, +            allocationId) {, +        this.logger = logger;, +        this.taskManager = taskManager;, +        return state.compareAndSet(AllocatedPersistentTask.State.STARTED, AllocatedPersistentTask.State.PENDING_CANCEL);, +        PENDING_CANCEL, // the task is cancelled on master, cancelling it locally, +, +    public void markAsCompleted() {, +        completeAndNotifyIfNeeded(null);, +    }, +, +    public void markAsFailed(Exception e) {, +        if (CancelTasksRequest.DEFAULT_REASON.equals(getReasonCancelled())) {, +            completeAndNotifyIfNeeded(null);, +        } else {, +            completeAndNotifyIfNeeded(e);, +        }, +, +    }, +, +    private void completeAndNotifyIfNeeded(@Nullable Exception failure) {, +        State prevState = state.getAndSet(AllocatedPersistentTask.State.COMPLETED);, +        if (prevState == State.COMPLETED) {, +            logger.warn("attempt to complete task {} in the {} state", getPersistentTaskId(), prevState);, +        } else {, +            if (failure != null) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage(, +                        "task {} failed with an exception", getPersistentTaskId()), failure);]