[+++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +            logger.info("Performing LicensingClientNotificationJob");, +, +            } else {, +                logger.info("skip notification [STATE_NOT_RECOVERED_BLOCK]");, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +            logger.info("Performing LicensingClientNotificationJob");, +, +            } else {, +                logger.info("skip notification [STATE_NOT_RECOVERED_BLOCK]");, +++ b/src/test/java/org/elasticsearch/license/plugin/AbstractLicensesIntegrationTests.java, +import org.elasticsearch.common.base.Predicate;, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +import org.elasticsearch.test.InternalTestCluster;, +import java.util.concurrent.TimeUnit;, +import static org.hamcrest.CoreMatchers.equalTo;, +, +    protected void assertLicenseManagerEnabledFeatureFor(final String feature) throws InterruptedException {, +        assertLicenseManagerStatusFor(feature, true);, +    }, +, +    protected void assertLicenseManagerDisabledFeatureFor(final String feature) throws InterruptedException {, +        assertLicenseManagerStatusFor(feature, false);, +    }, +, +    protected void assertLicenseManagerStatusFor(final String feature, final boolean expectedEnabled) throws InterruptedException {, +        assertThat(awaitBusy(new Predicate<Object>() {, +            @Override, +            public boolean apply(Object o) {, +                for (LicensesManagerService managerService : licensesManagerServices()) {, +                    if (expectedEnabled != managerService.enabledFeatures().contains(feature)) {, +                        return false;, +                    }, +                }, +                return true;, +            }, +        }, 2, TimeUnit.SECONDS), equalTo(true));, +    }, +, +    protected void assertConsumerPluginDisableNotification(int timeoutInSec) throws InterruptedException {, +        assertConsumerPluginNotification(false, timeoutInSec);, +    }, +    protected void assertConsumerPluginEnableNotification(int timeoutInSec) throws InterruptedException {, +        assertConsumerPluginNotification(true, timeoutInSec);, +    }, +, +    protected void assertConsumerPluginNotification(final boolean expectedEnabled, int timeoutInSec) throws InterruptedException {, +        assertThat(awaitBusy(new Predicate<Object>() {, +            @Override, +            public boolean apply(Object o) {, +                for (TestPluginService pluginService : consumerPluginServices()) {, +                    if (expectedEnabled != pluginService.enabled()) {, +                        return false;, +                    }, +                }, +                return true;, +            }, +        }, timeoutInSec, TimeUnit.SECONDS), equalTo(true));, +    }, +, +    private Iterable<TestPluginService> consumerPluginServices() {, +        final InternalTestCluster clients = internalCluster();, +        return clients.getDataNodeInstances(TestPluginService.class);, +    }, +, +    private Iterable<LicensesManagerService> licensesManagerServices() {, +        final InternalTestCluster clients = internalCluster();, +        return clients.getDataNodeInstances(LicensesManagerService.class);, +    }, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +            logger.info("Performing LicensingClientNotificationJob");, +, +            } else {, +                logger.info("skip notification [STATE_NOT_RECOVERED_BLOCK]");, +++ b/src/test/java/org/elasticsearch/license/plugin/AbstractLicensesIntegrationTests.java, +import org.elasticsearch.common.base.Predicate;, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +import org.elasticsearch.test.InternalTestCluster;, +import java.util.concurrent.TimeUnit;, +import static org.hamcrest.CoreMatchers.equalTo;, +, +    protected void assertLicenseManagerEnabledFeatureFor(final String feature) throws InterruptedException {, +        assertLicenseManagerStatusFor(feature, true);, +    }, +, +    protected void assertLicenseManagerDisabledFeatureFor(final String feature) throws InterruptedException {, +        assertLicenseManagerStatusFor(feature, false);, +    }, +, +    protected void assertLicenseManagerStatusFor(final String feature, final boolean expectedEnabled) throws InterruptedException {, +        assertThat(awaitBusy(new Predicate<Object>() {, +            @Override, +            public boolean apply(Object o) {, +                for (LicensesManagerService managerService : licensesManagerServices()) {, +                    if (expectedEnabled != managerService.enabledFeatures().contains(feature)) {, +                        return false;, +                    }, +                }, +                return true;, +            }]