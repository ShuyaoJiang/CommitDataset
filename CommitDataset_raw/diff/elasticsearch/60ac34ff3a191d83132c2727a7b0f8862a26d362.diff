[+++ b/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    private String queryName;, +, +    /**, +     * Sets the query name for the filter that can be used when searching for matched_filters per hit., +     */, +    public BoolQueryBuilder queryName(String queryName) {, +        this.queryName = queryName;, +        return this;, +    }, +, +        if (queryName != null) {, +            builder.field("_name", queryName);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    private String queryName;, +, +    /**, +     * Sets the query name for the filter that can be used when searching for matched_filters per hit., +     */, +    public BoolQueryBuilder queryName(String queryName) {, +        this.queryName = queryName;, +        return this;, +    }, +, +        if (queryName != null) {, +            builder.field("_name", queryName);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryParser.java, +        String queryName = null;, +        , +                } else if ("_name".equals(currentFieldName)) {, +                    queryName = parser.text();, +        BooleanQuery booleanQuery = new BooleanQuery(disableCoord);, +            booleanQuery.add(clause);, +        booleanQuery.setBoost(boost);, +        Queries.applyMinimumShouldMatch(booleanQuery, minimumShouldMatch);, +        Query query = optimizeQuery(adjustPureNegative ? fixNegativeQueryIfNeeded(booleanQuery) : booleanQuery);, +        if (queryName != null) {, +            parseContext.addNamedQuery(queryName, query);, +        }, +        return query;, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    private String queryName;, +, +    /**, +     * Sets the query name for the filter that can be used when searching for matched_filters per hit., +     */, +    public BoolQueryBuilder queryName(String queryName) {, +        this.queryName = queryName;, +        return this;, +    }, +, +        if (queryName != null) {, +            builder.field("_name", queryName);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryParser.java, +        String queryName = null;, +        , +                } else if ("_name".equals(currentFieldName)) {, +                    queryName = parser.text();, +        BooleanQuery booleanQuery = new BooleanQuery(disableCoord);, +            booleanQuery.add(clause);, +        booleanQuery.setBoost(boost);, +        Queries.applyMinimumShouldMatch(booleanQuery, minimumShouldMatch);, +        Query query = optimizeQuery(adjustPureNegative ? fixNegativeQueryIfNeeded(booleanQuery) : booleanQuery);, +        if (queryName != null) {, +            parseContext.addNamedQuery(queryName, query);, +        }, +        return query;, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +import java.io.IOException;, +, +    private String queryName;, +, +    /**, +     * Sets the query name for the filter that can be used when searching for matched_filters per hit., +     */, +    public CommonTermsQueryBuilder queryName(String queryName) {, +        this.queryName = queryName;, +        return this;, +    }, +, +        if (queryName != null) {, +            builder.field("_name", queryName);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    private String queryName;, +, +    /**, +     * Sets the query name for the filter that can be used when searching for matched_filters per hit., +     */, +    public BoolQueryBuilder queryName(String queryName) {, +        this.queryName = queryName;, +        return this;, +    }, +, +        if (queryName != null) {, +            builder.field("_name", queryName);, +        }]