[+++ b/src/test/java/org/elasticsearch/test/integration/document/DocumentActionsTests.java, +++ b/src/test/java/org/elasticsearch/test/integration/document/DocumentActionsTests.java, +++ b/src/test/java/org/elasticsearch/test/integration/update/UpdateTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.integration.update;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.action.update.UpdateResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.engine.DocumentMissingException;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.testng.annotations.AfterClass;, +import org.testng.annotations.BeforeClass;, +import org.testng.annotations.Test;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.*;, +, +public class UpdateTests extends AbstractNodesTests {, +    private Client client;, +, +    @BeforeClass, +    public void startNodes() throws Exception {, +        startNode("node1", nodeSettings());, +        startNode("node2", nodeSettings());, +        client = getClient();, +    }, +, +    protected void createIndex() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +        logger.info("--> creating index test");, +        client.admin().indices().prepareCreate("test"), +                .addMapping("type1", XContentFactory.jsonBuilder(), +                        .startObject(), +                        .startObject("type1"), +                        .startObject("_timestamp").field("enabled", true).field("store", "yes").endObject(), +                        .startObject("_ttl").field("enabled", true).field("store", "yes").endObject(), +                        .endObject(), +                        .endObject()), +                .execute().actionGet();, +    }, +, +    protected Settings nodeSettings() {, +        return ImmutableSettings.Builder.EMPTY_SETTINGS;, +    }, +, +    protected String getConcreteIndexName() {, +        return "test";, +    }, +, +    @AfterClass, +    public void closeNodes() {, +        client.close();, +        closeAllNodes();, +    }, +, +    protected Client getClient() {, +        return client("node1");, +    }, +, +    @Test, +    public void testUpdate() throws Exception {, +        createIndex();, +        ClusterHealthResponse clusterHealth = client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +        assertThat(clusterHealth.timedOut(), equalTo(false));, +        assertThat(clusterHealth.status(), equalTo(ClusterHealthStatus.GREEN));, +, +        try {, +            client.prepareUpdate("test", "type1", "1").setScript("ctx._source.field++").execute().actionGet();, +            assert false;, +        } catch (DocumentMissingException e) {]