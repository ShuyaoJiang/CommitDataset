[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +     * The closure takes three arguments, the NodeInfo for the first node in the cluster,, +     * the NodeInfo for the node current being configured, an AntBuilder which may be used, +     * to wait on conditions before returning., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +     * The closure takes three arguments, the NodeInfo for the first node in the cluster,, +     * the NodeInfo for the node current being configured, an AntBuilder which may be used, +     * to wait on conditions before returning., +++ b/qa/rolling-upgrade/build.gradle, +  configureUpgradeCluster("oneThirdUpgradedTestCluster", oldClusterTestRunner, 0,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oldClusterTest.nodes.get(1).transportUri() + ',' + oldClusterTest.nodes.get(2).transportUri() }), +  configureUpgradeCluster("twoThirdsUpgradedTestCluster", oneThirdUpgradedTestRunner, 1,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oldClusterTest.nodes.get(2).transportUri() + ',' + oneThirdUpgradedTest.nodes.get(0).transportUri() }), +  configureUpgradeCluster("upgradedClusterTestCluster", twoThirdsUpgradedTestRunner, 2,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oneThirdUpgradedTest.nodes.get(0).transportUri() + ',' + twoThirdsUpgradedTest.nodes.get(0).transportUri() }), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +     * The closure takes three arguments, the NodeInfo for the first node in the cluster,, +     * the NodeInfo for the node current being configured, an AntBuilder which may be used, +     * to wait on conditions before returning., +++ b/qa/rolling-upgrade/build.gradle, +  configureUpgradeCluster("oneThirdUpgradedTestCluster", oldClusterTestRunner, 0,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oldClusterTest.nodes.get(1).transportUri() + ',' + oldClusterTest.nodes.get(2).transportUri() }), +  configureUpgradeCluster("twoThirdsUpgradedTestCluster", oneThirdUpgradedTestRunner, 1,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oldClusterTest.nodes.get(2).transportUri() + ',' + oneThirdUpgradedTest.nodes.get(0).transportUri() }), +  configureUpgradeCluster("upgradedClusterTestCluster", twoThirdsUpgradedTestRunner, 2,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oneThirdUpgradedTest.nodes.get(0).transportUri() + ',' + twoThirdsUpgradedTest.nodes.get(0).transportUri() }), +++ b/x-pack/qa/rolling-upgrade-basic/build.gradle, +    configureUpgradeCluster("oneThirdUpgradedTestCluster", oldClusterTestRunner, 0,, +        // Use all running nodes as seed nodes so there is no race between pinging and the tests, +        { oldClusterTest.nodes.get(1).transportUri() + ',' + oldClusterTest.nodes.get(2).transportUri() }), +    configureUpgradeCluster("twoThirdsUpgradedTestCluster", oneThirdUpgradedTestRunner, 1,, +        // Use all running nodes as seed nodes so there is no race between pinging and the tests, +        { oldClusterTest.nodes.get(2).transportUri() + ',' + oneThirdUpgradedTest.nodes.get(0).transportUri() }), +    configureUpgradeCluster("upgradedClusterTestCluster", twoThirdsUpgradedTestRunner, 2,, +        // Use all running nodes as seed nodes so there is no race between pinging and the tests, +        { oneThirdUpgradedTest.nodes.get(0).transportUri() + ',' + twoThirdsUpgradedTest.nodes.get(0).transportUri() }), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +     * The closure takes three arguments, the NodeInfo for the first node in the cluster,, +     * the NodeInfo for the node current being configured, an AntBuilder which may be used, +     * to wait on conditions before returning., +++ b/qa/rolling-upgrade/build.gradle, +  configureUpgradeCluster("oneThirdUpgradedTestCluster", oldClusterTestRunner, 0,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oldClusterTest.nodes.get(1).transportUri() + ',' + oldClusterTest.nodes.get(2).transportUri() }), +  configureUpgradeCluster("twoThirdsUpgradedTestCluster", oneThirdUpgradedTestRunner, 1,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oldClusterTest.nodes.get(2).transportUri() + ',' + oneThirdUpgradedTest.nodes.get(0).transportUri() }), +  configureUpgradeCluster("upgradedClusterTestCluster", twoThirdsUpgradedTestRunner, 2,, +    // Use all running nodes as seed nodes so there is no race between pinging and the tests, +    { oneThirdUpgradedTest.nodes.get(0).transportUri() + ',' + twoThirdsUpgradedTest.nodes.get(0).transportUri() }), +++ b/x-pack/qa/rolling-upgrade-basic/build.gradle, +    configureUpgradeCluster("oneThirdUpgradedTestCluster", oldClusterTestRunner, 0,, +        // Use all running nodes as seed nodes so there is no race between pinging and the tests, +        { oldClusterTest.nodes.get(1).transportUri() + ',' + oldClusterTest.nodes.get(2).transportUri() }), +    configureUpgradeCluster("twoThirdsUpgradedTestCluster", oneThirdUpgradedTestRunner, 1,, +        // Use all running nodes as seed nodes so there is no race between pinging and the tests, +        { oldClusterTest.nodes.get(2).transportUri() + ',' + oneThirdUpgradedTest.nodes.get(0).transportUri() }), +    configureUpgradeCluster("upgradedClusterTestCluster", twoThirdsUpgradedTestRunner, 2,, +        // Use all running nodes as seed nodes so there is no race between pinging and the tests, +        { oneThirdUpgradedTest.nodes.get(0).transportUri() + ',' + twoThirdsUpgradedTest.nodes.get(0).transportUri() }), +++ b/x-pack/qa/rolling-upgrade/build.gradle, +    configureUpgradeCluster("oneThirdUpgradedTestCluster", oldClusterTestRunner, 0,, +      // Use all running nodes as seed nodes so there is no race between pinging and the tests, +      { oldClusterTest.nodes.get(1).transportUri() + ',' + oldClusterTest.nodes.get(2).transportUri() }), +    configureUpgradeCluster("twoThirdsUpgradedTestCluster", oneThirdUpgradedTestRunner, 1,, +      // Use all running nodes as seed nodes so there is no race between pinging and the tests, +      { oldClusterTest.nodes.get(2).transportUri() + ',' + oneThirdUpgradedTest.nodes.get(0).transportUri() }), +    configureUpgradeCluster("upgradedClusterTestCluster", twoThirdsUpgradedTestRunner, 2,, +      // Use all running nodes as seed nodes so there is no race between pinging and the tests, +      { oneThirdUpgradedTest.nodes.get(0).transportUri() + ',' + twoThirdsUpgradedTest.nodes.get(0).transportUri() })]