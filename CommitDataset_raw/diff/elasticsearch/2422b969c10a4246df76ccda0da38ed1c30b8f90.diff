[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +++ b/modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/matrix/MatrixAggregationPlugin.java, +import org.elasticsearch.search.SearchModule.AggregationSpec;, +        searchModule.registerAggregation(new AggregationSpec(MatrixStatsAggregationBuilder::new, new MatrixStatsParser(),, +            MatrixStatsAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalMatrixStats::new));, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +++ b/modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/matrix/MatrixAggregationPlugin.java, +import org.elasticsearch.search.SearchModule.AggregationSpec;, +        searchModule.registerAggregation(new AggregationSpec(MatrixStatsAggregationBuilder::new, new MatrixStatsParser(),, +            MatrixStatsAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalMatrixStats::new));, +++ b/modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/matrix/stats/InternalMatrixStats.java, +import static java.util.Collections.emptyMap;, +, +    private final RunningStats stats;, +    private final MatrixStatsResults results;, +    /**, +     * Read from a stream., +     */, +    public InternalMatrixStats(StreamInput in) throws IOException {, +        stats = in.readOptionalWriteable(RunningStats::new);, +        results = in.readOptionalWriteable(MatrixStatsResults::new);, +    }, +, +    protected void doWriteTo(StreamOutput out) throws IOException {, +        out.writeOptionalWriteable(stats);, +        out.writeOptionalWriteable(results);, +    }, +, +    @Override, +    public String getWriteableName() {, +        return MatrixStatsAggregationBuilder.NAME;, +                return emptyMap();, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +++ b/modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/matrix/MatrixAggregationPlugin.java, +import org.elasticsearch.search.SearchModule.AggregationSpec;, +        searchModule.registerAggregation(new AggregationSpec(MatrixStatsAggregationBuilder::new, new MatrixStatsParser(),, +            MatrixStatsAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalMatrixStats::new));, +++ b/modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/matrix/stats/InternalMatrixStats.java, +import static java.util.Collections.emptyMap;, +, +    private final RunningStats stats;, +    private final MatrixStatsResults results;, +    /**, +     * Read from a stream., +     */, +    public InternalMatrixStats(StreamInput in) throws IOException {, +        stats = in.readOptionalWriteable(RunningStats::new);, +        results = in.readOptionalWriteable(MatrixStatsResults::new);, +    }, +, +    protected void doWriteTo(StreamOutput out) throws IOException {, +        out.writeOptionalWriteable(stats);, +        out.writeOptionalWriteable(results);, +    }, +, +    @Override, +    public String getWriteableName() {, +        return MatrixStatsAggregationBuilder.NAME;, +                return emptyMap();, +++ b/modules/aggs-matrix-stats/src/main/java/org/elasticsearch/search/aggregations/matrix/stats/MatrixStatsAggregationBuilder.java, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;, +    public static final String NAME = "matrix_stats";, +    public static final Type TYPE = new Type(NAME);, +        super(name, TYPE, ValuesSourceType.NUMERIC, ValueType.NUMERIC);, +        super(in, TYPE, ValuesSourceType.NUMERIC, ValueType.NUMERIC);]