[+++ b/core/pom.xml, +                <directory>${elasticsearch.tools.directory}/rest-api-spec</directory>, +++ b/core/pom.xml, +                <directory>${elasticsearch.tools.directory}/rest-api-spec</directory>, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.unit.TimeValue;, +    TimeValue taskMaxWaitingTime = TimeValue.timeValueMillis(0);, +    double activeShardsPercent = 100;, +        this(clusterName, concreteIndices, clusterState, -1, -1, -1, TimeValue.timeValueHours(0));, +                                 int numberOfInFlightFetch, int delayedUnassignedShards, TimeValue taskMaxWaitingTime) {, +        this.clusterName = clusterName;, +        this.numberOfPendingTasks = numberOfPendingTasks;, +        this.numberOfInFlightFetch = numberOfInFlightFetch;, +        this.taskMaxWaitingTime = taskMaxWaitingTime;, +, +        // shortcut on green, +        if (status.equals(ClusterHealthStatus.GREEN)) {, +            this.activeShardsPercent = 100;, +        } else {, +            List<ShardRouting> shardRoutings = clusterState.getRoutingTable().allShards();, +            int activeShardCount = 0;, +            int totalShardCount = 0;, +            for (ShardRouting shardRouting : shardRoutings) {, +                if (shardRouting.active()) activeShardCount++;, +                totalShardCount++;, +            }, +            this.activeShardsPercent = (((double) activeShardCount) / totalShardCount) * 100;, +        }, +    /**, +     *, +     * @return The maximum wait time of all tasks in the queue, +     */, +    public TimeValue getTaskMaxWaitingTime() {, +        return taskMaxWaitingTime;, +    }, +, +    /**, +     * The percentage of active shards, should be 100% in a green system, +     */, +    public double getActiveShardsPercent() {, +        return activeShardsPercent;, +    }, +, +, +        activeShardsPercent = in.readDouble();, +        taskMaxWaitingTime = TimeValue.readTimeValue(in);, +        out.writeDouble(activeShardsPercent);, +        taskMaxWaitingTime.writeTo(out);, +        static final XContentBuilderString TASK_MAX_WAIT_TIME_IN_QUEUE = new XContentBuilderString("task_max_waiting_in_queue");, +        static final XContentBuilderString TASK_MAX_WAIT_TIME_IN_QUEUE_IN_MILLIS = new XContentBuilderString("task_max_waiting_in_queue_millis");, +        static final XContentBuilderString ACTIVE_SHARDS_PERCENT_AS_NUMBER = new XContentBuilderString("active_shards_percent_as_number");, +        static final XContentBuilderString ACTIVE_SHARDS_PERCENT = new XContentBuilderString("active_shards_percent");, +        builder.timeValueField(Fields.TASK_MAX_WAIT_TIME_IN_QUEUE_IN_MILLIS, Fields.TASK_MAX_WAIT_TIME_IN_QUEUE, getTaskMaxWaitingTime());, +        builder.percentageField(Fields.ACTIVE_SHARDS_PERCENT_AS_NUMBER, Fields.ACTIVE_SHARDS_PERCENT, getActiveShardsPercent());, +++ b/core/pom.xml, +                <directory>${elasticsearch.tools.directory}/rest-api-spec</directory>, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.unit.TimeValue;, +    TimeValue taskMaxWaitingTime = TimeValue.timeValueMillis(0);, +    double activeShardsPercent = 100;, +        this(clusterName, concreteIndices, clusterState, -1, -1, -1, TimeValue.timeValueHours(0));, +                                 int numberOfInFlightFetch, int delayedUnassignedShards, TimeValue taskMaxWaitingTime) {, +        this.clusterName = clusterName;, +        this.numberOfPendingTasks = numberOfPendingTasks;, +        this.numberOfInFlightFetch = numberOfInFlightFetch;, +        this.taskMaxWaitingTime = taskMaxWaitingTime;, +, +        // shortcut on green, +        if (status.equals(ClusterHealthStatus.GREEN)) {, +            this.activeShardsPercent = 100;, +        } else {, +            List<ShardRouting> shardRoutings = clusterState.getRoutingTable().allShards();, +            int activeShardCount = 0;, +            int totalShardCount = 0;, +            for (ShardRouting shardRouting : shardRoutings) {, +                if (shardRouting.active()) activeShardCount++;, +                totalShardCount++;, +            }, +            this.activeShardsPercent = (((double) activeShardCount) / totalShardCount) * 100;, +        }, +    /**, +     *, +     * @return The maximum wait time of all tasks in the queue, +     */, +    public TimeValue getTaskMaxWaitingTime() {, +        return taskMaxWaitingTime;, +    }, +, +    /**, +     * The percentage of active shards, should be 100% in a green system, +     */, +    public double getActiveShardsPercent() {, +        return activeShardsPercent;, +    }, +, +, +        activeShardsPercent = in.readDouble();, +        taskMaxWaitingTime = TimeValue.readTimeValue(in);]