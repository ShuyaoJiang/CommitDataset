[+++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/ClusterAlertHttpResource.java, +                    "/_watcher/watch", watchId.get(), Collections.emptyMap(), this::watchToHttpEntity, "monitoring cluster alert",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/ClusterAlertHttpResource.java, +                    "/_watcher/watch", watchId.get(), Collections.emptyMap(), this::watchToHttpEntity, "monitoring cluster alert",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PipelineHttpResource.java, +import java.util.Collections;, +                    "/_ingest/pipeline", pipelineName, Collections.emptyMap(), this::pipelineToHttpEntity, "monitoring pipeline",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/ClusterAlertHttpResource.java, +                    "/_watcher/watch", watchId.get(), Collections.emptyMap(), this::watchToHttpEntity, "monitoring cluster alert",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PipelineHttpResource.java, +import java.util.Collections;, +                    "/_ingest/pipeline", pipelineName, Collections.emptyMap(), this::pipelineToHttpEntity, "monitoring pipeline",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PublishableHttpResource.java, +    protected final Map<String, String> defaultParameters;, +            this.defaultParameters = Collections.unmodifiableMap(parameters);, +            this.defaultParameters = baseParameters;, +    public Map<String, String> getDefaultParameters() {, +        return defaultParameters;, +        addDefaultParameters(request);, +, +     * @param parameters Map of query string parameters, if any., +                               final Map<String, String> parameters,, +        addDefaultParameters(request);, +        addParameters(request, parameters);, +        addDefaultParameters(request);, +        if (false == defaultParameters.containsKey("ignore")) {, +    private void addDefaultParameters(final Request request) {, +        this.addParameters(request, defaultParameters);, +    }, +, +    private void addParameters(final Request request, final Map<String, String> parameters) {, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/ClusterAlertHttpResource.java, +                    "/_watcher/watch", watchId.get(), Collections.emptyMap(), this::watchToHttpEntity, "monitoring cluster alert",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PipelineHttpResource.java, +import java.util.Collections;, +                    "/_ingest/pipeline", pipelineName, Collections.emptyMap(), this::pipelineToHttpEntity, "monitoring pipeline",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PublishableHttpResource.java, +    protected final Map<String, String> defaultParameters;, +            this.defaultParameters = Collections.unmodifiableMap(parameters);, +            this.defaultParameters = baseParameters;, +    public Map<String, String> getDefaultParameters() {, +        return defaultParameters;, +        addDefaultParameters(request);, +, +     * @param parameters Map of query string parameters, if any., +                               final Map<String, String> parameters,, +        addDefaultParameters(request);, +        addParameters(request, parameters);, +        addDefaultParameters(request);, +        if (false == defaultParameters.containsKey("ignore")) {, +    private void addDefaultParameters(final Request request) {, +        this.addParameters(request, defaultParameters);, +    }, +, +    private void addParameters(final Request request, final Map<String, String> parameters) {, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/TemplateHttpResource.java, +        Map<String, String> parameters = Collections.singletonMap(INCLUDE_TYPE_NAME_PARAMETER, "true");, +                    "/_template", templateName, parameters, this::templateToHttpEntity, "monitoring template",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/ClusterAlertHttpResource.java, +                    "/_watcher/watch", watchId.get(), Collections.emptyMap(), this::watchToHttpEntity, "monitoring cluster alert",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PipelineHttpResource.java, +import java.util.Collections;, +                    "/_ingest/pipeline", pipelineName, Collections.emptyMap(), this::pipelineToHttpEntity, "monitoring pipeline",, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PublishableHttpResource.java, +    protected final Map<String, String> defaultParameters;, +            this.defaultParameters = Collections.unmodifiableMap(parameters);, +            this.defaultParameters = baseParameters;, +    public Map<String, String> getDefaultParameters() {, +        return defaultParameters;, +        addDefaultParameters(request);, +, +     * @param parameters Map of query string parameters, if any., +                               final Map<String, String> parameters,, +        addDefaultParameters(request);, +        addParameters(request, parameters);, +        addDefaultParameters(request);, +        if (false == defaultParameters.containsKey("ignore")) {, +    private void addDefaultParameters(final Request request) {, +        this.addParameters(request, defaultParameters);, +    }, +, +    private void addParameters(final Request request, final Map<String, String> parameters) {, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/TemplateHttpResource.java, +        Map<String, String> parameters = Collections.singletonMap(INCLUDE_TYPE_NAME_PARAMETER, "true");, +                    "/_template", templateName, parameters, this::templateToHttpEntity, "monitoring template",, +++ b/x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/AbstractPublishableHttpResourceTestCase.java, +import java.util.HashMap;, +        assertCheckWithException(resource, getParameters(resource.getDefaultParameters()), resourceBasePath, resourceName);, +        addParameters(request, deleteParameters(resource.getDefaultParameters()));, +     * @param parameters Map of query string parameters, if any., +                                         Map<String, String> parameters,, +        doPublishWithStatusCode(resource, resourceBasePath, resourceName, parameters, bodyType, successfulPublishStatus(), true);, +     * @param parameters Map of query string parameters, if any., +                                              Map<String, String> parameters,, +        Map <String, String> allParameters = new HashMap<>();, +        allParameters.putAll(resource.getDefaultParameters());, +        allParameters.putAll(parameters);, +, +        assertThat(request.getValue().getParameters(), is(allParameters));, +        final Map<String, String> parameters = new HashMap<>(resource.getDefaultParameters());]