[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            throw new ParsingException(parser.getTokenLocation(), "[_na] query malformed, no start_object after query name");, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            throw new ParsingException(parser.getTokenLocation(), "[_na] query malformed, no start_object after query name");, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryParseContextTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query;, +, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +import org.elasticsearch.search.SearchModule;, +import org.elasticsearch.test.ESTestCase;, +import org.junit.BeforeClass;, +, +import java.io.IOException;, +import java.util.Optional;, +, +import static java.util.Collections.emptyList;, +, +public class QueryParseContextTests extends ESTestCase {, +, +    private static IndicesQueriesRegistry indicesQueriesRegistry;, +, +    @BeforeClass, +    public static void init() {, +        indicesQueriesRegistry = new SearchModule(Settings.EMPTY, new NamedWriteableRegistry(), false, emptyList()), +                .getQueryParserRegistry();, +    }, +, +    public void testParseTopLevelBuilder() throws IOException {, +        QueryBuilder query = new MatchQueryBuilder("foo", "bar");, +        String requestBody = "{ \"query\" : " + query.toString() + "}";, +        try (XContentParser parser = XContentFactory.xContent(requestBody).createParser(requestBody)) {, +            QueryParseContext context = new QueryParseContext(indicesQueriesRegistry, parser, ParseFieldMatcher.STRICT);, +            QueryBuilder actual = context.parseTopLevelQueryBuilder();, +            assertEquals(query, actual);, +        }, +    }, +, +    public void testParseTopLevelBuilderEmptyObject() throws IOException {, +        String requestBody = "{}";, +        try (XContentParser parser = XContentFactory.xContent(requestBody).createParser(requestBody)) {, +            QueryParseContext context = new QueryParseContext(indicesQueriesRegistry, parser, ParseFieldMatcher.STRICT);, +            QueryBuilder query = context.parseTopLevelQueryBuilder();, +            assertNull(query);, +        }, +    }, +, +    public void testParseTopLevelBuilderUnknownParameter() throws IOException {, +        String requestBody = "{ \"foo\" : \"bar\"}";, +        try (XContentParser parser = XContentFactory.xContent(requestBody).createParser(requestBody)) {, +            QueryParseContext context = new QueryParseContext(indicesQueriesRegistry, parser, ParseFieldMatcher.STRICT);, +            ParsingException exception = expectThrows(ParsingException.class, () ->  context.parseTopLevelQueryBuilder());, +            assertEquals("request does not support [foo]", exception.getMessage());, +        }, +    }, +, +    public void testParseInnerQueryBuilder() throws IOException {, +        QueryBuilder query = new MatchQueryBuilder("foo", "bar");, +        String source = query.toString();, +        try (XContentParser parser = XContentFactory.xContent(source).createParser(source)) {, +            QueryParseContext context = new QueryParseContext(indicesQueriesRegistry, parser, ParseFieldMatcher.STRICT);, +            Optional<QueryBuilder> actual = context.parseInnerQueryBuilder();, +            assertEquals(query, actual.get());, +        }, +    }, +, +    public void testParseInnerQueryBuilderEmptyBody() throws IOException {, +        String source = "{}";, +        try (XContentParser parser = XContentFactory.xContent(source).createParser(source)) {, +            QueryParseContext context = new QueryParseContext(indicesQueriesRegistry, parser, ParseFieldMatcher.EMPTY);, +            Optional<QueryBuilder> emptyQuery = context.parseInnerQueryBuilder();, +            assertFalse(emptyQuery.isPresent());, +        }, +    }, +]