[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +import org.elasticsearch.common.time.DateFormatter;, +    private static final DateFormatter FORMATTER = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +import org.elasticsearch.common.time.DateFormatter;, +    private static final DateFormatter FORMATTER = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER;, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +import org.elasticsearch.common.time.DateFormatter;, +    private static final DateFormatter FORMATTER = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER;, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/common/joda/Joda.java, +import org.elasticsearch.common.time.DateFormatter;, +    public static JodaDateFormatter forPattern(String input) {, +    public static JodaDateFormatter forPattern(String input, Locale locale) {, +            return new JodaDateFormatter(input,, +            return new JodaDateFormatter(input,, +                    formatter = forPattern(input, locale).parser;, +                        JodaDateFormatter currentFormatter = forPattern(formats[i], locale);, +                        DateTimeFormatter currentParser = currentFormatter.parser;, +                            dateTimeFormatter = currentFormatter.printer;, +        return new JodaDateFormatter(input, formatter, formatter);, +    public static DateFormatter getStrictStandardDateFormatter() {, +        return new JodaDateFormatter("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis", formatter, formatter);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +import org.elasticsearch.common.time.DateFormatter;, +    private static final DateFormatter FORMATTER = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER;, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/common/joda/Joda.java, +import org.elasticsearch.common.time.DateFormatter;, +    public static JodaDateFormatter forPattern(String input) {, +    public static JodaDateFormatter forPattern(String input, Locale locale) {, +            return new JodaDateFormatter(input,, +            return new JodaDateFormatter(input,, +                    formatter = forPattern(input, locale).parser;, +                        JodaDateFormatter currentFormatter = forPattern(formats[i], locale);, +                        DateTimeFormatter currentParser = currentFormatter.parser;, +                            dateTimeFormatter = currentFormatter.printer;, +        return new JodaDateFormatter(input, formatter, formatter);, +    public static DateFormatter getStrictStandardDateFormatter() {, +        return new JodaDateFormatter("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis", formatter, formatter);, +++ b/server/src/main/java/org/elasticsearch/common/joda/JodaDateFormatter.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.joda;, +, +import org.elasticsearch.common.time.DateFormatter;, +import org.elasticsearch.common.time.DateMathParser;, +import org.elasticsearch.common.time.DateUtils;, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +import org.joda.time.format.DateTimeFormatter;, +, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.temporal.TemporalAccessor;, +import java.util.Locale;, +, +public class JodaDateFormatter implements DateFormatter {, +    final String pattern;, +, +    final DateTimeFormatter parser;, +, +    final DateTimeFormatter printer;, +, +    public JodaDateFormatter(String pattern, DateTimeFormatter parser, DateTimeFormatter printer) {, +        this.pattern = pattern;, +        this.printer = printer.withDefaultYear(1970);, +        this.parser = parser.withDefaultYear(1970);, +    }, +, +    @Override, +    public TemporalAccessor parse(String input) {, +        DateTime dt = parser.parseDateTime(input);, +        return ZonedDateTime.ofInstant(Instant.ofEpochMilli(dt.getMillis()), DateUtils.dateTimeZoneToZoneId(dt.getZone()));, +    }, +, +    public long parseMillis(String input) {, +        return parser.parseMillis(input);, +    }, +, +    public DateTime parseJoda(String input) {]