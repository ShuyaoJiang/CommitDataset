[+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        List<ClientYamlTestSuite> suites = new ArrayList<>();, +        IllegalArgumentException validationException = null;, +                ClientYamlTestSuite suite = ClientYamlTestSuite.parse(executeableSectionRegistry, api, yamlFile);, +                suites.add(suite);, +                try {, +                    suite.validate();, +                } catch(IllegalArgumentException e) {, +                    if (validationException == null) {, +                        validationException = new IllegalArgumentException("Validation errors for the following test suites:\n- ", +                            + e.getMessage());, +                    } else {, +                        String previousMessage = validationException.getMessage();, +                        Throwable[] suppressed = validationException.getSuppressed();, +                        validationException = new IllegalArgumentException(previousMessage + "\n- " + e.getMessage());, +                        for (Throwable t : suppressed) {, +                            validationException.addSuppressed(t);, +                        }, +                    }, +                    validationException.addSuppressed(e);, +        if (validationException != null) {, +            throw validationException;, +        }, +, +        List<Object[]> tests = new ArrayList<>();, +        for (ClientYamlTestSuite yamlTestSuite : suites) {, +            for (ClientYamlTestSection testSection : yamlTestSuite.getTestSections()) {, +                tests.add(new Object[]{ new ClientYamlTestCandidate(yamlTestSuite, testSection) });, +            }, +        }, +            for (ExecutableSection doSection : testCandidate.getTeardownSection().getDoSections()) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        List<ClientYamlTestSuite> suites = new ArrayList<>();, +        IllegalArgumentException validationException = null;, +                ClientYamlTestSuite suite = ClientYamlTestSuite.parse(executeableSectionRegistry, api, yamlFile);, +                suites.add(suite);, +                try {, +                    suite.validate();, +                } catch(IllegalArgumentException e) {, +                    if (validationException == null) {, +                        validationException = new IllegalArgumentException("Validation errors for the following test suites:\n- ", +                            + e.getMessage());, +                    } else {, +                        String previousMessage = validationException.getMessage();, +                        Throwable[] suppressed = validationException.getSuppressed();, +                        validationException = new IllegalArgumentException(previousMessage + "\n- " + e.getMessage());, +                        for (Throwable t : suppressed) {, +                            validationException.addSuppressed(t);, +                        }, +                    }, +                    validationException.addSuppressed(e);, +        if (validationException != null) {, +            throw validationException;, +        }, +, +        List<Object[]> tests = new ArrayList<>();, +        for (ClientYamlTestSuite yamlTestSuite : suites) {, +            for (ClientYamlTestSection testSection : yamlTestSuite.getTestSections()) {, +                tests.add(new Object[]{ new ClientYamlTestCandidate(yamlTestSuite, testSection) });, +            }, +        }, +            for (ExecutableSection doSection : testCandidate.getTeardownSection().getDoSections()) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/section/ClientYamlTestSection.java, +import java.util.Collections;, +import java.util.Objects;, +        XContentLocation sectionLocation = parser.getTokenLocation();, +        String sectionName = parser.currentName();, +        List<ExecutableSection> executableSections = new ArrayList<>();, +            SkipSection skipSection = SkipSection.parseIfNext(parser);, +                executableSections.add(ExecutableSection.parse(parser));, +                throw new IllegalArgumentException("malformed section [" + sectionName + "] expected [", +            return new ClientYamlTestSection(sectionLocation, sectionName, skipSection, executableSections);, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing test named [" + sectionName + "]", e);, +    private final SkipSection skipSection;, +    ClientYamlTestSection(XContentLocation location, String name, SkipSection skipSection, List<ExecutableSection> executableSections) {, +        this.skipSection = Objects.requireNonNull(skipSection, "skip section cannot be null");, +        this.executableSections = Collections.unmodifiableList(executableSections);, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        List<ClientYamlTestSuite> suites = new ArrayList<>();, +        IllegalArgumentException validationException = null;, +                ClientYamlTestSuite suite = ClientYamlTestSuite.parse(executeableSectionRegistry, api, yamlFile);, +                suites.add(suite);, +                try {, +                    suite.validate();, +                } catch(IllegalArgumentException e) {, +                    if (validationException == null) {, +                        validationException = new IllegalArgumentException("Validation errors for the following test suites:\n- ", +                            + e.getMessage());, +                    } else {, +                        String previousMessage = validationException.getMessage();, +                        Throwable[] suppressed = validationException.getSuppressed();, +                        validationException = new IllegalArgumentException(previousMessage + "\n- " + e.getMessage());, +                        for (Throwable t : suppressed) {, +                            validationException.addSuppressed(t);, +                        }, +                    }, +                    validationException.addSuppressed(e);, +        if (validationException != null) {, +            throw validationException;, +        }]