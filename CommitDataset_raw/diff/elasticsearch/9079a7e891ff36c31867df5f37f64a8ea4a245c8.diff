[+++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.delete.DeletePipelineAction;, +import org.elasticsearch.action.ingest.delete.DeletePipelineTransportAction;, +import org.elasticsearch.action.ingest.get.GetPipelineAction;, +import org.elasticsearch.action.ingest.get.GetPipelineTransportAction;, +import org.elasticsearch.action.ingest.put.PutPipelineAction;, +import org.elasticsearch.action.ingest.put.PutPipelineTransportAction;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestDisabledActionFilter;, +import org.elasticsearch.action.ingest.simulate.SimulatePipelineAction;, +import org.elasticsearch.action.ingest.simulate.SimulatePipelineTransportAction;, +    private final boolean ingestEnabled;, +    public ActionModule(Settings settings, boolean proxy) {, +        this.ingestEnabled = settings.getAsBoolean("node.ingest", false);, +        registerAction(PutPipelineAction.INSTANCE, PutPipelineTransportAction.class);, +        registerAction(GetPipelineAction.INSTANCE, GetPipelineTransportAction.class);, +        registerAction(DeletePipelineAction.INSTANCE, DeletePipelineTransportAction.class);, +        registerAction(SimulatePipelineAction.INSTANCE, SimulatePipelineTransportAction.class);, +, +            if (ingestEnabled) {, +                registerFilter(IngestActionFilter.class);, +            } else {, +                registerFilter(IngestDisabledActionFilter.class);, +            }, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.delete.DeletePipelineAction;, +import org.elasticsearch.action.ingest.delete.DeletePipelineTransportAction;, +import org.elasticsearch.action.ingest.get.GetPipelineAction;, +import org.elasticsearch.action.ingest.get.GetPipelineTransportAction;, +import org.elasticsearch.action.ingest.put.PutPipelineAction;, +import org.elasticsearch.action.ingest.put.PutPipelineTransportAction;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestDisabledActionFilter;, +import org.elasticsearch.action.ingest.simulate.SimulatePipelineAction;, +import org.elasticsearch.action.ingest.simulate.SimulatePipelineTransportAction;, +    private final boolean ingestEnabled;, +    public ActionModule(Settings settings, boolean proxy) {, +        this.ingestEnabled = settings.getAsBoolean("node.ingest", false);, +        registerAction(PutPipelineAction.INSTANCE, PutPipelineTransportAction.class);, +        registerAction(GetPipelineAction.INSTANCE, GetPipelineTransportAction.class);, +        registerAction(DeletePipelineAction.INSTANCE, DeletePipelineTransportAction.class);, +        registerAction(SimulatePipelineAction.INSTANCE, SimulatePipelineTransportAction.class);, +, +            if (ingestEnabled) {, +                registerFilter(IngestActionFilter.class);, +            } else {, +                registerFilter(IngestDisabledActionFilter.class);, +            }, +++ b/core/src/main/java/org/elasticsearch/action/ingest/IngestActionFilter.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.ingest;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.bulk.BulkItemResponse;, +import org.elasticsearch.action.bulk.BulkRequest;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.action.support.ActionFilterChain;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.ingest.IngestBootstrapper;, +import org.elasticsearch.ingest.PipelineExecutionService;, +import org.elasticsearch.ingest.core.ConfigurationUtils;, +import org.elasticsearch.tasks.Task;, +, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Set;, +, +public final class IngestActionFilter extends AbstractComponent implements ActionFilter {, +, +    private final PipelineExecutionService executionService;, +, +    @Inject]