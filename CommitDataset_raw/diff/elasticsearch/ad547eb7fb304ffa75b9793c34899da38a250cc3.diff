[+++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import com.carrotsearch.randomizedtesting.RandomizedContext;, +import com.carrotsearch.randomizedtesting.SeedUtils;, +import org.junit.BeforeClass;, +    private static TestCluster GLOBAL_CLUSTER;, +    @BeforeClass, +    public final static void beforeClass() throws Exception {, +        // Initialize lazily. No need for volatiles/ CASs since each JVM runs at most one test, +        // suite at any given moment., +        if (GLOBAL_CLUSTER == null) {, +            long masterSeed = SeedUtils.parseSeed(RandomizedContext.current().getRunnerSeedAsString());, +            GLOBAL_CLUSTER = new TestCluster(masterSeed, clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, masterSeed));, +        }, +    }, +    , +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import com.carrotsearch.randomizedtesting.RandomizedContext;, +import com.carrotsearch.randomizedtesting.SeedUtils;, +import org.junit.BeforeClass;, +    private static TestCluster GLOBAL_CLUSTER;, +    @BeforeClass, +    public final static void beforeClass() throws Exception {, +        // Initialize lazily. No need for volatiles/ CASs since each JVM runs at most one test, +        // suite at any given moment., +        if (GLOBAL_CLUSTER == null) {, +            long masterSeed = SeedUtils.parseSeed(RandomizedContext.current().getRunnerSeedAsString());, +            GLOBAL_CLUSTER = new TestCluster(masterSeed, clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, masterSeed));, +        }, +    }, +    , +++ b/src/test/java/org/elasticsearch/test/TestCluster.java, +     * A boolean value to enable or disable mock modules. This is useful to test the, +     * system without asserting modules that to make sure they don't hide any bugs in, +     * production., +     * , +     * @see ElasticsearchIntegrationTest, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import com.carrotsearch.randomizedtesting.RandomizedContext;, +import com.carrotsearch.randomizedtesting.SeedUtils;, +import org.junit.BeforeClass;, +    private static TestCluster GLOBAL_CLUSTER;, +    @BeforeClass, +    public final static void beforeClass() throws Exception {, +        // Initialize lazily. No need for volatiles/ CASs since each JVM runs at most one test, +        // suite at any given moment., +        if (GLOBAL_CLUSTER == null) {, +            long masterSeed = SeedUtils.parseSeed(RandomizedContext.current().getRunnerSeedAsString());, +            GLOBAL_CLUSTER = new TestCluster(masterSeed, clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, masterSeed));, +        }, +    }, +    , +++ b/src/test/java/org/elasticsearch/test/TestCluster.java, +     * A boolean value to enable or disable mock modules. This is useful to test the, +     * system without asserting modules that to make sure they don't hide any bugs in, +     * production., +     * , +     * @see ElasticsearchIntegrationTest, +++ b/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java, +        reproduceErrorMessageBuilder(b).appendAllOpts(failure.getDescription());, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import com.carrotsearch.randomizedtesting.RandomizedContext;, +import com.carrotsearch.randomizedtesting.SeedUtils;, +import org.junit.BeforeClass;, +    private static TestCluster GLOBAL_CLUSTER;, +    @BeforeClass, +    public final static void beforeClass() throws Exception {, +        // Initialize lazily. No need for volatiles/ CASs since each JVM runs at most one test, +        // suite at any given moment., +        if (GLOBAL_CLUSTER == null) {, +            long masterSeed = SeedUtils.parseSeed(RandomizedContext.current().getRunnerSeedAsString());, +            GLOBAL_CLUSTER = new TestCluster(masterSeed, clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, masterSeed));, +        }, +    }, +    , +++ b/src/test/java/org/elasticsearch/test/TestCluster.java, +     * A boolean value to enable or disable mock modules. This is useful to test the, +     * system without asserting modules that to make sure they don't hide any bugs in, +     * production., +     * , +     * @see ElasticsearchIntegrationTest, +++ b/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java, +        reproduceErrorMessageBuilder(b).appendAllOpts(failure.getDescription());, +++ b/src/test/java/org/elasticsearch/test/rest/junit/RestReproduceInfoPrinter.java, +import org.elasticsearch.test.rest.junit.RestTestSuiteRunner.RunMode;, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import com.carrotsearch.randomizedtesting.RandomizedContext;, +import com.carrotsearch.randomizedtesting.SeedUtils;, +import org.junit.BeforeClass;, +    private static TestCluster GLOBAL_CLUSTER;, +    @BeforeClass, +    public final static void beforeClass() throws Exception {, +        // Initialize lazily. No need for volatiles/ CASs since each JVM runs at most one test, +        // suite at any given moment., +        if (GLOBAL_CLUSTER == null) {, +            long masterSeed = SeedUtils.parseSeed(RandomizedContext.current().getRunnerSeedAsString());, +            GLOBAL_CLUSTER = new TestCluster(masterSeed, clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, masterSeed));, +        }, +    }, +    , +++ b/src/test/java/org/elasticsearch/test/TestCluster.java]