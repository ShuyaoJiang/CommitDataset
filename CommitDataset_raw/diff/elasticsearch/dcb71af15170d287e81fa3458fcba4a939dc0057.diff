[+++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/regex/Like.java, +    public boolean foldable() {, +        return left().foldable();, +    }, +, +    @Override, +        Pattern p = Pattern.compile(right().asJavaRegex());, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/regex/Like.java, +    public boolean foldable() {, +        return left().foldable();, +    }, +, +    @Override, +        Pattern p = Pattern.compile(right().asJavaRegex());, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/regex/LikePattern.java, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/regex/Like.java, +    public boolean foldable() {, +        return left().foldable();, +    }, +, +    @Override, +        Pattern p = Pattern.compile(right().asJavaRegex());, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/regex/LikePattern.java, +++ b/sql/server/src/test/java/org/elasticsearch/xpack/sql/optimizer/OptimizerTests.java, +import org.elasticsearch.xpack.sql.expression.regex.Like;, +import org.elasticsearch.xpack.sql.expression.regex.LikePattern;, +import org.elasticsearch.xpack.sql.expression.regex.RLike;, +    public void testConstantFoldingLikes() {, +        assertEquals(Literal.TRUE,, +                new ConstantFolding().rule(new Like(EMPTY, Literal.of(EMPTY, "test_emp"), new LikePattern(EMPTY, "test%", (char) 0))));, +        assertEquals(Literal.TRUE,, +                new ConstantFolding().rule(new RLike(EMPTY, Literal.of(EMPTY, "test_emp"), Literal.of(EMPTY, "test.emp"))));, +    }, +]