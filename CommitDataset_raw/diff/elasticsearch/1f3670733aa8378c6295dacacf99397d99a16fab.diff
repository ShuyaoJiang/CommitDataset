[+++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +        public void beforeIndexShardPostRecovery(IndexShard indexShard) {, +            // NOTE: we acquire the searcher via the engine directly here since this is executed right, +            // before the shard is marked as POST_RECOVERY, +            try (Engine.Searcher searcher = shard.engine().acquireSearcher("percolator_load_queries")) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +        public void beforeIndexShardPostRecovery(IndexShard indexShard) {, +            // NOTE: we acquire the searcher via the engine directly here since this is executed right, +            // before the shard is marked as POST_RECOVERY, +            try (Engine.Searcher searcher = shard.engine().acquireSearcher("percolator_load_queries")) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        readAllowed();, +        indicesLifecycle.beforeIndexShardPostRecovery(this);, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +        public void beforeIndexShardPostRecovery(IndexShard indexShard) {, +            // NOTE: we acquire the searcher via the engine directly here since this is executed right, +            // before the shard is marked as POST_RECOVERY, +            try (Engine.Searcher searcher = shard.engine().acquireSearcher("percolator_load_queries")) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        readAllowed();, +        indicesLifecycle.beforeIndexShardPostRecovery(this);, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesLifecycle.java, +        /**, +         * Called right after the shard is moved into POST_RECOVERY mode, +         */, +        public void afterIndexShardPostRecovery(IndexShard indexShard) {}, +        /**, +         * Called right before the shard is moved into POST_RECOVERY mode., +         * The shard is ready to be used but not yet marked as POST_RECOVERY., +         */, +        public void beforeIndexShardPostRecovery(IndexShard indexShard) {}, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +        public void beforeIndexShardPostRecovery(IndexShard indexShard) {, +            // NOTE: we acquire the searcher via the engine directly here since this is executed right, +            // before the shard is marked as POST_RECOVERY, +            try (Engine.Searcher searcher = shard.engine().acquireSearcher("percolator_load_queries")) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        readAllowed();, +        indicesLifecycle.beforeIndexShardPostRecovery(this);, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesLifecycle.java, +        /**, +         * Called right after the shard is moved into POST_RECOVERY mode, +         */, +        public void afterIndexShardPostRecovery(IndexShard indexShard) {}, +        /**, +         * Called right before the shard is moved into POST_RECOVERY mode., +         * The shard is ready to be used but not yet marked as POST_RECOVERY., +         */, +        public void beforeIndexShardPostRecovery(IndexShard indexShard) {}, +++ b/core/src/main/java/org/elasticsearch/indices/InternalIndicesLifecycle.java, +    public void beforeIndexShardPostRecovery(IndexShard indexShard) {, +        for (Listener listener : listeners) {, +            try {, +                listener.beforeIndexShardPostRecovery(indexShard);, +            } catch (Throwable t) {, +                logger.warn("{} failed to invoke before shard post recovery callback", t, indexShard.shardId());, +                throw t;, +            }, +        }, +    }, +, +]