[+++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +        spellchecker.setThresholdFrequency(this.suggestMode == SuggestMode.SUGGEST_ALWAYS ? 0 : thresholdFrequency(frequency, dictSize));, +            return (long) Math.max(0, Math.round(termFrequency * (Math.log10(termFrequency - frequencyPlateau) * (1.0 / Math.log10(logBase))) + 1));, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +        spellchecker.setThresholdFrequency(this.suggestMode == SuggestMode.SUGGEST_ALWAYS ? 0 : thresholdFrequency(frequency, dictSize));, +            return (long) Math.max(0, Math.round(termFrequency * (Math.log10(termFrequency - frequencyPlateau) * (1.0 / Math.log10(logBase))) + 1));, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.elasticsearch.search.suggest.Suggest;, +    public static void assertSuggestionSize(Suggest searchSuggest, int entry, int size, String key) {, +        assertThat(searchSuggest, notNullValue());, +        assertThat(searchSuggest.size(),greaterThanOrEqualTo(1));, +        assertThat(searchSuggest.getSuggestion(key).getName(), equalTo(key));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().size(), greaterThanOrEqualTo(entry));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().get(entry).getOptions().size(), equalTo(size));, +, +    }, +    , +    public static void assertSuggestion(Suggest searchSuggest, int entry, int ord, String key, String text) {, +        assertThat(searchSuggest, notNullValue());, +        assertThat(searchSuggest.size(), greaterThanOrEqualTo(1));, +        assertThat(searchSuggest.getSuggestion(key).getName(), equalTo(key));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().size(), greaterThanOrEqualTo(entry));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().get(entry).getOptions().size(), greaterThan(ord));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().get(entry).getOptions().get(ord).getText().string(), equalTo(text));, +    }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +        spellchecker.setThresholdFrequency(this.suggestMode == SuggestMode.SUGGEST_ALWAYS ? 0 : thresholdFrequency(frequency, dictSize));, +            return (long) Math.max(0, Math.round(termFrequency * (Math.log10(termFrequency - frequencyPlateau) * (1.0 / Math.log10(logBase))) + 1));, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.elasticsearch.search.suggest.Suggest;, +    public static void assertSuggestionSize(Suggest searchSuggest, int entry, int size, String key) {, +        assertThat(searchSuggest, notNullValue());, +        assertThat(searchSuggest.size(),greaterThanOrEqualTo(1));, +        assertThat(searchSuggest.getSuggestion(key).getName(), equalTo(key));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().size(), greaterThanOrEqualTo(entry));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().get(entry).getOptions().size(), equalTo(size));, +, +    }, +    , +    public static void assertSuggestion(Suggest searchSuggest, int entry, int ord, String key, String text) {, +        assertThat(searchSuggest, notNullValue());, +        assertThat(searchSuggest.size(), greaterThanOrEqualTo(1));, +        assertThat(searchSuggest.getSuggestion(key).getName(), equalTo(key));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().size(), greaterThanOrEqualTo(entry));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().get(entry).getOptions().size(), greaterThan(ord));, +        assertThat(searchSuggest.getSuggestion(key).getEntries().get(entry).getOptions().get(ord).getText().string(), equalTo(text));, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/search/suggest/SuggestSearchTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;, +    @Test // see #3037, +    public void testSuggestModes() throws IOException {, +        Builder builder = ImmutableSettings.builder();, +        builder.put("index.number_of_shards", 1).put("index.number_of_replicas", 0);, +        builder.put("index.analysis.analyzer.biword.tokenizer", "standard");, +        builder.putArray("index.analysis.analyzer.biword.filter", "shingler", "lowercase");, +        builder.put("index.analysis.filter.shingler.type", "shingle");, +        builder.put("index.analysis.filter.shingler.min_shingle_size", 2);, +        builder.put("index.analysis.filter.shingler.max_shingle_size", 3);, +        , +        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1"), +        .startObject("properties"), +        .startObject("name"), +            .field("type", "multi_field"), +            .field("path", "just_name"), +            .startObject("fields"), +                .startObject("name"), +                    .field("type", "string"), +                .endObject(), +                .startObject("name_shingled"), +                    .field("type", "string"), +                    .field("index_analyzer", "biword"), +                    .field("search_analyzer", "standard"), +                .endObject(), +            .endObject(), +        .endObject(), +        .endObject(), +        .endObject().endObject();, +        client.admin().indices().prepareDelete().execute().actionGet();, +        client.admin().indices().prepareCreate("test").setSettings(builder.build()).addMapping("type1", mapping).execute().actionGet();, +        client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().execute().actionGet();, +        client.prepareIndex("test", "type1"), +                .setSource(XContentFactory.jsonBuilder().startObject().field("name", "I like iced tea").endObject()).execute().actionGet();, +        client.prepareIndex("test", "type1"), +        .setSource(XContentFactory.jsonBuilder().startObject().field("name", "I like tea.").endObject()).execute().actionGet();, +        client.prepareIndex("test", "type1"), +        .setSource(XContentFactory.jsonBuilder().startObject().field("name", "I like ice cream.").endObject()).execute().actionGet();, +        client.admin().indices().prepareRefresh().execute().actionGet();, +        Suggest searchSuggest = searchSuggest(, +                client,, +                "ice tea",, +                phraseSuggestion("did_you_mean").field("name_shingled"), +                        .addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("name").prefixLength(0).minWordLength(0).suggestMode("always").maxEdits(2)), +                        .gramSize(3));, +        ElasticsearchAssertions.assertSuggestion(searchSuggest, 0, 0, "did_you_mean", "iced tea");, +        searchSuggest = searchSuggest(, +                client,, +                "ice tea",]