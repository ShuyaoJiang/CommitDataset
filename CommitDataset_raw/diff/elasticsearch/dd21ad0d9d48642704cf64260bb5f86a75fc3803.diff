[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/logfile/LoggingAuditTrail.java, +import org.elasticsearch.tasks.Task;, +                logger.info("{}[rest] [authentication_success]\t{}, realm=[{}], uri=[{}], params=[{}]{}, request_body=[{}]",, +                    localNodeInfo.prefix, principal(user), realm, request.uri(), request.params(), opaqueId(), restRequestContent(request));, +                logger.info("{}[rest] [authentication_success]\t{}, realm=[{}], uri=[{}], params=[{}]{}",, +                    localNodeInfo.prefix, principal(user), realm, request.uri(), request.params(), opaqueId());, +                    logger.info("{}[transport] [authentication_success]\t{}, {}, realm=[{}], action=[{}], indices=[{}], request=[{}]{}",, +                            arrayToCommaDelimitedString(indices.get()), message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [authentication_success]\t{}, {}, realm=[{}], action=[{}], request=[{}]{}",, +                            message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [anonymous_access_denied]\t{}, action=[{}], indices=[{}], request=[{}]{}",, +                            arrayToCommaDelimitedString(indices.get()), message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [anonymous_access_denied]\t{}, action=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, message, localNodeInfo), action,, +                            message.getClass().getSimpleName(), opaqueId());, +                logger.info("{}[rest] [anonymous_access_denied]\t{}, uri=[{}]{}, request_body=[{}]", localNodeInfo.prefix,, +                        hostAttributes(request), request.uri(), opaqueId(), restRequestContent(request));, +                logger.info("{}[rest] [anonymous_access_denied]\t{}, uri=[{}]{}", localNodeInfo.prefix,, +                        hostAttributes(request), request.uri(), opaqueId());, +                    logger.info("{}[transport] [authentication_failed]\t{}, principal=[{}], action=[{}], indices=[{}], request=[{}]{}",, +                            arrayToCommaDelimitedString(indices.get()), message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [authentication_failed]\t{}, principal=[{}], action=[{}], request=[{}]{}",, +                            message.getClass().getSimpleName(), opaqueId());, +                logger.info("{}[rest] [authentication_failed]\t{}, uri=[{}]{}, request_body=[{}]", localNodeInfo.prefix,, +                        hostAttributes(request), request.uri(), opaqueId(), restRequestContent(request));, +                logger.info("{}[rest] [authentication_failed]\t{}, uri=[{}]{}", localNodeInfo.prefix,, +                        hostAttributes(request), request.uri(), opaqueId());, +                    logger.info("{}[transport] [authentication_failed]\t{}, action=[{}], indices=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, message, localNodeInfo), action,, +                            arrayToCommaDelimitedString(indices.get()), message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [authentication_failed]\t{}, action=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, message, localNodeInfo), action,, +                            message.getClass().getSimpleName(), opaqueId());, +                logger.info("{}[rest] [authentication_failed]\t{}, principal=[{}], uri=[{}]{}, request_body=[{}]",, +                        localNodeInfo.prefix, hostAttributes(request), token.principal(), request.uri(), opaqueId(),, +                        restRequestContent(request));, +                logger.info("{}[rest] [authentication_failed]\t{}, principal=[{}], uri=[{}]{}",, +                        localNodeInfo.prefix, hostAttributes(request), token.principal(), request.uri(), opaqueId());, +                                    + "request=[{}]{}",, +                            arrayToCommaDelimitedString(indices.get()), message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [realm_authentication_failed]\trealm=[{}], {}, principal=[{}], action=[{}], request=[{}]{}",, +                            message.getClass().getSimpleName(), opaqueId());, +                logger.info("{}[rest] [realm_authentication_failed]\trealm=[{}], {}, principal=[{}], uri=[{}]{}, ", +                            + "request_body=[{}]",, +                        localNodeInfo.prefix, realm, hostAttributes(request), token.principal(), request.uri(), opaqueId(),, +                logger.info("{}[rest] [realm_authentication_failed]\trealm=[{}], {}, principal=[{}], uri=[{}]{}",, +                        localNodeInfo.prefix, realm, hostAttributes(request), token.principal(), request.uri(), opaqueId());, +                    logger.info("{}[transport] [access_granted]\t{}, {}, roles=[{}], action=[{}], indices=[{}], request=[{}]{}",, +                            message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [access_granted]\t{}, {}, roles=[{}], action=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, message, localNodeInfo), subject(authentication),, +                            arrayToCommaDelimitedString(roleNames), action, message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [access_denied]\t{}, {}, roles=[{}], action=[{}], indices=[{}], request=[{}]{}",, +                            message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [access_denied]\t{}, {}, roles=[{}], action=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, message, localNodeInfo), subject(authentication),, +                            arrayToCommaDelimitedString(roleNames), action, message.getClass().getSimpleName(), opaqueId());, +                logger.info("{}[rest] [tampered_request]\t{}, uri=[{}]{}, request_body=[{}]", localNodeInfo.prefix,, +                        hostAttributes(request), request.uri(), opaqueId(), restRequestContent(request));, +                logger.info("{}[rest] [tampered_request]\t{}, uri=[{}]{}", localNodeInfo.prefix, hostAttributes(request),, +                        request.uri(), opaqueId());, +                    logger.info("{}[transport] [tampered_request]\t{}, action=[{}], indices=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, message, localNodeInfo), action,, +                            arrayToCommaDelimitedString(indices.get()), message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [tampered_request]\t{}, action=[{}], request=[{}]{}", localNodeInfo.prefix,, +                            originAttributes(threadContext, message, localNodeInfo), action, message.getClass().getSimpleName(),, +                            opaqueId());, +                    logger.info("{}[transport] [tampered_request]\t{}, {}, action=[{}], indices=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, request, localNodeInfo), principal(user), action,, +                            arrayToCommaDelimitedString(indices.get()), request.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [tampered_request]\t{}, {}, action=[{}], request=[{}]{}", localNodeInfo.prefix,, +                            request.getClass().getSimpleName(), opaqueId());, +            logger.info("{}[ip_filter] [connection_granted]\torigin_address=[{}], transport_profile=[{}], rule=[{}]{}",, +                    localNodeInfo.prefix, NetworkAddress.format(inetAddress), profile, rule, opaqueId());, +            logger.info("{}[ip_filter] [connection_denied]\torigin_address=[{}], transport_profile=[{}], rule=[{}]{}",, +                    localNodeInfo.prefix, NetworkAddress.format(inetAddress), profile, rule, opaqueId());, +                    logger.info("{}[transport] [run_as_granted]\t{}, {}, roles=[{}], action=[{}], indices=[{}], request=[{}]{}",, +                            message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [run_as_granted]\t{}, {}, roles=[{}], action=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, message, localNodeInfo), runAsSubject(authentication),, +                            arrayToCommaDelimitedString(roleNames), action, message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [run_as_denied]\t{}, {}, roles=[{}], action=[{}], indices=[{}], request=[{}]{}",, +                            message.getClass().getSimpleName(), opaqueId());, +                    logger.info("{}[transport] [run_as_denied]\t{}, {}, roles=[{}], action=[{}], request=[{}]{}",, +                            localNodeInfo.prefix, originAttributes(threadContext, message, localNodeInfo), runAsSubject(authentication),, +                            arrayToCommaDelimitedString(roleNames), action, message.getClass().getSimpleName(), opaqueId());, +                logger.info("{}[rest] [run_as_denied]\t{}, {}, roles=[{}], uri=[{}], request_body=[{}]{}",, +                        localNodeInfo.prefix, hostAttributes(request), runAsSubject(authentication),, +                        arrayToCommaDelimitedString(roleNames), request.uri(), restRequestContent(request), opaqueId());, +                logger.info("{}[rest] [run_as_denied]\t{}, {}, roles=[{}], uri=[{}]{}", localNodeInfo.prefix,, +                        hostAttributes(request), runAsSubject(authentication), arrayToCommaDelimitedString(roleNames), request.uri(),, +                        opaqueId());, +    private String opaqueId() {, +        String opaqueId = threadContext.getHeader(Task.X_OPAQUE_ID);, +        if (opaqueId != null) {, +            return ", opaque_id=[" + opaqueId + "]";, +        } else {, +            return "";, +        }, +    }]