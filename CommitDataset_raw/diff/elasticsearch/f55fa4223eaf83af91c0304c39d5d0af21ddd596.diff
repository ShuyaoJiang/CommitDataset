[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorExecutor.java, +        addQuery(name, parseQuery(name, source, sourceOffset, sourceLength));, +    }, +, +    public Query parseQuery(String name, byte[] source, int sourceOffset, int sourceLength) throws ElasticSearchException {, +            return query;, +    public synchronized void addQueries(Map<String, Query> queries) {, +        this.queries = MapBuilder.newMapBuilder(this.queries).putAll(queries).immutableMap();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorExecutor.java, +        addQuery(name, parseQuery(name, source, sourceOffset, sourceLength));, +    }, +, +    public Query parseQuery(String name, byte[] source, int sourceOffset, int sourceLength) throws ElasticSearchException {, +            return query;, +    public synchronized void addQueries(Map<String, Query> queries) {, +        this.queries = MapBuilder.newMapBuilder(this.queries).putAll(queries).immutableMap();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorService.java, +import org.elasticsearch.common.collect.Maps;, +import java.util.Map;, +            QueriesLoaderCollector queries = new QueriesLoaderCollector();, +            searcher.searcher().search(query, queries);, +            percolator.addQueries(queries.queries());, +        private Map<String, Query> queries = Maps.newHashMap();, +, +        public Map<String, Query> queries() {, +            return this.queries;, +        }, +, +                queries.put(id, percolator.parseQuery(id, source, 0, source.length));]