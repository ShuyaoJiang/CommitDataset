[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import com.google.common.cache.Cache;, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.RemovalListener;, +import com.google.common.cache.RemovalNotification;, +, +import java.util.Map;, +import java.util.concurrent.*;, +        this.loadedFilters = CacheBuilder.newBuilder().removalListener(this).build();, +        Cache<Query, Value> filterToFbs = loadedFilters.get(coreCacheReader, new Callable<Cache<Query, Value>>() {, +            @Override, +            public Cache<Query, Value> call() throws Exception {, +                return CacheBuilder.newBuilder().build();, +            }, +        return filterToFbs.get(query, () -> {, +        Object key = notification.getKey();, +        if (key == null) {, +        for (Value value : valueCache.asMap().values()) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import com.google.common.cache.Cache;, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.RemovalListener;, +import com.google.common.cache.RemovalNotification;, +, +import java.util.Map;, +import java.util.concurrent.*;, +        this.loadedFilters = CacheBuilder.newBuilder().removalListener(this).build();, +        Cache<Query, Value> filterToFbs = loadedFilters.get(coreCacheReader, new Callable<Cache<Query, Value>>() {, +            @Override, +            public Cache<Query, Value> call() throws Exception {, +                return CacheBuilder.newBuilder().build();, +            }, +        return filterToFbs.get(query, () -> {, +        Object key = notification.getKey();, +        if (key == null) {, +        for (Value value : valueCache.asMap().values()) {, +++ b/core/src/main/java/org/elasticsearch/index/cache/request/ShardRequestCache.java, +import com.google.common.cache.RemovalListener;, +import com.google.common.cache.RemovalNotification;, +, +import org.elasticsearch.common.inject.Inject;, +        if (removalNotification.wasEvicted()) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import com.google.common.cache.Cache;, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.RemovalListener;, +import com.google.common.cache.RemovalNotification;, +, +import java.util.Map;, +import java.util.concurrent.*;, +        this.loadedFilters = CacheBuilder.newBuilder().removalListener(this).build();, +        Cache<Query, Value> filterToFbs = loadedFilters.get(coreCacheReader, new Callable<Cache<Query, Value>>() {, +            @Override, +            public Cache<Query, Value> call() throws Exception {, +                return CacheBuilder.newBuilder().build();, +            }, +        return filterToFbs.get(query, () -> {, +        Object key = notification.getKey();, +        if (key == null) {, +        for (Value value : valueCache.asMap().values()) {, +++ b/core/src/main/java/org/elasticsearch/index/cache/request/ShardRequestCache.java, +import com.google.common.cache.RemovalListener;, +import com.google.common.cache.RemovalNotification;, +, +import org.elasticsearch.common.inject.Inject;, +        if (removalNotification.wasEvicted()) {, +++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +            return length() - (partBytes * (numberOfParts-1));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import com.google.common.cache.Cache;, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.RemovalListener;, +import com.google.common.cache.RemovalNotification;, +]