[+++ b/src/main/java/org/elasticsearch/watcher/WatcherModule.java, +    protected final Settings settings;, +                new TriggerModule(settings),, +++ b/src/main/java/org/elasticsearch/watcher/WatcherModule.java, +    protected final Settings settings;, +                new TriggerModule(settings),, +++ b/src/main/java/org/elasticsearch/watcher/WatcherPlugin.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.watcher.actions.email.service.InternalEmailService;, +import org.elasticsearch.watcher.history.HistoryModule;, +import org.elasticsearch.watcher.license.LicenseService;, +import org.elasticsearch.watcher.support.init.InitializingService;, +import org.elasticsearch.watcher.trigger.schedule.ScheduleModule;, +        Settings additionalSettings = settingsBuilder(), +                .put(ScheduleModule.additionalSettings(settings)), +                .put(HistoryModule.additionalSettings(settings)), +, +        return additionalSettings;, +++ b/src/main/java/org/elasticsearch/watcher/WatcherModule.java, +    protected final Settings settings;, +                new TriggerModule(settings),, +++ b/src/main/java/org/elasticsearch/watcher/WatcherPlugin.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.watcher.actions.email.service.InternalEmailService;, +import org.elasticsearch.watcher.history.HistoryModule;, +import org.elasticsearch.watcher.license.LicenseService;, +import org.elasticsearch.watcher.support.init.InitializingService;, +import org.elasticsearch.watcher.trigger.schedule.ScheduleModule;, +        Settings additionalSettings = settingsBuilder(), +                .put(ScheduleModule.additionalSettings(settings)), +                .put(HistoryModule.additionalSettings(settings)), +, +        return additionalSettings;, +++ b/src/main/java/org/elasticsearch/watcher/execution/InternalWatchExecutor.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import org.elasticsearch.watcher.WatcherPlugin;, +import org.elasticsearch.watcher.support.ThreadPoolSettingsBuilder;, +    public static final String THREAD_POOL_NAME = WatcherPlugin.NAME;, +, +    public static Settings additionalSettings(Settings nodeSettings) {, +        Settings settings = nodeSettings.getAsSettings("threadpool." + THREAD_POOL_NAME);, +        if (!settings.names().isEmpty()) {, +            // the TP is already configured in the node settings, +            // no need for additional settings, +            return ImmutableSettings.EMPTY;, +        }, +        int availableProcessors = EsExecutors.boundedNumberOfProcessors(nodeSettings);, +        return new ThreadPoolSettingsBuilder.Fixed(THREAD_POOL_NAME), +                .size(5 * availableProcessors), +                .queueSize(1000), +                .build();, +    }, +, +        return (EsThreadPoolExecutor) threadPool.executor(THREAD_POOL_NAME);, +++ b/src/main/java/org/elasticsearch/watcher/WatcherModule.java, +    protected final Settings settings;, +                new TriggerModule(settings),, +++ b/src/main/java/org/elasticsearch/watcher/WatcherPlugin.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.watcher.actions.email.service.InternalEmailService;, +import org.elasticsearch.watcher.history.HistoryModule;, +import org.elasticsearch.watcher.license.LicenseService;, +import org.elasticsearch.watcher.support.init.InitializingService;, +import org.elasticsearch.watcher.trigger.schedule.ScheduleModule;, +        Settings additionalSettings = settingsBuilder(), +                .put(ScheduleModule.additionalSettings(settings)), +                .put(HistoryModule.additionalSettings(settings)), +, +        return additionalSettings;, +++ b/src/main/java/org/elasticsearch/watcher/execution/InternalWatchExecutor.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import org.elasticsearch.watcher.WatcherPlugin;, +import org.elasticsearch.watcher.support.ThreadPoolSettingsBuilder;, +    public static final String THREAD_POOL_NAME = WatcherPlugin.NAME;, +, +    public static Settings additionalSettings(Settings nodeSettings) {, +        Settings settings = nodeSettings.getAsSettings("threadpool." + THREAD_POOL_NAME);, +        if (!settings.names().isEmpty()) {, +            // the TP is already configured in the node settings, +            // no need for additional settings, +            return ImmutableSettings.EMPTY;, +        }, +        int availableProcessors = EsExecutors.boundedNumberOfProcessors(nodeSettings);, +        return new ThreadPoolSettingsBuilder.Fixed(THREAD_POOL_NAME), +                .size(5 * availableProcessors), +                .queueSize(1000), +                .build();, +    }, +, +        return (EsThreadPoolExecutor) threadPool.executor(THREAD_POOL_NAME);, +++ b/src/main/java/org/elasticsearch/watcher/history/HistoryModule.java, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.watcher.execution.InternalWatchExecutor;, +, +    public static Settings additionalSettings(Settings nodeSettings) {, +        return InternalWatchExecutor.additionalSettings(nodeSettings);]