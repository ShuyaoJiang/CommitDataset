[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.RestRequest;, +    private final PathTrie<HttpServerHandler> getHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> postHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> putHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> deleteHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> headHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> optionsHandlers = new PathTrie<HttpServerHandler>();, +        } else if (method == RestRequest.Method.HEAD) {, +            headHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.OPTIONS) {, +            optionsHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.HEAD) {, +            return headHandlers.retrieve(path, request.params());, +        } else if (method == RestRequest.Method.OPTIONS) {, +            return optionsHandlers.retrieve(path, request.params());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.RestRequest;, +    private final PathTrie<HttpServerHandler> getHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> postHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> putHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> deleteHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> headHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> optionsHandlers = new PathTrie<HttpServerHandler>();, +        } else if (method == RestRequest.Method.HEAD) {, +            headHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.OPTIONS) {, +            optionsHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.HEAD) {, +            return headHandlers.retrieve(path, request.params());, +        } else if (method == RestRequest.Method.OPTIONS) {, +            return optionsHandlers.retrieve(path, request.params());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +        if (httpMethod == HttpMethod.HEAD) {, +            return Method.HEAD;, +        }, +, +        if (httpMethod == HttpMethod.OPTIONS) {, +            return Method.OPTIONS;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.RestRequest;, +    private final PathTrie<HttpServerHandler> getHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> postHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> putHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> deleteHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> headHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> optionsHandlers = new PathTrie<HttpServerHandler>();, +        } else if (method == RestRequest.Method.HEAD) {, +            headHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.OPTIONS) {, +            optionsHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.HEAD) {, +            return headHandlers.retrieve(path, request.params());, +        } else if (method == RestRequest.Method.OPTIONS) {, +            return optionsHandlers.retrieve(path, request.params());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +        if (httpMethod == HttpMethod.HEAD) {, +            return Method.HEAD;, +        }, +, +        if (httpMethod == HttpMethod.OPTIONS) {, +            return Method.OPTIONS;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/RestController.java, + * @author kimchy (shay.banon), +    private final PathTrie<RestHandler> headHandlers = new PathTrie<RestHandler>();, +    private final PathTrie<RestHandler> optionsHandlers = new PathTrie<RestHandler>();, +            case OPTIONS:, +                optionsHandlers.insert(path, handler);, +            case HEAD:, +                headHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.HEAD) {, +            return headHandlers.retrieve(path, request.params());, +        } else if (method == RestRequest.Method.OPTIONS) {, +            return optionsHandlers.retrieve(path, request.params());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.RestRequest;, +    private final PathTrie<HttpServerHandler> getHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> postHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> putHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> deleteHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> headHandlers = new PathTrie<HttpServerHandler>();, +    private final PathTrie<HttpServerHandler> optionsHandlers = new PathTrie<HttpServerHandler>();, +        } else if (method == RestRequest.Method.HEAD) {, +            headHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.OPTIONS) {, +            optionsHandlers.insert(path, handler);, +        } else if (method == RestRequest.Method.HEAD) {, +            return headHandlers.retrieve(path, request.params());, +        } else if (method == RestRequest.Method.OPTIONS) {, +            return optionsHandlers.retrieve(path, request.params());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +        if (httpMethod == HttpMethod.HEAD) {, +            return Method.HEAD;, +        }, +, +        if (httpMethod == HttpMethod.OPTIONS) {]