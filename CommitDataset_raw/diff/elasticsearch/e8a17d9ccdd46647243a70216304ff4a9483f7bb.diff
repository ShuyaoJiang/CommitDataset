[+++ b/src/main/java/org/elasticsearch/shield/ssl/SSLService.java, +import org.elasticsearch.common.primitives.Ints;, +import org.elasticsearch.common.unit.TimeValue;, +    static final TimeValue DEFAULT_SESSION_CACHE_TIMEOUT = TimeValue.timeValueHours(24);, +            int sessionCacheSize = settings.getAsInt("session.cache_size", componentSettings.getAsInt("session.cache_size", 1000));, +            TimeValue sessionCacheTimeout = settings.getAsTime("session.cache_timeout", componentSettings.getAsTime("session.cache_timeout", DEFAULT_SESSION_CACHE_TIMEOUT));, +            logger.debug("using keystore[{}], key_algorithm[{}], truststore[{}], truststore_algorithm[{}], tls_protocol[{}], session_cache_size[{}], session_cache_timeout[{}]",, +                keyStorePath, keyStoreAlgorithm, trustStorePath, trustStoreAlgorithm, sslProtocol, sessionCacheSize, sessionCacheTimeout);, +            sslContext = createSslContext(keyManagerFactory, trustFactory, sslProtocol, sessionCacheSize, sessionCacheTimeout);, +            logger.trace("found keystore[{}], truststore[{}], tls_protocol[{}] in SSL context cache, reusing", keyStorePath, trustStorePath, sslProtocol);, +    private SSLContext createSslContext(KeyManagerFactory keyManagerFactory, TrustManagerFactory trustFactory, String sslProtocol, int sessionCacheSize, TimeValue sessionCacheTimeout) {, +            sslContext.getServerSessionContext().setSessionCacheSize(sessionCacheSize);, +            sslContext.getServerSessionContext().setSessionTimeout(Ints.checkedCast(sessionCacheTimeout.seconds()));, +++ b/src/main/java/org/elasticsearch/shield/ssl/SSLService.java, +import org.elasticsearch.common.primitives.Ints;, +import org.elasticsearch.common.unit.TimeValue;, +    static final TimeValue DEFAULT_SESSION_CACHE_TIMEOUT = TimeValue.timeValueHours(24);, +            int sessionCacheSize = settings.getAsInt("session.cache_size", componentSettings.getAsInt("session.cache_size", 1000));, +            TimeValue sessionCacheTimeout = settings.getAsTime("session.cache_timeout", componentSettings.getAsTime("session.cache_timeout", DEFAULT_SESSION_CACHE_TIMEOUT));, +            logger.debug("using keystore[{}], key_algorithm[{}], truststore[{}], truststore_algorithm[{}], tls_protocol[{}], session_cache_size[{}], session_cache_timeout[{}]",, +                keyStorePath, keyStoreAlgorithm, trustStorePath, trustStoreAlgorithm, sslProtocol, sessionCacheSize, sessionCacheTimeout);, +            sslContext = createSslContext(keyManagerFactory, trustFactory, sslProtocol, sessionCacheSize, sessionCacheTimeout);, +            logger.trace("found keystore[{}], truststore[{}], tls_protocol[{}] in SSL context cache, reusing", keyStorePath, trustStorePath, sslProtocol);, +    private SSLContext createSslContext(KeyManagerFactory keyManagerFactory, TrustManagerFactory trustFactory, String sslProtocol, int sessionCacheSize, TimeValue sessionCacheTimeout) {, +            sslContext.getServerSessionContext().setSessionCacheSize(sessionCacheSize);, +            sslContext.getServerSessionContext().setSessionTimeout(Ints.checkedCast(sessionCacheTimeout.seconds()));, +++ b/src/test/java/org/elasticsearch/shield/ssl/SSLServiceTests.java, +import org.elasticsearch.common.unit.TimeValue;, +import javax.net.ssl.SSLSessionContext;, +, +    @Test, +    public void testThatSSLSessionCacheHasDefaultLimits() throws Exception {, +        SSLService sslService = new SSLService(settingsBuilder(), +                .put("shield.ssl.keystore.path", testnodeStore), +                .put("shield.ssl.keystore.password", "testnode"), +                .build());, +        SSLSessionContext context = sslService.getSslContext().getServerSessionContext();, +        assertThat(context.getSessionCacheSize(), equalTo(1000));, +        assertThat(context.getSessionTimeout(), equalTo((int) TimeValue.timeValueHours(24).seconds()));, +    }, +, +    @Test, +    public void testThatSettingSSLSessionCacheLimitsWorks() throws Exception {, +        SSLService sslService = new SSLService(settingsBuilder(), +                .put("shield.ssl.keystore.path", testnodeStore), +                .put("shield.ssl.keystore.password", "testnode"), +                .put("shield.ssl.session.cache_size", "300"), +                .put("shield.ssl.session.cache_timeout", "600s"), +                .build());, +        SSLSessionContext context = sslService.getSslContext().getServerSessionContext();, +        assertThat(context.getSessionCacheSize(), equalTo(300));, +        assertThat(context.getSessionTimeout(), equalTo(600));, +    }]