[+++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))));, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))));, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW));, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))));, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW));, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +            fail("should have failed because of missing role");, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))));, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW));, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +            fail("should have failed because of missing role");, +++ b/elasticsearch/qa/smoke-test-monitoring-with-security/insufficient-rights/src/test/java/org/elasticsearch/smoketest/MonitoringWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))));, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW));, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +            fail("should have failed because of missing role");, +++ b/elasticsearch/qa/smoke-test-monitoring-with-security/insufficient-rights/src/test/java/org/elasticsearch/smoketest/MonitoringWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import static org.hamcrest.Matchers.nullValue;, +        Response response = getRestClient().performRequest("GET", "/_nodes/settings", headers);, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))));, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW));, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +            fail("should have failed because of missing role");, +++ b/elasticsearch/qa/smoke-test-monitoring-with-security/insufficient-rights/src/test/java/org/elasticsearch/smoketest/MonitoringWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import static org.hamcrest.Matchers.nullValue;, +        Response response = getRestClient().performRequest("GET", "/_nodes/settings", headers);, +++ b/elasticsearch/x-pack/security/src/test/java/org/elasticsearch/integration/AbstractPrivilegeTestCase.java, +                                         Map<String, String> params) throws Exception {, +        Response response = getRestClient().performRequest(method, uri, params, entityOrNull(body),, +                        UsernamePasswordToken.basicAuthHeaderValue(user, new SecuredString("passwd".toCharArray()))));, +    protected void assertAccessIsAllowed(String user, String method, String uri, String body) throws Exception {, +    protected void assertAccessIsAllowed(String user, String method, String uri) throws Exception {, +    protected void assertAccessIsDenied(String user, String method, String uri, String body) throws Exception {, +    protected void assertAccessIsDenied(String user, String method, String uri) throws Exception {, +                                        Map<String, String> params) throws Exception {, +                    statusLine.getStatusCode(), statusLine.getReasonPhrase(), EntityUtils.toString(e.getResponse().getEntity()));, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))));, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW));, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +            fail("should have failed because of missing role");, +++ b/elasticsearch/qa/smoke-test-monitoring-with-security/insufficient-rights/src/test/java/org/elasticsearch/smoketest/MonitoringWithSecurityInsufficientRoleIT.java, +    public void test() throws Exception {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import static org.hamcrest.Matchers.nullValue;, +        Response response = getRestClient().performRequest("GET", "/_nodes/settings", headers);, +++ b/elasticsearch/x-pack/security/src/test/java/org/elasticsearch/integration/AbstractPrivilegeTestCase.java, +                                         Map<String, String> params) throws Exception {, +        Response response = getRestClient().performRequest(method, uri, params, entityOrNull(body),, +                        UsernamePasswordToken.basicAuthHeaderValue(user, new SecuredString("passwd".toCharArray()))));, +    protected void assertAccessIsAllowed(String user, String method, String uri, String body) throws Exception {, +    protected void assertAccessIsAllowed(String user, String method, String uri) throws Exception {, +    protected void assertAccessIsDenied(String user, String method, String uri, String body) throws Exception {, +    protected void assertAccessIsDenied(String user, String method, String uri) throws Exception {, +                                        Map<String, String> params) throws Exception {, +                    statusLine.getStatusCode(), statusLine.getReasonPhrase(), EntityUtils.toString(e.getResponse().getEntity()));, +++ b/elasticsearch/x-pack/security/src/test/java/org/elasticsearch/integration/BulkUpdateTests.java, +import org.elasticsearch.xpack.security.Security;, +import org.elasticsearch.xpack.security.authc.support.SecuredString;, +import org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken;, +    public void testThatBulkUpdateDoesNotLoseFieldsHttp() throws Exception {, +        Response response = getRestClient().performRequest("PUT", path, Collections.emptyMap(), body, basicAuthHeader);, +        response = getRestClient().performRequest("GET", path, basicAuthHeader);, +        response = getRestClient().performRequest("POST", path + "/_update", Collections.emptyMap(), body, basicAuthHeader);, +        response = getRestClient().performRequest("GET", path, basicAuthHeader);]