[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]ReplicationResponse.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]admin[/\\]indices[/\\]refresh[/\\]TransportShardRefreshAction.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]ReplicationResponse.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]admin[/\\]indices[/\\]refresh[/\\]TransportShardRefreshAction.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/ActionListenerResponseHandler.java, +    private final ActionListener<? super Response> listener;, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Supplier<Response> responseSupplier) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]ReplicationResponse.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]admin[/\\]indices[/\\]refresh[/\\]TransportShardRefreshAction.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/ActionListenerResponseHandler.java, +    private final ActionListener<? super Response> listener;, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Supplier<Response> responseSupplier) {, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbersService;, +public abstract class DocWriteResponse extends ReplicationResponse implements StatusToXContent {, +    private long seqNo;, +    public DocWriteResponse(ShardId shardId, String type, String id, long seqNo, long version) {, +        this.seqNo = seqNo;, +     * Returns the sequence number assigned for this change. Returns {@link SequenceNumbersService#UNASSIGNED_SEQ_NO} if the operation, +     * wasn't performed (i.e., an update operation that resulted in a NOOP)., +    public long getSeqNo() {, +        return seqNo;, +        seqNo = in.readZLong();, +        out.writeZLong(seqNo);, +        static final String _SHARD_ID = "_shard_id";, +        static final String _SEQ_NO = "_seq_no";, +                .field(Fields._VERSION, version);, +        //nocommit: i'm not sure we want to expose it in the api but it will be handy for debugging while we work..., +        builder.field(Fields._SHARD_ID, shardId.id());, +        if (getSeqNo() >= 0) {, +            builder.field(Fields._SEQ_NO, getSeqNo());, +        }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]ReplicationResponse.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]admin[/\\]indices[/\\]refresh[/\\]TransportShardRefreshAction.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/ActionListenerResponseHandler.java, +    private final ActionListener<? super Response> listener;, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Supplier<Response> responseSupplier) {, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbersService;, +public abstract class DocWriteResponse extends ReplicationResponse implements StatusToXContent {, +    private long seqNo;, +    public DocWriteResponse(ShardId shardId, String type, String id, long seqNo, long version) {, +        this.seqNo = seqNo;, +     * Returns the sequence number assigned for this change. Returns {@link SequenceNumbersService#UNASSIGNED_SEQ_NO} if the operation, +     * wasn't performed (i.e., an update operation that resulted in a NOOP)., +    public long getSeqNo() {, +        return seqNo;, +        seqNo = in.readZLong();, +        out.writeZLong(seqNo);, +        static final String _SHARD_ID = "_shard_id";, +        static final String _SEQ_NO = "_seq_no";, +                .field(Fields._VERSION, version);, +        //nocommit: i'm not sure we want to expose it in the api but it will be handy for debugging while we work..., +        builder.field(Fields._SHARD_ID, shardId.id());, +        if (getSeqNo() >= 0) {, +            builder.field(Fields._SEQ_NO, getSeqNo());, +        }, +++ b/core/src/main/java/org/elasticsearch/action/ReplicationResponse.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Streamable;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.rest.RestStatus;, +, +import java.io.IOException;, +, +/**, + * Base class for write action responses., + */]