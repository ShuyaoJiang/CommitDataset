[+++ b/distribution/build.gradle, +          dirMode 0755, +++ b/distribution/build.gradle, +          dirMode 0755, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +                public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {, +                    if ("bin".equals(file.getParent().getFileName().toString())) {, +                        setFileAttributes(file, BIN_FILES_PERMS);, +                        setFileAttributes(file, PLUGIN_FILES_PERMS);, +                    return FileVisitResult.CONTINUE;, +, +                @Override, +                public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {, +                    setFileAttributes(dir, PLUGIN_DIR_PERMS);, +++ b/distribution/build.gradle, +          dirMode 0755, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +                public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {, +                    if ("bin".equals(file.getParent().getFileName().toString())) {, +                        setFileAttributes(file, BIN_FILES_PERMS);, +                        setFileAttributes(file, PLUGIN_FILES_PERMS);, +                    return FileVisitResult.CONTINUE;, +, +                @Override, +                public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {, +                    setFileAttributes(dir, PLUGIN_DIR_PERMS);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +    public void testPluginPermissions() throws Exception {, +, +        final Tuple<Path, Environment> env = createEnv(fs, temp);, +        final Path pluginDir = createPluginDir(temp);, +        final Path resourcesDir = pluginDir.resolve("resources");, +        final Path platformDir = pluginDir.resolve("platform");, +        final Path platformNameDir = platformDir.resolve("linux-x86_64");, +        final Path platformBinDir = platformNameDir.resolve("bin");, +, +        Files.createFile(pluginDir.resolve("fake-" + Version.CURRENT.toString() + ".jar"));, +        Files.createFile(platformBinDir.resolve("fake_executable"));, +        Files.createDirectory(resourcesDir);, +        Files.createFile(resourcesDir.resolve("resource"));, +, +        final String pluginZip = createPluginUrl("fake", pluginDir);, +, +, +        final Path fake = env.v2().pluginsFile().resolve("fake");, +        final Path resources = fake.resolve("resources");, +        final Path platform = fake.resolve("platform");, +        final Path platformName = platform.resolve("linux-x86_64");, +        final Path bin = platformName.resolve("bin");, +        assert755(fake);, +        assert644(fake.resolve("fake-" + Version.CURRENT + ".jar"));, +        assert755(resources);, +        assert644(resources.resolve("resource"));, +        assert755(platform);, +        assert755(platformName);, +        assert755(bin.resolve("fake_executable"));, +    }, +, +    private void assert644(final Path path) throws IOException {, +        final Set<PosixFilePermission> permissions = Files.getPosixFilePermissions(path);, +        assertTrue(permissions.contains(PosixFilePermission.OWNER_READ));, +        assertTrue(permissions.contains(PosixFilePermission.OWNER_WRITE));, +        assertFalse(permissions.contains(PosixFilePermission.OWNER_EXECUTE));, +        assertTrue(permissions.contains(PosixFilePermission.GROUP_READ));, +        assertFalse(permissions.contains(PosixFilePermission.GROUP_WRITE));, +        assertFalse(permissions.contains(PosixFilePermission.GROUP_EXECUTE));, +        assertTrue(permissions.contains(PosixFilePermission.OTHERS_READ));, +        assertFalse(permissions.contains(PosixFilePermission.OTHERS_WRITE));, +        assertFalse(permissions.contains(PosixFilePermission.OTHERS_EXECUTE));, +    }, +, +    private void assert755(final Path path) throws IOException {, +        final Set<PosixFilePermission> permissions = Files.getPosixFilePermissions(path);, +        assertTrue(permissions.contains(PosixFilePermission.OWNER_READ));, +        assertTrue(permissions.contains(PosixFilePermission.OWNER_WRITE));, +        assertTrue(permissions.contains(PosixFilePermission.OWNER_EXECUTE));, +        assertTrue(permissions.contains(PosixFilePermission.GROUP_READ));, +        assertFalse(permissions.contains(PosixFilePermission.GROUP_WRITE));, +        assertTrue(permissions.contains(PosixFilePermission.GROUP_EXECUTE));, +        assertTrue(permissions.contains(PosixFilePermission.OTHERS_READ));, +        assertFalse(permissions.contains(PosixFilePermission.OTHERS_WRITE));, +        assertTrue(permissions.contains(PosixFilePermission.OTHERS_EXECUTE));, +++ b/distribution/build.gradle, +          dirMode 0755, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +                public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {, +                    if ("bin".equals(file.getParent().getFileName().toString())) {, +                        setFileAttributes(file, BIN_FILES_PERMS);, +                        setFileAttributes(file, PLUGIN_FILES_PERMS);, +                    return FileVisitResult.CONTINUE;, +, +                @Override, +                public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {, +                    setFileAttributes(dir, PLUGIN_DIR_PERMS);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +    public void testPluginPermissions() throws Exception {, +, +        final Tuple<Path, Environment> env = createEnv(fs, temp);, +        final Path pluginDir = createPluginDir(temp);, +        final Path resourcesDir = pluginDir.resolve("resources");]