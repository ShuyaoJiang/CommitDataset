[+++ b/src/test/java/org/elasticsearch/test/ElasticsearchTestCase.java, +import com.carrotsearch.randomizedtesting.rules.TestRuleAdapter;, +import org.junit.*;, +import org.junit.rules.RuleChain;, +import java.util.*;, +    @Rule, +    public RuleChain failureAndSuccessEvents = RuleChain.outerRule(new TestRuleAdapter() {, +        @Override, +        protected void afterIfSuccessful() throws Throwable {, +            ElasticsearchTestCase.this.afterIfSuccessful();, +        }, +, +        @Override, +        protected void afterAlways(List<Throwable> errors) throws Throwable {, +            if (errors != null && errors.isEmpty() == false) {, +                ElasticsearchTestCase.this.afterIfFailed(errors);, +            }, +            super.afterAlways(errors);, +        }, +    });, +, +    /** called when a test fails, supplying the errors it generated */, +    protected void afterIfFailed(List<Throwable> errors) {, +    }, +, +    /** called after a test is finished, but only if succesfull */, +    protected void afterIfSuccessful() {, +    }, +, +     *, +     *, +    public static byte randomByte() {, +        return (byte) random().nextInt();, +    }, +, +    public static short randomShort() {, +        return (short) random().nextInt();, +    }, +, +    public static int randomInt() {, +        return random().nextInt();, +    }, +, +    public static float randomFloat() {, +        return random().nextFloat();, +    }, +, +    public static double randomDouble() {, +        return random().nextDouble();, +    }, +, +    public static long randomLong() {, +        return random().nextLong();, +    }, +            if (e.getKey().isAlive()) {, +            }, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchTestCase.java, +import com.carrotsearch.randomizedtesting.rules.TestRuleAdapter;, +import org.junit.*;, +import org.junit.rules.RuleChain;, +import java.util.*;, +    @Rule, +    public RuleChain failureAndSuccessEvents = RuleChain.outerRule(new TestRuleAdapter() {, +        @Override, +        protected void afterIfSuccessful() throws Throwable {, +            ElasticsearchTestCase.this.afterIfSuccessful();, +        }, +, +        @Override, +        protected void afterAlways(List<Throwable> errors) throws Throwable {, +            if (errors != null && errors.isEmpty() == false) {, +                ElasticsearchTestCase.this.afterIfFailed(errors);, +            }, +            super.afterAlways(errors);, +        }, +    });, +, +    /** called when a test fails, supplying the errors it generated */, +    protected void afterIfFailed(List<Throwable> errors) {, +    }, +, +    /** called after a test is finished, but only if succesfull */, +    protected void afterIfSuccessful() {, +    }, +, +     *, +     *, +    public static byte randomByte() {, +        return (byte) random().nextInt();, +    }, +, +    public static short randomShort() {, +        return (short) random().nextInt();, +    }, +, +    public static int randomInt() {, +        return random().nextInt();, +    }, +, +    public static float randomFloat() {]