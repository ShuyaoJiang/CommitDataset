[+++ b/core/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +        public Builder updateBlocks(IndexMetaData indexMetaData) {, +            removeIndexBlock(indexMetaData.index(), MetaDataIndexStateService.INDEX_CLOSED_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_ONLY_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_WRITE_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_METADATA_BLOCK);, +            return addBlocks(indexMetaData);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +        public Builder updateBlocks(IndexMetaData indexMetaData) {, +            removeIndexBlock(indexMetaData.index(), MetaDataIndexStateService.INDEX_CLOSED_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_ONLY_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_WRITE_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_METADATA_BLOCK);, +            return addBlocks(indexMetaData);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    blocks.updateBlocks(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +        public Builder updateBlocks(IndexMetaData indexMetaData) {, +            removeIndexBlock(indexMetaData.index(), MetaDataIndexStateService.INDEX_CLOSED_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_ONLY_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_WRITE_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_METADATA_BLOCK);, +            return addBlocks(indexMetaData);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    blocks.updateBlocks(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +                                blocks.addBlocks(updatedIndexMetaData);, +                                blocks.updateBlocks(updatedIndexMetaData);, +, +++ b/core/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +        public Builder updateBlocks(IndexMetaData indexMetaData) {, +            removeIndexBlock(indexMetaData.index(), MetaDataIndexStateService.INDEX_CLOSED_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_ONLY_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_WRITE_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_METADATA_BLOCK);, +            return addBlocks(indexMetaData);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    blocks.updateBlocks(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +                                blocks.addBlocks(updatedIndexMetaData);, +                                blocks.updateBlocks(updatedIndexMetaData);, +, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +    public void testCreateIndexWithMetadataBlocks() {, +        assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_BLOCKS_METADATA, true)));, +        assertBlocked(client().admin().indices().prepareGetSettings("test"), IndexMetaData.INDEX_METADATA_BLOCK);, +        disableIndexBlock("test", IndexMetaData.SETTING_BLOCKS_METADATA);, +    }, +, +    @Test, +++ b/core/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +        public Builder updateBlocks(IndexMetaData indexMetaData) {, +            removeIndexBlock(indexMetaData.index(), MetaDataIndexStateService.INDEX_CLOSED_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_ONLY_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_READ_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_WRITE_BLOCK);, +            removeIndexBlock(indexMetaData.index(), IndexMetaData.INDEX_METADATA_BLOCK);, +            return addBlocks(indexMetaData);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    blocks.updateBlocks(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +                                blocks.addBlocks(updatedIndexMetaData);, +                                blocks.updateBlocks(updatedIndexMetaData);, +, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +    public void testCreateIndexWithMetadataBlocks() {, +        assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_BLOCKS_METADATA, true)));, +        assertBlocked(client().admin().indices().prepareGetSettings("test"), IndexMetaData.INDEX_METADATA_BLOCK);, +        disableIndexBlock("test", IndexMetaData.SETTING_BLOCKS_METADATA);, +    }, +, +    @Test, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +import org.elasticsearch.cluster.block.ClusterBlocks;, +    public void recreateBlocksOnRestoreTest() throws Exception {, +        Client client = client();, +, +        logger.info("-->  creating repository");, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(Settings.settingsBuilder(), +                        .put("location", randomRepoPath()), +                        .put("compress", randomBoolean()), +                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));, +]