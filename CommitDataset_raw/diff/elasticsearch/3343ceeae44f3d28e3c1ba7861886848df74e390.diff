[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readException());, +     * @see ExceptionsHelper#unwrapCause(Throwable), +            throwable.addSuppressed(in.readException());, +    public static void renderException(XContentBuilder builder, Params params, Exception e) throws IOException {, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e);, +        ElasticsearchException.toXContent(builder, params, e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readException());, +     * @see ExceptionsHelper#unwrapCause(Throwable), +            throwable.addSuppressed(in.readException());, +    public static void renderException(XContentBuilder builder, Params params, Exception e) throws IOException {, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e);, +        ElasticsearchException.toXContent(builder, params, e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +    public ElasticsearchSecurityException(String msg, Exception cause, Object... args) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readException());, +     * @see ExceptionsHelper#unwrapCause(Throwable), +            throwable.addSuppressed(in.readException());, +    public static void renderException(XContentBuilder builder, Params params, Exception e) throws IOException {, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e);, +        ElasticsearchException.toXContent(builder, params, e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +    public ElasticsearchSecurityException(String msg, Exception cause, Object... args) {, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +    public static RuntimeException convertToRuntime(Exception e) {, +        if (e instanceof RuntimeException) {, +            return (RuntimeException) e;, +        return new ElasticsearchException(e);, +    public static ElasticsearchException convertToElastic(Exception e) {, +        if (e instanceof ElasticsearchException) {, +            return (ElasticsearchException) e;, +        return new ElasticsearchException(e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readException());, +     * @see ExceptionsHelper#unwrapCause(Throwable), +            throwable.addSuppressed(in.readException());, +    public static void renderException(XContentBuilder builder, Params params, Exception e) throws IOException {, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e);, +        ElasticsearchException.toXContent(builder, params, e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +    public ElasticsearchSecurityException(String msg, Exception cause, Object... args) {, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +    public static RuntimeException convertToRuntime(Exception e) {, +        if (e instanceof RuntimeException) {, +            return (RuntimeException) e;, +        return new ElasticsearchException(e);, +    public static ElasticsearchException convertToElastic(Exception e) {, +        if (e instanceof ElasticsearchException) {, +            return (ElasticsearchException) e;, +        return new ElasticsearchException(e);, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +    void onFailure(Exception e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readException());, +     * @see ExceptionsHelper#unwrapCause(Throwable), +            throwable.addSuppressed(in.readException());, +    public static void renderException(XContentBuilder builder, Params params, Exception e) throws IOException {, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e);, +        ElasticsearchException.toXContent(builder, params, e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +    public ElasticsearchSecurityException(String msg, Exception cause, Object... args) {, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +    public static RuntimeException convertToRuntime(Exception e) {, +        if (e instanceof RuntimeException) {, +            return (RuntimeException) e;, +        return new ElasticsearchException(e);, +    public static ElasticsearchException convertToElastic(Exception e) {, +        if (e instanceof ElasticsearchException) {, +            return (ElasticsearchException) e;, +        return new ElasticsearchException(e);, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +    void onFailure(Exception e);, +++ b/core/src/main/java/org/elasticsearch/action/ActionRunnable.java, + * Base class for {@link Runnable}s that need to call {@link ActionListener#onFailure(Exception)} in case an uncaught, +     * Calls the action listeners {@link ActionListener#onFailure(Exception)} method with the given exception., +    public void onFailure(Exception e) {, +        listener.onFailure(e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readException());, +     * @see ExceptionsHelper#unwrapCause(Throwable), +            throwable.addSuppressed(in.readException());, +    public static void renderException(XContentBuilder builder, Params params, Exception e) throws IOException {, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e);, +        ElasticsearchException.toXContent(builder, params, e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +    public ElasticsearchSecurityException(String msg, Exception cause, Object... args) {, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +    public static RuntimeException convertToRuntime(Exception e) {, +        if (e instanceof RuntimeException) {, +            return (RuntimeException) e;, +        return new ElasticsearchException(e);, +    public static ElasticsearchException convertToElastic(Exception e) {, +        if (e instanceof ElasticsearchException) {, +            return (ElasticsearchException) e;, +        return new ElasticsearchException(e);, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +    void onFailure(Exception e);, +++ b/core/src/main/java/org/elasticsearch/action/ActionRunnable.java]