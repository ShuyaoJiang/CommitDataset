[+++ b/docs/reference/docs/reindex.asciidoc, +The `host` parameter must contain a scheme, host, port (e.g., +`https://otherhost:9200`) and optional path (e.g. `https://otherhost:9200/proxy`)., +The `username` and `password` parameters are optional, and when they are present `_reindex`, +will connect to the remote Elasticsearch node using basic auth. Be sure to use `https` when, +using basic auth or the password will be sent in plain text., +++ b/docs/reference/docs/reindex.asciidoc, +The `host` parameter must contain a scheme, host, port (e.g., +`https://otherhost:9200`) and optional path (e.g. `https://otherhost:9200/proxy`)., +The `username` and `password` parameters are optional, and when they are present `_reindex`, +will connect to the remote Elasticsearch node using basic auth. Be sure to use `https` when, +using basic auth or the password will be sent in plain text., +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +    private static final Pattern HOST_PATTERN = Pattern.compile("(?<scheme>[^:]+)://(?<host>[^:]+):(?<port>\\d+)(?<pathPrefix>/.*)?");, +            throw new IllegalArgumentException("[host] must be of the form [scheme]://[host]:[port](/[pathPrefix])? but was [", +                + hostInRequest + "]");, +        String pathPrefix = hostMatcher.group("pathPrefix");, +        return new RemoteInfo(scheme, host, port, pathPrefix, queryForRemote(source),, +            username, password, headers, socketTimeout, connectTimeout);, +++ b/docs/reference/docs/reindex.asciidoc, +The `host` parameter must contain a scheme, host, port (e.g., +`https://otherhost:9200`) and optional path (e.g. `https://otherhost:9200/proxy`)., +The `username` and `password` parameters are optional, and when they are present `_reindex`, +will connect to the remote Elasticsearch node using basic auth. Be sure to use `https` when, +using basic auth or the password will be sent in plain text., +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +    private static final Pattern HOST_PATTERN = Pattern.compile("(?<scheme>[^:]+)://(?<host>[^:]+):(?<port>\\d+)(?<pathPrefix>/.*)?");, +            throw new IllegalArgumentException("[host] must be of the form [scheme]://[host]:[port](/[pathPrefix])? but was [", +                + hostInRequest + "]");, +        String pathPrefix = hostMatcher.group("pathPrefix");, +        return new RemoteInfo(scheme, host, port, pathPrefix, queryForRemote(source),, +            username, password, headers, socketTimeout, connectTimeout);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportReindexAction.java, +import org.elasticsearch.client.RestClientBuilder;, +        final RestClientBuilder builder =, +            RestClient.builder(new HttpHost(remoteInfo.getHost(), remoteInfo.getPort(), remoteInfo.getScheme())), +            });, +        if (Strings.hasLength(remoteInfo.getPathPrefix()) && "/".equals(remoteInfo.getPathPrefix()) == false) {, +            builder.setPathPrefix(remoteInfo.getPathPrefix());, +        }, +        return builder.build();, +++ b/docs/reference/docs/reindex.asciidoc, +The `host` parameter must contain a scheme, host, port (e.g., +`https://otherhost:9200`) and optional path (e.g. `https://otherhost:9200/proxy`)., +The `username` and `password` parameters are optional, and when they are present `_reindex`, +will connect to the remote Elasticsearch node using basic auth. Be sure to use `https` when, +using basic auth or the password will be sent in plain text., +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +    private static final Pattern HOST_PATTERN = Pattern.compile("(?<scheme>[^:]+)://(?<host>[^:]+):(?<port>\\d+)(?<pathPrefix>/.*)?");, +            throw new IllegalArgumentException("[host] must be of the form [scheme]://[host]:[port](/[pathPrefix])? but was [", +                + hostInRequest + "]");, +        String pathPrefix = hostMatcher.group("pathPrefix");, +        return new RemoteInfo(scheme, host, port, pathPrefix, queryForRemote(source),, +            username, password, headers, socketTimeout, connectTimeout);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportReindexAction.java, +import org.elasticsearch.client.RestClientBuilder;, +        final RestClientBuilder builder =, +            RestClient.builder(new HttpHost(remoteInfo.getHost(), remoteInfo.getPort(), remoteInfo.getScheme())), +            });, +        if (Strings.hasLength(remoteInfo.getPathPrefix()) && "/".equals(remoteInfo.getPathPrefix()) == false) {, +            builder.setPathPrefix(remoteInfo.getPathPrefix());, +        }, +        return builder.build();, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexFromRemoteBuildRestClientTests.java, +        for(final String path: new String[]{"", null, "/", "path"}) {, +            RemoteInfo remoteInfo = new RemoteInfo("https", "localhost", 9200, path, new BytesArray("ignored"), null, null, emptyMap(),, +    }, +        RemoteInfo remoteInfo = new RemoteInfo("https", "localhost", 9200, null, new BytesArray("ignored"), null, null,, +++ b/docs/reference/docs/reindex.asciidoc, +The `host` parameter must contain a scheme, host, port (e.g., +`https://otherhost:9200`) and optional path (e.g. `https://otherhost:9200/proxy`)., +The `username` and `password` parameters are optional, and when they are present `_reindex`, +will connect to the remote Elasticsearch node using basic auth. Be sure to use `https` when, +using basic auth or the password will be sent in plain text., +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +    private static final Pattern HOST_PATTERN = Pattern.compile("(?<scheme>[^:]+)://(?<host>[^:]+):(?<port>\\d+)(?<pathPrefix>/.*)?");, +            throw new IllegalArgumentException("[host] must be of the form [scheme]://[host]:[port](/[pathPrefix])? but was [", +                + hostInRequest + "]");, +        String pathPrefix = hostMatcher.group("pathPrefix");, +        return new RemoteInfo(scheme, host, port, pathPrefix, queryForRemote(source),, +            username, password, headers, socketTimeout, connectTimeout);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportReindexAction.java, +import org.elasticsearch.client.RestClientBuilder;, +        final RestClientBuilder builder =, +            RestClient.builder(new HttpHost(remoteInfo.getHost(), remoteInfo.getPort(), remoteInfo.getScheme())), +            });, +        if (Strings.hasLength(remoteInfo.getPathPrefix()) && "/".equals(remoteInfo.getPathPrefix()) == false) {, +            builder.setPathPrefix(remoteInfo.getPathPrefix());, +        }, +        return builder.build();, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexFromRemoteBuildRestClientTests.java, +        for(final String path: new String[]{"", null, "/", "path"}) {, +            RemoteInfo remoteInfo = new RemoteInfo("https", "localhost", 9200, path, new BytesArray("ignored"), null, null, emptyMap(),, +    }, +        RemoteInfo remoteInfo = new RemoteInfo("https", "localhost", 9200, null, new BytesArray("ignored"), null, null,, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexFromRemoteWhitelistTests.java, +        return new RemoteInfo(randomAlphaOfLength(5), host, port, null, new BytesArray("test"), null, null, emptyMap(),, +                new RemoteInfo(randomAlphaOfLength(5), "es.example.com", 9200, null, new BytesArray("test"), null, null, emptyMap(),, +++ b/docs/reference/docs/reindex.asciidoc, +The `host` parameter must contain a scheme, host, port (e.g.]