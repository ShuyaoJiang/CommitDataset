[+++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +, +, +, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +, +, +, +++ b/src/main/java/org/elasticsearch/search/highlight/PlainHighlighter.java, +        String[] fragments;, +, +        if (noMatchSize > 0 && textsToHighlight.size() > 0) {, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +, +, +, +++ b/src/main/java/org/elasticsearch/search/highlight/PlainHighlighter.java, +        String[] fragments;, +, +        if (noMatchSize > 0 && textsToHighlight.size() > 0) {, +++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +        assertNoFailures(searchResponse);, +        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));, +        assertThat(searchResponse.getHits().getAt(0).highlightFields().get("field2").fragments()[0].string(), equalTo("The <x>quick</x> <x>brown</x> fox jumps over the lazy dog"));, +    private static String randomStoreField() {, +        if (randomBoolean()) {, +            return "store=yes,";, +        }, +        return "";, +    }, +, +, +            .addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets"), +            .addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets"), +        // The no match fragment should come from the first value of a multi-valued field, +        index("test", "type1", "2", "text", new String[] {"", text2});, +        field.highlighterType("plain");, +        response = client().prepareSearch("test"), +                .setQuery(QueryBuilders.idsQuery("type1").addIds("2")), +                .addHighlightedField(field).get();, +        assertNotHighlighted(response, 0, "text");, +, +        // And the fvh should do the same, +        assertNotHighlighted(response, 0, "text");, +        index("test", "type1", "3", "text", new String[] {});, +        response = client().prepareSearch("test"), +                .setQuery(QueryBuilders.idsQuery("type1").addIds("3")), +                .addHighlightedField(field).get();, +        assertNotHighlighted(response, 0, "text");, +        // And the fvh should do the same, +        assertNotHighlighted(response, 0, "text");, +        // Same for if the field doesn't even exist on the document, +        index("test", "type1", "4");, +        response = client().prepareSearch("test"), +                .setQuery(QueryBuilders.idsQuery("type1").addIds("4")), +                .addHighlightedField(field).get();, +        assertNotHighlighted(response, 0, "text");, +        // And the fvh should do the same, +        assertNotHighlighted(response, 0, "text");, +        assertNotHighlighted(response, 0, "text");, +        assertNotHighlighted(response, 0, "text");, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +, +, +, +++ b/src/main/java/org/elasticsearch/search/highlight/PlainHighlighter.java, +        String[] fragments;, +, +        if (noMatchSize > 0 && textsToHighlight.size() > 0) {, +++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +        assertNoFailures(searchResponse);, +        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));, +        assertThat(searchResponse.getHits().getAt(0).highlightFields().get("field2").fragments()[0].string(), equalTo("The <x>quick</x> <x>brown</x> fox jumps over the lazy dog"));, +    private static String randomStoreField() {, +        if (randomBoolean()) {, +            return "store=yes,";, +        }, +        return "";, +    }, +, +, +            .addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets"), +            .addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets"), +        // The no match fragment should come from the first value of a multi-valued field, +        index("test", "type1", "2", "text", new String[] {"", text2});, +        field.highlighterType("plain");, +        response = client().prepareSearch("test"), +                .setQuery(QueryBuilders.idsQuery("type1").addIds("2")), +                .addHighlightedField(field).get();, +        assertNotHighlighted(response, 0, "text");, +, +        // And the fvh should do the same, +        assertNotHighlighted(response, 0, "text");, +        index("test", "type1", "3", "text", new String[] {});, +        response = client().prepareSearch("test"), +                .setQuery(QueryBuilders.idsQuery("type1").addIds("3")), +                .addHighlightedField(field).get();, +        assertNotHighlighted(response, 0, "text");, +        // And the fvh should do the same, +        assertNotHighlighted(response, 0, "text");]