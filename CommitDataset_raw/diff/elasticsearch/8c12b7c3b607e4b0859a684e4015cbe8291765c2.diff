[+++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +import org.elasticsearch.transport.TcpTransport;, +            .put(TcpTransport.TCP_CONNECT_TIMEOUT.getKey(), "10s") // Network delay disruption waits for the min between this, +                                                                   // value and the time of disruption and does not recover immediately, +                                                                   // when disruption is stop. We should make sure we recover faster, +                                                                   // then the default of 30s, causing ensureGreen and friends to time out, +, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +import org.elasticsearch.transport.TcpTransport;, +            .put(TcpTransport.TCP_CONNECT_TIMEOUT.getKey(), "10s") // Network delay disruption waits for the min between this, +                                                                   // value and the time of disruption and does not recover immediately, +                                                                   // when disruption is stop. We should make sure we recover faster, +                                                                   // then the default of 30s, causing ensureGreen and friends to time out, +, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.get/10_basic.yaml, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +import org.elasticsearch.transport.TcpTransport;, +            .put(TcpTransport.TCP_CONNECT_TIMEOUT.getKey(), "10s") // Network delay disruption waits for the min between this, +                                                                   // value and the time of disruption and does not recover immediately, +                                                                   // when disruption is stop. We should make sure we recover faster, +                                                                   // then the default of 30s, causing ensureGreen and friends to time out, +, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.get/10_basic.yaml, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.status/10_basic.yaml, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +import org.elasticsearch.transport.TcpTransport;, +            .put(TcpTransport.TCP_CONNECT_TIMEOUT.getKey(), "10s") // Network delay disruption waits for the min between this, +                                                                   // value and the time of disruption and does not recover immediately, +                                                                   // when disruption is stop. We should make sure we recover faster, +                                                                   // then the default of 30s, causing ensureGreen and friends to time out, +, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.get/10_basic.yaml, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.status/10_basic.yaml, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import static java.util.Collections.singletonMap;, +        wipeSnapshots();, +    }, +, +    /**, +     * Wipe fs snapshots we created one by one and all repositories so that the next test can create the repositories fresh and they'll, +     * start empty. There isn't an API to delete all snapshots. There is an API to delete all snapshot repositories but that leaves all of, +     * the snapshots intact in the repository., +     */, +    private void wipeSnapshots() throws IOException {, +        for (Map.Entry<String, ?> repo : entityAsMap(adminClient.performRequest("GET", "_snapshot/_all")).entrySet()) {, +            String repoName = repo.getKey();, +            Map<?, ?> repoSpec = (Map<?, ?>) repo.getValue();, +            String repoType = (String) repoSpec.get("type");, +            if (repoType.equals("fs")) {, +                // All other repo types we really don't have a chance of being able to iterate properly, sadly., +                String url = "_snapshot/" + repoName + "/_all";, +                Map<String, String> params = singletonMap("ignore_unavailable", "true");, +                List<?> snapshots = (List<?>) entityAsMap(adminClient.performRequest("GET", url, params)).get("snapshots");, +                for (Object snapshot : snapshots) {, +                    Map<?, ?> snapshotInfo = (Map<?, ?>) snapshot;, +                    String name = (String) snapshotInfo.get("snapshot");, +                    logger.debug("wiping snapshot [{}/{}]", repoName, name);, +                    adminClient().performRequest("DELETE", "_snapshot/" + repoName + "/" + name);, +                }, +            }, +            logger.debug("wiping snapshot repository [{}]", repoName);, +            adminClient().performRequest("DELETE", "_snapshot/" + repoName);, +        }]