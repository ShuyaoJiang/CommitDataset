[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/broadcast/TransportBroadcastPingAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.routing.GroupShardsIterator;, +import static org.elasticsearch.action.Actions.*;, +, +    @Override protected GroupShardsIterator shards(BroadcastPingRequest request, ClusterState clusterState) {, +        return indicesService.searchShards(clusterState, processIndices(clusterState, request.indices()), request.queryHint());, +    }, +, +    @Override protected BroadcastPingResponse newResponse(BroadcastPingRequest request, AtomicReferenceArray shardsResponses, ClusterState clusterState) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/broadcast/TransportBroadcastPingAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.routing.GroupShardsIterator;, +import static org.elasticsearch.action.Actions.*;, +, +    @Override protected GroupShardsIterator shards(BroadcastPingRequest request, ClusterState clusterState) {, +        return indicesService.searchShards(clusterState, processIndices(clusterState, request.indices()), request.queryHint());, +    }, +, +    @Override protected BroadcastPingResponse newResponse(BroadcastPingRequest request, AtomicReferenceArray shardsResponses, ClusterState clusterState) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.action.support.broadcast.BroadcastOperationRequest;, +import org.elasticsearch.action.support.broadcast.BroadcastOperationThreading;, +public class FlushRequest extends BroadcastOperationRequest {, +, +    FlushRequest() {, +, +    }, +        super(indices, null);, +        // we want to do the refresh in parallel on local shards..., +        operationThreading(BroadcastOperationThreading.THREAD_PER_SHARD);, +    @Override public FlushRequest operationThreading(BroadcastOperationThreading operationThreading) {, +        super.operationThreading(operationThreading);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/broadcast/TransportBroadcastPingAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.routing.GroupShardsIterator;, +import static org.elasticsearch.action.Actions.*;, +, +    @Override protected GroupShardsIterator shards(BroadcastPingRequest request, ClusterState clusterState) {, +        return indicesService.searchShards(clusterState, processIndices(clusterState, request.indices()), request.queryHint());, +    }, +, +    @Override protected BroadcastPingResponse newResponse(BroadcastPingRequest request, AtomicReferenceArray shardsResponses, ClusterState clusterState) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.action.support.broadcast.BroadcastOperationRequest;, +import org.elasticsearch.action.support.broadcast.BroadcastOperationThreading;, +public class FlushRequest extends BroadcastOperationRequest {, +, +    FlushRequest() {, +, +    }, +        super(indices, null);, +        // we want to do the refresh in parallel on local shards..., +        operationThreading(BroadcastOperationThreading.THREAD_PER_SHARD);, +    @Override public FlushRequest operationThreading(BroadcastOperationThreading operationThreading) {, +        super.operationThreading(operationThreading);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushResponse.java, +import org.elasticsearch.action.support.broadcast.BroadcastOperationResponse;, +public class FlushResponse extends BroadcastOperationResponse {, +    FlushResponse(int successfulShards, int failedShards) {, +        super(successfulShards, failedShards);, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/broadcast/TransportBroadcastPingAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.routing.GroupShardsIterator;, +import static org.elasticsearch.action.Actions.*;, +, +    @Override protected GroupShardsIterator shards(BroadcastPingRequest request, ClusterState clusterState) {, +        return indicesService.searchShards(clusterState, processIndices(clusterState, request.indices()), request.queryHint());, +    }, +, +    @Override protected BroadcastPingResponse newResponse(BroadcastPingRequest request, AtomicReferenceArray shardsResponses, ClusterState clusterState) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.action.support.broadcast.BroadcastOperationRequest;, +import org.elasticsearch.action.support.broadcast.BroadcastOperationThreading;, +public class FlushRequest extends BroadcastOperationRequest {, +, +    FlushRequest() {, +, +    }, +        super(indices, null);, +        // we want to do the refresh in parallel on local shards..., +        operationThreading(BroadcastOperationThreading.THREAD_PER_SHARD);, +    @Override public FlushRequest operationThreading(BroadcastOperationThreading operationThreading) {, +        super.operationThreading(operationThreading);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushResponse.java, +import org.elasticsearch.action.support.broadcast.BroadcastOperationResponse;, +public class FlushResponse extends BroadcastOperationResponse {, +    FlushResponse(int successfulShards, int failedShards) {, +        super(successfulShards, failedShards);, +        super.readFrom(in);, +        super.writeTo(out);, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java]