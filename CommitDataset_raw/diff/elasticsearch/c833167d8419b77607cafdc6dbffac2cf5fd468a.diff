[+++ b/docs/painless/index.asciidoc, +++ b/docs/painless/index.asciidoc, +++ b/docs/painless/painless-api-reference.asciidoc, +[[painless-api-reference]], +== Painless API Reference, +Painless has a strict whitelist for methods and classes to ensure all, +painless scripts are secure. Most of these methods are exposed directly, +from the Java Runtime Enviroment (JRE) while others are part of, +Elasticsearch or Painless itself. Below is a list of all available, +classes grouped with their respected methods. Clicking on the method, +name takes you to the documentation for that specific method.  Methods, +defined in the JRE also have a `(java 9)` link which can be used to see, +the method's documentation in Java 9., +++ b/docs/painless/index.asciidoc, +++ b/docs/painless/painless-api-reference.asciidoc, +[[painless-api-reference]], +== Painless API Reference, +Painless has a strict whitelist for methods and classes to ensure all, +painless scripts are secure. Most of these methods are exposed directly, +from the Java Runtime Enviroment (JRE) while others are part of, +Elasticsearch or Painless itself. Below is a list of all available, +classes grouped with their respected methods. Clicking on the method, +name takes you to the documentation for that specific method.  Methods, +defined in the JRE also have a `(java 9)` link which can be used to see, +the method's documentation in Java 9., +++ b/docs/painless/painless-casting.asciidoc, +[[painless-casting]], +=== Casting, +, +Casting is the conversion of one type to another. Implicit casts are casts that, +occur automatically, such as during an assignment operation. Explicit casts are, +casts where you use the casting operator to explicitly convert one type to, +another. This is necessary during operations where the cast cannot be inferred., +, +To cast to a new type, precede the expression by the new type enclosed in, +parentheses, for example, +`(int)x`., +, +The following sections specify the implicit casts that can be performed and the, +explicit casts that are allowed. The only other permitted cast is casting, +a single character `String` to a `char`., +, +*Grammar:*, +[source,ANTLR4], +----, +cast: '(' TYPE ')' expression, +----, +, +[[numeric-casting]], +==== Numeric Casting, +, +The following table shows the allowed implicit and explicit casts between, +numeric types. Read the table by row. To find out if you need to explicitly, +cast from type A to type B, find the row for type A and scan across to the, +column for type B., +, +IMPORTANT: Explicit casts between numeric types can result in some data loss. A, +smaller numeric type cannot necessarily accommodate the value from a larger, +numeric type. You might also lose precision when casting from integer types, +to floating point types., +, +|====, +|       | byte     | short    | char     | int      | long     | float    | double, +| byte  |          | implicit | implicit | implicit | implicit | implicit | implicit, +| short | explicit |          | explicit | implicit | implicit | implicit | implicit, +| char  | explicit | explicit |          | implicit | implicit | implicit | implicit, +| int   | explicit | explicit | explicit |          | implicit | implicit | implicit, +| long  | explicit | explicit | explicit | explicit |          | implicit | implicit, +| float | explicit | explicit | explicit | explicit | explicit |          | implicit, +| double | explicit | explicit | explicit | explicit | explicit | explicit |, +|====, +, +, +Example(s), +[source,Java], +----, +int a = 1;            // Declare int variable a and set it to the literal, +                      //   value 1, +long b = a;           // Declare long variable b and set it to int variable, +                      //    a with an implicit cast to convert from int to long, +short c = (short)b;   // Declare short variable c, explicitly cast b to a, +                      //   short, and assign b to c, +byte d = a;           // ERROR: Casting an int to a byte requires an explicit, +                      //   cast, +double e = (double)a; // Explicitly cast int variable a to a double and assign, +                      //   it to the double variable e. The explicit cast is, +                      //   allowed, but it is not necessary., +----, +, +[[reference-casting]], +==== Reference Casting, +, +A reference type can be implicitly cast to another reference type as long as, +the type being cast _from_ is a descendant of the type being cast _to_.  A, +reference type can be explicitly cast _to_ if the type being cast to is a, +descendant of the type being cast _from_., +, +*Examples:*, +[source,Java], +----]