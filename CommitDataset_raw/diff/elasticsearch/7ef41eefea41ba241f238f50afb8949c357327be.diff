[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +import java.lang.management.GarbageCollectorMXBean;, +import java.lang.management.ManagementFactory;, +import java.lang.management.MemoryMXBean;, +import java.lang.management.MemoryUsage;, +import java.lang.management.RuntimeMXBean;, +import java.lang.management.ThreadMXBean;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +import java.lang.management.GarbageCollectorMXBean;, +import java.lang.management.ManagementFactory;, +import java.lang.management.MemoryMXBean;, +import java.lang.management.MemoryUsage;, +import java.lang.management.RuntimeMXBean;, +import java.lang.management.ThreadMXBean;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/process/JmxProcessProbe.java, +import java.lang.management.ManagementFactory;, +import java.lang.management.OperatingSystemMXBean;, +import java.lang.reflect.Method;, +, +    private static final OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();, +, +    private static final Method getMaxFileDescriptorCountField;, +    private static final Method getOpenFileDescriptorCountField;, +, +    static {, +        Method method = null;, +        try {, +            method = osMxBean.getClass().getDeclaredMethod("getMaxFileDescriptorCount");, +            method.setAccessible(true);, +        } catch (Exception e) {, +            // not available, +        }, +        getMaxFileDescriptorCountField = method;, +, +        method = null;, +        try {, +            method = osMxBean.getClass().getDeclaredMethod("getOpenFileDescriptorCount");, +            method.setAccessible(true);, +        } catch (Exception e) {, +            // not available, +        }, +        getOpenFileDescriptorCountField = method;, +    }, +, +    public static long getMaxFileDescriptorCount() {, +        if (getMaxFileDescriptorCountField == null) {, +            return -1;, +        }, +        try {, +            return (Long) getMaxFileDescriptorCountField.invoke(osMxBean);, +        } catch (Exception e) {, +            return -1;, +        }, +    }, +, +    public static long getOpenFileDescriptorCount() {, +        if (getOpenFileDescriptorCountField == null) {, +            return -1;, +        }, +        try {, +            return (Long) getOpenFileDescriptorCountField.invoke(osMxBean);, +        } catch (Exception e) {, +            return -1;, +        }, +    }, +, +        return new ProcessInfo(jvmInfo().pid(), getMaxFileDescriptorCount());, +        stats.openFileDescriptors = getOpenFileDescriptorCount();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +import java.lang.management.GarbageCollectorMXBean;, +import java.lang.management.ManagementFactory;, +import java.lang.management.MemoryMXBean;, +import java.lang.management.MemoryUsage;, +import java.lang.management.RuntimeMXBean;, +import java.lang.management.ThreadMXBean;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/process/JmxProcessProbe.java, +import java.lang.management.ManagementFactory;, +import java.lang.management.OperatingSystemMXBean;, +import java.lang.reflect.Method;, +, +    private static final OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();, +, +    private static final Method getMaxFileDescriptorCountField;, +    private static final Method getOpenFileDescriptorCountField;, +, +    static {, +        Method method = null;, +        try {, +            method = osMxBean.getClass().getDeclaredMethod("getMaxFileDescriptorCount");, +            method.setAccessible(true);, +        } catch (Exception e) {, +            // not available, +        }, +        getMaxFileDescriptorCountField = method;, +, +        method = null;, +        try {, +            method = osMxBean.getClass().getDeclaredMethod("getOpenFileDescriptorCount");, +            method.setAccessible(true);, +        } catch (Exception e) {]