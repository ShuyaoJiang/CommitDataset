[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        XContentParser.Token token = parser.currentToken();, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        XContentParser.Token token = parser.currentToken();, +++ b/core/src/main/java/org/elasticsearch/rest/BytesRestResponse.java, +import org.elasticsearch.ElasticsearchStatusException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +    private static final String STATUS = "status";, +, +        builder.field(STATUS, status.getStatus());, +, +    public static ElasticsearchStatusException errorFromXContent(XContentParser parser) throws IOException {, +        XContentParser.Token token = parser.nextToken();, +        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation);, +, +        ElasticsearchException exception = null;, +        RestStatus status = null;, +, +        String currentFieldName = null;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            }, +            if (STATUS.equals(currentFieldName)) {, +                if (token != XContentParser.Token.FIELD_NAME) {, +                    ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation);, +                    status = RestStatus.fromCode(parser.intValue());, +                }, +            } else {, +                exception = ElasticsearchException.failureFromXContent(parser);, +            }, +        }, +, +        if (exception == null) {, +            throw new IllegalStateException("Failed to parse elasticsearch status exception: no exception was found");, +        }, +, +        ElasticsearchStatusException result = new ElasticsearchStatusException(exception.getMessage(), status, exception.getCause());, +        for (String header : exception.getHeaderKeys()) {, +            result.addHeader(header, exception.getHeader(header));, +        }, +        for (String metadata : exception.getMetadataKeys()) {, +            result.addMetadata(metadata, exception.getMetadata(metadata));, +        }, +        return result;, +    }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        XContentParser.Token token = parser.currentToken();, +++ b/core/src/main/java/org/elasticsearch/rest/BytesRestResponse.java, +import org.elasticsearch.ElasticsearchStatusException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +    private static final String STATUS = "status";, +, +        builder.field(STATUS, status.getStatus());, +, +    public static ElasticsearchStatusException errorFromXContent(XContentParser parser) throws IOException {, +        XContentParser.Token token = parser.nextToken();, +        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation);, +, +        ElasticsearchException exception = null;, +        RestStatus status = null;, +, +        String currentFieldName = null;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            }, +            if (STATUS.equals(currentFieldName)) {, +                if (token != XContentParser.Token.FIELD_NAME) {, +                    ensureExpectedToken(XContentParser.Token.VALUE_NUMBER, token, parser::getTokenLocation);, +                    status = RestStatus.fromCode(parser.intValue());, +                }, +            } else {, +                exception = ElasticsearchException.failureFromXContent(parser);, +            }, +        }, +, +        if (exception == null) {, +            throw new IllegalStateException("Failed to parse elasticsearch status exception: no exception was found");, +        }, +, +        ElasticsearchStatusException result = new ElasticsearchStatusException(exception.getMessage(), status, exception.getCause());, +        for (String header : exception.getHeaderKeys()) {, +            result.addHeader(header, exception.getHeader(header));, +        }, +        for (String metadata : exception.getMetadataKeys()) {, +            result.addMetadata(metadata, exception.getMetadata(metadata));, +        }, +        return result;, +    }, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());, +            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());, +    public static void assertDeepEquals(ElasticsearchException expected, ElasticsearchException actual) {, +        do {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        XContentParser.Token token = parser.currentToken();, +++ b/core/src/main/java/org/elasticsearch/rest/BytesRestResponse.java]