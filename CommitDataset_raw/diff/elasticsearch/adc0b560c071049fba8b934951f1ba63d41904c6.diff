[+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java, +        headTestCase("/test/test/2/_source", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0));, +            headTestCase("/test-no-source/test-no-source/1/_source", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0));, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java, +        headTestCase("/test/test/2/_source", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0));, +            headTestCase("/test-no-source/test-no-source/1/_source", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0));, +++ b/server/src/main/java/org/elasticsearch/rest/action/document/RestGetSourceAction.java, +import org.elasticsearch.ResourceNotFoundException;, +import org.elasticsearch.rest.RestChannel;, +                client.get(getRequest, new RestGetSourceResponseListener(channel, request));, +            }, +        };, +    }, +, +    static class RestGetSourceResponseListener extends RestResponseListener<GetResponse> {, +        private final RestRequest request;, +, +        RestGetSourceResponseListener(RestChannel channel, RestRequest request) {, +            super(channel);, +            this.request = request;, +        }, +, +            checkResource(response);, +, +        /**, +         * Checks if the requested document or source is missing., +         *, +         * @param response a response, +         * @throws ResourceNotFoundException if the document or source is missing, +         */, +        private void checkResource(final GetResponse response) {, +            final String index = response.getIndex();, +            final String type = response.getType();, +            final String id = response.getId();, +, +            if (response.isExists() == false) {, +                throw new ResourceNotFoundException("Document not found [" + index + "]/[" + type + "]/[" + id + "]");, +            } else if (response.isSourceEmpty()) {, +                throw new ResourceNotFoundException("Source not found [" + index + "]/[" + type + "]/[" + id + "]");, +            }, +        }, +    }, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java, +        headTestCase("/test/test/2/_source", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0));, +            headTestCase("/test-no-source/test-no-source/1/_source", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0));, +++ b/server/src/main/java/org/elasticsearch/rest/action/document/RestGetSourceAction.java, +import org.elasticsearch.ResourceNotFoundException;, +import org.elasticsearch.rest.RestChannel;, +                client.get(getRequest, new RestGetSourceResponseListener(channel, request));, +            }, +        };, +    }, +, +    static class RestGetSourceResponseListener extends RestResponseListener<GetResponse> {, +        private final RestRequest request;, +, +        RestGetSourceResponseListener(RestChannel channel, RestRequest request) {, +            super(channel);, +            this.request = request;, +        }, +, +            checkResource(response);, +, +        /**, +         * Checks if the requested document or source is missing., +         *, +         * @param response a response, +         * @throws ResourceNotFoundException if the document or source is missing, +         */, +        private void checkResource(final GetResponse response) {, +            final String index = response.getIndex();, +            final String type = response.getType();, +            final String id = response.getId();, +, +            if (response.isExists() == false) {, +                throw new ResourceNotFoundException("Document not found [" + index + "]/[" + type + "]/[" + id + "]");, +            } else if (response.isSourceEmpty()) {, +                throw new ResourceNotFoundException("Source not found [" + index + "]/[" + type + "]/[" + id + "]");, +            }, +        }, +    }, +++ b/server/src/test/java/org/elasticsearch/rest/action/document/RestGetSourceActionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */]