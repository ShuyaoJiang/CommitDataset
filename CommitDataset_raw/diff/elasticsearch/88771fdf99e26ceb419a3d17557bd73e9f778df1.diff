[+++ b/rest-api-spec/test/README.asciidoc, +The last response obtained gets always stashed automatically as a string, called `body`., +This is useful when needing to test apis that return text rather than json (e.g. cat api),, +as it allows to treat the whole body as an ordinary string field., +, +Note that not only expected values can be retrieved from the stashed values (as in the, +example above), but the same goes for actual values:, +, +...., +    - match: { $body: /^.+$/ } # the returned `body` matches the provided regex, +...., +, +Supports also regular expressions with flag X for more readability (accepts whitespaces and comments):, +, +...., +  - match:, +      $body: >, +               /^  epoch  \s+  timestamp          \s+  count  \s+  \n, +                   \d+    \s+  \d{2}:\d{2}:\d{2}  \s+  \d+    \s+  \n  $/, +...., +, +++ b/rest-api-spec/test/README.asciidoc, +The last response obtained gets always stashed automatically as a string, called `body`., +This is useful when needing to test apis that return text rather than json (e.g. cat api),, +as it allows to treat the whole body as an ordinary string field., +, +Note that not only expected values can be retrieved from the stashed values (as in the, +example above), but the same goes for actual values:, +, +...., +    - match: { $body: /^.+$/ } # the returned `body` matches the provided regex, +...., +, +Supports also regular expressions with flag X for more readability (accepts whitespaces and comments):, +, +...., +  - match:, +      $body: >, +               /^  epoch  \s+  timestamp          \s+  count  \s+  \n, +                   \d+    \s+  \d{2}:\d{2}:\d{2}  \s+  \d+    \s+  \n  $/, +...., +, +++ b/rest-api-spec/test/cat.count/10_basic.yaml, +---, +setup:, +  - skip:, +      features: regex, +, +---, +"Test cat count help":, +  - do:, +      cat.count:, +        help: true, +, +  - match:, +      $body: >, +               /^  epoch      .+   \n, +                   timestamp  .+   \n, +                   count      .+   \n  $/, +, +---, +"Test cat count output":, +, +  - do:, +      cat.count: {}, +, +  - match:, +      $body: >, +               /^  \d+  \s  \d{2}:\d{2}:\d{2}  \s  0  \s  $/, +, +  - do:, +      index:, +        index:  index1, +        type:   type1, +        id:     1, +        body:   { foo: bar }, +        refresh: true, +, +  - do:, +      cat.count: {}, +, +  - match:, +      $body: >, +               /^  \d+  \s  \d{2}:\d{2}:\d{2}  \s  1  \s  $/, +, +  - do:, +      index:, +        index:  index2, +        type:   type2, +        id:     1, +        body:   { foo: bar }, +        refresh: true, +, +  - do:, +      cat.count:, +        h: count, +, +  - match:, +      $body: >, +               /^  2  \s  $/]