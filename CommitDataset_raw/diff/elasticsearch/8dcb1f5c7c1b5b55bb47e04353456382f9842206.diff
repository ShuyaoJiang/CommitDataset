[+++ b/core/src/main/java/org/elasticsearch/index/shard/LocalShardSnapshot.java, +import org.elasticsearch.index.engine.InternalEngine;, +    long maxUnsafeAutoIdTimestamp() {, +        return Long.parseLong(shard.getEngine().commitStats().getUserData().get(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/LocalShardSnapshot.java, +import org.elasticsearch.index.engine.InternalEngine;, +    long maxUnsafeAutoIdTimestamp() {, +        return Long.parseLong(shard.getEngine().commitStats().getUserData().get(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java, +import org.elasticsearch.index.engine.InternalEngine;, +                    final long maxUnsafeAutoIdTimestamp =, +                            shards.stream().mapToLong(LocalShardSnapshot::maxUnsafeAutoIdTimestamp).max().getAsLong();, +                    addIndices(indexShard.recoveryState().getIndex(), directory, indexSort, sources, maxSeqNo, maxUnsafeAutoIdTimestamp);, +            final long maxSeqNo,, +            final long maxUnsafeAutoIdTimestamp) throws IOException {, +                liveCommitData.put(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID, Long.toString(maxUnsafeAutoIdTimestamp));, +++ b/core/src/main/java/org/elasticsearch/index/shard/LocalShardSnapshot.java, +import org.elasticsearch.index.engine.InternalEngine;, +    long maxUnsafeAutoIdTimestamp() {, +        return Long.parseLong(shard.getEngine().commitStats().getUserData().get(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java, +import org.elasticsearch.index.engine.InternalEngine;, +                    final long maxUnsafeAutoIdTimestamp =, +                            shards.stream().mapToLong(LocalShardSnapshot::maxUnsafeAutoIdTimestamp).max().getAsLong();, +                    addIndices(indexShard.recoveryState().getIndex(), directory, indexSort, sources, maxSeqNo, maxUnsafeAutoIdTimestamp);, +            final long maxSeqNo,, +            final long maxUnsafeAutoIdTimestamp) throws IOException {, +                liveCommitData.put(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID, Long.toString(maxUnsafeAutoIdTimestamp));, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/create/ShrinkIndexIT.java, +import org.elasticsearch.action.admin.indices.stats.CommonStats;, +import org.elasticsearch.index.engine.SegmentsStats;, +        ImmutableOpenMap<String, DiscoveryNode> dataNodes =, +                client().admin().cluster().prepareState().get().getState().nodes().getDataNodes();, +        final IndicesStatsResponse sourceStats = client().admin().indices().prepareStats("source").setSegments(true).get();, +        final long maxUnsafeAutoIdTimestamp =, +                Arrays.stream(sourceStats.getShards()), +                        .map(ShardStats::getStats), +                        .map(CommonStats::getSegments), +                        .mapToLong(SegmentsStats::getMaxUnsafeAutoIdTimestamp), +                        .max(), +                        .getAsLong();, +            assertThat(shardStats.getStats().getSegments().getMaxUnsafeAutoIdTimestamp(), equalTo(maxUnsafeAutoIdTimestamp));, +++ b/core/src/main/java/org/elasticsearch/index/shard/LocalShardSnapshot.java, +import org.elasticsearch.index.engine.InternalEngine;, +    long maxUnsafeAutoIdTimestamp() {, +        return Long.parseLong(shard.getEngine().commitStats().getUserData().get(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java, +import org.elasticsearch.index.engine.InternalEngine;, +                    final long maxUnsafeAutoIdTimestamp =, +                            shards.stream().mapToLong(LocalShardSnapshot::maxUnsafeAutoIdTimestamp).max().getAsLong();, +                    addIndices(indexShard.recoveryState().getIndex(), directory, indexSort, sources, maxSeqNo, maxUnsafeAutoIdTimestamp);, +            final long maxSeqNo,, +            final long maxUnsafeAutoIdTimestamp) throws IOException {, +                liveCommitData.put(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID, Long.toString(maxUnsafeAutoIdTimestamp));, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/create/ShrinkIndexIT.java, +import org.elasticsearch.action.admin.indices.stats.CommonStats;, +import org.elasticsearch.index.engine.SegmentsStats;, +        ImmutableOpenMap<String, DiscoveryNode> dataNodes =, +                client().admin().cluster().prepareState().get().getState().nodes().getDataNodes();, +        final IndicesStatsResponse sourceStats = client().admin().indices().prepareStats("source").setSegments(true).get();, +        final long maxUnsafeAutoIdTimestamp =, +                Arrays.stream(sourceStats.getShards()), +                        .map(ShardStats::getStats), +                        .map(CommonStats::getSegments), +                        .mapToLong(SegmentsStats::getMaxUnsafeAutoIdTimestamp), +                        .max(), +                        .getAsLong();, +            assertThat(shardStats.getStats().getSegments().getMaxUnsafeAutoIdTimestamp(), equalTo(maxUnsafeAutoIdTimestamp));, +++ b/core/src/test/java/org/elasticsearch/index/shard/StoreRecoveryTests.java, +import org.elasticsearch.index.engine.InternalEngine;, +        final long maxUnsafeAutoIdTimestamp = randomNonNegativeLong();, +        storeRecovery.addIndices(indexStats, target, indexSort, dirs, maxSeqNo, maxUnsafeAutoIdTimestamp);, +        assertThat(userData.get(InternalEngine.MAX_UNSAFE_AUTO_ID_TIMESTAMP_COMMIT_ID), equalTo(Long.toString(maxUnsafeAutoIdTimestamp)));]