[+++ b/x-pack/plugin/ccr/qa/rest/src/test/java/org/elasticsearch/xpack/ccr/CcrRestIT.java, +import org.elasticsearch.xpack.ccr.action.ShardChangesAction;, +        XPackRestTestHelper.waitForPendingTasks(adminClient(), taskName -> taskName.startsWith(ShardChangesAction.NAME));, +++ b/x-pack/plugin/ccr/qa/rest/src/test/java/org/elasticsearch/xpack/ccr/CcrRestIT.java, +import org.elasticsearch.xpack.ccr.action.ShardChangesAction;, +        XPackRestTestHelper.waitForPendingTasks(adminClient(), taskName -> taskName.startsWith(ShardChangesAction.NAME));, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/test/rest/XPackRestTestHelper.java, +import org.elasticsearch.common.CheckedRunnable;, +import java.util.function.Predicate;, +import static org.elasticsearch.test.ESTestCase.assertBusy;, +     * Wait for outstanding tasks to complete. The specified admin client is used to check the outstanding tasks and this is done using, +     * {@link ESTestCase#assertBusy(CheckedRunnable)} to give a chance to any outstanding tasks to complete., +     *, +     * @param adminClient the admin client, +     * @throws Exception if an exception is thrown while checking the outstanding tasks, +    public static void waitForPendingTasks(final RestClient adminClient) throws Exception {, +        waitForPendingTasks(adminClient, taskName -> false);, +    }, +, +    /**, +     * Wait for outstanding tasks to complete. The specified admin client is used to check the outstanding tasks and this is done using, +     * {@link ESTestCase#assertBusy(CheckedRunnable)} to give a chance to any outstanding tasks to complete. The specified filter is used, +     * to filter out outstanding tasks that are expected to be there., +     *, +     * @param adminClient the admin client, +     * @param taskFilter  predicate used to filter tasks that are expected to be there, +     * @throws Exception if an exception is thrown while checking the outstanding tasks, +     */, +    public static void waitForPendingTasks(final RestClient adminClient, final Predicate<String> taskFilter) throws Exception {, +        assertBusy(() -> {, +                final Request request = new Request("GET", "/_cat/tasks");, +                final Response response = adminClient.performRequest(request);, +                /*, +                 * Check to see if there are outstanding tasks; we exclude the list task itself, and any expected outstanding tasks using, +                 * the specified task filter., +                 */, +                        final StringBuilder tasksListString = new StringBuilder();, +                            final String taskName = line.split("\\s+")[0];, +                            if (taskName.startsWith(ListTasksAction.NAME) || taskFilter.test(taskName)) {, +                                continue;, +                            }, +            } catch (final IOException e) {]