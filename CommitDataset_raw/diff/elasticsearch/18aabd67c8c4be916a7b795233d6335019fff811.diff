[+++ b/core/src/main/java/org/elasticsearch/action/ingest/reload/ReloadPipelinesAction.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +        DiscoveryNodes nodes = clusterService.state().getNodes();, +        AtomicInteger expectedResponses = new AtomicInteger(nodes.size());, +        for (DiscoveryNode node : nodes) {, +++ b/core/src/main/java/org/elasticsearch/action/ingest/reload/ReloadPipelinesAction.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +        DiscoveryNodes nodes = clusterService.state().getNodes();, +        AtomicInteger expectedResponses = new AtomicInteger(nodes.size());, +        for (DiscoveryNode node : nodes) {, +++ b/core/src/test/java/org/elasticsearch/action/ingest/reload/ReloadPipelinesActionTests.java, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).nodes(generateDiscoNodes(numNodes)).build();, +            for (int i = 0; i < numNodes; i++) {, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).nodes(generateDiscoNodes(numNodes)).build();, +            for (int i = 1; i < numNodes; i++) {, +    private static DiscoveryNodes.Builder generateDiscoNodes(int numNodes) {, +        DiscoveryNodes.Builder discoNodes = DiscoveryNodes.builder();, +        for (int i = 0; i < numNodes; i++) {, +            String id = Integer.toString(i);, +            DiscoveryNode discoNode = new DiscoveryNode(id, id, new LocalTransportAddress(id), Collections.emptyMap(), Version.CURRENT);, +            discoNodes.put(discoNode);, +        return discoNodes;, +++ b/core/src/main/java/org/elasticsearch/action/ingest/reload/ReloadPipelinesAction.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +        DiscoveryNodes nodes = clusterService.state().getNodes();, +        AtomicInteger expectedResponses = new AtomicInteger(nodes.size());, +        for (DiscoveryNode node : nodes) {, +++ b/core/src/test/java/org/elasticsearch/action/ingest/reload/ReloadPipelinesActionTests.java, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).nodes(generateDiscoNodes(numNodes)).build();, +            for (int i = 0; i < numNodes; i++) {, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).nodes(generateDiscoNodes(numNodes)).build();, +            for (int i = 1; i < numNodes; i++) {, +    private static DiscoveryNodes.Builder generateDiscoNodes(int numNodes) {, +        DiscoveryNodes.Builder discoNodes = DiscoveryNodes.builder();, +        for (int i = 0; i < numNodes; i++) {, +            String id = Integer.toString(i);, +            DiscoveryNode discoNode = new DiscoveryNode(id, id, new LocalTransportAddress(id), Collections.emptyMap(), Version.CURRENT);, +            discoNodes.put(discoNode);, +        return discoNodes;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestPlugin.java, +++ b/core/src/main/java/org/elasticsearch/action/ingest/reload/ReloadPipelinesAction.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +        DiscoveryNodes nodes = clusterService.state().getNodes();, +        AtomicInteger expectedResponses = new AtomicInteger(nodes.size());, +        for (DiscoveryNode node : nodes) {, +++ b/core/src/test/java/org/elasticsearch/action/ingest/reload/ReloadPipelinesActionTests.java, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).nodes(generateDiscoNodes(numNodes)).build();, +            for (int i = 0; i < numNodes; i++) {, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).nodes(generateDiscoNodes(numNodes)).build();, +            for (int i = 1; i < numNodes; i++) {, +    private static DiscoveryNodes.Builder generateDiscoNodes(int numNodes) {, +        DiscoveryNodes.Builder discoNodes = DiscoveryNodes.builder();, +        for (int i = 0; i < numNodes; i++) {, +            String id = Integer.toString(i);, +            DiscoveryNode discoNode = new DiscoveryNode(id, id, new LocalTransportAddress(id), Collections.emptyMap(), Version.CURRENT);, +            discoNodes.put(discoNode);, +        return discoNodes;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestPlugin.java, +++ b/qa/ingest-disabled/src/test/resources/rest-api-spec/test/ingest_mustache/10_ingest_disabled.yaml, +"Test ingest CRUD APIS work fine when node.ingest is set to false":, +                  "field" : "field2",, +                  "value": "_value", +  - match: { _index: ".ingest" }, +  - match: { _type: "pipeline" }, +  - match: { _version: 1 }, +  - match: { _id: "my_pipeline" }, +  - match: { my_pipeline._source.description: "_description" }, +  - match: { my_pipeline._version: 1 }, +      ingest.delete_pipeline:, +        id: "my_pipeline", +  - match: { _index: ".ingest" }, +  - match: { _type: "pipeline" }, +  - match: { _version: 2 }, +  - match: { _id: "my_pipeline" }, +  - match: { found: true }, +, +---, +"Test ingest simulate API works fine when node.ingest is set to false":, +  - do:, +      ingest.put_pipeline:, +                  "field" : "field2",, +                  "value" : "_value", +  - match: { _id: "my_pipeline" }, +      ingest.simulate:, +        id: "my_pipeline", +        body: >, +          {, +            "docs": [, +              {, +                "_index": "index",, +                "_type": "type",, +                "_id": "id",, +                "_source": {, +                  "foo": "bar", +                }, +              }, +            ], +          }, +  - length: { docs: 1 }, +  - match: { docs.0.doc._source.foo: "bar" }]