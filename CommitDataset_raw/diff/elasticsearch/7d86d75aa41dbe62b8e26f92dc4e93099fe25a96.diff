[+++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/plugin/build.gradle, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/plugin/build.gradle, +++ /dev/null, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/plugin/build.gradle, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/plugin/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/plugin/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import javax.security.auth.DestroyFailedException;, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/plugin/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import javax.security.auth.DestroyFailedException;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +import java.util.function.Predicate;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthAction;, +import org.elasticsearch.xpack.security.user.ElasticUser;, +, +        final ResolvedIndices resolvedIndices = resolveIndexNames(authentication, action, request, metaData, authorizedIndices);, +        IndicesAccessControl indicesAccessControl = permission.authorize(action, localIndices, metaData, fieldPermissionsCache);, +        if (!indicesAccessControl.isGranted()) {, +            throw denial(authentication, action, request);, +        } else if (indicesAccessControl.getIndexPermissions(SecurityLifecycleService.SECURITY_INDEX_NAME) != null, +                && indicesAccessControl.getIndexPermissions(SecurityLifecycleService.SECURITY_INDEX_NAME).isGranted(), +                && XPackUser.is(authentication.getUser()) == false, +                && MONITOR_INDEX_PREDICATE.test(action) == false, +                && isSuperuser(authentication.getUser()) == false) {, +            // only the XPackUser is allowed to work with this index, but we should allow indices monitoring actions through for debugging, +            // purposes. These monitor requests also sometimes resolve indices concretely and then requests them, +            logger.debug("user [{}] attempted to directly perform [{}] against the security index [{}]",, +                    authentication.getUser().principal(), action, SecurityLifecycleService.SECURITY_INDEX_NAME);, +            throw denial(authentication, action, request);, +        } else {, +        }, +    private ResolvedIndices resolveIndexNames(Authentication authentication, String action, TransportRequest request, MetaData metaData,, +                                              AuthorizedIndices authorizedIndices) {, +            return indicesAndAliasesResolver.resolve(request, metaData, authorizedIndices);, +            auditTrail.accessDenied(authentication.getUser(), action, request);, +        if (threadContext.getTransient(INDICES_PERMISSIONS_KEY) == null) {, +            threadContext.putTransient(INDICES_PERMISSIONS_KEY, accessControl);, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target]