[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                 int separator = signature.lastIndexOf('.');, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                 int separator = signature.lastIndexOf('.');, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/FunctionRefTests.java, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +, +import static java.util.Collections.singletonMap;, +import static org.hamcrest.Matchers.endsWith;, +import static org.hamcrest.Matchers.startsWith;, +, +    public void testQualifiedStaticMethodReference() {, +        assertEquals(true,, +                exec("List l = [true]; l.stream().map(org.elasticsearch.painless.FeatureTest::overloadedStatic).findFirst().get()"));, +    }, +, +    public void testQualifiedStaticMethodReferenceDef() {, +        assertEquals(true,, +                exec("def l = [true]; l.stream().map(org.elasticsearch.painless.FeatureTest::overloadedStatic).findFirst().get()"));, +    }, +, +    public void testQualifiedVirtualMethodReference() {, +        long instant = randomLong();, +        assertEquals(instant, exec(, +                "List l = [params.d]; return l.stream().mapToLong(org.joda.time.ReadableDateTime::getMillis).sum()",, +                singletonMap("d", new DateTime(instant, DateTimeZone.UTC)), true));, +    }, +, +    public void testQualifiedVirtualMethodReferenceDef() {, +        long instant = randomLong();, +        assertEquals(instant, exec(, +                "def l = [params.d]; return l.stream().mapToLong(org.joda.time.ReadableDateTime::getMillis).sum()",, +                singletonMap("d", new DateTime(instant, DateTimeZone.UTC)), true));, +    }, +, +        Exception e = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("List l = [2, 1]; l.sort(Integer::bogus); return l.get(0);");, +        assertThat(e.getMessage(), startsWith("Unknown reference"));, +    }, +, +    public void testQualifiedMethodMissing() {, +        Exception e = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("List l = [2, 1]; l.sort(org.joda.time.ReadableDateTime::bogus); return l.get(0);", false);, +        });, +        assertThat(e.getMessage(), startsWith("Unknown reference"));, +    }, +, +    public void testClassMissing() {, +        Exception e = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("List l = [2, 1]; l.sort(Bogus::bogus); return l.get(0);", false);, +        });, +        assertThat(e.getMessage(), endsWith("Variable [Bogus] is not defined."));, +    }, +, +    public void testQualifiedClassMissing() {, +        Exception e = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("List l = [2, 1]; l.sort(org.joda.time.BogusDateTime::bogus); return l.get(0);", false);, +        });, +        /* Because the type isn't known and we use the lexer hack this fails to parse. I find this error message confusing but it is the one, +         * we have... */, +        assertEquals("invalid sequence of tokens near ['::'].", e.getMessage());]