[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        if (fieldType().stored() != Defaults.FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        if (fieldType().stored() != Defaults.FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        if (fieldType().stored() != Defaults.SIZE_FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        if (fieldType().stored() != Defaults.FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        if (fieldType().stored() != Defaults.SIZE_FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        if (defaultTTL != Defaults.DEFAULT && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        if (fieldType().stored() != Defaults.FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        if (fieldType().stored() != Defaults.SIZE_FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        if (defaultTTL != Defaults.DEFAULT && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +        if (enabledState != Defaults.ENABLED) {, +            builder.field("enabled", enabledState.enabled);, +        }, +        if (enabledState.enabled) {, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        if (fieldType().stored() != Defaults.FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        if (fieldType().stored() != Defaults.SIZE_FIELD_TYPE.stored() && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        if (defaultTTL != Defaults.DEFAULT && enabledState.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +        if (enabledState != Defaults.ENABLED) {, +            builder.field("enabled", enabledState.enabled);, +        }, +        if (enabledState.enabled) {, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/timestamp/TimestampMappingTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Test, +    public void testThatDisablingFieldMapperDoesNotReturnAnyUselessInfo() throws Exception {, +        boolean inversedStoreSetting = !TimestampFieldMapper.Defaults.FIELD_TYPE.stored();, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_timestamp").field("enabled", false).field("store", inversedStoreSetting).endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper mapper = MapperTests.newParser().parse(mapping);, +, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject();, +        mapper.timestampFieldMapper().toXContent(builder, null);, +        builder.endObject();, +, +        assertThat(builder.string(), is(String.format("{\"%s\":{}}", TimestampFieldMapper.NAME)));, +    }]