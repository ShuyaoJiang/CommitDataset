[+++ b/pom.xml, +        <lucene.version>4.5.0</lucene.version>, +++ b/pom.xml, +        <lucene.version>4.5.0</lucene.version>, +++ b/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.Version;, +    @Override, +    public String getHighFreqMinimumNumberShouldMatchSpec() {, +    public String getLowFreqMinimumNumberShouldMatchSpec() {, +    static {, +        assert Version.CURRENT.luceneVersion.compareTo(org.apache.lucene.util.Version.LUCENE_45) == 0 : "Remove buildQuery() once 4.6 is out";, +    }, +    protected Query buildQuery(final int maxDoc,, +            final TermContext[] contextArray, final Term[] queryTerms) {, +              if ((maxTermFrequency >= 1f && termContext.docFreq() > maxTermFrequency), +                  || (termContext.docFreq() > (int) Math.ceil(maxTermFrequency, +                      * (float) maxDoc))) {, +                highFreq, +                    .add(new TermQuery(queryTerms[i], termContext), highFreqOccur);, +            , +          final int numLowFreqClauses = lowFreq.clauses().size();, +          final int numHighFreqClauses = highFreq.clauses().size();, +              if (highFreq.getMinimumNumberShouldMatch() == 0 && highFreqOccur != Occur.MUST) {, +        , +, +++ b/pom.xml, +        <lucene.version>4.5.0</lucene.version>, +++ b/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.Version;, +    @Override, +    public String getHighFreqMinimumNumberShouldMatchSpec() {, +    public String getLowFreqMinimumNumberShouldMatchSpec() {, +    static {, +        assert Version.CURRENT.luceneVersion.compareTo(org.apache.lucene.util.Version.LUCENE_45) == 0 : "Remove buildQuery() once 4.6 is out";, +    }, +    protected Query buildQuery(final int maxDoc,, +            final TermContext[] contextArray, final Term[] queryTerms) {, +              if ((maxTermFrequency >= 1f && termContext.docFreq() > maxTermFrequency), +                  || (termContext.docFreq() > (int) Math.ceil(maxTermFrequency, +                      * (float) maxDoc))) {, +                highFreq, +                    .add(new TermQuery(queryTerms[i], termContext), highFreqOccur);, +            , +          final int numLowFreqClauses = lowFreq.clauses().size();, +          final int numHighFreqClauses = highFreq.clauses().size();, +              if (highFreq.getMinimumNumberShouldMatch() == 0 && highFreqOccur != Occur.MUST) {, +        , +, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.queries.TermFilter;, +++ b/pom.xml, +        <lucene.version>4.5.0</lucene.version>, +++ b/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.Version;, +    @Override, +    public String getHighFreqMinimumNumberShouldMatchSpec() {, +    public String getLowFreqMinimumNumberShouldMatchSpec() {, +    static {, +        assert Version.CURRENT.luceneVersion.compareTo(org.apache.lucene.util.Version.LUCENE_45) == 0 : "Remove buildQuery() once 4.6 is out";, +    }, +    protected Query buildQuery(final int maxDoc,, +            final TermContext[] contextArray, final Term[] queryTerms) {, +              if ((maxTermFrequency >= 1f && termContext.docFreq() > maxTermFrequency), +                  || (termContext.docFreq() > (int) Math.ceil(maxTermFrequency, +                      * (float) maxDoc))) {, +                highFreq, +                    .add(new TermQuery(queryTerms[i], termContext), highFreqOccur);, +            , +          final int numLowFreqClauses = lowFreq.clauses().size();, +          final int numHighFreqClauses = highFreq.clauses().size();, +              if (highFreq.getMinimumNumberShouldMatch() == 0 && highFreqOccur != Occur.MUST) {, +        , +, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.queries.TermFilter;, +++ /dev/null, +++ b/pom.xml, +        <lucene.version>4.5.0</lucene.version>, +++ b/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.Version;, +    @Override, +    public String getHighFreqMinimumNumberShouldMatchSpec() {, +    public String getLowFreqMinimumNumberShouldMatchSpec() {, +    static {, +        assert Version.CURRENT.luceneVersion.compareTo(org.apache.lucene.util.Version.LUCENE_45) == 0 : "Remove buildQuery() once 4.6 is out";, +    }, +    protected Query buildQuery(final int maxDoc,, +            final TermContext[] contextArray, final Term[] queryTerms) {, +              if ((maxTermFrequency >= 1f && termContext.docFreq() > maxTermFrequency), +                  || (termContext.docFreq() > (int) Math.ceil(maxTermFrequency, +                      * (float) maxDoc))) {, +                highFreq, +                    .add(new TermQuery(queryTerms[i], termContext), highFreqOccur);, +            , +          final int numLowFreqClauses = lowFreq.clauses().size();, +          final int numHighFreqClauses = highFreq.clauses().size();]