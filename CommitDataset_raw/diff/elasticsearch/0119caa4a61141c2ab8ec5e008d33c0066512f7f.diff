[+++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +import java.util.concurrent.atomic.AtomicInteger, +import static com.carrotsearch.ant.tasks.junit4.FormattingUtils.formatDurationInSeconds, +, +, +    int totalSuites;, +    AtomicInteger suitesCompleted = new AtomicInteger(), +    AtomicInteger testsCompleted = new AtomicInteger(), +    AtomicInteger testsFailed = new AtomicInteger(), +    AtomicInteger testsIgnored = new AtomicInteger(), +        totalSuites = e.getSuiteCount();, +        progressLogger.progress('Starting JUnit4 with ' + e.getSlaveCount() + ' jvms'), +        final int suitesCompleted = suitesCompleted.incrementAndGet();, +        final int testsCompleted = testsCompleted.addAndGet(e.getDescription().testCount()), +        final int testsFailed = testsFailed.addAndGet(e.getErrorCount() + e.getFailureCount()), +        final int testsIgnored = testsIgnored.addAndGet(e.getIgnoredCount()), +        Description description = e.getDescription(), +        String suiteName = description.getDisplayName();, +        suiteName = suiteName.substring(suiteName.lastIndexOf('.') + 1);, +        progressLogger.progress('Suites [' + suitesCompleted + '/' + totalSuites + '], Tests [' + testsCompleted + '|' + testsFailed + '|' + testsIgnored + '], ' + suiteName + ' on J' + e.getSlave().id + ' in ' + formatDurationInSeconds(e.getExecutionTime())), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +import java.util.concurrent.atomic.AtomicInteger, +import static com.carrotsearch.ant.tasks.junit4.FormattingUtils.formatDurationInSeconds, +, +, +    int totalSuites;, +    AtomicInteger suitesCompleted = new AtomicInteger(), +    AtomicInteger testsCompleted = new AtomicInteger(), +    AtomicInteger testsFailed = new AtomicInteger(), +    AtomicInteger testsIgnored = new AtomicInteger(), +        totalSuites = e.getSuiteCount();, +        progressLogger.progress('Starting JUnit4 with ' + e.getSlaveCount() + ' jvms'), +        final int suitesCompleted = suitesCompleted.incrementAndGet();, +        final int testsCompleted = testsCompleted.addAndGet(e.getDescription().testCount()), +        final int testsFailed = testsFailed.addAndGet(e.getErrorCount() + e.getFailureCount()), +        final int testsIgnored = testsIgnored.addAndGet(e.getIgnoredCount()), +        Description description = e.getDescription(), +        String suiteName = description.getDisplayName();, +        suiteName = suiteName.substring(suiteName.lastIndexOf('.') + 1);, +        progressLogger.progress('Suites [' + suitesCompleted + '/' + totalSuites + '], Tests [' + testsCompleted + '|' + testsFailed + '|' + testsIgnored + '], ' + suiteName + ' on J' + e.getSlave().id + ' in ' + formatDurationInSeconds(e.getExecutionTime())), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                if (jarTask.manifest.attributes.containsKey('Change') == false) {, +                    logger.warn('Building without git revision id.'), +                    jarTask.manifest.attributes('Change': 'N/A'), +                }, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +import java.util.concurrent.atomic.AtomicInteger, +import static com.carrotsearch.ant.tasks.junit4.FormattingUtils.formatDurationInSeconds, +, +, +    int totalSuites;, +    AtomicInteger suitesCompleted = new AtomicInteger(), +    AtomicInteger testsCompleted = new AtomicInteger(), +    AtomicInteger testsFailed = new AtomicInteger(), +    AtomicInteger testsIgnored = new AtomicInteger(), +        totalSuites = e.getSuiteCount();, +        progressLogger.progress('Starting JUnit4 with ' + e.getSlaveCount() + ' jvms'), +        final int suitesCompleted = suitesCompleted.incrementAndGet();, +        final int testsCompleted = testsCompleted.addAndGet(e.getDescription().testCount()), +        final int testsFailed = testsFailed.addAndGet(e.getErrorCount() + e.getFailureCount()), +        final int testsIgnored = testsIgnored.addAndGet(e.getIgnoredCount()), +        Description description = e.getDescription(), +        String suiteName = description.getDisplayName();, +        suiteName = suiteName.substring(suiteName.lastIndexOf('.') + 1);, +        progressLogger.progress('Suites [' + suitesCompleted + '/' + totalSuites + '], Tests [' + testsCompleted + '|' + testsFailed + '|' + testsIgnored + '], ' + suiteName + ' on J' + e.getSlave().id + ' in ' + formatDurationInSeconds(e.getExecutionTime())), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                if (jarTask.manifest.attributes.containsKey('Change') == false) {, +                    logger.warn('Building without git revision id.'), +                    jarTask.manifest.attributes('Change': 'N/A'), +                }, +++ b/core/src/main/java/org/elasticsearch/Build.java, + * Information about a build of Elasticsearch., +    /**, +     * The current build of Elasticsearch. Filled with information scanned at, +     * startup from the jar., +     */, +        if (shortHash == null) {, +            throw new IllegalStateException("Error finding the build shortHash. " +, +                "Stopping Elasticsearch now so it doesn't run in subtly broken ways. This is likely a build bug.");, +        }, +        if (date == null) {, +            throw new IllegalStateException("Error finding the build date. " +, +                "Stopping Elasticsearch now so it doesn't run in subtly broken ways. This is likely a build bug.");, +        }]