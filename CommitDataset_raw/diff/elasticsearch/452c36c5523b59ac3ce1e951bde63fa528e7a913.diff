[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +    DoubleArray compensations;, +            compensations = bigArrays.newDoubleArray(1, true);, +                compensations = bigArrays.grow(compensations, bucket + 1);, +                    // Compute the sum of double values with Kahan summation algorithm which is more, +                    // accurate than naive summation., +                    double sum = sums.get(bucket);, +                    double compensation = compensations.get(bucket);, +, +                        double value = values.nextValue();, +                        if (Double.isFinite(value) == false) {, +                            sum += value;, +                        } else if (Double.isFinite(sum)) {, +                            double corrected = value - compensation;, +                            double newSum = sum + corrected;, +                            compensation = (newSum - sum) - corrected;, +                            sum = newSum;, +                    }, +                    sums.set(bucket, sum);, +                    compensations.set(bucket, compensation);, +        Releasables.close(counts, sums, compensations);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +    DoubleArray compensations;, +            compensations = bigArrays.newDoubleArray(1, true);, +                compensations = bigArrays.grow(compensations, bucket + 1);, +                    // Compute the sum of double values with Kahan summation algorithm which is more, +                    // accurate than naive summation., +                    double sum = sums.get(bucket);, +                    double compensation = compensations.get(bucket);, +, +                        double value = values.nextValue();, +                        if (Double.isFinite(value) == false) {, +                            sum += value;, +                        } else if (Double.isFinite(sum)) {, +                            double corrected = value - compensation;, +                            double newSum = sum + corrected;, +                            compensation = (newSum - sum) - corrected;, +                            sum = newSum;, +                    }, +                    sums.set(bucket, sum);, +                    compensations.set(bucket, compensation);, +        Releasables.close(counts, sums, compensations);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/InternalAvg.java, +        double compensation = 0;, +        // Compute the sum of double values with Kahan summation algorithm which is more, +        // accurate than naive summation., +            InternalAvg avg = (InternalAvg) aggregation;, +            count += avg.count;, +            if (Double.isFinite(avg.sum) == false) {, +                sum += avg.sum;, +            } else if (Double.isFinite(sum)) {, +                double corrected = avg.sum - compensation;, +                double newSum = sum + corrected;, +                compensation = (newSum - sum) - corrected;, +                sum = newSum;, +            }, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +    DoubleArray compensations;, +            compensations = bigArrays.newDoubleArray(1, true);, +                compensations = bigArrays.grow(compensations, bucket + 1);, +                    // Compute the sum of double values with Kahan summation algorithm which is more, +                    // accurate than naive summation., +                    double sum = sums.get(bucket);, +                    double compensation = compensations.get(bucket);, +, +                        double value = values.nextValue();, +                        if (Double.isFinite(value) == false) {, +                            sum += value;, +                        } else if (Double.isFinite(sum)) {, +                            double corrected = value - compensation;, +                            double newSum = sum + corrected;, +                            compensation = (newSum - sum) - corrected;, +                            sum = newSum;, +                    }, +                    sums.set(bucket, sum);, +                    compensations.set(bucket, compensation);, +        Releasables.close(counts, sums, compensations);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/InternalAvg.java, +        double compensation = 0;, +        // Compute the sum of double values with Kahan summation algorithm which is more, +        // accurate than naive summation., +            InternalAvg avg = (InternalAvg) aggregation;, +            count += avg.count;, +            if (Double.isFinite(avg.sum) == false) {, +                sum += avg.sum;, +            } else if (Double.isFinite(sum)) {, +                double corrected = avg.sum - compensation;, +                double newSum = sum + corrected;, +                compensation = (newSum - sum) - corrected;, +                sum = newSum;, +            }, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/InternalStats.java, +        double compensation = 0;, +            // Compute the sum of double values with Kahan summation algorithm which is more, +            // accurate than naive summation., +            double value = stats.getSum();, +            if (Double.isFinite(value) == false) {, +                sum += value;, +            } else if (Double.isFinite(sum)) {, +                double corrected = value - compensation;]