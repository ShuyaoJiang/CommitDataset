[+++ b/build.gradle, +/* Remove assemble/dependenciesInfo on all qa projects because we don't need to publish, +      Task dependenciesInfo = project.tasks.findByName('dependenciesInfo'), +      if (dependenciesInfo) {, +        project.tasks.remove(dependenciesInfo), +        project.precommit.dependsOn.remove('dependenciesInfo'), +      }, +++ b/build.gradle, +/* Remove assemble/dependenciesInfo on all qa projects because we don't need to publish, +      Task dependenciesInfo = project.tasks.findByName('dependenciesInfo'), +      if (dependenciesInfo) {, +        project.tasks.remove(dependenciesInfo), +        project.precommit.dependsOn.remove('dependenciesInfo'), +      }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        deps.runtimeConfiguration = project.configurations.runtime, +        deps.compileOnlyConfiguration = project.configurations.compileOnly, +        project.afterEvaluate {, +            deps.mappings = project.dependencyLicenses.mappings, +        }, +++ b/build.gradle, +/* Remove assemble/dependenciesInfo on all qa projects because we don't need to publish, +      Task dependenciesInfo = project.tasks.findByName('dependenciesInfo'), +      if (dependenciesInfo) {, +        project.tasks.remove(dependenciesInfo), +        project.precommit.dependsOn.remove('dependenciesInfo'), +      }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        deps.runtimeConfiguration = project.configurations.runtime, +        deps.compileOnlyConfiguration = project.configurations.compileOnly, +        project.afterEvaluate {, +            deps.mappings = project.dependencyLicenses.mappings, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/DependenciesInfoTask.groovy, +import org.elasticsearch.gradle.precommit.DependencyLicensesTask, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.artifacts.DependencyResolutionListener, +import java.util.regex.Matcher, +import java.util.regex.Pattern, +    public Configuration runtimeConfiguration, +, +    /** We subtract compile-only dependencies. */, +    @Input, +    public Configuration compileOnlyConfiguration, +, +    @Input, +    public LinkedHashMap<String, String> mappings, +, +        final DependencySet runtimeDependencies = runtimeConfiguration.getAllDependencies(), +        // we have to resolve the transitive dependencies and create a group:artifactId:version map, +        final Set<String> compileOnlyArtifacts =, +                compileOnlyConfiguration, +                        .getResolvedConfiguration(), +                        .resolvedArtifacts, +                        .collect { it -> "${it.moduleVersion.id.group}:${it.moduleVersion.id.name}:${it.moduleVersion.id.version}" }, +, +        for (final Dependency dependency : runtimeDependencies) {, +            // we do not need compile-only dependencies here, +            if (compileOnlyArtifacts.contains("${dependency.group}:${dependency.name}:${dependency.version}")) {, +                continue, +            // only external dependencies are checked, +            if (dependency.group != null && dependency.group.contains("org.elasticsearch")) {, +                continue, +            }, +, +            final String url = createURL(dependency.group, dependency.name, dependency.version), +            final String dependencyName = DependencyLicensesTask.getDependencyName(mappings, dependency.name), +            logger.info("mapped dependency ${dependency.group}:${dependency.name} to ${dependencyName} for license info"), +, +            final String licenseType = getLicenseType(dependency.group, dependencyName), +            output.append("${dependency.group}:${dependency.name},${dependency.version},${url},${licenseType}\n"), +, +++ b/build.gradle, +/* Remove assemble/dependenciesInfo on all qa projects because we don't need to publish, +      Task dependenciesInfo = project.tasks.findByName('dependenciesInfo'), +      if (dependenciesInfo) {, +        project.tasks.remove(dependenciesInfo), +        project.precommit.dependsOn.remove('dependenciesInfo'), +      }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        deps.runtimeConfiguration = project.configurations.runtime, +        deps.compileOnlyConfiguration = project.configurations.compileOnly, +        project.afterEvaluate {, +            deps.mappings = project.dependencyLicenses.mappings, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/DependenciesInfoTask.groovy, +import org.elasticsearch.gradle.precommit.DependencyLicensesTask, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.artifacts.DependencyResolutionListener, +import java.util.regex.Matcher, +import java.util.regex.Pattern, +    public Configuration runtimeConfiguration, +, +    /** We subtract compile-only dependencies. */, +    @Input, +    public Configuration compileOnlyConfiguration, +, +    @Input, +    public LinkedHashMap<String, String> mappings, +]