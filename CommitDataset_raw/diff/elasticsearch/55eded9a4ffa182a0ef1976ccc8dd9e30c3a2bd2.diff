[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/common/network/InetAddressHelper.java, +, +    public static InetAddress[] filterIPV4(InetAddress[] addresses){, +        return NetworkUtils.filterIPV4(addresses);, +    }, +, +    public static InetAddress[] filterIPV6(InetAddress[] addresses){, +        return NetworkUtils.filterIPV6(addresses);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/common/network/InetAddressHelper.java, +, +    public static InetAddress[] filterIPV4(InetAddress[] addresses){, +        return NetworkUtils.filterIPV4(addresses);, +    }, +, +    public static InetAddress[] filterIPV6(InetAddress[] addresses){, +        return NetworkUtils.filterIPV6(addresses);, +    }, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ldap/support/SessionFactoryLoadBalancingTests.java, +import java.net.ConnectException;, +import java.net.Inet4Address;, +                        InetAddress[] allAddresses = InetAddressHelper.getAllAddresses();, +                        if (serverAddress instanceof Inet4Address) {, +                            allAddresses = InetAddressHelper.filterIPV4(allAddresses);, +                        } else {, +                            allAddresses = InetAddressHelper.filterIPV6(allAddresses);, +                        }, +                        final List<InetAddress> inetAddressesToBind = Arrays.stream(allAddresses), +                            } catch (ConnectException e) {, +                                logger.debug(new ParameterizedMessage("blacklisting address [{}] due to:", localAddress), e);, +                                blacklistedAddress.add(localAddress);, +                        if (openedSockets.size() == 0) {, +                            logger.debug("Could not open any sockets from the available addresses");, +                            return false;, +                        }]