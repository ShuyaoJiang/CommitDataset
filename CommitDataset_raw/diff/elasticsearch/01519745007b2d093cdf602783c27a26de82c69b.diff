[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 110 used to be FlushNotAllowedEngineException, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 110 used to be FlushNotAllowedEngineException, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +    private boolean waitIfOngoing = true;, +     * The default is <code>true</code>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 110 used to be FlushNotAllowedEngineException, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +    private boolean waitIfOngoing = true;, +     * The default is <code>true</code>, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +, +    /**, +     * Returns <code>true</code> iff this engine is currently recovering from translog., +     */, +    public boolean isRecovering() {, +        return false;, +    }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 110 used to be FlushNotAllowedEngineException, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +    private boolean waitIfOngoing = true;, +     * The default is <code>true</code>, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +, +    /**, +     * Returns <code>true</code> iff this engine is currently recovering from translog., +     */, +    public boolean isRecovering() {, +        return false;, +    }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 110 used to be FlushNotAllowedEngineException, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +    private boolean waitIfOngoing = true;, +     * The default is <code>true</code>, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +, +    /**, +     * Returns <code>true</code> iff this engine is currently recovering from translog., +     */, +    public boolean isRecovering() {, +        return false;, +    }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private final AtomicBoolean pendingTranslogRecovery = new AtomicBoolean(false);, +            assert pendingTranslogRecovery.get() == false : "translog recovery can't be pending before we set it";, +            pendingTranslogRecovery.set(openMode == EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG);, +            if (pendingTranslogRecovery.get() == false) {, +                    pendingTranslogRecovery.set(true); // just play safe and never allow commits on this see #ensureCanFlush, +        assert pendingTranslogRecovery.get(): "translogRecovery is not pending but should be";, +        pendingTranslogRecovery.set(false); // we are good - now we can commit, +                    return new CommitId(lastCommittedSegmentInfos.getId());, +        if (pendingTranslogRecovery.get()) {, +            throw new IllegalStateException(shardId.toString() + " flushes are disabled - pending translog recovery");, +, +    @Override, +    public boolean isRecovering() {, +        return pendingTranslogRecovery.get();, +    }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 110 used to be FlushNotAllowedEngineException, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +    private boolean waitIfOngoing = true;, +     * The default is <code>true</code>, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +, +    /**, +     * Returns <code>true</code> iff this engine is currently recovering from translog., +     */, +    public boolean isRecovering() {, +        return false;, +    }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private final AtomicBoolean pendingTranslogRecovery = new AtomicBoolean(false);, +            assert pendingTranslogRecovery.get() == false : "translog recovery can't be pending before we set it";, +            pendingTranslogRecovery.set(openMode == EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG);, +            if (pendingTranslogRecovery.get() == false) {, +                    pendingTranslogRecovery.set(true); // just play safe and never allow commits on this see #ensureCanFlush, +        assert pendingTranslogRecovery.get(): "translogRecovery is not pending but should be";, +        pendingTranslogRecovery.set(false); // we are good - now we can commit, +                    return new CommitId(lastCommittedSegmentInfos.getId());, +        if (pendingTranslogRecovery.get()) {, +            throw new IllegalStateException(shardId.toString() + " flushes are disabled - pending translog recovery");, +, +    @Override, +    public boolean isRecovering() {, +        return pendingTranslogRecovery.get();, +    }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        Engine engine = getEngine();, +        if (engine.isRecovering()) {, +            throw new IllegalIndexShardStateException(shardId(), state, "syncFlush is only allowed if the engine is not recovery" +, +                " from translog");, +        }]