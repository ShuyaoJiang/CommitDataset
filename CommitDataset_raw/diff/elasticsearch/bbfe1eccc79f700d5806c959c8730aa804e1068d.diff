[+++ b/modules/repository-url/build.gradle, +++ b/modules/repository-url/build.gradle, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLFixture.java, +import org.elasticsearch.test.fixture.AbstractHttpFixture;, +import java.util.HashMap;, +public class URLFixture extends AbstractHttpFixture {, +, +    private final Path repositoryDir;, +, +    /**, +     * Creates a {@link URLFixture}, +     */, +    private URLFixture(final String workingDir, final String repositoryDir) {, +        super(workingDir);, +        this.repositoryDir = dir(repositoryDir);, +    }, +        final URLFixture fixture = new URLFixture(args[0], args[1]);, +        fixture.listen();, +    protected AbstractHttpFixture.Response handle(final Request request) throws IOException {, +        if ("GET".equalsIgnoreCase(request.getMethod())) {, +            String path = request.getPath();, +                    final Map<String, String> headers = new HashMap<>(contentType("application/octet-stream"));, +                    headers.put("Content-Length", String.valueOf(content.length));, +                    return new Response(RestStatus.OK.getStatus(), headers, content);, +                    return new Response(RestStatus.NOT_FOUND.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +                return new Response(RestStatus.FORBIDDEN.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +        return null;, +    @SuppressForbidden(reason = "Paths#get is fine - we don't have environment here"), +    private static Path dir(final String dir) {, +        return Paths.get(dir);, +++ b/modules/repository-url/build.gradle, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLFixture.java, +import org.elasticsearch.test.fixture.AbstractHttpFixture;, +import java.util.HashMap;, +public class URLFixture extends AbstractHttpFixture {, +, +    private final Path repositoryDir;, +, +    /**, +     * Creates a {@link URLFixture}, +     */, +    private URLFixture(final String workingDir, final String repositoryDir) {, +        super(workingDir);, +        this.repositoryDir = dir(repositoryDir);, +    }, +        final URLFixture fixture = new URLFixture(args[0], args[1]);, +        fixture.listen();, +    protected AbstractHttpFixture.Response handle(final Request request) throws IOException {, +        if ("GET".equalsIgnoreCase(request.getMethod())) {, +            String path = request.getPath();, +                    final Map<String, String> headers = new HashMap<>(contentType("application/octet-stream"));, +                    headers.put("Content-Length", String.valueOf(content.length));, +                    return new Response(RestStatus.OK.getStatus(), headers, content);, +                    return new Response(RestStatus.NOT_FOUND.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +                return new Response(RestStatus.FORBIDDEN.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +        return null;, +    @SuppressForbidden(reason = "Paths#get is fine - we don't have environment here"), +    private static Path dir(final String dir) {, +        return Paths.get(dir);, +++ b/plugins/examples/rest-handler/build.gradle, +  dependsOn testClasses, +  args '-cp', "${ -> project.sourceSets.test.runtimeClasspath.asPath }",, +          'org.elasticsearch.example.resthandler.ExampleFixture',, +          baseDir, 'TEST', +++ b/modules/repository-url/build.gradle, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLFixture.java, +import org.elasticsearch.test.fixture.AbstractHttpFixture;, +import java.util.HashMap;, +public class URLFixture extends AbstractHttpFixture {, +, +    private final Path repositoryDir;, +, +    /**, +     * Creates a {@link URLFixture}, +     */, +    private URLFixture(final String workingDir, final String repositoryDir) {, +        super(workingDir);, +        this.repositoryDir = dir(repositoryDir);, +    }, +        final URLFixture fixture = new URLFixture(args[0], args[1]);, +        fixture.listen();, +    protected AbstractHttpFixture.Response handle(final Request request) throws IOException {, +        if ("GET".equalsIgnoreCase(request.getMethod())) {, +            String path = request.getPath();, +                    final Map<String, String> headers = new HashMap<>(contentType("application/octet-stream"));, +                    headers.put("Content-Length", String.valueOf(content.length));, +                    return new Response(RestStatus.OK.getStatus(), headers, content);, +                    return new Response(RestStatus.NOT_FOUND.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +                return new Response(RestStatus.FORBIDDEN.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +        return null;, +    @SuppressForbidden(reason = "Paths#get is fine - we don't have environment here"), +    private static Path dir(final String dir) {, +        return Paths.get(dir);, +++ b/plugins/examples/rest-handler/build.gradle, +  dependsOn testClasses, +  args '-cp', "${ -> project.sourceSets.test.runtimeClasspath.asPath }",, +          'org.elasticsearch.example.resthandler.ExampleFixture',, +          baseDir, 'TEST', +++ b/plugins/examples/rest-handler/src/test/java/org/elasticsearch/example/resthandler/ExampleFixture.java, +/*]