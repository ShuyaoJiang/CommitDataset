[+++ b/.gitignore, +++ b/.gitignore, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterState state = observer.observedState();, +            protected boolean validate(ClusterState newState) {, +                return newState.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, newState, concreteWaitFor);, +        if (state.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/.gitignore, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterState state = observer.observedState();, +            protected boolean validate(ClusterState newState) {, +                return newState.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, newState, concreteWaitFor);, +        if (state.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +        if (activeShardCount.enoughShardsActive(observer.observedState(), indexName)) {, +                    protected boolean validate(final ClusterState newState) {, +                        return activeShardCount.enoughShardsActive(newState, indexName);, +++ b/.gitignore, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterState state = observer.observedState();, +            protected boolean validate(ClusterState newState) {, +                return newState.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, newState, concreteWaitFor);, +        if (state.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +        if (activeShardCount.enoughShardsActive(observer.observedState(), indexName)) {, +                    protected boolean validate(final ClusterState newState) {, +                        return activeShardCount.enoughShardsActive(newState, indexName);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +            protected boolean validate(ClusterState newState) {, +                ClusterBlockException blockException = checkBlock(request, newState);, +            final ClusterState clusterState = observer.observedState();, +++ b/.gitignore, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterState state = observer.observedState();, +            protected boolean validate(ClusterState newState) {, +                return newState.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, newState, concreteWaitFor);, +        if (state.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +        if (activeShardCount.enoughShardsActive(observer.observedState(), indexName)) {, +                    protected boolean validate(final ClusterState newState) {, +                        return activeShardCount.enoughShardsActive(newState, indexName);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +            protected boolean validate(ClusterState newState) {, +                ClusterBlockException blockException = checkBlock(request, newState);, +            final ClusterState clusterState = observer.observedState();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            final ClusterState state = observer.observedState();, +++ b/.gitignore, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterState state = observer.observedState();, +            protected boolean validate(ClusterState newState) {, +                return newState.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, newState, concreteWaitFor);, +        if (state.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +        if (activeShardCount.enoughShardsActive(observer.observedState(), indexName)) {, +                    protected boolean validate(final ClusterState newState) {, +                        return activeShardCount.enoughShardsActive(newState, indexName);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +            protected boolean validate(ClusterState newState) {, +                ClusterBlockException blockException = checkBlock(request, newState);, +            final ClusterState clusterState = observer.observedState();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            final ClusterState state = observer.observedState();, +++ b/core/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java, +            nodes = observer.observedState().nodes();, +                ClusterBlockException blockException = checkGlobalBlock(observer.observedState());, +                request.concreteIndex(indexNameExpressionResolver.concreteSingleIndex(observer.observedState(), request).getName());, +                resolveRequest(observer.observedState(), request);, +                blockException = checkRequestBlock(observer.observedState(), request);, +                shardIt = shards(observer.observedState(), request);, +++ b/.gitignore, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterState state = observer.observedState();, +            protected boolean validate(ClusterState newState) {, +                return newState.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, newState, concreteWaitFor);, +        if (state.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +        if (activeShardCount.enoughShardsActive(observer.observedState(), indexName)) {, +                    protected boolean validate(final ClusterState newState) {, +                        return activeShardCount.enoughShardsActive(newState, indexName);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +            protected boolean validate(ClusterState newState) {, +                ClusterBlockException blockException = checkBlock(request, newState);, +            final ClusterState clusterState = observer.observedState();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            final ClusterState state = observer.observedState();, +++ b/core/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java, +            nodes = observer.observedState().nodes();, +                ClusterBlockException blockException = checkGlobalBlock(observer.observedState());, +                request.concreteIndex(indexNameExpressionResolver.concreteSingleIndex(observer.observedState(), request).getName());, +                resolveRequest(observer.observedState(), request);, +                blockException = checkRequestBlock(observer.observedState(), request);, +                shardIt = shards(observer.observedState(), request);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/.gitignore, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterState state = observer.observedState();, +            protected boolean validate(ClusterState newState) {, +                return newState.status() == ClusterState.ClusterStateStatus.APPLIED && validateRequest(request, newState, concreteWaitFor);]