[+++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/Shield.java, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +import org.elasticsearch.common.regex.Regex;, +import org.elasticsearch.shield.audit.index.IndexAuditTrail;, +import org.elasticsearch.shield.audit.index.IndexNameResolver;, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +            validateAutoCreateIndex(settings);, +, +    static void validateAutoCreateIndex(Settings settings) {, +        String value = settings.get("action.auto_create_index");, +        if (value == null) {, +            return;, +        }, +, +        final boolean indexAuditingEnabled = AuditTrailModule.indexAuditLoggingEnabled(settings);, +        final String auditIndex = indexAuditingEnabled ? "," + IndexAuditTrail.INDEX_NAME_PREFIX + "*" : "";, +        String errorMessage = LoggerMessageFormat.format("the [action.auto_create_index] setting value [{}] is too" +, +                " restrictive. disable [action.auto_create_index] or set it to " +, +                "[{}{}]", (Object) value, ShieldTemplateService.SECURITY_INDEX_NAME, auditIndex);, +        if (Booleans.isExplicitFalse(value)) {, +            throw new IllegalArgumentException(errorMessage);, +        }, +, +        if (Booleans.isExplicitTrue(value)) {, +            return;, +        }, +, +        String[] matches = Strings.commaDelimitedListToStringArray(value);, +        List<String> indices = new ArrayList<>();, +        indices.add(ShieldTemplateService.SECURITY_INDEX_NAME);, +        if (indexAuditingEnabled) {, +            DateTime now = new DateTime(DateTimeZone.UTC);, +            // just use daily rollover, +            indices.add(IndexNameResolver.resolve(IndexAuditTrail.INDEX_NAME_PREFIX, now, IndexNameResolver.Rollover.DAILY));, +            indices.add(IndexNameResolver.resolve(IndexAuditTrail.INDEX_NAME_PREFIX, now.plusDays(1), IndexNameResolver.Rollover.DAILY));, +            indices.add(IndexNameResolver.resolve(IndexAuditTrail.INDEX_NAME_PREFIX, now.plusMonths(1), IndexNameResolver.Rollover.DAILY));, +            indices.add(IndexNameResolver.resolve(IndexAuditTrail.INDEX_NAME_PREFIX, now.plusMonths(2), IndexNameResolver.Rollover.DAILY));, +            indices.add(IndexNameResolver.resolve(IndexAuditTrail.INDEX_NAME_PREFIX, now.plusMonths(3), IndexNameResolver.Rollover.DAILY));, +            indices.add(IndexNameResolver.resolve(IndexAuditTrail.INDEX_NAME_PREFIX, now.plusMonths(4), IndexNameResolver.Rollover.DAILY));, +            indices.add(IndexNameResolver.resolve(IndexAuditTrail.INDEX_NAME_PREFIX, now.plusMonths(5), IndexNameResolver.Rollover.DAILY));, +            indices.add(IndexNameResolver.resolve(IndexAuditTrail.INDEX_NAME_PREFIX, now.plusMonths(6), IndexNameResolver.Rollover.DAILY));, +        }, +, +        for (String index : indices) {, +            boolean matched = false;, +            for (String match : matches) {, +                char c = match.charAt(0);, +                if (c == '-') {, +                    if (Regex.simpleMatch(match.substring(1), index)) {, +                        throw new IllegalArgumentException(errorMessage);, +                    }, +                } else if (c == '+') {, +                    if (Regex.simpleMatch(match.substring(1), index)) {, +                        matched = true;, +                        break;, +                    }, +                } else {, +                    if (Regex.simpleMatch(match, index)) {, +                        matched = true;, +                        break;, +                    }, +                }, +            }, +            if (!matched) {, +                throw new IllegalArgumentException(errorMessage);, +            }, +        }, +, +        if (indexAuditingEnabled) {, +            logger.warn("the [action.auto_create_index] setting is configured to be restrictive [{}]. " +, +                    " for the next 6 months audit indices are allowed to be created, but please make sure" +, +                    " that any future history indices after 6 months with the pattern " +, +                    "[.shield_audit_log*] are allowed to be created", value);, +        }, +    }, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/Shield.java, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +import org.elasticsearch.common.regex.Regex;, +import org.elasticsearch.shield.audit.index.IndexAuditTrail;, +import org.elasticsearch.shield.audit.index.IndexNameResolver;, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +            validateAutoCreateIndex(settings);, +, +    static void validateAutoCreateIndex(Settings settings) {, +        String value = settings.get("action.auto_create_index");, +        if (value == null) {, +            return;, +        }, +, +        final boolean indexAuditingEnabled = AuditTrailModule.indexAuditLoggingEnabled(settings);, +        final String auditIndex = indexAuditingEnabled ? "," + IndexAuditTrail.INDEX_NAME_PREFIX + "*" : "";, +        String errorMessage = LoggerMessageFormat.format("the [action.auto_create_index] setting value [{}] is too" +, +                " restrictive. disable [action.auto_create_index] or set it to " +, +                "[{}{}]", (Object) value, ShieldTemplateService.SECURITY_INDEX_NAME, auditIndex);]