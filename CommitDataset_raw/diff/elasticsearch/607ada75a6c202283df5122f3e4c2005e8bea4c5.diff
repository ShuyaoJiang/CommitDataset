[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/status/IndicesStatusResponse.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.index.merge.MergeStats;, +public class IndicesStatusResponse extends BroadcastOperationResponse implements ToXContent {, +, +    @Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        return toXContent(builder, params, null);, +    }, +, +    public XContentBuilder toXContent(XContentBuilder builder, Params params, @Nullable SettingsFilter settingsFilter) throws IOException {, +        builder.startObject(Fields.INDICES);, +        for (IndexStatus indexStatus : indices().values()) {, +            builder.startObject(indexStatus.index(), XContentBuilder.FieldCaseConversion.NONE);, +, +            builder.array(Fields.ALIASES, indexStatus.settings().getAsArray("index.aliases"));, +, +            builder.startObject(Fields.SETTINGS);, +            Settings settings = indexStatus.settings();, +            if (settingsFilter != null) {, +                settings = settingsFilter.filterSettings(settings);, +            }, +            for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +                builder.field(entry.getKey(), entry.getValue());, +            }, +            builder.endObject();, +, +            builder.startObject(Fields.INDEX);, +            if (indexStatus.storeSize() != null) {, +                builder.field(Fields.PRIMARY_SIZE, indexStatus.primaryStoreSize().toString());, +                builder.field(Fields.PRIMARY_SIZE_IN_BYTES, indexStatus.primaryStoreSize().bytes());, +                builder.field(Fields.SIZE, indexStatus.storeSize().toString());, +                builder.field(Fields.SIZE_IN_BYTES, indexStatus.storeSize().bytes());, +            }, +            builder.endObject();, +            if (indexStatus.translogOperations() != -1) {, +                builder.startObject(Fields.TRANSLOG);, +                builder.field(Fields.OPERATIONS, indexStatus.translogOperations());, +                builder.endObject();, +            }, +, +            if (indexStatus.docs() != null) {, +                builder.startObject(Fields.DOCS);, +                builder.field(Fields.NUM_DOCS, indexStatus.docs().numDocs());, +                builder.field(Fields.MAX_DOC, indexStatus.docs().maxDoc());, +                builder.field(Fields.DELETED_DOCS, indexStatus.docs().deletedDocs());, +                builder.endObject();, +            }, +, +            MergeStats mergeStats = indexStatus.mergeStats();, +            if (mergeStats != null) {, +                mergeStats.toXContent(builder, params);, +            }, +, +            builder.startObject(Fields.SHARDS);, +            for (IndexShardStatus indexShardStatus : indexStatus) {, +                builder.startArray(Integer.toString(indexShardStatus.shardId().id()));, +                for (ShardStatus shardStatus : indexShardStatus) {, +                    builder.startObject();, +, +                    builder.startObject(Fields.ROUTING), +                            .field(Fields.STATE, shardStatus.shardRouting().state()), +                            .field(Fields.PRIMARY, shardStatus.shardRouting().primary()), +                            .field(Fields.NODE, shardStatus.shardRouting().currentNodeId()), +                            .field(Fields.RELOCATING_NODE, shardStatus.shardRouting().relocatingNodeId()), +                            .field(Fields.SHARD, shardStatus.shardRouting().shardId().id()), +                            .field(Fields.INDEX, shardStatus.shardRouting().shardId().index().name()), +                            .endObject();, +, +                    builder.field(Fields.STATE, shardStatus.state());, +                    if (shardStatus.storeSize() != null) {, +                        builder.startObject(Fields.INDEX);, +                        builder.field(Fields.SIZE, shardStatus.storeSize().toString());, +                        builder.field(Fields.SIZE_IN_BYTES, shardStatus.storeSize().bytes());, +                        builder.endObject();, +                    }, +                    if (shardStatus.translogId() != -1) {, +                        builder.startObject(Fields.TRANSLOG);, +                        builder.field(Fields.ID, shardStatus.translogId());, +                        builder.field(Fields.OPERATIONS, shardStatus.translogOperations());, +                        builder.endObject();, +                    }, +, +                    if (shardStatus.docs() != null) {, +                        builder.startObject(Fields.DOCS);, +                        builder.field(Fields.NUM_DOCS, shardStatus.docs().numDocs());, +                        builder.field(Fields.MAX_DOC, shardStatus.docs().maxDoc());, +                        builder.field(Fields.DELETED_DOCS, shardStatus.docs().deletedDocs());, +                        builder.endObject();, +                    }, +, +                    mergeStats = shardStatus.mergeStats();, +                    if (mergeStats != null) {, +                        mergeStats.toXContent(builder, params);, +                    }, +, +                    if (shardStatus.peerRecoveryStatus() != null) {]