[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +            PageCacheRecycler pageCacheRecycler = new PageCacheRecycler(settings);, +            BigArrays bigArrays = new BigArrays(pageCacheRecycler, circuitBreakerService);, +                bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, null);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +            PageCacheRecycler pageCacheRecycler = new PageCacheRecycler(settings);, +            BigArrays bigArrays = new BigArrays(pageCacheRecycler, circuitBreakerService);, +                bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, null);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +                         PageCacheRecycler pageCacheRecycler,, +            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, bigArrays, pageCacheRecycler,, +            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +            PageCacheRecycler pageCacheRecycler = new PageCacheRecycler(settings);, +            BigArrays bigArrays = new BigArrays(pageCacheRecycler, circuitBreakerService);, +                bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, null);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +                         PageCacheRecycler pageCacheRecycler,, +            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, bigArrays, pageCacheRecycler,, +            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public BigArrays(PageCacheRecycler recycler, @Nullable final CircuitBreakerService breakerService) {, +        this(recycler, breakerService, false);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +            PageCacheRecycler pageCacheRecycler = new PageCacheRecycler(settings);, +            BigArrays bigArrays = new BigArrays(pageCacheRecycler, circuitBreakerService);, +                bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, null);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +                         PageCacheRecycler pageCacheRecycler,, +            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, bigArrays, pageCacheRecycler,, +            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public BigArrays(PageCacheRecycler recycler, @Nullable final CircuitBreakerService breakerService) {, +        this(recycler, breakerService, false);, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +            PageCacheRecycler pageCacheRecycler = new PageCacheRecycler(settings);, +            BigArrays bigArrays = new BigArrays(pageCacheRecycler, circuitBreakerService);, +                bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, null);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +                         PageCacheRecycler pageCacheRecycler,, +            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, bigArrays, pageCacheRecycler,, +            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public BigArrays(PageCacheRecycler recycler, @Nullable final CircuitBreakerService breakerService) {, +        this(recycler, breakerService, false);, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings);, +            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService);, +                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,, +                networkService, restController);, +    BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {, +        return new BigArrays(pageCacheRecycler, circuitBreakerService);, +    }, +, +    /**, +     * Creates a new {@link BigArrays} instance used for this node., +     * This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing, +     */, +    PageCacheRecycler createPageCacheRecycler(Settings settings) {, +        return new PageCacheRecycler(settings);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +            PageCacheRecycler pageCacheRecycler = new PageCacheRecycler(settings);, +            BigArrays bigArrays = new BigArrays(pageCacheRecycler, circuitBreakerService);, +                bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, null);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +                         PageCacheRecycler pageCacheRecycler,, +            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, bigArrays, pageCacheRecycler,, +            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public BigArrays(PageCacheRecycler recycler, @Nullable final CircuitBreakerService breakerService) {, +        this(recycler, breakerService, false);, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.common.util.PageCacheRecycler;, +            PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings);, +            BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService);, +                threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,, +                networkService, restController);, +    BigArrays createBigArrays(PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService) {, +        return new BigArrays(pageCacheRecycler, circuitBreakerService);, +    }, +, +    /**]