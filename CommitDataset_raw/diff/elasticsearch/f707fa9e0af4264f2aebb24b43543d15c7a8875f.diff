[+++ b/docs/reference/sql/functions/grouping.asciidoc, +, +[IMPORTANT], +When the histogram in SQL is applied on **DATE** type instead of **DATETIME**, the interval specified is truncated to, +the multiple of a day. E.g.: for `HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '2 3:04' DAY TO MINUTE)` the interval, +actually used will be `INTERVAL '2' DAY`. If the interval specified is less than 1 day, e.g.:, +`HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '20' HOUR)` then the interval used will be `INTERVAL '1' DAY`., +++ b/docs/reference/sql/functions/grouping.asciidoc, +, +[IMPORTANT], +When the histogram in SQL is applied on **DATE** type instead of **DATETIME**, the interval specified is truncated to, +the multiple of a day. E.g.: for `HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '2 3:04' DAY TO MINUTE)` the interval, +actually used will be `INTERVAL '2' DAY`. If the interval specified is less than 1 day, e.g.:, +`HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '20' HOUR)` then the interval used will be `INTERVAL '1' DAY`., +++ b/docs/reference/sql/language/data-types.asciidoc, +[NOTE], +Most of {es} <<mapping-types, data types>> are available in {es-sql}, as indicated above., +As one can see, all of {es} <<mapping-types, data types>> are mapped to the data type with the same, +name in {es-sql}, with the exception of **date** data type which is mapped to **datetime** in {es-sql}., +This is to avoid confusion with the ANSI SQL **DATE** (date only) type, which is also supported by {es-sql}, +in queries (with the use of <<sql-functions-type-conversion-cast>>/<<sql-functions-type-conversion-convert>>),, +but doesn't correspond to an actual mapping in {es} (see the <<es-sql-only-types, `table`>> below)., +[[es-sql-only-types]], +, +| date                      | 24, +++ b/docs/reference/sql/functions/grouping.asciidoc, +, +[IMPORTANT], +When the histogram in SQL is applied on **DATE** type instead of **DATETIME**, the interval specified is truncated to, +the multiple of a day. E.g.: for `HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '2 3:04' DAY TO MINUTE)` the interval, +actually used will be `INTERVAL '2' DAY`. If the interval specified is less than 1 day, e.g.:, +`HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '20' HOUR)` then the interval used will be `INTERVAL '1' DAY`., +++ b/docs/reference/sql/language/data-types.asciidoc, +[NOTE], +Most of {es} <<mapping-types, data types>> are available in {es-sql}, as indicated above., +As one can see, all of {es} <<mapping-types, data types>> are mapped to the data type with the same, +name in {es-sql}, with the exception of **date** data type which is mapped to **datetime** in {es-sql}., +This is to avoid confusion with the ANSI SQL **DATE** (date only) type, which is also supported by {es-sql}, +in queries (with the use of <<sql-functions-type-conversion-cast>>/<<sql-functions-type-conversion-convert>>),, +but doesn't correspond to an actual mapping in {es} (see the <<es-sql-only-types, `table`>> below)., +[[es-sql-only-types]], +, +| date                      | 24, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/EsType.java, +    DATE(                     Types.DATE),, +++ b/docs/reference/sql/functions/grouping.asciidoc, +, +[IMPORTANT], +When the histogram in SQL is applied on **DATE** type instead of **DATETIME**, the interval specified is truncated to, +the multiple of a day. E.g.: for `HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '2 3:04' DAY TO MINUTE)` the interval, +actually used will be `INTERVAL '2' DAY`. If the interval specified is less than 1 day, e.g.:, +`HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '20' HOUR)` then the interval used will be `INTERVAL '1' DAY`., +++ b/docs/reference/sql/language/data-types.asciidoc, +[NOTE], +Most of {es} <<mapping-types, data types>> are available in {es-sql}, as indicated above., +As one can see, all of {es} <<mapping-types, data types>> are mapped to the data type with the same, +name in {es-sql}, with the exception of **date** data type which is mapped to **datetime** in {es-sql}., +This is to avoid confusion with the ANSI SQL **DATE** (date only) type, which is also supported by {es-sql}, +in queries (with the use of <<sql-functions-type-conversion-cast>>/<<sql-functions-type-conversion-convert>>),, +but doesn't correspond to an actual mapping in {es} (see the <<es-sql-only-types, `table`>> below)., +[[es-sql-only-types]], +, +| date                      | 24, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/EsType.java, +    DATE(                     Types.DATE),, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDateUtils.java, +        return ISO_WITH_MILLIS.parse(date, ZonedDateTime::from).toInstant().toEpochMilli();, +    static long utcMillisRemoveTime(long l) {, +++ b/docs/reference/sql/functions/grouping.asciidoc, +, +[IMPORTANT], +When the histogram in SQL is applied on **DATE** type instead of **DATETIME**, the interval specified is truncated to, +the multiple of a day. E.g.: for `HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '2 3:04' DAY TO MINUTE)` the interval, +actually used will be `INTERVAL '2' DAY`. If the interval specified is less than 1 day, e.g.:, +`HISTOGRAM(CAST(birth_date AS DATE), INTERVAL '20' HOUR)` then the interval used will be `INTERVAL '1' DAY`., +++ b/docs/reference/sql/language/data-types.asciidoc, +[NOTE], +Most of {es} <<mapping-types, data types>> are available in {es-sql}, as indicated above., +As one can see, all of {es} <<mapping-types, data types>> are mapped to the data type with the same, +name in {es-sql}, with the exception of **date** data type which is mapped to **datetime** in {es-sql}., +This is to avoid confusion with the ANSI SQL **DATE** (date only) type, which is also supported by {es-sql}, +in queries (with the use of <<sql-functions-type-conversion-cast>>/<<sql-functions-type-conversion-convert>>),, +but doesn't correspond to an actual mapping in {es} (see the <<es-sql-only-types, `table`>> below)., +[[es-sql-only-types]], +, +| date                      | 24, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/EsType.java, +    DATE(                     Types.DATE),, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDateUtils.java, +        return ISO_WITH_MILLIS.parse(date, ZonedDateTime::from).toInstant().toEpochMilli();, +    static long utcMillisRemoveTime(long l) {, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java, +import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.asDateTimeField;, +import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.asMillisSinceEpoch;, +import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.utcMillisRemoveTime;, +                return asDateTimeField(val, JdbcDateUtils::asMillisSinceEpoch, Function.identity());, +            }, +            if (EsType.DATE == type) {, +                return utcMillisRemoveTime(asMillisSinceEpoch(val.toString()));, +            }]