[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/DataDescription.java, +import java.time.ZoneOffset;, +                        DateTimeFormatterTimestampConverter.ofPattern(format, ZoneOffset.UTC);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/DataDescription.java, +import java.time.ZoneOffset;, +                        DateTimeFormatterTimestampConverter.ofPattern(format, ZoneOffset.UTC);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/transforms/date/DateFormatTransform.java, +        dateToEpochConverter = DateTimeFormatterTimestampConverter.ofPattern(timeFormat, ZoneOffset.UTC);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/DataDescription.java, +import java.time.ZoneOffset;, +                        DateTimeFormatterTimestampConverter.ofPattern(format, ZoneOffset.UTC);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/transforms/date/DateFormatTransform.java, +        dateToEpochConverter = DateTimeFormatterTimestampConverter.ofPattern(timeFormat, ZoneOffset.UTC);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/utils/time/DateTimeFormatterTimestampConverter.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/DataDescription.java, +import java.time.ZoneOffset;, +                        DateTimeFormatterTimestampConverter.ofPattern(format, ZoneOffset.UTC);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/transforms/date/DateFormatTransform.java, +        dateToEpochConverter = DateTimeFormatterTimestampConverter.ofPattern(timeFormat, ZoneOffset.UTC);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/utils/time/DateTimeFormatterTimestampConverter.java, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/ml/utils/time/DateTimeFormatterTimestampConverterTests.java, +        ESTestCase.expectThrows(IllegalArgumentException.class, () -> DateTimeFormatterTimestampConverter.ofPattern("y", ZoneOffset.UTC));, +        ESTestCase.expectThrows(IllegalArgumentException.class,, +                () -> DateTimeFormatterTimestampConverter.ofPattern("y-M-d", ZoneOffset.UTC));, +        ESTestCase.expectThrows(IllegalArgumentException.class,, +                () -> DateTimeFormatterTimestampConverter.ofPattern("HH:mm:ss", ZoneOffset.UTC));, +        ESTestCase.expectThrows(IllegalArgumentException.class,, +                () -> DateTimeFormatterTimestampConverter.ofPattern("uuuu-MM-dd HH:mm:ss", ZoneOffset.UTC));, +        TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern("yyyy-MM-dd HH:mm:ss", ZoneOffset.UTC);, +        TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS", ZoneOffset.UTC);, +        long expected = ZonedDateTime.of(2014, 3, 22, 1, 0, 0, 0, ZoneOffset.UTC).toEpochSecond();, +        long expected = ZonedDateTime.of(1985, 8, 18, 20, 15, 40, 0, ZoneOffset.UTC).toEpochSecond();, +        long expected = ZonedDateTime.of(LocalDate.now(ZoneOffset.UTC).getYear(), 8, 14, 1, 30, 20, 0, ZoneOffset.UTC).toEpochSecond();, +        expected = ZonedDateTime.of(LocalDate.now(ZoneOffset.UTC).getYear(), 12, 14, 1, 30, 20, 0, ZoneOffset.UTC).toEpochSecond();, +        TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern(pattern, ZoneOffset.UTC);, +        TimestampConverter formatter = DateTimeFormatterTimestampConverter.ofPattern(pattern, ZoneOffset.UTC);]