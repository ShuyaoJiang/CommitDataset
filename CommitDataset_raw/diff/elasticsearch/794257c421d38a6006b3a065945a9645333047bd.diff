[+++ b/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java, +            assert field.getName().matches("V(_\\d+)+(_(alpha|beta|rc)\\d+)?") : field.getName();, +        Version last = versions.remove(versions.size() - 1);, +        assert last.equals(current) : "The highest version must be the current one ", +            return new Tuple<>(unmodifiableList(versions), singletonList(current));, +        int unreleasedIndex = versions.size() - 1;, +            /* We don't support backwards compatibility for alphas, betas, and rcs. But, +             * they were released so we add them to the released list. Usually this doesn't, +             * matter to consumers, but consumers that do care should filter non-release, +             * versions. */, +            return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(earlierUnreleased, unreleased, current)));, +        return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(unreleased, current)));, +        for (int i = RELEASED_VERSIONS.size() - 1; i >= 0; i--) {, +            Version v = RELEASED_VERSIONS.get(i);, +            if (v.before(version)) {, +                return v;, +            }, +        }, +        throw new IllegalArgumentException("couldn't find any released versions before [" + version + "]");, +        for (int i = RELEASED_VERSIONS.size() - 1; i >= 0; i--) {, +            Version v = RELEASED_VERSIONS.get(i);, +            if (v.minor < Version.CURRENT.minor || v.major < Version.CURRENT.major) {, +                return v;, +            }, +        }, +        throw new IllegalArgumentException("couldn't find any released versions of the minor before [" + Version.CURRENT + "]");, +++ b/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java, +            assert field.getName().matches("V(_\\d+)+(_(alpha|beta|rc)\\d+)?") : field.getName();, +        Version last = versions.remove(versions.size() - 1);, +        assert last.equals(current) : "The highest version must be the current one ", +            return new Tuple<>(unmodifiableList(versions), singletonList(current));, +        int unreleasedIndex = versions.size() - 1;, +            /* We don't support backwards compatibility for alphas, betas, and rcs. But, +             * they were released so we add them to the released list. Usually this doesn't, +             * matter to consumers, but consumers that do care should filter non-release, +             * versions. */, +            return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(earlierUnreleased, unreleased, current)));, +        return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(unreleased, current)));, +        for (int i = RELEASED_VERSIONS.size() - 1; i >= 0; i--) {, +            Version v = RELEASED_VERSIONS.get(i);, +            if (v.before(version)) {, +                return v;, +            }, +        }, +        throw new IllegalArgumentException("couldn't find any released versions before [" + version + "]");, +        for (int i = RELEASED_VERSIONS.size() - 1; i >= 0; i--) {, +            Version v = RELEASED_VERSIONS.get(i);, +            if (v.minor < Version.CURRENT.minor || v.major < Version.CURRENT.major) {, +                return v;, +            }, +        }, +        throw new IllegalArgumentException("couldn't find any released versions of the minor before [" + Version.CURRENT + "]");, +++ b/test/framework/src/test/java/org/elasticsearch/test/VersionUtilsTests.java, +                TestReleaseBranch.V_5_4_0), released);, +        assertEquals(singletonList(TestReleaseBranch.V_5_4_1), unreleased);, +        assertEquals(Arrays.asList(TestStableBranch.V_5_3_0, TestStableBranch.V_5_3_1), released);, +        assertEquals(Arrays.asList(TestStableBranch.V_5_3_2, TestStableBranch.V_5_4_0), unreleased);, +        assertEquals(Arrays.asList(TestStableBranchBehindStableBranch.V_5_3_0, TestStableBranchBehindStableBranch.V_5_3_1), released);, +        assertEquals(Arrays.asList(TestStableBranchBehindStableBranch.V_5_3_2, TestStableBranchBehindStableBranch.V_5_4_0,, +                TestStableBranchBehindStableBranch.V_5_5_0), unreleased);, +                TestUnstableBranch.V_6_0_0_alpha1, TestUnstableBranch.V_6_0_0_alpha2), released);, +        assertEquals(Arrays.asList(TestUnstableBranch.V_5_3_2, TestUnstableBranch.V_5_4_0, TestUnstableBranch.V_6_0_0_alpha3), unreleased);, +                /* Gradle skips the current version because being backwards compatible, +                 * with yourself is implied. Java lists the version because it is useful. */, +                .filter(v -> v != Version.CURRENT), +                /* Gradle skips the current version because being backwards compatible, +                 * with yourself is implied. Java lists the version because it is useful. */, +                .filter(v -> v != Version.CURRENT)]