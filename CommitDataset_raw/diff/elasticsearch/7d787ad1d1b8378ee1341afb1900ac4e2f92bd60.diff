[+++ b/core/src/test/java/org/elasticsearch/search/sort/GeoDistanceIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.sort;, +, +import org.apache.lucene.util.GeoHashUtils;, +import org.elasticsearch.Version;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.geo.GeoDistance;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.DistanceUnit;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.index.query.GeoDistanceQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.sort.SortBuilders;, +import org.elasticsearch.search.sort.SortOrder;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.InternalSettingsPlugin;, +import org.elasticsearch.test.VersionUtils;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.geoDistanceQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoDistanceRangeQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFailures;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFirstHit;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertOrderedSearchHits;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasId;, +import static org.hamcrest.Matchers.anyOf;, +import static org.hamcrest.Matchers.closeTo;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +, +, +public class GeoDistanceIT extends ESIntegTestCase {, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return pluginList(InternalSettingsPlugin.class);, +    }, +, +    public void testSimpleDistance() throws Exception {, +        Version version = VersionUtils.randomVersionBetween(random(), Version.V_2_0_0, Version.CURRENT);, +        Settings settings = Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build();, +        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties"), +                .startObject("location").field("type", "geo_point");, +        if (version.before(Version.V_2_2_0)) {, +            xContentBuilder.field("lat_lon", true);, +        }, +        xContentBuilder.endObject().endObject().endObject().endObject();, +        assertAcked(prepareCreate("test").setSettings(settings).addMapping("type1", xContentBuilder));, +        ensureGreen();, +, +        indexRandom(true,, +                client().prepareIndex("test", "type1", "1"), +                        .setSource(jsonBuilder().startObject().field("name", "New York").startObject("location").field("lat", 40.7143528), +                                .field("lon", -74.0059731).endObject().endObject()),, +                // to NY: 5.286 km, +                client().prepareIndex("test", "type1", "2"), +                        .setSource(jsonBuilder().startObject().field("name", "Times Square").startObject("location").field("lat", 40.759011), +                                .field("lon", -73.9844722).endObject().endObject()),, +                // to NY: 0.4621 km, +                client().prepareIndex("test", "type1", "3"), +                        .setSource(jsonBuilder().startObject().field("name", "Tribeca").startObject("location").field("lat", 40.718266), +                                .field("lon", -74.007819).endObject().endObject()),, +                // to NY: 1.055 km]