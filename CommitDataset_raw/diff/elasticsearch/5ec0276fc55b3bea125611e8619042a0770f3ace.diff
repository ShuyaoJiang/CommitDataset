[+++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.percolate.*;, +        registerAction(MultiPercolateAction.INSTANCE, TransportMultiPercolateAction.class, TransportShardMultiPercolateAction.class);, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.percolate.*;, +        registerAction(MultiPercolateAction.INSTANCE, TransportMultiPercolateAction.class, TransportShardMultiPercolateAction.class);, +++ b/src/main/java/org/elasticsearch/action/percolate/MultiPercolateResponse.java, +        this.items = new Item[0];, +        public Item(PercolateResponse response) {, +        }, +, +        public Item(String errorMessage) {, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.percolate.*;, +        registerAction(MultiPercolateAction.INSTANCE, TransportMultiPercolateAction.class, TransportShardMultiPercolateAction.class);, +++ b/src/main/java/org/elasticsearch/action/percolate/MultiPercolateResponse.java, +        this.items = new Item[0];, +        public Item(PercolateResponse response) {, +        }, +, +        public Item(String errorMessage) {, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +import org.elasticsearch.index.shard.ShardId;, +    public PercolateShardRequest(String index, int shardId) {, +        super(index, shardId);, +    }, +, +    public PercolateShardRequest(ShardId shardId, PercolateRequest request) {, +        super(shardId.index().name(), shardId.id());, +        this.documentType = request.documentType();, +        this.source = request.source();, +        this.docSource = request.docSource();, +        this.onlyCount = request.onlyCount();, +    }, +, +    void documentType(String documentType) {, +        this.documentType = documentType;, +    }, +, +    void source(BytesReference source) {, +        this.source = source;, +    }, +, +    void docSource(BytesReference docSource) {, +        this.docSource = docSource;, +    }, +, +    void onlyCount(boolean onlyCount) {, +        this.onlyCount = onlyCount;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.percolate.*;, +        registerAction(MultiPercolateAction.INSTANCE, TransportMultiPercolateAction.class, TransportShardMultiPercolateAction.class);, +++ b/src/main/java/org/elasticsearch/action/percolate/MultiPercolateResponse.java, +        this.items = new Item[0];, +        public Item(PercolateResponse response) {, +        }, +, +        public Item(String errorMessage) {, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +import org.elasticsearch.index.shard.ShardId;, +    public PercolateShardRequest(String index, int shardId) {, +        super(index, shardId);, +    }, +, +    public PercolateShardRequest(ShardId shardId, PercolateRequest request) {, +        super(shardId.index().name(), shardId.id());, +        this.documentType = request.documentType();, +        this.source = request.source();, +        this.docSource = request.docSource();, +        this.onlyCount = request.onlyCount();, +    }, +, +    void documentType(String documentType) {, +        this.documentType = documentType;, +    }, +, +    void source(BytesReference source) {, +        this.source = source;, +    }, +, +    void docSource(BytesReference docSource) {, +        this.docSource = docSource;, +    }, +, +    void onlyCount(boolean onlyCount) {, +        this.onlyCount = onlyCount;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *]