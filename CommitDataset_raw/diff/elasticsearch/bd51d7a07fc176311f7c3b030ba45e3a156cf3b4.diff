[+++ b/docs/reference/indices/flush.asciidoc, +[[flush-parameters]], +=== Request Parameters, +, +The flush API accepts the following request parameters:, +, +[horizontal], +`wait_if_ongoing`::  If set to `true` the flush operation will block until the, +flush can be executed if another flush operation is already executing., +The default is `false` and will cause an exception to be thrown on , +the shard level if another flush operation is already running. coming[1.4.0], +, +`full`:: If set to `true` a new index writer is created and settings that have, +been changed related to the index writer will be refreshed. Note: if a full flush, +is required for a setting to take effect this will be part of the settings update, +process and it not required to be executed by the user., +(This setting can be considered as internal), +, +`force`:: Whether a flush should be forced even if it is not necessarily needed ie., +if no changes will be committed to the index. This is useful if transaction log IDs, +should be incremented even if no uncommitted changes are present., +(This setting can be considered as internal), +, +[float], +[[flush-multi-index]], +++ b/docs/reference/indices/flush.asciidoc, +[[flush-parameters]], +=== Request Parameters, +, +The flush API accepts the following request parameters:, +, +[horizontal], +`wait_if_ongoing`::  If set to `true` the flush operation will block until the, +flush can be executed if another flush operation is already executing., +The default is `false` and will cause an exception to be thrown on , +the shard level if another flush operation is already running. coming[1.4.0], +, +`full`:: If set to `true` a new index writer is created and settings that have, +been changed related to the index writer will be refreshed. Note: if a full flush, +is required for a setting to take effect this will be part of the settings update, +process and it not required to be executed by the user., +(This setting can be considered as internal), +, +`force`:: Whether a flush should be forced even if it is not necessarily needed ie., +if no changes will be committed to the index. This is useful if transaction log IDs, +should be incremented even if no uncommitted changes are present., +(This setting can be considered as internal), +, +[float], +[[flush-multi-index]], +++ b/rest-api-spec/api/indices.flush.json, +        "wait_if_ongoing": {, +          "type" : "boolean",, +          "description" : "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.", +        },, +++ b/docs/reference/indices/flush.asciidoc, +[[flush-parameters]], +=== Request Parameters, +, +The flush API accepts the following request parameters:, +, +[horizontal], +`wait_if_ongoing`::  If set to `true` the flush operation will block until the, +flush can be executed if another flush operation is already executing., +The default is `false` and will cause an exception to be thrown on , +the shard level if another flush operation is already running. coming[1.4.0], +, +`full`:: If set to `true` a new index writer is created and settings that have, +been changed related to the index writer will be refreshed. Note: if a full flush, +is required for a setting to take effect this will be part of the settings update, +process and it not required to be executed by the user., +(This setting can be considered as internal), +, +`force`:: Whether a flush should be forced even if it is not necessarily needed ie., +if no changes will be committed to the index. This is useful if transaction log IDs, +should be incremented even if no uncommitted changes are present., +(This setting can be considered as internal), +, +[float], +[[flush-multi-index]], +++ b/rest-api-spec/api/indices.flush.json, +        "wait_if_ongoing": {, +          "type" : "boolean",, +          "description" : "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.", +        },, +++ b/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.Version;, +    private boolean waitIfOngoing = false;, +     * Returns <tt>true</tt> iff a flush should block, +     * if a another flush operation is already running. Otherwise <tt>false</tt>, +     */, +    public boolean waitIfOngoing() {, +        return this.waitIfOngoing;, +    }, +, +    /**, +     * if set to <tt>true</tt> the flush will block, +     * if a another flush operation is already running until the flush can be performed., +     */, +    public FlushRequest waitIfOngoing(boolean waitIfOngoing) {]