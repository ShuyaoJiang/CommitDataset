[+++ b/src/test/java/org/elasticsearch/search/query/MultiMatchQueryTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.query;, +, +import com.carrotsearch.randomizedtesting.annotations.Repeat;, +import com.carrotsearch.randomizedtesting.generators.RandomPicks;, +import com.google.common.collect.Sets;, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.query.MatchQueryBuilder;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.SearchHits;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.ExecutionException;, +, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.*;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +import static org.hamcrest.Matchers.*;, +, +public class MultiMatchQueryTests extends ElasticsearchIntegrationTest {, +, +    @Before, +    public void init() throws Exception {, +        CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder(), +                .put(SETTING_NUMBER_OF_SHARDS, 1), +                .put(SETTING_NUMBER_OF_REPLICAS, 0), +                .put("index.analysis.analyzer.perfect_match.type", "custom"), +                .put("index.analysis.analyzer.perfect_match.tokenizer", "keyword"), +                .put("index.analysis.analyzer.perfect_match.filter", "lowercase"), +                .put("index.analysis.analyzer.category.type", "custom"), +                .put("index.analysis.analyzer.category.tokenizer", "whitespace"), +                .put("index.analysis.analyzer.category.filter", "lowercase"), +        );, +        assertAcked(builder.addMapping("test", createMapping()));, +        ensureGreen();, +        int numDocs = atLeast(50);, +        List<IndexRequestBuilder> builders = new ArrayList<IndexRequestBuilder>();, +        builders.add(client().prepareIndex("test", "test", "theone").setSource(, +                "full_name", "Captain America",, +                "first_name", "Captain",, +                "last_name", "America",, +                "category", "marvel hero"));, +        builders.add(client().prepareIndex("test", "test", "theother").setSource(, +                "full_name", "marvel hero",, +                "first_name", "marvel",, +                "last_name", "hero",, +                "category", "bogus"));, +, +        builders.add(client().prepareIndex("test", "test", "ultimate1").setSource(, +                "full_name", "Alpha the Ultimate Mutant",, +                "first_name", "Alpha the",, +                "last_name", "Ultimate Mutant",, +                "category", "marvel hero"));, +        builders.add(client().prepareIndex("test", "test", "ultimate2").setSource(, +                "full_name", "Man the Ultimate Ninja",, +                "first_name", "Man the Ultimate",, +                "last_name", "Ninja",, +                "category", "marvel hero"));, +, +        builders.add(client().prepareIndex("test", "test", "anotherhero").setSource(, +                "full_name", "ultimate",, +                "first_name", "wolferine",, +                "last_name", "",, +                "category", "marvel hero"));, +        List<String> firstNames = new ArrayList<String>();, +        fill(firstNames, "Captain", between(15, 25));, +        fill(firstNames, "Ultimate", between(5, 10));, +        fillRandom(firstNames, between(3, 7));, +        List<String> lastNames = new ArrayList<String>();, +        fill(lastNames, "Captain", between(3, 7));]