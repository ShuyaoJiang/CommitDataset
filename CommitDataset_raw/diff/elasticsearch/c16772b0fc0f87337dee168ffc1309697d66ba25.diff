[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            settings.getClassLoader().loadClass("org.apache.log4j.Logger");, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            settings.getClassLoader().loadClass("org.apache.log4j.Logger");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            final Class<? extends HashFunction> hashFunctionClass = Classes.loadClass(getClass().getClassLoader(), hashFunction);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            settings.getClassLoader().loadClass("org.apache.log4j.Logger");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            final Class<? extends HashFunction> hashFunctionClass = Classes.loadClass(getClass().getClassLoader(), hashFunction);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                    pre20HashFunction = Classes.loadClass(getClass().getClassLoader(), pre20HashFunctionName);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            settings.getClassLoader().loadClass("org.apache.log4j.Logger");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            final Class<? extends HashFunction> hashFunctionClass = Classes.loadClass(getClass().getClassLoader(), hashFunction);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                    pre20HashFunction = Classes.loadClass(getClass().getClassLoader(), pre20HashFunctionName);, +++ b/core/src/main/java/org/elasticsearch/common/Classes.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.bootstrap.Elasticsearch;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.settings.NoClassSettingsException;, +, +import java.util.Arrays;, +import java.util.Iterator;, +import java.util.Locale;, +, +import static org.elasticsearch.common.Strings.toCamelCase;, +     * Return the default ClassLoader to use: typically the thread context, +     * ClassLoader, if available; the ClassLoader that loaded the ClassUtils, +     * class will be used as fallback., +     * <p/>, +     * <p>Call this method if you intend to use the thread context ClassLoader, +     * in a scenario where you absolutely need a non-null ClassLoader reference:, +     * for example, for class path resource loading (but not necessarily for, +     * <code>Class.forName</code>, which accepts a <code>null</code> ClassLoader, +     * reference as well)., +     *, +     * @return the default ClassLoader (never <code>null</code>), +     * @see java.lang.Thread#getContextClassLoader(), +     */, +    public static ClassLoader getDefaultClassLoader() {, +        ClassLoader cl = null;, +        try {, +            cl = Thread.currentThread().getContextClassLoader();, +        } catch (Throwable ex) {, +            // Cannot access thread context ClassLoader - falling back to system class loader..., +        }, +        if (cl == null) {, +            // No thread context class loader -> use class loader of this class., +            cl = Classes.class.getClassLoader();, +        }, +        return cl;, +    }, +, +    /**, +    public static <T> Class<? extends T> loadClass(ClassLoader classLoader, String className) {, +        try {, +            return (Class<? extends T>) classLoader.loadClass(className);, +        } catch (ClassNotFoundException|NoClassDefFoundError e) {, +            throw new ElasticsearchException("failed to load class [" + className + "]", e);, +        }, +    }, +, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            settings.getClassLoader().loadClass("org.apache.log4j.Logger");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            final Class<? extends HashFunction> hashFunctionClass = Classes.loadClass(getClass().getClassLoader(), hashFunction);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                    pre20HashFunction = Classes.loadClass(getClass().getClassLoader(), pre20HashFunctionName);, +++ b/core/src/main/java/org/elasticsearch/common/Classes.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.bootstrap.Elasticsearch;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.settings.NoClassSettingsException;, +, +import java.util.Arrays;, +import java.util.Iterator;, +import java.util.Locale;, +, +import static org.elasticsearch.common.Strings.toCamelCase;, +     * Return the default ClassLoader to use: typically the thread context, +     * ClassLoader, if available; the ClassLoader that loaded the ClassUtils, +     * class will be used as fallback., +     * <p/>, +     * <p>Call this method if you intend to use the thread context ClassLoader, +     * in a scenario where you absolutely need a non-null ClassLoader reference:, +     * for example, for class path resource loading (but not necessarily for, +     * <code>Class.forName</code>, which accepts a <code>null</code> ClassLoader, +     * reference as well)., +     *, +     * @return the default ClassLoader (never <code>null</code>), +     * @see java.lang.Thread#getContextClassLoader()]