[+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +        for (Map.Entry<String, ?> repo : entityAsMap(adminClient.performRequest(new Request("GET", "/_snapshot/_all"))).entrySet()) {, +                Request listRequest = new Request("GET", "/_snapshot/" + repoName + "/_all");, +                listRequest.addParameter("ignore_unavailable", "true");, +                List<?> snapshots = (List<?>) entityAsMap(adminClient.performRequest(listRequest)).get("snapshots");, +                    adminClient().performRequest(new Request("DELETE", "/_snapshot/" + repoName + "/" + name));, +                adminClient().performRequest(new Request("DELETE", "_snapshot/" + repoName));, +        Map<?, ?> getResponse = entityAsMap(adminClient().performRequest(new Request("GET", "/_cluster/settings")));, +            Request request = new Request("PUT", "/_cluster/settings");, +            request.setJsonEntity(Strings.toString(clearCommand));, +            adminClient().performRequest(request);, +        Set<String> runningTasks = runningTasks(adminClient().performRequest(new Request("GET", "/_tasks")));, +                Response response = adminClient().performRequest(new Request("GET", "/_cluster/pending_tasks"));, +        Request request = new Request("GET", "/_cluster/health/" + index);, +        request.addParameter("wait_for_status", "green");, +        request.addParameter("wait_for_no_relocating_shards", "true");, +        request.addParameter("timeout", "70s");, +        request.addParameter("level", "shards");, +        client().performRequest(request);, +        Request request = new Request("GET", "/_cluster/health");, +        request.addParameter("wait_for_no_initializing_shards", "true");, +        request.addParameter("timeout", "70s");, +        request.addParameter("level", "shards");, +        client().performRequest(request);, +        Request request = new Request("PUT", "/" + name);, +        request.setJsonEntity("{\n \"settings\": " + Strings.toString(settings), +                + ", \"mappings\" : {" + mapping + "} }");, +        client().performRequest(request);, +        Request request = new Request("PUT", "/" + index + "/_settings");, +        request.setJsonEntity(Strings.toString(settings));, +        client().performRequest(request);, +        Request request = new Request("GET", "/" + index + "/_settings");, +        request.addParameter("flat_settings", "true");, +        Response response = client().performRequest(request);, +        Response response = client().performRequest(new Request("HEAD", "/" + index));, +        Response response = client().performRequest(new Request("POST", "/" + index + "/_close"));, +        Response response = client().performRequest(new Request("POST", "/" + index + "/_open"));, +        Response response = client().performRequest(new Request("HEAD", "/_alias/" + alias));, +        Response response = client().performRequest(new Request("HEAD", "/" + index + "/_alias/" + alias));, +        Response response = client().performRequest(new Request("GET", endpoint));, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +        for (Map.Entry<String, ?> repo : entityAsMap(adminClient.performRequest(new Request("GET", "/_snapshot/_all"))).entrySet()) {, +                Request listRequest = new Request("GET", "/_snapshot/" + repoName + "/_all");, +                listRequest.addParameter("ignore_unavailable", "true");, +                List<?> snapshots = (List<?>) entityAsMap(adminClient.performRequest(listRequest)).get("snapshots");, +                    adminClient().performRequest(new Request("DELETE", "/_snapshot/" + repoName + "/" + name));, +                adminClient().performRequest(new Request("DELETE", "_snapshot/" + repoName));, +        Map<?, ?> getResponse = entityAsMap(adminClient().performRequest(new Request("GET", "/_cluster/settings")));, +            Request request = new Request("PUT", "/_cluster/settings");, +            request.setJsonEntity(Strings.toString(clearCommand));, +            adminClient().performRequest(request);, +        Set<String> runningTasks = runningTasks(adminClient().performRequest(new Request("GET", "/_tasks")));, +                Response response = adminClient().performRequest(new Request("GET", "/_cluster/pending_tasks"));, +        Request request = new Request("GET", "/_cluster/health/" + index);, +        request.addParameter("wait_for_status", "green");, +        request.addParameter("wait_for_no_relocating_shards", "true");, +        request.addParameter("timeout", "70s");, +        request.addParameter("level", "shards");, +        client().performRequest(request);, +        Request request = new Request("GET", "/_cluster/health");, +        request.addParameter("wait_for_no_initializing_shards", "true");, +        request.addParameter("timeout", "70s");, +        request.addParameter("level", "shards");, +        client().performRequest(request);, +        Request request = new Request("PUT", "/" + name);, +        request.setJsonEntity("{\n \"settings\": " + Strings.toString(settings), +                + ", \"mappings\" : {" + mapping + "} }");, +        client().performRequest(request);, +        Request request = new Request("PUT", "/" + index + "/_settings");, +        request.setJsonEntity(Strings.toString(settings));, +        client().performRequest(request);, +        Request request = new Request("GET", "/" + index + "/_settings");, +        request.addParameter("flat_settings", "true");, +        Response response = client().performRequest(request);, +        Response response = client().performRequest(new Request("HEAD", "/" + index));, +        Response response = client().performRequest(new Request("POST", "/" + index + "/_close"));, +        Response response = client().performRequest(new Request("POST", "/" + index + "/_open"));, +        Response response = client().performRequest(new Request("HEAD", "/_alias/" + alias));, +        Response response = client().performRequest(new Request("HEAD", "/" + index + "/_alias/" + alias));, +        Response response = client().performRequest(new Request("GET", endpoint));, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        Request request = new Request("GET", "/_cat/nodes");, +        request.addParameter("h", "version,master");, +        Response response = restClient.performRequest(request);, +            Response response = restClient.performRequest(new Request("GET", "/"));]