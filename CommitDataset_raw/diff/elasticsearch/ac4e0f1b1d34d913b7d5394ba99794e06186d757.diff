[+++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/DateProcessorTests.java, +import java.time.ZoneId;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +, +    private TemplateScript.Factory templatize(ZoneId timezone) {, +        // prevent writing "UTC" as string, as joda time does not parse it, +        String id = timezone.equals(ZoneOffset.UTC) ? "UTC" : timezone.getId();, +        return new TestTemplateService.MockTemplateScript.Factory(id);, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +                templatize(ZoneOffset.UTC), templatize(randomLocale(random())),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ITALIAN),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +            equalTo(ZonedDateTime.now().getYear() + "-06-12T00:00:00.000+02:00"));, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.ofHours(2)),, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC),, +            templatize(randomLocale(random())), "date_as_string", Collections.singletonList("UNIX_MS"), "date_as_date");, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC),, +            templatize(ZoneOffset.UTC), new TestTemplateService.MockTemplateScript.Factory("invalid_locale"),, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/DateProcessorTests.java, +import java.time.ZoneId;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +, +    private TemplateScript.Factory templatize(ZoneId timezone) {, +        // prevent writing "UTC" as string, as joda time does not parse it, +        String id = timezone.equals(ZoneOffset.UTC) ? "UTC" : timezone.getId();, +        return new TestTemplateService.MockTemplateScript.Factory(id);, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +                templatize(ZoneOffset.UTC), templatize(randomLocale(random())),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ITALIAN),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +            equalTo(ZonedDateTime.now().getYear() + "-06-12T00:00:00.000+02:00"));, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.ofHours(2)),, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC),, +            templatize(randomLocale(random())), "date_as_string", Collections.singletonList("UNIX_MS"), "date_as_date");, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC),, +            templatize(ZoneOffset.UTC), new TestTemplateService.MockTemplateScript.Factory("invalid_locale"),, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC);, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/DateProcessorTests.java, +import java.time.ZoneId;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +, +    private TemplateScript.Factory templatize(ZoneId timezone) {, +        // prevent writing "UTC" as string, as joda time does not parse it, +        String id = timezone.equals(ZoneOffset.UTC) ? "UTC" : timezone.getId();, +        return new TestTemplateService.MockTemplateScript.Factory(id);, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +                templatize(ZoneOffset.UTC), templatize(randomLocale(random())),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ITALIAN),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +            equalTo(ZonedDateTime.now().getYear() + "-06-12T00:00:00.000+02:00"));, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.ofHours(2)),, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC),, +            templatize(randomLocale(random())), "date_as_string", Collections.singletonList("UNIX_MS"), "date_as_date");, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC),, +            templatize(ZoneOffset.UTC), new TestTemplateService.MockTemplateScript.Factory("invalid_locale"),, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC);, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.time.Instant;, +                    indexSettingsBuilder.put(SETTING_CREATION_DATE, Instant.now().toEpochMilli());, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/DateProcessorTests.java, +import java.time.ZoneId;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +, +    private TemplateScript.Factory templatize(ZoneId timezone) {, +        // prevent writing "UTC" as string, as joda time does not parse it, +        String id = timezone.equals(ZoneOffset.UTC) ? "UTC" : timezone.getId();, +        return new TestTemplateService.MockTemplateScript.Factory(id);, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +                templatize(ZoneOffset.UTC), templatize(randomLocale(random())),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ITALIAN),, +            templatize(ZoneId.of("Europe/Amsterdam")), templatize(Locale.ENGLISH),, +            equalTo(ZonedDateTime.now().getYear() + "-06-12T00:00:00.000+02:00"));, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.ofHours(2)),, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC),, +            templatize(randomLocale(random())), "date_as_string", Collections.singletonList("UNIX_MS"), "date_as_date");, +        DateProcessor dateProcessor = new DateProcessor(randomAlphaOfLength(10), templatize(ZoneOffset.UTC),, +            templatize(ZoneOffset.UTC), new TestTemplateService.MockTemplateScript.Factory("invalid_locale"),, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC);, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.time.Instant;]