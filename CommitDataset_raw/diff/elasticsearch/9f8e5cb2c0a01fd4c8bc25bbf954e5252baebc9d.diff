[+++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/scroll/SearchScrollTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.integration.search.scroll;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.sort.SortOrder;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.testng.annotations.AfterClass;, +import org.testng.annotations.BeforeClass;, +import org.testng.annotations.Test;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.*;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.Matchers.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class SearchScrollTests extends AbstractNodesTests {, +, +    private Client client;, +, +    @BeforeClass public void createNodes() throws Exception {, +        startNode("node1");, +        startNode("node2");, +        client = getClient();, +    }, +, +    @AfterClass public void closeNodes() {, +        client.close();, +        closeAllNodes();, +    }, +, +    protected Client getClient() {, +        return client("node1");, +    }, +, +    @Test public void testSimpleScrollQueryThenFetch() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +        client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 3)).execute().actionGet();, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +        for (int i = 0; i < 100; i++) {, +            client.prepareIndex("test", "type1", Integer.toString(i)).setSource(jsonBuilder().startObject().field("field", i).endObject()).execute().actionGet();, +        }, +, +        client.admin().indices().prepareRefresh().execute().actionGet();, +, +        SearchResponse searchResponse = client.prepareSearch(), +                .setQuery(matchAllQuery()), +                .setSize(35), +                .setScroll(TimeValue.timeValueMinutes(2)), +                .addSort("field", SortOrder.ASC), +                .execute().actionGet();, +, +        long counter = 0;, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(100l));, +        assertThat(searchResponse.hits().hits().length, equalTo(35));, +        for (SearchHit hit : searchResponse.hits()) {, +            assertThat(((Number) hit.sortValues()[0]).longValue(), equalTo(counter++));, +        }, +, +        searchResponse = client.prepareSearchScroll(searchResponse.scrollId()), +                .setScroll(TimeValue.timeValueMinutes(2)), +                .execute().actionGet();, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(100l));, +        assertThat(searchResponse.hits().hits().length, equalTo(35));, +        for (SearchHit hit : searchResponse.hits()) {, +            assertThat(((Number) hit.sortValues()[0]).longValue(), equalTo(counter++));]