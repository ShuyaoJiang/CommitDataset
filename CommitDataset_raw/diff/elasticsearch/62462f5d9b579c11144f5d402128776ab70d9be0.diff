[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            current.println("  - match: "), +            current.println("      \$body: "), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            current.println("  - match: "), +            current.println("      \$body: "), +++ b/docs/reference/ingest/ingest-node.asciidoc, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            current.println("  - match: "), +            current.println("      \$body: "), +++ b/docs/reference/ingest/ingest-node.asciidoc, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/parser/RestTestSuiteParseContext.java, +import java.io.IOException;, +import java.util.HashMap;, +import java.util.Map;, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            current.println("  - match: "), +            current.println("      \$body: "), +++ b/docs/reference/ingest/ingest-node.asciidoc, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/parser/RestTestSuiteParseContext.java, +import java.io.IOException;, +import java.util.HashMap;, +import java.util.Map;, +, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/section/MatchAssertion.java, +import org.elasticsearch.common.Nullable;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Objects;, +import java.util.TreeMap;, +import static org.junit.Assert.assertNotNull;, +        assertNotNull("field [" + getField() + "] is null", actualValue);, +        if (actualValue.getClass().equals(safeClass(expectedValue)) == false) {, +                assertThat("field [" + getField() + "] doesn't match the expected value",, +                        ((Number) actualValue).doubleValue(), equalTo(((Number) expectedValue).doubleValue()));, +        if (expectedValue.equals(actualValue) == false) {, +            FailureMessage message = new FailureMessage(getField());, +            message.compare(getField(), actualValue, expectedValue);, +            throw new AssertionError(message.message);, +        }, +    private static class FailureMessage {, +        private final StringBuilder message;, +        private int indent = 0;, +, +        private FailureMessage(String field) {, +            this.message = new StringBuilder(field + " didn't match the expected value:\n");, +        }, +, +        private void compareMaps(Map<String, Object> actual, Map<String, Object> expected) {, +            actual = new TreeMap<>(actual);, +            expected = new TreeMap<>(expected);, +            for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) {, +                compare(expectedEntry.getKey(), actual.remove(expectedEntry.getKey()), expectedEntry.getValue());, +            }, +            for (Map.Entry<String, Object> unmatchedEntry : actual.entrySet()) {, +                field(unmatchedEntry.getKey(), "unexpected but found [" + unmatchedEntry.getValue() + "]");, +            }, +        }, +, +        private void compareLists(List<Object> actual, List<Object> expected) {, +            int i = 0;, +            while (i < actual.size() && i < expected.size()) {, +                compare(Integer.toString(i), actual.get(i), expected.get(i));, +                i++;, +            }, +            if (actual.size() == expected.size()) {, +                return;, +            }, +            indent();, +            if (actual.size() < expected.size()) {, +                message.append("expected [").append(expected.size() - i).append("] more entries\n");, +                return;, +            }, +            message.append("received [").append(actual.size() - i).append("] more entries than expected\n");, +        }, +, +        private void compare(String field, @Nullable Object actual, Object expected) {, +            if (expected instanceof Map) {, +                if (actual == null) {, +                    field(field, "expected map but not found");, +                    return;, +                }, +                if (false == actual instanceof Map) {, +                    field(field, "expected map but found [" + actual + "]");, +                    return;, +                }, +                @SuppressWarnings("unchecked"), +                Map<String, Object> expectedMap = (Map<String, Object>) expected;, +                @SuppressWarnings("unchecked"), +                Map<String, Object> actualMap = (Map<String, Object>) actual;, +                if (expectedMap.isEmpty() && actualMap.isEmpty()) {, +                    field(field, "same [empty map]");, +                    return;, +                }, +                field(field, null);, +                indent += 1;, +                compareMaps(actualMap, expectedMap);, +                indent -= 1;]