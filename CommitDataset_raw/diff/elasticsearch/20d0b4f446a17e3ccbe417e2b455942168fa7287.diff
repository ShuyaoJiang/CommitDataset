[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    private final Map<String, List<String>> headers = new HashMap<>();, +        int numKeys = in.readVInt();, +        for (int i = 0; i < numKeys; i++) {, +            final String key = in.readString();, +            final int numValues = in.readVInt();, +            final ArrayList<String> values = new ArrayList<>(numValues);, +            for (int j = 0; j < numValues; j++) {, +                values.add(in.readString());, +            }, +            headers.put(key, values);, +        }, +    }, +, +    /**, +     * Adds a new header with the given key., +     * This method will replace existing header if a header with the same key already exists, +     */, +    public void addHeader(String key, String... value) {, +        this.headers.put(key, Arrays.asList(value));, +    }, +, +    /**, +     * Adds a new header with the given key., +     * This method will replace existing header if a header with the same key already exists, +     */, +    public void addHeader(String key, List<String> value) {, +        this.headers.put(key, value);, +    }, +, +, +    /**, +     * Returns a set of all header keys on this exception, +     */, +    public Set<String> getHeaderKeys() {, +        return headers.keySet();, +    }, +, +    /**, +     * Returns the list of header values for the given key or {@code null} if not header for the, +     * given key exists., +     */, +    public List<String> getHeader(String key) {, +        return headers.get(key);, +        out.writeVInt(headers.size());, +        for (Map.Entry<String, List<String>> entry : headers.entrySet()) {, +            out.writeString(entry.getKey());, +            out.writeVInt(entry.getValue().size());, +            for (String v : entry.getValue()) {, +                out.writeString(v);, +            }, +        }, +                ElasticsearchSecurityException.class,, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    private final Map<String, List<String>> headers = new HashMap<>();, +        int numKeys = in.readVInt();, +        for (int i = 0; i < numKeys; i++) {, +            final String key = in.readString();, +            final int numValues = in.readVInt();, +            final ArrayList<String> values = new ArrayList<>(numValues);, +            for (int j = 0; j < numValues; j++) {, +                values.add(in.readString());, +            }, +            headers.put(key, values);, +        }, +    }, +, +    /**, +     * Adds a new header with the given key., +     * This method will replace existing header if a header with the same key already exists, +     */, +    public void addHeader(String key, String... value) {, +        this.headers.put(key, Arrays.asList(value));, +    }, +, +    /**, +     * Adds a new header with the given key., +     * This method will replace existing header if a header with the same key already exists, +     */, +    public void addHeader(String key, List<String> value) {, +        this.headers.put(key, value);, +    }, +, +, +    /**, +     * Returns a set of all header keys on this exception, +     */, +    public Set<String> getHeaderKeys() {, +        return headers.keySet();, +    }, +, +    /**, +     * Returns the list of header values for the given key or {@code null} if not header for the, +     * given key exists., +     */, +    public List<String> getHeader(String key) {, +        return headers.get(key);]