[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +    public static final String PROPERTY_SUPPORT_STAGING_URLS = "es.plugins.staging";, +, +                    if (!Strings.isNullOrEmpty(System.getProperty(PROPERTY_SUPPORT_STAGING_URLS))) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +    public static final String PROPERTY_SUPPORT_STAGING_URLS = "es.plugins.staging";, +, +                    if (!Strings.isNullOrEmpty(System.getProperty(PROPERTY_SUPPORT_STAGING_URLS))) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerUnitTests.java, +import org.junit.After;, +    @After, +    public void cleanSystemProperty() {, +        System.clearProperty(PluginManager.PROPERTY_SUPPORT_STAGING_URLS);, +    }, +, +        boolean supportStagingUrls = randomBoolean();, +        if (supportStagingUrls) {, +            System.setProperty(PluginManager.PROPERTY_SUPPORT_STAGING_URLS, "true");, +        }, +        if (supportStagingUrls) {, +            String expectedStagingURL = String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/org/elasticsearch/plugin/%s/%s/%s-%s.zip",, +            assertThat(iterator.next(), is(new URL(expectedStagingURL)));, +, +        assertThat(iterator.hasNext(), is(false));, +        boolean supportStagingUrls = randomBoolean();, +        if (supportStagingUrls) {, +            System.setProperty(PluginManager.PROPERTY_SUPPORT_STAGING_URLS, "true");, +        }, +, +        if (supportStagingUrls) {, +            String expectedStagingUrl = String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/org/elasticsearch/plugin/%s/%s/%s-%s.zip",, +            assertThat(iterator.next(), is(new URL(expectedStagingUrl)));, +, +        assertThat(iterator.hasNext(), is(false));, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +    public static final String PROPERTY_SUPPORT_STAGING_URLS = "es.plugins.staging";, +, +                    if (!Strings.isNullOrEmpty(System.getProperty(PROPERTY_SUPPORT_STAGING_URLS))) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerUnitTests.java, +import org.junit.After;, +    @After, +    public void cleanSystemProperty() {, +        System.clearProperty(PluginManager.PROPERTY_SUPPORT_STAGING_URLS);, +    }, +, +        boolean supportStagingUrls = randomBoolean();, +        if (supportStagingUrls) {, +            System.setProperty(PluginManager.PROPERTY_SUPPORT_STAGING_URLS, "true");, +        }, +        if (supportStagingUrls) {, +            String expectedStagingURL = String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/org/elasticsearch/plugin/%s/%s/%s-%s.zip",, +            assertThat(iterator.next(), is(new URL(expectedStagingURL)));, +, +        assertThat(iterator.hasNext(), is(false));, +        boolean supportStagingUrls = randomBoolean();, +        if (supportStagingUrls) {, +            System.setProperty(PluginManager.PROPERTY_SUPPORT_STAGING_URLS, "true");, +        }, +, +        if (supportStagingUrls) {, +            String expectedStagingUrl = String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/org/elasticsearch/plugin/%s/%s/%s-%s.zip",, +            assertThat(iterator.next(), is(new URL(expectedStagingUrl)));, +, +        assertThat(iterator.hasNext(), is(false));, +++ b/dev-tools/prepare_release.py, +# Licensed to Elasticsearch under one or more contributor, +# license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright, +# ownership. Elasticsearch licenses this file to you under, +# the Apache License, Version 2.0 (the "License"); you may, +# not use this file except in compliance  with the License., +# You may obtain a copy of the License at, +#, +#     http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing,, +# software distributed under the License is distributed on, +# an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,, +# either express or implied. See the License for the specific, +# language governing permissions and limitations under the License., +, +# Prepare a release, +#, +# This script prepares a new release by creating two commits, +#, +# First commit: Update the Version.java to remove the snapshot bit, +# First commit: Remove the -SNAPSHOT suffix in all pom.xml files, +# Second commit: Update Documentation flags, +#, +# USAGE:, +#, +# python3 ./dev-tools/prepare-release.py, +#, +# Note: Ensure the script is run from the root directory, +#, +, +import fnmatch]