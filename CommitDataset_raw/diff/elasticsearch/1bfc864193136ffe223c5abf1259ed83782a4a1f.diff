[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +        searchRequest.indicesOptions(addIgnoreUnavailable(SearchRequest.DEFAULT_INDICES_OPTIONS));, +        client.search(searchRequest, ActionListener.wrap(searchResponse -> {, +            }, +        }, e -> { errorHandler.accept(mapAuthFailure(e, jobId, GetBucketsAction.NAME)); }));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +        searchRequest.indicesOptions(addIgnoreUnavailable(SearchRequest.DEFAULT_INDICES_OPTIONS));, +        client.search(searchRequest, ActionListener.wrap(searchResponse -> {, +            }, +        }, e -> { errorHandler.accept(mapAuthFailure(e, jobId, GetBucketsAction.NAME)); }));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobRenormalizedResultsPersister.java, +    /**, +     * Execute bulk requests when they reach this size, +     */, +    private static final int BULK_LIMIT = 10000;, +, +    private final String jobId;, +    public JobRenormalizedResultsPersister(String jobId, Settings settings, Client client) {, +        this.jobId = jobId;, +        if (bulkRequest.numberOfActions() >= BULK_LIMIT) {, +            executeRequest();, +        }, +    public void executeRequest() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +        searchRequest.indicesOptions(addIgnoreUnavailable(SearchRequest.DEFAULT_INDICES_OPTIONS));, +        client.search(searchRequest, ActionListener.wrap(searchResponse -> {, +            }, +        }, e -> { errorHandler.accept(mapAuthFailure(e, jobId, GetBucketsAction.NAME)); }));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobRenormalizedResultsPersister.java, +    /**, +     * Execute bulk requests when they reach this size, +     */, +    private static final int BULK_LIMIT = 10000;, +, +    private final String jobId;, +    public JobRenormalizedResultsPersister(String jobId, Settings settings, Client client) {, +        this.jobId = jobId;, +        if (bulkRequest.numberOfActions() >= BULK_LIMIT) {, +            executeRequest();, +        }, +    public void executeRequest() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +        searchRequest.indicesOptions(addIgnoreUnavailable(SearchRequest.DEFAULT_INDICES_OPTIONS));, +        client.search(searchRequest, ActionListener.wrap(searchResponse -> {, +            }, +        }, e -> { errorHandler.accept(mapAuthFailure(e, jobId, GetBucketsAction.NAME)); }));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobRenormalizedResultsPersister.java, +    /**, +     * Execute bulk requests when they reach this size, +     */, +    private static final int BULK_LIMIT = 10000;, +, +    private final String jobId;, +    public JobRenormalizedResultsPersister(String jobId, Settings settings, Client client) {, +        this.jobId = jobId;, +        if (bulkRequest.numberOfActions() >= BULK_LIMIT) {, +            executeRequest();, +        }, +    public void executeRequest() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +        ScoresUpdater scoresUpdater = new ScoresUpdater(job, jobProvider,, +                new JobRenormalizedResultsPersister(job.getId(), settings, client), normalizerFactory);, +            autoDetectExecutorService.submit(() -> processor.process(process));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +        searchRequest.indicesOptions(addIgnoreUnavailable(SearchRequest.DEFAULT_INDICES_OPTIONS));, +        client.search(searchRequest, ActionListener.wrap(searchResponse -> {, +            }, +        }, e -> { errorHandler.accept(mapAuthFailure(e, jobId, GetBucketsAction.NAME)); }));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobRenormalizedResultsPersister.java, +    /**, +     * Execute bulk requests when they reach this size, +     */, +    private static final int BULK_LIMIT = 10000;, +, +    private final String jobId;, +    public JobRenormalizedResultsPersister(String jobId, Settings settings, Client client) {, +        this.jobId = jobId;, +        if (bulkRequest.numberOfActions() >= BULK_LIMIT) {, +            executeRequest();, +        }, +    public void executeRequest() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +        ScoresUpdater scoresUpdater = new ScoresUpdater(job, jobProvider,, +                new JobRenormalizedResultsPersister(job.getId(), settings, client), normalizerFactory);]