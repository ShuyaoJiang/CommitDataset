[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/search/fetch/version/VersionFetchSubPhase.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.index.mapper.Uid;, +import org.elasticsearch.index.mapper.UidFieldMapper;, +        // it might make sense to cache the TermDocs on a shared fetch context and just skip here), +        // it is going to mean we work on the high level multi reader and not the lower level reader as is, +        // the case below..., +        final long version;, +            BytesRef uid = Uid.createUidAsBytes(hitContext.hit().type(), hitContext.hit().id());, +            version = Versions.loadVersion(, +                    hitContext.readerContext().reader(),, +                    new Term(UidFieldMapper.NAME, uid), +            );, +            throw new ElasticsearchException("Could not query index for _version", e);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/search/fetch/version/VersionFetchSubPhase.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.index.mapper.Uid;, +import org.elasticsearch.index.mapper.UidFieldMapper;, +        // it might make sense to cache the TermDocs on a shared fetch context and just skip here), +        // it is going to mean we work on the high level multi reader and not the lower level reader as is, +        // the case below..., +        final long version;, +            BytesRef uid = Uid.createUidAsBytes(hitContext.hit().type(), hitContext.hit().id());, +            version = Versions.loadVersion(, +                    hitContext.readerContext().reader(),, +                    new Term(UidFieldMapper.NAME, uid), +            );, +            throw new ElasticsearchException("Could not query index for _version", e);, +++ b/modules/rank-eval/build.gradle, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +esplugin {, +  description 'The Rank Eval module adds APIs to evaluate ranking quality.', +  classname 'org.elasticsearch.index.rankeval.RankEvalPlugin', +}, +, +integTest {, +  cluster {, +    setting 'script.inline', 'true', +    setting 'script.stored', 'true', +  }, +}, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/search/fetch/version/VersionFetchSubPhase.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.index.mapper.Uid;, +import org.elasticsearch.index.mapper.UidFieldMapper;, +        // it might make sense to cache the TermDocs on a shared fetch context and just skip here), +        // it is going to mean we work on the high level multi reader and not the lower level reader as is, +        // the case below..., +        final long version;, +            BytesRef uid = Uid.createUidAsBytes(hitContext.hit().type(), hitContext.hit().id());, +            version = Versions.loadVersion(, +                    hitContext.readerContext().reader(),, +                    new Term(UidFieldMapper.NAME, uid), +            );, +            throw new ElasticsearchException("Could not query index for _version", e);, +++ b/modules/rank-eval/build.gradle, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the]