[+++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +import org.gradle.api.GradleException, +import java.util.concurrent.atomic.AtomicBoolean, +, +    static private AtomicBoolean sanityCheckConfigured = new AtomicBoolean(false), +, +        if (sanityCheckConfigured.getAndSet(true) == false) {, +                List<Task> nonConforming = project.getGradle().getTaskGraph().allTasks, +                        .findAll { it.name == "test" }, +                        .findAll { (it instanceof RandomizedTestingTask) == false}, +                        .collect { "${it.path} -> ${it.class}" }, +                if (nonConforming.isEmpty() == false) {, +                    throw new GradleException("Found the ${nonConforming.size()} `test` tasks:" +, +                            "\n  ${nonConforming.join("\n  ")}"), +                }, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +import org.gradle.api.GradleException, +import java.util.concurrent.atomic.AtomicBoolean, +, +    static private AtomicBoolean sanityCheckConfigured = new AtomicBoolean(false), +, +        if (sanityCheckConfigured.getAndSet(true) == false) {, +                List<Task> nonConforming = project.getGradle().getTaskGraph().allTasks, +                        .findAll { it.name == "test" }, +                        .findAll { (it instanceof RandomizedTestingTask) == false}, +                        .collect { "${it.path} -> ${it.class}" }, +                if (nonConforming.isEmpty() == false) {, +                    throw new GradleException("Found the ${nonConforming.size()} `test` tasks:" +, +                            "\n  ${nonConforming.join("\n  ")}"), +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            //TODO: remove this once the cname is prepended to the address by default in 7.0, +            systemProperty 'es.http.cname_in_publish_address', 'true', +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +import org.gradle.api.GradleException, +import java.util.concurrent.atomic.AtomicBoolean, +, +    static private AtomicBoolean sanityCheckConfigured = new AtomicBoolean(false), +, +        if (sanityCheckConfigured.getAndSet(true) == false) {, +                List<Task> nonConforming = project.getGradle().getTaskGraph().allTasks, +                        .findAll { it.name == "test" }, +                        .findAll { (it instanceof RandomizedTestingTask) == false}, +                        .collect { "${it.path} -> ${it.class}" }, +                if (nonConforming.isEmpty() == false) {, +                    throw new GradleException("Found the ${nonConforming.size()} `test` tasks:" +, +                            "\n  ${nonConforming.join("\n  ")}"), +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            //TODO: remove this once the cname is prepended to the address by default in 7.0, +            systemProperty 'es.http.cname_in_publish_address', 'true', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.gradle.precommit, +, +import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin, +import org.elasticsearch.gradle.LoggedExec, +import org.gradle.api.file.FileCollection, +import org.gradle.api.tasks.Classpath, +import org.gradle.api.tasks.OutputFile, +/**, + * Runs CheckJarHell on a classpath., + */, +public class JarHellTask extends LoggedExec {, +, +    /**, +     * We use a simple "marker" file that we touch when the task succeeds, +     * as the task output. This is compared against the modified time of the]