[+++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +import org.elasticsearch.action.search.*;, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .addMapping("test", "name", "type=string,term_vector=with_positions_offsets,store=" + (randomBoolean() ? "yes" : "no")), +                .setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", between(1, 5))));, +            .setSource("name", builder.toString()), +            .get();, +        SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name", "abc"))).addHighlightedField("name").get();, +        assertAcked(prepareCreate("test"), +                        .putArray("analysis.analyzer.search_autocomplete.filter", "lowercase", "wordDelimiter")));, +        ensureYellow();, +            .setSource("name", "ARCOTEL Hotels Deutschland").get();, +        refresh();, +        assertAcked(prepareCreate("test"), +                .addMapping("test", "body", "type=string,index_analyzer=custom_analyzer,search_analyzer=custom_analyzer,term_vector=with_positions_offsets"), +                .setSettings(, +            .setSource("body", "Test: http://www.facebook.com http://elasticsearch.org http://xing.com http://cnn.com http://quora.com http://twitter.com this is a test for highlighting feature Test: http://www.facebook.com http://elasticsearch.org http://xing.com http://cnn.com http://quora.com http://twitter.com this is a test for highlighting feature"), +            .get();, +, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .addMapping("test",, +                        "name", "type=string,index_analyzer=name_index_analyzer,search_analyzer=name_search_analyzer," + randomStoreField() + "term_vector=with_positions_offsets",, +                        "name2", "type=string,index_analyzer=name2_index_analyzer,search_analyzer=name_search_analyzer," + randomStoreField() + "term_vector=with_positions_offsets"), +                        .put("analysis.analyzer.name_search_analyzer.filter", "lowercase")));, +            .setSource("name", "logicacmg ehemals avinci - the know how company",, +                    "name2", "logicacmg ehemals avinci - the know how company").get();, +            .setSource("name", "avinci, unilog avinci, logicacmg, logica",, +                    "name2", "avinci, unilog avinci, logicacmg, logica").get();, +        SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name", "logica m"))).addHighlightedField("name").get();, +        search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name", "logica ma"))).addHighlightedField("name").get();, +        search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name", "logica"))).addHighlightedField("name").get();, +        search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name2", "logica m"))).addHighlightedField("name2").get();, +        search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name2", "logica ma"))).addHighlightedField("name2").get();, +        search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name2", "logica"))).addHighlightedField("name2").get();, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .addMapping("test",, +                        "name", "type=string,index_analyzer=name_index_analyzer,search_analyzer=name_search_analyzer,term_vector=with_positions_offsets",, +                        "name2", "type=string,index_analyzer=name2_index_analyzer,search_analyzer=name_search_analyzer,term_vector=with_positions_offsets"), +                        .put("analysis.analyzer.name_search_analyzer.tokenizer", "whitespace")));, +            .setSource("name", "logicacmg ehemals avinci - the know how company",, +                       "name2", "logicacmg ehemals avinci - the know how company").get();, +        SearchResponse search = client().prepareSearch().setQuery(matchQuery("name", "logica m")).addHighlightedField("name").get();, +        search = client().prepareSearch().setQuery(matchQuery("name", "logica ma")).addHighlightedField("name").get();, +        search = client().prepareSearch().setQuery(matchQuery("name", "logica")).addHighlightedField("name").get();, +        search = client().prepareSearch().setQuery(matchQuery("name2", "logica m")).addHighlightedField("name2").get();, +        search = client().prepareSearch().setQuery(matchQuery("name2", "logica ma")).addHighlightedField("name2").get();, +        search = client().prepareSearch().setQuery(matchQuery("name2", "logica")).addHighlightedField("name2").get();, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 2)), +                .addMapping("type1",, +                        "no_long_term", "type=string,term_vector=with_positions_offsets",, +                        "long_term", "type=string,term_vector=with_positions_offsets"));, +        ensureYellow();, +                .setSource("no_long_term", "This is a test where foo is highlighed and should be highlighted",, +                        "long_term", "This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted"), +                .get();, +        refresh();, +                .get();, +        assertHighlight(search, 0, "long_term", 0, 1, equalTo("<em>thisisaverylongwordandmakessurethisfails</em>"));, +                .get();, +        assertNotHighlighted(search, 0, "no_long_term");, +                .get();, +        assertHighlight(search, 0, "no_long_term", 0, 1, equalTo("a <b>test</b> where <b>foo</b> is <b>highlighed</b> and"));, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 2)), +                        .endObject().endObject().endObject()));, +        ensureYellow();, +        IndexRequestBuilder[] indexRequestBuilders = new IndexRequestBuilder[5];, +        for (int i = 0; i < indexRequestBuilders.length; i++) {, +            indexRequestBuilders[i] = client().prepareIndex("test", "type1", Integer.toString(i)), +                            .endObject());, +        indexRandom(true, indexRequestBuilders);, +                .get();, +        for (int i = 0; i < indexRequestBuilders.length; i++) {, +            assertHighlight(search, i, "title", 0, equalTo("This is a test on the highlighting <em>bug</em> present in elasticsearch"));, +                .get();, +        for (int i = 0; i < indexRequestBuilders.length; i++) {, +            assertHighlight(search, i, "attachments.body", 0, equalTo("<em>attachment</em> 1"));, +            assertHighlight(search, i, "attachments.body", 1, equalTo("<em>attachment</em> 2"));, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 2)), +                        .endObject().endObject().endObject()));, +        ensureYellow();, +        IndexRequestBuilder[] indexRequestBuilders = new IndexRequestBuilder[5];, +        for (int i = 0; i < indexRequestBuilders.length; i++) {, +            indexRequestBuilders[i] = client().prepareIndex("test", "type1", Integer.toString(i)), +                            .endObject());, +        indexRandom(true, indexRequestBuilders);, +                .get();, +        for (int i = 0; i < indexRequestBuilders.length; i++) {, +            assertHighlight(search, i, "title", 0, equalTo("This is a test on the highlighting <em>bug</em> present in elasticsearch"));, +                .execute().get();, +        for (int i = 0; i < 5; i++) {, +            assertHighlight(search, i, "attachments.body", 0, equalTo("<em>attachment</em> 1"));, +            assertHighlight(search, i, "attachments.body", 1, equalTo("<em>attachment</em> 2"));, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 2)), +                        .endObject().endObject().endObject()));, +        ensureYellow();, +        IndexRequestBuilder[] indexRequestBuilders = new IndexRequestBuilder[5];, +        for (int i = 0; i < indexRequestBuilders.length; i++) {, +            indexRequestBuilders[i] = client().prepareIndex("test", "type1", Integer.toString(i)), +                            .endObject());, +        indexRandom(true, indexRequestBuilders);]