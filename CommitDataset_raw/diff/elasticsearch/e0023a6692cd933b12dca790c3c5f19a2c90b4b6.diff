[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' at, +# the root directory of all plugins., +#   <arbitrary name1>.jar <-- classes, resources, dependencies, +#   <arbitrary nameN>.jar <-- any number of jars, +#   plugin-descriptor.properties <-- example contents below:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' at, +# the root directory of all plugins., +#   <arbitrary name1>.jar <-- classes, resources, dependencies, +#   <arbitrary nameN>.jar <-- any number of jars, +#   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +            final Map<String, MappingMetaData> mappings = new HashMap<>();, +                        mappings.put(index, new MappingMetaData(mergedMapper));, +                    mappings.put(index, new MappingMetaData(mergedMapper));, +            }, +            if (mappings.isEmpty()) {, +                // no changes, return, +                return currentState;, +            }, +            MetaData.Builder builder = MetaData.builder(currentState.metaData());, +            for (String indexName : request.indices()) {, +                IndexMetaData indexMetaData = currentState.metaData().index(indexName);, +                    throw new IndexNotFoundException(indexName);, +                MappingMetaData mappingMd = mappings.get(indexName);, +                if (mappingMd != null) {, +                    builder.put(IndexMetaData.builder(indexMetaData).putMapping(mappingMd));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' at, +# the root directory of all plugins., +#   <arbitrary name1>.jar <-- classes, resources, dependencies, +#   <arbitrary nameN>.jar <-- any number of jars, +#   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +            final Map<String, MappingMetaData> mappings = new HashMap<>();, +                        mappings.put(index, new MappingMetaData(mergedMapper));, +                    mappings.put(index, new MappingMetaData(mergedMapper));, +            }, +            if (mappings.isEmpty()) {, +                // no changes, return, +                return currentState;, +            }, +            MetaData.Builder builder = MetaData.builder(currentState.metaData());, +            for (String indexName : request.indices()) {, +                IndexMetaData indexMetaData = currentState.metaData().index(indexName);, +                    throw new IndexNotFoundException(indexName);, +                MappingMetaData mappingMd = mappings.get(indexName);, +                if (mappingMd != null) {, +                    builder.put(IndexMetaData.builder(indexMetaData).putMapping(mappingMd));, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +    private Path unzip(Path zip, Path pluginsDir) throws IOException {, +                Path targetFile = target.resolve(entry.getName());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' at, +# the root directory of all plugins., +#   <arbitrary name1>.jar <-- classes, resources, dependencies, +#   <arbitrary nameN>.jar <-- any number of jars, +#   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +            final Map<String, MappingMetaData> mappings = new HashMap<>();, +                        mappings.put(index, new MappingMetaData(mergedMapper));, +                    mappings.put(index, new MappingMetaData(mergedMapper));, +            }, +            if (mappings.isEmpty()) {, +                // no changes, return, +                return currentState;, +            }, +            MetaData.Builder builder = MetaData.builder(currentState.metaData());, +            for (String indexName : request.indices()) {, +                IndexMetaData indexMetaData = currentState.metaData().index(indexName);, +                    throw new IndexNotFoundException(indexName);, +                MappingMetaData mappingMd = mappings.get(indexName);, +                if (mappingMd != null) {, +                    builder.put(IndexMetaData.builder(indexMetaData).putMapping(mappingMd));, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +    private Path unzip(Path zip, Path pluginsDir) throws IOException {, +                Path targetFile = target.resolve(entry.getName());, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' at, +# the root directory of all plugins., +#   <arbitrary name1>.jar <-- classes, resources, dependencies, +#   <arbitrary nameN>.jar <-- any number of jars, +#   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +            final Map<String, MappingMetaData> mappings = new HashMap<>();, +                        mappings.put(index, new MappingMetaData(mergedMapper));, +                    mappings.put(index, new MappingMetaData(mergedMapper));, +            }, +            if (mappings.isEmpty()) {, +                // no changes, return, +                return currentState;, +            }]