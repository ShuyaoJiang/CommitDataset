[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TransportTermsAction.java, +                    indexFieldName = fieldMapper.names().indexName();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TransportTermsAction.java, +                    indexFieldName = fieldMapper.names().indexName();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +    private final ImmutableMap<String, NamedAnalyzer> analyzers;, +        Map<String, NamedAnalyzer> analyzers = newHashMap();, +            analyzers.put(analyzerFactory.name(), new NamedAnalyzer(analyzerFactory.name(), analyzerFactory.get()));, +    public NamedAnalyzer analyzer(String name) {, +    public NamedAnalyzer defaultAnalyzer() {, +    public NamedAnalyzer defaultIndexAnalyzer() {, +    public NamedAnalyzer defaultSearchAnalyzer() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TransportTermsAction.java, +                    indexFieldName = fieldMapper.names().indexName();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +    private final ImmutableMap<String, NamedAnalyzer> analyzers;, +        Map<String, NamedAnalyzer> analyzers = newHashMap();, +            analyzers.put(analyzerFactory.name(), new NamedAnalyzer(analyzerFactory.name(), analyzerFactory.get()));, +    public NamedAnalyzer analyzer(String name) {, +    public NamedAnalyzer defaultAnalyzer() {, +    public NamedAnalyzer defaultIndexAnalyzer() {, +    public NamedAnalyzer defaultSearchAnalyzer() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/NamedAnalyzer.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.analysis;, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.document.Fieldable;, +import org.elasticsearch.util.concurrent.Immutable;, +, +import java.io.IOException;, +import java.io.Reader;, +, +/**, + * Named analyzer is an analyzer wrapper around an actual analyzer ({@link #analyzer} that is associated, + * with a name ({@link #name()}., + *, + * @author kimchy (shay.banon), + */, +@Immutable, +public class NamedAnalyzer extends Analyzer {, +, +    private final String name;, +, +    private final Analyzer analyzer;, +, +    public NamedAnalyzer(String name, Analyzer analyzer) {, +        this.name = name;, +        this.analyzer = analyzer;, +    }, +, +    /**, +     * The name of the analyzer., +     */, +    public String name() {, +        return this.name;, +    }, +, +    /**, +     * The actual analyzer., +     */, +    public Analyzer analyzer() {, +        return this.analyzer;, +    }, +, +    @Override public TokenStream tokenStream(String fieldName, Reader reader) {, +        return analyzer.tokenStream(fieldName, reader);, +    }, +, +    @Override public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {, +        return analyzer.reusableTokenStream(fieldName, reader);, +    }, +, +    @Override public int getPositionIncrementGap(String fieldName) {, +        return analyzer.getPositionIncrementGap(fieldName);, +    }, +, +    @Override public int getOffsetGap(Fieldable field) {, +        return analyzer.getOffsetGap(field);, +    }, +]