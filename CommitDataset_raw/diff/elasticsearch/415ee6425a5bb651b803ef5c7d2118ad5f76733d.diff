[+++ b/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +    private Boolean ignoreUnampped;, +, +    /**, +     * Sets if the field does not exists in the index, it should be ignored and not sorted by or not. Defaults, +     * to <tt>false</tt> (not ignoring)., +     */, +    public FieldSortBuilder ignoreUnmapped(boolean ignoreUnmapped) {, +        this.ignoreUnampped = ignoreUnmapped;, +        return this;, +    }, +, +        if (ignoreUnampped != null) {, +            builder.field("ignore_unmapped", ignoreUnampped);, +        }, +++ b/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +    private Boolean ignoreUnampped;, +, +    /**, +     * Sets if the field does not exists in the index, it should be ignored and not sorted by or not. Defaults, +     * to <tt>false</tt> (not ignoring)., +     */, +    public FieldSortBuilder ignoreUnmapped(boolean ignoreUnmapped) {, +        this.ignoreUnampped = ignoreUnmapped;, +        return this;, +    }, +, +        if (ignoreUnampped != null) {, +            builder.field("ignore_unmapped", ignoreUnampped);, +        }, +++ b/src/main/java/org/elasticsearch/search/sort/SortParseElement.java, +                    addSortField(context, sortFields, parser.text(), false, false, null);, +                boolean ignoreUnmapped = false;, +                    addSortField(context, sortFields, fieldName, reverse, ignoreUnmapped, missing);, +                                } else if ("ignore_unmapped".equals(innerJsonName) || "ignoreUnmapped".equals(innerJsonName)) {, +                                    ignoreUnmapped = parser.booleanValue();, +                        addSortField(context, sortFields, fieldName, reverse, ignoreUnmapped, missing);, +    private void addSortField(SearchContext context, List<SortField> sortFields, String fieldName, boolean reverse, boolean ignoreUnmapped, @Nullable final String missing) {, +                if (ignoreUnmapped) {, +                    return;, +                }, +++ b/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +    private Boolean ignoreUnampped;, +, +    /**, +     * Sets if the field does not exists in the index, it should be ignored and not sorted by or not. Defaults, +     * to <tt>false</tt> (not ignoring)., +     */, +    public FieldSortBuilder ignoreUnmapped(boolean ignoreUnmapped) {, +        this.ignoreUnampped = ignoreUnmapped;, +        return this;, +    }, +, +        if (ignoreUnampped != null) {, +            builder.field("ignore_unmapped", ignoreUnampped);, +        }, +++ b/src/main/java/org/elasticsearch/search/sort/SortParseElement.java, +                    addSortField(context, sortFields, parser.text(), false, false, null);, +                boolean ignoreUnmapped = false;, +                    addSortField(context, sortFields, fieldName, reverse, ignoreUnmapped, missing);, +                                } else if ("ignore_unmapped".equals(innerJsonName) || "ignoreUnmapped".equals(innerJsonName)) {, +                                    ignoreUnmapped = parser.booleanValue();, +                        addSortField(context, sortFields, fieldName, reverse, ignoreUnmapped, missing);, +    private void addSortField(SearchContext context, List<SortField> sortFields, String fieldName, boolean reverse, boolean ignoreUnmapped, @Nullable final String missing) {, +                if (ignoreUnmapped) {, +                    return;, +                }, +++ b/src/test/java/org/elasticsearch/test/integration/search/sort/SimpleSortTests.java, +import org.elasticsearch.action.search.SearchPhaseExecutionException;, +, +    @Test, +    public void testIgnoreUnmapped() throws Exception {, +        client.admin().indices().prepareDelete().execute().actionGet();, +, +        client.prepareIndex("test", "type1", "1").setSource(jsonBuilder().startObject(), +                .field("id", "1"), +                .field("i_value", -1), +                .field("d_value", -1.1), +                .endObject()).execute().actionGet();, +, +        client.admin().cluster().prepareHealth().setWaitForYellowStatus().execute().actionGet();, +, +        logger.info("--> sort with an unmapped field, verify it fails");, +        try {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setQuery(matchAllQuery()), +                    .addSort(SortBuilders.fieldSort("kkk")), +                    .execute().actionGet();, +            assert false;, +        } catch (SearchPhaseExecutionException e) {, +, +        }, +, +        SearchResponse searchResponse = client.prepareSearch(), +                .setQuery(matchAllQuery()), +                .addSort(SortBuilders.fieldSort("kkk").ignoreUnmapped(true)), +                .execute().actionGet();, +, +        assertThat(searchResponse.failedShards(), equalTo(0));, +    }]