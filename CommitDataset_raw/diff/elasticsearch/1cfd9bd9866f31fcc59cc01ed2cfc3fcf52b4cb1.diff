[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +, +        if (transportClientMode) {, +            return modules;, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +, +        if (transportClientMode) {, +            return modules;, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +import org.apache.lucene.util.Counter;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.xpack.ml.action.GetDatafeedsStatsAction;, +import org.elasticsearch.xpack.ml.action.GetJobsStatsAction;, +import org.elasticsearch.xpack.ml.datafeed.DatafeedState;, +import org.elasticsearch.xpack.ml.job.config.Job;, +import org.elasticsearch.xpack.ml.job.config.JobState;, +import org.elasticsearch.xpack.ml.job.process.autodetect.state.ModelSizeStats;, +import org.elasticsearch.xpack.ml.utils.StatsAccumulator;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.Locale;, +import java.util.Objects;, +    private final ClusterService clusterService;, +    private final Client client;, +    public MachineLearningFeatureSet(Settings settings, ClusterService clusterService, Client client,, +                                     @Nullable XPackLicenseState licenseState) {, +        this.clusterService = Objects.requireNonNull(clusterService);, +        this.client = Objects.requireNonNull(client);, +        ClusterState state = clusterService.state();, +        MlMetadata mlMetadata = state.getMetaData().custom(MlMetadata.TYPE);, +        new Usage.Retriever(client, mlMetadata, available(), enabled()).execute(listener);, +        private static final String ALL = "_all";, +        private static final String JOBS_FIELD = "jobs";, +        private static final String DATAFEEDS_FIELD = "datafeeds";, +        private static final String COUNT = "count";, +        private static final String DETECTORS = "detectors";, +        private static final String MODEL_SIZE = "model_size";, +, +        private final Map<String, Object> jobsUsage;, +        private final Map<String, Object> datafeedsUsage;, +, +        public Usage(boolean available, boolean enabled, Map<String, Object> jobsUsage,, +                       Map<String, Object> datafeedsUsage) {, +            super(XPackPlugin.MACHINE_LEARNING, available, enabled);, +            this.jobsUsage = Objects.requireNonNull(jobsUsage);, +            this.datafeedsUsage = Objects.requireNonNull(datafeedsUsage);, +        public Usage(StreamInput in) throws IOException {, +            super(in);, +            this.jobsUsage = in.readMap();, +            this.datafeedsUsage = in.readMap();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            out.writeMap(jobsUsage);, +            out.writeMap(datafeedsUsage);, +        }, +, +        @Override, +        protected void innerXContent(XContentBuilder builder, Params params) throws IOException {, +            super.innerXContent(builder, params);, +            if (jobsUsage != null) {, +                builder.field(JOBS_FIELD, jobsUsage);, +            }, +            if (datafeedsUsage != null) {, +                builder.field(DATAFEEDS_FIELD, datafeedsUsage);, +            }, +        }, +, +        public static class Retriever {, +, +            private final Client client;, +            private final MlMetadata mlMetadata;, +            private final boolean available;, +            private final boolean enabled;, +            private Map<String, Object> jobsUsage;, +            private Map<String, Object> datafeedsUsage;, +, +            public Retriever(Client client, MlMetadata mlMetadata, boolean available, boolean enabled) {, +                this.client = Objects.requireNonNull(client);, +                this.mlMetadata = mlMetadata;, +                this.available = available;, +                this.enabled = enabled;, +                this.jobsUsage = new LinkedHashMap<>();, +                this.datafeedsUsage = new LinkedHashMap<>();, +            }, +, +            public void execute(ActionListener<XPackFeatureSet.Usage> listener) {, +                if (enabled == false) {, +                    listener.onResponse(new Usage(available, enabled, Collections.emptyMap(), Collections.emptyMap()));]