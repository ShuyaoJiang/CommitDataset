[+++ b/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import org.elasticsearch.common.Strings;, +    /**, +     * Constructs a new PluginService, +     * @param settings The settings of the system, +     * @param environment The environment of the system, +     */, +, +        //first we load all the default plugins from the settings, +        String[] defaultPluginsClasses = settings.getAsArray("plugin.types");, +        for (String pluginClass : defaultPluginsClasses) {, +            Plugin plugin = loadPlugin(pluginClass, settings);, +            plugins.put(plugin.name(), plugin);, +        }, +, +        // now, find all the ones that are in the classpath, +        loadPluginsIntoClassLoader();, +                throw new ElasticSearchException("Missing mandatory plugins [" + Strings.collectionToDelimitedString(missingPlugins, ", ") + "]");, +                String pluginClassName = pluginProps.getProperty("plugin");, +                Plugin plugin = loadPlugin(pluginClassName, settings);, +, +    private Plugin loadPlugin(String className, Settings settings) {, +        try {, +            Class<? extends Plugin> pluginClass = (Class<? extends Plugin>) settings.getClassLoader().loadClass(className);, +            try {, +                return pluginClass.getConstructor(Settings.class).newInstance(settings);, +            } catch (NoSuchMethodException e) {, +                try {, +                    return pluginClass.getConstructor().newInstance();, +                } catch (NoSuchMethodException e1) {, +                    throw new ElasticSearchException("No constructor for [" + pluginClass + "]. A plugin class must " +, +                            "have either an empty default constructor or a single argument constructor accepting a " +, +                            "Settings instance");, +                }, +            }, +, +        } catch (Exception e) {, +            throw new ElasticSearchException("Failed to load plugin class [" + className + "]", e);, +        }, +, +    }, +++ b/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import org.elasticsearch.common.Strings;, +    /**, +     * Constructs a new PluginService, +     * @param settings The settings of the system, +     * @param environment The environment of the system, +     */, +, +        //first we load all the default plugins from the settings, +        String[] defaultPluginsClasses = settings.getAsArray("plugin.types");, +        for (String pluginClass : defaultPluginsClasses) {, +            Plugin plugin = loadPlugin(pluginClass, settings);, +            plugins.put(plugin.name(), plugin);, +        }, +, +        // now, find all the ones that are in the classpath, +        loadPluginsIntoClassLoader();, +                throw new ElasticSearchException("Missing mandatory plugins [" + Strings.collectionToDelimitedString(missingPlugins, ", ") + "]");, +                String pluginClassName = pluginProps.getProperty("plugin");, +                Plugin plugin = loadPlugin(pluginClassName, settings);, +, +    private Plugin loadPlugin(String className, Settings settings) {, +        try {, +            Class<? extends Plugin> pluginClass = (Class<? extends Plugin>) settings.getClassLoader().loadClass(className);, +            try {, +                return pluginClass.getConstructor(Settings.class).newInstance(settings);, +            } catch (NoSuchMethodException e) {, +                try {, +                    return pluginClass.getConstructor().newInstance();, +                } catch (NoSuchMethodException e1) {, +                    throw new ElasticSearchException("No constructor for [" + pluginClass + "]. A plugin class must " +, +                            "have either an empty default constructor or a single argument constructor accepting a " +, +                            "Settings instance");, +                }, +            }, +, +        } catch (Exception e) {, +            throw new ElasticSearchException("Failed to load plugin class [" + className + "]", e);, +        }, +, +    }, +++ b/src/test/java/org/elasticsearch/test/integration/node/InternalNodeTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License.]