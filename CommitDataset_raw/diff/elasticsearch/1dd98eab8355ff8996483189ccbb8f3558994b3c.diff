[+++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/CliSecurityIT.java, +, +                String tablesOutput = cli.command("SHOW TABLES");, +                assertThat(tablesOutput, containsString("name"));, +                assertThat(tablesOutput, containsString("type"));, +                assertEquals("---------------+---------------", cli.readLine());, +                    String line = cli.readLine();, +                    if (!line.startsWith(".security")) {, +                        assertThat(line, containsString(table));, +                    }, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/CliSecurityIT.java, +, +                String tablesOutput = cli.command("SHOW TABLES");, +                assertThat(tablesOutput, containsString("name"));, +                assertThat(tablesOutput, containsString("type"));, +                assertEquals("---------------+---------------", cli.readLine());, +                    String line = cli.readLine();, +                    if (!line.startsWith(".security")) {, +                        assertThat(line, containsString(table));, +                    }, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcSecurityIT.java, +, +import java.util.ArrayList;, +            try (Connection es = es(userProperties(user))) {, +                ResultSet actual = es.createStatement().executeQuery("SHOW TABLES");, +                // depending on whether security is enabled and a test is run in isolation or suite, +                // .security or .security6 index can appear, +                // to filter these out, the result set is flatten to a list, +                List<String> actualList = new ArrayList<>();, +, +                while (actual.next()) {, +                    String name = actual.getString("name");, +                    if (!name.startsWith(".security")) {, +                        actualList.add(name);, +                    }, +                }, +, +                assertEquals(tables, actualList);, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/CliSecurityIT.java, +, +                String tablesOutput = cli.command("SHOW TABLES");, +                assertThat(tablesOutput, containsString("name"));, +                assertThat(tablesOutput, containsString("type"));, +                assertEquals("---------------+---------------", cli.readLine());, +                    String line = cli.readLine();, +                    if (!line.startsWith(".security")) {, +                        assertThat(line, containsString(table));, +                    }, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcSecurityIT.java, +, +import java.util.ArrayList;, +            try (Connection es = es(userProperties(user))) {, +                ResultSet actual = es.createStatement().executeQuery("SHOW TABLES");, +                // depending on whether security is enabled and a test is run in isolation or suite, +                // .security or .security6 index can appear, +                // to filter these out, the result set is flatten to a list, +                List<String> actualList = new ArrayList<>();, +, +                while (actual.next()) {, +                    String name = actual.getString("name");, +                    if (!name.startsWith(".security")) {, +                        actualList.add(name);, +                    }, +                }, +, +                assertEquals(tables, actualList);, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/RestSqlSecurityIT.java, +import java.util.stream.Collectors;, +            List<Object> columns = new ArrayList<>();, +            columns.add(columnInfo(mode, "name", "keyword", JDBCType.VARCHAR, 0));, +            columns.add(columnInfo(mode, "type", "keyword", JDBCType.VARCHAR, 0));, +            expected.put("columns", columns);, +                List<String> fields = new ArrayList<>();, +                fields.add(table);, +                fields.add("INDEX");, +                rows.add(fields);, +, +            Map<String, Object> actual = runSql(user, mode, "SHOW TABLES");, +            List<List<String>> rowsNoSecurity = ((List<List<String>>) actual.get("rows")), +                    .stream(), +                    .filter(ls -> ls.get(0).startsWith(".security") == false), +                    .collect(Collectors.toList());, +            actual.put("rows", rowsNoSecurity);, +            assertResponse(expected, actual);, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/CliSecurityIT.java, +, +                String tablesOutput = cli.command("SHOW TABLES");, +                assertThat(tablesOutput, containsString("name"));, +                assertThat(tablesOutput, containsString("type"));, +                assertEquals("---------------+---------------", cli.readLine());, +                    String line = cli.readLine();, +                    if (!line.startsWith(".security")) {, +                        assertThat(line, containsString(table));, +                    }, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcSecurityIT.java, +, +import java.util.ArrayList;, +            try (Connection es = es(userProperties(user))) {, +                ResultSet actual = es.createStatement().executeQuery("SHOW TABLES");, +                // depending on whether security is enabled and a test is run in isolation or suite]