[+++ b/build.gradle, +, +  task cleanIdeaBuildDir(type: Delete) {, +    delete 'build-idea', +  }, +  cleanIdeaBuildDir.setGroup("ide"), +  cleanIdeaBuildDir.setDescription("Deletes the IDEA build directory."), +, +  tasks.cleanIdea.dependsOn(cleanIdeaBuildDir), +++ b/build.gradle, +, +  task cleanIdeaBuildDir(type: Delete) {, +    delete 'build-idea', +  }, +  cleanIdeaBuildDir.setGroup("ide"), +  cleanIdeaBuildDir.setDescription("Deletes the IDEA build directory."), +, +  tasks.cleanIdea.dependsOn(cleanIdeaBuildDir), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/build.gradle, +, +  task cleanIdeaBuildDir(type: Delete) {, +    delete 'build-idea', +  }, +  cleanIdeaBuildDir.setGroup("ide"), +  cleanIdeaBuildDir.setDescription("Deletes the IDEA build directory."), +, +  tasks.cleanIdea.dependsOn(cleanIdeaBuildDir), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +++ b/build.gradle, +, +  task cleanIdeaBuildDir(type: Delete) {, +    delete 'build-idea', +  }, +  cleanIdeaBuildDir.setGroup("ide"), +  cleanIdeaBuildDir.setDescription("Deletes the IDEA build directory."), +, +  tasks.cleanIdea.dependsOn(cleanIdeaBuildDir), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +     * Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers, +     * are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers., +        i |= ((b & 0x7FL) << 56);, +        if ((b & 0x80) == 0) {, +            return i;, +        }, +        b = readByte();, +        if (b != 0 && b != 1) {, +            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i));, +        }, +        i |= ((long) b) << 63;, +        return i;, +++ b/build.gradle, +, +  task cleanIdeaBuildDir(type: Delete) {, +    delete 'build-idea', +  }, +  cleanIdeaBuildDir.setGroup("ide"), +  cleanIdeaBuildDir.setDescription("Deletes the IDEA build directory."), +, +  tasks.cleanIdea.dependsOn(cleanIdeaBuildDir), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +     * Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers, +     * are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers., +        i |= ((b & 0x7FL) << 56);, +        if ((b & 0x80) == 0) {, +            return i;, +        }, +        b = readByte();, +        if (b != 0 && b != 1) {, +            throw new IOException("Invalid vlong (" + Integer.toHexString(b) + " << 63) | " + Long.toHexString(i));, +        }, +        i |= ((long) b) << 63;, +        return i;, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +     * Writes a non-negative long in a variable-length format. Writes between one and ten bytes. Smaller values take fewer bytes. Negative, +     * numbers use ten bytes and trip assertions (if running in tests) so prefer {@link #writeLong(long)} or {@link #writeZLong(long)} for, +     * negative numbers., +        if (i < 0) {, +            throw new IllegalStateException("Negative longs unsupported, use writeLong or writeZLong for negative numbers [" + i + "]");, +        }, +        writeVLongNoCheck(i);, +    }, +]