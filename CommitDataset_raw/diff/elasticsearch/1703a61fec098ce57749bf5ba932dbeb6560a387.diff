[+++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        indexShardOperationPermits.asyncBlockOperations(new ActionListener<Releasable>() {, +            @Override, +            public void onFailure(final Exception e) {, +                try {, +                    failShard("exception during primary term transition", e);, +                } catch (AlreadyClosedException ace) {, +                    // ignore, shard is already closed, +                }, +            }, +, +            @Override, +            public void onResponse(final Releasable releasable) {, +                try (Releasable ignored = releasable) {, +                } catch (final Exception e) {, +                    onFailure(e);, +            }, +        }, 30, TimeUnit.MINUTES);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        indexShardOperationPermits.asyncBlockOperations(new ActionListener<Releasable>() {, +            @Override, +            public void onFailure(final Exception e) {, +                try {, +                    failShard("exception during primary term transition", e);, +                } catch (AlreadyClosedException ace) {, +                    // ignore, shard is already closed, +                }, +            }, +, +            @Override, +            public void onResponse(final Releasable releasable) {, +                try (Releasable ignored = releasable) {, +                } catch (final Exception e) {, +                    onFailure(e);, +            }, +        }, 30, TimeUnit.MINUTES);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShardOperationPermits.java, +        try (Releasable ignored = acquireAll(timeout, timeUnit)) {, +            onBlocked.run();, +     * Immediately delays operations and on another thread waits for in-flight operations to finish and then acquires all permits. When all, +     * permits are acquired, the provided {@link ActionListener} is called under the guarantee that no new operations are started. Delayed, +     * operations are run once the {@link Releasable} is released or if a failure occurs while acquiring all permits; in this case the, +     * {@code onFailure} handler will be invoked after delayed operations are released., +     * @param onAcquired {@link ActionListener} that is invoked once acquisition is successful or failed, +    public void asyncBlockOperations(final ActionListener<Releasable> onAcquired, final long timeout, final TimeUnit timeUnit)  {, +, +            final AtomicBoolean released = new AtomicBoolean(false);, +, +                try {, +                    releaseDelayedOperationsIfNeeded(); // resume delayed operations as soon as possible, +                } finally {, +                    onAcquired.onFailure(e);, +                }, +                final Releasable releasable = acquireAll(timeout, timeUnit);, +                onAcquired.onResponse(() -> {, +                    try {, +                        releasable.close();, +                    } finally {, +                        releaseDelayedOperationsIfNeeded();, +                    }, +                });, +            private void releaseDelayedOperationsIfNeeded() {, +                if (released.compareAndSet(false, true)) {, +            }, +    private Releasable acquireAll(final long timeout, final TimeUnit timeUnit) throws InterruptedException, TimeoutException {, +            final AtomicBoolean closed = new AtomicBoolean();, +            return () -> {, +                if (closed.compareAndSet(false, true)) {, +            };, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        indexShardOperationPermits.asyncBlockOperations(new ActionListener<Releasable>() {, +            @Override, +            public void onFailure(final Exception e) {, +                try {, +                    failShard("exception during primary term transition", e);, +                } catch (AlreadyClosedException ace) {, +                    // ignore, shard is already closed, +                }, +            }, +, +            @Override, +            public void onResponse(final Releasable releasable) {, +                try (Releasable ignored = releasable) {, +                } catch (final Exception e) {, +                    onFailure(e);, +            }, +        }, 30, TimeUnit.MINUTES);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShardOperationPermits.java, +        try (Releasable ignored = acquireAll(timeout, timeUnit)) {, +            onBlocked.run();, +     * Immediately delays operations and on another thread waits for in-flight operations to finish and then acquires all permits. When all, +     * permits are acquired, the provided {@link ActionListener} is called under the guarantee that no new operations are started. Delayed, +     * operations are run once the {@link Releasable} is released or if a failure occurs while acquiring all permits; in this case the, +     * {@code onFailure} handler will be invoked after delayed operations are released., +     * @param onAcquired {@link ActionListener} that is invoked once acquisition is successful or failed, +    public void asyncBlockOperations(final ActionListener<Releasable> onAcquired, final long timeout, final TimeUnit timeUnit)  {, +, +            final AtomicBoolean released = new AtomicBoolean(false);, +, +                try {]