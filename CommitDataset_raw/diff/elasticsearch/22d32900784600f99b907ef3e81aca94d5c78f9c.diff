[+++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfigurationTests.java, +import org.elasticsearch.xpack.sql.client.SslConfig;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.sql.DriverManager;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.stream.Collectors;, +    public void testSSLPropertiesInUrl() throws Exception {, +        Map<String, String> urlPropMap = sslProperties();, +        Properties allProps = new Properties();, +        allProps.putAll(urlPropMap);, +        String sslUrlProps = urlPropMap.entrySet().stream().map(e -> e.getKey() + "=" + e.getValue()).collect(Collectors.joining("&"));, +        , +        assertSslConfig(allProps, ci("jdbc:es://test?" + sslUrlProps.toString()).sslConfig());, +    }, +    , +    public void testSSLPropertiesInUrlAndProperties() throws Exception {, +        Map<String, String> urlPropMap = new HashMap<>(4);, +        urlPropMap.put("ssl", "false");, +        urlPropMap.put("ssl.protocol", "SSLv3");, +        urlPropMap.put("ssl.keystore.location", "/abc/xyz");, +        urlPropMap.put("ssl.keystore.pass", "mypass");, +        , +        Map<String, String> propMap = new HashMap<>(4);, +        propMap.put("ssl.keystore.type", "PKCS12");, +        propMap.put("ssl.truststore.location", "/foo/bar");, +        propMap.put("ssl.truststore.pass", "anotherpass");, +        propMap.put("ssl.truststore.type", "jks");, +        , +        Properties props = new Properties();, +        props.putAll(propMap);, +        String sslUrlProps = urlPropMap.entrySet().stream().map(e -> e.getKey() + "=" + e.getValue()).collect(Collectors.joining("&"));, +        , +        Properties allProps = new Properties();, +        allProps.putAll(urlPropMap);, +        allProps.putAll(propMap);, +        assertSslConfig(allProps, JdbcConfiguration.create("jdbc:es://test?" + sslUrlProps.toString(), props, 0).sslConfig());, +    }, +    , +    public void testSSLPropertiesOverride() throws Exception {, +        Map<String, String> urlPropMap = sslProperties();, +        Map<String, String> propMap = new HashMap<>(8);, +        propMap.put("ssl", "false");, +        propMap.put("ssl.protocol", "TLS");, +        propMap.put("ssl.keystore.location", "/xyz");, +        propMap.put("ssl.keystore.pass", "different_mypass");, +        propMap.put("ssl.keystore.type", "JKS");, +        propMap.put("ssl.truststore.location", "/baz");, +        propMap.put("ssl.truststore.pass", "different_anotherpass");, +        propMap.put("ssl.truststore.type", "PKCS11");, +        , +        Properties props = new Properties();, +        props.putAll(propMap);, +        String sslUrlProps = urlPropMap.entrySet().stream().map(e -> e.getKey() + "=" + e.getValue()).collect(Collectors.joining("&"));, +        assertSslConfig(props, JdbcConfiguration.create("jdbc:es://test?" + sslUrlProps.toString(), props, 0).sslConfig());, +    }, +    , +    public void testDriverConfigurationWithSSLInURL() {, +        Map<String, String> urlPropMap = sslProperties();, +        , +        Properties allProps = new Properties();, +        allProps.putAll(urlPropMap);, +        String sslUrlProps = urlPropMap.entrySet().stream().map(e -> e.getKey() + "=" + e.getValue()).collect(Collectors.joining("&"));, +        , +        try {, +            DriverManager.getDriver("jdbc:es://test?" + sslUrlProps);, +        } catch (SQLException sqle) {, +            fail("Driver registration should have been successful. Error: " + sqle);, +        }, +    }, +    , +    public void testDataSourceConfigurationWithSSLInURL() throws SQLException, URISyntaxException {, +        Map<String, String> urlPropMap = sslProperties();, +        , +        Properties allProps = new Properties();, +        allProps.putAll(urlPropMap);, +        String sslUrlProps = urlPropMap.entrySet().stream().map(e -> e.getKey() + "=" + e.getValue()).collect(Collectors.joining("&"));, +        , +        EsDataSource dataSource = new EsDataSource();, +        String address = "jdbc:es://test?" + sslUrlProps;, +        dataSource.setUrl(address);, +        JdbcConnection connection = null;, +        , +        try {, +            connection = (JdbcConnection) dataSource.getConnection();, +        } catch (SQLException sqle) {, +            fail("Connection creation should have been successful. Error: " + sqle);, +        }, +        , +        assertEquals(address, connection.getURL());, +        assertSslConfig(allProps, connection.cfg.sslConfig());, +    }, +    , +    public void testTyposInSslConfigInUrl(){, +        assertJdbcSqlExceptionFromUrl("ssl.protocl", "ssl.protocol");, +        assertJdbcSqlExceptionFromUrl("sssl", "ssl");, +        assertJdbcSqlExceptionFromUrl("ssl.keystore.lction", "ssl.keystore.location");]