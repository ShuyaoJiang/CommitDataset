[+++ /dev/null, +++ /dev/null, +++ b/dev-tools/prepare_release_create_release_version.py, +# Licensed to Elasticsearch under one or more contributor, +# license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright, +# ownership. Elasticsearch licenses this file to you under, +# the Apache License, Version 2.0 (the "License"); you may, +# not use this file except in compliance  with the License., +# You may obtain a copy of the License at, +#, +#     http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing,, +# software distributed under the License is distributed on, +# an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,, +# either express or implied. See the License for the specific, +# language governing permissions and limitations under the License., +, +# Prepare a release, +#, +# 1. Update the Version.java to remove the snapshot bit, +# 2. Remove the -SNAPSHOT suffix in all pom.xml files, +#, +# USAGE:, +#, +# python3 ./dev-tools/prepare-release.py, +#, +# Note: Ensure the script is run from the root directory, +#, +, +import fnmatch, +import subprocess, +import tempfile, +import re, +import os, +import shutil, +, +VERSION_FILE = 'core/src/main/java/org/elasticsearch/Version.java', +POM_FILE = 'pom.xml', +, +def run(command):, +  if os.system('%s' % (command)):, +    raise RuntimeError('    FAILED: %s' % (command)), +, +def ensure_checkout_is_clean():, +  # Make sure no local mods:, +  s = subprocess.check_output('git diff --shortstat', shell=True), +  if len(s) > 0:, +    raise RuntimeError('git diff --shortstat is non-empty: got:\n%s' % s), +, +  # Make sure no untracked files:, +  s = subprocess.check_output('git status', shell=True).decode('utf-8', errors='replace'), +  if 'Untracked files:' in s:, +    raise RuntimeError('git status shows untracked files: got:\n%s' % s), +, +  # Make sure we have all changes from origin:, +  if 'is behind' in s:, +    raise RuntimeError('git status shows not all changes pulled from origin; try running "git pull origin" in this branch: got:\n%s' % (s)), +, +  # Make sure we no local unpushed changes (this is supposed to be a clean area):, +  if 'is ahead' in s:, +    raise RuntimeError('git status shows local commits; try running "git fetch origin", "git checkout ", "git reset --hard origin/" in this branch: got:\n%s' % (s)), +, +# Reads the given file and applies the, +# callback to it. If the callback changed, +# a line the given file is replaced with, +# the modified input., +def process_file(file_path, line_callback):, +  fh, abs_path = tempfile.mkstemp(), +  modified = False, +  with open(abs_path,'w', encoding='utf-8') as new_file:, +    with open(file_path, encoding='utf-8') as old_file:, +      for line in old_file:, +        new_line = line_callback(line), +        modified = modified or (new_line != line), +        new_file.write(new_line), +  os.close(fh), +  if modified:, +    #Remove original file, +    os.remove(file_path), +    #Move new file, +    shutil.move(abs_path, file_path), +    return True, +  else:, +    # nothing to do - just remove the tmp file, +    os.remove(abs_path), +    return False, +, +# Moves the pom.xml file from a snapshot to a release, +def remove_maven_snapshot(poms, release):, +  for pom in poms:, +    if pom:, +      #print('Replacing SNAPSHOT version in file %s' % (pom)), +      pattern = '<version>%s-SNAPSHOT</version>' % (release), +      replacement = '<version>%s</version>' % (release), +      def callback(line):, +        return line.replace(pattern, replacement), +      process_file(pom, callback), +]