[+++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java, +            request.indices());, +++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java, +            request.indices());, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +                searchRequest.indices());, +++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java, +            request.indices());, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +                searchRequest.indices());, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/ClusterNameExpressionResolver.java, +import org.elasticsearch.transport.NoSuchRemoteClusterException;, +     * Resolves the provided cluster expression to matching cluster names. Supports exact or wildcard matches., +     * Throws {@link NoSuchRemoteClusterException} in case there are no registered remote clusters matching the provided expression., +     * @throws NoSuchRemoteClusterException if there are no remote clusters matching the provided expression, +            throw new NoSuchRemoteClusterException(clusterExpression);, +++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java, +            request.indices());, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +                searchRequest.indices());, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/ClusterNameExpressionResolver.java, +import org.elasticsearch.transport.NoSuchRemoteClusterException;, +     * Resolves the provided cluster expression to matching cluster names. Supports exact or wildcard matches., +     * Throws {@link NoSuchRemoteClusterException} in case there are no registered remote clusters matching the provided expression., +     * @throws NoSuchRemoteClusterException if there are no remote clusters matching the provided expression, +            throw new NoSuchRemoteClusterException(clusterExpression);, +++ b/server/src/main/java/org/elasticsearch/transport/NoSuchRemoteClusterException.java, +    public NoSuchRemoteClusterException(String clusterName) {, +++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java, +            request.indices());, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +                searchRequest.indices());, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/ClusterNameExpressionResolver.java, +import org.elasticsearch.transport.NoSuchRemoteClusterException;, +     * Resolves the provided cluster expression to matching cluster names. Supports exact or wildcard matches., +     * Throws {@link NoSuchRemoteClusterException} in case there are no registered remote clusters matching the provided expression., +     * @throws NoSuchRemoteClusterException if there are no remote clusters matching the provided expression, +            throw new NoSuchRemoteClusterException(clusterExpression);, +++ b/server/src/main/java/org/elasticsearch/transport/NoSuchRemoteClusterException.java, +    public NoSuchRemoteClusterException(String clusterName) {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +    protected Map<String, List<String>> groupClusterIndices(Set<String> remoteClusterNames, String[] requestIndices) {, +++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java, +            request.indices());, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +                searchRequest.indices());, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/ClusterNameExpressionResolver.java, +import org.elasticsearch.transport.NoSuchRemoteClusterException;, +     * Resolves the provided cluster expression to matching cluster names. Supports exact or wildcard matches., +     * Throws {@link NoSuchRemoteClusterException} in case there are no registered remote clusters matching the provided expression., +     * @throws NoSuchRemoteClusterException if there are no remote clusters matching the provided expression, +            throw new NoSuchRemoteClusterException(clusterExpression);, +++ b/server/src/main/java/org/elasticsearch/transport/NoSuchRemoteClusterException.java, +    public NoSuchRemoteClusterException(String clusterName) {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +    protected Map<String, List<String>> groupClusterIndices(Set<String> remoteClusterNames, String[] requestIndices) {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +    public Map<String, OriginalIndices> groupIndices(IndicesOptions indicesOptions, String[] indices) {, +            final Map<String, List<String>> groupedIndices = groupClusterIndices(getRemoteClusterNames(), indices);, +++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java, +            request.indices());, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +                searchRequest.indices());, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/ClusterNameExpressionResolver.java, +import org.elasticsearch.transport.NoSuchRemoteClusterException;, +     * Resolves the provided cluster expression to matching cluster names. Supports exact or wildcard matches., +     * Throws {@link NoSuchRemoteClusterException} in case there are no registered remote clusters matching the provided expression., +     * @throws NoSuchRemoteClusterException if there are no remote clusters matching the provided expression, +            throw new NoSuchRemoteClusterException(clusterExpression);, +++ b/server/src/main/java/org/elasticsearch/transport/NoSuchRemoteClusterException.java, +    public NoSuchRemoteClusterException(String clusterName) {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +    protected Map<String, List<String>> groupClusterIndices(Set<String> remoteClusterNames, String[] requestIndices) {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +    public Map<String, OriginalIndices> groupIndices(IndicesOptions indicesOptions, String[] indices) {, +            final Map<String, List<String>> groupedIndices = groupClusterIndices(getRemoteClusterNames(), indices);, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/ClusterNameExpressionResolverTests.java, +import org.elasticsearch.transport.NoSuchRemoteClusterException;, +        expectThrows(NoSuchRemoteClusterException.class,, +            () -> clusterNameResolver.resolveClusterNames(remoteClusters, "totallyDifferent2"));, +++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesAction.java, +            request.indices());, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +                searchRequest.indices());, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/ClusterNameExpressionResolver.java, +import org.elasticsearch.transport.NoSuchRemoteClusterException;, +     * Resolves the provided cluster expression to matching cluster names. Supports exact or wildcard matches., +     * Throws {@link NoSuchRemoteClusterException} in case there are no registered remote clusters matching the provided expression., +     * @throws NoSuchRemoteClusterException if there are no remote clusters matching the provided expression, +            throw new NoSuchRemoteClusterException(clusterExpression);, +++ b/server/src/main/java/org/elasticsearch/transport/NoSuchRemoteClusterException.java, +    public NoSuchRemoteClusterException(String clusterName) {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +    protected Map<String, List<String>> groupClusterIndices(Set<String> remoteClusterNames, String[] requestIndices) {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +    public Map<String, OriginalIndices> groupIndices(IndicesOptions indicesOptions, String[] indices) {, +            final Map<String, List<String>> groupedIndices = groupClusterIndices(getRemoteClusterNames(), indices);, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/ClusterNameExpressionResolverTests.java, +import org.elasticsearch.transport.NoSuchRemoteClusterException;, +        expectThrows(NoSuchRemoteClusterException.class,]