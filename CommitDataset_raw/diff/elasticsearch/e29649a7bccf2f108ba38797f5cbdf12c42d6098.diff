[+++ b/plugin/build.gradle, +++ b/plugin/build.gradle, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            final String tribeName = tribeSettings.getKey();, +            final String tribePrefix = "tribe." + tribeName + ".";, +            if ("blocks".equals(tribeName) || "on_conflict".equals(tribeName) || "name".equals(tribeName)) {, +            if (settings.get("tribe.on_conflict", "").startsWith("prefer_") == false) {, +++ b/plugin/build.gradle, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            final String tribeName = tribeSettings.getKey();, +            final String tribePrefix = "tribe." + tribeName + ".";, +            if ("blocks".equals(tribeName) || "on_conflict".equals(tribeName) || "name".equals(tribeName)) {, +            if (settings.get("tribe.on_conflict", "").startsWith("prefer_") == false) {, +++ /dev/null, +++ b/plugin/build.gradle, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            final String tribeName = tribeSettings.getKey();, +            final String tribePrefix = "tribe." + tribeName + ".";, +            if ("blocks".equals(tribeName) || "on_conflict".equals(tribeName) || "name".equals(tribeName)) {, +            if (settings.get("tribe.on_conflict", "").startsWith("prefer_") == false) {, +++ /dev/null, +++ /dev/null, +++ b/plugin/build.gradle, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            final String tribeName = tribeSettings.getKey();, +            final String tribePrefix = "tribe." + tribeName + ".";, +            if ("blocks".equals(tribeName) || "on_conflict".equals(tribeName) || "name".equals(tribeName)) {, +            if (settings.get("tribe.on_conflict", "").startsWith("prefer_") == false) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/build.gradle, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            final String tribeName = tribeSettings.getKey();, +            final String tribePrefix = "tribe." + tribeName + ".";, +            if ("blocks".equals(tribeName) || "on_conflict".equals(tribeName) || "name".equals(tribeName)) {, +            if (settings.get("tribe.on_conflict", "").startsWith("prefer_") == false) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/build.gradle, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            final String tribeName = tribeSettings.getKey();, +            final String tribePrefix = "tribe." + tribeName + ".";, +            if ("blocks".equals(tribeName) || "on_conflict".equals(tribeName) || "name".equals(tribeName)) {, +            if (settings.get("tribe.on_conflict", "").startsWith("prefer_") == false) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/build.gradle, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            final String tribeName = tribeSettings.getKey();, +            final String tribePrefix = "tribe." + tribeName + ".";, +            if ("blocks".equals(tribeName) || "on_conflict".equals(tribeName) || "name".equals(tribeName)) {, +            if (settings.get("tribe.on_conflict", "").startsWith("prefer_") == false) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/qa/tribe-tests-with-license/build.gradle, +apply plugin: 'elasticsearch.standalone-test', +    testCompile project(path: ':modules:tribe', configuration: 'runtime'), +compileTestJava.options.compilerArgs << "-Xlint:-rawtypes,-unchecked", +namingConventions.skipIntegTestInDisguise = true, +, +test {, +  /*, +   * We have to disable setting the number of available processors as tests in the same JVM randomize processors and will step on each, +   * other if we allow them to set the number of available processors as it's set-once in Netty., +   */, +  systemProperty 'es.set.netty.runtime.available.processors', 'false', +  include '**/*Tests.class', +}, +, +String licensePath = project(':x-pack-elasticsearch:license-tools').projectDir.toPath().resolve('src/test/resources').toString(), +sourceSets {, +  test {, +    resources {, +      srcDirs += [licensePath], +    }, +  }, +}, +, +project.forbiddenPatterns {, +  exclude '**/*.key', +}, +  /*, +   * We have to disable setting the number of available processors as tests in the same JVM randomize processors and will step on each, +   * other if we allow them to set the number of available processors as it's set-once in Netty., +   */, +  systemProperty 'es.set.netty.runtime.available.processors', 'false', +++ b/plugin/build.gradle, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            final String tribeName = tribeSettings.getKey();, +            final String tribePrefix = "tribe." + tribeName + ".";, +            if ("blocks".equals(tribeName) || "on_conflict".equals(tribeName) || "name".equals(tribeName)) {]