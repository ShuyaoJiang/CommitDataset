[+++ b/src/main/java/org/elasticsearch/index/query/BaseFilterBuilder.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentType;, +            throw new ElasticSearchException("Failed to build filter", e);, +        }, +    }, +, +    @Override, +    public BytesReference buildAsBytes() throws ElasticSearchException {, +        return buildAsBytes(XContentType.JSON);, +    }, +, +    @Override, +    public BytesReference buildAsBytes(XContentType contentType) throws ElasticSearchException {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            toXContent(builder, EMPTY_PARAMS);, +            return builder.bytes();, +        } catch (Exception e) {, +            throw new ElasticSearchException("Failed to build filter", e);, +++ b/src/main/java/org/elasticsearch/index/query/BaseFilterBuilder.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentType;, +            throw new ElasticSearchException("Failed to build filter", e);, +        }, +    }, +, +    @Override, +    public BytesReference buildAsBytes() throws ElasticSearchException {, +        return buildAsBytes(XContentType.JSON);, +    }, +, +    @Override, +    public BytesReference buildAsBytes(XContentType contentType) throws ElasticSearchException {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            toXContent(builder, EMPTY_PARAMS);, +            return builder.bytes();, +        } catch (Exception e) {, +            throw new ElasticSearchException("Failed to build filter", e);, +++ b/src/main/java/org/elasticsearch/index/query/BaseQueryBuilder.java, +import org.elasticsearch.ElasticSearchException;, +            throw new ElasticSearchException("Failed to build query", e);, +    public BytesReference buildAsBytes() throws ElasticSearchException {, +    public BytesReference buildAsBytes(XContentType contentType) throws ElasticSearchException {, +            throw new ElasticSearchException("Failed to build query", e);, +++ b/src/main/java/org/elasticsearch/index/query/BaseFilterBuilder.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentType;, +            throw new ElasticSearchException("Failed to build filter", e);, +        }, +    }, +, +    @Override, +    public BytesReference buildAsBytes() throws ElasticSearchException {, +        return buildAsBytes(XContentType.JSON);, +    }, +, +    @Override, +    public BytesReference buildAsBytes(XContentType contentType) throws ElasticSearchException {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            toXContent(builder, EMPTY_PARAMS);, +            return builder.bytes();, +        } catch (Exception e) {, +            throw new ElasticSearchException("Failed to build filter", e);, +++ b/src/main/java/org/elasticsearch/index/query/BaseQueryBuilder.java, +import org.elasticsearch.ElasticSearchException;, +            throw new ElasticSearchException("Failed to build query", e);, +    public BytesReference buildAsBytes() throws ElasticSearchException {, +    public BytesReference buildAsBytes(XContentType contentType) throws ElasticSearchException {, +            throw new ElasticSearchException("Failed to build query", e);, +++ b/src/main/java/org/elasticsearch/index/query/BoostingQueryBuilder.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +            throw new ElasticSearchIllegalArgumentException("boosting query requires positive query to be set");, +            throw new ElasticSearchIllegalArgumentException("boosting query requires negative query to be set");, +            throw new ElasticSearchIllegalArgumentException("boosting query requires negativeBoost to be set");, +++ b/src/main/java/org/elasticsearch/index/query/BaseFilterBuilder.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentType;, +            throw new ElasticSearchException("Failed to build filter", e);, +        }, +    }, +, +    @Override, +    public BytesReference buildAsBytes() throws ElasticSearchException {, +        return buildAsBytes(XContentType.JSON);, +    }, +, +    @Override, +    public BytesReference buildAsBytes(XContentType contentType) throws ElasticSearchException {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            toXContent(builder, EMPTY_PARAMS);, +            return builder.bytes();, +        } catch (Exception e) {]