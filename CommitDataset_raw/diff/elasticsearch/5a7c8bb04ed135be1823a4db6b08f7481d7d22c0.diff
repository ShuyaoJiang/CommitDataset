[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.transport.TcpTransport;, +        final Map<String, Settings> profiles = new HashMap<>(TcpTransport.TRANSPORT_PROFILES_SETTING.get(settings).getAsGroups());, +        profiles.putIfAbsent(TcpTransport.DEFAULT_PROFILE, Settings.EMPTY);, +                TcpTransport.DEFAULT_PROFILE.equals(name) ||, +        final String transportRange = TcpTransport.PORT.get(settings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.transport.TcpTransport;, +        final Map<String, Settings> profiles = new HashMap<>(TcpTransport.TRANSPORT_PROFILES_SETTING.get(settings).getAsGroups());, +        profiles.putIfAbsent(TcpTransport.DEFAULT_PROFILE, Settings.EMPTY);, +                TcpTransport.DEFAULT_PROFILE.equals(name) ||, +        final String transportRange = TcpTransport.PORT.get(settings);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        final NetworkService networkService = new NetworkService(Collections.emptyList());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.transport.TcpTransport;, +        final Map<String, Settings> profiles = new HashMap<>(TcpTransport.TRANSPORT_PROFILES_SETTING.get(settings).getAsGroups());, +        profiles.putIfAbsent(TcpTransport.DEFAULT_PROFILE, Settings.EMPTY);, +                TcpTransport.DEFAULT_PROFILE.equals(name) ||, +        final String transportRange = TcpTransport.PORT.get(settings);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        final NetworkService networkService = new NetworkService(Collections.emptyList());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +import java.util.Collections;, +import java.util.Objects;, +public final class NetworkService {, +        Setting.listSetting("network.host", Collections.emptyList(), Function.identity(), Property.NodeScope);, +    public NetworkService(List<CustomNameResolver> customNameResolvers) {, +        this.customNameResolvers = Objects.requireNonNull(customNameResolvers, "customNameResolvers must be non null");, +     *                  such as _local_ (see the documentation). if it is null, it will fall back to _local_, +     *, +            bindHosts = new String[] {"_local_"};, +     *                     such as _local_ (see the documentation). if it is null, it will fall back to _local_, +            publishHosts = new String[] {DEFAULT_NETWORK_HOST};, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.transport.TcpTransport;, +        final Map<String, Settings> profiles = new HashMap<>(TcpTransport.TRANSPORT_PROFILES_SETTING.get(settings).getAsGroups());, +        profiles.putIfAbsent(TcpTransport.DEFAULT_PROFILE, Settings.EMPTY);, +                TcpTransport.DEFAULT_PROFILE.equals(name) ||, +        final String transportRange = TcpTransport.PORT.get(settings);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        final NetworkService networkService = new NetworkService(Collections.emptyList());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +import java.util.Collections;, +import java.util.Objects;, +public final class NetworkService {, +        Setting.listSetting("network.host", Collections.emptyList(), Function.identity(), Property.NodeScope);, +    public NetworkService(List<CustomNameResolver> customNameResolvers) {, +        this.customNameResolvers = Objects.requireNonNull(customNameResolvers, "customNameResolvers must be non null");, +     *                  such as _local_ (see the documentation). if it is null, it will fall back to _local_, +     *, +            bindHosts = new String[] {"_local_"};, +     *                     such as _local_ (see the documentation). if it is null, it will fall back to _local_, +            publishHosts = new String[] {DEFAULT_NETWORK_HOST};, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    TcpTransport.TRANSPORT_PROFILES_SETTING,, +                    TcpTransport.HOST,, +                    TcpTransport.PUBLISH_HOST,, +                    TcpTransport.BIND_HOST,, +                    TcpTransport.PUBLISH_PORT,, +                    TcpTransport.PORT,, +                    NetworkService.TCP_NO_DELAY,, +                    NetworkService.TCP_KEEP_ALIVE,, +                    NetworkService.TCP_REUSE_ADDRESS,, +                    NetworkService.TCP_SEND_BUFFER_SIZE,, +                    NetworkService.TCP_RECEIVE_BUFFER_SIZE,, +                    NetworkService.TCP_CONNECT_TIMEOUT,, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.transport.TcpTransport;, +        final Map<String, Settings> profiles = new HashMap<>(TcpTransport.TRANSPORT_PROFILES_SETTING.get(settings).getAsGroups());, +        profiles.putIfAbsent(TcpTransport.DEFAULT_PROFILE, Settings.EMPTY);, +                TcpTransport.DEFAULT_PROFILE.equals(name) ||, +        final String transportRange = TcpTransport.PORT.get(settings);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        final NetworkService networkService = new NetworkService(Collections.emptyList());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +import java.util.Collections;, +import java.util.Objects;, +public final class NetworkService {, +        Setting.listSetting("network.host", Collections.emptyList(), Function.identity(), Property.NodeScope);, +    public NetworkService(List<CustomNameResolver> customNameResolvers) {, +        this.customNameResolvers = Objects.requireNonNull(customNameResolvers, "customNameResolvers must be non null");, +     *                  such as _local_ (see the documentation). if it is null, it will fall back to _local_, +     *, +            bindHosts = new String[] {"_local_"};, +     *                     such as _local_ (see the documentation). if it is null, it will fall back to _local_, +            publishHosts = new String[] {DEFAULT_NETWORK_HOST};, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    TcpTransport.TRANSPORT_PROFILES_SETTING,, +                    TcpTransport.HOST,, +                    TcpTransport.PUBLISH_HOST,, +                    TcpTransport.BIND_HOST,, +                    TcpTransport.PUBLISH_PORT,, +                    TcpTransport.PORT,, +                    NetworkService.TCP_NO_DELAY,, +                    NetworkService.TCP_KEEP_ALIVE,, +                    NetworkService.TCP_REUSE_ADDRESS,, +                    NetworkService.TCP_SEND_BUFFER_SIZE,, +                    NetworkService.TCP_RECEIVE_BUFFER_SIZE,, +                    NetworkService.TCP_CONNECT_TIMEOUT,]