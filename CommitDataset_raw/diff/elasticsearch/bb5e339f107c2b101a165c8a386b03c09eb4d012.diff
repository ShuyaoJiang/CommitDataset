[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                    path: unreleasedInfo.gradleProjectPath, configuration: snapshotProject, +            ), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                    path: unreleasedInfo.gradleProjectPath, configuration: snapshotProject, +            ), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +                            path: "${unreleasedInfo.gradleProjectPath}", configuration: it)), +                                path: "${unreleasedInfo.gradleProjectPath}", configuration: "oss-${it}")), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                    path: unreleasedInfo.gradleProjectPath, configuration: snapshotProject, +            ), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +                            path: "${unreleasedInfo.gradleProjectPath}", configuration: it)), +                                path: "${unreleasedInfo.gradleProjectPath}", configuration: "oss-${it}")), +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java, + * <li>the unreleased <b>bugfix</b>, M.N.c (c &gt; 0) on the `M.N` branch</li>, + *  `M.N`, `M.x` and `master` so we can reliably assume that the leafs of the version tree are unreleased., +        public final String gradleProjectPath;, +        UnreleasedVersionInfo(Version version, String branch, String gradleProjectPath) {, +            this.gradleProjectPath = gradleProjectPath;, +                new UnreleasedVersionInfo(unreleasedVersion, getBranchFor(unreleasedVersion), getGradleProjectPathFor(unreleasedVersion)));, +                    getGradleProjectPathFor(version), +    private String getGradleProjectPathFor(Version version) {, +        // We have Gradle projects set up to check out and build unreleased versions based on the our branching, +        // conventions described in this classes javadoc, +            return ":distribution";, +                    return ":distribution:bwc:minor";, +                    return ":distribution:bwc:staged";, +                return ":distribution:bwc:minor";, +                return ":distribution:bwc:bugfix";, +                return ":distribution:bwc:maintenance";, +        // based on the rules described in this classes javadoc, figure out the branch on which an unreleased version, +        // lives., +        // We do this based on the Gradle project path because there's a direct correlation, so we dont have to duplicate, +        // the logic from there, +        switch (getGradleProjectPathFor(version)) {, +            case ":distribution":, +                return "master";, +            case ":distribution:bwc:minor":, +            case ":distribution:bwc:staged":, +            case ":distribution:bwc:maintenance":, +            case ":distribution:bwc:bugfix":, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                    path: unreleasedInfo.gradleProjectPath, configuration: snapshotProject, +            ), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +                            path: "${unreleasedInfo.gradleProjectPath}", configuration: it)), +                                path: "${unreleasedInfo.gradleProjectPath}", configuration: "oss-${it}")), +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java, + * <li>the unreleased <b>bugfix</b>, M.N.c (c &gt; 0) on the `M.N` branch</li>, + *  `M.N`, `M.x` and `master` so we can reliably assume that the leafs of the version tree are unreleased., +        public final String gradleProjectPath;, +        UnreleasedVersionInfo(Version version, String branch, String gradleProjectPath) {, +            this.gradleProjectPath = gradleProjectPath;, +                new UnreleasedVersionInfo(unreleasedVersion, getBranchFor(unreleasedVersion), getGradleProjectPathFor(unreleasedVersion)));, +                    getGradleProjectPathFor(version), +    private String getGradleProjectPathFor(Version version) {, +        // We have Gradle projects set up to check out and build unreleased versions based on the our branching, +        // conventions described in this classes javadoc, +            return ":distribution";, +                    return ":distribution:bwc:minor";, +                    return ":distribution:bwc:staged";, +                return ":distribution:bwc:minor";, +                return ":distribution:bwc:bugfix";, +                return ":distribution:bwc:maintenance";, +        // based on the rules described in this classes javadoc, figure out the branch on which an unreleased version, +        // lives., +        // We do this based on the Gradle project path because there's a direct correlation, so we dont have to duplicate, +        // the logic from there, +        switch (getGradleProjectPathFor(version)) {, +            case ":distribution":, +                return "master";, +            case ":distribution:bwc:minor":, +            case ":distribution:bwc:staged":, +            case ":distribution:bwc:maintenance":, +            case ":distribution:bwc:bugfix":, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/VersionCollectionTests.java, +            asList("6.5.0", "7.0.0"),, +                "5.6.11", "5.6.12", "5.6.13",, +                "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2", "6.5.0", +                "5.6.11", "5.6.12", "5.6.13", "6.0.0", "6.0.1", "6.1.0", "6.1.1", "6.1.2", "6.1.3", "6.1.4",, +                "6.2.0", "6.2.1", "6.2.2", "6.2.3", "6.2.4", "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2", +                "5.6.11", "5.6.12", "5.6.13",, +                "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2", "6.5.0", "6.6.0", +            asList("7.3.0", "8.0.0"),, +            asList("6.7.0", "7.0.0", "7.1.0"),, +            asList("6.5.0", "7.0.0"),, +            asList("5.6.13", "6.4.2", "6.5.0"),, +            asList("5.6.13", "6.4.2"),, +            asList("5.6.13", "6.4.2", "6.5.0", "6.6.0"),, +            asList("7.3.0", "8.0.0"),, +            asList("6.7.0", "7.0.0", "7.1.0"),, +                "6.3.2", "6.4.0", "6.4.1", "6.4.2", "6.5.0", "7.0.0", +                "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13",, +                "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2", "6.5.0", +                "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13",, +                "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2", +                "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13",, +                "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2", "6.5.0", "6.6.0"]