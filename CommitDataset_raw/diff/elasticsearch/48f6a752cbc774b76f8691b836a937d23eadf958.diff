[+++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpClient.java, +    private final HttpProxy settingsProxy;, +        this.settingsProxy = getProxyFromSettings();, +        RequestConfig.Builder config = RequestConfig.custom();, +        setProxy(config, request, settingsProxy);, +    /**, +     * Enriches the config object optionally with proxy information, +     *, +     * @param config    The request builder config object, +     * @param request   The request parsed into the HTTP client, +     */, +    static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {, +        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {, +            // if a proxy scheme is configured use this, but fall back to the same than the request in case there was no special, +            // configuration given, +            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme();, +            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme);, +            config.setProxy(proxy);, +        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {, +            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme());, +            config.setProxy(proxy);, +        }, +    }, +, +    /**, +     * Creates a HTTP proxy from the system wide settings, +     *, +     * @return A http proxy instance, if no settings are configured this will be a HttpProxy.NO_PROXY instance, +     */, +    private HttpProxy getProxyFromSettings() {, +        String proxyHost = HttpSettings.PROXY_HOST.get(settings);, +        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?, +                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP;, +        int proxyPort = HttpSettings.PROXY_PORT.get(settings);, +        if (proxyPort != 0 && Strings.hasText(proxyHost)) {, +            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort);, +        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {, +            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +, +                    HttpSettings.PROXY_PORT.getKey() + "]");, +        }, +, +        if (proxyPort > 0 && Strings.hasText(proxyHost)) {, +            return new HttpProxy(proxyHost, proxyPort, proxyScheme);, +        }, +, +        return HttpProxy.NO_PROXY;, +    }, +, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpClient.java, +    private final HttpProxy settingsProxy;, +        this.settingsProxy = getProxyFromSettings();, +        RequestConfig.Builder config = RequestConfig.custom();, +        setProxy(config, request, settingsProxy);, +    /**, +     * Enriches the config object optionally with proxy information, +     *, +     * @param config    The request builder config object, +     * @param request   The request parsed into the HTTP client, +     */, +    static void setProxy(RequestConfig.Builder config, HttpRequest request, HttpProxy configuredProxy) {, +        if (request.proxy != null && request.proxy.equals(HttpProxy.NO_PROXY) == false) {, +            // if a proxy scheme is configured use this, but fall back to the same than the request in case there was no special, +            // configuration given, +            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : Scheme.HTTP.scheme();, +            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme);, +            config.setProxy(proxy);, +        } else if (HttpProxy.NO_PROXY.equals(configuredProxy) == false) {, +            HttpHost proxy = new HttpHost(configuredProxy.getHost(), configuredProxy.getPort(), configuredProxy.getScheme().scheme());, +            config.setProxy(proxy);, +        }, +    }, +, +    /**, +     * Creates a HTTP proxy from the system wide settings, +     *, +     * @return A http proxy instance, if no settings are configured this will be a HttpProxy.NO_PROXY instance, +     */, +    private HttpProxy getProxyFromSettings() {, +        String proxyHost = HttpSettings.PROXY_HOST.get(settings);, +        Scheme proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ?, +                Scheme.parse(HttpSettings.PROXY_SCHEME.get(settings)) : Scheme.HTTP;, +        int proxyPort = HttpSettings.PROXY_PORT.get(settings);, +        if (proxyPort != 0 && Strings.hasText(proxyHost)) {, +            logger.info("Using default proxy for http input and slack/hipchat/pagerduty/webhook actions [{}:{}]", proxyHost, proxyPort);, +        } else if (proxyPort != 0 ^ Strings.hasText(proxyHost)) {, +            throw new IllegalArgumentException("HTTP proxy requires both settings: [" + HttpSettings.PROXY_HOST.getKey() + "] and [" +, +                    HttpSettings.PROXY_PORT.getKey() + "]");, +        }, +, +        if (proxyPort > 0 && Strings.hasText(proxyHost)) {, +            return new HttpProxy(proxyHost, proxyPort, proxyScheme);, +        }, +, +        return HttpProxy.NO_PROXY;, +    }, +, +++ b/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/common/http/HttpClientTests.java, +import org.apache.http.client.config.RequestConfig;, +    public void testSetProxy() throws Exception {, +        HttpProxy localhostHttpProxy = new HttpProxy("localhost", 1234, Scheme.HTTP);]