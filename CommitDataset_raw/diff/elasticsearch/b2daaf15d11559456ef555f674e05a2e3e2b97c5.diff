[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +import org.apache.lucene.store.AlreadyClosedException;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.index.seqno.SequenceNumbers;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.IndexShardTestCase;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.xpack.ccr.index.engine.FollowingEngine;, +import java.util.Set;, +            clusterGroup.leaderCluster.ensureAtMostNumDataNodes(numberOfNodesPerCluster());, +            clusterGroup.followerCluster.ensureAtMostNumDataNodes(numberOfNodesPerCluster());, +    protected void assertSameDocCount(String leaderIndex, String followerIndex) throws Exception {, +        refresh(leaderClient(), leaderIndex);, +        SearchRequest request1 = new SearchRequest(leaderIndex);, +        request1.source(new SearchSourceBuilder().size(0));, +        SearchResponse response1 = leaderClient().search(request1).actionGet();, +        assertBusy(() -> {, +            refresh(followerClient(), followerIndex);, +            SearchRequest request2 = new SearchRequest(followerIndex);, +            request2.source(new SearchSourceBuilder().size(0));, +            SearchResponse response2 = followerClient().search(request2).actionGet();, +            assertThat(response2.getHits().getTotalHits(), equalTo(response1.getHits().getTotalHits()));, +        }, 60, TimeUnit.SECONDS);, +    }, +, +    protected void atLeastDocsIndexed(Client client, String index, long numDocsReplicated) throws InterruptedException {, +        logger.info("waiting for at least [{}] documents to be indexed into index [{}]", numDocsReplicated, index);, +        awaitBusy(() -> {, +            refresh(client, index);, +            SearchRequest request = new SearchRequest(index);, +            request.source(new SearchSourceBuilder().size(0));, +            SearchResponse response = client.search(request).actionGet();, +            return response.getHits().getTotalHits() >= numDocsReplicated;, +        }, 60, TimeUnit.SECONDS);, +    }, +, +    protected void assertMaxSeqNoOfUpdatesIsTransferred(Index leaderIndex, Index followerIndex, int numberOfShards) throws Exception {, +        assertBusy(() -> {, +            long[] msuOnLeader = new long[numberOfShards];, +            for (int i = 0; i < msuOnLeader.length; i++) {, +                msuOnLeader[i] = SequenceNumbers.UNASSIGNED_SEQ_NO;, +            }, +            Set<String> leaderNodes = getLeaderCluster().nodesInclude(leaderIndex.getName());, +            for (String leaderNode : leaderNodes) {, +                IndicesService indicesService = getLeaderCluster().getInstance(IndicesService.class, leaderNode);, +                for (int i = 0; i < numberOfShards; i++) {, +                    IndexShard shard = indicesService.getShardOrNull(new ShardId(leaderIndex, i));, +                    if (shard != null) {, +                        try {, +                            msuOnLeader[i] = SequenceNumbers.max(msuOnLeader[i], shard.getMaxSeqNoOfUpdatesOrDeletes());, +                        } catch (AlreadyClosedException ignored) {, +                            return;, +                        }, +                    }, +                }, +            }, +, +            Set<String> followerNodes = getFollowerCluster().nodesInclude(followerIndex.getName());, +            for (String followerNode : followerNodes) {, +                IndicesService indicesService = getFollowerCluster().getInstance(IndicesService.class, followerNode);, +                for (int i = 0; i < numberOfShards; i++) {, +                    IndexShard shard = indicesService.getShardOrNull(new ShardId(leaderIndex, i));, +                    if (shard != null) {, +                        try {, +                            assertThat(shard.getMaxSeqNoOfUpdatesOrDeletes(), equalTo(msuOnLeader[i]));, +                        } catch (AlreadyClosedException ignored) {, +, +                        }, +                    }, +                }, +            }, +        });, +    }, +, +    protected void assertTotalNumberOfOptimizedIndexing(Index followerIndex, int numberOfShards, long expectedTotal) throws Exception {, +        assertBusy(() -> {, +            long[] numOfOptimizedOps = new long[numberOfShards];, +            for (int shardId = 0; shardId < numberOfShards; shardId++) {, +                for (String node : getFollowerCluster().nodesInclude(followerIndex.getName())) {, +                    IndicesService indicesService = getFollowerCluster().getInstance(IndicesService.class, node);, +                    IndexShard shard = indicesService.getShardOrNull(new ShardId(followerIndex, shardId));, +                    if (shard != null && shard.routingEntry().primary()) {, +                        try {, +                            FollowingEngine engine = ((FollowingEngine) IndexShardTestCase.getEngine(shard));, +                            numOfOptimizedOps[shardId] = engine.getNumberOfOptimizedIndexing();, +                        } catch (AlreadyClosedException e) {, +                            throw new AssertionError(e); // causes assertBusy to retry, +                        }, +                    }, +                }, +            }, +            assertThat(Arrays.stream(numOfOptimizedOps).sum(), equalTo(expectedTotal));, +        });, +    }, +, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +import org.apache.lucene.store.AlreadyClosedException;]