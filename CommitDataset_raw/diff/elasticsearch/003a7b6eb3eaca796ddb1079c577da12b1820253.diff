[+++ b/core/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java, +            throw new IllegalArgumentException("value cannot be null");, +        String fieldName = null;, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[regexp] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java, +            throw new IllegalArgumentException("value cannot be null");, +        String fieldName = null;, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[regexp] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +++ b/core/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java, +import org.elasticsearch.common.ParsingException;, +import java.util.HashMap;, +import java.util.Map;, +        RegexpQueryBuilder query = randomRegexpQuery();, +    protected Map<String, RegexpQueryBuilder> getAlternateVersions() {, +        Map<String, RegexpQueryBuilder> alternateVersions = new HashMap<>();, +        RegexpQueryBuilder regexpQuery = randomRegexpQuery();, +        String contentString = "{\n" +, +                "    \"regexp\" : {\n" +, +                "        \"" + regexpQuery.fieldName() + "\" : \"" + regexpQuery.value() + "\"\n" +, +                "    }\n" +, +                "}";, +        alternateVersions.put(contentString, regexpQuery);, +        return alternateVersions;, +    }, +, +    private static RegexpQueryBuilder randomRegexpQuery() {, +        // mapped or unmapped fields, +        String fieldName = randomBoolean() ? STRING_FIELD_NAME : randomAsciiOfLengthBetween(1, 10);, +        String value = randomAsciiOfLengthBetween(1, 10);, +        return new RegexpQueryBuilder(fieldName, value);, +    }, +, +    @Override, +            assertEquals("field name is null or empty", e.getMessage());, +            assertEquals("value cannot be null", e.getMessage());, +, +    public void testParseFailsWithMultipleFields() throws IOException {, +        String json =, +                "{\n" +, +                "    \"regexp\": {\n" +, +                "      \"user1\": {\n" +, +                "        \"value\": \"k.*y\"\n" +, +                "      },\n" +, +                "      \"user2\": {\n" +, +                "        \"value\": \"k.*y\"\n" +, +                "      }\n" +, +                "    }\n" +, +                "}";, +, +        try {, +            parseQuery(json);, +            fail("parseQuery should have failed");, +        } catch(ParsingException e) {, +            assertEquals("[regexp] query doesn't support multiple fields, found [user1] and [user2]", e.getMessage());, +        }, +    }]