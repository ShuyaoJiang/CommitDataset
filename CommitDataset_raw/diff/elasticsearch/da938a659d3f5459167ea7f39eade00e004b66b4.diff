[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +            waitForEvents = Priority.readFrom(in);, +            Priority.writeTo(waitForEvents, out);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +            waitForEvents = Priority.readFrom(in);, +            Priority.writeTo(waitForEvents, out);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +            waitForEvents = Priority.readFrom(in);, +            Priority.writeTo(waitForEvents, out);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +            waitForEvents = Priority.readFrom(in);, +            Priority.writeTo(waitForEvents, out);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/cluster/service/PendingClusterTask.java, +        priority = Priority.readFrom(in);, +        Priority.writeTo(priority, out);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +            waitForEvents = Priority.readFrom(in);, +            Priority.writeTo(waitForEvents, out);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/cluster/service/PendingClusterTask.java, +        priority = Priority.readFrom(in);, +        Priority.writeTo(priority, out);, +++ b/src/main/java/org/elasticsearch/common/Priority.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +    public static Priority readFrom(StreamInput input) throws IOException {, +        return fromByte(input.readByte());, +    }, +, +    public static void writeTo(Priority priority, StreamOutput output) throws IOException {, +        byte b = priority.value;, +        if (output.getVersion().before(Version.V_1_1_0)) {, +            b = (byte) Math.max(URGENT.value, b);, +        }, +        output.writeByte(b);, +    }, +, +            case -1: return IMMEDIATE;, +            case 0: return URGENT;, +            case 1: return HIGH;, +            case 2: return NORMAL;, +            case 3: return LOW;, +            case 4: return LANGUID;, +    public static final Priority IMMEDIATE = new Priority((byte) -1);, +    public static final Priority URGENT = new Priority((byte) 0);, +    public static final Priority HIGH = new Priority((byte) 1);, +    public static final Priority NORMAL = new Priority((byte) 2);, +    public static final Priority LOW = new Priority((byte) 3);, +    public static final Priority LANGUID = new Priority((byte) 4);, +    private static final Priority[] values = new Priority[] { IMMEDIATE, URGENT, HIGH, NORMAL, LOW, LANGUID };, +    /**, +     * @return an array of all available priorities, sorted from the highest to the lowest., +     */, +    public static Priority[] values() {, +        return values;, +        return (this.value < p.value) ? -1 : ((this.value > p.value) ? 1 : 0);, +    }, +, +    public boolean after(Priority p) {, +        return value > p.value;, +    }, +, +    public boolean sameOrAfter(Priority p) {, +        return value >= p.value;, +            case (byte) -1: return "IMMEDIATE";, +            case (byte) 0: return "URGENT";, +            case (byte) 1: return "HIGH";, +            case (byte) 2: return "NORMAL";, +            case (byte) 3: return "LOW";, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +            waitForEvents = Priority.readFrom(in);, +            Priority.writeTo(waitForEvents, out);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings", Priority.IMMEDIATE, new AckedClusterStateUpdateTask() {, +++ b/src/main/java/org/elasticsearch/cluster/service/PendingClusterTask.java, +        priority = Priority.readFrom(in);, +        Priority.writeTo(priority, out);, +++ b/src/main/java/org/elasticsearch/common/Priority.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +]