[+++ b/benchmarks/build.gradle, +unitTest.enabled = false, +++ b/benchmarks/build.gradle, +unitTest.enabled = false, +++ b/buildSrc/build.gradle, +  unitTest {, +++ b/benchmarks/build.gradle, +unitTest.enabled = false, +++ b/buildSrc/build.gradle, +  unitTest {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +        createUnitTestTask(project.tasks), +    static void createUnitTestTask(TaskContainer tasks) {, +        // only create a unitTest task if the `test` task exists as some project don't make use of it., +        tasks.matching { it.name == "test" }.all {, +            // We don't want to run any tests with the Gradle test runner since we add our own randomized runner, +            it.enabled = false, +            RandomizedTestingTask unitTest = tasks.create('unitTest', RandomizedTestingTask), +            unitTest.description = 'Runs unit tests with the randomized testing framework', +            it.dependsOn unitTest, +++ b/benchmarks/build.gradle, +unitTest.enabled = false, +++ b/buildSrc/build.gradle, +  unitTest {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +        createUnitTestTask(project.tasks), +    static void createUnitTestTask(TaskContainer tasks) {, +        // only create a unitTest task if the `test` task exists as some project don't make use of it., +        tasks.matching { it.name == "test" }.all {, +            // We don't want to run any tests with the Gradle test runner since we add our own randomized runner, +            it.enabled = false, +            RandomizedTestingTask unitTest = tasks.create('unitTest', RandomizedTestingTask), +            unitTest.description = 'Runs unit tests with the randomized testing framework', +            it.dependsOn unitTest, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.plugins.JavaBasePlugin, +            project.sourceSets.matching { it.name == "test" }.all { test ->, +                task.testClassesDirs = test.output.classesDirs, +                task.classpath = test.runtimeClasspath, +            }, +            group =  JavaBasePlugin.VERIFICATION_GROUP, +            dependsOn 'testClasses', +            if (name == "unitTest") {, +                include("**/*Tests.class"), +            }, +++ b/benchmarks/build.gradle, +unitTest.enabled = false, +++ b/buildSrc/build.gradle, +  unitTest {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +        createUnitTestTask(project.tasks), +    static void createUnitTestTask(TaskContainer tasks) {, +        // only create a unitTest task if the `test` task exists as some project don't make use of it., +        tasks.matching { it.name == "test" }.all {, +            // We don't want to run any tests with the Gradle test runner since we add our own randomized runner, +            it.enabled = false, +            RandomizedTestingTask unitTest = tasks.create('unitTest', RandomizedTestingTask), +            unitTest.description = 'Runs unit tests with the randomized testing framework', +            it.dependsOn unitTest, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.plugins.JavaBasePlugin, +            project.sourceSets.matching { it.name == "test" }.all { test ->, +                task.testClassesDirs = test.output.classesDirs, +                task.classpath = test.runtimeClasspath, +            }, +            group =  JavaBasePlugin.VERIFICATION_GROUP, +            dependsOn 'testClasses', +            if (name == "unitTest") {, +                include("**/*Tests.class"), +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +++ b/benchmarks/build.gradle, +unitTest.enabled = false, +++ b/buildSrc/build.gradle, +  unitTest {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +        createUnitTestTask(project.tasks), +    static void createUnitTestTask(TaskContainer tasks) {, +        // only create a unitTest task if the `test` task exists as some project don't make use of it., +        tasks.matching { it.name == "test" }.all {, +            // We don't want to run any tests with the Gradle test runner since we add our own randomized runner, +            it.enabled = false, +            RandomizedTestingTask unitTest = tasks.create('unitTest', RandomizedTestingTask), +            unitTest.description = 'Runs unit tests with the randomized testing framework', +            it.dependsOn unitTest, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.plugins.JavaBasePlugin, +            project.sourceSets.matching { it.name == "test" }.all { test ->, +                task.testClassesDirs = test.output.classesDirs, +                task.classpath = test.runtimeClasspath, +            }, +            group =  JavaBasePlugin.VERIFICATION_GROUP, +            dependsOn 'testClasses', +            if (name == "unitTest") {, +                include("**/*Tests.class"), +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +++ b/buildSrc/src/testKit/elasticsearch.build/build.gradle, +unitTest.enabled = false, +++ b/benchmarks/build.gradle]