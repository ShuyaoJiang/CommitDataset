[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PreviewDatafeedAction.java, +            // NB: this is using the client from the transport layer, NOT the internal client., +            // This is important because it means the datafeed search will fail if the user, +            // requesting the preview doesn't have permission to search the relevant indices., +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PreviewDatafeedAction.java, +            // NB: this is using the client from the transport layer, NOT the internal client., +            // This is important because it means the datafeed search will fail if the user, +            // requesting the preview doesn't have permission to search the relevant indices., +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutDatafeedAction.java, +import org.elasticsearch.action.search.SearchAction;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.xpack.XPackSettings;, +import org.elasticsearch.xpack.security.SecurityContext;, +import org.elasticsearch.xpack.security.action.user.HasPrivilegesAction;, +import org.elasticsearch.xpack.security.action.user.HasPrivilegesRequest;, +import org.elasticsearch.xpack.security.action.user.HasPrivilegesResponse;, +import org.elasticsearch.xpack.security.authz.RoleDescriptor;, +import org.elasticsearch.xpack.security.support.Exceptions;, +        private final Client client;, +        private final boolean securityEnabled;, +        public TransportAction(Settings settings, TransportService transportService,, +                               ClusterService clusterService, ThreadPool threadPool, Client client,, +                               XPackLicenseState licenseState, ActionFilters actionFilters,, +            super(settings, PutDatafeedAction.NAME, transportService, clusterService, threadPool,, +                    actionFilters, indexNameExpressionResolver, Request::new);, +            this.client = client;, +            this.securityEnabled = XPackSettings.SECURITY_ENABLED.get(settings);, +        protected void masterOperation(Request request, ClusterState state,, +                                       ActionListener<Response> listener) throws Exception {, +            // If security is enabled only create the datafeed if the user requesting creation has, +            // permission to read the indices the datafeed is going to read from, +            if (securityEnabled) {, +                String username = new SecurityContext(settings,, +                        threadPool.getThreadContext()).getUser().principal();, +                ActionListener<HasPrivilegesResponse> privResponseListener = ActionListener.wrap(, +                        r -> handlePrivsResponse(username, request, r, listener),, +                        listener::onFailure);, +, +                HasPrivilegesRequest privRequest = new HasPrivilegesRequest();, +                privRequest.username(username);, +                privRequest.clusterPrivileges(Strings.EMPTY_ARRAY);, +                // We just check for permission to use the search action.  In reality we'll also, +                // use the scroll action, but that's considered an implementation detail., +                privRequest.indexPrivileges(RoleDescriptor.IndicesPrivileges.builder(), +                        .indices(request.getDatafeed().getIndexes(), +                                .toArray(new String[0])), +                        .privileges(SearchAction.NAME), +                        .build());, +, +                client.execute(HasPrivilegesAction.INSTANCE, privRequest, privResponseListener);, +            } else {, +                putDatafeed(request, listener);, +            }, +        }, +, +        private void handlePrivsResponse(String username, Request request,, +                                         HasPrivilegesResponse response,, +                                         ActionListener<Response> listener) throws IOException {, +            if (response.isCompleteMatch()) {, +                putDatafeed(request, listener);, +            } else {, +                XContentBuilder builder = JsonXContent.contentBuilder();, +                builder.startObject();, +                for (HasPrivilegesResponse.IndexPrivileges index : response.getIndexPrivileges()) {, +                    builder.field(index.getIndex());, +                    builder.map(index.getPrivileges());, +                }, +                builder.endObject();, +, +                listener.onFailure(Exceptions.authorizationError("Cannot create datafeed [{}]" +, +                                " because user {} lacks permissions on the indexes to be" +, +                                " searched: {}",, +                        request.getDatafeed().getId(), username, builder.string()));, +            }, +        }, +, +        private void putDatafeed(Request request, ActionListener<Response> listener) {, +            clusterService.submitStateUpdateTask(, +                    "put-datafeed-" + request.getDatafeed().getId(),, +                            return new Response(acknowledged,, +                                    request.getDatafeed());, +                        public ClusterState execute(ClusterState currentState), +                                throws Exception {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PreviewDatafeedAction.java, +            // NB: this is using the client from the transport layer, NOT the internal client., +            // This is important because it means the datafeed search will fail if the user, +            // requesting the preview doesn't have permission to search the relevant indices., +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutDatafeedAction.java, +import org.elasticsearch.action.search.SearchAction;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.xpack.XPackSettings;, +import org.elasticsearch.xpack.security.SecurityContext;, +import org.elasticsearch.xpack.security.action.user.HasPrivilegesAction;, +import org.elasticsearch.xpack.security.action.user.HasPrivilegesRequest;]