[+++ b/core/src/test/java/org/elasticsearch/common/io/stream/StreamTests.java, +import java.util.*;, +, +    public void testLinkedHashMap() throws IOException {, +        int size = randomIntBetween(1, 1024);, +        boolean accessOrder = randomBoolean();, +        List<Tuple<String, Integer>> list = new ArrayList<>(size);, +        LinkedHashMap<String, Integer> write = new LinkedHashMap<>(size, 0.75f, accessOrder);, +        for (int i = 0; i < size; i++) {, +            int value = randomInt();, +            list.add(new Tuple<>(Integer.toString(i), value));, +            write.put(Integer.toString(i), value);, +        }, +        if (accessOrder) {, +            // randomize access order, +            Collections.shuffle(list, random());, +            for (Tuple<String, Integer> entry : list) {, +                // touch the entries to set the access order, +                write.get(entry.v1());, +            }, +        }, +        BytesStreamOutput out = new BytesStreamOutput();, +        out.writeGenericValue(write);, +        LinkedHashMap<String, Integer> read = (LinkedHashMap<String, Integer>)out.bytes().streamInput().readGenericValue();, +        assertEquals(size, read.size());, +        int index = 0;, +        for (Map.Entry<String, Integer> entry : read.entrySet()) {, +            assertEquals(list.get(index).v1(), entry.getKey());, +            assertEquals(list.get(index).v2(), entry.getValue());, +            index++;, +        }, +    }, +++ b/core/src/test/java/org/elasticsearch/common/io/stream/StreamTests.java, +import java.util.*;, +, +    public void testLinkedHashMap() throws IOException {, +        int size = randomIntBetween(1, 1024);, +        boolean accessOrder = randomBoolean();, +        List<Tuple<String, Integer>> list = new ArrayList<>(size);, +        LinkedHashMap<String, Integer> write = new LinkedHashMap<>(size, 0.75f, accessOrder);, +        for (int i = 0; i < size; i++) {, +            int value = randomInt();, +            list.add(new Tuple<>(Integer.toString(i), value));, +            write.put(Integer.toString(i), value);, +        }, +        if (accessOrder) {, +            // randomize access order, +            Collections.shuffle(list, random());, +            for (Tuple<String, Integer> entry : list) {, +                // touch the entries to set the access order, +                write.get(entry.v1());, +            }, +        }, +        BytesStreamOutput out = new BytesStreamOutput();, +        out.writeGenericValue(write);, +        LinkedHashMap<String, Integer> read = (LinkedHashMap<String, Integer>)out.bytes().streamInput().readGenericValue();, +        assertEquals(size, read.size());, +        int index = 0;, +        for (Map.Entry<String, Integer> entry : read.entrySet()) {, +            assertEquals(list.get(index).v1(), entry.getKey());, +            assertEquals(list.get(index).v2(), entry.getValue());, +            index++;, +        }, +    }, +++ b/docs/reference/cat/health.asciidoc, +% curl 192.168.56.10:9200/_cat/health, +% curl '192.168.56.10:9200/_cat/health?v&ts=0', +% while true; do curl 192.168.56.10:9200/_cat/health; sleep 120; done]