[+++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +    public void testResumeFollow() {, +            final Request request = new Request("POST", "/follower/_ccr/resume_follow");, +    public void testFollow() {, +            final Request request = new Request("PUT", "/follower/_ccr/follow");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +    public void testResumeFollow() {, +            final Request request = new Request("POST", "/follower/_ccr/resume_follow");, +    public void testFollow() {, +            final Request request = new Request("PUT", "/follower/_ccr/follow");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            follow("leader_cluster:" + allowedIndex, allowedIndex);, +            assertOK(client().performRequest(new Request("POST", "/" + allowedIndex + "/_ccr/pause_follow")));, +            resumeFollow("leader_cluster:" + allowedIndex, allowedIndex);, +            assertOK(client().performRequest(new Request("POST", "/" + allowedIndex + "/_ccr/pause_follow")));, +                () -> follow("leader_cluster:" + unallowedIndex, unallowedIndex));, +                containsString("action [indices:admin/xpack/ccr/put_follow] is unauthorized for user [test_ccr]"));, +                () -> resumeFollow("leader_cluster:" + unallowedIndex, unallowedIndex));, +        // Cleanup by deleting auto follow pattern and pause following:, +        pauseFollow(allowedIndex);, +    private static void resumeFollow(String leaderIndex, String followIndex) throws IOException {, +        final Request request = new Request("POST", "/" + followIndex + "/_ccr/resume_follow");, +    private static void follow(String leaderIndex, String followIndex) throws IOException {, +        final Request request = new Request("PUT", "/" + followIndex + "/_ccr/follow");, +    private static void pauseFollow(String followIndex) throws IOException {, +        assertOK(client().performRequest(new Request("POST", "/" + followIndex + "/_ccr/pause_follow")));, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +    public void testResumeFollow() {, +            final Request request = new Request("POST", "/follower/_ccr/resume_follow");, +    public void testFollow() {, +            final Request request = new Request("PUT", "/follower/_ccr/follow");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            follow("leader_cluster:" + allowedIndex, allowedIndex);, +            assertOK(client().performRequest(new Request("POST", "/" + allowedIndex + "/_ccr/pause_follow")));, +            resumeFollow("leader_cluster:" + allowedIndex, allowedIndex);, +            assertOK(client().performRequest(new Request("POST", "/" + allowedIndex + "/_ccr/pause_follow")));, +                () -> follow("leader_cluster:" + unallowedIndex, unallowedIndex));, +                containsString("action [indices:admin/xpack/ccr/put_follow] is unauthorized for user [test_ccr]"));, +                () -> resumeFollow("leader_cluster:" + unallowedIndex, unallowedIndex));, +        // Cleanup by deleting auto follow pattern and pause following:, +        pauseFollow(allowedIndex);, +    private static void resumeFollow(String leaderIndex, String followIndex) throws IOException {, +        final Request request = new Request("POST", "/" + followIndex + "/_ccr/resume_follow");, +    private static void follow(String leaderIndex, String followIndex) throws IOException {, +        final Request request = new Request("PUT", "/" + followIndex + "/_ccr/follow");, +    private static void pauseFollow(String followIndex) throws IOException {, +        assertOK(client().performRequest(new Request("POST", "/" + followIndex + "/_ccr/pause_follow")));, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +            followIndex("leader_cluster:" + leaderIndexName, followIndexName);, +            pauseFollow(followIndexName);, +            resumeFollow("leader_cluster:" + leaderIndexName, followIndexName);, +            () -> resumeFollow("leader_cluster:non-existing-index", "non-existing-index"));, +        e = expectThrows(ResponseException.class, () -> followIndex("leader_cluster:non-existing-index", "non-existing-index"));, +    private static void resumeFollow(String leaderIndex, String followIndex) throws IOException {, +        final Request request = new Request("POST", "/" + followIndex + "/_ccr/resume_follow");, +        request.setJsonEntity("{\"leader_index\": \"" + leaderIndex + "\", \"poll_timeout\": \"10ms\"}");, +        assertOK(client().performRequest(request));, +    }, +, +        final Request request = new Request("PUT", "/" + followIndex + "/_ccr/follow");, +    private static void pauseFollow(String followIndex) throws IOException {, +        assertOK(client().performRequest(new Request("POST", "/" + followIndex + "/_ccr/pause_follow")));, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +    public void testResumeFollow() {, +            final Request request = new Request("POST", "/follower/_ccr/resume_follow");, +    public void testFollow() {, +            final Request request = new Request("PUT", "/follower/_ccr/follow");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            follow("leader_cluster:" + allowedIndex, allowedIndex);, +            assertOK(client().performRequest(new Request("POST", "/" + allowedIndex + "/_ccr/pause_follow")));, +            resumeFollow("leader_cluster:" + allowedIndex, allowedIndex);, +            assertOK(client().performRequest(new Request("POST", "/" + allowedIndex + "/_ccr/pause_follow")));, +                () -> follow("leader_cluster:" + unallowedIndex, unallowedIndex));, +                containsString("action [indices:admin/xpack/ccr/put_follow] is unauthorized for user [test_ccr]"));, +                () -> resumeFollow("leader_cluster:" + unallowedIndex, unallowedIndex));, +        // Cleanup by deleting auto follow pattern and pause following:, +        pauseFollow(allowedIndex);, +    private static void resumeFollow(String leaderIndex, String followIndex) throws IOException {, +        final Request request = new Request("POST", "/" + followIndex + "/_ccr/resume_follow");, +    private static void follow(String leaderIndex, String followIndex) throws IOException {, +        final Request request = new Request("PUT", "/" + followIndex + "/_ccr/follow");, +    private static void pauseFollow(String followIndex) throws IOException {, +        assertOK(client().performRequest(new Request("POST", "/" + followIndex + "/_ccr/pause_follow")));, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +            followIndex("leader_cluster:" + leaderIndexName, followIndexName);, +            pauseFollow(followIndexName);, +            resumeFollow("leader_cluster:" + leaderIndexName, followIndexName);, +            () -> resumeFollow("leader_cluster:non-existing-index", "non-existing-index"));, +        e = expectThrows(ResponseException.class, () -> followIndex("leader_cluster:non-existing-index", "non-existing-index"));, +    private static void resumeFollow(String leaderIndex, String followIndex) throws IOException {, +        final Request request = new Request("POST", "/" + followIndex + "/_ccr/resume_follow");, +        request.setJsonEntity("{\"leader_index\": \"" + leaderIndex + "\", \"poll_timeout\": \"10ms\"}");, +        assertOK(client().performRequest(request));, +    }, +, +        final Request request = new Request("PUT", "/" + followIndex + "/_ccr/follow");, +    private static void pauseFollow(String followIndex) throws IOException {, +        assertOK(client().performRequest(new Request("POST", "/" + followIndex + "/_ccr/pause_follow")));, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/follow_and_unfollow.yml, +      ccr.follow:]