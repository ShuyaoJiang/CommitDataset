[+++ b/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java, +    private ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource>[] perDepthFieldDataSources = new ObjectObjectOpenHashMap[4];, +            perDepthFieldDataSources[depth] = new ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource>();, +        final ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource> fieldDataSources = perDepthFieldDataSources[depth];, +    private NumericValuesSource numericField(ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource> fieldDataSources, ValuesSourceConfig<?> config) {, +        final ConfigCacheKey cacheKey = new ConfigCacheKey(config);, +        FieldDataSource.Numeric dataSource = (FieldDataSource.Numeric) fieldDataSources.get(cacheKey);, +            fieldDataSources.put(cacheKey, dataSource);, +    private ValuesSource bytesField(ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource> fieldDataSources, ValuesSourceConfig<?> config) {, +        final ConfigCacheKey cacheKey = new ConfigCacheKey(config);, +        FieldDataSource dataSource = fieldDataSources.get(cacheKey);, +            fieldDataSources.put(cacheKey, dataSource);, +    private GeoPointValuesSource geoPointField(ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource> fieldDataSources, ValuesSourceConfig<?> config) {, +        final ConfigCacheKey cacheKey = new ConfigCacheKey(config);, +        FieldDataSource.GeoPoint dataSource = (FieldDataSource.GeoPoint) fieldDataSources.get(cacheKey);, +            fieldDataSources.put(cacheKey, dataSource);, +, +    private static class ConfigCacheKey {, +, +        private final String field;, +        private final Class<? extends ValuesSource> valueSourceType;, +, +        private ConfigCacheKey(ValuesSourceConfig config) {, +            this.field = config.fieldContext.field();, +            this.valueSourceType = config.valueSourceType;, +        }, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +, +            ConfigCacheKey that = (ConfigCacheKey) o;, +, +            if (!field.equals(that.field)) return false;, +            if (!valueSourceType.equals(that.valueSourceType)) return false;, +, +            return true;, +        }, +, +        @Override, +        public int hashCode() {, +            int result = field.hashCode();, +            result = 31 * result + valueSourceType.hashCode();, +            return result;, +        }, +    }, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java, +    private ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource>[] perDepthFieldDataSources = new ObjectObjectOpenHashMap[4];, +            perDepthFieldDataSources[depth] = new ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource>();, +        final ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource> fieldDataSources = perDepthFieldDataSources[depth];, +    private NumericValuesSource numericField(ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource> fieldDataSources, ValuesSourceConfig<?> config) {, +        final ConfigCacheKey cacheKey = new ConfigCacheKey(config);, +        FieldDataSource.Numeric dataSource = (FieldDataSource.Numeric) fieldDataSources.get(cacheKey);, +            fieldDataSources.put(cacheKey, dataSource);, +    private ValuesSource bytesField(ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource> fieldDataSources, ValuesSourceConfig<?> config) {, +        final ConfigCacheKey cacheKey = new ConfigCacheKey(config);, +        FieldDataSource dataSource = fieldDataSources.get(cacheKey);, +            fieldDataSources.put(cacheKey, dataSource);, +    private GeoPointValuesSource geoPointField(ObjectObjectOpenHashMap<ConfigCacheKey, FieldDataSource> fieldDataSources, ValuesSourceConfig<?> config) {, +        final ConfigCacheKey cacheKey = new ConfigCacheKey(config);, +        FieldDataSource.GeoPoint dataSource = (FieldDataSource.GeoPoint) fieldDataSources.get(cacheKey);, +            fieldDataSources.put(cacheKey, dataSource);, +, +    private static class ConfigCacheKey {, +, +        private final String field;, +        private final Class<? extends ValuesSource> valueSourceType;, +, +        private ConfigCacheKey(ValuesSourceConfig config) {, +            this.field = config.fieldContext.field();, +            this.valueSourceType = config.valueSourceType;, +        }, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +, +            ConfigCacheKey that = (ConfigCacheKey) o;, +, +            if (!field.equals(that.field)) return false;, +            if (!valueSourceType.equals(that.valueSourceType)) return false;, +, +            return true;, +        }, +, +        @Override, +        public int hashCode() {, +            int result = field.hashCode();, +            result = 31 * result + valueSourceType.hashCode();, +            return result;, +        }, +    }, +++ b/src/test/java/org/elasticsearch/search/aggregations/CombiTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under]