[+++ b/docs/reference/search/validate.asciidoc, +GET twitter/_validate/query, +GET twitter/_validate/query, +GET twitter/_validate/query?explain=true, +GET twitter/_validate/query?rewrite=true, +GET twitter/_validate/query?rewrite=true&all_shards=true, +++ b/docs/reference/search/validate.asciidoc, +GET twitter/_validate/query, +GET twitter/_validate/query, +GET twitter/_validate/query?explain=true, +GET twitter/_validate/query?rewrite=true, +GET twitter/_validate/query?rewrite=true&all_shards=true, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequest.java, +     *, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    @Deprecated, +     *, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    @Deprecated, +++ b/docs/reference/search/validate.asciidoc, +GET twitter/_validate/query, +GET twitter/_validate/query, +GET twitter/_validate/query?explain=true, +GET twitter/_validate/query?rewrite=true, +GET twitter/_validate/query?rewrite=true&all_shards=true, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequest.java, +     *, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    @Deprecated, +     *, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    @Deprecated, +++ b/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestValidateQueryAction.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(RestValidateQueryAction.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal]" +, +        " Specifying types in validate query requests is deprecated.";, +, +, +        if (request.hasParam("type")) {, +            deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE);, +        }, +, +++ b/docs/reference/search/validate.asciidoc, +GET twitter/_validate/query, +GET twitter/_validate/query, +GET twitter/_validate/query?explain=true, +GET twitter/_validate/query?rewrite=true, +GET twitter/_validate/query?rewrite=true&all_shards=true, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequest.java, +     *, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    @Deprecated, +     *, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    @Deprecated, +++ b/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestValidateQueryAction.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(RestValidateQueryAction.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal]" +, +        " Specifying types in validate query requests is deprecated.";, +, +, +        if (request.hasParam("type")) {, +            deprecationLogger.deprecated(TYPES_DEPRECATION_MESSAGE);, +        }, +, +++ b/server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestValidateQueryActionTests.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;, +import org.elasticsearch.rest.RestChannel;, +    private static RestController controller = new RestController(emptySet(), null, client,, +        new NoneCircuitBreakerService(), usageService);, +, +    public void testTypeInPath() {, +        RestRequest request = new FakeRestRequest.Builder(xContentRegistry()), +            .withMethod(RestRequest.Method.GET), +            .withPath("/some_index/some_type/_validate/query"), +            .build();, +, +        performRequest(request);, +        assertWarnings(RestValidateQueryAction.TYPES_DEPRECATION_MESSAGE);, +    }, +, +    public void testTypeParameter() {, +        Map<String, String> params = new HashMap<>();, +        params.put("type", "some_type");, +        RestRequest request = new FakeRestRequest.Builder(xContentRegistry()), +            .withMethod(RestRequest.Method.GET), +            .withPath("_validate/query")]