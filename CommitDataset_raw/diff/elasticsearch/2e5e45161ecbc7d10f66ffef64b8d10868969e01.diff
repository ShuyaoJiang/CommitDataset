[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import java.util.ArrayList;, +                conflicts.add("mapper [" + name() + "] has different [format] values");, +                conflicts.add("mapper [" + name() + "] has different [locale] values");, +        final DateFieldMapper other = (DateFieldMapper) mergeWith;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import java.util.ArrayList;, +                conflicts.add("mapper [" + name() + "] has different [format] values");, +                conflicts.add("mapper [" + name() + "] has different [locale] values");, +        final DateFieldMapper other = (DateFieldMapper) mergeWith;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java, +        ParentFieldMapper fieldMergeWith = (ParentFieldMapper) mergeWith;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import java.util.ArrayList;, +                conflicts.add("mapper [" + name() + "] has different [format] values");, +                conflicts.add("mapper [" + name() + "] has different [locale] values");, +        final DateFieldMapper other = (DateFieldMapper) mergeWith;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java, +        ParentFieldMapper fieldMergeWith = (ParentFieldMapper) mergeWith;, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java, +import static org.hamcrest.Matchers.notNullValue;, +, +    public void testMergeDate() throws IOException {, +        String initMapping = XContentFactory.jsonBuilder().startObject().startObject("movie"), +            .startObject("properties"), +            .startObject("release_date").field("type", "date").field("format", "yyyy/MM/dd").endObject(), +            .endObject().endObject().endObject().string();, +        DocumentMapper initMapper = indexService.mapperService().merge("movie", new CompressedXContent(initMapping),, +            MapperService.MergeReason.MAPPING_UPDATE, randomBoolean());, +, +        assertThat(initMapper.mappers().getMapper("release_date"), notNullValue());, +        assertFalse(initMapper.mappers().getMapper("release_date").fieldType().stored());, +, +        String updateFormatMapping = XContentFactory.jsonBuilder().startObject().startObject("movie"), +            .startObject("properties"), +            .startObject("release_date").field("type", "date").field("format", "epoch_millis").endObject(), +            .endObject().endObject().endObject().string();, +, +        Exception e = expectThrows(IllegalArgumentException.class,, +            () -> indexService.mapperService().merge("movie", new CompressedXContent(updateFormatMapping),, +                MapperService.MergeReason.MAPPING_UPDATE, randomBoolean()));, +        assertThat(e.getMessage(), containsString("[mapper [release_date] has different [format] values]"));, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import java.util.ArrayList;, +                conflicts.add("mapper [" + name() + "] has different [format] values");, +                conflicts.add("mapper [" + name() + "] has different [locale] values");, +        final DateFieldMapper other = (DateFieldMapper) mergeWith;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java, +        ParentFieldMapper fieldMergeWith = (ParentFieldMapper) mergeWith;, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java, +import static org.hamcrest.Matchers.notNullValue;, +, +    public void testMergeDate() throws IOException {, +        String initMapping = XContentFactory.jsonBuilder().startObject().startObject("movie"), +            .startObject("properties"), +            .startObject("release_date").field("type", "date").field("format", "yyyy/MM/dd").endObject(), +            .endObject().endObject().endObject().string();, +        DocumentMapper initMapper = indexService.mapperService().merge("movie", new CompressedXContent(initMapping),, +            MapperService.MergeReason.MAPPING_UPDATE, randomBoolean());, +, +        assertThat(initMapper.mappers().getMapper("release_date"), notNullValue());, +        assertFalse(initMapper.mappers().getMapper("release_date").fieldType().stored());, +, +        String updateFormatMapping = XContentFactory.jsonBuilder().startObject().startObject("movie"), +            .startObject("properties"), +            .startObject("release_date").field("type", "date").field("format", "epoch_millis").endObject(), +            .endObject().endObject().endObject().string();, +, +        Exception e = expectThrows(IllegalArgumentException.class,, +            () -> indexService.mapperService().merge("movie", new CompressedXContent(updateFormatMapping),, +                MapperService.MergeReason.MAPPING_UPDATE, randomBoolean()));, +        assertThat(e.getMessage(), containsString("[mapper [release_date] has different [format] values]"));, +    }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java, +        addModifier(new Modifier("format", false) {, +        addModifier(new Modifier("locale", false) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import java.util.ArrayList;, +                conflicts.add("mapper [" + name() + "] has different [format] values");, +                conflicts.add("mapper [" + name() + "] has different [locale] values");, +        final DateFieldMapper other = (DateFieldMapper) mergeWith;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java, +        ParentFieldMapper fieldMergeWith = (ParentFieldMapper) mergeWith;, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java, +import static org.hamcrest.Matchers.notNullValue;, +, +    public void testMergeDate() throws IOException {, +        String initMapping = XContentFactory.jsonBuilder().startObject().startObject("movie"), +            .startObject("properties"), +            .startObject("release_date").field("type", "date").field("format", "yyyy/MM/dd").endObject(), +            .endObject().endObject().endObject().string();, +        DocumentMapper initMapper = indexService.mapperService().merge("movie", new CompressedXContent(initMapping),, +            MapperService.MergeReason.MAPPING_UPDATE, randomBoolean());, +, +        assertThat(initMapper.mappers().getMapper("release_date"), notNullValue());, +        assertFalse(initMapper.mappers().getMapper("release_date").fieldType().stored());, +, +        String updateFormatMapping = XContentFactory.jsonBuilder().startObject().startObject("movie"), +            .startObject("properties")]