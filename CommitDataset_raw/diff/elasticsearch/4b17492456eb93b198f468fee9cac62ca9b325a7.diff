[+++ b/build.gradle, +      javadoc = true, +  project.afterEvaluate {, +    // ignore missing javadocs, +    tasks.withType(Javadoc) { Javadoc javadoc ->, +      javadoc.options.addStringOption('Xdoclint:all,-missing', '-quiet'), +    }, +++ b/build.gradle, +      javadoc = true, +  project.afterEvaluate {, +    // ignore missing javadocs, +    tasks.withType(Javadoc) { Javadoc javadoc ->, +      javadoc.options.addStringOption('Xdoclint:all,-missing', '-quiet'), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +            project.tasks.withType(JavaCompile) { JavaCompile compile ->, +                compile.options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private,-missing', +                compile.options.encoding = 'UTF-8', +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/build.gradle, +      javadoc = true, +  project.afterEvaluate {, +    // ignore missing javadocs, +    tasks.withType(Javadoc) { Javadoc javadoc ->, +      javadoc.options.addStringOption('Xdoclint:all,-missing', '-quiet'), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +            project.tasks.withType(JavaCompile) { JavaCompile compile ->, +                compile.options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private,-missing', +                compile.options.encoding = 'UTF-8', +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * A {@link ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/build.gradle, +      javadoc = true, +  project.afterEvaluate {, +    // ignore missing javadocs, +    tasks.withType(Javadoc) { Javadoc javadoc ->, +      javadoc.options.addStringOption('Xdoclint:all,-missing', '-quiet'), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +            project.tasks.withType(JavaCompile) { JavaCompile compile ->, +                compile.options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private,-missing', +                compile.options.encoding = 'UTF-8', +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * A {@link ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterService.java, +     * @return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue, +++ b/build.gradle, +      javadoc = true, +  project.afterEvaluate {, +    // ignore missing javadocs, +    tasks.withType(Javadoc) { Javadoc javadoc ->, +      javadoc.options.addStringOption('Xdoclint:all,-missing', '-quiet'), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +            project.tasks.withType(JavaCompile) { JavaCompile compile ->, +                compile.options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private,-missing', +                compile.options.encoding = 'UTF-8', +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * A {@link ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterService.java, +     * @return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue, +++ b/core/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +     * Create a new DiskUsage, if {@code totalBytes} is 0, {@link #getFreeDiskAsPercentage()}, +++ b/build.gradle, +      javadoc = true, +  project.afterEvaluate {, +    // ignore missing javadocs, +    tasks.withType(Javadoc) { Javadoc javadoc ->, +      javadoc.options.addStringOption('Xdoclint:all,-missing', '-quiet'), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +            project.tasks.withType(JavaCompile) { JavaCompile compile ->, +                compile.options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private,-missing', +                compile.options.encoding = 'UTF-8', +        project.afterEvaluate {]