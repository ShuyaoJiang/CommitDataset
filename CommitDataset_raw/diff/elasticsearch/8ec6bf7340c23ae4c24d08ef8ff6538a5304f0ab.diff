[+++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.artifactId}', +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.artifactId}', +++ b/config/logging.yml, +, +  # deprecation logging, turn to DEBUG to see them, +  deprecation: INFO, deprecation_log_file, +, +  deprecation: false, +  deprecation_log_file:, +    type: dailyRollingFile, +    file: ${path.logs}/${cluster.name}_deprecation.log, +    datePattern: "'.'yyyy-MM-dd", +    layout:, +      type: pattern, +      conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n", +, +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.artifactId}', +++ b/config/logging.yml, +, +  # deprecation logging, turn to DEBUG to see them, +  deprecation: INFO, deprecation_log_file, +, +  deprecation: false, +  deprecation_log_file:, +    type: dailyRollingFile, +    file: ${path.logs}/${cluster.name}_deprecation.log, +    datePattern: "'.'yyyy-MM-dd", +    layout:, +      type: pattern, +      conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n", +, +++ b/dev-tools/build_release.py, +from functools import partial, +# console colors, +COLOR_OK = '\033[92m', +COLOR_END = '\033[0m', +COLOR_FAIL = '\033[91m', +, +def run_and_print(text, run_function):, +  try:, +    print(text, end=''), +    run_function(), +    print(COLOR_OK + 'OK' + COLOR_END), +    return True, +  except RuntimeError:, +    print(COLOR_FAIL + 'NOT OK' + COLOR_END), +    return False, +, +def check_env_var(text, env_var):, +  try:, +    print(text, end=''), +    env[env_var], +    print(COLOR_OK + 'OK' + COLOR_END), +    return True, +  except KeyError:, +    print(COLOR_FAIL + 'NOT OK' + COLOR_END), +    return False, +, +def check_environment_and_commandline_tools(check_only):, +  checks = list(), +  checks.append(check_env_var('Checking for AWS env configuration AWS_SECRET_ACCESS_KEY_ID...     ', 'AWS_SECRET_ACCESS_KEY')), +  checks.append(check_env_var('Checking for AWS env configuration AWS_ACCESS_KEY_ID...            ', 'AWS_ACCESS_KEY_ID')), +  checks.append(check_env_var('Checking for SONATYPE env configuration SONATYPE_USERNAME...       ', 'SONATYPE_USERNAME')), +  checks.append(check_env_var('Checking for SONATYPE env configuration SONATYPE_PASSWORD...       ', 'SONATYPE_PASSWORD')), +  checks.append(check_env_var('Checking for GPG env configuration GPG_KEY_ID...                   ', 'GPG_KEY_ID')), +  checks.append(check_env_var('Checking for GPG env configuration GPG_PASSPHRASE...               ', 'GPG_PASSPHRASE')), +  checks.append(check_env_var('Checking for S3 repo upload env configuration S3_BUCKET_SYNC_TO... ', 'S3_BUCKET_SYNC_TO')), +  checks.append(check_env_var('Checking for git env configuration GIT_AUTHOR_NAME...              ', 'GIT_AUTHOR_NAME')), +  checks.append(check_env_var('Checking for git env configuration GIT_AUTHOR_EMAIL...             ', 'GIT_AUTHOR_EMAIL')), +, +  checks.append(run_and_print('Checking command: rpm...            ', partial(check_command_exists, 'rpm', 'rpm --version'))), +  checks.append(run_and_print('Checking command: dpkg...           ', partial(check_command_exists, 'dpkg', 'dpkg --version'))), +  checks.append(run_and_print('Checking command: gpg...            ', partial(check_command_exists, 'gpg', 'gpg --version'))), +  checks.append(run_and_print('Checking command: expect...         ', partial(check_command_exists, 'expect', 'expect -v'))), +  checks.append(run_and_print('Checking command: createrepo...     ', partial(check_command_exists, 'createrepo', 'createrepo --version'))), +  checks.append(run_and_print('Checking command: s3cmd...          ', partial(check_command_exists, 's3cmd', 's3cmd --version'))), +  checks.append(run_and_print('Checking command: apt-ftparchive... ', partial(check_command_exists, 'apt-ftparchive', 'apt-ftparchive --version'))), +, +  # boto, check error code being returned, +  location = os.path.dirname(os.path.realpath(__file__)), +  command = 'python %s/upload-s3.py -h' % (location), +  checks.append(run_and_print('Testing boto python dependency...   ', partial(check_command_exists, 'python-boto', command))), +, +  checks.append(run_and_print('Checking java version...            ', partial(verify_java_version, '1.7'))), +  checks.append(run_and_print('Checking java mvn version...        ', partial(verify_mvn_java_version, '1.7', MVN))), +, +  if check_only:, +    sys.exit(0), +, +  if False in checks:, +    print("Exiting due to failing checks"), +    sys.exit(0), +  parser.add_argument('--check-only', dest='check_only', action='store_true',, +                      help='Checks and reports for all requirements and then exits'), +  parser.set_defaults(check_only=False), +  check_environment_and_commandline_tools(args.check_only), +]