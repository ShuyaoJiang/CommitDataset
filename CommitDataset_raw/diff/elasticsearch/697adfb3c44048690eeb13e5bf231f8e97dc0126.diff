[+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java, +import static java.util.Collections.emptyList;, +    public void testCanFetchIndexStatus() throws Exception {, +        // First latch waits for the task to start, second on blocks it from finishing., +        Thread index = null;, +                                assertTrue(letTaskFinish.await(10, TimeUnit.SECONDS));, +            // Need to run the task in a separate thread because node client's .execute() is blocked by our task listener, +            index = new Thread(() -> {, +                IndexResponse indexResponse = client().prepareIndex("test", "test").setSource("test", "test").get();, +                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures());, +            });, +            index.start();, +            assertTrue(taskRegistered.await(10, TimeUnit.SECONDS)); // waiting for at least one task to be registered, +            if (index != null) {, +                index.join();, +            assertBusy(() -> {, +                assertEquals(emptyList(),, +                        client().admin().cluster().prepareListTasks().setActions("indices:data/write/index*").get().getTasks());, +            });, +            assertThat(response.getTasks(), hasSize(1));, +            TaskInfo task = response.getTasks().get(0);, +            assertEquals(TestTaskPlugin.TestTaskAction.NAME, task.getAction());, +            // But the task's details should still be there because we grabbed a reference to the task before waiting for it to complete., +            assertNotNull(response.getTask().getTask());, +            assertEquals(TestTaskPlugin.TestTaskAction.NAME, response.getTask().getTask().getAction());, +            // The task's details should also be there, +            assertNotNull(response.getTask().getTask());, +            assertEquals(TestTaskPlugin.TestTaskAction.NAME, response.getTask().getTask().getAction());, +                        waitForWaitingToStart.countDown();, +            /* Wait for the wait to start. This should count down just *before* we wait for completion but after the list/get has got a, +             * reference to the running task. Because we unblock immediately after this the task may no longer be running for us to wait, +             * on which is fine. */, +        TestTaskPlugin.NodesResponse response = future.get();, +        assertEquals(emptyList(), response.failures());]