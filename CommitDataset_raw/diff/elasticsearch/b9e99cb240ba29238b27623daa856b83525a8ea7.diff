[+++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.index();, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.index();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).mappings();, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.index();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).mappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.index();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).mappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.settings());, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.index();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).mappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.settings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.index();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).mappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.settings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        BytesReference source = null;, +                        if (request.searchRequest().source() != null && request.searchRequest().source().length() > 0) {, +                            source = request.searchRequest().source();, +                        } else if (request.searchRequest().extraSource() != null && request.searchRequest().extraSource().length() > 0) {, +                            source = request.searchRequest().extraSource();, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.index();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).mappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.settings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        BytesReference source = null;, +                        if (request.searchRequest().source() != null && request.searchRequest().source().length() > 0) {, +                            source = request.searchRequest().source();, +                        } else if (request.searchRequest().extraSource() != null && request.searchRequest().extraSource().length() > 0) {, +                            source = request.searchRequest().extraSource();, +++ b/core/src/main/java/org/elasticsearch/action/count/CountRequest.java, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.action.support.QuerySourceBuilder;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;]