[+++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Adds a settings consumer that accepts the values for two settings., +     * See {@link #addSettingsUpdateConsumer(Setting, Setting, BiConsumer, BiConsumer)} for details., +     */, +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b, BiConsumer<A, B> consumer) {, +        addSettingsUpdateConsumer(a, b, consumer, (i, j) -> {} );, +    }, +, +    /**, +     * Adds a settings consumer that accepts the values for two settings. The consumer is only notified if one or both settings change, +     * and if the provided validator succeeded., +     * This method registers a compound updater that is useful if two settings are depending on each other., +     * The consumer is always provided with both values even if only one of the two changes., +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b,, +                                                              BiConsumer<A, B> consumer, BiConsumer<A, B> validator) {, +        addSettingsUpdater(Setting.compoundUpdater(consumer, validator, a, b, logger));, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Adds a settings consumer that accepts the values for two settings., +     * See {@link #addSettingsUpdateConsumer(Setting, Setting, BiConsumer, BiConsumer)} for details., +     */, +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b, BiConsumer<A, B> consumer) {, +        addSettingsUpdateConsumer(a, b, consumer, (i, j) -> {} );, +    }, +, +    /**, +     * Adds a settings consumer that accepts the values for two settings. The consumer is only notified if one or both settings change, +     * and if the provided validator succeeded., +     * This method registers a compound updater that is useful if two settings are depending on each other., +     * The consumer is always provided with both values even if only one of the two changes., +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b,, +                                                              BiConsumer<A, B> consumer, BiConsumer<A, B> validator) {, +        addSettingsUpdater(Setting.compoundUpdater(consumer, validator, a, b, logger));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    SearchService.MAX_KEEPALIVE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Adds a settings consumer that accepts the values for two settings., +     * See {@link #addSettingsUpdateConsumer(Setting, Setting, BiConsumer, BiConsumer)} for details., +     */, +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b, BiConsumer<A, B> consumer) {, +        addSettingsUpdateConsumer(a, b, consumer, (i, j) -> {} );, +    }, +, +    /**, +     * Adds a settings consumer that accepts the values for two settings. The consumer is only notified if one or both settings change, +     * and if the provided validator succeeded., +     * This method registers a compound updater that is useful if two settings are depending on each other., +     * The consumer is always provided with both values even if only one of the two changes., +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b,, +                                                              BiConsumer<A, B> consumer, BiConsumer<A, B> validator) {, +        addSettingsUpdater(Setting.compoundUpdater(consumer, validator, a, b, logger));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    SearchService.MAX_KEEPALIVE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {, +                A valueA = aSettingUpdater.getValue(current, previous);, +                B valueB = bSettingUpdater.getValue(current, previous);, +                validator.accept(valueA, valueB);, +                return new Tuple<>(valueA, valueB);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Adds a settings consumer that accepts the values for two settings., +     * See {@link #addSettingsUpdateConsumer(Setting, Setting, BiConsumer, BiConsumer)} for details., +     */, +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b, BiConsumer<A, B> consumer) {, +        addSettingsUpdateConsumer(a, b, consumer, (i, j) -> {} );, +    }, +, +    /**, +     * Adds a settings consumer that accepts the values for two settings. The consumer is only notified if one or both settings change, +     * and if the provided validator succeeded., +     * This method registers a compound updater that is useful if two settings are depending on each other., +     * The consumer is always provided with both values even if only one of the two changes., +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b,, +                                                              BiConsumer<A, B> consumer, BiConsumer<A, B> validator) {, +        addSettingsUpdater(Setting.compoundUpdater(consumer, validator, a, b, logger));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    SearchService.MAX_KEEPALIVE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {, +                A valueA = aSettingUpdater.getValue(current, previous);, +                B valueB = bSettingUpdater.getValue(current, previous);, +                validator.accept(valueA, valueB);, +                return new Tuple<>(valueA, valueB);, +++ b/core/src/main/java/org/elasticsearch/index/reindex/WorkerBulkByScrollTaskState.java, +import static java.lang.Math.min;, +    /**, +     * Maximum wait time allowed for throttling., +     */, +    private static final TimeValue MAX_THROTTLE_WAIT_TIME =  TimeValue.timeValueHours(1);, +, +        long waitTime = min(MAX_THROTTLE_WAIT_TIME.nanos(), max(0, earliestNextBatchStartTime - System.nanoTime()));, +        return timeValueNanos(waitTime);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Adds a settings consumer that accepts the values for two settings., +     * See {@link #addSettingsUpdateConsumer(Setting, Setting, BiConsumer, BiConsumer)} for details., +     */, +    public synchronized <A, B> void addSettingsUpdateConsumer(Setting<A> a, Setting<B> b, BiConsumer<A, B> consumer) {, +        addSettingsUpdateConsumer(a, b, consumer, (i, j) -> {} );, +    }, +, +    /**]