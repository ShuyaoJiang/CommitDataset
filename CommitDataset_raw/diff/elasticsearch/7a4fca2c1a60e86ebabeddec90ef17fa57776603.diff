[+++ b/.idea/dictionaries/kimchy.xml, +      <w>bbox</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>bbox</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/geo/GeoDistanceSearchBenchmark.java, +        System.err.println("--> Warming up (ARC) - optimize_bbox");, +            run(client, GeoDistance.ARC, true);, +        System.err.println("--> Warmup (ARC)  - optimize_bbox " + (totalTime / NUM_WARM) + "ms");, +        System.err.println("--> Perf (ARC) - optimize_bbox");, +            run(client, GeoDistance.ARC, true);, +        System.err.println("--> Perf (ARC) - optimize_bbox " + (totalTime / NUM_RUNS) + "ms");, +, +        System.err.println("--> Warming up (ARC)  - no optimize_bbox");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_WARM; i++) {, +            run(client, GeoDistance.ARC, false);, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Warmup (ARC) - no optimize_bbox " + (totalTime / NUM_WARM) + "ms");, +, +        System.err.println("--> Perf (ARC) - no optimize_bbox");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_RUNS; i++) {, +            run(client, GeoDistance.ARC, false);, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Perf (ARC) - no optimize_bbox " + (totalTime / NUM_RUNS) + "ms");, +            run(client, GeoDistance.PLANE, true);, +        System.err.println("--> Warmup (PLANE) " + (totalTime / NUM_WARM) + "ms");, +            run(client, GeoDistance.PLANE, true);, +        System.err.println("--> Perf (PLANE) " + (totalTime / NUM_RUNS) + "ms");, +    public static void run(Client client, GeoDistance geoDistance, boolean optimizeBbox) {, +                        .optimizeBbox(optimizeBbox), +++ b/.idea/dictionaries/kimchy.xml, +      <w>bbox</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/geo/GeoDistanceSearchBenchmark.java, +        System.err.println("--> Warming up (ARC) - optimize_bbox");, +            run(client, GeoDistance.ARC, true);, +        System.err.println("--> Warmup (ARC)  - optimize_bbox " + (totalTime / NUM_WARM) + "ms");, +        System.err.println("--> Perf (ARC) - optimize_bbox");, +            run(client, GeoDistance.ARC, true);, +        System.err.println("--> Perf (ARC) - optimize_bbox " + (totalTime / NUM_RUNS) + "ms");, +, +        System.err.println("--> Warming up (ARC)  - no optimize_bbox");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_WARM; i++) {, +            run(client, GeoDistance.ARC, false);, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Warmup (ARC) - no optimize_bbox " + (totalTime / NUM_WARM) + "ms");, +, +        System.err.println("--> Perf (ARC) - no optimize_bbox");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_RUNS; i++) {, +            run(client, GeoDistance.ARC, false);, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Perf (ARC) - no optimize_bbox " + (totalTime / NUM_RUNS) + "ms");, +            run(client, GeoDistance.PLANE, true);, +        System.err.println("--> Warmup (PLANE) " + (totalTime / NUM_WARM) + "ms");, +            run(client, GeoDistance.PLANE, true);, +        System.err.println("--> Perf (PLANE) " + (totalTime / NUM_RUNS) + "ms");, +    public static void run(Client client, GeoDistance geoDistance, boolean optimizeBbox) {, +                        .optimizeBbox(optimizeBbox), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointDocFieldData.java, +    public double factorDistance02(double lat, double lon) {, +        return fieldData.factorDistance(docId, DistanceUnit.MILES, lat, lon) + 1;, +    }, +, +    public double factorDistance13(double lat, double lon) {, +        return fieldData.factorDistance(docId, DistanceUnit.MILES, lat, lon) + 2;, +    }, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>bbox</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/geo/GeoDistanceSearchBenchmark.java, +        System.err.println("--> Warming up (ARC) - optimize_bbox");, +            run(client, GeoDistance.ARC, true);, +        System.err.println("--> Warmup (ARC)  - optimize_bbox " + (totalTime / NUM_WARM) + "ms");, +        System.err.println("--> Perf (ARC) - optimize_bbox");, +            run(client, GeoDistance.ARC, true);, +        System.err.println("--> Perf (ARC) - optimize_bbox " + (totalTime / NUM_RUNS) + "ms");, +, +        System.err.println("--> Warming up (ARC)  - no optimize_bbox");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_WARM; i++) {, +            run(client, GeoDistance.ARC, false);, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Warmup (ARC) - no optimize_bbox " + (totalTime / NUM_WARM) + "ms");, +, +        System.err.println("--> Perf (ARC) - no optimize_bbox");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_RUNS; i++) {, +            run(client, GeoDistance.ARC, false);, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Perf (ARC) - no optimize_bbox " + (totalTime / NUM_RUNS) + "ms");, +            run(client, GeoDistance.PLANE, true);, +        System.err.println("--> Warmup (PLANE) " + (totalTime / NUM_WARM) + "ms");]