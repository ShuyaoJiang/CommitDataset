[+++ b/docs/reference/mapping/types/geo-shape-type.asciidoc, +supported value. PERFORMANCE NOTE: This value will be default to 0 if a `precision` or, +`tree_level` definition is explicitly defined. This guarantees spatial precision, +at the level defined in the mapping. This can lead to significant memory usage, +for high resolution shapes with low error (e.g., large shapes at 1m with < 0.001 error)., +To improve indexing performance (at the cost of query accuracy) explicitly define, +`tree_level` or `precision` along with a reasonable `distance_error_pct`, noting, +that large shapes will have greater false positives., +++ b/docs/reference/mapping/types/geo-shape-type.asciidoc, +supported value. PERFORMANCE NOTE: This value will be default to 0 if a `precision` or, +`tree_level` definition is explicitly defined. This guarantees spatial precision, +at the level defined in the mapping. This can lead to significant memory usage, +for high resolution shapes with low error (e.g., large shapes at 1m with < 0.001 error)., +To improve indexing performance (at the cost of query accuracy) explicitly define, +`tree_level` or `precision` along with a reasonable `distance_error_pct`, noting, +that large shapes will have greater false positives., +++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapper.java, +        private boolean distErrPctDefined;, +        private final int getLevels(int treeLevels, double precisionInMeters, int defaultLevels, boolean geoHash) {, +                // if the user specified a precision but not a distance error percent then zero out the distance err pct, +                // this is done to guarantee precision specified by the user without doing something unexpected under the covers, +                if (!distErrPctDefined) distanceErrorPct = 0;, +    }, +            // if index was created before 1.6, this conditional should be true (this forces any index created on/or after 1.6 to use 0 for, +            // the default distanceErrorPct parameter)., +            builder.distErrPctDefined = parserContext.indexVersionCreated().before(Version.V_1_6_0);, +                    builder.distErrPctDefined = true;, +        if (mergeContext.hasConflicts() || mergeContext.mergeFlags().simulate()) {, +++ b/docs/reference/mapping/types/geo-shape-type.asciidoc, +supported value. PERFORMANCE NOTE: This value will be default to 0 if a `precision` or, +`tree_level` definition is explicitly defined. This guarantees spatial precision, +at the level defined in the mapping. This can lead to significant memory usage, +for high resolution shapes with low error (e.g., large shapes at 1m with < 0.001 error)., +To improve indexing performance (at the cost of query accuracy) explicitly define, +`tree_level` or `precision` along with a reasonable `distance_error_pct`, noting, +that large shapes will have greater false positives., +++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapper.java, +        private boolean distErrPctDefined;, +        private final int getLevels(int treeLevels, double precisionInMeters, int defaultLevels, boolean geoHash) {, +                // if the user specified a precision but not a distance error percent then zero out the distance err pct, +                // this is done to guarantee precision specified by the user without doing something unexpected under the covers, +                if (!distErrPctDefined) distanceErrorPct = 0;, +    }, +            // if index was created before 1.6, this conditional should be true (this forces any index created on/or after 1.6 to use 0 for, +            // the default distanceErrorPct parameter)., +            builder.distErrPctDefined = parserContext.indexVersionCreated().before(Version.V_1_6_0);, +                    builder.distErrPctDefined = true;, +        if (mergeContext.hasConflicts() || mergeContext.mergeFlags().simulate()) {, +++ b/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java, +            // 70m is more precise so it wins, +                    .field("tree", "quadtree"), +                    .field("tree_levels", "26"), +                    .field("precision", "70m"), +                    .endObject().endObject(), +                    .endObject().endObject().string();, +, +, +            DocumentMapper defaultMapper = parser.parse(mapping);, +            FieldMapper fieldMapper = defaultMapper.mappers().name("location").mapper();, +            assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));, +, +            GeoShapeFieldMapper geoShapeFieldMapper = (GeoShapeFieldMapper) fieldMapper;, +            PrefixTreeStrategy strategy = geoShapeFieldMapper.defaultStrategy();, +, +            // distance_error_pct was not specified so we expect the mapper to take the highest precision between "precision" and, +            // "tree_levels" setting distErrPct to 0 to guarantee desired precision, +            assertThat(strategy.getDistErrPct(), equalTo(0.0));, +            assertThat(strategy.getGrid(), instanceOf(QuadPrefixTree.class));, +            // 70m is less precise so it loses, +            assertThat(strategy.getGrid().getMaxLevels(), equalTo(26));, +        }, +        , +        {, +            String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1"), +                    .startObject("properties").startObject("location"), +                        .field("type", "geo_shape"), +            // 70m is more precise so it wins]