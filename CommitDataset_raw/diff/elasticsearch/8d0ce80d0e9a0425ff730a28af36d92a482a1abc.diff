[+++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/HttpESExporter.java, +            logger.trace("auto-resolved hosts to {}", (Object)extractedHosts);, +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/HttpESExporter.java, +            logger.trace("auto-resolved hosts to {}", (Object)extractedHosts);, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/cluster/ClusterInfoIT.java, +        String uid = (String) license.get(ClusterInfoRenderer.Fields.UID.underscore().toString());, +        String type = (String) license.get(ClusterInfoRenderer.Fields.TYPE.underscore().toString());, +        String status = (String) license.get(ClusterInfoRenderer.Fields.STATUS.underscore().toString());, +        Long expiryDate = (Long) license.get(ClusterInfoRenderer.Fields.EXPIRY_DATE_IN_MILLIS.underscore().toString());, +        String hkey = (String) license.get(ClusterInfoRenderer.Fields.HKEY.underscore().toString());, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.FEATURE.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUER.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUED_TO.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((Long) license.get(ClusterInfoRenderer.Fields.ISSUE_DATE_IN_MILLIS.underscore().toString()), greaterThan(0L));, +        assertThat((Integer) license.get(ClusterInfoRenderer.Fields.MAX_NODES.underscore().toString()), greaterThan(0));, +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/HttpESExporter.java, +            logger.trace("auto-resolved hosts to {}", (Object)extractedHosts);, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/cluster/ClusterInfoIT.java, +        String uid = (String) license.get(ClusterInfoRenderer.Fields.UID.underscore().toString());, +        String type = (String) license.get(ClusterInfoRenderer.Fields.TYPE.underscore().toString());, +        String status = (String) license.get(ClusterInfoRenderer.Fields.STATUS.underscore().toString());, +        Long expiryDate = (Long) license.get(ClusterInfoRenderer.Fields.EXPIRY_DATE_IN_MILLIS.underscore().toString());, +        String hkey = (String) license.get(ClusterInfoRenderer.Fields.HKEY.underscore().toString());, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.FEATURE.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUER.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUED_TO.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((Long) license.get(ClusterInfoRenderer.Fields.ISSUE_DATE_IN_MILLIS.underscore().toString()), greaterThan(0L));, +        assertThat((Integer) license.get(ClusterInfoRenderer.Fields.MAX_NODES.underscore().toString()), greaterThan(0));, +++ b/qa/pom.xml, +        <module>shield-client-tests</module>, +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/HttpESExporter.java, +            logger.trace("auto-resolved hosts to {}", (Object)extractedHosts);, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/cluster/ClusterInfoIT.java, +        String uid = (String) license.get(ClusterInfoRenderer.Fields.UID.underscore().toString());, +        String type = (String) license.get(ClusterInfoRenderer.Fields.TYPE.underscore().toString());, +        String status = (String) license.get(ClusterInfoRenderer.Fields.STATUS.underscore().toString());, +        Long expiryDate = (Long) license.get(ClusterInfoRenderer.Fields.EXPIRY_DATE_IN_MILLIS.underscore().toString());, +        String hkey = (String) license.get(ClusterInfoRenderer.Fields.HKEY.underscore().toString());, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.FEATURE.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUER.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUED_TO.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((Long) license.get(ClusterInfoRenderer.Fields.ISSUE_DATE_IN_MILLIS.underscore().toString()), greaterThan(0L));, +        assertThat((Integer) license.get(ClusterInfoRenderer.Fields.MAX_NODES.underscore().toString()), greaterThan(0));, +++ b/qa/pom.xml, +        <module>shield-client-tests</module>, +++ b/qa/shield-client-tests/integration-tests.xml, +<?xml version="1.0"?>, +<!--, +  ~ ELASTICSEARCH CONFIDENTIAL, +  ~ __________________, +  ~, +  ~  [2014] Elasticsearch Incorporated. All Rights Reserved., +  ~, +  ~ NOTICE:  All information contained herein is, and remains, +  ~ the property of Elasticsearch Incorporated and its suppliers,, +  ~ if any.  The intellectual and technical concepts contained, +  ~ herein are proprietary to Elasticsearch Incorporated, +  ~ and its suppliers and may be covered by U.S. and Foreign Patents,, +  ~ patents in process, and are protected by trade secret or copyright law., +  ~ Dissemination of this information or reproduction of this material, +  ~ is strictly forbidden unless prior written permission is obtained, +  ~ from Elasticsearch Incorporated., +  -->, +, +<project name="shield-client-tests", +         xmlns:ac="antlib:net.sf.antcontrib">, +, +  <import file="${elasticsearch.integ.antfile.default}"/>, +, +  <!-- redefined to work with auth -->, +  <macrodef name="waitfor-elasticsearch">, +      <attribute name="port"/>, +      <attribute name="timeoutproperty"/>, +    <sequential>, +      <echo>Waiting for elasticsearch to become available on port @{port}...</echo>, +      <waitfor maxwait="30" maxwaitunit="second", +               checkevery="500" checkeveryunit="millisecond", +               timeoutproperty="@{timeoutproperty}">, +        <socket server="127.0.0.1" port="@{port}"/>, +      </waitfor>, +    </sequential>, +  </macrodef>, +, +  <target name="start-external-cluster-with-plugin" depends="setup-workspace">, +    <ac:for list="${xplugins.list}" param="xplugin.name">, +      <sequential>, +        <fail message="Expected @{xplugin.name}-${version}.zip as a dependency, but could not be found in ${integ.deps}/plugins}">, +          <condition>, +            <not>, +              <available file="${integ.deps}/plugins/@{xplugin.name}-${elasticsearch.version}.zip" />]