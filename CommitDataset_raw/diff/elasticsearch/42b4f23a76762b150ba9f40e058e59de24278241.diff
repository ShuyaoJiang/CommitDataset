[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionDefinition.java, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionDefinition.java, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.Cast;, +import org.elasticsearch.xpack.sql.type.DataType;, +        // DataType conversion, +        addToMap(def(Cast.class, Cast::new, "CONVERT"));, +    void addToMap(FunctionDefinition...functions) {, +    /**, +     * Special method to create function definition for {@link Cast} as its, +     * signature is not compatible with {@link UnresolvedFunction}, +     *, +     * @return Cast function definition, +     */, +    @SuppressWarnings("overloads")  // These are ambiguous if you aren't using ctor references but we always do, +    private static <T extends Function> FunctionDefinition def(Class<T> function,, +                                                               CastFunctionBuilder<T> ctorRef,, +                                                               String... aliases) {, +        FunctionBuilder builder = (location, children, distinct, tz) ->, +            ctorRef.build(location, children.get(0), children.get(0).dataType());, +        return def(function, builder, false, aliases);, +    }, +    private interface CastFunctionBuilder<T> {, +        T build(Location location, Expression expression, DataType dataType);, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionDefinition.java, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.Cast;, +import org.elasticsearch.xpack.sql.type.DataType;, +        // DataType conversion, +        addToMap(def(Cast.class, Cast::new, "CONVERT"));, +    void addToMap(FunctionDefinition...functions) {, +    /**, +     * Special method to create function definition for {@link Cast} as its, +     * signature is not compatible with {@link UnresolvedFunction}, +     *, +     * @return Cast function definition, +     */, +    @SuppressWarnings("overloads")  // These are ambiguous if you aren't using ctor references but we always do, +    private static <T extends Function> FunctionDefinition def(Class<T> function,, +                                                               CastFunctionBuilder<T> ctorRef,, +                                                               String... aliases) {, +        FunctionBuilder builder = (location, children, distinct, tz) ->, +            ctorRef.build(location, children.get(0), children.get(0).dataType());, +        return def(function, builder, false, aliases);, +    }, +    private interface CastFunctionBuilder<T> {, +        T build(Location location, Expression expression, DataType dataType);, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionType.java, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionDefinition.java, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.Cast;, +import org.elasticsearch.xpack.sql.type.DataType;, +        // DataType conversion, +        addToMap(def(Cast.class, Cast::new, "CONVERT"));, +    void addToMap(FunctionDefinition...functions) {, +    /**, +     * Special method to create function definition for {@link Cast} as its, +     * signature is not compatible with {@link UnresolvedFunction}, +     *, +     * @return Cast function definition, +     */, +    @SuppressWarnings("overloads")  // These are ambiguous if you aren't using ctor references but we always do, +    private static <T extends Function> FunctionDefinition def(Class<T> function,, +                                                               CastFunctionBuilder<T> ctorRef,, +                                                               String... aliases) {, +        FunctionBuilder builder = (location, children, distinct, tz) ->, +            ctorRef.build(location, children.get(0), children.get(0).dataType());, +        return def(function, builder, false, aliases);, +    }, +    private interface CastFunctionBuilder<T> {, +        T build(Location location, Expression expression, DataType dataType);, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionType.java, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Cast.java, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionDefinition.java, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.Cast;, +import org.elasticsearch.xpack.sql.type.DataType;, +        // DataType conversion, +        addToMap(def(Cast.class, Cast::new, "CONVERT"));, +    void addToMap(FunctionDefinition...functions) {, +    /**, +     * Special method to create function definition for {@link Cast} as its, +     * signature is not compatible with {@link UnresolvedFunction}, +     *, +     * @return Cast function definition, +     */]