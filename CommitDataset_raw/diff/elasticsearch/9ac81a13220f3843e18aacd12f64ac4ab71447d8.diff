[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest;, +    static Request getSnapshots(GetSnapshotsRequest getSnapshotsRequest) {, +        EndpointBuilder endpointBuilder = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(getSnapshotsRequest.repository());, +        String endpoint;, +        if (getSnapshotsRequest.snapshots().length == 0) {, +            endpoint = endpointBuilder.addPathPart("_all").build();, +        } else {, +            endpoint = endpointBuilder.addCommaSeparatedPathParts(getSnapshotsRequest.snapshots()).build();, +        }, +, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(getSnapshotsRequest.masterNodeTimeout());, +        parameters.putParam("ignore_unavailable", Boolean.toString(getSnapshotsRequest.ignoreUnavailable()));, +        parameters.putParam("verbose", Boolean.toString(getSnapshotsRequest.verbose()));, +, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest;, +    static Request getSnapshots(GetSnapshotsRequest getSnapshotsRequest) {, +        EndpointBuilder endpointBuilder = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(getSnapshotsRequest.repository());, +        String endpoint;, +        if (getSnapshotsRequest.snapshots().length == 0) {, +            endpoint = endpointBuilder.addPathPart("_all").build();, +        } else {, +            endpoint = endpointBuilder.addCommaSeparatedPathParts(getSnapshotsRequest.snapshots()).build();, +        }, +, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(getSnapshotsRequest.masterNodeTimeout());, +        parameters.putParam("ignore_unavailable", Boolean.toString(getSnapshotsRequest.ignoreUnavailable()));, +        parameters.putParam("verbose", Boolean.toString(getSnapshotsRequest.verbose()));, +, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;, +     * Get snapshots., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     *, +     * @param getSnapshotsRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetSnapshotsResponse get(GetSnapshotsRequest getSnapshotsRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(getSnapshotsRequest, RequestConverters::getSnapshots, options,, +            GetSnapshotsResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously get snapshots., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     *, +     * @param getSnapshotsRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void getAsync(GetSnapshotsRequest getSnapshotsRequest, RequestOptions options, ActionListener<GetSnapshotsResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(getSnapshotsRequest, RequestConverters::getSnapshots, options,, +            GetSnapshotsResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest;, +    static Request getSnapshots(GetSnapshotsRequest getSnapshotsRequest) {, +        EndpointBuilder endpointBuilder = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(getSnapshotsRequest.repository());, +        String endpoint;, +        if (getSnapshotsRequest.snapshots().length == 0) {, +            endpoint = endpointBuilder.addPathPart("_all").build();, +        } else {, +            endpoint = endpointBuilder.addCommaSeparatedPathParts(getSnapshotsRequest.snapshots()).build();, +        }, +, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(getSnapshotsRequest.masterNodeTimeout());, +        parameters.putParam("ignore_unavailable", Boolean.toString(getSnapshotsRequest.ignoreUnavailable()));, +        parameters.putParam("verbose", Boolean.toString(getSnapshotsRequest.verbose()));, +, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest;]