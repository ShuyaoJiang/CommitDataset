[+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/PackageTestCase.java, +import org.apache.http.client.fluent.Request;, +import org.elasticsearch.packaging.util.FileUtils;, +import org.hamcrest.CoreMatchers;, +import java.nio.file.Paths;, +import static org.elasticsearch.packaging.util.FileUtils.append;, +import static org.elasticsearch.packaging.util.FileUtils.assertPathsExist;, +import static org.elasticsearch.packaging.util.FileUtils.cp;, +import static org.elasticsearch.packaging.util.FileUtils.fileWithGlobExist;, +import static org.elasticsearch.packaging.util.FileUtils.mkdir;, +import static org.elasticsearch.packaging.util.FileUtils.rm;, +import static org.elasticsearch.packaging.util.FileUtils.slurp;, +import static org.elasticsearch.packaging.util.Packages.restartElasticsearch;, +import static org.elasticsearch.packaging.util.ServerUtils.makeRequest;, +import static org.hamcrest.CoreMatchers.equalTo;, +    private Shell sh;, +        sh = newShell();, +        verifyPackageInstallation(installation, distribution(), sh);, +        assertThat(sh.run(installation.bin("elasticsearch-plugin") + " list").stdout, isEmptyString());, +    public void test30DaemonIsNotEnabledOnRestart() {, +        if (isSystemd()) {, +            sh.run("systemctl daemon-reload");, +            String isEnabledOutput = sh.runIgnoreExitCode("systemctl is-enabled elasticsearch.service").stdout.trim();, +            assertThat(isEnabledOutput, equalTo("disabled"));, +        }, +    }, +, +    public void test31InstallDoesNotStartServer() {, +        assertThat(sh.run("ps aux").stdout, not(containsString("org.elasticsearch.bootstrap.Elasticsearch")));, +            startElasticsearch(sh);, +            stopElasticsearch(sh);, +    public void test32JavaHomeOverride() throws IOException {, +        String start = sh.runIgnoreExitCode("date ").stdout.trim();, +        startElasticsearch(sh);, +, +        String journalEntries = sh.runIgnoreExitCode("journalctl _SYSTEMD_UNIT=elasticsearch.service " +, +            "--since \"" + start + "\" --output cat | wc -l").stdout.trim();, +        assertThat(journalEntries, equalTo("0"));, +, +        assertPathsExist(installation.pidDir.resolve("elasticsearch.pid"));, +        assertPathsExist(installation.logs.resolve("elasticsearch_server.json"));, +, +        verifyPackageInstallation(installation, distribution(), sh); // check startup script didn't change permissions, +        verifyPackageInstallation(installation, distribution(), sh);, +, +    public void test70RestartServer() throws IOException {, +        try {, +            installation = install(distribution());, +            assertInstalled(distribution());, +, +            startElasticsearch(sh);, +            restartElasticsearch(sh);, +            runElasticsearchTests();, +            stopElasticsearch(sh);, +        } finally {, +            cleanup();, +        }, +    }, +, +, +    public void test72TestRuntimeDirectory() throws IOException {, +        try {, +            installation = install(distribution());, +            FileUtils.rm(installation.pidDir);, +            startElasticsearch(sh);, +            assertPathsExist(installation.pidDir);, +            stopElasticsearch(sh);, +        } finally {, +            cleanup();, +        }, +    }, +, +    public void test73gcLogsExist() throws IOException {, +        installation = install(distribution());, +        startElasticsearch(sh);, +        // it can be gc.log or gc.log.0.current, +        assertThat(installation.logs, fileWithGlobExist("gc.log*"));, +        stopElasticsearch(sh);, +    }, +, +    // TEST CASES FOR SYSTEMD ONLY, +, +, +    /**, +     * # Simulates the behavior of a system restart:, +     * # the PID directory is deleted by the operating system, +     * # but it should not block ES from starting, +     * # see https://github.com/elastic/elasticsearch/issues/11594, +     */, +    public void test80DeletePID_DIRandRestart() throws IOException {, +        assumeTrue(isSystemd());, +, +        rm(installation.pidDir);, +, +        sh.run("systemd-tmpfiles --create");, +, +        startElasticsearch(sh);, +, +        final Path pidFile = installation.pidDir.resolve("elasticsearch.pid");, +]