[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.put_mapping/20_mix_typeless_typeful.yml, +      catch: /the final mapping would have more than 1 type/, +          type: some_other_type, +, +, +---, +"PUT mapping with _doc on an index that has types":, +, + - skip:, +      version: " - 6.99.99", +      reason: Backport first, +, +, + - do:, +      indices.create:, +          include_type_name: true, +          index: index, +          body:, +              mappings:, +                  my_type:, +                      properties:, +                          foo:, +                              type: "keyword", +, + - do:, +      catch: /the final mapping would have more than 1 type/, +      indices.put_mapping:, +          include_type_name: true, +          index: index, +          type: _doc, +          body:, +              _doc:, +                  properties:, +                      bar:, +                          type: "long", +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.put_mapping/20_mix_typeless_typeful.yml, +      catch: /the final mapping would have more than 1 type/, +          type: some_other_type, +, +, +---, +"PUT mapping with _doc on an index that has types":, +, + - skip:, +      version: " - 6.99.99", +      reason: Backport first, +, +, + - do:, +      indices.create:, +          include_type_name: true, +          index: index, +          body:, +              mappings:, +                  my_type:, +                      properties:, +                          foo:, +                              type: "keyword", +, + - do:, +      catch: /the final mapping would have more than 1 type/, +      indices.put_mapping:, +          include_type_name: true, +          index: index, +          type: _doc, +          body:, +              _doc:, +                  properties:, +                      bar:, +                          type: "long", +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +                        && (isMappingSourceTyped(mapperService, mappingUpdateSource, request.type()), +                                || mapperService.resolveDocumentType(mappingType).equals(newMapper.type()) == false)) {, +                // If the _type name is _doc and there is no _doc top-level key then this means that we, +                // are handling a typeless call. In such a case, we override _doc with the actual type, +                // name in the mappings. This allows to use typeless APIs on typed indices., +                String typeForUpdate = mappingType; // the type to use to apply the mapping update, +                if (isMappingSourceTyped(mapperService, mappingUpdateSource, request.type()) == false) {, +                    typeForUpdate = mapperService.resolveDocumentType(mappingType);, +                }, +    /**, +     * Returns {@code true} if the given {@code mappingSource} includes a type, +     * as a top-level object., +     */, +    private static boolean isMappingSourceTyped(MapperService mapperService, CompressedXContent mappingSource, String type) {, +        Map<String, Object> root = XContentHelper.convertToMap(mappingSource.compressedReference(), true, XContentType.JSON).v2();, +        return root.size() == 1 && root.keySet().iterator().next().equals(type);, +    }, +]