[+++ b/core/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.io.OutputStream;, +import java.util.zip.CRC32;, +import java.util.zip.CheckedOutputStream;, +    private static int crc32(BytesReference data) {, +        OutputStream dummy = new OutputStream() {, +            @Override, +            public void write(int b) throws IOException {, +                // no-op, +            }, +            @Override, +            public void write(byte[] b, int off, int len) throws IOException {, +                // no-op, +            }, +        };, +        CRC32 crc32 = new CRC32();, +        try {, +            data.writeTo(new CheckedOutputStream(dummy, crc32));, +        } catch (IOException bogus) {, +            // cannot happen, +            throw new Error(bogus);, +        }, +        return (int) crc32.getValue();, +    }, +    private final byte[] bytes;, +    private final int crc32;, +, +    // Used for serialization, +    private CompressedXContent(byte[] compressed, int crc32) {, +        this.bytes = compressed;, +        this.crc32 = crc32;, +        assertConsistent();, +    }, +, +    /**, +     * Create a {@link CompressedXContent} out of a {@link ToXContent} instance., +     */, +    public CompressedXContent(ToXContent xcontent, XContentType type, ToXContent.Params params) throws IOException {, +        BytesStreamOutput bStream = new BytesStreamOutput();, +        OutputStream compressedStream = CompressorFactory.defaultCompressor().streamOutput(bStream);, +        CRC32 crc32 = new CRC32();, +        OutputStream checkedStream = new CheckedOutputStream(compressedStream, crc32);, +        try (XContentBuilder builder = XContentFactory.contentBuilder(type, checkedStream)) {, +            builder.startObject();, +            xcontent.toXContent(builder, params);, +            builder.endObject();, +        }, +        this.bytes = bStream.bytes().toBytes();, +        this.crc32 = (int) crc32.getValue();, +        assertConsistent();, +    }, +, +    /**, +     * Create a {@link CompressedXContent} out of a serialized {@link ToXContent}, +     * that may already be compressed., +     */, +            this.crc32 = crc32(new BytesArray(uncompressed()));, +            try (OutputStream compressedOutput = CompressorFactory.defaultCompressor().streamOutput(out)) {, +            this.crc32 = crc32(data);, +        }, +        assertConsistent();, +    private void assertConsistent() {, +        assert CompressorFactory.compressor(new BytesArray(bytes)) != null;, +        assert this.crc32 == crc32(new BytesArray(uncompressed()));, +        int crc32 = in.readInt();, +        byte[] compressed = new byte[in.readVInt()];, +        in.readBytes(compressed, 0, compressed.length);, +        return new CompressedXContent(compressed, crc32);, +        out.writeInt(crc32);, +        if (crc32 != that.crc32) {, +            return false;, +        }, +, +        return crc32;, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.io.OutputStream;, +import java.util.zip.CRC32;, +import java.util.zip.CheckedOutputStream;, +    private static int crc32(BytesReference data) {, +        OutputStream dummy = new OutputStream() {, +            @Override, +            public void write(int b) throws IOException {, +                // no-op, +            }, +            @Override, +            public void write(byte[] b, int off, int len) throws IOException {, +                // no-op, +            }, +        };, +        CRC32 crc32 = new CRC32();, +        try {, +            data.writeTo(new CheckedOutputStream(dummy, crc32));]