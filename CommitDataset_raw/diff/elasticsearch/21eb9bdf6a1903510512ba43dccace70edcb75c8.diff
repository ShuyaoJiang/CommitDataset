[+++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +        if (docCount >= 0) {, +            assert ((sumDocFreq >= 0)) : "docCount >= 0 but sumDocFreq ain't!";, +            assert ((sumTotalTermFrequencies >= 0)) : "docCount >= 0 but sumTotalTermFrequencies ain't!";, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +        if (docCount >= 0) {, +            assert ((sumDocFreq >= 0)) : "docCount >= 0 but sumDocFreq ain't!";, +            assert ((sumTotalTermFrequencies >= 0)) : "docCount >= 0 but sumTotalTermFrequencies ain't!";, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +        if (docCount >= 0) {, +            assert ((sumDocFreq >= 0)) : "docCount >= 0 but sumDocFreq ain't!";, +            assert ((sumTotalTermFrequencies >= 0)) : "docCount >= 0 but sumTotalTermFrequencies ain't!";, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +        if (docCount >= 0) {, +            assert ((sumDocFreq >= 0)) : "docCount >= 0 but sumDocFreq ain't!";, +            assert ((sumTotalTermFrequencies >= 0)) : "docCount >= 0 but sumTotalTermFrequencies ain't!";, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.util.function.BiFunction;, +    protected final GetResult getFromSearcher(Get get, BiFunction<String, SearcherScope, Searcher> searcherFactory,, +                                              SearcherScope scope) throws EngineException {, +        final Searcher searcher = searcherFactory.apply("get", scope);, +    public abstract GetResult get(Get get, BiFunction<String, SearcherScope, Searcher> searcherFactory) throws EngineException;, +, +     * @param source the source API or routing that triggers this searcher acquire, +     *, +        return acquireSearcher(source, SearcherScope.EXTERNAL);, +    }, +, +    /**, +     * Returns a new searcher instance. The consumer of this, +     * API is responsible for releasing the returned searcher in a, +     * safe manner, preferably in a try/finally block., +     *, +     * @param source the source API or routing that triggers this searcher acquire, +     * @param scope the scope of this searcher ie. if the searcher will be used for get or search purposes, +     *, +     * @see Searcher#close(), +     */, +    public final Searcher acquireSearcher(String source, SearcherScope scope) throws EngineException {, +            final SearcherManager manager = getSearcherManager(source, scope); // can never be null, +    public enum SearcherScope {, +        EXTERNAL, INTERNAL, +    }, +, +                return getSearcherManager("refresh_needed", SearcherScope.EXTERNAL).isSearcherCurrent() == false;, +    protected abstract SearcherManager getSearcherManager(String source, SearcherScope scope);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +        if (docCount >= 0) {, +            assert ((sumDocFreq >= 0)) : "docCount >= 0 but sumDocFreq ain't!";, +            assert ((sumTotalTermFrequencies >= 0)) : "docCount >= 0 but sumTotalTermFrequencies ain't!";, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.util.function.BiFunction;, +    protected final GetResult getFromSearcher(Get get, BiFunction<String, SearcherScope, Searcher> searcherFactory,, +                                              SearcherScope scope) throws EngineException {, +        final Searcher searcher = searcherFactory.apply("get", scope);, +    public abstract GetResult get(Get get, BiFunction<String, SearcherScope, Searcher> searcherFactory) throws EngineException;, +, +     * @param source the source API or routing that triggers this searcher acquire, +     *, +        return acquireSearcher(source, SearcherScope.EXTERNAL);, +    }]