[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, + * Client that connects to an Elasticsearch cluster through HTTP., + * <p>, + * <p>, + * <p>, + * Requests can be either synchronous or asynchronous. The asynchronous variants all end with {@code Async}., + * <p>, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to. Blocks until the request is completed and returns, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +        performRequestAsync(method, endpoint, params, entity, responseConsumer, listener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. Doesn't wait for the response, instead, +     * {@link #performRequestAsync(String, String, Map, HttpEntity, ResponseListener, Header...)} but without parameters and  request body., +    public void performRequestAsync(String method, String endpoint, ResponseListener responseListener, Header... headers) {, +        performRequestAsync(method, endpoint, Collections.<String, String>emptyMap(), null, responseListener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. Doesn't wait for the response, instead, +     * {@link #performRequestAsync(String, String, Map, HttpEntity, ResponseListener, Header...)} but without request body., +    public void performRequestAsync(String method, String endpoint, Map<String, String> params,, +        performRequestAsync(method, endpoint, params, null, responseListener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. Doesn't wait for the response, instead, +     * Shortcut to {@link #performRequestAsync(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, ResponseListener, Header...)}, +    public void performRequestAsync(String method, String endpoint, Map<String, String> params,, +        performRequestAsync(method, endpoint, params, entity, responseConsumer, responseListener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. The request is executed asynchronously, +    public void performRequestAsync(String method, String endpoint, Map<String, String> params,, +        performRequestAsync(startTime, nextHost().iterator(), request, responseConsumer, failureTrackingResponseListener);, +    private void performRequestAsync(final long startTime, final Iterator<HttpHost> hosts, final HttpRequestBase request,, +                        performRequestAsync(startTime, hosts, request, responseConsumer, listener);, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, + * Client that connects to an Elasticsearch cluster through HTTP., + * <p>, + * <p>, + * <p>, + * Requests can be either synchronous or asynchronous. The asynchronous variants all end with {@code Async}., + * <p>, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to. Blocks until the request is completed and returns, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +        performRequestAsync(method, endpoint, params, entity, responseConsumer, listener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. Doesn't wait for the response, instead, +     * {@link #performRequestAsync(String, String, Map, HttpEntity, ResponseListener, Header...)} but without parameters and  request body., +    public void performRequestAsync(String method, String endpoint, ResponseListener responseListener, Header... headers) {, +        performRequestAsync(method, endpoint, Collections.<String, String>emptyMap(), null, responseListener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. Doesn't wait for the response, instead, +     * {@link #performRequestAsync(String, String, Map, HttpEntity, ResponseListener, Header...)} but without request body., +    public void performRequestAsync(String method, String endpoint, Map<String, String> params,, +        performRequestAsync(method, endpoint, params, null, responseListener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. Doesn't wait for the response, instead, +     * Shortcut to {@link #performRequestAsync(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, ResponseListener, Header...)}, +    public void performRequestAsync(String method, String endpoint, Map<String, String> params,, +        performRequestAsync(method, endpoint, params, entity, responseConsumer, responseListener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. The request is executed asynchronously, +    public void performRequestAsync(String method, String endpoint, Map<String, String> params,, +        performRequestAsync(startTime, nextHost().iterator(), request, responseConsumer, failureTrackingResponseListener);, +    private void performRequestAsync(final long startTime, final Iterator<HttpHost> hosts, final HttpRequestBase request,, +                        performRequestAsync(startTime, hosts, request, responseConsumer, listener);, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientIntegTests.java, +            restClient.performRequestAsync(method, "/" + statusCode, new ResponseListener() {, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, + * Client that connects to an Elasticsearch cluster through HTTP., + * <p>, + * <p>, + * <p>, + * Requests can be either synchronous or asynchronous. The asynchronous variants all end with {@code Async}., + * <p>, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to and waits for the corresponding response, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +     * Sends a request to the Elasticsearch cluster that the client points to. Blocks until the request is completed and returns, +     * @return the response returned by Elasticsearch, +     * @throws ResponseException in case Elasticsearch responded with a status code that indicated an error, +        performRequestAsync(method, endpoint, params, entity, responseConsumer, listener, headers);, +     * Sends a request to the Elasticsearch cluster that the client points to. Doesn't wait for the response, instead, +     * {@link #performRequestAsync(String, String, Map, HttpEntity, ResponseListener, Header...)} but without parameters and  request body., +    public void performRequestAsync(String method, String endpoint, ResponseListener responseListener, Header... headers) {, +        performRequestAsync(method, endpoint, Collections.<String, String>emptyMap(), null, responseListener, headers);]