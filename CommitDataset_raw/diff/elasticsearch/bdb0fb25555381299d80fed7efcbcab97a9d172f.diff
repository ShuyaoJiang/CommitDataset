[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.SeqNoStats;, +     * @return the local checkpoint for this Engine, +    public abstract long getLocalCheckpoint();, +, +    /**, +     * Waits for all operations up to the provided sequence number to complete., +     *, +     * @param seqNo the sequence number that the checkpoint must advance to before this method returns, +     * @throws InterruptedException if the thread was interrupted while blocking on the condition, +     */, +    public abstract void waitForOpsToComplete(long seqNo) throws InterruptedException;, +, +    /**, +     * Reset the local checkpoint in the tracker to the given local checkpoint, +     * @param localCheckpoint the new checkpoint to be set, +     */, +    public abstract void resetLocalCheckpoint(long localCheckpoint);, +, +    /**, +     * @return a {@link SeqNoStats} object, using local state and the supplied global checkpoint, +     */, +    public abstract SeqNoStats getSeqNoStats(long globalCheckpoint);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.SeqNoStats;, +     * @return the local checkpoint for this Engine, +    public abstract long getLocalCheckpoint();, +, +    /**, +     * Waits for all operations up to the provided sequence number to complete., +     *, +     * @param seqNo the sequence number that the checkpoint must advance to before this method returns, +     * @throws InterruptedException if the thread was interrupted while blocking on the condition, +     */, +    public abstract void waitForOpsToComplete(long seqNo) throws InterruptedException;, +, +    /**, +     * Reset the local checkpoint in the tracker to the given local checkpoint, +     * @param localCheckpoint the new checkpoint to be set, +     */, +    public abstract void resetLocalCheckpoint(long localCheckpoint);, +, +    /**, +     * @return a {@link SeqNoStats} object, using local state and the supplied global checkpoint, +     */, +    public abstract SeqNoStats getSeqNoStats(long globalCheckpoint);, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.seqno.SeqNoStats;, +    // Used only for testing! Package private to prevent anyone else from using it, +    LocalCheckpointTracker getLocalCheckpointTracker() {, +    @Override, +    public long getLocalCheckpoint() {, +        return localCheckpointTracker.getCheckpoint();, +    }, +, +    @Override, +    public void waitForOpsToComplete(long seqNo) throws InterruptedException {, +        localCheckpointTracker.waitForOpsToComplete(seqNo);, +    }, +, +    @Override, +    public void resetLocalCheckpoint(long localCheckpoint) {, +        localCheckpointTracker.resetCheckpoint(localCheckpoint);, +    }, +, +    @Override, +    public SeqNoStats getSeqNoStats(long globalCheckpoint) {, +        return localCheckpointTracker.getStats(globalCheckpoint);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.SeqNoStats;, +     * @return the local checkpoint for this Engine, +    public abstract long getLocalCheckpoint();, +, +    /**, +     * Waits for all operations up to the provided sequence number to complete., +     *, +     * @param seqNo the sequence number that the checkpoint must advance to before this method returns, +     * @throws InterruptedException if the thread was interrupted while blocking on the condition, +     */, +    public abstract void waitForOpsToComplete(long seqNo) throws InterruptedException;, +, +    /**, +     * Reset the local checkpoint in the tracker to the given local checkpoint, +     * @param localCheckpoint the new checkpoint to be set, +     */, +    public abstract void resetLocalCheckpoint(long localCheckpoint);, +, +    /**, +     * @return a {@link SeqNoStats} object, using local state and the supplied global checkpoint, +     */, +    public abstract SeqNoStats getSeqNoStats(long globalCheckpoint);, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.seqno.SeqNoStats;, +    // Used only for testing! Package private to prevent anyone else from using it, +    LocalCheckpointTracker getLocalCheckpointTracker() {, +    @Override, +    public long getLocalCheckpoint() {, +        return localCheckpointTracker.getCheckpoint();]