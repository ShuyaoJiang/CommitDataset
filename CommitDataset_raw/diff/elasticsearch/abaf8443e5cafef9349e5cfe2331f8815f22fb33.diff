[+++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            // Delete snapshot from the snapshot list, since it is the maintainer of truth of active snapshots, +            List<SnapshotId> snapshotIds = getSnapshots().stream(), +                                               .filter(id -> snapshotId.equals(id) == false), +                                               .collect(Collectors.toList());, +            // delete the snapshot file, +            safeSnapshotBlobDelete(snapshot, blobId(snapshotId));, +            // delete the global metadata file, +            safeGlobalMetaDataBlobDelete(snapshot, snapshotId.getName());, +, +    private void safeSnapshotBlobDelete(final SnapshotInfo snapshotInfo, final String blobId) {, +        if (snapshotInfo != null) {, +            // we know the version the snapshot was created with, +            try {, +                snapshotFormat(snapshotInfo.version()).delete(snapshotsBlobContainer, blobId);, +            } catch (IOException e) {, +                logger.warn("[{}] Unable to delete snapshot file [{}]", e, snapshotInfo.snapshotId(), blobId);, +            }, +        } else {, +            // we don't know the version, first try the current format, then the legacy format, +            try {, +                snapshotFormat.delete(snapshotsBlobContainer, blobId);, +            } catch (IOException e) {, +                // now try legacy format, +                try {, +                    snapshotLegacyFormat.delete(snapshotsBlobContainer, blobId);, +                } catch (IOException e2) {, +                    // neither snapshot file could be deleted, log the error, +                    logger.warn("Unable to delete snapshot file [{}]", e, blobId);, +                }, +            }, +        }, +    }, +, +    private void safeGlobalMetaDataBlobDelete(final SnapshotInfo snapshotInfo, final String blobId) {, +        if (snapshotInfo != null) {, +            // we know the version the snapshot was created with, +            try {, +                globalMetaDataFormat(snapshotInfo.version()).delete(snapshotsBlobContainer, blobId);, +            } catch (IOException e) {, +                logger.warn("[{}] Unable to delete global metadata file [{}]", e, snapshotInfo.snapshotId(), blobId);, +            }, +        } else {, +            // we don't know the version, first try the current format, then the legacy format, +            try {, +                globalMetaDataFormat.delete(snapshotsBlobContainer, blobId);, +            } catch (IOException e) {, +                // now try legacy format, +                try {, +                    globalMetaDataLegacyFormat.delete(snapshotsBlobContainer, blobId);, +                } catch (IOException e2) {, +                    // neither global metadata file could be deleted, log the error, +                    logger.warn("Unable to delete global metadata file [{}]", e, blobId);, +                }, +            }, +        }, +    }, +, +    /**, +     * {@inheritDoc}, +     */]