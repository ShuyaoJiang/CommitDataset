[+++ b/Vagrantfile, +  config.vm.provider "virtualbox" do |v|, +    # Give the box more memory and cpu because our tests are beasts!, +    v.memory = Integer(ENV['VAGRANT_MEMORY'] || 8192), +    v.cpus = Integer(ENV['VAGRANT_CPUS'] || 4), +  end, +  config.vm.synced_folder "#{Dir.home}/.gradle/caches", "/home/vagrant/.gradle/caches",, +    create: true,, +    owner: "vagrant", +  config.vm.provision "dependencies", type: "shell", inline: <<-SHELL, +, +    installed gradle || {, +      echo "==> Installing gradle", +      curl -o /tmp/gradle.zip -L https://services.gradle.org/distributions/gradle-3.3-bin.zip, +      unzip /tmp/gradle.zip -d /opt, +      rm -rf /tmp/gradle.zip , +      ln -s /opt/gradle-3.3/bin/gradle /usr/bin/gradle, +      # make nfs mounted gradle home dir writeable, +      chown vagrant:vagrant /home/vagrant/.gradle, +    }, +, +, +export GRADLE_HOME=/opt/gradle-3.3, +++ b/Vagrantfile, +  config.vm.provider "virtualbox" do |v|, +    # Give the box more memory and cpu because our tests are beasts!, +    v.memory = Integer(ENV['VAGRANT_MEMORY'] || 8192), +    v.cpus = Integer(ENV['VAGRANT_CPUS'] || 4), +  end, +  config.vm.synced_folder "#{Dir.home}/.gradle/caches", "/home/vagrant/.gradle/caches",, +    create: true,, +    owner: "vagrant", +  config.vm.provision "dependencies", type: "shell", inline: <<-SHELL, +, +    installed gradle || {, +      echo "==> Installing gradle", +      curl -o /tmp/gradle.zip -L https://services.gradle.org/distributions/gradle-3.3-bin.zip, +      unzip /tmp/gradle.zip -d /opt, +      rm -rf /tmp/gradle.zip , +      ln -s /opt/gradle-3.3/bin/gradle /usr/bin/gradle, +      # make nfs mounted gradle home dir writeable, +      chown vagrant:vagrant /home/vagrant/.gradle, +    }, +, +, +export GRADLE_HOME=/opt/gradle-3.3, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +    private static final String PLATFORM_TEST_COMMAND ="rm -rf ~/elasticsearch && rsync -r /elasticsearch/ ~/elasticsearch && cd ~/elasticsearch && \$GRADLE_HOME/bin/gradle test integTest", +    private static void createPlatformTestTask(Project project) {, +        project.tasks.create('platformTest') {, +            group 'Verification', +            description "Test unit and integ tests on different platforms using vagrant.\n" +, +                    "    Specify the vagrant boxes to test using the gradle property 'vagrant.boxes'.\n" +, +                    "    'all' can be used to test all available boxes. The available boxes are: \n" +, +                    "    ${BOXES}", +            dependsOn 'vagrantCheckVersion', +        }, +    }, +, +        createPlatformTestTask(project), +        assert project.tasks.platformTest != null, +        Task platformTest = project.tasks.platformTest, +, +, +            TaskExecutionAdapter packagingReproListener = new TaskExecutionAdapter() {, +                project.gradle.addListener(packagingReproListener), +                project.gradle.removeListener(packagingReproListener), +, +            Task platform = project.tasks.create("vagrant${boxTask}#platformTest", VagrantCommandTask) {, +                boxName box, +                environmentVars vagrantEnvVars, +                dependsOn up, +                finalizedBy halt, +                args 'ssh', boxName, '--command', PLATFORM_TEST_COMMAND + " -Dtests.seed=${-> project.extensions.esvagrant.formattedTestSeed}", +            }, +            TaskExecutionAdapter platformReproListener = new TaskExecutionAdapter() {, +                @Override, +                void afterExecute(Task task, TaskState state) {, +                    if (state.failure != null) {, +                        println "REPRODUCE WITH: gradle ${platform.path} " +, +                            "-Dtests.seed=${project.extensions.esvagrant.formattedTestSeed} ", +                    }, +                }, +            }, +            packaging.doFirst {, +                project.gradle.addListener(platformReproListener), +            }, +            packaging.doLast {, +                project.gradle.removeListener(platformReproListener), +            }, +            if (project.extensions.esvagrant.boxes.contains(box)) {, +                platformTest.dependsOn(platform), +            }]