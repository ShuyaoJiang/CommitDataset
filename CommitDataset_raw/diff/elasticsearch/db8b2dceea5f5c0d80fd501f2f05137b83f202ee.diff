[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequest.java, +import org.elasticsearch.Version;, +import java.util.Objects;, +    public static final Version V_5_1_0_UNRELEASED = Version.fromId(5010099);, +    private String[] indices = Strings.EMPTY_ARRAY;, +        Objects.requireNonNull(indices, "indices must not be null");, +            Objects.requireNonNull(indices[i], "indices[" + i + "] must not be null");, +        if (in.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            in.readStringArray();, +        }, +        if (out.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            out.writeStringArray(Strings.EMPTY_ARRAY);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequest.java, +import org.elasticsearch.Version;, +import java.util.Objects;, +    public static final Version V_5_1_0_UNRELEASED = Version.fromId(5010099);, +    private String[] indices = Strings.EMPTY_ARRAY;, +        Objects.requireNonNull(indices, "indices must not be null");, +            Objects.requireNonNull(indices[i], "indices[" + i + "] must not be null");, +        if (in.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            in.readStringArray();, +        }, +        if (out.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            out.writeStringArray(Strings.EMPTY_ARRAY);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequest.java, +import org.elasticsearch.Version;, +import java.util.Objects;, +    public static final Version V_5_1_0_UNRELEASED = Version.fromId(5010099);, +    private String[] indices = Strings.EMPTY_ARRAY;, +        Objects.requireNonNull(indices, "indices must not be null");, +            Objects.requireNonNull(indices[i], "indices[" + i + "] must not be null");, +        if (in.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            in.readStringArray();, +        }, +        if (out.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            out.writeStringArray(Strings.EMPTY_ARRAY);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestClusterSearchShardsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequest.java, +import org.elasticsearch.Version;, +import java.util.Objects;, +    public static final Version V_5_1_0_UNRELEASED = Version.fromId(5010099);, +    private String[] indices = Strings.EMPTY_ARRAY;, +        Objects.requireNonNull(indices, "indices must not be null");, +            Objects.requireNonNull(indices[i], "indices[" + i + "] must not be null");, +        if (in.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            in.readStringArray();, +        }, +        if (out.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            out.writeStringArray(Strings.EMPTY_ARRAY);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestClusterSearchShardsAction.java, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +import org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsRequest;, +        assertUnknownVersion(ClusterSearchShardsRequest.V_5_1_0_UNRELEASED);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequest.java, +import org.elasticsearch.Version;, +import java.util.Objects;, +    public static final Version V_5_1_0_UNRELEASED = Version.fromId(5010099);, +    private String[] indices = Strings.EMPTY_ARRAY;, +        Objects.requireNonNull(indices, "indices must not be null");, +            Objects.requireNonNull(indices[i], "indices[" + i + "] must not be null");, +        if (in.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            in.readStringArray();, +        }, +        if (out.getVersion().onOrBefore(V_5_1_0_UNRELEASED)) {, +            //types, +            out.writeStringArray(Strings.EMPTY_ARRAY);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestClusterSearchShardsAction.java, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +import org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsRequest;, +        assertUnknownVersion(ClusterSearchShardsRequest.V_5_1_0_UNRELEASED);, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsRequestTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *]