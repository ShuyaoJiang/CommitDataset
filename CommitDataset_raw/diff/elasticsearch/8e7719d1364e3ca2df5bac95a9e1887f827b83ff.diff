[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +package org.elasticsearch.gradle.precommit, +import org.apache.tools.ant.BuildLogger, +import org.apache.tools.ant.DefaultLogger, +import org.apache.tools.ant.Project, +import org.elasticsearch.gradle.AntTask, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.file.FileCollection, +import java.nio.file.FileVisitResult, +import java.nio.file.Files, +import java.nio.file.Path, +import java.nio.file.SimpleFileVisitor, +import java.nio.file.attribute.BasicFileAttributes, +    // true to be lenient about MISSING CLASSES, +    private boolean missingClasses;, +    , +        dependsOn(project.configurations.testCompile), +        description = "Checks third party JAR bytecode for missing classes, use of internal APIs, and other horrors'", +    }, +, +    /** , +     * Set to true to be lenient with missing classes. By default this check will fail if it finds, +     * MISSING CLASSES. This means the set of jars is incomplete. However, in some cases, +     * this can be due to intentional exclusions that are well-tested and understood., +     */      , +    public void setMissingClasses(boolean value) {, +        missingClasses = value;, +    }, +    , +    /**, +     * Returns true if leniency about missing classes is enabled., +     */, +    public boolean isMissingClasses() {, +        return missingClasses;, +                throw new IllegalArgumentException("illegal third party audit exclusion: '" + s + "', wildcards are not permitted!"), +        return new DefaultLogger(, +            errorPrintStream: stream,, +            outputPrintStream: stream,, +            // ignore passed in outputLevel for now, until we are filtering warning messages, +            messageOutputLevel: Project.MSG_ERR), +        ant.project.addTaskDefinition('thirdPartyAudit', de.thetaphi.forbiddenapis.ant.AntTask), +        FileCollection jars = project.configurations.testCompile.fileCollection({ dependency ->, +        }), +        Configuration provided = project.configurations.findByName('provided'), +            jars -= provided, +, +        Set<String> names = new HashSet<>(), +            names.add(jar.getName()), +        }, +        logger.error("[thirdPartyAudit] Scanning: " + names), +, +        // warn that classes are missing, +        // TODO: move these to excludes list!, +        if (missingClasses) {, +            logger.warn("[thirdPartyAudit] WARNING: CLASSES ARE MISSING! Expect NoClassDefFoundError in bug reports from users!"), +        File tmpDir = new File(project.buildDir, 'tmp/thirdPartyAudit'), +        ant.delete(dir: tmpDir.getAbsolutePath()), +        tmpDir.mkdirs(), +            ant.unzip(src: jar.getAbsolutePath(), dest: tmpDir.getAbsolutePath()), +            excludedFiles[i] = excludes[i].replace('.', '/') + ".class", +            // check if the excluded file exists, if not, sure sign things are outdated, +            if (! new File(tmpDir, excludedFiles[i]).exists()) {, +                throw new IllegalStateException("bogus thirdPartyAudit exclusion: '" + excludes[i] + "', not found in any dependency"), +        }, +        checkSheistyClasses(tmpDir.toPath(), new HashSet<>(Arrays.asList(excludedFiles)));, +        ant.thirdPartyAudit(internalRuntimeForbidden: true,, +                            failOnMissingClasses: !missingClasses,, +                            classpath: project.configurations.testCompile.asPath) {, +            fileset(dir: tmpDir, excludes: excludedFiles.join(',')), +        ant.delete(dir: tmpDir.getAbsolutePath()), +    private void checkSheistyClasses(Path root, Set<String> excluded) {, +        ClassLoader ext = ClassLoader.getSystemClassLoader().getParent(), +        assert ext != null, +                String entry = root.relativize(file).toString(), +        , +        // check if we are ok, +        if (sheistySet.isEmpty()) {, +            return;, +        }, +        , +        // leniency against exclusions list, +        sheistySet.removeAll(excluded);, +        , +        if (sheistySet.isEmpty()) {, +            logger.warn("[thirdPartyAudit] WARNING: JAR HELL WITH JDK! Expect insanely hard-to-debug problems!"), +        } else {, +            throw new IllegalStateException("JAR HELL WITH JDK! " + sheistySet);, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +package org.elasticsearch.gradle.precommit, +import org.apache.tools.ant.BuildLogger, +import org.apache.tools.ant.DefaultLogger, +import org.apache.tools.ant.Project]