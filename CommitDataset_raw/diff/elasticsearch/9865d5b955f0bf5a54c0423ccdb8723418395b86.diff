[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/DetectionRule.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.xpack.ml.utils.ExceptionsHelper;, +, +    public static final ParseField RULE_ACTION_FIELD = new ParseField("rule_action");, +    public static final ObjectParser<Builder, Void> PARSER = new ObjectParser<>(DETECTION_RULE_FIELD.getPreferredName(), Builder::new);, +        PARSER.declareField(Builder::setRuleAction, p -> {, +            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {, +                return RuleAction.fromString(p.text());, +            }, +            throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]");, +        }, RULE_ACTION_FIELD, ValueType.STRING);, +        PARSER.declareString(Builder::setTargetFieldName, TARGET_FIELD_NAME_FIELD);, +        PARSER.declareString(Builder::setTargetFieldValue, TARGET_FIELD_VALUE_FIELD);, +        PARSER.declareField(Builder::setConditionsConnective, p -> {, +        PARSER.declareObjectArray(Builder::setRuleConditions,, +    private final RuleAction ruleAction;, +    private DetectionRule(RuleAction ruleAction, @Nullable String targetFieldName, @Nullable String targetFieldValue,, +                          Connective conditionsConnective, List<RuleCondition> ruleConditions) {, +        this.ruleAction = Objects.requireNonNull(ruleAction);, +        this.targetFieldName = targetFieldName;, +        this.targetFieldValue = targetFieldValue;, +        this.conditionsConnective = Objects.requireNonNull(conditionsConnective);, +        this.ruleConditions = Collections.unmodifiableList(ruleConditions);, +    }, +, +        ruleAction = RuleAction.readFromStream(in);, +        ruleAction.writeTo(out);, +        builder.field(RULE_ACTION_FIELD.getPreferredName(), ruleAction);, +        builder.field(RULE_CONDITIONS_FIELD.getPreferredName(), ruleConditions);, +    @Nullable, +    @Nullable, +        return Objects.equals(ruleAction, other.ruleAction), +                && Objects.equals(targetFieldName, other.targetFieldName), +                && Objects.equals(conditionsConnective, other.conditionsConnective), +                && Objects.equals(ruleConditions, other.ruleConditions);, +, +    public static class Builder {, +        private RuleAction ruleAction = RuleAction.FILTER_RESULTS;, +        private String targetFieldName;, +        private String targetFieldValue;, +        private Connective conditionsConnective = Connective.OR;, +        private List<RuleCondition> ruleConditions = Collections.emptyList();, +, +        public Builder(List<RuleCondition> ruleConditions) {, +            this.ruleConditions = ExceptionsHelper.requireNonNull(ruleConditions, RULE_CONDITIONS_FIELD.getPreferredName());, +        }, +, +        private Builder() {, +        }, +, +        public Builder setRuleAction(RuleAction ruleAction) {, +            this.ruleAction = ExceptionsHelper.requireNonNull(ruleAction, RULE_ACTION_FIELD.getPreferredName());, +            return this;, +        }, +, +        public Builder setTargetFieldName(String targetFieldName) {, +            this.targetFieldName = targetFieldName;, +            return this;, +        }, +, +        public Builder setTargetFieldValue(String targetFieldValue) {, +            this.targetFieldValue = targetFieldValue;, +            return this;, +        }, +, +        public Builder setConditionsConnective(Connective connective) {, +            this.conditionsConnective = ExceptionsHelper.requireNonNull(connective, CONDITIONS_CONNECTIVE_FIELD.getPreferredName());, +            return this;, +        }, +, +        public Builder setRuleConditions(List<RuleCondition> ruleConditions) {, +            this.ruleConditions = ExceptionsHelper.requireNonNull(ruleConditions, RULE_ACTION_FIELD.getPreferredName());, +            return this;, +        }, +, +        public DetectionRule build() {, +            if (targetFieldValue != null && targetFieldName == null) {, +                String msg = Messages.getMessage(Messages.JOB_CONFIG_DETECTION_RULE_MISSING_TARGET_FIELD_NAME, targetFieldValue);, +                throw new IllegalArgumentException(msg);, +            }, +            if (ruleConditions == null || ruleConditions.isEmpty()) {, +                String msg = Messages.getMessage(Messages.JOB_CONFIG_DETECTION_RULE_REQUIRES_AT_LEAST_ONE_CONDITION);, +                throw new IllegalArgumentException(msg);, +            }, +            for (RuleCondition condition : ruleConditions) {, +                if (condition.getConditionType() == RuleConditionType.CATEGORICAL && targetFieldName != null) {, +                    String msg = Messages.getMessage(Messages.JOB_CONFIG_DETECTION_RULE_CONDITION_CATEGORICAL_INVALID_OPTION,, +                            DetectionRule.TARGET_FIELD_NAME_FIELD.getPreferredName());, +                    throw new IllegalArgumentException(msg);, +                }, +            }, +            return new DetectionRule(ruleAction, targetFieldName, targetFieldValue, conditionsConnective, ruleConditions);, +        }, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/DetectionRule.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.xpack.ml.utils.ExceptionsHelper;]