[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            ObjectMapper.Dynamic dynamic = dynamicOrDefault(mapper, context);, +            ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);, +        ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);, +                        ObjectMapper.Dynamic dynamic = dynamicOrDefault(parent, context);, +    // find what the dynamic setting is given the current parse context and parent, +    private static ObjectMapper.Dynamic dynamicOrDefault(ObjectMapper parentMapper, ParseContext context) {, +        while (dynamic == null) {, +            int lastDotNdx = parentMapper.name().lastIndexOf('.');, +            if (lastDotNdx == -1) {, +                // no dot means we the parent is the root, so just delegate to the default outside the loop, +                break;, +            }, +            String parentName = parentMapper.name().substring(0, lastDotNdx);, +            parentMapper = context.docMapper().objectMappers().get(parentName);, +            if (parentMapper == null) {, +                // If parentMapper is ever null, it means the parent of the current mapper was dynamically created., +                // But in order to be created dynamically, the dynamic setting of that parent was necessarily true, +                return ObjectMapper.Dynamic.TRUE;, +            }, +            dynamic = parentMapper.dynamic();, +        }, +            return context.root().dynamic() == null ? ObjectMapper.Dynamic.TRUE : context.root().dynamic();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            ObjectMapper.Dynamic dynamic = dynamicOrDefault(mapper, context);, +            ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);, +        ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);, +                        ObjectMapper.Dynamic dynamic = dynamicOrDefault(parent, context);, +    // find what the dynamic setting is given the current parse context and parent, +    private static ObjectMapper.Dynamic dynamicOrDefault(ObjectMapper parentMapper, ParseContext context) {, +        while (dynamic == null) {, +            int lastDotNdx = parentMapper.name().lastIndexOf('.');, +            if (lastDotNdx == -1) {, +                // no dot means we the parent is the root, so just delegate to the default outside the loop, +                break;, +            }, +            String parentName = parentMapper.name().substring(0, lastDotNdx);, +            parentMapper = context.docMapper().objectMappers().get(parentName);, +            if (parentMapper == null) {, +                // If parentMapper is ever null, it means the parent of the current mapper was dynamically created., +                // But in order to be created dynamically, the dynamic setting of that parent was necessarily true, +                return ObjectMapper.Dynamic.TRUE;, +            }, +            dynamic = parentMapper.dynamic();, +        }, +            return context.root().dynamic() == null ? ObjectMapper.Dynamic.TRUE : context.root().dynamic();, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java, +    public void testPropagateDynamicWithExistingMapper() throws Exception {, +        DocumentMapperParser mapperParser = createIndex("test").mapperService().documentMapperParser();, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .field("dynamic", false), +            .startObject("properties"), +                .startObject("foo"), +                    .field("type", "object"), +                    .field("dynamic", true), +                    .startObject("properties"), +            .endObject().endObject().endObject().endObject().string();, +        DocumentMapper mapper = mapperParser.parse("type", new CompressedXContent(mapping));, +        BytesReference bytes = XContentFactory.jsonBuilder(), +            .startObject().startObject("foo"), +            .field("bar", "something"), +            .endObject().endObject().bytes();, +        ParsedDocument doc = mapper.parse("test", "type", "1", bytes);, +        assertNotNull(doc.dynamicMappingsUpdate());, +        assertNotNull(doc.rootDoc().getField("foo.bar"));, +    }, +, +    public void testPropagateDynamicWithDynamicMapper() throws Exception {, +        DocumentMapperParser mapperParser = createIndex("test").mapperService().documentMapperParser();, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .field("dynamic", false), +            .startObject("properties"), +            .startObject("foo"), +            .field("type", "object"), +            .field("dynamic", true), +            .startObject("properties"), +            .endObject().endObject().endObject().endObject().string();, +        DocumentMapper mapper = mapperParser.parse("type", new CompressedXContent(mapping));, +        BytesReference bytes = XContentFactory.jsonBuilder(), +            .startObject().startObject("foo").startObject("bar"), +                .field("baz", "something"), +            .endObject().endObject().endObject().bytes();, +        ParsedDocument doc = mapper.parse("test", "type", "1", bytes);, +        assertNotNull(doc.dynamicMappingsUpdate());, +        assertNotNull(doc.rootDoc().getField("foo.bar.baz"));, +    }, +, +    public void testDynamicRootFallback() throws Exception {, +        DocumentMapperParser mapperParser = createIndex("test").mapperService().documentMapperParser();, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .field("dynamic", false), +            .startObject("properties"), +            .startObject("foo"), +            .field("type", "object"), +            .startObject("properties"), +            .endObject().endObject().endObject().endObject().string();, +        DocumentMapper mapper = mapperParser.parse("type", new CompressedXContent(mapping));, +        BytesReference bytes = XContentFactory.jsonBuilder(), +            .startObject().startObject("foo"), +            .field("bar", "something")]