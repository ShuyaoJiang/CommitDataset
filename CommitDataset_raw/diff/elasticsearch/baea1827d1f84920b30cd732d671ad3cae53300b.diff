[+++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +            logger.trace("index [{}][{}]{}", create.type(), create.id(), create.docs());, +                logger.trace("index [{}][{}]{}", index.type(), index.id(), index.docs());, +++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +            logger.trace("index [{}][{}]{}", create.type(), create.id(), create.docs());, +                logger.trace("index [{}][{}]{}", index.type(), index.id(), index.docs());, +++ b/src/test/java/org/elasticsearch/gateway/local/SimpleRecoveryLocalGatewayTests.java, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;, +        // note: default replica settings are tied to #data nodes-1 which is 0 here. We can do with 1 in this test., +        int numberOfShards = numberOfShards();, +        assertAcked(prepareCreate("test").setSettings(, +                SETTING_NUMBER_OF_SHARDS, numberOfShards(),, +                SETTING_NUMBER_OF_REPLICAS, randomIntBetween(0, 1), +        ).addMapping("type1", mapping));, +        int value1Docs;, +        int value2Docs;, +        boolean indexToAllShards = randomBoolean();, +, +        if (indexToAllShards) {, +            // insert enough docs so all shards will have a doc, +            value1Docs = randomIntBetween(numberOfShards * 10, numberOfShards * 20);, +            value2Docs = randomIntBetween(numberOfShards * 10, numberOfShards * 20);, +, +        } else {, +            // insert a two docs, some shards will not have anything, +            value1Docs = 1;, +            value2Docs = 1;, +        }, +, +, +        for (int i = 0; i < 1 + randomInt(100); i++) {, +            for (int id = 0; id < Math.max(value1Docs, value2Docs); id++) {, +                if (id < value1Docs) {, +                    index("test", "type1", "1_" + id,, +                            jsonBuilder().startObject().field("field", "value1").startArray("num").value(14).value(179).endArray().endObject(), +                    );, +                }, +                if (id < value2Docs) {, +                    index("test", "type1", "2_" + id,, +                            jsonBuilder().startObject().field("field", "value2").startArray("num").value(14).endArray().endObject(), +                    );, +                }, +            }, +, +        for (int i = 0; i <= randomInt(10); i++) {, +            assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(), value1Docs + value2Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("field", "value1")).get(), value1Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("field", "value2")).get(), value2Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("num", 179)).get(), value1Docs);, +        if (!indexToAllShards) {, +            // we have to verify primaries are started for them to be restored, +            logger.info("Ensure all primaries have been started");, +            ensureYellow();, +        }, +        for (int i = 0; i <= randomInt(10); i++) {, +            assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(), value1Docs + value2Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("field", "value1")).get(), value1Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("field", "value2")).get(), value2Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("num", 179)).get(), value1Docs);, +        for (int i = 0; i <= randomInt(10); i++) {, +            assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(), value1Docs + value2Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("field", "value1")).get(), value1Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("field", "value2")).get(), value2Docs);, +            assertHitCount(client().prepareCount().setQuery(termQuery("num", 179)).get(), value1Docs);]