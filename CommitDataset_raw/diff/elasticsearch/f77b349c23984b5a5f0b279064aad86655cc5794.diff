[+++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +                builder.field(Fields.QUEUE_SIZE, queueSize.singles());, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +                builder.field(Fields.QUEUE_SIZE, queueSize.singles());, +++ b/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolSerializationTests.java, +, +    @Test, +    public void testThatToXContentWritesInteger() throws Exception {, +        ThreadPool.Info info = new ThreadPool.Info("foo", "search", 1, 10, TimeValue.timeValueMillis(3000), SizeValue.parseSizeValue("1k"));, +        XContentBuilder builder = jsonBuilder();, +        builder.startObject();, +        info.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        builder.endObject();, +, +        BytesReference bytesReference = builder.bytes();, +        Map<String, Object> map;, +        try (XContentParser parser = XContentFactory.xContent(bytesReference).createParser(bytesReference)) {, +            map = parser.map();, +        }, +        assertThat(map, hasKey("foo"));, +        map = (Map<String, Object>) map.get("foo");, +        assertThat(map, hasKey("queue_size"));, +        assertThat(map.get("queue_size").toString(), is("1000"));, +    }, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +                builder.field(Fields.QUEUE_SIZE, queueSize.singles());, +++ b/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolSerializationTests.java, +, +    @Test, +    public void testThatToXContentWritesInteger() throws Exception {, +        ThreadPool.Info info = new ThreadPool.Info("foo", "search", 1, 10, TimeValue.timeValueMillis(3000), SizeValue.parseSizeValue("1k"));, +        XContentBuilder builder = jsonBuilder();, +        builder.startObject();, +        info.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        builder.endObject();, +, +        BytesReference bytesReference = builder.bytes();, +        Map<String, Object> map;, +        try (XContentParser parser = XContentFactory.xContent(bytesReference).createParser(bytesReference)) {, +            map = parser.map();, +        }, +        assertThat(map, hasKey("foo"));, +        map = (Map<String, Object>) map.get("foo");, +        assertThat(map, hasKey("queue_size"));, +        assertThat(map.get("queue_size").toString(), is("1000"));, +    }, +++ b/docs/reference/migration/migrate_2_0/stats.asciidoc, +==== Nodes Stats API, +, +Queue lengths are now reported as basic numeric so they can easily processed by code. Before we used a human, +readable format. For example, a queue with 1,000 items is now reported as `1000` instead of `1k`.]