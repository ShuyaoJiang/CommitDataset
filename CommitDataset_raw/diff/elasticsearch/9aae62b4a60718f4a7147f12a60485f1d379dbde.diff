[+++ b/src/main/java/org/elasticsearch/common/lucene/all/AllEntries.java, +    public boolean customBoost() {, +        return customBoost;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllEntries.java, +    public boolean customBoost() {, +        return customBoost;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +        // an internal flag, automatically set if we encounter boosting, +        boolean autoBoost = false;, +, +                    indexAnalyzer, searchAnalyzer, enabled, autoBoost);, +                } else if (fieldName.equals("auto_boost")) {, +                    builder.autoBoost = nodeBooleanValue(fieldNode);, +    // The autoBoost flag is automatically set based on indexed docs on the mappings, +    // if a doc is indexed with a specific boost value and part of _all, it is automatically, +    // set to true. This allows to optimize (automatically, which we like) for the common case, +    // where fields don't usually have boost associated with them, and we don't need to use the, +    // special SpanTermQuery to look at payloads, +    private volatile boolean autoBoost;, +        this(Defaults.NAME, Defaults.STORE, Defaults.TERM_VECTOR, Defaults.OMIT_NORMS, Defaults.INDEX_OPTIONS, null, null, Defaults.ENABLED, false);, +                             NamedAnalyzer indexAnalyzer, NamedAnalyzer searchAnalyzer, boolean enabled, boolean autoBoost) {, +        this.autoBoost = autoBoost;, +, +        if (!autoBoost) {, +            return new TermQuery(term);, +        }, +        // if the autoBoost flag is not set, and we indexed a doc with custom boost, make, +        // sure to update the flag, and notify mappings on change, +        if (!autoBoost && context.allEntries().customBoost()) {, +            autoBoost = true;, +            context.setMappingsModified();, +        }, +, +        if (autoBoost != false) {, +            builder.field("auto_boost", autoBoost);, +        }, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllEntries.java, +    public boolean customBoost() {, +        return customBoost;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +        // an internal flag, automatically set if we encounter boosting, +        boolean autoBoost = false;, +, +                    indexAnalyzer, searchAnalyzer, enabled, autoBoost);, +                } else if (fieldName.equals("auto_boost")) {, +                    builder.autoBoost = nodeBooleanValue(fieldNode);, +    // The autoBoost flag is automatically set based on indexed docs on the mappings, +    // if a doc is indexed with a specific boost value and part of _all, it is automatically, +    // set to true. This allows to optimize (automatically, which we like) for the common case, +    // where fields don't usually have boost associated with them, and we don't need to use the, +    // special SpanTermQuery to look at payloads, +    private volatile boolean autoBoost;, +        this(Defaults.NAME, Defaults.STORE, Defaults.TERM_VECTOR, Defaults.OMIT_NORMS, Defaults.INDEX_OPTIONS, null, null, Defaults.ENABLED, false);, +                             NamedAnalyzer indexAnalyzer, NamedAnalyzer searchAnalyzer, boolean enabled, boolean autoBoost) {, +        this.autoBoost = autoBoost;, +, +        if (!autoBoost) {, +            return new TermQuery(term);, +        }, +        // if the autoBoost flag is not set, and we indexed a doc with custom boost, make, +        // sure to update the flag, and notify mappings on change, +        if (!autoBoost && context.allEntries().customBoost()) {, +            autoBoost = true;, +            context.setMappingsModified();, +        }, +, +        if (autoBoost != false) {, +            builder.field("auto_boost", autoBoost);, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/all/SimpleAllMapperTests.java, +    public void testAllMappersNoBoost() throws Exception {, +        String mapping = copyToStringFromClasspath("/org/elasticsearch/test/unit/index/mapper/all/noboost-mapping.json");, +        DocumentMapper docMapper = MapperTests.newParser().parse(mapping);, +        byte[] json = copyToBytesFromClasspath("/org/elasticsearch/test/unit/index/mapper/all/test1.json");, +        Document doc = docMapper.parse(new BytesArray(json)).rootDoc();, +        AllField field = (AllField) doc.getFieldable("_all");, +        AllEntries allEntries = ((AllTokenStream) field.tokenStreamValue()).allEntries();, +        assertThat(allEntries.fields().size(), equalTo(3));, +        assertThat(allEntries.fields().contains("address.last.location"), equalTo(true));, +        assertThat(allEntries.fields().contains("name.last"), equalTo(true));, +        assertThat(allEntries.fields().contains("simple1"), equalTo(true));, +        FieldMapper mapper = docMapper.mappers().smartNameFieldMapper("_all");, +        assertThat(mapper.queryStringTermQuery(new Term("_all", "foobar")), Matchers.instanceOf(TermQuery.class));, +    }, +, +    @Test, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllEntries.java, +    public boolean customBoost() {, +        return customBoost;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +        // an internal flag, automatically set if we encounter boosting, +        boolean autoBoost = false;]