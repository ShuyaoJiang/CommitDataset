[+++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                return rejoin(currentState, "master left (reason = " + reason + ")");, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                return rejoin(currentState, "master left (reason = " + reason + ")");, +++ b/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java, +        // verify that both nodes are still in the cluster state but there is no master, +        assertThat(state.nodes().getSize(), equalTo(2));, +        assertThat(state.nodes().getMasterNode(), equalTo(null));, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                return rejoin(currentState, "master left (reason = " + reason + ")");, +++ b/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java, +        // verify that both nodes are still in the cluster state but there is no master, +        assertThat(state.nodes().getSize(), equalTo(2));, +        assertThat(state.nodes().getMasterNode(), equalTo(null));, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +        // we cannot use the NetworkUnresponsive disruption type here as it will swallow the "shard failed" request, calling neither, +        // onSuccess nor onFailure on the provided listener., +        NetworkLinkDisruptionType disruptionType = new NetworkDisconnect();, +        NetworkDisruption networkDisruption = new NetworkDisruption(partitions, disruptionType);, +        setDisruptionScheme(networkDisruption);]