[+++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +                // in case we are running from the IDE:, +                if (artifact == null || System.getProperty("tests.maven") == null) {, +                    artifact = PathUtils.get(System.getProperty("user.dir")).toAbsolutePath().getFileName().toString();, +                }, +                    if (clazz != null) {, +                    } else if (System.getProperty("tests.maven") != null) {, +                        throw new IllegalStateException("plugin classname is needed for insecure plugin unit tests: something wrong with build");, +                    }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +                // in case we are running from the IDE:, +                if (artifact == null || System.getProperty("tests.maven") == null) {, +                    artifact = PathUtils.get(System.getProperty("user.dir")).toAbsolutePath().getFileName().toString();, +                }, +                    if (clazz != null) {, +                    } else if (System.getProperty("tests.maven") != null) {, +                        throw new IllegalStateException("plugin classname is needed for insecure plugin unit tests: something wrong with build");, +                    }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/MockPluginPolicy.java, +import java.util.Objects;, +    final Set<CodeSource> excludedSources;, +        excludedSources = new HashSet<CodeSource>();, +        excludedSources.add(Bootstrap.class.getProtectionDomain().getCodeSource());, +        excludedSources.add(getClass().getProtectionDomain().getCodeSource());, +        excludedSources.add(LuceneTestCase.class.getProtectionDomain().getCodeSource());, +        excludedSources.add(RandomizedRunner.class.getProtectionDomain().getCodeSource());, +        excludedSources.add(Assert.class.getProtectionDomain().getCodeSource());, +        // groovy scripts, +        excludedSources.add(new CodeSource(new URL("file:/groovy/script"), (Certificate[])null));, +        Loggers.getLogger(getClass()).debug("Apply permissions [{}] excluding codebases [{}]", extraPermissions, excludedSources);, +        } else if (excludedSources.contains(domain.getCodeSource()) == false && , +                   Objects.toString(domain.getCodeSource()).contains("test-classes") == false) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +                // in case we are running from the IDE:, +                if (artifact == null || System.getProperty("tests.maven") == null) {, +                    artifact = PathUtils.get(System.getProperty("user.dir")).toAbsolutePath().getFileName().toString();, +                }, +                    if (clazz != null) {]