[+++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.plugins.PluginsHelper;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +            // If user tries to reach "/_plugin/" endpoint, we display a page that lists all the plugins #2664, +            if (!Strings.hasText(path)) {, +                try {, +                    XContentBuilder json = jsonBuilder();, +                    if (request.hasParam("pretty")) {, +                        json.prettyPrint();, +                    }, +                    json.startObject().startArray("sites");, +, +                    for(String plugin : PluginsHelper.sitePlugins(environment)) {, +                        json.startObject(), +                                .field("name", plugin), +                                .field("url", "/_plugin/" + plugin +"/"), +                            .endObject();, +                    }, +                    json.endArray().endObject();, +                    channel.sendResponse(new BytesRestResponse(json.bytes().toBytes(),, +                            guessMimeType(guessMimeType("index.json"))));, +                } catch (IOException e) {, +                    channel.sendResponse(new StringRestResponse(INTERNAL_SERVER_ERROR));, +                }, +, +                return;, +            }, +, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.plugins.PluginsHelper;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +            // If user tries to reach "/_plugin/" endpoint, we display a page that lists all the plugins #2664, +            if (!Strings.hasText(path)) {, +                try {, +                    XContentBuilder json = jsonBuilder();, +                    if (request.hasParam("pretty")) {, +                        json.prettyPrint();, +                    }, +                    json.startObject().startArray("sites");, +, +                    for(String plugin : PluginsHelper.sitePlugins(environment)) {, +                        json.startObject(), +                                .field("name", plugin), +                                .field("url", "/_plugin/" + plugin +"/"), +                            .endObject();, +                    }, +                    json.endArray().endObject();, +                    channel.sendResponse(new BytesRestResponse(json.bytes().toBytes(),, +                            guessMimeType(guessMimeType("index.json"))));, +                } catch (IOException e) {, +                    channel.sendResponse(new StringRestResponse(INTERNAL_SERVER_ERROR));, +                }, +, +                return;, +            }, +, +++ b/src/main/java/org/elasticsearch/plugins/PluginsHelper.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.plugins;, +, +import com.google.common.collect.Sets;, +import org.elasticsearch.env.Environment;, +, +import java.io.File;, +import java.util.Set;, +, +/**, + * Helper class for plugins, + */, +public class PluginsHelper {, +, +    /**, +     * Build a list of existing site plugins for a given environment, +     * @param environment We look into Environment#pluginsFile(), +     * @return A Set of existing site plugins, +     */, +    public static Set<String> sitePlugins(Environment environment) {, +        File pluginsFile = environment.pluginsFile();]