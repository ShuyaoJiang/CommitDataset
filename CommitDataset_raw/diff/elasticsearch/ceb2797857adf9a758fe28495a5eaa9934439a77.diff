[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_TRANSLOG_OPS, Validator.INTEGER);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE, Validator.BYTES_SIZE);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_COMPRESS, Validator.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_TRANSLOG_OPS, Validator.INTEGER);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE, Validator.BYTES_SIZE);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_COMPRESS, Validator.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE,, +        RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE,, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_TRANSLOG_OPS, Validator.INTEGER);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE, Validator.BYTES_SIZE);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_COMPRESS, Validator.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE,, +        RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE,, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +    public static final String INDICES_RECOVERY_FILE_CHUNK_SIZE = "indices.recovery.file_chunk_size";, +    public static final String INDICES_RECOVERY_TRANSLOG_OPS = "indices.recovery.translog_ops";, +    public static final String INDICES_RECOVERY_TRANSLOG_SIZE = "indices.recovery.translog_size";, +    public static final String INDICES_RECOVERY_COMPRESS = "indices.recovery.compress";, +    private volatile ByteSizeValue fileChunkSize;, +, +    private volatile boolean compress;, +    private volatile int translogOps;, +    private volatile ByteSizeValue translogSize;, +, +, +        this.fileChunkSize = settings.getAsBytesSize(INDICES_RECOVERY_FILE_CHUNK_SIZE, new ByteSizeValue(512, ByteSizeUnit.KB));, +        this.translogOps = settings.getAsInt(INDICES_RECOVERY_TRANSLOG_OPS, 1000);, +        this.translogSize = settings.getAsBytesSize(INDICES_RECOVERY_TRANSLOG_SIZE, new ByteSizeValue(512, ByteSizeUnit.KB));, +        this.compress = settings.getAsBoolean(INDICES_RECOVERY_COMPRESS, true);, +, +        logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]",, +                maxBytesPerSec, concurrentStreams, fileChunkSize, translogSize, translogOps, compress);, +    public ByteSizeValue fileChunkSize() {, +        return fileChunkSize;, +    }, +, +    public boolean compress() {, +        return compress;, +    }, +, +    public int translogOps() {, +        return translogOps;, +    }, +, +    public ByteSizeValue translogSize() {, +        return translogSize;, +    }, +, +    public int concurrentStreams() {, +        return concurrentStreams;, +    }, +, +            ByteSizeValue fileChunkSize = settings.getAsBytesSize(INDICES_RECOVERY_FILE_CHUNK_SIZE, RecoverySettings.this.fileChunkSize);, +            if (!fileChunkSize.equals(RecoverySettings.this.fileChunkSize)) {, +                logger.info("updating [indices.recovery.file_chunk_size] from [{}] to [{}]", RecoverySettings.this.fileChunkSize, fileChunkSize);, +                RecoverySettings.this.fileChunkSize = fileChunkSize;, +            }, +, +            int translogOps = settings.getAsInt(INDICES_RECOVERY_TRANSLOG_OPS, RecoverySettings.this.translogOps);, +            if (translogOps != RecoverySettings.this.translogOps) {, +                logger.info("updating [indices.recovery.translog_ops] from [{}] to [{}]", RecoverySettings.this.translogOps, translogOps);, +                RecoverySettings.this.translogOps = translogOps;, +            }, +, +            ByteSizeValue translogSize = settings.getAsBytesSize(INDICES_RECOVERY_TRANSLOG_SIZE, RecoverySettings.this.translogSize);, +            if (!translogSize.equals(RecoverySettings.this.translogSize)) {, +                logger.info("updating [indices.recovery.translog_size] from [{}] to [{}]", RecoverySettings.this.translogSize, translogSize);, +                RecoverySettings.this.translogSize = translogSize;, +            }, +, +            boolean compress = settings.getAsBoolean(INDICES_RECOVERY_COMPRESS, RecoverySettings.this.compress);, +            if (compress != RecoverySettings.this.compress) {, +                logger.info("updating [indices.recovery.compress] from [{}] to [{}]", RecoverySettings.this.compress, compress);, +                RecoverySettings.this.compress = compress;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_TRANSLOG_OPS, Validator.INTEGER);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE, Validator.BYTES_SIZE);, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_COMPRESS, Validator.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE,, +        RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE,, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +    public static final String INDICES_RECOVERY_FILE_CHUNK_SIZE = "indices.recovery.file_chunk_size";, +    public static final String INDICES_RECOVERY_TRANSLOG_OPS = "indices.recovery.translog_ops";, +    public static final String INDICES_RECOVERY_TRANSLOG_SIZE = "indices.recovery.translog_size";, +    public static final String INDICES_RECOVERY_COMPRESS = "indices.recovery.compress";, +    private volatile ByteSizeValue fileChunkSize;, +, +    private volatile boolean compress;]