[+++ b/server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, +    public boolean expectEmptyRetentionLeases() {, +        return true;, +    }, +, +, +        @Override, +        public boolean expectEmptyRetentionLeases() {, +            return bootstrapNewHistoryUUID;, +        }, +, +        @Override, +        public boolean expectEmptyRetentionLeases() {, +            return false;, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, +    public boolean expectEmptyRetentionLeases() {, +        return true;, +    }, +, +, +        @Override, +        public boolean expectEmptyRetentionLeases() {, +            return bootstrapNewHistoryUUID;, +        }, +, +        @Override, +        public boolean expectEmptyRetentionLeases() {, +            return false;, +        }, +++ b/server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java, +, +        // TODO after backporting we expect this never to happen in 8.x, so adjust this to throw an exception instead., +        assert Version.CURRENT.major <= 8 : "throw an exception instead of returning EMPTY on null";, +    public boolean assertRetentionLeasesPersisted(final Path path) throws IOException {, +        assert RetentionLeases.FORMAT.loadLatestState(logger, NamedXContentRegistry.EMPTY, path) != null;, +        return true;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, +    public boolean expectEmptyRetentionLeases() {, +        return true;, +    }, +, +, +        @Override, +        public boolean expectEmptyRetentionLeases() {, +            return bootstrapNewHistoryUUID;, +        }, +, +        @Override, +        public boolean expectEmptyRetentionLeases() {, +            return false;, +        }, +++ b/server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java, +, +        // TODO after backporting we expect this never to happen in 8.x, so adjust this to throw an exception instead., +        assert Version.CURRENT.major <= 8 : "throw an exception instead of returning EMPTY on null";, +    public boolean assertRetentionLeasesPersisted(final Path path) throws IOException {, +        assert RetentionLeases.FORMAT.loadLatestState(logger, NamedXContentRegistry.EMPTY, path) != null;, +        return true;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        assert recoveryState.getRecoverySource().expectEmptyRetentionLeases() == false || getRetentionLeases().leases().isEmpty(), +            : "expected empty set of retention leases with recovery source [" + recoveryState.getRecoverySource(), +            + "] but got " + getRetentionLeases();, +    public boolean assertRetentionLeasesPersisted() throws IOException {, +        return replicationTracker.assertRetentionLeasesPersisted(path.getShardStatePath());, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, +    public boolean expectEmptyRetentionLeases() {, +        return true;, +    }, +, +, +        @Override, +        public boolean expectEmptyRetentionLeases() {, +            return bootstrapNewHistoryUUID;, +        }, +, +        @Override, +        public boolean expectEmptyRetentionLeases() {, +            return false;, +        }, +++ b/server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java, +, +        // TODO after backporting we expect this never to happen in 8.x, so adjust this to throw an exception instead., +        assert Version.CURRENT.major <= 8 : "throw an exception instead of returning EMPTY on null";, +    public boolean assertRetentionLeasesPersisted(final Path path) throws IOException {, +        assert RetentionLeases.FORMAT.loadLatestState(logger, NamedXContentRegistry.EMPTY, path) != null;, +        return true;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        assert recoveryState.getRecoverySource().expectEmptyRetentionLeases() == false || getRetentionLeases().leases().isEmpty(), +            : "expected empty set of retention leases with recovery source [" + recoveryState.getRecoverySource(), +            + "] but got " + getRetentionLeases();, +    public boolean assertRetentionLeasesPersisted() throws IOException {]