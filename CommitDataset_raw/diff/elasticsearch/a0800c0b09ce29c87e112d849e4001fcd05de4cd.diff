[+++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcPreparedStatement.java, +import java.util.Collections;, +        initResultSet(query.sql(), query.params());, +            throw new SQLException("Invalid parameter index [ " + parameterIndex + "; needs to be between 1 and [" + query.paramCount() +, +                    "]");, +        setParam(parameterIndex, null, sqlType);, +        setParam(parameterIndex, x, Types.BOOLEAN);, +        setParam(parameterIndex, x, Types.TINYINT);, +        setParam(parameterIndex, x, Types.SMALLINT);, +        setParam(parameterIndex, x, Types.INTEGER);, +        setParam(parameterIndex, x, Types.BIGINT);, +        setParam(parameterIndex, x, Types.REAL);, +        setParam(parameterIndex, x, Types.DOUBLE);, +        setParam(parameterIndex, x, Types.VARCHAR);, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcPreparedStatement.java, +import java.util.Collections;, +        initResultSet(query.sql(), query.params());, +            throw new SQLException("Invalid parameter index [ " + parameterIndex + "; needs to be between 1 and [" + query.paramCount() +, +                    "]");, +        setParam(parameterIndex, null, sqlType);, +        setParam(parameterIndex, x, Types.BOOLEAN);, +        setParam(parameterIndex, x, Types.TINYINT);, +        setParam(parameterIndex, x, Types.SMALLINT);, +        setParam(parameterIndex, x, Types.INTEGER);, +        setParam(parameterIndex, x, Types.BIGINT);, +        setParam(parameterIndex, x, Types.REAL);, +        setParam(parameterIndex, x, Types.DOUBLE);, +        setParam(parameterIndex, x, Types.VARCHAR);, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcStatement.java, +import org.elasticsearch.xpack.sql.plugin.SqlTypedParamValue;, +import java.util.Collections;, +import java.util.List;, +        initResultSet(sql, Collections.emptyList());, +    protected void initResultSet(String sql, List<SqlTypedParamValue> params) throws SQLException {, +        Cursor cursor = con.client.query(sql, params, requestMeta);, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcPreparedStatement.java, +import java.util.Collections;, +        initResultSet(query.sql(), query.params());, +            throw new SQLException("Invalid parameter index [ " + parameterIndex + "; needs to be between 1 and [" + query.paramCount() +, +                    "]");, +        setParam(parameterIndex, null, sqlType);, +        setParam(parameterIndex, x, Types.BOOLEAN);, +        setParam(parameterIndex, x, Types.TINYINT);, +        setParam(parameterIndex, x, Types.SMALLINT);, +        setParam(parameterIndex, x, Types.INTEGER);, +        setParam(parameterIndex, x, Types.BIGINT);, +        setParam(parameterIndex, x, Types.REAL);, +        setParam(parameterIndex, x, Types.DOUBLE);, +        setParam(parameterIndex, x, Types.VARCHAR);, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcStatement.java, +import org.elasticsearch.xpack.sql.plugin.SqlTypedParamValue;, +import java.util.Collections;, +import java.util.List;, +        initResultSet(sql, Collections.emptyList());, +    protected void initResultSet(String sql, List<SqlTypedParamValue> params) throws SQLException {, +        Cursor cursor = con.client.query(sql, params, requestMeta);, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/PreparedQuery.java, +import org.elasticsearch.xpack.sql.plugin.SqlTypedParamValue;, +import org.elasticsearch.xpack.sql.type.DataType;, +import java.util.Arrays;, +import java.util.stream.Collectors;, +    private final String sql;, +    private final ParamInfo[] params;, +    private PreparedQuery(String sql, int paramCount) {, +        this.sql = sql;, +        this.params = new ParamInfo[paramCount];, +    /**, +     * Returns the sql statement, +     */, +    String sql() {, +        return sql;, +    /**, +     * Returns the parameters if the SQL statement is parametrized, +     */, +    List<SqlTypedParamValue> params() {, +        return Arrays.stream(this.params).map(, +                paramInfo -> new SqlTypedParamValue(paramInfo.value, DataType.fromJdbcType(paramInfo.type)), +        ).collect(Collectors.toList());, +        return sql() + " " + params();, +    // Creates a PreparedQuery, +        return new PreparedQuery(sql, SqlQueryParameterAnalyzer.parametersCount(sql));, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcPreparedStatement.java, +import java.util.Collections;, +        initResultSet(query.sql(), query.params());, +            throw new SQLException("Invalid parameter index [ " + parameterIndex + "; needs to be between 1 and [" + query.paramCount() +, +                    "]");, +        setParam(parameterIndex, null, sqlType);, +        setParam(parameterIndex, x, Types.BOOLEAN);, +        setParam(parameterIndex, x, Types.TINYINT);, +        setParam(parameterIndex, x, Types.SMALLINT);, +        setParam(parameterIndex, x, Types.INTEGER);, +        setParam(parameterIndex, x, Types.BIGINT);, +        setParam(parameterIndex, x, Types.REAL);, +        setParam(parameterIndex, x, Types.DOUBLE);, +        setParam(parameterIndex, x, Types.VARCHAR);, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcStatement.java, +import org.elasticsearch.xpack.sql.plugin.SqlTypedParamValue;, +import java.util.Collections;, +import java.util.List;, +        initResultSet(sql, Collections.emptyList());]