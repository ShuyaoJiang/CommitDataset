[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.fielddata.fieldcomparator.SortMode;, +    XFieldComparatorSource comparatorSource(@Nullable Object missingValue, SortMode sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.fielddata.fieldcomparator.SortMode;, +    XFieldComparatorSource comparatorSource(@Nullable Object missingValue, SortMode sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparator.java, +import java.io.IOException;, +, +    public ByteValuesComparator(IndexNumericFieldData<?> indexFieldData, byte missingValue, int numHits, SortMode sortMode) {, +        super(indexFieldData, missingValue, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.fielddata.fieldcomparator.SortMode;, +    XFieldComparatorSource comparatorSource(@Nullable Object missingValue, SortMode sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparator.java, +import java.io.IOException;, +, +    public ByteValuesComparator(IndexNumericFieldData<?> indexFieldData, byte missingValue, int numHits, SortMode sortMode) {, +        super(indexFieldData, missingValue, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparatorSource.java, +    private final SortMode sortMode;, +    public ByteValuesComparatorSource(IndexNumericFieldData<?> indexFieldData, @Nullable Object missingValue, SortMode sortMode) {, +        this.sortMode = sortMode;, +        return new ByteValuesComparator(indexFieldData, dMissingValue, numHits, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.fielddata.fieldcomparator.SortMode;, +    XFieldComparatorSource comparatorSource(@Nullable Object missingValue, SortMode sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparator.java, +import java.io.IOException;, +, +    public ByteValuesComparator(IndexNumericFieldData<?> indexFieldData, byte missingValue, int numHits, SortMode sortMode) {, +        super(indexFieldData, missingValue, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparatorSource.java, +    private final SortMode sortMode;, +    public ByteValuesComparatorSource(IndexNumericFieldData<?> indexFieldData, @Nullable Object missingValue, SortMode sortMode) {, +        this.sortMode = sortMode;, +        return new ByteValuesComparator(indexFieldData, dMissingValue, numHits, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefFieldComparatorSource.java, +    private final SortMode sortMode;, +    public BytesRefFieldComparatorSource(IndexFieldData<?> indexFieldData, SortMode sortMode) {, +        this.sortMode = sortMode;, +            return new BytesRefOrdValComparator((IndexFieldData.WithOrdinals<?>) indexFieldData, numHits, sortMode);, +        return new BytesRefValComparator(indexFieldData, numHits, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.fielddata.fieldcomparator.SortMode;, +    XFieldComparatorSource comparatorSource(@Nullable Object missingValue, SortMode sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparator.java, +import java.io.IOException;, +, +    public ByteValuesComparator(IndexNumericFieldData<?> indexFieldData, byte missingValue, int numHits, SortMode sortMode) {, +        super(indexFieldData, missingValue, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparatorSource.java, +    private final SortMode sortMode;, +    public ByteValuesComparatorSource(IndexNumericFieldData<?> indexFieldData, @Nullable Object missingValue, SortMode sortMode) {, +        this.sortMode = sortMode;, +        return new ByteValuesComparator(indexFieldData, dMissingValue, numHits, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefFieldComparatorSource.java, +    private final SortMode sortMode;, +    public BytesRefFieldComparatorSource(IndexFieldData<?> indexFieldData, SortMode sortMode) {, +        this.sortMode = sortMode;, +            return new BytesRefOrdValComparator((IndexFieldData.WithOrdinals<?>) indexFieldData, numHits, sortMode);, +        return new BytesRefValComparator(indexFieldData, numHits, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +    final SortMode sortMode;, +    public BytesRefOrdValComparator(IndexFieldData.WithOrdinals<?> indexFieldData, int numHits, SortMode sortMode) {, +        this.sortMode = sortMode;, +            final int docOrd = getRelevantOrd(readerOrds, doc, sortMode);, +            final int ord = getRelevantOrd(readerOrds, doc, sortMode);, +            BytesRef docValue = getRelevantValue(termsIndex, doc, sortMode);, +    static BytesRef getRelevantValue(BytesValues.WithOrdinals readerValues, int docId, SortMode sortMode) {, +            if (sortMode == SortMode.MAX) {, +    static int getRelevantOrd(Ordinals.Docs readerOrds, int docId, SortMode sortMode) {, +            if (sortMode == SortMode.MAX) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.fielddata.fieldcomparator.SortMode;, +    XFieldComparatorSource comparatorSource(@Nullable Object missingValue, SortMode sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparator.java, +import java.io.IOException;, +, +    public ByteValuesComparator(IndexNumericFieldData<?> indexFieldData, byte missingValue, int numHits, SortMode sortMode) {, +        super(indexFieldData, missingValue, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/ByteValuesComparatorSource.java, +    private final SortMode sortMode;, +    public ByteValuesComparatorSource(IndexNumericFieldData<?> indexFieldData, @Nullable Object missingValue, SortMode sortMode) {, +        this.sortMode = sortMode;, +        return new ByteValuesComparator(indexFieldData, dMissingValue, numHits, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefFieldComparatorSource.java, +    private final SortMode sortMode;, +    public BytesRefFieldComparatorSource(IndexFieldData<?> indexFieldData, SortMode sortMode) {, +        this.sortMode = sortMode;, +            return new BytesRefOrdValComparator((IndexFieldData.WithOrdinals<?>) indexFieldData, numHits, sortMode);, +        return new BytesRefValComparator(indexFieldData, numHits, sortMode);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +    final SortMode sortMode;, +    public BytesRefOrdValComparator(IndexFieldData.WithOrdinals<?> indexFieldData, int numHits, SortMode sortMode) {, +        this.sortMode = sortMode;, +            final int docOrd = getRelevantOrd(readerOrds, doc, sortMode);, +            final int ord = getRelevantOrd(readerOrds, doc, sortMode);, +            BytesRef docValue = getRelevantValue(termsIndex, doc, sortMode);, +    static BytesRef getRelevantValue(BytesValues.WithOrdinals readerValues, int docId, SortMode sortMode) {]