[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateJobAction.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +            JobUpdate update = JobUpdate.PARSER.apply(parser, null);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateJobAction.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +            JobUpdate update = JobUpdate.PARSER.apply(parser, null);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobUpdate.java, +    @SuppressWarnings("unchecked"), +    public static final ConstructingObjectParser<JobUpdate, Void> PARSER =, +            new ConstructingObjectParser<>("job_update", a -> new JobUpdate((String) a[0], (List<DetectorUpdate>) a[1],, +                    (ModelDebugConfig) a[2], (AnalysisLimits) a[3], (Long) a[4], (Long) a[5], (Long) a[6], (Long) a[7],, +                    (List<String>) a[8], (Map<String, Object>) a[9]));, +, +        PARSER.declareStringOrNull(ConstructingObjectParser.optionalConstructorArg(), Job.DESCRIPTION);, +        PARSER.declareObjectArray(ConstructingObjectParser.optionalConstructorArg(), DetectorUpdate.PARSER, DETECTORS);, +        PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), ModelDebugConfig.PARSER, Job.MODEL_DEBUG_CONFIG);, +        PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), AnalysisLimits.PARSER, Job.ANALYSIS_LIMITS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.BACKGROUND_PERSIST_INTERVAL);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.RENORMALIZATION_WINDOW_DAYS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.RESULTS_RETENTION_DAYS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.MODEL_SNAPSHOT_RETENTION_DAYS);, +        PARSER.declareStringArray(ConstructingObjectParser.optionalConstructorArg(), AnalysisConfig.CATEGORIZATION_FILTERS);, +        PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(), (p, c) -> p.map(), Job.CUSTOM_SETTINGS,, +                ObjectParser.ValueType.OBJECT);, +    public JobUpdate(@Nullable String description, @Nullable List<DetectorUpdate> detectorUpdates,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateJobAction.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +            JobUpdate update = JobUpdate.PARSER.apply(parser, null);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobUpdate.java, +    @SuppressWarnings("unchecked"), +    public static final ConstructingObjectParser<JobUpdate, Void> PARSER =, +            new ConstructingObjectParser<>("job_update", a -> new JobUpdate((String) a[0], (List<DetectorUpdate>) a[1],, +                    (ModelDebugConfig) a[2], (AnalysisLimits) a[3], (Long) a[4], (Long) a[5], (Long) a[6], (Long) a[7],, +                    (List<String>) a[8], (Map<String, Object>) a[9]));, +, +        PARSER.declareStringOrNull(ConstructingObjectParser.optionalConstructorArg(), Job.DESCRIPTION);, +        PARSER.declareObjectArray(ConstructingObjectParser.optionalConstructorArg(), DetectorUpdate.PARSER, DETECTORS);, +        PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), ModelDebugConfig.PARSER, Job.MODEL_DEBUG_CONFIG);, +        PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), AnalysisLimits.PARSER, Job.ANALYSIS_LIMITS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.BACKGROUND_PERSIST_INTERVAL);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.RENORMALIZATION_WINDOW_DAYS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.RESULTS_RETENTION_DAYS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.MODEL_SNAPSHOT_RETENTION_DAYS);, +        PARSER.declareStringArray(ConstructingObjectParser.optionalConstructorArg(), AnalysisConfig.CATEGORIZATION_FILTERS);, +        PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(), (p, c) -> p.map(), Job.CUSTOM_SETTINGS,, +                ObjectParser.ValueType.OBJECT);, +    public JobUpdate(@Nullable String description, @Nullable List<DetectorUpdate> detectorUpdates,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/rest/action/RestHijackOperationAction.java, +            controller.registerHandler(POST, Watch.INDEX + "/_delete_by_query", unsupportedHandler);, +            controller.registerHandler(POST, Watch.INDEX + "/watch/_delete_by_query", unsupportedHandler);, +            controller.registerHandler(POST, Watch.INDEX + "/_update_by_query", unsupportedHandler);, +            controller.registerHandler(POST, Watch.INDEX + "/watch/_update_by_query", unsupportedHandler);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateJobAction.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +            JobUpdate update = JobUpdate.PARSER.apply(parser, null);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobUpdate.java, +    @SuppressWarnings("unchecked"), +    public static final ConstructingObjectParser<JobUpdate, Void> PARSER =, +            new ConstructingObjectParser<>("job_update", a -> new JobUpdate((String) a[0], (List<DetectorUpdate>) a[1],, +                    (ModelDebugConfig) a[2], (AnalysisLimits) a[3], (Long) a[4], (Long) a[5], (Long) a[6], (Long) a[7],, +                    (List<String>) a[8], (Map<String, Object>) a[9]));, +, +        PARSER.declareStringOrNull(ConstructingObjectParser.optionalConstructorArg(), Job.DESCRIPTION);, +        PARSER.declareObjectArray(ConstructingObjectParser.optionalConstructorArg(), DetectorUpdate.PARSER, DETECTORS);, +        PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), ModelDebugConfig.PARSER, Job.MODEL_DEBUG_CONFIG);, +        PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), AnalysisLimits.PARSER, Job.ANALYSIS_LIMITS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.BACKGROUND_PERSIST_INTERVAL);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.RENORMALIZATION_WINDOW_DAYS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.RESULTS_RETENTION_DAYS);, +        PARSER.declareLong(ConstructingObjectParser.optionalConstructorArg(), Job.MODEL_SNAPSHOT_RETENTION_DAYS);, +        PARSER.declareStringArray(ConstructingObjectParser.optionalConstructorArg(), AnalysisConfig.CATEGORIZATION_FILTERS);, +        PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(), (p, c) -> p.map(), Job.CUSTOM_SETTINGS,, +                ObjectParser.ValueType.OBJECT);, +    public JobUpdate(@Nullable String description, @Nullable List<DetectorUpdate> detectorUpdates,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/rest/action/RestHijackOperationAction.java, +            controller.registerHandler(POST, Watch.INDEX + "/_delete_by_query", unsupportedHandler);, +            controller.registerHandler(POST, Watch.INDEX + "/watch/_delete_by_query", unsupportedHandler);, +            controller.registerHandler(POST, Watch.INDEX + "/_update_by_query", unsupportedHandler);, +            controller.registerHandler(POST, Watch.INDEX + "/watch/_update_by_query", unsupportedHandler);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/config/JobUpdateTests.java, +        String description = null;, +            description = randomAsciiOfLength(20);, +        if (randomBoolean()) {, +        ModelDebugConfig modelDebugConfig = null;, +            modelDebugConfig = new ModelDebugConfig(randomDouble(), randomAsciiOfLength(10));, +        AnalysisLimits analysisLimits = null;, +            analysisLimits = new AnalysisLimits(randomNonNegativeLong(), randomNonNegativeLong());, +        Long renormalizationWindowDays = null;, +            renormalizationWindowDays = randomNonNegativeLong();, +        Long backgroundPersistInterval = null;, +            backgroundPersistInterval = randomNonNegativeLong();, +        Long modelSnapshotRetentionDays = null;, +            modelSnapshotRetentionDays = randomNonNegativeLong();, +        Long resultsRetentionDays = null;, +            resultsRetentionDays = randomNonNegativeLong();, +        List<String> categorizationFilters = null;, +            categorizationFilters = Arrays.asList(generateRandomStringArray(10, 10, false));, +        Map<String, Object> customSettings = null;, +            customSettings = Collections.singletonMap(randomAsciiOfLength(10), randomAsciiOfLength(10));, +        return new JobUpdate(description, detectorUpdates, modelDebugConfig, analysisLimits, backgroundPersistInterval,]