[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.explain.ExplainRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +    static Request explain(ExplainRequest explainRequest) throws IOException {, +        Request request = new Request(HttpGet.METHOD_NAME,, +            endpoint(explainRequest.index(), explainRequest.type(), explainRequest.id(), "_explain"));, +, +        Params params = new Params(request);, +        params.withStoredFields(explainRequest.storedFields());, +        params.withFetchSourceContext(explainRequest.fetchSourceContext());, +        params.withRouting(explainRequest.routing());, +        params.withPreference(explainRequest.preference());, +        request.setEntity(createEntity(explainRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.explain.ExplainRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +    static Request explain(ExplainRequest explainRequest) throws IOException {, +        Request request = new Request(HttpGet.METHOD_NAME,, +            endpoint(explainRequest.index(), explainRequest.type(), explainRequest.id(), "_explain"));, +, +        Params params = new Params(request);, +        params.withStoredFields(explainRequest.storedFields());, +        params.withFetchSourceContext(explainRequest.fetchSourceContext());, +        params.withRouting(explainRequest.routing());, +        params.withPreference(explainRequest.preference());, +        request.setEntity(createEntity(explainRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.explain.ExplainRequest;, +import org.elasticsearch.action.explain.ExplainResponse;, +     * Executes a request using the Explain API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html">Explain API on elastic.co</a>, +     * @param explainRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public final ExplainResponse explain(ExplainRequest explainRequest, RequestOptions options) throws IOException {, +        return performRequest(explainRequest, RequestConverters::explain, options,, +            response -> {, +                CheckedFunction<XContentParser, ExplainResponse, IOException> entityParser =, +                    parser -> ExplainResponse.fromXContent(parser, convertExistsResponse(response));, +                return parseEntity(response.getEntity(), entityParser);, +            },, +            singleton(404));, +    }, +, +    /**, +     * Asynchronously executes a request using the Explain API., +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html">Explain API on elastic.co</a>, +     * @param explainRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public final void explainAsync(ExplainRequest explainRequest, RequestOptions options, ActionListener<ExplainResponse> listener) {, +        performRequestAsync(explainRequest, RequestConverters::explain, options,, +            response -> {, +                CheckedFunction<XContentParser, ExplainResponse, IOException> entityParser =, +                    parser -> ExplainResponse.fromXContent(parser, convertExistsResponse(response));, +                return parseEntity(response.getEntity(), entityParser);, +            },, +            listener, singleton(404));, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.explain.ExplainRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +    static Request explain(ExplainRequest explainRequest) throws IOException {, +        Request request = new Request(HttpGet.METHOD_NAME,, +            endpoint(explainRequest.index(), explainRequest.type(), explainRequest.id(), "_explain"));, +, +        Params params = new Params(request);, +        params.withStoredFields(explainRequest.storedFields());, +        params.withFetchSourceContext(explainRequest.fetchSourceContext());, +        params.withRouting(explainRequest.routing());, +        params.withPreference(explainRequest.preference());, +        request.setEntity(createEntity(explainRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.explain.ExplainRequest;, +import org.elasticsearch.action.explain.ExplainResponse;, +     * Executes a request using the Explain API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html">Explain API on elastic.co</a>, +     * @param explainRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public final ExplainResponse explain(ExplainRequest explainRequest, RequestOptions options) throws IOException {, +        return performRequest(explainRequest, RequestConverters::explain, options,, +            response -> {]