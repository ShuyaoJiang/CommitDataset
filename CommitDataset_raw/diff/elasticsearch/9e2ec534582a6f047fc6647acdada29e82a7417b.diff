[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.indices.recovery.PeerRecoveryTargetService;, +import java.util.Locale;, +        final ShardRouting currentRouting = this.shardRouting;, +        if (currentRouting != null) {, +            if (!newRouting.primary() && currentRouting.primary()) {, +                logger.warn("suspect illegal state: trying to move shard from primary mode to replica mode");, +            }, +            // if its the same routing, return, +            if (currentRouting.equals(newRouting)) {, +                return;, +            }, +        if (state == IndexShardState.POST_RECOVERY) {, +            // if the state is started or relocating (cause it might move right away from started to relocating), +            // then move to STARTED, +            if (newRouting.state() == ShardRoutingState.STARTED || newRouting.state() == ShardRoutingState.RELOCATING) {, +, +                boolean movedToStarted = false;, +                synchronized (mutex) {, +                    // do the check under a mutex, so we make sure to only change to STARTED if in POST_RECOVERY, +                    if (state == IndexShardState.POST_RECOVERY) {, +                        movedToStarted = true;, +                    } else {, +                        logger.debug("state [{}] not changed, not in POST_RECOVERY, global state is [{}]", state, newRouting.state());, +                    }, +                }, +                if (movedToStarted) {, +                    indexEventListener.afterIndexShardStarted(this);, +                }, +            }, +        }, +, +        if (state == IndexShardState.RELOCATED &&, +        persistMetadata(newRouting, currentRouting);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.indices.recovery.PeerRecoveryTargetService;, +import java.util.Locale;, +        final ShardRouting currentRouting = this.shardRouting;, +        if (currentRouting != null) {, +            if (!newRouting.primary() && currentRouting.primary()) {, +                logger.warn("suspect illegal state: trying to move shard from primary mode to replica mode");, +            }, +            // if its the same routing, return, +            if (currentRouting.equals(newRouting)) {, +                return;, +            }, +        if (state == IndexShardState.POST_RECOVERY) {, +            // if the state is started or relocating (cause it might move right away from started to relocating), +            // then move to STARTED, +            if (newRouting.state() == ShardRoutingState.STARTED || newRouting.state() == ShardRoutingState.RELOCATING) {, +, +                boolean movedToStarted = false;, +                synchronized (mutex) {, +                    // do the check under a mutex, so we make sure to only change to STARTED if in POST_RECOVERY, +                    if (state == IndexShardState.POST_RECOVERY) {, +                        movedToStarted = true;, +                    } else {, +                        logger.debug("state [{}] not changed, not in POST_RECOVERY, global state is [{}]", state, newRouting.state());, +                    }, +                }, +                if (movedToStarted) {, +                    indexEventListener.afterIndexShardStarted(this);, +                }, +            }, +        }, +, +        if (state == IndexShardState.RELOCATED &&, +        persistMetadata(newRouting, currentRouting);, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.indices.recovery.PeerRecoveryTargetService;, +import java.util.Locale;, +        final ShardRouting currentRouting = this.shardRouting;, +        if (currentRouting != null) {, +            if (!newRouting.primary() && currentRouting.primary()) {, +                logger.warn("suspect illegal state: trying to move shard from primary mode to replica mode");, +            }, +            // if its the same routing, return, +            if (currentRouting.equals(newRouting)) {, +                return;, +            }, +        if (state == IndexShardState.POST_RECOVERY) {, +            // if the state is started or relocating (cause it might move right away from started to relocating), +            // then move to STARTED, +            if (newRouting.state() == ShardRoutingState.STARTED || newRouting.state() == ShardRoutingState.RELOCATING) {, +, +                boolean movedToStarted = false;, +                synchronized (mutex) {, +                    // do the check under a mutex, so we make sure to only change to STARTED if in POST_RECOVERY]