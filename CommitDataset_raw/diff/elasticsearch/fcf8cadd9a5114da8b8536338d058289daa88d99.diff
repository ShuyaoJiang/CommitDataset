[+++ b/x-pack/plugin/ml/qa/disabled/src/test/java/org/elasticsearch/xpack/ml/integration/MlPluginDisabledIT.java, +import org.elasticsearch.client.Request;, +        {, +            {, +                {, +                    {, +                    }, +                }, +            }, +            {, +            }, +        }, +        Request request = new Request("PUT", MachineLearning.BASE_PATH + "anomaly_detectors/foo");, +        request.setJsonEntity(Strings.toString(xContentBuilder));, +        ResponseException exception = expectThrows(ResponseException.class, () -> client().performRequest(request));, +++ b/x-pack/plugin/ml/qa/disabled/src/test/java/org/elasticsearch/xpack/ml/integration/MlPluginDisabledIT.java, +import org.elasticsearch.client.Request;, +        {, +            {, +                {, +                    {, +                    }, +                }, +            }, +            {, +            }, +        }, +        Request request = new Request("PUT", MachineLearning.BASE_PATH + "anomaly_detectors/foo");, +        request.setJsonEntity(Strings.toString(xContentBuilder));, +        ResponseException exception = expectThrows(ResponseException.class, () -> client().performRequest(request));, +++ b/x-pack/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Request request = new Request("GET", "/");, +        RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER,, +                UsernamePasswordToken.basicAuthHeaderValue(USER, new SecureString(PASS.toCharArray())));, +        request.setOptions(options);, +        Response response = getRestClient().performRequest(request);, +++ b/x-pack/plugin/ml/qa/disabled/src/test/java/org/elasticsearch/xpack/ml/integration/MlPluginDisabledIT.java, +import org.elasticsearch.client.Request;, +        {, +            {, +                {, +                    {, +                    }, +                }, +            }, +            {, +            }, +        }, +        Request request = new Request("PUT", MachineLearning.BASE_PATH + "anomaly_detectors/foo");, +        request.setJsonEntity(Strings.toString(xContentBuilder));, +        ResponseException exception = expectThrows(ResponseException.class, () -> client().performRequest(request));, +++ b/x-pack/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        Request request = new Request("GET", "/");, +        RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER,, +                UsernamePasswordToken.basicAuthHeaderValue(USER, new SecureString(PASS.toCharArray())));, +        request.setOptions(options);, +        Response response = getRestClient().performRequest(request);, +++ b/x-pack/qa/multi-node/src/test/java/org/elasticsearch/multi_node/GlobalCheckpointSyncActionIT.java, +import org.elasticsearch.client.Request;, +            Request createIndexRequest = new Request("PUT", "/test-index");, +            createIndexRequest.setJsonEntity(Strings.toString(builder));, +            client().performRequest(createIndexRequest);, +        Request healthRequest = new Request("GET", "/_cluster/health");, +        healthRequest.addParameter("wait_for_status", "green");, +        client().performRequest(healthRequest);, +                Request indexRequest = new Request("PUT", "/test-index/test-type/" + i);, +                indexRequest.setJsonEntity(Strings.toString(builder));, +                client().performRequest(indexRequest);, +            final Request request = new Request("GET", "/test-index/_stats");, +            request.addParameter("level", "shards");, +            request.addParameter("filter_path", "**.seq_no");, +            final Response response = client().performRequest(request);]