[+++ b/.idea/dictionaries/kimchy.xml, +      <w>histo</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>histo</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.facets.histogram.HistogramFacet;, +    public SearchRequestBuilder addFacetHistogram(String name, String fieldName, long interval) {, +        facetsBuilder().histogramFacet(name, fieldName, interval);, +        return this;, +    }, +, +    public SearchRequestBuilder addFacetHistogram(String name, String fieldName, long interval, HistogramFacet.ComparatorType comparatorType) {, +        facetsBuilder().histogramFacet(name, fieldName, interval, comparatorType);, +        return this;, +    }, +, +    public SearchRequestBuilder addFacetHistogramGlobal(String name, String fieldName, long interval) {, +        facetsBuilder().histogramFacetGlobal(name, fieldName, interval);, +        return this;, +    }, +, +    public SearchRequestBuilder addFacetHistogramGlobal(String name, String fieldName, long interval, HistogramFacet.ComparatorType comparatorType) {, +        facetsBuilder().histogramFacetGlobal(name, fieldName, interval, comparatorType);, +        return this;, +    }, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>histo</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.facets.histogram.HistogramFacet;, +    public SearchRequestBuilder addFacetHistogram(String name, String fieldName, long interval) {, +        facetsBuilder().histogramFacet(name, fieldName, interval);, +        return this;, +    }, +, +    public SearchRequestBuilder addFacetHistogram(String name, String fieldName, long interval, HistogramFacet.ComparatorType comparatorType) {, +        facetsBuilder().histogramFacet(name, fieldName, interval, comparatorType);, +        return this;, +    }, +, +    public SearchRequestBuilder addFacetHistogramGlobal(String name, String fieldName, long interval) {, +        facetsBuilder().histogramFacetGlobal(name, fieldName, interval);, +        return this;, +    }, +, +    public SearchRequestBuilder addFacetHistogramGlobal(String name, String fieldName, long interval, HistogramFacet.ComparatorType comparatorType) {, +        facetsBuilder().histogramFacetGlobal(name, fieldName, interval, comparatorType);, +        return this;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +import org.elasticsearch.search.facets.histogram.HistogramFacet;, +import org.elasticsearch.search.facets.histogram.HistogramFacetCollectorParser;, +    private List<BuilderHistogramFacet> histogramFacets;, +    public SearchSourceFacetsBuilder histogramFacet(String name, String fieldName, long interval) {, +        return histogramFacet(name, fieldName, interval, HistogramFacet.ComparatorType.VALUE);, +    }, +, +    public SearchSourceFacetsBuilder histogramFacet(String name, String fieldName, long interval, HistogramFacet.ComparatorType comparatorType) {, +        if (histogramFacets == null) {, +            histogramFacets = newArrayListWithCapacity(2);, +        }, +        histogramFacets.add(new BuilderHistogramFacet(name, fieldName, interval, comparatorType, false));, +        return this;, +    }, +, +    public SearchSourceFacetsBuilder histogramFacetGlobal(String name, String fieldName, long interval) {, +        return histogramFacet(name, fieldName, interval, HistogramFacet.ComparatorType.VALUE);, +    }, +, +    public SearchSourceFacetsBuilder histogramFacetGlobal(String name, String fieldName, long interval, HistogramFacet.ComparatorType comparatorType) {, +        if (histogramFacets == null) {, +            histogramFacets = newArrayListWithCapacity(2);, +        }, +        histogramFacets.add(new BuilderHistogramFacet(name, fieldName, interval, comparatorType, true));, +        return this;, +    }, +, +        if (queryFacets == null && termsFacets == null && statisticalFacets == null && histogramFacets == null) {, +        if (histogramFacets != null) {, +            for (BuilderHistogramFacet histogramFacet : histogramFacets) {, +                builder.startObject(histogramFacet.name());, +, +                builder.startObject(HistogramFacetCollectorParser.NAME);, +                builder.field("field", histogramFacet.fieldName());, +                builder.field("interval", histogramFacet.interval());, +                builder.field("comparator", histogramFacet.comparatorType().description());, +                builder.endObject();, +, +                if (histogramFacet.global() != null) {, +                    builder.field("global", histogramFacet.global());, +                }, +, +                builder.endObject();, +            }, +        }, +, +, +    private static class BuilderHistogramFacet {, +        private final String name;]