[+++ /dev/null, +++ /dev/null, +++ b/core/licenses/groovy-all-2.4.4-indy.jar.sha1, +574a15e35eba5f986a0564ae197c78e843ece954, +++ /dev/null, +++ b/core/licenses/groovy-all-2.4.4-indy.jar.sha1, +574a15e35eba5f986a0564ae197c78e843ece954, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.xcontent.*;, +public class IndexMetaData implements Diffable<IndexMetaData>, FromXContentBuilder<IndexMetaData>, ToXContent  {, +    @Override, +    public IndexMetaData fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +        return Builder.fromXContent(parser);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        Builder.toXContent(this, builder, params);, +        return builder;, +    }, +, +++ /dev/null, +++ b/core/licenses/groovy-all-2.4.4-indy.jar.sha1, +574a15e35eba5f986a0564ae197c78e843ece954, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.xcontent.*;, +public class IndexMetaData implements Diffable<IndexMetaData>, FromXContentBuilder<IndexMetaData>, ToXContent  {, +    @Override, +    public IndexMetaData fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +        return Builder.fromXContent(parser);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        Builder.toXContent(this, builder, params);, +        return builder;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.ParseFieldMatcher;, +public class MetaData implements Iterable<IndexMetaData>, Diffable<MetaData>, FromXContentBuilder<MetaData>, ToXContent {, +    @Override, +    public MetaData fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +        return Builder.fromXContent(parser);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        Builder.toXContent(this, builder, params);, +        return builder;, +    }, +, +++ /dev/null, +++ b/core/licenses/groovy-all-2.4.4-indy.jar.sha1, +574a15e35eba5f986a0564ae197c78e843ece954, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.xcontent.*;, +public class IndexMetaData implements Diffable<IndexMetaData>, FromXContentBuilder<IndexMetaData>, ToXContent  {, +    @Override, +    public IndexMetaData fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +        return Builder.fromXContent(parser);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        Builder.toXContent(this, builder, params);, +        return builder;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.ParseFieldMatcher;, +public class MetaData implements Iterable<IndexMetaData>, Diffable<MetaData>, FromXContentBuilder<MetaData>, ToXContent {, +    @Override, +    public MetaData fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +        return Builder.fromXContent(parser);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        Builder.toXContent(this, builder, params);, +        return builder;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    final static ImmutableList<ShardRouting> NO_SHARDS = ImmutableList.of();, +     * Returns true if no primaries are active or initializing for this shard, +     */, +    private boolean noPrimariesActive() {, +        if (!primaryAsList.isEmpty() && !primaryAsList.get(0).active() && !primaryAsList.get(0).initializing()) {, +            return true;, +        }, +        return false;, +    }, +, +    /**, +        if (noPrimariesActive()) {, +            return new PlainShardIterator(shardId, NO_SHARDS);]