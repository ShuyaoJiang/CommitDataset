[+++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.QueryParseContext;, +    public static final SuggestBuilder PROTOTYPE = new SuggestBuilder();, +    protected static final ParseField GLOBAL_TEXT_FIELD = new ParseField("text");, +, +     * Gets the global suggest text, +     */, +    public String getText() {, +        return null;, +    }, +, +    /**, +     * Adds an {@link org.elasticsearch.search.suggest.SuggestionBuilder} instance under a user defined name., +     * Get the <code>Suggestions</code> that were added to the globat {@link SuggestBuilder}, +     */, +    public List<SuggestionBuilder<?>> getSuggestions() {, +        return suggestions;, +    }, +, +    /**, +    public static SuggestBuilder fromXContent(QueryParseContext parseContext, Suggesters suggesters) throws IOException {, +        XContentParser parser = parseContext.parser();, +        ParseFieldMatcher parseFieldMatcher = parseContext.parseFieldMatcher();, +        SuggestBuilder suggestBuilder = new SuggestBuilder();, +        String fieldName = null;, +, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                fieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (parseFieldMatcher.match(fieldName, GLOBAL_TEXT_FIELD)) {, +                    suggestBuilder.setText(parser.text());, +                } else {, +                    throw new IllegalArgumentException("[suggest] does not support [" + fieldName + "]");, +                }, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                String suggestionName = fieldName;, +                if (suggestionName == null) {, +                    throw new IllegalArgumentException("Suggestion must have name");, +                }, +                suggestBuilder.addSuggestion(SuggestionBuilder.fromXContent(parseContext, suggestionName, suggesters));, +            } else {, +                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "] after [" + fieldName + "]");, +            }, +        }, +        return suggestBuilder;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.QueryParseContext;, +    public static final SuggestBuilder PROTOTYPE = new SuggestBuilder();, +    protected static final ParseField GLOBAL_TEXT_FIELD = new ParseField("text");, +, +     * Gets the global suggest text, +     */, +    public String getText() {, +        return null;, +    }, +, +    /**, +     * Adds an {@link org.elasticsearch.search.suggest.SuggestionBuilder} instance under a user defined name., +     * Get the <code>Suggestions</code> that were added to the globat {@link SuggestBuilder}, +     */, +    public List<SuggestionBuilder<?>> getSuggestions() {, +        return suggestions;, +    }, +, +    /**, +    public static SuggestBuilder fromXContent(QueryParseContext parseContext, Suggesters suggesters) throws IOException {, +        XContentParser parser = parseContext.parser();, +        ParseFieldMatcher parseFieldMatcher = parseContext.parseFieldMatcher();, +        SuggestBuilder suggestBuilder = new SuggestBuilder();, +        String fieldName = null;, +, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                fieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (parseFieldMatcher.match(fieldName, GLOBAL_TEXT_FIELD)) {, +                    suggestBuilder.setText(parser.text());, +                } else {, +                    throw new IllegalArgumentException("[suggest] does not support [" + fieldName + "]");, +                }, +            } else if (token == XContentParser.Token.START_OBJECT) {]