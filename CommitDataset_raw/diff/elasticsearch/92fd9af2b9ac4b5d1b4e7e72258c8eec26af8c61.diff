[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/OnGoingRecovery.java, +        RETRY,, +    final long startTimeImMillis = System.currentTimeMillis();, +    volatile long retryTimeInMillis = 0;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/OnGoingRecovery.java, +        RETRY,, +    final long startTimeImMillis = System.currentTimeMillis();, +    volatile long retryTimeInMillis = 0;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoveryTarget.java, +    public void startRecovery(final StartRecoveryRequest request, final boolean fromRetry, final RecoveryListener listener) {, +            removeAndCleanOnGoingRecovery(request.shardId());, +            removeAndCleanOnGoingRecovery(request.shardId());, +            removeAndCleanOnGoingRecovery(request.shardId());, +                doRecovery(shard, request, fromRetry, listener);, +    private void doRecovery(final InternalIndexShard shard, final StartRecoveryRequest request, final boolean fromRetry, final RecoveryListener listener) {, +            removeAndCleanOnGoingRecovery(request.shardId());, +        OnGoingRecovery recovery;, +        if (fromRetry) {, +            recovery = onGoingRecoveries.get(request.shardId());, +        } else {, +            recovery = new OnGoingRecovery();, +            onGoingRecoveries.put(request.shardId(), recovery);, +        }, +, +            recovery.stage = OnGoingRecovery.Stage.RETRY;, +            recovery.retryTimeInMillis = System.currentTimeMillis() - recovery.startTimeImMillis;, +                recovery.stage = OnGoingRecovery.Stage.RETRY;, +                recovery.retryTimeInMillis = System.currentTimeMillis() - recovery.startTimeImMillis;, +                removeAndCleanOnGoingRecovery(request.shardId());, +                recovery.stage = OnGoingRecovery.Stage.RETRY;, +                recovery.retryTimeInMillis = System.currentTimeMillis() - recovery.startTimeImMillis;, +            removeAndCleanOnGoingRecovery(request.shardId());, +            logger.trace("[{}][{}] recovery from [{}] failed", e, request.shardId().index().name(), request.shardId().id(), request.sourceNode());, +]