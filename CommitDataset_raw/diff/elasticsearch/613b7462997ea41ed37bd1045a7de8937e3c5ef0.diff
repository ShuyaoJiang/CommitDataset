[+++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +    public static Builder builder() {, +        return new Builder();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +    public static Builder builder() {, +        return new Builder();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +    private final Settings settings;, +        this(type, ImmutableSettings.Builder.EMPTY_SETTINGS);, +    public FieldDataType(String type, Settings.Builder builder) {, +        this(type, builder.build());, +    public FieldDataType(String type, Settings settings) {, +        this.settings = settings;, +    public Settings getSettings() {, +        return this.settings;, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        FieldDataType that = (FieldDataType) o;, +, +        if (!settings.equals(that.settings)) return false;, +        if (!type.equals(that.type)) return false;, +, +        return true;, +    }, +, +    @Override, +    public int hashCode() {, +        int result = type.hashCode();, +        result = 31 * result + settings.hashCode();, +        return result;, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +    public static Builder builder() {, +        return new Builder();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +    private final Settings settings;, +        this(type, ImmutableSettings.Builder.EMPTY_SETTINGS);, +    public FieldDataType(String type, Settings.Builder builder) {, +        this(type, builder.build());, +    public FieldDataType(String type, Settings settings) {, +        this.settings = settings;, +    public Settings getSettings() {, +        return this.settings;, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        FieldDataType that = (FieldDataType) o;, +, +        if (!settings.equals(that.settings)) return false;, +        if (!type.equals(that.type)) return false;, +, +        return true;, +    }, +, +    @Override, +    public int hashCode() {, +        int result = type.hashCode();, +        result = 31 * result + settings.hashCode();, +        return result;, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                    String format = type.getSettings().get("format", indexSettings.get("index.fielddata.type." + type.getType() + ".format", null));, +                        builder = buildersByTypeAndFormat.get(Tuple.tuple(type.getType(), format));, +                            logger.warn("failed to find format [" + format + "] for field [" + fieldNames.fullName() + "], will use default");, +                    String cacheType = type.getSettings().get("cache", indexSettings.get("index.fielddata.cache", "resident"));, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +    public static Builder builder() {, +        return new Builder();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +    private final Settings settings;, +        this(type, ImmutableSettings.Builder.EMPTY_SETTINGS);, +    public FieldDataType(String type, Settings.Builder builder) {, +        this(type, builder.build());, +    public FieldDataType(String type, Settings settings) {, +        this.settings = settings;, +    public Settings getSettings() {, +        return this.settings;, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        FieldDataType that = (FieldDataType) o;]