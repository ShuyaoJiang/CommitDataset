[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/support/master/MasterNodeRequest.java, +public abstract class MasterNodeRequest<Request extends MasterNodeRequest<Request>> extends ActionRequest<Request> {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/support/master/MasterNodeRequest.java, +public abstract class MasterNodeRequest<Request extends MasterNodeRequest<Request>> extends ActionRequest<Request> {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java, +import org.elasticsearch.action.ActionRequest;, +public abstract class ReplicationRequest<Request extends ReplicationRequest<Request>> extends ActionRequest<Request>, +        implements IndicesRequest {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/support/master/MasterNodeRequest.java, +public abstract class MasterNodeRequest<Request extends MasterNodeRequest<Request>> extends ActionRequest<Request> {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java, +import org.elasticsearch.action.ActionRequest;, +public abstract class ReplicationRequest<Request extends ReplicationRequest<Request>> extends ActionRequest<Request>, +        implements IndicesRequest {, +++ b/core/src/main/java/org/elasticsearch/transport/TransportRequest.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.tasks.TaskId;, +, +import java.io.IOException;, +    /**, +     * Parent of this request. Defaults to {@link TaskId#EMPTY_TASK_ID}, meaning "no parent"., +     */, +    private TaskId parentTaskId = TaskId.EMPTY_TASK_ID;, +, +     * Set a reference to task that caused this task to be run., +     */, +    public void setParentTask(String parentTaskNode, long parentTaskId) {, +        setParentTask(new TaskId(parentTaskNode, parentTaskId));, +    }, +, +    /**, +     * Set a reference to task that caused this task to be run., +     */, +    public void setParentTask(TaskId taskId) {, +        this.parentTaskId = taskId;, +    }, +, +    /**, +    public Task createTask(long id, String type, String action, TaskId parentTaskId) {, +        return new Task(id, type, action, getDescription(), parentTaskId);, +    }, +, +, +    @Override, +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        parentTaskId = TaskId.readFromStream(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        parentTaskId.writeTo(out);, +    }]