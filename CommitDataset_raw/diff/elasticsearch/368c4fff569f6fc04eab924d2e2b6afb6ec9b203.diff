[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import java.util.HashSet;, +    private Set<String> expandJobIds(String expression, boolean allowNoJobs, ClusterState clusterState) {, +        MlMetadata mlMetadata = clusterState.getMetaData().custom(MLMetadataField.TYPE);, +        if (mlMetadata == null) {, +            mlMetadata = MlMetadata.EMPTY_METADATA;, +        }, +        return mlMetadata.expandJobIds(expression, allowNoJobs);, +    }, +, +        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState);, +        Set<String> expandedJobIds = new HashSet<>();, +        calendarJobIds.stream().forEach(jobId -> expandedJobIds.addAll(expandJobIds(jobId, true, clusterState)));, +        for (String jobId : expandedJobIds) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import java.util.HashSet;, +    private Set<String> expandJobIds(String expression, boolean allowNoJobs, ClusterState clusterState) {, +        MlMetadata mlMetadata = clusterState.getMetaData().custom(MLMetadataField.TYPE);, +        if (mlMetadata == null) {, +            mlMetadata = MlMetadata.EMPTY_METADATA;, +        }, +        return mlMetadata.expandJobIds(expression, allowNoJobs);, +    }, +, +        Set<String> expandedJobIds = expandJobIds(expression, allowNoJobs, clusterState);, +        Set<String> expandedJobIds = new HashSet<>();, +        calendarJobIds.stream().forEach(jobId -> expandedJobIds.addAll(expandJobIds(jobId, true, clusterState)));, +        for (String jobId : expandedJobIds) {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/JobManagerTests.java, +    public void testUpdateProcessOnCalendarChanged_GivenGroups() {, +        Job.Builder job1 = buildJobBuilder("job-1");, +        job1.setGroups(Collections.singletonList("group-1"));, +        Job.Builder job2 = buildJobBuilder("job-2");, +        job2.setGroups(Collections.singletonList("group-1"));, +        Job.Builder job3 = buildJobBuilder("job-3");, +, +        MlMetadata.Builder mlMetadata = new MlMetadata.Builder();, +        mlMetadata.putJob(job1.build(), false);, +        mlMetadata.putJob(job2.build(), false);, +        mlMetadata.putJob(job3.build(), false);, +, +        PersistentTasksCustomMetaData.Builder tasksBuilder =  PersistentTasksCustomMetaData.builder();, +        addJobTask(job1.getId(), "node_id", JobState.OPENED, tasksBuilder);, +        addJobTask(job2.getId(), "node_id", JobState.OPENED, tasksBuilder);, +        addJobTask(job3.getId(), "node_id", JobState.OPENED, tasksBuilder);, +, +        ClusterState clusterState = ClusterState.builder(new ClusterName("_name")), +                .metaData(MetaData.builder(), +                        .putCustom(PersistentTasksCustomMetaData.TYPE, tasksBuilder.build()), +                        .putCustom(MLMetadataField.TYPE, mlMetadata.build())), +                .build();, +        when(clusterService.state()).thenReturn(clusterState);, +, +        JobManager jobManager = createJobManager();, +, +        jobManager.updateProcessOnCalendarChanged(Collections.singletonList("group-1"));, +, +        ArgumentCaptor<UpdateParams> updateParamsCaptor = ArgumentCaptor.forClass(UpdateParams.class);, +        verify(updateJobProcessNotifier, times(2)).submitJobUpdate(updateParamsCaptor.capture());, +, +        List<UpdateParams> capturedUpdateParams = updateParamsCaptor.getAllValues();, +        assertThat(capturedUpdateParams.size(), equalTo(2));, +        assertThat(capturedUpdateParams.get(0).getJobId(), equalTo(job1.getId()));, +        assertThat(capturedUpdateParams.get(0).isUpdateScheduledEvents(), is(true));, +        assertThat(capturedUpdateParams.get(1).getJobId(), equalTo(job2.getId()));, +        assertThat(capturedUpdateParams.get(1).isUpdateScheduledEvents(), is(true));, +    }, +]