[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.plugin.PluginPropertiesExtension, +import org.gradle.api.artifacts.Dependency, +                elasticsearchBwcPlugins, +            for (Map.Entry<String, Project> entry : config.plugins.entrySet()) {, +                configureBwcPluginDependency("${task.name}_elasticsearchBwcPlugins", project, entry.getValue(),, +                        project.configurations.elasticsearchBwcPlugins, config.bwcVersion), +            }, +            // for each of those nodes we might have a different configuration, +    /** Adds a dependency on a different version of the given plugin, which will be retrieved using gradle's dependency resolution */, +    static void configureBwcPluginDependency(String name, Project project, Project pluginProject, Configuration configuration, String elasticsearchVersion) {, +        verifyProjectHasBuildPlugin(name, elasticsearchVersion, project, pluginProject), +        PluginPropertiesExtension extension = pluginProject.extensions.findByName('esplugin');, +        project.dependencies.add(configuration.name, "org.elasticsearch.plugin:${extension.name}:${elasticsearchVersion}@zip"), +    }, +, +        if (node.config.plugins.isEmpty() == false) {, +            if (node.nodeVersion == VersionProperties.elasticsearch) {, +            } else {, +                setup = configureCopyBwcPluginsTask(taskName(task, node, 'copyBwcPlugins'), project, setup, node), +            }, +        }, +            verifyProjectHasBuildPlugin(name, node.nodeVersion, project, pluginProject), +    /** Configures task to copy a plugin based on a zip file resolved using dependencies for an older version */, +    static Task configureCopyBwcPluginsTask(String name, Project project, Task setup, NodeInfo node) {, +        for (Map.Entry<String, Project> plugin : node.config.plugins.entrySet()) {, +            Project pluginProject = plugin.getValue(), +            verifyProjectHasBuildPlugin(name, node.nodeVersion, project, pluginProject), +            String configurationName = "_plugin_bwc_${pluginProject.path}", +            Configuration configuration = project.configurations.findByName(configurationName), +            if (configuration == null) {, +                configuration = project.configurations.create(configurationName), +            }, +, +            final String depName = pluginProject.extensions.findByName('esplugin').name, +            Dependency dep = project.configurations.elasticsearchBwcPlugins.dependencies.find {, +                it.name == depName, +            }, +            configuration.dependencies.add(dep), +        }, +, +        Copy copyPlugins = project.tasks.create(name: name, type: Copy, dependsOn: setup) {, +            from project.configurations.elasticsearchBwcPlugins, +            into node.pluginsTmpDir, +        }, +        return copyPlugins, +    }, +, +        final FileCollection pluginZip;, +        if (node.nodeVersion != VersionProperties.elasticsearch) {, +            pluginZip = project.configurations.getByName("_plugin_bwc_${plugin.path}"), +        } else {, +            pluginZip = project.configurations.getByName("_plugin_${plugin.path}"), +        }, +, +    static void verifyProjectHasBuildPlugin(String name, String version, Project project, Project pluginProject) {, +        if (pluginProject.plugins.hasPlugin(PluginBuildPlugin) == false) {, +            throw new GradleException("Task [${name}] cannot add plugin [${pluginProject.path}] with version [${version}] to project's " +, +                    "[${project.path}] dependencies: the plugin is not an esplugin"), +        }, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.plugin.PluginPropertiesExtension, +import org.gradle.api.artifacts.Dependency, +                elasticsearchBwcPlugins, +            for (Map.Entry<String, Project> entry : config.plugins.entrySet()) {, +                configureBwcPluginDependency("${task.name}_elasticsearchBwcPlugins", project, entry.getValue(),, +                        project.configurations.elasticsearchBwcPlugins, config.bwcVersion), +            }, +            // for each of those nodes we might have a different configuration, +    /** Adds a dependency on a different version of the given plugin, which will be retrieved using gradle's dependency resolution */, +    static void configureBwcPluginDependency(String name, Project project, Project pluginProject, Configuration configuration, String elasticsearchVersion) {, +        verifyProjectHasBuildPlugin(name, elasticsearchVersion, project, pluginProject), +        PluginPropertiesExtension extension = pluginProject.extensions.findByName('esplugin');, +        project.dependencies.add(configuration.name, "org.elasticsearch.plugin:${extension.name}:${elasticsearchVersion}@zip"), +    }, +, +        if (node.config.plugins.isEmpty() == false) {, +            if (node.nodeVersion == VersionProperties.elasticsearch) {, +            } else {, +                setup = configureCopyBwcPluginsTask(taskName(task, node, 'copyBwcPlugins'), project, setup, node), +            }, +        }, +            verifyProjectHasBuildPlugin(name, node.nodeVersion, project, pluginProject), +    /** Configures task to copy a plugin based on a zip file resolved using dependencies for an older version */, +    static Task configureCopyBwcPluginsTask(String name, Project project, Task setup, NodeInfo node) {, +        for (Map.Entry<String, Project> plugin : node.config.plugins.entrySet()) {, +            Project pluginProject = plugin.getValue(), +            verifyProjectHasBuildPlugin(name, node.nodeVersion, project, pluginProject), +            String configurationName = "_plugin_bwc_${pluginProject.path}", +            Configuration configuration = project.configurations.findByName(configurationName), +            if (configuration == null) {, +                configuration = project.configurations.create(configurationName), +            }, +, +            final String depName = pluginProject.extensions.findByName('esplugin').name, +            Dependency dep = project.configurations.elasticsearchBwcPlugins.dependencies.find {, +                it.name == depName, +            }, +            configuration.dependencies.add(dep)]