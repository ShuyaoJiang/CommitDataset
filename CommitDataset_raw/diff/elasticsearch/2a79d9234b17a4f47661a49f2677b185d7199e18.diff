[+++ b/server/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +                if (!GeoUtils.isValidLongitude(point.lon())) {, +++ b/server/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +                if (!GeoUtils.isValidLongitude(point.lon())) {, +++ b/server/src/test/java/org/elasticsearch/index/query/GeoPolygonQueryBuilderTests.java, +, +    public void testPointValidation() throws IOException {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        QueryShardContext context = createShardContext();, +        String queryInvalidLat = "{\n" +, +            "    \"geo_polygon\":{\n" +, +            "        \"" + GEO_POINT_FIELD_NAME + "\":{\n" +, +            "            \"points\":[\n" +, +            "                [-70, 140],\n" +, +            "                [-80, 30],\n" +, +            "                [-90, 20]\n" +, +            "            ]\n" +, +            "        }\n" +, +            "    }\n" +, +            "}\n";, +, +        QueryShardException e1 = expectThrows(QueryShardException.class, () -> parseQuery(queryInvalidLat).toQuery(context));, +        assertThat(e1.getMessage(), containsString("illegal latitude value [140.0] for [geo_polygon]"));, +, +        String queryInvalidLon = "{\n" +, +            "    \"geo_polygon\":{\n" +, +            "        \"" + GEO_POINT_FIELD_NAME + "\":{\n" +, +            "            \"points\":[\n" +, +            "                [-70, 40],\n" +, +            "                [-80, 30],\n" +, +            "                [-190, 20]\n" +, +            "            ]\n" +, +            "        }\n" +, +            "    }\n" +, +            "}\n";, +, +        QueryShardException e2 = expectThrows(QueryShardException.class, () -> parseQuery(queryInvalidLon).toQuery(context));, +        assertThat(e2.getMessage(), containsString("illegal longitude value [-190.0] for [geo_polygon]"));, +    }, +++ b/server/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +                if (!GeoUtils.isValidLongitude(point.lon())) {, +++ b/server/src/test/java/org/elasticsearch/index/query/GeoPolygonQueryBuilderTests.java, +, +    public void testPointValidation() throws IOException {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        QueryShardContext context = createShardContext();, +        String queryInvalidLat = "{\n" +, +            "    \"geo_polygon\":{\n" +, +            "        \"" + GEO_POINT_FIELD_NAME + "\":{\n" +, +            "            \"points\":[\n" +, +            "                [-70, 140],\n" +, +            "                [-80, 30],\n" +, +            "                [-90, 20]\n" +, +            "            ]\n" +, +            "        }\n" +, +            "    }\n" +, +            "}\n";, +, +        QueryShardException e1 = expectThrows(QueryShardException.class, () -> parseQuery(queryInvalidLat).toQuery(context));, +        assertThat(e1.getMessage(), containsString("illegal latitude value [140.0] for [geo_polygon]"));, +, +        String queryInvalidLon = "{\n" +, +            "    \"geo_polygon\":{\n" +, +            "        \"" + GEO_POINT_FIELD_NAME + "\":{\n" +, +            "            \"points\":[\n" +, +            "                [-70, 40],\n" +, +            "                [-80, 30],\n" +, +            "                [-190, 20]\n" +, +            "            ]\n" +, +            "        }\n" +, +            "    }\n" +, +            "}\n";, +, +        QueryShardException e2 = expectThrows(QueryShardException.class, () -> parseQuery(queryInvalidLon).toQuery(context));, +        assertThat(e2.getMessage(), containsString("illegal longitude value [-190.0] for [geo_polygon]"));, +    }, +++ b/server/src/test/resources/org/elasticsearch/index/query/geo_polygon_exception_1.json, +++ b/server/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +                if (!GeoUtils.isValidLongitude(point.lon())) {, +++ b/server/src/test/java/org/elasticsearch/index/query/GeoPolygonQueryBuilderTests.java, +, +    public void testPointValidation() throws IOException {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        QueryShardContext context = createShardContext();, +        String queryInvalidLat = "{\n" +, +            "    \"geo_polygon\":{\n" +, +            "        \"" + GEO_POINT_FIELD_NAME + "\":{\n" +, +            "            \"points\":[\n" +, +            "                [-70, 140],\n" +, +            "                [-80, 30],\n" +, +            "                [-90, 20]\n" +, +            "            ]\n" +, +            "        }\n" +, +            "    }\n" +, +            "}\n";, +, +        QueryShardException e1 = expectThrows(QueryShardException.class, () -> parseQuery(queryInvalidLat).toQuery(context));, +        assertThat(e1.getMessage(), containsString("illegal latitude value [140.0] for [geo_polygon]"));, +, +        String queryInvalidLon = "{\n" +]