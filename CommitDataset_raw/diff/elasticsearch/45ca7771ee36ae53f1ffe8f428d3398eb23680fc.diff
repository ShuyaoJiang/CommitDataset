[+++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.store.*;, +import org.elasticsearch.index.service.IndexService;, +            IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +            store = indexService.shardInjectorSafe(shardId.id()).getInstance(Store.class);, +, +            IndexInput indexInput = store.openVerifyingInput(file, IOContext.READONCE, fileInfo.metadata());, +            writeBlob(indexInput, fileInfo, 0, latch, failures);, +, +        private class BlobPartWriter implements ImmutableBlobContainer.WriterListener {, +, +            private final int part;, +, +            private final FileInfo fileInfo;, +, +            private final List<Throwable> failures;, +, +            private final CountDownLatch latch;, +, +            private final IndexInput indexInput;, +, +            private final InputStream inputStream;, +, +            private final InputStreamIndexInput inputStreamIndexInput;, +, +            private BlobPartWriter(IndexInput indexInput, FileInfo fileInfo, int part, CountDownLatch latch, List<Throwable> failures) throws IOException {, +                this.indexInput = indexInput;, +                this.part = part;, +                this.fileInfo = fileInfo;, +                this.failures = failures;, +                this.latch = latch;, +                inputStreamIndexInput = new InputStreamIndexInput(indexInput, fileInfo.partBytes());, +                InputStream inputStream = inputStreamIndexInput;, +                if (snapshotRateLimiter != null) {, +                    inputStream = new RateLimitingInputStream(inputStream, snapshotRateLimiter, snapshotThrottleListener);, +                }, +                inputStream = new AbortableInputStream(inputStream, fileInfo.physicalName());, +                this.inputStream = inputStream;, +            }, +, +                int nextPart = part + 1;, +                if (nextPart < fileInfo.numberOfParts()) {, +                    try {, +                        // We have more parts to go, +                        writeBlob(indexInput, fileInfo, nextPart, latch, failures);, +                    } catch (Throwable t) {, +                        onFailure(t);, +                    }, +                } else {, +                    // Last part - verify checksum, +                    try {, +                        Store.verify(indexInput);, +                        indexInput.close();, +                    } catch (Throwable t) {, +                        onFailure(t);, +                        return;, +                    }, +                cleanupFailedSnapshot(t, indexInput, latch, failures);, +            }, +, +            public void writeBlobPart() throws IOException {, +                blobContainer.writeBlob(fileInfo.partName(part), inputStream, inputStreamIndexInput.actualSizeToRead(), this);, +            }, +, +        }, +, +        private void writeBlob(IndexInput indexInput, FileInfo fileInfo, int part, CountDownLatch latch, List<Throwable> failures) {, +            try {, +                new BlobPartWriter(indexInput, fileInfo, part, latch, failures).writeBlobPart();, +            } catch (Throwable t) {, +                cleanupFailedSnapshot(t, indexInput, latch, failures);, +            }, +        }, +, +        private void cleanupFailedSnapshot(Throwable t, IndexInput indexInput, CountDownLatch latch, List<Throwable> failures) {, +            IOUtils.closeWhileHandlingException(indexInput);, +            failStoreIfCorrupted(t);, +, +        private void failStoreIfCorrupted(Throwable t) {, +            if (t instanceof CorruptIndexException) {, +                try {, +                    store.markStoreCorrupted((CorruptIndexException) t);, +                } catch (IOException e) {, +                    logger.warn("store cannot be marked as corrupted", e);, +                                    logger.warn("store cannot be marked as corrupted", e);, +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.store.*;, +import org.elasticsearch.index.service.IndexService;, +            IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +            store = indexService.shardInjectorSafe(shardId.id()).getInstance(Store.class);, +, +            IndexInput indexInput = store.openVerifyingInput(file, IOContext.READONCE, fileInfo.metadata());, +            writeBlob(indexInput, fileInfo, 0, latch, failures);, +, +        private class BlobPartWriter implements ImmutableBlobContainer.WriterListener {, +, +            private final int part;, +, +            private final FileInfo fileInfo;, +]