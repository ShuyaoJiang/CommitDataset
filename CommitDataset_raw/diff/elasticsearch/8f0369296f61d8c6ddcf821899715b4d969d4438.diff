[+++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import static org.elasticsearch.search.sort.NestedSortBuilder.NESTED_FIELD;, +, +        if (template.getNestedSort() != null) {, +        };, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +        if (this.nestedSort != null) {, +            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed");, +        }, +     *, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +     *, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +        if (this.nestedSort != null) {, +            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed");, +        }, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +    /**, +     * Returns the {@link NestedSortBuilder}, +     */, +    /**, +     * Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested, +     * object. The {@link NestedSortBuilder} takes a `path` argument and an optional, +     * nested filter that the nested objects should match with in, +     * order to be taken into account for sorting., +     */, +        if (this.nestedFilter != null || this.nestedPath != null) {, +            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed");, +        }, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import static org.elasticsearch.search.sort.NestedSortBuilder.NESTED_FIELD;, +, +        if (template.getNestedSort() != null) {, +        };, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +        if (this.nestedSort != null) {, +            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed");, +        }, +     *, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +     *, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +        if (this.nestedSort != null) {, +            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed");, +        }, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +    /**, +     * Returns the {@link NestedSortBuilder}, +     */, +    /**, +     * Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested, +     * object. The {@link NestedSortBuilder} takes a `path` argument and an optional, +     * nested filter that the nested objects should match with in, +     * order to be taken into account for sorting., +     */, +        if (this.nestedFilter != null || this.nestedPath != null) {, +            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed");, +        }, +++ b/core/src/test/java/org/elasticsearch/search/sort/AbstractSortTestCase.java, +            assertWarnings(testItem);, +    protected void assertWarnings(T testItem) {, +        // assert potential warnings based on the test sort configuration. Do nothing by default, subtests can overwrite, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import static org.elasticsearch.search.sort.NestedSortBuilder.NESTED_FIELD;, +, +        if (template.getNestedSort() != null) {, +        };, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +        if (this.nestedSort != null) {, +            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed");, +        }, +     *, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +     *, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +        if (this.nestedSort != null) {, +            throw new IllegalArgumentException("Setting both nested_path/nested_filter and nested not allowed");, +        }, +     * @deprecated set nested sort with {@link #setNestedSort(NestedSortBuilder)} and retrieve with {@link #getNestedSort()}, +    @Deprecated, +    /**, +     * Returns the {@link NestedSortBuilder}, +     */, +    /**, +     * Sets the {@link NestedSortBuilder} to be used for fields that are inside a nested, +     * object. The {@link NestedSortBuilder} takes a `path` argument and an optional, +     * nested filter that the nested objects should match with in]