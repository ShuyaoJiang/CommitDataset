[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING,, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING,, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        String nodeName = settings.get("node.name");, +        if (nodeName == null) {, +            return threadName("", namePrefix);, +            return threadName(nodeName, namePrefix);, +    }, +, +    public static String threadName(final String nodeName, final String namePrefix) {, +        return "elasticsearch" + (nodeName.isEmpty() ? "" : "[") + nodeName + (nodeName.isEmpty() ? "" : "]") + "[" + namePrefix + "]";, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING,, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        String nodeName = settings.get("node.name");, +        if (nodeName == null) {, +            return threadName("", namePrefix);, +            return threadName(nodeName, namePrefix);, +    }, +, +    public static String threadName(final String nodeName, final String namePrefix) {, +        return "elasticsearch" + (nodeName.isEmpty() ? "" : "[") + nodeName + (nodeName.isEmpty() ? "" : "]") + "[" + namePrefix + "]";, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.threadpool.ExecutorBuilder;, +        final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings);, +        final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]));, +, +            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool);, +            final ThreadPoolModule threadPoolModule = new ThreadPoolModule(threadPool);, +            modules.add(threadPoolModule);, +, +, +            threadPoolModule.prepareSettings(settingsModule);, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING,, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        String nodeName = settings.get("node.name");, +        if (nodeName == null) {, +            return threadName("", namePrefix);, +            return threadName(nodeName, namePrefix);, +    }, +, +    public static String threadName(final String nodeName, final String namePrefix) {, +        return "elasticsearch" + (nodeName.isEmpty() ? "" : "[") + nodeName + (nodeName.isEmpty() ? "" : "]") + "[" + namePrefix + "]";, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.threadpool.ExecutorBuilder;, +        final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings);, +        final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]));, +, +            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool);, +            final ThreadPoolModule threadPoolModule = new ThreadPoolModule(threadPool);, +            modules.add(threadPoolModule);, +, +, +            threadPoolModule.prepareSettings(settingsModule);, +, +++ b/core/src/main/java/org/elasticsearch/plugins/Plugin.java, +import org.elasticsearch.threadpool.ExecutorBuilder;, +import org.elasticsearch.threadpool.ThreadPool;, +import java.util.List;, +, +    /**, +     * Provides the list of this plugin's custom thread pools, empty if, +     * none., +     *, +     * @param settings the current settings, +     * @return executors builders for this plugin's custom thread pools, +     */, +    public List<ExecutorBuilder<?>> getExecutorBuilders(Settings settings) {, +        return Collections.emptyList();, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING,, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        String nodeName = settings.get("node.name");, +        if (nodeName == null) {, +            return threadName("", namePrefix);, +            return threadName(nodeName, namePrefix);, +    }, +, +    public static String threadName(final String nodeName, final String namePrefix) {, +        return "elasticsearch" + (nodeName.isEmpty() ? "" : "[") + nodeName + (nodeName.isEmpty() ? "" : "]") + "[" + namePrefix + "]";, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.threadpool.ExecutorBuilder;, +        final List<ExecutorBuilder<?>> executorBuilders = pluginsService.getExecutorBuilders(settings);, +        final ThreadPool threadPool = new ThreadPool(settings, executorBuilders.toArray(new ExecutorBuilder[0]));, +, +            final MonitorService monitorService = new MonitorService(settings, nodeEnvironment, threadPool);, +            final ThreadPoolModule threadPoolModule = new ThreadPoolModule(threadPool);, +            modules.add(threadPoolModule);, +, +]