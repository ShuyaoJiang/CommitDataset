[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteRequest.java, +import org.elasticsearch.ElasticSearchParseException;, +import org.elasticsearch.cluster.routing.allocation.command.AllocationCommand;, +import org.elasticsearch.cluster.routing.allocation.command.AllocationCommands;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentParser;, +    AllocationCommands commands = new AllocationCommands();, +    boolean dryRun;, +, +    /**, +     * Adds allocation commands to be applied to the cluster. Note, can be empty, in which case, +     * will simply run a simple "reroute"., +     */, +    public ClusterRerouteRequest add(AllocationCommand... commands) {, +        this.commands.add(commands);, +        return this;, +    }, +, +    /**, +     * Sets a dry run flag (defaults to <tt>false</tt>) allowing to run the commands without, +     * actually applying them to the cluster state, and getting the resulting cluster state back., +     */, +    public ClusterRerouteRequest dryRun(boolean dryRun) {, +        this.dryRun = dryRun;, +        return this;, +    }, +, +    public boolean dryRun() {, +        return this.dryRun;, +    }, +, +    /**, +     * Sets the source for the request., +     */, +    public ClusterRerouteRequest source(BytesReference source) throws Exception {, +        XContentParser parser = XContentHelper.createParser(source);, +        try {, +            XContentParser.Token token;, +            String currentFieldName = null;, +            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    currentFieldName = parser.currentName();, +                } else if (token == XContentParser.Token.START_ARRAY) {, +                    if ("commands".equals(currentFieldName)) {, +                        this.commands = AllocationCommands.fromXContent(parser);, +                    } else {, +                        throw new ElasticSearchParseException("failed to parse reroute request, got start array with wrong field name [" + currentFieldName + "]");, +                    }, +                } else if (token.isValue()) {, +                    if ("dry_run".equals(currentFieldName) || "dryRun".equals(currentFieldName)) {, +                        dryRun = parser.booleanValue();, +                    } else {, +                        throw new ElasticSearchParseException("failed to parse reroute request, got value with wrong field name [" + currentFieldName + "]");, +                    }, +                }, +            }, +        } finally {, +            parser.close();, +        }, +        return this;, +    }, +, +        commands = AllocationCommands.readFrom(in);, +        dryRun = in.readBoolean();, +        AllocationCommands.writeTo(commands, out);, +        out.writeBoolean(dryRun);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteRequest.java, +import org.elasticsearch.ElasticSearchParseException;, +import org.elasticsearch.cluster.routing.allocation.command.AllocationCommand;, +import org.elasticsearch.cluster.routing.allocation.command.AllocationCommands;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentParser;, +    AllocationCommands commands = new AllocationCommands();, +    boolean dryRun;, +, +    /**, +     * Adds allocation commands to be applied to the cluster. Note, can be empty, in which case, +     * will simply run a simple "reroute"., +     */, +    public ClusterRerouteRequest add(AllocationCommand... commands) {, +        this.commands.add(commands);, +        return this;, +    }, +, +    /**, +     * Sets a dry run flag (defaults to <tt>false</tt>) allowing to run the commands without, +     * actually applying them to the cluster state, and getting the resulting cluster state back., +     */, +    public ClusterRerouteRequest dryRun(boolean dryRun) {, +        this.dryRun = dryRun;, +        return this;, +    }, +, +    public boolean dryRun() {, +        return this.dryRun;, +    }, +, +    /**]