[+++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.InternalIPv4Range;, +                            fromTo[1] == InternalIPv4Range.MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.InternalIPv4Range;, +                            fromTo[1] == InternalIPv4Range.MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.InternalIPv4Range;, +                            fromTo[1] == InternalIPv4Range.MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<String, ScriptMode> defaultInlineScriptModes;, +        Map<String, ScriptMode> inlineScriptModes = new HashMap<>();, +                inlineScriptModes.put(language, registration.getDefaultInlineScriptMode());, +        this.defaultInlineScriptModes = Collections.unmodifiableMap(inlineScriptModes);, +    Map<String, ScriptMode> getDefaultInlineScriptModes() {, +        return this.defaultInlineScriptModes;, +    }, +, +        private final ScriptMode defaultInlineScriptMode;, +            // Default to "off/disabled" if not specified, +            this(scriptEngineService, scriptEngineLanguages, ScriptMode.OFF);, +        }, +, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, List<String> scriptEngineLanguages,, +                                        ScriptMode defaultInlineScriptMode) {, +            this.defaultInlineScriptMode = defaultInlineScriptMode;, +, +        ScriptMode getDefaultInlineScriptMode() {, +            return defaultInlineScriptMode;, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.InternalIPv4Range;, +                            fromTo[1] == InternalIPv4Range.MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<String, ScriptMode> defaultInlineScriptModes;, +        Map<String, ScriptMode> inlineScriptModes = new HashMap<>();, +                inlineScriptModes.put(language, registration.getDefaultInlineScriptMode());, +        this.defaultInlineScriptModes = Collections.unmodifiableMap(inlineScriptModes);, +    Map<String, ScriptMode> getDefaultInlineScriptModes() {, +        return this.defaultInlineScriptModes;, +    }, +, +        private final ScriptMode defaultInlineScriptMode;, +            // Default to "off/disabled" if not specified, +            this(scriptEngineService, scriptEngineLanguages, ScriptMode.OFF);, +        }, +, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, List<String> scriptEngineLanguages,, +                                        ScriptMode defaultInlineScriptMode) {, +            this.defaultInlineScriptMode = defaultInlineScriptMode;, +, +        ScriptMode getDefaultInlineScriptMode() {, +            return defaultInlineScriptMode;, +        }, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.InternalIPv4Range;, +                            fromTo[1] == InternalIPv4Range.MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<String, ScriptMode> defaultInlineScriptModes;, +        Map<String, ScriptMode> inlineScriptModes = new HashMap<>();, +                inlineScriptModes.put(language, registration.getDefaultInlineScriptMode());, +        this.defaultInlineScriptModes = Collections.unmodifiableMap(inlineScriptModes);, +    Map<String, ScriptMode> getDefaultInlineScriptModes() {, +        return this.defaultInlineScriptModes;, +    }, +, +        private final ScriptMode defaultInlineScriptMode;, +            // Default to "off/disabled" if not specified, +            this(scriptEngineService, scriptEngineLanguages, ScriptMode.OFF);, +        }, +, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, List<String> scriptEngineLanguages,, +                                        ScriptMode defaultInlineScriptMode) {, +            this.defaultInlineScriptMode = defaultInlineScriptMode;, +, +        ScriptMode getDefaultInlineScriptMode() {, +            return defaultInlineScriptMode;, +        }, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptMode.java, + * Defines whether a certain script or category of scripts can be executed or not., +public enum ScriptMode {, +    OFF("false");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.InternalIPv4Range;, +                            fromTo[1] == InternalIPv4Range.MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<String, ScriptMode> defaultInlineScriptModes;, +        Map<String, ScriptMode> inlineScriptModes = new HashMap<>();, +                inlineScriptModes.put(language, registration.getDefaultInlineScriptMode());, +        this.defaultInlineScriptModes = Collections.unmodifiableMap(inlineScriptModes);, +    Map<String, ScriptMode> getDefaultInlineScriptModes() {, +        return this.defaultInlineScriptModes;, +    }]