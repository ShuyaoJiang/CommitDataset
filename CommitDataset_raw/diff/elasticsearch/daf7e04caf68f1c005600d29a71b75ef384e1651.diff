[+++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            source = getAnalyzer().tokenStream(field, termStr);, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            source = getAnalyzer().tokenStream(field, termStr);, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            stream = analyzer.tokenStream(field, request.text());, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            source = getAnalyzer().tokenStream(field, termStr);, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            stream = analyzer.tokenStream(field, request.text());, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.Reader;, +        return isCharacterTokenStream(analyzer.tokenStream(fieldName, ""));, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            source = getAnalyzer().tokenStream(field, termStr);, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            stream = analyzer.tokenStream(field, request.text());, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.Reader;, +        return isCharacterTokenStream(analyzer.tokenStream(fieldName, ""));, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryParser.java, +import java.io.IOException;, +, +import static org.elasticsearch.index.query.support.QueryParsers.wrapSmartNameQuery;, +, +        TokenStream source = analyzer.tokenStream(field, queryString.toString());, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            source = getAnalyzer().tokenStream(field, termStr);, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            stream = analyzer.tokenStream(field, request.text());, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.Reader;, +        return isCharacterTokenStream(analyzer.tokenStream(fieldName, ""));, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryParser.java, +import java.io.IOException;, +, +import static org.elasticsearch.index.query.support.QueryParsers.wrapSmartNameQuery;, +, +        TokenStream source = analyzer.tokenStream(field, queryString.toString());, +++ b/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +        final TokenStream source = analyzer.tokenStream(field, value.toString());, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            source = getAnalyzer().tokenStream(field, termStr);, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            stream = analyzer.tokenStream(field, request.text());, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.Reader;, +        return isCharacterTokenStream(analyzer.tokenStream(fieldName, ""));, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryParser.java, +import java.io.IOException;, +, +import static org.elasticsearch.index.query.support.QueryParsers.wrapSmartNameQuery;, +, +        TokenStream source = analyzer.tokenStream(field, queryString.toString());, +++ b/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +        final TokenStream source = analyzer.tokenStream(field, value.toString());, +++ b/src/main/java/org/elasticsearch/search/highlight/PlainHighlighter.java, +                TokenStream tokenStream = analyzer.tokenStream(mapper.names().indexName(), text);, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            source = getAnalyzer().tokenStream(field, termStr);, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            stream = analyzer.tokenStream(field, request.text());, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.Reader;, +        return isCharacterTokenStream(analyzer.tokenStream(fieldName, ""));, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryParser.java, +import java.io.IOException;, +, +import static org.elasticsearch.index.query.support.QueryParsers.wrapSmartNameQuery;, +, +        TokenStream source = analyzer.tokenStream(field, queryString.toString());]