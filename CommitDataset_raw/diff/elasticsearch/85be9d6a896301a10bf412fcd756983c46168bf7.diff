[+++ b/server/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +    public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool,, +        MasterService masterService) {, +        this.masterService = masterService;, +    public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool) {, +        this(settings, clusterSettings, threadPool, new MasterService(Node.NODE_NAME_SETTING.get(settings), settings, threadPool));, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +    public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool,, +        MasterService masterService) {, +        this.masterService = masterService;, +    public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool) {, +        this(settings, clusterSettings, threadPool, new MasterService(Node.NODE_NAME_SETTING.get(settings), settings, threadPool));, +    }, +, +++ b/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java, +    public static Runnable onNode(DiscoveryNode node, Runnable runnable) {, +++ b/server/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +    public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool,, +        MasterService masterService) {, +        this.masterService = masterService;, +    public ClusterService(Settings settings, ClusterSettings clusterSettings, ThreadPool threadPool) {, +        this(settings, clusterSettings, threadPool, new MasterService(Node.NODE_NAME_SETTING.get(settings), settings, threadPool));, +    }, +, +++ b/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java, +    public static Runnable onNode(DiscoveryNode node, Runnable runnable) {, +++ b/server/src/test/java/org/elasticsearch/snapshots/SnapshotsServiceTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.snapshots;, +, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.Version;, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryAction;, +import org.elasticsearch.action.admin.cluster.repositories.put.TransportPutRepositoryAction;, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotAction;, +import org.elasticsearch.action.admin.cluster.snapshots.create.TransportCreateSnapshotAction;, +import org.elasticsearch.action.admin.indices.create.CreateIndexAction;, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;, +import org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction;, +import org.elasticsearch.action.resync.TransportResyncReplicationAction;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.ActiveShardCount;, +import org.elasticsearch.action.support.TransportAction;, +import org.elasticsearch.client.node.NodeClient;, +import org.elasticsearch.cluster.ClusterChangedEvent;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ESAllocationTestCase;, +import org.elasticsearch.cluster.NodeConnectionsService;, +import org.elasticsearch.cluster.SnapshotsInProgress;, +import org.elasticsearch.cluster.action.index.NodeMappingRefreshAction;, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +import org.elasticsearch.cluster.coordination.CoordinatorTests;, +import org.elasticsearch.cluster.coordination.DeterministicTaskQueue;, +import org.elasticsearch.cluster.metadata.AliasValidator;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;, +import org.elasticsearch.cluster.metadata.MetaDataMappingService;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.cluster.routing.RoutingService;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.cluster.service.MasterService;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.BigArrays;, +import org.elasticsearch.common.util.PageCacheRecycler;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.env.NodeEnvironment;, +import org.elasticsearch.env.TestEnvironment;, +import org.elasticsearch.gateway.MetaStateService;]