[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicy.java, +import java.nio.charset.StandardCharsets;, +import java.util.function.BiFunction;, +    private static final int MAX_INDEX_NAME_BYTES = 255;, +    /**, +     * Validate the name for an policy against some static rules. Intended to match, +     * {@link org.elasticsearch.cluster.metadata.MetaDataCreateIndexService#validateIndexOrAliasName(String, BiFunction)}, +     * @param policy the policy name to validate, +     * @throws IllegalArgumentException if the name is invalid, +     */, +    public static void validatePolicyName(String policy) {, +        if (policy.contains(",")) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not contain ','");, +        }, +        if (policy.contains(" ")) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not contain spaces");, +        }, +        if (policy.charAt(0) == '_') {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not start with '_'");, +        }, +        int byteCount = 0;, +        byteCount = policy.getBytes(StandardCharsets.UTF_8).length;, +        if (byteCount > MAX_INDEX_NAME_BYTES) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: name is too long, (" + byteCount + " > " +, +                MAX_INDEX_NAME_BYTES + ")");, +        }, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicy.java, +import java.nio.charset.StandardCharsets;, +import java.util.function.BiFunction;, +    private static final int MAX_INDEX_NAME_BYTES = 255;, +    /**, +     * Validate the name for an policy against some static rules. Intended to match, +     * {@link org.elasticsearch.cluster.metadata.MetaDataCreateIndexService#validateIndexOrAliasName(String, BiFunction)}, +     * @param policy the policy name to validate, +     * @throws IllegalArgumentException if the name is invalid, +     */, +    public static void validatePolicyName(String policy) {, +        if (policy.contains(",")) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not contain ','");, +        }, +        if (policy.contains(" ")) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not contain spaces");, +        }, +        if (policy.charAt(0) == '_') {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not start with '_'");, +        }, +        int byteCount = 0;, +        byteCount = policy.getBytes(StandardCharsets.UTF_8).length;, +        if (byteCount > MAX_INDEX_NAME_BYTES) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: name is too long, (" + byteCount + " > " +, +                MAX_INDEX_NAME_BYTES + ")");, +        }, +    }, +, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicyTests.java, +, +    public void testValidatePolicyName() {, +        expectThrows(IllegalArgumentException.class, () -> LifecyclePolicy.validatePolicyName(randomAlphaOfLengthBetween(0,10) +, +            "," + randomAlphaOfLengthBetween(0,10)));, +        expectThrows(IllegalArgumentException.class, () -> LifecyclePolicy.validatePolicyName(randomAlphaOfLengthBetween(0,10) +, +            " " + randomAlphaOfLengthBetween(0,10)));, +        expectThrows(IllegalArgumentException.class, () -> LifecyclePolicy.validatePolicyName("_" + randomAlphaOfLengthBetween(1, 20)));, +        expectThrows(IllegalArgumentException.class, () -> LifecyclePolicy.validatePolicyName(randomAlphaOfLengthBetween(256, 1000)));, +, +        LifecyclePolicy.validatePolicyName(randomAlphaOfLengthBetween(1,10) + "_" + randomAlphaOfLengthBetween(0,10));, +, +        LifecyclePolicy.validatePolicyName(randomAlphaOfLengthBetween(0,10) + "-" + randomAlphaOfLengthBetween(0,10));, +        LifecyclePolicy.validatePolicyName(randomAlphaOfLengthBetween(0,10) + "+" + randomAlphaOfLengthBetween(0,10));, +        , +        LifecyclePolicy.validatePolicyName(randomAlphaOfLengthBetween(1,255));, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicy.java, +import java.nio.charset.StandardCharsets;, +import java.util.function.BiFunction;, +    private static final int MAX_INDEX_NAME_BYTES = 255;, +    /**, +     * Validate the name for an policy against some static rules. Intended to match, +     * {@link org.elasticsearch.cluster.metadata.MetaDataCreateIndexService#validateIndexOrAliasName(String, BiFunction)}, +     * @param policy the policy name to validate, +     * @throws IllegalArgumentException if the name is invalid, +     */, +    public static void validatePolicyName(String policy) {, +        if (policy.contains(",")) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not contain ','");, +        }, +        if (policy.contains(" ")) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not contain spaces");, +        }, +        if (policy.charAt(0) == '_') {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: must not start with '_'");, +        }, +        int byteCount = 0;, +        byteCount = policy.getBytes(StandardCharsets.UTF_8).length;, +        if (byteCount > MAX_INDEX_NAME_BYTES) {, +            throw new IllegalArgumentException("invalid policy name [" + policy + "]: name is too long, (" + byteCount + " > " +, +                MAX_INDEX_NAME_BYTES + ")");, +        }, +    }]