[+++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +            "doc_count_error_upper_bound": 0, <1>, +            "sum_other_doc_count": 0, <2>, +            "buckets" : [ <3>, +<1> an upper bound of the error on the document counts for each term, see <<search-aggregations-bucket-terms-aggregation-approximate-counts,below>>, +<2> when there are lots of unique terms, elasticsearch only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response, +<3> the list of the top buckets, the meaning of `top` being defined by the <<search-aggregations-bucket-terms-aggregation-order,order>>, +, +[[search-aggregations-bucket-terms-aggregation-approximate-counts]], +[[search-aggregations-bucket-terms-aggregation-order]], +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +            "doc_count_error_upper_bound": 0, <1>, +            "sum_other_doc_count": 0, <2>, +            "buckets" : [ <3>, +<1> an upper bound of the error on the document counts for each term, see <<search-aggregations-bucket-terms-aggregation-approximate-counts,below>>, +<2> when there are lots of unique terms, elasticsearch only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response, +<3> the list of the top buckets, the meaning of `top` being defined by the <<search-aggregations-bucket-terms-aggregation-order,order>>, +, +[[search-aggregations-bucket-terms-aggregation-approximate-counts]], +[[search-aggregations-bucket-terms-aggregation-order]], +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +        return new StringTerms(name, order, bucketCountThresholds.getRequiredSize(), bucketCountThresholds.getShardSize(), bucketCountThresholds.getMinDocCount(), Collections.<InternalTerms.Bucket>emptyList(), showTermDocCountError, 0, 0);, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +            "doc_count_error_upper_bound": 0, <1>, +            "sum_other_doc_count": 0, <2>, +            "buckets" : [ <3>, +<1> an upper bound of the error on the document counts for each term, see <<search-aggregations-bucket-terms-aggregation-approximate-counts,below>>, +<2> when there are lots of unique terms, elasticsearch only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response, +<3> the list of the top buckets, the meaning of `top` being defined by the <<search-aggregations-bucket-terms-aggregation-order,order>>, +, +[[search-aggregations-bucket-terms-aggregation-approximate-counts]], +[[search-aggregations-bucket-terms-aggregation-order]], +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +        return new StringTerms(name, order, bucketCountThresholds.getRequiredSize(), bucketCountThresholds.getShardSize(), bucketCountThresholds.getMinDocCount(), Collections.<InternalTerms.Bucket>emptyList(), showTermDocCountError, 0, 0);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +    public DoubleTerms(String name, Terms.Order order, @Nullable ValueFormatter formatter, int requiredSize, int shardSize, long minDocCount, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError, long otherDocCount) {, +        super(name, order, requiredSize, shardSize, minDocCount, buckets, showTermDocCountError, docCountError, otherDocCount);, +    protected InternalTerms newAggregation(String name, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError, long otherDocCount) {, +        return new DoubleTerms(name, order, formatter, requiredSize, shardSize, minDocCount, buckets, showTermDocCountError, docCountError, otherDocCount);, +        if (in.getVersion().onOrAfter(Version.V_1_4_0)) {, +            this.otherDocCount = in.readVLong();, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_4_0)) {, +            out.writeVLong(otherDocCount);, +        }, +        builder.field(SUM_OF_OTHER_DOC_COUNTS, otherDocCount);, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +            "doc_count_error_upper_bound": 0, <1>, +            "sum_other_doc_count": 0, <2>, +            "buckets" : [ <3>, +<1> an upper bound of the error on the document counts for each term, see <<search-aggregations-bucket-terms-aggregation-approximate-counts,below>>, +<2> when there are lots of unique terms, elasticsearch only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response, +<3> the list of the top buckets, the meaning of `top` being defined by the <<search-aggregations-bucket-terms-aggregation-order,order>>, +, +[[search-aggregations-bucket-terms-aggregation-approximate-counts]], +[[search-aggregations-bucket-terms-aggregation-order]], +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +        return new StringTerms(name, order, bucketCountThresholds.getRequiredSize(), bucketCountThresholds.getShardSize(), bucketCountThresholds.getMinDocCount(), Collections.<InternalTerms.Bucket>emptyList(), showTermDocCountError, 0, 0);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +    public DoubleTerms(String name, Terms.Order order, @Nullable ValueFormatter formatter, int requiredSize, int shardSize, long minDocCount, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError, long otherDocCount) {, +        super(name, order, requiredSize, shardSize, minDocCount, buckets, showTermDocCountError, docCountError, otherDocCount);, +    protected InternalTerms newAggregation(String name, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError, long otherDocCount) {, +        return new DoubleTerms(name, order, formatter, requiredSize, shardSize, minDocCount, buckets, showTermDocCountError, docCountError, otherDocCount);, +        if (in.getVersion().onOrAfter(Version.V_1_4_0)) {, +            this.otherDocCount = in.readVLong();, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_4_0)) {, +            out.writeVLong(otherDocCount);, +        }, +        builder.field(SUM_OF_OTHER_DOC_COUNTS, otherDocCount);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTermsAggregator.java, +        return new DoubleTerms(terms.getName(), terms.order, terms.formatter, terms.requiredSize, terms.shardSize, terms.minDocCount, Arrays.asList(buckets), terms.showTermDocCountError, terms.docCountError, terms.otherDocCount);, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +            "doc_count_error_upper_bound": 0, <1>, +            "sum_other_doc_count": 0, <2>, +            "buckets" : [ <3>, +<1> an upper bound of the error on the document counts for each term, see <<search-aggregations-bucket-terms-aggregation-approximate-counts,below>>, +<2> when there are lots of unique terms, elasticsearch only returns the top terms; this number is the sum of the document counts for all buckets that are not part of the response, +<3> the list of the top buckets, the meaning of `top` being defined by the <<search-aggregations-bucket-terms-aggregation-order,order>>, +, +[[search-aggregations-bucket-terms-aggregation-approximate-counts]], +[[search-aggregations-bucket-terms-aggregation-order]], +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +        return new StringTerms(name, order, bucketCountThresholds.getRequiredSize(), bucketCountThresholds.getShardSize(), bucketCountThresholds.getMinDocCount(), Collections.<InternalTerms.Bucket>emptyList(), showTermDocCountError, 0, 0);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +    public DoubleTerms(String name, Terms.Order order, @Nullable ValueFormatter formatter, int requiredSize, int shardSize, long minDocCount, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError, long otherDocCount) {, +        super(name, order, requiredSize, shardSize, minDocCount, buckets, showTermDocCountError, docCountError, otherDocCount);, +    protected InternalTerms newAggregation(String name, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError, long otherDocCount) {, +        return new DoubleTerms(name, order, formatter, requiredSize, shardSize, minDocCount, buckets, showTermDocCountError, docCountError, otherDocCount);, +        if (in.getVersion().onOrAfter(Version.V_1_4_0)) {, +            this.otherDocCount = in.readVLong();, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_4_0)) {, +            out.writeVLong(otherDocCount);, +        }, +        builder.field(SUM_OF_OTHER_DOC_COUNTS, otherDocCount);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTermsAggregator.java, +        return new DoubleTerms(terms.getName(), terms.order, terms.formatter, terms.requiredSize, terms.shardSize, terms.minDocCount, Arrays.asList(buckets), terms.showTermDocCountError, terms.docCountError, terms.otherDocCount);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +        long otherDocCount = 0;]