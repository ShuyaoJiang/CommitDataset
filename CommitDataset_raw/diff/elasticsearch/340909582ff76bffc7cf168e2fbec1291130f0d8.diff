[+++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.ScriptType;, +import org.elasticsearch.script.TemplateScript;, +import static org.elasticsearch.script.Script.DEFAULT_TEMPLATE_LANG;, +, +    public static TemplateScript.Factory compileTemplate(String processorType, String processorTag, String propertyName,, +                                                           String propertyValue, ScriptService scriptService) {, +            // This check is here because the DEFAULT_TEMPLATE_LANG(mustache) is not, +            // installed for use by REST tests. `propertyValue` will not be, +            // modified if templating is not available so a script that simply returns an unmodified `propertyValue`, +            // is returned., +            if (scriptService.isLangSupported(DEFAULT_TEMPLATE_LANG)) {, +                Script script = new Script(ScriptType.INLINE, DEFAULT_TEMPLATE_LANG, propertyValue, Collections.emptyMap());, +                return scriptService.compile(script, TemplateScript.CONTEXT);, +            } else {, +                return (params) -> new TemplateScript(params) {, +                    @Override, +                    public String execute() {, +                        return propertyValue;, +                    }, +                };, +            }, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.ScriptType;, +import org.elasticsearch.script.TemplateScript;, +import static org.elasticsearch.script.Script.DEFAULT_TEMPLATE_LANG;, +, +    public static TemplateScript.Factory compileTemplate(String processorType, String processorTag, String propertyName,, +                                                           String propertyValue, ScriptService scriptService) {, +            // This check is here because the DEFAULT_TEMPLATE_LANG(mustache) is not, +            // installed for use by REST tests. `propertyValue` will not be, +            // modified if templating is not available so a script that simply returns an unmodified `propertyValue`, +            // is returned., +            if (scriptService.isLangSupported(DEFAULT_TEMPLATE_LANG)) {, +                Script script = new Script(ScriptType.INLINE, DEFAULT_TEMPLATE_LANG, propertyValue, Collections.emptyMap());, +                return scriptService.compile(script, TemplateScript.CONTEXT);, +            } else {, +                return (params) -> new TemplateScript(params) {, +                    @Override, +                    public String execute() {, +                        return propertyValue;, +                    }, +                };, +            }, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.TemplateScript;, +    public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {, +    public boolean hasField(TemplateScript.Factory fieldPathTemplate) {, +    public void removeField(TemplateScript.Factory fieldPathTemplate) {, +    public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {, +        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model));, +    public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {, +        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false);, +    public String renderTemplate(TemplateScript.Factory template) {, +        return template.newInstance(createTemplateModel()).execute();, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.ScriptType;, +import org.elasticsearch.script.TemplateScript;, +import static org.elasticsearch.script.Script.DEFAULT_TEMPLATE_LANG;, +, +    public static TemplateScript.Factory compileTemplate(String processorType, String processorTag, String propertyName,, +                                                           String propertyValue, ScriptService scriptService) {, +            // This check is here because the DEFAULT_TEMPLATE_LANG(mustache) is not, +            // installed for use by REST tests. `propertyValue` will not be, +            // modified if templating is not available so a script that simply returns an unmodified `propertyValue`, +            // is returned., +            if (scriptService.isLangSupported(DEFAULT_TEMPLATE_LANG)) {, +                Script script = new Script(ScriptType.INLINE, DEFAULT_TEMPLATE_LANG, propertyValue, Collections.emptyMap());, +                return scriptService.compile(script, TemplateScript.CONTEXT);, +            } else {, +                return (params) -> new TemplateScript(params) {, +                    @Override, +                    public String execute() {, +                        return propertyValue;, +                    }, +                };, +            }, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.TemplateScript;, +    public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {, +    public boolean hasField(TemplateScript.Factory fieldPathTemplate) {, +    public void removeField(TemplateScript.Factory fieldPathTemplate) {, +    public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {, +        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model));, +    public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {, +        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false);, +    public String renderTemplate(TemplateScript.Factory template) {, +        return template.newInstance(createTemplateModel()).execute();, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +        Processor.Parameters parameters = new Processor.Parameters(env, scriptService,, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +import org.elasticsearch.script.Script;]