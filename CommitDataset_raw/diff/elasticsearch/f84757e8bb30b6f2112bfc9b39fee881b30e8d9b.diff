[+++ b/dev-tools/src/main/resources/license-check/check_license_and_sha.pl, +, +use FindBin qw($RealBin);, +use lib "$RealBin/lib";, +use Archive::Ar();, +use Cwd();, +use File::Spec();, +use Archive::Extract();, +$Archive::Extract::PREFER_BIN = 1;, +our %Extract_Package = (, +    zip => \&extract_zip,, +    gz  => \&extract_tar_gz,, +    rpm => \&extract_rpm,, +    deb => \&extract_deb, +);, +my $mode = shift(@ARGV) || "";, +die usage() unless $mode =~ /^--(check|update)$/;, +, +my $License_Dir = shift(@ARGV) || die usage();, +my $Package     = shift(@ARGV) || die usage();, +$License_Dir = File::Spec->rel2abs($License_Dir) . '/';, +$Package     = File::Spec->rel2abs($Package);, +, +die "License dir is not a directory: $License_Dir\n" . usage(), +    unless -d $License_Dir;, +, +my %shas = get_shas_from_package($Package);, +$mode eq '--check', +    ? exit check_shas_and_licenses(%shas), +    : exit write_shas(%shas);, +    my %new = @_;, +            say STDERR, +                "$jar: SHA has changed, expected $old_sha but found $new{$jar}";, +$0 --update $License_Dir $Package, +    say "All SHAs and licenses OK" unless $error;, +    return $error;, +    my %new = @_;, +        open my $fh, '>', $License_Dir . $jar or die $!;, +        unlink $License_Dir . $jar or die $!;, +    say "SHAs updated";, +    return 0;, +    for my $path ( grep {-f} glob("$License_Dir/*$pattern*") ) {, +    die "Missing directory: $License_Dir\n", +        unless -d $License_Dir;, +    for my $file ( grep {-f} glob("$License_Dir/*.sha1") ) {, +sub get_shas_from_package {, +    my $package = shift;, +    my ($type) = ( $package =~ /\.(\w+)$/ );, +    die "Unrecognised package type: $package", +        unless $type && $Extract_Package{$type};, +    my $files, +        = eval { $Extract_Package{$type}->( $package, $temp_dir->dirname ) }, +        or die "Couldn't extract $package: $@";, +    my @jars = map {"$temp_dir/$_"}, +        grep { /\.jar$/ && !/elasticsearch[^\/]*$/ } @$files;, +sub extract_zip {, +    my ( $package, $dir ) = @_;, +    my $archive = Archive::Extract->new( archive => $package, type => 'zip' );, +    $archive->extract( to => $dir ) || die $archive->error;, +    return $archive->files;, +}, +#===================================, +sub extract_tar_gz {, +#===================================, +    my ( $package, $dir ) = @_;, +    my $archive = Archive::Extract->new( archive => $package, type => 'tgz' );, +    $archive->extract( to => $dir ) || die $archive->error;, +    return $archive->files;, +}, +#===================================, +sub extract_rpm {, +#===================================, +    my ( $package, $dir ) = @_;, +    my $cwd = Cwd::cwd();, +    my @files;, +    eval {, +        chdir $dir;, +        say "Trying with rpm2cpio";, +        my $out = eval {`rpm2cpio '$package'  | cpio -idmv --quiet`};, +        unless ($out) {, +            say "Trying with rpm2cpio.pl";, +            $out = eval {`rpm2cpio.pl '$package'  | cpio -idmv --quiet`};, +        }, +        @files = split "\n", $out if $out;, +    };, +    chdir $cwd;, +    die $@ if $@;, +    die "Couldn't extract $package\n" unless @files;, +    return \@files;, +}, +, +#===================================, +sub extract_deb {, +#===================================, +    my ( $package, $dir ) = @_;, +    my $archive = Archive::Ar->new;, +    $archive->read($package) || die $archive->error;, +    my $cwd = Cwd::cwd();, +    eval {, +        chdir $dir;]