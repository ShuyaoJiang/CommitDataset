[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    return MAP.create(name, factories, valuesSource, estimatedBucketCount, requiredSize, shardSize, minDocCount, shardMinDocCount, includeExclude, aggregationContext, parent, termsAggregatorFactory);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    return MAP.create(name, factories, valuesSource, estimatedBucketCount, requiredSize, shardSize, minDocCount, shardMinDocCount, includeExclude, aggregationContext, parent, termsAggregatorFactory);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +    protected final IncludeExclude includeExclude;, +    protected LongBitSet acceptedGlobalOrdinals;, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    return MAP.create(name, factories, valuesSource, estimatedBucketCount, requiredSize, shardSize, minDocCount, shardMinDocCount, includeExclude, aggregationContext, parent, termsAggregatorFactory);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +    protected final IncludeExclude includeExclude;, +    protected LongBitSet acceptedGlobalOrdinals;, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java, +                    return MAP.create(name, factories, valuesSource, estimatedBucketCount, maxOrd, order, requiredSize, shardSize, minDocCount, includeExclude, aggregationContext, parent);, +                if (includeExclude != null || factories != null) {, +                    return GLOBAL_ORDINALS.create(name, factories, valuesSource, estimatedBucketCount, maxOrd, order, requiredSize, shardSize, minDocCount, includeExclude, aggregationContext, parent);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    return MAP.create(name, factories, valuesSource, estimatedBucketCount, requiredSize, shardSize, minDocCount, shardMinDocCount, includeExclude, aggregationContext, parent, termsAggregatorFactory);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +    protected final IncludeExclude includeExclude;, +    protected LongBitSet acceptedGlobalOrdinals;, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java, +                    return MAP.create(name, factories, valuesSource, estimatedBucketCount, maxOrd, order, requiredSize, shardSize, minDocCount, includeExclude, aggregationContext, parent);, +                if (includeExclude != null || factories != null) {, +                    return GLOBAL_ORDINALS.create(name, factories, valuesSource, estimatedBucketCount, maxOrd, order, requiredSize, shardSize, minDocCount, includeExclude, aggregationContext, parent);, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsTests.java, +import org.elasticsearch.search.aggregations.bucket.significant.SignificantTermsAggregatorFactory.ExecutionMode;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Set;, +import static org.hamcrest.Matchers.*;, +                .addAggregation(new SignificantTermsBuilder("mySignificantTerms").field("description").executionHint(randomExecutionHint()), +                .addAggregation(new SignificantTermsBuilder("mySignificantTerms").field("description").executionHint(randomExecutionHint()), +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    return MAP.create(name, factories, valuesSource, estimatedBucketCount, requiredSize, shardSize, minDocCount, shardMinDocCount, includeExclude, aggregationContext, parent, termsAggregatorFactory);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +    protected final IncludeExclude includeExclude;, +    protected LongBitSet acceptedGlobalOrdinals;, +            if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java, +                    return MAP.create(name, factories, valuesSource, estimatedBucketCount, maxOrd, order, requiredSize, shardSize, minDocCount, includeExclude, aggregationContext, parent);, +                if (includeExclude != null || factories != null) {, +                    return GLOBAL_ORDINALS.create(name, factories, valuesSource, estimatedBucketCount, maxOrd, order, requiredSize, shardSize, minDocCount, includeExclude, aggregationContext, parent);, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsTests.java, +import org.elasticsearch.search.aggregations.bucket.significant.SignificantTermsAggregatorFactory.ExecutionMode;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Set;, +import static org.hamcrest.Matchers.*;, +                .addAggregation(new SignificantTermsBuilder("mySignificantTerms").field("description").executionHint(randomExecutionHint()), +                .addAggregation(new SignificantTermsBuilder("mySignificantTerms").field("description").executionHint(randomExecutionHint()), +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/StringTermsTests.java, +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint()), +                        .executionHint(randomExecutionHint())]