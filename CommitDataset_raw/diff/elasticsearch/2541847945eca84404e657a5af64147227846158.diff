[+++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +    public static enum ZeroTermsQuery {, +        NONE,, +        ALL, +    }, +, +    private ZeroTermsQuery zeroTermsQuery;, +, +    public MatchQueryBuilder zeroTermsQuery(ZeroTermsQuery zeroTermsQuery) {, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +        if (zeroTermsQuery != null) {, +            builder.field("zero_terms_query", zeroTermsQuery.toString());, +        }, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +    public static enum ZeroTermsQuery {, +        NONE,, +        ALL, +    }, +, +    private ZeroTermsQuery zeroTermsQuery;, +, +    public MatchQueryBuilder zeroTermsQuery(ZeroTermsQuery zeroTermsQuery) {, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +        if (zeroTermsQuery != null) {, +            builder.field("zero_terms_query", zeroTermsQuery.toString());, +        }, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryParser.java, +                    } else if ("zero_terms_query".equals(currentFieldName)) {, +                        String zeroTermsDocs = parser.text();, +                        if ("none".equalsIgnoreCase(zeroTermsDocs)) {, +                            matchQuery.setZeroTermsQuery(MatchQuery.ZeroTermsQuery.NONE);, +                        } else if ("all".equalsIgnoreCase(zeroTermsDocs)) {, +                            matchQuery.setZeroTermsQuery(MatchQuery.ZeroTermsQuery.ALL);, +                        } else {, +                            throw new QueryParsingException(parseContext.index(), "Unsupported zero_terms_docs value [" + zeroTermsDocs +"]");, +                        }, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +    public static enum ZeroTermsQuery {, +        NONE,, +        ALL, +    }, +, +    private ZeroTermsQuery zeroTermsQuery;, +, +    public MatchQueryBuilder zeroTermsQuery(ZeroTermsQuery zeroTermsQuery) {, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +        if (zeroTermsQuery != null) {, +            builder.field("zero_terms_query", zeroTermsQuery.toString());, +        }, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryParser.java, +                    } else if ("zero_terms_query".equals(currentFieldName)) {, +                        String zeroTermsDocs = parser.text();, +                        if ("none".equalsIgnoreCase(zeroTermsDocs)) {, +                            matchQuery.setZeroTermsQuery(MatchQuery.ZeroTermsQuery.NONE);, +                        } else if ("all".equalsIgnoreCase(zeroTermsDocs)) {, +                            matchQuery.setZeroTermsQuery(MatchQuery.ZeroTermsQuery.ALL);, +                        } else {, +                            throw new QueryParsingException(parseContext.index(), "Unsupported zero_terms_docs value [" + zeroTermsDocs +"]");, +                        }, +++ b/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +import org.elasticsearch.common.lucene.search.Queries;, +    public static enum ZeroTermsQuery {, +        NONE,, +        ALL, +    }, +, +    protected ZeroTermsQuery zeroTermsQuery = ZeroTermsQuery.NONE;, +, +    public void setZeroTermsQuery(ZeroTermsQuery zeroTermsQuery) {, +        this.zeroTermsQuery = zeroTermsQuery;, +    }, +, +            return zeroTermsQuery();, +, +    protected Query zeroTermsQuery() {, +        return zeroTermsQuery == ZeroTermsQuery.NONE ? MatchNoDocsQuery.INSTANCE : Queries.MATCH_ALL_QUERY;, +    }, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +    public static enum ZeroTermsQuery {, +        NONE,, +        ALL, +    }, +, +    private ZeroTermsQuery zeroTermsQuery;, +, +    public MatchQueryBuilder zeroTermsQuery(ZeroTermsQuery zeroTermsQuery) {, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +        if (zeroTermsQuery != null) {]