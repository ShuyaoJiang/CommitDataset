[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    private final ShardId shardId;, +    protected TranslogRecoveryPerformer(ShardId shardId, MapperService mapperService, MapperAnalyzer mapperAnalyzer, IndexQueryParserService queryParserService, IndexAliasesService indexAliasesService, IndexCache indexCache) {, +        this.shardId = shardId;, +        try {, +        } catch (Throwable t) {, +            throw new BatchOperationException(shardId, "failed to apply batch translog operation [" + t.getMessage() + "]", numOps, t);, +        }, +    public static class BatchOperationException extends IndexShardException {, +, +        private final int completedOperations;, +, +        public BatchOperationException(ShardId shardId, String msg, int completedOperations, Throwable cause) {, +            super(shardId, msg, cause);, +            this.completedOperations = completedOperations;, +        }, +, +, +        /** the number of succesful operations performed before the exception was thrown */, +        public int completedOperations() {, +            return completedOperations;, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    private final ShardId shardId;, +    protected TranslogRecoveryPerformer(ShardId shardId, MapperService mapperService, MapperAnalyzer mapperAnalyzer, IndexQueryParserService queryParserService, IndexAliasesService indexAliasesService, IndexCache indexCache) {, +        this.shardId = shardId;, +        try {, +        } catch (Throwable t) {, +            throw new BatchOperationException(shardId, "failed to apply batch translog operation [" + t.getMessage() + "]", numOps, t);, +        }, +    public static class BatchOperationException extends IndexShardException {, +, +        private final int completedOperations;, +, +        public BatchOperationException(ShardId shardId, String msg, int completedOperations, Throwable cause) {, +            super(shardId, msg, cause);, +            this.completedOperations = completedOperations;, +        }, +, +, +        /** the number of succesful operations performed before the exception was thrown */, +        public int completedOperations() {, +            return completedOperations;, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +        public synchronized void decrementRecoveredOperations(int ops) {, +            recovered -= ops;, +            assert recovered >= 0 : "recovered operations must be non-negative. Because [" + recovered + "] after decrementing [" + ops + "]";, +            assert total == UNKNOWN || total >= recovered : "total, if known, should be > recovered. total [" + total + "], recovered [" + recovered + "]";, +        }, +, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    private final ShardId shardId;, +    protected TranslogRecoveryPerformer(ShardId shardId, MapperService mapperService, MapperAnalyzer mapperAnalyzer, IndexQueryParserService queryParserService, IndexAliasesService indexAliasesService, IndexCache indexCache) {, +        this.shardId = shardId;, +        try {, +        } catch (Throwable t) {, +            throw new BatchOperationException(shardId, "failed to apply batch translog operation [" + t.getMessage() + "]", numOps, t);, +        }, +    public static class BatchOperationException extends IndexShardException {, +, +        private final int completedOperations;, +, +        public BatchOperationException(ShardId shardId, String msg, int completedOperations, Throwable cause) {, +            super(shardId, msg, cause);, +            this.completedOperations = completedOperations;, +        }, +, +, +        /** the number of succesful operations performed before the exception was thrown */, +        public int completedOperations() {, +            return completedOperations;, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +        public synchronized void decrementRecoveredOperations(int ops) {, +            recovered -= ops;, +            assert recovered >= 0 : "recovered operations must be non-negative. Because [" + recovered + "] after decrementing [" + ops + "]";, +            assert total == UNKNOWN || total >= recovered : "total, if known, should be > recovered. total [" + total + "], recovered [" + recovered + "]";, +        }, +, +, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +import org.elasticsearch.index.shard.*;, +                } catch (TranslogRecoveryPerformer.BatchOperationException exception) {, +                    if (ExceptionsHelper.unwrapCause(exception) instanceof MapperException == false) {]