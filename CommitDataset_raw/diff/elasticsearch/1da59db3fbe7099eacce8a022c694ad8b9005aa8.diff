[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                System::currentTimeMillis, auditor, autodetectProcessManager);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                System::currentTimeMillis, auditor, autodetectProcessManager);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedManager.java, +import org.elasticsearch.xpack.core.ml.job.config.JobTaskState;, +import org.elasticsearch.xpack.ml.job.process.autodetect.AutodetectProcessManager;, +    private final AutodetectProcessManager autodetectProcessManager;, +                           Supplier<Long> currentTimeSupplier, Auditor auditor, AutodetectProcessManager autodetectProcessManager) {, +        this.autodetectProcessManager = autodetectProcessManager;, +    private boolean jobHasOpenAutodetectCommunicator(PersistentTasksCustomMetaData tasks,, +                                                     TransportStartDatafeedAction.DatafeedTask datafeedTask) {, +        PersistentTasksCustomMetaData.PersistentTask<?> jobTask = MlTasks.getJobTask(getJobId(datafeedTask), tasks);, +        if (jobTask == null) {, +            return false;, +        }, +, +        JobTaskState state = (JobTaskState) jobTask.getState();, +        if (state == null || state.isStatusStale(jobTask)) {, +            return false;, +        }, +, +        return autodetectProcessManager.hasOpenAutodetectCommunicator(jobTask.getAllocationId());, +    }, +, +            if (getJobState(tasks, datafeedTask) == JobState.OPENED && jobHasOpenAutodetectCommunicator(tasks, datafeedTask)) {, +                if (jobState == JobState.OPENING || jobHasOpenAutodetectCommunicator(currentTasks, datafeedTask) == false) {, +                } else if (jobState == JobState.OPENED) {, +                    runTask(datafeedTask);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                System::currentTimeMillis, auditor, autodetectProcessManager);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedManager.java, +import org.elasticsearch.xpack.core.ml.job.config.JobTaskState;, +import org.elasticsearch.xpack.ml.job.process.autodetect.AutodetectProcessManager;, +    private final AutodetectProcessManager autodetectProcessManager;, +                           Supplier<Long> currentTimeSupplier, Auditor auditor, AutodetectProcessManager autodetectProcessManager) {, +        this.autodetectProcessManager = autodetectProcessManager;, +    private boolean jobHasOpenAutodetectCommunicator(PersistentTasksCustomMetaData tasks,, +                                                     TransportStartDatafeedAction.DatafeedTask datafeedTask) {, +        PersistentTasksCustomMetaData.PersistentTask<?> jobTask = MlTasks.getJobTask(getJobId(datafeedTask), tasks);, +        if (jobTask == null) {, +            return false;, +        }, +, +        JobTaskState state = (JobTaskState) jobTask.getState();, +        if (state == null || state.isStatusStale(jobTask)) {, +            return false;, +        }, +, +        return autodetectProcessManager.hasOpenAutodetectCommunicator(jobTask.getAllocationId());, +    }, +, +            if (getJobState(tasks, datafeedTask) == JobState.OPENED && jobHasOpenAutodetectCommunicator(tasks, datafeedTask)) {, +                if (jobState == JobState.OPENING || jobHasOpenAutodetectCommunicator(currentTasks, datafeedTask) == false) {, +                } else if (jobState == JobState.OPENED) {, +                    runTask(datafeedTask);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +        if (communicator == null) {, +            String message = String.format(Locale.ROOT, "Cannot persist because job [%s] does not have a corresponding autodetect process",, +                jobTask.getJobId());, +            logger.debug(message);, +            handler.accept(ExceptionsHelper.conflictStatusException(message));, +            return;, +        }, +            throw ExceptionsHelper.conflictStatusException("Cannot process data because job [" + jobTask.getJobId() +, +                "] does not have a corresponding autodetect process");, +            String message = String.format(Locale.ROOT, "Cannot flush because job [%s] does not have a corresponding autodetect process",, +                jobTask.getJobId());, +            String message = String.format(Locale.ROOT,, +                "Cannot forecast because job [%s] does not have a corresponding autodetect process", jobId);, +            String message = "Cannot process update model debug config because job [" + jobTask.getJobId() +, +                "] does not have a corresponding autodetect process";, +    public boolean hasOpenAutodetectCommunicator(long jobAllocationId) {, +        ProcessContext processContext = processByAllocation.get(jobAllocationId);, +        if (processContext != null && processContext.getState() == ProcessContext.ProcessStateName.RUNNING) {, +            return processContext.getAutodetectCommunicator() != null;, +        }, +        return false;, +    }, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                System::currentTimeMillis, auditor, autodetectProcessManager);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedManager.java, +import org.elasticsearch.xpack.core.ml.job.config.JobTaskState;, +import org.elasticsearch.xpack.ml.job.process.autodetect.AutodetectProcessManager;, +    private final AutodetectProcessManager autodetectProcessManager;, +                           Supplier<Long> currentTimeSupplier, Auditor auditor, AutodetectProcessManager autodetectProcessManager) {, +        this.autodetectProcessManager = autodetectProcessManager;, +    private boolean jobHasOpenAutodetectCommunicator(PersistentTasksCustomMetaData tasks,, +                                                     TransportStartDatafeedAction.DatafeedTask datafeedTask) {, +        PersistentTasksCustomMetaData.PersistentTask<?> jobTask = MlTasks.getJobTask(getJobId(datafeedTask), tasks);, +        if (jobTask == null) {, +            return false;, +        }, +, +        JobTaskState state = (JobTaskState) jobTask.getState();, +        if (state == null || state.isStatusStale(jobTask)) {, +            return false;, +        }, +]