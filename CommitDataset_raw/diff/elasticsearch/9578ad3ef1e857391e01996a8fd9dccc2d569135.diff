[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetBuilder.java, +    private String[] exclude;, +    public TermsFacetBuilder exclude(String... exclude) {, +        this.exclude = exclude;, +        return this;, +    }, +, +        if (exclude != null) {, +            builder.startArray("exclude");, +            for (String ex : exclude) {, +                builder.value(ex);, +            }, +            builder.endArray();, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetBuilder.java, +    private String[] exclude;, +    public TermsFacetBuilder exclude(String... exclude) {, +        this.exclude = exclude;, +        return this;, +    }, +, +        if (exclude != null) {, +            builder.startArray("exclude");, +            for (String ex : exclude) {, +                builder.value(ex);, +            }, +            builder.endArray();, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetCollector.java, +import org.elasticsearch.common.collect.ImmutableSet;, +    private final StaticAggregatorValueProc aggregator;, +    private final ImmutableSet<String> excluded;, +, +    public TermsFacetCollector(String facetName, String fieldName, int size, FieldDataCache fieldDataCache, MapperService mapperService, ImmutableSet<String> excluded) {, +        this.excluded = excluded;, +        if (excluded.isEmpty()) {, +            aggregator = new StaticAggregatorValueProc(popFacets());, +        } else {, +    }, +    public class AggregatorValueProc extends StaticAggregatorValueProc {, +, +        public AggregatorValueProc(TObjectIntHashMap<String> facets) {, +            super(facets);, +        }, +, +        @Override public void onValue(int docId, String value) {, +            if (excluded.contains(value)) {, +                return;, +            }, +            super.onValue(docId, value);, +        }, +    }, +, +    public static class StaticAggregatorValueProc implements FieldData.StringValueInDocProc {, +        public StaticAggregatorValueProc(TObjectIntHashMap<String> facets) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetBuilder.java, +    private String[] exclude;, +    public TermsFacetBuilder exclude(String... exclude) {, +        this.exclude = exclude;, +        return this;, +    }, +, +        if (exclude != null) {, +            builder.startArray("exclude");, +            for (String ex : exclude) {, +                builder.value(ex);, +            }, +            builder.endArray();, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetCollector.java, +import org.elasticsearch.common.collect.ImmutableSet;, +    private final StaticAggregatorValueProc aggregator;, +    private final ImmutableSet<String> excluded;, +, +    public TermsFacetCollector(String facetName, String fieldName, int size, FieldDataCache fieldDataCache, MapperService mapperService, ImmutableSet<String> excluded) {, +        this.excluded = excluded;, +        if (excluded.isEmpty()) {, +            aggregator = new StaticAggregatorValueProc(popFacets());, +        } else {, +    }, +    public class AggregatorValueProc extends StaticAggregatorValueProc {, +, +        public AggregatorValueProc(TObjectIntHashMap<String> facets) {, +            super(facets);, +        }, +, +        @Override public void onValue(int docId, String value) {, +            if (excluded.contains(value)) {, +                return;, +            }, +            super.onValue(docId, value);, +        }, +    }, +, +    public static class StaticAggregatorValueProc implements FieldData.StringValueInDocProc {, +        public StaticAggregatorValueProc(TObjectIntHashMap<String> facets) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetCollectorParser.java, +import org.elasticsearch.common.collect.ImmutableSet;, +        ImmutableSet<String> excluded = ImmutableSet.of();, +            } else if (token == XContentParser.Token.START_ARRAY) {]