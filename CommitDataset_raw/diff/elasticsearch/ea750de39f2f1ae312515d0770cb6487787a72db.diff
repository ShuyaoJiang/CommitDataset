[+++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +    public QueryBuilder<?> query() {, +        return query;, +    public ExplainRequest query(QueryBuilder<?> query) {, +        this.query = query;, +        if (query == null) {, +            validationException = ValidateActions.addValidationError("query is missing", validationException);, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +    public QueryBuilder<?> query() {, +        return query;, +    public ExplainRequest query(QueryBuilder<?> query) {, +        this.query = query;, +        if (query == null) {, +            validationException = ValidateActions.addValidationError("query is missing", validationException);, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequestBuilder.java, +        request.query(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +    public QueryBuilder<?> query() {, +        return query;, +    public ExplainRequest query(QueryBuilder<?> query) {, +        this.query = query;, +        if (query == null) {, +            validationException = ValidateActions.addValidationError("query is missing", validationException);, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequestBuilder.java, +        request.query(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexService.queryParserService().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +    public QueryBuilder<?> query() {, +        return query;, +    public ExplainRequest query(QueryBuilder<?> query) {, +        this.query = query;, +        if (query == null) {, +            validationException = ValidateActions.addValidationError("query is missing", validationException);, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequestBuilder.java, +        request.query(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexService.queryParserService().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/rest/action/explain/RestExplainAction.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +    private final IndicesQueriesRegistry indicesQueriesRegistry;, +, +    public RestExplainAction(Settings settings, RestController controller, Client client, IndicesQueriesRegistry indicesQueriesRegistry) {, +        this.indicesQueriesRegistry = indicesQueriesRegistry;, +            BytesReference restContent = RestActions.getRestContent(request);, +            explainRequest.query(RestActions.getQueryContent(restContent, indicesQueriesRegistry, parseFieldMatcher));, +            QueryBuilder<?> query = RestActions.urlParamsToQueryBuilder(request);, +            explainRequest.query(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +    public QueryBuilder<?> query() {, +        return query;, +    public ExplainRequest query(QueryBuilder<?> query) {, +        this.query = query;, +        if (query == null) {, +            validationException = ValidateActions.addValidationError("query is missing", validationException);, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/ExplainRequestBuilder.java, +        request.query(query);, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexService.queryParserService().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/rest/action/explain/RestExplainAction.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +    private final IndicesQueriesRegistry indicesQueriesRegistry;, +, +    public RestExplainAction(Settings settings, RestController controller, Client client, IndicesQueriesRegistry indicesQueriesRegistry) {, +        this.indicesQueriesRegistry = indicesQueriesRegistry;, +            BytesReference restContent = RestActions.getRestContent(request);, +            explainRequest.query(RestActions.getQueryContent(restContent, indicesQueriesRegistry, parseFieldMatcher));, +            QueryBuilder<?> query = RestActions.urlParamsToQueryBuilder(request);, +            explainRequest.query(query);, +++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndicesRequestTests.java, +import org.elasticsearch.transport.*;, +import java.util.*;, +import static org.hamcrest.Matchers.*;, +        ExplainRequest explainRequest = new ExplainRequest(randomIndexOrAlias(), "type", "id").query(QueryBuilders.matchAllQuery());, +            super.registerRequestHandler(action, request, executor, forceExecution, new InterceptingRequestHandler<>(action, handler));, +            super.registerRequestHandler(action, requestFactory, executor, new InterceptingRequestHandler<>(action, handler));]