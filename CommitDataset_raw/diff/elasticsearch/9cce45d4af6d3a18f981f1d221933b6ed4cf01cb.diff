[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +    public DeleteVersionValue(long version, long time) {, +        super(version);, +        return BASE_RAM_BYTES_USED;, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +    public DeleteVersionValue(long version, long time) {, +        super(version);, +        return BASE_RAM_BYTES_USED;, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static final GetResult NOT_EXISTS = new GetResult(false, Versions.NOT_FOUND, null, null);, +        private GetResult(boolean exists, long version, Versions.DocIdAndVersion docIdAndVersion, Searcher searcher) {, +            this.docIdAndVersion = docIdAndVersion;, +            this.searcher = searcher;, +            this(true, docIdAndVersion.version, docIdAndVersion, searcher);, +            Releasables.close(searcher);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +    public DeleteVersionValue(long version, long time) {, +        super(version);, +        return BASE_RAM_BYTES_USED;, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static final GetResult NOT_EXISTS = new GetResult(false, Versions.NOT_FOUND, null, null);, +        private GetResult(boolean exists, long version, Versions.DocIdAndVersion docIdAndVersion, Searcher searcher) {, +            this.docIdAndVersion = docIdAndVersion;, +            this.searcher = searcher;, +            this(true, docIdAndVersion.version, docIdAndVersion, searcher);, +            Releasables.close(searcher);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    refresh("realtime_get");, +    private static VersionValueSupplier NEW_VERSION_VALUE = (u, t) -> new VersionValue(u);, +        VersionValue apply(long updatedVersion, long time);, +        versionMap.putUnderLock(op.uid().bytes(), toVersionValue.apply(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis()));, +, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +    public DeleteVersionValue(long version, long time) {, +        super(version);, +        return BASE_RAM_BYTES_USED;, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static final GetResult NOT_EXISTS = new GetResult(false, Versions.NOT_FOUND, null, null);, +        private GetResult(boolean exists, long version, Versions.DocIdAndVersion docIdAndVersion, Searcher searcher) {, +            this.docIdAndVersion = docIdAndVersion;, +            this.searcher = searcher;, +            this(true, docIdAndVersion.version, docIdAndVersion, searcher);, +            Releasables.close(searcher);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    refresh("realtime_get");, +    private static VersionValueSupplier NEW_VERSION_VALUE = (u, t) -> new VersionValue(u);, +        VersionValue apply(long updatedVersion, long time);, +        versionMap.putUnderLock(op.uid().bytes(), toVersionValue.apply(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis()));, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/LiveVersionMap.java, +    /** Returns how much RAM would be freed up by refreshing. This is {@link #ramBytesUsed} except does not include tombstones because they, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +    public DeleteVersionValue(long version, long time) {, +        super(version);, +        return BASE_RAM_BYTES_USED;, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static final GetResult NOT_EXISTS = new GetResult(false, Versions.NOT_FOUND, null, null);, +        private GetResult(boolean exists, long version, Versions.DocIdAndVersion docIdAndVersion, Searcher searcher) {, +            this.docIdAndVersion = docIdAndVersion;, +            this.searcher = searcher;, +            this(true, docIdAndVersion.version, docIdAndVersion, searcher);, +            Releasables.close(searcher);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    refresh("realtime_get");, +    private static VersionValueSupplier NEW_VERSION_VALUE = (u, t) -> new VersionValue(u);, +        VersionValue apply(long updatedVersion, long time);, +        versionMap.putUnderLock(op.uid().bytes(), toVersionValue.apply(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis()));, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/LiveVersionMap.java, +    /** Returns how much RAM would be freed up by refreshing. This is {@link #ramBytesUsed} except does not include tombstones because they, +++ b/core/src/main/java/org/elasticsearch/index/engine/VersionValue.java, +    public VersionValue(long version) {, +        return BASE_RAM_BYTES_USED;, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +    public DeleteVersionValue(long version, long time) {, +        super(version);, +        return BASE_RAM_BYTES_USED;, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static final GetResult NOT_EXISTS = new GetResult(false, Versions.NOT_FOUND, null, null);, +        private GetResult(boolean exists, long version, Versions.DocIdAndVersion docIdAndVersion, Searcher searcher) {, +            this.docIdAndVersion = docIdAndVersion;, +            this.searcher = searcher;, +            this(true, docIdAndVersion.version, docIdAndVersion, searcher);, +            Releasables.close(searcher);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    refresh("realtime_get");, +    private static VersionValueSupplier NEW_VERSION_VALUE = (u, t) -> new VersionValue(u);, +        VersionValue apply(long updatedVersion, long time);, +        versionMap.putUnderLock(op.uid().bytes(), toVersionValue.apply(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis()));, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/LiveVersionMap.java, +    /** Returns how much RAM would be freed up by refreshing. This is {@link #ramBytesUsed} except does not include tombstones because they, +++ b/core/src/main/java/org/elasticsearch/index/engine/VersionValue.java]