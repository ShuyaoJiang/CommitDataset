[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]http[/\\]netty[/\\]NettyHttpServerPipeliningTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]http[/\\]netty[/\\]NettyHttpServerPipeliningTests.java" checks="LineLength" />, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +    RestClient(CloseableHttpClient client, long maxRetryTimeoutMillis, Header[] defaultHeaders,, +        private HttpClientConfigCallback httpClientConfigCallback;, +        private RequestConfigCallback requestConfigCallback;, +         * Sets the default request headers, to be used sent with every request unless overridden on a per request basis, +            Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null");, +            Objects.requireNonNull(failureListener, "failureListener must not be null");, +         * Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration, +         */, +        public Builder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {, +            Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null");, +            this.httpClientConfigCallback = httpClientConfigCallback;, +            return this;, +        }, +, +        /**, +         * Sets the {@link RequestConfigCallback} to be used to customize http client configuration, +         */, +        public Builder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {, +            Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null");, +            this.requestConfigCallback = requestConfigCallback;, +            return this;, +        }, +, +        /**, +            CloseableHttpClient httpClient = createHttpClient();, +        private CloseableHttpClient createHttpClient() {, +            //default timeouts are all infinite, +            RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +                    .setSocketTimeout(DEFAULT_SOCKET_TIMEOUT_MILLIS), +                    .setConnectionRequestTimeout(DEFAULT_CONNECTION_REQUEST_TIMEOUT_MILLIS);, +, +            if (requestConfigCallback != null) {, +                requestConfigCallback.customizeRequestConfig(requestConfigBuilder);, +            RequestConfig requestConfig = requestConfigBuilder.build();, +, +            PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();, +            HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().setConnectionManager(connectionManager), +                    .setDefaultRequestConfig(requestConfig);, +, +            if (httpClientConfigCallback != null) {, +                httpClientConfigCallback.customizeHttpClient(httpClientBuilder);, +            return httpClientBuilder.build();, +        }, +    }, +, +    /**, +     * Callback used the default {@link RequestConfig} being set to the {@link CloseableHttpClient}, +     * @see HttpClientBuilder#setDefaultRequestConfig, +     */, +    public interface RequestConfigCallback {, +        /**, +         * Allows to customize the {@link RequestConfig} that will be used with each request., +         * It is common to customize the different timeout values through this method without losing any other useful default, +         * value that the {@link RestClient.Builder} internally sets., +         */, +        void customizeRequestConfig(RequestConfig.Builder requestConfigBuilder);, +    }, +, +    /**, +     * Callback used to customize the {@link CloseableHttpClient} instance used by a {@link RestClient} instance., +     * Allows to customize default {@link RequestConfig} being set to the client and any parameter that, +     * can be set through {@link HttpClientBuilder}, +     */, +    public interface HttpClientConfigCallback {, +        /**, +         * Allows to customize the {@link CloseableHttpClient} being created and used by the {@link RestClient}., +         * It is common to customzie the default {@link org.apache.http.client.CredentialsProvider} through this method,, +         * without losing any other useful default value that the {@link RestClient.Builder} internally sets., +         * Also useful to setup ssl through {@link SSLSocketFactoryHttpConfigCallback}., +         */, +        void customizeHttpClient(HttpClientBuilder httpClientBuilder);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]http[/\\]netty[/\\]NettyHttpServerPipeliningTests.java" checks="LineLength" />, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +    RestClient(CloseableHttpClient client, long maxRetryTimeoutMillis, Header[] defaultHeaders,, +        private HttpClientConfigCallback httpClientConfigCallback;, +        private RequestConfigCallback requestConfigCallback;, +         * Sets the default request headers, to be used sent with every request unless overridden on a per request basis, +            Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null");, +            Objects.requireNonNull(failureListener, "failureListener must not be null");, +         * Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration, +         */, +        public Builder setHttpClientConfigCallback(HttpClientConfigCallback httpClientConfigCallback) {, +            Objects.requireNonNull(httpClientConfigCallback, "httpClientConfigCallback must not be null");, +            this.httpClientConfigCallback = httpClientConfigCallback;, +            return this;, +        }, +, +        /**, +         * Sets the {@link RequestConfigCallback} to be used to customize http client configuration, +         */, +        public Builder setRequestConfigCallback(RequestConfigCallback requestConfigCallback) {, +            Objects.requireNonNull(requestConfigCallback, "requestConfigCallback must not be null");, +            this.requestConfigCallback = requestConfigCallback;, +            return this;]