[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/PublicTermsFilter.java, +import java.util.Iterator;, +import java.util.TreeSet;, +// LUCENE MONITOR: Against TermsFilter, +public class PublicTermsFilter extends Filter {, +, +    Set<Term> terms = new TreeSet<Term>();, +, +    /**, +     * Adds a term to the list of acceptable terms, +     *, +     * @param term, +     */, +    public void addTerm(Term term) {, +        terms.add(term);, +    }, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj), +            return true;, +        if ((obj == null) || (obj.getClass() != this.getClass())), +            return false;, +        PublicTermsFilter test = (PublicTermsFilter) obj;, +        return (terms == test.terms ||, +                (terms != null && terms.equals(test.terms)));, +    }, +, +    @Override, +    public int hashCode() {, +        int hash = 9;, +        for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {, +            Term term = iter.next();, +            hash = 31 * hash + term.hashCode();, +        }, +        return hash;, +    }, +        } finally {, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/PublicTermsFilter.java, +import java.util.Iterator;, +import java.util.TreeSet;, +// LUCENE MONITOR: Against TermsFilter, +public class PublicTermsFilter extends Filter {, +, +    Set<Term> terms = new TreeSet<Term>();, +, +    /**, +     * Adds a term to the list of acceptable terms, +     *, +     * @param term, +     */, +    public void addTerm(Term term) {, +        terms.add(term);, +    }, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj), +            return true;, +        if ((obj == null) || (obj.getClass() != this.getClass())), +            return false;, +        PublicTermsFilter test = (PublicTermsFilter) obj;, +        return (terms == test.terms ||, +                (terms != null && terms.equals(test.terms)));, +    }, +, +    @Override, +    public int hashCode() {, +        int hash = 9;, +        for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {, +            Term term = iter.next();, +            hash = 31 * hash + term.hashCode();, +        }, +        return hash;, +    }, +        } finally {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.search.PublicTermsFilter;, +        PublicTermsFilter termsFilter = new PublicTermsFilter();, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/PublicTermsFilter.java, +import java.util.Iterator;, +import java.util.TreeSet;, +// LUCENE MONITOR: Against TermsFilter, +public class PublicTermsFilter extends Filter {, +, +    Set<Term> terms = new TreeSet<Term>();, +, +    /**, +     * Adds a term to the list of acceptable terms, +     *, +     * @param term, +     */, +    public void addTerm(Term term) {, +        terms.add(term);, +    }, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj), +            return true;, +        if ((obj == null) || (obj.getClass() != this.getClass())), +            return false;, +        PublicTermsFilter test = (PublicTermsFilter) obj;]