[+++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH);, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults);, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                                  @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +, +    private String[] parseArray(XContentParser parser) throws IOException {, +        final List<String> list = new ArrayList<>();, +        assert parser.currentToken() == XContentParser.Token.START_ARRAY;, +        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {, +            list.add(parser.text());, +        }, +        return list.toArray(new String[list.size()]);, +    }, +, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                                  @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +, +    private String[] parseArray(XContentParser parser) throws IOException {, +        final List<String> list = new ArrayList<>();, +        assert parser.currentToken() == XContentParser.Token.START_ARRAY;, +        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {, +            list.add(parser.text());, +        }, +        return list.toArray(new String[list.size()]);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(SearchPhaseController.EMPTY_DOCS, firstResults, (AtomicArray<? extends FetchSearchResultProvider>) AtomicArray.empty());, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                                  @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +, +    private String[] parseArray(XContentParser parser) throws IOException {, +        final List<String> list = new ArrayList<>();, +        assert parser.currentToken() == XContentParser.Token.START_ARRAY;, +        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {, +            list.add(parser.text());, +        }, +        return list.toArray(new String[list.size()]);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(SearchPhaseController.EMPTY_DOCS, firstResults, (AtomicArray<? extends FetchSearchResultProvider>) AtomicArray.empty());, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    final InternalSearchResponse internalResponse = searchPhaseController.merge(sortedShardList, queryFetchResults, queryFetchResults);, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->]