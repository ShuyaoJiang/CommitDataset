[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +            public static final Translog EMPTY = new Translog(0, TimeValue.timeValueMillis(0));, +            private int numberOfOperations;, +            private TimeValue took;, +, +            public Translog(int numberOfOperations, TimeValue took) {, +                this.took = took;, +, +            public TimeValue took() {, +                return this.took;, +            }, +            public static final Index EMPTY = new Index(-1, 0, new ByteSizeValue(0), 0, new ByteSizeValue(0), timeValueMillis(0), timeValueMillis(0));, +            private TimeValue took;, +                         TimeValue throttlingWaitTime, TimeValue took) {, +                this.took = took;, +, +            public TimeValue took() {, +                return this.took;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +            public static final Translog EMPTY = new Translog(0, TimeValue.timeValueMillis(0));, +            private int numberOfOperations;, +            private TimeValue took;, +, +            public Translog(int numberOfOperations, TimeValue took) {, +                this.took = took;, +, +            public TimeValue took() {, +                return this.took;, +            }, +            public static final Index EMPTY = new Index(-1, 0, new ByteSizeValue(0), 0, new ByteSizeValue(0), timeValueMillis(0), timeValueMillis(0));, +            private TimeValue took;, +                         TimeValue throttlingWaitTime, TimeValue took) {, +                this.took = took;, +, +            public TimeValue took() {, +                return this.took;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                sb.append("    index    : recovered_files [").append(recoveryStatus.index().numberOfFiles()).append("] with total_size [").append(recoveryStatus.index().totalSize()).append("], took [").append(recoveryStatus.index().took()).append("], throttling_wait [").append(recoveryStatus.index().throttlingWaitTime()).append("]\n");, +                sb.append("    translog : number_of_operations [").append(recoveryStatus.translog().numberOfOperations()).append("], took [").append(recoveryStatus.translog().took()).append("]");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +            public static final Translog EMPTY = new Translog(0, TimeValue.timeValueMillis(0));, +            private int numberOfOperations;, +            private TimeValue took;, +, +            public Translog(int numberOfOperations, TimeValue took) {, +                this.took = took;, +, +            public TimeValue took() {, +                return this.took;, +            }, +            public static final Index EMPTY = new Index(-1, 0, new ByteSizeValue(0), 0, new ByteSizeValue(0), timeValueMillis(0), timeValueMillis(0));, +            private TimeValue took;, +                         TimeValue throttlingWaitTime, TimeValue took) {, +                this.took = took;, +, +            public TimeValue took() {, +                return this.took;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                sb.append("    index    : recovered_files [").append(recoveryStatus.index().numberOfFiles()).append("] with total_size [").append(recoveryStatus.index().totalSize()).append("], took [").append(recoveryStatus.index().took()).append("], throttling_wait [").append(recoveryStatus.index().throttlingWaitTime()).append("]\n");, +                sb.append("    translog : number_of_operations [").append(recoveryStatus.translog().numberOfOperations()).append("], took [").append(recoveryStatus.translog().took()).append("]");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import org.elasticsearch.common.StopWatch;, +            return RecoveryStatus.Translog.EMPTY;, +            return RecoveryStatus.Translog.EMPTY;, +, +        StopWatch timer = new StopWatch().start();, +            return new RecoveryStatus.Translog(totalOperations.get(), timer.stop().totalTime());, +        StopWatch timer = new StopWatch().start();, +        return new RecoveryStatus.Index(version, numberOfFiles, new ByteSizeValue(totalSize), numberOfExistingFiles, new ByteSizeValue(existingTotalSize), TimeValue.timeValueMillis(throttlingWaitTime.get()), timer.stop().totalTime());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +            public static final Translog EMPTY = new Translog(0, TimeValue.timeValueMillis(0));, +            private int numberOfOperations;, +            private TimeValue took;, +, +            public Translog(int numberOfOperations, TimeValue took) {, +                this.took = took;, +, +            public TimeValue took() {, +                return this.took;, +            }, +            public static final Index EMPTY = new Index(-1, 0, new ByteSizeValue(0), 0, new ByteSizeValue(0), timeValueMillis(0), timeValueMillis(0));, +            private TimeValue took;, +                         TimeValue throttlingWaitTime, TimeValue took) {, +                this.took = took;, +, +            public TimeValue took() {, +                return this.took;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                sb.append("    index    : recovered_files [").append(recoveryStatus.index().numberOfFiles()).append("] with total_size [").append(recoveryStatus.index().totalSize()).append("], took [").append(recoveryStatus.index().took()).append("], throttling_wait [").append(recoveryStatus.index().throttlingWaitTime()).append("]\n");, +                sb.append("    translog : number_of_operations [").append(recoveryStatus.translog().numberOfOperations()).append("], took [").append(recoveryStatus.translog().took()).append("]");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import org.elasticsearch.common.StopWatch;, +            return RecoveryStatus.Translog.EMPTY;, +            return RecoveryStatus.Translog.EMPTY;, +, +        StopWatch timer = new StopWatch().start();]