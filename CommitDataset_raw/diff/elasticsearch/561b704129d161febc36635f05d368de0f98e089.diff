[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +import org.elasticsearch.xpack.ccr.Ccr;, +                final List<Index> leaderIndicesToFollow =, +                    getLeaderIndicesToFollow(autoFollowPattern, remoteClusterState, followedIndices);, +                        patternsForTheSameRemoteCluster, remoteClusterState.metaData(), clusterState.metaData(), resultHandler);, +                                            MetaData localMetadata,, +                    } else if (leaderIndexAlreadyFollowed(autoFollowPattern, indexToFollow, localMetadata)) {, +                        updateAutoFollowMetadata(recordLeaderIndexAsFollowFunction(autoFollowPattenName, indexToFollow), error -> {, +                            results.set(slot, new Tuple<>(indexToFollow, error));, +                            if (leaderIndicesCountDown.countDown()) {, +                                resultHandler.accept(new AutoFollowResult(autoFollowPattenName, results.asList()));, +                        });, +                        continue;, +                    }, +, +        private static boolean leaderIndexAlreadyFollowed(AutoFollowPattern autoFollowPattern,, +                                                          Index leaderIndex,, +                                                          MetaData localMetadata) {, +            String followIndexName = getFollowerIndexName(autoFollowPattern, leaderIndex.getName());, +            IndexMetaData indexMetaData = localMetadata.index(followIndexName);, +            if (indexMetaData != null) {, +                // If an index with the same name exists, but it is not a follow index for this leader index then, +                // we should let the auto follower attempt to auto follow it, so it can fail later and, +                // it is then visible in the auto follow stats. For example a cluster can just happen to have, +                // an index with the same name as the new follower index., +                Map<String, String> customData = indexMetaData.getCustomData(Ccr.CCR_CUSTOM_METADATA_KEY);, +                if (customData != null) {, +                    String recordedLeaderIndexUUID = customData.get(Ccr.CCR_CUSTOM_METADATA_LEADER_INDEX_UUID_KEY);, +                    return leaderIndex.getUUID().equals(recordedLeaderIndexUUID);, +                }, +            }, +            return false;, +        }, +, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +import org.elasticsearch.xpack.ccr.Ccr;, +                final List<Index> leaderIndicesToFollow =, +                    getLeaderIndicesToFollow(autoFollowPattern, remoteClusterState, followedIndices);, +                        patternsForTheSameRemoteCluster, remoteClusterState.metaData(), clusterState.metaData(), resultHandler);, +                                            MetaData localMetadata,, +                    } else if (leaderIndexAlreadyFollowed(autoFollowPattern, indexToFollow, localMetadata)) {, +                        updateAutoFollowMetadata(recordLeaderIndexAsFollowFunction(autoFollowPattenName, indexToFollow), error -> {, +                            results.set(slot, new Tuple<>(indexToFollow, error));, +                            if (leaderIndicesCountDown.countDown()) {, +                                resultHandler.accept(new AutoFollowResult(autoFollowPattenName, results.asList()));, +                        });, +                        continue;, +                    }, +, +        private static boolean leaderIndexAlreadyFollowed(AutoFollowPattern autoFollowPattern,, +                                                          Index leaderIndex,, +                                                          MetaData localMetadata) {, +            String followIndexName = getFollowerIndexName(autoFollowPattern, leaderIndex.getName());, +            IndexMetaData indexMetaData = localMetadata.index(followIndexName);, +            if (indexMetaData != null) {, +                // If an index with the same name exists, but it is not a follow index for this leader index then, +                // we should let the auto follower attempt to auto follow it, so it can fail later and, +                // it is then visible in the auto follow stats. For example a cluster can just happen to have, +                // an index with the same name as the new follower index., +                Map<String, String> customData = indexMetaData.getCustomData(Ccr.CCR_CUSTOM_METADATA_KEY);, +                if (customData != null) {, +                    String recordedLeaderIndexUUID = customData.get(Ccr.CCR_CUSTOM_METADATA_LEADER_INDEX_UUID_KEY);, +                    return leaderIndex.getUUID().equals(recordedLeaderIndexUUID);, +                }, +            }, +            return false;, +        }, +, +, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinatorTests.java, +import org.elasticsearch.xpack.ccr.Ccr;, +        List<Index> result = AutoFollower.getLeaderIndicesToFollow(autoFollowPattern, remoteState, Collections.emptyList());, +        result = AutoFollower.getLeaderIndicesToFollow(autoFollowPattern, remoteState, followedIndexUUIDs);, +        List<Index> result = AutoFollower.getLeaderIndicesToFollow(autoFollowPattern, remoteState, Collections.emptyList());, +        result = AutoFollower.getLeaderIndicesToFollow(autoFollowPattern, remoteState, Collections.emptyList());, +    public void testAutoFollowerFollowerIndexAlreadyExists() {, +        Client client = mock(Client.class);, +        when(client.getRemoteClusterClient(anyString())).thenReturn(client);, +, +        ClusterState remoteState = createRemoteClusterState("logs-20190101", true);, +, +        AutoFollowPattern autoFollowPattern = new AutoFollowPattern("remote", Collections.singletonList("logs-*"),, +            null, null, null, null, null, null, null, null, null, null, null);, +        Map<String, AutoFollowPattern> patterns = new HashMap<>();, +        patterns.put("remote", autoFollowPattern);, +        Map<String, List<String>> followedLeaderIndexUUIDS = new HashMap<>();, +        followedLeaderIndexUUIDS.put("remote", new ArrayList<>());, +        Map<String, Map<String, String>> autoFollowHeaders = new HashMap<>();, +        autoFollowHeaders.put("remote", Collections.singletonMap("key", "val"));, +        AutoFollowMetadata autoFollowMetadata = new AutoFollowMetadata(patterns, followedLeaderIndexUUIDS, autoFollowHeaders);, +, +        ClusterState currentState = ClusterState.builder(new ClusterName("name")), +            .metaData(MetaData.builder(), +                .put(IndexMetaData.builder("logs-20190101"), +                    .settings(settings(Version.CURRENT).put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)), +                    .putCustom(Ccr.CCR_CUSTOM_METADATA_KEY, Collections.singletonMap(Ccr.CCR_CUSTOM_METADATA_LEADER_INDEX_UUID_KEY,]