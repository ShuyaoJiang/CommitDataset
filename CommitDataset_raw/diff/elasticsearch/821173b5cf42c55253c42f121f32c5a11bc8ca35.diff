[+++ b/core-signatures.txt, +, +@defaultMessage QueryWrapperFilter is cachable by default - use Queries#wrap instead, +org.apache.lucene.search.QueryWrapperFilter#<init>(org.apache.lucene.search.Query), +++ b/core-signatures.txt, +, +@defaultMessage QueryWrapperFilter is cachable by default - use Queries#wrap instead, +org.apache.lucene.search.QueryWrapperFilter#<init>(org.apache.lucene.search.Query), +++ b/pom.xml, +				<exclude>org/elasticsearch/common/lucene/search/Queries$QueryWrapperFilterFactory.class</exclude>, +++ b/core-signatures.txt, +, +@defaultMessage QueryWrapperFilter is cachable by default - use Queries#wrap instead, +org.apache.lucene.search.QueryWrapperFilter#<init>(org.apache.lucene.search.Query), +++ b/pom.xml, +				<exclude>org/elasticsearch/common/lucene/search/Queries$QueryWrapperFilterFactory.class</exclude>, +++ b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;, +, +    public static Filter wrap(Query query) {, +        return FACTORY.wrap(query);, +    }, +, +    private static final QueryWrapperFilterFactory FACTORY = new QueryWrapperFilterFactory();, +    // NOTE: This is a separate class since we added QueryWrapperFilter as a forbidden API, +    // that way we can exclude only the inner class without excluding the entire Queries class, +    // and potentially miss a forbidden API usage!, +    private static final class QueryWrapperFilterFactory {, +, +        public Filter wrap(Query query) {, +            if (CustomQueryWrappingFilter.shouldUseCustomQueryWrappingFilter(query)) {, +                return new CustomQueryWrappingFilter(query);, +            } else {, +                return new QueryWrapperFilter(query);, +            }, +        }, +    }, +++ b/core-signatures.txt, +, +@defaultMessage QueryWrapperFilter is cachable by default - use Queries#wrap instead, +org.apache.lucene.search.QueryWrapperFilter#<init>(org.apache.lucene.search.Query), +++ b/pom.xml, +				<exclude>org/elasticsearch/common/lucene/search/Queries$QueryWrapperFilterFactory.class</exclude>, +++ b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;, +, +    public static Filter wrap(Query query) {, +        return FACTORY.wrap(query);, +    }, +, +    private static final QueryWrapperFilterFactory FACTORY = new QueryWrapperFilterFactory();, +    // NOTE: This is a separate class since we added QueryWrapperFilter as a forbidden API, +    // that way we can exclude only the inner class without excluding the entire Queries class, +    // and potentially miss a forbidden API usage!, +    private static final class QueryWrapperFilterFactory {, +, +        public Filter wrap(Query query) {, +            if (CustomQueryWrappingFilter.shouldUseCustomQueryWrappingFilter(query)) {, +                return new CustomQueryWrappingFilter(query);, +            } else {, +                return new QueryWrapperFilter(query);, +            }, +        }, +    }, +++ b/src/main/java/org/elasticsearch/index/query/FQueryFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +        Filter filter = Queries.wrap(query);, +++ b/core-signatures.txt, +, +@defaultMessage QueryWrapperFilter is cachable by default - use Queries#wrap instead, +org.apache.lucene.search.QueryWrapperFilter#<init>(org.apache.lucene.search.Query), +++ b/pom.xml, +				<exclude>org/elasticsearch/common/lucene/search/Queries$QueryWrapperFilterFactory.class</exclude>, +++ b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;, +, +    public static Filter wrap(Query query) {, +        return FACTORY.wrap(query);, +    }, +, +    private static final QueryWrapperFilterFactory FACTORY = new QueryWrapperFilterFactory();, +    // NOTE: This is a separate class since we added QueryWrapperFilter as a forbidden API, +    // that way we can exclude only the inner class without excluding the entire Queries class, +    // and potentially miss a forbidden API usage!, +    private static final class QueryWrapperFilterFactory {, +, +        public Filter wrap(Query query) {, +            if (CustomQueryWrappingFilter.shouldUseCustomQueryWrappingFilter(query)) {, +                return new CustomQueryWrappingFilter(query);, +            } else {, +                return new QueryWrapperFilter(query);, +            }, +        }, +    }, +++ b/src/main/java/org/elasticsearch/index/query/FQueryFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +        Filter filter = Queries.wrap(query);]