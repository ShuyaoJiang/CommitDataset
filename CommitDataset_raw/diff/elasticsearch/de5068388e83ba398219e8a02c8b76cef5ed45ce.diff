[+++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +import org.elasticsearch.common.metrics.CounterMetric;, +, +public class EsAbortPolicy implements XRejectedExecutionHandler {, +    private final CounterMetric rejected = new CounterMetric();, +        rejected.inc();, +, +    @Override, +    public long rejected() {, +        return rejected.count();, +    }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +import org.elasticsearch.common.metrics.CounterMetric;, +, +public class EsAbortPolicy implements XRejectedExecutionHandler {, +    private final CounterMetric rejected = new CounterMetric();, +        rejected.inc();, +, +    @Override, +    public long rejected() {, +        return rejected.count();, +    }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.metrics.CounterMetric;, +    static class TimedBlockingPolicy implements XRejectedExecutionHandler {, +, +        private final CounterMetric rejected = new CounterMetric();, +                if (!successful) {, +                    rejected.inc();, +                }, +, +        @Override, +        public long rejected() {, +            return rejected.count();, +        }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +import org.elasticsearch.common.metrics.CounterMetric;, +, +public class EsAbortPolicy implements XRejectedExecutionHandler {, +    private final CounterMetric rejected = new CounterMetric();, +        rejected.inc();, +, +    @Override, +    public long rejected() {, +        return rejected.count();, +    }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.metrics.CounterMetric;, +    static class TimedBlockingPolicy implements XRejectedExecutionHandler {, +, +        private final CounterMetric rejected = new CounterMetric();, +                if (!successful) {, +                    rejected.inc();, +                }, +, +        @Override, +        public long rejected() {, +            return rejected.count();, +        }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, new EsAbortPolicy());, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +import org.elasticsearch.common.metrics.CounterMetric;, +, +public class EsAbortPolicy implements XRejectedExecutionHandler {, +    private final CounterMetric rejected = new CounterMetric();, +        rejected.inc();, +, +    @Override, +    public long rejected() {, +        return rejected.count();, +    }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.metrics.CounterMetric;, +    static class TimedBlockingPolicy implements XRejectedExecutionHandler {, +, +        private final CounterMetric rejected = new CounterMetric();, +                if (!successful) {, +                    rejected.inc();, +                }, +, +        @Override, +        public long rejected() {, +            return rejected.count();, +        }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, new EsAbortPolicy());, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/XRejectedExecutionHandler.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,]