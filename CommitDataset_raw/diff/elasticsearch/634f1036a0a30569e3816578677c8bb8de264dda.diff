[+++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +    private String boostMode;, +, +    public FunctionScoreQueryBuilder boostMode(String boostMode) {, +        this.boostMode = boostMode;, +        return this;, +    }, +, +        if (boostMode != null) {, +            builder.field("boost_mode", boostMode);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +    private String boostMode;, +, +    public FunctionScoreQueryBuilder boostMode(String boostMode) {, +        this.boostMode = boostMode;, +        return this;, +    }, +, +        if (boostMode != null) {, +            builder.field("boost_mode", boostMode);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java, +import org.elasticsearch.common.lucene.search.function.CombineFunction;, +        CombineFunction combineFunction = null;, +            } else if ("boost_mode".equals(currentFieldName) || "boostMode".equals(currentFieldName)) {, +                combineFunction = parseBoostMode(parseContext, parser);, +            if (combineFunction != null) {, +                theQuery.setCombineFunction(combineFunction);, +            }, +            if (combineFunction != null) {, +                functionScoreQuery.setCombineFunction(combineFunction);, +            }, +, +    private CombineFunction parseBoostMode(QueryParseContext parseContext, XContentParser parser) throws IOException {, +        String boostMode = parser.text();, +        for (CombineFunction cf : CombineFunction.values()) {, +            if (cf.getName().equals(boostMode)) {, +                return cf;, +            }, +        }, +        throw new QueryParsingException(parseContext.index(), NAME + " illegal boost_mode [" + boostMode + "]");, +    }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +    private String boostMode;, +, +    public FunctionScoreQueryBuilder boostMode(String boostMode) {, +        this.boostMode = boostMode;, +        return this;, +    }, +, +        if (boostMode != null) {, +            builder.field("boost_mode", boostMode);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java, +import org.elasticsearch.common.lucene.search.function.CombineFunction;, +        CombineFunction combineFunction = null;, +            } else if ("boost_mode".equals(currentFieldName) || "boostMode".equals(currentFieldName)) {, +                combineFunction = parseBoostMode(parseContext, parser);, +            if (combineFunction != null) {, +                theQuery.setCombineFunction(combineFunction);, +            }, +            if (combineFunction != null) {, +                functionScoreQuery.setCombineFunction(combineFunction);, +            }, +, +    private CombineFunction parseBoostMode(QueryParseContext parseContext, XContentParser parser) throws IOException {, +        String boostMode = parser.text();, +        for (CombineFunction cf : CombineFunction.values()) {, +            if (cf.getName().equals(boostMode)) {, +                return cf;, +            }, +        }, +        throw new QueryParsingException(parseContext.index(), NAME + " illegal boost_mode [" + boostMode + "]");, +    }, +++ b/src/test/java/org/elasticsearch/test/integration/search/functionscore/DecayFunctionScoreTests.java, +import org.elasticsearch.common.lucene.search.function.CombineFunction;, +    , +    @Test, +    public void testBoostModeSettingWorks() throws Exception {, +, +        createIndexMapped("test", "type1", "test", "string", "loc", "geo_point");, +        ensureYellow();, +, +        List<IndexRequestBuilder> indexBuilders = new ArrayList<IndexRequestBuilder>();, +        indexBuilders.add(new IndexRequestBuilder(client()), +                .setType("type1"), +                .setId("1"), +                .setIndex("test"), +                .setSource(, +                        jsonBuilder().startObject().field("test", "value").startObject("loc").field("lat", 11).field("lon", 21).endObject(), +                                .endObject()));, +        indexBuilders.add(new IndexRequestBuilder(client()), +                .setType("type1"), +                .setId("2"), +                .setIndex("test"), +                .setSource(, +                        jsonBuilder().startObject().field("test", "value value").startObject("loc").field("lat", 11).field("lon", 20).endObject(), +                                .endObject()));, +        IndexRequestBuilder[] builders = indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]);]