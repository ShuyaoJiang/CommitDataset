[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Engine engine = new RobinEngine(shardId, settings, new ThreadPool(), new IndexSettingsService(shardId.index(), settings), store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Engine engine = new RobinEngine(shardId, settings, new ThreadPool(), new IndexSettingsService(shardId.index(), settings), store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.threadpool.ThreadPool;, +import java.util.Map;, +    private final long gcDeletesInMillis;, +, +    private final ThreadPool threadPool;, +, +    @Inject public RobinEngine(ShardId shardId, @IndexSettings Settings indexSettings, ThreadPool threadPool,, +                               IndexSettingsService indexSettingsService,, +        this.gcDeletesInMillis = indexSettings.getAsTime("index.gc_deletes", TimeValue.timeValueSeconds(60)).millis();, +        this.threadPool = threadPool;, +                    versionMap.put(create.uid().text(), new VersionValue(create.version(), false, threadPool.estimatedTimeInMillis()));, +                    if (versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {, +                        currentVersion = -1; // deleted, and GC, +                    } else {, +                }, +                versionMap.put(create.uid().text(), new VersionValue(updatedVersion, false, threadPool.estimatedTimeInMillis()));, +                    versionMap.put(index.uid().text(), new VersionValue(index.version(), false, threadPool.estimatedTimeInMillis()));, +                    if (versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {, +                        currentVersion = -1; // deleted, and GC, +                    } else {, +                }, +                versionMap.put(index.uid().text(), new VersionValue(updatedVersion, false, threadPool.estimatedTimeInMillis()));, +                    versionMap.put(delete.uid().text(), new VersionValue(delete.version(), true, threadPool.estimatedTimeInMillis()));, +                    if (versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {, +                        currentVersion = -1; // deleted, and GC, +                    } else {, +                }, +                    versionMap.put(delete.uid().text(), new VersionValue(updatedVersion, true, threadPool.estimatedTimeInMillis()));, +            // remove all version except for deletes, which we expire based on GC value, +            long time = threadPool.estimatedTimeInMillis();, +            for (Map.Entry<String, VersionValue> entry : versionMap.entrySet()) {, +                if (entry.getValue().delete()) {, +                    if ((time - entry.getValue().time()) > gcDeletesInMillis) {, +                        versionMap.remove(entry.getKey());, +                    }, +                } else {, +                    versionMap.remove(entry.getKey());, +                }, +            }, +        private final long version;, +        private final long time;, +        VersionValue(long version, boolean delete, long time) {, +            this.time = time;, +        }, +, +        public long time() {, +            return this.time;, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Engine engine = new RobinEngine(shardId, settings, new ThreadPool(), new IndexSettingsService(shardId.index(), settings), store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.threadpool.ThreadPool;, +import java.util.Map;, +    private final long gcDeletesInMillis;, +, +    private final ThreadPool threadPool;, +, +    @Inject public RobinEngine(ShardId shardId, @IndexSettings Settings indexSettings, ThreadPool threadPool,, +                               IndexSettingsService indexSettingsService,, +        this.gcDeletesInMillis = indexSettings.getAsTime("index.gc_deletes", TimeValue.timeValueSeconds(60)).millis();, +        this.threadPool = threadPool;, +                    versionMap.put(create.uid().text(), new VersionValue(create.version(), false, threadPool.estimatedTimeInMillis()));, +                    if (versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {, +                        currentVersion = -1; // deleted, and GC, +                    } else {, +                }, +                versionMap.put(create.uid().text(), new VersionValue(updatedVersion, false, threadPool.estimatedTimeInMillis()));, +                    versionMap.put(index.uid().text(), new VersionValue(index.version(), false, threadPool.estimatedTimeInMillis()));, +                    if (versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {, +                        currentVersion = -1; // deleted, and GC, +                    } else {, +                }, +                versionMap.put(index.uid().text(), new VersionValue(updatedVersion, false, threadPool.estimatedTimeInMillis()));, +                    versionMap.put(delete.uid().text(), new VersionValue(delete.version(), true, threadPool.estimatedTimeInMillis()));, +                    if (versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {, +                        currentVersion = -1; // deleted, and GC, +                    } else {, +                }, +                    versionMap.put(delete.uid().text(), new VersionValue(updatedVersion, true, threadPool.estimatedTimeInMillis()));, +            // remove all version except for deletes, which we expire based on GC value, +            long time = threadPool.estimatedTimeInMillis();, +            for (Map.Entry<String, VersionValue> entry : versionMap.entrySet()) {, +                if (entry.getValue().delete()) {, +                    if ((time - entry.getValue().time()) > gcDeletesInMillis) {, +                        versionMap.remove(entry.getKey());, +                    }, +                } else {, +                    versionMap.remove(entry.getKey());, +                }, +            }, +        private final long version;, +        private final long time;, +        VersionValue(long version, boolean delete, long time) {, +            this.time = time;, +        }, +]