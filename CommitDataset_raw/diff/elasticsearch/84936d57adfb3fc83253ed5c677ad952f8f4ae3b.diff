[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/support/XContentFilterKeysUtils.java, +                    if (isOutsideOfArray) {, +                    }, +                    if (isOutsideOfArray) {, +                    }, +                    if (isOutsideOfArray) {, +                    }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/support/XContentFilterKeysUtils.java, +                    if (isOutsideOfArray) {, +                    }, +                    if (isOutsideOfArray) {, +                    }, +                    if (isOutsideOfArray) {, +                    }, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/watcher/support/FilterXContentTests.java, +import org.elasticsearch.xpack.watcher.support.xcontent.ObjectPath;, +import java.io.IOException;, +import static org.hamcrest.Matchers.is;, +    // issue #4614, +    public void testNestedArraysWork() throws Exception {, +        XContentBuilder builder = jsonBuilder().startObject().startArray("buckets"), +                .startObject().startObject("foo").field("spam", "eggs").endObject().endObject(), +                .startObject().startObject("foo").field("spam", "eggs2").endObject().endObject(), +                .startObject().startObject("foo").field("spam", "eggs3").endObject().endObject(), +                .endArray().endObject();, +, +        XContentParser parser = createParser(builder);, +, +        assertArrayValues(parser, "buckets.foo.spam", "eggs", "eggs2", "eggs3");, +    }, +, +    private void assertArrayValues(XContentParser parser, String key, Object ... expectedValues) throws IOException {, +        Set<String> keys = new HashSet<>();, +        keys.add(key);, +        Map<String, Object> filteredData = XContentFilterKeysUtils.filterMapOrdered(keys, parser);, +        for (int i = 0; i < expectedValues.length; i++) {, +            if (expectedValues[i] instanceof String) {, +                String data = ObjectPath.eval("buckets." + i + ".foo.spam", filteredData);, +                assertThat(data, is(expectedValues[i]));, +            } else if (expectedValues[i] instanceof Integer) {, +                int data = ObjectPath.eval("buckets." + i + ".foo.spam", filteredData);, +                assertThat(data, is(expectedValues[i]));, +            } else if (expectedValues[i] instanceof Boolean) {, +                boolean data = ObjectPath.eval("buckets." + i + ".foo.spam", filteredData);, +                assertThat(data, is(expectedValues[i]));, +            }, +        }, +    }, +, +    public void testNestedArraysWorkWithNumbers() throws Exception {, +        XContentBuilder builder = jsonBuilder().startObject().startArray("buckets"), +                .startObject().startObject("foo").field("spam", 0).endObject().endObject(), +                .startObject().startObject("foo").field("spam", 1).endObject().endObject(), +                .startObject().startObject("foo").field("spam", 2).endObject().endObject(), +                .endArray().endObject();, +, +        XContentParser parser = createParser(builder);, +, +        assertArrayValues(parser, "buckets.foo.spam", 0, 1, 2);, +    }, +, +    public void testNestedArraysWorkWithBooleans() throws Exception {, +        boolean[] bools = new boolean[] { randomBoolean(), randomBoolean(), randomBoolean() };, +, +        XContentBuilder builder = jsonBuilder().startObject().startArray("buckets"), +                .startObject().startObject("foo").field("spam", bools[0]).endObject().endObject(), +                .startObject().startObject("foo").field("spam", bools[1]).endObject().endObject(), +                .startObject().startObject("foo").field("spam", bools[2]).endObject().endObject(), +                .endArray().endObject();, +, +        XContentParser parser = createParser(builder);, +, +        assertArrayValues(parser, "buckets.foo.spam", bools);, +    }]