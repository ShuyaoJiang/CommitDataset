[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchType.java, +    SCAN((byte) 4),, +    /**, +     * Only counts the results, will still execute facets and the like., +     */, +    COUNT((byte) 5);, +        } else if (id == 5) {, +            return COUNT;, +        } else if ("count".equals(searchType)) {, +            return SearchType.COUNT;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchType.java, +    SCAN((byte) 4),, +    /**, +     * Only counts the results, will still execute facets and the like., +     */, +    COUNT((byte) 5);, +        } else if (id == 5) {, +            return COUNT;, +        } else if ("count".equals(searchType)) {, +            return SearchType.COUNT;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +    private final TransportSearchCountAction countAction;, +, +                                         TransportSearchScanAction scanAction,, +                                         TransportSearchCountAction countAction) {, +        this.countAction = countAction;, +        if (optimizeSingleShard && searchRequest.searchType() != SCAN && searchRequest.searchType() != COUNT) {, +        } else if (searchRequest.searchType() == SearchType.COUNT) {, +            countAction.execute(searchRequest, listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchType.java, +    SCAN((byte) 4),, +    /**, +     * Only counts the results, will still execute facets and the like., +     */, +    COUNT((byte) 5);, +        } else if (id == 5) {, +            return COUNT;, +        } else if ("count".equals(searchType)) {, +            return SearchType.COUNT;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +    private final TransportSearchCountAction countAction;, +, +                                         TransportSearchScanAction scanAction,, +                                         TransportSearchCountAction countAction) {, +        this.countAction = countAction;, +        if (optimizeSingleShard && searchRequest.searchType() != SCAN && searchRequest.searchType() != COUNT) {, +        } else if (searchRequest.searchType() == SearchType.COUNT) {, +            countAction.execute(searchRequest, listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.search.type;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.collect.ImmutableMap;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.search.SearchShardTarget;, +import org.elasticsearch.search.action.SearchServiceListener;, +import org.elasticsearch.search.action.SearchServiceTransportAction;, +import org.elasticsearch.search.controller.SearchPhaseController;, +import org.elasticsearch.search.controller.ShardDoc;, +import org.elasticsearch.search.fetch.FetchSearchResultProvider;, +import org.elasticsearch.search.internal.InternalSearchRequest;, +import org.elasticsearch.search.internal.InternalSearchResponse;, +import org.elasticsearch.search.query.QuerySearchResult;, +import org.elasticsearch.search.query.QuerySearchResultProvider;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.util.Map;, +, +import static org.elasticsearch.action.search.type.TransportSearchHelper.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class TransportSearchCountAction extends TransportSearchTypeAction {, +]