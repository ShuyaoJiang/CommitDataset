[+++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +, +    public String getAllReplacedWith() {, +        return allReplacedWith;, +    }, +, +    public String getCamelCaseName() {, +        return camelCaseName;, +    }, +, +    public String[] getDeprecatedNames() {, +        return deprecatedNames;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +, +    public String getAllReplacedWith() {, +        return allReplacedWith;, +    }, +, +    public String getCamelCaseName() {, +        return camelCaseName;, +    }, +, +    public String[] getDeprecatedNames() {, +        return deprecatedNames;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +package org.elasticsearch.common.xcontent;, +, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.index.Index;, +, +import java.io.IOException;, +import java.util.*;, +import java.util.function.BiConsumer;, +import java.util.function.BiFunction;, +import java.util.function.Supplier;, +, +/**, + * A declarative Object parser to parse any kind of XContent structures into existing object with setters., + * The Parser is designed to be declarative and stateless. A single parser is defined for one object level, nested, + * elements can be added via {@link #declareObject(BiConsumer, BiFunction, ParseField)} which is commonly done by, + * declaring yet another instance of {@link ObjectParser}. Instances of {@link ObjectParser} are thread-safe and can be, + * re-used across parsing operations. It's recommended to use the high level declare methods like {@link #declareString(BiConsumer, ParseField)}, + * instead of {@link #declareField} which can be used to implement exceptional parsing operations not covered by the high level methods., + */, +public final class ObjectParser<Value, Context> implements BiFunction<XContentParser, Context, Value> {, +, +    private final String name;, +    private final Supplier<Value> valueSupplier;, +, +    /**, +     * Creates a new ObjectParser instance with a name. This name is used to reference the parser in exceptions and messages., +     */, +    public ObjectParser(String name) {, +        this(name, null);, +    }, +, +    /**, +     * Creates a new ObjectParser instance which a name., +     * @param name the parsers name, used to reference the parser in exceptions and messages., +     * @param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser., +     */, +    public ObjectParser(String name, Supplier<Value> valueSupplier) {, +        this.name = name;, +        this.valueSupplier = valueSupplier;, +    }, +, +    /**, +     * Parses a Value from the given {@link XContentParser}, +     * @param parser the parser to build a value from, +     * @return a new value instance drawn from the provided value supplier on {@link #ObjectParser(String, Supplier)}, +     * @throws IOException if an IOException occurs., +     */, +    public Value parse(XContentParser parser) throws IOException {, +        if (valueSupplier == null) {, +            throw new NullPointerException("valueSupplier is not set");, +        }, +        return parse(parser, valueSupplier.get(), null);, +    }, +, +    /**, +     * Parses a Value from the given {@link XContentParser}, +     * @param parser the parser to build a value from, +     * @param value the value to fill from the parser, +     * @return the parsed value, +     * @throws IOException if an IOException occurs., +     */, +    public Value parse(XContentParser parser, Value value) throws IOException {, +        return parse(parser, value, null);, +    }, +, +    /**, +     * Parses a Value from the given {@link XContentParser}, +     * @param parser the parser to build a value from, +     * @param value the value to fill from the parser, +     * @param context an optional context that is passed along to all declared field parsers, +     * @return the parsed value]