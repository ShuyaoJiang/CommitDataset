[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +                ShardRouting activeReplica = activeReplica(failedShard.shardId());, +                if (activeReplica == null) {, +                    // if the activeReplica was relocating before this call to failShard, its relocation was cancelled above when we, +                    // failed initializing replica shards (and moved replica relocation source back to started), +                    assert activeReplica.started() : "replica relocation should have been cancelled: " + activeReplica;, +                    ShardRouting primarySwappedCandidate = promoteActiveReplicaShardToPrimary(activeReplica);, +    private ShardRouting promoteActiveReplicaShardToPrimary(ShardRouting replicaShard) {, +        assert replicaShard.active() : "non-active shard cannot be promoted to primary: " + replicaShard;, +     * Used in conjunction with {@link #promoteActiveReplicaShardToPrimary} when an active replica is promoted to primary., +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +                ShardRouting activeReplica = activeReplica(failedShard.shardId());, +                if (activeReplica == null) {, +                    // if the activeReplica was relocating before this call to failShard, its relocation was cancelled above when we, +                    // failed initializing replica shards (and moved replica relocation source back to started), +                    assert activeReplica.started() : "replica relocation should have been cancelled: " + activeReplica;, +                    ShardRouting primarySwappedCandidate = promoteActiveReplicaShardToPrimary(activeReplica);, +    private ShardRouting promoteActiveReplicaShardToPrimary(ShardRouting replicaShard) {, +        assert replicaShard.active() : "non-active shard cannot be promoted to primary: " + replicaShard;, +     * Used in conjunction with {@link #promoteActiveReplicaShardToPrimary} when an active replica is promoted to primary., +++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocationCommandsTests.java, +        if (randomBoolean()) {, +            logger.info("--> cancel the primary allocation (with allow_primary set to true)");, +            rerouteResult = allocation.reroute(clusterState, new AllocationCommands(new CancelAllocationCommand("test", 0, "node1", true)), false, false);, +            clusterState = ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();, +            assertThat(rerouteResult.changed(), equalTo(true));, +            assertThat(clusterState.getRoutingNodes().node("node1").size(), equalTo(0));, +            assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).iterator().next().primary(), equalTo(true));, +            assertThat(clusterState.getRoutingNodes().node("node3").size(), equalTo(0));, +        } else {, +    }]