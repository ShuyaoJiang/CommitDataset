[+++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.client.ClientProtocolException;, +/**, + * Client that connects to an elasticsearch cluster through http., + * Must be created using {@link Builder}, which allows to set all the different options or just rely on defaults., + * The hosts that are part of the cluster need to be provided at creation time, but can also be replaced later, + * by calling {@link #setHosts(HttpHost...)}., + * The method {@link #performRequest(String, String, Map, HttpEntity, Header...)} allows to send a request to the cluster. When, + * sending a request, a host gets selected out of the provided ones in a round-robin fashion. Failing hosts are marked dead and, + * retried after a certain amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times they previously, + * failed (the more failures, the later they will be retried). In case of failures all of the alive nodes (or dead nodes that, + * deserve a retry) are retried till one responds or none of them does, in which case an {@link IOException} will be thrown., + *, + * Requests can be traced by enabling trace logging for "tracer". The trace logger outputs requests and responses in curl format., + */, +    /**, +     * Replaces the hosts that the client communicates with., +     * @see HttpHost, +     */, +    /**, +     * Sends a request to the elasticsearch cluster that the current client points to., +     * Selects a host out of the provided ones in a round-robin fashion. Failing hosts are marked dead and retried after a certain, +     * amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times they previously failed (the more failures,, +     * the later they will be retried). In case of failures all of the alive nodes (or dead nodes that deserve a retry) are retried, +     * till one responds or none of them does, in which case an {@link IOException} will be thrown., +     *, +     * @param method the http method, +     * @param endpoint the path of the request (without host and port), +     * @param params the query_string parameters, +     * @param entity the body of the request, null if not applicable, +     * @param headers the optional request headers, +     * @return the response returned by elasticsearch, +     * @throws IOException in case of a problem or the connection was aborted, +     * @throws ClientProtocolException in case of an http protocol error, +     * @throws ElasticsearchResponseException in case elasticsearch responded with a status code that indicated an error, +     */, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.client.ClientProtocolException;, +/**, + * Client that connects to an elasticsearch cluster through http., + * Must be created using {@link Builder}, which allows to set all the different options or just rely on defaults., + * The hosts that are part of the cluster need to be provided at creation time, but can also be replaced later, + * by calling {@link #setHosts(HttpHost...)}., + * The method {@link #performRequest(String, String, Map, HttpEntity, Header...)} allows to send a request to the cluster. When, + * sending a request, a host gets selected out of the provided ones in a round-robin fashion. Failing hosts are marked dead and, + * retried after a certain amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times they previously, + * failed (the more failures, the later they will be retried). In case of failures all of the alive nodes (or dead nodes that, + * deserve a retry) are retried till one responds or none of them does, in which case an {@link IOException} will be thrown., + *, + * Requests can be traced by enabling trace logging for "tracer". The trace logger outputs requests and responses in curl format., + */, +    /**, +     * Replaces the hosts that the client communicates with., +     * @see HttpHost, +     */, +    /**, +     * Sends a request to the elasticsearch cluster that the current client points to., +     * Selects a host out of the provided ones in a round-robin fashion. Failing hosts are marked dead and retried after a certain, +     * amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times they previously failed (the more failures,, +     * the later they will be retried). In case of failures all of the alive nodes (or dead nodes that deserve a retry) are retried, +     * till one responds or none of them does, in which case an {@link IOException} will be thrown., +     *, +     * @param method the http method, +     * @param endpoint the path of the request (without host and port), +     * @param params the query_string parameters, +     * @param entity the body of the request, null if not applicable, +     * @param headers the optional request headers, +     * @return the response returned by elasticsearch, +     * @throws IOException in case of a problem or the connection was aborted, +     * @throws ClientProtocolException in case of an http protocol error, +     * @throws ElasticsearchResponseException in case elasticsearch responded with a status code that indicated an error, +     */, +++ b/client/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +//TODO This could potentially be using _cat/nodes which wouldn't require jackson as a dependency, but we'd have bw comp problems with 2.x, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.client.ClientProtocolException;, +/**, + * Client that connects to an elasticsearch cluster through http., + * Must be created using {@link Builder}, which allows to set all the different options or just rely on defaults., + * The hosts that are part of the cluster need to be provided at creation time, but can also be replaced later, + * by calling {@link #setHosts(HttpHost...)}., + * The method {@link #performRequest(String, String, Map, HttpEntity, Header...)} allows to send a request to the cluster. When, + * sending a request, a host gets selected out of the provided ones in a round-robin fashion. Failing hosts are marked dead and, + * retried after a certain amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times they previously, + * failed (the more failures, the later they will be retried). In case of failures all of the alive nodes (or dead nodes that, + * deserve a retry) are retried till one responds or none of them does, in which case an {@link IOException} will be thrown., + *, + * Requests can be traced by enabling trace logging for "tracer". The trace logger outputs requests and responses in curl format., + */, +    /**, +     * Replaces the hosts that the client communicates with., +     * @see HttpHost, +     */, +    /**, +     * Sends a request to the elasticsearch cluster that the current client points to., +     * Selects a host out of the provided ones in a round-robin fashion. Failing hosts are marked dead and retried after a certain, +     * amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times they previously failed (the more failures,, +     * the later they will be retried). In case of failures all of the alive nodes (or dead nodes that deserve a retry) are retried, +     * till one responds or none of them does, in which case an {@link IOException} will be thrown., +     *]