[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.io.FileSystemUtils;, +        if (System.getProperty("es.max-open-files", "false").equals("true")) {, +            ESLogger logger = Loggers.getLogger(Bootstrap.class);, +            logger.info("max_open_files [{}]", FileSystemUtils.maxOpenFiles(new File(tuple.v2().workFile(), "open_files")));, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.io.FileSystemUtils;, +        if (System.getProperty("es.max-open-files", "false").equals("true")) {, +            ESLogger logger = Loggers.getLogger(Bootstrap.class);, +            logger.info("max_open_files [{}]", FileSystemUtils.maxOpenFiles(new File(tuple.v2().workFile(), "open_files")));, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +import java.util.ArrayList;, +import java.util.List;, + * @author kimchy (shay.banon), +    public static int maxOpenFiles(File testDir) {, +        boolean dirCreated = false;, +        if (!testDir.exists()) {, +            dirCreated = true;, +            testDir.mkdirs();, +        }, +        List<RandomAccessFile> files = new ArrayList<RandomAccessFile>();, +        try {, +            while (true) {, +                files.add(new RandomAccessFile(new File(testDir, "tmp" + files.size()), "rw"));, +            }, +        } catch (IOException ioe) {, +            int i = 0;, +            for (RandomAccessFile raf : files) {, +                try {, +                    raf.close();, +                } catch (IOException e) {, +                    // ignore, +                }, +                new File(testDir, "tmp" + i++).delete();, +            }, +            if (dirCreated) {, +                deleteRecursively(testDir);, +            }, +        }, +        return files.size();, +    }, +]