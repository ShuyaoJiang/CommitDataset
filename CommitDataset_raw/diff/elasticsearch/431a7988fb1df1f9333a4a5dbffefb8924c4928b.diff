[+++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/prelert/job/manager/JobManagerTests.java, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/prelert/job/manager/JobManagerTests.java, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/prelert/job/metadata/PrelertMetadataTests.java, +import org.elasticsearch.ElasticsearchStatusException;, +import org.elasticsearch.ResourceNotFoundException;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.xpack.prelert.job.SchedulerStatus;, +import static org.elasticsearch.xpack.prelert.job.scheduler.ScheduledJobRunnerTests.createScheduledJob;, +        assertThat(result.getAllocations().get("1").getStatus(), equalTo(JobStatus.CLOSED));, +        assertThat(result.getSchedulerStatuses().get("1"), nullValue());, +        assertThat(result.getAllocations().get("2").getStatus(), equalTo(JobStatus.CLOSED));, +        assertThat(result.getSchedulerStatuses().get("2"), nullValue());, +    public void testRemoveJob() {, +        Job job1 = buildJobBuilder("1").build();, +        PrelertMetadata.Builder builder = new PrelertMetadata.Builder();, +        builder.putJob(job1, false);, +, +        PrelertMetadata result = builder.build();, +        assertThat(result.getJobs().get("1"), sameInstance(job1));, +        assertThat(result.getAllocations().get("1").getStatus(), equalTo(JobStatus.CLOSED));, +        assertThat(result.getSchedulerStatuses().get("1"), nullValue());, +, +        builder = new PrelertMetadata.Builder(result);, +        builder.removeJob("1");, +        result = builder.build();, +        assertThat(result.getJobs().get("1"), nullValue());, +        assertThat(result.getAllocations().get("1"), nullValue());, +        assertThat(result.getSchedulerStatuses().get("1"), nullValue());, +    }, +, +    public void testRemoveJob_failBecauseJobIsOpen() {, +        Job job1 = buildJobBuilder("1").build();, +        PrelertMetadata.Builder builder1 = new PrelertMetadata.Builder();, +        builder1.putJob(job1, false);, +        builder1.updateStatus("1", JobStatus.OPENING, null);, +        builder1.updateStatus("1", JobStatus.OPENED, null);, +, +        PrelertMetadata result = builder1.build();, +        assertThat(result.getJobs().get("1"), sameInstance(job1));, +        assertThat(result.getAllocations().get("1").getStatus(), equalTo(JobStatus.OPENED));, +        assertThat(result.getSchedulerStatuses().get("1"), nullValue());, +, +        PrelertMetadata.Builder builder2 = new PrelertMetadata.Builder(result);, +        ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> builder2.removeJob("1"));, +        assertThat(e.status(), equalTo(RestStatus.CONFLICT));, +    }, +, +    public void testRemoveJob_failBecauseJobDoesNotExist() {, +        PrelertMetadata.Builder builder1 = new PrelertMetadata.Builder();, +        expectThrows(ResourceNotFoundException.class, () -> builder1.removeJob("1"));, +    }, +, +    public void testCrudScheduledJob() {, +        Job job1 = createScheduledJob().build();, +        PrelertMetadata.Builder builder = new PrelertMetadata.Builder();, +        builder.putJob(job1, false);, +, +        PrelertMetadata result = builder.build();, +        assertThat(result.getJobs().get("foo"), sameInstance(job1));, +        assertThat(result.getAllocations().get("foo").getStatus(), equalTo(JobStatus.CLOSED));, +        assertThat(result.getSchedulerStatuses().get("foo"), equalTo(SchedulerStatus.STOPPED));, +, +        builder = new PrelertMetadata.Builder(result);, +        builder.removeJob("foo");, +        result = builder.build();, +        assertThat(result.getJobs().get("foo"), nullValue());, +        assertThat(result.getAllocations().get("foo"), nullValue());, +        assertThat(result.getSchedulerStatuses().get("foo"), nullValue());, +    }, +, +    public void testDeletedScheduledJob_failBecauseSchedulerStarted() {, +        Job job1 = createScheduledJob().build();, +        PrelertMetadata.Builder builder = new PrelertMetadata.Builder();, +        builder.putJob(job1, false);, +        builder.updateStatus("foo", JobStatus.OPENING, null);, +        builder.updateStatus("foo", JobStatus.OPENED, null);, +        builder.updateSchedulerStatus("foo", SchedulerStatus.STARTED);, +, +        PrelertMetadata result = builder.build();, +        assertThat(result.getJobs().get("foo"), sameInstance(job1));, +        assertThat(result.getAllocations().get("foo").getStatus(), equalTo(JobStatus.OPENED));, +        assertThat(result.getSchedulerStatuses().get("foo"), equalTo(SchedulerStatus.STARTED));, +, +        PrelertMetadata.Builder builder2 = new PrelertMetadata.Builder(result);, +        ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> builder2.removeJob("foo"));, +        assertThat(e.status(), equalTo(RestStatus.CONFLICT));, +    }, +]