[+++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    public void circuitBreak(String fieldName) throws CircuitBreakingException {, +        throw new CircuitBreakingException("Data too large, data for field [" + fieldName + "] would be larger than limit of [" +, +                memoryBytesLimit + "/" + new ByteSizeValue(memoryBytesLimit) + "]");, +    public double addEstimateBytesAndMaybeBreak(long bytes, String fieldName) throws CircuitBreakingException {, +            circuitBreak(fieldName);, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: [-1b]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed));, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: {} [{}], estimate: {} [{}]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed),, +                logger.error("New used memory {} [{}] from field [{}] would be larger than configured breaker: {} [{}], breaking",, +                        newUsedWithOverhead, new ByteSizeValue(newUsedWithOverhead), fieldName,, +                circuitBreak(fieldName);, +++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    public void circuitBreak(String fieldName) throws CircuitBreakingException {, +        throw new CircuitBreakingException("Data too large, data for field [" + fieldName + "] would be larger than limit of [" +, +                memoryBytesLimit + "/" + new ByteSizeValue(memoryBytesLimit) + "]");, +    public double addEstimateBytesAndMaybeBreak(long bytes, String fieldName) throws CircuitBreakingException {, +            circuitBreak(fieldName);, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: [-1b]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed));, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: {} [{}], estimate: {} [{}]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed),, +                logger.error("New used memory {} [{}] from field [{}] would be larger than configured breaker: {} [{}], breaking",, +                        newUsedWithOverhead, new ByteSizeValue(newUsedWithOverhead), fieldName,, +                circuitBreak(fieldName);, +++ b/src/main/java/org/elasticsearch/index/fielddata/RamAccountingTermsEnum.java, +    private final String fieldName;, +    public RamAccountingTermsEnum(TermsEnum termsEnum, MemoryCircuitBreaker breaker, AbstractIndexFieldData.PerValueEstimator estimator,, +                                  String fieldName) {, +        this.fieldName = fieldName;, +        breaker.addEstimateBytesAndMaybeBreak(this.flushBuffer, this.fieldName);, +++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    public void circuitBreak(String fieldName) throws CircuitBreakingException {, +        throw new CircuitBreakingException("Data too large, data for field [" + fieldName + "] would be larger than limit of [" +, +                memoryBytesLimit + "/" + new ByteSizeValue(memoryBytesLimit) + "]");, +    public double addEstimateBytesAndMaybeBreak(long bytes, String fieldName) throws CircuitBreakingException {, +            circuitBreak(fieldName);, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: [-1b]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed));, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: {} [{}], estimate: {} [{}]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed),, +                logger.error("New used memory {} [{}] from field [{}] would be larger than configured breaker: {} [{}], breaking",, +                        newUsedWithOverhead, new ByteSizeValue(newUsedWithOverhead), fieldName,, +                circuitBreak(fieldName);, +++ b/src/main/java/org/elasticsearch/index/fielddata/RamAccountingTermsEnum.java, +    private final String fieldName;, +    public RamAccountingTermsEnum(TermsEnum termsEnum, MemoryCircuitBreaker breaker, AbstractIndexFieldData.PerValueEstimator estimator,, +                                  String fieldName) {, +        this.fieldName = fieldName;, +        breaker.addEstimateBytesAndMaybeBreak(this.flushBuffer, this.fieldName);, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/PackedArrayIndexFieldData.java, +        PackedArrayEstimator estimator = new PackedArrayEstimator(breakerService.getBreaker(), getNumericType(), getFieldNames().fullName());, +        private final String fieldName;, +        public PackedArrayEstimator(MemoryCircuitBreaker breaker, NumericType type, String fieldName) {, +            this.fieldName = fieldName;, +            return new RamAccountingTermsEnum(type.wrapTermsEnum(terms.iterator(null)), breaker, this, this.fieldName);, +++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    public void circuitBreak(String fieldName) throws CircuitBreakingException {, +        throw new CircuitBreakingException("Data too large, data for field [" + fieldName + "] would be larger than limit of [" +, +                memoryBytesLimit + "/" + new ByteSizeValue(memoryBytesLimit) + "]");, +    public double addEstimateBytesAndMaybeBreak(long bytes, String fieldName) throws CircuitBreakingException {, +            circuitBreak(fieldName);, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: [-1b]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed));, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: {} [{}], estimate: {} [{}]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed),, +                logger.error("New used memory {} [{}] from field [{}] would be larger than configured breaker: {} [{}], breaking",, +                        newUsedWithOverhead, new ByteSizeValue(newUsedWithOverhead), fieldName,, +                circuitBreak(fieldName);, +++ b/src/main/java/org/elasticsearch/index/fielddata/RamAccountingTermsEnum.java, +    private final String fieldName;, +    public RamAccountingTermsEnum(TermsEnum termsEnum, MemoryCircuitBreaker breaker, AbstractIndexFieldData.PerValueEstimator estimator,, +                                  String fieldName) {, +        this.fieldName = fieldName;, +        breaker.addEstimateBytesAndMaybeBreak(this.flushBuffer, this.fieldName);, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/PackedArrayIndexFieldData.java, +        PackedArrayEstimator estimator = new PackedArrayEstimator(breakerService.getBreaker(), getNumericType(), getFieldNames().fullName());, +        private final String fieldName;, +        public PackedArrayEstimator(MemoryCircuitBreaker breaker, NumericType type, String fieldName) {, +            this.fieldName = fieldName;, +            return new RamAccountingTermsEnum(type.wrapTermsEnum(terms.iterator(null)), breaker, this, this.fieldName);, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/PagedBytesIndexFieldData.java, +        PagedBytesEstimator estimator = new PagedBytesEstimator(context, breakerService.getBreaker(), getFieldNames().fullName());, +        private final String fieldName;, +        PagedBytesEstimator(AtomicReaderContext context, MemoryCircuitBreaker breaker, String fieldName) {, +            this.fieldName = fieldName;, +                return new RamAccountingTermsEnum(filter(terms, reader), breaker, this, this.fieldName);, +                    return new RamAccountingTermsEnum(filter(terms, reader), breaker, this, this.fieldName);, +                breaker.addEstimateBytesAndMaybeBreak(estimatedBytes, fieldName);, +++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    public void circuitBreak(String fieldName) throws CircuitBreakingException {, +        throw new CircuitBreakingException("Data too large, data for field [" + fieldName + "] would be larger than limit of [" +, +                memoryBytesLimit + "/" + new ByteSizeValue(memoryBytesLimit) + "]");, +    public double addEstimateBytesAndMaybeBreak(long bytes, String fieldName) throws CircuitBreakingException {, +            circuitBreak(fieldName);, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: [-1b]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed));, +                logger.trace("Adding [{}][{}] to used bytes [new used: [{}], limit: {} [{}], estimate: {} [{}]]",, +                        new ByteSizeValue(bytes), fieldName, new ByteSizeValue(newUsed),]