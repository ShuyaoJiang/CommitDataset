[+++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/local/LocalExporter.java, +public class LocalExporter extends Exporter implements ClusterStateListener {, +    public LocalExporter(Exporter.Config config, Client client, ClusterService clusterService, RendererRegistry renderers) {, +        bulk = start(clusterService.state());, +        clusterService.add(this);, +    }, +        clusterService.remove(this);, +        if (clusterService.localNode() == null || clusterState == null || bulk != null) {, +                return null;, +        } else if (!installedTemplateVersionIsSufficient(Version.CURRENT, installedTemplateVersion)) {, +            logger.error("marvel template version [{}] is below the minimum compatible version [{}]. ", +                            + "please manually update the marvel template to a more recent version", +                            + "and delete the current active marvel index (don't forget to back up it first if needed)",, +                    installedTemplateVersion, MIN_SUPPORTED_TEMPLATE_VERSION);, +            // we're not going to do anything with the template.. it's too old, and the schema might, +            // be too different than what this version of marvel/es can work with. For this reason we're, +            // not going to export any data, to avoid mapping conflicts., +            return null;, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/local/LocalExporter.java, +public class LocalExporter extends Exporter implements ClusterStateListener {, +    public LocalExporter(Exporter.Config config, Client client, ClusterService clusterService, RendererRegistry renderers) {, +        bulk = start(clusterService.state());, +        clusterService.add(this);, +    }, +        clusterService.remove(this);, +        if (clusterService.localNode() == null || clusterState == null || bulk != null) {, +                return null;, +        } else if (!installedTemplateVersionIsSufficient(Version.CURRENT, installedTemplateVersion)) {, +            logger.error("marvel template version [{}] is below the minimum compatible version [{}]. ", +                            + "please manually update the marvel template to a more recent version", +                            + "and delete the current active marvel index (don't forget to back up it first if needed)",, +                    installedTemplateVersion, MIN_SUPPORTED_TEMPLATE_VERSION);, +            // we're not going to do anything with the template.. it's too old, and the schema might, +            // be too different than what this version of marvel/es can work with. For this reason we're, +            // not going to export any data, to avoid mapping conflicts., +            return null;, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/exporter/local/LocalExporterTests.java, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import org.elasticsearch.gateway.GatewayService;, +import org.elasticsearch.marvel.agent.renderer.RendererRegistry;, +import static org.mockito.Mockito.*;, +@ClusterScope(scope = Scope.TEST, numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0.0), +    @Test, +    public void testUnsupportedTemplateVersion() throws Exception {, +        Exporter.Config config = new Exporter.Config("_name", Settings.EMPTY, Settings.builder(), +                .put("type", "local").build());, +        Client client = mock(Client.class);, +, +        ClusterService clusterService = mock(ClusterService.class);, +        boolean master = randomBoolean();, +        DiscoveryNode localNode = mock(DiscoveryNode.class);, +        when(localNode.masterNode()).thenReturn(master);, +        when(clusterService.localNode()).thenReturn(localNode);, +, +        RendererRegistry renderers = mock(RendererRegistry.class);, +, +        LocalExporter exporter = spy(new LocalExporter(config, client, clusterService, renderers));, +, +        // creating a cluster state mock that holds unsupported template version, +        Version unsupportedVersion = randomFrom(Version.V_0_18_0, Version.V_1_0_0, Version.V_1_4_0);, +        IndexTemplateMetaData template = mock(IndexTemplateMetaData.class);, +        when(template.settings()).thenReturn(Settings.builder().put("index.marvel_version", unsupportedVersion.toString()).build());, +        MetaData metaData = mock(MetaData.class);, +        when(metaData.getTemplates()).thenReturn(ImmutableOpenMap.<String, IndexTemplateMetaData>builder().fPut(Exporter.INDEX_TEMPLATE_NAME, template).build());, +        ClusterBlocks blocks = mock(ClusterBlocks.class);, +        when(blocks.hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK)).thenReturn(false);, +        ClusterState clusterState = mock(ClusterState.class);, +        when(clusterState.getMetaData()).thenReturn(metaData);, +        when(clusterState.blocks()).thenReturn(blocks);, +        when(clusterService.state()).thenReturn(clusterState);, +, +        assertThat(exporter.start(clusterState), nullValue());, +        verifyZeroInteractions(client);, +        if (master) {, +            verify(exporter, times(1)).installedTemplateVersionMandatesAnUpdate(Version.CURRENT, unsupportedVersion);, +        }, +        verify(exporter, times(1)).installedTemplateVersionIsSufficient(Version.CURRENT, unsupportedVersion);, +    }, +, +    @Test @TestLogging("marvel.agent:trace"), +        String timeFormat = randomFrom("YY", "YYYY", "YYYY.MM", "YYYY-MM", "MM.YYYY", "MM");, +        // first lets test that the index resolver works with time, +        String indexName = MarvelSettings.MARVEL_INDICES_PREFIX + DateTimeFormat.forPattern(timeFormat).withZoneUTC().print(time);, +        assertThat(exporter.indexNameResolver().resolve(time), equalTo(indexName));, +, +        // now lets test that the index name resolver works with a doc, +        MarvelDoc doc = newRandomMarvelDoc();, +        indexName = MarvelSettings.MARVEL_INDICES_PREFIX + DateTimeFormat.forPattern(timeFormat).withZoneUTC().print(doc.timestamp());, +        assertThat(exporter.indexNameResolver().resolve(doc), equalTo(indexName));, +        awaitIndexExists(indexName);, +        timeFormat = randomFrom("dd", "dd.MM.YYYY", "dd.MM");, +        updateClusterSettings(Settings.builder().put("marvel.agent.exporters._local.index.name.time_format", timeFormat));, +        exporter = getLocalExporter("_local"); // we need to get it again.. as it was rebuilt, +        indexName = MarvelSettings.MARVEL_INDICES_PREFIX + DateTimeFormat.forPattern(timeFormat).withZoneUTC().print(doc.timestamp());, +        assertThat(exporter.indexNameResolver().resolve(doc), equalTo(indexName));, +        logger.debug("--> exporting the document again (this time with the the new index name time format [{}], expecting index name [{}]", timeFormat, indexName);]