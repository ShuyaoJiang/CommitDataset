[+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeAutodetectIntegTestCase.java, +abstract class MlNativeAutodetectIntegTestCase extends MlNativeIntegTestCase {, +    protected void cleanUpResources() {, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeAutodetectIntegTestCase.java, +abstract class MlNativeAutodetectIntegTestCase extends MlNativeIntegTestCase {, +    protected void cleanUpResources() {, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeIntegTestCase.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.ClusterModule;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.common.io.PathUtils;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.network.NetworkModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.reindex.ReindexPlugin;, +import org.elasticsearch.persistent.PersistentTaskParams;, +import org.elasticsearch.persistent.PersistentTaskState;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.search.SearchModule;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.SecuritySettingsSourceField;, +import org.elasticsearch.transport.Netty4Plugin;, +import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;, +import org.elasticsearch.xpack.core.XPackClientPlugin;, +import org.elasticsearch.xpack.core.XPackSettings;, +import org.elasticsearch.xpack.core.ml.MlMetadata;, +import org.elasticsearch.xpack.core.ml.MlTasks;, +import org.elasticsearch.xpack.core.ml.action.OpenJobAction;, +import org.elasticsearch.xpack.core.ml.action.StartDatafeedAction;, +import org.elasticsearch.xpack.core.ml.datafeed.DatafeedState;, +import org.elasticsearch.xpack.core.ml.job.config.JobTaskState;, +import org.elasticsearch.xpack.core.security.SecurityField;, +import org.elasticsearch.xpack.core.security.authc.TokenMetaData;, +, +import java.io.IOException;, +import java.net.URISyntaxException;, +import java.nio.file.Path;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +, +import static org.elasticsearch.test.XContentTestUtils.convertToMap;, +import static org.elasticsearch.test.XContentTestUtils.differenceBetweenMapsIgnoringArrayOrder;, +, +/**, + * Base class of ML integration tests that use a native autodetect process, + */, +abstract class MlNativeIntegTestCase extends ESIntegTestCase {, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Arrays.asList(LocalStateCompositeXPackPlugin.class, Netty4Plugin.class);, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> transportClientPlugins() {, +        return Arrays.asList(XPackClientPlugin.class, Netty4Plugin.class, ReindexPlugin.class);, +    }, +, +    @Override, +    protected Settings externalClusterClientSettings() {, +        Path key;, +        Path certificate;, +        try {, +            key = PathUtils.get(getClass().getResource("/testnode.pem").toURI());, +            certificate = PathUtils.get(getClass().getResource("/testnode.crt").toURI());, +        } catch (URISyntaxException e) {, +            throw new IllegalStateException("error trying to get keystore path", e);, +        }, +        Settings.Builder builder = Settings.builder();, +        builder.put(NetworkModule.TRANSPORT_TYPE_KEY, SecurityField.NAME4);, +        builder.put(SecurityField.USER_SETTING.getKey(), "x_pack_rest_user:" + SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING);, +        builder.put(XPackSettings.MACHINE_LEARNING_ENABLED.getKey(), true);, +        builder.put("xpack.security.transport.ssl.enabled", true);, +        builder.put("xpack.security.transport.ssl.key", key.toAbsolutePath().toString());, +        builder.put("xpack.security.transport.ssl.certificate", certificate.toAbsolutePath().toString());, +        builder.put("xpack.security.transport.ssl.key_passphrase", "testnode");, +        builder.put("xpack.security.transport.ssl.verification_mode", "certificate");, +        return builder.build();, +    }, +, +    protected void cleanUp() {, +        cleanUpResources();, +        waitForPendingTasks();, +    }, +, +    protected abstract void cleanUpResources();]