[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.TrustManagerFactory;, +import java.security.KeyStore;, +import java.util.Optional;, +    public SSLService(Settings settings, Environment environment) {, +        X509ExtendedTrustManager trustManager = sslConfiguration.trustConfig().createTrustManager(env);, +        X509ExtendedKeyManager keyManager = sslConfiguration.keyConfig().createKeyManager(env);, +    private SSLContextHolder createSslContext(X509ExtendedKeyManager keyManager, X509ExtendedTrustManager trustManager,, +            return new SSLContextHolder(sslContext, sslConfiguration);, +    Map<SSLConfiguration, SSLContextHolder> loadSSLConfigurations() {, +    final class SSLContextHolder {, +        private volatile SSLContext context;, +        private final TrustConfig trustConfig;, +        private final SSLConfiguration sslConfiguration;, +        SSLContextHolder(SSLContext context, SSLConfiguration sslConfiguration) {, +            this.sslConfiguration = sslConfiguration;, +            this.keyConfig = sslConfiguration.keyConfig();, +            this.trustConfig = sslConfiguration.trustConfig();, +        private void invalidateSessions(SSLSessionContext sslSessionContext) {, +, +        synchronized void reload() {, +            invalidateSessions(context.getClientSessionContext());, +            invalidateSessions(context.getServerSessionContext());, +            reloadSslContext();, +        private void reloadSslContext() {, +            try {, +                X509ExtendedKeyManager loadedKeyManager = Optional.ofNullable(keyConfig.createKeyManager(env))., +                        orElse(getEmptyKeyManager());, +                X509ExtendedTrustManager loadedTrustManager = Optional.ofNullable(trustConfig.createTrustManager(env))., +                        orElse(getEmptyTrustManager());, +                SSLContext loadedSslContext = SSLContext.getInstance(sslContextAlgorithm(sslConfiguration.supportedProtocols()));, +                loadedSslContext.init(new X509ExtendedKeyManager[]{loadedKeyManager},, +                    new X509ExtendedTrustManager[]{loadedTrustManager}, null);, +                supportedCiphers(loadedSslContext.getSupportedSSLParameters().getCipherSuites(), sslConfiguration.cipherSuites(), false);, +                this.context = loadedSslContext;, +            } catch (GeneralSecurityException | IOException e) {, +                throw new ElasticsearchException("failed to initialize the SSLContext", e);, +        X509ExtendedKeyManager getEmptyKeyManager() throws GeneralSecurityException, IOException {, +            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +            keyStore.load(null, null);, +            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());, +            keyManagerFactory.init(keyStore, null);, +            return (X509ExtendedKeyManager) keyManagerFactory.getKeyManagers()[0];, +        X509ExtendedTrustManager getEmptyTrustManager() throws GeneralSecurityException, IOException {, +            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +            keyStore.load(null, null);, +            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("X509");, +            trustManagerFactory.init(keyStore);, +            return (X509ExtendedTrustManager) trustManagerFactory.getTrustManagers()[0];, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.TrustManagerFactory;, +import java.security.KeyStore;, +import java.util.Optional;, +    public SSLService(Settings settings, Environment environment) {, +        X509ExtendedTrustManager trustManager = sslConfiguration.trustConfig().createTrustManager(env);, +        X509ExtendedKeyManager keyManager = sslConfiguration.keyConfig().createKeyManager(env);, +    private SSLContextHolder createSslContext(X509ExtendedKeyManager keyManager, X509ExtendedTrustManager trustManager,, +            return new SSLContextHolder(sslContext, sslConfiguration);, +    Map<SSLConfiguration, SSLContextHolder> loadSSLConfigurations() {, +    final class SSLContextHolder {, +        private volatile SSLContext context;, +        private final TrustConfig trustConfig;, +        private final SSLConfiguration sslConfiguration;, +        SSLContextHolder(SSLContext context, SSLConfiguration sslConfiguration) {, +            this.sslConfiguration = sslConfiguration;, +            this.keyConfig = sslConfiguration.keyConfig();, +            this.trustConfig = sslConfiguration.trustConfig();, +        private void invalidateSessions(SSLSessionContext sslSessionContext) {, +, +        synchronized void reload() {, +            invalidateSessions(context.getClientSessionContext());, +            invalidateSessions(context.getServerSessionContext());, +            reloadSslContext();, +        private void reloadSslContext() {, +            try {, +                X509ExtendedKeyManager loadedKeyManager = Optional.ofNullable(keyConfig.createKeyManager(env))., +                        orElse(getEmptyKeyManager());, +                X509ExtendedTrustManager loadedTrustManager = Optional.ofNullable(trustConfig.createTrustManager(env))., +                        orElse(getEmptyTrustManager());, +                SSLContext loadedSslContext = SSLContext.getInstance(sslContextAlgorithm(sslConfiguration.supportedProtocols()));, +                loadedSslContext.init(new X509ExtendedKeyManager[]{loadedKeyManager},, +                    new X509ExtendedTrustManager[]{loadedTrustManager}, null);, +                supportedCiphers(loadedSslContext.getSupportedSSLParameters().getCipherSuites(), sslConfiguration.cipherSuites(), false);, +                this.context = loadedSslContext;, +            } catch (GeneralSecurityException | IOException e) {, +                throw new ElasticsearchException("failed to initialize the SSLContext", e);, +        X509ExtendedKeyManager getEmptyKeyManager() throws GeneralSecurityException, IOException {, +            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +            keyStore.load(null, null);, +            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());, +            keyManagerFactory.init(keyStore, null);, +            return (X509ExtendedKeyManager) keyManagerFactory.getKeyManagers()[0];, +        X509ExtendedTrustManager getEmptyTrustManager() throws GeneralSecurityException, IOException {, +            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +            keyStore.load(null, null);, +            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("X509");, +            trustManagerFactory.init(keyStore);, +            return (X509ExtendedTrustManager) trustManagerFactory.getTrustManagers()[0];]