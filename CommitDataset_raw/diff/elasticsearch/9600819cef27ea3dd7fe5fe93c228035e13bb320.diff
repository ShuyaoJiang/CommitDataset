[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.DeleteDatafeedRequest;, +    static Request deleteDatafeed(DeleteDatafeedRequest deleteDatafeedRequest) {, +        String endpoint = new EndpointBuilder(), +                .addPathPartAsIs("_xpack"), +                .addPathPartAsIs("ml"), +                .addPathPartAsIs("datafeeds"), +                .addPathPart(deleteDatafeedRequest.getDatafeedId()), +                .build();, +        Request request = new Request(HttpDelete.METHOD_NAME, endpoint);, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        params.putParam("force", Boolean.toString(deleteDatafeedRequest.isForce()));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.DeleteDatafeedRequest;, +    static Request deleteDatafeed(DeleteDatafeedRequest deleteDatafeedRequest) {, +        String endpoint = new EndpointBuilder(), +                .addPathPartAsIs("_xpack"), +                .addPathPartAsIs("ml"), +                .addPathPartAsIs("datafeeds"), +                .addPathPart(deleteDatafeedRequest.getDatafeedId()), +                .build();, +        Request request = new Request(HttpDelete.METHOD_NAME, endpoint);, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        params.putParam("force", Boolean.toString(deleteDatafeedRequest.isForce()));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.DeleteDatafeedRequest;, +    public AcknowledgedResponse deleteJob(DeleteJobRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent,, +    public void deleteJobAsync(DeleteJobRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent,, +     * Deletes the given Machine Learning Datafeed, +     * <p>, +     *     For additional info, +     *     see <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-datafeed.html">, +     *         ML Delete Datafeed documentation</a>, +     * </p>, +     * @param request The request to delete the datafeed, +     * @param options  Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return action acknowledgement, +     * @throws IOException when there is a serialization issue sending the request or receiving the response, +     */, +    public AcknowledgedResponse deleteDatafeed(DeleteDatafeedRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request,, +                MLRequestConverters::deleteDatafeed,, +                options,, +                AcknowledgedResponse::fromXContent,, +                Collections.emptySet());, +    }, +, +    /**, +     * Deletes the given Machine Learning Datafeed asynchronously and notifies the listener on completion, +     * <p>, +     *     For additional info, +     *     see <a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-datafeed.html">, +     *         ML Delete Datafeed documentation</a>, +     * </p>, +     * @param request The request to delete the datafeed, +     * @param options  Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener Listener to be notified upon request completion, +     */, +    public void deleteDatafeedAsync(DeleteDatafeedRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request,, +                MLRequestConverters::deleteDatafeed,, +                options,, +                AcknowledgedResponse::fromXContent,, +                listener,, +                Collections.emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.DeleteDatafeedRequest;, +    static Request deleteDatafeed(DeleteDatafeedRequest deleteDatafeedRequest) {, +        String endpoint = new EndpointBuilder(), +                .addPathPartAsIs("_xpack"), +                .addPathPartAsIs("ml"), +                .addPathPartAsIs("datafeeds"), +                .addPathPart(deleteDatafeedRequest.getDatafeedId()), +                .build();, +        Request request = new Request(HttpDelete.METHOD_NAME, endpoint);, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        params.putParam("force", Boolean.toString(deleteDatafeedRequest.isForce()));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.DeleteDatafeedRequest;, +    public AcknowledgedResponse deleteJob(DeleteJobRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent,, +    public void deleteJobAsync(DeleteJobRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent,, +     * Deletes the given Machine Learning Datafeed, +     * <p>, +     *     For additional info]