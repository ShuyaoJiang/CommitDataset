[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/InternalStartDatafeedAction.java, +            if (holder == null) {, +                throw new IllegalStateException("task cancel ran before datafeed runner assigned the holder");, +            holder.stop("cancel", null);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/InternalStartDatafeedAction.java, +            if (holder == null) {, +                throw new IllegalStateException("task cancel ran before datafeed runner assigned the holder");, +            holder.stop("cancel", null);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobRunner.java, +import org.elasticsearch.xpack.ml.action.util.QueryPage;, +import org.elasticsearch.xpack.ml.datafeed.extractor.DataExtractorFactory;, +import org.elasticsearch.xpack.ml.datafeed.extractor.scroll.ScrollDataExtractorFactory;, +import org.elasticsearch.xpack.ml.job.config.DefaultFrequency;, +import org.elasticsearch.xpack.ml.job.process.autodetect.state.DataCounts;, +import org.elasticsearch.xpack.ml.notifications.Auditor;, +                holder.stop("unable_to_set_datafeed_status", error);, +                    holder.stop("general_lookback_failure", e);, +                    holder.stop("no_realtime", null);, +                        holder.stop("empty_data", e);, +                    holder.stop("general_realtime_error", e);, +        public void stop(String source, Exception e) {, +            logger.info("[{}] attempt to stop datafeed [{}] for job [{}]", source, datafeed.getId(), datafeed.getJobId());, +                logger.info("[{}] datafeed [{}] for job [{}] has been stopped", source, datafeed.getId(), datafeed.getJobId());, +                logger.info("[{}] datafeed [{}] for job [{}] was already stopped", source, datafeed.getId(), datafeed.getJobId());]