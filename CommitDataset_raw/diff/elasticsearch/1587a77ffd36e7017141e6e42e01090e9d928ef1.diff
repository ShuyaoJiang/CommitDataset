[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]network[/\\]NetworkModule.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]network[/\\]NetworkModule.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.index.engine.OperationFailedEngineException;, +        // 28 was DeleteFailedEngineException, +        OPERATION_FAILED_ENGINE_EXCEPTION(OperationFailedEngineException.class,, +                OperationFailedEngineException::new, 80),, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]network[/\\]NetworkModule.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.index.engine.OperationFailedEngineException;, +        // 28 was DeleteFailedEngineException, +        OPERATION_FAILED_ENGINE_EXCEPTION(OperationFailedEngineException.class,, +                OperationFailedEngineException::new, 80),, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +     * Construct a {@code NodeExplanation} object for the given shard given all the metadata. This also attempts to construct the human, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]network[/\\]NetworkModule.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.index.engine.OperationFailedEngineException;, +        // 28 was DeleteFailedEngineException, +        OPERATION_FAILED_ENGINE_EXCEPTION(OperationFailedEngineException.class,, +                OperationFailedEngineException::new, 80),, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +     * Construct a {@code NodeExplanation} object for the given shard given all the metadata. This also attempts to construct the human, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +        return new PrimaryResult(shardRequest, new ReplicationResponse(), null);, +        return new ReplicaResult(null);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]network[/\\]NetworkModule.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.index.engine.OperationFailedEngineException;, +        // 28 was DeleteFailedEngineException, +        OPERATION_FAILED_ENGINE_EXCEPTION(OperationFailedEngineException.class,, +                OperationFailedEngineException::new, 80),, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +     * Construct a {@code NodeExplanation} object for the given shard given all the metadata. This also attempts to construct the human, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +        return new PrimaryResult(shardRequest, new ReplicationResponse(), null);, +        return new ReplicaResult(null);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +        return new PrimaryResult(shardRequest, new ReplicationResponse(), null);, +        return new ReplicaResult(null);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]network[/\\]NetworkModule.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.index.engine.OperationFailedEngineException;, +        // 28 was DeleteFailedEngineException, +        OPERATION_FAILED_ENGINE_EXCEPTION(OperationFailedEngineException.class,, +                OperationFailedEngineException::new, 80),, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +     * Construct a {@code NodeExplanation} object for the given shard given all the metadata. This also attempts to construct the human, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +        return new PrimaryResult(shardRequest, new ReplicationResponse(), null);, +        return new ReplicaResult(null);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +        return new PrimaryResult(shardRequest, new ReplicationResponse(), null);, +        return new ReplicaResult(null);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import static org.elasticsearch.action.delete.TransportDeleteAction.*;, +import static org.elasticsearch.action.index.TransportIndexAction.executeIndexRequestOnPrimary;, +import static org.elasticsearch.action.index.TransportIndexAction.executeIndexRequestOnReplica;, +public class TransportShardBulkAction extends TransportWriteAction<BulkShardRequest, BulkShardRequest, BulkShardResponse> {, +                indexNameExpressionResolver, BulkShardRequest::new, BulkShardRequest::new, ThreadPool.Names.BULK);, +    protected WritePrimaryResult shardOperationOnPrimary(BulkShardRequest request, IndexShard primary) throws Exception {, +        return new WritePrimaryResult(request, response, location, null, primary);, +    private Translog.Location executeBulkItemRequest(IndexMetaData metaData, IndexShard primary,, +                                                     Translog.Location location, int requestIndex) throws Exception {, +        final DocWriteRequest itemRequest = request.items()[requestIndex].request();, +        preVersions[requestIndex] = itemRequest.version();, +        preVersionTypes[requestIndex] = itemRequest.versionType();, +        DocWriteRequest.OpType opType = itemRequest.opType();, +            // execute item request, +            final Engine.Result operationResult;, +            final DocWriteResponse response;, +            switch (itemRequest.opType()) {, +                case CREATE:, +                case INDEX:, +                    final IndexRequest indexRequest = (IndexRequest) itemRequest;, +                    operationResult = executeIndexRequestOnPrimary(indexRequest, primary, mappingUpdatedAction);, +                    response = operationResult.hasFailure() ? null, +                            : new IndexResponse(primary.shardId(), indexRequest.type(), indexRequest.id(),, +                                operationResult.getVersion(), ((Engine.IndexResult) operationResult).isCreated());, +                    break;, +                case UPDATE:, +                    UpdateResultHolder updateResultHolder = executeUpdateRequest(((UpdateRequest) itemRequest),, +                            primary, metaData, request, requestIndex);, +                    operationResult = updateResultHolder.operationResult;, +                    response = updateResultHolder.response;, +                    break;, +                case DELETE:, +                    final DeleteRequest deleteRequest = (DeleteRequest) itemRequest;, +                    operationResult = executeDeleteRequestOnPrimary(deleteRequest, primary);, +                    response = operationResult.hasFailure() ? null :, +                            new DeleteResponse(request.shardId(), deleteRequest.type(), deleteRequest.id(),, +                                operationResult.getVersion(), ((Engine.DeleteResult) operationResult).isFound());, +                    break;, +                default: throw new IllegalStateException("unexpected opType [" + itemRequest.opType() + "] found");]