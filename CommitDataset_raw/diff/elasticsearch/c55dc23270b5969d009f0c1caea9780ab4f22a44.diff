[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsTests.java, +import org.elasticsearch.common.xcontent.XContent;, +import org.elasticsearch.search.aggregations.Aggregation.CommonFields;, +import java.util.function.Predicate;, +import static org.elasticsearch.test.XContentTestUtils.insertRandomFields;, +        parseAndAssert(false);, +    }, +, +    public void testFromXContentWithRandomFields() throws IOException {, +        parseAndAssert(true);, +    }, +, +    /**, +     * Test that parsing works for a randomly created Aggregations object with a, +     * randomized aggregation tree. The test randomly chooses an, +     * {@link XContentType}, randomizes the order of the {@link XContent} fields, +     * and randomly sets the `humanReadable` flag when rendering the, +     * {@link XContent}., +     *, +     * @param addRandomFields, +     *            if set, this will also add random {@link XContent} fields to, +     *            tests that the parsers are lenient to future additions to rest, +     *            responses, +     */, +    private void parseAndAssert(boolean addRandomFields) throws IOException {, +        BytesReference mutated;, +        if (addRandomFields) {, +            /*, +             * - don't insert into the root object because it should only contain the named aggregations to test, +             *, +             * - don't insert into the "meta" object, because we pass on everything we find there, +             *, +             * - we don't want to directly insert anything random into "buckets"  objects, they are used with, +             * "keyed" aggregations and contain named bucket objects. Any new named object on this level should, +             * also be a bucket and be parsed as such., +             *, +             * - we cannot insert randomly into VALUE or VALUES objects e.g. in Percentiles, the keys need to be numeric there, +             *, +             * - we cannot insert into ExtendedMatrixStats "covariance" or "correlation" fields, their syntax is strict, +             */, +            Predicate<String> excludes = path -> (path.isEmpty() || path.endsWith("aggregations"), +                    || path.endsWith(Aggregation.CommonFields.META.getPreferredName()), +                    || path.endsWith(Aggregation.CommonFields.BUCKETS.getPreferredName()), +                    || path.endsWith(CommonFields.VALUES.getPreferredName()) || path.endsWith("covariance") || path.endsWith("correlation"), +                    || path.contains(CommonFields.VALUE.getPreferredName()));, +            mutated = insertRandomFields(xContentType, originalBytes, excludes, random());, +        } else {, +            mutated = originalBytes;, +        }, +        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {]