[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.delete.DeleteRequest;, +    static Request info() {, +        return new Request(HttpGet.METHOD_NAME, "/", Collections.emptyMap(), null);, +    }, +, +        return new Request(HttpHead.METHOD_NAME, "/", Collections.emptyMap(), null);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.delete.DeleteRequest;, +    static Request info() {, +        return new Request(HttpGet.METHOD_NAME, "/", Collections.emptyMap(), null);, +    }, +, +        return new Request(HttpHead.METHOD_NAME, "/", Collections.emptyMap(), null);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.main.MainResponse;, +     * Get the cluster info otherwise provided when sending an HTTP request to port 9200, +     */, +    public MainResponse info(Header... headers) throws IOException {, +        return performRequestAndParseEntity(new MainRequest(), (request) -> Request.info(), MainResponse::fromXContent, emptySet(),, +                headers);, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.delete.DeleteRequest;, +    static Request info() {, +        return new Request(HttpGet.METHOD_NAME, "/", Collections.emptyMap(), null);, +    }, +, +        return new Request(HttpHead.METHOD_NAME, "/", Collections.emptyMap(), null);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.main.MainResponse;, +     * Get the cluster info otherwise provided when sending an HTTP request to port 9200, +     */, +    public MainResponse info(Header... headers) throws IOException {, +        return performRequestAndParseEntity(new MainRequest(), (request) -> Request.info(), MainResponse::fromXContent, emptySet(),, +                headers);, +    }, +, +    /**, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ESRestHighLevelClientTestCase.java, +    public static void cleanupClient() {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.delete.DeleteRequest;, +    static Request info() {, +        return new Request(HttpGet.METHOD_NAME, "/", Collections.emptyMap(), null);, +    }, +, +        return new Request(HttpHead.METHOD_NAME, "/", Collections.emptyMap(), null);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.main.MainResponse;, +     * Get the cluster info otherwise provided when sending an HTTP request to port 9200, +     */, +    public MainResponse info(Header... headers) throws IOException {, +        return performRequestAndParseEntity(new MainRequest(), (request) -> Request.info(), MainResponse::fromXContent, emptySet(),, +                headers);, +    }, +, +    /**, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ESRestHighLevelClientTestCase.java, +    public static void cleanupClient() {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/PingAndInfoIT.java, +import org.elasticsearch.action.main.MainResponse;, +, +import java.util.Map;, +    @SuppressWarnings("unchecked"), +    public void testInfo() throws IOException {, +        MainResponse info = highLevelClient().info();, +        // compare with what the low level client outputs, +        Map<String, Object> infoAsMap = entityAsMap(adminClient().performRequest("GET", "/"));, +        assertEquals(infoAsMap.get("cluster_name"), info.getClusterName().value());, +        assertEquals(infoAsMap.get("cluster_uuid"), info.getClusterUuid());, +, +        // only check node name existence, might be a different one from what was hit by low level client in multi-node cluster, +        assertNotNull(info.getNodeName());, +        Map<String, Object> versionMap = (Map<String, Object>) infoAsMap.get("version");, +        assertEquals(versionMap.get("build_hash"), info.getBuild().shortHash());, +        assertEquals(versionMap.get("build_date"), info.getBuild().date());, +        assertEquals(versionMap.get("build_snapshot"), info.getBuild().isSnapshot());, +        assertEquals(versionMap.get("number"), info.getVersion().toString());, +        assertEquals(versionMap.get("lucene_version"), info.getVersion().luceneVersion.toString());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.delete.DeleteRequest;, +    static Request info() {, +        return new Request(HttpGet.METHOD_NAME, "/", Collections.emptyMap(), null);, +    }, +, +        return new Request(HttpHead.METHOD_NAME, "/", Collections.emptyMap(), null);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.main.MainResponse;, +     * Get the cluster info otherwise provided when sending an HTTP request to port 9200, +     */, +    public MainResponse info(Header... headers) throws IOException {, +        return performRequestAndParseEntity(new MainRequest(), (request) -> Request.info(), MainResponse::fromXContent, emptySet(),, +                headers);, +    }, +]