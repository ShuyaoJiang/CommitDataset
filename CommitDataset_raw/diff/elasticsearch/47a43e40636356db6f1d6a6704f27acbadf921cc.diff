[+++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +                    } else if ("min".equals(sScoreMode)) {, +                        scoreMode = ScoreMode.Min;, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +                    } else if ("min".equals(sScoreMode)) {, +                        scoreMode = ScoreMode.Min;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +            startTime = TimeValue.nsecToMSec(System.nanoTime());, +            if (startTime == 0) {, +            return Math.max(0, TimeValue.nsecToMSec(System.nanoTime()) - startTime);, +            stopTime = Math.max(TimeValue.nsecToMSec(System.nanoTime()), startTime);, +            time = stopTime - startTime;, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +                    } else if ("min".equals(sScoreMode)) {, +                        scoreMode = ScoreMode.Min;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +            startTime = TimeValue.nsecToMSec(System.nanoTime());, +            if (startTime == 0) {, +            return Math.max(0, TimeValue.nsecToMSec(System.nanoTime()) - startTime);, +            stopTime = Math.max(TimeValue.nsecToMSec(System.nanoTime()), startTime);, +            time = stopTime - startTime;, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTest.java, +            assertThat(timer.time(), equalTo(timer.stopTime() - timer.startTime()));, +            assertThat(index.time(), equalTo(index.stopTime() - index.startTime()));, +            assertThat(index.time(), equalTo(index.stopTime() - index.startTime()));, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +                    } else if ("min".equals(sScoreMode)) {, +                        scoreMode = ScoreMode.Min;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +            startTime = TimeValue.nsecToMSec(System.nanoTime());, +            if (startTime == 0) {, +            return Math.max(0, TimeValue.nsecToMSec(System.nanoTime()) - startTime);, +            stopTime = Math.max(TimeValue.nsecToMSec(System.nanoTime()), startTime);, +            time = stopTime - startTime;, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTest.java, +            assertThat(timer.time(), equalTo(timer.stopTime() - timer.startTime()));, +            assertThat(index.time(), equalTo(index.stopTime() - index.startTime()));, +            assertThat(index.time(), equalTo(index.stopTime() - index.startTime()));, +++ b/docs/reference/query-dsl/nested-query.asciidoc, +scoring of parent. It defaults to `avg`, but can be `sum`, `min`,, +`max` and `none`., +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +                    } else if ("min".equals(sScoreMode)) {, +                        scoreMode = ScoreMode.Min;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +            startTime = TimeValue.nsecToMSec(System.nanoTime());, +            if (startTime == 0) {, +            return Math.max(0, TimeValue.nsecToMSec(System.nanoTime()) - startTime);, +            stopTime = Math.max(TimeValue.nsecToMSec(System.nanoTime()), startTime);, +            time = stopTime - startTime;, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTest.java, +            assertThat(timer.time(), equalTo(timer.stopTime() - timer.startTime()));, +            assertThat(index.time(), equalTo(index.stopTime() - index.startTime()));, +            assertThat(index.time(), equalTo(index.stopTime() - index.startTime()));, +++ b/docs/reference/query-dsl/nested-query.asciidoc, +scoring of parent. It defaults to `avg`, but can be `sum`, `min`,, +`max` and `none`., +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.recovery/10_basic.yaml]