[+++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +    private final PluginSiteFilter pluginSiteFilter = new PluginSiteFilter();, +, +            RestFilterChain filterChain = restController.filterChain(pluginSiteFilter);, +            filterChain.continueProcessing(request, channel);, +        restController.dispatchRequest(request, channel);, +, +, +    class PluginSiteFilter extends RestFilter {, +, +        @Override, +        public void process(RestRequest request, RestChannel channel, RestFilterChain filterChain) {, +            handlePluginSite((HttpRequest) request, (HttpChannel) channel);, +        }, +    }, +, +    void handlePluginSite(HttpRequest request, HttpChannel channel) {, +        if (disableSites) {, +            channel.sendResponse(new StringRestResponse(FORBIDDEN));, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +    private final PluginSiteFilter pluginSiteFilter = new PluginSiteFilter();, +, +            RestFilterChain filterChain = restController.filterChain(pluginSiteFilter);, +            filterChain.continueProcessing(request, channel);, +        restController.dispatchRequest(request, channel);, +, +, +    class PluginSiteFilter extends RestFilter {, +, +        @Override, +        public void process(RestRequest request, RestChannel channel, RestFilterChain filterChain) {, +            handlePluginSite((HttpRequest) request, (HttpChannel) channel);, +        }, +    }, +, +    void handlePluginSite(HttpRequest request, HttpChannel channel) {, +        if (disableSites) {, +            channel.sendResponse(new StringRestResponse(FORBIDDEN));, +++ b/src/main/java/org/elasticsearch/rest/RestController.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.common.Nullable;, +import static org.elasticsearch.rest.RestStatus.BAD_REQUEST;, +import static org.elasticsearch.rest.RestStatus.OK;, +, +    private final RestHandlerFilter handlerFilter = new RestHandlerFilter();, +, +    private RestFilter[] filters = new RestFilter[0];, +        for (RestFilter filter : filters) {, +            filter.close();, +        }, +    public synchronized void registerFilter(RestFilter preProcessor) {, +        RestFilter[] copy = new RestFilter[filters.length + 1];, +        System.arraycopy(filters, 0, copy, 0, filters.length);, +        copy[filters.length] = preProcessor;, +        Arrays.sort(copy, new Comparator<RestFilter>() {, +            public int compare(RestFilter o1, RestFilter o2) {, +        filters = copy;, +    /**, +     * Returns a filter chain (if needed) to execute. If this method returns null, simply execute, +     * as usual., +     */, +    @Nullable, +    public RestFilterChain filterChainOrNull(RestFilter executionFilter) {, +        if (filters.length == 0) {, +            return null;, +        }, +        return new ControllerFilterChain(executionFilter);, +    /**, +     * Returns a filter chain with the final filter being the provided filter., +     */, +    public RestFilterChain filterChain(RestFilter executionFilter) {, +        return new ControllerFilterChain(executionFilter);, +    }, +, +    public void dispatchRequest(final RestRequest request, final RestChannel channel) {, +        if (filters.length == 0) {, +                executeHandler(request, channel);, +        } else {, +            ControllerFilterChain filterChain = new ControllerFilterChain(handlerFilter);, +            filterChain.continueProcessing(request, channel);, +        }, +    }, +, +    void executeHandler(RestRequest request, RestChannel channel) {, +        final RestHandler handler = getHandler(request);, +        if (handler != null) {, +            handler.handleRequest(request, channel);, +        } else {, +            if (request.method() == RestRequest.Method.OPTIONS) {, +                // when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gets automatically added), +                StringRestResponse response = new StringRestResponse(OK);, +                channel.sendResponse(response);, +            } else {, +                channel.sendResponse(new StringRestResponse(BAD_REQUEST, "No handler found for uri [" + request.uri() + "] and method [" + request.method() + "]"));, +            }, +        }, +, +    class ControllerFilterChain implements RestFilterChain {, +, +        private final RestFilter executionFilter;]