[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        parameters.withIfSeqNo(deleteRequest.ifSeqNo());, +        parameters.withIfPrimaryTerm(deleteRequest.ifPrimaryTerm());, +                    if (action.ifSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO) {, +                        metadata.field("if_seq_no", action.ifSeqNo());, +                        metadata.field("if_primary_term", action.ifPrimaryTerm());, +                    }, +, +        parameters.withIfSeqNo(indexRequest.ifSeqNo());, +        parameters.withIfPrimaryTerm(indexRequest.ifPrimaryTerm());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        parameters.withIfSeqNo(deleteRequest.ifSeqNo());, +        parameters.withIfPrimaryTerm(deleteRequest.ifPrimaryTerm());, +                    if (action.ifSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO) {, +                        metadata.field("if_seq_no", action.ifSeqNo());, +                        metadata.field("if_primary_term", action.ifPrimaryTerm());, +                    }, +, +        parameters.withIfSeqNo(indexRequest.ifSeqNo());, +        parameters.withIfPrimaryTerm(indexRequest.ifPrimaryTerm());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +            IndexResponse indexResponse = highLevelClient().index(, +            assertThat(indexResponse.getSeqNo(), greaterThanOrEqualTo(0L));, +                deleteRequest.setIfSeqNo(indexResponse.getSeqNo());, +                deleteRequest.setIfPrimaryTerm(indexResponse.getPrimaryTerm());, +            DeleteRequest deleteRequest = new DeleteRequest("index", docId).setIfSeqNo(2).setIfPrimaryTerm(2);, +                "version conflict, required seqNo [2], primary term [2]. current document has seqNo [3] and primary term [1]]",, +                exception.getMessage());, +                wrongRequest.setIfSeqNo(1L).setIfPrimaryTerm(5L);, +                         "version conflict, required seqNo [1], primary term [5]. current document has seqNo [2] and primary term [1]]",, +                exception.getMessage());, +                        indexRequest.setIfSeqNo(12L);, +                        indexRequest.setIfPrimaryTerm(12L);, +                            indexRequest.setIfSeqNo(12L);, +                            indexRequest.setIfPrimaryTerm(12L);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        parameters.withIfSeqNo(deleteRequest.ifSeqNo());, +        parameters.withIfPrimaryTerm(deleteRequest.ifPrimaryTerm());, +                    if (action.ifSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO) {, +                        metadata.field("if_seq_no", action.ifSeqNo());, +                        metadata.field("if_primary_term", action.ifPrimaryTerm());, +                    }, +, +        parameters.withIfSeqNo(indexRequest.ifSeqNo());, +        parameters.withIfPrimaryTerm(indexRequest.ifPrimaryTerm());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +            IndexResponse indexResponse = highLevelClient().index(, +            assertThat(indexResponse.getSeqNo(), greaterThanOrEqualTo(0L));, +                deleteRequest.setIfSeqNo(indexResponse.getSeqNo());, +                deleteRequest.setIfPrimaryTerm(indexResponse.getPrimaryTerm());, +            DeleteRequest deleteRequest = new DeleteRequest("index", docId).setIfSeqNo(2).setIfPrimaryTerm(2);, +                "version conflict, required seqNo [2], primary term [2]. current document has seqNo [3] and primary term [1]]",, +                exception.getMessage());, +                wrongRequest.setIfSeqNo(1L).setIfPrimaryTerm(5L);, +                         "version conflict, required seqNo [1], primary term [5]. current document has seqNo [2] and primary term [1]]",, +                exception.getMessage());, +                        indexRequest.setIfSeqNo(12L);, +                        indexRequest.setIfPrimaryTerm(12L);, +                            indexRequest.setIfSeqNo(12L);, +                            indexRequest.setIfPrimaryTerm(12L);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +        setRandomIfSeqNoAndTerm(deleteRequest, expectedParams);, +            setRandomIfSeqNoAndTerm(indexRequest, expectedParams);, +        setRandomIfSeqNoAndTerm(updateRequest, new HashMap<>()); // if* params are passed in the body, +        assertIfSeqNoAndTerm(updateRequest, parsedUpdateRequest);, +    private static void assertIfSeqNoAndTerm(DocWriteRequest<?>request, DocWriteRequest<?> parsedRequest) {, +        assertEquals(request.ifSeqNo(), parsedRequest.ifSeqNo());, +        assertEquals(request.ifPrimaryTerm(), parsedRequest.ifPrimaryTerm());, +    }, +, +    private static void setRandomIfSeqNoAndTerm(DocWriteRequest<?> request, Map<String, String> expectedParams) {, +        if (randomBoolean()) {, +            final long seqNo = randomNonNegativeLong();, +            request.setIfSeqNo(seqNo);, +            expectedParams.put("if_seq_no", Long.toString(seqNo));, +            final long primaryTerm = randomLongBetween(1, 200);, +            request.setIfPrimaryTerm(primaryTerm);, +            expectedParams.put("if_primary_term", Long.toString(primaryTerm));, +        }, +    }, +, +                if (randomBoolean()) {, +            } else if (randomBoolean()) {, +                docWriteRequest.setIfSeqNo(randomNonNegativeLong());, +                docWriteRequest.setIfPrimaryTerm(randomLongBetween(1, 200));, +            }, +            assertEquals(originalRequest.ifSeqNo(), parsedRequest.ifSeqNo());, +            assertEquals(originalRequest.ifPrimaryTerm(), parsedRequest.ifPrimaryTerm());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        parameters.withIfSeqNo(deleteRequest.ifSeqNo());, +        parameters.withIfPrimaryTerm(deleteRequest.ifPrimaryTerm());, +                    if (action.ifSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO) {, +                        metadata.field("if_seq_no", action.ifSeqNo());, +                        metadata.field("if_primary_term", action.ifPrimaryTerm());, +                    }, +, +        parameters.withIfSeqNo(indexRequest.ifSeqNo());, +        parameters.withIfPrimaryTerm(indexRequest.ifPrimaryTerm());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +            IndexResponse indexResponse = highLevelClient().index(]