[+++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +        if (getBoost() != 1f) {, +            return super.rewrite(reader);, +        }, +        final SimWeight stats = similarity.computeWeight(collectionStats, termStats);, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +        if (getBoost() != 1f) {, +            return super.rewrite(reader);, +        }, +        final SimWeight stats = similarity.computeWeight(collectionStats, termStats);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +        if (getBoost() != 1.0F) {, +            return super.rewrite(reader);, +        }, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +        if (getBoost() != 1f) {, +            return super.rewrite(reader);, +        }, +        final SimWeight stats = similarity.computeWeight(collectionStats, termStats);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +        if (getBoost() != 1.0F) {, +            return super.rewrite(reader);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/CombineFunction.java, +        public float combine(double queryScore, double funcScore, double maxBoost) {, +            return toFloat(queryScore * Math.min(funcScore, maxBoost));, +        public Explanation explain(Explanation queryExpl, Explanation funcExpl, float maxBoost) {, +            return Explanation.match(queryExpl.getValue() * minExpl.getValue(),, +                    "function score, product of:", queryExpl, minExpl);, +        public float combine(double queryScore, double funcScore, double maxBoost) {, +            return toFloat(Math.min(funcScore, maxBoost));]