[+++ b/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +import org.elasticsearch.core.internal.io.IOUtils;, +        Translog.Snapshot snapshot = null;, +            final ShardId shardId = indexShard.shardId();, +            snapshot = indexShard.newTranslogSnapshotFromMinSeqNo(startingSeqNo);, +            final Translog.Snapshot originalSnapshot = snapshot;, +            final Translog.Snapshot wrappedSnapshot = new Translog.Snapshot() {, +                    originalSnapshot.close();, +                    return originalSnapshot.totalOperations();, +                    return originalSnapshot.next();, +            final ActionListener<ResyncTask> resyncListener = new ActionListener<ResyncTask>() {, +                @Override, +                public void onResponse(final ResyncTask resyncTask) {, +                    try {, +                        wrappedSnapshot.close();, +                        listener.onResponse(resyncTask);, +                    } catch (final Exception e) {, +                        onFailure(e);, +                    }, +                }, +, +                @Override, +                public void onFailure(final Exception e) {, +                    try {, +                        wrappedSnapshot.close();, +                    } catch (final Exception inner) {, +                        e.addSuppressed(inner);, +                    } finally {, +                        listener.onFailure(e);, +                    }, +                }, +            };, +, +            try {, +                IOUtils.close(snapshot);, +            } catch (IOException inner) {, +                e.addSuppressed(inner);, +            } finally {, +++ b/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +import org.elasticsearch.core.internal.io.IOUtils;, +        Translog.Snapshot snapshot = null;, +            final ShardId shardId = indexShard.shardId();, +            snapshot = indexShard.newTranslogSnapshotFromMinSeqNo(startingSeqNo);, +            final Translog.Snapshot originalSnapshot = snapshot;, +            final Translog.Snapshot wrappedSnapshot = new Translog.Snapshot() {, +                    originalSnapshot.close();, +                    return originalSnapshot.totalOperations();, +                    return originalSnapshot.next();, +            final ActionListener<ResyncTask> resyncListener = new ActionListener<ResyncTask>() {, +                @Override, +                public void onResponse(final ResyncTask resyncTask) {, +                    try {, +                        wrappedSnapshot.close();, +                        listener.onResponse(resyncTask);, +                    } catch (final Exception e) {, +                        onFailure(e);, +                    }, +                }, +, +                @Override, +                public void onFailure(final Exception e) {, +                    try {, +                        wrappedSnapshot.close();, +                    } catch (final Exception inner) {, +                        e.addSuppressed(inner);, +                    } finally {, +                        listener.onFailure(e);, +                    }, +                }, +            };, +, +            try {, +                IOUtils.close(snapshot);, +            } catch (IOException inner) {, +                e.addSuppressed(inner);, +            } finally {, +++ b/server/src/test/java/org/elasticsearch/index/shard/PrimaryReplicaSyncerTests.java, +        CountDownLatch syncCalledLatch = new CountDownLatch(1);, +        PlainActionFuture<PrimaryReplicaSyncer.ResyncTask> fut = new PlainActionFuture<PrimaryReplicaSyncer.ResyncTask>() {, +            @Override, +            public void onFailure(Exception e) {, +                    super.onFailure(e);, +                } finally {, +                    syncCalledLatch.countDown();, +            }, +            @Override, +            public void onResponse(PrimaryReplicaSyncer.ResyncTask result) {, +                try {, +                    super.onResponse(result);, +                } finally {, +                    syncCalledLatch.countDown();, +                }, +            }, +        };, +        threadPool.generic().execute(() -> {, +            syncer.resync(shard, fut);, +++ b/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +import org.elasticsearch.core.internal.io.IOUtils;, +        Translog.Snapshot snapshot = null;, +            final ShardId shardId = indexShard.shardId();]