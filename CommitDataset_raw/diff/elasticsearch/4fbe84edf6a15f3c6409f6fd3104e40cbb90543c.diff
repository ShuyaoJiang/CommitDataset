[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessCast.java, +import java.util.Objects;, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +        Objects.requireNonNull(unboxOriginalType);, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +        Objects.requireNonNull(unboxTargetType);, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +        Objects.requireNonNull(boxOriginalType);, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +        Objects.requireNonNull(boxTargetType);, +, +, +    @Override, +    public boolean equals(Object object) {, +        if (this == object) {, +            return true;, +        }, +, +        if (object == null || getClass() != object.getClass()) {, +            return false;, +        }, +, +        PainlessCast that = (PainlessCast)object;, +, +        return explicitCast == that.explicitCast &&, +                Objects.equals(originalType, that.originalType) &&, +                Objects.equals(targetType, that.targetType) &&, +                Objects.equals(unboxOriginalType, that.unboxOriginalType) &&, +                Objects.equals(unboxTargetType, that.unboxTargetType) &&, +                Objects.equals(boxOriginalType, that.boxOriginalType) &&, +                Objects.equals(boxTargetType, that.boxTargetType);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(originalType, targetType, explicitCast, unboxOriginalType, unboxTargetType, boxOriginalType, boxTargetType);, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessCast.java, +import java.util.Objects;, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +        Objects.requireNonNull(unboxOriginalType);, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +        Objects.requireNonNull(unboxTargetType);, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +        Objects.requireNonNull(boxOriginalType);, +, +        Objects.requireNonNull(originalType);, +        Objects.requireNonNull(targetType);, +        Objects.requireNonNull(boxTargetType);, +, +, +    @Override, +    public boolean equals(Object object) {, +        if (this == object) {, +            return true;, +        }, +, +        if (object == null || getClass() != object.getClass()) {, +            return false;, +        }, +, +        PainlessCast that = (PainlessCast)object;, +, +        return explicitCast == that.explicitCast &&, +                Objects.equals(originalType, that.originalType) &&, +                Objects.equals(targetType, that.targetType) &&, +                Objects.equals(unboxOriginalType, that.unboxOriginalType) &&, +                Objects.equals(unboxTargetType, that.unboxTargetType) &&, +                Objects.equals(boxOriginalType, that.boxOriginalType) &&, +                Objects.equals(boxTargetType, that.boxTargetType);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(originalType, targetType, explicitCast, unboxOriginalType, unboxTargetType, boxOriginalType, boxTargetType);, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessClass.java, +import java.util.Objects;, +, +    @Override]