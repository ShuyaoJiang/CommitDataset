[+++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +            XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, builder.bytes().streamInput());, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +            XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, builder.bytes().streamInput());, +++ b/server/src/main/java/org/elasticsearch/common/ParseField.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;, +import org.elasticsearch.common.xcontent.XContentParser;, +     * Does {@code fieldName} match this field? Uses {@link LoggingDeprecationHandler}, +     * to prevent us from having to touch every call to {@code match} in the change, +     * that introduced {@linkplain LoggingDeprecationHandler}. In a followup this will, +     * be removed., +     * @deprecated Use {@link #match(String, DeprecationHandler)} with, +     *      {@link XContentParser#getDeprecationHandler()} instead., +    @Deprecated, +        return match(fieldName, LoggingDeprecationHandler.INSTANCE);, +    }, +, +    /**, +     * Does {@code fieldName} match this field?, +     * @param fieldName, +     *            the field name to match against this {@link ParseField}, +     * @param deprecationHandler called if {@code fieldName} is deprecated, +     * @return true if <code>fieldName</code> matches any of the acceptable, +     *         names for this {@link ParseField}., +     */, +    public boolean match(String fieldName, DeprecationHandler deprecationHandler) {, +                if (allReplacedWith == null) {, +                    deprecationHandler.usedDeprecatedName(fieldName, name);, +                } else {, +                    deprecationHandler.usedDeprecatedField(fieldName, allReplacedWith);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +            XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, builder.bytes().streamInput());, +++ b/server/src/main/java/org/elasticsearch/common/ParseField.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;, +import org.elasticsearch.common.xcontent.XContentParser;, +     * Does {@code fieldName} match this field? Uses {@link LoggingDeprecationHandler}, +     * to prevent us from having to touch every call to {@code match} in the change, +     * that introduced {@linkplain LoggingDeprecationHandler}. In a followup this will, +     * be removed., +     * @deprecated Use {@link #match(String, DeprecationHandler)} with, +     *      {@link XContentParser#getDeprecationHandler()} instead., +    @Deprecated, +        return match(fieldName, LoggingDeprecationHandler.INSTANCE);, +    }, +, +    /**, +     * Does {@code fieldName} match this field?, +     * @param fieldName, +     *            the field name to match against this {@link ParseField}, +     * @param deprecationHandler called if {@code fieldName} is deprecated, +     * @return true if <code>fieldName</code> matches any of the acceptable, +     *         names for this {@link ParseField}., +     */, +    public boolean match(String fieldName, DeprecationHandler deprecationHandler) {, +                if (allReplacedWith == null) {, +                    deprecationHandler.usedDeprecatedName(fieldName, name);, +                } else {, +                    deprecationHandler.usedDeprecatedField(fieldName, allReplacedWith);, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +        // fromXContent doesn't use named xcontent or deprecation., +        try (XContentParser xContentParser = XContentType.JSON.xContent(), +                .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, parsableString)) {, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +            XContentParser parser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, builder.bytes().streamInput());, +++ b/server/src/main/java/org/elasticsearch/common/ParseField.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;, +import org.elasticsearch.common.xcontent.XContentParser;, +     * Does {@code fieldName} match this field? Uses {@link LoggingDeprecationHandler}, +     * to prevent us from having to touch every call to {@code match} in the change, +     * that introduced {@linkplain LoggingDeprecationHandler}. In a followup this will, +     * be removed., +     * @deprecated Use {@link #match(String, DeprecationHandler)} with, +     *      {@link XContentParser#getDeprecationHandler()} instead., +    @Deprecated, +        return match(fieldName, LoggingDeprecationHandler.INSTANCE);, +    }, +, +    /**, +     * Does {@code fieldName} match this field?, +     * @param fieldName, +     *            the field name to match against this {@link ParseField}, +     * @param deprecationHandler called if {@code fieldName} is deprecated, +     * @return true if <code>fieldName</code> matches any of the acceptable, +     *         names for this {@link ParseField}., +     */, +    public boolean match(String fieldName, DeprecationHandler deprecationHandler) {, +                if (allReplacedWith == null) {, +                    deprecationHandler.usedDeprecatedName(fieldName, name);]