[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +import org.elasticsearch.action.admin.indices.exists.TransportIndicesExistsAction;, +import org.elasticsearch.action.search.type.TransportSearchCache;, +import org.elasticsearch.action.search.type.TransportSearchDfsQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchDfsQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScanAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollScanAction;, +        bind(TransportIndicesExistsAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +import org.elasticsearch.action.admin.indices.exists.TransportIndicesExistsAction;, +import org.elasticsearch.action.search.type.TransportSearchCache;, +import org.elasticsearch.action.search.type.TransportSearchDfsQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchDfsQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScanAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollScanAction;, +        bind(TransportIndicesExistsAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActions.java, +            public static final String EXISTS = "indices/exists";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +import org.elasticsearch.action.admin.indices.exists.TransportIndicesExistsAction;, +import org.elasticsearch.action.search.type.TransportSearchCache;, +import org.elasticsearch.action.search.type.TransportSearchDfsQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchDfsQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScanAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollQueryAndFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollQueryThenFetchAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollScanAction;, +        bind(TransportIndicesExistsAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActions.java, +            public static final String EXISTS = "indices/exists";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/exists/IndicesExistsRequest.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.indices.exists;, +, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.master.MasterNodeOperationRequest;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +, +import static org.elasticsearch.action.Actions.*;, +, +public class IndicesExistsRequest extends MasterNodeOperationRequest {, +, +    private String[] indices;, +, +    public IndicesExistsRequest(String... indices) {, +        this.indices = indices;, +    }, +, +    public String[] indices() {, +        return indices;, +    }, +, +    public void indices(String[] indices) {, +        this.indices = indices;, +    }, +, +    @Override public ActionRequestValidationException validate() {, +        ActionRequestValidationException validationException = null;, +        if (indices == null || indices.length == 0) {, +            validationException = addValidationError("index/indices is missing", validationException);, +        }, +        return validationException;, +    }, +, +    @Override public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        indices = new String[in.readVInt()];, +        for (int i = 0; i < indices.length; i++) {, +            indices[i] = in.readUTF();]