[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +import org.elasticsearch.action.get.MultiGetItemResponse;, +import org.elasticsearch.action.get.MultiGetRequest;, +import org.elasticsearch.action.get.MultiGetResponse;, +import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;, +import static org.hamcrest.Matchers.arrayWithSize;, +import static org.hamcrest.Matchers.hasEntry;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.hasKey;, +import static org.hamcrest.Matchers.not;, +            request.fetchSourceContext(FetchSourceContext.DO_NOT_FETCH_SOURCE); // <1>, +, +    public void testMultiGet() throws Exception {, +        RestHighLevelClient client = highLevelClient();, +, +        {, +            String mappings = "{\n" +, +            "    \"mappings\" : {\n" +, +            "        \"type\" : {\n" +, +            "            \"properties\" : {\n" +, +            "                \"foo\" : {\n" +, +            "                    \"type\": \"text\",\n" +, +            "                    \"store\": true\n" +, +            "                }\n" +, +            "            }\n" +, +            "        }\n" +, +            "    }\n" +, +            "}";, +, +            NStringEntity entity = new NStringEntity(mappings, ContentType.APPLICATION_JSON);, +            Response response = client().performRequest("PUT", "/index", Collections.emptyMap(), entity);, +            assertEquals(200, response.getStatusLine().getStatusCode());, +        }, +, +        Map<String, Object> source = new HashMap<>();, +        source.put("foo", "val1");, +        source.put("bar", "val2");, +        source.put("baz", "val3");, +        client.index(new IndexRequest("index", "type", "example_id"), +            .source(source), +            .setRefreshPolicy(RefreshPolicy.IMMEDIATE));, +, +        {, +            // tag::multi-get-request, +            MultiGetRequest request = new MultiGetRequest();, +            request.add(new MultiGetRequest.Item(, +                "index",         // <1>, +                "type",          // <2>, +                "example_id"));  // <3>, +            request.add(new MultiGetRequest.Item("index", "type", "another_id"));  // <4>, +            // end::multi-get-request, +, +            // Add a missing index so we can test it., +            request.add(new MultiGetRequest.Item("missing_index", "type", "id"));, +, +            // tag::multi-get-request-item-extras, +            request.add(new MultiGetRequest.Item("index", "type", "with_routing"), +                .routing("some_routing"));          // <1>, +            request.add(new MultiGetRequest.Item("index", "type", "with_parent"), +                .parent("some_parent"));            // <2>, +            request.add(new MultiGetRequest.Item("index", "type", "with_version"), +                .versionType(VersionType.EXTERNAL)  // <3>, +                .version(10123L));                  // <4>, +            // end::multi-get-request-item-extras, +            // tag::multi-get-request-top-level-extras, +            request.preference("some_preference");  // <1>, +            request.realtime(false);                // <2>, +            request.refresh(true);                  // <3>, +            // end::multi-get-request-top-level-extras, +, +            // tag::multi-get-execute, +            MultiGetResponse response = client.multiGet(request);, +            // end::multi-get-execute, +, +            // tag::multi-get-response, +            MultiGetItemResponse firstItem = response.getResponses()[0];, +            assertNull(firstItem.getFailure());              // <1>, +            GetResponse firstGet = firstItem.getResponse();  // <2>, +            String index = firstItem.getIndex();, +            String type = firstItem.getType();, +            String id = firstItem.getId();, +            if (firstGet.isExists()) {, +                long version = firstGet.getVersion();, +                String sourceAsString = firstGet.getSourceAsString();        // <3>, +                Map<String, Object> sourceAsMap = firstGet.getSourceAsMap(); // <4>, +                byte[] sourceAsBytes = firstGet.getSourceAsBytes();          // <5>, +            } else {, +                // <6>, +            }, +            // end::multi-get-response, +, +            assertTrue(firstGet.isExists());, +            assertEquals(source, firstGet.getSource());, +, +            MultiGetItemResponse missingIndexItem = response.getResponses()[2];, +            // tag::multi-get-indexnotfound, +            assertNull(missingIndexItem.getResponse());                // <1>, +            Exception e = missingIndexItem.getFailure().getFailure();  // <2>, +            ElasticsearchException ee = (ElasticsearchException) e;    // <3>, +            // TODO status is broken! fix in a followup]