[+++ b/Vagrantfile, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +++ b/Vagrantfile, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +++ b/benchmarks/build.gradle, +++ b/Vagrantfile, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +++ b/benchmarks/build.gradle, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return createAllocationService(settings, new ClusterSettings(Settings.Builder.EMPTY_SETTINGS, ClusterSettings, +        List<AllocationDecider> list = new ArrayList<>();, +        // Keep a deterministic order of allocation deciders for the benchmark, +        for (Class<? extends AllocationDecider> deciderClass : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            try {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class, ClusterSettings, +                    .class);, +                list.add(constructor.newInstance(settings, clusterSettings));, +            } catch (NoSuchMethodException e) {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class);, +                list.add(constructor.newInstance(settings));, +            }, +        }, +        return new AllocationDeciders(settings, list.toArray(new AllocationDecider[0]));, +++ b/Vagrantfile, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +++ b/benchmarks/build.gradle, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return createAllocationService(settings, new ClusterSettings(Settings.Builder.EMPTY_SETTINGS, ClusterSettings, +        List<AllocationDecider> list = new ArrayList<>();, +        // Keep a deterministic order of allocation deciders for the benchmark, +        for (Class<? extends AllocationDecider> deciderClass : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            try {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class, ClusterSettings, +                    .class);, +                list.add(constructor.newInstance(settings, clusterSettings));, +            } catch (NoSuchMethodException e) {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class);, +                list.add(constructor.newInstance(settings));, +            }, +        }, +        return new AllocationDeciders(settings, list.toArray(new AllocationDecider[0]));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-proc:none' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/Vagrantfile, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +++ b/benchmarks/build.gradle, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return createAllocationService(settings, new ClusterSettings(Settings.Builder.EMPTY_SETTINGS, ClusterSettings, +        List<AllocationDecider> list = new ArrayList<>();, +        // Keep a deterministic order of allocation deciders for the benchmark, +        for (Class<? extends AllocationDecider> deciderClass : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            try {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class, ClusterSettings, +                    .class);, +                list.add(constructor.newInstance(settings, clusterSettings));, +            } catch (NoSuchMethodException e) {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class);, +                list.add(constructor.newInstance(settings));, +            }, +        }, +        return new AllocationDeciders(settings, list.toArray(new AllocationDecider[0]));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-proc:none' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"$test.start\":"), +++ b/Vagrantfile, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +++ b/benchmarks/build.gradle, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return createAllocationService(settings, new ClusterSettings(Settings.Builder.EMPTY_SETTINGS, ClusterSettings, +        List<AllocationDecider> list = new ArrayList<>();, +        // Keep a deterministic order of allocation deciders for the benchmark, +        for (Class<? extends AllocationDecider> deciderClass : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            try {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class, ClusterSettings, +                    .class);, +                list.add(constructor.newInstance(settings, clusterSettings));, +            } catch (NoSuchMethodException e) {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class);, +                list.add(constructor.newInstance(settings));, +            }, +        }, +        return new AllocationDeciders(settings, list.toArray(new AllocationDecider[0]));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-proc:none' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"$test.start\":"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/Vagrantfile, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +++ b/benchmarks/build.gradle]