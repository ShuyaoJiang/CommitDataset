[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +import java.util.Arrays;, +import java.util.Objects;, +import static org.elasticsearch.painless.lookup.PainlessLookupUtility.DEF_PAINLESS_CLASS_NAME;, +import static org.elasticsearch.painless.lookup.PainlessLookupUtility.anyTypeNameToPainlessTypeName;, +    private static class PainlessMethodCacheKey {, +        private final Class<?> javaClass;, +        private final String methodName;, +        private final List<Class<?>> painlessTypeParameters;, +        private PainlessMethodCacheKey(Class<?> javaClass, String methodName, List<Class<?>> painlessTypeParameters) {, +            this.javaClass = javaClass;, +            this.methodName = methodName;, +            this.painlessTypeParameters = Collections.unmodifiableList(painlessTypeParameters);, +        @Override, +        public boolean equals(Object object) {, +            if (this == object) {, +                return true;, +            if (object == null || getClass() != object.getClass()) {, +                return false;, +            PainlessMethodCacheKey that = (PainlessMethodCacheKey)object;, +, +            return Objects.equals(javaClass, that.javaClass)   &&, +                   Objects.equals(methodName, that.methodName) &&, +                   Objects.equals(painlessTypeParameters, that.painlessTypeParameters);, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(javaClass, methodName, painlessTypeParameters);, +        }, +    }, +, +    private static class PainlessFieldCacheKey {, +, +        private final Class<?> javaClass;, +        private final String fieldName;, +        private final Class<?> painlessType;, +, +        private PainlessFieldCacheKey(Class<?> javaClass, String fieldName, Class<?> painlessType) {, +            this.javaClass = javaClass;, +            this.fieldName = fieldName;, +            this.painlessType = painlessType;, +        }, +, +        @Override, +        public boolean equals(Object object) {, +            if (this == object) {, +                return true;, +            }, +, +            if (object == null || getClass() != object.getClass()) {, +                return false;, +            }, +, +            PainlessFieldCacheKey that = (PainlessFieldCacheKey) object;, +, +            return Objects.equals(javaClass, that.javaClass) &&, +                   Objects.equals(fieldName, that.fieldName) &&, +                   Objects.equals(painlessType, that.painlessType);, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(javaClass, fieldName, painlessType);, +        }, +    }, +, +    private static final Map<PainlessMethodCacheKey, PainlessMethod> painlessMethodCache = new HashMap<>();, +    private static final Map<PainlessFieldCacheKey,  PainlessField>  painlessFieldCache  = new HashMap<>();, +, +    private static final Pattern CLASS_NAME_PATTERN  = Pattern.compile("^[_a-zA-Z][._a-zA-Z0-9]*$");, +    private static final Pattern METHOD_NAME_PATTERN = Pattern.compile("^[_a-zA-Z][_a-zA-Z0-9]*$");, +    private static final Pattern FIELD_NAME_PATTERN  = Pattern.compile("^[_a-zA-Z][_a-zA-Z0-9]*$");, +, +    private static String anyTypesArrayToCanonicalString(Class<?>[] anyTypesArray, boolean toPainlessTypes) {, +        return anyTypesListToCanonicalString(Arrays.asList(anyTypesArray), toPainlessTypes);, +    }, +, +    private static String anyTypesListToCanonicalString(List<Class<?>> anyTypesList, boolean toPainlessTypes) {, +        StringBuilder anyTypesCanonicalStringBuilder = new StringBuilder("[");, +, +        int anyTypesSize = anyTypesList.size();, +        int anyTypesIndex = 0;, +, +        for (Class<?> anyType : anyTypesList) {, +            String anyTypeCanonicalName = anyType.getCanonicalName();, +, +            if (toPainlessTypes) {, +                anyTypeCanonicalName = anyTypeNameToPainlessTypeName(anyTypeCanonicalName);, +            }, +, +            anyTypesCanonicalStringBuilder.append(anyTypeCanonicalName);, +, +            if (++anyTypesIndex < anyTypesSize) {, +                anyTypesCanonicalStringBuilder.append(",");, +            }, +        }, +, +        anyTypesCanonicalStringBuilder.append("]");, +]