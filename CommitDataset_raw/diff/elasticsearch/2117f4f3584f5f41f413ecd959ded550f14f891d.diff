[+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DelayedDataDetectorIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.action.bulk.BulkItemResponse;, +import org.elasticsearch.action.bulk.BulkRequestBuilder;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.query.RangeQueryBuilder;, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +import org.elasticsearch.search.aggregations.AggregatorFactories;, +import org.elasticsearch.search.aggregations.metrics.AvgAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;, +import org.elasticsearch.xpack.core.ml.action.GetBucketsAction;, +import org.elasticsearch.xpack.core.ml.action.util.PageParams;, +import org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig;, +import org.elasticsearch.xpack.core.ml.job.config.AnalysisConfig;, +import org.elasticsearch.xpack.core.ml.job.config.DataDescription;, +import org.elasticsearch.xpack.core.ml.job.config.Detector;, +import org.elasticsearch.xpack.core.ml.job.config.Job;, +import org.elasticsearch.xpack.core.ml.job.results.Bucket;, +import org.elasticsearch.xpack.core.ml.job.results.Result;, +import org.elasticsearch.xpack.ml.datafeed.DelayedDataDetector;, +import org.elasticsearch.xpack.ml.datafeed.DelayedDataDetector.BucketWithMissingData;, +import org.junit.After;, +import org.junit.Before;, +, +import java.util.Collections;, +import java.util.Date;, +import java.util.List;, +, +import static org.elasticsearch.xpack.ml.support.BaseMlIntegTestCase.createDatafeed;, +import static org.elasticsearch.xpack.ml.support.BaseMlIntegTestCase.createDatafeedBuilder;, +import static org.hamcrest.Matchers.equalTo;, +, +public class DelayedDataDetectorIT extends MlNativeAutodetectIntegTestCase {, +, +    private String index = "delayed-data";, +    private long now = System.currentTimeMillis();, +    private long numDocs;, +, +    @Before, +    public void putDataintoIndex() {, +        client().admin().indices().prepareCreate(index), +            .addMapping("type", "time", "type=date", "value", "type=long"), +            .get();, +        numDocs = randomIntBetween(32, 128);, +        long oneDayAgo = now - 86400000;, +        writeData(logger, index, numDocs, oneDayAgo, now);, +    }, +, +    @After, +    public void cleanUpTest() {, +        cleanUp();, +    }, +, +    public void testMissingDataDetection() throws Exception {, +        final String jobId = "delayed-data-detection-job";, +        Job.Builder job = createJob(jobId, TimeValue.timeValueMinutes(5), "count", null);, +, +        DatafeedConfig datafeedConfig = createDatafeed(job.getId() + "-datafeed", job.getId(), Collections.singletonList(index));, +        registerJob(job);, +        putJob(job);, +        openJob(job.getId());, +, +        registerDatafeed(datafeedConfig);, +        putDatafeed(datafeedConfig);, +        startDatafeed(datafeedConfig.getId(), 0L, now);, +        waitUntilJobIsClosed(jobId);, +, +        // Get the latest finalized bucket, +        Bucket lastBucket = getLatestFinalizedBucket(jobId);, +, +        DelayedDataDetector delayedDataDetector =, +            new DelayedDataDetector(job.build(new Date()), datafeedConfig, TimeValue.timeValueHours(12), client());, +, +        List<BucketWithMissingData> response = delayedDataDetector.detectMissingData(lastBucket.getEpoch()*1000);, +        assertThat(response.stream().mapToLong(BucketWithMissingData::getMissingDocumentCount).sum(), equalTo(0L));, +, +        long missingDocs = randomIntBetween(32, 128);, +        // Simply adding data within the current delayed data detection, the choice of 43100000 is arbitrary and within the window, +        // for the DelayedDataDetector, +        writeData(logger, index, missingDocs, now - 43100000, lastBucket.getEpoch()*1000);, +, +        response = delayedDataDetector.detectMissingData(lastBucket.getEpoch()*1000);, +        assertThat(response.stream().mapToLong(BucketWithMissingData::getMissingDocumentCount).sum(), equalTo(missingDocs));, +    }, +, +    public void testMissingDataDetectionInSpecificBucket() throws Exception {, +        final String jobId = "delayed-data-detection-job-missing-test-specific-bucket";, +        Job.Builder job = createJob(jobId, TimeValue.timeValueMinutes(5), "count", null);, +, +        DatafeedConfig datafeedConfig = createDatafeed(job.getId() + "-datafeed", job.getId(), Collections.singletonList(index));]