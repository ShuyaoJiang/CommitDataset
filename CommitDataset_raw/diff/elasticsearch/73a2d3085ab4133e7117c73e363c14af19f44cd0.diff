[+++ b/TESTING.asciidoc, +The REST tests are run automatically when executing the maven test command. To run only the, +gradle integTest -Dtests.filter="@Rest", +++ b/TESTING.asciidoc, +The REST tests are run automatically when executing the maven test command. To run only the, +gradle integTest -Dtests.filter="@Rest", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        PrecommitTasks.configure(project), +++ b/TESTING.asciidoc, +The REST tests are run automatically when executing the maven test command. To run only the, +gradle integTest -Dtests.filter="@Rest", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        PrecommitTasks.configure(project), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +import org.gradle.api.DefaultTask, +import org.gradle.api.GradleException, +import org.gradle.api.InvalidUserDataException, +import org.gradle.api.Project, +import org.gradle.api.Task, +import org.gradle.api.tasks.StopActionException, +import org.gradle.api.tasks.VerificationTask, +class DependencyLicensesTask extends DefaultTask {, +    static final String SHA_EXTENSION = '.sha1', +    static Task configure(Project project, Closure closure) {, +        DependencyLicensesTask task = project.tasks.create(type: DependencyLicensesTask, name: 'dependencyLicenses'), +        UpdateShasTask update = project.tasks.create(type: UpdateShasTask, name: 'updateShas'), +        update.parentTask = task, +        task.configure(closure), +        project.check.dependsOn(task), +        return task, +    }, +, +    FileCollection dependencies, +    File licensesDir = new File(project.projectDir, 'licenses'), +    LinkedHashMap<String, String> mappings = new LinkedHashMap<>(), +    void mapping(Map<String, String> props) {, +        String from = props.get('from'), +        String to = props.get('to'), +    void checkDependencies() {, +        // TODO: empty license dir (or error when dir exists and no deps), +        if (licensesDir.exists() == false && dependencies.isEmpty() == false) {, +    void checkSha(File jar, String jarName, Set<File> shaFiles) {, +    void checkFile(String name, String jarName, Map<String, Integer> counters, String type) {, +    static class UpdateShasTask extends DefaultTask {, +        DependencyLicensesTask parentTask, +        void updateShas() {, +++ b/TESTING.asciidoc, +The REST tests are run automatically when executing the maven test command. To run only the, +gradle integTest -Dtests.filter="@Rest", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        PrecommitTasks.configure(project), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +import org.gradle.api.DefaultTask, +import org.gradle.api.GradleException, +import org.gradle.api.InvalidUserDataException, +import org.gradle.api.Project, +import org.gradle.api.Task, +import org.gradle.api.tasks.StopActionException, +import org.gradle.api.tasks.VerificationTask, +class DependencyLicensesTask extends DefaultTask {, +    static final String SHA_EXTENSION = '.sha1', +    static Task configure(Project project, Closure closure) {, +        DependencyLicensesTask task = project.tasks.create(type: DependencyLicensesTask, name: 'dependencyLicenses'), +        UpdateShasTask update = project.tasks.create(type: UpdateShasTask, name: 'updateShas'), +        update.parentTask = task, +        task.configure(closure), +        project.check.dependsOn(task), +        return task, +    }, +, +    FileCollection dependencies, +    File licensesDir = new File(project.projectDir, 'licenses'), +    LinkedHashMap<String, String> mappings = new LinkedHashMap<>(), +    void mapping(Map<String, String> props) {, +        String from = props.get('from'), +        String to = props.get('to'), +    void checkDependencies() {, +        // TODO: empty license dir (or error when dir exists and no deps), +        if (licensesDir.exists() == false && dependencies.isEmpty() == false) {, +    void checkSha(File jar, String jarName, Set<File> shaFiles) {, +    void checkFile(String name, String jarName, Map<String, Integer> counters, String type) {, +    static class UpdateShasTask extends DefaultTask {, +        DependencyLicensesTask parentTask, +        void updateShas() {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +import org.gradle.api.tasks.OutputFiles, +class ForbiddenPatternsTask extends DefaultTask {, +    Map<String,String> patterns = new LinkedHashMap<>(), +    PatternFilterable filesFilter = new PatternSet(), +    ForbiddenPatternsTask() {, +        // TODO: add compile and test compile outputs as this tasks outputs, so we don't rerun when source files haven't changed, +    void exclude(String... excludes) {, +    /** Adds pattern to forbid */, +        String name = props.get('name'), +            throw new IllegalArgumentException('Missing [name] for invalid pattern rule'), +        String pattern = props.get('pattern'), +            throw new IllegalArgumentException('Missing [pattern] for invalid pattern rule'), +            f.eachLine('UTF-8') { line, lineNumber ->, +                    addErrorMessages(failures, f, (String)line, (int)lineNumber), +            throw new IllegalArgumentException('Found invalid patterns:\n' + failures.join('\n'))]