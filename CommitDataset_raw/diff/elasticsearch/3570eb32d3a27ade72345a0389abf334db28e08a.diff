[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                .add(createLatestModelSizeStatsSearch(resultsIndex)), +                                long hitsCount = hits.getHits().length;, +                                if (hitsCount == 0) {, +                                } else if (hitsCount == 1) {, +                                } else if (hitsCount > 1) {, +                                    errorHandler.accept(new IllegalStateException("Expected hits count to be 0 or 1, but got [", +                                            + hitsCount + "]"));, +        LOGGER.trace("ES API CALL: search latest {} for job {}", ModelSizeStats.RESULT_TYPE_VALUE, jobId);, +        createLatestModelSizeStatsSearch(indexName).execute(ActionListener.wrap(, +                response -> {, +                    SearchHit[] hits = response.getHits().getHits();, +                    if (hits.length == 0) {, +                        LOGGER.trace("No {} for job with id {}", ModelSizeStats.RESULT_TYPE_VALUE, jobId);, +                        handler.accept(new ModelSizeStats.Builder(jobId).build());, +                    } else if (hits.length == 1) {, +                        handler.accept(parseSearchHit(hits[0], ModelSizeStats.PARSER, errorHandler).build());, +                    } else {, +                        errorHandler.accept(new IllegalStateException("Search returned " + hits.length + " hits even though size was 1"));, +                    }, +                }, errorHandler, +        ));, +    }, +, +    private SearchRequestBuilder createLatestModelSizeStatsSearch(String indexName) {, +        return client.prepareSearch(indexName), +                .setSize(1), +                .setQuery(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), ModelSizeStats.RESULT_TYPE_VALUE)), +                .addSort(SortBuilders.fieldSort(ModelSizeStats.LOG_TIME_FIELD.getPreferredName()).order(SortOrder.DESC));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                .add(createLatestModelSizeStatsSearch(resultsIndex)), +                                long hitsCount = hits.getHits().length;, +                                if (hitsCount == 0) {, +                                } else if (hitsCount == 1) {, +                                } else if (hitsCount > 1) {, +                                    errorHandler.accept(new IllegalStateException("Expected hits count to be 0 or 1, but got [", +                                            + hitsCount + "]"));, +        LOGGER.trace("ES API CALL: search latest {} for job {}", ModelSizeStats.RESULT_TYPE_VALUE, jobId);, +        createLatestModelSizeStatsSearch(indexName).execute(ActionListener.wrap(, +                response -> {, +                    SearchHit[] hits = response.getHits().getHits();, +                    if (hits.length == 0) {, +                        LOGGER.trace("No {} for job with id {}", ModelSizeStats.RESULT_TYPE_VALUE, jobId);, +                        handler.accept(new ModelSizeStats.Builder(jobId).build());, +                    } else if (hits.length == 1) {, +                        handler.accept(parseSearchHit(hits[0], ModelSizeStats.PARSER, errorHandler).build());, +                    } else {, +                        errorHandler.accept(new IllegalStateException("Search returned " + hits.length + " hits even though size was 1"));, +                    }, +                }, errorHandler, +        ));, +    }, +, +    private SearchRequestBuilder createLatestModelSizeStatsSearch(String indexName) {, +        return client.prepareSearch(indexName), +                .setSize(1), +                .setQuery(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), ModelSizeStats.RESULT_TYPE_VALUE)), +                .addSort(SortBuilders.fieldSort(ModelSizeStats.LOG_TIME_FIELD.getPreferredName()).order(SortOrder.DESC));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +                modelSizeStats.documentId());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                .add(createLatestModelSizeStatsSearch(resultsIndex)), +                                long hitsCount = hits.getHits().length;, +                                if (hitsCount == 0) {, +                                } else if (hitsCount == 1) {, +                                } else if (hitsCount > 1) {, +                                    errorHandler.accept(new IllegalStateException("Expected hits count to be 0 or 1, but got [", +                                            + hitsCount + "]"));, +        LOGGER.trace("ES API CALL: search latest {} for job {}", ModelSizeStats.RESULT_TYPE_VALUE, jobId);, +        createLatestModelSizeStatsSearch(indexName).execute(ActionListener.wrap(, +                response -> {, +                    SearchHit[] hits = response.getHits().getHits();, +                    if (hits.length == 0) {, +                        LOGGER.trace("No {} for job with id {}", ModelSizeStats.RESULT_TYPE_VALUE, jobId);, +                        handler.accept(new ModelSizeStats.Builder(jobId).build());, +                    } else if (hits.length == 1) {, +                        handler.accept(parseSearchHit(hits[0], ModelSizeStats.PARSER, errorHandler).build());, +                    } else {, +                        errorHandler.accept(new IllegalStateException("Search returned " + hits.length + " hits even though size was 1"));, +                    }, +                }, errorHandler, +        ));, +    }, +, +    private SearchRequestBuilder createLatestModelSizeStatsSearch(String indexName) {, +        return client.prepareSearch(indexName), +                .setSize(1), +                .setQuery(QueryBuilders.termQuery(Result.RESULT_TYPE.getPreferredName(), ModelSizeStats.RESULT_TYPE_VALUE)), +                .addSort(SortBuilders.fieldSort(ModelSizeStats.LOG_TIME_FIELD.getPreferredName()).order(SortOrder.DESC));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +                modelSizeStats.documentId());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/state/ModelSizeStats.java, +    public String documentId() {, +        // We choose to create IDs manually here to ensure that we'll have only one, +        // document for a given log_time (which is in seconds granularity)., +        return jobId + "-" + RESULT_TYPE_VALUE + "-" + logTime.getTime();, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                .add(createLatestModelSizeStatsSearch(resultsIndex))]