[+++ b/x-pack/plugin/ml/qa/basic-multi-node/src/test/java/org/elasticsearch/xpack/ml/integration/MlBasicMultiNodeIT.java, +import org.apache.http.nio.entity.NStringEntity;, +import org.elasticsearch.client.Request;, +        Response response = client().performRequest(new Request("GET", "/_xpack"));, +        Map<?, ?> features = (Map<?, ?>) entityAsMap(response).get("features");, +        Map<?, ?> ml = (Map<?, ?>) features.get("ml");, +        Response openResponse = client().performRequest(, +                new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_open"));, +        assertEquals(Collections.singletonMap("opened", true), entityAsMap(openResponse));, +        Request addData = new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_data");, +        addData.setEntity(new NStringEntity(, +                "{\"airline\":\"JZA\",\"responsetime\":\"990.4628\",\"sourcetype\":\"farequote\",\"time\":\"1403481700\"}",, +                randomFrom(ContentType.APPLICATION_JSON, ContentType.create("application/x-ndjson"))));, +        Response addDataResponse = client().performRequest(addData);, +        assertEquals(202, addDataResponse.getStatusLine().getStatusCode());, +        Map<String, Object> responseBody = entityAsMap(addDataResponse);, +        Response flushResponse = client().performRequest(, +                new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_flush"));, +        assertFlushResponse(flushResponse, true, 1403481600000L);, +        Request closeRequest = new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_close");, +        closeRequest.addParameter("timeout", "20s");, +        Response closeResponse = client().performRequest(closeRequest);, +        assertEquals(Collections.singletonMap("closed", true), entityAsMap(closeResponse));, +        Response statsResponse = client().performRequest(, +                new Request("GET", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_stats"));, +        Map<?, ?> dataCountsDoc = (Map<?, ?>), +                ((Map<?, ?>)((List<?>) entityAsMap(statsResponse).get("jobs")).get(0)).get("data_counts");, +        client().performRequest(new Request("DELETE", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId));, +        Request createAirlineDataRequest = new Request("PUT", "/airline-data");, +        createAirlineDataRequest.setJsonEntity("{", +                + "}");, +        client().performRequest(createAirlineDataRequest);, +        Request airlineData1 = new Request("PUT", "/airline-data/response/1");, +        airlineData1.setJsonEntity("{\"time\":\"2016-06-01T00:00:00Z\",\"airline\":\"AAA\",\"responsetime\":135.22}");, +        client().performRequest(airlineData1);, +        Request airlineData2 = new Request("PUT", "/airline-data/response/2");, +        airlineData2.setJsonEntity("{\"time\":\"2016-06-01T01:59:00Z\",\"airline\":\"AAA\",\"responsetime\":541.76}");, +        client().performRequest(airlineData2);, +        client().performRequest(new Request("POST", "/_refresh"));, +        Response openResponse = client().performRequest(, +                new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_open"));, +        assertEquals(Collections.singletonMap("opened", true), entityAsMap(openResponse));, +        Request startRequest = new Request("POST", MachineLearning.BASE_PATH + "datafeeds/" + datafeedId + "/_start");, +        startRequest.addParameter("start", "0");, +        Response startResponse = client().performRequest(startRequest);, +        assertEquals(Collections.singletonMap("started", true), entityAsMap(startResponse));, +                Response statsResponse = client().performRequest(, +                        new Request("GET", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_stats"));, +                Map<?, ?> dataCountsDoc = (Map<?, ?>), +                        ((Map<?, ?>)((List<?>) entityAsMap(statsResponse).get("jobs")).get(0)).get("data_counts");, +        Response stopResponse = client().performRequest(, +                new Request("POST", MachineLearning.BASE_PATH + "datafeeds/" + datafeedId + "/_stop"));, +        assertEquals(Collections.singletonMap("stopped", true), entityAsMap(stopResponse));, +        Request closeRequest = new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_close");, +        closeRequest.addParameter("timeout", "20s");, +        assertEquals(Collections.singletonMap("closed", true),, +                entityAsMap(client().performRequest(closeRequest)));, +        client().performRequest(new Request("DELETE", MachineLearning.BASE_PATH + "datafeeds/" + datafeedId));, +        client().performRequest(new Request("DELETE", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId));, +        Response openResponse = client().performRequest(, +                new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_open"));, +        assertEquals(Collections.singletonMap("opened", true), entityAsMap(openResponse));, +        Request addDataRequest = new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_data");, +        addDataRequest.setEntity(new NStringEntity(, +                "{\"airline\":\"NKS\",\"responsetime\":\"9991.3981\",\"sourcetype\":\"farequote\",\"time\":\"1403482000\"}",, +                randomFrom(ContentType.APPLICATION_JSON, ContentType.create("application/x-ndjson"))));, +        Response addDataResponse = client().performRequest(addDataRequest);, +        assertEquals(202, addDataResponse.getStatusLine().getStatusCode());, +        Map<String, Object> responseBody = entityAsMap(addDataResponse);, +        Response flushResponse = client().performRequest(, +                new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_flush"));, +        assertFlushResponse(flushResponse, true, 1403481600000L);, +        Request closeRequest = new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_close");, +        closeRequest.addParameter("timeout", "20s");, +        assertEquals(Collections.singletonMap("closed", true),, +                entityAsMap(client().performRequest(closeRequest)));, +        Request statsRequest = new Request("GET", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_stats");, +        client().performRequest(statsRequest);, +        Request openRequest = new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_open");, +        openRequest.addParameter("timeout", "20s");, +        Response openResponse2 = client().performRequest(openRequest);, +        assertEquals(Collections.singletonMap("opened", true), entityAsMap(openResponse2));, +        Request addDataRequest2 = new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId + "/_data");, +        addDataRequest2.setEntity(new NStringEntity(, +                "{\"airline\":\"FFT\",\"responsetime\":\"221.8693\",\"sourcetype\":\"farequote\",\"time\":\"1407082000\"}",, +                randomFrom(ContentType.APPLICATION_JSON, ContentType.create("application/x-ndjson"))));, +        Response addDataResponse2 = client().performRequest(addDataRequest2);, +        assertEquals(202, addDataResponse2.getStatusLine().getStatusCode());, +        Map<String, Object> responseBody2 = entityAsMap(addDataResponse2);, +        assertEquals(5, responseBody2.get("processed_record_count"));, +        assertEquals(10, responseBody2.get("processed_field_count"));, +        assertEquals(442, responseBody2.get("input_bytes"));, +        assertEquals(15, responseBody2.get("input_field_count"));, +        assertEquals(0, responseBody2.get("invalid_date_count"));, +        assertEquals(0, responseBody2.get("missing_field_count"));, +        assertEquals(0, responseBody2.get("out_of_order_timestamp_count"));, +        assertEquals(1000, responseBody2.get("bucket_count"));, +        assertEquals(null, responseBody2.get("earliest_record_timestamp"));, +        assertEquals(1407082000000L, responseBody2.get("latest_record_timestamp"));, +        assertEquals(Collections.singletonMap("closed", true),]