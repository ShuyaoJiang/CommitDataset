[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/FieldTermsFreq.java, +    private transient ExtTObjectIntHasMap<Object> termsFreqMap;, +    public int docFreq(Object term) {, +        // we use "toString" on the term so we get hits when we the termValue is Long, and we lookup with int, +            ExtTObjectIntHasMap<Object> termsFreqMap = new ExtTObjectIntHasMap<Object>().defaultReturnValue(-1);, +                termsFreqMap.put(termFreq.term().toString(), termFreq.docFreq());, +        return termsFreqMap.get(term.toString());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/FieldTermsFreq.java, +    private transient ExtTObjectIntHasMap<Object> termsFreqMap;, +    public int docFreq(Object term) {, +        // we use "toString" on the term so we get hits when we the termValue is Long, and we lookup with int, +            ExtTObjectIntHasMap<Object> termsFreqMap = new ExtTObjectIntHasMap<Object>().defaultReturnValue(-1);, +                termsFreqMap.put(termFreq.term().toString(), termFreq.docFreq());, +        return termsFreqMap.get(term.toString());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/ShardTermsRequest.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/FieldTermsFreq.java, +    private transient ExtTObjectIntHasMap<Object> termsFreqMap;, +    public int docFreq(Object term) {, +        // we use "toString" on the term so we get hits when we the termValue is Long, and we lookup with int, +            ExtTObjectIntHasMap<Object> termsFreqMap = new ExtTObjectIntHasMap<Object>().defaultReturnValue(-1);, +                termsFreqMap.put(termFreq.term().toString(), termFreq.docFreq());, +        return termsFreqMap.get(term.toString());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/ShardTermsRequest.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/ShardTermsResponse.java, +import org.elasticsearch.util.lucene.Lucene;, +    private Map<String, TObjectIntHashMap<Object>> fieldsTermsFreqs = new HashMap<String, TObjectIntHashMap<Object>>();, +    void put(String fieldName, TObjectIntHashMap<Object> termsFreqs) {, +    Map<String, TObjectIntHashMap<Object>> fieldsTermsFreqs() {, +            TObjectIntHashMap<Object> termsFreq = new TObjectIntHashMap<Object>();, +                termsFreq.put(Lucene.readFieldValue(in), in.readVInt());, +        for (Map.Entry<String, TObjectIntHashMap<Object>> entry : fieldsTermsFreqs.entrySet()) {, +            for (TObjectIntIterator<Object> it = entry.getValue().iterator(); it.hasNext();) {, +                Lucene.writeFieldValue(out, it.key());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/FieldTermsFreq.java, +    private transient ExtTObjectIntHasMap<Object> termsFreqMap;, +    public int docFreq(Object term) {, +        // we use "toString" on the term so we get hits when we the termValue is Long, and we lookup with int, +            ExtTObjectIntHasMap<Object> termsFreqMap = new ExtTObjectIntHasMap<Object>().defaultReturnValue(-1);, +                termsFreqMap.put(termFreq.term().toString(), termFreq.docFreq());, +        return termsFreqMap.get(term.toString());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/ShardTermsRequest.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/ShardTermsResponse.java, +import org.elasticsearch.util.lucene.Lucene;, +    private Map<String, TObjectIntHashMap<Object>> fieldsTermsFreqs = new HashMap<String, TObjectIntHashMap<Object>>();, +    void put(String fieldName, TObjectIntHashMap<Object> termsFreqs) {, +    Map<String, TObjectIntHashMap<Object>> fieldsTermsFreqs() {, +            TObjectIntHashMap<Object> termsFreq = new TObjectIntHashMap<Object>();, +                termsFreq.put(Lucene.readFieldValue(in), in.readVInt());, +        for (Map.Entry<String, TObjectIntHashMap<Object>> entry : fieldsTermsFreqs.entrySet()) {, +            for (TObjectIntIterator<Object> it = entry.getValue().iterator(); it.hasNext();) {, +                Lucene.writeFieldValue(out, it.key());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TermFreq.java, +import org.elasticsearch.util.lucene.Lucene;, +                i = ((Comparable) o1.term()).compareTo(o2.term());, +            int i = ((Comparable) o1.term()).compareTo(o2.term());, +    private Object term;, +    TermFreq(Object term, int docFreq) {, +    public Object term() {, +    public String termAsString() {, +        return term.toString();, +    }, +, +        term = Lucene.readFieldValue(in);, +        Lucene.writeFieldValue(out, term);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/FieldTermsFreq.java, +    private transient ExtTObjectIntHasMap<Object> termsFreqMap;, +    public int docFreq(Object term) {, +        // we use "toString" on the term so we get hits when we the termValue is Long, and we lookup with int, +            ExtTObjectIntHasMap<Object> termsFreqMap = new ExtTObjectIntHasMap<Object>().defaultReturnValue(-1);, +                termsFreqMap.put(termFreq.term().toString(), termFreq.docFreq());, +        return termsFreqMap.get(term.toString());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/ShardTermsRequest.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/ShardTermsResponse.java, +import org.elasticsearch.util.lucene.Lucene;, +    private Map<String, TObjectIntHashMap<Object>> fieldsTermsFreqs = new HashMap<String, TObjectIntHashMap<Object>>();, +    void put(String fieldName, TObjectIntHashMap<Object> termsFreqs) {, +    Map<String, TObjectIntHashMap<Object>> fieldsTermsFreqs() {, +            TObjectIntHashMap<Object> termsFreq = new TObjectIntHashMap<Object>();, +                termsFreq.put(Lucene.readFieldValue(in), in.readVInt());, +        for (Map.Entry<String, TObjectIntHashMap<Object>> entry : fieldsTermsFreqs.entrySet()) {, +            for (TObjectIntIterator<Object> it = entry.getValue().iterator(); it.hasNext();) {, +                Lucene.writeFieldValue(out, it.key());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TermFreq.java, +import org.elasticsearch.util.lucene.Lucene;, +                i = ((Comparable) o1.term()).compareTo(o2.term());, +            int i = ((Comparable) o1.term()).compareTo(o2.term());, +    private Object term;, +    TermFreq(Object term, int docFreq) {, +    public Object term() {, +    public String termAsString() {, +        return term.toString();, +    }, +, +        term = Lucene.readFieldValue(in);, +        Lucene.writeFieldValue(out, term);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TermsRequest.java, +    public TermsRequest from(Object from) {, +        this.from = from.toString();, +     * Should the first from (if set using {@link #from(Object)} be inclusive or not. Defaults, +     * Should the first from (if set using {@link #from(Object)} be inclusive or not. Defaults]