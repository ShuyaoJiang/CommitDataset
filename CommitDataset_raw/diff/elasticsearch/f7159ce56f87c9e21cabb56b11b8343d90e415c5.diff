[+++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        boolean graphViz = ctx.format != null && ctx.format.getType() == SqlBaseLexer.GRAPHVIZ;, +        Debug.Format format = graphViz ? Debug.Format.GRAPHVIZ : Debug.Format.TEXT;, +        boolean graphViz = ctx.format != null && ctx.format.getType() == SqlBaseLexer.GRAPHVIZ;, +        Explain.Format format = graphViz ? Explain.Format.GRAPHVIZ : Explain.Format.TEXT;, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        boolean graphViz = ctx.format != null && ctx.format.getType() == SqlBaseLexer.GRAPHVIZ;, +        Debug.Format format = graphViz ? Debug.Format.GRAPHVIZ : Debug.Format.TEXT;, +        boolean graphViz = ctx.format != null && ctx.format.getType() == SqlBaseLexer.GRAPHVIZ;, +        Explain.Format format = graphViz ? Explain.Format.GRAPHVIZ : Explain.Format.TEXT;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +        return new MatchQueryPredicate(source(ctx), new UnresolvedAttribute(source(ctx.singleField),, +                visitQualifiedName(ctx.singleField)), string(ctx.queryString), string(ctx.options));, +        return new Order(source(ctx), expression(ctx.expression()),, +            ctx.DESC() != null ? Order.OrderDirection.DESC : Order.OrderDirection.ASC);, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        boolean graphViz = ctx.format != null && ctx.format.getType() == SqlBaseLexer.GRAPHVIZ;, +        Debug.Format format = graphViz ? Debug.Format.GRAPHVIZ : Debug.Format.TEXT;, +        boolean graphViz = ctx.format != null && ctx.format.getType() == SqlBaseLexer.GRAPHVIZ;, +        Explain.Format format = graphViz ? Explain.Format.GRAPHVIZ : Explain.Format.TEXT;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +        return new MatchQueryPredicate(source(ctx), new UnresolvedAttribute(source(ctx.singleField),, +                visitQualifiedName(ctx.singleField)), string(ctx.queryString), string(ctx.options));, +        return new Order(source(ctx), expression(ctx.expression()),, +            ctx.DESC() != null ? Order.OrderDirection.DESC : Order.OrderDirection.ASC);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/LogicalPlanBuilder.java, +            plan = new Limit(source(ctx.limit), new Literal(source(ctx),, +                    Integer.parseInt(ctx.limit.getText()), DataTypes.INTEGER), plan);, +        LogicalPlan query;, +        if (ctx.fromClause() == null) {, +            query = new LocalRelation(source(ctx), new EmptyExecutable(emptyList()));, +        } else {, +            query = plan(ctx.fromClause());, +        }, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        boolean graphViz = ctx.format != null && ctx.format.getType() == SqlBaseLexer.GRAPHVIZ;, +        Debug.Format format = graphViz ? Debug.Format.GRAPHVIZ : Debug.Format.TEXT;, +        boolean graphViz = ctx.format != null && ctx.format.getType() == SqlBaseLexer.GRAPHVIZ;, +        Explain.Format format = graphViz ? Explain.Format.GRAPHVIZ : Explain.Format.TEXT;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +        return new MatchQueryPredicate(source(ctx), new UnresolvedAttribute(source(ctx.singleField),, +                visitQualifiedName(ctx.singleField)), string(ctx.queryString), string(ctx.options));, +        return new Order(source(ctx), expression(ctx.expression()),, +            ctx.DESC() != null ? Order.OrderDirection.DESC : Order.OrderDirection.ASC);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/LogicalPlanBuilder.java, +            plan = new Limit(source(ctx.limit), new Literal(source(ctx),, +                    Integer.parseInt(ctx.limit.getText()), DataTypes.INTEGER), plan);, +        LogicalPlan query;, +        if (ctx.fromClause() == null) {, +            query = new LocalRelation(source(ctx), new EmptyExecutable(emptyList()));, +        } else {, +            query = plan(ctx.fromClause());, +        }, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/SqlParser.java, +    private <T> T invokeParser(String name, String sql, Function<SqlBaseParser, ParserRuleContext> parseFunction,, +            BiFunction<AstBuilder, ParserRuleContext, T> visitor) {, +        public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line,, +                int charPositionInLine, String message, RecognitionException e) {]