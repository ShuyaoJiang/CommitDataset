[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/RollupJobCaps.java, +        Map<String, Object> dateHistoAggCap = job.getGroupConfig().getDateHistogram().toAggCap();, +        String dateField = job.getGroupConfig().getDateHistogram().getField();, +        if (job.getGroupConfig().getHistogram() != null) {, +            Map<String, Object> histoAggCap = job.getGroupConfig().getHistogram().toAggCap();, +            Arrays.stream(job.getGroupConfig().getHistogram().getFields()).forEach(field -> {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/RollupJobCaps.java, +        Map<String, Object> dateHistoAggCap = job.getGroupConfig().getDateHistogram().toAggCap();, +        String dateField = job.getGroupConfig().getDateHistogram().getField();, +        if (job.getGroupConfig().getHistogram() != null) {, +            Map<String, Object> histoAggCap = job.getGroupConfig().getHistogram().toAggCap();, +            Arrays.stream(job.getGroupConfig().getHistogram().getFields()).forEach(field -> {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistogramGroupConfig.java, +    static final String NAME = "date_histogram";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/RollupJobCaps.java, +        Map<String, Object> dateHistoAggCap = job.getGroupConfig().getDateHistogram().toAggCap();, +        String dateField = job.getGroupConfig().getDateHistogram().getField();, +        if (job.getGroupConfig().getHistogram() != null) {, +            Map<String, Object> histoAggCap = job.getGroupConfig().getHistogram().toAggCap();, +            Arrays.stream(job.getGroupConfig().getHistogram().getFields()).forEach(field -> {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistogramGroupConfig.java, +    static final String NAME = "date_histogram";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/GroupConfig.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +import java.util.Collections;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +    public static final String NAME = "groups";, +    private static final ConstructingObjectParser<GroupConfig, Void> PARSER;, +        PARSER = new ConstructingObjectParser<>(NAME, args ->, +            new GroupConfig((DateHistogramGroupConfig) args[0], (HistogramGroupConfig) args[1], (TermsGroupConfig) args[2]));, +        PARSER.declareObject(constructorArg(),, +            (p, c) -> DateHistogramGroupConfig.fromXContent(p), new ParseField(DateHistogramGroupConfig.NAME));, +        PARSER.declareObject(optionalConstructorArg(),, +            (p, c) -> HistogramGroupConfig.fromXContent(p), new ParseField(HistogramGroupConfig.NAME));, +        PARSER.declareObject(optionalConstructorArg(),, +            (p, c) -> TermsGroupConfig.fromXContent(p), new ParseField(TermsGroupConfig.NAME));, +    private final DateHistogramGroupConfig dateHistogram;, +    private final @Nullable HistogramGroupConfig histogram;, +    private final @Nullable TermsGroupConfig terms;, +, +    public GroupConfig(final DateHistogramGroupConfig dateHistogram) {, +        this(dateHistogram, null, null);, +    }, +, +    public GroupConfig(final DateHistogramGroupConfig dateHistogram,, +                       final @Nullable HistogramGroupConfig histogram,, +                       final @Nullable TermsGroupConfig terms) {, +        if (dateHistogram == null) {, +            throw new IllegalArgumentException("Date histogram must not be null");, +        }, +        this.dateHistogram = dateHistogram;, +        this.histogram = histogram;, +    GroupConfig(final StreamInput in) throws IOException {, +        dateHistogram = new DateHistogramGroupConfig(in);, +        histogram = in.readOptionalWriteable(HistogramGroupConfig::new);, +    /**, +     * @return the configuration of the date histogram, +     */, +    public DateHistogramGroupConfig getDateHistogram() {, +        return dateHistogram;, +    /**, +     * @return the configuration of the histogram, +     */, +    @Nullable, +    public HistogramGroupConfig getHistogram() {, +        return histogram;, +    /**, +     * @return the configuration of the terms, +     */, +    @Nullable, +        fields.add(dateHistogram.getField());, +        if (histogram != null) {, +            fields.addAll(asList(histogram.getFields()));, +        return Collections.unmodifiableSet(fields);, +    public void validateMappings(final Map<String, Map<String, FieldCapabilities>> fieldCapsResponse,, +                                 final ActionRequestValidationException validationException) {, +        dateHistogram.validateMappings(fieldCapsResponse, validationException);, +        if (histogram != null) {, +            histogram.validateMappings(fieldCapsResponse, validationException);, +        {, +            builder.field(DateHistogramGroupConfig.NAME, dateHistogram);, +            if (histogram != null) {, +                builder.field(HistogramGroupConfig.NAME, histogram);, +                builder.field(TermsGroupConfig.NAME, terms);, +        }, +        return builder.endObject();, +    public void writeTo(final StreamOutput out) throws IOException {, +        dateHistogram.writeTo(out);, +        out.writeOptionalWriteable(histogram);, +    public boolean equals(final Object other) {, +        final GroupConfig that = (GroupConfig) other;, +        return Objects.equals(dateHistogram, that.dateHistogram), +            && Objects.equals(histogram, that.histogram), +            && Objects.equals(terms, that.terms);, +        return Objects.hash(dateHistogram, histogram, terms);, +    public static GroupConfig fromXContent(final XContentParser parser) throws IOException {, +        return PARSER.parse(parser, null);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/RollupJobCaps.java]