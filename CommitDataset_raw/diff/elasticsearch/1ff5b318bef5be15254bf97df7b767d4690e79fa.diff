[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/range/IpRangeAggregatorTests.java, +import java.util.Comparator;, +    private static InetAddress randomIp(boolean v4) {, +, +        if ((to == null || to.compareTo(value) > 0) && (from == null || from.compareTo(value) <= 0)) {, +    private static final Comparator<Tuple<BytesRef, BytesRef> > RANGE_COMPARATOR = (a, b) -> {, +        int cmp = compare(a.v1(), b.v1(), 1);, +        if (cmp == 0) {, +            cmp = compare(a.v2(), b.v2(), -1);, +        }, +        return cmp;, +    };, +, +    private static int compare(BytesRef a, BytesRef b, int m) {, +        return a == null, +            ? b == null ? 0 : -m, +            : b == null ? m : a.compareTo(b);, +    }, +, +                InetAddress addr = randomIp(v4);, +            if (rarely()) {, +                if (randomBoolean()) {, +                    builder.addRange(NetworkAddress.format(arr[0].v1()), null);, +                    requestedRanges[i] = new Tuple(arr[0].v2(), null);, +                } else {, +                    builder.addRange(null, NetworkAddress.format(arr[1].v1()));, +                    requestedRanges[i] = new Tuple(null, arr[1].v2());, +                }, +            } else {, +        }, +        Arrays.sort(requestedRanges, RANGE_COMPARATOR);, +                    values[j] = new BytesRef(InetAddressPoint.encode(randomIp(v4)));, +                    if (expected.v1() == null) {, +                        assertNull(bucket.getFrom());, +                    } else {, +                    }, +                    if (expected.v2() == null) {, +                        assertNull(bucket.getTo());, +                    } else {, +                    }]