[+++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RetryTests.java, +import org.elasticsearch.common.settings.Setting;, +import java.util.Collections;, +        return pluginList(ReindexPlugin.class, NettyPlugin.class, BogusPlugin.class); // we need netty here to http communication, +    }, +, +    public static final class BogusPlugin extends Plugin {, +        // se NettyUtils.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +        // to make it still work we disable that check but need to register the setting first, +        private static final Setting<Boolean> ASSERT_NETTY_BUGLEVEL = Setting.boolSetting("netty.assert.buglevel", true,, +            Setting.Property.NodeScope);, +, +        @Override, +        public List<Setting<?>> getSettings() {, +            return Collections.singletonList(ASSERT_NETTY_BUGLEVEL);, +        }, +        settings.put("netty.assert.buglevel", false);, +                logger.info("Unblocking the [{}] executor", name);, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RetryTests.java, +import org.elasticsearch.common.settings.Setting;, +import java.util.Collections;, +        return pluginList(ReindexPlugin.class, NettyPlugin.class, BogusPlugin.class); // we need netty here to http communication, +    }, +, +    public static final class BogusPlugin extends Plugin {, +        // se NettyUtils.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +        // to make it still work we disable that check but need to register the setting first, +        private static final Setting<Boolean> ASSERT_NETTY_BUGLEVEL = Setting.boolSetting("netty.assert.buglevel", true,, +            Setting.Property.NodeScope);, +, +        @Override, +        public List<Setting<?>> getSettings() {, +            return Collections.singletonList(ASSERT_NETTY_BUGLEVEL);, +        }, +        settings.put("netty.assert.buglevel", false);, +                logger.info("Unblocking the [{}] executor", name);, +++ b/modules/transport-netty/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RetryTests.java, +import org.elasticsearch.common.settings.Setting;, +import java.util.Collections;, +        return pluginList(ReindexPlugin.class, NettyPlugin.class, BogusPlugin.class); // we need netty here to http communication, +    }, +, +    public static final class BogusPlugin extends Plugin {, +        // se NettyUtils.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +        // to make it still work we disable that check but need to register the setting first, +        private static final Setting<Boolean> ASSERT_NETTY_BUGLEVEL = Setting.boolSetting("netty.assert.buglevel", true,, +            Setting.Property.NodeScope);, +, +        @Override, +        public List<Setting<?>> getSettings() {, +            return Collections.singletonList(ASSERT_NETTY_BUGLEVEL);, +        }, +        settings.put("netty.assert.buglevel", false);, +                logger.info("Unblocking the [{}] executor", name);, +++ b/modules/transport-netty/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +++ b/modules/transport-netty/src/main/java/org/elasticsearch/transport/NettyPlugin.java, +import org.elasticsearch.SpecialPermission;, +import org.elasticsearch.common.settings.Settings;, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +, +    public NettyPlugin(Settings settings) {, +        SecurityManager sm = System.getSecurityManager();, +        if (sm != null) {, +            sm.checkPermission(new SpecialPermission());, +        }, +        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {, +            try {, +                Class.forName("org.jboss.netty.channel.socket.nio.SelectorUtil");, +            } catch (ClassNotFoundException e) {, +                throw new AssertionError(e); // we don't do anything with this, +            }, +            return null;, +        });, +        /*, +         * Asserts that sun.nio.ch.bugLevel has been set to a non-null value. This assertion will fail if the corresponding code, +         * is not executed in a doPrivileged block. This can be disabled via `netty.assert.buglevel` setting which isn't registered, +         * by default but test can do so if they depend on the jar instead of the module., +         */, +        //TODO Once we have no jar level dependency we can get rid of this., +        if (settings.getAsBoolean("netty.assert.buglevel", true)) {, +            assert System.getProperty("sun.nio.ch.bugLevel") != null :, +                "sun.nio.ch.bugLevel is null somebody pulls in SelectorUtil without doing stuff in a doPrivileged block?";, +        }, +    }, +, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RetryTests.java, +import org.elasticsearch.common.settings.Setting;, +import java.util.Collections;, +        return pluginList(ReindexPlugin.class, NettyPlugin.class, BogusPlugin.class); // we need netty here to http communication, +    }, +, +    public static final class BogusPlugin extends Plugin {, +        // se NettyUtils.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +        // to make it still work we disable that check but need to register the setting first, +        private static final Setting<Boolean> ASSERT_NETTY_BUGLEVEL = Setting.boolSetting("netty.assert.buglevel", true,, +            Setting.Property.NodeScope);, +, +        @Override]