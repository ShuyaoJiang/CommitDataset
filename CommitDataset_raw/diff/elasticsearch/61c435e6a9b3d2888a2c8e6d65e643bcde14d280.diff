[+++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public static final String TYPE = "recycler.page.type";, +    public static final String LIMIT_HEAP = "recycler.page.limit.heap";, +    public static final String WEIGHT = "recycler.page.weight";, +        final Type type = Type.parse(settings.get(TYPE));, +        final long limit = settings.getAsMemory(LIMIT_HEAP, "10%").bytes();, +        final double bytesWeight = settings.getAsDouble(WEIGHT + ".bytes", 1d);, +        final double intsWeight = settings.getAsDouble(WEIGHT + ".ints", 1d);, +        final double longsWeight = settings.getAsDouble(WEIGHT + ".longs", 1d);, +        // object pages are less useful to us so we give them a lower weight by default, +        final double objectsWeight = settings.getAsDouble(WEIGHT + ".objects", 0.1d);, +    public static enum Type {, +            if (Strings.isNullOrEmpty(type)) {, +                return CONCURRENT;, +            }, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public static final String TYPE = "recycler.page.type";, +    public static final String LIMIT_HEAP = "recycler.page.limit.heap";, +    public static final String WEIGHT = "recycler.page.weight";, +        final Type type = Type.parse(settings.get(TYPE));, +        final long limit = settings.getAsMemory(LIMIT_HEAP, "10%").bytes();, +        final double bytesWeight = settings.getAsDouble(WEIGHT + ".bytes", 1d);, +        final double intsWeight = settings.getAsDouble(WEIGHT + ".ints", 1d);, +        final double longsWeight = settings.getAsDouble(WEIGHT + ".longs", 1d);, +        // object pages are less useful to us so we give them a lower weight by default, +        final double objectsWeight = settings.getAsDouble(WEIGHT + ".objects", 0.1d);, +    public static enum Type {, +            if (Strings.isNullOrEmpty(type)) {, +                return CONCURRENT;, +            }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    JvmGcMonitorService.GC_SETTING, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public static final String TYPE = "recycler.page.type";, +    public static final String LIMIT_HEAP = "recycler.page.limit.heap";, +    public static final String WEIGHT = "recycler.page.weight";, +        final Type type = Type.parse(settings.get(TYPE));, +        final long limit = settings.getAsMemory(LIMIT_HEAP, "10%").bytes();, +        final double bytesWeight = settings.getAsDouble(WEIGHT + ".bytes", 1d);, +        final double intsWeight = settings.getAsDouble(WEIGHT + ".ints", 1d);, +        final double longsWeight = settings.getAsDouble(WEIGHT + ".longs", 1d);, +        // object pages are less useful to us so we give them a lower weight by default, +        final double objectsWeight = settings.getAsDouble(WEIGHT + ".objects", 0.1d);, +    public static enum Type {, +            if (Strings.isNullOrEmpty(type)) {, +                return CONCURRENT;, +            }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    JvmGcMonitorService.GC_SETTING, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGeneratorBuilder.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.suggest.phrase;, +, +import org.apache.lucene.util.automaton.LevenshteinAutomata;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.search.suggest.SuggestUtils;, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.CandidateGenerator;, +, +import java.io.IOException;, +import java.util.HashSet;, +import java.util.Objects;, +import java.util.Set;, +import java.util.function.Consumer;, +, +public final class DirectCandidateGeneratorBuilder, +        implements Writeable<DirectCandidateGeneratorBuilder>, CandidateGenerator {, +, +    private static final String TYPE = "direct_generator";, +    static final DirectCandidateGeneratorBuilder PROTOTYPE = new DirectCandidateGeneratorBuilder("_na_");, +, +    static final ParseField DIRECT_GENERATOR_FIELD = new ParseField(TYPE);]