[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put(Tuple.tuple("string", "paged_bytes"), new PagedBytesIndexFieldData.Builder()), +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put(Tuple.tuple("string", "paged_bytes"), new PagedBytesIndexFieldData.Builder()), +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/PagedBytesIndexFieldData.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.fielddata.plain;, +, +import org.apache.lucene.index.*;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.PagedBytes;, +import org.apache.lucene.util.packed.GrowableWriter;, +import org.apache.lucene.util.packed.PackedInts;, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.fielddata.*;, +import org.elasticsearch.index.fielddata.fieldcomparator.BytesRefFieldComparatorSource;, +import org.elasticsearch.index.fielddata.ordinals.EmptyOrdinals;, +import org.elasticsearch.index.fielddata.ordinals.MultiFlatArrayOrdinals;, +import org.elasticsearch.index.fielddata.ordinals.SingleArrayOrdinals;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.index.settings.IndexSettings;, +, +import java.util.ArrayList;, +, +/**, + */, +public class PagedBytesIndexFieldData extends AbstractIndexFieldData<PagedBytesAtomicFieldData> implements IndexOrdinalFieldData<PagedBytesAtomicFieldData> {, +, +    public static class Builder implements IndexFieldData.Builder {, +, +        @Override, +        public IndexFieldData build(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType type, IndexFieldDataCache cache) {, +            return new PagedBytesIndexFieldData(index, indexSettings, fieldNames, type, cache);, +        }, +    }, +, +    public PagedBytesIndexFieldData(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndexFieldDataCache cache) {, +        super(index, indexSettings, fieldNames, fieldDataType, cache);, +    }, +, +    @Override, +    public boolean valuesOrdered() {, +        return true;, +    }, +, +    @Override, +    public PagedBytesAtomicFieldData load(AtomicReaderContext context) {, +        try {, +            return cache.load(context, this);, +        } catch (Throwable e) {, +            if (e instanceof ElasticSearchException) {, +                throw (ElasticSearchException) e;, +            } else {, +                throw new ElasticSearchException(e.getMessage(), e);, +            }, +        }, +    }, +, +    @Override, +    public PagedBytesAtomicFieldData loadDirect(AtomicReaderContext context) throws Exception {, +        AtomicReader reader = context.reader();, +, +        Terms terms = reader.terms(getFieldNames().indexName());, +        if (terms == null) {, +            final PagedBytes bytes = new PagedBytes(1);, +            // 0 is reserved for "unset", +            bytes.copyUsingLengthPrefix(new BytesRef());, +            GrowableWriter termOrdToBytesOffset = new GrowableWriter(1, 2, PackedInts.FASTEST);, +            return new PagedBytesAtomicFieldData(bytes.freeze(true), termOrdToBytesOffset.getMutable(), new EmptyOrdinals(reader.maxDoc()));, +        }, +, +        final PagedBytes bytes = new PagedBytes(15);, +        int startBytesBPV;, +        int startTermsBPV;, +        int startNumUniqueTerms;, +, +        int maxDoc = reader.maxDoc();, +        final int termCountHardLimit;]