[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    logger.warn("{} failed to perform {} on node {}", exp, shardIt.shardId(), actionName, node);, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    logger.warn("{} failed to perform {} on node {}", exp, shardIt.shardId(), actionName, node);, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.Nullable;, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure) {, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure);, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, @Nullable final Throwable failure) {, +        logger.trace("{} re-sending failed shard for {}, indexUUID [{}], reason [{}]", failure, shardRouting.shardId(), shardRouting, indexUUID, message);, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure);, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, final Throwable failure) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +            logger.warn("{} can't send shard started for {}, no master known.", shardRouting.shardId(), shardRouting);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason, null);, +        logger.debug("{} sending shard started for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +                SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason, null), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.failure, shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask("shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +                    shardRoutingsToBeApplied.add(new FailedRerouteAllocation.FailedShard(entry.shardRouting, entry.message, entry.failure));, +        clusterService.submitStateUpdateTask("shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.message + "]", Priority.URGENT,, +        String message;, +        Throwable failure;, +        ShardRoutingEntry(ShardRouting shardRouting, String indexUUID, String message, @Nullable Throwable failure) {, +            this.message = message;, +            this.failure = failure;, +            message = in.readString();, +            failure = in.readThrowable();, +            out.writeString(message);, +            out.writeThrowable(failure);, +            return "" + shardRouting + ", indexUUID [" + indexUUID + "], message [" + message + "], failure [" + ExceptionsHelper.detailedMessage(failure) + "]";, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    logger.warn("{} failed to perform {} on node {}", exp, shardIt.shardId(), actionName, node);, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.Nullable;, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure) {, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure);, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, @Nullable final Throwable failure) {, +        logger.trace("{} re-sending failed shard for {}, indexUUID [{}], reason [{}]", failure, shardRouting.shardId(), shardRouting, indexUUID, message);, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure);, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, final Throwable failure) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +            logger.warn("{} can't send shard started for {}, no master known.", shardRouting.shardId(), shardRouting);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason, null);, +        logger.debug("{} sending shard started for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +                SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason, null), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.failure, shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask("shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +                    shardRoutingsToBeApplied.add(new FailedRerouteAllocation.FailedShard(entry.shardRouting, entry.message, entry.failure));, +        clusterService.submitStateUpdateTask("shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.message + "]", Priority.URGENT,, +        String message;, +        Throwable failure;, +        ShardRoutingEntry(ShardRouting shardRouting, String indexUUID, String message, @Nullable Throwable failure) {, +            this.message = message;, +            this.failure = failure;, +            message = in.readString();, +            failure = in.readThrowable();, +            out.writeString(message);, +            out.writeThrowable(failure);, +            return "" + shardRouting + ", indexUUID [" + indexUUID + "], message [" + message + "], failure [" + ExceptionsHelper.detailedMessage(failure) + "]";, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.ExceptionsHelper;, +    private final String message;, +    private final Throwable failure;, +    public UnassignedInfo(Reason reason, String message) {, +        this(reason, System.currentTimeMillis(), message, null);, +    public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Throwable failure) {, +        this(reason, System.currentTimeMillis(), message, failure);, +    }, +, +    private UnassignedInfo(Reason reason, long timestamp, String message, Throwable failure) {, +        this.message = message;, +        this.failure = failure;, +        assert !(message == null && failure != null) : "provide a message if a failure exception is provided";, +        this.message = in.readOptionalString();, +        this.failure = in.readThrowable();, +        out.writeOptionalString(message);, +        out.writeThrowable(failure);, +    public String getMessage() {, +        return this.message;, +    }, +, +    /**, +     * Returns additional failure exception details if exists., +     */, +    @Nullable, +    public Throwable getFailure() {, +        return failure;, +    }, +, +    /**, +     * Builds a string representation of the message and the failure if exists., +     */, +    @Nullable, +        if (message == null) {]