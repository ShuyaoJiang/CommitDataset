[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import java.util.concurrent.atomic.AtomicReference;, +    // indexing searcher is initialized, +    private final AtomicReference<Searcher> indexingSearcher = new AtomicReference<Searcher>();, +                if (indexingSearcher.get() != null) {, +                    indexingSearcher.get().release();, +                    indexingSearcher.set(null);, +            if (indexingSearcher.get() != null) {, +                indexingSearcher.get().release();, +                indexingSearcher.set(null);, +            if (indexingSearcher.get() != null) {, +                indexingSearcher.get().release();, +                indexingSearcher.set(null);, +        Searcher searcher = indexingSearcher.get();, +        if (searcher == null) {, +            Searcher tmpSearcher = searcher();, +            if (!indexingSearcher.compareAndSet(null, tmpSearcher)) {, +                // someone beat us to it, release the one we got, +                tmpSearcher.release();, +            }, +            // it must have a value, since someone set it already, and this code gets called, +            // under a readLock, while the indexSearcher gets nullified on a writeLock, +            searcher = indexingSearcher.get();, +        }]