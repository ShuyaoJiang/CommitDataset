[+++ b/src/main/java/org/elasticsearch/common/lucene/BytesRefs.java, +    , +    public static BytesRef toBytesRef(Object value, BytesRef spare) {, +        if (value == null) {, +            return null;, +        }, +        if (value instanceof BytesRef) {, +            return (BytesRef) value;, +        }, +        spare.copyChars(value.toString());, +        return spare;, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/BytesRefs.java, +    , +    public static BytesRef toBytesRef(Object value, BytesRef spare) {, +        if (value == null) {, +            return null;, +        }, +        if (value instanceof BytesRef) {, +            return (BytesRef) value;, +        }, +        spare.copyChars(value.toString());, +        return spare;, +    }, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/BytesRefs.java, +    , +    public static BytesRef toBytesRef(Object value, BytesRef spare) {, +        if (value == null) {, +            return null;, +        }, +        if (value instanceof BytesRef) {, +            return (BytesRef) value;, +        }, +        spare.copyChars(value.toString());, +        return spare;, +    }, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/spatial/prefix/TermQueryPrefixTreeStrategy.java, +import org.apache.lucene.queries.TermsFilter;, +        return new TermsFilter(getFieldName().indexName(), nodeTerms);, +++ b/src/main/java/org/elasticsearch/common/lucene/BytesRefs.java, +    , +    public static BytesRef toBytesRef(Object value, BytesRef spare) {, +        if (value == null) {, +            return null;, +        }, +        if (value instanceof BytesRef) {, +            return (BytesRef) value;, +        }, +        spare.copyChars(value.toString());, +        return spare;, +    }, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/spatial/prefix/TermQueryPrefixTreeStrategy.java, +import org.apache.lucene.queries.TermsFilter;, +        return new TermsFilter(getFieldName().indexName(), nodeTerms);, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.queries.TermsFilter;, +            return new TermsFilter(TypeFieldMapper.NAME, typesBytes);, +++ b/src/main/java/org/elasticsearch/common/lucene/BytesRefs.java, +    , +    public static BytesRef toBytesRef(Object value, BytesRef spare) {, +        if (value == null) {, +            return null;, +        }, +        if (value instanceof BytesRef) {, +            return (BytesRef) value;, +        }, +        spare.copyChars(value.toString());, +        return spare;, +    }, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/spatial/prefix/TermQueryPrefixTreeStrategy.java, +import org.apache.lucene.queries.TermsFilter;, +        return new TermsFilter(getFieldName().indexName(), nodeTerms);, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.queries.TermsFilter;, +            return new TermsFilter(TypeFieldMapper.NAME, typesBytes);, +++ b/src/main/java/org/elasticsearch/index/mapper/Uid.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.common.lucene.BytesRefs;, +        return createUidAsBytes(new BytesRef(type), new BytesRef(id));, +        return createUidAsBytes(new BytesRef(type), id);, +        final BytesRef ref = new BytesRef(type.length + 1 + id.length);, +        System.arraycopy(type.bytes, type.offset, ref.bytes, 0, type.length);, +        ref.offset = type.length;, +        ref.bytes[ref.offset++] = DELIMITER_BYTE;, +        System.arraycopy(id.bytes, id.offset, ref.bytes, ref.offset, id.length);, +        ref.offset = 0;, +        ref.length = ref.bytes.length;, +    public static BytesRef[] createTypeUids(Collection<String> types, Object ids) {, +        return createTypeUids(types, Collections.singletonList(ids));, +    }, +, +    public static BytesRef[] createTypeUids(Collection<String> types, List<? extends Object> ids) {, +        BytesRef[] uids = new BytesRef[types.size() * ids.size()];]