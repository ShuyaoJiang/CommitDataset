[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readThrowable());, +    public static ElasticsearchException readException(StreamInput input, String name) throws IOException {, +        private final Map<String, List<String>> headers;, +                final String key = in.readString();, +                final int numValues = in.readVInt();, +                final ArrayList<String> headers = new ArrayList<>(numValues);, +        public Map<String, List<String>> getHeaders() {, +        private static Map<String, List<String>> headers(Tuple<String, String[]>... headers) {, +    /**, +     * Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and, +     * adds it to the given exception., +     */, +        final int stackTraceElements = in.readVInt();, +            final String declaringClasss = in.readString();, +            final String fileName = in.readString();, +            final String methodName = in.readString();, +            final int lineNumber = in.readVInt();, +            stackTrace[i] = new StackTraceElement(declaringClasss,methodName, fileName, lineNumber);, +    /**, +     * Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream., +     */, +                org.elasticsearch.index.shard.IllegalIndexShardStateException.class,, +                org.elasticsearch.common.io.stream.StreamInput.NamedException.class, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readThrowable());, +    public static ElasticsearchException readException(StreamInput input, String name) throws IOException {, +        private final Map<String, List<String>> headers;, +                final String key = in.readString();, +                final int numValues = in.readVInt();, +                final ArrayList<String> headers = new ArrayList<>(numValues);, +        public Map<String, List<String>> getHeaders() {, +        private static Map<String, List<String>> headers(Tuple<String, String[]>... headers) {, +    /**, +     * Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and, +     * adds it to the given exception., +     */, +        final int stackTraceElements = in.readVInt();, +            final String declaringClasss = in.readString();, +            final String fileName = in.readString();, +            final String methodName = in.readString();, +            final int lineNumber = in.readVInt();, +            stackTrace[i] = new StackTraceElement(declaringClasss,methodName, fileName, lineNumber);, +    /**, +     * Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream., +     */, +                org.elasticsearch.index.shard.IllegalIndexShardStateException.class,, +                org.elasticsearch.common.io.stream.StreamInput.NamedException.class, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import static org.elasticsearch.ElasticsearchException.readException;, +import static org.elasticsearch.ElasticsearchException.readStackTrace;, +, +                    final String name = readString();, +                    return (T) readException(this, name);, +                    final String resource = msg.substring(idx + " (resource=".length(), msg.length()-1);, +                    return (T) readStackTrace(new CorruptIndexException(msg, resource, readThrowable()), this); // Lucene 5.3 will have getters for all these, +                    final String itnMessage = readOptionalString();, +                    return (T) readStackTrace(new IndexFormatTooNewException(itnMessage, -1, -1, -1), this);, +                    final String itoMessage = readOptionalString();, +                    return (T) readStackTrace(new IndexFormatTooOldException(itoMessage, -1, -1, -1), this);, +                    final String npeMessage = readOptionalString();, +                    return (T) readStackTrace(new NullPointerException(npeMessage), this);, +                    final String nfeMessage = readOptionalString();, +                    return (T) readStackTrace(new NumberFormatException(nfeMessage), this);, +                    return (T) readStackTrace(new IllegalArgumentException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +                    final String eofMessage = readOptionalString();, +                    return (T) readStackTrace(new EOFException(eofMessage), this);, +                    return (T) readStackTrace(new SecurityException(readOptionalString(), readThrowable()), this);, +    public static class NamedException extends ElasticsearchException {, +, +        private final String name;, +, +        public NamedException(String name, String msg, Throwable cause) {, +            super(msg, cause);, +            if (name == null) {, +                throw new IllegalArgumentException("name must not be null");, +            }, +            this.name = name;, +        }, +, +        public NamedException(StreamInput in) throws IOException {, +            super(in);, +            name = in.readString();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            out.writeString(name);, +        }, +, +        @Override, +        protected String getExceptionName() {, +            return Strings.toUnderscoreCase(name);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        super(in.readOptionalString(), in.readThrowable());]