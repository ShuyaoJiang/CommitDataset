[+++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler;, +import java.util.concurrent.RejectedExecutionHandler;, +            try {, +            } catch (EsRejectedExecutionException e) {, +                if (logger.isDebugEnabled()) {, +                    RejectedExecutionHandler rejectedExecutionHandler = executor.getRejectedExecutionHandler();, +                    long rejected = -1;, +                    if (rejectedExecutionHandler instanceof XRejectedExecutionHandler) {, +                        rejected = ((XRejectedExecutionHandler) rejectedExecutionHandler).rejected();, +                    }, +                    int queueCapacity = executor.getQueue().size();, +                    logger.debug("can't execute trigger on the [" + THREAD_POOL_NAME + "] thread pool, rejected tasks [" + rejected + "] queue capacity [" + queueCapacity +"]");, +                }, +            }, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler;, +import java.util.concurrent.RejectedExecutionHandler;, +            try {, +            } catch (EsRejectedExecutionException e) {, +                if (logger.isDebugEnabled()) {, +                    RejectedExecutionHandler rejectedExecutionHandler = executor.getRejectedExecutionHandler();, +                    long rejected = -1;, +                    if (rejectedExecutionHandler instanceof XRejectedExecutionHandler) {, +                        rejected = ((XRejectedExecutionHandler) rejectedExecutionHandler).rejected();, +                    }, +                    int queueCapacity = executor.getQueue().size();, +                    logger.debug("can't execute trigger on the [" + THREAD_POOL_NAME + "] thread pool, rejected tasks [" + rejected + "] queue capacity [" + queueCapacity +"]");, +                }, +            }, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/QuartzScheduleTriggerEngine.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler;, +import java.util.concurrent.RejectedExecutionHandler;, +            try {, +            } catch (EsRejectedExecutionException e) {, +                if (logger.isDebugEnabled()) {, +                    RejectedExecutionHandler rejectedExecutionHandler = executor.getRejectedExecutionHandler();, +                    long rejected = -1;, +                    if (rejectedExecutionHandler instanceof XRejectedExecutionHandler) {, +                        rejected = ((XRejectedExecutionHandler) rejectedExecutionHandler).rejected();, +                    }, +                    int queueCapacity = executor.getQueue().size();, +                    logger.debug("can't execute trigger on the [" + THREAD_POOL_NAME + "] thread pool, rejected tasks [" + rejected + "] queue capacity [" + queueCapacity +"]");, +                }, +            }, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler;, +import java.util.concurrent.RejectedExecutionHandler;, +            try {, +            } catch (EsRejectedExecutionException e) {, +                if (logger.isDebugEnabled()) {, +                    RejectedExecutionHandler rejectedExecutionHandler = executor.getRejectedExecutionHandler();, +                    long rejected = -1;, +                    if (rejectedExecutionHandler instanceof XRejectedExecutionHandler) {, +                        rejected = ((XRejectedExecutionHandler) rejectedExecutionHandler).rejected();, +                    }, +                    int queueCapacity = executor.getQueue().size();, +                    logger.debug("can't execute trigger on the [" + THREAD_POOL_NAME + "] thread pool, rejected tasks [" + rejected + "] queue capacity [" + queueCapacity +"]");, +                }, +            }, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/QuartzScheduleTriggerEngine.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler;, +import java.util.concurrent.RejectedExecutionHandler;, +            try {, +            } catch (EsRejectedExecutionException e) {, +                if (logger.isDebugEnabled()) {, +                    RejectedExecutionHandler rejectedExecutionHandler = executor.getRejectedExecutionHandler();, +                    long rejected = -1;, +                    if (rejectedExecutionHandler instanceof XRejectedExecutionHandler) {, +                        rejected = ((XRejectedExecutionHandler) rejectedExecutionHandler).rejected();, +                    }, +                    int queueCapacity = executor.getQueue().size();, +                    logger.debug("can't execute trigger on the [" + THREAD_POOL_NAME + "] thread pool, rejected tasks [" + rejected + "] queue capacity [" + queueCapacity +"]");, +                }, +            }, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SchedulerScheduleTriggerEngine.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler;, +import java.util.concurrent.*;, +            try {, +            } catch (EsRejectedExecutionException e) {, +                if (logger.isDebugEnabled()) {, +                    RejectedExecutionHandler rejectedExecutionHandler = executor.getRejectedExecutionHandler();, +                    long rejected = -1;, +                    if (rejectedExecutionHandler instanceof XRejectedExecutionHandler) {, +                        rejected = ((XRejectedExecutionHandler) rejectedExecutionHandler).rejected();, +                    }, +                    int queueCapacity = executor.getQueue().size();, +                    logger.debug("can't execute trigger on the [" + THREAD_POOL_NAME + "] thread pool, rejected tasks [" + rejected + "] queue capacity [" + queueCapacity +"]");, +                }, +            }, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler;, +import java.util.concurrent.RejectedExecutionHandler;]