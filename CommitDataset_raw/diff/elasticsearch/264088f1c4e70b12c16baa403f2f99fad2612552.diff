[+++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(MapperService.class));, +, +            if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_6_0_0_beta1), +                    && reason == MergeReason.MAPPING_UPDATE) { // only log in case of explicit mapping updates, +                DEPRECATION_LOGGER.deprecated("[_default_] mapping is deprecated since it is not useful anymore now that indexes " +, +                        "cannot have more than one type");, +            }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(MapperService.class));, +, +            if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_6_0_0_beta1), +                    && reason == MergeReason.MAPPING_UPDATE) { // only log in case of explicit mapping updates, +                DEPRECATION_LOGGER.deprecated("[_default_] mapping is deprecated since it is not useful anymore now that indexes " +, +                        "cannot have more than one type");, +            }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java, +, +    public void testDefaultMappingIsDeprecated() throws IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("_default_").endObject().endObject().string();, +        MapperService mapperService = createIndex("test").mapperService();, +        mapperService.merge("_default_", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE, randomBoolean());, +        assertWarnings("[_default_] mapping is deprecated since it is not useful anymore now that indexes " +, +                "cannot have more than one type");, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(MapperService.class));, +, +            if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_6_0_0_beta1), +                    && reason == MergeReason.MAPPING_UPDATE) { // only log in case of explicit mapping updates, +                DEPRECATION_LOGGER.deprecated("[_default_] mapping is deprecated since it is not useful anymore now that indexes " +, +                        "cannot have more than one type");, +            }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java, +, +    public void testDefaultMappingIsDeprecated() throws IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("_default_").endObject().endObject().string();, +        MapperService mapperService = createIndex("test").mapperService();, +        mapperService.merge("_default_", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE, randomBoolean());, +        assertWarnings("[_default_] mapping is deprecated since it is not useful anymore now that indexes " +, +                "cannot have more than one type");, +    }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_5_6_0).build();, +        MapperService mapperService = createIndex("test", settings).mapperService();, +        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_5_6_0).build();, +        MapperService mapperService = createIndex("test", settings).mapperService();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(MapperService.class));, +, +            if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_6_0_0_beta1), +                    && reason == MergeReason.MAPPING_UPDATE) { // only log in case of explicit mapping updates, +                DEPRECATION_LOGGER.deprecated("[_default_] mapping is deprecated since it is not useful anymore now that indexes " +, +                        "cannot have more than one type");, +            }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java, +, +    public void testDefaultMappingIsDeprecated() throws IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("_default_").endObject().endObject().string();, +        MapperService mapperService = createIndex("test").mapperService();, +        mapperService.merge("_default_", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE, randomBoolean());, +        assertWarnings("[_default_] mapping is deprecated since it is not useful anymore now that indexes " +, +                "cannot have more than one type");, +    }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_5_6_0).build();, +        MapperService mapperService = createIndex("test", settings).mapperService();, +        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_5_6_0).build();, +        MapperService mapperService = createIndex("test", settings).mapperService();, +++ b/core/src/test/java/org/elasticsearch/indices/mapping/ConcurrentDynamicTemplateIT.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(MapperService.class));, +, +            if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_6_0_0_beta1), +                    && reason == MergeReason.MAPPING_UPDATE) { // only log in case of explicit mapping updates, +                DEPRECATION_LOGGER.deprecated("[_default_] mapping is deprecated since it is not useful anymore now that indexes " +, +                        "cannot have more than one type");, +            }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java, +, +    public void testDefaultMappingIsDeprecated() throws IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("_default_").endObject().endObject().string();, +        MapperService mapperService = createIndex("test").mapperService();, +        mapperService.merge("_default_", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE, randomBoolean());]