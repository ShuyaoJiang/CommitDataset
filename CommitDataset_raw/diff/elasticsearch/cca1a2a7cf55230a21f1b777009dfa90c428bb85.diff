[+++ b/x-pack/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import org.elasticsearch.common.hash.MessageDigests;, +import java.security.MessageDigest;, +import java.security.PrivateKey;, +import java.security.PublicKey;, +        final boolean preV4 = licenseSpec.version() < License.VERSION_CRYPTO_ALGORITHMS;, +            PrivateKey decryptedPrivateKey = CryptUtils.readEncryptedPrivateKey(Files.readAllBytes(privateKeyPath));, +            rsa.initSign(decryptedPrivateKey);, +        final byte[] publicKeyBytes = Files.readAllBytes(publicKeyPath);, +        PublicKey publicKey = CryptUtils.readPublicKey(publicKeyBytes);, +        final byte[] pubKeyFingerprint = preV4 ? Base64.getEncoder().encode(CryptUtils.writeEncryptedPublicKey(publicKey)) :, +                getPublicKeyFingerprint(publicKeyBytes);, +        byte[] bytes = new byte[4 + 4 + MAGIC_LENGTH + 4 + pubKeyFingerprint.length + 4 + signedContent.length];, +                .putInt(pubKeyFingerprint.length), +                .put(pubKeyFingerprint), +, +    private byte[] getPublicKeyFingerprint(byte[] keyBytes) {, +        MessageDigest sha256 = MessageDigests.sha256();, +        sha256.update(keyBytes);, +        return sha256.digest();, +    }, +++ b/x-pack/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import org.elasticsearch.common.hash.MessageDigests;, +import java.security.MessageDigest;, +import java.security.PrivateKey;, +import java.security.PublicKey;, +        final boolean preV4 = licenseSpec.version() < License.VERSION_CRYPTO_ALGORITHMS;, +            PrivateKey decryptedPrivateKey = CryptUtils.readEncryptedPrivateKey(Files.readAllBytes(privateKeyPath));, +            rsa.initSign(decryptedPrivateKey);, +        final byte[] publicKeyBytes = Files.readAllBytes(publicKeyPath);, +        PublicKey publicKey = CryptUtils.readPublicKey(publicKeyBytes);, +        final byte[] pubKeyFingerprint = preV4 ? Base64.getEncoder().encode(CryptUtils.writeEncryptedPublicKey(publicKey)) :, +                getPublicKeyFingerprint(publicKeyBytes);, +        byte[] bytes = new byte[4 + 4 + MAGIC_LENGTH + 4 + pubKeyFingerprint.length + 4 + signedContent.length];, +                .putInt(pubKeyFingerprint.length), +                .put(pubKeyFingerprint), +, +    private byte[] getPublicKeyFingerprint(byte[] keyBytes) {, +        MessageDigest sha256 = MessageDigests.sha256();, +        sha256.update(keyBytes);, +        return sha256.digest();, +    }, +++ b/x-pack/license-tools/src/test/resources/private.key, +++ b/x-pack/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import org.elasticsearch.common.hash.MessageDigests;, +import java.security.MessageDigest;, +import java.security.PrivateKey;, +import java.security.PublicKey;, +        final boolean preV4 = licenseSpec.version() < License.VERSION_CRYPTO_ALGORITHMS;, +            PrivateKey decryptedPrivateKey = CryptUtils.readEncryptedPrivateKey(Files.readAllBytes(privateKeyPath));, +            rsa.initSign(decryptedPrivateKey);, +        final byte[] publicKeyBytes = Files.readAllBytes(publicKeyPath);, +        PublicKey publicKey = CryptUtils.readPublicKey(publicKeyBytes);, +        final byte[] pubKeyFingerprint = preV4 ? Base64.getEncoder().encode(CryptUtils.writeEncryptedPublicKey(publicKey)) :, +                getPublicKeyFingerprint(publicKeyBytes);, +        byte[] bytes = new byte[4 + 4 + MAGIC_LENGTH + 4 + pubKeyFingerprint.length + 4 + signedContent.length];, +                .putInt(pubKeyFingerprint.length), +                .put(pubKeyFingerprint), +, +    private byte[] getPublicKeyFingerprint(byte[] keyBytes) {, +        MessageDigest sha256 = MessageDigests.sha256();, +        sha256.update(keyBytes);, +        return sha256.digest();, +    }, +++ b/x-pack/license-tools/src/test/resources/private.key, +++ b/x-pack/license-tools/src/test/resources/public.key, +++ b/x-pack/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import org.elasticsearch.common.hash.MessageDigests;, +import java.security.MessageDigest;, +import java.security.PrivateKey;, +import java.security.PublicKey;, +        final boolean preV4 = licenseSpec.version() < License.VERSION_CRYPTO_ALGORITHMS;, +            PrivateKey decryptedPrivateKey = CryptUtils.readEncryptedPrivateKey(Files.readAllBytes(privateKeyPath));, +            rsa.initSign(decryptedPrivateKey);, +        final byte[] publicKeyBytes = Files.readAllBytes(publicKeyPath);, +        PublicKey publicKey = CryptUtils.readPublicKey(publicKeyBytes);, +        final byte[] pubKeyFingerprint = preV4 ? Base64.getEncoder().encode(CryptUtils.writeEncryptedPublicKey(publicKey)) :, +                getPublicKeyFingerprint(publicKeyBytes);, +        byte[] bytes = new byte[4 + 4 + MAGIC_LENGTH + 4 + pubKeyFingerprint.length + 4 + signedContent.length];, +                .putInt(pubKeyFingerprint.length), +                .put(pubKeyFingerprint), +, +    private byte[] getPublicKeyFingerprint(byte[] keyBytes) {, +        MessageDigest sha256 = MessageDigests.sha256();, +        sha256.update(keyBytes);, +        return sha256.digest();, +    }, +++ b/x-pack/license-tools/src/test/resources/private.key, +++ b/x-pack/license-tools/src/test/resources/public.key, +++ b/x-pack/plugin/core/snapshot.key, +++ b/x-pack/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import org.elasticsearch.common.hash.MessageDigests;, +import java.security.MessageDigest;, +import java.security.PrivateKey;, +import java.security.PublicKey;, +        final boolean preV4 = licenseSpec.version() < License.VERSION_CRYPTO_ALGORITHMS;, +            PrivateKey decryptedPrivateKey = CryptUtils.readEncryptedPrivateKey(Files.readAllBytes(privateKeyPath));, +            rsa.initSign(decryptedPrivateKey);, +        final byte[] publicKeyBytes = Files.readAllBytes(publicKeyPath);, +        PublicKey publicKey = CryptUtils.readPublicKey(publicKeyBytes);]