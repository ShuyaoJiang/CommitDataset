[+++ b/build.gradle, +// Make sure gradle idea was run before running anything in intellij (including import)., +File ideaMarker = new File(projectDir, '.local-idea-is-configured'), +tasks.idea.doLast {, +  ideaMarker.setText('', 'UTF-8'), +}, +if (System.getProperty('idea.active') != null && ideaMarker.exists() == false) {, +  throw new GradleException('You must run gradle idea from the root of elasticsearch before importing into IntelliJ'), +}, +, +++ b/build.gradle, +// Make sure gradle idea was run before running anything in intellij (including import)., +File ideaMarker = new File(projectDir, '.local-idea-is-configured'), +tasks.idea.doLast {, +  ideaMarker.setText('', 'UTF-8'), +}, +if (System.getProperty('idea.active') != null && ideaMarker.exists() == false) {, +  throw new GradleException('You must run gradle idea from the root of elasticsearch before importing into IntelliJ'), +}, +, +++ b/buildSrc/version.properties, +lucene            = 5.4.0-snapshot-1715952, +++ b/build.gradle, +// Make sure gradle idea was run before running anything in intellij (including import)., +File ideaMarker = new File(projectDir, '.local-idea-is-configured'), +tasks.idea.doLast {, +  ideaMarker.setText('', 'UTF-8'), +}, +if (System.getProperty('idea.active') != null && ideaMarker.exists() == false) {, +  throw new GradleException('You must run gradle idea from the root of elasticsearch before importing into IntelliJ'), +}, +, +++ b/buildSrc/version.properties, +lucene            = 5.4.0-snapshot-1715952, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +     * @return the lowest value in the field., +     *, +     * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account., +     */, +    public T getMinValue() {, +        return minValue;, +    }, +, +    /**, +     * @return the highest value in the field., +     *, +     * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account., +     */, +    public T getMaxValue() {, +        return maxValue;, +    }, +, +    /**, +    public abstract String getMinValueAsString();, +    public abstract String getMaxValueAsString();, +        builder.field(Fields.MIN_VALUE, getMinValue());, +        builder.field(Fields.MIN_VALUE_AS_STRING, getMinValueAsString());, +        builder.field(Fields.MAX_VALUE, getMaxValue());, +        builder.field(Fields.MAX_VALUE_AS_STRING, getMaxValueAsString());, +        public String getMinValueAsString() {, +        public String getMaxValueAsString() {, +        public String getMinValueAsString() {, +        public String getMaxValueAsString() {, +        public String getMinValueAsString() {, +        public String getMaxValueAsString() {, +        public String getMinValueAsString() {, +        public String getMaxValueAsString() {, +            builder.field(Fields.MIN_VALUE, getMinValueAsString());, +            builder.field(Fields.MAX_VALUE, getMaxValueAsString());, +        public String getMinValueAsString() {, +        public String getMaxValueAsString() {, +        final static XContentBuilderString MIN_VALUE_AS_STRING = new XContentBuilderString("min_value_as_string");, +        final static XContentBuilderString MAX_VALUE_AS_STRING = new XContentBuilderString("max_value_as_string");, +++ b/build.gradle, +// Make sure gradle idea was run before running anything in intellij (including import)., +File ideaMarker = new File(projectDir, '.local-idea-is-configured'), +tasks.idea.doLast {, +  ideaMarker.setText('', 'UTF-8'), +}, +if (System.getProperty('idea.active') != null && ideaMarker.exists() == false) {, +  throw new GradleException('You must run gradle idea from the root of elasticsearch before importing into IntelliJ'), +}, +, +++ b/buildSrc/version.properties, +lucene            = 5.4.0-snapshot-1715952, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +     * @return the lowest value in the field., +     *, +     * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account., +     */, +    public T getMinValue() {, +        return minValue;, +    }, +, +    /**, +     * @return the highest value in the field., +     *, +     * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account., +     */, +    public T getMaxValue() {]