[+++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.action.GenericAction;, +, +            // construct the list of client actions, +            final List<ActionPlugin> actionPlugins = pluginsService.filterPlugins(ActionPlugin.class);, +            final List<GenericAction> clientActions =, +                    actionPlugins.stream().flatMap(p -> p.getClientActions().stream()).collect(Collectors.toList());, +            // add all the base actions, +            final List<? extends GenericAction<?, ?>> baseActions =, +                    actionModule.getActions().values().stream().map(ActionPlugin.ActionHandler::getAction).collect(Collectors.toList());, +            clientActions.addAll(baseActions);, +            final TransportProxyClient proxy = new TransportProxyClient(settings, transportService, nodesService, clientActions);, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.action.GenericAction;, +, +            // construct the list of client actions, +            final List<ActionPlugin> actionPlugins = pluginsService.filterPlugins(ActionPlugin.class);, +            final List<GenericAction> clientActions =, +                    actionPlugins.stream().flatMap(p -> p.getClientActions().stream()).collect(Collectors.toList());, +            // add all the base actions, +            final List<? extends GenericAction<?, ?>> baseActions =, +                    actionModule.getActions().values().stream().map(ActionPlugin.ActionHandler::getAction).collect(Collectors.toList());, +            clientActions.addAll(baseActions);, +            final TransportProxyClient proxy = new TransportProxyClient(settings, transportService, nodesService, clientActions);, +++ b/server/src/main/java/org/elasticsearch/plugins/ActionPlugin.java, +import java.util.stream.Collectors;, +, +    /**, +     * Client actions added by this plugin. This defaults to all of the {@linkplain GenericAction} in, +     * {@linkplain ActionPlugin#getActions()}., +     */, +    default List<GenericAction> getClientActions() {, +        return getActions().stream().map(a -> a.action).collect(Collectors.toList());, +    }, +]