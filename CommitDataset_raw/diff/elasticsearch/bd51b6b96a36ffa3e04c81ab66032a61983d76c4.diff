[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +            .withWaitForActiveShards(healthRequest.waitForActiveShards(), ActiveShardCount.NONE), +            return withWaitForActiveShards(activeShardCount, ActiveShardCount.DEFAULT);, +        }, +, +        Params withWaitForActiveShards(ActiveShardCount activeShardCount, ActiveShardCount defaultActiveShardCount) {, +            if (activeShardCount != null && activeShardCount != defaultActiveShardCount) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +            .withWaitForActiveShards(healthRequest.waitForActiveShards(), ActiveShardCount.NONE), +            return withWaitForActiveShards(activeShardCount, ActiveShardCount.DEFAULT);, +        }, +, +        Params withWaitForActiveShards(ActiveShardCount activeShardCount, ActiveShardCount defaultActiveShardCount) {, +            if (activeShardCount != null && activeShardCount != defaultActiveShardCount) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +        setRandomWaitForActiveShards(healthRequest::waitForActiveShards, ActiveShardCount.NONE, expectedParams);, +        setRandomWaitForActiveShards(setter, ActiveShardCount.DEFAULT, expectedParams);, +    private static void setRandomWaitForActiveShards(Consumer<ActiveShardCount> setter, ActiveShardCount defaultActiveShardCount,, +                                                     Map<String, String> expectedParams) {, +            int waitForActiveShardsInt = randomIntBetween(-1, 5);, +            if (waitForActiveShardsInt == -1) {, +                waitForActiveShardsString = String.valueOf(waitForActiveShardsInt);, +            ActiveShardCount activeShardCount = ActiveShardCount.parseString(waitForActiveShardsString);, +            setter.accept(activeShardCount);, +            if (defaultActiveShardCount.equals(activeShardCount) == false) {, +            }]