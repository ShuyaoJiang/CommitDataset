[+++ b/src/main/java/org/elasticsearch/shield/authc/pki/PkiRealm.java, +import org.elasticsearch.shield.transport.SSLClientAuth;, +     * @param config this realm's configuration, +     * @param logger the logger to use if there is a configuration issue, +                && SSLClientAuth.parse(settings.get(ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_SETTING), ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_DEFAULT).enabled()) {, +        final SSLClientAuth clientAuth = SSLClientAuth.parse(settings.get(ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_SETTING), ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_DEFAULT);, +        if (ssl && clientAuth.enabled()) {, +                    && SSLClientAuth.parse(profileSettings.get(ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_SETTING), clientAuth).enabled()) {, +++ b/src/main/java/org/elasticsearch/shield/authc/pki/PkiRealm.java, +import org.elasticsearch.shield.transport.SSLClientAuth;, +     * @param config this realm's configuration, +     * @param logger the logger to use if there is a configuration issue, +                && SSLClientAuth.parse(settings.get(ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_SETTING), ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_DEFAULT).enabled()) {, +        final SSLClientAuth clientAuth = SSLClientAuth.parse(settings.get(ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_SETTING), ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_DEFAULT);, +        if (ssl && clientAuth.enabled()) {, +                    && SSLClientAuth.parse(profileSettings.get(ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_SETTING), clientAuth).enabled()) {, +++ b/src/main/java/org/elasticsearch/shield/rest/ShieldRestFilter.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.shield.transport.SSLClientAuth;, +import javax.net.ssl.SSLPeerUnverifiedException;, +    private final ESLogger logger;, +        extractClientCertificate = ssl && SSLClientAuth.parse(settings.get(ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_SETTING), ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_DEFAULT).enabled();, +        logger = Loggers.getLogger(getClass(), settings);, +                putClientCertificateInContext(request, logger);, +    static void putClientCertificateInContext(RestRequest request, ESLogger logger) throws Exception {, +        try {, +        } catch (SSLPeerUnverifiedException e) {, +            // this happens when we only request client authentication and the client does not provide it, +            if (logger.isTraceEnabled()) {, +                logger.trace("SSL Peer did not present a certificate on channel [{}]", e, nettyHttpRequest.getChannel());, +            } else if (logger.isDebugEnabled()) {, +                logger.debug("SSL Peer did not present a certificate on channel [{}]", nettyHttpRequest.getChannel());, +            }, +        }, +++ b/src/main/java/org/elasticsearch/shield/authc/pki/PkiRealm.java, +import org.elasticsearch.shield.transport.SSLClientAuth;, +     * @param config this realm's configuration, +     * @param logger the logger to use if there is a configuration issue, +                && SSLClientAuth.parse(settings.get(ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_SETTING), ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_DEFAULT).enabled()) {, +        final SSLClientAuth clientAuth = SSLClientAuth.parse(settings.get(ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_SETTING), ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_DEFAULT);, +        if (ssl && clientAuth.enabled()) {, +                    && SSLClientAuth.parse(profileSettings.get(ShieldNettyTransport.TRANSPORT_CLIENT_AUTH_SETTING), clientAuth).enabled()) {, +++ b/src/main/java/org/elasticsearch/shield/rest/ShieldRestFilter.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.shield.transport.SSLClientAuth;, +import javax.net.ssl.SSLPeerUnverifiedException;, +    private final ESLogger logger;, +        extractClientCertificate = ssl && SSLClientAuth.parse(settings.get(ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_SETTING), ShieldNettyHttpServerTransport.HTTP_CLIENT_AUTH_DEFAULT).enabled();, +        logger = Loggers.getLogger(getClass(), settings);, +                putClientCertificateInContext(request, logger);, +    static void putClientCertificateInContext(RestRequest request, ESLogger logger) throws Exception {, +        try {, +        } catch (SSLPeerUnverifiedException e) {, +            // this happens when we only request client authentication and the client does not provide it, +            if (logger.isTraceEnabled()) {, +                logger.trace("SSL Peer did not present a certificate on channel [{}]", e, nettyHttpRequest.getChannel());, +            } else if (logger.isDebugEnabled()) {, +                logger.debug("SSL Peer did not present a certificate on channel [{}]", nettyHttpRequest.getChannel());, +            }, +        }, +++ b/src/main/java/org/elasticsearch/shield/transport/SSLClientAuth.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.shield.transport;, +, +import org.elasticsearch.shield.ssl.ElasticsearchSSLException;, +, +import javax.net.ssl.SSLEngine;, +import java.util.Locale;, +, +public enum SSLClientAuth {, +, +    NO() {, +        public boolean enabled() {, +            return false;, +        }, +, +        public void configure(SSLEngine engine) {, +            // nothing to do here, +            assert !engine.getWantClientAuth();, +            assert !engine.getNeedClientAuth();, +        }, +    },, +    OPTIONAL() {, +        public boolean enabled() {, +            return true;, +        }, +, +        public void configure(SSLEngine engine) {, +            engine.setWantClientAuth(true);, +        }, +    },, +    REQUIRED() {, +        public boolean enabled() {, +            return true;]