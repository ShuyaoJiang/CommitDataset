[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +        downLevelADAuthenticator = new DownLevelADAuthenticator(config, timeout, logger, groupResolver, domainDN, sslService);, +        final SSLService sslService;, +        final RealmConfig config;, +        DownLevelADAuthenticator(RealmConfig config, TimeValue timeout, Logger logger, GroupsResolver groupsResolver, String domainDN,, +                                 SSLService sslService) {, +            super(config.settings(), timeout, logger, groupsResolver, domainDN);, +            this.settings = config.settings();, +            this.sslService = sslService;, +            this.config = config;, +                final LDAPConnectionOptions options = connectionOptions(config, sslService, logger);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +        downLevelADAuthenticator = new DownLevelADAuthenticator(config, timeout, logger, groupResolver, domainDN, sslService);, +        final SSLService sslService;, +        final RealmConfig config;, +        DownLevelADAuthenticator(RealmConfig config, TimeValue timeout, Logger logger, GroupsResolver groupsResolver, String domainDN,, +                                 SSLService sslService) {, +            super(config.settings(), timeout, logger, groupsResolver, domainDN);, +            this.settings = config.settings();, +            this.sslService = sslService;, +            this.config = config;, +                final LDAPConnectionOptions options = connectionOptions(config, sslService, logger);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authc/ldap/support/SessionFactory.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.xpack.security.authc.RealmSettings;, +import org.elasticsearch.xpack.ssl.VerificationMode;, +        this.serverSet = serverSet(config, sslService, ldapServers);, +    protected static LDAPConnectionOptions connectionOptions(RealmConfig config, SSLService sslService, Logger logger) {, +        Settings realmSettings = config.settings();, +        options.setConnectTimeoutMillis(Math.toIntExact(realmSettings.getAsTime(TIMEOUT_TCP_CONNECTION_SETTING, TIMEOUT_DEFAULT).millis()));, +        options.setFollowReferrals(realmSettings.getAsBoolean(FOLLOW_REFERRALS_SETTING, true));, +        options.setResponseTimeoutMillis(realmSettings.getAsTime(TIMEOUT_TCP_READ_SETTING, TIMEOUT_DEFAULT).millis());, +        SSLConfigurationSettings sslConfigurationSettings = SSLConfigurationSettings.withoutPrefix();, +        final Settings realmSSLSettings = realmSettings.getByPrefix("ssl.");, +        final boolean verificationModeExists = sslConfigurationSettings.verificationMode.exists(realmSSLSettings);, +        final boolean hostnameVerficationExists = realmSettings.get(HOSTNAME_VERIFICATION_SETTING, null) != null;, +        if (verificationModeExists && hostnameVerficationExists) {, +            throw new IllegalArgumentException("[" + HOSTNAME_VERIFICATION_SETTING + "] and [" +, +                    sslConfigurationSettings.verificationMode.getKey() + "] may not be used at the same time");, +        } else if (verificationModeExists) {, +            VerificationMode verificationMode = sslService.getVerificationMode(realmSSLSettings, Settings.EMPTY);, +            if (verificationMode == VerificationMode.FULL) {, +                options.setSSLSocketVerifier(new HostNameSSLSocketVerifier(true));, +            }, +        } else if (hostnameVerficationExists) {, +            new DeprecationLogger(logger).deprecated("the setting [{}] has been deprecated and will be removed in a future version. use " +, +                            "[{}] instead", RealmSettings.getFullSettingKey(config, HOSTNAME_VERIFICATION_SETTING),, +                    RealmSettings.getFullSettingKey(config, "ssl." + sslConfigurationSettings.verificationMode.getKey()));, +            if (realmSettings.getAsBoolean(HOSTNAME_VERIFICATION_SETTING, true)) {, +                options.setSSLSocketVerifier(new HostNameSSLSocketVerifier(true));, +            }, +        } else {, +    private ServerSet serverSet(RealmConfig realmConfig, SSLService clientSSLService, LDAPServers ldapServers) {, +        Settings settings = realmConfig.settings();, +                connectionOptions(realmConfig, sslService, logger));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +        downLevelADAuthenticator = new DownLevelADAuthenticator(config, timeout, logger, groupResolver, domainDN, sslService);, +        final SSLService sslService;, +        final RealmConfig config;, +        DownLevelADAuthenticator(RealmConfig config, TimeValue timeout, Logger logger, GroupsResolver groupsResolver, String domainDN,, +                                 SSLService sslService) {, +            super(config.settings(), timeout, logger, groupsResolver, domainDN);, +            this.settings = config.settings();, +            this.sslService = sslService;, +            this.config = config;, +                final LDAPConnectionOptions options = connectionOptions(config, sslService, logger);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authc/ldap/support/SessionFactory.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.xpack.security.authc.RealmSettings;, +import org.elasticsearch.xpack.ssl.VerificationMode;, +        this.serverSet = serverSet(config, sslService, ldapServers);, +    protected static LDAPConnectionOptions connectionOptions(RealmConfig config, SSLService sslService, Logger logger) {, +        Settings realmSettings = config.settings();, +        options.setConnectTimeoutMillis(Math.toIntExact(realmSettings.getAsTime(TIMEOUT_TCP_CONNECTION_SETTING, TIMEOUT_DEFAULT).millis()));, +        options.setFollowReferrals(realmSettings.getAsBoolean(FOLLOW_REFERRALS_SETTING, true));, +        options.setResponseTimeoutMillis(realmSettings.getAsTime(TIMEOUT_TCP_READ_SETTING, TIMEOUT_DEFAULT).millis());, +        SSLConfigurationSettings sslConfigurationSettings = SSLConfigurationSettings.withoutPrefix();, +        final Settings realmSSLSettings = realmSettings.getByPrefix("ssl.");, +        final boolean verificationModeExists = sslConfigurationSettings.verificationMode.exists(realmSSLSettings);, +        final boolean hostnameVerficationExists = realmSettings.get(HOSTNAME_VERIFICATION_SETTING, null) != null;, +        if (verificationModeExists && hostnameVerficationExists) {, +            throw new IllegalArgumentException("[" + HOSTNAME_VERIFICATION_SETTING + "] and [" +, +                    sslConfigurationSettings.verificationMode.getKey() + "] may not be used at the same time");, +        } else if (verificationModeExists) {, +            VerificationMode verificationMode = sslService.getVerificationMode(realmSSLSettings, Settings.EMPTY);, +            if (verificationMode == VerificationMode.FULL) {, +                options.setSSLSocketVerifier(new HostNameSSLSocketVerifier(true));, +            }, +        } else if (hostnameVerficationExists) {, +            new DeprecationLogger(logger).deprecated("the setting [{}] has been deprecated and will be removed in a future version. use " +, +                            "[{}] instead", RealmSettings.getFullSettingKey(config, HOSTNAME_VERIFICATION_SETTING),, +                    RealmSettings.getFullSettingKey(config, "ssl." + sslConfigurationSettings.verificationMode.getKey()));, +            if (realmSettings.getAsBoolean(HOSTNAME_VERIFICATION_SETTING, true)) {, +                options.setSSLSocketVerifier(new HostNameSSLSocketVerifier(true));, +            }, +        } else {, +    private ServerSet serverSet(RealmConfig realmConfig, SSLService clientSSLService, LDAPServers ldapServers) {, +        Settings settings = realmConfig.settings();, +                connectionOptions(realmConfig, sslService, logger));, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/security/authc/ldap/AbstractActiveDirectoryIntegTests.java]