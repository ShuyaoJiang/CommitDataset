[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/restart/TransportNodesRestartAction.java, +        }, request.delay, ThreadPool.ExecutionType.THREADED);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/restart/TransportNodesRestartAction.java, +        }, request.delay, ThreadPool.ExecutionType.THREADED);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +    private volatile ScheduledFuture nodesSamplerFuture;, +    private volatile boolean closed;, +, +        this.nodesSamplerFuture = threadPool.schedule(nodesSampler, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +        closed = true;, +            if (closed) {, +                return;, +            }, +, +            if (!closed) {, +                nodesSamplerFuture = threadPool.schedule(this, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +            }, +            if (closed) {, +                return;, +            }, +, +            if (!closed) {, +                nodesSamplerFuture = threadPool.schedule(this, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/restart/TransportNodesRestartAction.java, +        }, request.delay, ThreadPool.ExecutionType.THREADED);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +    private volatile ScheduledFuture nodesSamplerFuture;, +    private volatile boolean closed;, +, +        this.nodesSamplerFuture = threadPool.schedule(nodesSampler, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +        closed = true;, +            if (closed) {, +                return;, +            }, +, +            if (!closed) {, +                nodesSamplerFuture = threadPool.schedule(this, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +            }, +            if (closed) {, +                return;, +            }, +, +            if (!closed) {, +                nodesSamplerFuture = threadPool.schedule(this, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/index/NodeMappingCreatedAction.java, +        }, timeout, ThreadPool.ExecutionType.THREADED);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/restart/TransportNodesRestartAction.java, +        }, request.delay, ThreadPool.ExecutionType.THREADED);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +    private volatile ScheduledFuture nodesSamplerFuture;, +    private volatile boolean closed;, +, +        this.nodesSamplerFuture = threadPool.schedule(nodesSampler, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +        closed = true;, +            if (closed) {, +                return;, +            }, +, +            if (!closed) {, +                nodesSamplerFuture = threadPool.schedule(this, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +            }, +            if (closed) {, +                return;, +            }, +, +            if (!closed) {, +                nodesSamplerFuture = threadPool.schedule(this, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/index/NodeMappingCreatedAction.java, +        }, timeout, ThreadPool.ExecutionType.THREADED);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +        this.reconnectToNodes = threadPool.schedule(new ReconnectToNodes(), reconnectInterval, ThreadPool.ExecutionType.THREADED);, +            if (lifecycle.started()) {, +                reconnectToNodes = threadPool.schedule(this, reconnectInterval, ThreadPool.ExecutionType.THREADED);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/restart/TransportNodesRestartAction.java, +        }, request.delay, ThreadPool.ExecutionType.THREADED);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +    private volatile ScheduledFuture nodesSamplerFuture;, +    private volatile boolean closed;, +, +        this.nodesSamplerFuture = threadPool.schedule(nodesSampler, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +        closed = true;, +            if (closed) {, +                return;, +            }, +, +            if (!closed) {, +                nodesSamplerFuture = threadPool.schedule(this, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +            }, +            if (closed) {, +                return;, +            }, +, +            if (!closed) {, +                nodesSamplerFuture = threadPool.schedule(this, nodesSamplerInterval, ThreadPool.ExecutionType.THREADED);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/index/NodeMappingCreatedAction.java]