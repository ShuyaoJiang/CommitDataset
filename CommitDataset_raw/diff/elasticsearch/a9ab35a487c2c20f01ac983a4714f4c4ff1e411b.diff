[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +import org.elasticsearch.index.engine.CommitStats;, +    private Map<ShardRouting, ShardStats> shardStatsMap;, +    public Map<ShardRouting, ShardStats> asMap() {, +            Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();, +                shardStatsMap.put(ss.getShardRouting(), ss);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +import org.elasticsearch.index.engine.CommitStats;, +    private Map<ShardRouting, ShardStats> shardStatsMap;, +    public Map<ShardRouting, ShardStats> asMap() {, +            Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();, +                shardStatsMap.put(ss.getShardRouting(), ss);, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestShardsAction.java, +import org.elasticsearch.action.admin.indices.stats.ShardStats;, +import org.elasticsearch.index.engine.CommitStats;, +import org.elasticsearch.index.engine.Engine;, +        table.addCell("sync_id", "alias:sync_id;default:false;desc:sync id");, +, +            ShardStats shardStats = stats.asMap().get(shard);, +            CommonStats commonStats = null;, +            CommitStats commitStats = null;, +            if (shardStats != null) {, +                commonStats = shardStats.getStats();, +                commitStats = shardStats.getCommitStats();, +            }, +            table.addCell(commonStats == null ? null : commonStats.getDocs().getCount());, +            table.addCell(commonStats == null ? null : commonStats.getStore().getSize());, +            table.addCell(commitStats == null ? null : commitStats.getUserData().get(Engine.SYNC_COMMIT_ID));, +, +            table.addCell(commonStats == null ? null : commonStats.getCompletion().getSize());, +            table.addCell(commonStats == null ? null : commonStats.getFieldData().getMemorySize());, +            table.addCell(commonStats == null ? null : commonStats.getFieldData().getEvictions());, +            table.addCell(commonStats == null ? null : commonStats.getQueryCache().getMemorySize());, +            table.addCell(commonStats == null ? null : commonStats.getQueryCache().getEvictions());, +            table.addCell(commonStats == null ? null : commonStats.getFlush().getTotal());, +            table.addCell(commonStats == null ? null : commonStats.getFlush().getTotalTime());, +            table.addCell(commonStats == null ? null : commonStats.getGet().current());, +            table.addCell(commonStats == null ? null : commonStats.getGet().getTime());, +            table.addCell(commonStats == null ? null : commonStats.getGet().getCount());, +            table.addCell(commonStats == null ? null : commonStats.getGet().getExistsTime());, +            table.addCell(commonStats == null ? null : commonStats.getGet().getExistsCount());, +            table.addCell(commonStats == null ? null : commonStats.getGet().getMissingTime());, +            table.addCell(commonStats == null ? null : commonStats.getGet().getMissingCount());, +            table.addCell(commonStats == null ? null : commonStats.getIndexing().getTotal().getDeleteCurrent());, +            table.addCell(commonStats == null ? null : commonStats.getIndexing().getTotal().getDeleteTime());, +            table.addCell(commonStats == null ? null : commonStats.getIndexing().getTotal().getDeleteCount());, +            table.addCell(commonStats == null ? null : commonStats.getIndexing().getTotal().getIndexCurrent());, +            table.addCell(commonStats == null ? null : commonStats.getIndexing().getTotal().getIndexTime());, +            table.addCell(commonStats == null ? null : commonStats.getIndexing().getTotal().getIndexCount());, +            table.addCell(commonStats == null ? null : commonStats.getIndexing().getTotal().getIndexFailedCount());, +            table.addCell(commonStats == null ? null : commonStats.getMerge().getCurrent());, +            table.addCell(commonStats == null ? null : commonStats.getMerge().getCurrentNumDocs());, +            table.addCell(commonStats == null ? null : commonStats.getMerge().getCurrentSize());, +            table.addCell(commonStats == null ? null : commonStats.getMerge().getTotal());, +            table.addCell(commonStats == null ? null : commonStats.getMerge().getTotalNumDocs());, +            table.addCell(commonStats == null ? null : commonStats.getMerge().getTotalSize());, +            table.addCell(commonStats == null ? null : commonStats.getMerge().getTotalTime());, +            table.addCell(commonStats == null ? null : commonStats.getPercolate().getCurrent());, +            table.addCell(commonStats == null ? null : commonStats.getPercolate().getMemorySize());, +            table.addCell(commonStats == null ? null : commonStats.getPercolate().getNumQueries());, +            table.addCell(commonStats == null ? null : commonStats.getPercolate().getTime());, +            table.addCell(commonStats == null ? null : commonStats.getPercolate().getCount());, +            table.addCell(commonStats == null ? null : commonStats.getRefresh().getTotal());, +            table.addCell(commonStats == null ? null : commonStats.getRefresh().getTotalTime());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getFetchCurrent());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getFetchTime());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getFetchCount());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getOpenContexts());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getQueryCurrent());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getQueryTime());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getQueryCount());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getScrollCurrent());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getScrollTime());, +            table.addCell(commonStats == null ? null : commonStats.getSearch().getTotal().getScrollCount());, +            table.addCell(commonStats == null ? null : commonStats.getSegments().getCount());, +            table.addCell(commonStats == null ? null : commonStats.getSegments().getMemory());, +            table.addCell(commonStats == null ? null : commonStats.getSegments().getIndexWriterMemory());, +            table.addCell(commonStats == null ? null : commonStats.getSegments().getIndexWriterMaxMemory());, +            table.addCell(commonStats == null ? null : commonStats.getSegments().getVersionMapMemory());, +            table.addCell(commonStats == null ? null : commonStats.getSegments().getBitsetMemory());, +            table.addCell(commonStats == null ? null : commonStats.getWarmer().current());, +            table.addCell(commonStats == null ? null : commonStats.getWarmer().total());, +            table.addCell(commonStats == null ? null : commonStats.getWarmer().totalTime());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +import org.elasticsearch.index.engine.CommitStats;, +    private Map<ShardRouting, ShardStats> shardStatsMap;, +    public Map<ShardRouting, ShardStats> asMap() {, +            Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();, +                shardStatsMap.put(ss.getShardRouting(), ss);, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestShardsAction.java, +import org.elasticsearch.action.admin.indices.stats.ShardStats;, +import org.elasticsearch.index.engine.CommitStats;, +import org.elasticsearch.index.engine.Engine;, +        table.addCell("sync_id", "alias:sync_id;default:false;desc:sync id");, +, +            ShardStats shardStats = stats.asMap().get(shard);, +            CommonStats commonStats = null;, +            CommitStats commitStats = null;, +            if (shardStats != null) {, +                commonStats = shardStats.getStats();]