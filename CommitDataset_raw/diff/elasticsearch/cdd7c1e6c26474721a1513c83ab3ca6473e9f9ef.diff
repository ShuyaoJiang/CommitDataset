[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import java.util.List;, +    private volatile Map<String, List<String>> forcedAwarenessAttributes;, +        Map<String, List<String>> forcedAwarenessAttributes = new HashMap<>();, +            List<String> aValues = entry.getValue().getAsList("values");, +            if (aValues.size() > 0) {, +            List<String> fullValues = forcedAwarenessAttributes.get(awarenessAttribute);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import java.util.List;, +    private volatile Map<String, List<String>> forcedAwarenessAttributes;, +        Map<String, List<String>> forcedAwarenessAttributes = new HashMap<>();, +            List<String> aValues = entry.getValue().getAsList("values");, +            if (aValues.size() > 0) {, +            List<String> fullValues = forcedAwarenessAttributes.get(awarenessAttribute);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +            super(new ListKey(key), (s) -> Setting.arrayToParsableString(defaultStringValue.apply(s)), parser,, +            List<String> array = settings.getAsList(getKey(), null);, +                List<String> asList = defaultSettings.getAsList(getKey(), null);, +                if (asList == null) {, +                    builder.putList(getKey(), defaultStringValue.apply(defaultSettings));, +                    builder.putList(getKey(), asList);, +    private static String arrayToParsableString(List<String> array) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import java.util.List;, +    private volatile Map<String, List<String>> forcedAwarenessAttributes;, +        Map<String, List<String>> forcedAwarenessAttributes = new HashMap<>();, +            List<String> aValues = entry.getValue().getAsList("values");, +            if (aValues.size() > 0) {, +            List<String> fullValues = forcedAwarenessAttributes.get(awarenessAttribute);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +            super(new ListKey(key), (s) -> Setting.arrayToParsableString(defaultStringValue.apply(s)), parser,, +            List<String> array = settings.getAsList(getKey(), null);, +                List<String> asList = defaultSettings.getAsList(getKey(), null);, +                if (asList == null) {, +                    builder.putList(getKey(), defaultStringValue.apply(defaultSettings));, +                    builder.putList(getKey(), asList);, +    private static String arrayToParsableString(List<String> array) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +     * The values associated with a setting key as an immutable list., +     * @param key The setting key to load the list by, +     * @return The setting list values, +    public List<String> getAsList(String key) throws SettingsException {, +        return getAsList(key, Collections.emptyList());, +     * The values associated with a setting key as an immutable list., +     * @param key The setting key to load the list by, +     * @return The setting list values, +    public List<String> getAsList(String key, List<String> defaultValue) throws SettingsException {, +        return getAsList(key, defaultValue, true);, +     * The values associated with a setting key as an immutable list., +     * @param key  The setting key to load the list by, +     * @param defaultValue   The default value to use if no value is specified, +     * @return The setting list values, +    public List<String> getAsList(String key, List<String> defaultValue, Boolean commaDelimited) throws SettingsException {, +                return ((List<String>) valueFromPrefix); // it's already unmodifiable since the builder puts it as a such, +            return defaultValue;, +        return Collections.unmodifiableList(result);, +                    builder.putList(key, (List<String>) value);, +                builder.putList(key, list);, +                return putList(key, (List)value);, +        public Builder putList(String setting, String... values) {, +            return putList(setting, Arrays.asList(values));, +        public Builder putList(String setting, List<String> values) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import java.util.List;, +    private volatile Map<String, List<String>> forcedAwarenessAttributes;, +        Map<String, List<String>> forcedAwarenessAttributes = new HashMap<>();, +            List<String> aValues = entry.getValue().getAsList("values");, +            if (aValues.size() > 0) {, +            List<String> fullValues = forcedAwarenessAttributes.get(awarenessAttribute);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +            super(new ListKey(key), (s) -> Setting.arrayToParsableString(defaultStringValue.apply(s)), parser,, +            List<String> array = settings.getAsList(getKey(), null);, +                List<String> asList = defaultSettings.getAsList(getKey(), null);, +                if (asList == null) {, +                    builder.putList(getKey(), defaultStringValue.apply(defaultSettings));, +                    builder.putList(getKey(), asList);, +    private static String arrayToParsableString(List<String> array) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +     * The values associated with a setting key as an immutable list., +     * @param key The setting key to load the list by, +     * @return The setting list values, +    public List<String> getAsList(String key) throws SettingsException {, +        return getAsList(key, Collections.emptyList());, +     * The values associated with a setting key as an immutable list., +     * @param key The setting key to load the list by, +     * @return The setting list values, +    public List<String> getAsList(String key, List<String> defaultValue) throws SettingsException {, +        return getAsList(key, defaultValue, true);, +     * The values associated with a setting key as an immutable list., +     * @param key  The setting key to load the list by, +     * @param defaultValue   The default value to use if no value is specified, +     * @return The setting list values, +    public List<String> getAsList(String key, List<String> defaultValue, Boolean commaDelimited) throws SettingsException {, +                return ((List<String>) valueFromPrefix); // it's already unmodifiable since the builder puts it as a such, +            return defaultValue;, +        return Collections.unmodifiableList(result);, +                    builder.putList(key, (List<String>) value);, +                builder.putList(key, list);, +                return putList(key, (List)value);, +        public Builder putList(String setting, String... values) {]