[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/test/java/org/elasticsearch/ESExceptionTests.java, +import java.util.Collections;, +    private static final ToXContent.Params PARAMS = new ToXContent.MapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE, "true"));, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ex.toXContent(otherBuilder, PARAMS);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/test/java/org/elasticsearch/ESExceptionTests.java, +import java.util.Collections;, +    private static final ToXContent.Params PARAMS = new ToXContent.MapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE, "true"));, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ex.toXContent(otherBuilder, PARAMS);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +import java.util.Collections;, +            x.toXContent(builder, new ToXContent.MapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE, "true")));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/test/java/org/elasticsearch/ESExceptionTests.java, +import java.util.Collections;, +    private static final ToXContent.Params PARAMS = new ToXContent.MapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE, "true"));, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ex.toXContent(builder, PARAMS);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +            ex.toXContent(otherBuilder, PARAMS);, +            ElasticsearchException.toXContent(builder, PARAMS, ex);, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +import java.util.Collections;, +            x.toXContent(builder, new ToXContent.MapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE, "true")));, +++ b/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java, +import org.elasticsearch.ElasticsearchException;, +import java.util.Collections;, +        response.toXContent(builder, new ToXContent.MapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE, "true")));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {]