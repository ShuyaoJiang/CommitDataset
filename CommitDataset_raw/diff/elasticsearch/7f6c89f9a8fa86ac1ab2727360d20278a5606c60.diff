[+++ b/core/src/main/java/org/elasticsearch/action/search/RemoteClusterConnection.java, +    private final String clusterAlias;, +     * @param clusterAlias the configured alias of the cluster to connect to, +    RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,, +        this.clusterAlias = clusterAlias;, +                        throw new IllegalStateException("No node available for cluster: " + clusterAlias + " nodes: " + connectedNodes);, +     * Returns the alias / name of the remote cluster, +    public String getClusterAlias() {, +        return clusterAlias;, +                                new SniffClusterStateResponseHandler(transportService, connection, listener, seedNodes,, +                                    cancellableThreads));, +                        clusterAlias), ex);, +        /* This class handles the _state response from the remote cluster when sniffing nodes to connect to */, +        private class SniffClusterStateResponseHandler implements TransportResponseHandler<ClusterStateResponse> {, +            SniffClusterStateResponseHandler(TransportService transportService, Transport.Connection connection,, +                                             ActionListener<Void> listener, Iterator<DiscoveryNode> seedNodes,, +                                             CancellableThreads cancellableThreads) {, +                            clusterAlias), ex);, +                    () -> new ParameterizedMessage("fetching nodes from external cluster {} failed", clusterAlias),, +++ b/core/src/main/java/org/elasticsearch/action/search/RemoteClusterConnection.java, +    private final String clusterAlias;, +     * @param clusterAlias the configured alias of the cluster to connect to, +    RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,, +        this.clusterAlias = clusterAlias;, +                        throw new IllegalStateException("No node available for cluster: " + clusterAlias + " nodes: " + connectedNodes);, +     * Returns the alias / name of the remote cluster, +    public String getClusterAlias() {, +        return clusterAlias;, +                                new SniffClusterStateResponseHandler(transportService, connection, listener, seedNodes,, +                                    cancellableThreads));, +                        clusterAlias), ex);, +        /* This class handles the _state response from the remote cluster when sniffing nodes to connect to */, +        private class SniffClusterStateResponseHandler implements TransportResponseHandler<ClusterStateResponse> {, +            SniffClusterStateResponseHandler(TransportService transportService, Transport.Connection connection,, +                                             ActionListener<Void> listener, Iterator<DiscoveryNode> seedNodes,, +                                             CancellableThreads cancellableThreads) {, +                            clusterAlias), ex);, +                    () -> new ParameterizedMessage("fetching nodes from external cluster {} failed", clusterAlias),, +++ b/core/src/main/java/org/elasticsearch/action/search/RemoteClusterService.java, +                    response -> {, +                            connectionListener.onResponse(response);, +                    exception -> {, +                            connectionListener.onFailure(exception);, +                        logger.error("failed to update seed list for cluster: " + entry.getKey(), exception);, +++ b/core/src/main/java/org/elasticsearch/action/search/RemoteClusterConnection.java, +    private final String clusterAlias;, +     * @param clusterAlias the configured alias of the cluster to connect to, +    RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,, +        this.clusterAlias = clusterAlias;, +                        throw new IllegalStateException("No node available for cluster: " + clusterAlias + " nodes: " + connectedNodes);, +     * Returns the alias / name of the remote cluster, +    public String getClusterAlias() {, +        return clusterAlias;, +                                new SniffClusterStateResponseHandler(transportService, connection, listener, seedNodes,, +                                    cancellableThreads));, +                        clusterAlias), ex);, +        /* This class handles the _state response from the remote cluster when sniffing nodes to connect to */, +        private class SniffClusterStateResponseHandler implements TransportResponseHandler<ClusterStateResponse> {, +            SniffClusterStateResponseHandler(TransportService transportService, Transport.Connection connection,, +                                             ActionListener<Void> listener, Iterator<DiscoveryNode> seedNodes,, +                                             CancellableThreads cancellableThreads) {, +                            clusterAlias), ex);, +                    () -> new ParameterizedMessage("fetching nodes from external cluster {} failed", clusterAlias),, +++ b/core/src/main/java/org/elasticsearch/action/search/RemoteClusterService.java, +                    response -> {, +                            connectionListener.onResponse(response);, +                    exception -> {, +                            connectionListener.onFailure(exception);, +                        logger.error("failed to update seed list for cluster: " + entry.getKey(), exception);, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +                throw new IllegalStateException("no node found for id: " + nodeId);]