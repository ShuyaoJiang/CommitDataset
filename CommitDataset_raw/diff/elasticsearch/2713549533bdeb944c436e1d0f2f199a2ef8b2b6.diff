[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        try (final Engine.Searcher searcher = acquireSearcher("doc_stats")) {, +            return new DocsStats(searcher.reader().numDocs(), searcher.reader().numDeletedDocs());, +        }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        try (final Engine.Searcher searcher = acquireSearcher("doc_stats")) {, +            return new DocsStats(searcher.reader().numDocs(), searcher.reader().numDeletedDocs());, +        }, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        try (final Engine.Searcher searcher = acquireSearcher("doc_stats")) {, +            return new DocsStats(searcher.reader().numDocs(), searcher.reader().numDeletedDocs());, +        }, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +++ b/core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        try (final Engine.Searcher searcher = acquireSearcher("doc_stats")) {, +            return new DocsStats(searcher.reader().numDocs(), searcher.reader().numDeletedDocs());, +        }, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +++ b/core/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +import org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;, +import org.elasticsearch.common.lucene.uid.Versions;, +import org.elasticsearch.index.VersionType;, +import org.elasticsearch.index.seqno.SequenceNumbersService;, +import java.util.stream.Collectors;, +import java.util.stream.IntStream;, +import static org.elasticsearch.index.engine.Engine.Operation.Origin.PRIMARY;, +    public void testDocStats() throws IOException {, +        IndexShard indexShard = null;, +        try {, +            indexShard = newStartedShard();, +            final long numDocs = randomIntBetween(2, 32); // at least two documents so we have docs to delete, +            final long numDocsToDelete = randomIntBetween(1, Math.toIntExact(numDocs));, +            for (int i = 0; i < numDocs; i++) {, +                final String id = Integer.toString(i);, +                final ParsedDocument doc =, +                    testParsedDocument(id, id, "test", null, new ParseContext.Document(), new BytesArray("{}"), null);, +                final Engine.Index index =, +                    new Engine.Index(, +                        new Term("_uid", id),, +                        doc,, +                        SequenceNumbersService.UNASSIGNED_SEQ_NO,, +                        0,, +                        Versions.MATCH_ANY,, +                        VersionType.INTERNAL,, +                        PRIMARY,, +                        System.nanoTime(),, +                        -1,, +                        false);, +                final Engine.IndexResult result = indexShard.index(index);, +                assertThat(result.getVersion(), equalTo(1L));, +            }, +, +            indexShard.refresh("test");, +            {, +                final DocsStats docsStats = indexShard.docStats();, +                assertThat(docsStats.getCount(), equalTo(numDocs));, +                assertThat(docsStats.getDeleted(), equalTo(0L));, +            }, +, +            final List<Integer> ids = randomSubsetOf(, +                Math.toIntExact(numDocsToDelete),, +                IntStream.range(0, Math.toIntExact(numDocs)).boxed().collect(Collectors.toList()));, +            for (final Integer i : ids) {, +                final String id = Integer.toString(i);, +                final ParsedDocument doc = testParsedDocument(id, id, "test", null, new ParseContext.Document(), new BytesArray("{}"), null);, +                final Engine.Index index =, +                    new Engine.Index(, +                        new Term("_uid", id),, +                        doc,, +                        SequenceNumbersService.UNASSIGNED_SEQ_NO,, +                        0,, +                        Versions.MATCH_ANY,, +                        VersionType.INTERNAL,, +                        PRIMARY,, +                        System.nanoTime(),, +                        -1,, +                        false);, +                final Engine.IndexResult result = indexShard.index(index);, +                assertThat(result.getVersion(), equalTo(2L));, +            }, +, +            // flush the buffered deletes, +            final FlushRequest flushRequest = new FlushRequest();, +            flushRequest.force(false);, +            flushRequest.waitIfOngoing(false);, +            indexShard.flush(flushRequest);]