[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;, +    private final Validator<T> validator;, +            Validator<T> validator, Property... properties) {, +        this.validator = validator;, +        this(key, defaultValue, parser, (v, s) -> {}, properties);, +    }, +, +    /**, +     * Creates a new {@code Setting} instance., +     *, +     * @param key          the settings key for this setting, +     * @param defaultValue a default value function that results a string representation of the default value, +     * @param parser       a parser that parses a string representation into the concrete type for this setting, +     * @param validator    a {@link Validator} for validating this setting, +     * @param properties   properties for this setting, +     */, +    public Setting(, +            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {, +        this(key, null, defaultValue, parser, validator, properties);, +     * Creates a new {@code Setting} instance., +     *, +     * @param key          the settings key for this setting, +     * @param defaultValue a default value function that results a string representation of the default value, +     * @param parser       a parser that parses a string representation into the concrete type for this setting, +     * @param validator    a {@link Validator} for validating this setting, +     * @param properties   properties for this setting, +     */, +    public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {, +        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties);, +    }, +, +    /**, +        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties);, +        return get(settings, true);, +    }, +, +    private T get(Settings settings, boolean validate) {, +            T parsed = parser.apply(value);, +            if (validate) {, +                final Iterator<Setting<T>> it = validator.settings();, +                final Map<Setting<T>, T> map;, +                if (it.hasNext()) {, +                    map = new HashMap<>();, +                    while (it.hasNext()) {, +                        final Setting<T> setting = it.next();, +                        map.put(setting, setting.get(settings, false)); // we have to disable validation or we will stack overflow, +                    }, +                } else {, +                    map = Collections.emptyMap();, +                }, +                validator.validate(parsed, map);, +            }, +            return parsed;, +    /**, +     * Represents a validator for a setting. The {@link #validate(Object, Map)} method is invoked with the value of this setting and a map, +     * from the settings specified by {@link #settings()}} to their values. All these values come from the same {@link Settings} instance., +     *, +     * @param <T> the type of the {@link Setting}, +     */, +    @FunctionalInterface, +    public interface Validator<T> {, +, +        /**, +         * The validation routine for this validator., +         *, +         * @param value    the value of this setting, +         * @param settings a map from the settings specified by {@link #settings()}} to their values, +         */, +        void validate(T value, Map<Setting<T>, T> settings);, +, +        /**, +         * The settings needed by this validator., +         *, +         * @return the settings needed to validate; these can be used for cross-settings validation, +         */, +        default Iterator<Setting<T>> settings() {, +            return Collections.emptyIterator();, +        }, +, +    }, +                T inst = get(current);, +                return inst;, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;, +    private final Validator<T> validator;, +            Validator<T> validator, Property... properties) {, +        this.validator = validator;, +        this(key, defaultValue, parser, (v, s) -> {}, properties);, +    }, +, +    /**, +     * Creates a new {@code Setting} instance., +     *, +     * @param key          the settings key for this setting, +     * @param defaultValue a default value function that results a string representation of the default value]