[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCacheListener;, +import java.util.ArrayList;, +import java.util.List;, +        private final IndicesFieldDataCacheListener indicesFieldDataCacheListener;, +        protected FieldBased(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;, +            assert key != null && key.listeners != null;, +, +            for (Listener listener : key.listeners) {, +                listener.onUnload(fieldNames, fieldDataType, notification.wasEvicted(), sizeInBytes, value);, +            }, +                    key.listeners.add(indicesFieldDataCacheListener);, +                                key.listeners.add(shard.fieldData());, +                    for (Listener listener : key.listeners) {, +                        listener.onLoad(fieldNames, fieldDataType, fieldData);, +            final List<Listener> listeners = new ArrayList<>(); // optional stats listener, +        public Resident(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder(), indicesFieldDataCacheListener);, +        public Soft(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder().softValues(), indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCacheListener;, +import java.util.ArrayList;, +import java.util.List;, +        private final IndicesFieldDataCacheListener indicesFieldDataCacheListener;, +        protected FieldBased(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;, +            assert key != null && key.listeners != null;, +, +            for (Listener listener : key.listeners) {, +                listener.onUnload(fieldNames, fieldDataType, notification.wasEvicted(), sizeInBytes, value);, +            }, +                    key.listeners.add(indicesFieldDataCacheListener);, +                                key.listeners.add(shard.fieldData());, +                    for (Listener listener : key.listeners) {, +                        listener.onLoad(fieldNames, fieldDataType, fieldData);, +            final List<Listener> listeners = new ArrayList<>(); // optional stats listener, +        public Resident(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder(), indicesFieldDataCacheListener);, +        public Soft(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder().softValues(), indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCacheListener;, +    private final IndicesFieldDataCacheListener indicesFieldDataCacheListener;, +        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCacheListener(circuitBreakerService)), circuitBreakerService, new IndicesFieldDataCacheListener(circuitBreakerService));, +                                 CircuitBreakerService circuitBreakerService, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +        this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;, +                            cache = new IndexFieldDataCache.Resident(indexService, fieldNames, type, indicesFieldDataCacheListener);, +                            cache = new IndexFieldDataCache.Soft(indexService, fieldNames, type, indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCacheListener;, +import java.util.ArrayList;, +import java.util.List;, +        private final IndicesFieldDataCacheListener indicesFieldDataCacheListener;, +        protected FieldBased(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;, +            assert key != null && key.listeners != null;, +, +            for (Listener listener : key.listeners) {, +                listener.onUnload(fieldNames, fieldDataType, notification.wasEvicted(), sizeInBytes, value);, +            }, +                    key.listeners.add(indicesFieldDataCacheListener);, +                                key.listeners.add(shard.fieldData());, +                    for (Listener listener : key.listeners) {, +                        listener.onLoad(fieldNames, fieldDataType, fieldData);, +            final List<Listener> listeners = new ArrayList<>(); // optional stats listener, +        public Resident(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder(), indicesFieldDataCacheListener);, +        public Soft(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder().softValues(), indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCacheListener;, +    private final IndicesFieldDataCacheListener indicesFieldDataCacheListener;, +        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCacheListener(circuitBreakerService)), circuitBreakerService, new IndicesFieldDataCacheListener(circuitBreakerService));, +                                 CircuitBreakerService circuitBreakerService, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +        this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;, +                            cache = new IndexFieldDataCache.Resident(indexService, fieldNames, type, indicesFieldDataCacheListener);, +                            cache = new IndexFieldDataCache.Soft(indexService, fieldNames, type, indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ShardFieldData.java, +    public ShardFieldData(ShardId shardId, @IndexSettings Settings indexSettings) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCacheListener;, +import java.util.ArrayList;, +import java.util.List;, +        private final IndicesFieldDataCacheListener indicesFieldDataCacheListener;, +        protected FieldBased(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;, +            assert key != null && key.listeners != null;, +, +            for (Listener listener : key.listeners) {, +                listener.onUnload(fieldNames, fieldDataType, notification.wasEvicted(), sizeInBytes, value);, +            }, +                    key.listeners.add(indicesFieldDataCacheListener);, +                                key.listeners.add(shard.fieldData());, +                    for (Listener listener : key.listeners) {, +                        listener.onLoad(fieldNames, fieldDataType, fieldData);, +            final List<Listener> listeners = new ArrayList<>(); // optional stats listener, +        public Resident(@Nullable IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder(), indicesFieldDataCacheListener);]