[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    private final void checkTypeName(MappedFieldType other) {, +            throw new IllegalArgumentException("mapper [" + names().fullName() + "] cannot be changed from type [" + typeName() + "] to [" + other.typeName() + "]");, +        checkTypeName(other);, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    private final void checkTypeName(MappedFieldType other) {, +            throw new IllegalArgumentException("mapper [" + names().fullName() + "] cannot be changed from type [" + typeName() + "] to [" + other.typeName() + "]");, +        checkTypeName(other);, +, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    private final void checkTypeName(MappedFieldType other) {, +            throw new IllegalArgumentException("mapper [" + names().fullName() + "] cannot be changed from type [" + typeName() + "] to [" + other.typeName() + "]");, +        checkTypeName(other);, +, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldTypeTestCase.java, +        fieldType.checkCompatibility(fieldType, conflicts, random().nextBoolean()); // no exception, +            fieldType.checkCompatibility(bogus, conflicts, random().nextBoolean());, +        try {, +            fieldType.checkCompatibility(other, conflicts, random().nextBoolean());, +            fail();, +        } catch (IllegalArgumentException e) {, +            assertTrue(e.getMessage(), e.getMessage().contains("cannot be changed from type"));, +        }, +        assertTrue(conflicts.toString(), conflicts.isEmpty());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    private final void checkTypeName(MappedFieldType other) {, +            throw new IllegalArgumentException("mapper [" + names().fullName() + "] cannot be changed from type [" + typeName() + "] to [" + other.typeName() + "]");, +        checkTypeName(other);, +, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldTypeTestCase.java, +        fieldType.checkCompatibility(fieldType, conflicts, random().nextBoolean()); // no exception, +            fieldType.checkCompatibility(bogus, conflicts, random().nextBoolean());, +        try {, +            fieldType.checkCompatibility(other, conflicts, random().nextBoolean());, +            fail();, +        } catch (IllegalArgumentException e) {, +            assertTrue(e.getMessage(), e.getMessage().contains("cannot be changed from type"));, +        }, +        assertTrue(conflicts.toString(), conflicts.isEmpty());, +++ b/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingTests.java, +            assertTrue(e.getMessage(), e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));, +            assertTrue(e.getMessage(), e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));, +            assertTrue(e.getMessage(), e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));, +            assertTrue(e.getMessage(), e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    private final void checkTypeName(MappedFieldType other) {, +            throw new IllegalArgumentException("mapper [" + names().fullName() + "] cannot be changed from type [" + typeName() + "] to [" + other.typeName() + "]");, +        checkTypeName(other);, +, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldTypeTestCase.java, +        fieldType.checkCompatibility(fieldType, conflicts, random().nextBoolean()); // no exception, +            fieldType.checkCompatibility(bogus, conflicts, random().nextBoolean());, +        try {, +            fieldType.checkCompatibility(other, conflicts, random().nextBoolean());, +            fail();, +        } catch (IllegalArgumentException e) {, +            assertTrue(e.getMessage(), e.getMessage().contains("cannot be changed from type"));, +        }, +        assertTrue(conflicts.toString(), conflicts.isEmpty());, +++ b/core/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingTests.java, +            assertTrue(e.getMessage(), e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));, +            assertTrue(e.getMessage(), e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));, +            assertTrue(e.getMessage(), e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));, +            assertTrue(e.getMessage(), e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    private final void checkTypeName(MappedFieldType other) {, +            throw new IllegalArgumentException("mapper [" + names().fullName() + "] cannot be changed from type [" + typeName() + "] to [" + other.typeName() + "]");, +        checkTypeName(other);, +, +++ /dev/null]