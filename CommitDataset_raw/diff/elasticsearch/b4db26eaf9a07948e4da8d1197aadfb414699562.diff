[+++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +public class FieldSortBuilder extends SortBuilder<FieldSortBuilder> {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +public class FieldSortBuilder extends SortBuilder<FieldSortBuilder> {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +public class GeoDistanceSortBuilder extends SortBuilder<GeoDistanceSortBuilder>, +    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder<?> nestedFilter) {, +    public QueryBuilder<?> getNestedFilter() {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +        SortOrder order = SortOrder.ASC;, +        QueryBuilder<?> nestedFilter = null;, +                    order = parser.booleanValue() ? SortOrder.DESC : SortOrder.ASC;, +                    order = SortOrder.fromString(parser.text());, +        result.order(order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +public class FieldSortBuilder extends SortBuilder<FieldSortBuilder> {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +public class GeoDistanceSortBuilder extends SortBuilder<GeoDistanceSortBuilder>, +    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder<?> nestedFilter) {, +    public QueryBuilder<?> getNestedFilter() {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +        SortOrder order = SortOrder.ASC;, +        QueryBuilder<?> nestedFilter = null;, +                    order = parser.booleanValue() ? SortOrder.DESC : SortOrder.ASC;, +                    order = SortOrder.fromString(parser.text());, +        result.order(order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +public class ScoreSortBuilder extends SortBuilder<ScoreSortBuilder> implements NamedWriteable<ScoreSortBuilder>,, +    public ScoreSortBuilder() {, +        // order defaults to desc when sorting on the _score, +        order(SortOrder.DESC);, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +        ScoreSortBuilder builder = new ScoreSortBuilder().order(SortOrder.readOrderFrom(in));, +        return builder;, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +public class FieldSortBuilder extends SortBuilder<FieldSortBuilder> {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +public class GeoDistanceSortBuilder extends SortBuilder<GeoDistanceSortBuilder>, +    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder<?> nestedFilter) {, +    public QueryBuilder<?> getNestedFilter() {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +        SortOrder order = SortOrder.ASC;, +        QueryBuilder<?> nestedFilter = null;, +                    order = parser.booleanValue() ? SortOrder.DESC : SortOrder.ASC;, +                    order = SortOrder.fromString(parser.text());, +        result.order(order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +public class ScoreSortBuilder extends SortBuilder<ScoreSortBuilder> implements NamedWriteable<ScoreSortBuilder>,, +    public ScoreSortBuilder() {, +        // order defaults to desc when sorting on the _score, +        order(SortOrder.DESC);, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +        ScoreSortBuilder builder = new ScoreSortBuilder().order(SortOrder.readOrderFrom(in));, +        return builder;, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +public class ScriptSortBuilder extends SortBuilder<ScriptSortBuilder> {, +    public ScriptSortBuilder setNestedFilter(QueryBuilder<?> nestedFilter) {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +public class FieldSortBuilder extends SortBuilder<FieldSortBuilder> {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +public class GeoDistanceSortBuilder extends SortBuilder<GeoDistanceSortBuilder>, +    public GeoDistanceSortBuilder setNestedFilter(QueryBuilder<?> nestedFilter) {, +    public QueryBuilder<?> getNestedFilter() {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +        SortOrder order = SortOrder.ASC;, +        QueryBuilder<?> nestedFilter = null;, +                    order = parser.booleanValue() ? SortOrder.DESC : SortOrder.ASC;, +                    order = SortOrder.fromString(parser.text());, +        result.order(order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +public class ScoreSortBuilder extends SortBuilder<ScoreSortBuilder> implements NamedWriteable<ScoreSortBuilder>,, +    public ScoreSortBuilder() {, +        // order defaults to desc when sorting on the _score, +        order(SortOrder.DESC);, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +        ScoreSortBuilder builder = new ScoreSortBuilder().order(SortOrder.readOrderFrom(in));, +        return builder;, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +public class ScriptSortBuilder extends SortBuilder<ScriptSortBuilder> {, +    public ScriptSortBuilder setNestedFilter(QueryBuilder<?> nestedFilter) {, +        builder.field(ORDER_FIELD.getPreferredName(), order);, +++ b/core/src/main/java/org/elasticsearch/search/sort/SortBuilder.java, +import org.elasticsearch.common.ParseField;, +import java.util.Objects;, +, +public abstract class SortBuilder<T extends SortBuilder<?>> implements ToXContent {, +, +    protected SortOrder order = SortOrder.ASC;, +    public static final ParseField ORDER_FIELD = new ParseField("order");, +     * Set the order of sorting., +    @SuppressWarnings("unchecked"), +    public T order(SortOrder order) {, +        Objects.requireNonNull(order, "sort order cannot be null.");, +        this.order = order;]