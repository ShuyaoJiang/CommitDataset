[+++ b/src/main/java/org/elasticsearch/watcher/actions/ActionBuilders.java, +import org.elasticsearch.watcher.actions.logging.LoggingAction;, +import org.elasticsearch.watcher.support.template.Template;, +    public static LoggingAction.SourceBuilder loggingAction(String id, String text) {, +        return new LoggingAction.SourceBuilder(id).text(text);, +    }, +, +    public static LoggingAction.SourceBuilder loggingAction(String id, Template.SourceBuilder text) {, +        return new LoggingAction.SourceBuilder(id).text(text);, +    }, +, +++ b/src/main/java/org/elasticsearch/watcher/actions/ActionBuilders.java, +import org.elasticsearch.watcher.actions.logging.LoggingAction;, +import org.elasticsearch.watcher.support.template.Template;, +    public static LoggingAction.SourceBuilder loggingAction(String id, String text) {, +        return new LoggingAction.SourceBuilder(id).text(text);, +    }, +, +    public static LoggingAction.SourceBuilder loggingAction(String id, Template.SourceBuilder text) {, +        return new LoggingAction.SourceBuilder(id).text(text);, +    }, +, +++ b/src/main/java/org/elasticsearch/watcher/actions/ActionModule.java, +import org.elasticsearch.watcher.actions.logging.LoggingAction;, +        bind(LoggingAction.Parser.class).asEagerSingleton();, +        parsersBinder.addBinding(LoggingAction.TYPE).to(LoggingAction.Parser.class);, +, +++ b/src/main/java/org/elasticsearch/watcher/actions/ActionBuilders.java, +import org.elasticsearch.watcher.actions.logging.LoggingAction;, +import org.elasticsearch.watcher.support.template.Template;, +    public static LoggingAction.SourceBuilder loggingAction(String id, String text) {, +        return new LoggingAction.SourceBuilder(id).text(text);, +    }, +, +    public static LoggingAction.SourceBuilder loggingAction(String id, Template.SourceBuilder text) {, +        return new LoggingAction.SourceBuilder(id).text(text);, +    }, +, +++ b/src/main/java/org/elasticsearch/watcher/actions/ActionModule.java, +import org.elasticsearch.watcher.actions.logging.LoggingAction;, +        bind(LoggingAction.Parser.class).asEagerSingleton();, +        parsersBinder.addBinding(LoggingAction.TYPE).to(LoggingAction.Parser.class);, +, +++ b/src/main/java/org/elasticsearch/watcher/actions/logging/LoggingAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.watcher.actions.logging;, +, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.watcher.actions.Action;, +import org.elasticsearch.watcher.actions.ActionException;, +import org.elasticsearch.watcher.actions.ActionSettingsException;, +import org.elasticsearch.watcher.support.Variables;, +import org.elasticsearch.watcher.support.template.ScriptTemplate;, +import org.elasticsearch.watcher.support.template.Template;, +import org.elasticsearch.watcher.watch.Payload;, +import org.elasticsearch.watcher.watch.WatchExecutionContext;, +, +import java.io.IOException;, +import java.util.Locale;, +, +/**, + *, + */, +public class LoggingAction extends Action<LoggingAction.Result> {, +, +    public static final String TYPE = "logging";, +, +    private final String category;, +    private final LoggingLevel level;, +    private final Template template;, +, +    private final ESLogger actionLogger;, +, +    public LoggingAction(ESLogger logger, ESLogger actionLogger, @Nullable String category, LoggingLevel level, Template template) {, +        super(logger);, +        this.category = category;, +        this.level = level;, +        this.template = template;, +        this.actionLogger = actionLogger;, +    }, +, +    @Override, +    public String type() {, +        return TYPE;, +    }, +, +    String category() {, +        return category;, +    }]