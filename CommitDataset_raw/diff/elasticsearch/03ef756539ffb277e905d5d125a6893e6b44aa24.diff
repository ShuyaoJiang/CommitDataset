[+++ b/test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java, +                if (original.nodeConnected(node) == false) {, +                    // connecting to an already connected node is a no-op, +            }, +                simulateDisconnect(connection, original, "DISCONNECT: simulated");, +                    simulateDisconnect(connection, original, "DISCONNECT: prevented " + action + " request");, +                if (original.nodeConnected(node) == false) {, +                    // connecting to an already connected node is a no-op, +            }, +                if (original.nodeConnected(node)) {, +                    // connecting to an already connected node is a no-op, +                    return;, +                }, +                    throw new ConnectTransportException(node, "UNRESPONSIVE: simulated");, +     * simulates a disconnect by disconnecting from the underlying transport and throwing a, +     * {@link ConnectTransportException}, +     */, +    private void simulateDisconnect(DiscoveryNode node, Transport transport, String reason) {, +        simulateDisconnect(node, transport, reason, null);, +    }, +, +    /**, +     * simulates a disconnect by disconnecting from the underlying transport and throwing a, +     * {@link ConnectTransportException}, due to a specific cause exception, +     */, +    private void simulateDisconnect(DiscoveryNode node, Transport transport, String reason, @Nullable Throwable e) {, +        if (transport.nodeConnected(node)) {, +            // this a connected node, disconnecting from it will be up the exception, +            transport.disconnectFromNode(node);, +        } else {, +            throw new ConnectTransportException(node, reason, e);, +        }, +    }, +, +    /**, +     * simulates a disconnect by closing the connection and throwing a, +     * {@link ConnectTransportException}, +     */, +    private void simulateDisconnect(Transport.Connection connection, Transport transport, String reason) throws IOException {, +        connection.close();, +        simulateDisconnect(connection.getNode(), transport, reason);, +    }, +, +, +    /**, +++ b/test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java, +                if (original.nodeConnected(node) == false) {, +                    // connecting to an already connected node is a no-op, +            }, +                simulateDisconnect(connection, original, "DISCONNECT: simulated");, +                    simulateDisconnect(connection, original, "DISCONNECT: prevented " + action + " request");, +                if (original.nodeConnected(node) == false) {, +                    // connecting to an already connected node is a no-op, +            }, +                if (original.nodeConnected(node)) {, +                    // connecting to an already connected node is a no-op, +                    return;, +                }, +                    throw new ConnectTransportException(node, "UNRESPONSIVE: simulated");, +     * simulates a disconnect by disconnecting from the underlying transport and throwing a, +     * {@link ConnectTransportException}, +     */, +    private void simulateDisconnect(DiscoveryNode node, Transport transport, String reason) {, +        simulateDisconnect(node, transport, reason, null);, +    }, +, +    /**, +     * simulates a disconnect by disconnecting from the underlying transport and throwing a, +     * {@link ConnectTransportException}, due to a specific cause exception, +     */, +    private void simulateDisconnect(DiscoveryNode node, Transport transport, String reason, @Nullable Throwable e) {, +        if (transport.nodeConnected(node)) {, +            // this a connected node, disconnecting from it will be up the exception, +            transport.disconnectFromNode(node);, +        } else {, +            throw new ConnectTransportException(node, reason, e);, +        }, +    }, +, +    /**, +     * simulates a disconnect by closing the connection and throwing a, +     * {@link ConnectTransportException}, +     */, +    private void simulateDisconnect(Transport.Connection connection, Transport transport, String reason) throws IOException {, +        connection.close();, +        simulateDisconnect(connection.getNode(), transport, reason);, +    }, +, +, +    /**, +++ b/test/framework/src/main/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java, +            (request, channel) -> {, +                    Throwable cause = ExceptionsHelper.unwrapCause(exp);, +                    assertThat(cause, instanceOf(ConnectTransportException.class));, +                    assertThat(((ConnectTransportException)cause).node(), equalTo(nodeA));, +            Throwable cause = ExceptionsHelper.unwrapCause(e);, +            assertThat(cause, instanceOf(ConnectTransportException.class));, +            assertThat(((ConnectTransportException)cause).node(), equalTo(nodeA));, +            serviceB.disconnectFromNode(nodeA);]