[+++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    // this sucks it would be nice to have a better way to construct those?, +                    String msg = readOptionalString();, +                    final int idx = msg.indexOf(" (resource=");, +                    final String resource = msg.substring(idx + " (resource=".length(), msg.length()-1);, +                    msg = msg.substring(0, idx);, +                    return (T) readStackTrace(new CorruptIndexException(msg, resource, readThrowable()), this); // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    // this sucks it would be nice to have a better way to construct those?, +                    String msg = readOptionalString();, +                    final int idx = msg.indexOf(" (resource=");, +                    final String resource = msg.substring(idx + " (resource=".length(), msg.length()-1);, +                    msg = msg.substring(0, idx);, +                    return (T) readStackTrace(new CorruptIndexException(msg, resource, readThrowable()), this); // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    // this sucks it would be nice to have a better way to construct those?, +                    String msg = readOptionalString();, +                    final int idx = msg.indexOf(" (resource=");, +                    final String resource = msg.substring(idx + " (resource=".length(), msg.length()-1);, +                    msg = msg.substring(0, idx);, +                    return (T) readStackTrace(new CorruptIndexException(msg, resource, readThrowable()), this); // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +                new CorruptIndexException("baaaam", "this is my resource"),, +                new IndexFormatTooNewException("tooo new", 1, 1, 1),, +                new IndexFormatTooOldException("tooo new", 1, 1, 1),, +            if (t instanceof IndexFormatTooNewException || t instanceof IndexFormatTooOldException) {, +                // these don't work yet - missing ctors, +                assertNotEquals(e.getCause().getMessage(), ex.getCause().getMessage());, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    // this sucks it would be nice to have a better way to construct those?, +                    String msg = readOptionalString();, +                    final int idx = msg.indexOf(" (resource=");, +                    final String resource = msg.substring(idx + " (resource=".length(), msg.length()-1);, +                    msg = msg.substring(0, idx);, +                    return (T) readStackTrace(new CorruptIndexException(msg, resource, readThrowable()), this); // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +                new CorruptIndexException("baaaam", "this is my resource"),, +                new IndexFormatTooNewException("tooo new", 1, 1, 1),, +                new IndexFormatTooOldException("tooo new", 1, 1, 1),, +            if (t instanceof IndexFormatTooNewException || t instanceof IndexFormatTooOldException) {, +                // these don't work yet - missing ctors, +                assertNotEquals(e.getCause().getMessage(), ex.getCause().getMessage());, +            } else {, +            }, +++ b/pom.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    // this sucks it would be nice to have a better way to construct those?, +                    String msg = readOptionalString();, +                    final int idx = msg.indexOf(" (resource=");, +                    final String resource = msg.substring(idx + " (resource=".length(), msg.length()-1);, +                    msg = msg.substring(0, idx);, +                    return (T) readStackTrace(new CorruptIndexException(msg, resource, readThrowable()), this); // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +                new CorruptIndexException("baaaam", "this is my resource"),, +                new IndexFormatTooNewException("tooo new", 1, 1, 1),, +                new IndexFormatTooOldException("tooo new", 1, 1, 1),, +            if (t instanceof IndexFormatTooNewException || t instanceof IndexFormatTooOldException) {, +                // these don't work yet - missing ctors, +                assertNotEquals(e.getCause().getMessage(), ex.getCause().getMessage());, +            } else {, +            }, +++ b/pom.xml, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    // this sucks it would be nice to have a better way to construct those?, +                    String msg = readOptionalString();, +                    final int idx = msg.indexOf(" (resource=");, +                    final String resource = msg.substring(idx + " (resource=".length(), msg.length()-1);, +                    msg = msg.substring(0, idx);, +                    return (T) readStackTrace(new CorruptIndexException(msg, resource, readThrowable()), this); // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +                new CorruptIndexException("baaaam", "this is my resource"),, +                new IndexFormatTooNewException("tooo new", 1, 1, 1),, +                new IndexFormatTooOldException("tooo new", 1, 1, 1),, +            if (t instanceof IndexFormatTooNewException || t instanceof IndexFormatTooOldException) {, +                // these don't work yet - missing ctors, +                assertNotEquals(e.getCause().getMessage(), ex.getCause().getMessage());, +            } else {, +            }, +++ b/pom.xml, +++ /dev/null]