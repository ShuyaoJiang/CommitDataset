[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportUpdateByQueryAction.java, +             * We always need the version of the source document so we can report a version conflict if we try to delete it and it has, +             * been changed., +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportUpdateByQueryAction.java, +             * We always need the version of the source document so we can report a version conflict if we try to delete it and it has, +             * been changed., +++ b/server/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke shard touring changed callback",, +                    indexShard.shardId().getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard created callback",, +                    indexShard.shardId().getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard started callback",, +                    indexShard.shardId().getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke before shard closed callback",, +                    shardId.getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard closed callback",, +                    shardId.getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke on shard inactive callback",, +                    indexShard.shardId().getId()), e);, +    public void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState currentState,, +                                       @Nullable String reason) {, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke index shard state changed callback",, +                    indexShard.shardId().getId()), e);, +                logger.warn(() ->, +                    new ParameterizedMessage("[{}] failed to invoke before shard created callback", shardId), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke before shard deleted callback",, +                    shardId.getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard deleted callback",, +                    shardId.getId()), e);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportUpdateByQueryAction.java, +             * We always need the version of the source document so we can report a version conflict if we try to delete it and it has, +             * been changed., +++ b/server/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke shard touring changed callback",, +                    indexShard.shardId().getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard created callback",, +                    indexShard.shardId().getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard started callback",, +                    indexShard.shardId().getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke before shard closed callback",, +                    shardId.getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard closed callback",, +                    shardId.getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke on shard inactive callback",, +                    indexShard.shardId().getId()), e);, +    public void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState currentState,, +                                       @Nullable String reason) {, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke index shard state changed callback",, +                    indexShard.shardId().getId()), e);, +                logger.warn(() ->, +                    new ParameterizedMessage("[{}] failed to invoke before shard created callback", shardId), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke before shard deleted callback",, +                    shardId.getId()), e);, +                logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard deleted callback",, +                    shardId.getId()), e);, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +    public static final Setting<String> INDEX_CHECK_ON_STARTUP =, +        new Setting<>("index.shard.check_on_startup", "false", (s) -> {, +                    throw new IllegalArgumentException("unknown value for [index.shard.check_on_startup] must be one of " +, +                        "[true, false, checksum] but was: " + s);, +        Setting.intSetting("index.highlight.max_analyzed_offset", 1000000, 1,, +            Property.Dynamic, Property.IndexScope);, +            Setting.intSetting("index.max_rescore_window", MAX_RESULT_WINDOW_SETTING, 1,, +                Property.Dynamic, Property.IndexScope);, +        Setting.timeSetting("index.translog.retention.age", TimeValue.timeValueHours(12), TimeValue.timeValueMillis(-1),, +            Property.Dynamic, Property.IndexScope);, +        Setting.timeSetting("index.gc_deletes", DEFAULT_GC_DELETES, new TimeValue(-1, TimeUnit.MILLISECONDS),, +            Property.Dynamic, Property.IndexScope);, +        Setting.longSetting("index.soft_deletes.retention.operations", 0, 0,, +            Property.IndexScope, Property.Dynamic);, +    public static final Setting<Integer> MAX_REFRESH_LISTENERS_PER_SHARD = Setting.intSetting("index.max_refresh_listeners",, +        1000, 0, Property.Dynamic, Property.IndexScope);, +        scopedSettings.addSettingsUpdateConsumer(MergePolicyConfig.INDEX_MERGE_POLICY_DELETES_PCT_ALLOWED_SETTING,, +            mergePolicyConfig::setDeletesPctAllowed);, +        scopedSettings.addSettingsUpdateConsumer(MergePolicyConfig.INDEX_MERGE_POLICY_EXPUNGE_DELETES_ALLOWED_SETTING,, +            mergePolicyConfig::setExpungeDeletesAllowed);, +        scopedSettings.addSettingsUpdateConsumer(MergePolicyConfig.INDEX_MERGE_POLICY_FLOOR_SEGMENT_SETTING,, +            mergePolicyConfig::setFloorSegmentSetting);, +        scopedSettings.addSettingsUpdateConsumer(MergePolicyConfig.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING,, +            mergePolicyConfig::setMaxMergesAtOnce);, +        scopedSettings.addSettingsUpdateConsumer(MergePolicyConfig.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_EXPLICIT_SETTING,, +            mergePolicyConfig::setMaxMergesAtOnceExplicit);, +        scopedSettings.addSettingsUpdateConsumer(MergePolicyConfig.INDEX_MERGE_POLICY_MAX_MERGED_SEGMENT_SETTING,, +            mergePolicyConfig::setMaxMergedSegment);, +        scopedSettings.addSettingsUpdateConsumer(MergePolicyConfig.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING,, +            mergePolicyConfig::setSegmentsPerTier);, +        scopedSettings.addSettingsUpdateConsumer(MergeSchedulerConfig.MAX_THREAD_COUNT_SETTING,, +            MergeSchedulerConfig.MAX_MERGE_COUNT_SETTING, mergeSchedulerConfig::setMaxThreadAndMergeCount);, +     * Updates the settings and index metadata and notifies all registered settings consumers with the new settings iff at least one, +     * setting has changed., +            throw new IllegalArgumentException("version mismatch on settings update expected: " + version + " but was: " +, +                Version.indexCreated(newSettings));, +     * Returns the transaction log retention age which controls the maximum age (time from creation) that translog files will be kept, +     * around, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportUpdateByQueryAction.java]