[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +                        // don't register it here, we will do it in AnalysisService, +                        //binder.addBinding(name).toInstance(indicesAnalysisService.tokenizerFactoryFactory(name));, +                        // don't register here, we will register it in the AnalysisService, +                        //binder.addBinding(name).toInstance(indicesAnalysisService.analyzerProviderFactory(name));, +                // don't register it here, we will use explicitly register it in the AnalysisService, +                //charFilterBinder.addBinding(charFilterName).toInstance(indicesAnalysisService.charFilterFactoryFactory(charFilterName));, +                // don't register it here, we will use explicitly register it in the AnalysisService, +                // tokenFilterBinder.addBinding(tokenFilterName).toInstance(indicesAnalysisService.tokenFilterFactoryFactory(tokenFilterName));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +                        // don't register it here, we will do it in AnalysisService, +                        //binder.addBinding(name).toInstance(indicesAnalysisService.tokenizerFactoryFactory(name));, +                        // don't register here, we will register it in the AnalysisService, +                        //binder.addBinding(name).toInstance(indicesAnalysisService.analyzerProviderFactory(name));, +                // don't register it here, we will use explicitly register it in the AnalysisService, +                //charFilterBinder.addBinding(charFilterName).toInstance(indicesAnalysisService.charFilterFactoryFactory(charFilterName));, +                // don't register it here, we will use explicitly register it in the AnalysisService, +                // tokenFilterBinder.addBinding(tokenFilterName).toInstance(indicesAnalysisService.tokenFilterFactoryFactory(tokenFilterName));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +import org.elasticsearch.indices.analysis.IndicesAnalysisService;, +    private final NamedAnalyzer defaultAnalyzer;, +    private final NamedAnalyzer defaultIndexAnalyzer;, +    private final NamedAnalyzer defaultSearchAnalyzer;, +, +        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS, null, null, null, null, null);, +    @Inject public AnalysisService(Index index, @IndexSettings Settings indexSettings, @Nullable IndicesAnalysisService indicesAnalysisService,, +, +        if (indicesAnalysisService != null) {, +            for (Map.Entry<String, PreBuiltTokenizerFactoryFactory> entry : indicesAnalysisService.tokenizerFactories().entrySet()) {, +                String name = entry.getKey();, +                if (!tokenizers.containsKey(name)) {, +                    tokenizers.put(name, entry.getValue().create(name, ImmutableSettings.Builder.EMPTY_SETTINGS));, +                }, +                name = Strings.toCamelCase(entry.getKey());, +                if (!name.equals(entry.getKey())) {, +                    if (!tokenizers.containsKey(name)) {, +                        tokenizers.put(name, entry.getValue().create(name, ImmutableSettings.Builder.EMPTY_SETTINGS));, +                    }, +                }, +            }, +        }, +, +, +        if (indicesAnalysisService != null) {, +            for (Map.Entry<String, PreBuiltCharFilterFactoryFactory> entry : indicesAnalysisService.charFilterFactories().entrySet()) {, +                String name = entry.getKey();, +                if (!charFilters.containsKey(name)) {, +                    charFilters.put(name, entry.getValue().create(name, ImmutableSettings.Builder.EMPTY_SETTINGS));, +                }, +                name = Strings.toCamelCase(entry.getKey());, +                if (!name.equals(entry.getKey())) {, +                    if (!charFilters.containsKey(name)) {, +                        charFilters.put(name, entry.getValue().create(name, ImmutableSettings.Builder.EMPTY_SETTINGS));, +                    }, +                }, +            }, +        }, +, +, +        // pre initialize the globally registered ones into the map, +        if (indicesAnalysisService != null) {, +            for (Map.Entry<String, PreBuiltTokenFilterFactoryFactory> entry : indicesAnalysisService.tokenFilterFactories().entrySet()) {, +                String name = entry.getKey();, +                if (!tokenFilters.containsKey(name)) {, +                    tokenFilters.put(name, entry.getValue().create(name, ImmutableSettings.Builder.EMPTY_SETTINGS));, +                }, +                name = Strings.toCamelCase(entry.getKey());, +                if (!name.equals(entry.getKey())) {, +                    if (!tokenFilters.containsKey(name)) {, +                        tokenFilters.put(name, entry.getValue().create(name, ImmutableSettings.Builder.EMPTY_SETTINGS));, +                    }, +                }, +            }, +        }, +        if (indicesAnalysisService != null) {, +            for (Map.Entry<String, PreBuiltAnalyzerProviderFactory> entry : indicesAnalysisService.analyzerProviderFactories().entrySet()) {, +                String name = entry.getKey();, +                if (!analyzerProviders.containsKey(name)) {, +                    analyzerProviders.put(name, entry.getValue().create(name, ImmutableSettings.Builder.EMPTY_SETTINGS));, +                }, +                name = Strings.toCamelCase(entry.getKey());, +                if (!name.equals(entry.getKey())) {, +                    if (!analyzerProviders.containsKey(name)) {, +                        analyzerProviders.put(name, entry.getValue().create(name, ImmutableSettings.Builder.EMPTY_SETTINGS));, +                    }, +                }, +            }, +        }, +, +        defaultAnalyzer = analyzers.get("default");, +        defaultIndexAnalyzer = analyzers.containsKey("default_index") ? analyzers.get("default_index") : analyzers.get("default");, +        defaultSearchAnalyzer = analyzers.containsKey("default_search") ? analyzers.get("default_search") : analyzers.get("default");, +, +        return defaultAnalyzer;, +        return defaultIndexAnalyzer;, +        return defaultSearchAnalyzer;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +                        // don't register it here, we will do it in AnalysisService, +                        //binder.addBinding(name).toInstance(indicesAnalysisService.tokenizerFactoryFactory(name));, +                        // don't register here, we will register it in the AnalysisService]