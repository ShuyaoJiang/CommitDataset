[+++ b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.script.ScriptService;, +            sourceLookup.setSource(source);, +++ b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.script.ScriptService;, +            sourceLookup.setSource(source);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.script.ScriptService;, +            sourceLookup.setSource(source);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) {, +        return new LeafScoreFunction() {, +        };, +    }, +++ b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.script.ScriptService;, +            sourceLookup.setSource(source);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) {, +        return new LeafScoreFunction() {, +        };, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +    public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) {, +        final SortedNumericDoubleValues values = this.indexFieldData.load(ctx).getDoubleValues();, +        return new LeafScoreFunction() {, +                values.setDocument(docId);, +                final int numValues = values.count();, +                    double val = values.valueAt(0) * boostFactor;, +        };, +    }, +++ b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.script.ScriptService;, +            sourceLookup.setSource(source);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) {, +        return new LeafScoreFunction() {, +        };, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +    public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) {, +        final SortedNumericDoubleValues values = this.indexFieldData.load(ctx).getDoubleValues();, +        return new LeafScoreFunction() {, +                values.setDocument(docId);, +                final int numValues = values.count();, +                    double val = values.valueAt(0) * boostFactor;, +        };, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        return new CustomBoostFactorWeight(this, subQueryWeight);, +        public CustomBoostFactorWeight(Query parent, Weight subQueryWeight) throws IOException {, +            final LeafScoreFunction[] functions = new LeafScoreFunction[filterFunctions.length];, +            final Bits[] docSets = new Bits[filterFunctions.length];, +                functions[i] = filterFunction.function.getLeafScoreFunction(context);, +            return new FiltersFunctionFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, functions, docSets, combineFunction, minScore);, +                    Explanation functionExplanation = filterFunction.function.getLeafScoreFunction(context).explainScore(doc, subQueryExpl);, +        private final LeafScoreFunction[] functions;, +                                            float maxBoost, LeafScoreFunction[] functions, Bits[] docSets, CombineFunction scoreCombiner, Float minScore) throws IOException {, +            this.functions = functions;, +                        factor = functions[i].score(docId, subQueryScore);, +                        maxFactor = Math.max(functions[i].score(docId, subQueryScore), maxFactor);, +                        minFactor = Math.min(functions[i].score(docId, subQueryScore), minFactor);, +                        factor *= functions[i].score(docId, subQueryScore);, +                        totalFactor += functions[i].score(docId, subQueryScore);, +++ b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.script.ScriptService;, +            sourceLookup.setSource(source);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) {, +        return new LeafScoreFunction() {, +        };, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +    public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) {, +        final SortedNumericDoubleValues values = this.indexFieldData.load(ctx).getDoubleValues();, +        return new LeafScoreFunction() {, +                values.setDocument(docId);, +                final int numValues = values.count();, +                    double val = values.valueAt(0) * boostFactor;, +        };, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        return new CustomBoostFactorWeight(this, subQueryWeight);, +        public CustomBoostFactorWeight(Query parent, Weight subQueryWeight) throws IOException {, +            final LeafScoreFunction[] functions = new LeafScoreFunction[filterFunctions.length];, +            final Bits[] docSets = new Bits[filterFunctions.length];, +                functions[i] = filterFunction.function.getLeafScoreFunction(context);, +            return new FiltersFunctionFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, functions, docSets, combineFunction, minScore);, +                    Explanation functionExplanation = filterFunction.function.getLeafScoreFunction(context).explainScore(doc, subQueryExpl);]