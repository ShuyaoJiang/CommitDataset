[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +import com.carrotsearch.hppc.predicates.ObjectPredicate;, +import java.util.HashSet;, +                void getRemoteClusterState(final String remoteCluster,, +                        remoteClusterState -> handler.accept(remoteClusterState, null));, +            autoFollower.start();, +        void start() {, +            final ClusterState clusterState = followerClusterStateSupplier.get();, +            final AutoFollowMetadata autoFollowMetadata = clusterState.metaData().custom(AutoFollowMetadata.TYPE);, +            getRemoteClusterState(remoteCluster, (remoteClusterState, remoteError) -> {, +                if (remoteClusterState != null) {, +                    assert remoteError == null;, +                    autoFollowIndices(autoFollowMetadata, clusterState, remoteClusterState, patterns);, +                } else {, +                    assert remoteError != null;, +                    for (int i = 0; i < patterns.size(); i++) {, +                        String autoFollowPatternName = patterns.get(i);, +                        finalise(i, new AutoFollowResult(autoFollowPatternName, remoteError));, +                    }, +                }, +            });, +        }, +        private void autoFollowIndices(final AutoFollowMetadata autoFollowMetadata,, +                                       final ClusterState clusterState,, +                                       final ClusterState remoteClusterState,, +                                       final List<String> patterns) {, +                final List<Index> leaderIndicesToFollow = getLeaderIndicesToFollow(autoFollowPattern, remoteClusterState,, +                    clusterState, followedIndices);, +                    List<Tuple<String, AutoFollowPattern>> patternsForTheSameRemoteCluster = autoFollowMetadata.getPatterns(), +                        patternsForTheSameRemoteCluster, resultHandler);, +            cleanFollowedRemoteIndices(remoteClusterState, patterns);, +                                            String remoteCluster,, +                                            List<Tuple<String, AutoFollowPattern>> patternsForTheSameRemoteCluster,, +                List<String> otherMatchingPatterns = patternsForTheSameRemoteCluster.stream(), +                    followLeaderIndex(autoFollowPattenName, remoteCluster, indexToFollow, autoFollowPattern, headers, error -> {, +                threadPool.schedule(TimeValue.timeValueMillis(2500), ThreadPool.Names.GENERIC, this::start);, +                                                    ClusterState remoteClusterState,, +            for (IndexMetaData leaderIndexMetaData : remoteClusterState.getMetaData()) {, +                    IndexRoutingTable indexRoutingTable = remoteClusterState.routingTable().index(leaderIndexMetaData.getIndex());, +        void cleanFollowedRemoteIndices(final ClusterState remoteClusterState, final List<String> patterns) {, +            updateAutoFollowMetadata(cleanFollowedRemoteIndices(remoteClusterState.metaData(), patterns), e -> {, +                if (e != null) {, +                    LOGGER.warn("Error occured while cleaning followed leader indices", e);, +                }, +            });, +        }, +, +        static Function<ClusterState, ClusterState> cleanFollowedRemoteIndices(, +            final MetaData remoteMetadata, final List<String> autoFollowPatternNames) {, +            return currentState -> {, +                AutoFollowMetadata currentAutoFollowMetadata = currentState.metaData().custom(AutoFollowMetadata.TYPE);, +                Map<String, List<String>> autoFollowPatternNameToFollowedIndexUUIDs =, +                    new HashMap<>(currentAutoFollowMetadata.getFollowedLeaderIndexUUIDs());, +                Set<String> remoteIndexUUIDS = new HashSet<>();, +                remoteMetadata.getIndices().values(), +                    .forEach((ObjectPredicate<IndexMetaData>) value -> remoteIndexUUIDS.add(value.getIndexUUID()));, +, +                boolean requiresCSUpdate = false;, +                for (String autoFollowPatternName : autoFollowPatternNames) {, +                    if (autoFollowPatternNameToFollowedIndexUUIDs.containsKey(autoFollowPatternName) == false) {, +                        // A delete auto follow pattern request can have removed the auto follow pattern while we want to update, +                        // the auto follow metadata with the fact that an index was successfully auto followed. If this, +                        // happens, we can just skip this step., +                        continue;, +                    }, +, +                    List<String> followedIndexUUIDs =, +                        new ArrayList<>(autoFollowPatternNameToFollowedIndexUUIDs.get(autoFollowPatternName));, +                    // Remove leader indices that no longer exist in the remote cluster:, +                    boolean entriesRemoved = followedIndexUUIDs.removeIf(, +                        followedLeaderIndexUUID -> remoteIndexUUIDS.contains(followedLeaderIndexUUID) == false);, +                    if (entriesRemoved) {, +                        requiresCSUpdate = true;, +                    }, +                    autoFollowPatternNameToFollowedIndexUUIDs.put(autoFollowPatternName, followedIndexUUIDs);, +                }, +, +                if (requiresCSUpdate) {, +                    final AutoFollowMetadata newAutoFollowMetadata = new AutoFollowMetadata(currentAutoFollowMetadata.getPatterns(),, +                        autoFollowPatternNameToFollowedIndexUUIDs, currentAutoFollowMetadata.getHeaders());, +                    return ClusterState.builder(currentState), +                        .metaData(MetaData.builder(currentState.getMetaData()), +                            .putCustom(AutoFollowMetadata.TYPE, newAutoFollowMetadata).build()), +                        .build();, +                } else {, +                    return currentState;, +                }, +            };, +        }, +, +        abstract void getRemoteClusterState(, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +import com.carrotsearch.hppc.predicates.ObjectPredicate;, +import java.util.HashSet;, +                void getRemoteClusterState(final String remoteCluster,, +                        remoteClusterState -> handler.accept(remoteClusterState, null));, +            autoFollower.start();, +        void start() {, +            final ClusterState clusterState = followerClusterStateSupplier.get();, +            final AutoFollowMetadata autoFollowMetadata = clusterState.metaData().custom(AutoFollowMetadata.TYPE);]