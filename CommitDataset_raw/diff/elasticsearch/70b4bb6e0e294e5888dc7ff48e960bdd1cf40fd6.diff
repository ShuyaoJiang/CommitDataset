[+++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +import org.elasticsearch.index.store.Store;, +    public IndexShardGateway(ShardId shardId, @IndexSettings Settings indexSettings, MappingUpdatedAction mappingUpdatedAction,, +        final Store store = indexShard.store();, +        store.incRef();, +                store.failIfCorrupted();, +                    si = store.readLastCommittedSegmentsInfo();, +                        files = Arrays.toString(store.directory().listAll());, +                        IndexWriter writer = new IndexWriter(store.directory(), new IndexWriterConfig(Lucene.STANDARD_ANALYZER).setOpenMode(IndexWriterConfig.OpenMode.CREATE));, +                    final Directory directory = store.directory();, +            store.decRef();, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +import org.elasticsearch.index.store.Store;, +    public IndexShardGateway(ShardId shardId, @IndexSettings Settings indexSettings, MappingUpdatedAction mappingUpdatedAction,, +        final Store store = indexShard.store();, +        store.incRef();, +                store.failIfCorrupted();, +                    si = store.readLastCommittedSegmentsInfo();, +                        files = Arrays.toString(store.directory().listAll());, +                        IndexWriter writer = new IndexWriter(store.directory(), new IndexWriterConfig(Lucene.STANDARD_ANALYZER).setOpenMode(IndexWriterConfig.OpenMode.CREATE));, +                    final Directory directory = store.directory();, +            store.decRef();, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +        failIfCorrupted();, +        try {, +        } catch (CorruptIndexException ex) {, +            markStoreCorrupted(ex);, +            throw ex;, +        }, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +import org.elasticsearch.index.store.Store;, +    public IndexShardGateway(ShardId shardId, @IndexSettings Settings indexSettings, MappingUpdatedAction mappingUpdatedAction,, +        final Store store = indexShard.store();, +        store.incRef();, +                store.failIfCorrupted();, +                    si = store.readLastCommittedSegmentsInfo();, +                        files = Arrays.toString(store.directory().listAll());, +                        IndexWriter writer = new IndexWriter(store.directory(), new IndexWriterConfig(Lucene.STANDARD_ANALYZER).setOpenMode(IndexWriterConfig.OpenMode.CREATE));, +                    final Directory directory = store.directory();, +            store.decRef();, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +        failIfCorrupted();, +        try {, +        } catch (CorruptIndexException ex) {, +            markStoreCorrupted(ex);, +            throw ex;, +        }, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +import org.elasticsearch.gateway.GatewayAllocator;, +                        .put(GatewayAllocator.INDEX_RECOVERY_INITIAL_SHARDS, "one"), +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +import org.elasticsearch.index.store.Store;, +    public IndexShardGateway(ShardId shardId, @IndexSettings Settings indexSettings, MappingUpdatedAction mappingUpdatedAction,, +        final Store store = indexShard.store();, +        store.incRef();, +                store.failIfCorrupted();, +                    si = store.readLastCommittedSegmentsInfo();, +                        files = Arrays.toString(store.directory().listAll());, +                        IndexWriter writer = new IndexWriter(store.directory(), new IndexWriterConfig(Lucene.STANDARD_ANALYZER).setOpenMode(IndexWriterConfig.OpenMode.CREATE));, +                    final Directory directory = store.directory();, +            store.decRef();, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +        failIfCorrupted();, +        try {, +        } catch (CorruptIndexException ex) {, +            markStoreCorrupted(ex);, +            throw ex;, +        }, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +import org.elasticsearch.gateway.GatewayAllocator;, +                        .put(GatewayAllocator.INDEX_RECOVERY_INITIAL_SHARDS, "one"), +++ b/src/test/java/org/elasticsearch/index/store/StoreTest.java, +, +    public void testMarkCorruptedOnTruncatedSegmentsFile() throws IOException {, +        IndexWriterConfig iwc = newIndexWriterConfig();, +        final ShardId shardId = new ShardId(new Index("index"), 1);, +        DirectoryService directoryService = new LuceneManagedDirectoryService(random());, +        Store store = new Store(shardId, ImmutableSettings.EMPTY, directoryService, new DummyShardLock(shardId));, +        IndexWriter writer = new IndexWriter(store.directory(), iwc);, +, +        int numDocs = 1 + random().nextInt(10);, +        List<Document> docs = new ArrayList<>();, +        for (int i = 0; i < numDocs; i++) {, +            Document doc = new Document();, +            doc.add(new StringField("id", "" + i, random().nextBoolean() ? Field.Store.YES : Field.Store.NO));, +            doc.add(new TextField("body", TestUtil.randomRealisticUnicodeString(random()), random().nextBoolean() ? Field.Store.YES : Field.Store.NO));, +            doc.add(new SortedDocValuesField("dv", new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));, +            docs.add(doc);, +        }, +        for (Document d : docs) {, +            writer.addDocument(d);, +        }, +        writer.commit();, +        writer.close();, +        MockDirectoryWrapper leaf = DirectoryUtils.getLeaf(store.directory(), MockDirectoryWrapper.class);, +        if (leaf != null) {, +            leaf.setPreventDoubleWrite(false); // I do this on purpose, +        }, +        SegmentInfos segmentCommitInfos = store.readLastCommittedSegmentsInfo();, +        try (IndexOutput out = store.directory().createOutput(segmentCommitInfos.getSegmentsFileName(), IOContext.DEFAULT)) {]