[+++ b/qa/smoke-test-watcher-with-security/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherWithSecurityIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.smoketest;, +, +import org.apache.http.entity.ContentType;, +import org.apache.http.entity.StringEntity;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.test.rest.ESRestTestCase;, +import org.elasticsearch.test.rest.yaml.ObjectPath;, +import org.elasticsearch.xpack.core.watcher.support.WatcherIndexTemplateRegistryField;, +import org.junit.After;, +import org.junit.Before;, +, +import java.io.IOException;, +import java.util.Collections;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.hasEntry;, +import static org.hamcrest.Matchers.is;, +, +public class SmokeTestWatcherWithSecurityIT extends ESRestTestCase {, +, +    private static final String TEST_ADMIN_USERNAME = "test_admin";, +    private static final String TEST_ADMIN_PASSWORD = "x-pack-test-password";, +, +    @Before, +    public void startWatcher() throws Exception {, +        StringEntity entity = new StringEntity("{ \"value\" : \"15\" }", ContentType.APPLICATION_JSON);, +        assertOK(adminClient().performRequest("PUT", "my_test_index/doc/1", Collections.singletonMap("refresh", "true"), entity));, +, +        // delete the watcher history to not clutter with entries from other test, +        adminClient().performRequest("DELETE", ".watcher-history-*", Collections.emptyMap());, +, +        // create one document in this index, so we can test in the YAML tests, that the index cannot be accessed, +        Response resp = adminClient().performRequest("PUT", "/index_not_allowed_to_read/doc/1", Collections.emptyMap(),, +                new StringEntity("{\"foo\":\"bar\"}", ContentType.APPLICATION_JSON));, +        assertThat(resp.getStatusLine().getStatusCode(), is(201));, +, +        assertBusy(() -> {, +            try {, +                adminClient().performRequest("POST", "_xpack/watcher/_start");, +, +                for (String template : WatcherIndexTemplateRegistryField.TEMPLATE_NAMES) {, +                    assertOK(adminClient().performRequest("HEAD", "_template/" + template));, +                }, +, +                Response statsResponse = adminClient().performRequest("GET", "_xpack/watcher/stats");, +                ObjectPath objectPath = ObjectPath.createFromResponse(statsResponse);, +                String state = objectPath.evaluate("stats.0.watcher_state");, +                assertThat(state, is("started"));, +            } catch (IOException e) {, +                throw new AssertionError(e);, +            }, +        });, +    }, +, +    @After, +    public void stopWatcher() throws Exception {, +        adminClient().performRequest("DELETE", "_xpack/watcher/watch/my_watch");, +        assertOK(adminClient().performRequest("DELETE", "my_test_index"));, +, +        assertBusy(() -> {, +            try {, +                adminClient().performRequest("POST", "_xpack/watcher/_stop", Collections.emptyMap());, +                Response statsResponse = adminClient().performRequest("GET", "_xpack/watcher/stats");, +                ObjectPath objectPath = ObjectPath.createFromResponse(statsResponse);, +                String state = objectPath.evaluate("stats.0.watcher_state");, +                assertThat(state, is("stopped"));, +            } catch (IOException e) {, +                throw new AssertionError(e);, +            }, +        });, +    }, +, +    @Override, +    protected Settings restClientSettings() {, +        String token = basicAuthHeaderValue("watcher_manager", new SecureString("x-pack-test-password".toCharArray()));, +        return Settings.builder(), +                .put(ThreadContext.PREFIX + ".Authorization", token), +                .build();, +    }, +, +    @Override, +    protected Settings restAdminSettings() {, +        String token = basicAuthHeaderValue(TEST_ADMIN_USERNAME, new SecureString(TEST_ADMIN_PASSWORD.toCharArray()));, +        return Settings.builder(), +                .put(ThreadContext.PREFIX + ".Authorization", token), +                .build();]