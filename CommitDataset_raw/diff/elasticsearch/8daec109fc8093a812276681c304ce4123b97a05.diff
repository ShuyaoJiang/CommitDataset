[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]admin[/\\]cluster[/\\]node[/\\]info[/\\]NodeInfo.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]unit[/\\]ByteSizeValue.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]plugins[/\\]DummyPluginInfo.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]os[/\\]OsProbeTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]nodesinfo[/\\]NodeInfoStreamingTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]threadpool[/\\]ThreadPoolSerializationTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]admin[/\\]cluster[/\\]node[/\\]info[/\\]NodeInfo.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]unit[/\\]ByteSizeValue.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]plugins[/\\]DummyPluginInfo.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]os[/\\]OsProbeTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]nodesinfo[/\\]NodeInfoStreamingTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]threadpool[/\\]ThreadPoolSerializationTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        setFuzzyMinSim(settings.fuzziness().asFloat());, +            return getFuzzyQuery(qfield, termImage, Float.toString(fuzzyMinSim));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]admin[/\\]cluster[/\\]node[/\\]info[/\\]NodeInfo.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]unit[/\\]ByteSizeValue.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]plugins[/\\]DummyPluginInfo.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]os[/\\]OsProbeTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]nodesinfo[/\\]NodeInfoStreamingTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]threadpool[/\\]ThreadPoolSerializationTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        setFuzzyMinSim(settings.fuzziness().asFloat());, +            return getFuzzyQuery(qfield, termImage, Float.toString(fuzzyMinSim));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +import java.util.HashMap;, +import java.util.Map;, +, +import static java.util.Collections.unmodifiableMap;, +                    @Nullable TransportInfo transport, @Nullable HttpInfo http, @Nullable PluginsAndModules plugins, @Nullable IngestInfo ingest,, +                    @Nullable ByteSizeValue totalIndexingBuffer) {, +        if (in.readBoolean()) {, +            os = OsInfo.readOsInfo(in);, +        }, +        if (in.readBoolean()) {, +            process = ProcessInfo.readProcessInfo(in);, +        }, +        if (in.readBoolean()) {, +            jvm = JvmInfo.readJvmInfo(in);, +        }, +        if (in.readBoolean()) {, +            threadPool = ThreadPoolInfo.readThreadPoolInfo(in);, +        }, +        if (in.readBoolean()) {, +            transport = TransportInfo.readTransportInfo(in);, +        }, +        if (in.readBoolean()) {, +            http = HttpInfo.readHttpInfo(in);, +        }, +        if (in.readBoolean()) {, +            plugins = new PluginsAndModules();, +            plugins.readFrom(in);, +        }, +        if (in.readBoolean()) {, +            ingest = new IngestInfo(in);, +        }, +        if (os == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            os.writeTo(out);, +        }, +        if (process == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            process.writeTo(out);, +        }, +        if (jvm == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            jvm.writeTo(out);, +        }, +        if (threadPool == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            threadPool.writeTo(out);, +        }, +        if (transport == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            transport.writeTo(out);, +        }, +        if (http == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            http.writeTo(out);, +        }, +        if (plugins == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            plugins.writeTo(out);]