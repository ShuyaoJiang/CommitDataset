[+++ b/server/src/main/java/org/elasticsearch/Build.java, +        public static Flavor fromDisplayName(final String displayName, final boolean strict) {, +                    if (strict) {, +                        final String message = "unexpected distribution flavor [" + displayName + "]; your distribution is broken";, +                        throw new IllegalStateException(message);, +                    } else {, +                        return Flavor.UNKNOWN;, +                    }, +        public static Type fromDisplayName(final String displayName, final boolean strict) {, +                    if (strict) {, +                    } else {, +                        return Type.UNKNOWN;, +    }, +, +        // these are parsed at startup, and we require that we are able to recognize the values passed in by the startup scripts, +        flavor = Flavor.fromDisplayName(System.getProperty("es.distribution.flavor", "unknown"), true);, +        type = Type.fromDisplayName(System.getProperty("es.distribution.type", "unknown"), true);, +            // be lenient when reading on the wire, the enumeration values from other versions might be different than what we know, +            flavor = Flavor.fromDisplayName(in.readString(), false);, +            // be lenient when reading on the wire, the enumeration values from other versions might be different than what we know, +            type = Type.fromDisplayName(in.readString(), false);, +++ b/server/src/main/java/org/elasticsearch/Build.java, +        public static Flavor fromDisplayName(final String displayName, final boolean strict) {, +                    if (strict) {, +                        final String message = "unexpected distribution flavor [" + displayName + "]; your distribution is broken";, +                        throw new IllegalStateException(message);, +                    } else {, +                        return Flavor.UNKNOWN;, +                    }, +        public static Type fromDisplayName(final String displayName, final boolean strict) {, +                    if (strict) {, +                    } else {, +                        return Type.UNKNOWN;, +    }, +, +        // these are parsed at startup, and we require that we are able to recognize the values passed in by the startup scripts, +        flavor = Flavor.fromDisplayName(System.getProperty("es.distribution.flavor", "unknown"), true);, +        type = Type.fromDisplayName(System.getProperty("es.distribution.type", "unknown"), true);, +            // be lenient when reading on the wire, the enumeration values from other versions might be different than what we know, +            flavor = Flavor.fromDisplayName(in.readString(), false);, +            // be lenient when reading on the wire, the enumeration values from other versions might be different than what we know, +            type = Type.fromDisplayName(in.readString(), false);, +++ b/server/src/main/java/org/elasticsearch/action/main/MainResponse.java, +                            /*, +                             * Be lenient when reading on the wire, the enumeration values from other versions might be different than what, +                             * we know., +                             */, +                            buildFlavor == null ? Build.Flavor.UNKNOWN : Build.Flavor.fromDisplayName(buildFlavor, false),, +                            buildType == null ? Build.Type.UNKNOWN : Build.Type.fromDisplayName(buildType, false),, +++ b/server/src/main/java/org/elasticsearch/Build.java, +        public static Flavor fromDisplayName(final String displayName, final boolean strict) {, +                    if (strict) {, +                        final String message = "unexpected distribution flavor [" + displayName + "]; your distribution is broken";, +                        throw new IllegalStateException(message);, +                    } else {, +                        return Flavor.UNKNOWN;, +                    }, +        public static Type fromDisplayName(final String displayName, final boolean strict) {, +                    if (strict) {, +                    } else {, +                        return Type.UNKNOWN;, +    }, +, +        // these are parsed at startup, and we require that we are able to recognize the values passed in by the startup scripts, +        flavor = Flavor.fromDisplayName(System.getProperty("es.distribution.flavor", "unknown"), true);, +        type = Type.fromDisplayName(System.getProperty("es.distribution.type", "unknown"), true);, +            // be lenient when reading on the wire, the enumeration values from other versions might be different than what we know, +            flavor = Flavor.fromDisplayName(in.readString(), false);, +            // be lenient when reading on the wire, the enumeration values from other versions might be different than what we know, +            type = Type.fromDisplayName(in.readString(), false);, +++ b/server/src/main/java/org/elasticsearch/action/main/MainResponse.java, +                            /*, +                             * Be lenient when reading on the wire, the enumeration values from other versions might be different than what, +                             * we know., +                             */, +                            buildFlavor == null ? Build.Flavor.UNKNOWN : Build.Flavor.fromDisplayName(buildFlavor, false),, +                            buildType == null ? Build.Type.UNKNOWN : Build.Type.fromDisplayName(buildType, false),, +++ b/server/src/test/java/org/elasticsearch/BuildTests.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.hasToString;, +import static org.hamcrest.Matchers.sameInstance;, +, +    public void testFlavorParsing() {, +        for (final Build.Flavor flavor : Build.Flavor.values()) {, +            // strict or not should not impact parsing at all here, +            assertThat(Build.Flavor.fromDisplayName(flavor.displayName(), randomBoolean()), sameInstance(flavor));, +        }, +    }, +, +    public void testTypeParsing() {, +        for (final Build.Type type : Build.Type.values()) {, +            // strict or not should not impact parsing at all here, +            assertThat(Build.Type.fromDisplayName(type.displayName(), randomBoolean()), sameInstance(type));, +        }, +    }, +, +    public void testLenientFlavorParsing() {, +        final String displayName = randomAlphaOfLength(8);, +        assertThat(Build.Flavor.fromDisplayName(displayName, false), equalTo(Build.Flavor.UNKNOWN));, +    }]