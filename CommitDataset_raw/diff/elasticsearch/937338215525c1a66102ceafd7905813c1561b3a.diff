[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.apache.tools.ant.DefaultLogger, +import org.gradle.api.*, +import java.nio.file.Paths, +, +        List<String> esProps = config.systemProperties.collect { key, value -> "-D${key}=${value}" }, +        String executable, +        List<String> esArgs = [], +        if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +            executable = 'cmd', +            esArgs.add('/C'), +            esArgs.add('call'), +        } else {, +            executable = 'sh', +        }, +        // running with cmd on windows will look for this with the .bat extension, +        esArgs.add(new File(home, 'bin/elasticsearch').toString()), +, +        // this closure is converted into ant nodes by groovy's AntBuilder, +        Closure antRunner = {, +            exec(executable: executable, spawn: config.daemonize, dir: cwd, taskname: 'elasticsearch') {, +                esEnv.each { key, value -> env(key: key, value: value) }, +                (esArgs + esProps).each { arg(value: it) }, +            }, +            waitfor(maxwait: '30', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond', timeoutproperty: "failed${name}") {, +                        file(file: pidFile.toString()), +        }, +, +        // this closure is the actual code to run elasticsearch, +        Closure elasticsearchRunner = {, +            ByteArrayOutputStream buffer = new ByteArrayOutputStream(), +            if (logger.isInfoEnabled() || config.daemonize == false) {, +                // run with piping streams directly out (even stderr to stdout since gradle would capture it), +                runAntCommand(project, antRunner, System.out, System.err), +            } else {, +                // buffer the output, we may not need to print it, +                PrintStream captureStream = new PrintStream(buffer, true, "UTF-8"), +                runAntCommand(project, antRunner, captureStream, captureStream), +            }, +, +                // the waitfor failed, so dump any output we got (may be empty if info logging, but that is ok), +                logger.error(buffer.toString('UTF-8')), +                // also dump the cluster's log file, it may be useful, +        Task start = project.tasks.create(name: name, type: DefaultTask, dependsOn: setup), +        start.doLast(elasticsearchRunner), +        return start, +, +    /** Runs an ant command, sending output to the given out and error streams */, +    static void runAntCommand(Project project, Closure command, PrintStream outputStream, PrintStream errorStream) {, +        DefaultLogger listener = new DefaultLogger(, +                errorPrintStream: errorStream,, +                outputPrintStream: outputStream,, +                messageOutputLevel: org.apache.tools.ant.Project.MSG_INFO), +, +        project.ant.project.addBuildListener(listener), +        project.configure(project.ant, command), +        project.ant.project.removeBuildListener(listener), +    }]