[+++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkShardRequest.java, +import java.util.HashSet;, +import java.util.Set;, +        // A bulk shard request encapsulates items targeted at a specific shard of an index., +        // However, items could be targeting aliases of the index, so the bulk request although, +        // targeting a single concrete index shard might do so using several alias names., +        // These alias names have to be exposed by this method because authorization works with, +        // aliases too, specifically, the item's target alias can be authorized but the concrete, +        // index might not be., +        Set<String> indices = new HashSet<>(1);, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkShardRequest.java, +import java.util.HashSet;, +import java.util.Set;, +        // A bulk shard request encapsulates items targeted at a specific shard of an index., +        // However, items could be targeting aliases of the index, so the bulk request although, +        // targeting a single concrete index shard might do so using several alias names., +        // These alias names have to be exposed by this method because authorization works with, +        // aliases too, specifically, the item's target alias can be authorized but the concrete, +        // index might not be., +        Set<String> indices = new HashSet<>(1);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +import org.elasticsearch.common.transport.TransportAddress;, +    /**, +     * This is a "workaround" method to log index "access_granted" and "access_denied" events for actions not tied to a, +     * {@code TransportMessage}, or when the connection is not 1:1, i.e. several audit events for an action associated with the same, +     * message. It is currently only used to audit the resolved index (alias) name for each {@code BulkItemRequest} comprised by a, +     * {@code BulkShardRequest}. We should strive to not use this and TODO refactor it out!, +     */, +    void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action, String indices,, +                                  String requestName, TransportAddress remoteAddress, AuthorizationInfo authorizationInfo);, +, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkShardRequest.java, +import java.util.HashSet;, +import java.util.Set;, +        // A bulk shard request encapsulates items targeted at a specific shard of an index., +        // However, items could be targeting aliases of the index, so the bulk request although, +        // targeting a single concrete index shard might do so using several alias names., +        // These alias names have to be exposed by this method because authorization works with, +        // aliases too, specifically, the item's target alias can be authorized but the concrete, +        // index might not be., +        Set<String> indices = new HashSet<>(1);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +import org.elasticsearch.common.transport.TransportAddress;, +    /**, +     * This is a "workaround" method to log index "access_granted" and "access_denied" events for actions not tied to a, +     * {@code TransportMessage}, or when the connection is not 1:1, i.e. several audit events for an action associated with the same, +     * message. It is currently only used to audit the resolved index (alias) name for each {@code BulkItemRequest} comprised by a, +     * {@code BulkShardRequest}. We should strive to not use this and TODO refactor it out!, +     */, +    void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action, String indices,, +                                  String requestName, TransportAddress remoteAddress, AuthorizationInfo authorizationInfo);, +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java, +import org.elasticsearch.common.transport.TransportAddress;, +, +    @Override, +    public void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action,, +                                         String indices, String requestName, TransportAddress remoteAddress,, +                                         AuthorizationInfo authorizationInfo) {, +        if (licenseState.isAuditingAllowed()) {, +            for (AuditTrail auditTrail : auditTrails) {, +                auditTrail.explicitIndexAccessEvent(requestId, eventType, authentication, action, indices, requestName, remoteAddress,, +                        authorizationInfo);, +            }, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkShardRequest.java, +import java.util.HashSet;, +import java.util.Set;, +        // A bulk shard request encapsulates items targeted at a specific shard of an index., +        // However, items could be targeting aliases of the index, so the bulk request although, +        // targeting a single concrete index shard might do so using several alias names., +        // These alias names have to be exposed by this method because authorization works with, +        // aliases too, specifically, the item's target alias can be authorized but the concrete, +        // index might not be., +        Set<String> indices = new HashSet<>(1);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +import org.elasticsearch.common.transport.TransportAddress;, +    /**, +     * This is a "workaround" method to log index "access_granted" and "access_denied" events for actions not tied to a, +     * {@code TransportMessage}, or when the connection is not 1:1, i.e. several audit events for an action associated with the same, +     * message. It is currently only used to audit the resolved index (alias) name for each {@code BulkItemRequest} comprised by a, +     * {@code BulkShardRequest}. We should strive to not use this and TODO refactor it out!, +     */, +    void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action, String indices,, +                                  String requestName, TransportAddress remoteAddress, AuthorizationInfo authorizationInfo);, +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java, +import org.elasticsearch.common.transport.TransportAddress;, +, +    @Override, +    public void explicitIndexAccessEvent(String requestId, AuditLevel eventType, Authentication authentication, String action,, +                                         String indices, String requestName, TransportAddress remoteAddress,, +                                         AuthorizationInfo authorizationInfo) {, +        if (licenseState.isAuditingAllowed()) {, +            for (AuditTrail auditTrail : auditTrails) {, +                auditTrail.explicitIndexAccessEvent(requestId, eventType, authentication, action, indices, requestName, remoteAddress,, +                        authorizationInfo);, +            }, +        }]