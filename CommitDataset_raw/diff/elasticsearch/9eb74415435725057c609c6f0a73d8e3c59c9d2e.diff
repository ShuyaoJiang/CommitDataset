[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java, +import org.elasticsearch.search.aggregations.AggregatorFactories;, +import org.elasticsearch.search.aggregations.support.ValueSourceAggregatorFactory;, +        super(name, BucketAggregationMode.MULTI_BUCKETS, factories, ranges.size() * parent.estimatedBucketCount(), aggregationContext, parent);, +    private final long subBucketOrdinal(long owningBucketOrdinal, int rangeOrd) {, +        return owningBucketOrdinal * ranges.length + rangeOrd;, +    }, +, +            lo = collect(doc, value, owningBucketOrdinal, lo);, +    private int collect(int doc, double value, long owningBucketOrdinal, int lowBound) throws IOException {, +                collectBucket(doc, subBucketOrdinal(owningBucketOrdinal, i));, +            final long bucketOrd = subBucketOrdinal(owningBucketOrdinal, i);, +            RangeBase.Bucket bucket = rangeFactory.createBucket(range.key, range.from, range.to, bucketDocCount(bucketOrd),, +                    bucketAggregations(bucketOrd), valuesSource.formatter());, +            super(name, BucketAggregationMode.MULTI_BUCKETS, AggregatorFactories.EMPTY, 0, aggregationContext, parent);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java, +import org.elasticsearch.search.aggregations.AggregatorFactories;, +import org.elasticsearch.search.aggregations.support.ValueSourceAggregatorFactory;, +        super(name, BucketAggregationMode.MULTI_BUCKETS, factories, ranges.size() * parent.estimatedBucketCount(), aggregationContext, parent);, +    private final long subBucketOrdinal(long owningBucketOrdinal, int rangeOrd) {, +        return owningBucketOrdinal * ranges.length + rangeOrd;, +    }, +, +            lo = collect(doc, value, owningBucketOrdinal, lo);, +    private int collect(int doc, double value, long owningBucketOrdinal, int lowBound) throws IOException {, +                collectBucket(doc, subBucketOrdinal(owningBucketOrdinal, i));, +            final long bucketOrd = subBucketOrdinal(owningBucketOrdinal, i);, +            RangeBase.Bucket bucket = rangeFactory.createBucket(range.key, range.from, range.to, bucketDocCount(bucketOrd),, +                    bucketAggregations(bucketOrd), valuesSource.formatter());, +            super(name, BucketAggregationMode.MULTI_BUCKETS, AggregatorFactories.EMPTY, 0, aggregationContext, parent);, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/RangeTests.java, +import org.elasticsearch.search.aggregations.bucket.terms.Terms;, +    public void rangeAsSubAggregation() throws Exception {, +        SearchResponse response = client().prepareSearch("idx"), +                .addAggregation(terms("terms").field("values").size(100).subAggregation(, +                        range("range").field("value"), +                            .addUnboundedTo(3), +                            .addRange(3, 6), +                            .addUnboundedFrom(6))), +                .execute().actionGet();, +, +        assertSearchResponse(response);, +        Terms terms = response.getAggregations().get("terms");, +        assertThat(terms, notNullValue());, +        assertThat(terms.buckets().size(), equalTo(numDocs + 1));, +        for (int i = 1; i < numDocs + 2; ++i) {, +            Terms.Bucket bucket = terms.getByTerm("" + i);, +            assertThat(bucket, notNullValue());, +            final long docCount = i == 1 || i == numDocs + 1 ? 1 : 2;, +            assertThat(bucket.getDocCount(), equalTo(docCount));, +            Range range = bucket.getAggregations().get("range");, +            Range.Bucket rangeBucket = range.getByKey("*-3.0");, +            assertThat(rangeBucket, notNullValue());, +            if (i == 1 || i == 3) {, +                assertThat(rangeBucket.getDocCount(), equalTo(1L));, +            } else if (i == 2) {, +                assertThat(rangeBucket.getDocCount(), equalTo(2L));, +            } else {, +                assertThat(rangeBucket.getDocCount(), equalTo(0L));, +            }, +            rangeBucket = range.getByKey("3.0-6.0");, +            assertThat(rangeBucket, notNullValue());, +            if (i == 3 || i == 6) {, +                assertThat(rangeBucket.getDocCount(), equalTo(1L));, +            } else if (i == 4 || i == 5) {, +                assertThat(rangeBucket.getDocCount(), equalTo(2L));, +            } else {, +                assertThat(rangeBucket.getDocCount(), equalTo(0L));, +            }, +            rangeBucket = range.getByKey("6.0-*");, +            assertThat(rangeBucket, notNullValue());, +            if (i == 6 || i == numDocs + 1) {, +                assertThat(rangeBucket.getDocCount(), equalTo(1L));, +            } else if (i < 6) {, +                assertThat(rangeBucket.getDocCount(), equalTo(0L));, +            } else {, +                assertThat(rangeBucket.getDocCount(), equalTo(2L));, +            }, +        }, +    }, +, +    @Test]