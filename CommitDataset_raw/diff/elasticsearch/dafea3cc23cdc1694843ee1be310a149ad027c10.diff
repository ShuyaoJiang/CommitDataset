[+++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    AbstractSearchAsyncAction(String name, Logger logger, SearchTransportService searchTransportService,, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    AbstractSearchAsyncAction(String name, Logger logger, SearchTransportService searchTransportService,, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, + * The fan out and collect algorithm is traditionally used as the initial phase which can either be a query execution or collection of, +        SearchPhaseResults(int numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    AbstractSearchAsyncAction(String name, Logger logger, SearchTransportService searchTransportService,, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, + * The fan out and collect algorithm is traditionally used as the initial phase which can either be a query execution or collection of, +        SearchPhaseResults(int numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +    static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,, +            if (mergedTopDocs instanceof TopFieldDocs) {, +    static TopDocs mergeTopDocs(Collection<TopDocs> results, int topN, int from) {, +        assert topDocs.scoreDocs.length == 0 || topDocs.scoreDocs[0].shardIndex == -1 : "shardIndex is already set";, +        return new SearchHits(hits.toArray(new SearchHit[0]), reducedQueryPhase.totalHits, reducedQueryPhase.maxScore);, +    public ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {, +        return reducedQueryPhase(queryResults, true, true);, +        final SortedTopDocs scoreDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size);, +            firstResult.sortValueFormats(), numReducePhases, scoreDocs.isSortedByField, size, from, false);, +    private static InternalAggregations reduceAggs(List<InternalAggregations> aggregationsList,, +                    TopDocs reducedTopDocs = mergeTopDocs(Arrays.asList(topDocsBuffer),, +                        querySearchResult.from() + querySearchResult.size(), 0);, +                setShardIndex(topDocs.topDocs, querySearchResult.getShardIndex());, +        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    AbstractSearchAsyncAction(String name, Logger logger, SearchTransportService searchTransportService,, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, + * The fan out and collect algorithm is traditionally used as the initial phase which can either be a query execution or collection of, +        SearchPhaseResults(int numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +    static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,, +            if (mergedTopDocs instanceof TopFieldDocs) {, +    static TopDocs mergeTopDocs(Collection<TopDocs> results, int topN, int from) {, +        assert topDocs.scoreDocs.length == 0 || topDocs.scoreDocs[0].shardIndex == -1 : "shardIndex is already set";, +        return new SearchHits(hits.toArray(new SearchHit[0]), reducedQueryPhase.totalHits, reducedQueryPhase.maxScore);, +    public ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {, +        return reducedQueryPhase(queryResults, true, true);, +        final SortedTopDocs scoreDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size);, +            firstResult.sortValueFormats(), numReducePhases, scoreDocs.isSortedByField, size, from, false);, +    private static InternalAggregations reduceAggs(List<InternalAggregations> aggregationsList,, +                    TopDocs reducedTopDocs = mergeTopDocs(Arrays.asList(topDocsBuffer),, +                        querySearchResult.from() + querySearchResult.size(), 0);, +                setShardIndex(topDocs.topDocs, querySearchResult.getShardIndex());, +        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchScrollQueryAndFetchAsyncAction.java, +        return sendResponsePhase(searchPhaseController.reducedScrollQueryPhase(queryFetchResults.asList()), queryFetchResults);, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    AbstractSearchAsyncAction(String name, Logger logger, SearchTransportService searchTransportService,, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, + * The fan out and collect algorithm is traditionally used as the initial phase which can either be a query execution or collection of, +        SearchPhaseResults(int numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +    static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,, +            if (mergedTopDocs instanceof TopFieldDocs) {, +    static TopDocs mergeTopDocs(Collection<TopDocs> results, int topN, int from) {, +        assert topDocs.scoreDocs.length == 0 || topDocs.scoreDocs[0].shardIndex == -1 : "shardIndex is already set";, +        return new SearchHits(hits.toArray(new SearchHit[0]), reducedQueryPhase.totalHits, reducedQueryPhase.maxScore);, +    public ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {, +        return reducedQueryPhase(queryResults, true, true);, +        final SortedTopDocs scoreDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size);, +            firstResult.sortValueFormats(), numReducePhases, scoreDocs.isSortedByField, size, from, false);, +    private static InternalAggregations reduceAggs(List<InternalAggregations> aggregationsList,, +                    TopDocs reducedTopDocs = mergeTopDocs(Arrays.asList(topDocsBuffer),, +                        querySearchResult.from() + querySearchResult.size(), 0);, +                setShardIndex(topDocs.topDocs, querySearchResult.getShardIndex());, +        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchScrollQueryAndFetchAsyncAction.java, +        return sendResponsePhase(searchPhaseController.reducedScrollQueryPhase(queryFetchResults.asList()), queryFetchResults);, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchScrollQueryThenFetchAsyncAction.java, +                final SearchPhaseController.ReducedQueryPhase reducedQueryPhase = searchPhaseController.reducedScrollQueryPhase(, +                    queryResults.asList());, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    AbstractSearchAsyncAction(String name, Logger logger, SearchTransportService searchTransportService,, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, + * The fan out and collect algorithm is traditionally used as the initial phase which can either be a query execution or collection of, +        SearchPhaseResults(int numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +    static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,, +            if (mergedTopDocs instanceof TopFieldDocs) {, +    static TopDocs mergeTopDocs(Collection<TopDocs> results, int topN, int from) {, +        assert topDocs.scoreDocs.length == 0 || topDocs.scoreDocs[0].shardIndex == -1 : "shardIndex is already set";, +        return new SearchHits(hits.toArray(new SearchHit[0]), reducedQueryPhase.totalHits, reducedQueryPhase.maxScore);, +    public ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {, +        return reducedQueryPhase(queryResults, true, true);, +        final SortedTopDocs scoreDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size);, +            firstResult.sortValueFormats(), numReducePhases, scoreDocs.isSortedByField, size, from, false);, +    private static InternalAggregations reduceAggs(List<InternalAggregations> aggregationsList,, +                    TopDocs reducedTopDocs = mergeTopDocs(Arrays.asList(topDocsBuffer),, +                        querySearchResult.from() + querySearchResult.size(), 0);, +                setShardIndex(topDocs.topDocs, querySearchResult.getShardIndex());, +        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchScrollQueryAndFetchAsyncAction.java, +        return sendResponsePhase(searchPhaseController.reducedScrollQueryPhase(queryFetchResults.asList()), queryFetchResults);, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchScrollQueryThenFetchAsyncAction.java, +                final SearchPhaseController.ReducedQueryPhase reducedQueryPhase = searchPhaseController.reducedScrollQueryPhase(, +                    queryResults.asList());, +++ b/server/src/main/java/org/elasticsearch/search/SearchPhaseResult.java]