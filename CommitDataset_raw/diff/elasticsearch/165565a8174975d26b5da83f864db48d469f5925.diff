[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (!values.isEmpty()) {, +                        for (int i = 0; i < values.size(); i++) {, +                            values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)));, +                        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (!values.isEmpty()) {, +                        for (int i = 0; i < values.size(); i++) {, +                            values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)));, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (!values.isEmpty()) {, +                        for (int i = 0; i < values.size(); i++) {, +                            values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)));, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java, +                                KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo);, +            KeywordFieldMapper geoHashMapper = null;, +                geoHashMapper = new KeywordFieldMapper.Builder(Names.GEOHASH).index(true).includeInAll(false).store(fieldType.stored()).build(context);, +    protected KeywordFieldMapper geoHashMapper;, +                                      FieldMapper latMapper, FieldMapper lonMapper, KeywordFieldMapper geoHashMapper,, +        KeywordFieldMapper geoUpdated = geoHashMapper == null ? null : (KeywordFieldMapper) geoHashMapper.updateFieldType(fullNameToFieldType);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (!values.isEmpty()) {, +                        for (int i = 0; i < values.size(); i++) {, +                            values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)));, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java, +                                KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo);, +            KeywordFieldMapper geoHashMapper = null;, +                geoHashMapper = new KeywordFieldMapper.Builder(Names.GEOHASH).index(true).includeInAll(false).store(fieldType.stored()).build(context);, +    protected KeywordFieldMapper geoHashMapper;, +                                      FieldMapper latMapper, FieldMapper lonMapper, KeywordFieldMapper geoHashMapper,, +        KeywordFieldMapper geoUpdated = geoHashMapper == null ? null : (KeywordFieldMapper) geoHashMapper.updateFieldType(fullNameToFieldType);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +public class DateFieldMapper extends FieldMapper {, +            return new DateFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (!values.isEmpty()) {, +                        for (int i = 0; i < values.size(); i++) {, +                            values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)));, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java, +                                KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo);, +            KeywordFieldMapper geoHashMapper = null;, +                geoHashMapper = new KeywordFieldMapper.Builder(Names.GEOHASH).index(true).includeInAll(false).store(fieldType.stored()).build(context);, +    protected KeywordFieldMapper geoHashMapper;, +                                      FieldMapper latMapper, FieldMapper lonMapper, KeywordFieldMapper geoHashMapper,, +        KeywordFieldMapper geoUpdated = geoHashMapper == null ? null : (KeywordFieldMapper) geoHashMapper.updateFieldType(fullNameToFieldType);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +public class DateFieldMapper extends FieldMapper {, +            return new DateFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +        // update the default value of include_in_all if necessary, +        Boolean includeInAll = mapper.includeInAll();, +        if (includeInAll != null) {, +            context = context.setIncludeInAllDefault(includeInAll);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (!values.isEmpty()) {, +                        for (int i = 0; i < values.size(); i++) {]