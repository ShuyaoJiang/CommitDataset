[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +import org.apache.http.entity.ContentType;, +import org.apache.http.nio.entity.NStringEntity;, +import org.elasticsearch.action.get.GetRequest;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.search.fetch.subphase.FetchSourceContext;, +import java.util.Collections;, +, +    public void testGet() throws IOException {, +        RestHighLevelClient client = highLevelClient();, +        {, +            String mappings = "{\n" +, +                    "    \"mappings\" : {\n" +, +                    "        \"doc\" : {\n" +, +                    "            \"properties\" : {\n" +, +                    "                \"message\" : {\n" +, +                    "                    \"type\": \"text\",\n" +, +                    "                    \"store\": true\n" +, +                    "                }\n" +, +                    "            }\n" +, +                    "        }\n" +, +                    "    }\n" +, +                    "}";, +, +            NStringEntity entity = new NStringEntity(mappings, ContentType.APPLICATION_JSON);, +            Response response = client().performRequest("PUT", "/posts", Collections.emptyMap(), entity);, +            assertEquals(200, response.getStatusLine().getStatusCode());, +, +            IndexRequest indexRequest = new IndexRequest("posts", "doc", "1"), +                    .source("user", "kimchy",, +                            "postDate", new Date(),, +                            "message", "trying out Elasticsearch");, +            IndexResponse indexResponse = client.index(indexRequest);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.CREATED);, +        }, +        {, +            //tag::get-request, +            GetRequest getRequest = new GetRequest(, +                    "posts", // <1>, +                    "doc",  // <2>, +                    "1");   // <3>, +            //end::get-request, +, +            //tag::get-execute, +            GetResponse getResponse = client.get(getRequest);, +            //end::get-execute, +            assertTrue(getResponse.isExists());, +            assertEquals(3, getResponse.getSourceAsMap().size());, +            //tag::get-response, +            String index = getResponse.getIndex();, +            String type = getResponse.getType();, +            String id = getResponse.getId();, +            if (getResponse.isExists()) {, +                long version = getResponse.getVersion();, +                String sourceAsString = getResponse.getSourceAsString();        // <1>, +                Map<String, Object> sourceAsMap = getResponse.getSourceAsMap(); // <2>, +                byte[] sourceAsBytes = getResponse.getSourceAsBytes();          // <3>, +            } else {, +                // <4>, +            }, +            //end::get-response, +        }, +        {, +            GetRequest request = new GetRequest("posts", "doc", "1");, +            //tag::get-request-no-source, +            request.fetchSourceContext(new FetchSourceContext(false)); // <1>, +            //end::get-request-no-source, +            GetResponse getResponse = client.get(request);, +            assertNull(getResponse.getSourceInternal());, +        }, +        {, +            GetRequest request = new GetRequest("posts", "doc", "1");, +            //tag::get-request-source-include, +            String[] includes = new String[]{"message", "*Date"};, +            String[] excludes = Strings.EMPTY_ARRAY;, +            FetchSourceContext fetchSourceContext = new FetchSourceContext(true, includes, excludes);, +            request.fetchSourceContext(fetchSourceContext); // <1>, +            //end::get-request-source-include, +            GetResponse getResponse = client.get(request);, +            Map<String, Object> sourceAsMap = getResponse.getSourceAsMap();, +            assertEquals(2, sourceAsMap.size());, +            assertEquals("trying out Elasticsearch", sourceAsMap.get("message"));, +            assertTrue(sourceAsMap.containsKey("postDate"));, +        }, +        {, +            GetRequest request = new GetRequest("posts", "doc", "1");, +            //tag::get-request-source-exclude, +            String[] includes = Strings.EMPTY_ARRAY;, +            String[] excludes = new String[]{"message"};, +            FetchSourceContext fetchSourceContext = new FetchSourceContext(true, includes, excludes);, +            request.fetchSourceContext(fetchSourceContext); // <1>, +            //end::get-request-source-exclude, +            GetResponse getResponse = client.get(request);, +            Map<String, Object> sourceAsMap = getResponse.getSourceAsMap();, +            assertEquals(2, sourceAsMap.size());, +            assertEquals("kimchy", sourceAsMap.get("user"));, +            assertTrue(sourceAsMap.containsKey("postDate"));, +        }]