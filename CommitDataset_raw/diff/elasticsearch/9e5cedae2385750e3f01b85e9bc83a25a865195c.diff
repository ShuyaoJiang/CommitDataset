[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/SystemCallFilter.java, +            throw new UnsupportedOperationException("seccomp unavailable: could not link methods. requires kernel 3.5+ " +, +                "with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in");, +                default: throw new UnsupportedOperationException("seccomp(SECCOMP_SET_MODE_FILTER, BOGUS_FLAG): ", +                                                                 + JNACLibrary.strerror(errno));, +                    throw new UnsupportedOperationException("seccomp unavailable: requires kernel 3.5+ with" +, +                                                            " CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in");, +                    throw new UnsupportedOperationException("seccomp unavailable: CONFIG_SECCOMP not compiled into kernel," +, +                                                            " CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER are needed");, +                case EINVAL: throw new UnsupportedOperationException("seccomp unavailable: CONFIG_SECCOMP_FILTER not" +, +                    " compiled into kernel, CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER are needed");, +            throw new UnsupportedOperationException("seccomp filter did not really succeed: prctl(PR_GET_NO_NEW_PRIVS): " +, +                                                    JNACLibrary.strerror(Native.getLastError()));, +        // BPF installed to check arch, limit, then syscall., +        // See https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt for details., +                logger.debug("seccomp(SECCOMP_SET_MODE_FILTER): {}, falling back to prctl(PR_SET_SECCOMP)...",, +                             JNACLibrary.strerror(errno1));, +            throw new UnsupportedOperationException("seccomp filter installation did not really succeed. seccomp(PR_GET_SECCOMP): ", +                                                    + JNACLibrary.strerror(Native.getLastError()));]