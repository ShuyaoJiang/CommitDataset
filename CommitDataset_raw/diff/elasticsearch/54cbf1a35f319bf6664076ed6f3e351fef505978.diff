[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Synchronously refreshes the engine for new search operations to reflect the latest, +     * changes unless another thread is already refreshing the engine concurrently., +     *, +     * @return <code>true</code> if the a refresh happened. Otherwise <code>false</code>, +     */, +    @Nullable, +    public abstract boolean maybeRefresh(String source) throws EngineException;, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Synchronously refreshes the engine for new search operations to reflect the latest, +     * changes unless another thread is already refreshing the engine concurrently., +     *, +     * @return <code>true</code> if the a refresh happened. Otherwise <code>false</code>, +     */, +    @Nullable, +    public abstract boolean maybeRefresh(String source) throws EngineException;, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    refresh("realtime_get", SearcherScope.INTERNAL, true);, +                    refresh("unsafe_version_map", SearcherScope.INTERNAL, true);, +        refresh(source, SearcherScope.EXTERNAL, true);, +    @Override, +    public boolean maybeRefresh(String source) throws EngineException {, +        return refresh(source, SearcherScope.EXTERNAL, false);, +    }, +, +    final boolean refresh(String source, SearcherScope scope, boolean block) throws EngineException {, +        boolean refreshed;, +                    if (block) {, +                        refreshed = true;, +                    } else {, +                        refreshed = referenceManager.maybeRefresh();, +                    }, +                if (refreshed) {, +            } else {, +                refreshed = false;, +            }, +        assert refreshed == false || lastRefreshedCheckpoint() >= localCheckpointBeforeRefresh : "refresh checkpoint was not advanced; " +, +        return refreshed;, +        refresh("write indexing buffer", SearcherScope.INTERNAL, true);, +            refresh("sync_flush", SearcherScope.INTERNAL, true);, +            refresh("renew sync commit", SearcherScope.INTERNAL, true);, +                        refresh("version_table_flush", SearcherScope.INTERNAL, true);, +                    refresh(source, SearcherScope.INTERNAL, true);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Synchronously refreshes the engine for new search operations to reflect the latest, +     * changes unless another thread is already refreshing the engine concurrently., +     *, +     * @return <code>true</code> if the a refresh happened. Otherwise <code>false</code>, +     */, +    @Nullable, +    public abstract boolean maybeRefresh(String source) throws EngineException;, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    refresh("realtime_get", SearcherScope.INTERNAL, true);, +                    refresh("unsafe_version_map", SearcherScope.INTERNAL, true);, +        refresh(source, SearcherScope.EXTERNAL, true);, +    @Override, +    public boolean maybeRefresh(String source) throws EngineException {, +        return refresh(source, SearcherScope.EXTERNAL, false);, +    }, +, +    final boolean refresh(String source, SearcherScope scope, boolean block) throws EngineException {, +        boolean refreshed;, +                    if (block) {, +                        refreshed = true;, +                    } else {, +                        refreshed = referenceManager.maybeRefresh();, +                    }, +                if (refreshed) {, +            } else {, +                refreshed = false;, +            }, +        assert refreshed == false || lastRefreshedCheckpoint() >= localCheckpointBeforeRefresh : "refresh checkpoint was not advanced; " +, +        return refreshed;, +        refresh("write indexing buffer", SearcherScope.INTERNAL, true);, +            refresh("sync_flush", SearcherScope.INTERNAL, true);, +            refresh("renew sync commit", SearcherScope.INTERNAL, true);, +                        refresh("version_table_flush", SearcherScope.INTERNAL, true);, +                    refresh(source, SearcherScope.INTERNAL, true);, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +    public boolean maybeRefresh(String source) throws EngineException {, +        return false;, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Synchronously refreshes the engine for new search operations to reflect the latest, +     * changes unless another thread is already refreshing the engine concurrently., +     *, +     * @return <code>true</code> if the a refresh happened. Otherwise <code>false</code>, +     */, +    @Nullable, +    public abstract boolean maybeRefresh(String source) throws EngineException;, +, +    /**]