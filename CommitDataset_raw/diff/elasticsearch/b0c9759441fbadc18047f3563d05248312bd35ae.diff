[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +        if (       actual.sort == Sort.DEF, +                || (actual.sort != Sort.VOID && expected.sort == Sort.DEF), +                || expected.clazz.isAssignableFrom(actual.clazz), +                || (explicit && actual.clazz.isAssignableFrom(expected.clazz))) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +        if (       actual.sort == Sort.DEF, +                || (actual.sort != Sort.VOID && expected.sort == Sort.DEF), +                || expected.clazz.isAssignableFrom(actual.clazz), +                || (explicit && actual.clazz.isAssignableFrom(expected.clazz))) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +, +        @Override, +        public String toString() {, +            StringBuilder b = new StringBuilder();, +            b.append("Variable[type=").append(type);, +            b.append(",name=").append(name);, +            b.append(",slot=").append(slot);, +            if (readonly) {, +                b.append(",readonly");, +            }, +            b.append(']');, +            return b.toString();, +        }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +        if (       actual.sort == Sort.DEF, +                || (actual.sort != Sort.VOID && expected.sort == Sort.DEF), +                || expected.clazz.isAssignableFrom(actual.clazz), +                || (explicit && actual.clazz.isAssignableFrom(expected.clazz))) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +, +        @Override, +        public String toString() {, +            StringBuilder b = new StringBuilder();, +            b.append("Variable[type=").append(type);, +            b.append(",name=").append(name);, +            b.append(",slot=").append(slot);, +            if (readonly) {, +                b.append(",readonly");, +            }, +            b.append(']');, +            return b.toString();, +        }, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/FunctionRefTests.java, +import java.lang.invoke.LambdaConversionException;, +, +import static org.hamcrest.Matchers.containsString;, +        assertThat(expected.getMessage(), containsString("Cannot convert function reference"));, +        assertThat(expected.getMessage(), containsString("Unknown reference"));, +        assertThat(expected.getMessage(), containsString("Unknown reference"));, +        assertThat(expected.getMessage(), containsString("Unknown reference"));, +    }, +, +    public void testReturnVoid() {, +        Throwable expected = expectScriptThrows(BootstrapMethodError.class, () -> {, +            exec("StringBuilder b = new StringBuilder(); List l = [1, 2]; l.stream().mapToLong(b::setLength);");, +        });, +        assertThat(expected.getCause().getMessage(),, +                containsString("Type mismatch for lambda expected return: void is not convertible to long"));, +    }, +, +    public void testReturnVoidDef() {, +        Exception expected = expectScriptThrows(LambdaConversionException.class, () -> {, +            exec("StringBuilder b = new StringBuilder(); def l = [1, 2]; l.stream().mapToLong(b::setLength);");, +        });, +        assertThat(expected.getMessage(), containsString("Type mismatch for lambda expected return: void is not convertible to long"));, +, +        expected = expectScriptThrows(LambdaConversionException.class, () -> {, +            exec("def b = new StringBuilder(); def l = [1, 2]; l.stream().mapToLong(b::setLength);");, +        });, +        assertThat(expected.getMessage(), containsString("Type mismatch for lambda expected return: void is not convertible to long"));, +, +        expected = expectScriptThrows(LambdaConversionException.class, () -> {, +            exec("def b = new StringBuilder(); List l = [1, 2]; l.stream().mapToLong(b::setLength);");, +        });, +        assertThat(expected.getMessage(), containsString("Type mismatch for lambda expected return: void is not convertible to long"));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +        if (       actual.sort == Sort.DEF, +                || (actual.sort != Sort.VOID && expected.sort == Sort.DEF), +                || expected.clazz.isAssignableFrom(actual.clazz), +                || (explicit && actual.clazz.isAssignableFrom(expected.clazz))) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +, +        @Override, +        public String toString() {, +            StringBuilder b = new StringBuilder();, +            b.append("Variable[type=").append(type);, +            b.append(",name=").append(name);, +            b.append(",slot=").append(slot);, +            if (readonly) {, +                b.append(",readonly");, +            }, +            b.append(']');, +            return b.toString();, +        }, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/FunctionRefTests.java, +import java.lang.invoke.LambdaConversionException;, +, +import static org.hamcrest.Matchers.containsString;, +        assertThat(expected.getMessage(), containsString("Cannot convert function reference"));]