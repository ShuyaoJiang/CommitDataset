[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java, +        private long indexCurrent;, +        private long deleteCurrent;, +        public Stats(long indexCount, long indexTimeInMillis, long indexCurrent, long deleteCount, long deleteTimeInMillis, long deleteCurrent) {, +            this.indexCurrent = indexCurrent;, +            this.deleteCurrent = deleteCurrent;, +            indexCurrent += stats.indexCurrent;, +            deleteCurrent += stats.deleteCurrent;, +        public long indexCurrent() {, +            return indexCurrent;, +        }, +, +        public long getIndexCurrent() {, +            return indexCurrent;, +        }, +, +, +        public long deleteCurrent() {, +            return deleteCurrent;, +        }, +, +        public long getDeleteCurrent() {, +            return deleteCurrent;, +        }, +, +            indexCurrent = in.readVLong();, +            deleteCurrent = in.readVLong();, +            out.writeVLong(indexCurrent);, +            out.writeVLong(deleteCurrent);, +            builder.field(Fields.INDEX_CURRENT, indexCurrent);, +            builder.field(Fields.DELETE_CURRENT, deleteCurrent);, +        static final XContentBuilderString INDEX_CURRENT = new XContentBuilderString("index_current");, +        static final XContentBuilderString DELETE_CURRENT = new XContentBuilderString("delete_current");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java, +        private long indexCurrent;, +        private long deleteCurrent;, +        public Stats(long indexCount, long indexTimeInMillis, long indexCurrent, long deleteCount, long deleteTimeInMillis, long deleteCurrent) {, +            this.indexCurrent = indexCurrent;, +            this.deleteCurrent = deleteCurrent;, +            indexCurrent += stats.indexCurrent;, +            deleteCurrent += stats.deleteCurrent;, +        public long indexCurrent() {, +            return indexCurrent;, +        }, +, +        public long getIndexCurrent() {, +            return indexCurrent;, +        }, +, +, +        public long deleteCurrent() {, +            return deleteCurrent;, +        }, +, +        public long getDeleteCurrent() {, +            return deleteCurrent;, +        }, +, +            indexCurrent = in.readVLong();, +            deleteCurrent = in.readVLong();, +            out.writeVLong(indexCurrent);, +            out.writeVLong(deleteCurrent);, +            builder.field(Fields.INDEX_CURRENT, indexCurrent);, +            builder.field(Fields.DELETE_CURRENT, deleteCurrent);, +        static final XContentBuilderString INDEX_CURRENT = new XContentBuilderString("index_current");, +        static final XContentBuilderString DELETE_CURRENT = new XContentBuilderString("delete_current");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/indexing/ShardIndexingService.java, +import org.elasticsearch.common.metrics.CounterMetric;, +        totalStats.indexCurrent.inc();, +        typeStats(index.type()).indexCurrent.inc();, +        totalStats.indexCurrent.dec();, +        StatsHolder typeStats = typeStats(index.type());, +        typeStats.indexMetric.inc(took);, +        typeStats.indexCurrent.dec();, +    public void failedIndex(Engine.Index index) {, +        totalStats.indexCurrent.dec();, +        typeStats(index.type()).indexCurrent.dec();, +    }, +, +        totalStats.deleteCurrent.inc();, +        typeStats(delete.type()).deleteCurrent.inc();, +        totalStats.deleteCurrent.dec();, +        StatsHolder typeStats = typeStats(delete.type());, +        typeStats.deleteMetric.inc(took);, +        typeStats.deleteCurrent.dec();, +    public void failedDelete(Engine.Delete delete) {, +        totalStats.deleteCurrent.dec();, +        typeStats(delete.type()).deleteCurrent.dec();, +    }, +, +            if (!typesStats.isEmpty()) {, +                MapBuilder<String, StatsHolder> typesStatsBuilder = MapBuilder.newMapBuilder();, +                for (Map.Entry<String, StatsHolder> typeStats : typesStats.entrySet()) {, +                    if (typeStats.getValue().totalCurrent() > 0) {, +                        typeStats.getValue().clear();, +                        typesStatsBuilder.put(typeStats.getKey(), typeStats.getValue());, +                    }, +                }, +                typesStats = typesStatsBuilder.immutableMap();, +            }]