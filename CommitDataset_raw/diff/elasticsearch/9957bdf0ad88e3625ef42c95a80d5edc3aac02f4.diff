[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +import org.apache.lucene.store.AlreadyClosedException;, +                try {, +                } catch (final AlreadyClosedException e) {, +                    // okay, the index was deleted or this shard was never activated after a relocation; fallthrough and finish normally, +                } catch (final Exception e) {, +                    // fail the primary but fall through and let the rest of operation processing complete, +                    final String message = String.format(Locale.ROOT, "primary failed updating local checkpoint for replica %s", shard);, +                    primary.failShard(message, e);, +                }, +         * Fail the primary shard., +         *, +         * @param message   the failure message, +         * @param exception the exception that triggered the failure, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +import org.apache.lucene.store.AlreadyClosedException;, +                try {, +                } catch (final AlreadyClosedException e) {, +                    // okay, the index was deleted or this shard was never activated after a relocation; fallthrough and finish normally, +                } catch (final Exception e) {, +                    // fail the primary but fall through and let the rest of operation processing complete, +                    final String message = String.format(Locale.ROOT, "primary failed updating local checkpoint for replica %s", shard);, +                    primary.failShard(message, e);, +                }, +         * Fail the primary shard., +         *, +         * @param message   the failure message, +         * @param exception the exception that triggered the failure, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/ReplicationOperationTests.java, +import org.apache.lucene.store.AlreadyClosedException;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.hasToString;, +        final TestReplicationOperation op = new TestReplicationOperation(request, primary, listener, replicasProxy, () -> finalState);, +    public void testPrimaryFailureHandlingReplicaResponse() throws Exception {, +        final String index = "test";, +        final ShardId shardId = new ShardId(index, "_na_", 0);, +, +        final Request request = new Request(shardId);, +, +        final ClusterState state = stateWithActivePrimary(index, true, 1, 0);, +        final IndexMetaData indexMetaData = state.getMetaData().index(index);, +        final long primaryTerm = indexMetaData.primaryTerm(0);, +        final ShardRouting primaryRouting = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();, +, +        final boolean fatal = randomBoolean();, +        final AtomicBoolean primaryFailed = new AtomicBoolean();, +        final ReplicationOperation.Primary<Request, Request, TestPrimary.Result> primary = new TestPrimary(primaryRouting, primaryTerm) {, +, +            @Override, +            public void failShard(String message, Exception exception) {, +                primaryFailed.set(true);, +            }, +, +            @Override, +            public void updateLocalCheckpointForShard(String allocationId, long checkpoint) {, +                if (primaryRouting.allocationId().getId().equals(allocationId)) {, +                    super.updateLocalCheckpointForShard(allocationId, checkpoint);, +                } else {, +                    if (fatal) {, +                        throw new NullPointerException();, +                    } else {, +                        throw new AlreadyClosedException("already closed");, +                    }, +                }, +            }, +, +        };, +, +        final PlainActionFuture<TestPrimary.Result> listener = new PlainActionFuture<>();, +        final ReplicationOperation.Replicas<Request> replicas = new TestReplicaProxy(Collections.emptyMap());, +        TestReplicationOperation operation = new TestReplicationOperation(request, primary, listener, replicas, () -> state);, +        operation.execute();, +, +        assertThat(primaryFailed.get(), equalTo(fatal));, +        final ShardInfo shardInfo = listener.actionGet().getShardInfo();, +        assertThat(shardInfo.getFailed(), equalTo(0));, +        assertThat(shardInfo.getFailures(), arrayWithSize(0));, +        assertThat(shardInfo.getSuccessful(), equalTo(1 + getExpectedReplicas(shardId, state).size()));, +    }, +]