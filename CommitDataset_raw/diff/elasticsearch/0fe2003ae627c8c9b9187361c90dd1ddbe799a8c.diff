[+++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +            if (partSize != null && partSize.getBytes() > 0) {, +++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +            if (partSize != null && partSize.getBytes() > 0) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        ByteSizeValue chunkSize = chunkSize();, +        if (chunkSize != null && chunkSize.getBytes() <= 0) {, +            throw new IllegalArgumentException("the chunk size cannot be negative: [" + chunkSize + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +            if (partSize != null && partSize.getBytes() > 0) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        ByteSizeValue chunkSize = chunkSize();, +        if (chunkSize != null && chunkSize.getBytes() <= 0) {, +            throw new IllegalArgumentException("the chunk size cannot be negative: [" + chunkSize + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +    public static final Setting<ByteSizeValue> CHUNK_SIZE_SETTING = Setting.byteSizeSetting("chunk_size",, +            new ByteSizeValue(Long.MAX_VALUE), new ByteSizeValue(5), new ByteSizeValue(Long.MAX_VALUE), Property.NodeScope);, +    public static final Setting<ByteSizeValue> REPOSITORIES_CHUNK_SIZE_SETTING = Setting.byteSizeSetting("repositories.fs.chunk_size",, +        new ByteSizeValue(Long.MAX_VALUE), new ByteSizeValue(5), new ByteSizeValue(Long.MAX_VALUE), Property.NodeScope);, +            this.chunkSize = REPOSITORIES_CHUNK_SIZE_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +            if (partSize != null && partSize.getBytes() > 0) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        ByteSizeValue chunkSize = chunkSize();, +        if (chunkSize != null && chunkSize.getBytes() <= 0) {, +            throw new IllegalArgumentException("the chunk size cannot be negative: [" + chunkSize + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +    public static final Setting<ByteSizeValue> CHUNK_SIZE_SETTING = Setting.byteSizeSetting("chunk_size",, +            new ByteSizeValue(Long.MAX_VALUE), new ByteSizeValue(5), new ByteSizeValue(Long.MAX_VALUE), Property.NodeScope);, +    public static final Setting<ByteSizeValue> REPOSITORIES_CHUNK_SIZE_SETTING = Setting.byteSizeSetting("repositories.fs.chunk_size",, +        new ByteSizeValue(Long.MAX_VALUE), new ByteSizeValue(5), new ByteSizeValue(Long.MAX_VALUE), Property.NodeScope);, +            this.chunkSize = REPOSITORIES_CHUNK_SIZE_SETTING.get(settings);, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +    private Settings randomRepoSettings() {, +        Settings.Builder repoSettings = Settings.builder();, +        repoSettings.put("location", randomRepoPath());, +        if (randomBoolean()) {, +            repoSettings.put("compress", randomBoolean());, +        }, +        if (randomBoolean()) {, +            repoSettings.put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES);, +        } else {, +            if (randomBoolean()) {, +                repoSettings.put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES);, +            } else {, +                repoSettings.put("chunk_size", (String) null);, +            }, +        }, +        return repoSettings.build();, +    }, +, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(randomRepoSettings()));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(randomRepoSettings()));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(randomRepoSettings()));]