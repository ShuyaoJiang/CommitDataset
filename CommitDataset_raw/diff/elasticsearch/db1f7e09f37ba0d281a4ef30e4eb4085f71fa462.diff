[+++ b/.idea/misc.xml, +  <component name="EntryPointsManager">, +    <entry_points version="2.0" />, +  </component>, +++ b/.idea/misc.xml, +  <component name="EntryPointsManager">, +    <entry_points version="2.0" />, +  </component>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/BoostFieldMapper.java, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.search.NumericRangeFieldDataFilter;, +    @Override public Filter rangeFilter(FieldDataCache fieldDataCache, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFieldDataFilter.newFloatRange(fieldDataCache, names.indexName(),, +                lowerTerm == null ? null : Float.parseFloat(lowerTerm),, +                upperTerm == null ? null : Float.parseFloat(upperTerm),, +                includeLower, includeUpper);, +    }, +, +++ b/.idea/misc.xml, +  <component name="EntryPointsManager">, +    <entry_points version="2.0" />, +  </component>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/BoostFieldMapper.java, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.search.NumericRangeFieldDataFilter;, +    @Override public Filter rangeFilter(FieldDataCache fieldDataCache, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFieldDataFilter.newFloatRange(fieldDataCache, names.indexName(),, +                lowerTerm == null ? null : Float.parseFloat(lowerTerm),, +                upperTerm == null ? null : Float.parseFloat(upperTerm),, +                includeLower, includeUpper);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DateFieldMapper.java, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.search.NumericRangeFieldDataFilter;, +    @Override public Filter rangeFilter(FieldDataCache fieldDataCache, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFieldDataFilter.newLongRange(fieldDataCache, names.indexName(),, +                lowerTerm == null ? null : parseStringValue(lowerTerm),, +                upperTerm == null ? null : parseStringValue(upperTerm),, +                includeLower, includeUpper);, +    }, +, +++ b/.idea/misc.xml, +  <component name="EntryPointsManager">, +    <entry_points version="2.0" />, +  </component>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/BoostFieldMapper.java, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.search.NumericRangeFieldDataFilter;, +    @Override public Filter rangeFilter(FieldDataCache fieldDataCache, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFieldDataFilter.newFloatRange(fieldDataCache, names.indexName(),, +                lowerTerm == null ? null : Float.parseFloat(lowerTerm),, +                upperTerm == null ? null : Float.parseFloat(upperTerm),, +                includeLower, includeUpper);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DateFieldMapper.java, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.search.NumericRangeFieldDataFilter;, +    @Override public Filter rangeFilter(FieldDataCache fieldDataCache, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFieldDataFilter.newLongRange(fieldDataCache, names.indexName(),, +                lowerTerm == null ? null : parseStringValue(lowerTerm),, +                upperTerm == null ? null : parseStringValue(upperTerm),, +                includeLower, includeUpper);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DoubleFieldMapper.java, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.search.NumericRangeFieldDataFilter;, +    @Override public Filter rangeFilter(FieldDataCache fieldDataCache, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFieldDataFilter.newDoubleRange(fieldDataCache, names.indexName(),, +                lowerTerm == null ? null : Double.parseDouble(lowerTerm),, +                upperTerm == null ? null : Double.parseDouble(upperTerm),, +                includeLower, includeUpper);, +    }, +, +++ b/.idea/misc.xml, +  <component name="EntryPointsManager">, +    <entry_points version="2.0" />, +  </component>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/BoostFieldMapper.java, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.search.NumericRangeFieldDataFilter;, +    @Override public Filter rangeFilter(FieldDataCache fieldDataCache, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFieldDataFilter.newFloatRange(fieldDataCache, names.indexName(),, +                lowerTerm == null ? null : Float.parseFloat(lowerTerm),, +                upperTerm == null ? null : Float.parseFloat(upperTerm),, +                includeLower, includeUpper);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DateFieldMapper.java, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.search.NumericRangeFieldDataFilter;, +    @Override public Filter rangeFilter(FieldDataCache fieldDataCache, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFieldDataFilter.newLongRange(fieldDataCache, names.indexName(),, +                lowerTerm == null ? null : parseStringValue(lowerTerm),, +                upperTerm == null ? null : parseStringValue(upperTerm),, +                includeLower, includeUpper);, +    }, +]