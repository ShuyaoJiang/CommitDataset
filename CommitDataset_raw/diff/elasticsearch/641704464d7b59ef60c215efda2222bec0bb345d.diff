[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.client.indices.rollover.RolloverRequest;, +import org.elasticsearch.client.indices.rollover.RolloverResponse;, +, +    /**, +     * Rolls over an index using the Rollover Index API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">, +     * Rollover Index API on elastic.co</a>, +     * @param rolloverRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     *, +     * @deprecated This method uses deprecated request and response objects., +     * The method {@link #rollover(RolloverRequest, RequestOptions)} should be used instead, which accepts a new request object., +     */, +    @Deprecated, +    public org.elasticsearch.action.admin.indices.rollover.RolloverResponse rollover(, +            org.elasticsearch.action.admin.indices.rollover.RolloverRequest rolloverRequest,, +            RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(rolloverRequest, IndicesRequestConverters::rollover, options,, +            org.elasticsearch.action.admin.indices.rollover.RolloverResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously rolls over an index using the Rollover Index API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">, +     * Rollover Index API on elastic.co</a>, +     * @param rolloverRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     *, +     * @deprecated This method uses deprecated request and response objects., +     * The method {@link #rolloverAsync(RolloverRequest, RequestOptions, ActionListener)} should be used instead, which, +     * accepts a new request object., +     */, +    @Deprecated, +    public void rolloverAsync(org.elasticsearch.action.admin.indices.rollover.RolloverRequest rolloverRequest,, +            RequestOptions options, ActionListener<org.elasticsearch.action.admin.indices.rollover.RolloverResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(rolloverRequest, IndicesRequestConverters::rollover, options,, +            org.elasticsearch.action.admin.indices.rollover.RolloverResponse::fromXContent, listener, emptySet());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.client.indices.rollover.RolloverRequest;, +import org.elasticsearch.client.indices.rollover.RolloverResponse;, +, +    /**, +     * Rolls over an index using the Rollover Index API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">, +     * Rollover Index API on elastic.co</a>, +     * @param rolloverRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     *, +     * @deprecated This method uses deprecated request and response objects., +     * The method {@link #rollover(RolloverRequest, RequestOptions)} should be used instead, which accepts a new request object., +     */, +    @Deprecated, +    public org.elasticsearch.action.admin.indices.rollover.RolloverResponse rollover(, +            org.elasticsearch.action.admin.indices.rollover.RolloverRequest rolloverRequest,, +            RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(rolloverRequest, IndicesRequestConverters::rollover, options,, +            org.elasticsearch.action.admin.indices.rollover.RolloverResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously rolls over an index using the Rollover Index API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html">, +     * Rollover Index API on elastic.co</a>, +     * @param rolloverRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     *, +     * @deprecated This method uses deprecated request and response objects., +     * The method {@link #rolloverAsync(RolloverRequest, RequestOptions, ActionListener)} should be used instead, which, +     * accepts a new request object., +     */, +    @Deprecated, +    public void rolloverAsync(org.elasticsearch.action.admin.indices.rollover.RolloverRequest rolloverRequest,, +            RequestOptions options, ActionListener<org.elasticsearch.action.admin.indices.rollover.RolloverResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(rolloverRequest, IndicesRequestConverters::rollover, options,, +            org.elasticsearch.action.admin.indices.rollover.RolloverResponse::fromXContent, listener, emptySet());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesRequestConverters.java, +import org.elasticsearch.client.indices.rollover.RolloverRequest;, +    @Deprecated, +    static Request rollover(org.elasticsearch.action.admin.indices.rollover.RolloverRequest rolloverRequest) throws IOException {, +        String endpoint = new RequestConverters.EndpointBuilder().addPathPart(rolloverRequest.getAlias()).addPathPartAsIs("_rollover"), +            .addPathPart(rolloverRequest.getNewIndexName()).build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        params.withTimeout(rolloverRequest.timeout());, +        params.withMasterTimeout(rolloverRequest.masterNodeTimeout());, +        params.withWaitForActiveShards(rolloverRequest.getCreateIndexRequest().waitForActiveShards());, +        if (rolloverRequest.isDryRun()) {, +            params.putParam("dry_run", Boolean.TRUE.toString());]