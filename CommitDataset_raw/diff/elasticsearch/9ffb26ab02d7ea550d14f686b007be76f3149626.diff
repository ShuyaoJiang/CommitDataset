[+++ b/docs/reference/sql/language/syntax/select.asciidoc, +Or a mixture of the above:, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[groupByMulti], +----, +, +, +++ b/docs/reference/sql/language/syntax/select.asciidoc, +Or a mixture of the above:, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[groupByMulti], +----, +, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +    public static boolean equalsAsAttribute(Expression left, Expression right) {, +        if (!left.semanticEquals(right)) {, +            Attribute l = attribute(left);, +            return (l != null && l.semanticEquals(attribute(right)));, +        }, +        return true;, +    }, +, +++ b/docs/reference/sql/language/syntax/select.asciidoc, +Or a mixture of the above:, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[groupByMulti], +----, +, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +    public static boolean equalsAsAttribute(Expression left, Expression right) {, +        if (!left.semanticEquals(right)) {, +            Attribute l = attribute(left);, +            return (l != null && l.semanticEquals(attribute(right)));, +        }, +        return true;, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +                new ReplaceAggsWithPercentileRanks(), +                new PruneCast(),, +                // order by alignment of the aggs, +                new SortAggregateOnOrderBy(), +    static class ReplaceAggsWithPercentileRanks extends Rule<LogicalPlan, LogicalPlan> {, +    /**, +     * Align the order in aggregate based on the order by., +     */, +    static class SortAggregateOnOrderBy extends OptimizerRule<OrderBy> {, +, +        @Override, +        protected LogicalPlan rule(OrderBy ob) {, +            List<Order> order = ob.order();, +, +            // remove constants, +            List<Order> nonConstant = order.stream().filter(o -> !o.child().foldable()).collect(toList());, +, +            // if the sort points to an agg, change the agg order based on the order, +            if (ob.child() instanceof Aggregate) {, +                Aggregate a = (Aggregate) ob.child();, +                List<Expression> groupings = new ArrayList<>(a.groupings());, +                boolean orderChanged = false;, +, +                for (int orderIndex = 0; orderIndex < nonConstant.size(); orderIndex++) {, +                    Order o = nonConstant.get(orderIndex);, +                    Expression fieldToOrder = o.child();, +                    for (Expression group : a.groupings()) {, +                        if (Expressions.equalsAsAttribute(fieldToOrder, group)) {, +                            // move grouping in front, +                            groupings.remove(group);, +                            groupings.add(orderIndex, group);, +                            orderChanged = true;, +                        }, +                    }, +                }, +, +                if (orderChanged) {, +                    Aggregate newAgg = new Aggregate(a.location(), a.child(), groupings, a.aggregates());, +                    return new OrderBy(ob.location(), newAgg, ob.order());, +                }, +            }, +            return ob;, +        }, +    }, +, +++ b/docs/reference/sql/language/syntax/select.asciidoc, +Or a mixture of the above:, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[groupByMulti], +----, +, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +    public static boolean equalsAsAttribute(Expression left, Expression right) {, +        if (!left.semanticEquals(right)) {, +            Attribute l = attribute(left);]