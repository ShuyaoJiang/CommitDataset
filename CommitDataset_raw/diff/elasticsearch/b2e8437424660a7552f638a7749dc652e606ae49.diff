[+++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.awaitLatch;, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.awaitLatch;, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +++ b/test/framework/src/main/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +     * Wait for a latch to countdown and provide a useful error message if it does not, +     * Often latches are called as <code>assertTrue(latch.await(1, TimeUnit.SECONDS));</code>, +     * In case of a failure this will just throw an assertion error without any further message, +     *, +     * @param latch    The latch to wait for, +     * @param timeout  The value of the timeout, +     * @param unit     The unit of the timeout, +     * @throws InterruptedException An exception if the waiting is interrupted, +     */, +    public static void awaitLatch(CountDownLatch latch, long timeout, TimeUnit unit) throws InterruptedException {, +        TimeValue timeValue = new TimeValue(timeout, unit);, +        String message = String.format(Locale.ROOT, "expected latch to be counted down after %s, but was not", timeValue);, +        boolean isCountedDown = latch.await(timeout, unit);, +        assertThat(message, isCountedDown, is(true));, +    }, +, +    /**, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.awaitLatch;, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +                        awaitLatch(latch, 5, TimeUnit.SECONDS);, +++ b/test/framework/src/main/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +     * Wait for a latch to countdown and provide a useful error message if it does not, +     * Often latches are called as <code>assertTrue(latch.await(1, TimeUnit.SECONDS));</code>, +     * In case of a failure this will just throw an assertion error without any further message, +     *, +     * @param latch    The latch to wait for, +     * @param timeout  The value of the timeout, +     * @param unit     The unit of the timeout, +     * @throws InterruptedException An exception if the waiting is interrupted, +     */, +    public static void awaitLatch(CountDownLatch latch, long timeout, TimeUnit unit) throws InterruptedException {, +        TimeValue timeValue = new TimeValue(timeout, unit);, +        String message = String.format(Locale.ROOT, "expected latch to be counted down after %s, but was not", timeValue);, +        boolean isCountedDown = latch.await(timeout, unit);, +        assertThat(message, isCountedDown, is(true));, +    }, +, +    /**, +++ b/x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunnerTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.awaitLatch;, +        awaitLatch(latch, 5, TimeUnit.SECONDS);, +        awaitLatch(latch, 5, TimeUnit.SECONDS);, +        awaitLatch(latch, 5, TimeUnit.SECONDS);, +        awaitLatch(asyncLatch, 5, TimeUnit.SECONDS);, +        awaitLatch(latch, 5, TimeUnit.SECONDS);]