[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/MasterNodeOperationRequest.java, +import org.elasticsearch.common.unit.TimeValue;, +    private TimeValue masterNodeTimeout = TimeValue.timeValueSeconds(30);, +, +    /**, +     * A timeout value in case the master has not been discovered yet or disconnected., +     */, +    public MasterNodeOperationRequest masterNodeTimeout(TimeValue timeout) {, +        this.masterNodeTimeout = timeout;, +        return this;, +    }, +, +    public TimeValue masterNodeTimeout() {, +        return this.masterNodeTimeout;, +    }, +, +        masterNodeTimeout = TimeValue.readTimeValue(in);, +        masterNodeTimeout.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexRequest.java, +        super.readFrom(in);, +        super.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/MasterNodeOperationRequest.java, +import org.elasticsearch.common.unit.TimeValue;, +    private TimeValue masterNodeTimeout = TimeValue.timeValueSeconds(30);, +, +    /**, +     * A timeout value in case the master has not been discovered yet or disconnected., +     */, +    public MasterNodeOperationRequest masterNodeTimeout(TimeValue timeout) {, +        this.masterNodeTimeout = timeout;, +        return this;, +    }, +, +    public TimeValue masterNodeTimeout() {, +        return this.masterNodeTimeout;, +    }, +, +        masterNodeTimeout = TimeValue.readTimeValue(in);, +        masterNodeTimeout.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +import org.elasticsearch.discovery.MasterNotDiscoveredException;, +                if (retrying) {, +                    listener.onFailure(new MasterNotDiscoveredException());, +                } else {, +                    clusterService.add(request.masterNodeTimeout(), new TimeoutClusterStateListener() {, +                        @Override public void postAdded() {, +                            ClusterState clusterStateV2 = clusterService.state();, +                            if (clusterStateV2.nodes().masterNodeId() != null) {, +                                // now we have a master, try and execute it..., +                                clusterService.remove(this);, +                                innerExecute(request, listener, true);, +                            }, +                        }, +, +                        @Override public void onClose() {, +                            clusterService.remove(this);, +                            listener.onFailure(new NodeCloseException(nodes.localNode()));, +                        }, +, +                        @Override public void onTimeout(TimeValue timeout) {, +                            clusterService.remove(this);, +                            listener.onFailure(new MasterNotDiscoveredException());, +                        }, +, +                        @Override public void clusterChanged(ClusterChangedEvent event) {, +                            if (event.nodesDelta().masterNodeChanged()) {, +                                clusterService.remove(this);]