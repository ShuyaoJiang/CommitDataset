[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TermsRequest.java, +import org.elasticsearch.action.ActionRequestValidationException;, +    @Override public ActionRequestValidationException validate() {, +        ActionRequestValidationException validationException = super.validate();, +        if (fields == null || fields.length == 0) {, +            fields = DEFAULT_FIELDS;, +        }, +        return validationException;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TermsRequest.java, +import org.elasticsearch.action.ActionRequestValidationException;, +    @Override public ActionRequestValidationException validate() {, +        ActionRequestValidationException validationException = super.validate();, +        if (fields == null || fields.length == 0) {, +            fields = DEFAULT_FIELDS;, +        }, +        return validationException;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TransportTermsAction.java, +                            // convert to actual term text, +                            if (fieldMapper != null && fieldMapper.requiresStringToStringConversion()) {, +                                // valueAsString returns null indicating that this is not interesting, +                                term = term.createTerm(fieldMapper.valueAsString(term.text()));, +                                // if we need to break on this term enumeration, bail, +                                if (fieldMapper.shouldBreakTermEnumeration(term.text())) {, +                                    break;, +                                }, +                                if (term.text() == null) {, +                                    continue;, +                                }, +                            }, +                            // convert to actual term text, +                            if (fieldMapper != null && fieldMapper.requiresStringToStringConversion()) {, +                                // valueAsString returns null indicating that this is not interesting, +                                term = term.createTerm(fieldMapper.valueAsString(term.text()));, +                                // if we need to break on this term enumeration, bail, +                                if (fieldMapper.shouldBreakTermEnumeration(term.text())) {, +                                    break;, +                                }, +                                if (term.text() == null) {, +                                    continue;, +                                }, +                            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TermsRequest.java, +import org.elasticsearch.action.ActionRequestValidationException;, +    @Override public ActionRequestValidationException validate() {, +        ActionRequestValidationException validationException = super.validate();, +        if (fields == null || fields.length == 0) {, +            fields = DEFAULT_FIELDS;, +        }, +        return validationException;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TransportTermsAction.java, +                            // convert to actual term text, +                            if (fieldMapper != null && fieldMapper.requiresStringToStringConversion()) {, +                                // valueAsString returns null indicating that this is not interesting, +                                term = term.createTerm(fieldMapper.valueAsString(term.text()));, +                                // if we need to break on this term enumeration, bail, +                                if (fieldMapper.shouldBreakTermEnumeration(term.text())) {, +                                    break;, +                                }, +                                if (term.text() == null) {, +                                    continue;, +                                }, +                            }, +                            // convert to actual term text, +                            if (fieldMapper != null && fieldMapper.requiresStringToStringConversion()) {, +                                // valueAsString returns null indicating that this is not interesting, +                                term = term.createTerm(fieldMapper.valueAsString(term.text()));, +                                // if we need to break on this term enumeration, bail, +                                if (fieldMapper.shouldBreakTermEnumeration(term.text())) {, +                                    break;, +                                }, +                                if (term.text() == null) {, +                                    continue;, +                                }, +                            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/Node.java, +import org.apache.lucene.util.StringHelper;, +    private String nodeName = StringHelper.intern("");, +        if (nodeName == null) {, +            this.nodeName = StringHelper.intern("");, +        } else {, +            this.nodeName = StringHelper.intern(nodeName);, +        this.dataNode = dataNode;, +        this.nodeId = StringHelper.intern(nodeId);, +        nodeName = StringHelper.intern(in.readUTF());, +        nodeId = StringHelper.intern(in.readUTF());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/terms/TermsRequest.java, +import org.elasticsearch.action.ActionRequestValidationException;, +    @Override public ActionRequestValidationException validate() {, +        ActionRequestValidationException validationException = super.validate();, +        if (fields == null || fields.length == 0) {, +            fields = DEFAULT_FIELDS;, +        }, +        return validationException;, +    }]