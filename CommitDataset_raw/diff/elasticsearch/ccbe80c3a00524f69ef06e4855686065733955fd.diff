[+++ b/docs/reference/release-notes/7.0.0-alpha1.asciidoc, +* `CircuitBreakingException` was previously mapped to HTTP status code 503 and is now, +   mapped as HTTP status code 429., +++ b/docs/reference/release-notes/7.0.0-alpha1.asciidoc, +* `CircuitBreakingException` was previously mapped to HTTP status code 503 and is now, +   mapped as HTTP status code 429., +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalResponseTests.java, +import org.elasticsearch.common.breaker.CircuitBreaker;, +            new CircuitBreakingException("Data too large", 123, 456, CircuitBreaker.Durability.PERMANENT),, +++ b/docs/reference/release-notes/7.0.0-alpha1.asciidoc, +* `CircuitBreakingException` was previously mapped to HTTP status code 503 and is now, +   mapped as HTTP status code 429., +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalResponseTests.java, +import org.elasticsearch.common.breaker.CircuitBreaker;, +            new CircuitBreakingException("Data too large", 123, 456, CircuitBreaker.Durability.PERMANENT),, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpRequestSizeLimitIT.java, +                    assertAtLeastOnceExpectedStatus(multipleResponses, HttpResponseStatus.TOO_MANY_REQUESTS);, +++ b/docs/reference/release-notes/7.0.0-alpha1.asciidoc, +* `CircuitBreakingException` was previously mapped to HTTP status code 503 and is now, +   mapped as HTTP status code 429., +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalResponseTests.java, +import org.elasticsearch.common.breaker.CircuitBreaker;, +            new CircuitBreakingException("Data too large", 123, 456, CircuitBreaker.Durability.PERMANENT),, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpRequestSizeLimitIT.java, +                    assertAtLeastOnceExpectedStatus(multipleResponses, HttpResponseStatus.TOO_MANY_REQUESTS);, +++ b/server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +    private final Durability durability;, +        this.durability = settings.getDurability();, +            logger.trace("creating ChildCircuitBreaker with settings {}", settings);, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit, durability);, +, +    /**, +     * @return whether a tripped circuit breaker will reset itself (transient) or requires manual intervention (permanent)., +     */, +    @Override, +    public Durability getDurability() {, +        return this.durability;, +    }, +++ b/docs/reference/release-notes/7.0.0-alpha1.asciidoc, +* `CircuitBreakingException` was previously mapped to HTTP status code 503 and is now, +   mapped as HTTP status code 429., +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalResponseTests.java, +import org.elasticsearch.common.breaker.CircuitBreaker;, +            new CircuitBreakingException("Data too large", 123, 456, CircuitBreaker.Durability.PERMANENT),, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpRequestSizeLimitIT.java, +                    assertAtLeastOnceExpectedStatus(multipleResponses, HttpResponseStatus.TOO_MANY_REQUESTS);, +++ b/server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +    private final Durability durability;, +        this.durability = settings.getDurability();, +            logger.trace("creating ChildCircuitBreaker with settings {}", settings);, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit, durability);, +, +    /**, +     * @return whether a tripped circuit breaker will reset itself (transient) or requires manual intervention (permanent)., +     */, +    @Override, +    public Durability getDurability() {, +        return this.durability;, +    }, +++ b/server/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    enum Durability {, +        // The condition that tripped the circuit breaker fixes itself eventually., +        TRANSIENT,, +        // The condition that tripped the circuit breaker requires manual intervention., +        PERMANENT, +    }, +, +, +    /**, +     * @return whether a tripped circuit breaker will reset itself (transient) or requires manual intervention (permanent)., +     */, +    Durability getDurability();, +++ b/docs/reference/release-notes/7.0.0-alpha1.asciidoc, +* `CircuitBreakingException` was previously mapped to HTTP status code 503 and is now, +   mapped as HTTP status code 429., +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalResponseTests.java, +import org.elasticsearch.common.breaker.CircuitBreaker;, +            new CircuitBreakingException("Data too large", 123, 456, CircuitBreaker.Durability.PERMANENT),, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpRequestSizeLimitIT.java, +                    assertAtLeastOnceExpectedStatus(multipleResponses, HttpResponseStatus.TOO_MANY_REQUESTS);, +++ b/server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +    private final Durability durability;, +        this.durability = settings.getDurability();, +            logger.trace("creating ChildCircuitBreaker with settings {}", settings);, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit, durability);, +, +    /**, +     * @return whether a tripped circuit breaker will reset itself (transient) or requires manual intervention (permanent)., +     */, +    @Override, +    public Durability getDurability() {, +        return this.durability;, +    }, +++ b/server/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    enum Durability {, +        // The condition that tripped the circuit breaker fixes itself eventually., +        TRANSIENT,, +        // The condition that tripped the circuit breaker requires manual intervention., +        PERMANENT, +    }]