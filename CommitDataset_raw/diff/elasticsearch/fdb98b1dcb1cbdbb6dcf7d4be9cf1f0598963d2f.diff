[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                        // a HACK to make highlighter do highlighting, even though its using the single frag list builder, +                        int numberOfFragments = field.numberOfFragments() == 0 ? 1 : field.numberOfFragments();, +                        fragments = highlighter.getBestFragments(fieldQuery, context.searcher().getIndexReader(), docId, fieldName, field.fragmentCharSize(), numberOfFragments);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                        // a HACK to make highlighter do highlighting, even though its using the single frag list builder, +                        int numberOfFragments = field.numberOfFragments() == 0 ? 1 : field.numberOfFragments();, +                        fragments = highlighter.getBestFragments(fieldQuery, context.searcher().getIndexReader(), docId, fieldName, field.fragmentCharSize(), numberOfFragments);, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/highlight/SameContentHighlightingTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.integration.search.highlight;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.testng.annotations.AfterClass;, +import org.testng.annotations.BeforeClass;, +import org.testng.annotations.Test;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.*;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.Matchers.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class SameContentHighlightingTests extends AbstractNodesTests {, +, +    private Client client;, +, +    @BeforeClass public void createNodes() throws Exception {, +        startNode("node1");, +        client = getClient();, +    }, +, +    @AfterClass public void closeNodes() {, +        client.close();, +        closeAllNodes();, +    }, +, +    protected Client getClient() {, +        return client("node1");, +    }, +, +    @Test public void testSameContent() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +, +        client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("number_of_shards", 2)), +                .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties"), +                        .startObject("title").field("type", "string").field("store", "yes").field("term_vector", "with_positions_offsets").endObject(), +                        .endObject().endObject().endObject()), +                .execute().actionGet();, +, +        for (int i = 0; i < 5; i++) {, +            client.prepareIndex("test", "type1", Integer.toString(i)), +                    .setSource("title", "This is a test on the highlighting bug present in elasticsearch").setRefresh(true).execute().actionGet();, +        }, +, +        SearchResponse search = client.prepareSearch(), +                .setQuery(fieldQuery("title", "bug")), +                .addHighlightedField("title", -1, 0), +                .execute().actionGet();, +, +        assertThat(search.hits().totalHits(), equalTo(5l));, +, +        for (SearchHit hit : search.hits()) {, +            assertThat(hit.highlightFields().get("title").fragments()[0], equalTo("This is a test on the highlighting <em>bug</em> present in elasticsearch"));, +        }, +    }, +}]