[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : failedShards) {, +            ShardRouting shardToFail = failedShardEntry.routingEntry;, +            allocation.addIgnoreShardForNode(shardToFail.shardId(), shardToFail.currentNodeId());, +            // failing a primary also fails initializing replica shards, re-resolve ShardRouting, +            ShardRouting failedShard = routingNodes.getByAllocationId(shardToFail.shardId(), shardToFail.allocationId().getId());, +            if (failedShard != null) {, +                if (failedShard != shardToFail) {, +                    logger.trace("{} shard routing modified in an earlier iteration (previous: {}, current: {})",, +                        shardToFail.shardId(), shardToFail, failedShard);, +                }, +                int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            } else {, +                logger.trace("{} shard routing failed in an earlier iteration (routing: {})", shardToFail.shardId(), shardToFail);, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : failedShards) {, +            ShardRouting shardToFail = failedShardEntry.routingEntry;, +            allocation.addIgnoreShardForNode(shardToFail.shardId(), shardToFail.currentNodeId());, +            // failing a primary also fails initializing replica shards, re-resolve ShardRouting, +            ShardRouting failedShard = routingNodes.getByAllocationId(shardToFail.shardId(), shardToFail.allocationId().getId());, +            if (failedShard != null) {, +                if (failedShard != shardToFail) {, +                    logger.trace("{} shard routing modified in an earlier iteration (previous: {}, current: {})",, +                        shardToFail.shardId(), shardToFail, failedShard);, +                }, +                int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            } else {, +                logger.trace("{} shard routing failed in an earlier iteration (routing: {})", shardToFail.shardId(), shardToFail);, +            }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : failedShards) {, +            ShardRouting shardToFail = failedShardEntry.routingEntry;, +            allocation.addIgnoreShardForNode(shardToFail.shardId(), shardToFail.currentNodeId());, +            // failing a primary also fails initializing replica shards, re-resolve ShardRouting, +            ShardRouting failedShard = routingNodes.getByAllocationId(shardToFail.shardId(), shardToFail.allocationId().getId());, +            if (failedShard != null) {, +                if (failedShard != shardToFail) {, +                    logger.trace("{} shard routing modified in an earlier iteration (previous: {}, current: {})",, +                        shardToFail.shardId(), shardToFail, failedShard);, +                }, +                int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            } else {, +                logger.trace("{} shard routing failed in an earlier iteration (routing: {})", shardToFail.shardId(), shardToFail);, +            }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (values.isEmpty() == false) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : failedShards) {, +            ShardRouting shardToFail = failedShardEntry.routingEntry;, +            allocation.addIgnoreShardForNode(shardToFail.shardId(), shardToFail.currentNodeId());, +            // failing a primary also fails initializing replica shards, re-resolve ShardRouting, +            ShardRouting failedShard = routingNodes.getByAllocationId(shardToFail.shardId(), shardToFail.allocationId().getId());, +            if (failedShard != null) {, +                if (failedShard != shardToFail) {, +                    logger.trace("{} shard routing modified in an earlier iteration (previous: {}, current: {})",, +                        shardToFail.shardId(), shardToFail, failedShard);, +                }, +                int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;]