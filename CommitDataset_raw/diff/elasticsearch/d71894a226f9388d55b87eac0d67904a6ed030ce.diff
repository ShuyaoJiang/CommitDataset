[+++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +    public CreateIndexRequest getShrinkIndexRequest() {, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +    public CreateIndexRequest getShrinkIndexRequest() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequestBuilder.java, +        this.request.getShrinkIndexRequest().settings(settings);, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +    public CreateIndexRequest getShrinkIndexRequest() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequestBuilder.java, +        this.request.getShrinkIndexRequest().settings(settings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportShrinkAction.java, +import org.elasticsearch.action.admin.indices.stats.IndexShardStats;, +import org.elasticsearch.index.shard.ShardId;, +import java.util.function.IntFunction;, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA_WRITE, request.getShrinkIndexRequest().index());, +                    (i) -> {, +                        IndexShardStats shard = indicesStatsResponse.getIndex(sourceIndex).getIndexShards().get(i);, +                        return shard == null ? null : shard.getPrimary().getDocs();, +                    }, indexNameExpressionResolver);, +        , final IntFunction<DocsStats> perShardDocStats, IndexNameExpressionResolver indexNameExpressionResolver) {, +        final CreateIndexRequest targetIndex = shrinkReqeust.getShrinkIndexRequest();, +        int numShards = 1;, +        if (IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.exists(targetIndexSettings)) {, +            numShards = IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.get(targetIndexSettings);, +        }, +        for (int i = 0; i < numShards; i++) {, +            Set<ShardId> shardIds = IndexMetaData.selectShrinkShards(i, metaData, numShards);, +            long count = 0;, +            for (ShardId id : shardIds) {, +                DocsStats docsStats = perShardDocStats.apply(id.id());, +                if (docsStats != null) {, +                    count += docsStats.getCount();, +                }, +                if (count > IndexWriter.MAX_DOCS) {, +                        + "] docs - too many documents in shards " + shardIds);, +                }, +            }, +, +        Settings.Builder settingsBuilder = Settings.builder().put(targetIndexSettings);, +        settingsBuilder.put("index.number_of_shards", numShards);, +        targetIndex.settings(settingsBuilder);, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +    public CreateIndexRequest getShrinkIndexRequest() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequestBuilder.java, +        this.request.getShrinkIndexRequest().settings(settings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportShrinkAction.java, +import org.elasticsearch.action.admin.indices.stats.IndexShardStats;, +import org.elasticsearch.index.shard.ShardId;, +import java.util.function.IntFunction;, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA_WRITE, request.getShrinkIndexRequest().index());, +                    (i) -> {, +                        IndexShardStats shard = indicesStatsResponse.getIndex(sourceIndex).getIndexShards().get(i);, +                        return shard == null ? null : shard.getPrimary().getDocs();, +                    }, indexNameExpressionResolver);, +        , final IntFunction<DocsStats> perShardDocStats, IndexNameExpressionResolver indexNameExpressionResolver) {, +        final CreateIndexRequest targetIndex = shrinkReqeust.getShrinkIndexRequest();, +        int numShards = 1;, +        if (IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.exists(targetIndexSettings)) {, +            numShards = IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.get(targetIndexSettings);, +        }, +        for (int i = 0; i < numShards; i++) {, +            Set<ShardId> shardIds = IndexMetaData.selectShrinkShards(i, metaData, numShards);, +            long count = 0;, +            for (ShardId id : shardIds) {, +                DocsStats docsStats = perShardDocStats.apply(id.id());, +                if (docsStats != null) {, +                    count += docsStats.getCount();, +                }, +                if (count > IndexWriter.MAX_DOCS) {, +                        + "] docs - too many documents in shards " + shardIds);, +                }, +            }, +, +        Settings.Builder settingsBuilder = Settings.builder().put(targetIndexSettings);, +        settingsBuilder.put("index.number_of_shards", numShards);, +        targetIndex.settings(settingsBuilder);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +                if ((!enforceLimits || (check.isSystemCheck() && ignoreSystemChecks)) && !check.alwaysEnforce()) {, +        checks.add(new OnErrorCheck());, +        checks.add(new OnOutOfMemoryErrorCheck());, +        default boolean alwaysEnforce() {, +            return false;, +        }, +, +    static abstract class MightForkCheck implements BootstrapCheck.Check {, +, +        @Override, +        public boolean check() {, +            return isSeccompInstalled() && mightFork();, +        }, +, +        // visible for testing, +        boolean isSeccompInstalled() {, +            return Natives.isSeccompInstalled();, +        }]