[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptSettings.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptSettings.java, +++ b/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java, +        String script = "1";, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptSettings.java, +++ b/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java, +        String script = "1";, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +            String script = "1";, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptSettings.java, +++ b/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java, +        String script = "1";, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +            String script = "1";, +++ b/core/src/test/java/org/elasticsearch/script/FileScriptTests.java, +        String scriptSource = "1";, +        Files.write(mockscript, scriptSource.getBytes("UTF-8"));, +        MockScriptEngine scriptEngine = new MockScriptEngine(MockScriptEngine.NAME, Collections.singletonMap(scriptSource, script -> "1"));, +        ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections.singleton(scriptEngine));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptSettings.java, +++ b/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java, +        String script = "1";, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +            String script = "1";, +++ b/core/src/test/java/org/elasticsearch/script/FileScriptTests.java, +        String scriptSource = "1";, +        Files.write(mockscript, scriptSource.getBytes("UTF-8"));, +        MockScriptEngine scriptEngine = new MockScriptEngine(MockScriptEngine.NAME, Collections.singletonMap(scriptSource, script -> "1"));, +        ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections.singleton(scriptEngine));, +++ b/core/src/test/java/org/elasticsearch/script/IndexLookupIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.script;, +, +import org.elasticsearch.action.search.SearchPhaseExecutionException;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.ShardSearchFailure;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.lookup.IndexField;, +import org.elasticsearch.search.lookup.IndexFieldTerm;, +import org.elasticsearch.search.lookup.IndexLookup;, +import org.elasticsearch.search.lookup.LeafIndexLookup;, +import org.elasticsearch.search.lookup.TermPosition;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.hamcrest.Matchers;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ExecutionException;, +import java.util.function.Function;, +, +import static java.util.Collections.emptyList;, +import static org.elasticsearch.script.ScriptService.ScriptType;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;]