[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregations.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.Objects;, +, +import static java.util.Collections.unmodifiableMap;, + * Represents a set of {@link Aggregation}s, +public abstract class Aggregations implements Iterable<Aggregation> {, +, +    protected List<? extends Aggregation> aggregations = Collections.emptyList();, +    protected Map<String, Aggregation> aggregationsAsMap;, +, +    protected Aggregations() {, +    }, +, +    protected Aggregations(List<? extends Aggregation> aggregations) {, +        this.aggregations = aggregations;, +    }, +, +    /**, +     * Iterates over the {@link Aggregation}s., +     */, +    @Override, +    public final Iterator<Aggregation> iterator() {, +        return aggregations.stream().map((p) -> (Aggregation) p).iterator();, +    }, +    public final List<Aggregation> asList() {, +        return Collections.unmodifiableList(aggregations);, +    }, +    public final Map<String, Aggregation> asMap() {, +        return getAsMap();, +    }, +    public final Map<String, Aggregation> getAsMap() {, +        if (aggregationsAsMap == null) {, +            Map<String, Aggregation> newAggregationsAsMap = new HashMap<>(aggregations.size());, +            for (Aggregation aggregation : aggregations) {, +                newAggregationsAsMap.put(aggregation.getName(), aggregation);, +            }, +            this.aggregationsAsMap = unmodifiableMap(newAggregationsAsMap);, +        }, +        return aggregationsAsMap;, +    }, +    @SuppressWarnings("unchecked"), +    public final <A extends Aggregation> A get(String name) {, +        return (A) asMap().get(name);, +    }, +, +    @Override, +    public final boolean equals(Object obj) {, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        return aggregations.equals(((Aggregations) obj).aggregations);, +    }, +, +    @Override, +    public final int hashCode() {, +        return Objects.hash(getClass(), aggregations);, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregations.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.Objects;, +, +import static java.util.Collections.unmodifiableMap;, + * Represents a set of {@link Aggregation}s, +public abstract class Aggregations implements Iterable<Aggregation> {, +, +    protected List<? extends Aggregation> aggregations = Collections.emptyList();, +    protected Map<String, Aggregation> aggregationsAsMap;, +, +    protected Aggregations() {, +    }, +, +    protected Aggregations(List<? extends Aggregation> aggregations) {, +        this.aggregations = aggregations;, +    }, +, +    /**, +     * Iterates over the {@link Aggregation}s., +     */, +    @Override, +    public final Iterator<Aggregation> iterator() {, +        return aggregations.stream().map((p) -> (Aggregation) p).iterator();, +    }, +    public final List<Aggregation> asList() {, +        return Collections.unmodifiableList(aggregations);, +    }, +    public final Map<String, Aggregation> asMap() {, +        return getAsMap();, +    }, +    public final Map<String, Aggregation> getAsMap() {, +        if (aggregationsAsMap == null) {, +            Map<String, Aggregation> newAggregationsAsMap = new HashMap<>(aggregations.size());, +            for (Aggregation aggregation : aggregations) {, +                newAggregationsAsMap.put(aggregation.getName(), aggregation);, +            }, +            this.aggregationsAsMap = unmodifiableMap(newAggregationsAsMap);]