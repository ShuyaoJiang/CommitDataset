[+++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +    private final Queue<Collection<DfsSearchResult>> cacheDfsResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QuerySearchResultProvider>> cacheQueryResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, FetchSearchResult>> cacheFetchResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QueryFetchSearchResult>> cacheQueryFetchResults = ConcurrentCollections.newQueue();, +            Queue<DfsSearchResult> offer = ConcurrentCollections.newQueue();, +            cacheDfsResults.offer(offer);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +    private final Queue<Collection<DfsSearchResult>> cacheDfsResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QuerySearchResultProvider>> cacheQueryResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, FetchSearchResult>> cacheFetchResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QueryFetchSearchResult>> cacheQueryFetchResults = ConcurrentCollections.newQueue();, +            Queue<DfsSearchResult> offer = ConcurrentCollections.newQueue();, +            cacheDfsResults.offer(offer);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        private volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +    private final Queue<Collection<DfsSearchResult>> cacheDfsResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QuerySearchResultProvider>> cacheQueryResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, FetchSearchResult>> cacheFetchResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QueryFetchSearchResult>> cacheQueryFetchResults = ConcurrentCollections.newQueue();, +            Queue<DfsSearchResult> offer = ConcurrentCollections.newQueue();, +            cacheDfsResults.offer(offer);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        private volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        protected volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +    private final Queue<Collection<DfsSearchResult>> cacheDfsResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QuerySearchResultProvider>> cacheQueryResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, FetchSearchResult>> cacheFetchResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QueryFetchSearchResult>> cacheQueryFetchResults = ConcurrentCollections.newQueue();, +            Queue<DfsSearchResult> offer = ConcurrentCollections.newQueue();, +            cacheDfsResults.offer(offer);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        private volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        protected volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollScanAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        protected volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +    private final Queue<Collection<DfsSearchResult>> cacheDfsResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QuerySearchResultProvider>> cacheQueryResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, FetchSearchResult>> cacheFetchResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QueryFetchSearchResult>> cacheQueryFetchResults = ConcurrentCollections.newQueue();, +            Queue<DfsSearchResult> offer = ConcurrentCollections.newQueue();, +            cacheDfsResults.offer(offer);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        private volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        protected volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollScanAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        protected volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.Queue;, +        private volatile Queue<ShardSearchFailure> shardFailures;, +            Queue<ShardSearchFailure> localFailures = shardFailures;, +                shardFailures = ConcurrentCollections.newQueue();, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +    private final Queue<Collection<DfsSearchResult>> cacheDfsResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QuerySearchResultProvider>> cacheQueryResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, FetchSearchResult>> cacheFetchResults = ConcurrentCollections.newQueue();, +    private final Queue<Map<SearchShardTarget, QueryFetchSearchResult>> cacheQueryFetchResults = ConcurrentCollections.newQueue();]