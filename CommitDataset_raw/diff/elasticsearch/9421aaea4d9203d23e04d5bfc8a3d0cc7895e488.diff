[+++ b/core/pom.xml, +    <properties>, +        <xlint.options>-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked</xlint.options>, +    </properties>, +, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/pom.xml, +    <properties>, +        <xlint.options>-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked</xlint.options>, +    </properties>, +, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +import org.elasticsearch.index.query.QueryParseContext;, +    public Query query(QueryParseContext parseContext, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/pom.xml, +    <properties>, +        <xlint.options>-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked</xlint.options>, +    </properties>, +, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +import org.elasticsearch.index.query.QueryParseContext;, +    public Query query(QueryParseContext parseContext, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/FieldQueryExtension.java, +import org.elasticsearch.index.query.QueryParseContext;, +    Query query(QueryParseContext parseContext, String queryText);, +++ b/core/pom.xml, +    <properties>, +        <xlint.options>-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked</xlint.options>, +    </properties>, +, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +import org.elasticsearch.index.query.QueryParseContext;, +    public Query query(QueryParseContext parseContext, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/FieldQueryExtension.java, +import org.elasticsearch.index.query.QueryParseContext;, +    Query query(QueryParseContext parseContext, String queryText);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import org.apache.lucene.search.FilteredQuery;, +import org.apache.lucene.search.FuzzyQuery;, +import org.apache.lucene.search.MatchNoDocsQuery;, +import org.apache.lucene.search.MultiPhraseQuery;, +import org.apache.lucene.search.PhraseQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.WildcardQuery;, +import org.apache.lucene.util.Version;, +import org.elasticsearch.index.query.QueryParseContext;, +import com.google.common.collect.ImmutableMap;, +, +    private final QueryParseContext parseContext;, +    private Analyzer quoteAnalyzer;, +, +    private boolean forcedAnalyzer;, +    private boolean forcedQuoteAnalyzer;, +, +    private boolean analyzeWildcard;, +, +    private String quoteFieldSuffix;, +, +    public MapperQueryParser(QueryParseContext parseContext) {, +        this.parseContext = parseContext;, +, +        if (settings.fields() != null) {, +            if (settings.fields.size() == 1) {, +                // just mark it as the default field, +                this.field = settings.fields().get(0);, +                // otherwise, we need to have the default field being null..., +        }, +, +        this.forcedAnalyzer = settings.forcedAnalyzer() != null;, +        this.setAnalyzer(forcedAnalyzer ? settings.forcedAnalyzer() : settings.defaultAnalyzer());, +        if (settings.forcedQuoteAnalyzer() != null) {, +            this.forcedQuoteAnalyzer = true;, +            this.quoteAnalyzer = settings.forcedQuoteAnalyzer();, +        } else if (forcedAnalyzer) {, +            this.forcedQuoteAnalyzer = true;, +            this.quoteAnalyzer = settings.forcedAnalyzer();, +        } else {, +            this.forcedAnalyzer = false;, +            this.quoteAnalyzer = settings.defaultQuoteAnalyzer();, +        }, +        this.quoteFieldSuffix = settings.quoteFieldSuffix();, +        setFuzzyMinSim(settings.getFuzziness().asFloat());, +        this.analyzeWildcard = settings.analyzeWildcard();, +            return fieldQueryExtension.query(parseContext, queryText);, +                setAnalyzer(quoteAnalyzer);, +                if (quoteFieldSuffix != null) {, +                    currentFieldType = parseContext.fieldMapper(field + quoteFieldSuffix);, +                currentFieldType = parseContext.fieldMapper(field);, +                    if (!forcedQuoteAnalyzer) {]