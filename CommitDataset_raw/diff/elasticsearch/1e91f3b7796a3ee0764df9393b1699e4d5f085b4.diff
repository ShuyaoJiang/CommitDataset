[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-proc:none' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-proc:none' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/core/src/main/java/org/elasticsearch/search/suggest/DirectSpellcheckerSettings.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-proc:none' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/core/src/main/java/org/elasticsearch/search/suggest/DirectSpellcheckerSettings.java, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.suggest;, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;, +import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;, +import org.apache.lucene.search.spell.DirectSpellChecker;, +import org.apache.lucene.search.spell.SuggestWord;, +import org.apache.lucene.search.spell.SuggestWordFrequencyComparator;, +import org.apache.lucene.search.spell.SuggestWordQueue;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.BytesRefBuilder;, +import org.apache.lucene.util.CharsRef;, +import org.apache.lucene.util.CharsRefBuilder;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.FastCharArrayReader;, +, +import java.io.IOException;, +import java.util.Comparator;, +, +public final class SuggestUtils {, +    private static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    private static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +, +    private SuggestUtils() {, +        // utils!!, +    }, +, +    public static DirectSpellChecker getDirectSpellChecker(DirectSpellcheckerSettings suggestion) {, +        DirectSpellChecker directSpellChecker = new DirectSpellChecker();, +        directSpellChecker.setAccuracy(suggestion.accuracy());, +        Comparator<SuggestWord> comparator;, +        switch (suggestion.sort()) {, +            case SCORE:, +                comparator = SCORE_COMPARATOR;, +                break;, +            case FREQUENCY:, +                comparator = LUCENE_FREQUENCY;, +                break;, +            default:, +                throw new IllegalArgumentException("Illegal suggest sort: " + suggestion.sort());, +        }, +        directSpellChecker.setComparator(comparator);, +        directSpellChecker.setDistance(suggestion.stringDistance());, +        directSpellChecker.setMaxEdits(suggestion.maxEdits());, +        directSpellChecker.setMaxInspections(suggestion.maxInspections());, +        directSpellChecker.setMaxQueryFrequency(suggestion.maxTermFreq());, +        directSpellChecker.setMinPrefix(suggestion.prefixLength());, +        directSpellChecker.setMinQueryLength(suggestion.minWordLength());, +        directSpellChecker.setThresholdFrequency(suggestion.minDocFreq());, +        directSpellChecker.setLowerCaseTerms(false);, +        return directSpellChecker;, +    }, +, +    public static BytesRef join(BytesRef separator, BytesRefBuilder result, BytesRef... toJoin) {, +        result.clear();, +        for (int i = 0; i < toJoin.length - 1; i++) {, +            result.append(toJoin[i]);, +            result.append(separator);, +        }, +        result.append(toJoin[toJoin.length-1]);, +        return result.get();, +    }, +, +    public abstract static class TokenConsumer {, +        protected CharTermAttribute charTermAttr;, +        protected PositionIncrementAttribute posIncAttr;, +        protected OffsetAttribute offsetAttr;, +, +        public void reset(TokenStream stream) {, +            charTermAttr = stream.addAttribute(CharTermAttribute.class);]