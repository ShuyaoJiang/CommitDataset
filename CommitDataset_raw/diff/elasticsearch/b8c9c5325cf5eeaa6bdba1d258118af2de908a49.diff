[+++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +        PreparedStatement ps = con.prepareStatement("SYS COLUMNS CATALOG ? TABLE LIKE ? LIKE ?");, +        // TODO: until passing null works, pass an empty string, +        ps.setString(1, catalog != null ? catalog.trim() : "");, +        ps.setString(2, tableNamePattern != null ? tableNamePattern.trim() : "%");, +        ps.setString(3, columnNamePattern != null ? columnNamePattern.trim() : "%");, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +        PreparedStatement ps = con.prepareStatement("SYS COLUMNS CATALOG ? TABLE LIKE ? LIKE ?");, +        // TODO: until passing null works, pass an empty string, +        ps.setString(1, catalog != null ? catalog.trim() : "");, +        ps.setString(2, tableNamePattern != null ? tableNamePattern.trim() : "%");, +        ps.setString(3, columnNamePattern != null ? columnNamePattern.trim() : "%");, +++ b/plugin/sql/src/main/antlr/SqlBase.g4, +    | SYS COLUMNS (CATALOG cluster=STRING)?, +                  (TABLE LIKE? indexPattern=pattern)?                  , +CATALOG: 'CATALOG';, +CATALOGS: 'CATALOGS';, +COLUMNS: 'COLUMNS';, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +        PreparedStatement ps = con.prepareStatement("SYS COLUMNS CATALOG ? TABLE LIKE ? LIKE ?");, +        // TODO: until passing null works, pass an empty string, +        ps.setString(1, catalog != null ? catalog.trim() : "");, +        ps.setString(2, tableNamePattern != null ? tableNamePattern.trim() : "%");, +        ps.setString(3, columnNamePattern != null ? columnNamePattern.trim() : "%");, +++ b/plugin/sql/src/main/antlr/SqlBase.g4, +    | SYS COLUMNS (CATALOG cluster=STRING)?, +                  (TABLE LIKE? indexPattern=pattern)?                  , +CATALOG: 'CATALOG';, +CATALOGS: 'CATALOGS';, +COLUMNS: 'COLUMNS';, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        return new SysColumns(source(ctx), string(ctx.cluster), visitPattern(ctx.indexPattern), visitPattern(ctx.columnPattern));, +++ b/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +        PreparedStatement ps = con.prepareStatement("SYS COLUMNS CATALOG ? TABLE LIKE ? LIKE ?");, +        // TODO: until passing null works, pass an empty string, +        ps.setString(1, catalog != null ? catalog.trim() : "");, +        ps.setString(2, tableNamePattern != null ? tableNamePattern.trim() : "%");, +        ps.setString(3, columnNamePattern != null ? columnNamePattern.trim() : "%");, +++ b/plugin/sql/src/main/antlr/SqlBase.g4, +    | SYS COLUMNS (CATALOG cluster=STRING)?, +                  (TABLE LIKE? indexPattern=pattern)?                  , +CATALOG: 'CATALOG';, +CATALOGS: 'CATALOGS';, +COLUMNS: 'COLUMNS';, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        return new SysColumns(source(ctx), string(ctx.cluster), visitPattern(ctx.indexPattern), visitPattern(ctx.columnPattern));, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java, +    public Token cluster;, +    public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }, +    public TerminalNode STRING() { return getToken(SqlBaseParser.STRING, 0); }, +      setState(191);, +      switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {, +        setState(171);, +        _la = _input.LA(1);, +        if (_la==CATALOG) {, +          {, +          setState(169);, +          match(CATALOG);, +          setState(170);, +          ((SysColumnsContext)_localctx).cluster = match(STRING);, +          }, +        }, +, +        setState(178);, +          setState(173);, +          setState(175);, +            setState(174);, +          setState(177);, +        setState(184);, +          setState(181);, +            setState(180);, +          setState(183);, +        setState(186);, +        setState(187);, +        setState(188);, +        setState(189);, +        setState(190);, +      setState(202);, +        setState(193);, +        setState(194);, +        setState(199);, +          setState(195);, +          setState(196);, +          setState(201);, +      setState(204);, +      setState(206);, +      setState(217);, +        setState(207);, +        setState(208);, +        setState(209);, +        setState(214);, +          setState(210);, +          setState(211);, +          setState(216);, +      setState(221);, +        setState(219);, +        setState(220);, +      setState(228);, +        setState(223);, +        setState(224);]