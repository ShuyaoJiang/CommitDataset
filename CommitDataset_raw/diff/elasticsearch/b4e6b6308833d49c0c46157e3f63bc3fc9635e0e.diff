[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (tlist.size() == 0) {, +            return null;, +        }, +        }, +, +                    posQuery = super.getPrefixQuery(field, plist.get(0));, +                    innerClauses.add(new BooleanClause(super.getPrefixQuery(field, token),, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (tlist.size() == 0) {, +            return null;, +        }, +        }, +, +                    posQuery = super.getPrefixQuery(field, plist.get(0));, +                    innerClauses.add(new BooleanClause(super.getPrefixQuery(field, token),, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (tlist.size() == 0) {, +            return null;, +        }, +        }, +, +                    posQuery = super.getPrefixQuery(field, plist.get(0));, +                    innerClauses.add(new BooleanClause(super.getPrefixQuery(field, token),, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;, +import org.apache.lucene.search.SynonymQuery;, +import java.util.List;, +import java.util.ArrayList;, +    public SimpleQueryParser(Analyzer analyzer, Map<String, Float> weights, int flags,, +                             Settings settings, QueryShardContext context) {, +     * of {@code TermQuery}s and {@code PrefixQuery}s, +        List<List<String>> tlist = new ArrayList<> ();, +        // get Analyzer from superclass and tokenize the term, +            source.reset();, +            List<String> currentPos = new ArrayList<>();, +            CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);, +            PositionIncrementAttribute posAtt = source.addAttribute(PositionIncrementAttribute.class);, +                boolean hasMoreTokens = source.incrementToken();, +                    if (currentPos.isEmpty() == false && posAtt.getPositionIncrement() > 0) {, +                        tlist.add(currentPos);, +                        currentPos = new ArrayList<>();, +                    }, +                    currentPos.add(termAtt.toString());, +                    hasMoreTokens = source.incrementToken();, +                }, +                if (currentPos.isEmpty() == false) {, +                    tlist.add(currentPos);, +                // TODO: we should not ignore the exception and return a prefix query with the original term ?, +, +        if (tlist.size() == 0) {, +            return null;, +, +        if (tlist.size() == 1 && tlist.get(0).size() == 1) {, +            return new PrefixQuery(new Term(field, tlist.get(0).get(0)));, +        }, +, +        // build a boolean query with prefix on the last position only., +        BooleanQuery.Builder builder = new BooleanQuery.Builder();, +        for (int pos = 0; pos < tlist.size(); pos++) {, +            List<String> plist = tlist.get(pos);, +            boolean isLastPos = (pos == tlist.size()-1);, +            Query posQuery;, +            if (plist.size() == 1) {, +                if (isLastPos) {, +                    posQuery = new PrefixQuery(new Term(field, plist.get(0)));, +                } else {, +                    posQuery = newTermQuery(new Term(field, plist.get(0)));, +                }, +            } else if (isLastPos == false) {, +                // build a synonym query for terms in the same position., +                Term[] terms = new Term[plist.size()];, +                for (int i = 0; i < plist.size(); i++) {, +                    terms[i] = new Term(field, plist.get(i));, +                }, +                posQuery = new SynonymQuery(terms);, +            } else {, +                BooleanQuery.Builder innerBuilder = new BooleanQuery.Builder();, +                for (String token : plist) {, +                    innerBuilder.add(new BooleanClause(new PrefixQuery(new Term(field, token)),, +                        BooleanClause.Occur.SHOULD));, +                }, +                posQuery = innerBuilder.setDisableCoord(true).build();, +            }, +            builder.add(new BooleanClause(posQuery, getDefaultOperator()));, +        }, +        return builder.build();, +    }, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (tlist.size() == 0) {, +            return null;]