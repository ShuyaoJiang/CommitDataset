[+++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    private final FieldMapper.Names fieldNames;, +    public AbstractIndexFieldData(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndexFieldDataCache cache) {, +        this.fieldNames = fieldNames;, +    public FieldMapper.Names getFieldNames() {, +        return this.fieldNames;, +        cache.clear(index, fieldNames.indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    private final FieldMapper.Names fieldNames;, +    public AbstractIndexFieldData(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndexFieldDataCache cache) {, +        this.fieldNames = fieldNames;, +    public FieldMapper.Names getFieldNames() {, +        return this.fieldNames;, +        cache.clear(index, fieldNames.indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    FieldMapper.Names getFieldNames();, +        IndexFieldData build(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType type, IndexFieldDataCache cache);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    private final FieldMapper.Names fieldNames;, +    public AbstractIndexFieldData(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndexFieldDataCache cache) {, +        this.fieldNames = fieldNames;, +    public FieldMapper.Names getFieldNames() {, +        return this.fieldNames;, +        cache.clear(index, fieldNames.indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    FieldMapper.Names getFieldNames();, +        IndexFieldData build(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType type, IndexFieldDataCache cache);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    public <IFD extends IndexFieldData> IFD getForField(FieldMapper.Names fieldNames, FieldDataType type) {, +                        throw new ElasticSearchIllegalArgumentException("failed to find field data builder for field " + fieldNames.fullName() + ", and type " + type);, +                            throw new ElasticSearchIllegalArgumentException("cache type not supported [" + cacheType + "] for field [" + fieldNames.fullName() + "]");, +                    fieldData = builder.build(index, indexSettings, fieldNames, type, cache);, +                    loadedFieldData.put(fieldNames.indexName(), fieldData);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    private final FieldMapper.Names fieldNames;, +    public AbstractIndexFieldData(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndexFieldDataCache cache) {, +        this.fieldNames = fieldNames;, +    public FieldMapper.Names getFieldNames() {, +        return this.fieldNames;, +        cache.clear(index, fieldNames.indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    FieldMapper.Names getFieldNames();, +        IndexFieldData build(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType type, IndexFieldDataCache cache);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    public <IFD extends IndexFieldData> IFD getForField(FieldMapper.Names fieldNames, FieldDataType type) {, +                        throw new ElasticSearchIllegalArgumentException("failed to find field data builder for field " + fieldNames.fullName() + ", and type " + type);, +                            throw new ElasticSearchIllegalArgumentException("cache type not supported [" + cacheType + "] for field [" + fieldNames.fullName() + "]");, +                    fieldData = builder.build(index, indexSettings, fieldNames, type, cache);, +                    loadedFieldData.put(fieldNames.indexName(), fieldData);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefFieldComparatorSource.java, +        assert fieldname.equals(indexFieldData.getFieldNames().indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    private final FieldMapper.Names fieldNames;, +    public AbstractIndexFieldData(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndexFieldDataCache cache) {, +        this.fieldNames = fieldNames;, +    public FieldMapper.Names getFieldNames() {, +        return this.fieldNames;, +        cache.clear(index, fieldNames.indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    FieldMapper.Names getFieldNames();, +        IndexFieldData build(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType type, IndexFieldDataCache cache);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    public <IFD extends IndexFieldData> IFD getForField(FieldMapper.Names fieldNames, FieldDataType type) {, +                        throw new ElasticSearchIllegalArgumentException("failed to find field data builder for field " + fieldNames.fullName() + ", and type " + type);, +                            throw new ElasticSearchIllegalArgumentException("cache type not supported [" + cacheType + "] for field [" + fieldNames.fullName() + "]");, +                    fieldData = builder.build(index, indexSettings, fieldNames, type, cache);, +                    loadedFieldData.put(fieldNames.indexName(), fieldData);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefFieldComparatorSource.java, +        assert fieldname.equals(indexFieldData.getFieldNames().indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/DoubleValuesComparatorSource.java, +        assert fieldname.equals(indexFieldData.getFieldNames().indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    private final FieldMapper.Names fieldNames;, +    public AbstractIndexFieldData(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndexFieldDataCache cache) {, +        this.fieldNames = fieldNames;, +    public FieldMapper.Names getFieldNames() {, +        return this.fieldNames;, +        cache.clear(index, fieldNames.indexName());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    FieldMapper.Names getFieldNames();, +        IndexFieldData build(Index index, @IndexSettings Settings indexSettings, FieldMapper.Names fieldNames, FieldDataType type, IndexFieldDataCache cache);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.index.mapper.FieldMapper;, +    public <IFD extends IndexFieldData> IFD getForField(FieldMapper.Names fieldNames, FieldDataType type) {, +                        throw new ElasticSearchIllegalArgumentException("failed to find field data builder for field " + fieldNames.fullName() + ", and type " + type);, +                            throw new ElasticSearchIllegalArgumentException("cache type not supported [" + cacheType + "] for field [" + fieldNames.fullName() + "]");]