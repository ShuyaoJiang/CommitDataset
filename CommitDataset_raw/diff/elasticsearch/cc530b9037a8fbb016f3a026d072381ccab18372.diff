[+++ b/docs/reference/search/aggregations/metrics/percentile-aggregation.asciidoc, +nodes to `20 * compression`., +A "node" uses roughly 32 bytes of memory, so under worst-case scenarios (large amount, +TDigest roughly 64KB in size.  In practice data tends to be more random and, +++ b/docs/reference/search/aggregations/metrics/percentile-aggregation.asciidoc, +nodes to `20 * compression`., +A "node" uses roughly 32 bytes of memory, so under worst-case scenarios (large amount, +TDigest roughly 64KB in size.  In practice data tends to be more random and, +++ b/pom.xml, +            <groupId>com.tdunning</groupId>, +            <artifactId>t-digest</artifactId>, +            <version>3.0</version>, +++ b/docs/reference/search/aggregations/metrics/percentile-aggregation.asciidoc, +nodes to `20 * compression`., +A "node" uses roughly 32 bytes of memory, so under worst-case scenarios (large amount, +TDigest roughly 64KB in size.  In practice data tends to be more random and, +++ b/pom.xml, +            <groupId>com.tdunning</groupId>, +            <artifactId>t-digest</artifactId>, +            <version>3.0</version>, +++ /dev/null, +++ b/docs/reference/search/aggregations/metrics/percentile-aggregation.asciidoc, +nodes to `20 * compression`., +A "node" uses roughly 32 bytes of memory, so under worst-case scenarios (large amount, +TDigest roughly 64KB in size.  In practice data tends to be more random and, +++ b/pom.xml, +            <groupId>com.tdunning</groupId>, +            <artifactId>t-digest</artifactId>, +            <version>3.0</version>, +++ /dev/null, +++ /dev/null, +++ b/docs/reference/search/aggregations/metrics/percentile-aggregation.asciidoc, +nodes to `20 * compression`., +A "node" uses roughly 32 bytes of memory, so under worst-case scenarios (large amount, +TDigest roughly 64KB in size.  In practice data tends to be more random and, +++ b/pom.xml, +            <groupId>com.tdunning</groupId>, +            <artifactId>t-digest</artifactId>, +            <version>3.0</version>, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/tdigest/TDigestState.java, +import com.tdunning.math.stats.AVLTreeDigest;, +import com.tdunning.math.stats.Centroid;, + * Extension of {@link TDigest} with custom serialization., +public class TDigestState extends AVLTreeDigest {, +    private final double compression;, +        super(compression);, +        out.writeVInt(state.centroidCount());, +        for (Centroid centroid : state.centroids()) {, +            out.writeDouble(centroid.mean());, +            out.writeVLong(centroid.count());, +, +++ b/docs/reference/search/aggregations/metrics/percentile-aggregation.asciidoc, +nodes to `20 * compression`., +A "node" uses roughly 32 bytes of memory, so under worst-case scenarios (large amount, +TDigest roughly 64KB in size.  In practice data tends to be more random and, +++ b/pom.xml, +            <groupId>com.tdunning</groupId>, +            <artifactId>t-digest</artifactId>, +            <version>3.0</version>, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/tdigest/TDigestState.java, +import com.tdunning.math.stats.AVLTreeDigest;, +import com.tdunning.math.stats.Centroid;, + * Extension of {@link TDigest} with custom serialization., +public class TDigestState extends AVLTreeDigest {, +    private final double compression;, +        super(compression);, +        out.writeVInt(state.centroidCount());, +        for (Centroid centroid : state.centroids()) {, +            out.writeDouble(centroid.mean());, +            out.writeVLong(centroid.count());, +, +++ b/src/test/java/org/elasticsearch/index/mapper/string/SimpleStringMappingTests.java, +import java.util.Arrays;, +, +++ b/docs/reference/search/aggregations/metrics/percentile-aggregation.asciidoc, +nodes to `20 * compression`., +A "node" uses roughly 32 bytes of memory, so under worst-case scenarios (large amount, +TDigest roughly 64KB in size.  In practice data tends to be more random and, +++ b/pom.xml, +            <groupId>com.tdunning</groupId>, +            <artifactId>t-digest</artifactId>, +            <version>3.0</version>, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/tdigest/TDigestState.java, +import com.tdunning.math.stats.AVLTreeDigest;, +import com.tdunning.math.stats.Centroid;, + * Extension of {@link TDigest} with custom serialization., +public class TDigestState extends AVLTreeDigest {, +    private final double compression;, +        super(compression);, +        out.writeVInt(state.centroidCount());, +        for (Centroid centroid : state.centroids()) {, +            out.writeDouble(centroid.mean());, +            out.writeVLong(centroid.count());, +]