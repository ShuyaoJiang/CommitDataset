[+++ b/src/main/java/org/elasticsearch/action/ActionRunnable.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +, +public abstract class ActionRunnable<Response> extends AbstractRunnable {, +    /**, +     * Calls the action listeners {@link ActionListener#onFailure(Throwable)} method with the given exception., +     * This method is invoked for all exception thrown by {@link #doRun()}, +     */, +    public void onFailure(Throwable t) {, +++ b/src/main/java/org/elasticsearch/action/ActionRunnable.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +, +public abstract class ActionRunnable<Response> extends AbstractRunnable {, +    /**, +     * Calls the action listeners {@link ActionListener#onFailure(Throwable)} method with the given exception., +     * This method is invoked for all exception thrown by {@link #doRun()}, +     */, +    public void onFailure(Throwable t) {, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +import org.elasticsearch.action.ActionRunnable;, +import java.io.IOException;, +            threadPool.executor(ThreadPool.Names.SEARCH).execute(new ActionRunnable(listener) {, +                public void doRun() throws IOException {, +                }, +, +                @Override, +                public void onFailure(Throwable t) {, +                    ReduceSearchPhaseException failure = new ReduceSearchPhaseException("query_fetch", "", t, buildShardFailures());, +                    super.onFailure(t);, +++ b/src/main/java/org/elasticsearch/action/ActionRunnable.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +, +public abstract class ActionRunnable<Response> extends AbstractRunnable {, +    /**, +     * Calls the action listeners {@link ActionListener#onFailure(Throwable)} method with the given exception., +     * This method is invoked for all exception thrown by {@link #doRun()}, +     */, +    public void onFailure(Throwable t) {, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +import org.elasticsearch.action.ActionRunnable;, +import java.io.IOException;, +            threadPool.executor(ThreadPool.Names.SEARCH).execute(new ActionRunnable(listener) {, +                public void doRun() throws IOException {, +                }, +, +                @Override, +                public void onFailure(Throwable t) {, +                    ReduceSearchPhaseException failure = new ReduceSearchPhaseException("query_fetch", "", t, buildShardFailures());, +                    super.onFailure(t);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +import org.elasticsearch.action.ActionRunnable;, +import java.io.IOException;, +            threadPool.executor(ThreadPool.Names.SEARCH).execute(new ActionRunnable<SearchResponse>(listener) {, +                public void doRun() throws IOException {, +                    releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +                }, +, +                @Override, +                public void onFailure(Throwable t) {, +                    try {, +                        ReduceSearchPhaseException failure = new ReduceSearchPhaseException("merge", "", t, buildShardFailures());, +                        super.onFailure(failure);, +++ b/src/main/java/org/elasticsearch/action/ActionRunnable.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +, +public abstract class ActionRunnable<Response> extends AbstractRunnable {, +    /**, +     * Calls the action listeners {@link ActionListener#onFailure(Throwable)} method with the given exception., +     * This method is invoked for all exception thrown by {@link #doRun()}, +     */, +    public void onFailure(Throwable t) {, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +import org.elasticsearch.action.ActionRunnable;, +import java.io.IOException;, +            threadPool.executor(ThreadPool.Names.SEARCH).execute(new ActionRunnable(listener) {, +                public void doRun() throws IOException {, +                }, +, +                @Override, +                public void onFailure(Throwable t) {, +                    ReduceSearchPhaseException failure = new ReduceSearchPhaseException("query_fetch", "", t, buildShardFailures());, +                    super.onFailure(t);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +import org.elasticsearch.action.ActionRunnable;, +import java.io.IOException;, +            threadPool.executor(ThreadPool.Names.SEARCH).execute(new ActionRunnable<SearchResponse>(listener) {, +                public void doRun() throws IOException {, +                    releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +                }, +, +                @Override, +                public void onFailure(Throwable t) {, +                    try {, +                        ReduceSearchPhaseException failure = new ReduceSearchPhaseException("merge", "", t, buildShardFailures());, +                        super.onFailure(failure);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryAndFetchAction.java, +import org.elasticsearch.action.ActionRunnable;, +import java.io.IOException;, +, +            threadPool.executor(ThreadPool.Names.SEARCH).execute(new ActionRunnable<SearchResponse>(listener) {]