[+++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    private final Map<String, Recoveries> recoveryiesPerNode = new HashMap<>();, +                assert indexShard.primary != null;, +                            addInitialRecovery(targetShardRouting);, +                        } else if (shard.active() == false) { // shards that are initializing without being relocated, +                            addInitialRecovery(shard);, +    private void addRecovery(ShardRouting routing) {, +        addRecovery(routing, true, false);, +    }, +, +    private void removeRecovery(ShardRouting routing) {, +        addRecovery(routing, false, false);, +    }, +, +    public void addInitialRecovery(ShardRouting routing) {, +        addRecovery(routing,true, true);, +    }, +, +    private void addRecovery(final ShardRouting routing, final boolean increment, final boolean initializing) {, +        final int howMany = increment ? 1 : -1;, +        assert routing.initializing() : "routing must be initializing: " + routing;, +        Recoveries.getOrAdd(recoveryiesPerNode, routing.currentNodeId()).addIncoming(howMany);, +        final String sourceNodeId;, +        if (routing.relocatingNodeId() != null) { // this is a relocation-target, +            sourceNodeId = routing.relocatingNodeId();, +            if (routing.primary() && increment == false) { // primary is done relocating, +                int numRecoveringReplicas = 0;, +                for (ShardRouting assigned : assignedShards(routing)) {, +                    if (assigned.primary() == false && assigned.initializing() && assigned.relocatingNodeId() == null) {, +                        numRecoveringReplicas++;, +                    }, +                }, +                // we transfer the recoveries to the relocated primary, +                recoveryiesPerNode.get(sourceNodeId).addOutgoing(-numRecoveringReplicas);, +                recoveryiesPerNode.get(routing.currentNodeId()).addOutgoing(numRecoveringReplicas);, +            }, +        } else if (routing.primary() == false) { // primary without relocationID is initial recovery, +            ShardRouting primary = findPrimary(routing);, +            if (primary == null && initializing) {, +                primary = routingTable.index(routing.index()).shard(routing.shardId().id()).primary;, +            } else if (primary == null) {, +                throw new IllegalStateException("replica is initializing but primary is unassigned");, +            }, +            sourceNodeId = primary.currentNodeId();, +        } else {, +            sourceNodeId = null;, +        }, +        if (sourceNodeId != null) {, +            Recoveries.getOrAdd(recoveryiesPerNode, sourceNodeId).addOutgoing(howMany);, +        }, +    }, +, +    public int getIncomingRecoveries(String nodeId) {, +        return recoveryiesPerNode.getOrDefault(nodeId, Recoveries.EMPTY).getIncoming();, +    }, +, +    public int getOutgoingRecoveries(String nodeId) {, +        return recoveryiesPerNode.getOrDefault(nodeId, Recoveries.EMPTY).getOutgoing();, +    }, +, +    private ShardRouting findPrimary(ShardRouting routing) {, +        List<ShardRouting> shardRoutings = assignedShards.get(routing.shardId());, +        ShardRouting primary = null;, +        if (shardRoutings != null) {, +            for (ShardRouting shardRouting : shardRoutings) {, +                if (shardRouting.primary()) {, +                    if (shardRouting.active()) {, +                        return shardRouting;, +                    } else if (primary == null) {, +                        primary = shardRouting;, +                    } else if (primary.relocatingNodeId() != null) {, +                        primary = shardRouting;, +                    }, +                }, +            }, +        }, +        return primary;, +    }, +, +        addRecovery(shard);, +        addRecovery(target);, +        removeRecovery(shard);, +, +, +        if (shard.initializing()) {, +            removeRecovery(shard);, +        }, +        for (Map.Entry<String, Recoveries> recoveries : routingNodes.recoveryiesPerNode.entrySet()) {, +            String node = recoveries.getKey();, +            final Recoveries value = recoveries.getValue();, +            int incoming = 0;]