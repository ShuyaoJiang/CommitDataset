[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +     * Parses the classpath into an array of URLs, +     * @return array of URLs, +     * @throws IllegalStateException if the classpath contains empty elements, +     */, +    public static URL[] parseClassPath()  {, +        return parseClassPath(System.getProperty("java.class.path"));, +    }, +, +    /**, +     * Parses the classpath into a set of URLs. For testing., +     * @param classPath classpath to parse (typically the system property {@code java.class.path}), +     * @return array of URLs, +     * @throws IllegalStateException if the classpath contains empty elements, +    static URL[] parseClassPath(String classPath) {, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +            // Technically empty classpath element behaves like CWD., +            // So below is the "correct" code, however in practice with ES, this is usually just a misconfiguration,, +            // from old shell scripts left behind or something:, +            //   if (element.isEmpty()) {, +            //      element = System.getProperty("user.dir");, +            //   }, +            // Instead we just throw an exception, and keep it clean., +                throw new IllegalStateException("Classpath should not contain empty elements! (outdated shell script from a previous version?) classpath='" + classPath + "'");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +     * Parses the classpath into an array of URLs, +     * @return array of URLs, +     * @throws IllegalStateException if the classpath contains empty elements, +     */, +    public static URL[] parseClassPath()  {, +        return parseClassPath(System.getProperty("java.class.path"));, +    }, +, +    /**, +     * Parses the classpath into a set of URLs. For testing., +     * @param classPath classpath to parse (typically the system property {@code java.class.path}), +     * @return array of URLs, +     * @throws IllegalStateException if the classpath contains empty elements, +    static URL[] parseClassPath(String classPath) {, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +            // Technically empty classpath element behaves like CWD., +            // So below is the "correct" code, however in practice with ES, this is usually just a misconfiguration,, +            // from old shell scripts left behind or something:, +            //   if (element.isEmpty()) {, +            //      element = System.getProperty("user.dir");, +            //   }, +            // Instead we just throw an exception, and keep it clean., +                throw new IllegalStateException("Classpath should not contain empty elements! (outdated shell script from a previous version?) classpath='" + classPath + "'");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +     * Parses the classpath into an array of URLs, +     * @return array of URLs, +     * @throws IllegalStateException if the classpath contains empty elements, +     */, +    public static URL[] parseClassPath()  {, +        return parseClassPath(System.getProperty("java.class.path"));, +    }, +, +    /**, +     * Parses the classpath into a set of URLs. For testing., +     * @param classPath classpath to parse (typically the system property {@code java.class.path}), +     * @return array of URLs, +     * @throws IllegalStateException if the classpath contains empty elements, +    static URL[] parseClassPath(String classPath) {, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +            // Technically empty classpath element behaves like CWD., +            // So below is the "correct" code, however in practice with ES, this is usually just a misconfiguration,, +            // from old shell scripts left behind or something:, +            //   if (element.isEmpty()) {, +            //      element = System.getProperty("user.dir");, +            //   }, +            // Instead we just throw an exception, and keep it clean., +                throw new IllegalStateException("Classpath should not contain empty elements! (outdated shell script from a previous version?) classpath='" + classPath + "'");, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +     * Parses the classpath into an array of URLs, +     * @return array of URLs, +     * @throws IllegalStateException if the classpath contains empty elements, +     */, +    public static URL[] parseClassPath()  {, +        return parseClassPath(System.getProperty("java.class.path"));, +    }, +, +    /**, +     * Parses the classpath into a set of URLs. For testing., +     * @param classPath classpath to parse (typically the system property {@code java.class.path}), +     * @return array of URLs, +     * @throws IllegalStateException if the classpath contains empty elements, +    static URL[] parseClassPath(String classPath) {, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +            // Technically empty classpath element behaves like CWD., +            // So below is the "correct" code, however in practice with ES, this is usually just a misconfiguration,, +            // from old shell scripts left behind or something:, +            //   if (element.isEmpty()) {, +            //      element = System.getProperty("user.dir");, +            //   }, +            // Instead we just throw an exception, and keep it clean., +                throw new IllegalStateException("Classpath should not contain empty elements! (outdated shell script from a previous version?) classpath='" + classPath + "'");, +++ /dev/null]