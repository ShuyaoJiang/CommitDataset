[+++ b/core/src/main/java/org/elasticsearch/common/geo/ShapeRelation.java, +    WITHIN("within"),, +    CONTAINS("contains");, +++ b/core/src/main/java/org/elasticsearch/common/geo/ShapeRelation.java, +    WITHIN("within"),, +    CONTAINS("contains");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, +        case CONTAINS:, +            return new SpatialArgs(SpatialOperation.Contains, shape.build());, +++ b/core/src/main/java/org/elasticsearch/common/geo/ShapeRelation.java, +    WITHIN("within"),, +    CONTAINS("contains");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, +        case CONTAINS:, +            return new SpatialArgs(SpatialOperation.Contains, shape.build());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/geo/ShapeRelation.java, +    WITHIN("within"),, +    CONTAINS("contains");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, +        case CONTAINS:, +            return new SpatialArgs(SpatialOperation.Contains, shape.build());, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/search/geo/GeoShapeQueryTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.geo;, +, +import com.spatial4j.core.shape.Rectangle;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.geo.ShapeRelation;, +import org.elasticsearch.common.geo.builders.EnvelopeBuilder;, +import org.elasticsearch.common.geo.builders.GeometryCollectionBuilder;, +import org.elasticsearch.common.geo.builders.ShapeBuilder;, +import org.elasticsearch.common.geo.builders.ShapeBuilders;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.index.query.GeoShapeQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +import org.elasticsearch.test.geo.RandomShapeGenerator;, +, +import java.io.IOException;, +import java.util.Locale;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.geoIntersectionQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoShapeQuery;, +import static org.elasticsearch.test.geo.RandomShapeGenerator.createGeometryCollectionWithin;, +import static org.elasticsearch.test.geo.RandomShapeGenerator.xRandomPoint;, +import static org.elasticsearch.test.geo.RandomShapeGenerator.xRandomRectangle;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;, +import static org.hamcrest.Matchers.*;, +, +public class GeoShapeQueryTests extends ESSingleNodeTestCase {, +    public void testNullShape() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("location"), +                .field("type", "geo_shape"), +                .endObject().endObject(), +                .endObject().endObject().string();, +        client().admin().indices().prepareCreate("test").addMapping("type1", mapping).execute().actionGet();, +        ensureGreen();, +, +        client().prepareIndex("test", "type1", "aNullshape").setSource("{\"location\": null}").setRefresh(true), +                .execute().actionGet();, +        GetResponse result = client().prepareGet("test", "type1", "aNullshape").execute().actionGet();, +        assertThat(result.getField("location"), nullValue());, +    }, +, +    public void testIndexPointsFilterRectangle() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("location"), +                .field("type", "geo_shape"), +                .field("tree", "quadtree"), +                .endObject().endObject(), +                .endObject().endObject().string();, +        client().admin().indices().prepareCreate("test").addMapping("type1", mapping).execute().actionGet();, +        ensureGreen();, +]