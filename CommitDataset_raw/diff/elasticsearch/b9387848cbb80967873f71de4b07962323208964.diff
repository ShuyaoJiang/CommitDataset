[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final TimeValue refreshInterval;, +, +    private long latestCacheStatsTimestamp = -1;, +    private CacheStats latestCacheStats;, +, +, +        this.refreshInterval = componentSettings.getAsTime("stats.refresh_interval", TimeValue.timeValueSeconds(1));, +, +        logger.debug("Using stats.refresh_interval [{}]", refreshInterval);, +    public synchronized CacheStats stats() {, +        long timestamp = System.currentTimeMillis();, +        if ((timestamp - latestCacheStatsTimestamp) > refreshInterval.millis()) {, +            latestCacheStats = new CacheStats(fieldDataCache.evictions(), filterCache.evictions(), fieldDataCache.sizeInBytes(), filterEntriesStats.sizeInBytes, filterEntriesStats.count, bloomCache.sizeInBytes());, +            latestCacheStatsTimestamp = timestamp;, +        }, +        return latestCacheStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final TimeValue refreshInterval;, +, +    private long latestCacheStatsTimestamp = -1;, +    private CacheStats latestCacheStats;, +, +, +        this.refreshInterval = componentSettings.getAsTime("stats.refresh_interval", TimeValue.timeValueSeconds(1));, +, +        logger.debug("Using stats.refresh_interval [{}]", refreshInterval);, +    public synchronized CacheStats stats() {, +        long timestamp = System.currentTimeMillis();, +        if ((timestamp - latestCacheStatsTimestamp) > refreshInterval.millis()) {, +            latestCacheStats = new CacheStats(fieldDataCache.evictions(), filterCache.evictions(), fieldDataCache.sizeInBytes(), filterEntriesStats.sizeInBytes, filterEntriesStats.count, bloomCache.sizeInBytes());, +            latestCacheStatsTimestamp = timestamp;, +        }, +        return latestCacheStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/jvm/JvmService.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final TimeValue refreshInterval;, +, +    private JvmStats jvmStats;, +, +        this.jvmStats = JvmStats.jvmStats();, +, +        this.refreshInterval = componentSettings.getAsTime("refresh_interval", TimeValue.timeValueSeconds(1));, +, +        logger.debug("Using refresh_interval [{}]", refreshInterval);, +    public synchronized JvmStats stats() {, +        if ((System.currentTimeMillis() - jvmStats.timestamp()) > refreshInterval.millis()) {, +            jvmStats = JvmStats.jvmStats();, +        }, +        return jvmStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final TimeValue refreshInterval;, +, +    private long latestCacheStatsTimestamp = -1;, +    private CacheStats latestCacheStats;, +, +, +        this.refreshInterval = componentSettings.getAsTime("stats.refresh_interval", TimeValue.timeValueSeconds(1));, +, +        logger.debug("Using stats.refresh_interval [{}]", refreshInterval);, +    public synchronized CacheStats stats() {, +        long timestamp = System.currentTimeMillis();, +        if ((timestamp - latestCacheStatsTimestamp) > refreshInterval.millis()) {, +            latestCacheStats = new CacheStats(fieldDataCache.evictions(), filterCache.evictions(), fieldDataCache.sizeInBytes(), filterEntriesStats.sizeInBytes, filterEntriesStats.count, bloomCache.sizeInBytes());, +            latestCacheStatsTimestamp = timestamp;, +        }, +        return latestCacheStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/jvm/JvmService.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final TimeValue refreshInterval;, +, +    private JvmStats jvmStats;, +, +        this.jvmStats = JvmStats.jvmStats();, +, +        this.refreshInterval = componentSettings.getAsTime("refresh_interval", TimeValue.timeValueSeconds(1));, +, +        logger.debug("Using refresh_interval [{}]", refreshInterval);, +    public synchronized JvmStats stats() {, +        if ((System.currentTimeMillis() - jvmStats.timestamp()) > refreshInterval.millis()) {, +            jvmStats = JvmStats.jvmStats();, +        }, +        return jvmStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/os/OsService.java, +        this.refreshInterval = componentSettings.getAsTime("refresh_interval", TimeValue.timeValueSeconds(1));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final TimeValue refreshInterval;, +, +    private long latestCacheStatsTimestamp = -1;, +    private CacheStats latestCacheStats;, +, +, +        this.refreshInterval = componentSettings.getAsTime("stats.refresh_interval", TimeValue.timeValueSeconds(1));, +, +        logger.debug("Using stats.refresh_interval [{}]", refreshInterval);, +    public synchronized CacheStats stats() {]