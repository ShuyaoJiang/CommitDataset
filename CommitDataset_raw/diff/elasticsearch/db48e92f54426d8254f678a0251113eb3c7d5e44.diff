[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessor.java, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentiles;, +import java.util.Iterator;, +                    addedKeys.add(processSingleValue((NumericMetricsAggregation.SingleValue) nestedAgg));, +                } else if (nestedAgg instanceof Percentiles) {, +                    addedKeys.add(processPercentiles((Percentiles) nestedAgg));, +    private String processSingleValue(NumericMetricsAggregation.SingleValue singleValue) throws IOException {, +    private String processPercentiles(Percentiles percentiles) throws IOException {, +        Iterator<Percentile> percentileIterator = percentiles.iterator();, +        keyValuePairs.put(percentiles.getName(), percentileIterator.next().getValue());, +        if (percentileIterator.hasNext()) {, +            throw new IllegalArgumentException("Multi-percentile aggregation [" + percentiles.getName() + "] is not supported");, +        }, +        return percentiles.getName();, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessor.java, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentiles;, +import java.util.Iterator;, +                    addedKeys.add(processSingleValue((NumericMetricsAggregation.SingleValue) nestedAgg));, +                } else if (nestedAgg instanceof Percentiles) {, +                    addedKeys.add(processPercentiles((Percentiles) nestedAgg));, +    private String processSingleValue(NumericMetricsAggregation.SingleValue singleValue) throws IOException {, +    private String processPercentiles(Percentiles percentiles) throws IOException {, +        Iterator<Percentile> percentileIterator = percentiles.iterator();, +        keyValuePairs.put(percentiles.getName(), percentileIterator.next().getValue());, +        if (percentileIterator.hasNext()) {, +            throw new IllegalArgumentException("Multi-percentile aggregation [" + percentiles.getName() + "] is not supported");, +        }, +        return percentiles.getName();, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationTestUtils.java, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentiles;, +    static Percentiles createPercentiles(String name, double... values) {, +        Percentiles percentiles = mock(Percentiles.class);, +        when(percentiles.getName()).thenReturn(name);, +        List<Percentile> percentileList = new ArrayList<>();, +        for (double value : values) {, +            Percentile percentile = mock(Percentile.class);, +            when(percentile.getValue()).thenReturn(value);, +            percentileList.add(percentile);, +        }, +        when(percentiles.iterator()).thenReturn(percentileList.iterator());, +        return percentiles;, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessor.java, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentiles;, +import java.util.Iterator;, +                    addedKeys.add(processSingleValue((NumericMetricsAggregation.SingleValue) nestedAgg));, +                } else if (nestedAgg instanceof Percentiles) {, +                    addedKeys.add(processPercentiles((Percentiles) nestedAgg));, +    private String processSingleValue(NumericMetricsAggregation.SingleValue singleValue) throws IOException {, +    private String processPercentiles(Percentiles percentiles) throws IOException {, +        Iterator<Percentile> percentileIterator = percentiles.iterator();, +        keyValuePairs.put(percentiles.getName(), percentileIterator.next().getValue());, +        if (percentileIterator.hasNext()) {, +            throw new IllegalArgumentException("Multi-percentile aggregation [" + percentiles.getName() + "] is not supported");, +        }, +        return percentiles.getName();, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationTestUtils.java, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;, +import org.elasticsearch.search.aggregations.metrics.percentiles.Percentiles;, +    static Percentiles createPercentiles(String name, double... values) {, +        Percentiles percentiles = mock(Percentiles.class);, +        when(percentiles.getName()).thenReturn(name);, +        List<Percentile> percentileList = new ArrayList<>();, +        for (double value : values) {, +            Percentile percentile = mock(Percentile.class);, +            when(percentile.getValue()).thenReturn(value);, +            percentileList.add(percentile);, +        }, +        when(percentiles.iterator()).thenReturn(percentileList.iterator());, +        return percentiles;, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessorTests.java, +import static org.elasticsearch.xpack.ml.datafeed.extractor.aggregation.AggregationTestUtils.createPercentiles;, +    public void testProcessGivenSinglePercentilesPerHistogram() throws IOException {, +        List<Histogram.Bucket> histogramBuckets = Arrays.asList(, +                createHistogramBucket(1000L, 4, Arrays.asList(createPercentiles("my_field", 1.0))),, +                createHistogramBucket(2000L, 7, Arrays.asList(createPercentiles("my_field", 2.0))),, +                createHistogramBucket(3000L, 10, Arrays.asList(createPercentiles("my_field", 3.0))),, +                createHistogramBucket(4000L, 14, Arrays.asList(createPercentiles("my_field", 4.0))), +        );, +        Histogram histogram = mock(Histogram.class);, +        when(histogram.getName()).thenReturn("time");, +        when(histogram.getBuckets()).thenReturn(histogramBuckets);, +, +        String json = aggToString(histogram);, +, +        assertThat(json, equalTo("{\"time\":1000,\"my_field\":1.0,\"doc_count\":4} " +, +                "{\"time\":2000,\"my_field\":2.0,\"doc_count\":7} " +]