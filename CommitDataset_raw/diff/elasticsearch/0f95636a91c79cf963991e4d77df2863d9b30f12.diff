[+++ b/distribution/archives/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +  // sanity checks if a archives can be extracted, +  File extractionDir = new File(buildDir, 'extracted'), +  task testExtraction(type: LoggedExec) {, +    dependsOn buildDist, +    doFirst {, +      project.delete(extractionDir), +      extractionDir.mkdirs(), +    }, +  }, +  if (project.name.contains('zip')) {, +    testExtraction {, +      onlyIf { new File('/bin/unzip').exists() || new File('/usr/bin/unzip').exists() || new File('/usr/local/bin/unzip').exists() }, +      commandLine 'unzip', "${-> buildDist.outputs.files.singleFile}", '-d', extractionDir, +    }, +  } else { // tar, +    testExtraction {, +      onlyIf { new File('/bin/tar').exists() || new File('/usr/bin/tar').exists() || new File('/usr/local/bin/tar').exists() }, +      commandLine 'tar', '-xvzf', "${-> buildDist.outputs.files.singleFile}", '-C', extractionDir, +    }, +  }, +  check.dependsOn testExtraction, +configure(subprojects.findAll { it.name == 'integ-test-zip' }) {, +++ b/distribution/archives/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +  // sanity checks if a archives can be extracted, +  File extractionDir = new File(buildDir, 'extracted'), +  task testExtraction(type: LoggedExec) {, +    dependsOn buildDist, +    doFirst {, +      project.delete(extractionDir), +      extractionDir.mkdirs(), +    }, +  }, +  if (project.name.contains('zip')) {, +    testExtraction {, +      onlyIf { new File('/bin/unzip').exists() || new File('/usr/bin/unzip').exists() || new File('/usr/local/bin/unzip').exists() }, +      commandLine 'unzip', "${-> buildDist.outputs.files.singleFile}", '-d', extractionDir, +    }, +  } else { // tar, +    testExtraction {, +      onlyIf { new File('/bin/tar').exists() || new File('/usr/bin/tar').exists() || new File('/usr/local/bin/tar').exists() }, +      commandLine 'tar', '-xvzf', "${-> buildDist.outputs.files.singleFile}", '-C', extractionDir, +    }, +  }, +  check.dependsOn testExtraction, +configure(subprojects.findAll { it.name == 'integ-test-zip' }) {, +++ /dev/null, +++ b/distribution/archives/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +  // sanity checks if a archives can be extracted, +  File extractionDir = new File(buildDir, 'extracted'), +  task testExtraction(type: LoggedExec) {, +    dependsOn buildDist, +    doFirst {, +      project.delete(extractionDir), +      extractionDir.mkdirs(), +    }, +  }, +  if (project.name.contains('zip')) {, +    testExtraction {, +      onlyIf { new File('/bin/unzip').exists() || new File('/usr/bin/unzip').exists() || new File('/usr/local/bin/unzip').exists() }, +      commandLine 'unzip', "${-> buildDist.outputs.files.singleFile}", '-d', extractionDir, +    }, +  } else { // tar, +    testExtraction {, +      onlyIf { new File('/bin/tar').exists() || new File('/usr/bin/tar').exists() || new File('/usr/local/bin/tar').exists() }, +      commandLine 'tar', '-xvzf', "${-> buildDist.outputs.files.singleFile}", '-C', extractionDir, +    }, +  }, +  check.dependsOn testExtraction, +configure(subprojects.findAll { it.name == 'integ-test-zip' }) {, +++ /dev/null, +++ /dev/null, +++ b/distribution/archives/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +  // sanity checks if a archives can be extracted, +  File extractionDir = new File(buildDir, 'extracted'), +  task testExtraction(type: LoggedExec) {, +    dependsOn buildDist, +    doFirst {, +      project.delete(extractionDir), +      extractionDir.mkdirs(), +    }, +  }, +  if (project.name.contains('zip')) {, +    testExtraction {, +      onlyIf { new File('/bin/unzip').exists() || new File('/usr/bin/unzip').exists() || new File('/usr/local/bin/unzip').exists() }, +      commandLine 'unzip', "${-> buildDist.outputs.files.singleFile}", '-d', extractionDir, +    }, +  } else { // tar, +    testExtraction {, +      onlyIf { new File('/bin/tar').exists() || new File('/usr/bin/tar').exists() || new File('/usr/local/bin/tar').exists() }, +      commandLine 'tar', '-xvzf', "${-> buildDist.outputs.files.singleFile}", '-C', extractionDir, +    }]