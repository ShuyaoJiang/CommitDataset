[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.script.mustache.MultiSearchTemplateRequest;, +    static Request multiSearchTemplate(MultiSearchTemplateRequest multiSearchTemplateRequest) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, "/_msearch/template");, +, +        Params params = new Params(request);, +        params.putParam(RestSearchAction.TYPED_KEYS_PARAM, "true");, +        if (multiSearchTemplateRequest.maxConcurrentSearchRequests() != MultiSearchRequest.MAX_CONCURRENT_SEARCH_REQUESTS_DEFAULT) {, +            params.putParam("max_concurrent_searches", Integer.toString(multiSearchTemplateRequest.maxConcurrentSearchRequests()));, +        }, +, +        XContent xContent = REQUEST_BODY_CONTENT_TYPE.xContent();, +        byte[] source = MultiSearchTemplateRequest.writeMultiLineFormat(multiSearchTemplateRequest, xContent);, +        request.setEntity(new ByteArrayEntity(source, createContentType(xContent.type())));, +        return request;, +    }    , +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.script.mustache.MultiSearchTemplateRequest;, +    static Request multiSearchTemplate(MultiSearchTemplateRequest multiSearchTemplateRequest) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, "/_msearch/template");, +, +        Params params = new Params(request);, +        params.putParam(RestSearchAction.TYPED_KEYS_PARAM, "true");, +        if (multiSearchTemplateRequest.maxConcurrentSearchRequests() != MultiSearchRequest.MAX_CONCURRENT_SEARCH_REQUESTS_DEFAULT) {, +            params.putParam("max_concurrent_searches", Integer.toString(multiSearchTemplateRequest.maxConcurrentSearchRequests()));, +        }, +, +        XContent xContent = REQUEST_BODY_CONTENT_TYPE.xContent();, +        byte[] source = MultiSearchTemplateRequest.writeMultiLineFormat(multiSearchTemplateRequest, xContent);, +        request.setEntity(new ByteArrayEntity(source, createContentType(xContent.type())));, +        return request;, +    }    , +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.script.mustache.MultiSearchTemplateRequest;, +import org.elasticsearch.script.mustache.MultiSearchTemplateResponse;, +        , +    /**, +     * Executes a request using the Multi Search Template API., +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html">Multi Search Template API, +     * on elastic.co</a>., +     */, +    public final MultiSearchTemplateResponse multiSearchTemplate(MultiSearchTemplateRequest multiSearchTemplateRequest,, +            RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(multiSearchTemplateRequest, RequestConverters::multiSearchTemplate,, +                options, MultiSearchTemplateResponse::fromXContext, emptySet());        , +    }   , +    , +    /**, +     * Asynchronously executes a request using the Multi Search Template API, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html">Multi Search Template API, +     * on elastic.co</a>., +     */, +    public final void multiSearchTemplateAsync(MultiSearchTemplateRequest multiSearchTemplateRequest,, +                                          RequestOptions options,, +                                          ActionListener<MultiSearchTemplateResponse> listener) {, +        performRequestAsyncAndParseEntity(multiSearchTemplateRequest, RequestConverters::multiSearchTemplate,, +            options, MultiSearchTemplateResponse::fromXContext, listener, emptySet());, +    }    , +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.script.mustache.MultiSearchTemplateRequest;, +    static Request multiSearchTemplate(MultiSearchTemplateRequest multiSearchTemplateRequest) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, "/_msearch/template");, +, +        Params params = new Params(request);, +        params.putParam(RestSearchAction.TYPED_KEYS_PARAM, "true");, +        if (multiSearchTemplateRequest.maxConcurrentSearchRequests() != MultiSearchRequest.MAX_CONCURRENT_SEARCH_REQUESTS_DEFAULT) {, +            params.putParam("max_concurrent_searches", Integer.toString(multiSearchTemplateRequest.maxConcurrentSearchRequests()));, +        }, +, +        XContent xContent = REQUEST_BODY_CONTENT_TYPE.xContent();, +        byte[] source = MultiSearchTemplateRequest.writeMultiLineFormat(multiSearchTemplateRequest, xContent);, +        request.setEntity(new ByteArrayEntity(source, createContentType(xContent.type())));, +        return request;, +    }    , +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.script.mustache.MultiSearchTemplateRequest;, +import org.elasticsearch.script.mustache.MultiSearchTemplateResponse;, +        , +    /**, +     * Executes a request using the Multi Search Template API., +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html">Multi Search Template API, +     * on elastic.co</a>., +     */, +    public final MultiSearchTemplateResponse multiSearchTemplate(MultiSearchTemplateRequest multiSearchTemplateRequest,, +            RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(multiSearchTemplateRequest, RequestConverters::multiSearchTemplate,, +                options, MultiSearchTemplateResponse::fromXContext, emptySet());        , +    }   , +    , +    /**, +     * Asynchronously executes a request using the Multi Search Template API, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html">Multi Search Template API]