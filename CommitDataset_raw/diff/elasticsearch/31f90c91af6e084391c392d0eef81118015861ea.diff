[+++ b/core/src/main/java/org/elasticsearch/common/geo/builders/CircleBuilder.java, +    static final CircleBuilder PROTOTYPE = new CircleBuilder();, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/CircleBuilder.java, +    static final CircleBuilder PROTOTYPE = new CircleBuilder();, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/EnvelopeBuilder.java, +    static final EnvelopeBuilder PROTOTYPE = new EnvelopeBuilder();, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/CircleBuilder.java, +    static final CircleBuilder PROTOTYPE = new CircleBuilder();, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/EnvelopeBuilder.java, +    static final EnvelopeBuilder PROTOTYPE = new EnvelopeBuilder();, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/LineStringBuilder.java, +import java.util.Objects;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +    static final LineStringBuilder PROTOTYPE = new LineStringBuilder();, +, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(points, translated);, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        LineStringBuilder other = (LineStringBuilder) obj;, +        return Objects.equals(points, other.points) &&, +                (translated == other.translated);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(points.size());, +        for (Coordinate point : points) {, +            writeCoordinateTo(point, out);, +        }, +        out.writeBoolean(translated);, +    }, +, +    @Override, +    public LineStringBuilder readFrom(StreamInput in) throws IOException {, +        LineStringBuilder lineStringBuilder = new LineStringBuilder();, +        int size = in.readVInt();, +        for (int i=0; i < size; i++) {, +            lineStringBuilder.point(readCoordinateFrom(in));, +        }, +        lineStringBuilder.translated = in.readBoolean();, +        return lineStringBuilder;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/CircleBuilder.java, +    static final CircleBuilder PROTOTYPE = new CircleBuilder();, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/EnvelopeBuilder.java, +    static final EnvelopeBuilder PROTOTYPE = new EnvelopeBuilder();, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/LineStringBuilder.java, +import java.util.Objects;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +    static final LineStringBuilder PROTOTYPE = new LineStringBuilder();, +, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(points, translated);, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        LineStringBuilder other = (LineStringBuilder) obj;, +        return Objects.equals(points, other.points) &&, +                (translated == other.translated);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(points.size());, +        for (Coordinate point : points) {, +            writeCoordinateTo(point, out);, +        }, +        out.writeBoolean(translated);, +    }]