[+++ b/src/test/java/org/elasticsearch/common/cli/CliToolTestCase.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Locale;, +    /**, +     * A terminal implementation that discards everything, +     */, +    public static class MockTerminal extends Terminal {, +        public MockTerminal() {, +        public MockTerminal(Verbosity verbosity) {, +    /**, +     * A terminal implementation that captures everything written to it, +     */, +    public static class CaptureOutputTerminal extends MockTerminal {, +, +        List<String> terminalOutput = new ArrayList();, +, +        public CaptureOutputTerminal() {, +            super(Verbosity.NORMAL);, +        }, +, +        public CaptureOutputTerminal(Verbosity verbosity) {, +            super(verbosity);, +        }, +, +        @Override, +        protected void doPrint(String msg, Object... args) {, +            terminalOutput.add(String.format(Locale.ROOT, msg, args));, +        }, +, +        @Override, +        public void print(String msg, Object... args) {, +            doPrint(msg, args);, +        }, +, +        public List<String> getTerminalOutput() {, +            return terminalOutput;, +        }, +    }, +++ b/src/test/java/org/elasticsearch/common/cli/CliToolTestCase.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Locale;, +    /**, +     * A terminal implementation that discards everything, +     */, +    public static class MockTerminal extends Terminal {, +        public MockTerminal() {, +        public MockTerminal(Verbosity verbosity) {, +    /**, +     * A terminal implementation that captures everything written to it, +     */, +    public static class CaptureOutputTerminal extends MockTerminal {, +, +        List<String> terminalOutput = new ArrayList();, +, +        public CaptureOutputTerminal() {, +            super(Verbosity.NORMAL);, +        }, +, +        public CaptureOutputTerminal(Verbosity verbosity) {, +            super(verbosity);, +        }, +, +        @Override, +        protected void doPrint(String msg, Object... args) {, +            terminalOutput.add(String.format(Locale.ROOT, msg, args));, +        }, +, +        @Override, +        public void print(String msg, Object... args) {, +            doPrint(msg, args);, +        }, +, +        public List<String> getTerminalOutput() {, +            return terminalOutput;, +        }, +    }, +++ b/src/test/java/org/elasticsearch/common/cli/CliToolTests.java, +import static org.hamcrest.Matchers.*;, +        Terminal terminal = new MockTerminal();, +        assertStatus(status, CliTool.ExitStatus.OK);, +        assertCommandHasBeenExecuted(executed);, +        Terminal terminal = new MockTerminal();, +        assertStatus(status, CliTool.ExitStatus.USAGE);, +        assertCommandHasBeenExecuted(executed);, +        Terminal terminal = new MockTerminal();, +        assertStatus(status, CliTool.ExitStatus.IO_ERROR);, +        assertCommandHasBeenExecuted(executed);, +        Terminal terminal = new MockTerminal();, +        assertStatus(status, CliTool.ExitStatus.CODE_ERROR);, +        assertCommandHasBeenExecuted(executed);, +        Terminal terminal = new MockTerminal();, +        Terminal terminal = new MockTerminal();, +        CaptureOutputTerminal terminal = new CaptureOutputTerminal();, +        assertStatus(status, CliTool.ExitStatus.OK);, +        assertThat(terminal.getTerminalOutput(), hasSize(3));, +        assertThat(terminal.getTerminalOutput(), hasItem(containsString("cmd1 help")));, +        CaptureOutputTerminal terminal = new CaptureOutputTerminal();, +        assertStatus(status, CliTool.ExitStatus.OK);]