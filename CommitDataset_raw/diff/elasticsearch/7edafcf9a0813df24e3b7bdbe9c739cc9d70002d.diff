[+++ b/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +import java.util.ArrayList;, +    private static Method managementFactoryPlatformMXBeansMethod;, +, +    private static boolean bufferPoolsEnabled;, +    private static Class bufferPoolMXBeanClass;, +    private static Method bufferPoolMXBeanNameMethod;, +    private static Method bufferPoolMXBeanCountMethod;, +    private static Method bufferPoolMXBeanTotalCapacityMethod;, +    private static Method bufferPoolMXBeanMemoryUsedMethod;, +, +        try {, +            managementFactoryPlatformMXBeansMethod = ManagementFactory.class.getMethod("getPlatformMXBeans", Class.class);, +        } catch (Throwable e) {, +            managementFactoryPlatformMXBeansMethod = null;, +        }, +, +, +        try {, +            bufferPoolMXBeanClass = Class.forName("java.lang.management.BufferPoolMXBean");, +            bufferPoolMXBeanNameMethod = bufferPoolMXBeanClass.getMethod("getName");, +            bufferPoolMXBeanCountMethod = bufferPoolMXBeanClass.getMethod("getCount");, +            bufferPoolMXBeanTotalCapacityMethod = bufferPoolMXBeanClass.getMethod("getTotalCapacity");, +            bufferPoolMXBeanMemoryUsedMethod = bufferPoolMXBeanClass.getMethod("getMemoryUsed");, +            bufferPoolsEnabled = true;, +        } catch (Throwable t) {, +            bufferPoolsEnabled = false;, +        }, +, +, +        if (bufferPoolsEnabled) {, +            try {, +                List bufferPools = (List) managementFactoryPlatformMXBeansMethod.invoke(null, bufferPoolMXBeanClass);, +                stats.bufferPools = new ArrayList<BufferPool>(bufferPools.size());, +                for (Object bufferPool : bufferPools) {, +                    String name = (String) bufferPoolMXBeanNameMethod.invoke(bufferPool);, +                    Long count = (Long) bufferPoolMXBeanCountMethod.invoke(bufferPool);, +                    Long totalCapacity = (Long) bufferPoolMXBeanTotalCapacityMethod.invoke(bufferPool);, +                    Long memoryUsed = (Long) bufferPoolMXBeanMemoryUsedMethod.invoke(bufferPool);, +                    stats.bufferPools.add(new BufferPool(name, count, totalCapacity, memoryUsed));, +                }, +            } catch (Throwable t) {, +                //t.printStackTrace();, +            }, +        }, +, +    List<BufferPool> bufferPools;, +, +                builder.startObject(pool.name(), XContentBuilder.FieldCaseConversion.NONE);, +                builder.startObject(collector.name(), XContentBuilder.FieldCaseConversion.NONE);, +, +        if (bufferPools != null) {, +            builder.startObject(Fields.BUFFER_POOLS);, +            for (BufferPool bufferPool : bufferPools) {, +                builder.startObject(bufferPool.name(), XContentBuilder.FieldCaseConversion.NONE);, +                builder.field(Fields.COUNT, bufferPool.count());, +                builder.field(Fields.USED, bufferPool.used().toString());, +                builder.field(Fields.USED_IN_BYTES, bufferPool.used);, +                builder.field(Fields.TOTAL_CAPACITY, bufferPool.totalCapacity().toString());, +                builder.field(Fields.TOTAL_CAPACITY_IN_BYTES, bufferPool.totalCapacity);, +                builder.endObject();, +            }, +            builder.endObject();, +        }, +, +, +        static final XContentBuilderString BUFFER_POOLS = new XContentBuilderString("buffer_pools");, +        static final XContentBuilderString NAME = new XContentBuilderString("name");, +        static final XContentBuilderString TOTAL_CAPACITY = new XContentBuilderString("total_capacity");, +        static final XContentBuilderString TOTAL_CAPACITY_IN_BYTES = new XContentBuilderString("total_capacity_in_bytes");, +, +        if (in.readBoolean()) {, +            int size = in.readVInt();, +            bufferPools = new ArrayList<BufferPool>(size);, +            for (int i = 0; i < size; i++) {, +                BufferPool bufferPool = new BufferPool();, +                bufferPool.readFrom(in);, +                bufferPools.add(bufferPool);, +            }, +        }, +, +        if (bufferPools == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            out.writeVInt(bufferPools.size());, +            for (BufferPool bufferPool : bufferPools) {, +                bufferPool.writeTo(out);, +            }, +        }, +, +    public static class BufferPool implements Streamable {, +, +        String name;, +        long count;, +        long totalCapacity;, +        long used;, +, +        BufferPool() {, +        }]