[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchHit.java, +     * An array of the sort values used., +     */, +    Object[] sortValues();, +, +    /**, +     * An array of the sort values used., +     */, +    Object[] getSortValues();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchHit.java, +     * An array of the sort values used., +     */, +    Object[] sortValues();, +, +    /**, +     * An array of the sort values used., +     */, +    Object[] getSortValues();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +, +        boolean sorted = false;, +        int sortScoreIndex = -1;, +        QuerySearchResult querySearchResult = Iterables.get(queryResults.values(), 0).queryResult();, +, +        if (querySearchResult.topDocs() instanceof TopFieldDocs) {, +            sorted = true;, +            TopFieldDocs fieldDocs = (TopFieldDocs) querySearchResult.queryResult().topDocs();, +            for (int i = 0; i < fieldDocs.fields.length; i++) {, +                if (fieldDocs.fields[i].getType() == SortField.SCORE) {, +                    sortScoreIndex = i;, +                }, +            }, +        }, +, +, +                    if (sorted) {, +                        FieldDoc fieldDoc = (FieldDoc) shardDoc;, +                        searchHit.sortValues(fieldDoc.fields);, +                        if (sortScoreIndex != -1) {, +                            searchHit.score(((Number) fieldDoc.fields[sortScoreIndex]).floatValue());, +                        }, +                    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchHit.java, +     * An array of the sort values used., +     */, +    Object[] sortValues();, +, +    /**, +     * An array of the sort values used., +     */, +    Object[] getSortValues();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +, +        boolean sorted = false;, +        int sortScoreIndex = -1;, +        QuerySearchResult querySearchResult = Iterables.get(queryResults.values(), 0).queryResult();, +, +        if (querySearchResult.topDocs() instanceof TopFieldDocs) {, +            sorted = true;, +            TopFieldDocs fieldDocs = (TopFieldDocs) querySearchResult.queryResult().topDocs();, +            for (int i = 0; i < fieldDocs.fields.length; i++) {, +                if (fieldDocs.fields[i].getType() == SortField.SCORE) {, +                    sortScoreIndex = i;, +                }, +            }, +        }, +, +, +                    if (sorted) {, +                        FieldDoc fieldDoc = (FieldDoc) shardDoc;, +                        searchHit.sortValues(fieldDoc.fields);, +                        if (sortScoreIndex != -1) {, +                            searchHit.score(((Number) fieldDoc.fields[sortScoreIndex]).floatValue());, +                        }, +                    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/InternalSearchHit.java, +    private static final Object[] EMPTY_SORT_VALUES = new Object[0];, +, +    private Object[] sortValues = EMPTY_SORT_VALUES;, +, +    public void sortValues(Object[] sortValues) {, +        this.sortValues = sortValues;, +    }, +, +    @Override public Object[] sortValues() {, +        return sortValues;, +    }, +, +    @Override public Object[] getSortValues() {, +        return sortValues();, +    }, +]