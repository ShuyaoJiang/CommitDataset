[+++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/AcceptingSelector.java, +    void processKey(SelectionKey selectionKey) {, +        NioServerSocketChannel serverChannel = (NioServerSocketChannel) selectionKey.attachment();, +        if (selectionKey.isAcceptable()) {, +            try {, +                eventHandler.acceptChannel(serverChannel);, +            } catch (IOException e) {, +                eventHandler.acceptException(serverChannel, e);, +            }, +        }, +    }, +    @Override, +    void preSelect() {, +        setUpNewServerChannels();, +     *, +    private void setUpNewServerChannels() {, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/AcceptingSelector.java, +    void processKey(SelectionKey selectionKey) {, +        NioServerSocketChannel serverChannel = (NioServerSocketChannel) selectionKey.attachment();, +        if (selectionKey.isAcceptable()) {, +            try {, +                eventHandler.acceptChannel(serverChannel);, +            } catch (IOException e) {, +                eventHandler.acceptException(serverChannel, e);, +            }, +        }, +    }, +    @Override, +    void preSelect() {, +        setUpNewServerChannels();, +     *, +    private void setUpNewServerChannels() {, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/AcceptorEventHandler.java, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/AcceptingSelector.java, +    void processKey(SelectionKey selectionKey) {, +        NioServerSocketChannel serverChannel = (NioServerSocketChannel) selectionKey.attachment();, +        if (selectionKey.isAcceptable()) {, +            try {, +                eventHandler.acceptChannel(serverChannel);, +            } catch (IOException e) {, +                eventHandler.acceptException(serverChannel, e);, +            }, +        }, +    }, +    @Override, +    void preSelect() {, +        setUpNewServerChannels();, +     *, +    private void setUpNewServerChannels() {, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/AcceptorEventHandler.java, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/ESSelector.java, +import java.nio.channels.CancelledKeyException;, +import java.nio.channels.SelectionKey;, +import java.util.Iterator;, + * Children of this class should implement the specific {@link #processKey(SelectionKey)},, + * {@link #preSelect()}, and {@link #cleanup()} functionality., +            preSelect();, +, +            int ready = selector.select(300);, +            if (ready > 0) {, +                Set<SelectionKey> selectionKeys = selector.selectedKeys();, +                Iterator<SelectionKey> keyIterator = selectionKeys.iterator();, +                while (keyIterator.hasNext()) {, +                    SelectionKey sk = keyIterator.next();, +                    keyIterator.remove();, +                    if (sk.isValid()) {, +                        try {, +                            processKey(sk);, +                        } catch (CancelledKeyException cke) {, +                            eventHandler.genericChannelException((NioChannel) sk.attachment(),  cke);, +                        }, +                    } else {, +                        eventHandler.genericChannelException((NioChannel) sk.attachment(),  new CancelledKeyException());, +                    }, +                }, +            }, +     * Called by the base {@link ESSelector} class when there is a {@link SelectionKey} to be handled., +     * @param selectionKey the key to be handled, +     * @throws CancelledKeyException thrown when the key has already been cancelled, +    abstract void processKey(SelectionKey selectionKey) throws CancelledKeyException;, +, +    /**, +     * Called immediately prior to a raw {@link Selector#select()} call. Should be used to implement, +     * channel registration, handling queued writes, and other work that is not specifically processing, +     * a selection key., +     */, +    abstract void preSelect();, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/AcceptingSelector.java, +    void processKey(SelectionKey selectionKey) {, +        NioServerSocketChannel serverChannel = (NioServerSocketChannel) selectionKey.attachment();, +        if (selectionKey.isAcceptable()) {, +            try {, +                eventHandler.acceptChannel(serverChannel);, +            } catch (IOException e) {, +                eventHandler.acceptException(serverChannel, e);, +            }, +        }, +    }, +    @Override, +    void preSelect() {]