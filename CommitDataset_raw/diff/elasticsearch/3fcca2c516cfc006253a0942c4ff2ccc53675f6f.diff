[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +            if (CollectionUtils.isEmpty(aliasAction.aliases)) {, +                        + "]: Property [alias/aliases] is either missing or null", validationException);, +            } else {, +                            + "]: [alias/aliases] may not be empty string", validationException);, +                    }, +                        + "]: Property [index/indices] is either missing or null", validationException);, +                                + "]: [index/indices] may not be empty string", validationException);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +            if (CollectionUtils.isEmpty(aliasAction.aliases)) {, +                        + "]: Property [alias/aliases] is either missing or null", validationException);, +            } else {, +                            + "]: [alias/aliases] may not be empty string", validationException);, +                    }, +                        + "]: Property [index/indices] is either missing or null", validationException);, +                                + "]: [index/indices] may not be empty string", validationException);, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/alias/RestIndicesAliasesAction.java, +                                AliasActions aliasActions = new AliasActions(type, indices, aliases).filter(filter);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +            if (CollectionUtils.isEmpty(aliasAction.aliases)) {, +                        + "]: Property [alias/aliases] is either missing or null", validationException);, +            } else {, +                            + "]: [alias/aliases] may not be empty string", validationException);, +                    }, +                        + "]: Property [index/indices] is either missing or null", validationException);, +                                + "]: [index/indices] may not be empty string", validationException);, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/alias/RestIndicesAliasesAction.java, +                                AliasActions aliasActions = new AliasActions(type, indices, aliases).filter(filter);, +++ b/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java, +import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;, +import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest.AliasActions;, +import static org.elasticsearch.cluster.metadata.AliasAction.Type.ADD;, +import static org.elasticsearch.cluster.metadata.AliasAction.Type.REMOVE;, +                .addAliasAction(new AliasAction(ADD, "foobar", "bac").routing("bla")));, +            assertThat("Exception text does not contain \"Alias action [add]: [index/indices] may not be empty string\"",, +                    e.getMessage(), containsString("Alias action [add]: [index/indices] may not be empty string"));, +            assertThat("Exception text does not contain \"Alias action [add]: [index/indices] may not be empty string\"",, +                    e.getMessage(), containsString("Alias action [add]: [index/indices] may not be empty string"));, +            assertThat(e.getMessage(), containsString("[index/indices] may not be empty string"));, +        }, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(ADD, "", "alias1")).get();, +            fail("Expected ActionRequestValidationException");, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.getMessage(), containsString("[index/indices] may not be empty string"));, +            assertThat(e.getMessage(), containsString("[alias/aliases] may not be empty string"));, +        }, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(ADD, "index1", (String)null)).get();, +            fail("Expected ActionRequestValidationException");, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.getMessage(), containsString("[alias/aliases] may not be empty string"));, +        }, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(ADD, "index1", (String[])null)).get();, +            fail("Expected ActionRequestValidationException");, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.getMessage(), containsString("[alias/aliases] is either missing or null"));, +            assertThat(e.getMessage(), containsString("[alias/aliases] may not be empty string"));, +        }, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(ADD, "index1", "")).get();, +            fail("Expected ActionRequestValidationException");, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.getMessage(), containsString("[alias/aliases] may not be empty string"));, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(ADD, null, (String)null)).get();, +            fail("Should throw " + ActionRequestValidationException.class.getSimpleName());, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.validationErrors(), notNullValue());, +            assertThat(e.validationErrors().size(), equalTo(2));, +        }, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(ADD, "", "")).get();, +            fail("Should throw " + ActionRequestValidationException.class.getSimpleName());, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.validationErrors(), notNullValue());, +            assertThat(e.validationErrors().size(), equalTo(2));, +        }, +            assertThat(e.getMessage(), containsString("[index/indices] may not be empty string"));, +        }, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(REMOVE, null, "alias1")).get();, +            fail("Expected ActionRequestValidationException");, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.getMessage(), containsString("[index/indices] may not be empty string"));, +            assertThat(e.getMessage(), containsString("[index/indices] may not be empty string"));, +        }, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(REMOVE, "", "alias1")).get();, +            fail("Expected ActionRequestValidationException");, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.getMessage(), containsString("[index/indices] may not be empty string"));, +            assertThat(e.getMessage(), containsString("[alias/aliases] may not be empty string"));, +        }, +        try {, +            admin().indices().prepareAliases().addAliasAction(new AliasActions(REMOVE, "index1", (String)null)).get();, +            fail("Expected ActionRequestValidationException");, +        } catch (ActionRequestValidationException e) {, +            assertThat(e.getMessage(), containsString("[alias/aliases] may not be empty string"));]