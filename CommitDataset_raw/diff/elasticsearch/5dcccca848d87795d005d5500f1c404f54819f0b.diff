[+++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/distribution/build.gradle, +ext.dependencyFiles = project(':core').configurations.runtime.copyRecursive().exclude(module: 'slf4j-api'), +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/distribution/build.gradle, +ext.dependencyFiles = project(':core').configurations.runtime.copyRecursive().exclude(module: 'slf4j-api'), +++ b/plugins/jvm-example/example-fixture/build.gradle, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +apply plugin: 'java', +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/distribution/build.gradle, +ext.dependencyFiles = project(':core').configurations.runtime.copyRecursive().exclude(module: 'slf4j-api'), +++ b/plugins/jvm-example/example-fixture/build.gradle, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +apply plugin: 'java', +++ b/plugins/jvm-example/example-fixture/src/main/java/example/ExampleTestFixture.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package example;, +, +import java.net.Inet6Address;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.nio.ByteBuffer;, +import java.nio.channels.AsynchronousServerSocketChannel;, +import java.nio.channels.AsynchronousSocketChannel;, +import java.nio.channels.CompletionHandler;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import java.nio.file.StandardCopyOption;, +import java.util.Collections;, +, +/** Crappy example test fixture that responds with TEST and closes the connection */, +public class ExampleTestFixture {, +    public static void main(String args[]) throws Exception {, +        if (args.length != 1) {, +            throw new IllegalArgumentException("ExampleTestFixture <portFile>");, +        }, +        AsynchronousServerSocketChannel server = AsynchronousServerSocketChannel, +                .open(), +                .bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));, +        // write port file, +        Path tmp = Files.createTempFile(null, null);, +        InetSocketAddress bound = (InetSocketAddress) server.getLocalAddress();]