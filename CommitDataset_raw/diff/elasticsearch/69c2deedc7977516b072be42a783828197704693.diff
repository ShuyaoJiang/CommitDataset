[+++ b/core/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java, +            throw new IllegalArgumentException("value cannot be null");, +        String fieldName = null;, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[prefix] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                                    "[prefix] query does not support [" + currentFieldName + "]");, +++ b/core/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java, +            throw new IllegalArgumentException("value cannot be null");, +        String fieldName = null;, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[prefix] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                                    "[prefix] query does not support [" + currentFieldName + "]");, +++ b/core/src/test/java/org/elasticsearch/index/query/PrefixQueryBuilderTests.java, +import org.elasticsearch.common.ParsingException;, +import java.util.HashMap;, +import java.util.Map;, +        PrefixQueryBuilder query = randomPrefixQuery();, +    protected Map<String, PrefixQueryBuilder> getAlternateVersions() {, +        Map<String, PrefixQueryBuilder> alternateVersions = new HashMap<>();, +        PrefixQueryBuilder prefixQuery = randomPrefixQuery();, +        String contentString = "{\n" +, +                "    \"prefix\" : {\n" +, +                "        \"" + prefixQuery.fieldName() + "\" : \"" + prefixQuery.value() + "\"\n" +, +                "    }\n" +, +                "}";, +        alternateVersions.put(contentString, prefixQuery);, +        return alternateVersions;, +    }, +, +    private static PrefixQueryBuilder randomPrefixQuery() {, +        String fieldName = randomBoolean() ? STRING_FIELD_NAME : randomAsciiOfLengthBetween(1, 10);, +        String value = randomAsciiOfLengthBetween(1, 10);, +        return new PrefixQueryBuilder(fieldName, value);, +    }, +, +    @Override, +            fail("field name is null or empty");, +            assertEquals("field name is null or empty", e.getMessage());, +            fail("value cannot be null");, +            assertEquals("value cannot be null", e.getMessage());, +, +    public void testParseFailsWithMultipleFields() throws IOException {, +        String json =, +                "{\n" +, +                "    \"prefix\": {\n" +, +                "      \"user1\": {\n" +, +                "        \"value\": \"ki\"\n" +, +                "      },\n" +, +                "      \"user2\": {\n" +, +                "        \"value\": \"ki\"\n" +, +                "      }\n" +, +                "    }\n" +, +                "}";, +, +        try {, +            parseQuery(json);, +            fail("parseQuery should have failed");, +        } catch(ParsingException e) {, +            assertEquals("[prefix] query doesn't support multiple fields, found [user1] and [user2]", e.getMessage());, +        }, +    }]