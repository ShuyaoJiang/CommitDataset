[+++ b/docs/reference/search/request/highlighting.asciidoc, +* Can assign different weights to matches at different positions allowing, +  for things like phrase matches being sorted above term matches when, +  highlighting a Boosting Query that boosts phrase matches over term matches, +++ b/docs/reference/search/request/highlighting.asciidoc, +* Can assign different weights to matches at different positions allowing, +  for things like phrase matches being sorted above term matches when, +  highlighting a Boosting Query that boosts phrase matches over term matches, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.util.Version;, +import org.elasticsearch.common.lucene.Lucene;, +        assert Lucene.VERSION == Version.LUCENE_46 : "LUCENE-5361";, +        if( sourceQuery instanceof BooleanQuery ){, +            BooleanQuery bq = (BooleanQuery)sourceQuery;, +            if (bq.getBoost() == 1) {, +                for( BooleanClause clause : bq.getClauses() ) {, +                    if(!clause.isProhibited()) {, +                        flatten(clause.getQuery(), reader, flatQueries);, +                    }, +                }, +            } else {, +                for( BooleanClause clause : bq.getClauses() ) {, +                    if(!clause.isProhibited()) {, +                        Query cloned = clause.getQuery().clone();, +                        cloned.setBoost(cloned.getBoost() * bq.getBoost());, +                        flatten(cloned, reader, flatQueries);, +                    }, +                }, +            }, +        } else if (sourceQuery instanceof DisjunctionMaxQuery) {, +            if (dmq.getBoost() == 1) {, +            } else {, +                for (Query query : dmq) {, +                    Query clone = query.clone();, +                    clone.setBoost(clone.getBoost() * dmq.getBoost());, +                    flatten(clone, reader, flatQueries);, +                }, +            }, +++ b/docs/reference/search/request/highlighting.asciidoc, +* Can assign different weights to matches at different positions allowing, +  for things like phrase matches being sorted above term matches when, +  highlighting a Boosting Query that boosts phrase matches over term matches, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.util.Version;, +import org.elasticsearch.common.lucene.Lucene;, +        assert Lucene.VERSION == Version.LUCENE_46 : "LUCENE-5361";, +        if( sourceQuery instanceof BooleanQuery ){, +            BooleanQuery bq = (BooleanQuery)sourceQuery;, +            if (bq.getBoost() == 1) {, +                for( BooleanClause clause : bq.getClauses() ) {, +                    if(!clause.isProhibited()) {, +                        flatten(clause.getQuery(), reader, flatQueries);, +                    }, +                }, +            } else {, +                for( BooleanClause clause : bq.getClauses() ) {, +                    if(!clause.isProhibited()) {, +                        Query cloned = clause.getQuery().clone();, +                        cloned.setBoost(cloned.getBoost() * bq.getBoost());, +                        flatten(cloned, reader, flatQueries);, +                    }, +                }, +            }, +        } else if (sourceQuery instanceof DisjunctionMaxQuery) {, +            if (dmq.getBoost() == 1) {, +            } else {, +                for (Query query : dmq) {, +                    Query clone = query.clone();, +                    clone.setBoost(clone.getBoost() * dmq.getBoost());, +                    flatten(clone, reader, flatQueries);, +                }, +            }, +++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +, +    @Test, +    public void testFastVectorHighlighterPhraseBoost() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("test").addMapping("type1", type1TermVectorMapping()));, +        phraseBoostTestCase("fvh");, +    }, +, +    @Test, +    public void testPostingsHighlighterPhraseBoost() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()));, +        phraseBoostTestCase("postings");, +    }, +, +    /**, +     * Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter, +     * because it doesn't support the concept of terms having a different weight based on position., +     * @param highlighterType highlighter to test, +     */, +    private void phraseBoostTestCase(String highlighterType) {, +        ensureGreen();, +        StringBuilder text = new StringBuilder();, +        text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n");, +        for (int i = 0; i<10; i++) {, +            text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n");, +        }, +        text.append("highlight words together\n");, +        for (int i = 0; i<10; i++) {]