[+++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    protected static final String GEO_POINT_FIELD_MAPPING = "type=geo_point,lat_lon=true,geohash=true,geohash_prefix=true";, +                    GEO_POINT_FIELD_NAME, GEO_POINT_FIELD_MAPPING,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    protected static final String GEO_POINT_FIELD_MAPPING = "type=geo_point,lat_lon=true,geohash=true,geohash_prefix=true";, +                    GEO_POINT_FIELD_NAME, GEO_POINT_FIELD_MAPPING,, +++ b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceRangeQueryTests.java, +import org.elasticsearch.common.compress.CompressedXContent;, +import org.elasticsearch.index.mapper.MapperService;, +    public void testNestedRangeQuery() throws IOException {, +        // create a nested geo_point type with a subfield named "geohash" (explicit testing for ISSUE #15179), +        MapperService mapperService = queryShardContext().getMapperService();, +        String nestedMapping =, +            "{\"nested_doc\" : {\"properties\" : {" +, +            "\"locations\": {\"properties\": {" +, +            "\"geohash\": {\"type\": \"geo_point\"}}," +, +            "\"type\": \"nested\"}" +, +            "}}}";, +        mapperService.merge("nested_doc", new CompressedXContent(nestedMapping), MapperService.MergeReason.MAPPING_UPDATE, false);, +, +        // create a range query on the nested locations.geohash sub-field, +        String queryJson =, +            "{\n" +, +            "  \"nested\": {\n" +, +            "    \"path\": \"locations\",\n" +, +            "    \"query\": {\n" +, +            "      \"geo_distance_range\": {\n" +, +            "        \"from\": \"0.0km\",\n" +, +            "        \"to\" : \"200.0km\",\n" +, +            "        \"locations.geohash\": \"s7ws01wyd7ws\"\n" +, +            "      }\n" +, +            "    }\n" +, +            "  }\n" +, +            "}\n";, +        NestedQueryBuilder builder = (NestedQueryBuilder) parseQuery(queryJson);, +        QueryShardContext context = createShardContext();, +        builder.toQuery(context);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    protected static final String GEO_POINT_FIELD_MAPPING = "type=geo_point,lat_lon=true,geohash=true,geohash_prefix=true";, +                    GEO_POINT_FIELD_NAME, GEO_POINT_FIELD_MAPPING,, +++ b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceRangeQueryTests.java, +import org.elasticsearch.common.compress.CompressedXContent;, +import org.elasticsearch.index.mapper.MapperService;, +    public void testNestedRangeQuery() throws IOException {, +        // create a nested geo_point type with a subfield named "geohash" (explicit testing for ISSUE #15179), +        MapperService mapperService = queryShardContext().getMapperService();, +        String nestedMapping =, +            "{\"nested_doc\" : {\"properties\" : {" +, +            "\"locations\": {\"properties\": {" +, +            "\"geohash\": {\"type\": \"geo_point\"}}," +, +            "\"type\": \"nested\"}" +, +            "}}}";, +        mapperService.merge("nested_doc", new CompressedXContent(nestedMapping), MapperService.MergeReason.MAPPING_UPDATE, false);, +, +        // create a range query on the nested locations.geohash sub-field, +        String queryJson =, +            "{\n" +, +            "  \"nested\": {\n" +, +            "    \"path\": \"locations\",\n" +, +            "    \"query\": {\n" +, +            "      \"geo_distance_range\": {\n" +, +            "        \"from\": \"0.0km\",\n" +, +            "        \"to\" : \"200.0km\",\n" +, +            "        \"locations.geohash\": \"s7ws01wyd7ws\"\n" +, +            "      }\n" +, +            "    }\n" +, +            "  }\n" +, +            "}\n";, +        NestedQueryBuilder builder = (NestedQueryBuilder) parseQuery(queryJson);, +        QueryShardContext context = createShardContext();, +        builder.toQuery(context);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/index/query/GeohashCellQueryBuilderTests.java, +            assertThat(term.field(), equalTo(queryBuilder.fieldName() + "." + GeoPointFieldMapper.Names.GEOHASH));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    protected static final String GEO_POINT_FIELD_MAPPING = "type=geo_point,lat_lon=true,geohash=true,geohash_prefix=true";, +                    GEO_POINT_FIELD_NAME, GEO_POINT_FIELD_MAPPING,, +++ b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceRangeQueryTests.java, +import org.elasticsearch.common.compress.CompressedXContent;]