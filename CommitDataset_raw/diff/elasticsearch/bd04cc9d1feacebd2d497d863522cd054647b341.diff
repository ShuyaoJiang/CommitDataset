[+++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/LicenseTribeTests.java, +    protected void verifyActionOnClientNode(Client client) throws Exception {, +        assertLicenseTransportActionsWorks(client);, +    }, +, +    @Override, +    protected void verifyActionOnMasterNode(Client masterClient) throws Exception {, +        assertLicenseTransportActionsWorks(masterClient);, +    }, +, +    @Override, +        assertLicenseTransportActionsWorks(dataNodeClient);, +    }, +, +    private static void assertLicenseTransportActionsWorks(Client client) throws Exception {, +        client.execute(GetLicenseAction.INSTANCE, new GetLicenseRequest()).get();, +        client.execute(PutLicenseAction.INSTANCE, new PutLicenseRequest(), +        client.execute(DeleteLicenseAction.INSTANCE, new DeleteLicenseRequest());, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/LicenseTribeTests.java, +    protected void verifyActionOnClientNode(Client client) throws Exception {, +        assertLicenseTransportActionsWorks(client);, +    }, +, +    @Override, +    protected void verifyActionOnMasterNode(Client masterClient) throws Exception {, +        assertLicenseTransportActionsWorks(masterClient);, +    }, +, +    @Override, +        assertLicenseTransportActionsWorks(dataNodeClient);, +    }, +, +    private static void assertLicenseTransportActionsWorks(Client client) throws Exception {, +        client.execute(GetLicenseAction.INSTANCE, new GetLicenseRequest()).get();, +        client.execute(PutLicenseAction.INSTANCE, new PutLicenseRequest(), +        client.execute(DeleteLicenseAction.INSTANCE, new DeleteLicenseRequest());, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/xpack/TribeTransportTestCase.java, +@ClusterScope(scope = Scope.TEST, transportClientRatio = 0, numClientNodes = 1, numDataNodes = 0), +                UUIDs.randomBase64UUID(random()), nodeConfigurationSource, 1, false, "tribe_node2",, +        logger.info(" --> verify transport actions for data node");, +        logger.info(" --> verify transport actions for master node");, +        verifyActionOnMasterNode((randomBoolean() ? internalCluster() : cluster2).masterClient());, +        logger.info(" --> verify transport actions for client node");, +        verifyActionOnClientNode((randomBoolean() ? internalCluster() : cluster2).coordOnlyNodeClient());, +     * Verify transport action behaviour on client node, +     */, +    protected abstract void verifyActionOnClientNode(Client client) throws Exception;, +, +    /**, +     * Verify transport action behaviour on master node, +     */, +    protected abstract void verifyActionOnMasterNode(Client masterClient) throws Exception;, +, +    /**, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/LicenseTribeTests.java, +    protected void verifyActionOnClientNode(Client client) throws Exception {, +        assertLicenseTransportActionsWorks(client);, +    }, +, +    @Override, +    protected void verifyActionOnMasterNode(Client masterClient) throws Exception {, +        assertLicenseTransportActionsWorks(masterClient);, +    }, +, +    @Override, +        assertLicenseTransportActionsWorks(dataNodeClient);, +    }, +, +    private static void assertLicenseTransportActionsWorks(Client client) throws Exception {, +        client.execute(GetLicenseAction.INSTANCE, new GetLicenseRequest()).get();, +        client.execute(PutLicenseAction.INSTANCE, new PutLicenseRequest(), +        client.execute(DeleteLicenseAction.INSTANCE, new DeleteLicenseRequest());, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/xpack/TribeTransportTestCase.java, +@ClusterScope(scope = Scope.TEST, transportClientRatio = 0, numClientNodes = 1, numDataNodes = 0), +                UUIDs.randomBase64UUID(random()), nodeConfigurationSource, 1, false, "tribe_node2",, +        logger.info(" --> verify transport actions for data node");, +        logger.info(" --> verify transport actions for master node");, +        verifyActionOnMasterNode((randomBoolean() ? internalCluster() : cluster2).masterClient());, +        logger.info(" --> verify transport actions for client node");, +        verifyActionOnClientNode((randomBoolean() ? internalCluster() : cluster2).coordOnlyNodeClient());, +     * Verify transport action behaviour on client node, +     */, +    protected abstract void verifyActionOnClientNode(Client client) throws Exception;, +, +    /**, +     * Verify transport action behaviour on master node, +     */, +    protected abstract void verifyActionOnMasterNode(Client masterClient) throws Exception;, +, +    /**, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/MonitoringTribeTests.java, +    protected void verifyActionOnClientNode(Client client) throws Exception {, +        assertMonitoringTransportActionsWorks(client);, +    }, +, +    @Override, +    protected void verifyActionOnMasterNode(Client masterClient) throws Exception {, +        assertMonitoringTransportActionsWorks(masterClient);, +    }, +]