[+++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +public class WeightedFilterCache extends AbstractIndexComponent implements FilterCache, SegmentReader.CoreClosedListener, RemovalListener<WeightedFilterCache.FilterCacheKey, DocSet> {, +        Cache<FilterCacheKey, DocSet> cache = indicesFilterCache.cache();, +            Cache<FilterCacheKey, DocSet> innerCache = cache.indicesFilterCache.cache();, +            DocSet cacheValue = innerCache.getIfPresent(cacheKey);, +                cacheValue = DocSets.cacheable(reader, filter.getDocIdSet(reader));, +                cache.totalMetric.inc(cacheValue.sizeInBytes());, +            // return null if its EMPTY, this allows for further optimizations to ignore filters, +            return cacheValue == DocSet.EMPTY_DOC_SET ? null : cacheValue;, +    public static class FilterCacheValueWeigher implements Weigher<WeightedFilterCache.FilterCacheKey, DocSet> {, +        public int weigh(FilterCacheKey key, DocSet value) {, +            int weight = (int) Math.min(value.sizeInBytes(), Integer.MAX_VALUE);, +    public void onRemoval(RemovalNotification<FilterCacheKey, DocSet> removalNotification) {, +            totalMetric.dec(removalNotification.getValue().sizeInBytes());, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +public class WeightedFilterCache extends AbstractIndexComponent implements FilterCache, SegmentReader.CoreClosedListener, RemovalListener<WeightedFilterCache.FilterCacheKey, DocSet> {, +        Cache<FilterCacheKey, DocSet> cache = indicesFilterCache.cache();, +            Cache<FilterCacheKey, DocSet> innerCache = cache.indicesFilterCache.cache();, +            DocSet cacheValue = innerCache.getIfPresent(cacheKey);, +                cacheValue = DocSets.cacheable(reader, filter.getDocIdSet(reader));, +                cache.totalMetric.inc(cacheValue.sizeInBytes());, +            // return null if its EMPTY, this allows for further optimizations to ignore filters, +            return cacheValue == DocSet.EMPTY_DOC_SET ? null : cacheValue;, +    public static class FilterCacheValueWeigher implements Weigher<WeightedFilterCache.FilterCacheKey, DocSet> {, +        public int weigh(FilterCacheKey key, DocSet value) {, +            int weight = (int) Math.min(value.sizeInBytes(), Integer.MAX_VALUE);, +    public void onRemoval(RemovalNotification<FilterCacheKey, DocSet> removalNotification) {, +            totalMetric.dec(removalNotification.getValue().sizeInBytes());, +++ b/src/main/java/org/elasticsearch/indices/cache/filter/IndicesFilterCache.java, +public class IndicesFilterCache extends AbstractComponent implements RemovalListener<WeightedFilterCache.FilterCacheKey, DocSet> {, +    private Cache<WeightedFilterCache.FilterCacheKey, DocSet> cache;, +    private volatile Map<String, RemovalListener<WeightedFilterCache.FilterCacheKey, DocSet>> removalListeners =, +                Cache<WeightedFilterCache.FilterCacheKey, DocSet> oldCache = IndicesFilterCache.this.cache;, +        CacheBuilder<WeightedFilterCache.FilterCacheKey, DocSet> cacheBuilder = CacheBuilder.newBuilder(), +    public synchronized void addRemovalListener(String index, RemovalListener<WeightedFilterCache.FilterCacheKey, DocSet> listener) {, +    public Cache<WeightedFilterCache.FilterCacheKey, DocSet> cache() {, +    public void onRemoval(RemovalNotification<WeightedFilterCache.FilterCacheKey, DocSet> removalNotification) {, +        RemovalListener<WeightedFilterCache.FilterCacheKey, DocSet> listener = removalListeners.get(key.index());]