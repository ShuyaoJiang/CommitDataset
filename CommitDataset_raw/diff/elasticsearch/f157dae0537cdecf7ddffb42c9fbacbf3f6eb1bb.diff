[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +        jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, false);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +        jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, false);, +++ b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +        jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, false);, +++ b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [QUORUM] (have 1, needed 2). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [ALL] (have 2, needed 3). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +        jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, false);, +++ b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [QUORUM] (have 1, needed 2). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [ALL] (have 2, needed 3). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +            contentString += "\"must\": " + must.toString() + ",";, +            contentString += (randomBoolean() ? "\"must_not\": " : "\"mustNot\": ") + mustNot.toString() + ",";, +            contentString += "\"should\": " + should.toString() + ",";, +            contentString += "\"filter\": " + filter.toString() + ",";, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +        jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, false);, +++ b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [QUORUM] (have 1, needed 2). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [ALL] (have 2, needed 3). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +            contentString += "\"must\": " + must.toString() + ",";, +            contentString += (randomBoolean() ? "\"must_not\": " : "\"mustNot\": ") + mustNot.toString() + ",";, +            contentString += "\"should\": " + should.toString() + ",";, +            contentString += "\"filter\": " + filter.toString() + ",";, +++ b/core/src/test/java/org/elasticsearch/recovery/SimpleRecoveryIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +        jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, false);, +++ b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [QUORUM] (have 1, needed 2). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [ALL] (have 2, needed 3). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +            contentString += "\"must\": " + must.toString() + ",";, +            contentString += (randomBoolean() ? "\"must_not\": " : "\"mustNot\": ") + mustNot.toString() + ",";, +            contentString += "\"should\": " + should.toString() + ",";, +            contentString += "\"filter\": " + filter.toString() + ",";, +++ b/core/src/test/java/org/elasticsearch/recovery/SimpleRecoveryIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/resources/org/elasticsearch/common/settings/loader/test-settings.json, +    "test1":{, +        "value1":"value1",, +        "test2":{, +            "value2":"value2",, +            "value3":2, +        "test3":["test3-1", "test3-2"], +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +        jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, false);, +++ b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [QUORUM] (have 1, needed 2). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [ALL] (have 2, needed 3). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +            contentString += "\"must\": " + must.toString() + ",";, +            contentString += (randomBoolean() ? "\"must_not\": " : "\"mustNot\": ") + mustNot.toString() + ",";, +            contentString += "\"should\": " + should.toString() + ",";, +            contentString += "\"filter\": " + filter.toString() + ",";, +++ b/core/src/test/java/org/elasticsearch/recovery/SimpleRecoveryIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/resources/org/elasticsearch/common/settings/loader/test-settings.json, +    "test1":{, +        "value1":"value1",, +        "test2":{, +            "value2":"value2",, +            "value3":2, +        "test3":["test3-1", "test3-2"], +++ b/core/src/test/resources/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json, +    "person":{, +        "properties":{, +                "store":true, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +        jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, false);, +++ b/core/src/test/java/org/elasticsearch/cluster/SimpleDataNodesIT.java, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/consistencylevel/WriteConsistencyLevelIT.java, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [QUORUM] (have 1, needed 2). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +            assertThat(e.getMessage(), equalTo("[test][0] Not enough active copies to meet write consistency of [ALL] (have 2, needed 3). Timeout: [100ms], request: [index {[test][type1][1], source[{ \"type1\" : { \"id\" : \"1\", \"name\" : \"test\" } }]}]"));, +        return "{ \"type1\" : { \"id\" : \"" + id + "\", \"name\" : \"" + nameValue + "\" } }";, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +            contentString += "\"must\": " + must.toString() + ",";]