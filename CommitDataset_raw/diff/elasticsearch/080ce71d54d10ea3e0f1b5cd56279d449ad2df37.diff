[+++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +import java.util.Collection;, +        private final Aggregator[] collectors;, +        public AggregationsCollector(Collection<Aggregator> collectors, AggregationContext aggregationContext) {, +            this.collectors = collectors.toArray(new Aggregator[collectors.size()]);, +            for (Aggregator collector : collectors) {, +                collector.collect(doc, 0);, +            for (Aggregator collector : collectors) {, +                collector.postCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +import java.util.Collection;, +        private final Aggregator[] collectors;, +        public AggregationsCollector(Collection<Aggregator> collectors, AggregationContext aggregationContext) {, +            this.collectors = collectors.toArray(new Aggregator[collectors.size()]);, +            for (Aggregator collector : collectors) {, +                collector.collect(doc, 0);, +            for (Aggregator collector : collectors) {, +                collector.postCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import org.elasticsearch.common.lucene.ReaderContextAware;, +public abstract class Aggregator implements Releasable, ReaderContextAware {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +import java.util.Collection;, +        private final Aggregator[] collectors;, +        public AggregationsCollector(Collection<Aggregator> collectors, AggregationContext aggregationContext) {, +            this.collectors = collectors.toArray(new Aggregator[collectors.size()]);, +            for (Aggregator collector : collectors) {, +                collector.collect(doc, 0);, +            for (Aggregator collector : collectors) {, +                collector.postCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import org.elasticsearch.common.lucene.ReaderContextAware;, +public abstract class Aggregator implements Releasable, ReaderContextAware {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +import org.apache.lucene.index.AtomicReaderContext;, +    private static Aggregator createAndRegisterContextAware(AggregationContext context, AggregatorFactory factory, Aggregator parent, long estimatedBucketsCount) {, +        final Aggregator aggregator = factory.create(context, parent, estimatedBucketsCount);, +        if (aggregator.shouldCollect()) {, +            context.registerReaderContextAware(aggregator);, +        }, +        return aggregator;, +    }, +, +            final Aggregator first = createAndRegisterContextAware(parent.context(), factory, parent, estimatedBucketsCount);, +                        aggregators.set(i, createAndRegisterContextAware(parent.context(), factory, parent, estimatedBucketsCount));, +                        aggregator = createAndRegisterContextAware(parent.context(), factory, parent, estimatedBucketsCount);, +                public void setNextReader(AtomicReaderContext reader) {, +                }, +, +                @Override, +            aggregators[i] = createAndRegisterContextAware(ctx, factories[i], null, 0);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +import java.util.Collection;, +        private final Aggregator[] collectors;, +        public AggregationsCollector(Collection<Aggregator> collectors, AggregationContext aggregationContext) {, +            this.collectors = collectors.toArray(new Aggregator[collectors.size()]);, +            for (Aggregator collector : collectors) {, +                collector.collect(doc, 0);, +            for (Aggregator collector : collectors) {, +                collector.postCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import org.elasticsearch.common.lucene.ReaderContextAware;, +public abstract class Aggregator implements Releasable, ReaderContextAware {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +import org.apache.lucene.index.AtomicReaderContext;, +    private static Aggregator createAndRegisterContextAware(AggregationContext context, AggregatorFactory factory, Aggregator parent, long estimatedBucketsCount) {, +        final Aggregator aggregator = factory.create(context, parent, estimatedBucketsCount);, +        if (aggregator.shouldCollect()) {, +            context.registerReaderContextAware(aggregator);, +        }, +        return aggregator;, +    }, +, +            final Aggregator first = createAndRegisterContextAware(parent.context(), factory, parent, estimatedBucketsCount);, +                        aggregators.set(i, createAndRegisterContextAware(parent.context(), factory, parent, estimatedBucketsCount));, +                        aggregator = createAndRegisterContextAware(parent.context(), factory, parent, estimatedBucketsCount);, +                public void setNextReader(AtomicReaderContext reader) {, +                }, +, +                @Override, +            aggregators[i] = createAndRegisterContextAware(ctx, factories[i], null, 0);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/filter/FilterAggregator.java, +import org.elasticsearch.search.aggregations.*;, +public class FilterAggregator extends SingleBucketAggregator {, +            return new FilterAggregator(name, filter, factories, context, parent);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +import java.util.Collection;, +        private final Aggregator[] collectors;, +        public AggregationsCollector(Collection<Aggregator> collectors, AggregationContext aggregationContext) {, +            this.collectors = collectors.toArray(new Aggregator[collectors.size()]);, +            for (Aggregator collector : collectors) {, +                collector.collect(doc, 0);, +            for (Aggregator collector : collectors) {, +                collector.postCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import org.elasticsearch.common.lucene.ReaderContextAware;, +public abstract class Aggregator implements Releasable, ReaderContextAware {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +import org.apache.lucene.index.AtomicReaderContext;, +    private static Aggregator createAndRegisterContextAware(AggregationContext context, AggregatorFactory factory, Aggregator parent, long estimatedBucketsCount) {]