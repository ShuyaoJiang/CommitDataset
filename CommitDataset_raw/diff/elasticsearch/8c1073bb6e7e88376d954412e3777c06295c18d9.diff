[+++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +    protected final String repositoryName;, +            // Delete snapshot from the snapshot list, +            ImmutableList<SnapshotId> snapshotIds = snapshots();, +            if (snapshotIds.contains(snapshotId)) {, +                ImmutableList.Builder<SnapshotId> builder = ImmutableList.builder();, +                for (SnapshotId id : snapshotIds) {, +                    if (!snapshotId.equals(id)) {, +                        builder.add(id);, +                    }, +                }, +                snapshotIds = builder.build();, +            }, +            writeSnapshotList(snapshotIds);, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +    protected final String repositoryName;, +            // Delete snapshot from the snapshot list, +            ImmutableList<SnapshotId> snapshotIds = snapshots();, +            if (snapshotIds.contains(snapshotId)) {, +                ImmutableList.Builder<SnapshotId> builder = ImmutableList.builder();, +                for (SnapshotId id : snapshotIds) {, +                    if (!snapshotId.equals(id)) {, +                        builder.add(id);, +                    }, +                }, +                snapshotIds = builder.build();, +            }, +            writeSnapshotList(snapshotIds);, +++ b/src/main/java/org/elasticsearch/repositories/uri/URLRepository.java, +import com.google.common.collect.ImmutableList;, +import org.elasticsearch.cluster.metadata.SnapshotId;, +    private boolean listDirectories;, +, +        listDirectories = repositorySettings.settings().getAsBoolean("list_directories", componentSettings.getAsBoolean("list_directories", true));, +, +    @Override, +    public ImmutableList<SnapshotId> snapshots() {, +        if (listDirectories) {, +            return super.snapshots();, +        } else {, +            try {, +                return readSnapshotList();, +            } catch (IOException ex) {, +                throw new RepositoryException(repositoryName, "failed to get snapshot list in repository", ex);, +            }, +        }, +    }, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +    protected final String repositoryName;, +            // Delete snapshot from the snapshot list, +            ImmutableList<SnapshotId> snapshotIds = snapshots();, +            if (snapshotIds.contains(snapshotId)) {, +                ImmutableList.Builder<SnapshotId> builder = ImmutableList.builder();, +                for (SnapshotId id : snapshotIds) {, +                    if (!snapshotId.equals(id)) {, +                        builder.add(id);, +                    }, +                }, +                snapshotIds = builder.build();, +            }, +            writeSnapshotList(snapshotIds);, +++ b/src/main/java/org/elasticsearch/repositories/uri/URLRepository.java, +import com.google.common.collect.ImmutableList;, +import org.elasticsearch.cluster.metadata.SnapshotId;, +    private boolean listDirectories;, +, +        listDirectories = repositorySettings.settings().getAsBoolean("list_directories", componentSettings.getAsBoolean("list_directories", true));, +, +    @Override, +    public ImmutableList<SnapshotId> snapshots() {, +        if (listDirectories) {, +            return super.snapshots();, +        } else {, +            try {, +                return readSnapshotList();, +            } catch (IOException ex) {, +                throw new RepositoryException(repositoryName, "failed to get snapshot list in repository", ex);, +            }, +        }, +    }, +++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotResponse;, +                        .put("list_directories", randomBoolean()), +, +        logger.info("--> delete snapshot");, +        DeleteSnapshotResponse deleteSnapshotResponse = client.admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap").get();, +        assertAcked(deleteSnapshotResponse);, +, +        logger.info("--> list available shapshot again, no snapshots should be returned");, +        getSnapshotsResponse = client.admin().cluster().prepareGetSnapshots("url-repo").get();, +        assertThat(getSnapshotsResponse.getSnapshots(), notNullValue());, +        assertThat(getSnapshotsResponse.getSnapshots().size(), equalTo(0));]