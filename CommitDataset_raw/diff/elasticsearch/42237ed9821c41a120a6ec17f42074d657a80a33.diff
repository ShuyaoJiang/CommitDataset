[+++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter;, +import org.elasticsearch.ExceptionsHelper;, +            } catch (AssertionError e) {, +                // IndexWriter throws AssertionError on init, if asserts are enabled, if any files don't exist, but tests that, +                // randomly throw FNFE/NSFE can also hit this:, +                if (ExceptionsHelper.stackTrace(e).contains("org.apache.lucene.index.IndexWriter.filesExist")) {, +                    throw new EngineCreationFailureException(shardId, "failed to create engine", e);, +                } else {, +                    throw e;, +                }, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter;, +import org.elasticsearch.ExceptionsHelper;, +            } catch (AssertionError e) {, +                // IndexWriter throws AssertionError on init, if asserts are enabled, if any files don't exist, but tests that, +                // randomly throw FNFE/NSFE can also hit this:, +                if (ExceptionsHelper.stackTrace(e).contains("org.apache.lucene.index.IndexWriter.filesExist")) {, +                    throw new EngineCreationFailureException(shardId, "failed to create engine", e);, +                } else {, +                    throw e;, +                }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +                    if (clazz == null) {, +                        throw new IllegalStateException("plugin classname is needed for insecure plugin unit tests");, +                    Class.forName(clazz);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter;, +import org.elasticsearch.ExceptionsHelper;, +            } catch (AssertionError e) {, +                // IndexWriter throws AssertionError on init, if asserts are enabled, if any files don't exist, but tests that, +                // randomly throw FNFE/NSFE can also hit this:, +                if (ExceptionsHelper.stackTrace(e).contains("org.apache.lucene.index.IndexWriter.filesExist")) {, +                    throw new EngineCreationFailureException(shardId, "failed to create engine", e);, +                } else {, +                    throw e;, +                }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +                    if (clazz == null) {, +                        throw new IllegalStateException("plugin classname is needed for insecure plugin unit tests");, +                    Class.forName(clazz);, +++ b/core/src/test/java/org/elasticsearch/bootstrap/MockPluginPolicy.java, +import org.elasticsearch.common.io.PathUtils;, +import java.nio.file.Path;, +    final Set<CodeSource> extraSources;, +        // every element in classpath except test-classes/, +        extraSources = new HashSet<CodeSource>();, +        for (URL location : JarHell.parseClassPath()) {, +            Path path = PathUtils.get(location.toURI());, +            String baseName = path.getFileName().toString();, +            if (baseName.contains("test-classes") == false) {, +              extraSources.add(new CodeSource(location, (Certificate[])null));, +            }, +        }, +        extraSources.remove(Bootstrap.class.getProtectionDomain().getCodeSource());, +        extraSources.remove(getClass().getProtectionDomain().getCodeSource());, +        extraSources.remove(LuceneTestCase.class.getProtectionDomain().getCodeSource());, +        extraSources.remove(RandomizedRunner.class.getProtectionDomain().getCodeSource());, +        extraSources.remove(Assert.class.getProtectionDomain().getCodeSource());, +        Loggers.getLogger(getClass()).debug("Apply permissions [{}] to codebases [{}]", extraPermissions, extraSources);, +        } else if (extraSources.contains(domain.getCodeSource())) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter;, +import org.elasticsearch.ExceptionsHelper;, +            } catch (AssertionError e) {, +                // IndexWriter throws AssertionError on init, if asserts are enabled, if any files don't exist, but tests that, +                // randomly throw FNFE/NSFE can also hit this:, +                if (ExceptionsHelper.stackTrace(e).contains("org.apache.lucene.index.IndexWriter.filesExist")) {, +                    throw new EngineCreationFailureException(shardId, "failed to create engine", e);, +                } else {, +                    throw e;, +                }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +                    if (clazz == null) {, +                        throw new IllegalStateException("plugin classname is needed for insecure plugin unit tests");, +                    Class.forName(clazz);, +++ b/core/src/test/java/org/elasticsearch/bootstrap/MockPluginPolicy.java, +import org.elasticsearch.common.io.PathUtils;, +import java.nio.file.Path;, +    final Set<CodeSource> extraSources;, +        // every element in classpath except test-classes/, +        extraSources = new HashSet<CodeSource>();, +        for (URL location : JarHell.parseClassPath()) {, +            Path path = PathUtils.get(location.toURI());, +            String baseName = path.getFileName().toString();, +            if (baseName.contains("test-classes") == false) {, +              extraSources.add(new CodeSource(location, (Certificate[])null));, +            }, +        }, +        extraSources.remove(Bootstrap.class.getProtectionDomain().getCodeSource());, +        extraSources.remove(getClass().getProtectionDomain().getCodeSource());, +        extraSources.remove(LuceneTestCase.class.getProtectionDomain().getCodeSource());, +        extraSources.remove(RandomizedRunner.class.getProtectionDomain().getCodeSource());, +        extraSources.remove(Assert.class.getProtectionDomain().getCodeSource());, +        Loggers.getLogger(getClass()).debug("Apply permissions [{}] to codebases [{}]", extraPermissions, extraSources);, +        } else if (extraSources.contains(domain.getCodeSource())) {, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter;, +import org.elasticsearch.ExceptionsHelper;]