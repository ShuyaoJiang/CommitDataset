[+++ b/.gitignore, +generated-resources/, +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +    // Uncomment the following line to first resolve against the maven local repo. This is useful for eclipse users who want to work on test-framework., +    // mavenLocal(), +          substitute module("org.elasticsearch.distribution.tar:elasticsearch:${version}") with project("${projectsPrefix}:distribution:tar"), +if (projectsPrefix.isEmpty()) {, +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +    // Uncomment the following line to first resolve against the maven local repo. This is useful for eclipse users who want to work on test-framework., +    // mavenLocal(), +          substitute module("org.elasticsearch.distribution.tar:elasticsearch:${version}") with project("${projectsPrefix}:distribution:tar"), +if (projectsPrefix.isEmpty()) {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +, +    @Optional, +    @Input, +    String argLine = null, +, +            if (argLine != null) {, +                jvmarg(line: argLine), +            }, +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +    // Uncomment the following line to first resolve against the maven local repo. This is useful for eclipse users who want to work on test-framework., +    // mavenLocal(), +          substitute module("org.elasticsearch.distribution.tar:elasticsearch:${version}") with project("${projectsPrefix}:distribution:tar"), +if (projectsPrefix.isEmpty()) {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +, +    @Optional, +    @Input, +    String argLine = null, +, +            if (argLine != null) {, +                jvmarg(line: argLine), +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            argLine System.getProperty('tests.jvm.argline'), +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +    // Uncomment the following line to first resolve against the maven local repo. This is useful for eclipse users who want to work on test-framework., +    // mavenLocal(), +          substitute module("org.elasticsearch.distribution.tar:elasticsearch:${version}") with project("${projectsPrefix}:distribution:tar"), +if (projectsPrefix.isEmpty()) {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +, +    @Optional, +    @Input, +    String argLine = null, +, +            if (argLine != null) {, +                jvmarg(line: argLine), +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            argLine System.getProperty('tests.jvm.argline'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.sourceSets.test {, +            output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +            resources {, +                srcDir pluginMetadata, +            }, +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +    // Uncomment the following line to first resolve against the maven local repo. This is useful for eclipse users who want to work on test-framework., +    // mavenLocal(), +          substitute module("org.elasticsearch.distribution.tar:elasticsearch:${version}") with project("${projectsPrefix}:distribution:tar"), +if (projectsPrefix.isEmpty()) {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +, +    @Optional, +    @Input, +    String argLine = null, +, +            if (argLine != null) {, +                jvmarg(line: argLine), +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            argLine System.getProperty('tests.jvm.argline'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.sourceSets.test {, +            output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +            resources {, +                srcDir pluginMetadata, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +import org.gradle.api.Task, +import org.gradle.api.tasks.Copy, +class PluginPropertiesTask extends Copy {, +    File generatedResourcesDir = new File(project.projectDir, 'generated-resources'), +        File templateFile = new File(project.buildDir, 'templates/plugin-descriptor.properties'), +        Task copyPluginPropertiesTemplate = project.tasks.create('copyPluginPropertiesTemplate') {, +            doLast {, +                InputStream resourceTemplate = PluginPropertiesTask.getResourceAsStream('/plugin-descriptor.properties')]