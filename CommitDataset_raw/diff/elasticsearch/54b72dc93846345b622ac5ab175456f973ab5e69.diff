[+++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/CategorizationIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.action.bulk.BulkRequestBuilder;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.network.NetworkModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.test.SecurityIntegTestCase;, +import org.elasticsearch.xpack.XPackSettings;, +import org.elasticsearch.xpack.ml.action.DeleteDatafeedAction;, +import org.elasticsearch.xpack.ml.action.DeleteJobAction;, +import org.elasticsearch.xpack.ml.action.GetCategoriesAction;, +import org.elasticsearch.xpack.ml.action.GetJobsStatsAction;, +import org.elasticsearch.xpack.ml.action.OpenJobAction;, +import org.elasticsearch.xpack.ml.action.PutDatafeedAction;, +import org.elasticsearch.xpack.ml.action.PutJobAction;, +import org.elasticsearch.xpack.ml.action.StartDatafeedAction;, +import org.elasticsearch.xpack.ml.action.util.PageParams;, +import org.elasticsearch.xpack.ml.datafeed.DatafeedConfig;, +import org.elasticsearch.xpack.ml.job.config.AnalysisConfig;, +import org.elasticsearch.xpack.ml.job.config.DataDescription;, +import org.elasticsearch.xpack.ml.job.config.Detector;, +import org.elasticsearch.xpack.ml.job.config.Job;, +import org.elasticsearch.xpack.ml.job.config.JobState;, +import org.elasticsearch.xpack.ml.job.results.CategoryDefinition;, +import org.elasticsearch.xpack.security.Security;, +import org.junit.After;, +import org.junit.Before;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +, +/**, + * A fast integration test for categorization, + */, +public class CategorizationIT extends SecurityIntegTestCase {, +, +    private static final Logger LOGGER = Loggers.getLogger(CategorizationIT.class);, +, +    private static final String DATA_INDEX = "log-data";, +    private static final String DATA_TYPE = "log";, +, +    private List<Job.Builder> jobs;, +    private long nowMillis;, +, +    @Override, +    protected Settings externalClusterClientSettings() {, +        Settings.Builder builder = Settings.builder();, +        builder.put(NetworkModule.TRANSPORT_TYPE_KEY, Security.NAME4);, +        builder.put(Security.USER_SETTING.getKey(), "elastic:changeme");, +        builder.put(XPackSettings.MACHINE_LEARNING_ENABLED.getKey(), true);, +        return builder.build();, +    }, +, +    @Before, +    public void setUpData() throws IOException {, +        jobs = new ArrayList<>();, +, +        client().admin().indices().prepareCreate(DATA_INDEX), +                .addMapping(DATA_TYPE, "time", "type=date,format=epoch_millis",, +                        "msg", "type=keyword"), +                .get();, +, +        nowMillis = System.currentTimeMillis();, +, +        BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();, +        IndexRequest indexRequest = new IndexRequest(DATA_INDEX, DATA_TYPE);, +        indexRequest.source("time", nowMillis - TimeValue.timeValueHours(2).millis(),, +                "msg", "Node 1 started");, +        bulkRequestBuilder.add(indexRequest);, +        indexRequest = new IndexRequest(DATA_INDEX, DATA_TYPE);, +        indexRequest.source("time", nowMillis - TimeValue.timeValueHours(2).millis() + 1,, +                "msg", "Failed to shutdown [error org.aaaa.bbbb.Cccc line 54 caused " +, +                        "by foo exception]");, +        bulkRequestBuilder.add(indexRequest);, +        indexRequest = new IndexRequest(DATA_INDEX, DATA_TYPE);, +        indexRequest.source("time", nowMillis - TimeValue.timeValueHours(1).millis(),, +                "msg", "Node 2 started");, +        bulkRequestBuilder.add(indexRequest);, +        indexRequest = new IndexRequest(DATA_INDEX, DATA_TYPE);, +        indexRequest.source("time", nowMillis - TimeValue.timeValueHours(1).millis() + 1,, +                "msg", "Failed to shutdown [error but this time completely different]");, +        bulkRequestBuilder.add(indexRequest);, +        indexRequest = new IndexRequest(DATA_INDEX, DATA_TYPE);]