[+++ b/Vagrantfile, +export PACKAGING_TESTS=/project/build/packaging/tests, +Defaults   env_keep += "PACKAGING_TESTS", +++ b/Vagrantfile, +export PACKAGING_TESTS=/project/build/packaging/tests, +Defaults   env_keep += "PACKAGING_TESTS", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantPropertiesExtension.groovy, +    @Input, +    String testClass, +, +++ b/Vagrantfile, +export PACKAGING_TESTS=/project/build/packaging/tests, +Defaults   env_keep += "PACKAGING_TESTS", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantPropertiesExtension.groovy, +    @Input, +    String testClass, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +    private static final PACKAGING_TEST_CONFIGURATION = 'packagingTest', +        project.configurations.create(PACKAGING_TEST_CONFIGURATION), +        if (project.tasks.findByName('clean') == null) {, +    }, +        File testsDir = new File(packagingDir, 'tests'), +        Copy copyPackagingTests = project.tasks.create('copyPackagingTests', Copy) {, +            into testsDir, +            from project.configurations[PACKAGING_TEST_CONFIGURATION], +        }, +, +        Task createTestRunnerScript = project.tasks.create('createTestRunnerScript', FileContentsTask) {, +            dependsOn copyPackagingTests, +            file "${testsDir}/run-tests.sh", +            contents "java -cp \"\$PACKAGING_TESTS/*\" org.junit.runner.JUnitCore ${-> project.extensions.esvagrant.testClass}", +        }, +, +        vagrantSetUpTask.dependsOn copyPackagingArchives, copyPackagingTests, createTestRunnerScript, +        vagrantSetUpTask.dependsOn createVersionFile, createUpgradeFromFile, createUpgradeIsOssFile, +            Task javaPackagingTest = project.tasks.create("vagrant${boxTask}#javaPackagingTest", VagrantCommandTask) {, +                command 'ssh', +                boxName box, +                environmentVars vagrantEnvVars, +                dependsOn up, setupPackagingTest, +                finalizedBy halt, +                args '--command', "bash \"\$PACKAGING_TESTS/run-tests.sh\"", +, +            // todo remove this onlyIf after all packaging tests are consolidated, +            javaPackagingTest.onlyIf {, +                project.extensions.esvagrant.testClass != null, +            }, +, +            TaskExecutionAdapter javaPackagingReproListener = createReproListener(project, javaPackagingTest.path), +            javaPackagingTest.doFirst {, +                project.gradle.addListener(javaPackagingReproListener), +            }, +            javaPackagingTest.doLast {, +                project.gradle.removeListener(javaPackagingReproListener), +                packagingTest.dependsOn(javaPackagingTest), +++ b/Vagrantfile, +export PACKAGING_TESTS=/project/build/packaging/tests, +Defaults   env_keep += "PACKAGING_TESTS", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantPropertiesExtension.groovy, +    @Input, +    String testClass, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +    private static final PACKAGING_TEST_CONFIGURATION = 'packagingTest', +        project.configurations.create(PACKAGING_TEST_CONFIGURATION), +        if (project.tasks.findByName('clean') == null) {, +    }, +        File testsDir = new File(packagingDir, 'tests'), +        Copy copyPackagingTests = project.tasks.create('copyPackagingTests', Copy) {, +            into testsDir, +            from project.configurations[PACKAGING_TEST_CONFIGURATION], +        }, +, +        Task createTestRunnerScript = project.tasks.create('createTestRunnerScript', FileContentsTask) {, +            dependsOn copyPackagingTests, +            file "${testsDir}/run-tests.sh", +            contents "java -cp \"\$PACKAGING_TESTS/*\" org.junit.runner.JUnitCore ${-> project.extensions.esvagrant.testClass}", +        }, +, +        vagrantSetUpTask.dependsOn copyPackagingArchives, copyPackagingTests, createTestRunnerScript, +        vagrantSetUpTask.dependsOn createVersionFile, createUpgradeFromFile, createUpgradeIsOssFile, +            Task javaPackagingTest = project.tasks.create("vagrant${boxTask}#javaPackagingTest", VagrantCommandTask) {, +                command 'ssh', +                boxName box, +                environmentVars vagrantEnvVars, +                dependsOn up, setupPackagingTest, +                finalizedBy halt, +                args '--command', "bash \"\$PACKAGING_TESTS/run-tests.sh\"", +, +            // todo remove this onlyIf after all packaging tests are consolidated, +            javaPackagingTest.onlyIf {, +                project.extensions.esvagrant.testClass != null, +            }, +, +            TaskExecutionAdapter javaPackagingReproListener = createReproListener(project, javaPackagingTest.path), +            javaPackagingTest.doFirst {, +                project.gradle.addListener(javaPackagingReproListener), +            }, +            javaPackagingTest.doLast {]