[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC));, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +            } else if (propName.equals("tokenized")) {, +                builder.tokenized(nodeBooleanValue(propNode));, +                iterator.remove();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +            } else if (propName.equals("tokenized")) {, +                builder.tokenized(nodeBooleanValue(propNode));, +                iterator.remove();, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +        this.fileChunkSize = settings.getAsBytesSize(INDICES_RECOVERY_FILE_CHUNK_SIZE, new ByteSizeValue(512, ByteSizeUnit.KB));, +        this.translogOps = settings.getAsInt(INDICES_RECOVERY_TRANSLOG_OPS, 1000);, +        this.translogSize = settings.getAsBytesSize(INDICES_RECOVERY_TRANSLOG_SIZE, new ByteSizeValue(512, ByteSizeUnit.KB));, +        this.concurrentStreams = settings.getAsInt(INDICES_RECOVERY_CONCURRENT_STREAMS, 3);, +        this.concurrentSmallFileStreams = settings.getAsInt(INDICES_RECOVERY_CONCURRENT_SMALL_FILE_STREAMS, 2);, +        this.maxBytesPerSec = settings.getAsBytesSize(INDICES_RECOVERY_MAX_BYTES_PER_SEC, new ByteSizeValue(40, ByteSizeUnit.MB));, +            ByteSizeValue maxSizePerSec = settings.getAsBytesSize(INDICES_RECOVERY_MAX_BYTES_PER_SEC, RecoverySettings.this.maxBytesPerSec);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +            } else if (propName.equals("tokenized")) {, +                builder.tokenized(nodeBooleanValue(propNode));, +                iterator.remove();, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +        this.fileChunkSize = settings.getAsBytesSize(INDICES_RECOVERY_FILE_CHUNK_SIZE, new ByteSizeValue(512, ByteSizeUnit.KB));, +        this.translogOps = settings.getAsInt(INDICES_RECOVERY_TRANSLOG_OPS, 1000);, +        this.translogSize = settings.getAsBytesSize(INDICES_RECOVERY_TRANSLOG_SIZE, new ByteSizeValue(512, ByteSizeUnit.KB));, +        this.concurrentStreams = settings.getAsInt(INDICES_RECOVERY_CONCURRENT_STREAMS, 3);, +        this.concurrentSmallFileStreams = settings.getAsInt(INDICES_RECOVERY_CONCURRENT_SMALL_FILE_STREAMS, 2);, +        this.maxBytesPerSec = settings.getAsBytesSize(INDICES_RECOVERY_MAX_BYTES_PER_SEC, new ByteSizeValue(40, ByteSizeUnit.MB));, +            ByteSizeValue maxSizePerSec = settings.getAsBytesSize(INDICES_RECOVERY_MAX_BYTES_PER_SEC, RecoverySettings.this.maxBytesPerSec);, +++ b/docs/reference/migration/migrate_3_0.asciidoc, +, +==== Recovery settings, +, +Recovery settings deprecated in 1.x have been removed:, +, + * `index.shard.recovery.translog_size` is superseded by `indices.recovery.translog_size`, + * `index.shard.recovery.translog_ops` is superseded by `indices.recovery.translog_ops`, + * `index.shard.recovery.file_chunk_size` is superseded by `indices.recovery.file_chunk_size`, + * `index.shard.recovery.concurrent_streams` is superseded by `indices.recovery.concurrent_streams`, + * `index.shard.recovery.concurrent_small_file_streams` is superseded by `indices.recovery.concurrent_small_file_streams`, + * `indices.recovery.max_size_per_sec` is superseded by `indices.recovery.max_bytes_per_sec`, +, +If you are using any of these settings please take the time and review their purpose. All of the settings above are considered, +_expert settings_ and should only be used if absolutely necessary. If you have set any of the above setting as persistent, +cluster settings please use the settings update API and set their superseded keys accordingly., +]