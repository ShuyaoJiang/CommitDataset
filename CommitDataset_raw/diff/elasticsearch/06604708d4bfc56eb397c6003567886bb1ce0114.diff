[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                            listener.onFailure(exp.getCause());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                            listener.onFailure(exp.getCause());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                            listener.onFailure(exp.getCause());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +                markAsFailed("timed out waiting for commit (commit timeout [" + commitTimeout + "]");, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                            listener.onFailure(exp.getCause());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +                markAsFailed("timed out waiting for commit (commit timeout [" + commitTimeout + "]");, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +        protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                            listener.onFailure(exp.getCause());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +                markAsFailed("timed out waiting for commit (commit timeout [" + commitTimeout + "]");, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +        protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +import org.apache.lucene.util.LuceneTestCase;, +    private List<String> startCluster(int numberOfNodes, int minimumMasterNode, @Nullable int[] unicastHostsOrdinals) throws ExecutionException, InterruptedException {, +    private void configureUnicastCluster(int numberOfNodes, @Nullable int[] unicastHostsOrdinals, int minimumMasterNode) throws ExecutionException, InterruptedException {, +    private void configureUnicastCluster(Settings settings, int numberOfNodes, @Nullable int[] unicastHostsOrdinals, int minimumMasterNode) throws ExecutionException, InterruptedException {, +                .setTransientSettings(Settings.builder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2)).get());, +            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkPartition.expectedTimeToHeal().millis()), true, node);, +    // NOTE: if you remove the awaitFix, make sure to port the test to the 1.x branch, +    @LuceneTestCase.AwaitsFix(bugUrl = "needs some more work to stabilize"), +    @TestLogging("_root:DEBUG,action.index:TRACE,action.get:TRACE,discovery:TRACE,cluster.service:TRACE,indices.recovery:TRACE,indices.cluster:TRACE"), +                Thread thread = new Thread(new Runnable() {, +                    @Override, +                    public void run() {, +                                    IndexResponse response = client.prepareIndex("test", "type", id).setSource("{}").setTimeout("1s").get();, +                                    assertThat(response.getVersion(), equalTo(1L));, +                    }, +                assertTrue(countDownLatchRef.get().await(60000 + disruptionScheme.expectedTimeToHeal().millis() * (docsPerIndexer * indexers.size()), TimeUnit.MILLISECONDS));, +                ensureStableCluster(3, TimeValue.timeValueMillis(disruptionScheme.expectedTimeToHeal().millis() + DISRUPTION_HEALING_OVERHEAD.millis()));, +        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String, String>>>());, +                        logger.info("node {} received new cluster state: {} \n and had previous cluster state: {}", node, event.state(), event.previousState());, +        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new ClusterStateUpdateTask(Priority.IMMEDIATE) {, +            assertThat("[" + nodeName + "] Each node should only record two master node transitions", recordedMasterTransition.size(), equalTo(2));, +            assertThat("[" + nodeName + "] First transition's previous master should be [null]", recordedMasterTransition.get(0).v1(), equalTo(oldMasterNode));, +            assertThat("[" + nodeName + "] First transition's current master should be [" + newMasterNode + "]", recordedMasterTransition.get(0).v2(), nullValue());, +            assertThat("[" + nodeName + "] Second transition's previous master should be [null]", recordedMasterTransition.get(1).v1(), nullValue());, +            assertThat("[" + nodeName + "] Second transition's current master should be [" + newMasterNode + "]", recordedMasterTransition.get(1).v2(), equalTo(newMasterNode));, +        IndexResponse indexResponse = internalCluster().client(notIsolatedNode).prepareIndex("test", "type").setSource("field", "value").get();, +        TransportService masterTranspotService = internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName());, +        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, nonMasterNode);, +        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode);, +        TransportService localTransportService = internalCluster().getInstance(TransportService.class, discoveryNodes.getLocalNode().getName());, +        nonMasterTransportService.addDelegate(masterTranspotService, new MockTransportService.DelegateTransport(nonMasterTransportService.original()) {, +            public void sendRequest(DiscoveryNode node, long requestId, String action, TransportRequest request, TransportRequestOptions options) throws IOException, TransportException {, +        service.shardFailed(failedShard, failedShard, "simulated", new CorruptIndexException("simulated", (String) null), new ShardStateAction.Listener() {, +        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode);, +        transportServiceNode2.addTracer(new IndicesStoreIntegrationIT.ReclocationStartEndTracer(logger, beginRelocationLatch, endRelocationLatch));, +                        assertTrue("node [" + node + "] does have level [" + level + "] in it's blocks", state.getBlocks().hasGlobalBlock(level));, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {]