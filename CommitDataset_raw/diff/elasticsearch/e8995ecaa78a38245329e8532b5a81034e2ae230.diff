[+++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchSourceBuilder source = searchSource().query(commonTerms("field2", "quick brown").cutoffFrequency(100)), +                .highlight(highlight().field("field2").order("score").preTags("<x>").postTags("</x>"));, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchSourceBuilder source = searchSource().query(prefixQuery("field2", "qui").rewrite(randomFrom(REWRITE_METHODS))), +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchSourceBuilder source = searchSource().query(regexpQuery("field2", "qu[a-l]+k").rewrite(randomFrom(REWRITE_METHODS))), +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchSourceBuilder source = searchSource().query(wildcardQuery("field2", "qui*").rewrite(randomFrom(REWRITE_METHODS))), +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        source = searchSource().query(wildcardQuery("field2", "qu*k").rewrite(randomFrom(REWRITE_METHODS))), +        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchSourceBuilder source = searchSource().query(queryString("qui*").defaultField("field2").rewrite(randomFrom(REWRITE_METHODS))), +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchSourceBuilder source = searchSource().query(constantScoreQuery(regexpQuery("field1", "pho[a-z]+").rewrite(randomFrom(REWRITE_METHODS)))), +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +                .should(filteredQuery(queryString("field1:photo*").rewrite(randomFrom(REWRITE_METHODS)), null))), +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchSourceBuilder source = searchSource().query(boolQuery().must(prefixQuery("field1", "photo").rewrite(randomFrom(REWRITE_METHODS))).should(matchQuery("field1", "test").minimumShouldMatch("0"))), +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchSourceBuilder source = searchSource().query(filteredQuery(queryString("field1:photo*").rewrite(randomFrom(REWRITE_METHODS)), missingFilter("field_null"))), +        SearchResponse searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();, +        SearchRequestBuilder searchRequestBuilder = client().prepareSearch(), +                .addHighlightedField("field1");, +        SearchResponse searchResponse =, +                searchRequestBuilder.get();, +        Matcher<String> highlightedMatcher = Matchers.either(containsString("<em>highlight words together</em>")).or(]