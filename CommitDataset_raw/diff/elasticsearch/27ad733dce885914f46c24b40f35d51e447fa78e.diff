[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/test/java/org/elasticsearch/env/EnvironmentTests.java, +        environment = newEnvironment(Settings.builder(), +                .putList(Environment.PATH_REPO_SETTING.getKey(), "/test/repos", "/another/repos", "/test/repos/../other").build());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/test/java/org/elasticsearch/env/EnvironmentTests.java, +        environment = newEnvironment(Settings.builder(), +                .putList(Environment.PATH_REPO_SETTING.getKey(), "/test/repos", "/another/repos", "/test/repos/../other").build());, +++ b/server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java, +                            try (ShardLock autoCloses = env.shardLock(new ShardId("foo", "fooUUID", shard), , +                                    scaledRandomIntBetween(0, 10))) {, +        IndexSettings s2 = IndexSettingsModule.newIndexSettings("myindex", Settings.builder(), +                .put(indexSettings), +                .put(IndexMetaData.SETTING_DATA_PATH, "/tmp/foo").build());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/test/java/org/elasticsearch/env/EnvironmentTests.java, +        environment = newEnvironment(Settings.builder(), +                .putList(Environment.PATH_REPO_SETTING.getKey(), "/test/repos", "/another/repos", "/test/repos/../other").build());, +++ b/server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java, +                            try (ShardLock autoCloses = env.shardLock(new ShardId("foo", "fooUUID", shard), , +                                    scaledRandomIntBetween(0, 10))) {, +        IndexSettings s2 = IndexSettingsModule.newIndexSettings("myindex", Settings.builder(), +                .put(indexSettings), +                .put(IndexMetaData.SETTING_DATA_PATH, "/tmp/foo").build());, +++ b/server/src/test/java/org/elasticsearch/recovery/FullRollingRestartIT.java, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("3"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("5"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("4"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("3"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("2"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForYellowStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("1"));, +        prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "6"), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0"), +                .put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), TimeValue.timeValueMinutes(1))).get();, +           assertTrue("relocated from: " + recoveryState.getSourceNode() + " to: " +, +                   recoveryState.getTargetNode()+ "-- \nbefore: \n" + state,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/test/java/org/elasticsearch/env/EnvironmentTests.java, +        environment = newEnvironment(Settings.builder(), +                .putList(Environment.PATH_REPO_SETTING.getKey(), "/test/repos", "/another/repos", "/test/repos/../other").build());, +++ b/server/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java, +                            try (ShardLock autoCloses = env.shardLock(new ShardId("foo", "fooUUID", shard), , +                                    scaledRandomIntBetween(0, 10))) {, +        IndexSettings s2 = IndexSettingsModule.newIndexSettings("myindex", Settings.builder(), +                .put(indexSettings), +                .put(IndexMetaData.SETTING_DATA_PATH, "/tmp/foo").build());, +++ b/server/src/test/java/org/elasticsearch/recovery/FullRollingRestartIT.java, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("3"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("5"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("4"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("3"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForGreenStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("2"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout), +                .setWaitForYellowStatus().setWaitForNoRelocatingShards(true).setWaitForNodes("1"));, +        prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "6"), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0"), +                .put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), TimeValue.timeValueMinutes(1))).get();, +           assertTrue("relocated from: " + recoveryState.getSourceNode() + " to: " +, +                   recoveryState.getTargetNode()+ "-- \nbefore: \n" + state,, +++ b/server/src/test/java/org/elasticsearch/recovery/RecoveryWhileUnderLoadIT.java, +@TestLogging("_root:DEBUG,org.elasticsearch.index.shard:TRACE,org.elasticsearch.cluster.service:TRACE," +, +        "org.elasticsearch.index.seqno:TRACE,org.elasticsearch.indices.recovery:TRACE"), +        assertAcked(prepareCreate("test", 1, Settings.builder(), +                .put(SETTING_NUMBER_OF_SHARDS, numberOfShards), +                .put(SETTING_NUMBER_OF_REPLICAS, 1), +                .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC)));, +            assertNoTimeout(client().admin().cluster().prepareHealth(), +                    .setWaitForEvents(Priority.LANGUID).setTimeout("5m").setWaitForGreenStatus());, +        assertAcked(prepareCreate("test", 1, Settings.builder(), +                .put(SETTING_NUMBER_OF_SHARDS, numberOfShards), +                .put(SETTING_NUMBER_OF_REPLICAS, 1), +                .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC)));, +            assertNoTimeout(client().admin().cluster().prepareHealth(), +                    .setWaitForEvents(Priority.LANGUID).setTimeout("5m").setWaitForGreenStatus());, +        assertAcked(prepareCreate("test", 2, Settings.builder(), +                .put(SETTING_NUMBER_OF_SHARDS, numberOfShards).put(SETTING_NUMBER_OF_REPLICAS, 1), +                .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC)));, +            assertNoTimeout(client().admin().cluster().prepareHealth(), +                    .setWaitForEvents(Priority.LANGUID).setTimeout("5m"), +                    .setWaitForGreenStatus(), +                    .setWaitForNoRelocatingShards(true));, +            assertNoTimeout(client().admin().cluster().prepareHealth(), +                    .setWaitForEvents(Priority.LANGUID).setTimeout("5m"), +                    .setWaitForNoRelocatingShards(true));, +            assertNoTimeout(client().admin().cluster().prepareHealth(), +                    .setWaitForEvents(Priority.LANGUID).setTimeout("5m"), +                    .setWaitForNoRelocatingShards(true));, +            assertNoTimeout(client().admin().cluster().prepareHealth()]