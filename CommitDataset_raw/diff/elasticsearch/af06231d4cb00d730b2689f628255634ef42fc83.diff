[+++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                    closeChannels(Arrays.stream(channels).filter(Objects::nonNull).collect(Collectors.toList()), false, true);, +                closeChannels(Collections.singletonList(channel), false, false);, +                        closeChannels(entry.getValue(), true, true);, +                            closeChannels(Collections.singletonList(channel), false, false);, +                            closeChannels(Collections.singletonList(channel), false, false);, +     * @param closingTransport whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean closingTransport) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                    closeChannels(Arrays.stream(channels).filter(Objects::nonNull).collect(Collectors.toList()), false, true);, +                closeChannels(Collections.singletonList(channel), false, false);, +                        closeChannels(entry.getValue(), true, true);, +                            closeChannels(Collections.singletonList(channel), false, false);, +                            closeChannels(Collections.singletonList(channel), false, false);, +     * @param closingTransport whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean closingTransport) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/transport/TCPTransportTests.java, +                protected void closeChannels(List channel, boolean blocking, boolean closingTransport) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                    closeChannels(Arrays.stream(channels).filter(Objects::nonNull).collect(Collectors.toList()), false, true);, +                closeChannels(Collections.singletonList(channel), false, false);, +                        closeChannels(entry.getValue(), true, true);, +                            closeChannels(Collections.singletonList(channel), false, false);, +                            closeChannels(Collections.singletonList(channel), false, false);, +     * @param closingTransport whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean closingTransport) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/transport/TCPTransportTests.java, +                protected void closeChannels(List channel, boolean blocking, boolean closingTransport) throws IOException {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    protected void closeChannels(final List<Channel> channels, boolean blocking, boolean closingTransport) throws IOException {, +        if (closingTransport) {, +            for (Channel channel : channels) {, +                channel.config().setOption(ChannelOption.SO_LINGER, 0);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                    closeChannels(Arrays.stream(channels).filter(Objects::nonNull).collect(Collectors.toList()), false, true);, +                closeChannels(Collections.singletonList(channel), false, false);, +                        closeChannels(entry.getValue(), true, true);, +                            closeChannels(Collections.singletonList(channel), false, false);, +                            closeChannels(Collections.singletonList(channel), false, false);, +     * @param closingTransport whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean closingTransport) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/transport/TCPTransportTests.java, +                protected void closeChannels(List channel, boolean blocking, boolean closingTransport) throws IOException {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    protected void closeChannels(final List<Channel> channels, boolean blocking, boolean closingTransport) throws IOException {, +        if (closingTransport) {, +            for (Channel channel : channels) {, +                channel.config().setOption(ChannelOption.SO_LINGER, 0);, +            }, +        }, +++ b/test/framework/src/main/java/org/elasticsearch/transport/MockTcpTransport.java, +        socket.bind(address);, +    protected void closeChannels(List<MockChannel> channels, boolean blocking, boolean closingTransport) throws IOException {, +        if (closingTransport) {, +            for (MockChannel channel : channels) {, +                if (channel.activeChannel != null) {, +                    channel.activeChannel.setSoLinger(true, 0);, +                }, +            }, +        }, +        IOUtils.close(channels);, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                    closeChannels(Arrays.stream(channels).filter(Objects::nonNull).collect(Collectors.toList()), false, true);, +                closeChannels(Collections.singletonList(channel), false, false);, +                        closeChannels(entry.getValue(), true, true);, +                            closeChannels(Collections.singletonList(channel), false, false);, +                            closeChannels(Collections.singletonList(channel), false, false);, +     * @param closingTransport whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean closingTransport) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/transport/TCPTransportTests.java, +                protected void closeChannels(List channel, boolean blocking, boolean closingTransport) throws IOException {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    protected void closeChannels(final List<Channel> channels, boolean blocking, boolean closingTransport) throws IOException {, +        if (closingTransport) {, +            for (Channel channel : channels) {, +                channel.config().setOption(ChannelOption.SO_LINGER, 0);, +            }, +        }, +++ b/test/framework/src/main/java/org/elasticsearch/transport/MockTcpTransport.java, +        socket.bind(address);, +    protected void closeChannels(List<MockChannel> channels, boolean blocking, boolean closingTransport) throws IOException {, +        if (closingTransport) {, +            for (MockChannel channel : channels) {, +                if (channel.activeChannel != null) {, +                    channel.activeChannel.setSoLinger(true, 0);, +                }, +            }, +        }, +        IOUtils.close(channels);, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +import java.net.StandardSocketOptions;, +    protected void closeChannels(List<NioChannel> channels, boolean blocking, boolean closingTransport) throws IOException {, +        if (closingTransport) {, +            for (NioChannel channel : channels) {, +                channel.getRawChannel().setOption(StandardSocketOptions.SO_LINGER, 0);, +            }, +        }]