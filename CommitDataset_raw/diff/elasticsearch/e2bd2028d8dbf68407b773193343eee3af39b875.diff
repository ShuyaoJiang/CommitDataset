[+++ b/server/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +, +    public static final ByteSizeValue ZERO = new ByteSizeValue(0, ByteSizeUnit.BYTES);, +, +++ b/server/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +, +    public static final ByteSizeValue ZERO = new ByteSizeValue(0, ByteSizeUnit.BYTES);, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +            request.setMaxBatchSize(pattern.getMaxBatchSize());, +++ b/server/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +, +    public static final ByteSizeValue ZERO = new ByteSizeValue(0, ByteSizeUnit.BYTES);, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +            request.setMaxBatchSize(pattern.getMaxBatchSize());, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +        private ByteSizeValue maxBatchSize = TransportResumeFollowAction.DEFAULT_MAX_BATCH_SIZE;, +        public ByteSizeValue getMaxBatchSize() {, +            return maxBatchSize;, +        public void setMaxBatchSize(ByteSizeValue maxBatchSize) {, +            this.maxBatchSize = maxBatchSize;, +            if (maxBatchSize.compareTo(ByteSizeValue.ZERO) <= 0) {, +                validationException =, +                        addValidationError("maxBatchSize [" + maxBatchSize.getStringRep() + "] must be larger than 0", validationException);, +            maxBatchSize = new ByteSizeValue(in);, +            maxBatchSize.writeTo(out);, +                    maxBatchSize.equals(request.maxBatchSize);, +            return Objects.hash(fromSeqNo, maxOperationCount, shardId, expectedHistoryUUID, pollTimeout, maxBatchSize);, +                    ", maxBatchSize=" + maxBatchSize.getStringRep() +, +                    request.getMaxBatchSize());, +     * Returns at most the specified maximum number of operations from the specified from sequence number. This method will never return, +     * operations above the specified global checkpoint., +     * Also if the sum of collected operations size is above the specified maximum batch size then this method stops collecting more, +     * operations and returns what has been collected so far., +     *, +     * @param indexShard the shard, +     * @param globalCheckpoint the global checkpoint, +     * @param fromSeqNo the starting sequence number, +     * @param maxOperationCount the maximum number of operations, +     * @param expectedHistoryUUID the expected history UUID for the shard, +     * @param maxBatchSize the maximum batch size, +     * @return the operations, +     * @throws IOException if an I/O exception occurs reading the operations, +    static Translog.Operation[] getOperations(, +            final IndexShard indexShard,, +            final long globalCheckpoint,, +            final long fromSeqNo,, +            final int maxOperationCount,, +            final String expectedHistoryUUID,, +            final ByteSizeValue maxBatchSize) throws IOException {, +                if (seenBytes > maxBatchSize.getBytes()) {, +++ b/server/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +, +    public static final ByteSizeValue ZERO = new ByteSizeValue(0, ByteSizeUnit.BYTES);, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +            request.setMaxBatchSize(pattern.getMaxBatchSize());, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +        private ByteSizeValue maxBatchSize = TransportResumeFollowAction.DEFAULT_MAX_BATCH_SIZE;, +        public ByteSizeValue getMaxBatchSize() {, +            return maxBatchSize;, +        public void setMaxBatchSize(ByteSizeValue maxBatchSize) {, +            this.maxBatchSize = maxBatchSize;, +            if (maxBatchSize.compareTo(ByteSizeValue.ZERO) <= 0) {, +                validationException =, +                        addValidationError("maxBatchSize [" + maxBatchSize.getStringRep() + "] must be larger than 0", validationException);, +            maxBatchSize = new ByteSizeValue(in);, +            maxBatchSize.writeTo(out);, +                    maxBatchSize.equals(request.maxBatchSize);, +            return Objects.hash(fromSeqNo, maxOperationCount, shardId, expectedHistoryUUID, pollTimeout, maxBatchSize);, +                    ", maxBatchSize=" + maxBatchSize.getStringRep() +, +                    request.getMaxBatchSize());, +     * Returns at most the specified maximum number of operations from the specified from sequence number. This method will never return, +     * operations above the specified global checkpoint., +     * Also if the sum of collected operations size is above the specified maximum batch size then this method stops collecting more, +     * operations and returns what has been collected so far., +     *, +     * @param indexShard the shard, +     * @param globalCheckpoint the global checkpoint, +     * @param fromSeqNo the starting sequence number, +     * @param maxOperationCount the maximum number of operations, +     * @param expectedHistoryUUID the expected history UUID for the shard, +     * @param maxBatchSize the maximum batch size, +     * @return the operations, +     * @throws IOException if an I/O exception occurs reading the operations, +    static Translog.Operation[] getOperations(, +            final IndexShard indexShard,, +            final long globalCheckpoint,, +            final long fromSeqNo,, +            final int maxOperationCount,, +            final String expectedHistoryUUID,, +            final ByteSizeValue maxBatchSize) throws IOException {, +                if (seenBytes > maxBatchSize.getBytes()) {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +                if (sumEstimatedSize > params.getMaxBatchSize().getBytes()) {, +++ b/server/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +]