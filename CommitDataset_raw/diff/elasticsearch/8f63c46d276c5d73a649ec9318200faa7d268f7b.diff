[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +    public enum SubAggCollectionMode implements Writeable<SubAggCollectionMode> {, +, +        @Override, +        public SubAggCollectionMode readFrom(StreamInput in) throws IOException {, +            int ordinal = in.readVInt();, +            if (ordinal < 0 || ordinal >= values().length) {, +                throw new IOException("Unknown SubAggCollectionMode ordinal [" + ordinal + "]");, +            }, +            return values()[ordinal];, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeVInt(ordinal());, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +    public enum SubAggCollectionMode implements Writeable<SubAggCollectionMode> {, +, +        @Override, +        public SubAggCollectionMode readFrom(StreamInput in) throws IOException {, +            int ordinal = in.readVInt();, +            if (ordinal < 0 || ordinal >= values().length) {, +                throw new IOException("Unknown SubAggCollectionMode ordinal [" + ordinal + "]");, +            }, +            return values()[ordinal];, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeVInt(ordinal());, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantLongTerms.java, +        SignificanceHeuristicStreams.writeTo(significanceHeuristic, out);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +    public enum SubAggCollectionMode implements Writeable<SubAggCollectionMode> {, +, +        @Override, +        public SubAggCollectionMode readFrom(StreamInput in) throws IOException {, +            int ordinal = in.readVInt();, +            if (ordinal < 0 || ordinal >= values().length) {, +                throw new IOException("Unknown SubAggCollectionMode ordinal [" + ordinal + "]");, +            }, +            return values()[ordinal];, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeVInt(ordinal());, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantLongTerms.java, +        SignificanceHeuristicStreams.writeTo(significanceHeuristic, out);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantStringTerms.java, +        SignificanceHeuristicStreams.writeTo(significanceHeuristic, out);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +    public enum SubAggCollectionMode implements Writeable<SubAggCollectionMode> {, +, +        @Override, +        public SubAggCollectionMode readFrom(StreamInput in) throws IOException {, +            int ordinal = in.readVInt();, +            if (ordinal < 0 || ordinal >= values().length) {, +                throw new IOException("Unknown SubAggCollectionMode ordinal [" + ordinal + "]");, +            }, +            return values()[ordinal];, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeVInt(ordinal());, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantLongTerms.java, +        SignificanceHeuristicStreams.writeTo(significanceHeuristic, out);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantStringTerms.java, +        SignificanceHeuristicStreams.writeTo(significanceHeuristic, out);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.search.aggregations.bucket.BucketUtils;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.JLHScore;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicStreams;, +import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregator.BucketCountThresholds;, +import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +import java.util.Objects;, +    static final ParseField BACKGROUND_FILTER = new ParseField("background_filter");]