[+++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.security.MessageDigest;, +            return downloadZipAndChecksum(terminal, url, tmpDir, false);, +            return downloadZipAndChecksum(terminal, mavenUrl, tmpDir, true);, +    // pkg private for tests, +    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {, +    /** Downloads a zip from the url, as well as a SHA512 (or SHA1) checksum, and checks the checksum. */, +    private Path downloadZipAndChecksum(Terminal terminal, String urlString, Path tmpDir, boolean allowSha1) throws Exception {, +        String checksumUrlString = urlString + ".sha512";, +        URL checksumUrl = openUrl(checksumUrlString);, +        String digestAlgo = "SHA-512";, +        if (checksumUrl == null && allowSha1) {, +            // fallback to sha1, until 7.0, but with warning, +            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +, +                             "future release. Please update the plugin to use a sha512 checksum.");, +            checksumUrlString = urlString + ".sha1";, +            checksumUrl = openUrl(checksumUrlString);, +            digestAlgo = "SHA-1";, +        }, +        if (checksumUrl == null) {, +            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString);, +        }, +        String gotChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipbytes));, +                digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + gotChecksum);, +    /**, +     * Creates a URL and opens a connection., +     *, +     * If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned., +     */, +    // pkg private for tests, +    URL openUrl(String urlString) throws Exception {, +        URL checksumUrl = new URL(urlString);, +        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection();, +        if (connection.getResponseCode() == 404) {, +            return null;, +        }, +        return checksumUrl;, +    }, +, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.security.MessageDigest;, +            return downloadZipAndChecksum(terminal, url, tmpDir, false);, +            return downloadZipAndChecksum(terminal, mavenUrl, tmpDir, true);, +    // pkg private for tests, +    Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {, +    /** Downloads a zip from the url, as well as a SHA512 (or SHA1) checksum, and checks the checksum. */, +    private Path downloadZipAndChecksum(Terminal terminal, String urlString, Path tmpDir, boolean allowSha1) throws Exception {, +        String checksumUrlString = urlString + ".sha512";, +        URL checksumUrl = openUrl(checksumUrlString);, +        String digestAlgo = "SHA-512";, +        if (checksumUrl == null && allowSha1) {, +            // fallback to sha1, until 7.0, but with warning, +            terminal.println("Warning: sha512 not found, falling back to sha1. This behavior is deprecated and will be removed in a " +, +                             "future release. Please update the plugin to use a sha512 checksum.");, +            checksumUrlString = urlString + ".sha1";, +            checksumUrl = openUrl(checksumUrlString);, +            digestAlgo = "SHA-1";, +        }, +        if (checksumUrl == null) {, +            throw new UserException(ExitCodes.IO_ERROR, "Plugin checksum missing: " + checksumUrlString);, +        }, +        String gotChecksum = MessageDigests.toHexString(MessageDigest.getInstance(digestAlgo).digest(zipbytes));, +                digestAlgo + " mismatch, expected " + expectedChecksum + " but got " + gotChecksum);, +    /**, +     * Creates a URL and opens a connection., +     *, +     * If the URL returns a 404, {@code null} is returned, otherwise the open URL opject is returned., +     */, +    // pkg private for tests, +    URL openUrl(String urlString) throws Exception {, +        URL checksumUrl = new URL(urlString);, +        HttpURLConnection connection = (HttpURLConnection)checksumUrl.openConnection();, +        if (connection.getResponseCode() == 404) {, +            return null;, +        }, +        return checksumUrl;, +    }, +, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.common.hash.MessageDigests;, +import java.security.MessageDigest;, +    public MockTerminal assertInstallPluginFromUrl(String pluginId, String name, String url, String stagingHash,, +                                                   String shaExtension, Function<byte[], String> shaCalculator) throws Exception {, +            Path downloadZip(Terminal terminal, String urlString, Path tmpDir) throws IOException {, +            URL openUrl(String urlString) throws Exception {, +                String expectedUrl = url + shaExtension;, +                if (expectedUrl.equals(urlString)) {, +                    // calc sha an return file URL to it, +                    Path shaFile = temp.apply("shas").resolve("downloaded.zip" + shaExtension);, +                    byte[] zipbytes = Files.readAllBytes(pluginZip);, +                    String checksum = shaCalculator.apply(zipbytes);, +                    Files.write(shaFile, checksum.getBytes(StandardCharsets.UTF_8));, +                    return shaFile.toUri().toURL();, +                }, +                return null;, +            }, +            @Override, +        MockTerminal terminal = installPlugin(pluginId, env.v1(), command);, +        return terminal;]