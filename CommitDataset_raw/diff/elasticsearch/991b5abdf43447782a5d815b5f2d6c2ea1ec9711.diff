[+++ b/src/main/java/org/elasticsearch/index/cache/filter/support/CacheKeyFilter.java, +    Object cacheKey();, +++ b/src/main/java/org/elasticsearch/index/cache/filter/support/CacheKeyFilter.java, +    Object cacheKey();, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +            return super.termsFilter(values, context);, +++ b/src/main/java/org/elasticsearch/index/cache/filter/support/CacheKeyFilter.java, +    Object cacheKey();, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +            return super.termsFilter(values, context);, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +, +            Filter filter = termsFilterCache.termsFilter(termsLookup, cacheKey);, +, +                filter = parseContext.cacheFilter(filter, cacheKey);, +++ b/src/main/java/org/elasticsearch/index/cache/filter/support/CacheKeyFilter.java, +    Object cacheKey();, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +            return super.termsFilter(values, context);, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +, +            Filter filter = termsFilterCache.termsFilter(termsLookup, cacheKey);, +, +                filter = parseContext.cacheFilter(filter, cacheKey);, +++ b/src/main/java/org/elasticsearch/indices/cache/filter/terms/IndicesTermsFilterCache.java, +    private final Cache<BytesRef, TermsFilterValue> cache;, +        CacheBuilder<BytesRef, TermsFilterValue> builder = CacheBuilder.newBuilder(), +    public Filter termsFilter(final TermsLookup lookup, @Nullable CacheKeyFilter.Key cacheKey) throws RuntimeException {, +        BytesRef key;, +        if (cacheKey != null) {, +            key = new BytesRef(cacheKey.bytes());, +        } else {, +            key = new BytesRef(lookup.toString());, +        }, +            return cache.get(key, new Callable<TermsFilterValue>() {, +            cache.invalidate(new BytesRef(key));, +    static class TermsFilterValueWeigher implements Weigher<BytesRef, TermsFilterValue> {, +        public int weigh(BytesRef key, TermsFilterValue value) {, +            return (int) (key.length + value.sizeInBytes);]