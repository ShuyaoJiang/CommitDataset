[+++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +import org.elasticsearch.common.io.Streams;, +    /**, +     * Directly writes the source to the output builder, +     */, +    public static void writeDirect(BytesReference source, XContentBuilder rawBuilder, ToXContent.Params params) throws IOException {, +        Compressor compressor = CompressorFactory.compressor(source);, +        if (compressor != null) {, +            CompressedStreamInput compressedStreamInput = compressor.streamInput(source.streamInput());, +            XContentType contentType = XContentFactory.xContentType(compressedStreamInput);, +            compressedStreamInput.resetToBufferStart();, +            if (contentType == rawBuilder.contentType()) {, +                Streams.copy(compressedStreamInput, rawBuilder.stream());, +            } else {, +                XContentParser parser = XContentFactory.xContent(contentType).createParser(compressedStreamInput);, +                try {, +                    parser.nextToken();, +                    rawBuilder.copyCurrentStructure(parser);, +                } finally {, +                    parser.close();, +                }, +            }, +        } else {, +            XContentType contentType = XContentFactory.xContentType(source);, +            if (contentType == rawBuilder.contentType()) {, +                source.writeTo(rawBuilder.stream());, +            } else {, +                XContentParser parser = XContentFactory.xContent(contentType).createParser(source);, +                try {, +                    parser.nextToken();, +                    rawBuilder.copyCurrentStructure(parser);, +                } finally {, +                    parser.close();, +                }, +            }, +        }, +    }, +, +    /**, +     * Writes a "raw" (bytes) field, handling cases where the bytes are compressed, and tries to optimize writing using, +     * {@link XContentBuilder#rawField(String, org.elasticsearch.common.bytes.BytesReference)}., +     */, +    public static void writeRawField(String field, BytesReference source, XContentBuilder builder, ToXContent.Params params) throws IOException {, +        Compressor compressor = CompressorFactory.compressor(source);, +        if (compressor != null) {, +            CompressedStreamInput compressedStreamInput = compressor.streamInput(source.streamInput());, +            XContentType contentType = XContentFactory.xContentType(compressedStreamInput);, +            compressedStreamInput.resetToBufferStart();, +            if (contentType == builder.contentType()) {, +                builder.rawField(field, compressedStreamInput);, +            } else {, +                XContentParser parser = XContentFactory.xContent(contentType).createParser(compressedStreamInput);, +                try {, +                    parser.nextToken();, +                    builder.field(field);, +                    builder.copyCurrentStructure(parser);, +                } finally {, +                    parser.close();, +                }, +            }, +        } else {, +            XContentType contentType = XContentFactory.xContentType(source);, +            if (contentType == builder.contentType()) {, +                builder.rawField(field, source);, +            } else {, +                XContentParser parser = XContentFactory.xContent(contentType).createParser(source);, +                try {, +                    parser.nextToken();, +                    builder.field(field);, +                    builder.copyCurrentStructure(parser);, +                } finally {, +                    parser.close();, +                }, +            }, +        }, +    }, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +import org.elasticsearch.common.io.Streams;, +    /**, +     * Directly writes the source to the output builder, +     */, +    public static void writeDirect(BytesReference source, XContentBuilder rawBuilder, ToXContent.Params params) throws IOException {, +        Compressor compressor = CompressorFactory.compressor(source);, +        if (compressor != null) {, +            CompressedStreamInput compressedStreamInput = compressor.streamInput(source.streamInput());, +            XContentType contentType = XContentFactory.xContentType(compressedStreamInput);, +            compressedStreamInput.resetToBufferStart();, +            if (contentType == rawBuilder.contentType()) {, +                Streams.copy(compressedStreamInput, rawBuilder.stream());, +            } else {, +                XContentParser parser = XContentFactory.xContent(contentType).createParser(compressedStreamInput);, +                try {, +                    parser.nextToken();, +                    rawBuilder.copyCurrentStructure(parser);, +                } finally {, +                    parser.close();, +                }, +            }, +        } else {, +            XContentType contentType = XContentFactory.xContentType(source);]