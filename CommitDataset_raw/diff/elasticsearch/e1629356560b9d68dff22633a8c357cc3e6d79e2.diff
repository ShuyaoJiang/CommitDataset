[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                        && Version.indexCreated(context.indexSettings()).before(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                        && Version.indexCreated(context.indexSettings()).before(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null.");, +        XContentParser.Token token = parser.nextToken();, +        if (token != XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + NAME + "] query malformed, no field");, +        }, +        String fieldName = parser.currentName();, +        token = parser.nextToken();, +        if (token == XContentParser.Token.START_OBJECT) {, +            parser.nextToken();, +            // move to the next token, +            token = parser.nextToken();, +            if (token != XContentParser.Token.END_OBJECT) {, +                throw new ParsingException(parser.getTokenLocation(),, +                        "[common] query parsed in simplified form, with direct field name, but included more options than just " +, +                                "the field name, possibly use its 'options' form, with 'query' element?");, +        if (text == null) {, +            throw new ParsingException(parser.getTokenLocation(), "No text specified for text query");, +        }, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                        && Version.indexCreated(context.indexSettings()).before(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null.");, +        XContentParser.Token token = parser.nextToken();, +        if (token != XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + NAME + "] query malformed, no field");, +        }, +        String fieldName = parser.currentName();, +        token = parser.nextToken();, +        if (token == XContentParser.Token.START_OBJECT) {, +            parser.nextToken();, +            // move to the next token, +            token = parser.nextToken();, +            if (token != XContentParser.Token.END_OBJECT) {, +                throw new ParsingException(parser.getTokenLocation(),, +                        "[common] query parsed in simplified form, with direct field name, but included more options than just " +, +                                "the field name, possibly use its 'options' form, with 'query' element?");, +        if (text == null) {, +            throw new ParsingException(parser.getTokenLocation(), "No text specified for text query");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +            throw new IllegalArgumentException("field name cannot be null or empty.");, +, +        XContentParser.Token token = parser.nextToken();, +        if (token != XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(), "[fuzzy] query malformed, no field");, +        }, +, +        String fieldName = parser.currentName();, +, +, +, +        token = parser.nextToken();, +        if (token == XContentParser.Token.START_OBJECT) {, +                        throw new ParsingException(parser.getTokenLocation(), "[fuzzy] query does not support [" + currentFieldName + "]");, +            parser.nextToken();, +            // move to the next token, +            parser.nextToken();, +, +        if (value == null) {, +            throw new ParsingException(parser.getTokenLocation(), "no value specified for fuzzy query");, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                        && Version.indexCreated(context.indexSettings()).before(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null.");, +        XContentParser.Token token = parser.nextToken();, +        if (token != XContentParser.Token.FIELD_NAME) {]