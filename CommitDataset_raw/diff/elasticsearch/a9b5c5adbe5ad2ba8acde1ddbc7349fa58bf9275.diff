[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without parameters, +     * and request body., +    public Response performRequest(String method, String endpoint, Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without request body., +    public Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, Header...)}, +     * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}, +     * will be used to consume the response body., +                                   HttpEntity entity, Header... headers) throws IOException {, +                                   Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead, +     * the provided {@link ResponseListener} will be notified upon completion or failure. Shortcut to, +     * {@link #performRequest(String, String, Map, HttpEntity, ResponseListener, Header...)} but without parameters and  request body., +     * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead, +     * the provided {@link ResponseListener} will be notified upon completion or failure. Shortcut to, +     * {@link #performRequest(String, String, Map, HttpEntity, ResponseListener, Header...)} but without request body., +     * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead, +     * the provided {@link ResponseListener} will be notified upon completion or failure., +     * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}, +     * will be used to consume the response body., +     * and the provided {@link ResponseListener} gets notified upon request completion or failure., +        Response get() throws IOException {, +            try {, +            } catch (InterruptedException e) {, +                throw new RuntimeException("thread waiting for the response was interrupted", e);, +            }, +            //try and leave the exception untouched as much as possible but we don't want to just add throws Exception clause everywhere, +            if (exception instanceof IOException) {, +                throw (IOException) exception;, +            }, +            if (exception instanceof  RuntimeException){, +                throw (RuntimeException) exception;, +            }, +            throw new IOException("error while performing request", exception);, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without parameters, +     * and request body., +    public Response performRequest(String method, String endpoint, Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without request body., +    public Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, Header...)}, +     * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}, +     * will be used to consume the response body., +                                   HttpEntity entity, Header... headers) throws IOException {, +                                   Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead, +     * the provided {@link ResponseListener} will be notified upon completion or failure. Shortcut to, +     * {@link #performRequest(String, String, Map, HttpEntity, ResponseListener, Header...)} but without parameters and  request body., +     * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead, +     * the provided {@link ResponseListener} will be notified upon completion or failure. Shortcut to, +     * {@link #performRequest(String, String, Map, HttpEntity, ResponseListener, Header...)} but without request body., +     * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead, +     * the provided {@link ResponseListener} will be notified upon completion or failure., +     * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}, +     * will be used to consume the response body., +     * and the provided {@link ResponseListener} gets notified upon request completion or failure., +        Response get() throws IOException {, +            try {, +            } catch (InterruptedException e) {, +                throw new RuntimeException("thread waiting for the response was interrupted", e);, +            }, +            //try and leave the exception untouched as much as possible but we don't want to just add throws Exception clause everywhere, +            if (exception instanceof IOException) {, +                throw (IOException) exception;, +            }, +            if (exception instanceof  RuntimeException){, +                throw (RuntimeException) exception;, +            }, +            throw new IOException("error while performing request", exception);, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientIntegTests.java, +    public void testHeaders() throws IOException {, +    public void testDeleteWithBody() throws IOException {, +    public void testGetWithBody() throws IOException {, +    private void bodyTest(String method) throws IOException {, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without parameters, +     * and request body., +    public Response performRequest(String method, String endpoint, Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without request body., +    public Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, Header...)}, +     * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}, +     * will be used to consume the response body., +                                   HttpEntity entity, Header... headers) throws IOException {, +                                   Header... headers) throws IOException {, +     * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead, +     * the provided {@link ResponseListener} will be notified upon completion or failure. Shortcut to, +     * {@link #performRequest(String, String, Map, HttpEntity, ResponseListener, Header...)} but without parameters and  request body., +     * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead, +     * the provided {@link ResponseListener} will be notified upon completion or failure. Shortcut to]