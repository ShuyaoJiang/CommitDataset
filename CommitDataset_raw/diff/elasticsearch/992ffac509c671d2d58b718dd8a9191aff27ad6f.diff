[+++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, + * {@link org.apache.lucene.search.similarities.ClassicSimilarity}, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, + * {@link org.apache.lucene.search.similarities.ClassicSimilarity}, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFilter.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        this.similarity = new ClassicSimilarity();, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, + * {@link org.apache.lucene.search.similarities.ClassicSimilarity}, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFilter.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        this.similarity = new ClassicSimilarity();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        XMoreLikeThis mlt = new XMoreLikeThis(reader, similarity == null ? new ClassicSimilarity() : similarity);, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, + * {@link org.apache.lucene.search.similarities.ClassicSimilarity}, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFilter.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        this.similarity = new ClassicSimilarity();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        XMoreLikeThis mlt = new XMoreLikeThis(reader, similarity == null ? new ClassicSimilarity() : similarity);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +    private TFIDFSimilarity similarity;// = new ClassicSimilarity();, +        this(ir, new ClassicSimilarity());, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, + * {@link org.apache.lucene.search.similarities.ClassicSimilarity}, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFilter.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        this.similarity = new ClassicSimilarity();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        XMoreLikeThis mlt = new XMoreLikeThis(reader, similarity == null ? new ClassicSimilarity() : similarity);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +    private TFIDFSimilarity similarity;// = new ClassicSimilarity();, +        this(ir, new ClassicSimilarity());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +import org.elasticsearch.index.similarity.SimilarityProvider;, +import org.elasticsearch.index.similarity.SimilarityService;, +                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString());, +                builder.similarity(similarityProvider);, +                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString());, +                builder.similarity(similarityProvider);, +    private static SimilarityProvider resolveSimilarity(Mapper.TypeParser.ParserContext parserContext, String name, String value) {, +        if (parserContext.indexVersionCreated().before(Version.V_3_0_0) && "default".equals(value)) {, +            // "default" similarity has been renamed into "classic" in 3.x., +            value = SimilarityService.DEFAULT_SIMILARITY;, +        }, +        SimilarityProvider similarityProvider = parserContext.getSimilarity(value);, +        if (similarityProvider == null) {, +            throw new MapperParsingException("Unknown Similarity type [" + value + "] for [" + name + "]");, +        }, +        return similarityProvider;, +    }, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, + * {@link org.apache.lucene.search.similarities.ClassicSimilarity}, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFilter.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        this.similarity = new ClassicSimilarity();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +        XMoreLikeThis mlt = new XMoreLikeThis(reader, similarity == null ? new ClassicSimilarity() : similarity);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java, +import org.apache.lucene.search.similarities.ClassicSimilarity;, +    private TFIDFSimilarity similarity;// = new ClassicSimilarity();, +        this(ir, new ClassicSimilarity());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +import org.elasticsearch.index.similarity.SimilarityProvider;, +import org.elasticsearch.index.similarity.SimilarityService;, +                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString());, +                builder.similarity(similarityProvider);, +                SimilarityProvider similarityProvider = resolveSimilarity(parserContext, name, propNode.toString());, +                builder.similarity(similarityProvider);, +    private static SimilarityProvider resolveSimilarity(Mapper.TypeParser.ParserContext parserContext, String name, String value) {, +        if (parserContext.indexVersionCreated().before(Version.V_3_0_0) && "default".equals(value)) {, +            // "default" similarity has been renamed into "classic" in 3.x., +            value = SimilarityService.DEFAULT_SIMILARITY;, +        }, +        SimilarityProvider similarityProvider = parserContext.getSimilarity(value);, +        if (similarityProvider == null) {, +            throw new MapperParsingException("Unknown Similarity type [" + value + "] for [" + name + "]");, +        }, +        return similarityProvider;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/similarity/ClassicSimilarityProvider.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,]