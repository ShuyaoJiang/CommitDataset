[+++ b/marvel/src/main/java/org/elasticsearch/marvel/MarvelPlugin.java, +        module.registerClusterDynamicSetting(HttpESExporter.SETTINGS_INDEX_TIME_FORMAT, Validator.EMPTY);, +++ b/marvel/src/main/java/org/elasticsearch/marvel/MarvelPlugin.java, +        module.registerClusterDynamicSetting(HttpESExporter.SETTINGS_INDEX_TIME_FORMAT, Validator.EMPTY);, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/HttpESExporter.java, +import org.elasticsearch.marvel.agent.settings.MarvelSettings;, +    public static final String DEFAULT_INDEX_TIME_FORMAT = "YYYY.MM.dd";, +, +    volatile DateTimeFormatter indexTimeFormatter;, +        String indexTimeFormat = settings.get(SETTINGS_INDEX_TIME_FORMAT, DEFAULT_INDEX_TIME_FORMAT);, +        try {, +            logger.debug("checking that index time format [{}] is correct", indexTimeFormat);, +        } catch (IllegalArgumentException e) {, +            throw new IllegalArgumentException("Invalid marvel index time format [" + indexTimeFormat + "] configured in setting [" + SETTINGS_INDEX_TIME_FORMAT + "]", e);, +        }, +        bulkTimeout = settings.getAsTime(SETTINGS_BULK_TIMEOUT, null);, +                AgentUtils.santizeUrlPwds(Strings.arrayToCommaDelimitedString(hosts)), MarvelSettings.MARVEL_INDICES_PREFIX, indexTimeFormat);, +    String getIndexName() {, +        return MarvelSettings.MARVEL_INDICES_PREFIX + indexTimeFormatter.print(System.currentTimeMillis());, +, +        String newIndexTimeFormat = settings.get(SETTINGS_INDEX_TIME_FORMAT, null);, +        if (newIndexTimeFormat != null) {, +            try {, +                indexTimeFormatter = DateTimeFormat.forPattern(newIndexTimeFormat).withZoneUTC();, +            } catch (IllegalArgumentException e) {, +                logger.error("Unable to update marvel index time format: format [" + newIndexTimeFormat + "] is invalid", e);, +            }, +        }, +++ b/marvel/src/main/java/org/elasticsearch/marvel/MarvelPlugin.java, +        module.registerClusterDynamicSetting(HttpESExporter.SETTINGS_INDEX_TIME_FORMAT, Validator.EMPTY);, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/HttpESExporter.java, +import org.elasticsearch.marvel.agent.settings.MarvelSettings;, +    public static final String DEFAULT_INDEX_TIME_FORMAT = "YYYY.MM.dd";, +, +    volatile DateTimeFormatter indexTimeFormatter;, +        String indexTimeFormat = settings.get(SETTINGS_INDEX_TIME_FORMAT, DEFAULT_INDEX_TIME_FORMAT);, +        try {, +            logger.debug("checking that index time format [{}] is correct", indexTimeFormat);, +        } catch (IllegalArgumentException e) {, +            throw new IllegalArgumentException("Invalid marvel index time format [" + indexTimeFormat + "] configured in setting [" + SETTINGS_INDEX_TIME_FORMAT + "]", e);, +        }, +        bulkTimeout = settings.getAsTime(SETTINGS_BULK_TIMEOUT, null);, +                AgentUtils.santizeUrlPwds(Strings.arrayToCommaDelimitedString(hosts)), MarvelSettings.MARVEL_INDICES_PREFIX, indexTimeFormat);, +    String getIndexName() {, +        return MarvelSettings.MARVEL_INDICES_PREFIX + indexTimeFormatter.print(System.currentTimeMillis());, +, +        String newIndexTimeFormat = settings.get(SETTINGS_INDEX_TIME_FORMAT, null);, +        if (newIndexTimeFormat != null) {, +            try {, +                indexTimeFormatter = DateTimeFormat.forPattern(newIndexTimeFormat).withZoneUTC();, +            } catch (IllegalArgumentException e) {, +                logger.error("Unable to update marvel index time format: format [" + newIndexTimeFormat + "] is invalid", e);, +            }, +        }, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/settings/MarvelSettings.java, +    public static final String MARVEL_INDICES_PREFIX = ".marvel-es-";, +    public static final String MARVEL_DATA_INDEX_NAME = MARVEL_INDICES_PREFIX + "data";, +++ b/marvel/src/main/java/org/elasticsearch/marvel/MarvelPlugin.java, +        module.registerClusterDynamicSetting(HttpESExporter.SETTINGS_INDEX_TIME_FORMAT, Validator.EMPTY);, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/HttpESExporter.java, +import org.elasticsearch.marvel.agent.settings.MarvelSettings;, +    public static final String DEFAULT_INDEX_TIME_FORMAT = "YYYY.MM.dd";, +, +    volatile DateTimeFormatter indexTimeFormatter;, +        String indexTimeFormat = settings.get(SETTINGS_INDEX_TIME_FORMAT, DEFAULT_INDEX_TIME_FORMAT);, +        try {, +            logger.debug("checking that index time format [{}] is correct", indexTimeFormat);, +        } catch (IllegalArgumentException e) {, +            throw new IllegalArgumentException("Invalid marvel index time format [" + indexTimeFormat + "] configured in setting [" + SETTINGS_INDEX_TIME_FORMAT + "]", e);, +        }, +        bulkTimeout = settings.getAsTime(SETTINGS_BULK_TIMEOUT, null);, +                AgentUtils.santizeUrlPwds(Strings.arrayToCommaDelimitedString(hosts)), MarvelSettings.MARVEL_INDICES_PREFIX, indexTimeFormat);, +    String getIndexName() {, +        return MarvelSettings.MARVEL_INDICES_PREFIX + indexTimeFormatter.print(System.currentTimeMillis());, +, +        String newIndexTimeFormat = settings.get(SETTINGS_INDEX_TIME_FORMAT, null);, +        if (newIndexTimeFormat != null) {, +            try {, +                indexTimeFormatter = DateTimeFormat.forPattern(newIndexTimeFormat).withZoneUTC();, +            } catch (IllegalArgumentException e) {, +                logger.error("Unable to update marvel index time format: format [" + newIndexTimeFormat + "] is invalid", e);, +            }, +        }, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/settings/MarvelSettings.java, +    public static final String MARVEL_INDICES_PREFIX = ".marvel-es-";, +    public static final String MARVEL_DATA_INDEX_NAME = MARVEL_INDICES_PREFIX + "data";, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/exporter/HttpESExporterTests.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.action.admin.indices.recovery.RecoveryResponse;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.marvel.agent.collector.cluster.ClusterStateCollector;, +import org.elasticsearch.marvel.agent.collector.cluster.ClusterStateMarvelDoc;, +import org.elasticsearch.marvel.agent.collector.indices.IndexRecoveryCollector;, +import org.elasticsearch.marvel.agent.collector.indices.IndexRecoveryMarvelDoc;, +import org.joda.time.format.DateTimeFormat;, +, +        logger.info("verifying that template has been created");, +        assertMarvelTemplateExists();, +        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().putArray(HttpESExporter.SETTINGS_HOSTS, "test1")));, +        assertMarvelTemplateNotExists();]