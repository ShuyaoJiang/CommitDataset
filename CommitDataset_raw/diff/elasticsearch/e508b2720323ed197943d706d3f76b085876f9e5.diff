[+++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +        Query query = multiMatchQuery.parse(type, fieldNameWithBoosts, value, minimumShouldMatch);, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +        Query query = multiMatchQuery.parse(type, fieldNameWithBoosts, value, minimumShouldMatch);, +++ b/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +import org.elasticsearch.common.lucene.search.Queries;, +    private Query parseAndApply(Type type, String fieldName, Object value, String minimumShouldMatch) throws IOException {, +        Query query = parse(type, fieldName, value);, +        if (query instanceof BooleanQuery) {, +            Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch);, +        }, +        return query;, +    }, +, +    public Query parse(Type type, Map<String, Float> fieldNames, Object value, String minimumShouldMatch) throws IOException {, +            final Query query = parseAndApply(type, fieldBoost.getKey(), value, minimumShouldMatch);, +            if (boostValue != null) {, +            return query;, +                Query query = parseAndApply(type, fieldName, value, minimumShouldMatch);, +               , +                Query query = parseAndApply(type, fieldName, value, minimumShouldMatch);]