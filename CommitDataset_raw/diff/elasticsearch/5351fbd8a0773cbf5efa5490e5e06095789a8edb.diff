[+++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        , +        // check if the user is running as root, and bail, +        if (Natives.definitelyRunningAsRoot()) {, +            if (Boolean.parseBoolean(System.getProperty("es.insecure.allow.root"))) {, +                Loggers.getLogger(Bootstrap.class).warn("running as ROOT user. this is a bad idea!");, +            } else {, +                throw new RuntimeException("don't run elasticsearch as root.");, +            }, +        }, +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        , +        // check if the user is running as root, and bail, +        if (Natives.definitelyRunningAsRoot()) {, +            if (Boolean.parseBoolean(System.getProperty("es.insecure.allow.root"))) {, +                Loggers.getLogger(Bootstrap.class).warn("running as ROOT user. this is a bad idea!");, +            } else {, +                throw new RuntimeException("don't run elasticsearch as root.");, +            }, +        }, +++ b/src/main/java/org/elasticsearch/common/jna/CLibrary.java, +    public static native int geteuid();, +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        , +        // check if the user is running as root, and bail, +        if (Natives.definitelyRunningAsRoot()) {, +            if (Boolean.parseBoolean(System.getProperty("es.insecure.allow.root"))) {, +                Loggers.getLogger(Bootstrap.class).warn("running as ROOT user. this is a bad idea!");, +            } else {, +                throw new RuntimeException("don't run elasticsearch as root.");, +            }, +        }, +++ b/src/main/java/org/elasticsearch/common/jna/CLibrary.java, +    public static native int geteuid();, +++ b/src/main/java/org/elasticsearch/common/jna/Natives.java, +    , +    /** Returns true if user is root, false if not, or if we don't know */, +    public static boolean definitelyRunningAsRoot() {, +        if (Constants.WINDOWS) {, +            return false; // don't know, +        }, +        try {, +            return CLibrary.geteuid() == 0;, +        } catch (Throwable error) {, +            logger.warn("unable to determine euid", error);, +            return false; // don't know, +        }, +    }]