[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +    public static Set<?> parseStemExclusion(Settings settings, Set<?> defaultStemExclusion) {, +        String value = settings.get("stem_exclusion");, +        if (value != null) {, +            if ("_none_".equals(value)) {, +                return ImmutableSet.of();, +            } else {, +                return ImmutableSet.copyOf(Strings.commaDelimitedListToSet(value));, +            }, +        }, +        String[] stopWords = settings.getAsArray("stem_exclusion", null);, +        if (stopWords != null) {, +            return ImmutableSet.copyOf(Iterators.forArray(stopWords));, +        } else {, +            return defaultStemExclusion;, +        }, +    }, +, +     * @throws ElasticSearchIllegalArgumentException, +     *          If the word list cannot be found at either key., +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +    public static Set<?> parseStemExclusion(Settings settings, Set<?> defaultStemExclusion) {, +        String value = settings.get("stem_exclusion");, +        if (value != null) {, +            if ("_none_".equals(value)) {, +                return ImmutableSet.of();, +            } else {, +                return ImmutableSet.copyOf(Strings.commaDelimitedListToSet(value));, +            }, +        }, +        String[] stopWords = settings.getAsArray("stem_exclusion", null);, +        if (stopWords != null) {, +            return ImmutableSet.copyOf(Iterators.forArray(stopWords));, +        } else {, +            return defaultStemExclusion;, +        }, +    }, +, +     * @throws ElasticSearchIllegalArgumentException, +     *          If the word list cannot be found at either key., +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +            tokenFiltersBindings.processTokenFilter("stemmer", StemmerTokenFilterFactory.class);, +            analyzersBindings.processAnalyzer("armenian", ArmenianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("basque", BasqueAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("bulgarian", BulgarianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("catalan", CatalanAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("danish", DanishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("english", EnglishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("finnish", FinnishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("galician", GalicianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("hindi", HindiAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("hungarian", HungarianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("indonesian", IndonesianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("italian", ItalianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("norwegian", NorwegianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("portuguese", PortugueseAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("romanian", RomanianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("spanish", SpanishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("swedish", SwedishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("turkish", TurkishAnalyzerProvider.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +    public static Set<?> parseStemExclusion(Settings settings, Set<?> defaultStemExclusion) {, +        String value = settings.get("stem_exclusion");, +        if (value != null) {, +            if ("_none_".equals(value)) {, +                return ImmutableSet.of();, +            } else {, +                return ImmutableSet.copyOf(Strings.commaDelimitedListToSet(value));, +            }, +        }, +        String[] stopWords = settings.getAsArray("stem_exclusion", null);, +        if (stopWords != null) {, +            return ImmutableSet.copyOf(Iterators.forArray(stopWords));, +        } else {, +            return defaultStemExclusion;, +        }, +    }, +, +     * @throws ElasticSearchIllegalArgumentException, +     *          If the word list cannot be found at either key., +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +            tokenFiltersBindings.processTokenFilter("stemmer", StemmerTokenFilterFactory.class);, +            analyzersBindings.processAnalyzer("armenian", ArmenianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("basque", BasqueAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("bulgarian", BulgarianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("catalan", CatalanAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("danish", DanishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("english", EnglishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("finnish", FinnishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("galician", GalicianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("hindi", HindiAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("hungarian", HungarianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("indonesian", IndonesianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("italian", ItalianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("norwegian", NorwegianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("portuguese", PortugueseAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("romanian", RomanianAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("spanish", SpanishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("swedish", SwedishAnalyzerProvider.class);, +            analyzersBindings.processAnalyzer("turkish", TurkishAnalyzerProvider.class);]