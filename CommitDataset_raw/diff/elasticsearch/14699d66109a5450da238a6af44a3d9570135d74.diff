[+++ b/src/main/java/org/elasticsearch/shield/authz/indicesresolver/DefaultIndicesResolver.java, +                assert aliasActions.aliases().length > 0 : "aliases must not be empty within each single alias remove action";, +, +        //IndicesAliasesRequest doesn't support empty aliases (validation fails) but GetAliasesRequest does (in which case empty means _all), +        boolean matchAllAliases = aliases.length == 0;, +        if (matchAllAliases) {, +            finalAliases.addAll(authorizedAliases);, +        }, +, +                matchAllAliases = true;, +            Index index = matchAllAliases ? new Index(MetaData.ALL) : new Index(Arrays.toString(aliases));, +            throw new IndexMissingException(index);, +            Index index = MetaData.isAllIndices(originalIndices) ? new Index(MetaData.ALL) : new Index(Arrays.toString(originalIndices));, +            throw new IndexMissingException(index);, +++ b/src/main/java/org/elasticsearch/shield/authz/indicesresolver/DefaultIndicesResolver.java, +                assert aliasActions.aliases().length > 0 : "aliases must not be empty within each single alias remove action";, +, +        //IndicesAliasesRequest doesn't support empty aliases (validation fails) but GetAliasesRequest does (in which case empty means _all), +        boolean matchAllAliases = aliases.length == 0;, +        if (matchAllAliases) {, +            finalAliases.addAll(authorizedAliases);, +        }, +, +                matchAllAliases = true;, +            Index index = matchAllAliases ? new Index(MetaData.ALL) : new Index(Arrays.toString(aliases));, +            throw new IndexMissingException(index);, +            Index index = MetaData.isAllIndices(originalIndices) ? new Index(MetaData.ALL) : new Index(Arrays.toString(originalIndices));, +            throw new IndexMissingException(index);, +++ b/src/test/java/org/elasticsearch/shield/authz/IndexAliasesTests.java, +            client().admin().indices().prepareGetAliases().setIndices("test_1").setIndicesOptions(IndicesOptions.lenientExpandOpen()), +                    .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_only", new SecuredString("test123".toCharArray()))).get();, +            fail("get alias should have failed due to missing manage_aliases privileges");, +        } catch(IndexMissingException e) {, +            assertThat(e.getMessage(), containsString("[_all]"));, +        }, +, +        try {, +, +        try {, +            client().admin().indices().prepareGetAliases(), +                    .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_only", new SecuredString("test123".toCharArray()))).get();, +            fail("get alias should have failed due to missing manage_aliases privileges");, +        } catch(IndexMissingException e) {, +            assertThat(e.getMessage(), containsString("[_all]"));, +        }, +, +        try {, +            //fails: user doesn't have manage_aliases on alias_1, +            client().admin().indices().prepareAliases().removeAlias("test_1", new String[]{"_all", "alias_1"}), +                    .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_test_aliases_test", new SecuredString("test123".toCharArray()))).get();, +            fail("remove alias should have failed due to missing manage_aliases privileges on alias_1");, +        } catch(AuthorizationException e) {, +            assertThat(e.getMessage(), containsString("action [indices:admin/aliases] is unauthorized for user [create_test_aliases_test]"));, +        }, +        //ok: user has manage_aliases on test_*, empty aliases gets resolved to test_alias and empty indices gets resolved to  _all indices (thus test_1), +        assertAliases(client().admin().indices().prepareGetAliases().setIndices("test_1"), +                        .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_test_aliases_test", new SecuredString("test123".toCharArray()))),, +                "test_1", "test_alias");, +, +        //ok: user has manage_aliases on test_*, empty aliases gets resolved to test_alias and empty indices becomes test_1, +        assertAliases(client().admin().indices().prepareGetAliases(), +                        .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_test_aliases_test", new SecuredString("test123".toCharArray()))),, +                "test_1", "test_alias");, +, +        try {, +            //fails: user has manage_aliases on test_*, although _all aliases and empty indices can be resolved, the explicit non authorized alias (alias_1) causes the request to fail, +            client().admin().indices().prepareGetAliases().setAliases("_all", "alias_1"), +                    .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_test_aliases_test", new SecuredString("test123".toCharArray()))).get();, +            fail("get alias should have failed due to missing manage_aliases privileges on alias_1");, +        } catch(AuthorizationException e) {, +            assertThat(e.getMessage(), containsString("action [indices:admin/aliases/get] is unauthorized for user [create_test_aliases_test]"));, +        }, +, +, +        try {, +            //fails: no existing aliases to replace empty aliases, +            client().admin().indices().prepareGetAliases().setIndices("test_1"), +                    .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_test_aliases_alias", new SecuredString("test123".toCharArray()))).get();, +            fail("get alias should have failed due to missing manage_aliases privileges on test_1");, +        } catch(IndexMissingException e) {, +            assertThat(e.getMessage(), containsString("[_all]"));, +        }, +, +        try {, +            //fails: no existing aliases to replace empty aliases, +            client().admin().indices().prepareGetAliases(), +                    .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_test_aliases_alias", new SecuredString("test123".toCharArray()))).get();, +            fail("get alias should have failed due to missing manage_aliases privileges on test_1");, +        } catch(IndexMissingException e) {, +            assertThat(e.getMessage(), containsString("[_all]"));, +        }, +        assertAliases(client().admin().indices().prepareGetAliases().setIndices("test_1"), +                        .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_test_aliases_test_alias", new SecuredString("test123".toCharArray()))),, +                "test_1", "alias_1", "test_alias");, +, +        assertAliases(client().admin().indices().prepareGetAliases(), +                        .putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue("create_test_aliases_test_alias", new SecuredString("test123".toCharArray()))),, +                "test_1", "alias_1", "test_alias");, +, +++ b/src/main/java/org/elasticsearch/shield/authz/indicesresolver/DefaultIndicesResolver.java]