[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        bulkRequest.add(request.requiredContent(), defaultIndex, defaultType, defaultRouting, defaultFields,, +            null, defaultPipeline, null, true, request.getXContentType());, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        bulkRequest.add(request.requiredContent(), defaultIndex, defaultType, defaultRouting, defaultFields,, +            null, defaultPipeline, null, true, request.getXContentType());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                if (token != XContentParser.Token.START_OBJECT) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.START_OBJECT + " but found [" + token + "]");, +                }, +                if (token != XContentParser.Token.FIELD_NAME) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.FIELD_NAME + " but found [" + token + "]");, +                }, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        bulkRequest.add(request.requiredContent(), defaultIndex, defaultType, defaultRouting, defaultFields,, +            null, defaultPipeline, null, true, request.getXContentType());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                if (token != XContentParser.Token.START_OBJECT) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.START_OBJECT + " but found [" + token + "]");, +                }, +                if (token != XContentParser.Token.FIELD_NAME) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.FIELD_NAME + " but found [" + token + "]");, +                }, +++ b/core/src/main/java/org/elasticsearch/rest/RestRequest.java, +     * @return content of the request body or throw an exception if the body or content type is missing, +     */, +    public final BytesReference requiredContent() {, +        if (hasContent() == false) {, +            throw new ElasticsearchParseException("request body is required");, +        } else if (xContentType.get() == null) {, +            throw new IllegalStateException("unknown content type");, +        }, +        return content();, +    }, +, +    /**, +        BytesReference content = requiredContent(); // will throw exception if body or content type missing, +        return tuple.v1().xContent().createParser(xContentRegistry, tuple.v2());, +        if (hasContentOrSourceParam()) {, +     * Get the content of the request or the contents of the {@code source} param or throw an exception if both are missing., +     * Prefer {@link #contentOrSourceParamParser()} or {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} if you need a parser., +        if (hasContentOrSourceParam() == false) {, +            throw new ElasticsearchParseException("request body or source parameter is required");, +        } else if (hasContent()) {, +            return new Tuple<>(xContentType.get(), requiredContent());, +        if (source == null || typeParam == null) {, +            throw new IllegalStateException("source and source_content_type parameters are required");, +        }, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        bulkRequest.add(request.requiredContent(), defaultIndex, defaultType, defaultRouting, defaultFields,, +            null, defaultPipeline, null, true, request.getXContentType());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                if (token != XContentParser.Token.START_OBJECT) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.START_OBJECT + " but found [" + token + "]");, +                }, +                if (token != XContentParser.Token.FIELD_NAME) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.FIELD_NAME + " but found [" + token + "]");, +                }, +++ b/core/src/main/java/org/elasticsearch/rest/RestRequest.java, +     * @return content of the request body or throw an exception if the body or content type is missing, +     */, +    public final BytesReference requiredContent() {, +        if (hasContent() == false) {, +            throw new ElasticsearchParseException("request body is required");, +        } else if (xContentType.get() == null) {, +            throw new IllegalStateException("unknown content type");, +        }, +        return content();, +    }, +, +    /**, +        BytesReference content = requiredContent(); // will throw exception if body or content type missing, +        return tuple.v1().xContent().createParser(xContentRegistry, tuple.v2());, +        if (hasContentOrSourceParam()) {, +     * Get the content of the request or the contents of the {@code source} param or throw an exception if both are missing., +     * Prefer {@link #contentOrSourceParamParser()} or {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} if you need a parser., +        if (hasContentOrSourceParam() == false) {, +            throw new ElasticsearchParseException("request body or source parameter is required");, +        } else if (hasContent()) {, +            return new Tuple<>(xContentType.get(), requiredContent());, +        if (source == null || typeParam == null) {, +            throw new IllegalStateException("source and source_content_type parameters are required");, +        }, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestPutStoredScriptAction.java, +        BytesReference content = request.requiredContent();, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        bulkRequest.add(request.requiredContent(), defaultIndex, defaultType, defaultRouting, defaultFields,, +            null, defaultPipeline, null, true, request.getXContentType());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                if (token != XContentParser.Token.START_OBJECT) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.START_OBJECT + " but found [" + token + "]");, +                }, +                if (token != XContentParser.Token.FIELD_NAME) {]