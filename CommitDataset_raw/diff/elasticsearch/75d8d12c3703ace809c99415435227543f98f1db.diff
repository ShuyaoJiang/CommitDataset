[+++ b/shield/docs/public/configuring-clients-integrations/kibana.asciidoc, +elasticsearch.username: kibana4-server, +elasticsearch.password: password, +.. Specify the HTTPS protocol in the `elasticsearch.url` setting in the Kibana configuration file, `kibana.yml`:, +elasticsearch.url: "https://<your_elasticsearch_host>.com:9200", +.. If you are using your own CA to sign certificates for Elasticsearch, set the `elasticsearch.ssl.ca` setting in `kibana.yml` to specify the location of the PEM file. , +elasticsearch.ssl.ca: /path/to/your/cacert.pem, +. Configure Kibana 4 to encrypt communications between the browser and the Kibana server. To do this, configure the `server.ssl.key` and `server.ssl.cert` properties in `kibana.yml`:, +server.ssl.key: /path/to/your/server.key, +server.ssl.cert: /path/to/your/server.crt, +NOTE: Enabling browser encryption is required to prevent passing user credentials in the clear., +++ b/shield/docs/public/configuring-clients-integrations/kibana.asciidoc, +elasticsearch.username: kibana4-server, +elasticsearch.password: password, +.. Specify the HTTPS protocol in the `elasticsearch.url` setting in the Kibana configuration file, `kibana.yml`:, +elasticsearch.url: "https://<your_elasticsearch_host>.com:9200", +.. If you are using your own CA to sign certificates for Elasticsearch, set the `elasticsearch.ssl.ca` setting in `kibana.yml` to specify the location of the PEM file. , +elasticsearch.ssl.ca: /path/to/your/cacert.pem, +. Configure Kibana 4 to encrypt communications between the browser and the Kibana server. To do this, configure the `server.ssl.key` and `server.ssl.cert` properties in `kibana.yml`:, +server.ssl.key: /path/to/your/server.key, +server.ssl.cert: /path/to/your/server.crt, +NOTE: Enabling browser encryption is required to prevent passing user credentials in the clear., +++ b/shield/docs/public/securing-communications/setting-up-ssl.asciidoc, +. Create a node keystore and import your CA's certificate with https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html[Java Keytool]. This configures the node to trust certificates signed by the CA. For Elasticsearch, +to access the keystore, it must be located under the Elasticsearch configuration directory. For example, the following command creates a keystore for `node01` and and imports the CA certificate `cacert.pem`. , +cd CONFIG_DIR/shield, +cd CONFIG_DIR/shield, +shield.ssl.keystore.path:          /home/es/config/shield/node01.jks <1>, +<1> The full path to the node keystore file. This must be a location within the Elasticsearch, +configuration directory., +cd CONFIG_DIR/shield, +keytool -importcert -keystore truststore.jks -file cacert.pem  , +shield.ssl.truststore.path:          /home/es/config/shield/truststore.jks <1>, +<1> The full path to the truststore file. This must be a location within the , +Elasticsearch configuration directory., +++ b/shield/docs/public/configuring-clients-integrations/kibana.asciidoc, +elasticsearch.username: kibana4-server, +elasticsearch.password: password, +.. Specify the HTTPS protocol in the `elasticsearch.url` setting in the Kibana configuration file, `kibana.yml`:, +elasticsearch.url: "https://<your_elasticsearch_host>.com:9200", +.. If you are using your own CA to sign certificates for Elasticsearch, set the `elasticsearch.ssl.ca` setting in `kibana.yml` to specify the location of the PEM file. , +elasticsearch.ssl.ca: /path/to/your/cacert.pem, +. Configure Kibana 4 to encrypt communications between the browser and the Kibana server. To do this, configure the `server.ssl.key` and `server.ssl.cert` properties in `kibana.yml`:, +server.ssl.key: /path/to/your/server.key, +server.ssl.cert: /path/to/your/server.crt, +NOTE: Enabling browser encryption is required to prevent passing user credentials in the clear., +++ b/shield/docs/public/securing-communications/setting-up-ssl.asciidoc, +. Create a node keystore and import your CA's certificate with https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html[Java Keytool]. This configures the node to trust certificates signed by the CA. For Elasticsearch, +to access the keystore, it must be located under the Elasticsearch configuration directory. For example, the following command creates a keystore for `node01` and and imports the CA certificate `cacert.pem`. , +cd CONFIG_DIR/shield, +cd CONFIG_DIR/shield, +shield.ssl.keystore.path:          /home/es/config/shield/node01.jks <1>, +<1> The full path to the node keystore file. This must be a location within the Elasticsearch, +configuration directory., +cd CONFIG_DIR/shield, +keytool -importcert -keystore truststore.jks -file cacert.pem  , +shield.ssl.truststore.path:          /home/es/config/shield/truststore.jks <1>, +<1> The full path to the truststore file. This must be a location within the , +Elasticsearch configuration directory., +++ b/shield/docs/public/setting-up-certificate-authority.asciidoc, +need to create a `ca` directory and three subdirectories: `private`, `certs`, and `conf`., +. Create a CA configuration template and store it in `conf/caconfig.cnf`. You use the , +openssl req -new -x509 -extensions v3_ca -keyout private/cakey.pem -out certs/cacert.pem -days 1460  -config conf/caconfig.cnf, +openssl ca -in node01.csr -notext -out node01-signed.crt -config conf/caconfig.cnf -extensions v3_req]