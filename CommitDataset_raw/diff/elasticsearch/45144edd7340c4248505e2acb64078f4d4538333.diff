[+++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.plugins.ClusterPlugin;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.Map;, +    // pkg private for tests, +    final Collection<AllocationDecider> allocationDeciders;, +    public ClusterModule(Settings settings, ClusterService clusterService, List<ClusterPlugin> clusterPlugins) {, +        this.allocationDeciders = createAllocationDeciders(settings, clusterService.getClusterSettings(), clusterPlugins);, +    // TODO: this is public so allocation benchmark can access the default deciders...can we do that in another way?, +    /** Return a new {@link AllocationDecider} instance with builtin deciders as well as those from plugins. */, +    public static Collection<AllocationDecider> createAllocationDeciders(Settings settings, ClusterSettings clusterSettings,, +                                                                         List<ClusterPlugin> clusterPlugins) {, +        // collect deciders by class so that we can detect duplicates, +        Map<Class, AllocationDecider> deciders = new HashMap<>();, +        addAllocationDecider(deciders, new MaxRetryAllocationDecider(settings));, +        addAllocationDecider(deciders, new SameShardAllocationDecider(settings));, +        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new ReplicaAfterPrimaryActiveAllocationDecider(settings));, +        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new RebalanceOnlyWhenActiveAllocationDecider(settings));, +        addAllocationDecider(deciders, new ClusterRebalanceAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new ConcurrentRebalanceAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new EnableAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new NodeVersionAllocationDecider(settings));, +        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new SnapshotInProgressAllocationDecider(settings, clusterSettings));, +, +        clusterPlugins.stream(), +            .flatMap(p -> p.createAllocationDeciders(settings, clusterSettings).stream()), +            .forEach(d -> addAllocationDecider(deciders, d));, +, +        return deciders.values();, +    }, +, +    /** Add the given allocation decider to the given deciders collection, erroring if the class name is already used. */, +    private static void addAllocationDecider(Map<Class, AllocationDecider> deciders, AllocationDecider decider) {, +        if (deciders.put(decider.getClass(), decider) != null) {, +            throw new IllegalArgumentException("Cannot specify allocation decider [" + decider.getClass().getName() + "] twice");, +        }, +    }, +, +        bind(AllocationDeciders.class).toInstance(new AllocationDeciders(settings, allocationDeciders));, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.plugins.ClusterPlugin;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.Map;, +    // pkg private for tests, +    final Collection<AllocationDecider> allocationDeciders;, +    public ClusterModule(Settings settings, ClusterService clusterService, List<ClusterPlugin> clusterPlugins) {, +        this.allocationDeciders = createAllocationDeciders(settings, clusterService.getClusterSettings(), clusterPlugins);, +    // TODO: this is public so allocation benchmark can access the default deciders...can we do that in another way?, +    /** Return a new {@link AllocationDecider} instance with builtin deciders as well as those from plugins. */]