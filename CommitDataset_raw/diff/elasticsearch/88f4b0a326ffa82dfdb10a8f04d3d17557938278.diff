[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +        if (shouldRetry(params.getRemoteCluster(), e)) {, +            if (isStopped() == false) {, +                // Only retry is the shard follow task is not stopped., +            }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +        if (shouldRetry(params.getRemoteCluster(), e)) {, +            if (isStopped() == false) {, +                // Only retry is the shard follow task is not stopped., +            }, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskTests.java, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.nullValue;, +    public void testFatalExceptionNotSetWhenStoppingWhileFetchingOps() {, +        ShardFollowTaskParams params = new ShardFollowTaskParams();, +        params.maxReadRequestOperationCount = 64;, +        params.maxOutstandingReadRequests = 1;, +        params.maxOutstandingWriteRequests = 1;, +        ShardFollowNodeTask task = createShardFollowTask(params);, +        startTask(task, 63, -1);, +, +        readFailures.add(new ShardNotFoundException(new ShardId("leader_index", "", 0)));, +, +        mappingVersions.add(1L);, +        leaderGlobalCheckpoints.add(63L);, +        maxSeqNos.add(63L);, +        responseSizes.add(64);, +        simulateResponse.set(true);, +        beforeSendShardChangesRequest = status -> {, +            // Cancel just before attempting to fetch operations:, +            task.onCancelled();, +        };, +        task.coordinateReads();, +, +        assertThat(task.isStopped(), is(true));, +        ShardFollowNodeTaskStatus status = task.getStatus();, +        assertThat(status.getFatalException(), nullValue());, +        assertThat(status.failedReadRequests(), equalTo(1L));, +        assertThat(status.successfulReadRequests(), equalTo(0L));, +        assertThat(status.readExceptions().size(), equalTo(1));, +    }, +]