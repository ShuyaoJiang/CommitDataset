[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/user/PutUserRequestBuilder.java, +                throw validationException(error.toString());, +            }, +            if (request.passwordHash() != null) {, +                throw validationException("password_hash has already been set");, +    public PutUserRequestBuilder passwordHash(char[] passwordHash, Hasher configuredHasher) {, +        final Hasher resolvedHasher = Hasher.resolveFromHash(passwordHash);, +        if (resolvedHasher.equals(configuredHasher) == false) {, +            throw new IllegalArgumentException("Provided password hash uses [" + resolvedHasher, +                + "] but the configured hashing algorithm is [" + configuredHasher + "]");, +        }, +        if (request.passwordHash() != null) {, +            throw validationException("password_hash has already been set");, +        }, +                        passwordHash(passwordChars, hasher);, +    private ValidationException validationException(String abc) {, +        ValidationException validationException = new ValidationException();, +        validationException.addValidationError(abc);, +        return validationException;, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/user/PutUserRequestBuilder.java, +                throw validationException(error.toString());, +            }, +            if (request.passwordHash() != null) {, +                throw validationException("password_hash has already been set");, +    public PutUserRequestBuilder passwordHash(char[] passwordHash, Hasher configuredHasher) {, +        final Hasher resolvedHasher = Hasher.resolveFromHash(passwordHash);, +        if (resolvedHasher.equals(configuredHasher) == false) {, +            throw new IllegalArgumentException("Provided password hash uses [" + resolvedHasher, +                + "] but the configured hashing algorithm is [" + configuredHasher + "]");, +        }, +        if (request.passwordHash() != null) {, +            throw validationException("password_hash has already been set");, +        }, +                        passwordHash(passwordChars, hasher);, +    private ValidationException validationException(String abc) {, +        ValidationException validationException = new ValidationException();, +        validationException.addValidationError(abc);, +        return validationException;, +    }, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/action/user/PutUserRequestBuilderTests.java, +import org.elasticsearch.common.ValidationException;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import static org.hamcrest.Matchers.equalTo;, +, +    public void testWithValidPasswordHash() throws IOException {, +        final Hasher hasher = Hasher.BCRYPT4; // this is the fastest hasher we officially support, +        final char[] hash = hasher.hash(new SecureString("secret".toCharArray()));, +        final String json = "{\n" +, +            "    \"password_hash\": \"" + new String(hash) + "\"," +, +            "    \"roles\": []\n" +, +            "}";, +, +        PutUserRequestBuilder requestBuilder = new PutUserRequestBuilder(mock(Client.class));, +        PutUserRequest request = requestBuilder.source("hash_user",, +            new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, hasher).request();, +        assertThat(request.passwordHash(), equalTo(hash));, +        assertThat(request.username(), equalTo("hash_user"));, +    }, +, +    public void testWithMismatchedPasswordHash() throws IOException {, +        final Hasher systemHasher = Hasher.BCRYPT8;, +        final Hasher userHasher = Hasher.BCRYPT4; // this is the fastest hasher we officially support, +        final char[] hash = userHasher.hash(new SecureString("secret".toCharArray()));, +        final String json = "{\n" +, +            "    \"password_hash\": \"" + new String(hash) + "\"," +, +            "    \"roles\": []\n" +, +            "}";, +, +        PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class));, +        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> {, +            builder.source("hash_user", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, systemHasher).request();, +        });, +        assertThat(ex.getMessage(), containsString(userHasher.name()));, +        assertThat(ex.getMessage(), containsString(systemHasher.name()));, +    }, +, +    public void testWithPasswordHashThatsNotReallyAHash() throws IOException {, +        final Hasher systemHasher = Hasher.PBKDF2;, +        final String json = "{\n" +, +            "    \"password_hash\": \"not-a-hash\"," +, +            "    \"roles\": []\n" +, +            "}";, +, +        PutUserRequestBuilder builder = new PutUserRequestBuilder(mock(Client.class));, +        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> {, +            builder.source("hash_user", new BytesArray(json.getBytes(StandardCharsets.UTF_8)), XContentType.JSON, systemHasher).request();, +        });, +        assertThat(ex.getMessage(), containsString(Hasher.NOOP.name()));, +        assertThat(ex.getMessage(), containsString(systemHasher.name()));, +    }, +, +    public void testWithBothPasswordAndHash() throws IOException {, +        final Hasher hasher = randomFrom(Hasher.BCRYPT4, Hasher.PBKDF2_1000);, +        final String password = randomAlphaOfLength(12);, +        final char[] hash = hasher.hash(new SecureString(password.toCharArray()));]