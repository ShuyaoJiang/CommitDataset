[+++ b/core/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +        NumberFormatException numberFormatException = null;, +                                try {, +                                } catch (NumberFormatException e) {, +                                    numberFormatException = e;, +                                }, +                                try {, +                                } catch (NumberFormatException e) {, +                                    numberFormatException = e;, +                                }, +            } else if (numberFormatException != null) {, +                throw new ElasticsearchParseException("[{}] and [{}] must be valid double values", numberFormatException, LATITUDE,, +                    LONGITUDE);, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +        NumberFormatException numberFormatException = null;, +                                try {, +                                } catch (NumberFormatException e) {, +                                    numberFormatException = e;, +                                }, +                                try {, +                                } catch (NumberFormatException e) {, +                                    numberFormatException = e;, +                                }, +            } else if (numberFormatException != null) {, +                throw new ElasticsearchParseException("[{}] and [{}] must be valid double values", numberFormatException, LATITUDE,, +                    LONGITUDE);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +import org.elasticsearch.ElasticsearchParseException;, +                      try {, +                      } catch (ElasticsearchParseException e) {, +                          if (ignoreMalformed.value() == false) {, +                              throw e;, +                          }, +                      }, +                                try {, +                                } catch (ElasticsearchParseException e) {, +                                    if (ignoreMalformed.value() == false) {, +                                        throw e;, +                                    }, +                                }, +                try {, +                } catch (ElasticsearchParseException e) {, +                    if (ignoreMalformed.value() == false) {, +                        throw e;, +                    }, +                }, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +        NumberFormatException numberFormatException = null;, +                                try {, +                                } catch (NumberFormatException e) {, +                                    numberFormatException = e;, +                                }, +                                try {, +                                } catch (NumberFormatException e) {, +                                    numberFormatException = e;, +                                }, +            } else if (numberFormatException != null) {, +                throw new ElasticsearchParseException("[{}] and [{}] must be valid double values", numberFormatException, LATITUDE,, +                    LONGITUDE);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +import org.elasticsearch.ElasticsearchParseException;, +                      try {, +                      } catch (ElasticsearchParseException e) {, +                          if (ignoreMalformed.value() == false) {, +                              throw e;, +                          }, +                      }, +                                try {, +                                } catch (ElasticsearchParseException e) {, +                                    if (ignoreMalformed.value() == false) {, +                                        throw e;, +                                    }, +                                }, +                try {, +                } catch (ElasticsearchParseException e) {, +                    if (ignoreMalformed.value() == false) {, +                        throw e;, +                    }, +                }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapperTests.java, +import java.lang.NumberFormatException;, +import static org.hamcrest.CoreMatchers.instanceOf;, +, +        try {, +            defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder(), +                    .startObject(), +                    .startObject("point").field("lat", "-").field("lon", 1.3).endObject(), +                    .endObject(), +                    .bytes());, +            fail();, +        } catch (MapperParsingException e) {, +            assertThat(e.getRootCause(), instanceOf(NumberFormatException.class));, +            assertThat(e.getRootCause().toString(), containsString("java.lang.NumberFormatException: For input string: \"-\""));, +        }, +, +        try {, +            defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder(), +                    .startObject(), +                    .startObject("point").field("lat", 1.2).field("lon", "-").endObject(), +                    .endObject()]