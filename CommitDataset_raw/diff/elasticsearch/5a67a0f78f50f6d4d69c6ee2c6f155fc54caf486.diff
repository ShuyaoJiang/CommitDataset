[+++ b/x-pack/build.gradle, +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-ccr:${version}": xpackModule('ccr')], +++ b/x-pack/build.gradle, +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-ccr:${version}": xpackModule('ccr')], +++ b/x-pack/plugin/build.gradle, +  plugins = ['ccr', 'core', 'deprecation', 'graph', 'logstash',, +++ b/x-pack/build.gradle, +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-ccr:${version}": xpackModule('ccr')], +++ b/x-pack/plugin/build.gradle, +  plugins = ['ccr', 'core', 'deprecation', 'graph', 'logstash',, +++ b/x-pack/plugin/ccr/build.gradle, +evaluationDependsOn(xpackModule('core')), +    plugin xpackModule('core'), +++ b/x-pack/build.gradle, +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-ccr:${version}": xpackModule('ccr')], +++ b/x-pack/plugin/build.gradle, +  plugins = ['ccr', 'core', 'deprecation', 'graph', 'logstash',, +++ b/x-pack/plugin/ccr/build.gradle, +evaluationDependsOn(xpackModule('core')), +    plugin xpackModule('core'), +++ b/x-pack/plugin/ccr/qa/multi-cluster/build.gradle, +++ b/x-pack/build.gradle, +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-ccr:${version}": xpackModule('ccr')], +++ b/x-pack/plugin/build.gradle, +  plugins = ['ccr', 'core', 'deprecation', 'graph', 'logstash',, +++ b/x-pack/plugin/ccr/build.gradle, +evaluationDependsOn(xpackModule('core')), +    plugin xpackModule('core'), +++ b/x-pack/plugin/ccr/qa/multi-cluster/build.gradle, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/LocalStateCompositeXPackPlugin.java, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.engine.EngineFactory;, +import org.elasticsearch.plugins.EnginePlugin;, +import java.util.Optional;, +        ClusterPlugin, DiscoveryPlugin, MapperPlugin, AnalysisPlugin, PersistentTaskPlugin, EnginePlugin {, +    @Override, +    public Optional<EngineFactory> getEngineFactory(IndexSettings indexSettings) {, +        List<Optional<EngineFactory>> enginePlugins = filterPlugins(EnginePlugin.class).stream(), +            .map(p -> p.getEngineFactory(indexSettings)), +            .collect(Collectors.toList());, +        if (enginePlugins.size() == 0) {, +            return Optional.empty();, +        } else if (enginePlugins.size() == 1) {, +            return enginePlugins.stream().findFirst().get();, +        } else {, +            throw new IllegalStateException("Only one EngineFactory plugin allowed");, +        }, +    }, +, +]