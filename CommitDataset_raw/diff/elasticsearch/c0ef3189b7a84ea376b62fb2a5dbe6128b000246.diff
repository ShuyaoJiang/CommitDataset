[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +    private final IndexScopedSettings indexScopedSettings;, +        this.indexScopedSettings = indexScopedSettings;, +        final Settings settings = indexMetaData.getSettings();, +        final Settings upgrade = indexScopedSettings.archiveUnknownOrBrokenSettings(settings);, +        if (upgrade != settings) {, +            return IndexMetaData.builder(indexMetaData).settings(upgrade).build();, +            return indexMetaData;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +    private final IndexScopedSettings indexScopedSettings;, +        this.indexScopedSettings = indexScopedSettings;, +        final Settings settings = indexMetaData.getSettings();, +        final Settings upgrade = indexScopedSettings.archiveUnknownOrBrokenSettings(settings);, +        if (upgrade != settings) {, +            return IndexMetaData.builder(indexMetaData).settings(upgrade).build();, +            return indexMetaData;, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +, +    public ClusterSettings getClusterSettings() {, +        return clusterSettings;, +    }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +    private final IndexScopedSettings indexScopedSettings;, +        this.indexScopedSettings = indexScopedSettings;, +        final Settings settings = indexMetaData.getSettings();, +        final Settings upgrade = indexScopedSettings.archiveUnknownOrBrokenSettings(settings);, +        if (upgrade != settings) {, +            return IndexMetaData.builder(indexMetaData).settings(upgrade).build();, +            return indexMetaData;, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +, +    public ClusterSettings getClusterSettings() {, +        return clusterSettings;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    public static final String ARCHIVED_SETTINGS_PREFIX = "archived.";, +, +    /**, +     * Archives broken or unknown settings. Any setting that is not recognized or fails, +     * validation will be archived. This means the setting is prefixed with {@value ARCHIVED_SETTINGS_PREFIX}, +     * and remains in the settings object. This can be used to detect broken settings via APIs., +     */, +    public Settings archiveUnknownOrBrokenSettings(Settings settings) {, +        Settings.Builder builder = Settings.builder();, +        boolean changed = false;, +        for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +            try {, +                Setting<?> setting = get(entry.getKey());, +                if (setting != null) {, +                    setting.get(settings);, +                    builder.put(entry.getKey(), entry.getValue());, +                } else {, +                    if (entry.getKey().startsWith(ARCHIVED_SETTINGS_PREFIX) || isPrivateSetting(entry.getKey())) {, +                        builder.put(entry.getKey(), entry.getValue());, +                    } else {, +                        changed = true;, +                        logger.warn("found unknown setting: {} value: {} - archiving", entry.getKey(), entry.getValue());, +                        // we put them back in here such that tools can check from the outside if there are any indices with broken settings. The setting can remain there, +                        // but we want users to be aware that some of their setting are broken and they can research why and what they need to do to replace them., +                        builder.put(ARCHIVED_SETTINGS_PREFIX + entry.getKey(), entry.getValue());, +                    }, +                }, +            } catch (IllegalArgumentException ex) {, +                changed = true;, +                logger.warn("found invalid setting: {} value: {} - archiving",ex , entry.getKey(), entry.getValue());, +                // we put them back in here such that tools can check from the outside if there are any indices with broken settings. The setting can remain there, +                // but we want users to be aware that some of their setting sare broken and they can research why and what they need to do to replace them., +                builder.put(ARCHIVED_SETTINGS_PREFIX + entry.getKey(), entry.getValue());, +            }, +        }]