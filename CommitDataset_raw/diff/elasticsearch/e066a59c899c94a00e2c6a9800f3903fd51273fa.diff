[+++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    | RETURN expression?              # return, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    | RETURN expression?              # return, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java, +    int _la;, +      setState(186);, +      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {, +        setState(181);, +        _la = _input.LA(1);, +        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {, +          {, +        }, +, +        }, +        setState(183);, +        setState(184);, +        setState(185);, +      setState(190);, +        setState(188);, +        setState(189);, +      setState(192);, +      setState(196);, +      _alt = getInterpreter().adaptivePredict(_input,16,_ctx);, +          setState(193);, +        _errHandler.sync(this);, +        _alt = getInterpreter().adaptivePredict(_input,16,_ctx);, +      }, +      setState(200);, +        setState(199);, +      setState(202);, +      setState(204);, +      setState(208);, +      switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {, +        setState(206);, +        setState(207);, +      setState(210);, +      setState(212);, +      setState(213);, +      setState(218);, +        setState(214);, +        setState(215);, +        setState(220);, +      setState(221);, +      setState(226);, +      _alt = getInterpreter().adaptivePredict(_input,20,_ctx);, +          setState(222);, +          setState(223);, +        setState(228);, +        _alt = getInterpreter().adaptivePredict(_input,20,_ctx);, +      setState(229);, +      setState(232);, +        setState(230);, +        setState(231);, +      match(CATCH);, +      match(LP);, +      match(TYPE);, +      match(ID);, +      setState(238);, +      match(RP);, +      setState(239);, +      setState(242);, +      setState(294);, +      _alt = getInterpreter().adaptivePredict(_input,23,_ctx);, +          setState(292);, +          switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {, +            setState(244);, +            setState(245);, +            setState(246);, +            setState(247);, +            setState(248);, +            setState(249);, +            setState(250);, +            setState(251);, +            setState(252);, +            setState(253);, +            setState(254);, +            setState(255);, +            setState(256);, +            setState(257);, +            setState(258);, +            setState(259);, +            setState(260);, +            setState(261);, +            if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");, +            setState(263);, +            match(BWAND);, +            setState(264);, +            if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");, +            setState(266);, +            match(XOR);, +            setState(267);, +            if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");, +            setState(269);, +            match(BWOR);, +            setState(270);, +            if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");, +            setState(272);, +            match(BOOLAND);, +            setState(273);]