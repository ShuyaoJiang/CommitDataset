[+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/CategorizationIT.java, +import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;, +                .addMapping(SINGLE_MAPPING_NAME, "time", "type=date,format=epoch_millis",, +        IndexRequest indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/CategorizationIT.java, +import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;, +                .addMapping(SINGLE_MAPPING_NAME, "time", "type=date,format=epoch_millis",, +        IndexRequest indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsRestIT.java, +        new DatafeedBuilder(datafeedId, jobId, "nested-data").build();, +                new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs"), +            new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data").build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data").build();, +            new DatafeedBuilder(datafeedId, jobId, dataIndex), +        DatafeedBuilder(String datafeedId, String jobId, String index) {, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/CategorizationIT.java, +import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;, +                .addMapping(SINGLE_MAPPING_NAME, "time", "type=date,format=epoch_millis",, +        IndexRequest indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsRestIT.java, +        new DatafeedBuilder(datafeedId, jobId, "nested-data").build();, +                new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs"), +            new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data").build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data").build();, +            new DatafeedBuilder(datafeedId, jobId, dataIndex), +        DatafeedBuilder(String datafeedId, String jobId, String index) {, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java, +import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;, +                .addMapping(SINGLE_MAPPING_NAME, "time", "type=date,format=epoch_millis"), +                IndexRequest indexRequest = new IndexRequest(DATA_INDEX);, +            IndexRequest indexRequest = new IndexRequest(AnomalyDetectorsIndex.jobStateIndexWriteAlias()).id(docId);, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/CategorizationIT.java, +import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;, +                .addMapping(SINGLE_MAPPING_NAME, "time", "type=date,format=epoch_millis",, +        IndexRequest indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +        indexRequest = new IndexRequest(DATA_INDEX);, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsRestIT.java, +        new DatafeedBuilder(datafeedId, jobId, "nested-data").build();, +                new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs"), +            new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "network-data"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs-rollup"), +        new DatafeedBuilder(datafeedId, jobId, "airline-data-aggs").setAggregations(aggregations).build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data").build();, +        new DatafeedBuilder(datafeedId, jobId, "airline-data").build();, +            new DatafeedBuilder(datafeedId, jobId, dataIndex), +        DatafeedBuilder(String datafeedId, String jobId, String index) {, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java, +import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;, +                .addMapping(SINGLE_MAPPING_NAME, "time", "type=date,format=epoch_millis"), +                IndexRequest indexRequest = new IndexRequest(DATA_INDEX);, +            IndexRequest indexRequest = new IndexRequest(AnomalyDetectorsIndex.jobStateIndexWriteAlias()).id(docId);, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ModelPlotsIT.java, +import static org.elasticsearch.index.mapper.MapperService.SINGLE_MAPPING_NAME;, +                .addMapping(SINGLE_MAPPING_NAME, "time", "type=date,format=epoch_millis", "user", "type=keyword"), +                IndexRequest indexRequest = new IndexRequest(DATA_INDEX);]