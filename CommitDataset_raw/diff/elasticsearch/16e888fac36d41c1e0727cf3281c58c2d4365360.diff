[+++ b/core/src/main/java/org/elasticsearch/ingest/processor/GsubProcessor.java, +import org.elasticsearch.ElasticsearchParseException;, +import static org.elasticsearch.ingest.core.ConfigurationUtils.newConfigurationException;, +import static org.elasticsearch.ingest.core.ConfigurationUtils.readStringProperty;, +, +            String field = readStringProperty(TYPE, processorTag, config, "field");, +            String pattern = readStringProperty(TYPE, processorTag, config, "pattern");, +            String replacement = readStringProperty(TYPE, processorTag, config, "replacement");, +            Pattern searchPattern;, +            try {, +                searchPattern = Pattern.compile(pattern);, +            } catch (Exception e) {, +                throw newConfigurationException(TYPE, processorTag, "pattern", "Invalid regex pattern. " + e.getMessage());, +            }, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/GsubProcessor.java, +import org.elasticsearch.ElasticsearchParseException;, +import static org.elasticsearch.ingest.core.ConfigurationUtils.newConfigurationException;, +import static org.elasticsearch.ingest.core.ConfigurationUtils.readStringProperty;, +, +            String field = readStringProperty(TYPE, processorTag, config, "field");, +            String pattern = readStringProperty(TYPE, processorTag, config, "pattern");, +            String replacement = readStringProperty(TYPE, processorTag, config, "replacement");, +            Pattern searchPattern;, +            try {, +                searchPattern = Pattern.compile(pattern);, +            } catch (Exception e) {, +                throw newConfigurationException(TYPE, processorTag, "pattern", "Invalid regex pattern. " + e.getMessage());, +            }, +++ b/core/src/test/java/org/elasticsearch/ingest/processor/GsubProcessorFactoryTests.java, +, +    public void testCreateInvalidPattern() throws Exception {, +        GsubProcessor.Factory factory = new GsubProcessor.Factory();, +        Map<String, Object> config = new HashMap<>();, +        config.put("field", "field1");, +        config.put("pattern", "[");, +        config.put("replacement", "-");, +        try {, +            factory.create(config);, +            fail("factory create should have failed");, +        } catch(ElasticsearchParseException e) {, +            assertThat(e.getMessage(), equalTo("[pattern] Invalid regex pattern. Unclosed character class near index 0\n[\n^"));, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/GsubProcessor.java, +import org.elasticsearch.ElasticsearchParseException;, +import static org.elasticsearch.ingest.core.ConfigurationUtils.newConfigurationException;, +import static org.elasticsearch.ingest.core.ConfigurationUtils.readStringProperty;, +, +            String field = readStringProperty(TYPE, processorTag, config, "field");, +            String pattern = readStringProperty(TYPE, processorTag, config, "pattern");, +            String replacement = readStringProperty(TYPE, processorTag, config, "replacement");, +            Pattern searchPattern;, +            try {, +                searchPattern = Pattern.compile(pattern);, +            } catch (Exception e) {, +                throw newConfigurationException(TYPE, processorTag, "pattern", "Invalid regex pattern. " + e.getMessage());, +            }, +++ b/core/src/test/java/org/elasticsearch/ingest/processor/GsubProcessorFactoryTests.java, +, +    public void testCreateInvalidPattern() throws Exception {, +        GsubProcessor.Factory factory = new GsubProcessor.Factory();, +        Map<String, Object> config = new HashMap<>();, +        config.put("field", "field1");, +        config.put("pattern", "[");, +        config.put("replacement", "-");, +        try {, +            factory.create(config);, +            fail("factory create should have failed");, +        } catch(ElasticsearchParseException e) {, +            assertThat(e.getMessage(), equalTo("[pattern] Invalid regex pattern. Unclosed character class near index 0\n[\n^"));, +        }, +    }, +++ b/modules/ingest-grok/src/main/java/org/elasticsearch/ingest/grok/GrokProcessor.java, +import static org.elasticsearch.ingest.core.ConfigurationUtils.newConfigurationException;, +, +            Grok grok;, +            try {, +                grok = new Grok(patternBank, matchPattern);, +            } catch (Exception e) {, +                throw newConfigurationException(TYPE, processorTag, "pattern", "Invalid regex pattern. " + e.getMessage());, +            }, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/GsubProcessor.java, +import org.elasticsearch.ElasticsearchParseException;, +import static org.elasticsearch.ingest.core.ConfigurationUtils.newConfigurationException;, +import static org.elasticsearch.ingest.core.ConfigurationUtils.readStringProperty;, +, +            String field = readStringProperty(TYPE, processorTag, config, "field");, +            String pattern = readStringProperty(TYPE, processorTag, config, "pattern");, +            String replacement = readStringProperty(TYPE, processorTag, config, "replacement");, +            Pattern searchPattern;, +            try {, +                searchPattern = Pattern.compile(pattern);, +            } catch (Exception e) {, +                throw newConfigurationException(TYPE, processorTag, "pattern", "Invalid regex pattern. " + e.getMessage());, +            }, +++ b/core/src/test/java/org/elasticsearch/ingest/processor/GsubProcessorFactoryTests.java, +, +    public void testCreateInvalidPattern() throws Exception {, +        GsubProcessor.Factory factory = new GsubProcessor.Factory();, +        Map<String, Object> config = new HashMap<>();]