[+++ b/src/main/java/org/elasticsearch/action/termvector/TermVectorFields.java, +import gnu.trove.impl.Constants;, +import org.apache.lucene.index.*;, +import java.io.IOException;, +import java.util.Comparator;, +import java.util.Iterator;, +, +import static org.apache.lucene.util.ArrayUtil.grow;, +, + * <p/>, + * <p/>, + * <p/>, + * <p/>, + * <p/>, + * <p/>, +     * @param headerRef   Stores offsets per field in the {@code termVectors} and some, +     * @param termVectors Stores the actual term vectors as a {@link BytesRef}., +        fieldMap = new TObjectLongHashMap<String>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR, -1);, +, +        if (offset.longValue() < 0) {, +            return null; // we don't have it., +        }, +++ b/src/main/java/org/elasticsearch/action/termvector/TermVectorFields.java, +import gnu.trove.impl.Constants;, +import org.apache.lucene.index.*;, +import java.io.IOException;, +import java.util.Comparator;, +import java.util.Iterator;, +, +import static org.apache.lucene.util.ArrayUtil.grow;, +, + * <p/>, + * <p/>, + * <p/>, + * <p/>, + * <p/>, + * <p/>, +     * @param headerRef   Stores offsets per field in the {@code termVectors} and some, +     * @param termVectors Stores the actual term vectors as a {@link BytesRef}., +        fieldMap = new TObjectLongHashMap<String>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR, -1);, +, +        if (offset.longValue() < 0) {, +            return null; // we don't have it., +        }, +++ b/src/main/java/org/elasticsearch/action/termvector/TermVectorRequest.java, +import com.google.common.collect.Sets;, +import org.elasticsearch.ElasticSearchParseException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import java.io.IOException;, +import java.util.*;, + * <p/>, +    // TODO: change to String[], +    public static TermVectorRequest readTermVectorRequest(StreamInput in) throws IOException {, +        TermVectorRequest termVectorRequest = new TermVectorRequest();, +        termVectorRequest.readFrom(in);, +        return termVectorRequest;, +    }, +, +, +, +    /**, +     * populates a request object (pre-populated with defaults) based on a parser., +     *, +     * @param termVectorRequest, +     * @param parser, +     * @throws IOException, +     */, +    public static void parseRequest(TermVectorRequest termVectorRequest, XContentParser parser) throws IOException {, +        XContentParser.Token token;, +        String currentFieldName = null;, +        List<String> fields = new ArrayList<String>();, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (currentFieldName != null) {, +                if (currentFieldName.equals("fields")) {, +, +                    if (token == XContentParser.Token.START_ARRAY) {, +                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {, +                            fields.add(parser.text());, +                        }, +                    } else {, +                        throw new ElasticSearchParseException(, +                                "The parameter fields must be given as an array! Use syntax : \"fields\" : [\"field1\", \"field2\",...]");, +                    }, +                } else if (currentFieldName.equals("offsets")) {, +                    termVectorRequest.offsets(parser.booleanValue());, +                } else if (currentFieldName.equals("positions")) {, +                    termVectorRequest.positions(parser.booleanValue());, +                } else if (currentFieldName.equals("payloads")) {, +                    termVectorRequest.payloads(parser.booleanValue());, +                } else if (currentFieldName.equals("term_statistics") || currentFieldName.equals("termStatistics")) {, +                    termVectorRequest.termStatistics(parser.booleanValue());, +                } else if (currentFieldName.equals("field_statistics") || currentFieldName.equals("fieldStatistics")) {, +                    termVectorRequest.fieldStatistics(parser.booleanValue());, +                } else if ("_index".equals(currentFieldName)) { // the following is important for multi request parsing., +                    termVectorRequest.index = parser.text();, +                } else if ("_type".equals(currentFieldName)) {, +                    termVectorRequest.type = parser.text();, +                } else if ("_id".equals(currentFieldName)) {]