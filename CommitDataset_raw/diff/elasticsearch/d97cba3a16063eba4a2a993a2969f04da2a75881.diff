[+++ b/TESTING.asciidoc, +Now inside the VM, to run the https://github.com/sstephenson/bats[bats] packaging tests, +To run the Java packaging tests, again inside the VM, +bash $PACKAGING_TESTS/run-tests.sh, +or on Windows, +++ b/TESTING.asciidoc, +Now inside the VM, to run the https://github.com/sstephenson/bats[bats] packaging tests, +To run the Java packaging tests, again inside the VM, +bash $PACKAGING_TESTS/run-tests.sh, +or on Windows, +++ b/Vagrantfile, +++ b/TESTING.asciidoc, +Now inside the VM, to run the https://github.com/sstephenson/bats[bats] packaging tests, +To run the Java packaging tests, again inside the VM, +bash $PACKAGING_TESTS/run-tests.sh, +or on Windows, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +            contents "java -cp \"\$PACKAGING_TESTS/*\" org.junit.runner.JUnitCore ${-> project.extensions.esvagrant.testClass}", +                     java -cp "\$Env:PACKAGING_TESTS/*" org.junit.runner.JUnitCore ${-> project.extensions.esvagrant.testClass}, +                javaPackagingTest.args = ['--command', 'bash "$PACKAGING_TESTS/run-tests.sh"'], +++ b/TESTING.asciidoc, +Now inside the VM, to run the https://github.com/sstephenson/bats[bats] packaging tests, +To run the Java packaging tests, again inside the VM, +bash $PACKAGING_TESTS/run-tests.sh, +or on Windows, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +            contents "java -cp \"\$PACKAGING_TESTS/*\" org.junit.runner.JUnitCore ${-> project.extensions.esvagrant.testClass}", +                     java -cp "\$Env:PACKAGING_TESTS/*" org.junit.runner.JUnitCore ${-> project.extensions.esvagrant.testClass}, +                javaPackagingTest.args = ['--command', 'bash "$PACKAGING_TESTS/run-tests.sh"'], +++ b/docs/painless/painless-casting.asciidoc, +Casting is the conversion of one type to another. Implicit casts are casts that, +occur automatically, such as during an assignment operation. Explicit casts are, +casts where you use the casting operator to explicitly convert one type to, +another. This is necessary during operations where the cast cannot be inferred., +To cast to a new type, precede the expression by the new type enclosed in, +parentheses, for example, +`(int)x`., +The following sections specify the implicit casts that can be performed and the, +explicit casts that are allowed. The only other permitted cast is casting, +a single character `String` to a `char`., +*Grammar:*, +[[numeric-casting]], +==== Numeric Casting, +The following table shows the allowed implicit and explicit casts between, +numeric types. Read the table by row. To find out if you need to explicitly, +cast from type A to type B, find the row for type A and scan across to the, +column for type B., +IMPORTANT: Explicit casts between numeric types can result in some data loss. A, +smaller numeric type cannot necessarily accommodate the value from a larger, +numeric type. You might also lose precision when casting from integer types, +to floating point types., +Example(s), +[source,Java], +int a = 1;            // Declare int variable a and set it to the literal, +                      //   value 1, +long b = a;           // Declare long variable b and set it to int variable, +                      //    a with an implicit cast to convert from int to long, +short c = (short)b;   // Declare short variable c, explicitly cast b to a, +                      //   short, and assign b to c, +byte d = a;           // ERROR: Casting an int to a byte requires an explicit, +                      //   cast, +double e = (double)a; // Explicitly cast int variable a to a double and assign, +                      //   it to the double variable e. The explicit cast is, +                      //   allowed, but it is not necessary., +[[reference-casting]], +==== Reference Casting, +A reference type can be implicitly cast to another reference type as long as, +the type being cast _from_ is a descendant of the type being cast _to_.  A, +reference type can be explicitly cast _to_ if the type being cast to is a, +descendant of the type being cast _from_., +*Examples:*, +[source,Java], +List x;                        // Declare List variable x, +ArrayList y = new ArrayList(); // Declare ArrayList variable y and assign it a, +                               //   newly allocated ArrayList [1], +x = y;                         // Assign Arraylist y to List x using an, +                               //   implicit cast, +y = (ArrayList)x;              // Explicitly cast List x to an ArrayList and, +                               //  assign it to ArrayList y, +x = (List)y;                   // Set List x to ArrayList y using an explicit, +                               //   cast (the explicit cast is not necessary), +y = x;                         // ERROR: List x cannot be implicitly cast to, +                               //   an ArrayList, an explicit cast is required, +Map m = y;                     // ERROR: Cannot implicitly or explicitly cast [2], +                               //   an ArrayList to a Map, no relationship, +                               //   exists between the two types., +[1] `ArrayList` is a descendant of the `List` type., +[2] `Map` is unrelated to the `List` and `ArrayList` types., +[[def-type-casting]], +==== def Type Casting, +All primitive and reference types can always be implicitly cast to, +`def`. While it is possible to explicitly cast to `def`, it is not necessary., +However, it is not always possible to implicitly cast a `def` to other, +primitive and reference types. An explicit cast is required if an explicit, +cast would normally be required between the non-def types., +*Examples:*, +[source,Java], +def x;          // Declare def variable x and set it to null]