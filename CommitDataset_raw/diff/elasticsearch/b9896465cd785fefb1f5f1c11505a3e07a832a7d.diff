[+++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.TimeValue;, +    private long tookInMillis;, +, +    public MultiSearchResponse(Item[] items, long tookInMillis) {, +        this.tookInMillis = tookInMillis;, +    /**, +     * How long the msearch took., +     */, +    public TimeValue getTook() {, +        return new TimeValue(tookInMillis);, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            tookInMillis = in.readVLong();, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            out.writeVLong(tookInMillis);, +        }, +        builder.field("took", tookInMillis);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.TimeValue;, +    private long tookInMillis;, +, +    public MultiSearchResponse(Item[] items, long tookInMillis) {, +        this.tookInMillis = tookInMillis;, +    /**, +     * How long the msearch took., +     */, +    public TimeValue getTook() {, +        return new TimeValue(tookInMillis);, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            tookInMillis = in.readVLong();, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            out.writeVLong(tookInMillis);, +        }, +        builder.field("took", tookInMillis);, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +import java.util.concurrent.TimeUnit;, +import java.util.function.LongSupplier;, +    private final LongSupplier relativeTimeProvider;, +        this.relativeTimeProvider = System::nanoTime;, +                               IndexNameExpressionResolver resolver, int availableProcessors, LongSupplier relativeTimeProvider) {, +        this.relativeTimeProvider = relativeTimeProvider;, +        final long relativeStartTime = relativeTimeProvider.getAsLong();, +        , +            executeSearch(searchRequestSlots, responses, responseCounter, listener, relativeStartTime);, +    void executeSearch(, +            final ActionListener<MultiSearchResponse> listener,, +            final long relativeStartTime) {, +                        threadPool.generic(), +                                .execute(() -> executeSearch(requests, responses, responseCounter, listener, relativeStartTime));, +                        executeSearch(requests, responses, responseCounter, listener, relativeStartTime);, +                listener.onResponse(new MultiSearchResponse(responses.toArray(new MultiSearchResponse.Item[responses.length()]),, +                        buildTookInMillis()));, +            }, +, +            /**, +             * Builds how long it took to execute the msearch., +             */, +            private long buildTookInMillis() {, +                return TimeUnit.NANOSECONDS.toMillis(relativeTimeProvider.getAsLong() - relativeStartTime);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.TimeValue;, +    private long tookInMillis;, +, +    public MultiSearchResponse(Item[] items, long tookInMillis) {, +        this.tookInMillis = tookInMillis;, +    /**, +     * How long the msearch took., +     */, +    public TimeValue getTook() {, +        return new TimeValue(tookInMillis);, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            tookInMillis = in.readVLong();, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            out.writeVLong(tookInMillis);, +        }, +        builder.field("took", tookInMillis);, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +import java.util.concurrent.TimeUnit;, +import java.util.function.LongSupplier;, +    private final LongSupplier relativeTimeProvider;, +        this.relativeTimeProvider = System::nanoTime;, +                               IndexNameExpressionResolver resolver, int availableProcessors, LongSupplier relativeTimeProvider) {, +        this.relativeTimeProvider = relativeTimeProvider;, +        final long relativeStartTime = relativeTimeProvider.getAsLong();, +        , +            executeSearch(searchRequestSlots, responses, responseCounter, listener, relativeStartTime);, +    void executeSearch(, +            final ActionListener<MultiSearchResponse> listener,]