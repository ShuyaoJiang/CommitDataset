[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/PrimaryNotStartedActionException.java, +import org.elasticsearch.ElasticSearchException;, + * @author kimchy (shay.banon), +public class PrimaryNotStartedActionException extends ElasticSearchException {, +        super(buildMessage(shardId, message));, +    }, +, +    private static String buildMessage(ShardId shardId, String message) {, +        if (shardId == null) {, +            return message;, +        }, +        return "[" + shardId.index() + "][" + shardId.id() + "]" + message;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/PrimaryNotStartedActionException.java, +import org.elasticsearch.ElasticSearchException;, + * @author kimchy (shay.banon), +public class PrimaryNotStartedActionException extends ElasticSearchException {, +        super(buildMessage(shardId, message));, +    }, +, +    private static String buildMessage(ShardId shardId, String message) {, +        if (shardId == null) {, +            return message;, +        }, +        return "[" + shardId.index() + "][" + shardId.id() + "]" + message;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +            for (int i = 0; i < nodesIds.length; i++) {, +                if (nodesIds[i].equals("_local")) {, +                    nodesIds[i] = clusterState.nodes().localNodeId();, +                } else if (nodesIds[i].equals("_master")) {, +                    nodesIds[i] = clusterState.nodes().masterNodeId();, +                }, +            }, +            this.responses = new AtomicReferenceArray<Object>(this.nodesIds.length);, +            if (nodesIds.length == 0) {, +                // nothing to notify, +                threadPool.execute(new Runnable() {, +                    @Override public void run() {, +                        listener.onResponse(newResponse(request, responses));, +                    }, +                });, +                return;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/PrimaryNotStartedActionException.java, +import org.elasticsearch.ElasticSearchException;, + * @author kimchy (shay.banon), +public class PrimaryNotStartedActionException extends ElasticSearchException {, +        super(buildMessage(shardId, message));, +    }, +, +    private static String buildMessage(ShardId shardId, String message) {, +        if (shardId == null) {, +            return message;, +        }, +        return "[" + shardId.index() + "][" + shardId.id() + "]" + message;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +            for (int i = 0; i < nodesIds.length; i++) {, +                if (nodesIds[i].equals("_local")) {, +                    nodesIds[i] = clusterState.nodes().localNodeId();, +                } else if (nodesIds[i].equals("_master")) {, +                    nodesIds[i] = clusterState.nodes().masterNodeId();, +                }, +            }, +            this.responses = new AtomicReferenceArray<Object>(this.nodesIds.length);, +            if (nodesIds.length == 0) {, +                // nothing to notify, +                threadPool.execute(new Runnable() {, +                    @Override public void run() {, +                        listener.onResponse(newResponse(request, responses));, +                    }, +                });, +                return;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    logger.debug("processing [{}]: ignoring, cluster_service not started", source);, +                logger.debug("processing [{}]: execute", source);, +, +                    logger.debug("processing [{}]: done applying updated cluster_state", source);, +                } else {, +                    logger.debug("processing [{}]: no change in cluster_state", source);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/PrimaryNotStartedActionException.java, +import org.elasticsearch.ElasticSearchException;, + * @author kimchy (shay.banon), +public class PrimaryNotStartedActionException extends ElasticSearchException {, +        super(buildMessage(shardId, message));, +    }, +, +    private static String buildMessage(ShardId shardId, String message) {, +        if (shardId == null) {, +            return message;, +        }, +        return "[" + shardId.index() + "][" + shardId.id() + "]" + message;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +            for (int i = 0; i < nodesIds.length; i++) {, +                if (nodesIds[i].equals("_local")) {, +                    nodesIds[i] = clusterState.nodes().localNodeId();, +                } else if (nodesIds[i].equals("_master")) {, +                    nodesIds[i] = clusterState.nodes().masterNodeId();, +                }, +            }, +            this.responses = new AtomicReferenceArray<Object>(this.nodesIds.length);]