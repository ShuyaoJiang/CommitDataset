[+++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +        if (context.sourceToParse().flyweight() == false) {, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +        if (context.sourceToParse().flyweight() == false) {, +    }, +++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +        // We don't fail p/c queries, but those queries are unusable because only a single document can be provided in, +    @Test, +    public void testPercolateDocumentWithParentField() throws Exception {, +        assertAcked(prepareCreate("index").addMapping("child", "_parent", "type=parent").addMapping("parent"));, +        client().prepareIndex("index", PercolatorService.TYPE_NAME, "1"), +                .setSource(jsonBuilder().startObject().field("query", matchAllQuery()).endObject()), +                .execute().actionGet();, +, +        // Just percolating a document that has a _parent field in its mapping should just work:, +        PercolateResponse response = client().preparePercolate(), +                .setDocumentType("parent"), +                .setPercolateDoc(new PercolateSourceBuilder.DocBuilder().setDoc("field", "value")), +                .get();, +        assertMatchCount(response, 1);, +        assertThat(response.getMatches()[0].getId().string(), equalTo("1"));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +        if (context.sourceToParse().flyweight() == false) {, +    }, +++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +        // We don't fail p/c queries, but those queries are unusable because only a single document can be provided in, +    @Test, +    public void testPercolateDocumentWithParentField() throws Exception {, +        assertAcked(prepareCreate("index").addMapping("child", "_parent", "type=parent").addMapping("parent"));, +        client().prepareIndex("index", PercolatorService.TYPE_NAME, "1"), +                .setSource(jsonBuilder().startObject().field("query", matchAllQuery()).endObject()), +                .execute().actionGet();, +, +        // Just percolating a document that has a _parent field in its mapping should just work:, +        PercolateResponse response = client().preparePercolate(), +                .setDocumentType("parent"), +                .setPercolateDoc(new PercolateSourceBuilder.DocBuilder().setDoc("field", "value")), +                .get();, +        assertMatchCount(response, 1);, +        assertThat(response.getMatches()[0].getId().string(), equalTo("1"));, +    }, +, +++ b/docs/resiliency/index.asciidoc, +We have increased our test coverage to include scenarios tested by Jepsen. We make heavy use of randomization to expand on the scenarios that can be tested and to introduce new error conditions. You can follow the work on the master branch of the https://github.com/elasticsearch/elasticsearch/blob/master/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptions.java[`DiscoveryWithServiceDisruptions` class], where we will add more tests as time progresses.]