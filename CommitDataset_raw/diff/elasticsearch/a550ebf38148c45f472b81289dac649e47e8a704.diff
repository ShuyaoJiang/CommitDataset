[+++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.action.support.master;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.action.ActionFuture;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.action.support.ThreadedActionListener;, +import org.elasticsearch.action.support.replication.ClusterStateCreationUtils;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.DummyTransportAddress;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.discovery.MasterNotDiscoveredException;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.cluster.TestClusterService;, +import org.elasticsearch.test.transport.CapturingTransport;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.TransportService;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +import java.util.HashSet;, +import java.util.Set;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +, +public class TransportMasterNodeActionTests extends ESTestCase {, +    private static ThreadPool threadPool;, +, +    private TestClusterService clusterService;, +    private TransportService transportService;, +    private CapturingTransport transport;, +    private DiscoveryNode localNode;, +    private DiscoveryNode remoteNode;, +    private DiscoveryNode[] allNodes;, +, +    @BeforeClass, +    public static void beforeClass() {, +        threadPool = new ThreadPool("TransportMasterNodeActionTests");, +    }, +, +    @Override, +    @Before, +    public void setUp() throws Exception {, +        super.setUp();, +        transport = new CapturingTransport();, +        clusterService = new TestClusterService(threadPool);, +        transportService = new TransportService(transport, threadPool);, +        transportService.start();, +        localNode = new DiscoveryNode("local_node", DummyTransportAddress.INSTANCE, Version.CURRENT);, +        remoteNode = new DiscoveryNode("remote_node", DummyTransportAddress.INSTANCE, Version.CURRENT);, +        allNodes = new DiscoveryNode[] { localNode, remoteNode };, +    }, +, +    @AfterClass, +    public static void afterClass() {, +        ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS);, +        threadPool = null;]