[+++ b/src/main/java/org/elasticsearch/watcher/actions/email/service/EmailTemplate.java, +            Template[] templates = new Template[replyTo.length];, +            for (int i = 0; i < templates.length; i++) {, +                templates[i] = new Template(replyTo[i]);, +            }, +            return replyTo(templates);, +++ b/src/main/java/org/elasticsearch/watcher/actions/email/service/EmailTemplate.java, +            Template[] templates = new Template[replyTo.length];, +            for (int i = 0; i < templates.length; i++) {, +                templates[i] = new Template(replyTo[i]);, +            }, +            return replyTo(templates);, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherDateUtils.java, +    public static DateTime parseDate(String dateAsText) {, +        return parseDate(dateAsText, null);, +    }, +, +        return timeZone != null ? dateTime.toDateTime(timeZone) : dateTime;, +++ b/src/main/java/org/elasticsearch/watcher/actions/email/service/EmailTemplate.java, +            Template[] templates = new Template[replyTo.length];, +            for (int i = 0; i < templates.length; i++) {, +                templates[i] = new Template(replyTo[i]);, +            }, +            return replyTo(templates);, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherDateUtils.java, +    public static DateTime parseDate(String dateAsText) {, +        return parseDate(dateAsText, null);, +    }, +, +        return timeZone != null ? dateTime.toDateTime(timeZone) : dateTime;, +++ b/src/main/java/org/elasticsearch/watcher/watch/WatchExecutionResult.java, +import org.elasticsearch.common.joda.time.DateTime;, +import org.elasticsearch.watcher.support.WatcherDateUtils;, +import static org.elasticsearch.common.joda.time.DateTimeZone.UTC;, +, +    private final DateTime executionTime;, +        this(context.executionTime(), context.inputResult(), context.conditionResult(), context.throttleResult(), context.transformResult(), context.actionsResults());, +    WatchExecutionResult(DateTime executionTime, Input.Result inputResult, Condition.Result conditionResult, Throttler.Result throttleResult, @Nullable Transform.Result transformResult, ExecutableActions.Results actionsResults) {, +        this.executionTime = executionTime;, +    public DateTime executionTime() {, +        return executionTime;, +    }, +, +, +        if (builder.humanReadable()) {, +            builder.field(Parser.EXECUTION_TIME_FIELD.getPreferredName(), WatcherDateUtils.formatDate(executionTime));, +        } else {, +            builder.field(Parser.EXECUTION_TIME_FIELD.getPreferredName(), executionTime.getMillis());, +        }, +        public static final ParseField EXECUTION_TIME_FIELD = new ParseField("execution_time");, +            DateTime executionTime = null;, +                    } else if (EXECUTION_TIME_FIELD.match(currentFieldName)) {, +                        if (token == XContentParser.Token.VALUE_STRING) {, +                            try {, +                                executionTime = WatcherDateUtils.parseDate(parser.text());, +                            } catch (IllegalArgumentException iae) {, +                                throw new WatcherException("unable to parse watch execution [{}]. failed to parse date field [{}]", iae, wid, currentFieldName);, +                            }, +                        } else if (token == XContentParser.Token.VALUE_NUMBER){, +                            executionTime = new DateTime(parser.longValue(), UTC);, +                            throw new WatcherException("unable to parse watch execution [{}]. failed to parse date field [{}]. expected either a string or a numeric value", wid, currentFieldName);, +                        }, +                    } else {, +                        throw new WatcherException("unable to parse watch execution [{}]. unexpected field [{}]", wid, currentFieldName);, +            if (executionTime == null) {, +                throw new WatcherException("unable to parse watch execution [{}]. missing required date field [{}]", wid, EXECUTION_TIME_FIELD.getPreferredName());, +            }, +            return new WatchExecutionResult(executionTime, inputResult, conditionResult, throttleResult, transformResult, actionResults);, +++ b/src/main/java/org/elasticsearch/watcher/actions/email/service/EmailTemplate.java, +            Template[] templates = new Template[replyTo.length];, +            for (int i = 0; i < templates.length; i++) {, +                templates[i] = new Template(replyTo[i]);, +            }, +            return replyTo(templates);, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherDateUtils.java, +    public static DateTime parseDate(String dateAsText) {, +        return parseDate(dateAsText, null);, +    }, +, +        return timeZone != null ? dateTime.toDateTime(timeZone) : dateTime;, +++ b/src/main/java/org/elasticsearch/watcher/watch/WatchExecutionResult.java, +import org.elasticsearch.common.joda.time.DateTime;, +import org.elasticsearch.watcher.support.WatcherDateUtils;, +import static org.elasticsearch.common.joda.time.DateTimeZone.UTC;, +, +    private final DateTime executionTime;, +        this(context.executionTime(), context.inputResult(), context.conditionResult(), context.throttleResult(), context.transformResult(), context.actionsResults());, +    WatchExecutionResult(DateTime executionTime, Input.Result inputResult, Condition.Result conditionResult, Throttler.Result throttleResult, @Nullable Transform.Result transformResult, ExecutableActions.Results actionsResults) {, +        this.executionTime = executionTime;, +    public DateTime executionTime() {, +        return executionTime;, +    }, +, +, +        if (builder.humanReadable()) {, +            builder.field(Parser.EXECUTION_TIME_FIELD.getPreferredName(), WatcherDateUtils.formatDate(executionTime));, +        } else {, +            builder.field(Parser.EXECUTION_TIME_FIELD.getPreferredName(), executionTime.getMillis());, +        }, +        public static final ParseField EXECUTION_TIME_FIELD = new ParseField("execution_time");]