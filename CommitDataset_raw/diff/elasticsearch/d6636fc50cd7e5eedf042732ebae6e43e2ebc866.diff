[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +    private final ValuesSource.Numeric valuesSource;, +    public GeoHashGridAggregator(String name, AggregatorFactories factories, ValuesSource.Numeric valuesSource,, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +    private final ValuesSource.Numeric valuesSource;, +    public GeoHashGridAggregator(String name, AggregatorFactories factories, ValuesSource.Numeric valuesSource,, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +        ValuesSourceConfig<ValuesSource.GeoPoint> config = new ValuesSourceConfig<>(ValuesSource.GeoPoint.class);, +    private static class GeoGridFactory extends ValuesSourceAggregatorFactory<ValuesSource.GeoPoint> {, +        public GeoGridFactory(String name, ValuesSourceConfig<ValuesSource.GeoPoint> valueSourceConfig,, +        protected Aggregator create(final ValuesSource.GeoPoint valuesSource, long expectedBucketsCount, AggregationContext aggregationContext, Aggregator parent) {, +            ValuesSource.Numeric cellIdSource = new CellIdSource(cellIdValues, valuesSource.metaData());, +                cellIdSource = new ValuesSource.Numeric.SortedAndUnique(cellIdSource);, +            return new GeoHashGridAggregator(name, factories, cellIdSource, requiredSize, shardSize, aggregationContext, parent);, +            private ValuesSource.GeoPoint geoPointValues;, +            protected CellValues(ValuesSource.GeoPoint geoPointValues, int precision) {, +                geoValues = geoPointValues.geoPointValues();, +        private static class CellIdSource extends ValuesSource.Numeric {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +    private final ValuesSource.Numeric valuesSource;, +    public GeoHashGridAggregator(String name, AggregatorFactories factories, ValuesSource.Numeric valuesSource,, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +        ValuesSourceConfig<ValuesSource.GeoPoint> config = new ValuesSourceConfig<>(ValuesSource.GeoPoint.class);, +    private static class GeoGridFactory extends ValuesSourceAggregatorFactory<ValuesSource.GeoPoint> {, +        public GeoGridFactory(String name, ValuesSourceConfig<ValuesSource.GeoPoint> valueSourceConfig,, +        protected Aggregator create(final ValuesSource.GeoPoint valuesSource, long expectedBucketsCount, AggregationContext aggregationContext, Aggregator parent) {, +            ValuesSource.Numeric cellIdSource = new CellIdSource(cellIdValues, valuesSource.metaData());, +                cellIdSource = new ValuesSource.Numeric.SortedAndUnique(cellIdSource);, +            return new GeoHashGridAggregator(name, factories, cellIdSource, requiredSize, shardSize, aggregationContext, parent);, +            private ValuesSource.GeoPoint geoPointValues;, +            protected CellValues(ValuesSource.GeoPoint geoPointValues, int precision) {, +                geoValues = geoPointValues.geoPointValues();, +        private static class CellIdSource extends ValuesSource.Numeric {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +import org.elasticsearch.search.aggregations.support.format.ValueFormatter;, +import org.elasticsearch.search.aggregations.support.format.ValueParser;, +        ValuesSourceConfig<ValuesSource.Numeric> config = new ValuesSourceConfig<>(ValuesSource.Numeric.class);, +        ValueFormatter valueFormatter = format != null ? new ValueFormatter.DateTime(format) : null;, +                return new HistogramAggregator.Factory(aggregationName, config, valueFormatter, valueParser, rounding, order, keyed, minDocCount, extendedBounds, InternalDateHistogram.FACTORY);, +            return new HistogramAggregator.Factory(aggregationName, config, valueFormatter, null, rounding, order, keyed, minDocCount, extendedBounds, InternalDateHistogram.FACTORY);, +            valueFormatter = format == null ? new ValueFormatter.DateTime(DateFieldMapper.Defaults.DATE_TIME_FORMATTER) : null;, +            ValueParser valueParser = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER, DateFieldMapper.Defaults.TIME_UNIT));, +            return new HistogramAggregator.Factory(aggregationName, config, valueFormatter, valueParser, rounding, order, keyed, minDocCount, extendedBounds, InternalDateHistogram.FACTORY);, +            valueFormatter = new ValueFormatter.DateTime(((DateFieldMapper) mapper).dateTimeFormatter());, +        ValueParser valueParser = new ValueParser.DateMath(new DateMathParser(((DateFieldMapper) mapper).dateTimeFormatter(), DateFieldMapper.Defaults.TIME_UNIT));, +        return new HistogramAggregator.Factory(aggregationName, config, valueFormatter, valueParser, rounding, order, keyed, minDocCount, extendedBounds, InternalDateHistogram.FACTORY);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +    private final ValuesSource.Numeric valuesSource;, +    public GeoHashGridAggregator(String name, AggregatorFactories factories, ValuesSource.Numeric valuesSource,, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +        ValuesSourceConfig<ValuesSource.GeoPoint> config = new ValuesSourceConfig<>(ValuesSource.GeoPoint.class);, +    private static class GeoGridFactory extends ValuesSourceAggregatorFactory<ValuesSource.GeoPoint> {, +        public GeoGridFactory(String name, ValuesSourceConfig<ValuesSource.GeoPoint> valueSourceConfig,, +        protected Aggregator create(final ValuesSource.GeoPoint valuesSource, long expectedBucketsCount, AggregationContext aggregationContext, Aggregator parent) {, +            ValuesSource.Numeric cellIdSource = new CellIdSource(cellIdValues, valuesSource.metaData());, +                cellIdSource = new ValuesSource.Numeric.SortedAndUnique(cellIdSource);, +            return new GeoHashGridAggregator(name, factories, cellIdSource, requiredSize, shardSize, aggregationContext, parent);, +            private ValuesSource.GeoPoint geoPointValues;, +            protected CellValues(ValuesSource.GeoPoint geoPointValues, int precision) {, +                geoValues = geoPointValues.geoPointValues();, +        private static class CellIdSource extends ValuesSource.Numeric {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +import org.elasticsearch.search.aggregations.support.format.ValueFormatter;, +import org.elasticsearch.search.aggregations.support.format.ValueParser;, +        ValuesSourceConfig<ValuesSource.Numeric> config = new ValuesSourceConfig<>(ValuesSource.Numeric.class);, +        ValueFormatter valueFormatter = format != null ? new ValueFormatter.DateTime(format) : null;, +                return new HistogramAggregator.Factory(aggregationName, config, valueFormatter, valueParser, rounding, order, keyed, minDocCount, extendedBounds, InternalDateHistogram.FACTORY);, +            return new HistogramAggregator.Factory(aggregationName, config, valueFormatter, null, rounding, order, keyed, minDocCount, extendedBounds, InternalDateHistogram.FACTORY);, +            valueFormatter = format == null ? new ValueFormatter.DateTime(DateFieldMapper.Defaults.DATE_TIME_FORMATTER) : null;, +            ValueParser valueParser = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER, DateFieldMapper.Defaults.TIME_UNIT));, +            return new HistogramAggregator.Factory(aggregationName, config, valueFormatter, valueParser, rounding, order, keyed, minDocCount, extendedBounds, InternalDateHistogram.FACTORY);, +            valueFormatter = new ValueFormatter.DateTime(((DateFieldMapper) mapper).dateTimeFormatter());, +        ValueParser valueParser = new ValueParser.DateMath(new DateMathParser(((DateFieldMapper) mapper).dateTimeFormatter(), DateFieldMapper.Defaults.TIME_UNIT));, +        return new HistogramAggregator.Factory(aggregationName, config, valueFormatter, valueParser, rounding, order, keyed, minDocCount, extendedBounds, InternalDateHistogram.FACTORY);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/ExtendedBounds.java, +import org.elasticsearch.search.aggregations.support.format.ValueParser;, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +    private final ValuesSource.Numeric valuesSource;, +    public GeoHashGridAggregator(String name, AggregatorFactories factories, ValuesSource.Numeric valuesSource,, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +        ValuesSourceConfig<ValuesSource.GeoPoint> config = new ValuesSourceConfig<>(ValuesSource.GeoPoint.class);, +    private static class GeoGridFactory extends ValuesSourceAggregatorFactory<ValuesSource.GeoPoint> {, +        public GeoGridFactory(String name, ValuesSourceConfig<ValuesSource.GeoPoint> valueSourceConfig,, +        protected Aggregator create(final ValuesSource.GeoPoint valuesSource, long expectedBucketsCount, AggregationContext aggregationContext, Aggregator parent) {, +            ValuesSource.Numeric cellIdSource = new CellIdSource(cellIdValues, valuesSource.metaData());, +                cellIdSource = new ValuesSource.Numeric.SortedAndUnique(cellIdSource);, +            return new GeoHashGridAggregator(name, factories, cellIdSource, requiredSize, shardSize, aggregationContext, parent);, +            private ValuesSource.GeoPoint geoPointValues;, +            protected CellValues(ValuesSource.GeoPoint geoPointValues, int precision) {, +                geoValues = geoPointValues.geoPointValues();, +        private static class CellIdSource extends ValuesSource.Numeric {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +import org.elasticsearch.search.aggregations.support.ValuesSource;]