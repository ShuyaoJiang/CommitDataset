[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +import org.elasticsearch.monitor.jvm.JvmInfo;, +import java.util.Optional;, +     * Metadata and messaging for checking and reporting HotSpot, +     * issues., +     */, +    interface HotSpotCheck {, +        /**, +         * If this HotSpot check should be executed., +         *, +         * @return true if this HotSpot check should be executed, +         */, +        boolean check();, +, +        /**, +         * The error message to display when this HotSpot issue is, +         * present., +         *, +         * @return the error message for this HotSpot issue, +         */, +        String getErrorMessage();, +, +        /**, +         * The warning message for this HotSpot issue if a workaround, +         * exists and is used., +         *, +         * @return the warning message for this HotSpot issue, +         */, +        Optional<String> getWarningMessage();, +, +        /**, +         * The workaround for this HotSpot issue, if one exists., +         *, +         * @return the workaround for this HotSpot issue, if one exists, +         */, +        Optional<String> getWorkaround();, +    }, +, +    /**, +    static class HotspotBug implements HotSpotCheck {, +        public String getErrorMessage() {, +        public Optional<String> getWarningMessage() {, +            return Optional.of(sb.toString());, +        }, +, +        public boolean check() {, +            return true;, +        }, +, +        @Override, +        public Optional<String> getWorkaround() {, +            return Optional.of(workAround);, +        }, +    }, +, +    static class G1GCCheck implements HotSpotCheck {, +        @Override, +        public boolean check() {, +            return JvmInfo.jvmInfo().useG1GC().equals("true");, +        }, +, +        /** Returns an error message to the user for a broken version */, +        public String getErrorMessage() {, +            StringBuilder sb = new StringBuilder();, +            sb.append("Java version: ").append(fullVersion());, +            sb.append(" can cause data corruption");, +            sb.append(" when used with G1GC.");, +            sb.append(System.lineSeparator());, +            sb.append("Please upgrade the JVM, see ").append(JVM_RECOMMENDATIONS);, +            sb.append(" for current recommendations.");, +, +        @Override, +        public Optional<String> getWarningMessage() {, +            return Optional.empty();, +        }, +, +        @Override, +        public Optional<String> getWorkaround() {, +            return Optional.empty();, +        }, +    static final Map<String, HotSpotCheck> JVM_BROKEN_HOTSPOT_VERSIONS;, +        Map<String, HotSpotCheck> bugs = new HashMap<>();, +        G1GCCheck g1GcCheck = new G1GCCheck();, +        bugs.put("25.0-b70", g1GcCheck);, +        bugs.put("25.11-b03", g1GcCheck);, +        bugs.put("25.20-b23", g1GcCheck);, +        bugs.put("25.25-b02", g1GcCheck);, +        bugs.put("25.31-b07", g1GcCheck);, +            HotSpotCheck bug = JVM_BROKEN_HOTSPOT_VERSIONS.get(Constants.JVM_VERSION);, +            if (bug != null && bug.check()) {, +                if (bug.getWorkaround().isPresent() && ManagementFactory.getRuntimeMXBean().getInputArguments().contains(bug.getWorkaround().get())) {, +                    Loggers.getLogger(JVMCheck.class).warn(bug.getWarningMessage().get());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +import org.elasticsearch.monitor.jvm.JvmInfo;, +import java.util.Optional;, +     * Metadata and messaging for checking and reporting HotSpot, +     * issues., +     */, +    interface HotSpotCheck {, +        /**]