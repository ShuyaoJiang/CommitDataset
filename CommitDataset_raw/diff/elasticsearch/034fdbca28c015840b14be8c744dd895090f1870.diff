[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketUtils.java, +     * @param singleShard, +     *            whether a single shard is being queried, or multiple shards, +    public static int suggestShardSideQueueSize(int finalSize, boolean singleShard) {, +        if (singleShard) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketUtils.java, +     * @param singleShard, +     *            whether a single shard is being queried, or multiple shards, +    public static int suggestShardSideQueueSize(int finalSize, boolean singleShard) {, +        if (singleShard) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +            shardSize = BucketUtils.suggestShardSideQueueSize(requiredSize, context.numberOfShards() == 1);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketUtils.java, +     * @param singleShard, +     *            whether a single shard is being queried, or multiple shards, +    public static int suggestShardSideQueueSize(int finalSize, boolean singleShard) {, +        if (singleShard) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +            shardSize = BucketUtils.suggestShardSideQueueSize(requiredSize, context.numberOfShards() == 1);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketUtils.java, +     * @param singleShard, +     *            whether a single shard is being queried, or multiple shards, +    public static int suggestShardSideQueueSize(int finalSize, boolean singleShard) {, +        if (singleShard) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +            shardSize = BucketUtils.suggestShardSideQueueSize(requiredSize, context.numberOfShards() == 1);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTextAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketUtils.java, +     * @param singleShard, +     *            whether a single shard is being queried, or multiple shards, +    public static int suggestShardSideQueueSize(int finalSize, boolean singleShard) {, +        if (singleShard) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +            shardSize = BucketUtils.suggestShardSideQueueSize(requiredSize, context.numberOfShards() == 1);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTextAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketUtils.java, +     * @param singleShard, +     *            whether a single shard is being queried, or multiple shards, +    public static int suggestShardSideQueueSize(int finalSize, boolean singleShard) {, +        if (singleShard) {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +            shardSize = BucketUtils.suggestShardSideQueueSize(requiredSize, context.numberOfShards() == 1);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTextAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java, +                    context.numberOfShards() == 1));, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/BucketUtilsTests.java, +                () -> BucketUtils.suggestShardSideQueueSize(0, randomBoolean()));, +            assertEquals(size, BucketUtils.suggestShardSideQueueSize( size, true));, +            final int shardSize = BucketUtils.suggestShardSideQueueSize( size, numberOfShards == 1);, +            final int shardSize = BucketUtils.suggestShardSideQueueSize( size, numberOfShards == 1);]