[+++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        for (Setting<?> setting : complexMatchers.values()) {, +            if (setting.exists(source) == false) {, +                builder.put(setting.getKey(), setting.getRaw(defaultSettings));, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        for (Setting<?> setting : complexMatchers.values()) {, +            if (setting.exists(source) == false) {, +                builder.put(setting.getKey(), setting.getRaw(defaultSettings));, +            }, +        }, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +import static org.hamcrest.CoreMatchers.equalTo;, +, +        Setting<Integer> fooBarBaz = Setting.intSetting("foo.bar.baz", 1, Property.NodeScope);, +        Setting<Integer> fooBar = Setting.intSetting("foo.bar", 1, Property.Dynamic, Property.NodeScope);, +        Setting<List<String>> foorBarQuux =, +                Setting.listSetting("foo.bar.quux", Arrays.asList("a", "b", "c"), Function.identity(), Property.NodeScope);, +        ClusterSettings settings = new ClusterSettings(Settings.EMPTY, new HashSet<>(Arrays.asList(fooBar, fooBarBaz, foorBarQuux)));, +        assertThat(diff.getAsMap().size(), equalTo(2));, +        assertThat(diff.getAsInt("foo.bar.baz", null), equalTo(1));, +        assertThat(diff.get("foo.bar.quux", null), equalTo("[\"a\",\"b\",\"c\"]"));, +        diff = settings.diff(, +                Settings.builder().put("foo.bar", 5).build(),, +                Settings.builder().put("foo.bar.baz", 17).put("foo.bar.quux", "d,e,f").build());, +        assertThat(diff.getAsMap().size(), equalTo(2));, +        assertThat(diff.getAsInt("foo.bar.baz", null), equalTo(17));, +        assertThat(diff.get("foo.bar.quux", null), equalTo("[\"d\",\"e\",\"f\"]"));]