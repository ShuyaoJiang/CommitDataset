[+++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/xpack/watcher/input/http/ExecutableHttpInput.java, +        Map<String, Object> payloadMap = new HashMap<>();, +        payloadMap.put("_status_code", response.status());, +        if (headers.isEmpty() == false) {, +            payloadMap.put("_headers", headers);, +        }, +            return new HttpInput.Result(request, response.status(), new Payload.Simple(payloadMap));, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/xpack/watcher/input/http/ExecutableHttpInput.java, +        Map<String, Object> payloadMap = new HashMap<>();, +        payloadMap.put("_status_code", response.status());, +        if (headers.isEmpty() == false) {, +            payloadMap.put("_headers", headers);, +        }, +            return new HttpInput.Result(request, response.status(), new Payload.Simple(payloadMap));, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/xpack/watcher/input/http/HttpInput.java, +        final int statusCode;, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/xpack/watcher/input/http/ExecutableHttpInput.java, +        Map<String, Object> payloadMap = new HashMap<>();, +        payloadMap.put("_status_code", response.status());, +        if (headers.isEmpty() == false) {, +            payloadMap.put("_headers", headers);, +        }, +            return new HttpInput.Result(request, response.status(), new Payload.Simple(payloadMap));, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/xpack/watcher/input/http/HttpInput.java, +        final int statusCode;, +++ b/elasticsearch/x-pack/watcher/src/test/java/org/elasticsearch/xpack/watcher/input/http/HttpInputTests.java, +    public void testThatStatusCodeIsSetInResultAndPayload() throws Exception {, +        HttpResponse response = new HttpResponse(200);, +        when(httpClient.execute(any(HttpRequest.class))).thenReturn(response);, +, +        HttpRequestTemplate.Builder request = HttpRequestTemplate.builder("localhost", 8080);, +        HttpInput httpInput = InputBuilders.httpInput(request.build()).build();, +        ExecutableHttpInput input = new ExecutableHttpInput(httpInput, logger, httpClient, templateEngine);, +, +        WatchExecutionContext ctx = createWatchExecutionContext();, +        HttpInput.Result result = input.execute(ctx, new Payload.Simple());, +        assertThat(result.statusCode, is(200));, +        assertThat(result.payload().data(), hasKey("_status_code"));, +        assertThat(result.payload().data().get("_status_code"), is(200));, +    }, +]