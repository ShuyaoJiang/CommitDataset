[+++ b/elasticsearch/x-pack/build.gradle, +  from(sourceSets.main.resources.srcDirs) {, +    exclude '**/public.key', +  }, +++ b/elasticsearch/x-pack/build.gradle, +  from(sourceSets.main.resources.srcDirs) {, +    exclude '**/public.key', +  }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/MarvelPluginTests.java, +import org.elasticsearch.xpack.XPackPlugin;, +                if (XPackPlugin.NAME.equals(plugin.getName())) {, +            assertThat("x-pack plugin not found", found, equalTo(true));, +++ b/elasticsearch/x-pack/build.gradle, +  from(sourceSets.main.resources.srcDirs) {, +    exclude '**/public.key', +  }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/MarvelPluginTests.java, +import org.elasticsearch.xpack.XPackPlugin;, +                if (XPackPlugin.NAME.equals(plugin.getName())) {, +            assertThat("x-pack plugin not found", found, equalTo(true));, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/test/MarvelIntegTestCase.java, +        return Settings.builder().put(super.transportClientSettings()), +                .put("shield.enabled", false), +                .build();, +        return Collections.singletonList(XPackPlugin.class);, +++ b/elasticsearch/x-pack/build.gradle, +  from(sourceSets.main.resources.srcDirs) {, +    exclude '**/public.key', +  }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/MarvelPluginTests.java, +import org.elasticsearch.xpack.XPackPlugin;, +                if (XPackPlugin.NAME.equals(plugin.getName())) {, +            assertThat("x-pack plugin not found", found, equalTo(true));, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/test/MarvelIntegTestCase.java, +        return Settings.builder().put(super.transportClientSettings()), +                .put("shield.enabled", false), +                .build();, +        return Collections.singletonList(XPackPlugin.class);, +++ /dev/null, +++ b/elasticsearch/x-pack/build.gradle, +  from(sourceSets.main.resources.srcDirs) {, +    exclude '**/public.key', +  }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/MarvelPluginTests.java, +import org.elasticsearch.xpack.XPackPlugin;, +                if (XPackPlugin.NAME.equals(plugin.getName())) {, +            assertThat("x-pack plugin not found", found, equalTo(true));, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/test/MarvelIntegTestCase.java, +        return Settings.builder().put(super.transportClientSettings()), +                .put("shield.enabled", false), +                .build();, +        return Collections.singletonList(XPackPlugin.class);, +++ /dev/null, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/ShieldPluginEnabledDisabledTests.java, +import org.elasticsearch.xpack.XPackPlugin;, +    @Override, +    protected Class<? extends XPackPlugin> xpackPluginClass() {, +        return LicensingTests.InternalXPackPlugin.class;, +    }, +++ b/elasticsearch/x-pack/build.gradle, +  from(sourceSets.main.resources.srcDirs) {, +    exclude '**/public.key', +  }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/MarvelPluginTests.java, +import org.elasticsearch.xpack.XPackPlugin;, +                if (XPackPlugin.NAME.equals(plugin.getName())) {, +            assertThat("x-pack plugin not found", found, equalTo(true));, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/test/MarvelIntegTestCase.java, +        return Settings.builder().put(super.transportClientSettings()), +                .put("shield.enabled", false), +                .build();, +        return Collections.singletonList(XPackPlugin.class);, +++ /dev/null, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/ShieldPluginEnabledDisabledTests.java, +import org.elasticsearch.xpack.XPackPlugin;, +    @Override, +    protected Class<? extends XPackPlugin> xpackPluginClass() {, +        return LicensingTests.InternalXPackPlugin.class;, +    }, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/audit/index/IndexAuditTrailTests.java, +        Map<String, Object> sourceMap = hit.sourceAsMap();, +            assertEquals(remoteHostAddress(), sourceMap.get("origin_address"));, +            assertEquals("local[local_host]", sourceMap.get("origin_address"));, +        assertEquals("_action", sourceMap.get("action"));, +        assertEquals("transport", sourceMap.get("origin_type"));, +            List<Object> indices = (List<Object>) sourceMap.get("indices");, +        assertEquals(sourceMap.get("request"), message.getClass().getSimpleName());, +        Map<String, Object> sourceMap = hit.sourceAsMap();, +        assertThat(NetworkAddress.formatAddress(InetAddress.getLoopbackAddress()), equalTo(sourceMap.get("origin_address")));, +        assertThat("_uri", equalTo(sourceMap.get("uri")));, +        assertThat(sourceMap.get("origin_type"), is("rest"));, +        assertThat(sourceMap.get("request_body"), notNullValue());, +        Map<String, Object> sourceMap = hit.sourceAsMap();, +            assertEquals(remoteHostAddress(), sourceMap.get("origin_address"));, +            assertEquals("local[local_host]", sourceMap.get("origin_address"));, +        assertEquals("_principal", sourceMap.get("principal"));, +        assertEquals("_action", sourceMap.get("action"));, +        assertEquals("transport", sourceMap.get("origin_type"));, +        assertEquals(sourceMap.get("request"), message.getClass().getSimpleName());, +        Map<String, Object> sourceMap = hit.sourceAsMap();]