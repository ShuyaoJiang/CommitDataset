[+++ b/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.client.ClusterAdminClient;, +import org.elasticsearch.client.FilterClient;, +import org.elasticsearch.client.IndicesAdminClient;, +import java.util.Set;, +, + * {@link org.elasticsearch.rest.RestController#registerRelevantHeaders(String...)}, +    private final RestController controller;, +    private final Client client;, +    protected BaseRestHandler(Settings settings, RestController controller, Client client) {, +        this.controller = controller;, +        this.client = client;, +        handleRequest(request, channel, new HeadersAndContextCopyClient(client, request, controller.relevantHeaders()));, +, +    static final class HeadersAndContextCopyClient extends FilterClient {, +, +        private final RestRequest restRequest;, +        private final IndicesAdmin indicesAdmin;, +        private final ClusterAdmin clusterAdmin;, +        private final Set<String> headers;, +, +        HeadersAndContextCopyClient(Client in, RestRequest restRequest, Set<String> headers) {, +            super(in);, +            this.restRequest = restRequest;, +            this.indicesAdmin = new IndicesAdmin(in.admin().indices(), restRequest, headers);, +            this.clusterAdmin = new ClusterAdmin(in.admin().cluster(), restRequest, headers);, +            this.headers = headers;, +        }, +, +        private static void copyHeadersAndContext(ActionRequest actionRequest, RestRequest restRequest, Set<String> headers) {, +            for (String usefulHeader : headers) {, +                String headerValue = restRequest.header(usefulHeader);, +                if (headerValue != null) {, +                    actionRequest.putHeader(usefulHeader, headerValue);, +                }, +            }, +            actionRequest.copyContextFrom(restRequest);, +        }, +, +        @Override, +        public <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder, Client>> ActionFuture<Response> execute(Action<Request, Response, RequestBuilder, Client> action, Request request) {, +            copyHeadersAndContext(request, restRequest, headers);, +            return super.execute(action, request);, +        }, +, +        @Override, +        public <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder, Client>> void execute(Action<Request, Response, RequestBuilder, Client> action, Request request, ActionListener<Response> listener) {, +            copyHeadersAndContext(request, restRequest, headers);, +            super.execute(action, request, listener);, +        }, +, +        @Override, +        public ClusterAdminClient cluster() {, +            return clusterAdmin;, +        }, +, +        @Override, +        public IndicesAdminClient indices() {, +            return indicesAdmin;, +        }, +, +        private static final class ClusterAdmin extends FilterClient.ClusterAdmin {, +, +            private final RestRequest restRequest;, +            private final Set<String> headers;, +, +            private ClusterAdmin(ClusterAdminClient in, RestRequest restRequest, Set<String> headers) {, +                super(in);, +                this.restRequest = restRequest;, +                this.headers = headers;, +            }, +, +            @Override, +            public <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder, ClusterAdminClient>> ActionFuture<Response> execute(Action<Request, Response, RequestBuilder, ClusterAdminClient> action, Request request) {, +                copyHeadersAndContext(request, restRequest, headers);, +                return super.execute(action, request);, +            }, +, +            @Override, +            public <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder, ClusterAdminClient>> void execute(Action<Request, Response, RequestBuilder, ClusterAdminClient> action, Request request, ActionListener<Response> listener) {, +                copyHeadersAndContext(request, restRequest, headers);, +                super.execute(action, request, listener);, +            }, +        }, +, +        private final class IndicesAdmin extends FilterClient.IndicesAdmin {, +, +            private final RestRequest restRequest;, +            private final Set<String> headers;, +, +            private IndicesAdmin(IndicesAdminClient in, RestRequest restRequest, Set<String> headers) {, +                super(in);, +                this.restRequest = restRequest;, +                this.headers = headers;, +            }, +, +            @Override, +            public <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder, IndicesAdminClient>> ActionFuture<Response> execute(Action<Request, Response, RequestBuilder, IndicesAdminClient> action, Request request) {, +                copyHeadersAndContext(request, restRequest, headers);]