[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +                        JobState.CLOSED + " or " + JobState.FAILED + "]");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +                        JobState.CLOSED + " or " + JobState.FAILED + "]");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +    static String[] indicesOfInterest(ClusterState clusterState, String job) {, +        String jobResultIndex = AnomalyDetectorsIndex.getPhysicalIndexFromState(clusterState, job);, +        String[] indices = indicesOfInterest(clusterState, jobId);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +                        JobState.CLOSED + " or " + JobState.FAILED + "]");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +    static String[] indicesOfInterest(ClusterState clusterState, String job) {, +        String jobResultIndex = AnomalyDetectorsIndex.getPhysicalIndexFromState(clusterState, job);, +        String[] indices = indicesOfInterest(clusterState, jobId);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.xpack.ml.MlMetadata;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +                        JobState.CLOSED + " or " + JobState.FAILED + "]");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +    static String[] indicesOfInterest(ClusterState clusterState, String job) {, +        String jobResultIndex = AnomalyDetectorsIndex.getPhysicalIndexFromState(clusterState, job);, +        String[] indices = indicesOfInterest(clusterState, jobId);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.xpack.ml.MlMetadata;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/Job.java, +import org.elasticsearch.xpack.ml.job.persistence.AnomalyDetectorsIndex;, +        return AnomalyDetectorsIndex.RESULTS_INDEX_PREFIX + resultsIndexName;, +    }, +, +    /**, +     * Private version of getResultsIndexName so that a job can be built from another, +     * job and pass index name validation, +     * @return The job's index name, minus prefix, +     */, +    private String getResultsIndexNameNoPrefix() {, +            this.resultsIndexName = job.getResultsIndexNameNoPrefix();, +                resultsIndexName = AnomalyDetectorsIndex.RESULTS_INDEX_DEFAULT;, +                throw new IllegalArgumentException(, +                        Messages.getMessage(Messages.INVALID_ID, RESULTS_INDEX_NAME.getPreferredName(), resultsIndexName));, +            } else if (!resultsIndexName.equals(AnomalyDetectorsIndex.RESULTS_INDEX_DEFAULT)) {, +                // User-defined names are prepended with "custom", +                // Conditional guards against multiple prepending due to updates instead of first creation, +                resultsIndexName = resultsIndexName.startsWith("custom-"), +                        ? resultsIndexName, +                        : "custom-" + resultsIndexName;, +                    modelSnapshotRetentionDays, resultsRetentionDays, customSettings, modelSnapshotId,, +                    resultsIndexName, deleted);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +                        JobState.CLOSED + " or " + JobState.FAILED + "]");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +    static String[] indicesOfInterest(ClusterState clusterState, String job) {, +        String jobResultIndex = AnomalyDetectorsIndex.getPhysicalIndexFromState(clusterState, job);, +        String[] indices = indicesOfInterest(clusterState, jobId);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.xpack.ml.MlMetadata;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/Job.java, +import org.elasticsearch.xpack.ml.job.persistence.AnomalyDetectorsIndex;, +        return AnomalyDetectorsIndex.RESULTS_INDEX_PREFIX + resultsIndexName;, +    }, +, +    /**, +     * Private version of getResultsIndexName so that a job can be built from another, +     * job and pass index name validation, +     * @return The job's index name, minus prefix, +     */, +    private String getResultsIndexNameNoPrefix() {, +            this.resultsIndexName = job.getResultsIndexNameNoPrefix();, +                resultsIndexName = AnomalyDetectorsIndex.RESULTS_INDEX_DEFAULT;, +                throw new IllegalArgumentException(, +                        Messages.getMessage(Messages.INVALID_ID, RESULTS_INDEX_NAME.getPreferredName(), resultsIndexName));, +            } else if (!resultsIndexName.equals(AnomalyDetectorsIndex.RESULTS_INDEX_DEFAULT)) {, +                // User-defined names are prepended with "custom", +                // Conditional guards against multiple prepending due to updates instead of first creation, +                resultsIndexName = resultsIndexName.startsWith("custom-"), +                        ? resultsIndexName, +                        : "custom-" + resultsIndexName;, +                    modelSnapshotRetentionDays, resultsRetentionDays, customSettings, modelSnapshotId,, +                    resultsIndexName, deleted);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/AnomalyDetectorsIndex.java, +    public static final String RESULTS_INDEX_PREFIX = ".ml-anomalies-";, +    public static final String RESULTS_INDEX_DEFAULT = "shared";, +    public static String jobResultsAliasedName(String jobId) {, +     * Retrieves the currently defined physical index from the job state, +    public static String getPhysicalIndexFromState(ClusterState state, String jobId) {, +        return meta.getJobs().get(jobId).getResultsIndexName();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +                        JobState.CLOSED + " or " + JobState.FAILED + "]");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +    static String[] indicesOfInterest(ClusterState clusterState, String job) {, +        String jobResultIndex = AnomalyDetectorsIndex.getPhysicalIndexFromState(clusterState, job);, +        String[] indices = indicesOfInterest(clusterState, jobId);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.xpack.ml.MlMetadata;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/Job.java, +import org.elasticsearch.xpack.ml.job.persistence.AnomalyDetectorsIndex;, +        return AnomalyDetectorsIndex.RESULTS_INDEX_PREFIX + resultsIndexName;, +    }, +, +    /**, +     * Private version of getResultsIndexName so that a job can be built from another]