[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +public final class NotSerializableExceptionWrapper extends ElasticsearchException.WithRestHeadersException {, +    public NotSerializableExceptionWrapper(Throwable other, Map<String, List<String>> headers) {, +        super(other.getMessage(), other.getCause(), headers);, +    public NotSerializableExceptionWrapper(WithRestHeadersException other) {, +        this(other, other.getHeaders());, +    }, +, +    public NotSerializableExceptionWrapper(Throwable other) {, +        this(other, Collections.EMPTY_MAP);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +public final class NotSerializableExceptionWrapper extends ElasticsearchException.WithRestHeadersException {, +    public NotSerializableExceptionWrapper(Throwable other, Map<String, List<String>> headers) {, +        super(other.getMessage(), other.getCause(), headers);, +    public NotSerializableExceptionWrapper(WithRestHeadersException other) {, +        this(other, other.getHeaders());, +    }, +, +    public NotSerializableExceptionWrapper(Throwable other) {, +        this(other, Collections.EMPTY_MAP);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +public final class NotSerializableExceptionWrapper extends ElasticsearchException.WithRestHeadersException {, +    public NotSerializableExceptionWrapper(Throwable other, Map<String, List<String>> headers) {, +        super(other.getMessage(), other.getCause(), headers);, +    public NotSerializableExceptionWrapper(WithRestHeadersException other) {, +        this(other, other.getHeaders());, +    }, +, +    public NotSerializableExceptionWrapper(Throwable other) {, +        this(other, Collections.EMPTY_MAP);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +            } else if (throwable instanceof AlreadyClosedException) {, +            } else if (throwable instanceof IllegalStateException) {, +                } else if (throwable instanceof ElasticsearchException.WithRestHeadersException) {, +                    // ensure we transport also the headers, +                    ex = new NotSerializableExceptionWrapper((ElasticsearchException.WithRestHeadersException)throwable);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;]