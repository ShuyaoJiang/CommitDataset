[+++ b/x-pack/qa/sql/multinode/src/test/java/org/elasticsearch/xpack/qa/sql/multinode/RestSqlMultinodeIT.java, +import org.elasticsearch.client.Request;, +        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")));, +        Request request = new Request("PUT", "/test");, +        request.setJsonEntity(Strings.toString(index));, +        client().performRequest(request);, +        Request request = new Request("PUT", "/test/test/_bulk");, +        request.addParameter("refresh", "true");, +, +        request.setJsonEntity(bulk.toString());, +, +        client().performRequest(request);, +        Request request = new Request("POST", "/_xpack/sql");, +        if (false == mode.isEmpty()) {, +            request.addParameter("mode", mode);, +        request.setJsonEntity("{\"query\": \"SELECT COUNT(*) FROM test\"}");, +        Map<String, Object> actual = responseToMap(client.performRequest(request));, +++ b/x-pack/qa/sql/multinode/src/test/java/org/elasticsearch/xpack/qa/sql/multinode/RestSqlMultinodeIT.java, +import org.elasticsearch.client.Request;, +        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")));, +        Request request = new Request("PUT", "/test");, +        request.setJsonEntity(Strings.toString(index));, +        client().performRequest(request);, +        Request request = new Request("PUT", "/test/test/_bulk");, +        request.addParameter("refresh", "true");, +, +        request.setJsonEntity(bulk.toString());, +, +        client().performRequest(request);, +        Request request = new Request("POST", "/_xpack/sql");, +        if (false == mode.isEmpty()) {, +            request.addParameter("mode", mode);, +        request.setJsonEntity("{\"query\": \"SELECT COUNT(*) FROM test\"}");, +        Map<String, Object> actual = responseToMap(client.performRequest(request));, +++ b/x-pack/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/RestSqlSecurityIT.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("POST", "/_xpack/sql");, +            if (false == mode.isEmpty()) {, +                request.addParameter("mode", mode);, +            if (asUser != null) {, +                request.setHeaders(new BasicHeader("es-security-runas-user", asUser));, +            }, +            request.setEntity(entity);, +            return toMap(client().performRequest(request));, +++ b/x-pack/qa/sql/multinode/src/test/java/org/elasticsearch/xpack/qa/sql/multinode/RestSqlMultinodeIT.java, +import org.elasticsearch.client.Request;, +        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")));, +        Request request = new Request("PUT", "/test");, +        request.setJsonEntity(Strings.toString(index));, +        client().performRequest(request);, +        Request request = new Request("PUT", "/test/test/_bulk");, +        request.addParameter("refresh", "true");, +, +        request.setJsonEntity(bulk.toString());, +, +        client().performRequest(request);, +        Request request = new Request("POST", "/_xpack/sql");, +        if (false == mode.isEmpty()) {, +            request.addParameter("mode", mode);, +        request.setJsonEntity("{\"query\": \"SELECT COUNT(*) FROM test\"}");, +        Map<String, Object> actual = responseToMap(client.performRequest(request));, +++ b/x-pack/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/RestSqlSecurityIT.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("POST", "/_xpack/sql");, +            if (false == mode.isEmpty()) {, +                request.addParameter("mode", mode);, +            if (asUser != null) {, +                request.setHeaders(new BasicHeader("es-security-runas-user", asUser));, +            }, +            request.setEntity(entity);, +            return toMap(client().performRequest(request));, +++ b/x-pack/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/SqlSecurityTestCase.java, +import org.elasticsearch.client.Request;, +        Request request = new Request("PUT", "/_bulk");, +        request.addParameter("refresh", "true");, +, +        request.setJsonEntity(bulk.toString());, +        client().performRequest(request);, +            adminClient().performRequest(new Request("DELETE", "*"));, +        Request request = new Request("PUT", "/_xpack/security/user/" + name);, +        XContentBuilder user = JsonXContent.contentBuilder().prettyPrint();, +        user.startObject(); {, +        request.setJsonEntity(Strings.toString(user));, +        client().performRequest(request);, +++ b/x-pack/qa/sql/multinode/src/test/java/org/elasticsearch/xpack/qa/sql/multinode/RestSqlMultinodeIT.java, +import org.elasticsearch.client.Request;, +        Map<String, Object> nodesInfo = responseToMap(client().performRequest(new Request("GET", "/_nodes")));, +        Request request = new Request("PUT", "/test");, +        request.setJsonEntity(Strings.toString(index));, +        client().performRequest(request);, +        Request request = new Request("PUT", "/test/test/_bulk");, +        request.addParameter("refresh", "true");, +, +        request.setJsonEntity(bulk.toString());, +, +        client().performRequest(request);, +        Request request = new Request("POST", "/_xpack/sql");, +        if (false == mode.isEmpty()) {, +            request.addParameter("mode", mode);, +        request.setJsonEntity("{\"query\": \"SELECT COUNT(*) FROM test\"}");]