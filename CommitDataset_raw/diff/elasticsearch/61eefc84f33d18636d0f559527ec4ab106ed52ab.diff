[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;, +    static Request createSnapshot(CreateSnapshotRequest createSnapshotRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_snapshot"), +            .addPathPart(createSnapshotRequest.repository()), +            .addPathPart(createSnapshotRequest.snapshot()), +            .build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +        Params params = new Params(request);, +        params.withMasterTimeout(createSnapshotRequest.masterNodeTimeout());, +        params.withWaitForCompletion(createSnapshotRequest.waitForCompletion());, +        request.setEntity(createEntity(createSnapshotRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;, +    static Request createSnapshot(CreateSnapshotRequest createSnapshotRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_snapshot"), +            .addPathPart(createSnapshotRequest.repository()), +            .addPathPart(createSnapshotRequest.snapshot()), +            .build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +        Params params = new Params(request);, +        params.withMasterTimeout(createSnapshotRequest.masterNodeTimeout());, +        params.withWaitForCompletion(createSnapshotRequest.waitForCompletion());, +        request.setEntity(createEntity(createSnapshotRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;, +     * Creates a snapshot., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public CreateSnapshotResponse createSnapshot(CreateSnapshotRequest createSnapshotRequest, RequestOptions options), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(createSnapshotRequest, RequestConverters::createSnapshot, options,, +            CreateSnapshotResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously creates a snapshot., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public void createSnapshotAsync(CreateSnapshotRequest createSnapshotRequest, RequestOptions options,, +                                    ActionListener<CreateSnapshotResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(createSnapshotRequest, RequestConverters::createSnapshot, options,, +            CreateSnapshotResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;, +    static Request createSnapshot(CreateSnapshotRequest createSnapshotRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_snapshot"), +            .addPathPart(createSnapshotRequest.repository()), +            .addPathPart(createSnapshotRequest.snapshot()), +            .build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +        Params params = new Params(request);, +        params.withMasterTimeout(createSnapshotRequest.masterNodeTimeout());, +        params.withWaitForCompletion(createSnapshotRequest.waitForCompletion());, +        request.setEntity(createEntity(createSnapshotRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;, +     * Creates a snapshot., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public CreateSnapshotResponse createSnapshot(CreateSnapshotRequest createSnapshotRequest, RequestOptions options), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(createSnapshotRequest, RequestConverters::createSnapshot, options,, +            CreateSnapshotResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously creates a snapshot., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public void createSnapshotAsync(CreateSnapshotRequest createSnapshotRequest, RequestOptions options,, +                                    ActionListener<CreateSnapshotResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(createSnapshotRequest, RequestConverters::createSnapshot, options,, +            CreateSnapshotResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java]