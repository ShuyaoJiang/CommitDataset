[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +package org.elasticsearch.search.aggregations.bucket;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.Scorer;, +import org.elasticsearch.script.CompiledScript;, +import org.elasticsearch.script.ExecutableScript;, +import org.elasticsearch.script.LeafSearchScript;, +import org.elasticsearch.script.ScriptEngineService;, +import org.elasticsearch.script.ScriptModule;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.script.ScriptService.ScriptType;, +import org.elasticsearch.search.lookup.LeafSearchLookup;, +import org.elasticsearch.search.lookup.SearchLookup;, +import java.util.Map;, +public class DateHistogramIT extends ESIntegTestCase {, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Arrays.asList(, +                ExtractFieldScriptPlugin.class);, +    }, +, +                .addAggregation(dateHistogram("histo").script(new Script("date", ScriptType.INLINE, ExtractFieldScriptEngine.NAME, null)).interval(DateHistogramInterval.MONTH)), +                        .script(new Script("date", ScriptType.INLINE, ExtractFieldScriptEngine.NAME, null)).interval(DateHistogramInterval.MONTH), +                .addAggregation(dateHistogram("histo").script(new Script("dates", ScriptType.INLINE, ExtractFieldScriptEngine.NAME, null)).interval(DateHistogramInterval.MONTH)), +                        .script(new Script("dates", ScriptType.INLINE, ExtractFieldScriptEngine.NAME, null)).interval(DateHistogramInterval.MONTH), +, +    public static class ExtractFieldScriptPlugin extends Plugin {, +, +        @Override, +        public String name() {, +            return ExtractFieldScriptEngine.NAME;, +        }, +, +        @Override, +        public String description() {, +            return "Mock script engine for " + DateHistogramIT.class;, +        }, +, +        public void onModule(ScriptModule module) {, +            module.addScriptEngine(ExtractFieldScriptEngine.class);, +        }, +, +    }, +, +    public static class ExtractFieldScriptEngine implements ScriptEngineService {, +, +        public static final String NAME = "extract_field";, +, +        @Override, +        public void close() throws IOException {, +        }, +, +        @Override, +        public String[] types() {, +            return new String[] { NAME };, +        }, +, +        @Override, +        public String[] extensions() {, +            return types();, +        }, +, +        @Override, +        public boolean sandboxed() {, +            return true;, +        }, +, +        @Override, +        public Object compile(String script) {, +            return script;, +        }, +, +        @Override, +        public ExecutableScript executable(CompiledScript compiledScript, Map<String, Object> params) {, +            throw new UnsupportedOperationException();, +        }, +        @Override, +        public SearchScript search(CompiledScript compiledScript, SearchLookup lookup, Map<String, Object> vars) {, +            return new SearchScript() {, +, +                @Override, +                public LeafSearchScript getLeafSearchScript(LeafReaderContext context) throws IOException {, +, +                    final LeafSearchLookup leafLookup = lookup.getLeafSearchLookup(context);, +, +                    return new LeafSearchScript() {, +, +                        @Override, +                        public Object unwrap(Object value) {, +                            return null;, +                        }, +, +                        @Override, +                        public void setNextVar(String name, Object value) {, +                        }, +, +                        @Override, +                        public Object run() {, +                            String fieldName = (String) compiledScript.compiled();, +                            return leafLookup.doc().get(fieldName);]