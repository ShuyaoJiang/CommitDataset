[+++ b/docs/reference/modules/scripting/painless.asciidoc, +    "inline": "ctx._source.last = params.last; ctx._source.nick = params.nick",, +++ b/docs/reference/modules/scripting/painless.asciidoc, +    "inline": "ctx._source.last = params.last; ctx._source.nick = params.nick",, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    | DO block WHILE LP expression RP ( SEMICOLON | EOF )                                    # do, +    | declaration ( SEMICOLON | EOF )                                                        # decl, +    | CONTINUE ( SEMICOLON | EOF )                                                           # continue, +    | BREAK ( SEMICOLON | EOF )                                                              # break, +    | RETURN expression ( SEMICOLON | EOF )                                                  # return, +    | THROW expression ( SEMICOLON | EOF )                                                   # throw, +    | expression ( SEMICOLON | EOF )                                                         # expr, +++ b/docs/reference/modules/scripting/painless.asciidoc, +    "inline": "ctx._source.last = params.last; ctx._source.nick = params.nick",, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    | DO block WHILE LP expression RP ( SEMICOLON | EOF )                                    # do, +    | declaration ( SEMICOLON | EOF )                                                        # decl, +    | CONTINUE ( SEMICOLON | EOF )                                                           # continue, +    | BREAK ( SEMICOLON | EOF )                                                              # break, +    | RETURN expression ( SEMICOLON | EOF )                                                  # return, +    | THROW expression ( SEMICOLON | EOF )                                                   # throw, +    | expression ( SEMICOLON | EOF )                                                         # expr, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java, +    public TerminalNode EOF() { return getToken(PainlessParser.EOF, 0); }, +    public TerminalNode EOF() { return getToken(PainlessParser.EOF, 0); }, +    public TerminalNode EOF() { return getToken(PainlessParser.EOF, 0); }, +    public TerminalNode EOF() { return getToken(PainlessParser.EOF, 0); }, +    public TerminalNode EOF() { return getToken(PainlessParser.EOF, 0); }, +    public TerminalNode EOF() { return getToken(PainlessParser.EOF, 0); }, +    public TerminalNode EOF() { return getToken(PainlessParser.EOF, 0); }, +      setState(125);, +      switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {, +        _la = _input.LA(1);, +        if ( !(_la==EOF || _la==SEMICOLON) ) {, +        _errHandler.recoverInline(this);, +        } else {, +          consume();, +        setState(82);, +        setState(83);, +        setState(85);, +          setState(84);, +        setState(87);, +        setState(89);, +          setState(88);, +        setState(91);, +        setState(93);, +          setState(92);, +        setState(95);, +        setState(98);, +        switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {, +          setState(96);, +          setState(97);, +        setState(100);, +        setState(101);, +        if ( !(_la==EOF || _la==SEMICOLON) ) {, +        _errHandler.recoverInline(this);, +        } else {, +          consume();, +        setState(103);, +        setState(104);, +        if ( !(_la==EOF || _la==SEMICOLON) ) {, +        _errHandler.recoverInline(this);, +        } else {, +          consume();, +        setState(105);, +        setState(106);, +        if ( !(_la==EOF || _la==SEMICOLON) ) {, +        _errHandler.recoverInline(this);, +        } else {, +          consume();, +        setState(107);, +        setState(108);, +        setState(109);, +        if ( !(_la==EOF || _la==SEMICOLON) ) {, +        _errHandler.recoverInline(this);, +        } else {, +          consume();, +        setState(111);, +        setState(112);, +        setState(114); , +            setState(113);, +          setState(116); , +          _alt = getInterpreter().adaptivePredict(_input,7,_ctx);, +        setState(118);, +        setState(119);, +        setState(120);, +        if ( !(_la==EOF || _la==SEMICOLON) ) {, +        _errHandler.recoverInline(this);, +        } else {, +          consume();, +        setState(122);, +        setState(123);, +        if ( !(_la==EOF || _la==SEMICOLON) ) {, +        _errHandler.recoverInline(this);, +        } else {, +          consume();, +      setState(136);, +        setState(127);, +        setState(129); , +          setState(128);]