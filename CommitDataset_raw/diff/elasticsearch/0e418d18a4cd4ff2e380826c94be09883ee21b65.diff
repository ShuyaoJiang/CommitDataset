[+++ b/src/main/java/org/elasticsearch/common/lucene/search/NoCacheFilter.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.util.Bits;, +, +import java.io.IOException;, +, +    private static final class NoCacheFilterWrapper extends NoCacheFilter {, +        private final Filter delegate;, +        private NoCacheFilterWrapper(Filter delegate) {, +            this.delegate = delegate;, +        }, +, +        @Override, +        public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {, +            return delegate.getDocIdSet(context, acceptDocs);, +        }, +, +        @Override, +        public int hashCode() {, +            return delegate.hashCode();, +        }, +, +        @Override, +        public boolean equals(Object obj) {, +            if (this == obj) {, +                return true;, +            }, +            if (obj instanceof NoCacheFilterWrapper) {, +                return delegate.equals(((NoCacheFilterWrapper)obj).delegate);, +            }, +            return false;, +        }, +, +        @Override, +        public String toString() {, +, +            return "no_cache(" + delegate + ")";, +        }, +, +    }, +, +    /**, +     * Wraps a filter in a NoCacheFilter or returns it if it already is a NoCacheFilter., +     */, +    public static Filter wrap(Filter filter) {, +        if (filter instanceof NoCacheFilter) {, +            return filter;, +        }, +        return new NoCacheFilterWrapper(filter);, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/NoCacheFilter.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.util.Bits;, +, +import java.io.IOException;, +, +    private static final class NoCacheFilterWrapper extends NoCacheFilter {, +        private final Filter delegate;, +        private NoCacheFilterWrapper(Filter delegate) {, +            this.delegate = delegate;, +        }, +, +        @Override, +        public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {, +            return delegate.getDocIdSet(context, acceptDocs);, +        }, +, +        @Override, +        public int hashCode() {, +            return delegate.hashCode();, +        }, +, +        @Override, +        public boolean equals(Object obj) {, +            if (this == obj) {, +                return true;, +            }, +            if (obj instanceof NoCacheFilterWrapper) {, +                return delegate.equals(((NoCacheFilterWrapper)obj).delegate);, +            }, +            return false;, +        }, +, +        @Override, +        public String toString() {, +, +            return "no_cache(" + delegate + ")";, +        }, +, +    }, +, +    /**, +     * Wraps a filter in a NoCacheFilter or returns it if it already is a NoCacheFilter., +     */, +    public static Filter wrap(Filter filter) {, +        if (filter instanceof NoCacheFilter) {, +            return filter;, +        }]