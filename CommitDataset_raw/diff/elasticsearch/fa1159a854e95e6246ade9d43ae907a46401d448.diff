[+++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +import java.util.stream.Collectors;, +, +        final Version currentMajorVersion = Version.fromId(Version.CURRENT.major * 1000000 + 99);, +        final Version currentOrNextMajorVersion;, +        if (Version.CURRENT.after(currentMajorVersion)) {, +            currentOrNextMajorVersion = Version.fromId((Version.CURRENT.major + 1) * 1000000 + 99);, +        } else {, +            assert Version.CURRENT.minor == 0;, +            currentOrNextMajorVersion = Version.CURRENT;, +        }, +        final List<Version> previousMajorVersions =, +                VersionUtils, +                        .allVersions(), +                        .stream(), +                        .filter(v -> v.before(currentOrNextMajorVersion)), +                        .collect(Collectors.toList());, +        final Version lastReleasedVersionFromPreviousMajor = previousMajorVersions.get(previousMajorVersions.size() - 1);, +        final Version previousMinorVersion = VersionUtils.getPreviousMinorVersion();, +        assert lastReleasedVersionFromPreviousMajor.major == previousMinorVersion.major;, +, +        boolean isCompatible = previousMinorVersion.minor == lastReleasedVersionFromPreviousMajor.minor;, +, +        final String message = String.format(, +                Locale.ROOT,, +                "[%s] should %s be compatible with [%s]",, +                previousMinorVersion,, +                isCompatible ? "" : " not",, +                currentOrNextMajorVersion);, +                message,, +                isCompatible(VersionUtils.getPreviousMinorVersion(), currentOrNextMajorVersion),, +                equalTo(isCompatible));, +]