[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            if (keystore == null) {, +                // create it, we always want one! we use an empty passphrase, but a user can change this later if they want., +                KeyStoreWrapper.create(new char[0]);, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            if (keystore == null) {, +                // create it, we always want one! we use an empty passphrase, but a user can change this later if they want., +                KeyStoreWrapper.create(new char[0]);, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import java.security.SecureRandom;, +    /**, +     * Provides a secure source of randomness., +     *, +     * This acts exactly similar to {@link #get()}, but returning a new {@link SecureRandom}., +     */, +    public static SecureRandom createSecure() {, +        if (currentMethod != null && getRandomMethod != null) {, +            // tests, so just use a seed from the non secure random, +            byte[] seed = new byte[16];, +            get().nextBytes(seed);, +            return new SecureRandom(seed);, +        } else {, +            return new SecureRandom();, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            if (keystore == null) {, +                // create it, we always want one! we use an empty passphrase, but a user can change this later if they want., +                KeyStoreWrapper.create(new char[0]);, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import java.security.SecureRandom;, +    /**, +     * Provides a secure source of randomness., +     *, +     * This acts exactly similar to {@link #get()}, but returning a new {@link SecureRandom}., +     */, +    public static SecureRandom createSecure() {, +        if (currentMethod != null && getRandomMethod != null) {, +            // tests, so just use a seed from the non secure random, +            byte[] seed = new byte[16];, +            get().nextBytes(seed);, +            return new SecureRandom(seed);, +        } else {, +            return new SecureRandom();, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    KeyStoreWrapper.SEED_SETTING,, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            if (keystore == null) {, +                // create it, we always want one! we use an empty passphrase, but a user can change this later if they want., +                KeyStoreWrapper.create(new char[0]);, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import java.security.SecureRandom;, +    /**, +     * Provides a secure source of randomness., +     *, +     * This acts exactly similar to {@link #get()}, but returning a new {@link SecureRandom}., +     */, +    public static SecureRandom createSecure() {, +        if (currentMethod != null && getRandomMethod != null) {, +            // tests, so just use a seed from the non secure random, +            byte[] seed = new byte[16];, +            get().nextBytes(seed);, +            return new SecureRandom(seed);, +        } else {, +            return new SecureRandom();, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    KeyStoreWrapper.SEED_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java, +import java.security.SecureRandom;, +import org.elasticsearch.bootstrap.BootstrapSettings;, +import org.elasticsearch.common.Randomness;, +    public static final Setting<SecureString> SEED_SETTING = SecureSetting.secureString("keystore.seed", null);, +, +    /** Characters that may be used in the bootstrap seed setting added to all keystores. */, +    private static final char[] SEED_CHARS = ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" +, +        "~!@#$%^&*-_=+?").toCharArray();, +, +    public static KeyStoreWrapper create(char[] password) throws Exception {, +        addBootstrapSeed(wrapper);, +    /** Add the bootstrap seed setting, which may be used as a unique, secure, random value by the node */, +    private static void addBootstrapSeed(KeyStoreWrapper wrapper) throws GeneralSecurityException {, +        SecureRandom random = Randomness.createSecure();, +        int passwordLength = 20; // Generate 20 character passwords, +        char[] characters = new char[passwordLength];, +        for (int i = 0; i < passwordLength; ++i) {]