[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #termQuery(String)} be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #termQuery(String)} be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query termQuery(String value) {, +        return new AllTermQuery(new Term(names.indexName(), value));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #termQuery(String)} be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query termQuery(String value) {, +        return new AllTermQuery(new Term(names.indexName(), value));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +    @Override public Query termQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #termQuery(String)} be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query termQuery(String value) {, +        return new AllTermQuery(new Term(names.indexName(), value));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +    @Override public Query termQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #termQuery(String)} be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query termQuery(String value) {, +        return new AllTermQuery(new Term(names.indexName(), value));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +    @Override public Query termQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/TermJsonQueryParser.java, +                query = smartNameFieldMappers.mapper().termQuery(value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #termQuery(String)} be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query termQuery(String value) {, +        return new AllTermQuery(new Term(names.indexName(), value));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +    @Override public Query termQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/TermJsonQueryParser.java, +                query = smartNameFieldMappers.mapper().termQuery(value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/support/MapperQueryParser.java, +                    if (currentMapper.useTermQueryWithQueryString()) {, +                        query = currentMapper.termQuery(queryText);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #termQuery(String)} be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query termQuery(String value) {, +        return new AllTermQuery(new Term(names.indexName(), value));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +    @Override public Query termQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +    @Override public boolean useTermQueryWithQueryString() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/TermJsonQueryParser.java, +                query = smartNameFieldMappers.mapper().termQuery(value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/support/MapperQueryParser.java, +                    if (currentMapper.useTermQueryWithQueryString()) {, +                        query = currentMapper.termQuery(queryText);, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/highlight/HighlightSearchTests.java, +                .query(termQuery("_all", "test")), +    @Test public void testPrefixHighlightingOnAllField() throws Exception {, +        SearchSourceBuilder source = searchSource(), +                .query(prefixQuery("_all", "te")), +                .from(0).size(60).explain(true), +                .highlight(highlight().field("_all").order("score").preTags("<xxx>").postTags("</xxx>"));]