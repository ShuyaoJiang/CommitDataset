[+++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +import java.util.function.Predicate;, +        this(channel, selector, exceptionHandler, handler, channelBuffer, ALWAYS_ALLOW_CHANNEL);, +    }, +, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +                               ReadWriteHandler handler, InboundChannelBuffer channelBuffer,, +                               Predicate<NioSocketChannel> allowChannelPredicate) {, +        super(channel, selector, exceptionHandler, handler, channelBuffer, allowChannelPredicate);, +        return closeNow() || isClosing.get();, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +import java.util.function.Predicate;, +        this(channel, selector, exceptionHandler, handler, channelBuffer, ALWAYS_ALLOW_CHANNEL);, +    }, +, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +                               ReadWriteHandler handler, InboundChannelBuffer channelBuffer,, +                               Predicate<NioSocketChannel> allowChannelPredicate) {, +        super(channel, selector, exceptionHandler, handler, channelBuffer, allowChannelPredicate);, +        return closeNow() || isClosing.get();, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelContext.java, +        doSelectorRegister();, +    }, +, +    // Package private for testing, +    void doSelectorRegister() throws IOException {, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +import java.util.function.Predicate;, +        this(channel, selector, exceptionHandler, handler, channelBuffer, ALWAYS_ALLOW_CHANNEL);, +    }, +, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +                               ReadWriteHandler handler, InboundChannelBuffer channelBuffer,, +                               Predicate<NioSocketChannel> allowChannelPredicate) {, +        super(channel, selector, exceptionHandler, handler, channelBuffer, allowChannelPredicate);, +        return closeNow() || isClosing.get();, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelContext.java, +        doSelectorRegister();, +    }, +, +    // Package private for testing, +    void doSelectorRegister() throws IOException {, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/SocketChannelContext.java, +import java.util.function.Predicate;, +    public static final Predicate<NioSocketChannel> ALWAYS_ALLOW_CHANNEL = (c) -> true;, +, +    private final Predicate<NioSocketChannel> allowChannelPredicate;, +    private boolean closeNow;, +                                   ReadWriteHandler readWriteHandler, InboundChannelBuffer channelBuffer,, +                                   Predicate<NioSocketChannel> allowChannelPredicate) {, +        this.allowChannelPredicate = allowChannelPredicate;, +    protected void register() throws IOException {, +        super.register();, +        if (allowChannelPredicate.test(channel) == false) {, +            closeNow = true;, +        }, +    }, +, +    @Override, +    protected boolean closeNow() {, +        return closeNow;, +                closeNow = true;, +            closeNow = true;, +                closeNow = true;, +            closeNow = true;, +            closeNow = true;, +            closeNow = true;, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +import java.util.function.Predicate;, +        this(channel, selector, exceptionHandler, handler, channelBuffer, ALWAYS_ALLOW_CHANNEL);, +    }, +, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +                               ReadWriteHandler handler, InboundChannelBuffer channelBuffer,, +                               Predicate<NioSocketChannel> allowChannelPredicate) {, +        super(channel, selector, exceptionHandler, handler, channelBuffer, allowChannelPredicate);, +        return closeNow() || isClosing.get();, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelContext.java, +        doSelectorRegister();, +    }, +, +    // Package private for testing, +    void doSelectorRegister() throws IOException {, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/SocketChannelContext.java, +import java.util.function.Predicate;, +    public static final Predicate<NioSocketChannel> ALWAYS_ALLOW_CHANNEL = (c) -> true;, +, +    private final Predicate<NioSocketChannel> allowChannelPredicate;, +    private boolean closeNow;, +                                   ReadWriteHandler readWriteHandler, InboundChannelBuffer channelBuffer,, +                                   Predicate<NioSocketChannel> allowChannelPredicate) {, +        this.allowChannelPredicate = allowChannelPredicate;, +    protected void register() throws IOException {, +        super.register();, +        if (allowChannelPredicate.test(channel) == false) {, +            closeNow = true;, +        }, +    }, +, +    @Override]