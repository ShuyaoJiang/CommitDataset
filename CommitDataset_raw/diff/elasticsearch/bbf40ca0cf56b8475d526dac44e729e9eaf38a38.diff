[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        } else if (ExceptionsHelper.isOOM(e)) {, +            failEngine("out of memory (source: [" + source + "])", e);, +            return true;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        } else if (ExceptionsHelper.isOOM(e)) {, +            failEngine("out of memory (source: [" + source + "])", e);, +            return true;, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[common] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + parser.currentName() + "]");, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        } else if (ExceptionsHelper.isOOM(e)) {, +            failEngine("out of memory (source: [" + source + "])", e);, +            return true;, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[common] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + parser.currentName() + "]");, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[fuzzy] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + parser.currentName() + "]");, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );]