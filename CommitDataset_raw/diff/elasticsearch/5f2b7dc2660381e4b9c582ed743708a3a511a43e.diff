[+++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +                        long sampledVersion = clusterState.version();, +                        long currentVersion = clusterService.state().version();, +                        if (sampledVersion != currentVersion) {, +                            logger.trace("state change while we were trying to add listener, trying to start again, sampled_version [{}], current_version [{}]", sampledVersion, currentVersion);, +                        logger.trace("cluster changed (version {}), trying to start again", event.state().version());, +                    retry(false, e);, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +                        long sampledVersion = clusterState.version();, +                        long currentVersion = clusterService.state().version();, +                        if (sampledVersion != currentVersion) {, +                            logger.trace("state change while we were trying to add listener, trying to start again, sampled_version [{}], current_version [{}]", sampledVersion, currentVersion);, +                        logger.trace("cluster changed (version {}), trying to start again", event.state().version());, +                    retry(false, e);, +++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +        if (state == IndexShardState.POST_RECOVERY) {, +            // if the state is started or relocating (cause it might move right away from started to relocating), +            // then move to STARTED, +            if (newRouting.state() == ShardRoutingState.STARTED || newRouting.state() == ShardRoutingState.RELOCATING) {, +                // we want to refresh *before* we move to internal STARTED state, +, +                boolean movedToStarted = false;, +                    // do the check under a mutex, so we make sure to only change to STARTED if in POST_RECOVERY, +                    if (state == IndexShardState.POST_RECOVERY) {, +                        logger.debug("state: [{}]->[{}], reason [global state is [{}]]", state, IndexShardState.STARTED, newRouting.state());, +                        movedToStarted = true;, +                    } else {, +                        logger.debug("state [{}] not changed, not in POST_RECOVERY, global state is [{}]", state, newRouting.state());, +                }, +                if (movedToStarted) {, +            }, +        }, +, +]