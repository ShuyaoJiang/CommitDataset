[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ESLoggingHandler.java, +                            // now we decode the features, +                            if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                                in.readStringArray();, +                            }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ESLoggingHandler.java, +                            // now we decode the features, +                            if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                                in.readStringArray();, +                            }, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    public static final String TRANSPORT_CLIENT_FEATURE = "transport_client";, +, +        final Settings settings =, +                Settings.builder(), +                        .put(defaultSettings), +                        .put(pluginsService.updatedSettings()), +                        .put(TcpTransport.FEATURE_PREFIX + "." + TRANSPORT_CLIENT_FEATURE, true), +                        .build();, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ESLoggingHandler.java, +                            // now we decode the features, +                            if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                                in.readStringArray();, +                            }, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    public static final String TRANSPORT_CLIENT_FEATURE = "transport_client";, +, +        final Settings settings =, +                Settings.builder(), +                        .put(defaultSettings), +                        .put(pluginsService.updatedSettings()), +                        .put(TcpTransport.FEATURE_PREFIX + "." + TRANSPORT_CLIENT_FEATURE, true), +                        .build();, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.client.transport.TransportClient;, +import java.util.Optional;, +    /**, +     * An interface that implementors use when a class requires a client to maybe have a feature., +     */, +    public interface FeatureAware {, +, +        /**, +         * An optional feature that is required for the client to have., +         *, +         * @return an empty optional if no feature is required otherwise a string representing the required feature, +         */, +        default Optional<String> getRequiredFeature() {, +            return Optional.empty();, +        }, +, +        /**, +         * Tests whether or not the custom should be serialized. The criteria are:, +         * <ul>, +         * <li>the output stream must be at least the minimum supported version of the custom</li>, +         * <li>the output stream must have the feature required by the custom (if any) or not be a transport client</li>, +         * </ul>, +         * <p>, +         * That is, we only serialize customs to clients than can understand the custom based on the version of the client and the features, +         * that the client has. For transport clients we can be lenient in requiring a feature in which case we do not send the custom but, +         * for connected nodes we always require that the node has the required feature., +         *, +         * @param out    the output stream, +         * @param custom the custom to serialize, +         * @param <T>    the type of the custom, +         * @return true if the custom should be serialized and false otherwise, +         */, +        static <T extends NamedDiffable & FeatureAware> boolean shouldSerializeCustom(final StreamOutput out, final T custom) {, +            if (out.getVersion().before(custom.getMinimalSupportedVersion())) {, +                return false;, +            }, +            if (custom.getRequiredFeature().isPresent()) {, +                final String requiredFeature = custom.getRequiredFeature().get();, +                // if it is a transport client we are lenient yet for a connected node it must have the required feature, +                return out.hasFeature(requiredFeature) || out.hasFeature(TransportClient.TRANSPORT_CLIENT_FEATURE) == false;, +            }, +            return true;, +        }, +, +    }, +, +    public interface Custom extends NamedDiffable<Custom>, ToXContentFragment, FeatureAware {, +, +        if (metaData.customs().isEmpty() == false) {, +            sb.append("metadata customs:\n");, +            for (final ObjectObjectCursor<String, MetaData.Custom> cursor : metaData.customs()) {, +                final String type = cursor.key;, +                final MetaData.Custom custom = cursor.value;, +                sb.append(TAB).append(type).append(": ").append(custom);, +            }, +            sb.append("\n");, +        }, +        for (final ObjectCursor<Custom> cursor : customs.values()) {, +            if (FeatureAware.shouldSerializeCustom(out, cursor.value)) {, +        for (final ObjectCursor<Custom> cursor : customs.values()) {, +            if (FeatureAware.shouldSerializeCustom(out, cursor.value)) {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ESLoggingHandler.java, +                            // now we decode the features, +                            if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                                in.readStringArray();, +                            }]