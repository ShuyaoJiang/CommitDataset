[+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import java.util.Objects;, +import java.util.concurrent.TimeUnit;, +import java.util.function.LongSupplier;, +    private final LongSupplier relativeTimeProvider;, +        this(settings, threadPool, transportService, clusterService,, +                shardBulkAction, createIndexAction,, +                actionFilters, indexNameExpressionResolver,, +                autoCreateIndex,, +                System::nanoTime);, +    }, +, +    public TransportBulkAction(Settings settings, ThreadPool threadPool, TransportService transportService, ClusterService clusterService,, +                               TransportShardBulkAction shardBulkAction, TransportCreateIndexAction createIndexAction,, +                               ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               AutoCreateIndex autoCreateIndex, LongSupplier relativeTimeProvider) {, +        Objects.requireNonNull(relativeTimeProvider);, +        this.relativeTimeProvider = relativeTimeProvider;, +        final long startTime = relativeTime();, +        if (needToCheck()) {, +                if (shouldAutoCreate(index, state)) {, +    boolean needToCheck() {, +        return autoCreateIndex.needToCheck();, +    }, +, +    boolean shouldAutoCreate(String index, ClusterState state) {, +        return autoCreateIndex.shouldAutoCreate(index, state);, +    }, +, +        final long startTimeNanos = relativeTime();, +        executeBulk(bulkRequest, startTimeNanos, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTimeNanos) {, +        return TimeUnit.NANOSECONDS.toMillis(relativeTime() - startTimeNanos);, +    void executeBulk(final BulkRequest bulkRequest, final long startTimeNanos, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));, +, +    private long relativeTime() {, +        return relativeTimeProvider.getAsLong();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import java.util.Objects;, +import java.util.concurrent.TimeUnit;, +import java.util.function.LongSupplier;, +    private final LongSupplier relativeTimeProvider;, +        this(settings, threadPool, transportService, clusterService,, +                shardBulkAction, createIndexAction,, +                actionFilters, indexNameExpressionResolver,, +                autoCreateIndex,, +                System::nanoTime);, +    }, +, +    public TransportBulkAction(Settings settings, ThreadPool threadPool, TransportService transportService, ClusterService clusterService,, +                               TransportShardBulkAction shardBulkAction, TransportCreateIndexAction createIndexAction,, +                               ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               AutoCreateIndex autoCreateIndex, LongSupplier relativeTimeProvider) {, +        Objects.requireNonNull(relativeTimeProvider);, +        this.relativeTimeProvider = relativeTimeProvider;, +        final long startTime = relativeTime();, +        if (needToCheck()) {, +                if (shouldAutoCreate(index, state)) {, +    boolean needToCheck() {, +        return autoCreateIndex.needToCheck();, +    }, +, +    boolean shouldAutoCreate(String index, ClusterState state) {, +        return autoCreateIndex.shouldAutoCreate(index, state);, +    }, +, +        final long startTimeNanos = relativeTime();, +        executeBulk(bulkRequest, startTimeNanos, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTimeNanos) {, +        return TimeUnit.NANOSECONDS.toMillis(relativeTime() - startTimeNanos);, +    void executeBulk(final BulkRequest bulkRequest, final long startTimeNanos, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));, +, +    private long relativeTime() {, +        return relativeTimeProvider.getAsLong();, +    }, +, +++ b/core/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionTookTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License.]