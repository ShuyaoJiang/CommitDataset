[+++ b/docs/plugins/repository-s3.asciidoc, +    The default behaviour is to detect which access style to use based on the configured endpoint (an IP will result, +    in path-style access) and the bucket being accessed (some buckets are not valid DNS names)., +++ b/docs/plugins/repository-s3.asciidoc, +    The default behaviour is to detect which access style to use based on the configured endpoint (an IP will result, +    in path-style access) and the bucket being accessed (some buckets are not valid DNS names)., +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries,, +                    Boolean pathStyleAccess);, +++ b/docs/plugins/repository-s3.asciidoc, +    The default behaviour is to detect which access style to use based on the configured endpoint (an IP will result, +    in path-style access) and the bucket being accessed (some buckets are not valid DNS names)., +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries,, +                    Boolean pathStyleAccess);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/InternalAwsS3Service.java, +    public synchronized AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries,, +                                        Boolean pathStyleAccess) {, +    private synchronized AmazonS3 getClient(String endpoint, Protocol protocol, String account, String key, Integer maxRetries,, +                                            Boolean pathStyleAccess) {, +++ b/docs/plugins/repository-s3.asciidoc, +    The default behaviour is to detect which access style to use based on the configured endpoint (an IP will result, +    in path-style access) and the bucket being accessed (some buckets are not valid DNS names)., +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries,, +                    Boolean pathStyleAccess);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/InternalAwsS3Service.java, +    public synchronized AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries,, +                                        Boolean pathStyleAccess) {, +    private synchronized AmazonS3 getClient(String endpoint, Protocol protocol, String account, String key, Integer maxRetries,, +                                            Boolean pathStyleAccess) {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +        /**, +         * repositories.s3.path_style_access: When set to true configures the client to use path-style access for all requests., +         Amazon S3 supports virtual-hosted-style and path-style access in all Regions. The path-style syntax, however,, +         requires that you use the region-specific endpoint when attempting to access a bucket., +         The default behaviour is to detect which access style to use based on the configured endpoint (an IP will result, +         in path-style access) and the bucket being accessed (some buckets are not valid DNS names). Setting this flag, +         will result in path-style access being used for all requests., +         */, +        Setting<Boolean> PATH_STYLE_ACCESS_SETTING = Setting.boolSetting("repositories.s3.path_style_access", false, Property.NodeScope);, +        /**, +         * path_style_access, +         * @see  Repositories#PATH_STYLE_ACCESS_SETTING, +         */, +        Setting<Boolean> PATH_STYLE_ACCESS_SETTING = Setting.boolSetting("path_style_access", false, Property.NodeScope);, +, +        // If the user defined a path style access setting, we rely on it otherwise we use the default, +        // value set by the SDK, +        Boolean pathStyleAccess = null;, +        if (Repository.PATH_STYLE_ACCESS_SETTING.exists(repositorySettings.settings()) ||, +            Repositories.PATH_STYLE_ACCESS_SETTING.exists(repositorySettings.globalSettings())) {, +            pathStyleAccess = getValue(repositorySettings, Repository.PATH_STYLE_ACCESS_SETTING, Repositories.PATH_STYLE_ACCESS_SETTING);, +        }, +            bucket, region, endpoint, protocol, chunkSize, serverSideEncryption, bufferSize, maxRetries, cannedACL, storageClass,, +            pathStyleAccess);, +        blobStore = new S3BlobStore(settings, s3Service.client(endpoint, protocol, region, key, secret, maxRetries, pathStyleAccess),]