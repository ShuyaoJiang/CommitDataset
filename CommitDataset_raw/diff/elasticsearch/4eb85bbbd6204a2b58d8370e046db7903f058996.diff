[+++ b/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        public static final ByteSizeValue TCP_DEFAULT_SEND_BUFFER_SIZE = null;, +        public static final ByteSizeValue TCP_DEFAULT_RECEIVE_BUFFER_SIZE = null;, +++ b/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        public static final ByteSizeValue TCP_DEFAULT_SEND_BUFFER_SIZE = null;, +        public static final ByteSizeValue TCP_DEFAULT_RECEIVE_BUFFER_SIZE = null;, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +    private final ReceiveBufferSizePredictorFactory receiveBufferSizePredictorFactory;, +        // See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one, +        ByteSizeValue receivePredictorMin = componentSettings.getAsBytesSize("receive_predictor_min", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        ByteSizeValue receivePredictorMax = componentSettings.getAsBytesSize("receive_predictor_max", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {, +            receiveBufferSizePredictorFactory = new FixedReceiveBufferSizePredictorFactory((int) receivePredictorMax.bytes());, +        } else {, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory((int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        }, +, +        serverBootstrap.setOption("receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +        serverBootstrap.setOption("child.receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +++ b/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        public static final ByteSizeValue TCP_DEFAULT_SEND_BUFFER_SIZE = null;, +        public static final ByteSizeValue TCP_DEFAULT_RECEIVE_BUFFER_SIZE = null;, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +    private final ReceiveBufferSizePredictorFactory receiveBufferSizePredictorFactory;, +        // See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one, +        ByteSizeValue receivePredictorMin = componentSettings.getAsBytesSize("receive_predictor_min", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        ByteSizeValue receivePredictorMax = componentSettings.getAsBytesSize("receive_predictor_max", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {, +            receiveBufferSizePredictorFactory = new FixedReceiveBufferSizePredictorFactory((int) receivePredictorMax.bytes());, +        } else {, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory((int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        }, +, +        serverBootstrap.setOption("receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +        serverBootstrap.setOption("child.receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +    final ReceiveBufferSizePredictorFactory receiveBufferSizePredictorFactory;, +        // See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one, +        ByteSizeValue receivePredictorMin = componentSettings.getAsBytesSize("receive_predictor_min", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        ByteSizeValue receivePredictorMax = componentSettings.getAsBytesSize("receive_predictor_max", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {, +            receiveBufferSizePredictorFactory = new FixedReceiveBufferSizePredictorFactory((int) receivePredictorMax.bytes());, +        } else {, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory((int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        }, +, +        clientBootstrap.setOption("receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +        serverBootstrap.setOption("receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +        serverBootstrap.setOption("child.receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +++ b/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        public static final ByteSizeValue TCP_DEFAULT_SEND_BUFFER_SIZE = null;, +        public static final ByteSizeValue TCP_DEFAULT_RECEIVE_BUFFER_SIZE = null;, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +    private final ReceiveBufferSizePredictorFactory receiveBufferSizePredictorFactory;, +        // See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one, +        ByteSizeValue receivePredictorMin = componentSettings.getAsBytesSize("receive_predictor_min", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        ByteSizeValue receivePredictorMax = componentSettings.getAsBytesSize("receive_predictor_max", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {, +            receiveBufferSizePredictorFactory = new FixedReceiveBufferSizePredictorFactory((int) receivePredictorMax.bytes());, +        } else {, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory((int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        }, +, +        serverBootstrap.setOption("receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +        serverBootstrap.setOption("child.receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +    final ReceiveBufferSizePredictorFactory receiveBufferSizePredictorFactory;, +        // See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one, +        ByteSizeValue receivePredictorMin = componentSettings.getAsBytesSize("receive_predictor_min", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        ByteSizeValue receivePredictorMax = componentSettings.getAsBytesSize("receive_predictor_max", componentSettings.getAsBytesSize("receive_predictor_size", ByteSizeValue.parseBytesSizeValue("512k")));, +        if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {, +            receiveBufferSizePredictorFactory = new FixedReceiveBufferSizePredictorFactory((int) receivePredictorMax.bytes());, +        } else {, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory((int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        }, +, +        clientBootstrap.setOption("receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +        serverBootstrap.setOption("receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +        serverBootstrap.setOption("child.receiveBufferSizePredictorFactory", receiveBufferSizePredictorFactory);, +++ b/src/test/java/org/elasticsearch/benchmark/transport/TransportBenchmark.java, +        final int NUMBER_OF_CLIENTS = 10;]