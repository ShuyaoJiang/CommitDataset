[+++ b/server/src/main/java/org/elasticsearch/action/support/GroupedActionListener.java, + * An action listener that delegates its results to another listener once, + * it has received N results (either successes or failures). This allows synchronous, +    public GroupedActionListener(ActionListener<Collection<T>> delegate, int groupSize) {, +        if (groupSize <= 0) {, +            throw new IllegalArgumentException("groupSize must be greater than 0 but was " + groupSize);, +        }, +++ b/server/src/main/java/org/elasticsearch/action/support/GroupedActionListener.java, + * An action listener that delegates its results to another listener once, + * it has received N results (either successes or failures). This allows synchronous, +    public GroupedActionListener(ActionListener<Collection<T>> delegate, int groupSize) {, +        if (groupSize <= 0) {, +            throw new IllegalArgumentException("groupSize must be greater than 0 but was " + groupSize);, +        }, +++ b/server/src/test/java/org/elasticsearch/action/support/GroupedActionListenerTests.java, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, groupSize);, +                int c;, +        assertEquals(groupSize, resRef.get().size());, +        int expectedValue = 0;, +        for (int i = 0; i < groupSize; i++) {, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, size);, +        GroupedActionListener<Void> listener = new GroupedActionListener<>(ActionListener.wrap(r -> {}, finalException::set), numGroups);, +++ b/server/src/main/java/org/elasticsearch/action/support/GroupedActionListener.java, + * An action listener that delegates its results to another listener once, + * it has received N results (either successes or failures). This allows synchronous, +    public GroupedActionListener(ActionListener<Collection<T>> delegate, int groupSize) {, +        if (groupSize <= 0) {, +            throw new IllegalArgumentException("groupSize must be greater than 0 but was " + groupSize);, +        }, +++ b/server/src/test/java/org/elasticsearch/action/support/GroupedActionListenerTests.java, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, groupSize);, +                int c;, +        assertEquals(groupSize, resRef.get().size());, +        int expectedValue = 0;, +        for (int i = 0; i < groupSize; i++) {, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, size);, +        GroupedActionListener<Void> listener = new GroupedActionListener<>(ActionListener.wrap(r -> {}, finalException::set), numGroups);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                leaderIndicesToFollow.size());, +++ b/server/src/main/java/org/elasticsearch/action/support/GroupedActionListener.java, + * An action listener that delegates its results to another listener once, + * it has received N results (either successes or failures). This allows synchronous, +    public GroupedActionListener(ActionListener<Collection<T>> delegate, int groupSize) {, +        if (groupSize <= 0) {, +            throw new IllegalArgumentException("groupSize must be greater than 0 but was " + groupSize);, +        }, +++ b/server/src/test/java/org/elasticsearch/action/support/GroupedActionListenerTests.java, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, groupSize);, +                int c;, +        assertEquals(groupSize, resRef.get().size());, +        int expectedValue = 0;, +        for (int i = 0; i < groupSize; i++) {, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, size);, +        GroupedActionListener<Void> listener = new GroupedActionListener<>(ActionListener.wrap(r -> {}, finalException::set), numGroups);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                leaderIndicesToFollow.size());, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportUnfollowAction.java, +                        numberOfShards, +                );, +++ b/server/src/main/java/org/elasticsearch/action/support/GroupedActionListener.java, + * An action listener that delegates its results to another listener once, + * it has received N results (either successes or failures). This allows synchronous, +    public GroupedActionListener(ActionListener<Collection<T>> delegate, int groupSize) {, +        if (groupSize <= 0) {, +            throw new IllegalArgumentException("groupSize must be greater than 0 but was " + groupSize);, +        }, +++ b/server/src/test/java/org/elasticsearch/action/support/GroupedActionListenerTests.java, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, groupSize);, +                int c;, +        assertEquals(groupSize, resRef.get().size());, +        int expectedValue = 0;, +        for (int i = 0; i < groupSize; i++) {, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, size);, +        GroupedActionListener<Void> listener = new GroupedActionListener<>(ActionListener.wrap(r -> {}, finalException::set), numGroups);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                leaderIndicesToFollow.size());, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportUnfollowAction.java, +                        numberOfShards, +                );, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlInvalidateSessionAction.java, +                        ActionListener.wrap(collection -> listener.onResponse(collection.size()), listener::onFailure), tokens.size());, +++ b/server/src/main/java/org/elasticsearch/action/support/GroupedActionListener.java, + * An action listener that delegates its results to another listener once, + * it has received N results (either successes or failures). This allows synchronous, +    public GroupedActionListener(ActionListener<Collection<T>> delegate, int groupSize) {, +        if (groupSize <= 0) {, +            throw new IllegalArgumentException("groupSize must be greater than 0 but was " + groupSize);, +        }, +++ b/server/src/test/java/org/elasticsearch/action/support/GroupedActionListenerTests.java, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, groupSize);, +                int c;, +        assertEquals(groupSize, resRef.get().size());, +        int expectedValue = 0;, +        for (int i = 0; i < groupSize; i++) {, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, size);, +        GroupedActionListener<Void> listener = new GroupedActionListener<>(ActionListener.wrap(r -> {}, finalException::set), numGroups);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                leaderIndicesToFollow.size());, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportUnfollowAction.java, +                        numberOfShards]