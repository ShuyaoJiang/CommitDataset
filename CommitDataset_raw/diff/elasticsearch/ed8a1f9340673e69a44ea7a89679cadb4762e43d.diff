[+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java, +        return between(1, 150);, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java, +        return between(1, 150);, +++ b/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec, +dateAndIntervalPaginated, +SELECT YEAR(birth_date - INTERVAL 2 YEARS) / 1000 AS result FROM test_emp ORDER BY birth_date LIMIT 10;, +, +    result     , +---------------, +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1, +;, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java, +        return between(1, 150);, +++ b/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec, +dateAndIntervalPaginated, +SELECT YEAR(birth_date - INTERVAL 2 YEARS) / 1000 AS result FROM test_emp ORDER BY birth_date LIMIT 10;, +, +    result     , +---------------, +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1, +;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessor.java, +import org.elasticsearch.common.io.stream.NamedWriteable;, +    private final boolean namedWriteable;, +    private final Class<?> clazz;, +        this.namedWriteable = value instanceof NamedWriteable;, +        this.clazz = namedWriteable ? value.getClass() : null;, +    @SuppressWarnings("unchecked"), +        namedWriteable = in.readBoolean();, +        if (namedWriteable) {, +            try {, +                clazz = ConstantProcessor.class.getClassLoader().loadClass(in.readString());, +            } catch (ClassNotFoundException e) {, +                throw new IOException(e);, +            }, +            constant = in.readNamedWriteable((Class<NamedWriteable>) clazz);, +        } else {, +            clazz = null;, +    }, +    @Override, +        out.writeBoolean(namedWriteable);, +        if (namedWriteable) {, +            out.writeString(constant.getClass().getName());, +            out.writeNamedWriteable((NamedWriteable) constant);, +        } else {, +    }, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java, +        return between(1, 150);, +++ b/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec, +dateAndIntervalPaginated, +SELECT YEAR(birth_date - INTERVAL 2 YEARS) / 1000 AS result FROM test_emp ORDER BY birth_date LIMIT 10;, +, +    result     , +---------------, +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1              , +1, +;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessor.java, +import org.elasticsearch.common.io.stream.NamedWriteable;, +    private final boolean namedWriteable;, +    private final Class<?> clazz;, +        this.namedWriteable = value instanceof NamedWriteable;, +        this.clazz = namedWriteable ? value.getClass() : null;, +    @SuppressWarnings("unchecked"), +        namedWriteable = in.readBoolean();, +        if (namedWriteable) {, +            try {, +                clazz = ConstantProcessor.class.getClassLoader().loadClass(in.readString());, +            } catch (ClassNotFoundException e) {, +                throw new IOException(e);, +            }, +            constant = in.readNamedWriteable((Class<NamedWriteable>) clazz);, +        } else {]