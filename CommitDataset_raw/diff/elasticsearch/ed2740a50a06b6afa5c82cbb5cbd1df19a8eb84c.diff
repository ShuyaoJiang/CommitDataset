[+++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +import java.util.*;, +    // a list of shards that failed during recovery, +    // we keep track of these shards in order to prevent repeated recovery of these shards on each cluster state update, +    private final ConcurrentMap<ShardId, Long> failedShards = ConcurrentCollections.newConcurrentMap();, +, +            failedShards.clear();, +        cleanFailedShards(routingTable, nodes);, +    private void cleanFailedShards(RoutingTable routingTable, DiscoveryNodes nodes) {, +        String localNodeId = nodes.localNodeId();, +        Iterator<Map.Entry<ShardId, Long>> iterator = failedShards.entrySet().iterator();, +        shards:, +        while (iterator.hasNext()) {, +            Map.Entry<ShardId, Long> entry = iterator.next();, +            IndexRoutingTable indexRoutingTable = routingTable.index(entry.getKey().getIndex());, +            if (indexRoutingTable != null) {, +                IndexShardRoutingTable shardRoutingTable = indexRoutingTable.shard(entry.getKey().id());, +                if (shardRoutingTable != null) {, +                    for (ShardRouting shardRouting : shardRoutingTable.assignedShards()) {, +                        if (localNodeId.equals(shardRouting.currentNodeId())) {, +                            if (shardRouting.version() == entry.getValue()) {, +                                // It's the same failed shard - keep it, +                                continue shards;, +                            } else {, +                                // Different version - remove it, +                                break;, +                            }, +                        }, +                    }, +                }, +            }, +            iterator.remove();, +        }, +    }, +, +            if (failedShards.containsKey(shardRouting.shardId())) {, +                // already tried to create this shard but it failed - ignore, +                logger.trace("[{}][{}] not initializing, this shards failed to recover on this node before, waiting for reassignment", shardRouting.index(), shardRouting.id());, +                return;, +            }, +            failedShards.put(shardRouting.shardId(), shardRouting.version());]