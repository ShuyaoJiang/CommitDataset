[+++ b/docs/reference/modules/http.asciidoc, +|`http.publish_port` |The port that HTTP clients should use when, +communicating with this node. Useful when a cluster node is behind a, +proxy or firewall and the `http.port` is not directly addressable, +from the outside. Defaults to the actual port assigned via `http.port`., +, +++ b/docs/reference/modules/http.asciidoc, +|`http.publish_port` |The port that HTTP clients should use when, +communicating with this node. Useful when a cluster node is behind a, +proxy or firewall and the `http.port` is not directly addressable, +from the outside. Defaults to the actual port assigned via `http.port`., +, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +    private int publishPort;, +, +        this.publishPort = componentSettings.getAsInt("publish_port", settings.getAsInt("http.publish_port", 0));, +        if (0 == publishPort) {, +            publishPort = boundAddress.getPort();, +        }, +            publishAddress = new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost), publishPort);, +++ b/docs/reference/modules/http.asciidoc, +|`http.publish_port` |The port that HTTP clients should use when, +communicating with this node. Useful when a cluster node is behind a, +proxy or firewall and the `http.port` is not directly addressable, +from the outside. Defaults to the actual port assigned via `http.port`., +, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +    private int publishPort;, +, +        this.publishPort = componentSettings.getAsInt("publish_port", settings.getAsInt("http.publish_port", 0));, +        if (0 == publishPort) {, +            publishPort = boundAddress.getPort();, +        }, +            publishAddress = new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost), publishPort);, +++ b/src/test/java/org/elasticsearch/http/netty/HttpPublishPortTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.http.netty;, +, +import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.BoundTransportAddress;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +import org.elasticsearch.node.internal.InternalNode;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Test;, +, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.Matchers.*;, +, +@ClusterScope(scope = Scope.SUITE, numDataNodes = 1), +public class HttpPublishPortTests extends ElasticsearchIntegrationTest {, +, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return ImmutableSettings.settingsBuilder(), +                .put(super.nodeSettings(nodeOrdinal)), +                .put(InternalNode.HTTP_ENABLED, true), +                .put("http.publish_port", 9080), +                .build();, +    }, +, +    @Test, +    public void testHttpPublishPort() throws Exception {, +        NodesInfoResponse response = client().admin().cluster().prepareNodesInfo().clear().setHttp(true).get();, +        assertThat(response.getNodes(), arrayWithSize(greaterThanOrEqualTo(1)));, +        NodeInfo nodeInfo = response.getNodes()[0];, +, +        BoundTransportAddress address = nodeInfo.getHttp().address();, +        assertThat(address.publishAddress(), instanceOf(InetSocketTransportAddress.class));, +, +        InetSocketTransportAddress publishAddress = (InetSocketTransportAddress) address.publishAddress();, +        assertThat(publishAddress.address().getPort(), is(9080));, +    }, +}]