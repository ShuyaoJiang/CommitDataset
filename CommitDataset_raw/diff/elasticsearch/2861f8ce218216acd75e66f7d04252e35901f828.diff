[+++ b/src/test/java/org/elasticsearch/watcher/test/AbstractWatcherIntegrationTests.java, +import org.elasticsearch.watcher.WatcherLifeCycleService;, +        stopWatcher(false);, +            WatcherState state = getInstanceFromMaster(WatcherService.class).state();, +            if (state == WatcherState.STOPPED) {, +                startWatcher(false);, +            } else if (state == WatcherState.STARTING) {, +                logger.info("[{}#{}]: not starting watcher, because watcher is in state [{}]", getTestClass().getSimpleName(), getTestName(), state);, +        startWatcher(true);, +        stopWatcher(true);, +    }, +, +    protected void startWatcher(boolean useClient) throws Exception {, +        if (useClient) {, +            watcherClient().prepareWatchService().start().get();, +        } else {, +            getInstanceFromMaster(WatcherLifeCycleService.class).start();, +        }, +        ensureWatcherStarted(useClient);, +    }, +, +    protected void stopWatcher(boolean useClient) throws Exception {, +        if (useClient) {, +        } else {, +            getInstanceFromMaster(WatcherLifeCycleService.class).stop();, +        }, +        ensureWatcherStopped(useClient);, +                "transport_client:{plain}changeme\n" +, +                "transport_client:transport_client\n" +, +                "  cluster: cluster:monitor/state, cluster:monitor/health, indices:admin/template/delete, cluster:admin/repository/delete, indices:admin/template/put, cluster:monitor/stats\n" +, +                "transport_client:\n" +, +                "  cluster: cluster:monitor/nodes/info\n" +, +++ b/src/test/java/org/elasticsearch/watcher/test/AbstractWatcherIntegrationTests.java, +import org.elasticsearch.watcher.WatcherLifeCycleService;, +        stopWatcher(false);, +            WatcherState state = getInstanceFromMaster(WatcherService.class).state();, +            if (state == WatcherState.STOPPED) {, +                startWatcher(false);, +            } else if (state == WatcherState.STARTING) {, +                logger.info("[{}#{}]: not starting watcher, because watcher is in state [{}]", getTestClass().getSimpleName(), getTestName(), state);, +        startWatcher(true);, +        stopWatcher(true);, +    }, +, +    protected void startWatcher(boolean useClient) throws Exception {, +        if (useClient) {, +            watcherClient().prepareWatchService().start().get();, +        } else {, +            getInstanceFromMaster(WatcherLifeCycleService.class).start();, +        }, +        ensureWatcherStarted(useClient);, +    }, +, +    protected void stopWatcher(boolean useClient) throws Exception {, +        if (useClient) {, +        } else {, +            getInstanceFromMaster(WatcherLifeCycleService.class).stop();, +        }, +        ensureWatcherStopped(useClient);, +                "transport_client:{plain}changeme\n" +, +                "transport_client:transport_client\n" +, +                "  cluster: cluster:monitor/state, cluster:monitor/health, indices:admin/template/delete, cluster:admin/repository/delete, indices:admin/template/put, cluster:monitor/stats\n" +, +                "transport_client:\n" +, +                "  cluster: cluster:monitor/nodes/info\n" +, +++ b/src/test/java/org/elasticsearch/watcher/test/integration/BasicShieldTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.watcher.test.integration;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.joda.time.DateTime;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.shield.ShieldPlugin;, +import org.elasticsearch.shield.authc.AuthenticationException;, +import org.elasticsearch.shield.authc.support.SecuredString;, +import org.elasticsearch.shield.authz.AuthorizationException;, +import org.elasticsearch.watcher.WatcherPlugin;, +import org.elasticsearch.watcher.WatcherState;, +import org.elasticsearch.watcher.client.WatchSourceBuilders;, +import org.elasticsearch.watcher.condition.ConditionBuilders;, +import org.elasticsearch.watcher.test.AbstractWatcherIntegrationTests;, +import org.elasticsearch.watcher.transport.actions.delete.DeleteWatchResponse;, +import org.elasticsearch.watcher.transport.actions.execute.ExecuteWatchResponse;, +import org.elasticsearch.watcher.transport.actions.get.GetWatchResponse;, +import org.elasticsearch.watcher.transport.actions.put.PutWatchResponse;, +import org.elasticsearch.watcher.transport.actions.stats.WatcherStatsResponse;, +import org.elasticsearch.watcher.trigger.TriggerBuilders;, +import org.elasticsearch.watcher.trigger.TriggerEvent;, +import org.elasticsearch.watcher.trigger.schedule.IntervalSchedule;, +import org.elasticsearch.watcher.trigger.schedule.ScheduleTriggerEvent;, +import org.junit.Test;, +, +import static org.elasticsearch.common.joda.time.DateTimeZone.UTC;, +import static org.elasticsearch.shield.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +import static org.elasticsearch.watcher.client.WatchSourceBuilders.watchBuilder;, +import static org.elasticsearch.watcher.trigger.TriggerBuilders.schedule;]