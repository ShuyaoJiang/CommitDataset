[+++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +            getRestClient().performRequest("GET", "/", Collections.emptyMap(), null);, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +            getRestClient().performRequest("GET", "/", Collections.emptyMap(), null);, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/SecurityFeatureSet.java, +        return cryptoService != null && cryptoService.encryptionEnabled();, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +            getRestClient().performRequest("GET", "/", Collections.emptyMap(), null);, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/SecurityFeatureSet.java, +        return cryptoService != null && cryptoService.encryptionEnabled();, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +            if (scrollId != null && !cryptoService.signed(scrollId)) {, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +            getRestClient().performRequest("GET", "/", Collections.emptyMap(), null);, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/SecurityFeatureSet.java, +        return cryptoService != null && cryptoService.encryptionEnabled();, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +            if (scrollId != null && !cryptoService.signed(scrollId)) {, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/crypto/CryptoService.java, +import javax.crypto.SecretKey;, +     * Signs the given text and returns the signed text (original text + signature), +     * @param text the string to sign, +     * @param key the key to sign the text with, +     * @param systemKey the system key. This is optional and if the key != systemKey then the format of the, +     *                  message will change, +     */, +    String sign(String text, SecretKey key, SecretKey systemKey) throws IOException;, +, +    /**, +     * Unsigns the given signed text, verifies the original text with the attached signature and if valid returns, +     * the unsigned (original) text. If signature verification fails a {@link IllegalArgumentException} is thrown., +     * @param text the string to unsign and verify, +     * @param key the key to unsign the text with, +     */, +    String unsignAndVerify(String text, SecretKey key);, +, +    /**, +    boolean signed(String text);, +     * Encrypts the provided byte array and returns the encrypted value, +     * @param bytes the data to encrypt, +     * @return encrypted data, +     */, +    byte[] encrypt(byte[] bytes);, +, +    /**, +     * Decrypts the provided char array and returns the plain-text chars, +     * @param chars the data to decrypt, +     * @param key the key to decrypt the data with, +     * @return plaintext chars, +     */, +    char[] decrypt(char[] chars, SecretKey key);, +, +    /**, +     * Decrypts the provided byte array and returns the unencrypted bytes, +     * @param bytes the bytes to decrypt, +     * @return plaintext bytes, +     */, +    byte[] decrypt(byte[] bytes);, +, +    /**, +     * Decrypts the provided byte array and returns the unencrypted bytes, +     * @param bytes the bytes to decrypt, +     * @param key the key to decrypt the data with, +     * @return plaintext bytes, +     */, +    byte[] decrypt(byte[] bytes, SecretKey key);, +, +    /**, +    boolean encrypted(char[] chars);, +, +    /**, +     * Checks whether the given bytes are encrypted, +     * @param bytes the chars to check if they are encrypted, +     * @return true is data is encrypted, +     */, +    boolean encrypted(byte[] bytes);, +    boolean encryptionEnabled();, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +            getRestClient().performRequest("GET", "/", Collections.emptyMap(), null);, +        try (Response response = getRestClient().performRequest("GET", "/", Collections.emptyMap(), null,, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/SecurityFeatureSet.java, +        return cryptoService != null && cryptoService.encryptionEnabled();, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +            if (scrollId != null && !cryptoService.signed(scrollId)) {]