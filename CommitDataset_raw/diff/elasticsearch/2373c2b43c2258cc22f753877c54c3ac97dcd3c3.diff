[+++ b/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    private final AtomicBoolean closed = new AtomicBoolean(false);, +        if (closed.compareAndSet(false, true)) {, +    }, +            if (closed.get()) {, +                throw new TranslogException(shardId, "translog is already closed");, +            }, +++ b/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    private final AtomicBoolean closed = new AtomicBoolean(false);, +        if (closed.compareAndSet(false, true)) {, +    }, +            if (closed.get()) {, +                throw new TranslogException(shardId, "translog is already closed");, +            }, +++ b/src/test/java/org/elasticsearch/index/translog/AbstractSimpleTranslogTests.java, +    public void testSnapshotOnClosedTranslog() throws IOException {, +        assertTrue(Files.exists(translogDir.resolve("translog-1")));, +        translog.add(new Translog.Create("test", "1", new byte[]{1}));, +        translog.close();, +        try {, +            Translog.Snapshot snapshot = translog.snapshot();, +        } catch (TranslogException ex) {, +            assertEquals(ex.getMessage(), "translog is already closed");, +        }, +    }, +]