[+++ b/dev-tools/upgrade-tests.py, +# Licensed to Elasticsearch under one or more contributor, +# license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright, +# ownership. Elasticsearch licenses this file to you under, +# the Apache License, Version 2.0 (the "License"); you may, +# not use this file except in compliance  with the License., +# You may obtain a copy of the License at, +#, +#     http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing,, +# software distributed under the License is distributed on, +# an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,, +# either express or implied. See the License for the specific, +# language governing permissions and limitations under the License., +, +import random, +import os, +import tempfile, +import shutil, +import subprocess, +import time, +import argparse, +import logging, +import sys, +, +from datetime import datetime, +try:, +  from elasticsearch import Elasticsearch, +  from elasticsearch.exceptions import ConnectionError, +  from elasticsearch.exceptions import TransportError, +except ImportError as e:, +  print('Can\'t import elasticsearch please install `sudo pip install elasticsearch`'), +  raise e, +, +, +'''This file executes a basic upgrade test by running a full cluster restart., +, +The upgrade test starts 2 or more nodes of an old elasticserach version, indexes, +a random number of documents into the running nodes and executes a full cluster restart., +After the nodes are recovered a small set of basic checks are executed to ensure all, +documents are still searchable and field data can be loaded etc., +, +NOTE: This script requires the elasticsearch python client `elasticsearch-py` run the following command to install:, +, +  `sudo pip install elasticsearch`, +, +if you are running python3 you need to install the client using pip3. On OSX `pip3` will be included in the Python 3.4, +release available on `https://www.python.org/download/`:, +, +  `sudo pip3 install elasticsearch`, +, +See `https://github.com/elasticsearch/elasticsearch-py` for details, +, +In order to run this test two different version of elasticsearch are required. Both need to be unpacked into, +the same directory:, +, +```, +   $ cd /path/to/elasticsearch/clone, +   $ mkdir backwards && cd backwards, +   $ wget  https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.3.1.tar.gz, +   $ wget  https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.90.13.tar.gz, +   $ tar -zxvf elasticsearch-1.3.1.tar.gz && tar -zxvf elasticsearch-0.90.13.tar.gz, +   $ cd .., +   $ python dev-tools/upgrade-tests.py --version.backwards 0.90.13 --version.current 1.3.1, +```, +''', +, +BLACK_LIST = {'1.2.0' : { 'reason': 'Contains a major bug where routing hashes are not consistent with previous version',, +                          'issue': 'https://github.com/elasticsearch/elasticsearch/pull/6393'},, +              '1.3.0' : { 'reason': 'Lucene Related bug prevents upgrades from 0.90.7 and some earlier versions ',, +                          'issue' : 'https://github.com/elasticsearch/elasticsearch/pull/7055'}}, +# sometimes returns True, +def rarely():, +  return random.randint(0, 10) == 0, +, +# usually returns True, +def frequently():, +  return not rarely(), +, +# asserts the correctness of the given hits given they are sorted asc, +def assert_sort(hits):, +  values = [hit['sort'] for hit in hits['hits']['hits']], +  assert len(values) > 0, 'expected non emtpy result', +  val = min(values), +  for x in values:, +    assert x >= val, '%s >= %s' % (x, val), +    val = x, +, +# asserts that the cluster health didn't timeout etc., +def assert_health(cluster_health, num_shards, num_replicas):, +  assert cluster_health['timed_out'] == False, 'cluster health timed out %s' % cluster_health, +, +, +# Starts a new elasticsearch node from a released & untared version., +# This node uses unicast discovery with the provided unicast host list and starts, +# the nodes with the given data directory. This allows shutting down and starting up, +# nodes on the same data dir simulating a full cluster restart., +def start_node(version, data_dir, node_dir, unicast_host_list, tcp_port, http_port):]