[+++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    public final ClassLoader classLoader;, +    public final List<WhitelistClass> whitelistClasses;, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses) {, +        this.classLoader = Objects.requireNonNull(classLoader);, +        this.whitelistClasses = Collections.unmodifiableList(Objects.requireNonNull(whitelistClasses));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    public final ClassLoader classLoader;, +    public final List<WhitelistClass> whitelistClasses;, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses) {, +        this.classLoader = Objects.requireNonNull(classLoader);, +        this.whitelistClasses = Collections.unmodifiableList(Objects.requireNonNull(whitelistClasses));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistClass.java, +    /** Information about where this class was white-listed from. */, +    public final boolean noImport;, +    public WhitelistClass(String origin, String javaClassName, boolean noImport,, +, +        this.noImport = noImport;, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    public final ClassLoader classLoader;, +    public final List<WhitelistClass> whitelistClasses;, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses) {, +        this.classLoader = Objects.requireNonNull(classLoader);, +        this.whitelistClasses = Collections.unmodifiableList(Objects.requireNonNull(whitelistClasses));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistClass.java, +    /** Information about where this class was white-listed from. */, +    public final boolean noImport;, +    public WhitelistClass(String origin, String javaClassName, boolean noImport,, +, +        this.noImport = noImport;, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistConstructor.java, +    /** Information about where this constructor was whitelisted from. */, +    public final List<String> canonicalTypeNameParameters;, +    public WhitelistConstructor(String origin, List<String> canonicalTypeNameParameters) {, +        this.canonicalTypeNameParameters = Collections.unmodifiableList(Objects.requireNonNull(canonicalTypeNameParameters));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    public final ClassLoader classLoader;, +    public final List<WhitelistClass> whitelistClasses;, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses) {, +        this.classLoader = Objects.requireNonNull(classLoader);, +        this.whitelistClasses = Collections.unmodifiableList(Objects.requireNonNull(whitelistClasses));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistClass.java, +    /** Information about where this class was white-listed from. */, +    public final boolean noImport;, +    public WhitelistClass(String origin, String javaClassName, boolean noImport,, +, +        this.noImport = noImport;, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistConstructor.java, +    /** Information about where this constructor was whitelisted from. */, +    public final List<String> canonicalTypeNameParameters;, +    public WhitelistConstructor(String origin, List<String> canonicalTypeNameParameters) {, +        this.canonicalTypeNameParameters = Collections.unmodifiableList(Objects.requireNonNull(canonicalTypeNameParameters));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistField.java, +    /** Information about where this method was whitelisted from. */, +    /** The field name used to look up the field reflection object. */, +    public final String fieldName;, +    /** The canonical type name for the field which can be used to look up the Java field through reflection. */, +    public final String canonicalTypeNameParameter;, +    public WhitelistField(String origin, String fieldName, String canonicalTypeNameParameter) {, +        this.fieldName = Objects.requireNonNull(fieldName);, +        this.canonicalTypeNameParameter = Objects.requireNonNull(canonicalTypeNameParameter);, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    public final ClassLoader classLoader;, +    public final List<WhitelistClass> whitelistClasses;, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses) {, +        this.classLoader = Objects.requireNonNull(classLoader);, +        this.whitelistClasses = Collections.unmodifiableList(Objects.requireNonNull(whitelistClasses));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistClass.java, +    /** Information about where this class was white-listed from. */, +    public final boolean noImport;, +    public WhitelistClass(String origin, String javaClassName, boolean noImport,, +, +        this.noImport = noImport;, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistConstructor.java, +    /** Information about where this constructor was whitelisted from. */, +    public final List<String> canonicalTypeNameParameters;, +    public WhitelistConstructor(String origin, List<String> canonicalTypeNameParameters) {, +        this.canonicalTypeNameParameters = Collections.unmodifiableList(Objects.requireNonNull(canonicalTypeNameParameters));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistField.java, +    /** Information about where this method was whitelisted from. */, +    /** The field name used to look up the field reflection object. */, +    public final String fieldName;, +    /** The canonical type name for the field which can be used to look up the Java field through reflection. */, +    public final String canonicalTypeNameParameter;, +    public WhitelistField(String origin, String fieldName, String canonicalTypeNameParameter) {, +        this.fieldName = Objects.requireNonNull(fieldName);, +        this.canonicalTypeNameParameter = Objects.requireNonNull(canonicalTypeNameParameter);, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistLoader.java, +        List<WhitelistClass> whitelistClasses = new ArrayList<>();, +                String whitelistClassOrigin = null;, +                        whitelistClassOrigin = "[" + filepath + "]:[" + number + "]";, +                        whitelistClasses.add(new WhitelistClass(whitelistClassOrigin, javaClassName, onlyFQNJavaClassName,, +                        whitelistClassOrigin = null;, +        return new Whitelist(loader, whitelistClasses);, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    public final ClassLoader classLoader;, +    public final List<WhitelistClass> whitelistClasses;, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses) {, +        this.classLoader = Objects.requireNonNull(classLoader);, +        this.whitelistClasses = Collections.unmodifiableList(Objects.requireNonNull(whitelistClasses));]