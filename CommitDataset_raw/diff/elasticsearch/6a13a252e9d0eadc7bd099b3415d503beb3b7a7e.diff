[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/CellIdSource.java, +        //different GeoPoints could map to the same or different hashing cells., +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/CellIdSource.java, +        //different GeoPoints could map to the same or different hashing cells., +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +    /**, +     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation., +     */, +    protected abstract ValuesSourceAggregatorFactory<ValuesSource.GeoPoint,?> createFactory(, +        String name, ValuesSourceConfig<ValuesSource.GeoPoint> config, int precision, int requiredSize, int shardSize,, +        SearchContext context, AggregatorFactory<?> parent, Builder subFactoriesBuilder, Map<String, Object> metaData, +    ) throws IOException;, +, +        return createFactory(name, config, precision, requiredSize, shardSize, context, parent,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/CellIdSource.java, +        //different GeoPoints could map to the same or different hashing cells., +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +    /**, +     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation., +     */, +    protected abstract ValuesSourceAggregatorFactory<ValuesSource.GeoPoint,?> createFactory(, +        String name, ValuesSourceConfig<ValuesSource.GeoPoint> config, int precision, int requiredSize, int shardSize,, +        SearchContext context, AggregatorFactory<?> parent, Builder subFactoriesBuilder, Map<String, Object> metaData, +    ) throws IOException;, +, +        return createFactory(name, config, precision, requiredSize, shardSize, context, parent,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregator.java, + * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings., +            super(sourceBucket.hashAsLong, sourceBucket.docCount, sourceBucket.aggregations);, +        void hashAsLong(long hashAsLong) {, +            this.hashAsLong = hashAsLong;, +            this.sourceBucket.hashAsLong = hashAsLong;, +        InternalGeoGridBucket buildBucket(InternalGeoGridBucket bucket, long hashAsLong, long docCount,, +            ordBucket.hashAsLong = hashAsLong;, +            spare.hashAsLong(bucketOrds.get(i));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/CellIdSource.java, +        //different GeoPoints could map to the same or different hashing cells., +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +    /**, +     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation., +     */, +    protected abstract ValuesSourceAggregatorFactory<ValuesSource.GeoPoint,?> createFactory(, +        String name, ValuesSourceConfig<ValuesSource.GeoPoint> config, int precision, int requiredSize, int shardSize,, +        SearchContext context, AggregatorFactory<?> parent, Builder subFactoriesBuilder, Map<String, Object> metaData, +    ) throws IOException;, +, +        return createFactory(name, config, precision, requiredSize, shardSize, context, parent,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregator.java, + * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings., +            super(sourceBucket.hashAsLong, sourceBucket.docCount, sourceBucket.aggregations);, +        void hashAsLong(long hashAsLong) {, +            this.hashAsLong = hashAsLong;, +            this.sourceBucket.hashAsLong = hashAsLong;, +        InternalGeoGridBucket buildBucket(InternalGeoGridBucket bucket, long hashAsLong, long docCount,, +            ordBucket.hashAsLong = hashAsLong;, +            spare.hashAsLong(bucketOrds.get(i));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregationBuilder.java, +import org.elasticsearch.search.aggregations.AggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;, +import org.elasticsearch.search.internal.SearchContext;, +    @Override, +    protected ValuesSourceAggregatorFactory<ValuesSource.GeoPoint, ?> createFactory(, +        String name, ValuesSourceConfig<ValuesSource.GeoPoint> config, int precision, int requiredSize, int shardSize,, +        SearchContext context, AggregatorFactory<?> parent, AggregatorFactories.Builder subFactoriesBuilder,, +        Map<String, Object> metaData, +    ) throws IOException {, +        return new GeoHashGridAggregatorFactory(name, config, precision, requiredSize, shardSize, context, parent,, +            subFactoriesBuilder, metaData);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/CellIdSource.java, +        //different GeoPoints could map to the same or different hashing cells., +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +    /**, +     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation., +     */, +    protected abstract ValuesSourceAggregatorFactory<ValuesSource.GeoPoint,?> createFactory(, +        String name, ValuesSourceConfig<ValuesSource.GeoPoint> config, int precision, int requiredSize, int shardSize,, +        SearchContext context, AggregatorFactory<?> parent, Builder subFactoriesBuilder, Map<String, Object> metaData, +    ) throws IOException;, +, +        return createFactory(name, config, precision, requiredSize, shardSize, context, parent,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregator.java, + * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings., +            super(sourceBucket.hashAsLong, sourceBucket.docCount, sourceBucket.aggregations);, +        void hashAsLong(long hashAsLong) {, +            this.hashAsLong = hashAsLong;, +            this.sourceBucket.hashAsLong = hashAsLong;, +        InternalGeoGridBucket buildBucket(InternalGeoGridBucket bucket, long hashAsLong, long docCount,, +            ordBucket.hashAsLong = hashAsLong;, +            spare.hashAsLong(bucketOrds.get(i));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregationBuilder.java, +import org.elasticsearch.search.aggregations.AggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;, +import org.elasticsearch.search.internal.SearchContext;, +    @Override]