[+++ b/src/main/java/org/elasticsearch/client/transport/NoNodeAvailableException.java, +    public NoNodeAvailableException(String message) {, +        super(message);, +    }, +, +    public NoNodeAvailableException(String message, Throwable t) {, +        super(message, t);, +++ b/src/main/java/org/elasticsearch/client/transport/NoNodeAvailableException.java, +    public NoNodeAvailableException(String message) {, +        super(message);, +    }, +, +    public NoNodeAvailableException(String message, Throwable t) {, +        super(message, t);, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +        ensureNodesAreAvailable(nodes);, +        int index = getNodeNumber();, +                if (e.unwrapCause() instanceof ConnectTransportException) {, +                    logConnectTransportException((ConnectTransportException) e.unwrapCause());, +                } else {, +        throw new NoNodeAvailableException("None of the configured nodes were available: " + nodes);, +        ensureNodesAreAvailable(nodes);, +        int index = getNodeNumber();, +        DiscoveryNode node = nodes.get((index) % nodes.size());, +            callback.doWithNode(node, retryListener);, +                    listener.onFailure(new NoNodeAvailableException("None of the configured nodes were available: " + nodes, e));, +                        onFailure(e1);, +    private int getNodeNumber() {, +        int index = randomNodeGenerator.incrementAndGet();, +        if (index < 0) {, +            index = 0;, +            randomNodeGenerator.set(0);, +        }, +        return index;, +    }, +, +    private void ensureNodesAreAvailable(ImmutableList<DiscoveryNode> nodes) {, +        if (nodes.isEmpty()) {, +            String message = String.format(Locale.ROOT, "None of the configured nodes are available: %s", nodes);, +            throw new NoNodeAvailableException(message);, +        }, +    }, +, +    private void logConnectTransportException(ConnectTransportException connectTransportException) {, +        if (logger.isTraceEnabled()) {, +            logger.trace("Could not connect to [{}] for action [{}], error [{}] [{}]", connectTransportException, connectTransportException.node(), connectTransportException.action(), connectTransportException.status().name(), connectTransportException.getMessage());, +        } else {, +            logger.debug("Could not connect to [{}] for action [{}], error [{}] [{}]", connectTransportException.node(), connectTransportException.action(), connectTransportException.status().name(), connectTransportException.getMessage());, +        }, +    }, +]