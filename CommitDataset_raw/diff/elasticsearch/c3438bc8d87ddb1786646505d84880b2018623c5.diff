[+++ b/x-pack/qa/smoke-test-monitoring-with-watcher/src/test/java/org/elasticsearch/smoketest/MonitoringWithWatcherRestIT.java, +import org.elasticsearch.client.Request;, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        adminClient().performRequest(new Request("DELETE", "/.watch*"));, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_xpack/watcher/watch/" + watchId)));, +            assertOK(client().performRequest(new Request("POST", "/.watches/_refresh")));, +            ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("POST", "/.watches/_count")));, +        Request request = new Request("PUT", "/_xpack/watcher/watch/" + watchId);, +        request.setJsonEntity(WatchSourceBuilders.watchBuilder(), +                .buildAsBytes(XContentType.JSON).utf8ToString());, +        client().performRequest(request);, +        Response response = client().performRequest(new Request("GET", "/_cluster/state/metadata"));, +        ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_cluster/state")));, +        ObjectPath nodesPath = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_nodes")));, +++ b/x-pack/qa/smoke-test-monitoring-with-watcher/src/test/java/org/elasticsearch/smoketest/MonitoringWithWatcherRestIT.java, +import org.elasticsearch.client.Request;, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        adminClient().performRequest(new Request("DELETE", "/.watch*"));, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_xpack/watcher/watch/" + watchId)));, +            assertOK(client().performRequest(new Request("POST", "/.watches/_refresh")));, +            ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("POST", "/.watches/_count")));, +        Request request = new Request("PUT", "/_xpack/watcher/watch/" + watchId);, +        request.setJsonEntity(WatchSourceBuilders.watchBuilder(), +                .buildAsBytes(XContentType.JSON).utf8ToString());, +        client().performRequest(request);, +        Response response = client().performRequest(new Request("GET", "/_cluster/state/metadata"));, +        ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_cluster/state")));, +        ObjectPath nodesPath = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_nodes")));, +++ b/x-pack/qa/smoke-test-watcher-with-security/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherWithSecurityClientYamlTestSuiteIT.java, +import org.elasticsearch.client.Request;, +        Request request = new Request("PUT", "/index_not_allowed_to_read/doc/1");, +        request.setJsonEntity("{\"foo\":\"bar\"}");, +        adminClient().performRequest(request);, +++ b/x-pack/qa/smoke-test-monitoring-with-watcher/src/test/java/org/elasticsearch/smoketest/MonitoringWithWatcherRestIT.java, +import org.elasticsearch.client.Request;, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        adminClient().performRequest(new Request("DELETE", "/.watch*"));, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setJsonEntity(Strings.toString(jsonBuilder().startObject(), +                .startObject("transient"), +                .endObject().endObject()));, +        adminClient().performRequest(request);, +        ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_xpack/watcher/watch/" + watchId)));, +            assertOK(client().performRequest(new Request("POST", "/.watches/_refresh")));, +            ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("POST", "/.watches/_count")));, +        Request request = new Request("PUT", "/_xpack/watcher/watch/" + watchId);, +        request.setJsonEntity(WatchSourceBuilders.watchBuilder(), +                .buildAsBytes(XContentType.JSON).utf8ToString());, +        client().performRequest(request);, +        Response response = client().performRequest(new Request("GET", "/_cluster/state/metadata"));, +        ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_cluster/state")));, +        ObjectPath nodesPath = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_nodes")));, +++ b/x-pack/qa/smoke-test-watcher-with-security/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherWithSecurityClientYamlTestSuiteIT.java, +import org.elasticsearch.client.Request;, +        Request request = new Request("PUT", "/index_not_allowed_to_read/doc/1");, +        request.setJsonEntity("{\"foo\":\"bar\"}");, +        adminClient().performRequest(request);, +++ b/x-pack/qa/smoke-test-watcher-with-security/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherWithSecurityIT.java, +import org.elasticsearch.client.Request;, +        Request createAllowedDoc = new Request("PUT", "/my_test_index/doc/1");, +        createAllowedDoc.setJsonEntity("{ \"value\" : \"15\" }");, +        createAllowedDoc.addParameter("refresh", "true");, +        adminClient().performRequest(createAllowedDoc);]