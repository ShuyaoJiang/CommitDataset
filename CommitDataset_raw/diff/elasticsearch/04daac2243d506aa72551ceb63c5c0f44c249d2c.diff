[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +import java.lang.reflect.Constructor;, +     * The class/interface the script is guaranteed to derive/implement., +     */, +    private final Class<?> base;, +, +    /**, +     * The whitelist the script will use., +     */, +    private final Definition definition;, +, +    /**, +     * Standard constructor., +     * @param base The class/interface the script is guaranteed to derive/implement., +     * @param definition The whitelist the script will use., +     */, +    Compiler(Class<?> base, Definition definition) {, +        this.base = base;, +        this.definition = definition;, +    }, +, +    /**, +     * @return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript}, +    Constructor<? extends PainlessScript> compile(Loader loader, String name, String source, CompilerSettings settings) {, +        ScriptInterface scriptInterface = new ScriptInterface(definition, base);, +            return clazz.getConstructor();, +    byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {, +        ScriptInterface scriptInterface = new ScriptInterface(definition, base);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +import java.lang.reflect.Constructor;, +     * The class/interface the script is guaranteed to derive/implement., +     */, +    private final Class<?> base;, +, +    /**, +     * The whitelist the script will use., +     */, +    private final Definition definition;, +, +    /**, +     * Standard constructor., +     * @param base The class/interface the script is guaranteed to derive/implement., +     * @param definition The whitelist the script will use., +     */, +    Compiler(Class<?> base, Definition definition) {, +        this.base = base;, +        this.definition = definition;, +    }, +, +    /**, +     * @return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript}, +    Constructor<? extends PainlessScript> compile(Loader loader, String name, String source, CompilerSettings settings) {, +        ScriptInterface scriptInterface = new ScriptInterface(definition, base);, +            return clazz.getConstructor();, +    byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {, +        ScriptInterface scriptInterface = new ScriptInterface(definition, base);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessPlugin.java, +        return new PainlessScriptEngine(settings, contexts);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +import java.lang.reflect.Constructor;, +     * The class/interface the script is guaranteed to derive/implement., +     */, +    private final Class<?> base;, +, +    /**, +     * The whitelist the script will use., +     */, +    private final Definition definition;, +, +    /**, +     * Standard constructor., +     * @param base The class/interface the script is guaranteed to derive/implement., +     * @param definition The whitelist the script will use., +     */, +    Compiler(Class<?> base, Definition definition) {, +        this.base = base;, +        this.definition = definition;, +    }, +, +    /**, +     * @return An executable script that implements both a specified interface and is a subclass of {@link PainlessScript}, +    Constructor<? extends PainlessScript> compile(Loader loader, String name, String source, CompilerSettings settings) {, +        ScriptInterface scriptInterface = new ScriptInterface(definition, base);, +            return clazz.getConstructor();, +    byte[] compile(String name, String source, CompilerSettings settings, Printer debugStream) {, +        ScriptInterface scriptInterface = new ScriptInterface(definition, base);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessPlugin.java, +        return new PainlessScriptEngine(settings, contexts);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +import java.lang.reflect.Constructor;, +import java.util.Collection;, +import java.util.Collections;, +     * of {@link PainlessScriptEngine#PainlessScriptEngine(Settings, Collection)}., +    private final Map<ScriptContext<?>, Compiler> contextsToCompilers;, +, +    public PainlessScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {, +, +, +        Map<ScriptContext<?>, Compiler> contextsToCompilers = new HashMap<>();, +]