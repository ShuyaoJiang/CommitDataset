[+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java, +    @Override, +++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java, +    @Override, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +            return Double.compare(this.dcg, other.dcg) == 0 &&, +                   Double.compare(this.idcg, other.idcg) == 0 &&, +                   this.unratedDocs == other.unratedDocs;, +++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java, +    @Override, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +            return Double.compare(this.dcg, other.dcg) == 0 &&, +                   Double.compare(this.idcg, other.idcg) == 0 &&, +                   this.unratedDocs == other.unratedDocs;, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/ExpectedReciprocalRank.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.rankeval;, +, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.search.SearchHit;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Objects;, +import java.util.Optional;, +, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +import static org.elasticsearch.index.rankeval.EvaluationMetric.joinHitsWithRatings;, +, +/**, + * Implementation of the Expected Reciprocal Rank metric described in:<p>, + *, + * Chapelle, O., Metlzer, D., Zhang, Y., &amp; Grinspan, P. (2009).<br>, + * Expected reciprocal rank for graded relevance.<br>, + * Proceeding of the 18th ACM Conference on Information and Knowledge Management - CIKM â€™09, 621.<br>, + * https://doi.org/10.1145/1645953.1646033, + */, +public class ExpectedReciprocalRank implements EvaluationMetric {, +, +    /** the default search window size */, +    private static final int DEFAULT_K = 10;, +, +    /** the search window size */, +    private final int k;, +, +    /**, +     * Optional. If set, this will be the rating for docs that are unrated in the ranking evaluation request, +     */, +    private final Integer unknownDocRating;, +, +    private final int maxRelevance;, +, +    private final double two_pow_maxRelevance;, +, +    public static final String NAME = "expected_reciprocal_rank";, +, +    public ExpectedReciprocalRank(int maxRelevance) {, +        this(maxRelevance, null, DEFAULT_K);, +    }, +, +    /**, +     * @param maxRelevance, +     *            the maximal relevance judgment in the evaluation dataset, +     * @param unknownDocRating, +     *            the rating for documents the user hasn't supplied an explicit, +     *            rating for. Can be {@code null}, in which case document is, +     *            skipped., +     * @param k, +     *            the search window size all request use., +     */, +    public ExpectedReciprocalRank(int maxRelevance, @Nullable Integer unknownDocRating, int k) {, +        this.maxRelevance = maxRelevance;, +        this.unknownDocRating = unknownDocRating;, +        this.k = k;]