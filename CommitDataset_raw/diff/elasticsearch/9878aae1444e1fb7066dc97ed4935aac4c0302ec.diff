[+++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                if (isReadOnly()) {, +                    logger.debug("[{}] Incompatible snapshots blob [{}] does not exist, the likely " +, +                                 "reason is that there are no incompatible snapshots in the repository",, +                                 metadata.name(), INCOMPATIBLE_SNAPSHOTS_BLOB);, +                } else {, +                    // write an empty incompatible-snapshots blob - we do this so that there, +                    // is a blob present, which helps speed up some cloud-based repositories, +                    // (e.g. S3), which retry if a blob is missing with exponential backoff,, +                    // delaying the read of repository data and sometimes causing a timeout, +                    writeIncompatibleSnapshots(RepositoryData.EMPTY);, +                }, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                if (isReadOnly()) {, +                    logger.debug("[{}] Incompatible snapshots blob [{}] does not exist, the likely " +, +                                 "reason is that there are no incompatible snapshots in the repository",, +                                 metadata.name(), INCOMPATIBLE_SNAPSHOTS_BLOB);, +                } else {, +                    // write an empty incompatible-snapshots blob - we do this so that there, +                    // is a blob present, which helps speed up some cloud-based repositories, +                    // (e.g. S3), which retry if a blob is missing with exponential backoff,, +                    // delaying the read of repository data and sometimes causing a timeout, +                    writeIncompatibleSnapshots(RepositoryData.EMPTY);, +                }, +++ b/core/src/test/java/org/elasticsearch/repositories/blobstore/BlobStoreRepositoryTests.java, +    public void testIncompatibleSnapshotsBlobExists() throws Exception {, +        final BlobStoreRepository repository = setupRepo();, +        RepositoryData emptyData = RepositoryData.EMPTY;, +        repository.writeIndexGen(emptyData, emptyData.getGenId());, +        RepositoryData repoData = repository.getRepositoryData();, +        assertEquals(emptyData, repoData);, +        assertTrue(repository.blobContainer().blobExists("incompatible-snapshots"));, +        repoData = addRandomSnapshotsToRepoData(repository.getRepositoryData(), true);, +        repository.writeIndexGen(repoData, repoData.getGenId());, +        assertEquals(0, repository.getRepositoryData().getIncompatibleSnapshotIds().size());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                if (isReadOnly()) {, +                    logger.debug("[{}] Incompatible snapshots blob [{}] does not exist, the likely " +, +                                 "reason is that there are no incompatible snapshots in the repository",, +                                 metadata.name(), INCOMPATIBLE_SNAPSHOTS_BLOB);, +                } else {, +                    // write an empty incompatible-snapshots blob - we do this so that there, +                    // is a blob present, which helps speed up some cloud-based repositories, +                    // (e.g. S3), which retry if a blob is missing with exponential backoff,, +                    // delaying the read of repository data and sometimes causing a timeout, +                    writeIncompatibleSnapshots(RepositoryData.EMPTY);, +                }, +++ b/core/src/test/java/org/elasticsearch/repositories/blobstore/BlobStoreRepositoryTests.java, +    public void testIncompatibleSnapshotsBlobExists() throws Exception {, +        final BlobStoreRepository repository = setupRepo();, +        RepositoryData emptyData = RepositoryData.EMPTY;, +        repository.writeIndexGen(emptyData, emptyData.getGenId());, +        RepositoryData repoData = repository.getRepositoryData();, +        assertEquals(emptyData, repoData);, +        assertTrue(repository.blobContainer().blobExists("incompatible-snapshots"));, +        repoData = addRandomSnapshotsToRepoData(repository.getRepositoryData(), true);, +        repository.writeIndexGen(repoData, repoData.getGenId());, +        assertEquals(0, repository.getRepositoryData().getIncompatibleSnapshotIds().size());, +    }, +, +++ b/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java, +        // Subtract four files that will remain in the repository:, +        //   (4) incompatible-snapshots, +        assertThat("not all files were deleted during snapshot cancellation",, +            numberOfFilesBeforeSnapshot, equalTo(numberOfFiles(repo) - 4));, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                if (isReadOnly()) {, +                    logger.debug("[{}] Incompatible snapshots blob [{}] does not exist, the likely " +, +                                 "reason is that there are no incompatible snapshots in the repository",, +                                 metadata.name(), INCOMPATIBLE_SNAPSHOTS_BLOB);, +                } else {, +                    // write an empty incompatible-snapshots blob - we do this so that there, +                    // is a blob present, which helps speed up some cloud-based repositories, +                    // (e.g. S3), which retry if a blob is missing with exponential backoff,, +                    // delaying the read of repository data and sometimes causing a timeout, +                    writeIncompatibleSnapshots(RepositoryData.EMPTY);, +                }, +++ b/core/src/test/java/org/elasticsearch/repositories/blobstore/BlobStoreRepositoryTests.java, +    public void testIncompatibleSnapshotsBlobExists() throws Exception {, +        final BlobStoreRepository repository = setupRepo();, +        RepositoryData emptyData = RepositoryData.EMPTY;, +        repository.writeIndexGen(emptyData, emptyData.getGenId());, +        RepositoryData repoData = repository.getRepositoryData();, +        assertEquals(emptyData, repoData);, +        assertTrue(repository.blobContainer().blobExists("incompatible-snapshots"));, +        repoData = addRandomSnapshotsToRepoData(repository.getRepositoryData(), true);, +        repository.writeIndexGen(repoData, repoData.getGenId());, +        assertEquals(0, repository.getRepositoryData().getIncompatibleSnapshotIds().size());, +    }, +, +++ b/core/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java, +        // Subtract four files that will remain in the repository:, +        //   (4) incompatible-snapshots, +        assertThat("not all files were deleted during snapshot cancellation",, +            numberOfFilesBeforeSnapshot, equalTo(numberOfFiles(repo) - 4));, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +                    "plus two because one backup index-N file should remain and incompatible-snapshots");, +        assertThat(numberOfFiles(repo), equalTo(numberOfFiles[0] + 2));]