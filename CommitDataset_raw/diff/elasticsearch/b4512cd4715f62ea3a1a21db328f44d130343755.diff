[+++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +import com.google.common.collect.Maps;, +                    List defaultList = (List) defaultEntry.getValue();, +                    List contentList = (List) content.get(defaultEntry.getKey());, +, +                    if (allListValuesAreMapsOfOne(defaultList) && allListValuesAreMapsOfOne(contentList)) {, +                        // all are in the form of [ {"key1" : {}}, {"key2" : {}} ], merge based on keys, +                        Map<String, Map<String, Object>> processed = Maps.newLinkedHashMap();, +                        for (Object o : contentList) {, +                            Map<String, Object> map = (Map<String, Object>) o;, +                            Map.Entry<String, Object> entry = map.entrySet().iterator().next();, +                            processed.put(entry.getKey(), map);, +                        }, +                        for (Object o : defaultList) {, +                            Map<String, Object> map = (Map<String, Object>) o;, +                            Map.Entry<String, Object> entry = map.entrySet().iterator().next();, +                            if (processed.containsKey(entry.getKey())) {, +                                mergeDefaults(processed.get(entry.getKey()), map);, +                            }, +                        }, +                        for (Map<String, Object> map : processed.values()) {, +                            mergedList.add(map);, +                        }, +                    } else {, +                        // if both are lists, simply combine them, first the defaults, then the content, +                    }, +    private static boolean allListValuesAreMapsOfOne(List list) {, +        for (Object o : list) {, +            if (!(o instanceof Map)) {, +                return false;, +            }, +            if (((Map) o).size() != 1) {, +                return false;, +            }, +        }, +        return true;, +    }, +]