[+++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +        licensesService.registerLicense(request, listener);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +        licensesService.registerLicense(request, listener);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +    public void registerLicense(final PutLicenseRequest request, final ActionListener<PutLicenseResponse> listener) {, +            listener.onResponse(new PutLicenseResponse(true, LicensesStatus.INVALID));, +            listener.onResponse(new PutLicenseResponse(true, LicensesStatus.EXPIRED));, +                        listener.onResponse(new PutLicenseResponse(false, LicensesStatus.VALID, ACKNOWLEDGEMENT_HEADER,, +                    AckedClusterStateUpdateTask<PutLicenseResponse>(request, listener) {, +                protected PutLicenseResponse newResponse(boolean acknowledged) {, +                    return new PutLicenseResponse(acknowledged, LicensesStatus.VALID);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +        licensesService.registerLicense(request, listener);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +    public void registerLicense(final PutLicenseRequest request, final ActionListener<PutLicenseResponse> listener) {, +            listener.onResponse(new PutLicenseResponse(true, LicensesStatus.INVALID));, +            listener.onResponse(new PutLicenseResponse(true, LicensesStatus.EXPIRED));, +                        listener.onResponse(new PutLicenseResponse(false, LicensesStatus.VALID, ACKNOWLEDGEMENT_HEADER,, +                    AckedClusterStateUpdateTask<PutLicenseResponse>(request, listener) {, +                protected PutLicenseResponse newResponse(boolean acknowledged) {, +                    return new PutLicenseResponse(acknowledged, LicensesStatus.VALID);, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/TestUtils.java, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +        licensesService.registerLicense(putLicenseRequest, new ActionListener<PutLicenseResponse>() {, +            public void onResponse(PutLicenseResponse licensesUpdateResponse) {, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +        licensesService.registerLicense(request, listener);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +    public void registerLicense(final PutLicenseRequest request, final ActionListener<PutLicenseResponse> listener) {, +            listener.onResponse(new PutLicenseResponse(true, LicensesStatus.INVALID));, +            listener.onResponse(new PutLicenseResponse(true, LicensesStatus.EXPIRED));, +                        listener.onResponse(new PutLicenseResponse(false, LicensesStatus.VALID, ACKNOWLEDGEMENT_HEADER,, +                    AckedClusterStateUpdateTask<PutLicenseResponse>(request, listener) {, +                protected PutLicenseResponse newResponse(boolean acknowledged) {, +                    return new PutLicenseResponse(acknowledged, LicensesStatus.VALID);, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/TestUtils.java, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +        licensesService.registerLicense(putLicenseRequest, new ActionListener<PutLicenseResponse>() {, +            public void onResponse(PutLicenseResponse licensesUpdateResponse) {, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/core/LicensesAcknowledgementTests.java, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +    private static class AssertingLicensesUpdateResponse implements ActionListener<PutLicenseResponse> {, +        public void onResponse(PutLicenseResponse licensesUpdateResponse) {]