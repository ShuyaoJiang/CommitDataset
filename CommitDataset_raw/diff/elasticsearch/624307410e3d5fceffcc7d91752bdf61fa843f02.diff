[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/Annotation.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.core.ml.annotations;, +, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.xpack.core.ml.job.config.Job;, +import org.elasticsearch.xpack.core.ml.utils.time.TimeUtils;, +, +import java.io.IOException;, +import java.util.Date;, +import java.util.Objects;, +, +public class Annotation implements ToXContentObject, Writeable {, +, +    public static final ParseField ANNOTATION = new ParseField("annotation");, +    public static final ParseField CREATE_TIME = new ParseField("create_time");, +    public static final ParseField CREATE_USERNAME = new ParseField("create_username");, +    public static final ParseField TIMESTAMP = new ParseField("timestamp");, +    public static final ParseField END_TIMESTAMP = new ParseField("end_timestamp");, +    public static final ParseField MODIFIED_TIME = new ParseField("modified_time");, +    public static final ParseField MODIFIED_USERNAME = new ParseField("modified_username");, +    public static final ParseField TYPE = new ParseField("type");, +, +    public static final ObjectParser<Annotation, Void> PARSER = new ObjectParser<>(TYPE.getPreferredName(), true, Annotation::new);, +, +    static {, +        PARSER.declareString(Annotation::setAnnotation, ANNOTATION);, +        PARSER.declareField(Annotation::setCreateTime,, +            p -> TimeUtils.parseTimeField(p, CREATE_TIME.getPreferredName()), CREATE_TIME, ObjectParser.ValueType.VALUE);, +        PARSER.declareString(Annotation::setCreateUsername, CREATE_USERNAME);, +        PARSER.declareField(Annotation::setTimestamp,, +            p -> TimeUtils.parseTimeField(p, TIMESTAMP.getPreferredName()), TIMESTAMP, ObjectParser.ValueType.VALUE);, +        PARSER.declareField(Annotation::setEndTimestamp,, +            p -> TimeUtils.parseTimeField(p, END_TIMESTAMP.getPreferredName()), END_TIMESTAMP, ObjectParser.ValueType.VALUE);, +        PARSER.declareString(Annotation::setJobId, Job.ID);, +        PARSER.declareField(Annotation::setModifiedTime,, +            p -> TimeUtils.parseTimeField(p, MODIFIED_TIME.getPreferredName()), MODIFIED_TIME, ObjectParser.ValueType.VALUE);, +        PARSER.declareString(Annotation::setModifiedUsername, MODIFIED_USERNAME);, +        PARSER.declareString(Annotation::setType, TYPE);, +    }, +, +    private String annotation;, +    private Date createTime;, +    private String createUsername;, +    private Date timestamp;, +    private Date endTimestamp;, +    /**, +     * Unlike most ML classes, this may be <code>null</code> or wildcarded, +     */, +    private String jobId;, +    private Date modifiedTime;, +    private String modifiedUsername;, +    private String type;, +, +    private Annotation() {, +    }, +, +    public Annotation(String annotation, Date createTime, String createUsername, Date timestamp, Date endTimestamp, String jobId,, +                      Date modifiedTime, String modifiedUsername, String type) {, +        this.annotation = Objects.requireNonNull(annotation);, +        this.createTime = Objects.requireNonNull(createTime);, +        this.createUsername = Objects.requireNonNull(createUsername);, +        this.timestamp = Objects.requireNonNull(timestamp);, +        this.endTimestamp = endTimestamp;, +        this.jobId = jobId;, +        this.modifiedTime = modifiedTime;, +        this.modifiedUsername = modifiedUsername;, +        this.type = Objects.requireNonNull(type);, +    }, +, +    public Annotation(StreamInput in) throws IOException {, +        annotation = in.readString();, +        createTime = new Date(in.readLong());, +        createUsername = in.readString();, +        timestamp = new Date(in.readLong());, +        if (in.readBoolean()) {, +            endTimestamp = new Date(in.readLong());, +        } else {, +            endTimestamp = null;, +        }, +        jobId = in.readOptionalString();, +        if (in.readBoolean()) {, +            modifiedTime = new Date(in.readLong());, +        } else {, +            modifiedTime = null;, +        }, +        modifiedUsername = in.readOptionalString();, +        type = in.readString();, +    }, +]