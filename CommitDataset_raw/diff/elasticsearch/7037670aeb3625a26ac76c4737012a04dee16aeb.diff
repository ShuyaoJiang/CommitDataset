[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    /** Wrapper for command line argument: surrounds comma with double quotes **/, +    private static class EscapeCommaWrapper {, +, +        Object arg, +, +        public String toString() {, +            String s = arg.toString(), +, +            /// Surround strings that contains a comma with double quotes, +            return s, +                // argument are wrapped in an ExecArgWrapper that escapes commas, +                args execArgs.collect { a -> new EscapeCommaWrapper(arg: a) }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    /** Wrapper for command line argument: surrounds comma with double quotes **/, +    private static class EscapeCommaWrapper {, +, +        Object arg, +, +        public String toString() {, +            String s = arg.toString(), +, +            /// Surround strings that contains a comma with double quotes, +            return s, +                // argument are wrapped in an ExecArgWrapper that escapes commas, +                args execArgs.collect { a -> new EscapeCommaWrapper(arg: a) }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    /** Wrapper for command line argument: surrounds comma with double quotes **/, +    private static class EscapeCommaWrapper {, +, +        Object arg, +, +        public String toString() {, +            String s = arg.toString(), +, +            /// Surround strings that contains a comma with double quotes, +            return s, +                // argument are wrapped in an ExecArgWrapper that escapes commas, +                args execArgs.collect { a -> new EscapeCommaWrapper(arg: a) }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_3_1_ID = 2030199;, +    public static final Version V_2_3_1 = new Version(V_2_3_1_ID, org.apache.lucene.util.Version.LUCENE_5_5_0);, +            case V_2_3_1_ID:, +                return V_2_3_1;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    /** Wrapper for command line argument: surrounds comma with double quotes **/, +    private static class EscapeCommaWrapper {, +, +        Object arg, +, +        public String toString() {, +            String s = arg.toString(), +, +            /// Surround strings that contains a comma with double quotes, +            return s, +                // argument are wrapped in an ExecArgWrapper that escapes commas, +                args execArgs.collect { a -> new EscapeCommaWrapper(arg: a) }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_3_1_ID = 2030199;, +    public static final Version V_2_3_1 = new Version(V_2_3_1_ID, org.apache.lucene.util.Version.LUCENE_5_5_0);, +            case V_2_3_1_ID:, +                return V_2_3_1;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    /** Wrapper for command line argument: surrounds comma with double quotes **/, +    private static class EscapeCommaWrapper {, +, +        Object arg, +, +        public String toString() {, +            String s = arg.toString(), +, +            /// Surround strings that contains a comma with double quotes, +            return s, +                // argument are wrapped in an ExecArgWrapper that escapes commas, +                args execArgs.collect { a -> new EscapeCommaWrapper(arg: a) }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_3_1_ID = 2030199;, +    public static final Version V_2_3_1 = new Version(V_2_3_1_ID, org.apache.lucene.util.Version.LUCENE_5_5_0);, +            case V_2_3_1_ID:, +                return V_2_3_1;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                            listener.onFailure(exp.getCause());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    /** Wrapper for command line argument: surrounds comma with double quotes **/]