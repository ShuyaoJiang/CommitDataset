[+++ b/core/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +import com.google.common.base.Strings;, +, +    /**, +     * Checks for a deprecated setting and logs the correct alternative, +     */, +    protected void logDeprecatedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] is deprecated, use [{}] instead", settingName, alternativeName);, +        }, +    }, +, +    /**, +     * Checks for a removed setting and logs the correct alternative, +     */, +    protected void logRemovedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] has been removed, use [{}] instead", settingName, alternativeName);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +import com.google.common.base.Strings;, +, +    /**, +     * Checks for a deprecated setting and logs the correct alternative, +     */, +    protected void logDeprecatedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] is deprecated, use [{}] instead", settingName, alternativeName);, +        }, +    }, +, +    /**, +     * Checks for a removed setting and logs the correct alternative, +     */, +    protected void logRemovedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] has been removed, use [{}] instead", settingName, alternativeName);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java, + * registered watcher periodically. The frequency of checks can be specified using {@code resource.reload.interval} setting, which, + * defaults to {@code 60s}. The service can be disabled by setting {@code resource.reload.enabled} setting to {@code false}., +    public enum Frequency {, +        Frequency(TimeValue interval) {, +        this.enabled = settings.getAsBoolean("resource.reload.enabled", true);, +        TimeValue interval = settings.getAsTime("resource.reload.interval.low", Frequency.LOW.interval);, +        interval = settings.getAsTime("resource.reload.interval.medium", settings.getAsTime("resource.reload.interval", Frequency.MEDIUM.interval));, +        interval = settings.getAsTime("resource.reload.interval.high", Frequency.HIGH.interval);, +, +        logRemovedSetting("watcher.enabled", "resource.reload.enabled");, +        logRemovedSetting("watcher.interval", "resource.reload.interval");, +        logRemovedSetting("watcher.interval.low", "resource.reload.interval.low");, +        logRemovedSetting("watcher.interval.medium", "resource.reload.interval.medium");, +        logRemovedSetting("watcher.interval.high", "resource.reload.interval.high");, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +import com.google.common.base.Strings;, +, +    /**, +     * Checks for a deprecated setting and logs the correct alternative, +     */, +    protected void logDeprecatedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] is deprecated, use [{}] instead", settingName, alternativeName);, +        }, +    }, +, +    /**, +     * Checks for a removed setting and logs the correct alternative, +     */, +    protected void logRemovedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] has been removed, use [{}] instead", settingName, alternativeName);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java, + * registered watcher periodically. The frequency of checks can be specified using {@code resource.reload.interval} setting, which, + * defaults to {@code 60s}. The service can be disabled by setting {@code resource.reload.enabled} setting to {@code false}., +    public enum Frequency {, +        Frequency(TimeValue interval) {, +        this.enabled = settings.getAsBoolean("resource.reload.enabled", true);, +        TimeValue interval = settings.getAsTime("resource.reload.interval.low", Frequency.LOW.interval);, +        interval = settings.getAsTime("resource.reload.interval.medium", settings.getAsTime("resource.reload.interval", Frequency.MEDIUM.interval));, +        interval = settings.getAsTime("resource.reload.interval.high", Frequency.HIGH.interval);, +, +        logRemovedSetting("watcher.enabled", "resource.reload.enabled");, +        logRemovedSetting("watcher.interval", "resource.reload.interval");, +        logRemovedSetting("watcher.interval.low", "resource.reload.interval.low");, +        logRemovedSetting("watcher.interval.medium", "resource.reload.interval.medium");, +        logRemovedSetting("watcher.interval.high", "resource.reload.interval.high");, +++ b/core/src/test/java/org/elasticsearch/watcher/ResourceWatcherServiceTests.java, +                .put("resource.reload.interval", "40s") // only applies to medium, +                .put("resource.reload.interval.high", "10s"), +                .put("resource.reload.interval.medium", "20s"), +                .put("resource.reload.interval.low", "30s"), +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +import com.google.common.base.Strings;, +, +    /**, +     * Checks for a deprecated setting and logs the correct alternative]