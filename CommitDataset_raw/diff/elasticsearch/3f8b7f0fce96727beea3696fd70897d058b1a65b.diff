[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AllocationDeciders.java, +                .add(new AwarenessAllocationDecider(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AllocationDeciders.java, +                .add(new AwarenessAllocationDecider(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.node.settings.NodeSettingsService;, +import java.util.HashMap;, +    static {, +        MetaData.addDynamicSettings(, +                "cluster.routing.allocation.awareness.attributes",, +                "cluster.routing.allocation.awareness.force.*", +        );, +    }, +, +    class ApplySettings implements NodeSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            String[] awarenessAttributes = settings.getAsArray("cluster.routing.allocation.awareness.attributes", null);, +            if (awarenessAttributes != null) {, +                logger.info("updating [cluster.routing.allocation.awareness.attributes] from [{}] to [{}]", AwarenessAllocationDecider.this.awarenessAttributes, awarenessAttributes);, +                AwarenessAllocationDecider.this.awarenessAttributes = awarenessAttributes;, +            }, +            Map<String, String[]> forcedAwarenessAttributes = new HashMap<String, String[]>(AwarenessAllocationDecider.this.forcedAwarenessAttributes);, +            Map<String, Settings> forceGroups = settings.getGroups("cluster.routing.allocation.awareness.force.");, +            if (!forceGroups.isEmpty()) {, +                for (Map.Entry<String, Settings> entry : forceGroups.entrySet()) {, +                    String[] aValues = entry.getValue().getAsArray("values");, +                    if (aValues.length > 0) {, +                        forcedAwarenessAttributes.put(entry.getKey(), aValues);, +                    }, +                }, +            }, +            AwarenessAllocationDecider.this.forcedAwarenessAttributes = forcedAwarenessAttributes;, +        }, +    }, +, +    @Inject public AwarenessAllocationDecider(Settings settings, NodeSettingsService nodeSettingsService) {, +            String[] aValues = entry.getValue().getAsArray("values");, +            if (aValues.length > 0) {, +                forcedAwarenessAttributes.put(entry.getKey(), aValues);, +        nodeSettingsService.addListener(new ApplySettings());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AllocationDeciders.java, +                .add(new AwarenessAllocationDecider(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.node.settings.NodeSettingsService;, +import java.util.HashMap;, +    static {, +        MetaData.addDynamicSettings(, +                "cluster.routing.allocation.awareness.attributes",, +                "cluster.routing.allocation.awareness.force.*", +        );, +    }, +, +    class ApplySettings implements NodeSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            String[] awarenessAttributes = settings.getAsArray("cluster.routing.allocation.awareness.attributes", null);, +            if (awarenessAttributes != null) {, +                logger.info("updating [cluster.routing.allocation.awareness.attributes] from [{}] to [{}]", AwarenessAllocationDecider.this.awarenessAttributes, awarenessAttributes);, +                AwarenessAllocationDecider.this.awarenessAttributes = awarenessAttributes;, +            }, +            Map<String, String[]> forcedAwarenessAttributes = new HashMap<String, String[]>(AwarenessAllocationDecider.this.forcedAwarenessAttributes);, +            Map<String, Settings> forceGroups = settings.getGroups("cluster.routing.allocation.awareness.force.");, +            if (!forceGroups.isEmpty()) {, +                for (Map.Entry<String, Settings> entry : forceGroups.entrySet()) {, +                    String[] aValues = entry.getValue().getAsArray("values");, +                    if (aValues.length > 0) {, +                        forcedAwarenessAttributes.put(entry.getKey(), aValues);, +                    }, +                }, +            }, +            AwarenessAllocationDecider.this.forcedAwarenessAttributes = forcedAwarenessAttributes;, +        }, +    }, +, +    @Inject public AwarenessAllocationDecider(Settings settings, NodeSettingsService nodeSettingsService) {, +            String[] aValues = entry.getValue().getAsArray("values");, +            if (aValues.length > 0) {, +                forcedAwarenessAttributes.put(entry.getKey(), aValues);, +        nodeSettingsService.addListener(new ApplySettings());, +    }, +, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/cluster/MinimumMasterNodesTests.java, +        Thread.sleep(1000);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AllocationDeciders.java, +                .add(new AwarenessAllocationDecider(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.node.settings.NodeSettingsService;, +import java.util.HashMap;, +    static {, +        MetaData.addDynamicSettings(, +                "cluster.routing.allocation.awareness.attributes",, +                "cluster.routing.allocation.awareness.force.*", +        );, +    }, +, +    class ApplySettings implements NodeSettingsService.Listener {]