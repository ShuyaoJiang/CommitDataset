[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/BroadcastResponse.java, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.index.shard.ShardNotFoundException;, +    public BroadcastResponse(int totalShards, int successfulShards, int failedShards,, +                             List<? extends ShardOperationFailedException> shardFailures) {, +        assertNoShardNotAvailableFailures(shardFailures);, +        this.shardFailures = shardFailures == null ? EMPTY :, +                shardFailures.toArray(new ShardOperationFailedException[shardFailures.size()]);, +    }, +, +    private void assertNoShardNotAvailableFailures(List<? extends ShardOperationFailedException> shardFailures) {, +        if (shardFailures != null) {, +            for (Object e : shardFailures) {, +                assert (e instanceof ShardNotFoundException) == false : "expected no ShardNotFoundException failures, but got " + e;, +            }, +        }, +     * The REST status that should be used for the response, +     */, +    public RestStatus getStatus() {, +        if (failedShards > 0) {, +            return shardFailures[0].status();, +        } else {, +            return RestStatus.OK;, +        }, +    }, +, +    /**, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/BroadcastResponse.java, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.index.shard.ShardNotFoundException;, +    public BroadcastResponse(int totalShards, int successfulShards, int failedShards,, +                             List<? extends ShardOperationFailedException> shardFailures) {, +        assertNoShardNotAvailableFailures(shardFailures);, +        this.shardFailures = shardFailures == null ? EMPTY :, +                shardFailures.toArray(new ShardOperationFailedException[shardFailures.size()]);, +    }, +, +    private void assertNoShardNotAvailableFailures(List<? extends ShardOperationFailedException> shardFailures) {, +        if (shardFailures != null) {, +            for (Object e : shardFailures) {, +                assert (e instanceof ShardNotFoundException) == false : "expected no ShardNotFoundException failures, but got " + e;, +            }, +        }, +     * The REST status that should be used for the response, +     */, +    public RestStatus getStatus() {, +        if (failedShards > 0) {, +            return shardFailures[0].status();, +        } else {, +            return RestStatus.OK;, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +                replicasProxy.markShardCopyAsStaleIfNeeded(replicaRequest.shardId(), allocationId, replicaRequest.primaryTerm(),, +                    replicasProxy.failShardIfNeeded(shard, replicaRequest.primaryTerm(), message,, +                            replicaException, ReplicationOperation.this::decPendingAndFinishIfNeeded,, +                            ReplicationOperation.this::onPrimaryDemoted, throwable -> decPendingAndFinishIfNeeded());, +    /**, +     * An encapsulation of an operation that is to be performed on the primary shard, +     */, +                RequestT extends ReplicationRequest<RequestT>,, +                ReplicaRequestT extends ReplicationRequest<ReplicaRequestT>,, +                PrimaryResultT extends PrimaryResult<ReplicaRequestT>, +        PrimaryResultT perform(RequestT request) throws Exception;, +    /**, +     * An encapsulation of an operation that will be executed on the replica shards, if present., +     */, +    public interface Replicas<RequestT extends ReplicationRequest<RequestT>> {, +        void performOn(ShardRouting replica, RequestT replicaRequest, ActionListener<ReplicaResponse> listener);, +         * Fail the specified shard if needed, removing it from the current set, +         * of active shards. Whether a failure is needed is left up to the, +         * implementation., +         *, +        void failShardIfNeeded(ShardRouting replica, long primaryTerm, String message, Exception exception, Runnable onSuccess,, +         * Marks shard copy as stale if needed, removing its allocation id from, +         * the set of in-sync allocation ids. Whether marking as stale is needed, +         * is left up to the implementation., +        void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, long primaryTerm, Runnable onSuccess,, +    public interface PrimaryResult<RequestT extends ReplicationRequest<RequestT>> {, +        @Nullable RequestT replicaRequest();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/BroadcastResponse.java, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.index.shard.ShardNotFoundException;, +    public BroadcastResponse(int totalShards, int successfulShards, int failedShards,, +                             List<? extends ShardOperationFailedException> shardFailures) {, +        assertNoShardNotAvailableFailures(shardFailures);, +        this.shardFailures = shardFailures == null ? EMPTY :, +                shardFailures.toArray(new ShardOperationFailedException[shardFailures.size()]);, +    }, +, +    private void assertNoShardNotAvailableFailures(List<? extends ShardOperationFailedException> shardFailures) {, +        if (shardFailures != null) {, +            for (Object e : shardFailures) {, +                assert (e instanceof ShardNotFoundException) == false : "expected no ShardNotFoundException failures, but got " + e;]