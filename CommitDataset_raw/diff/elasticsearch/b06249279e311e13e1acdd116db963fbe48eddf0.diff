[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/x-pack/build.gradle, +import java.nio.charset.StandardCharsets, +, +        for (int i = 0; i < 10; i++) {, +          // we use custom wait logic here as the elastic user is not available immediately and ant.get will fail when a 401 is returned, +          HttpURLConnection httpURLConnection = null;, +          try {, +            httpURLConnection = (HttpURLConnection) new URL("http://${node.httpUri()}").openConnection();, +            httpURLConnection.setRequestProperty("Authorization", "Basic " +, +                    Base64.getEncoder().encodeToString("elastic:changeme".getBytes(StandardCharsets.UTF_8)));, +            httpURLConnection.setRequestMethod("GET");, +            httpURLConnection.connect();, +            if (httpURLConnection.getResponseCode() == 200) {, +              tmpFile.withWriter StandardCharsets.UTF_8.name(), {, +                it.write(httpURLConnection.getInputStream().getText(StandardCharsets.UTF_8.name())), +              }, +            }, +          } catch (Exception e) {, +            e.printStackTrace(), +          } finally {, +            if (httpURLConnection != null) {, +              httpURLConnection.disconnect();, +            }, +          }, +, +          // did not start, so wait a bit before trying again, +          Thread.sleep(500L);, +        }, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/x-pack/build.gradle, +import java.nio.charset.StandardCharsets, +, +        for (int i = 0; i < 10; i++) {, +          // we use custom wait logic here as the elastic user is not available immediately and ant.get will fail when a 401 is returned, +          HttpURLConnection httpURLConnection = null;, +          try {, +            httpURLConnection = (HttpURLConnection) new URL("http://${node.httpUri()}").openConnection();, +            httpURLConnection.setRequestProperty("Authorization", "Basic " +, +                    Base64.getEncoder().encodeToString("elastic:changeme".getBytes(StandardCharsets.UTF_8)));, +            httpURLConnection.setRequestMethod("GET");, +            httpURLConnection.connect();, +            if (httpURLConnection.getResponseCode() == 200) {, +              tmpFile.withWriter StandardCharsets.UTF_8.name(), {, +                it.write(httpURLConnection.getInputStream().getText(StandardCharsets.UTF_8.name())), +              }, +            }, +          } catch (Exception e) {, +            e.printStackTrace(), +          } finally {, +            if (httpURLConnection != null) {, +              httpURLConnection.disconnect();, +            }, +          }, +, +          // did not start, so wait a bit before trying again, +          Thread.sleep(500L);, +        }, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/x-pack/build.gradle, +import java.nio.charset.StandardCharsets, +, +        for (int i = 0; i < 10; i++) {, +          // we use custom wait logic here as the elastic user is not available immediately and ant.get will fail when a 401 is returned, +          HttpURLConnection httpURLConnection = null;, +          try {, +            httpURLConnection = (HttpURLConnection) new URL("http://${node.httpUri()}").openConnection();, +            httpURLConnection.setRequestProperty("Authorization", "Basic " +, +                    Base64.getEncoder().encodeToString("elastic:changeme".getBytes(StandardCharsets.UTF_8)));, +            httpURLConnection.setRequestMethod("GET");, +            httpURLConnection.connect();, +            if (httpURLConnection.getResponseCode() == 200) {, +              tmpFile.withWriter StandardCharsets.UTF_8.name(), {, +                it.write(httpURLConnection.getInputStream().getText(StandardCharsets.UTF_8.name())), +              }, +            }, +          } catch (Exception e) {, +            e.printStackTrace(), +          } finally {, +            if (httpURLConnection != null) {]