[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +    protected boolean transportCompress() {, +        return false;, +    }, +, +            transportRequestOptions.withCompress(transportCompress());, +                    TransportResponseOptions options = TransportResponseOptions.options().withCompress(transportCompress());, +                        channel.sendResponse(response, options);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +    protected boolean transportCompress() {, +        return false;, +    }, +, +            transportRequestOptions.withCompress(transportCompress());, +                    TransportResponseOptions options = TransportResponseOptions.options().withCompress(transportCompress());, +                        channel.sendResponse(response, options);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import org.elasticsearch.common.compress.lzf.LZFDecoder;, +import org.elasticsearch.common.compress.lzf.LZFEncoder;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +import org.elasticsearch.common.io.stream.CachedStreamInput;, +import org.elasticsearch.common.io.stream.LZFStreamInput;, +    private boolean compress;, +, +        this.compress = componentSettings.getAsBoolean("compress", true);, +            byte[] data = builder.unsafeBytes();, +            int size = builder.unsafeBytesLength();, +, +            if (compress) {, +                data = LZFEncoder.encode(data, size);, +                size = data.length;, +            }, +, +            metaDataBlobContainer.writeBlob(newMetaData, new ByteArrayInputStream(data, 0, size), size);, +            if (LZFDecoder.isCompressed(data)) {, +                BytesStreamInput siBytes = new BytesStreamInput(data);, +                LZFStreamInput siLzf = CachedStreamInput.cachedLzf(siBytes);, +                parser = XContentFactory.xContent(XContentType.JSON).createParser(siLzf);, +            } else {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +    protected boolean transportCompress() {, +        return false;, +    }, +, +            transportRequestOptions.withCompress(transportCompress());, +                    TransportResponseOptions options = TransportResponseOptions.options().withCompress(transportCompress());, +                        channel.sendResponse(response, options);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import org.elasticsearch.common.compress.lzf.LZFDecoder;, +import org.elasticsearch.common.compress.lzf.LZFEncoder;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +import org.elasticsearch.common.io.stream.CachedStreamInput;, +import org.elasticsearch.common.io.stream.LZFStreamInput;, +    private boolean compress;, +, +        this.compress = componentSettings.getAsBoolean("compress", true);, +            byte[] data = builder.unsafeBytes();, +            int size = builder.unsafeBytesLength();, +, +            if (compress) {, +                data = LZFEncoder.encode(data, size);, +                size = data.length;, +            }, +, +            metaDataBlobContainer.writeBlob(newMetaData, new ByteArrayInputStream(data, 0, size), size);, +            if (LZFDecoder.isCompressed(data)) {, +                BytesStreamInput siBytes = new BytesStreamInput(data);, +                LZFStreamInput siLzf = CachedStreamInput.cachedLzf(siBytes);, +                parser = XContentFactory.xContent(XContentType.JSON).createParser(siLzf);, +            } else {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/local/LocalGateway.java, +import org.elasticsearch.common.compress.lzf.LZFDecoder;, +import org.elasticsearch.common.compress.lzf.LZFOutputStream;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +import org.elasticsearch.common.io.stream.CachedStreamInput;, +import org.elasticsearch.common.io.stream.LZFStreamInput;, +, +    private final boolean compress;, +, +, +        this.compress = componentSettings.getAsBoolean("compress", true);, +                        OutputStream fos = new FileOutputStream(stateFile);, +                        if (compress) {, +                            fos = new LZFOutputStream(fos);, +                        }, +                        OutputStream fos = new FileOutputStream(stateFile);, +                        if (compress) {, +                            fos = new LZFOutputStream(fos);, +                        }, +            if (LZFDecoder.isCompressed(data)) {, +                BytesStreamInput siBytes = new BytesStreamInput(data);, +                LZFStreamInput siLzf = CachedStreamInput.cachedLzf(siBytes);, +                parser = XContentFactory.xContent(XContentType.JSON).createParser(siLzf);, +            } else {, +            }, +            if (LZFDecoder.isCompressed(data)) {, +                BytesStreamInput siBytes = new BytesStreamInput(data);, +                LZFStreamInput siLzf = CachedStreamInput.cachedLzf(siBytes);]