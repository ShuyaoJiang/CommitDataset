[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/InternalClient.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import org.elasticsearch.action.search.ClearScrollRequest;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.SearchScrollRequest;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.IndexNotFoundException;, +import org.elasticsearch.search.SearchHit;, +, +    /**, +     * This method fetches all results for the given search request, parses them using the given hit parser and calls the, +     * listener once done., +     */, +    public static <T> void fetchAllByEntity(Client client, SearchRequest request, final ActionListener<Collection<T>> listener,, +                                            Function<SearchHit, T> hitParser) {, +        final List<T> results = new ArrayList<>();, +        if (request.scroll() == null) { // we do scroll by default lets see if we can get rid of this at some point., +            request.scroll(TimeValue.timeValueSeconds(10L));, +        }, +        final Consumer<SearchResponse> clearScroll = (response) -> {, +            if (response != null && response.getScrollId() != null) {, +                ClearScrollRequest clearScrollRequest = client.prepareClearScroll().addScrollId(response.getScrollId()).request();, +                client.clearScroll(clearScrollRequest, ActionListener.wrap((r) -> {}, (e) -> {}));, +            }, +        };, +        // This function is MADNESS! But it works, don't think about it too hard..., +        // simon edit: just watch this if you got this far https://www.youtube.com/watch?v=W-lF106Dgk8, +        client.search(request, new ActionListener<SearchResponse>() {, +            private volatile SearchResponse lastResponse = null;, +, +            @Override, +            public void onResponse(SearchResponse resp) {, +                try {, +                    lastResponse = resp;, +                    if (resp.getHits().getHits().length > 0) {, +                        for (SearchHit hit : resp.getHits().getHits()) {, +                            final T oneResult = hitParser.apply(hit);, +                            if (oneResult != null) {, +                                results.add(oneResult);, +                            }, +                        }, +                        SearchScrollRequest scrollRequest = client.prepareSearchScroll(resp.getScrollId()), +                                .setScroll(request.scroll().keepAlive()).request();, +                        client.searchScroll(scrollRequest, this);, +, +                    } else {, +                        clearScroll.accept(resp);, +                        // Finally, return the list of users, +                        listener.onResponse(Collections.unmodifiableList(results));, +                    }, +                } catch (Exception e){, +                    onFailure(e); // lets clean up things, +                }, +            }, +, +            @Override, +            public void onFailure(Exception t) {, +                try {, +                    // attempt to clear the scroll request, +                    clearScroll.accept(lastResponse);, +                } finally {, +                    if (t instanceof IndexNotFoundException) {, +                        // since this is expected to happen at times, we just call the listener with an empty list, +                        listener.onResponse(Collections.<T>emptyList());, +                    } else {, +                        listener.onFailure(t);, +                    }, +                }, +            }, +        });, +    }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/InternalClient.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import org.elasticsearch.action.search.ClearScrollRequest;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.SearchScrollRequest;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.IndexNotFoundException;, +import org.elasticsearch.search.SearchHit;, +, +    /**, +     * This method fetches all results for the given search request, parses them using the given hit parser and calls the, +     * listener once done., +     */, +    public static <T> void fetchAllByEntity(Client client, SearchRequest request, final ActionListener<Collection<T>> listener,, +                                            Function<SearchHit, T> hitParser) {, +        final List<T> results = new ArrayList<>();, +        if (request.scroll() == null) { // we do scroll by default lets see if we can get rid of this at some point.]