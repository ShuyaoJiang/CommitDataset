[+++ b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractFieldDataTestCase.java, +        indexService = createIndex("test", Settings.builder().build());, +++ b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractFieldDataTestCase.java, +        indexService = createIndex("test", Settings.builder().build());, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.InternalSettingsPlugin;, +import java.util.Collection;, +import java.util.Collections;, +    @Override, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return Collections.singleton(InternalSettingsPlugin.class);, +    }, +, +        createIndex("test", Settings.EMPTY, "_default_", mapping);, +        IndexService indexService = createIndex("test");, +        XContentBuilder mappings1 = jsonBuilder().startObject(), +                .startObject("doc"), +                    .startArray("dynamic_templates"), +                        .startObject(), +                            .startObject("template1"), +                                .field("match_mapping_type", "string"), +                                .startObject("mapping"), +                                    .field("type", "text"), +                                    .startObject("fields"), +                                        .startObject("raw"), +                                            .field("type", "keyword"), +                                        .endObject(), +                                    .endObject(), +                                .endObject(), +                            .endObject(), +                        .endObject(), +                    .endArray(), +                .endObject().endObject();, +        indexService.mapperService().merge("doc", new CompressedXContent(mappings1.bytes()),, +            MapperService.MergeReason.MAPPING_UPDATE, false);, +, +        XContentBuilder json = XContentFactory.jsonBuilder().startObject(), +                    .field("field", "foo"), +                .endObject();, +        SourceToParse source = SourceToParse.source("test", "doc", "1", json.bytes(), json.contentType());, +        DocumentMapper mapper = indexService.mapperService().documentMapper("doc");, +        assertNull(mapper.mappers().getMapper("field.raw"));, +        ParsedDocument parsed = mapper.parse(source);, +        assertNotNull(parsed.dynamicMappingsUpdate());, +, +        indexService.mapperService().merge("doc", new CompressedXContent(parsed.dynamicMappingsUpdate().toString()),, +            MapperService.MergeReason.MAPPING_UPDATE, false);, +        mapper = indexService.mapperService().documentMapper("doc");, +        assertNotNull(mapper.mappers().getMapper("field.raw"));, +        parsed = mapper.parse(source);, +        assertNull(parsed.dynamicMappingsUpdate());, +    }, +, +    public void testMixTemplateMultiFieldMultiTypeAndMappingReuse() throws Exception {, +        IndexService indexService = createIndex("test", Settings.builder().put("index.version.created", Version.V_5_6_0).build());, +++ b/core/src/test/java/org/elasticsearch/index/fielddata/AbstractFieldDataTestCase.java, +        indexService = createIndex("test", Settings.builder().build());, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.InternalSettingsPlugin;, +import java.util.Collection;, +import java.util.Collections;, +    @Override, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return Collections.singleton(InternalSettingsPlugin.class);, +    }, +, +        createIndex("test", Settings.EMPTY, "_default_", mapping);, +        IndexService indexService = createIndex("test");, +        XContentBuilder mappings1 = jsonBuilder().startObject(), +                .startObject("doc"), +                    .startArray("dynamic_templates"), +                        .startObject(), +                            .startObject("template1"), +                                .field("match_mapping_type", "string"), +                                .startObject("mapping"), +                                    .field("type", "text"), +                                    .startObject("fields"), +                                        .startObject("raw"), +                                            .field("type", "keyword"), +                                        .endObject(), +                                    .endObject(), +                                .endObject(), +                            .endObject(), +                        .endObject(), +                    .endArray(), +                .endObject().endObject();, +        indexService.mapperService().merge("doc", new CompressedXContent(mappings1.bytes()),, +            MapperService.MergeReason.MAPPING_UPDATE, false);, +, +        XContentBuilder json = XContentFactory.jsonBuilder().startObject(), +                    .field("field", "foo"), +                .endObject();, +        SourceToParse source = SourceToParse.source("test", "doc", "1", json.bytes(), json.contentType());, +        DocumentMapper mapper = indexService.mapperService().documentMapper("doc");, +        assertNull(mapper.mappers().getMapper("field.raw"));, +        ParsedDocument parsed = mapper.parse(source);, +        assertNotNull(parsed.dynamicMappingsUpdate());, +]