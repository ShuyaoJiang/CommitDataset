[+++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +            sb.append('{').append(nodeName).append('}');, +            sb.append('{').append(nodeId).append('}');, +            sb.append('{').append(hostName).append('}');, +            sb.append('{').append(address).append('}');, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +            sb.append('{').append(nodeName).append('}');, +            sb.append('{').append(nodeId).append('}');, +            sb.append('{').append(hostName).append('}');, +            sb.append('{').append(address).append('}');, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    @SuppressForbidden(reason = "do not know what this method does"), +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +            sb.append('{').append(nodeName).append('}');, +            sb.append('{').append(nodeId).append('}');, +            sb.append('{').append(hostName).append('}');, +            sb.append('{').append(address).append('}');, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    @SuppressForbidden(reason = "do not know what this method does"), +++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.formatAddress(address));, +            sb.append(NetworkAddress.formatAddress(address));, +            sb.append(" netmask:" + NetworkAddress.formatAddress(InetAddress.getByAddress(new byte[] {, +            })));, +                sb.append(" broadcast:" + NetworkAddress.formatAddress(broadcast));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +            sb.append('{').append(nodeName).append('}');, +            sb.append('{').append(nodeId).append('}');, +            sb.append('{').append(hostName).append('}');, +            sb.append('{').append(address).append('}');, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    @SuppressForbidden(reason = "do not know what this method does"), +++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.formatAddress(address));, +            sb.append(NetworkAddress.formatAddress(address));, +            sb.append(" netmask:" + NetworkAddress.formatAddress(InetAddress.getByAddress(new byte[] {, +            })));, +                sb.append(" broadcast:" + NetworkAddress.formatAddress(broadcast));, +++ b/core/src/main/java/org/elasticsearch/common/network/MulticastChannel.java, +, +import org.elasticsearch.common.SuppressForbidden;, +    @SuppressForbidden(reason = "I bind to wildcard addresses. I am a total nightmare"), +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +            sb.append('{').append(nodeName).append('}');, +            sb.append('{').append(nodeId).append('}');, +            sb.append('{').append(hostName).append('}');, +            sb.append('{').append(address).append('}');, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    @SuppressForbidden(reason = "do not know what this method does"), +++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.formatAddress(address));, +            sb.append(NetworkAddress.formatAddress(address));, +            sb.append(" netmask:" + NetworkAddress.formatAddress(InetAddress.getByAddress(new byte[] {, +            })));, +                sb.append(" broadcast:" + NetworkAddress.formatAddress(broadcast));, +++ b/core/src/main/java/org/elasticsearch/common/network/MulticastChannel.java, +, +import org.elasticsearch.common.SuppressForbidden;, +    @SuppressForbidden(reason = "I bind to wildcard addresses. I am a total nightmare"), +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkAddress.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.network;, +, +import com.google.common.net.InetAddresses;, +, +import org.elasticsearch.common.SuppressForbidden;, +, +import java.net.Inet6Address;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.util.Objects;, +, +/** , + * Utility functions for presentation of network addresses., + * <p>, + * Java's address formatting is particularly bad, every address, + * has an optional host if its resolved, so IPv4 addresses often, + * look like this (note the confusing leading slash):, + * <pre>, + *    {@code /127.0.0.1}, + * </pre>, + * IPv6 addresses are even worse, with no IPv6 address compression,]