[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +            } else if (expected == String.class && explicit) {, +                return PainlessCast.originalTypetoTargetType(char.class, String.class, true);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +            } else if (expected == String.class && explicit) {, +                return PainlessCast.originalTypetoTargetType(char.class, String.class, true);, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/StandardCastTests.java, +        expectScriptThrows(ClassCastException.class, () -> exec("String s = 's'; char c = s; return c"));, +        assertEquals('s', exec("String s = 's'; char c = (char)s; return c"));, +, +    public void testPrimitiveCharCasts() {, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Object n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Object n = (Object)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Number n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Number n = (Number)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; String n = o;"));, +        exec("char o = 0; String n = (String)o;");, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; boolean b = (boolean)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; byte b = o;"));, +        exec("char o = 0; byte b = (byte)o;");, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; short b = o;"));, +        exec("char o = 0; short b = (short)o;");, +, +        exec("char o = 0; char b = o;");, +        exec("char o = 0; char b = (char)o;");, +, +        exec("char o = 0; int b = o;");, +        exec("char o = 0; int b = (int)o;");, +, +        exec("char o = 0; long b = o;");, +        exec("char o = 0; long b = (long)o;");, +, +        exec("char o = 0; float b = o;");, +        exec("char o = 0; float b = (float)o;");, +, +        exec("char o = 0; double b = o;");, +        exec("char o = 0; double b = (double)o;");, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Boolean b = (Boolean)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Byte b = (Byte)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Short b = (Short)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Character b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Character b = (Character)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Integer b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Integer b = (Integer)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Long b = (Long)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Float b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Float b = (Float)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Double b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = 0; Double b = (Double)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = Byte.valueOf((short)0); ArrayList b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("char o = Byte.valueOf((short)0); ArrayList b = (ArrayList)o;"));, +    }, +, +    public void testCharacterCasts() {, +        exec("Character o = Character.valueOf((char)0); Object n = o;");, +        exec("Character o = null; Object n = o;");, +        exec("Character o = Character.valueOf((char)0); Object n = (Object)o;");, +        exec("Character o = null; Object n = (Object)o;");, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Character.valueOf((char)0); Number n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; Number n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Character.valueOf((char)0); Number n = (Number)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; Number n = (Number)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Character.valueOf((char)0); String n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; String n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Short.valueOf((byte)0); String n = (String)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; String n = (String)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Character.valueOf((char)0); boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Character.valueOf((char)0); boolean b = (boolean)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; boolean b = (boolean)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Character.valueOf((char)0); byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Character.valueOf((char)0); byte b = (byte)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; byte b = (byte)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = Character.valueOf((char)0); short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character o = null; short b = o;"));]