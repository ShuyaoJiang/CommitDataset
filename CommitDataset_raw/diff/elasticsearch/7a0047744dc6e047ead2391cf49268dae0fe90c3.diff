[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/190_index_prefix_search.yml, +                    min_chars: 2, +                    max_chars: 5, +          body:   { text: some short words with a stupendously long one }, +          explain: true, +              query: a*, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/190_index_prefix_search.yml, +                    min_chars: 2, +                    max_chars: 5, +          body:   { text: some short words with a stupendously long one }, +          explain: true, +              query: a*, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +            this.prefixFieldType = new PrefixFieldType(name(), name() + "._index_prefix", minChars, maxChars);, +        final String parentField;, +        PrefixFieldType(String parentField, String name, int minChars, int maxChars) {, +            this.parentField = parentField;, +            return new BooleanQuery.Builder(), +                .add(query, BooleanClause.Occur.SHOULD), +                .add(new TermQuery(new Term(parentField, value)), BooleanClause.Occur.SHOULD), +                .build();, +            return new PrefixFieldType(parentField, name(), minChars, maxChars);, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/190_index_prefix_search.yml, +                    min_chars: 2, +                    max_chars: 5, +          body:   { text: some short words with a stupendously long one }, +          explain: true, +              query: a*, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +            this.prefixFieldType = new PrefixFieldType(name(), name() + "._index_prefix", minChars, maxChars);, +        final String parentField;, +        PrefixFieldType(String parentField, String name, int minChars, int maxChars) {, +            this.parentField = parentField;, +            return new BooleanQuery.Builder(), +                .add(query, BooleanClause.Occur.SHOULD), +                .add(new TermQuery(new Term(parentField, value)), BooleanClause.Occur.SHOULD), +                .build();, +            return new PrefixFieldType(parentField, name(), minChars, maxChars);, +++ b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java, +import org.elasticsearch.core.internal.io.IOUtils;, +            if (currentFieldType.tokenized() == false) {, +            return currentFieldType.prefixQuery(getAnalyzer().normalize(field, termStr).utf8ToString(),, +                getMultiTermRewriteMethod(), context);, +            return currentFieldType.prefixQuery(tlist.get(0).get(0), getMultiTermRewriteMethod(), context);, +                    posQuery = currentFieldType.prefixQuery(plist.get(0), getMultiTermRewriteMethod(), context);, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/190_index_prefix_search.yml, +                    min_chars: 2, +                    max_chars: 5, +          body:   { text: some short words with a stupendously long one }, +          explain: true, +              query: a*, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +            this.prefixFieldType = new PrefixFieldType(name(), name() + "._index_prefix", minChars, maxChars);, +        final String parentField;, +        PrefixFieldType(String parentField, String name, int minChars, int maxChars) {, +            this.parentField = parentField;, +            return new BooleanQuery.Builder(), +                .add(query, BooleanClause.Occur.SHOULD), +                .add(new TermQuery(new Term(parentField, value)), BooleanClause.Occur.SHOULD), +                .build();, +            return new PrefixFieldType(parentField, name(), minChars, maxChars);, +++ b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java, +import org.elasticsearch.core.internal.io.IOUtils;, +            if (currentFieldType.tokenized() == false) {, +            return currentFieldType.prefixQuery(getAnalyzer().normalize(field, termStr).utf8ToString(),, +                getMultiTermRewriteMethod(), context);, +            return currentFieldType.prefixQuery(tlist.get(0).get(0), getMultiTermRewriteMethod(), context);, +                    posQuery = currentFieldType.prefixQuery(plist.get(0), getMultiTermRewriteMethod(), context);, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import static org.hamcrest.Matchers.equalTo;, +                    tft.setPrefixFieldType(new TextFieldMapper.PrefixFieldType(ft.name(), ft.name() + "._index_prefix", 3, 3));, +        ft.setPrefixFieldType(new TextFieldMapper.PrefixFieldType("field", "field._index_prefix", 2, 10));, +, +        Query expected = new ConstantScoreQuery(new BooleanQuery.Builder(), +            .add(new AutomatonQuery(new Term("field._index_prefix", "g*"), automaton), BooleanClause.Occur.SHOULD), +            .add(new TermQuery(new Term("field", "g")), BooleanClause.Occur.SHOULD), +            .build());, +, +        assertThat(q, equalTo(expected));, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/190_index_prefix_search.yml, +                    min_chars: 2, +                    max_chars: 5, +          body:   { text: some short words with a stupendously long one }, +          explain: true, +              query: a*, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +            this.prefixFieldType = new PrefixFieldType(name(), name() + "._index_prefix", minChars, maxChars);, +        final String parentField;, +        PrefixFieldType(String parentField, String name, int minChars, int maxChars) {, +            this.parentField = parentField;]