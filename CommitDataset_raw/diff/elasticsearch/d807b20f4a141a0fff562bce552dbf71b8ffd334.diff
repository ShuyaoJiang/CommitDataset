[+++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesClientService.java, +import static org.elasticsearch.license.plugin.core.LicensesService.TrialLicenseOptions;, +, +    public interface Listener {, +        /**, +         * Called to enable a feature, +         */, +        public void onEnabled();, +        /**, +         * Called to disable a feature, +         */, +        public void onDisabled();, +, +        /**, +         * Trial license specification used to, +         * generate a one-time trial license for the feature, +         */, +        public TrialLicenseOptions trialLicenseOptions();, +    /**, +     * Registers a feature for licensing, +     * @param feature - name of the feature to register (must be in sync with license Generator feature name), +     * @param listener - used to notify on feature enable/disable and specify trial license specification, +     */, +    void register(String feature, Listener listener);, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesClientService.java, +import static org.elasticsearch.license.plugin.core.LicensesService.TrialLicenseOptions;, +, +    public interface Listener {, +        /**, +         * Called to enable a feature, +         */, +        public void onEnabled();, +        /**, +         * Called to disable a feature, +         */, +        public void onDisabled();, +, +        /**, +         * Trial license specification used to, +         * generate a one-time trial license for the feature, +         */, +        public TrialLicenseOptions trialLicenseOptions();, +    /**, +     * Registers a feature for licensing, +     * @param feature - name of the feature to register (must be in sync with license Generator feature name), +     * @param listener - used to notify on feature enable/disable and specify trial license specification, +     */, +    void register(String feature, Listener listener);, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +import org.elasticsearch.gateway.GatewayService;, +import java.util.List;, +import java.util.concurrent.CopyOnWriteArrayList;, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.elasticsearch.license.plugin.core.trial.TrialLicensesBuilder.trialLicensesBuilder;, +    private List<ListenerHolder> registeredListeners = new CopyOnWriteArrayList<>();, +                /*, +                    Four cases:, +                      - no metadata - just add new license, +                      - only trial license - check if trial exists for feature; if so remove it to replace with signed, +                      - only signed license - add signed license, +                      - both trial & signed license - same as only trial & only signed case combined, +                 */, +, +                    TrialLicenses reducedTrialLicenses = null;, +                    if (currentLicenses.getTrialLicenses() != null) {, +                        // has trial licenses for some features; reduce trial licenses according to new signed licenses, +                        reducedTrialLicenses = reduceTrialLicenses(newLicenses, currentLicenses.getTrialLicenses());, +                    }, +                    if (currentLicenses.getLicenses() != null) {, +                        // merge previous signed license with new one, +                        currentLicenses = new LicensesMetaData(mergedLicenses, reducedTrialLicenses);, +                    } else {, +                        // no previous signed licenses to merge with, +                        currentLicenses = new LicensesMetaData(newLicenses, reducedTrialLicenses);, +                    }, +, +            /**, +             * If signed license is found for any feature, remove the trial license for it, +             */, +            private TrialLicenses reduceTrialLicenses(ESLicenses currentLicenses, TrialLicenses currentTrialLicenses) {, +                TrialLicensesBuilder builder = trialLicensesBuilder();, +                for (TrialLicense currentTrialLicense : currentTrialLicenses) {, +                    if (currentLicenses.get(currentTrialLicense.feature()) == null) {, +                        builder.license(currentTrialLicense);, +                    }, +                }, +                return builder.build();, +            }, +                if (trialLicenseCheck(trialLicense.feature().string())) {, +                }, +                // check if actual license exists, +                if (esLicenseManager.hasLicenseForFeature(FeatureType.fromString(feature))) {, +                    return false;, +                }, +                // check if trial license for feature exists, +                for (ListenerHolder holder : registeredListeners) {, +                    if (holder.feature.equals(feature) && holder.registered.get()) {, +                        if (holder.trialLicenseGenerated.compareAndSet(false, true)) {, +                            return true;, +                        }]