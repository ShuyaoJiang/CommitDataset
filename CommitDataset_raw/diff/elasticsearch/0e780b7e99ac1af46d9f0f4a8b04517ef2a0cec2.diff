[+++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +                service.fieldData().clearField(ParentFieldMapper.NAME);, +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +                service.fieldData().clearField(ParentFieldMapper.NAME);, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    private final Recycler<float[]> floatPage;, +        floatPage.close();, +        final double floatsWeight = componentSettings.getAsDouble(WEIGHT + ".floats", 1d);, +        floatPage = build(type, maxCount(limit, BigArrays.FLOAT_PAGE_SIZE, floatsWeight, totalWeight), searchThreadPoolSize, availableProcessors, new AbstractRecyclerC<float[]>() {, +            @Override, +            public float[] newInstance(int sizing) {, +                return new float[BigArrays.FLOAT_PAGE_SIZE];, +            }, +            @Override, +            public void recycle(float[] value) {, +                // nothing to do, +            }, +        });, +    public Recycler.V<float[]> floatPage(boolean clear) {, +        final Recycler.V<float[]> v = floatPage.obtain();, +        if (v.isRecycled() && clear) {, +            Arrays.fill(v.v(), 0f);, +        }, +        return v;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +                service.fieldData().clearField(ParentFieldMapper.NAME);, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    private final Recycler<float[]> floatPage;, +        floatPage.close();, +        final double floatsWeight = componentSettings.getAsDouble(WEIGHT + ".floats", 1d);, +        floatPage = build(type, maxCount(limit, BigArrays.FLOAT_PAGE_SIZE, floatsWeight, totalWeight), searchThreadPoolSize, availableProcessors, new AbstractRecyclerC<float[]>() {, +            @Override, +            public float[] newInstance(int sizing) {, +                return new float[BigArrays.FLOAT_PAGE_SIZE];, +            }, +            @Override, +            public void recycle(float[] value) {, +                // nothing to do, +            }, +        });, +    public Recycler.V<float[]> floatPage(boolean clear) {, +        final Recycler.V<float[]> v = floatPage.obtain();, +        if (v.isRecycled() && clear) {, +            Arrays.fill(v.v(), 0f);, +        }, +        return v;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/util/AbstractBigArray.java, +    protected final float[] newFloatPage(int page) {, +        if (recycler != null) {, +            final Recycler.V<float[]> v = recycler.floatPage(clearOnResize);, +            return registerNewPage(v, page, BigArrays.FLOAT_PAGE_SIZE);, +        } else {, +            return new float[BigArrays.FLOAT_PAGE_SIZE];, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +                service.fieldData().clearField(ParentFieldMapper.NAME);, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    private final Recycler<float[]> floatPage;, +        floatPage.close();, +        final double floatsWeight = componentSettings.getAsDouble(WEIGHT + ".floats", 1d);, +        floatPage = build(type, maxCount(limit, BigArrays.FLOAT_PAGE_SIZE, floatsWeight, totalWeight), searchThreadPoolSize, availableProcessors, new AbstractRecyclerC<float[]>() {, +            @Override, +            public float[] newInstance(int sizing) {, +                return new float[BigArrays.FLOAT_PAGE_SIZE];, +            }, +            @Override, +            public void recycle(float[] value) {, +                // nothing to do, +            }, +        });, +    public Recycler.V<float[]> floatPage(boolean clear) {, +        final Recycler.V<float[]> v = floatPage.obtain();, +        if (v.isRecycled() && clear) {, +            Arrays.fill(v.v(), 0f);, +        }, +        return v;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/util/AbstractBigArray.java, +    protected final float[] newFloatPage(int page) {, +        if (recycler != null) {, +            final Recycler.V<float[]> v = recycler.floatPage(clearOnResize);, +            return registerNewPage(v, page, BigArrays.FLOAT_PAGE_SIZE);, +        } else {, +            return new float[BigArrays.FLOAT_PAGE_SIZE];, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public static final int FLOAT_PAGE_SIZE = BigArrays.PAGE_SIZE_IN_BYTES / RamUsageEstimator.NUM_BYTES_FLOAT;]