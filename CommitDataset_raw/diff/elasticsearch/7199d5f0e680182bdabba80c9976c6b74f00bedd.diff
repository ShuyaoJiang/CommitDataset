[+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        indexScopedSettings.validate(, +                normalizedSettings.filter(s -> Regex.isSimpleMatchPattern(s) == false), // don't validate wildcards, +                false, // don't validate dependencies here we check it below never allow to change the number of shards, +                true); // validate internal index settings, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        indexScopedSettings.validate(, +                normalizedSettings.filter(s -> Regex.isSimpleMatchPattern(s) == false), // don't validate wildcards, +                false, // don't validate dependencies here we check it below never allow to change the number of shards, +                true); // validate internal index settings, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * @param settings              the settings to validate, +     * @param validateDependencies  true if dependent settings should be validated, +     * @param validateInternalIndex true if internal index settings should be validated, +     * @see Setting#getSettingsDependencies(String), +     */, +    public final void validate(final Settings settings, final boolean validateDependencies, final boolean validateInternalIndex) {, +        validate(settings, validateDependencies, false, false, validateInternalIndex);, +    }, +, +    /**, +     * Validates that all settings are registered and valid., +     *, +        validate(settings, validateDependencies, ignorePrivateSettings, ignoreArchivedSettings, false);, +    }, +, +    /**, +     * Validates that all settings are registered and valid., +     *, +     * @param settings               the settings, +     * @param validateDependencies   true if dependent settings should be validated, +     * @param ignorePrivateSettings  true if private settings should be ignored during validation, +     * @param ignoreArchivedSettings true if archived settings should be ignored during validation, +     * @param validateInternalIndex  true if index internal settings should be validated, +     * @see Setting#getSettingsDependencies(String), +     */, +    public final void validate(, +            final Settings settings,, +            final boolean validateDependencies,, +            final boolean ignorePrivateSettings,, +            final boolean ignoreArchivedSettings,, +            final boolean validateInternalIndex) {, +                validate(key, settings, validateDependencies, validateInternalIndex);, +     * Validates that the settings is valid., +     *, +     * @param key the key of the setting to validate, +     * @param settings the settings, +     * @param validateDependencies true if dependent settings should be validated, +     * @throws IllegalArgumentException if the setting is invalid, +    void validate(final String key, final Settings settings, final boolean validateDependencies) {, +        validate(key, settings, validateDependencies, false);, +    }, +, +    /**, +     * Validates that the settings is valid., +     *, +     * @param key the key of the setting to validate, +     * @param settings the settings, +     * @param validateDependencies true if dependent settings should be validated, +     * @param validateInternalIndex true if internal index settings should be validated, +     * @throws IllegalArgumentException if the setting is invalid, +     */, +    void validate(final String key, final Settings settings, final boolean validateDependencies, final boolean validateInternalIndex) {, +            // the only time that validateInternalIndex should be true is if this call is coming via the update settings API, +            if (validateInternalIndex && setting.getProperties().contains(Setting.Property.InternalIndex)) {, +                throw new IllegalArgumentException(, +                        "can not update internal setting [" + setting.getKey() + "]; this setting is managed via a dedicated API");, +            }, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        indexScopedSettings.validate(, +                normalizedSettings.filter(s -> Regex.isSimpleMatchPattern(s) == false), // don't validate wildcards, +                false, // don't validate dependencies here we check it below never allow to change the number of shards, +                true); // validate internal index settings, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * @param settings              the settings to validate, +     * @param validateDependencies  true if dependent settings should be validated, +     * @param validateInternalIndex true if internal index settings should be validated, +     * @see Setting#getSettingsDependencies(String), +     */, +    public final void validate(final Settings settings, final boolean validateDependencies, final boolean validateInternalIndex) {, +        validate(settings, validateDependencies, false, false, validateInternalIndex);, +    }, +, +    /**, +     * Validates that all settings are registered and valid., +     *, +        validate(settings, validateDependencies, ignorePrivateSettings, ignoreArchivedSettings, false);, +    }, +, +    /**, +     * Validates that all settings are registered and valid., +     *, +     * @param settings               the settings, +     * @param validateDependencies   true if dependent settings should be validated, +     * @param ignorePrivateSettings  true if private settings should be ignored during validation, +     * @param ignoreArchivedSettings true if archived settings should be ignored during validation, +     * @param validateInternalIndex  true if index internal settings should be validated, +     * @see Setting#getSettingsDependencies(String), +     */, +    public final void validate(]