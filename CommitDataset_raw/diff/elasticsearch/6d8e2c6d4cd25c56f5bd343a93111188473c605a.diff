[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.client.http.Header;, +import org.elasticsearch.client.http.HttpEntity;, +import org.elasticsearch.common.CheckedConsumer;, +import java.io.Closeable;, + * The {@link RestClient} instance is internally built based on the provided {@link RestClientBuilder} and it gets closed automatically, + * when closing the {@link RestHighLevelClient} instance that wraps it., + * In case an already existing instance of a low-level REST client needs to be provided, this class can be subclassed and the, + * {@link #RestHighLevelClient(RestClient, CheckedConsumer, List)}  constructor can be used., + * This class can also be sub-classed to expose additional client methods that make use of endpoints added to Elasticsearch through, + * plugins, or to add support for custom response sections, again added to Elasticsearch through plugins., +public class RestHighLevelClient implements Closeable {, +    private final CheckedConsumer<RestClient, IOException> doClose;, +     * Creates a {@link RestHighLevelClient} given the low level {@link RestClientBuilder} that allows to build the, +     * {@link RestClient} to be used to perform requests., +    public RestHighLevelClient(RestClientBuilder restClientBuilder) {, +        this(restClientBuilder, Collections.emptyList());, +    }, +, +    /**, +     * Creates a {@link RestHighLevelClient} given the low level {@link RestClientBuilder} that allows to build the, +     * {@link RestClient} to be used to perform requests and parsers for custom response sections added to Elasticsearch through plugins., +     */, +    protected RestHighLevelClient(RestClientBuilder restClientBuilder, List<NamedXContentRegistry.Entry> namedXContentEntries) {, +        this(restClientBuilder.build(), RestClient::close, namedXContentEntries);, +     * This constructor can be called by subclasses in case an externally created low-level REST client needs to be provided., +     * The consumer argument allows to control what needs to be done when the {@link #close()} method is called., +     * Also subclasses can provide parsers for custom response sections added to Elasticsearch through plugins., +    protected RestHighLevelClient(RestClient restClient, CheckedConsumer<RestClient, IOException> doClose,, +                                  List<NamedXContentRegistry.Entry> namedXContentEntries) {, +        this.client = Objects.requireNonNull(restClient, "restClient must not be null");, +        this.doClose = Objects.requireNonNull(doClose, "doClose consumer must not be null");, +     * Returns the low-level client that the current high-level client instance is using to perform requests, +     */, +    public RestClient getLowLevelClient() {, +        return client;, +    }, +, +    @Override, +    public final void close() throws IOException {, +        doClose.accept(client);, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.client.http.Header;, +import org.elasticsearch.client.http.HttpEntity;, +import org.elasticsearch.common.CheckedConsumer;, +import java.io.Closeable;, + * The {@link RestClient} instance is internally built based on the provided {@link RestClientBuilder} and it gets closed automatically, + * when closing the {@link RestHighLevelClient} instance that wraps it., + * In case an already existing instance of a low-level REST client needs to be provided, this class can be subclassed and the, + * {@link #RestHighLevelClient(RestClient, CheckedConsumer, List)}  constructor can be used., + * This class can also be sub-classed to expose additional client methods that make use of endpoints added to Elasticsearch through, + * plugins, or to add support for custom response sections, again added to Elasticsearch through plugins., +public class RestHighLevelClient implements Closeable {, +    private final CheckedConsumer<RestClient, IOException> doClose;, +     * Creates a {@link RestHighLevelClient} given the low level {@link RestClientBuilder} that allows to build the, +     * {@link RestClient} to be used to perform requests., +    public RestHighLevelClient(RestClientBuilder restClientBuilder) {, +        this(restClientBuilder, Collections.emptyList());, +    }, +, +    /**, +     * Creates a {@link RestHighLevelClient} given the low level {@link RestClientBuilder} that allows to build the, +     * {@link RestClient} to be used to perform requests and parsers for custom response sections added to Elasticsearch through plugins., +     */, +    protected RestHighLevelClient(RestClientBuilder restClientBuilder, List<NamedXContentRegistry.Entry> namedXContentEntries) {, +        this(restClientBuilder.build(), RestClient::close, namedXContentEntries);, +     * This constructor can be called by subclasses in case an externally created low-level REST client needs to be provided., +     * The consumer argument allows to control what needs to be done when the {@link #close()} method is called., +     * Also subclasses can provide parsers for custom response sections added to Elasticsearch through plugins., +    protected RestHighLevelClient(RestClient restClient, CheckedConsumer<RestClient, IOException> doClose,, +                                  List<NamedXContentRegistry.Entry> namedXContentEntries) {, +        this.client = Objects.requireNonNull(restClient, "restClient must not be null");, +        this.doClose = Objects.requireNonNull(doClose, "doClose consumer must not be null");, +     * Returns the low-level client that the current high-level client instance is using to perform requests, +     */, +    public RestClient getLowLevelClient() {, +        return client;, +    }, +, +    @Override, +    public final void close() throws IOException {, +        doClose.accept(client);, +    }, +, +    /**, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CustomRestHighLevelClientTests.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.Build;, +import org.elasticsearch.Version;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.main.MainRequest;, +import org.elasticsearch.action.main.MainResponse;, +import java.util.Collections;, +            super(restClient, RestClient::close, Collections.emptyList());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.client.http.Header;, +import org.elasticsearch.client.http.HttpEntity;]