[+++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/rest/RestSqlTestCase.java, +            bulk.append("{\"text\":\"text" + i + "\", \"number\":" + i + "}\n");, +        String request = "{\"query\":\"SELECT text, number, SIN(number) AS s FROM test ORDER BY number\", \"fetch_size\":2}";, +                        columnInfo("s", "double")));, +    public void missingIndex() throws IOException {, +        return runSql(sql, "");, +    }, +, +    private Map<String, Object> runSql(String sql, String suffix) throws IOException {, +        return runSql(suffix, new StringEntity("{\"query\":\"" + sql + "\"}", ContentType.APPLICATION_JSON));, +        return runSql("", sql);, +    }, +, +    private Map<String, Object> runSql(String suffix, HttpEntity sql) throws IOException {, +        Response response = client().performRequest("POST", "/_sql" + suffix, singletonMap("error_trace", "true"), sql);, +, +    public void testBasicTranslateQuery() throws IOException {, +        StringBuilder bulk = new StringBuilder();, +        bulk.append("{\"index\":{\"_id\":\"1\"}}\n");, +        bulk.append("{\"test\":\"test\"}\n");, +        bulk.append("{\"index\":{\"_id\":\"2\"}}\n");, +        bulk.append("{\"test\":\"test\"}\n");, +        client().performRequest("POST", "/test_translate/test/_bulk", singletonMap("refresh", "true"),, +                new StringEntity(bulk.toString(), ContentType.APPLICATION_JSON));, +, +        Map<String, Object> response = runSql("SELECT * FROM test_translate", "/translate/");, +        assertEquals(response.get("size"), 1000);, +        @SuppressWarnings("unchecked"), +        Map<String, Object> source = (Map<String, Object>) response.get("_source");, +        assertNotNull(source);, +        assertEquals(emptyList(), source.get("excludes"));, +        assertEquals(singletonList("test"), source.get("includes"));, +    }, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/rest/RestSqlTestCase.java, +            bulk.append("{\"text\":\"text" + i + "\", \"number\":" + i + "}\n");, +        String request = "{\"query\":\"SELECT text, number, SIN(number) AS s FROM test ORDER BY number\", \"fetch_size\":2}";, +                        columnInfo("s", "double")));, +    public void missingIndex() throws IOException {, +        return runSql(sql, "");, +    }, +, +    private Map<String, Object> runSql(String sql, String suffix) throws IOException {, +        return runSql(suffix, new StringEntity("{\"query\":\"" + sql + "\"}", ContentType.APPLICATION_JSON));, +        return runSql("", sql);, +    }, +, +    private Map<String, Object> runSql(String suffix, HttpEntity sql) throws IOException {, +        Response response = client().performRequest("POST", "/_sql" + suffix, singletonMap("error_trace", "true"), sql);, +, +    public void testBasicTranslateQuery() throws IOException {, +        StringBuilder bulk = new StringBuilder();, +        bulk.append("{\"index\":{\"_id\":\"1\"}}\n");, +        bulk.append("{\"test\":\"test\"}\n");, +        bulk.append("{\"index\":{\"_id\":\"2\"}}\n");, +        bulk.append("{\"test\":\"test\"}\n");, +        client().performRequest("POST", "/test_translate/test/_bulk", singletonMap("refresh", "true"),, +                new StringEntity(bulk.toString(), ContentType.APPLICATION_JSON));, +, +        Map<String, Object> response = runSql("SELECT * FROM test_translate", "/translate/");, +        assertEquals(response.get("size"), 1000);, +        @SuppressWarnings("unchecked"), +        Map<String, Object> source = (Map<String, Object>) response.get("_source");, +        assertNotNull(source);, +        assertEquals(emptyList(), source.get("excludes"));, +        assertEquals(singletonList("test"), source.get("includes"));, +    }, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlPlugin.java, +import org.elasticsearch.xpack.sql.plugin.sql.rest.RestSqlTranslateAction;, +                             new RestSqlTranslateAction(settings, restController),]