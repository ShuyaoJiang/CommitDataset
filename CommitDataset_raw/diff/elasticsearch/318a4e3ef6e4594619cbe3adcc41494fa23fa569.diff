[+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java, +        assertBusy(() -> assertEquals(internalCluster().size(),, +        assertBusy(() -> assertEquals(internalCluster().size(),, +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java, +        assertBusy(() -> assertEquals(internalCluster().size(),, +        assertBusy(() -> assertEquals(internalCluster().size(),, +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TestTaskPlugin.java, +                if (nodes.nodeExists(node)) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java, +        assertBusy(() -> assertEquals(internalCluster().size(),, +        assertBusy(() -> assertEquals(internalCluster().size(),, +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TestTaskPlugin.java, +                if (nodes.nodeExists(node)) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java, +import java.util.concurrent.ExecutionException;, +@ClusterScope(scope = Scope.TEST, numDataNodes = 0), +        internalCluster().startNode();, +, +    public void testIndicesShardStats() throws ExecutionException, InterruptedException {, +        internalCluster().startNode();, +        ensureGreen();, +    public void testValuesSmokeScreen() throws IOException, ExecutionException, InterruptedException {, +        internalCluster().startNodesAsync(randomIntBetween(1, 3)).get();, +        internalCluster().startMasterOnlyNode(Settings.builder().put("gateway.recover_after_nodes", 2).build());, +        if (randomBoolean()) {, +            internalCluster().startMasterOnlyNode(Settings.EMPTY);, +        } else {, +            internalCluster().startDataOnlyNode(Settings.EMPTY);, +        }, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java, +        assertBusy(() -> assertEquals(internalCluster().size(),, +        assertBusy(() -> assertEquals(internalCluster().size(),, +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TestTaskPlugin.java, +                if (nodes.nodeExists(node)) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java, +import java.util.concurrent.ExecutionException;, +@ClusterScope(scope = Scope.TEST, numDataNodes = 0), +        internalCluster().startNode();, +, +    public void testIndicesShardStats() throws ExecutionException, InterruptedException {, +        internalCluster().startNode();, +        ensureGreen();, +    public void testValuesSmokeScreen() throws IOException, ExecutionException, InterruptedException {, +        internalCluster().startNodesAsync(randomIntBetween(1, 3)).get();, +        internalCluster().startMasterOnlyNode(Settings.builder().put("gateway.recover_after_nodes", 2).build());, +        if (randomBoolean()) {, +            internalCluster().startMasterOnlyNode(Settings.EMPTY);, +        } else {, +            internalCluster().startDataOnlyNode(Settings.EMPTY);, +        }, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientRetryIT.java, +@ClusterScope(scope = Scope.TEST, numClientNodes = 0, supportsDedicatedMasters = false), +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java, +        assertBusy(() -> assertEquals(internalCluster().size(),, +        assertBusy(() -> assertEquals(internalCluster().size(),, +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TestTaskPlugin.java, +                if (nodes.nodeExists(node)) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java, +import java.util.concurrent.ExecutionException;, +@ClusterScope(scope = Scope.TEST, numDataNodes = 0), +        internalCluster().startNode();, +, +    public void testIndicesShardStats() throws ExecutionException, InterruptedException {, +        internalCluster().startNode();, +        ensureGreen();, +    public void testValuesSmokeScreen() throws IOException, ExecutionException, InterruptedException {, +        internalCluster().startNodesAsync(randomIntBetween(1, 3)).get();, +        internalCluster().startMasterOnlyNode(Settings.builder().put("gateway.recover_after_nodes", 2).build());, +        if (randomBoolean()) {, +            internalCluster().startMasterOnlyNode(Settings.EMPTY);, +        } else {, +            internalCluster().startDataOnlyNode(Settings.EMPTY);, +        }, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientRetryIT.java, +@ClusterScope(scope = Scope.TEST, numClientNodes = 0, supportsDedicatedMasters = false), +++ b/core/src/test/java/org/elasticsearch/cluster/settings/SettingsFilteringIT.java, +@ClusterScope(scope = SUITE, supportsDedicatedMasters = false, numDataNodes = 1), +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java, +        assertBusy(() -> assertEquals(internalCluster().size(),, +        assertBusy(() -> assertEquals(internalCluster().size(),, +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +            assertBusy(() -> assertEquals(internalCluster().size(), client().admin().cluster().prepareListTasks(), +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TestTaskPlugin.java, +                if (nodes.nodeExists(node)) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java, +import java.util.concurrent.ExecutionException;, +@ClusterScope(scope = Scope.TEST, numDataNodes = 0), +        internalCluster().startNode();, +, +    public void testIndicesShardStats() throws ExecutionException, InterruptedException {]