[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +            logger.debug("using profile[{}], worker_count[{}], port[{}], bind_host[{}], publish_host[{}], receive_predictor[{}->{}]",, +                name, workerCount, profileSettings.portOrRange, profileSettings.bindHosts, profileSettings.publishHosts,, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +            logger.debug("using profile[{}], worker_count[{}], port[{}], bind_host[{}], publish_host[{}], receive_predictor[{}->{}]",, +                name, workerCount, profileSettings.portOrRange, profileSettings.bindHosts, profileSettings.publishHosts,, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java, +                    channel.sendResponse(TransportResponse.Empty.INSTANCE);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +            logger.debug("using profile[{}], worker_count[{}], port[{}], bind_host[{}], publish_host[{}], receive_predictor[{}->{}]",, +                name, workerCount, profileSettings.portOrRange, profileSettings.bindHosts, profileSettings.publishHosts,, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java, +                    channel.sendResponse(TransportResponse.Empty.INSTANCE);, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/SimpleNetty4TransportTests.java, +import org.elasticsearch.transport.ConnectionProfile;, +            public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile,, +                                         ActionListener<Version> listener) {, +                    super.executeHandshake(node, channel, profile, listener);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +            logger.debug("using profile[{}], worker_count[{}], port[{}], bind_host[{}], publish_host[{}], receive_predictor[{}->{}]",, +                name, workerCount, profileSettings.portOrRange, profileSettings.bindHosts, profileSettings.publishHosts,, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java, +                    channel.sendResponse(TransportResponse.Empty.INSTANCE);, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/SimpleNetty4TransportTests.java, +import org.elasticsearch.transport.ConnectionProfile;, +            public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile,, +                                         ActionListener<Version> listener) {, +                    super.executeHandshake(node, channel, profile, listener);, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/transport/nio/SimpleNioTransportTests.java, +import org.elasticsearch.transport.ConnectionProfile;, +            public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile,, +                                         ActionListener<Version> listener) {, +                    super.executeHandshake(node, channel, profile, listener);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +            logger.debug("using profile[{}], worker_count[{}], port[{}], bind_host[{}], publish_host[{}], receive_predictor[{}->{}]",, +                name, workerCount, profileSettings.portOrRange, profileSettings.bindHosts, profileSettings.publishHosts,, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java, +                    channel.sendResponse(TransportResponse.Empty.INSTANCE);, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/SimpleNetty4TransportTests.java, +import org.elasticsearch.transport.ConnectionProfile;, +            public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile,, +                                         ActionListener<Version> listener) {, +                    super.executeHandshake(node, channel, profile, listener);, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/transport/nio/SimpleNioTransportTests.java, +import org.elasticsearch.transport.ConnectionProfile;, +            public void executeHandshake(DiscoveryNode node, TcpChannel channel, ConnectionProfile profile,, +                                         ActionListener<Version> listener) {, +                    super.executeHandshake(node, channel, profile, listener);, +++ b/server/src/main/java/org/elasticsearch/transport/ConnectionProfile.java, +        } else if (profile.getConnectTimeout() != null && profile.getHandshakeTimeout() != null, +            && profile.getCompressionEnabled() != null) {, +            if (profile.getCompressionEnabled() == null) {, +                builder.setCompressionEnabled(fallbackProfile.getCompressionEnabled());, +            }, +        builder.setCompressionEnabled(Transport.TRANSPORT_TCP_COMPRESS.get(settings));, +     * Builds a connection profile that is dedicated to a single channel type. Use this, +     * when opening single use connections, +     */, +    public static ConnectionProfile buildSingleChannelProfile(TransportRequestOptions.Type channelType) {, +        return buildSingleChannelProfile(channelType, null, null, null);, +    }, +, +    /**, +     * Builds a connection profile that is dedicated to a single channel type. Allows passing compression, +     * settings., +     */, +    public static ConnectionProfile buildSingleChannelProfile(TransportRequestOptions.Type channelType, boolean compressionEnabled) {, +        return buildSingleChannelProfile(channelType, null, null, compressionEnabled);, +    }, +, +    /**, +     * Builds a connection profile that is dedicated to a single channel type. Allows passing connection and, +     * handshake timeouts., +     */, +    public static ConnectionProfile buildSingleChannelProfile(TransportRequestOptions.Type channelType, @Nullable TimeValue connectTimeout,, +                                                              @Nullable TimeValue handshakeTimeout) {, +        return buildSingleChannelProfile(channelType, connectTimeout, handshakeTimeout, null);, +    }, +, +    /**, +     * Builds a connection profile that is dedicated to a single channel type. Allows passing connection and, +     * handshake timeouts and compression settings., +     */, +    public static ConnectionProfile buildSingleChannelProfile(TransportRequestOptions.Type channelType, @Nullable TimeValue connectTimeout,, +                                                              @Nullable TimeValue handshakeTimeout, @Nullable Boolean compressionEnabled) {, +        Builder builder = new Builder();, +        builder.addConnections(1, channelType);, +        final EnumSet<TransportRequestOptions.Type> otherTypes = EnumSet.allOf(TransportRequestOptions.Type.class);, +        otherTypes.remove(channelType);, +        builder.addConnections(0, otherTypes.toArray(new TransportRequestOptions.Type[0]));, +        if (connectTimeout != null) {, +            builder.setConnectTimeout(connectTimeout);, +        }, +        if (handshakeTimeout != null) {, +            builder.setHandshakeTimeout(handshakeTimeout);, +        }, +        if (compressionEnabled != null) {, +            builder.setCompressionEnabled(compressionEnabled);, +        }, +        return builder.build();]