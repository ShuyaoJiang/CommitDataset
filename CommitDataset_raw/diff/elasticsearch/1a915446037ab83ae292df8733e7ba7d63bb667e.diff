[+++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +            // if no successful shards, the failure can be due to EsRejectedExecutionException during fetch phase, +            // on coordinator node. so get the status from cause instead of returning SERVICE_UNAVAILABLE blindly, +            return getCause() == null ? RestStatus.SERVICE_UNAVAILABLE : ExceptionsHelper.status(getCause());, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +            // if no successful shards, the failure can be due to EsRejectedExecutionException during fetch phase, +            // on coordinator node. so get the status from cause instead of returning SERVICE_UNAVAILABLE blindly, +            return getCause() == null ? RestStatus.SERVICE_UNAVAILABLE : ExceptionsHelper.status(getCause());, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchPhaseExecutionExceptionTests.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.rest.RestStatus;, +, +    public void testPhaseFailureWithoutSearchShardFailure() {, +        final ShardSearchFailure[] searchShardFailures = new ShardSearchFailure[0];, +        final String phase = randomFrom("fetch", "search", "other");, +        SearchPhaseExecutionException actual = new SearchPhaseExecutionException(phase, "unexpected failures",, +            new EsRejectedExecutionException("ES rejected execution of fetch phase"), searchShardFailures);, +, +        assertEquals(actual.status(), RestStatus.TOO_MANY_REQUESTS);, +    }, +, +    public void testPhaseFailureWithoutSearchShardFailureAndCause() {, +        final ShardSearchFailure[] searchShardFailures = new ShardSearchFailure[0];, +        final String phase = randomFrom("fetch", "search", "other");, +        SearchPhaseExecutionException actual = new SearchPhaseExecutionException(phase, "unexpected failures", null, searchShardFailures);, +, +        assertEquals(actual.status(), RestStatus.SERVICE_UNAVAILABLE);, +    }, +, +    public void testPhaseFailureWithSearchShardFailure() {, +        final ShardSearchFailure[] shardSearchFailures = new ShardSearchFailure[randomIntBetween(1, 5)];, +        for (int i = 0; i < shardSearchFailures.length; i++) {, +            Exception cause = randomFrom(, +                new ParsingException(1, 2, "foobar", null),, +                new InvalidIndexTemplateException("foo", "bar"), +            );, +            shardSearchFailures[i] = new ShardSearchFailure(cause, new SearchShardTarget("node_" + i,, +                new ShardId("test", "_na_", i), null, OriginalIndices.NONE));, +        }, +, +        final String phase = randomFrom("fetch", "search", "other");, +        SearchPhaseExecutionException actual = new SearchPhaseExecutionException(phase, "unexpected failures",, +            new EsRejectedExecutionException("ES rejected execution of fetch phase"), shardSearchFailures);, +, +        assertEquals(actual.status(), RestStatus.BAD_REQUEST);, +    }]