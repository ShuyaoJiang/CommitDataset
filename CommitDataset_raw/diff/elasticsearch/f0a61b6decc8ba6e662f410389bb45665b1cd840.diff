[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/FieldSubsetReader.java, +import java.io.UncheckedIOException;, +                    try {, +                    } catch (IOException e) {, +                        throw new UncheckedIOException(e);, +                    }, +    /** {@link Terms} cache with filtered stats for the {@link FieldNamesFieldMapper} field. */, +    private final Terms fieldNamesFilterTerms;, +    FieldSubsetReader(LeafReader in, CharacterRunAutomaton filter) throws IOException {, +        final Terms fieldNameTerms = super.terms(FieldNamesFieldMapper.NAME);, +        this.fieldNamesFilterTerms = fieldNameTerms == null ? null : new FieldNamesTerms(fieldNameTerms);, +    private Terms wrapTerms(Terms terms, String field) throws IOException {, +            return fieldNamesFilterTerms;, +        final long size;, +        final long sumDocFreq;, +        FieldNamesTerms(Terms in) throws IOException {, +            assert in.hasFreqs() == false;, +            // re-compute the stats for the field to take, +            // into account the filtered terms., +            final TermsEnum e = iterator();, +            long size = 0, sumDocFreq = 0;, +            while (e.next() != null) {, +                size ++;, +                sumDocFreq += e.docFreq();, +            }, +            this.size = size;, +            this.sumDocFreq = sumDocFreq;, +        public long size() throws IOException {, +            return size;, +            return sumDocFreq;, +        public int getDocCount() throws IOException {, +            // it is costly to recompute this value so we assume that docCount == maxDoc., +            return maxDoc();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/FieldSubsetReader.java, +import java.io.UncheckedIOException;, +                    try {, +                    } catch (IOException e) {, +                        throw new UncheckedIOException(e);, +                    }, +    /** {@link Terms} cache with filtered stats for the {@link FieldNamesFieldMapper} field. */, +    private final Terms fieldNamesFilterTerms;, +    FieldSubsetReader(LeafReader in, CharacterRunAutomaton filter) throws IOException {, +        final Terms fieldNameTerms = super.terms(FieldNamesFieldMapper.NAME);, +        this.fieldNamesFilterTerms = fieldNameTerms == null ? null : new FieldNamesTerms(fieldNameTerms);, +    private Terms wrapTerms(Terms terms, String field) throws IOException {, +            return fieldNamesFilterTerms;, +        final long size;, +        final long sumDocFreq;, +        FieldNamesTerms(Terms in) throws IOException {, +            assert in.hasFreqs() == false;, +            // re-compute the stats for the field to take, +            // into account the filtered terms., +            final TermsEnum e = iterator();, +            long size = 0, sumDocFreq = 0;, +            while (e.next() != null) {, +                size ++;, +                sumDocFreq += e.docFreq();, +            }, +            this.size = size;, +            this.sumDocFreq = sumDocFreq;, +        public long size() throws IOException {, +            return size;, +            return sumDocFreq;, +        public int getDocCount() throws IOException {, +            // it is costly to recompute this value so we assume that docCount == maxDoc., +            return maxDoc();, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/FieldSubsetReaderTests.java]