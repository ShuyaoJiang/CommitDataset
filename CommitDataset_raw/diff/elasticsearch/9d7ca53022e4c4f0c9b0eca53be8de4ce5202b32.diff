[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder rawField(String fieldName, InputStream content) throws IOException {, +        generator.writeRawField(fieldName, content, bos);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder rawField(String fieldName, InputStream content) throws IOException {, +        generator.writeRawField(fieldName, content, bos);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +    void writeRawField(String fieldName, InputStream content, OutputStream bos) throws IOException;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder rawField(String fieldName, InputStream content) throws IOException {, +        generator.writeRawField(fieldName, content, bos);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +    void writeRawField(String fieldName, InputStream content, OutputStream bos) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +                builder.rawField(field, compressedStreamInput);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder rawField(String fieldName, InputStream content) throws IOException {, +        generator.writeRawField(fieldName, content, bos);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +    void writeRawField(String fieldName, InputStream content, OutputStream bos) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +                builder.rawField(field, compressedStreamInput);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/cbor/CborXContent.java, +import com.fasterxml.jackson.core.JsonGenerator;, +import org.elasticsearch.common.util.CollectionUtils;, +import org.elasticsearch.common.xcontent.json.BaseJsonGenerator;, +import org.elasticsearch.common.xcontent.support.filtering.FilteringJsonGenerator;, +    private XContentGenerator newXContentGenerator(JsonGenerator jsonGenerator) {, +        return new CborXContentGenerator(new BaseJsonGenerator(jsonGenerator));, +    }, +, +        return newXContentGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8));, +        if (CollectionUtils.isEmpty(filters)) {, +            return createGenerator(os);, +        }, +        FilteringJsonGenerator cborGenerator = new FilteringJsonGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8), filters);, +        return new CborXContentGenerator(cborGenerator);, +        return newXContentGenerator(cborFactory.createGenerator(writer));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder rawField(String fieldName, InputStream content) throws IOException {, +        generator.writeRawField(fieldName, content, bos);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +    void writeRawField(String fieldName, InputStream content, OutputStream bos) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +                builder.rawField(field, compressedStreamInput);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/cbor/CborXContent.java, +import com.fasterxml.jackson.core.JsonGenerator;, +import org.elasticsearch.common.util.CollectionUtils;, +import org.elasticsearch.common.xcontent.json.BaseJsonGenerator;, +import org.elasticsearch.common.xcontent.support.filtering.FilteringJsonGenerator;, +    private XContentGenerator newXContentGenerator(JsonGenerator jsonGenerator) {, +        return new CborXContentGenerator(new BaseJsonGenerator(jsonGenerator));, +    }, +, +        return newXContentGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8));, +        if (CollectionUtils.isEmpty(filters)) {, +            return createGenerator(os);, +        }]