[+++ b/core/src/main/java/org/elasticsearch/common/RandomBasedUUIDGenerator.java, +        return getBase64UUID(Randomness.getSecure());, +, +++ b/core/src/main/java/org/elasticsearch/common/RandomBasedUUIDGenerator.java, +        return getBase64UUID(Randomness.getSecure());, +, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import java.security.NoSuchAlgorithmException;, +import java.security.NoSuchProviderException;, +import java.security.SecureRandom;, +, +    public static Random get(final Settings settings, final Setting<Long> setting) {, +                final Object randomizedContext = currentMethod.invoke(null);, +    /**, +     * Provides a source of randomness that is reproducible when, +     * running under the Elasticsearch test suite, and otherwise, +     * produces a non-reproducible source of secure randomness., +     * Reproducible sources of randomness are created when the system, +     * property "tests.seed" is set and the security policy allows, +     * reading this system property. Otherwise, non-reproducible, +     * sources of secure randomness are created., +     *, +     * @return a source of randomness, +     * @throws IllegalStateException if running tests but was not able, +     *                               to acquire an instance of Random from, +     *                               RandomizedContext or tests are, +     *                               running but tests.seed is not set, +     */, +    public static Random getSecure() {, +        if (currentMethod != null && getRandomMethod != null) {, +            return get();, +        } else {, +            return getSecureRandomWithoutSeed();, +        }, +    }, +, +    private static SecureRandom getSecureRandomWithoutSeed() {, +        assert currentMethod == null && getRandomMethod == null : "running under tests but tried to create non-reproducible random";, +        return SecureRandomHolder.INSTANCE;, +    }, +, +    public static void shuffle(final List<?> list) {, +, +++ b/core/src/main/java/org/elasticsearch/common/RandomBasedUUIDGenerator.java, +        return getBase64UUID(Randomness.getSecure());, +, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import java.security.NoSuchAlgorithmException;, +import java.security.NoSuchProviderException;, +import java.security.SecureRandom;, +, +    public static Random get(final Settings settings, final Setting<Long> setting) {, +                final Object randomizedContext = currentMethod.invoke(null);, +    /**, +     * Provides a source of randomness that is reproducible when, +     * running under the Elasticsearch test suite, and otherwise, +     * produces a non-reproducible source of secure randomness., +     * Reproducible sources of randomness are created when the system, +     * property "tests.seed" is set and the security policy allows, +     * reading this system property. Otherwise, non-reproducible, +     * sources of secure randomness are created., +     *, +     * @return a source of randomness, +     * @throws IllegalStateException if running tests but was not able, +     *                               to acquire an instance of Random from, +     *                               RandomizedContext or tests are, +     *                               running but tests.seed is not set, +     */, +    public static Random getSecure() {, +        if (currentMethod != null && getRandomMethod != null) {, +            return get();, +        } else {, +            return getSecureRandomWithoutSeed();, +        }, +    }, +, +    private static SecureRandom getSecureRandomWithoutSeed() {, +        assert currentMethod == null && getRandomMethod == null : "running under tests but tried to create non-reproducible random";, +        return SecureRandomHolder.INSTANCE;, +    }, +, +    public static void shuffle(final List<?> list) {, +, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterChangedEventTests.java, +import org.junit.BeforeClass;, +    private static String INITIAL_CLUSTER_ID;, +    private static List<Index> initialIndices;, +, +    @BeforeClass, +    public static void beforeClass() {, +        INITIAL_CLUSTER_ID = UUIDs.randomBase64UUID();, +        initialIndices = Arrays.asList(new Index("idx1", UUIDs.randomBase64UUID()),, +    }, +++ b/core/src/main/java/org/elasticsearch/common/RandomBasedUUIDGenerator.java, +        return getBase64UUID(Randomness.getSecure());, +, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import java.security.NoSuchAlgorithmException;, +import java.security.NoSuchProviderException;, +import java.security.SecureRandom;]