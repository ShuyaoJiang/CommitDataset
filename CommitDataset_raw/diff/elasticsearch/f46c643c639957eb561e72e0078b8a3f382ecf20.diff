[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.ElasticSearchGenerationException;, +import org.elasticsearch.util.io.FastCharArrayWriter;, +import static org.elasticsearch.util.json.Jackson.*;, +     * The settings to crete the index with (either json/yaml/properties format), +     */, +    public CreateIndexRequest settings(Map source) {, +        FastCharArrayWriter writer = FastCharArrayWriter.Cached.cached();, +        try {, +            defaultObjectMapper().writeValue(writer, source);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + source + "]", e);, +        }, +        return settings(writer.toString());, +    }, +, +    /**, +    /**, +     * Adds mapping that will be added when the index gets created., +     *, +     * @param type   The mapping type, +     * @param source The mapping source, +     */, +    public CreateIndexRequest mapping(String type, Map source) {, +        FastCharArrayWriter writer = FastCharArrayWriter.Cached.cached();, +        try {, +            defaultObjectMapper().writeValue(writer, source);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + source + "]", e);, +        }, +        return mapping(type, writer.toString());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.ElasticSearchGenerationException;, +import org.elasticsearch.util.io.FastCharArrayWriter;, +import static org.elasticsearch.util.json.Jackson.*;, +     * The settings to crete the index with (either json/yaml/properties format), +     */, +    public CreateIndexRequest settings(Map source) {, +        FastCharArrayWriter writer = FastCharArrayWriter.Cached.cached();, +        try {, +            defaultObjectMapper().writeValue(writer, source);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + source + "]", e);, +        }, +        return settings(writer.toString());, +    }, +, +    /**, +    /**, +     * Adds mapping that will be added when the index gets created., +     *, +     * @param type   The mapping type, +     * @param source The mapping source, +     */, +    public CreateIndexRequest mapping(String type, Map source) {, +        FastCharArrayWriter writer = FastCharArrayWriter.Cached.cached();, +        try {, +            defaultObjectMapper().writeValue(writer, source);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + source + "]", e);, +        }, +        return mapping(type, writer.toString());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +import org.elasticsearch.ElasticSearchGenerationException;, +import org.elasticsearch.util.io.FastCharArrayWriter;, +import java.util.Map;, +import static org.elasticsearch.util.json.Jackson.*;, +    @Required public PutMappingRequest source(Map mappingSource) {, +        FastCharArrayWriter writer = FastCharArrayWriter.Cached.cached();, +        try {, +            defaultObjectMapper().writeValue(writer, mappingSource);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + mappingSource + "]", e);, +        }, +        return source(writer.toString());, +    }, +, +    /**, +     * The mapping source definition., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.ElasticSearchGenerationException;, +import org.elasticsearch.util.io.FastCharArrayWriter;, +import static org.elasticsearch.util.json.Jackson.*;, +     * The settings to crete the index with (either json/yaml/properties format), +     */, +    public CreateIndexRequest settings(Map source) {, +        FastCharArrayWriter writer = FastCharArrayWriter.Cached.cached();, +        try {, +            defaultObjectMapper().writeValue(writer, source);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + source + "]", e);, +        }, +        return settings(writer.toString());, +    }, +]