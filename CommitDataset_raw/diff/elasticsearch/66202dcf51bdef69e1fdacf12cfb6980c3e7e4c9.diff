[+++ b/.dir-locals.el, +   (fill-column . 140), +   (fci-rule-column . 140), +++ b/.dir-locals.el, +   (fill-column . 140), +   (fci-rule-column . 140), +++ b/TESTING.asciidoc, +We're missing the following because our tests are very linux/bash centric:, +gradle setupBats, +cd qa/vagrant; vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/.dir-locals.el, +   (fill-column . 140), +   (fci-rule-column . 140), +++ b/TESTING.asciidoc, +We're missing the following because our tests are very linux/bash centric:, +gradle setupBats, +cd qa/vagrant; vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.waitfor(maxwait: '40', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond') {, +    List<Object> dependencies = new ArrayList<>(), +, +, +    /** Add dependencies that must be run before the first task setting up the cluster. */, +    @Input, +    void dependsOn(Object... deps) {, +        dependencies.addAll(deps), +    }, +++ b/.dir-locals.el, +   (fill-column . 140), +   (fci-rule-column . 140), +++ b/TESTING.asciidoc, +We're missing the following because our tests are very linux/bash centric:, +gradle setupBats, +cd qa/vagrant; vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.waitfor(maxwait: '40', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond') {, +    List<Object> dependencies = new ArrayList<>(), +, +, +    /** Add dependencies that must be run before the first task setting up the cluster. */, +    @Input, +    void dependsOn(Object... deps) {, +        dependencies.addAll(deps), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Task cleanup = project.tasks.create(name: "${prefix}#prepareCluster.cleanShared", type: Delete, dependsOn: config.dependencies) {, +            startTasks.add(configureNode(project, prefix, runner, dependsOn, node, config, distro, nodes.get(0))), +    static Task configureNode(Project project, String prefix, Task runner, Object dependsOn, NodeInfo node, ClusterConfiguration config,, +                              Configuration distribution, NodeInfo seedNode) {, +        setup = configureExtractTask(taskName(prefix, node, 'extract'), project, setup, node, distribution), +            for (Object dependency : config.dependencies) {, +                if (dependency instanceof Fixture) {, +                    Task depStop = ((Fixture)dependency).stopTask, +                    runner.finalizedBy(depStop), +                    start.finalizedBy(depStop), +                }, +            }, +            ant.waitfor(maxwait: '60', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond', timeoutproperty: "failed${name}") {, +++ b/.dir-locals.el, +   (fill-column . 140), +   (fci-rule-column . 140), +++ b/TESTING.asciidoc, +We're missing the following because our tests are very linux/bash centric:, +gradle setupBats, +cd qa/vagrant; vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.waitfor(maxwait: '40', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond') {, +    List<Object> dependencies = new ArrayList<>(), +, +, +    /** Add dependencies that must be run before the first task setting up the cluster. */, +    @Input, +    void dependsOn(Object... deps) {, +        dependencies.addAll(deps), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Task cleanup = project.tasks.create(name: "${prefix}#prepareCluster.cleanShared", type: Delete, dependsOn: config.dependencies) {, +            startTasks.add(configureNode(project, prefix, runner, dependsOn, node, config, distro, nodes.get(0))), +    static Task configureNode(Project project, String prefix, Task runner, Object dependsOn, NodeInfo node, ClusterConfiguration config,, +                              Configuration distribution, NodeInfo seedNode) {, +        setup = configureExtractTask(taskName(prefix, node, 'extract'), project, setup, node, distribution), +            for (Object dependency : config.dependencies) {, +                if (dependency instanceof Fixture) {, +                    Task depStop = ((Fixture)dependency).stopTask, +                    runner.finalizedBy(depStop), +                    start.finalizedBy(depStop), +                }, +            }, +            ant.waitfor(maxwait: '60', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond', timeoutproperty: "failed${name}") {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +            platform.doFirst {, +            platform.doLast {, +++ b/.dir-locals.el, +   (fill-column . 140), +   (fci-rule-column . 140), +++ b/TESTING.asciidoc, +We're missing the following because our tests are very linux/bash centric:, +gradle setupBats, +cd qa/vagrant; vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy]