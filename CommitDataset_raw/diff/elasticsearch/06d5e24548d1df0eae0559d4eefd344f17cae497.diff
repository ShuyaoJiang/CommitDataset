[+++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/BaseFuture.java, +import com.google.common.annotations.Beta;, +    @Beta, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/BaseFuture.java, +import com.google.common.annotations.Beta;, +    @Beta, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/BaseFuture.java, +import com.google.common.annotations.Beta;, +    @Beta, +++ /dev/null, +++ b/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.apache.lucene.queries;, +, +import org.apache.lucene.analysis.MockAnalyzer;, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.FieldType;, +import org.apache.lucene.document.TextField;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.index.IndexWriter;, +import org.apache.lucene.index.MultiReader;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.QueryUtils;, +import org.apache.lucene.search.ScoreDoc;, +import org.apache.lucene.search.TermQuery;, +import org.apache.lucene.search.TopDocs;, +import org.apache.lucene.search.similarities.BM25Similarity;, +import org.apache.lucene.search.similarities.DefaultSimilarity;, +import org.apache.lucene.search.similarities.Similarity;, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.util.TestUtil;, +import org.elasticsearch.test.ESTestCase;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +import static org.hamcrest.Matchers.containsInAnyOrder;, +import static org.hamcrest.Matchers.equalTo;, +, +/**, + */, +public class BlendedTermQueryTests extends ESTestCase {, +, +    @Test, +    public void testBooleanQuery() throws IOException {, +        Directory dir = newDirectory();, +        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));, +        String[] firstNames = new String[]{, +                "simon", "paul", +        };, +        String[] surNames = new String[]{, +                "willnauer", "simon", +        };, +        for (int i = 0; i < surNames.length; i++) {, +            Document d = new Document();, +            d.add(new TextField("id", Integer.toString(i), Field.Store.YES));, +            d.add(new TextField("firstname", firstNames[i], Field.Store.NO));, +            d.add(new TextField("surname", surNames[i], Field.Store.NO));, +            w.addDocument(d);, +        }, +        int iters = scaledRandomIntBetween(25, 100);, +        for (int j = 0; j < iters; j++) {, +            Document d = new Document();, +            d.add(new TextField("id", Integer.toString(firstNames.length + j), Field.Store.YES));, +            d.add(new TextField("firstname", rarely() ? "some_other_name" :, +                    "simon the sorcerer", Field.Store.NO)); // make sure length-norm is the tie-breaker, +            d.add(new TextField("surname", "bogus", Field.Store.NO));, +            w.addDocument(d);, +        }, +        w.commit();, +        DirectoryReader reader = DirectoryReader.open(w, true);]