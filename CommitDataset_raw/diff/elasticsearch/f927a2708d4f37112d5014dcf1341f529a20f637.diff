[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/QueryExplanation.java, +import org.elasticsearch.Version;, +    public static final int RANDOM_SHARD = -1;, +, +    private int shard = RANDOM_SHARD;, +, +    public QueryExplanation(String index, int shard, boolean valid, String explanation,, +                            String error) {, +        this.shard = shard;, +    public int getShard() {, +        return this.shard;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)) {, +            shard = in.readInt();, +        } else {, +            shard = RANDOM_SHARD;, +        }, +        if (out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)) {, +            out.writeInt(shard);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/QueryExplanation.java, +import org.elasticsearch.Version;, +    public static final int RANDOM_SHARD = -1;, +, +    private int shard = RANDOM_SHARD;, +, +    public QueryExplanation(String index, int shard, boolean valid, String explanation,, +                            String error) {, +        this.shard = shard;, +    public int getShard() {, +        return this.shard;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)) {, +            shard = in.readInt();, +        } else {, +            shard = RANDOM_SHARD;, +        }, +        if (out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)) {, +            out.writeInt(shard);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final String routing;, +        if (request.allShards()) {, +            routing = null;, +        } else {, +            // Random routing to limit request to a single shard, +            routing = Integer.toString(Randomness.get().nextInt(1000));, +        }, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, routing, request.indices());, +                if (request.explain() || request.rewrite() || request.allShards()) {, +                            request.allShards() ? validateQueryResponse.getShardId().getId() : QueryExplanation.RANDOM_SHARD,, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/QueryExplanation.java, +import org.elasticsearch.Version;, +    public static final int RANDOM_SHARD = -1;, +, +    private int shard = RANDOM_SHARD;, +, +    public QueryExplanation(String index, int shard, boolean valid, String explanation,, +                            String error) {, +        this.shard = shard;, +    public int getShard() {, +        return this.shard;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)) {, +            shard = in.readInt();, +        } else {, +            shard = RANDOM_SHARD;, +        }, +        if (out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)) {, +            out.writeInt(shard);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final String routing;, +        if (request.allShards()) {, +            routing = null;, +        } else {, +            // Random routing to limit request to a single shard, +            routing = Integer.toString(Randomness.get().nextInt(1000));, +        }, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, routing, request.indices());, +                if (request.explain() || request.rewrite() || request.allShards()) {, +                            request.allShards() ? validateQueryResponse.getShardId().getId() : QueryExplanation.RANDOM_SHARD,, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequest.java, +import org.elasticsearch.Version;, +    private boolean allShards;, +    /**, +     * Indicates whether the query should be validated on all shards instead of one random shard, +     */, +    public void allShards(boolean allShards) {, +        this.allShards = allShards;, +    }, +, +    /**, +     * Indicates whether the query should be validated on all shards instead of one random shard, +     */, +    public boolean allShards() {, +        return allShards;]