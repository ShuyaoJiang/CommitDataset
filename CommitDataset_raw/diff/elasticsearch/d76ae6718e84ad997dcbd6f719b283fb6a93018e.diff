[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        this(phaseName, msg, null, shardFailures);, +        super(msg, deduplicateCause(cause, shardFailures));, +        out.writeVInt(shardFailures.length);, +, +    private static final Throwable deduplicateCause(Throwable cause, ShardSearchFailure[] shardFailures) {, +        if (shardFailures == null) {, +            throw new IllegalArgumentException("shardSearchFailures must not be null");, +        }, +        // if the cause of this exception is also the cause of one of the shard failures we don't add it, +        // to prevent duplication in stack traces rendered to the REST layer, +        if (cause != null) {, +            for (ShardSearchFailure failure : shardFailures) {, +                if (failure.getCause() == cause) {, +                    return null;, +                }, +            }, +        }, +        return cause;, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        this(phaseName, msg, null, shardFailures);, +        super(msg, deduplicateCause(cause, shardFailures));, +        out.writeVInt(shardFailures.length);, +, +    private static final Throwable deduplicateCause(Throwable cause, ShardSearchFailure[] shardFailures) {, +        if (shardFailures == null) {, +            throw new IllegalArgumentException("shardSearchFailures must not be null");, +        }, +        // if the cause of this exception is also the cause of one of the shard failures we don't add it, +        // to prevent duplication in stack traces rendered to the REST layer, +        if (cause != null) {, +            for (ShardSearchFailure failure : shardFailures) {, +                if (failure.getCause() == cause) {, +                    return null;, +                }, +            }, +        }, +        return cause;, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +                listener.onFailure(new SearchPhaseExecutionException("query", "no nodes to search on", ShardSearchFailure.EMPTY_ARRAY));, +                    listener.onFailure(new SearchPhaseExecutionException("query_fetch", "all shards failed", t, buildShardFailures()));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        this(phaseName, msg, null, shardFailures);, +        super(msg, deduplicateCause(cause, shardFailures));, +        out.writeVInt(shardFailures.length);, +, +    private static final Throwable deduplicateCause(Throwable cause, ShardSearchFailure[] shardFailures) {, +        if (shardFailures == null) {, +            throw new IllegalArgumentException("shardSearchFailures must not be null");, +        }, +        // if the cause of this exception is also the cause of one of the shard failures we don't add it, +        // to prevent duplication in stack traces rendered to the REST layer, +        if (cause != null) {, +            for (ShardSearchFailure failure : shardFailures) {, +                if (failure.getCause() == cause) {, +                    return null;, +                }, +            }, +        }, +        return cause;, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +                listener.onFailure(new SearchPhaseExecutionException("query", "no nodes to search on", ShardSearchFailure.EMPTY_ARRAY));, +                    listener.onFailure(new SearchPhaseExecutionException("query_fetch", "all shards failed", t, buildShardFailures()));, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +                listener.onFailure(new SearchPhaseExecutionException("query", "no nodes to search on", ShardSearchFailure.EMPTY_ARRAY));, +                            listener.onFailure(new SearchPhaseExecutionException("query", "Fetch failed", e, ShardSearchFailure.EMPTY_ARRAY));, +                    listener.onFailure(new SearchPhaseExecutionException("query", "all shards failed", t, buildShardFailures()));, +                        listener.onFailure(new SearchPhaseExecutionException("query", "Fetch failed", e, ShardSearchFailure.EMPTY_ARRAY));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        this(phaseName, msg, null, shardFailures);, +        super(msg, deduplicateCause(cause, shardFailures));, +        out.writeVInt(shardFailures.length);, +, +    private static final Throwable deduplicateCause(Throwable cause, ShardSearchFailure[] shardFailures) {, +        if (shardFailures == null) {, +            throw new IllegalArgumentException("shardSearchFailures must not be null");, +        }, +        // if the cause of this exception is also the cause of one of the shard failures we don't add it, +        // to prevent duplication in stack traces rendered to the REST layer, +        if (cause != null) {, +            for (ShardSearchFailure failure : shardFailures) {, +                if (failure.getCause() == cause) {, +                    return null;, +                }, +            }, +        }, +        return cause;, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +                listener.onFailure(new SearchPhaseExecutionException("query", "no nodes to search on", ShardSearchFailure.EMPTY_ARRAY));, +                    listener.onFailure(new SearchPhaseExecutionException("query_fetch", "all shards failed", t, buildShardFailures()));, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +                listener.onFailure(new SearchPhaseExecutionException("query", "no nodes to search on", ShardSearchFailure.EMPTY_ARRAY));, +                            listener.onFailure(new SearchPhaseExecutionException("query", "Fetch failed", e, ShardSearchFailure.EMPTY_ARRAY));, +                    listener.onFailure(new SearchPhaseExecutionException("query", "all shards failed", t, buildShardFailures()));, +                        listener.onFailure(new SearchPhaseExecutionException("query", "Fetch failed", e, ShardSearchFailure.EMPTY_ARRAY));, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                final ShardSearchFailure[] shardSearchFailures = buildShardFailures();, +, +                    raiseEarlyFailure(new SearchPhaseExecutionException(firstPhaseName(), "all shards failed", t, shardSearchFailures));, +                        raiseEarlyFailure(new ReduceSearchPhaseException(firstPhaseName(), "", e, shardSearchFailures));]