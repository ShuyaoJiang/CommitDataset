[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.inject.ModulesBuilder;, +        ModulesBuilder modules = new ModulesBuilder();, +        injector = modules.createInjector();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.inject.ModulesBuilder;, +        ModulesBuilder modules = new ModulesBuilder();, +        injector = modules.createInjector();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.inject.SpawnModules;, +public class ClusterModule extends AbstractModule implements SpawnModules {, +    @Override public Iterable<? extends Module> spawnModules() {, +        return ImmutableList.of(new ShardAllocationModule(settings));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.inject.ModulesBuilder;, +        ModulesBuilder modules = new ModulesBuilder();, +        injector = modules.createInjector();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.inject.SpawnModules;, +public class ClusterModule extends AbstractModule implements SpawnModules {, +    @Override public Iterable<? extends Module> spawnModules() {, +        return ImmutableList.of(new ShardAllocationModule(settings));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardAllocationModule.java, +import org.elasticsearch.common.settings.Settings;, +    public ShardAllocationModule(Settings settings) {, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.inject.ModulesBuilder;, +        ModulesBuilder modules = new ModulesBuilder();, +        injector = modules.createInjector();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.inject.SpawnModules;, +public class ClusterModule extends AbstractModule implements SpawnModules {, +    @Override public Iterable<? extends Module> spawnModules() {, +        return ImmutableList.of(new ShardAllocationModule(settings));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardAllocationModule.java, +import org.elasticsearch.common.settings.Settings;, +    public ShardAllocationModule(Settings settings) {, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/inject/Modules.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.inject;, +, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.settings.Settings;, +, +import javax.annotation.Nullable;, +import java.lang.reflect.Constructor;, +, +/**, + * @author kimchy (shay.banon), + */, +public class Modules {, +, +    public static Module createModule(String moduleClass, Settings settings) throws ClassNotFoundException {, +        return createModule((Class<? extends Module>) settings.getClassLoader().loadClass(moduleClass), settings);, +    }, +, +    public static Module createModule(Class<? extends Module> moduleClass, @Nullable Settings settings) {, +        Constructor<? extends Module> constructor;, +        try {, +            constructor = moduleClass.getConstructor(Settings.class);, +            try {, +                return constructor.newInstance(settings);, +            } catch (Exception e) {, +                throw new ElasticSearchException("Failed to create module [" + moduleClass + "]", e);, +            }, +        } catch (NoSuchMethodException e) {]