[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/docs/plugins/discovery-gce.asciidoc, +elasticsearch. In this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new, +node's discovery phase will end before it has found the cluster (which will result in it declaring itself master of a, +new cluster with the same name - highly undesirable). Adding tag on elasticsearch GCE nodes and then filtering by that, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/docs/plugins/discovery-gce.asciidoc, +elasticsearch. In this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new, +node's discovery phase will end before it has found the cluster (which will result in it declaring itself master of a, +new cluster with the same name - highly undesirable). Adding tag on elasticsearch GCE nodes and then filtering by that, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/docs/plugins/discovery-gce.asciidoc, +elasticsearch. In this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new, +node's discovery phase will end before it has found the cluster (which will result in it declaring itself master of a, +new cluster with the same name - highly undesirable). Adding tag on elasticsearch GCE nodes and then filtering by that, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/docs/plugins/discovery-gce.asciidoc, +elasticsearch. In this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new, +node's discovery phase will end before it has found the cluster (which will result in it declaring itself master of a, +new cluster with the same name - highly undesirable). Adding tag on elasticsearch GCE nodes and then filtering by that, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/docs/plugins/discovery-gce.asciidoc, +elasticsearch. In this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new, +node's discovery phase will end before it has found the cluster (which will result in it declaring itself master of a, +new cluster with the same name - highly undesirable). Adding tag on elasticsearch GCE nodes and then filtering by that, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/docs/plugins/discovery-gce.asciidoc, +elasticsearch. In this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new, +node's discovery phase will end before it has found the cluster (which will result in it declaring itself master of a, +new cluster with the same name - highly undesirable). Adding tag on elasticsearch GCE nodes and then filtering by that, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/docs/plugins/discovery-gce.asciidoc, +elasticsearch. In this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new, +node's discovery phase will end before it has found the cluster (which will result in it declaring itself master of a, +new cluster with the same name - highly undesirable). Adding tag on elasticsearch GCE nodes and then filtering by that, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/docs/plugins/discovery-ec2.asciidoc, +this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new node's discovery phase, +will end before it has found the cluster (which will result in it declaring itself master of a new cluster with the same, +name - highly undesirable). Tagging elasticsearch ec2 nodes and then filtering by that tag will resolve this issue., +++ b/docs/plugins/discovery-gce.asciidoc, +elasticsearch. In this case (particularly with high `discovery.zen.ping_timeout` values) there is a risk that a new, +node's discovery phase will end before it has found the cluster (which will result in it declaring itself master of a, +new cluster with the same name - highly undesirable). Adding tag on elasticsearch GCE nodes and then filtering by that, +++ /dev/null]