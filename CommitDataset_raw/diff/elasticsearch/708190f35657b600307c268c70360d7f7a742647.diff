[+++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/DetectionRulesIT.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/DetectionRulesIT.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/InterimResultsDeletedAfterReopeningJobIT.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/DetectionRulesIT.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/InterimResultsDeletedAfterReopeningJobIT.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeAutodetectIntegTestCase.java, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Map;, +                assertThat(getJobStats(jobId).get(0).getState(), equalTo(JobState.CLOSED));, +    protected List<GetJobsStatsAction.Response.JobStats> getJobStats(String jobId) throws Exception {, +        GetJobsStatsAction.Request request = new GetJobsStatsAction.Request(jobId);, +        GetJobsStatsAction.Response response = client().execute(GetJobsStatsAction.INSTANCE, request).get();, +        return response.getResponse().results();, +    }, +, +        return getBuckets(request);, +    }, +, +    protected List<Bucket> getBuckets(GetBucketsAction.Request request) throws Exception {, +, +    protected static String createJsonRecord(Map<String, Object> keyValueMap) throws IOException {, +        return JsonXContent.contentBuilder().map(keyValueMap).string() + "\n";, +    }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/DetectionRulesIT.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/InterimResultsDeletedAfterReopeningJobIT.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeAutodetectIntegTestCase.java, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Map;, +                assertThat(getJobStats(jobId).get(0).getState(), equalTo(JobState.CLOSED));, +    protected List<GetJobsStatsAction.Response.JobStats> getJobStats(String jobId) throws Exception {, +        GetJobsStatsAction.Request request = new GetJobsStatsAction.Request(jobId);, +        GetJobsStatsAction.Response response = client().execute(GetJobsStatsAction.INSTANCE, request).get();, +        return response.getResponse().results();, +    }, +, +        return getBuckets(request);, +    }, +, +    protected List<Bucket> getBuckets(GetBucketsAction.Request request) throws Exception {, +, +    protected static String createJsonRecord(Map<String, Object> keyValueMap) throws IOException {, +        return JsonXContent.contentBuilder().map(keyValueMap).string() + "\n";, +    }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/RestoreModelSnapshotIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.ml.action.GetJobsStatsAction;, +import org.elasticsearch.xpack.ml.job.config.AnalysisConfig;, +import org.elasticsearch.xpack.ml.job.config.DataDescription;, +import org.elasticsearch.xpack.ml.job.config.Detector;, +import org.elasticsearch.xpack.ml.job.config.Job;, +import org.elasticsearch.xpack.ml.job.results.Bucket;, +import org.junit.After;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.is;, +, +/**, + * This test generates data and it runs them through 2 jobs., + * The data covers 3 days. During the first 2 days, bucket values alternate, + * between 2 modes. During the 3rd day, there is only one of the 2 modes, + * except for a single bucket when the other mode reappears., + * * The first job receives the data in one go. The second job receives the, + * data split into 2 parts: the alternating part and the stable part., + * After the first half, the job is closed and reopened, forcing the model, + * snapshot to be restored., + *, + * The test is designed so that no anomalies should be detected. However,, + * for the split job, if the model fails to be restored the reappearance of, + * the lost mode should cause an anomaly., + *, + * The test asserts the 2 jobs have equal data counts and no records., + */, +public class RestoreModelSnapshotIT extends MlNativeAutodetectIntegTestCase {, +, +    @After, +    public void tearDownData() throws Exception {, +        cleanUp();, +    }, +, +    public void test() throws Exception {, +        TimeValue bucketSpan = TimeValue.timeValueHours(1);, +        int bucketCount = 72;, +        List<String> byFieldValues = Arrays.asList("foo", "bar");, +, +        List<String> data = new ArrayList<>();, +        long now = System.currentTimeMillis();]