[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +                    @Nullable TransportInfo transport, @Nullable HttpInfo http, @Nullable PluginsAndModules plugins,, +                    @Nullable IngestInfo ingest, @Nullable ByteSizeValue totalIndexingBuffer) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +                    @Nullable TransportInfo transport, @Nullable HttpInfo http, @Nullable PluginsAndModules plugins,, +                    @Nullable IngestInfo ingest, @Nullable ByteSizeValue totalIndexingBuffer) {, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +    public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue defaultValue, String settingName), +            throws ElasticsearchParseException {, +                throw new ElasticsearchParseException(, +                        "failed to parse setting [{}] with value [{}] as a size in bytes: unit is missing or unrecognized",, +                        settingName, sValue);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +                    @Nullable TransportInfo transport, @Nullable HttpInfo http, @Nullable PluginsAndModules plugins,, +                    @Nullable IngestInfo ingest, @Nullable ByteSizeValue totalIndexingBuffer) {, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +    public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue defaultValue, String settingName), +            throws ElasticsearchParseException {, +                throw new ElasticsearchParseException(, +                        "failed to parse setting [{}] with value [{}] as a size in bytes: unit is missing or unrecognized",, +                        settingName, sValue);, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo(, +            "dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +                    @Nullable TransportInfo transport, @Nullable HttpInfo http, @Nullable PluginsAndModules plugins,, +                    @Nullable IngestInfo ingest, @Nullable ByteSizeValue totalIndexingBuffer) {, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +    public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue defaultValue, String settingName), +            throws ElasticsearchParseException {, +                throw new ElasticsearchParseException(, +                        "failed to parse setting [{}] with value [{}] as a size in bytes: unit is missing or unrecognized",, +                        settingName, sValue);, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo(, +            "dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +        assertThat(stats.getCpu().getPercent(), anyOf(equalTo((short) -1),, +                is(both(greaterThanOrEqualTo((short) 0)).and(lessThanOrEqualTo((short) 100)))));, +        double[] loadAverage = stats.getCpu().loadAverage;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +                    @Nullable TransportInfo transport, @Nullable HttpInfo http, @Nullable PluginsAndModules plugins,, +                    @Nullable IngestInfo ingest, @Nullable ByteSizeValue totalIndexingBuffer) {, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +    public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue defaultValue, String settingName), +            throws ElasticsearchParseException {, +                throw new ElasticsearchParseException(, +                        "failed to parse setting [{}] with value [{}] as a size in bytes: unit is missing or unrecognized",, +                        settingName, sValue);, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo(, +            "dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +        assertThat(stats.getCpu().getPercent(), anyOf(equalTo((short) -1),, +                is(both(greaterThanOrEqualTo((short) 0)).and(lessThanOrEqualTo((short) 100)))));, +        double[] loadAverage = stats.getCpu().loadAverage;, +++ b/core/src/test/java/org/elasticsearch/nodesinfo/NodeInfoStreamingTests.java, +    // checks all properties that are expected to be unchanged., +    // Once we start changing them between versions this method has to be changed as well, +    private static NodeInfo createNodeInfo() {, +        BoundTransportAddress dummyBoundTransportAddress = new BoundTransportAddress(, +                new TransportAddress[]{LocalTransportAddress.buildUnique()}, LocalTransportAddress.buildUnique());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +                    @Nullable TransportInfo transport, @Nullable HttpInfo http, @Nullable PluginsAndModules plugins,, +                    @Nullable IngestInfo ingest, @Nullable ByteSizeValue totalIndexingBuffer) {, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +    public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue defaultValue, String settingName), +            throws ElasticsearchParseException {, +                throw new ElasticsearchParseException(, +                        "failed to parse setting [{}] with value [{}] as a size in bytes: unit is missing or unrecognized",, +                        settingName, sValue);, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo(, +            "dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +        assertThat(stats.getCpu().getPercent(), anyOf(equalTo((short) -1),, +                is(both(greaterThanOrEqualTo((short) 0)).and(lessThanOrEqualTo((short) 100)))));, +        double[] loadAverage = stats.getCpu().loadAverage;, +++ b/core/src/test/java/org/elasticsearch/nodesinfo/NodeInfoStreamingTests.java, +    // checks all properties that are expected to be unchanged., +    // Once we start changing them between versions this method has to be changed as well, +    private static NodeInfo createNodeInfo() {, +        BoundTransportAddress dummyBoundTransportAddress = new BoundTransportAddress(, +                new TransportAddress[]{LocalTransportAddress.buildUnique()}, LocalTransportAddress.buildUnique());, +++ b/core/src/test/java/org/elasticsearch/threadpool/ThreadPoolSerializationTests.java, +    private final BytesStreamOutput output = new BytesStreamOutput();, +        ThreadPool.Info info = new ThreadPool.Info("foo", threadPoolType, 1, 10,, +                TimeValue.timeValueMillis(3000), SizeValue.parseSizeValue("10k"));, +        ThreadPool.Info info = new ThreadPool.Info("foo", threadPoolType, 1, 10,, +                TimeValue.timeValueMillis(3000), SizeValue.parseSizeValue("1k"));]