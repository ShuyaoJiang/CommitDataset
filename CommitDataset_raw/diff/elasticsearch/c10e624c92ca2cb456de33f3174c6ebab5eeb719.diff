[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverAction.java, +import org.elasticsearch.common.settings.Setting;, +    public static final String LIFECYCLE_ROLLOVER_ALIAS = "index.lifecycle.rollover_alias";, +    public static final Setting<String> LIFECYCLE_ROLLOVER_ALIAS_SETTING = Setting.simpleString(LIFECYCLE_ROLLOVER_ALIAS,, +        Setting.Property.Dynamic, Setting.Property.IndexScope);, +            a -> new RolloverAction((ByteSizeValue) a[0], (TimeValue) a[1], (Long) a[2]));, +    public RolloverAction(ByteSizeValue maxSize, TimeValue maxAge, Long maxDocs) {, +                new RolloverStep(new StepKey(phase, NAME, RolloverStep.NAME), nextStepKey, client, maxSize, maxAge, maxDocs));, +        return Objects.hash(maxSize, maxAge, maxDocs);, +        return Objects.equals(maxSize, other.maxSize) &&, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverAction.java, +import org.elasticsearch.common.settings.Setting;, +    public static final String LIFECYCLE_ROLLOVER_ALIAS = "index.lifecycle.rollover_alias";, +    public static final Setting<String> LIFECYCLE_ROLLOVER_ALIAS_SETTING = Setting.simpleString(LIFECYCLE_ROLLOVER_ALIAS,, +        Setting.Property.Dynamic, Setting.Property.IndexScope);, +            a -> new RolloverAction((ByteSizeValue) a[0], (TimeValue) a[1], (Long) a[2]));, +    public RolloverAction(ByteSizeValue maxSize, TimeValue maxAge, Long maxDocs) {, +                new RolloverStep(new StepKey(phase, NAME, RolloverStep.NAME), nextStepKey, client, maxSize, maxAge, maxDocs));, +        return Objects.hash(maxSize, maxAge, maxDocs);, +        return Objects.equals(maxSize, other.maxSize) &&, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStep.java, +import org.elasticsearch.common.Strings;, +import java.util.Locale;, +    public RolloverStep(StepKey key, StepKey nextStepKey, Client client, ByteSizeValue maxSize, TimeValue maxAge,, +        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetaData.getSettings());, +, +        if (Strings.isNullOrEmpty(rolloverAlias)) {, +            listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT, "setting [%s] for index [%s] is empty or not defined",, +                RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, indexMetaData.getIndex().getName())));, +            return;, +        }, +, +        RolloverRequest rolloverRequest = new RolloverRequest(rolloverAlias, null);, +        return Objects.hash(super.hashCode(), maxSize, maxAge, maxDocs);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverAction.java, +import org.elasticsearch.common.settings.Setting;, +    public static final String LIFECYCLE_ROLLOVER_ALIAS = "index.lifecycle.rollover_alias";, +    public static final Setting<String> LIFECYCLE_ROLLOVER_ALIAS_SETTING = Setting.simpleString(LIFECYCLE_ROLLOVER_ALIAS,, +        Setting.Property.Dynamic, Setting.Property.IndexScope);, +            a -> new RolloverAction((ByteSizeValue) a[0], (TimeValue) a[1], (Long) a[2]));, +    public RolloverAction(ByteSizeValue maxSize, TimeValue maxAge, Long maxDocs) {, +                new RolloverStep(new StepKey(phase, NAME, RolloverStep.NAME), nextStepKey, client, maxSize, maxAge, maxDocs));, +        return Objects.hash(maxSize, maxAge, maxDocs);, +        return Objects.equals(maxSize, other.maxSize) &&, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStep.java, +import org.elasticsearch.common.Strings;, +import java.util.Locale;, +    public RolloverStep(StepKey key, StepKey nextStepKey, Client client, ByteSizeValue maxSize, TimeValue maxAge,, +        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetaData.getSettings());, +, +        if (Strings.isNullOrEmpty(rolloverAlias)) {, +            listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT, "setting [%s] for index [%s] is empty or not defined",, +                RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, indexMetaData.getIndex().getName())));, +            return;, +        }, +, +        RolloverRequest rolloverRequest = new RolloverRequest(rolloverAlias, null);, +        return Objects.hash(super.hashCode(), maxSize, maxAge, maxDocs);, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverActionTests.java, +        return new RolloverAction(maxSize, maxAge, maxDocs);, +        switch (between(0, 2)) {, +        case 1:, +        case 2:, +        return new RolloverAction(maxSize, maxAge, maxDocs);, +                () -> new RolloverAction(null, null, null));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverAction.java, +import org.elasticsearch.common.settings.Setting;, +    public static final String LIFECYCLE_ROLLOVER_ALIAS = "index.lifecycle.rollover_alias";, +    public static final Setting<String> LIFECYCLE_ROLLOVER_ALIAS_SETTING = Setting.simpleString(LIFECYCLE_ROLLOVER_ALIAS,, +        Setting.Property.Dynamic, Setting.Property.IndexScope);, +            a -> new RolloverAction((ByteSizeValue) a[0], (TimeValue) a[1], (Long) a[2]));, +    public RolloverAction(ByteSizeValue maxSize, TimeValue maxAge, Long maxDocs) {, +                new RolloverStep(new StepKey(phase, NAME, RolloverStep.NAME), nextStepKey, client, maxSize, maxAge, maxDocs));, +        return Objects.hash(maxSize, maxAge, maxDocs);, +        return Objects.equals(maxSize, other.maxSize) &&, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStep.java, +import org.elasticsearch.common.Strings;, +import java.util.Locale;, +    public RolloverStep(StepKey key, StepKey nextStepKey, Client client, ByteSizeValue maxSize, TimeValue maxAge,, +        String rolloverAlias = RolloverAction.LIFECYCLE_ROLLOVER_ALIAS_SETTING.get(indexMetaData.getSettings());, +, +        if (Strings.isNullOrEmpty(rolloverAlias)) {, +            listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT, "setting [%s] for index [%s] is empty or not defined",, +                RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, indexMetaData.getIndex().getName())));, +            return;, +        }, +, +        RolloverRequest rolloverRequest = new RolloverRequest(rolloverAlias, null);, +        return Objects.hash(super.hashCode(), maxSize, maxAge, maxDocs);, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverActionTests.java, +        return new RolloverAction(maxSize, maxAge, maxDocs);, +        switch (between(0, 2)) {, +        case 1:, +        case 2:, +        return new RolloverAction(maxSize, maxAge, maxDocs);, +                () -> new RolloverAction(null, null, null));, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStepTests.java, +import java.util.Locale;, +import static org.hamcrest.Matchers.equalTo;, +]