[+++ b/build.gradle, +        //failOnVersionConflict(), +++ b/build.gradle, +        //failOnVersionConflict(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.util.VersionNumber, +++ b/build.gradle, +        //failOnVersionConflict(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.util.VersionNumber, +++ b/buildSrc/version.properties, +++ b/build.gradle, +        //failOnVersionConflict(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.util.VersionNumber, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +  compile "org.apache.lucene:lucene-analyzers-common:${versions.lucene}", +  compile "org.apache.lucene:lucene-memory:${versions.lucene}", +  compile "org.apache.lucene:lucene-highlighter:${versions.lucene}", +  compile "org.apache.lucene:lucene-join:${versions.lucene}", +  compile "org.apache.lucene:lucene-spatial:${versions.lucene}", +  compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: versions.jackson) {, +    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind', +  }, +++ b/build.gradle, +        //failOnVersionConflict(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.util.VersionNumber, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +  compile "org.apache.lucene:lucene-analyzers-common:${versions.lucene}", +  compile "org.apache.lucene:lucene-memory:${versions.lucene}", +  compile "org.apache.lucene:lucene-highlighter:${versions.lucene}", +  compile "org.apache.lucene:lucene-join:${versions.lucene}", +  compile "org.apache.lucene:lucene-spatial:${versions.lucene}", +  compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: versions.jackson) {, +    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind', +  }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        // Special handling for broken AWS code which destroys all SSL security, +        // REMOVE THIS when https://github.com/aws/aws-sdk-java/pull/432 is fixed, +        if (permission instanceof RuntimePermission && "accessClassInPackage.sun.security.ssl".equals(permission.getName())) {, +            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {, +                if ("com.amazonaws.http.conn.ssl.SdkTLSSocketFactory".equals(element.getClassName()) &&, +                      "verifyMasterSecret".equals(element.getMethodName())) {, +                    // we found the horrible method: the hack begins!, +                    // force the aws code to back down, by throwing an exception that it catches., +                    rethrow(new IllegalAccessException("no amazon, you cannot do this."));, +                }, +            }, +        }, +, +    /**, +     * Classy puzzler to rethrow any checked exception as an unchecked one., +     */, +    private static class Rethrower<T extends Throwable> {, +        private void rethrow(Throwable t) throws T {, +            throw (T) t;, +        }, +    }, +, +    /**, +     * Rethrows <code>t</code> (identical object)., +     */, +    private void rethrow(Throwable t) {, +        new Rethrower<Error>().rethrow(t);, +    }, +++ b/build.gradle, +        //failOnVersionConflict(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.util.VersionNumber, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +  compile "org.apache.lucene:lucene-analyzers-common:${versions.lucene}", +  compile "org.apache.lucene:lucene-memory:${versions.lucene}", +  compile "org.apache.lucene:lucene-highlighter:${versions.lucene}", +  compile "org.apache.lucene:lucene-join:${versions.lucene}", +  compile "org.apache.lucene:lucene-spatial:${versions.lucene}", +  compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: versions.jackson) {, +    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind', +  }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        // Special handling for broken AWS code which destroys all SSL security, +        // REMOVE THIS when https://github.com/aws/aws-sdk-java/pull/432 is fixed, +        if (permission instanceof RuntimePermission && "accessClassInPackage.sun.security.ssl".equals(permission.getName())) {, +            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {, +                if ("com.amazonaws.http.conn.ssl.SdkTLSSocketFactory".equals(element.getClassName()) &&, +                      "verifyMasterSecret".equals(element.getMethodName())) {, +                    // we found the horrible method: the hack begins!, +                    // force the aws code to back down, by throwing an exception that it catches., +                    rethrow(new IllegalAccessException("no amazon, you cannot do this."));, +                }, +            }, +        }, +, +    /**, +     * Classy puzzler to rethrow any checked exception as an unchecked one., +     */, +    private static class Rethrower<T extends Throwable> {]