[+++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +++ b/core/src/main/java/org/elasticsearch/index/store/IndexStore.java, +        return rateLimiting.getType() == StoreRateLimiting.Type.NONE ? indexStoreConfig.getNodeRateLimiter() : this.rateLimiting;, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +++ b/core/src/main/java/org/elasticsearch/index/store/IndexStore.java, +        return rateLimiting.getType() == StoreRateLimiting.Type.NONE ? indexStoreConfig.getNodeRateLimiter() : this.rateLimiting;, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateNumberOfReplicasIT.java, +        final int value = randomIntBetween(-10, -1);, +                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, value), +            assertEquals("Failed to parse value [" + value + "] for setting [index.number_of_replicas] must be >= 0", e.getMessage());, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +++ b/core/src/main/java/org/elasticsearch/index/store/IndexStore.java, +        return rateLimiting.getType() == StoreRateLimiting.Type.NONE ? indexStoreConfig.getNodeRateLimiter() : this.rateLimiting;, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateNumberOfReplicasIT.java, +        final int value = randomIntBetween(-10, -1);, +                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, value), +            assertEquals("Failed to parse value [" + value + "] for setting [index.number_of_replicas] must be >= 0", e.getMessage());, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java, +                            .put("index.fielddata.cache", "none") // this one can't, +        assertThat(indexMetaData.getSettings().get("index.fielddata.cache"), nullValue());, +        assertThat(getSettingsResponse.getSetting("test", "index.fielddata.cache"), nullValue());, +                        .put("index.fielddata.cache", "none") // this one can't, +        assertThat(indexMetaData.getSettings().get("index.fielddata.cache"), equalTo("none"));, +        assertThat(getSettingsResponse.getSetting("test", "index.fielddata.cache"), equalTo("none"));, +            if (event.getLevel() == Level.INFO && message.contains("update [index.merge.scheduler.max_thread_count] from [10000] to [1]")) {, +            if (event.getLevel() == Level.INFO && message.contains("update [index.merge.scheduler.auto_throttle] from [true] to [false]")) {, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +++ b/core/src/main/java/org/elasticsearch/index/store/IndexStore.java, +        return rateLimiting.getType() == StoreRateLimiting.Type.NONE ? indexStoreConfig.getNodeRateLimiter() : this.rateLimiting;, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateNumberOfReplicasIT.java, +        final int value = randomIntBetween(-10, -1);, +                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, value), +            assertEquals("Failed to parse value [" + value + "] for setting [index.number_of_replicas] must be >= 0", e.getMessage());, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java, +                            .put("index.fielddata.cache", "none") // this one can't, +        assertThat(indexMetaData.getSettings().get("index.fielddata.cache"), nullValue());, +        assertThat(getSettingsResponse.getSetting("test", "index.fielddata.cache"), nullValue());, +                        .put("index.fielddata.cache", "none") // this one can't, +        assertThat(indexMetaData.getSettings().get("index.fielddata.cache"), equalTo("none"));, +        assertThat(getSettingsResponse.getSetting("test", "index.fielddata.cache"), equalTo("none"));, +            if (event.getLevel() == Level.INFO && message.contains("update [index.merge.scheduler.max_thread_count] from [10000] to [1]")) {, +            if (event.getLevel() == Level.INFO && message.contains("update [index.merge.scheduler.auto_throttle] from [true] to [false]")) {, +++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorAggregationsIT.java, +        assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1)), +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +++ b/core/src/main/java/org/elasticsearch/index/store/IndexStore.java, +        return rateLimiting.getType() == StoreRateLimiting.Type.NONE ? indexStoreConfig.getNodeRateLimiter() : this.rateLimiting;, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateNumberOfReplicasIT.java, +        final int value = randomIntBetween(-10, -1);, +                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, value), +            assertEquals("Failed to parse value [" + value + "] for setting [index.number_of_replicas] must be >= 0", e.getMessage());, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java, +                            .put("index.fielddata.cache", "none") // this one can't, +        assertThat(indexMetaData.getSettings().get("index.fielddata.cache"), nullValue());, +        assertThat(getSettingsResponse.getSetting("test", "index.fielddata.cache"), nullValue());, +                        .put("index.fielddata.cache", "none") // this one can't, +        assertThat(indexMetaData.getSettings().get("index.fielddata.cache"), equalTo("none"));, +        assertThat(getSettingsResponse.getSetting("test", "index.fielddata.cache"), equalTo("none"));, +            if (event.getLevel() == Level.INFO && message.contains("update [index.merge.scheduler.max_thread_count] from [10000] to [1]")) {, +            if (event.getLevel() == Level.INFO && message.contains("update [index.merge.scheduler.auto_throttle] from [true] to [false]")) {, +++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorAggregationsIT.java, +        assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards", 1)), +++ /dev/null]