[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/scheduler/ScheduledJob.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    private AtomicBoolean running = new AtomicBoolean(true);, +    /**, +     * Stops the scheduled job, +     *, +     * @return <code>true</code> when the scheduler was running and this method invocation stopped it,, +     *         otherwise <code>false</code> is returned, +     */, +    public boolean stop() {, +        if (running.compareAndSet(true, false)) {, +            return true;, +        } else {, +            return false;, +        }, +        return running.get();, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/scheduler/ScheduledJob.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    private AtomicBoolean running = new AtomicBoolean(true);, +    /**, +     * Stops the scheduled job, +     *, +     * @return <code>true</code> when the scheduler was running and this method invocation stopped it,, +     *         otherwise <code>false</code> is returned, +     */, +    public boolean stop() {, +        if (running.compareAndSet(true, false)) {, +            return true;, +        } else {, +            return false;, +        }, +        return running.get();, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/scheduler/ScheduledJobRunner.java, +            logger.info("attempt to stop scheduler [{}] for job [{}]", scheduler.getId(), scheduler.getJobId());, +            if (scheduledJob.stop()) {, +                logger.info("scheduler [{}] for job [{}] has been stopped", scheduler.getId(), scheduler.getJobId());, +            } else {, +                logger.info("scheduler [{}] for job [{}] was already stopped", scheduler.getId(), scheduler.getJobId());, +            }]