[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    public List<MutableShardRouting> shardsWithState(String index, ShardRoutingState... states) {, +        List<MutableShardRouting> shards = newArrayList();, +        for (MutableShardRouting shardEntry : this) {, +            if (!shardEntry.index().equals(index)) {, +                continue;, +            }, +            for (ShardRoutingState state : states) {, +                if (shardEntry.state() == state) {, +                    shards.add(shardEntry);, +                }, +            }, +        }, +        return shards;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    public List<MutableShardRouting> shardsWithState(String index, ShardRoutingState... states) {, +        List<MutableShardRouting> shards = newArrayList();, +        for (MutableShardRouting shardEntry : this) {, +            if (!shardEntry.index().equals(index)) {, +                continue;, +            }, +            for (ShardRoutingState state : states) {, +                if (shardEntry.state() == state) {, +                    shards.add(shardEntry);, +                }, +            }, +        }, +        return shards;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public List<MutableShardRouting> shardsWithState(String index, ShardRoutingState... state) {, +        List<MutableShardRouting> shards = newArrayList();, +        for (RoutingNode routingNode : this) {, +            shards.addAll(routingNode.shardsWithState(index, state));, +        }, +        return shards;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    public List<MutableShardRouting> shardsWithState(String index, ShardRoutingState... states) {, +        List<MutableShardRouting> shards = newArrayList();, +        for (MutableShardRouting shardEntry : this) {, +            if (!shardEntry.index().equals(index)) {, +                continue;, +            }, +            for (ShardRoutingState state : states) {, +                if (shardEntry.state() == state) {, +                    shards.add(shardEntry);, +                }, +            }, +        }, +        return shards;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public List<MutableShardRouting> shardsWithState(String index, ShardRoutingState... state) {, +        List<MutableShardRouting> shards = newArrayList();, +        for (RoutingNode routingNode : this) {, +            shards.addAll(routingNode.shardsWithState(index, state));, +        }, +        return shards;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceNodeAllocation.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.routing.allocation;, +, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +, +public class ClusterRebalanceNodeAllocation extends NodeAllocation {, +, +    public static enum ClusterRebalanceType {, +        ALWAYS,, +        INDICES_PRIMARIES_ACTIVE,, +        INDICES_ALL_ACTIVE]