[+++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING,, +++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING,, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +     * Controls the maximum length of time since a retention lease is created or renewed before it is considered expired., +     */, +    public static final Setting<TimeValue> INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING =, +            Setting.timeSetting(, +                    "index.soft_deletes.retention.lease",, +                    TimeValue.timeValueHours(12),, +                    TimeValue.ZERO,, +                    Property.Dynamic,, +                    Property.IndexScope);, +, +    /**, +, +    private volatile long retentionLeaseMillis;, +, +    /**, +     * The maximum age of a retention lease before it is considered expired., +     *, +     * @return the maximum age, +     */, +    public long getRetentionLeaseMillis() {, +        return retentionLeaseMillis;, +    }, +, +        retentionLeaseMillis = scopedSettings.get(INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING).millis();, +++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING,, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +     * Controls the maximum length of time since a retention lease is created or renewed before it is considered expired., +     */, +    public static final Setting<TimeValue> INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING =, +            Setting.timeSetting(, +                    "index.soft_deletes.retention.lease",, +                    TimeValue.timeValueHours(12),, +                    TimeValue.ZERO,, +                    Property.Dynamic,, +                    Property.IndexScope);, +, +    /**, +, +    private volatile long retentionLeaseMillis;, +, +    /**, +     * The maximum age of a retention lease before it is considered expired., +     *, +     * @return the maximum age, +     */, +    public long getRetentionLeaseMillis() {, +        return retentionLeaseMillis;, +    }, +, +        retentionLeaseMillis = scopedSettings.get(INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING).millis();, +++ b/server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java, +     * A supplier of the current time. This supplier is used to add a timestamp to retention leases, and to determine retention lease, +     * expiration., +     */, +    private final LongSupplier currentTimeMillisSupplier;, +, +    /**, +     * Get all non-expired retention leases tracker on this shard. An unmodifiable copy of the retention leases is returned., +        final long currentTimeMillis = currentTimeMillisSupplier.getAsLong();, +        final long retentionLeaseMillis = indexSettings.getRetentionLeaseMillis();, +        final Collection<RetentionLease> nonExpiredRetentionLeases = retentionLeases, +                .values(), +                .stream(), +                .filter(retentionLease -> currentTimeMillis - retentionLease.timestamp() <= retentionLeaseMillis), +                .collect(Collectors.toList());, +        retentionLeases.clear();, +        retentionLeases.putAll(nonExpiredRetentionLeases.stream().collect(Collectors.toMap(RetentionLease::id, lease -> lease)));, +        return Collections.unmodifiableCollection(nonExpiredRetentionLeases);, +        retentionLeases.put(id, new RetentionLease(id, retainingSequenceNumber, currentTimeMillisSupplier.getAsLong(), source));, +            final LongConsumer onGlobalCheckpointUpdated,, +            final LongSupplier currentTimeMillisSupplier) {, +        this.currentTimeMillisSupplier = Objects.requireNonNull(currentTimeMillisSupplier);, +++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING,, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +     * Controls the maximum length of time since a retention lease is created or renewed before it is considered expired., +     */, +    public static final Setting<TimeValue> INDEX_SOFT_DELETES_RETENTION_LEASE_SETTING =, +            Setting.timeSetting(, +                    "index.soft_deletes.retention.lease",, +                    TimeValue.timeValueHours(12),, +                    TimeValue.ZERO,, +                    Property.Dynamic,, +                    Property.IndexScope);, +, +    /**, +, +    private volatile long retentionLeaseMillis;, +, +    /**, +     * The maximum age of a retention lease before it is considered expired., +     *, +     * @return the maximum age, +     */]