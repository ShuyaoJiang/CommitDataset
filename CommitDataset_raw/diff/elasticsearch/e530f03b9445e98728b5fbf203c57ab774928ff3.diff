[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +            final String[] nodesIds = state.nodes().resolveNodesIds(request.nodesIds);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +            final String[] nodesIds = state.nodes().resolveNodesIds(request.nodesIds);, +++ b/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +            String[] nodesIds = clusterState.nodes().resolveNodesIds(request.nodesIds());, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +            final String[] nodesIds = state.nodes().resolveNodesIds(request.nodesIds);, +++ b/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +            String[] nodesIds = clusterState.nodes().resolveNodesIds(request.nodesIds());, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +    public DiscoveryNode resolveNode(String node) {, +        String[] resolvedNodeIds = resolveNodesIds(node);, +        if (resolvedNodeIds.length > 1) {, +            throw new ElasticSearchIllegalArgumentException("resolved [" + node + "] into [" + resolvedNodeIds.length + "] nodes, where expected to be resolved to a single node");, +        }, +        if (resolvedNodeIds.length == 0) {, +            throw new ElasticSearchIllegalArgumentException("failed to resolve [" + node + " ], no matching nodes");, +        }, +        return nodes.get(resolvedNodeIds[0]);, +    }, +, +    public String[] resolveNodesIds(String... nodesIds) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +            final String[] nodesIds = state.nodes().resolveNodesIds(request.nodesIds);, +++ b/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +            String[] nodesIds = clusterState.nodes().resolveNodesIds(request.nodesIds());, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +    public DiscoveryNode resolveNode(String node) {, +        String[] resolvedNodeIds = resolveNodesIds(node);, +        if (resolvedNodeIds.length > 1) {, +            throw new ElasticSearchIllegalArgumentException("resolved [" + node + "] into [" + resolvedNodeIds.length + "] nodes, where expected to be resolved to a single node");, +        }, +        if (resolvedNodeIds.length == 0) {, +            throw new ElasticSearchIllegalArgumentException("failed to resolve [" + node + " ], no matching nodes");, +        }, +        return nodes.get(resolvedNodeIds[0]);, +    }, +, +    public String[] resolveNodesIds(String... nodesIds) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +        // we check on instanceof so we also handle the MutableShardRouting case as well, +        if (o == null || !(o instanceof ImmutableShardRouting)) return false;, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +            final String[] nodesIds = state.nodes().resolveNodesIds(request.nodesIds);, +++ b/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +            String[] nodesIds = clusterState.nodes().resolveNodesIds(request.nodesIds());, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +    public DiscoveryNode resolveNode(String node) {, +        String[] resolvedNodeIds = resolveNodesIds(node);, +        if (resolvedNodeIds.length > 1) {, +            throw new ElasticSearchIllegalArgumentException("resolved [" + node + "] into [" + resolvedNodeIds.length + "] nodes, where expected to be resolved to a single node");, +        }, +        if (resolvedNodeIds.length == 0) {, +            throw new ElasticSearchIllegalArgumentException("failed to resolve [" + node + " ], no matching nodes");, +        }, +        return nodes.get(resolvedNodeIds[0]);, +    }, +, +    public String[] resolveNodesIds(String... nodesIds) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +        // we check on instanceof so we also handle the MutableShardRouting case as well, +        if (o == null || !(o instanceof ImmutableShardRouting)) return false;, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import java.util.*;, +        // fill in the nodeToShards with the "live" nodes, +        for (DiscoveryNode node : clusterState.nodes().dataNodes().values()) {, +            nodesToShards.put(node.id(), new ArrayList<MutableShardRouting>());, +        }, +, +        // fill in the inverse of node -> shards allocated, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +            final String[] nodesIds = state.nodes().resolveNodesIds(request.nodesIds);, +++ b/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +            String[] nodesIds = clusterState.nodes().resolveNodesIds(request.nodesIds());, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +    public DiscoveryNode resolveNode(String node) {, +        String[] resolvedNodeIds = resolveNodesIds(node);, +        if (resolvedNodeIds.length > 1) {, +            throw new ElasticSearchIllegalArgumentException("resolved [" + node + "] into [" + resolvedNodeIds.length + "] nodes, where expected to be resolved to a single node");, +        }, +        if (resolvedNodeIds.length == 0) {, +            throw new ElasticSearchIllegalArgumentException("failed to resolve [" + node + " ], no matching nodes");, +        }, +        return nodes.get(resolvedNodeIds[0]);, +    }, +, +    public String[] resolveNodesIds(String... nodesIds) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +        // we check on instanceof so we also handle the MutableShardRouting case as well, +        if (o == null || !(o instanceof ImmutableShardRouting)) return false;, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import java.util.*;, +        // fill in the nodeToShards with the "live" nodes]