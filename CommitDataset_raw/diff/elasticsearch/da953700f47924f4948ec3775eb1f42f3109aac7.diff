[+++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +     * @param aggregationsList  A list of aggregation to reduce, +        // first we collect all aggregations of the same type and list them together, +    /**, +     * Reduces this aggregations, effectively propagates the reduce to all the sub aggregations, +     * @param cacheRecycler, +     */, +    public void reduce(CacheRecycler cacheRecycler) {, +        for (int i = 0; i < aggregations.size(); i++) {, +            InternalAggregation aggregation = aggregations.get(i);, +            aggregations.set(i, aggregation.reduce(new InternalAggregation.ReduceContext(ImmutableList.of(aggregation), cacheRecycler)));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +     * @param aggregationsList  A list of aggregation to reduce, +        // first we collect all aggregations of the same type and list them together, +    /**, +     * Reduces this aggregations, effectively propagates the reduce to all the sub aggregations, +     * @param cacheRecycler, +     */, +    public void reduce(CacheRecycler cacheRecycler) {, +        for (int i = 0; i < aggregations.size(); i++) {, +            InternalAggregation aggregation = aggregations.get(i);, +            aggregations.set(i, aggregation.reduce(new InternalAggregation.ReduceContext(ImmutableList.of(aggregation), cacheRecycler)));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/SingleBucketAggregation.java, +            B reduced = ((B) aggregations.get(0));, +            reduced.aggregations.reduce(reduceContext.cacheRecycler());, +            return reduced;, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +     * @param aggregationsList  A list of aggregation to reduce, +        // first we collect all aggregations of the same type and list them together, +    /**, +     * Reduces this aggregations, effectively propagates the reduce to all the sub aggregations, +     * @param cacheRecycler, +     */, +    public void reduce(CacheRecycler cacheRecycler) {, +        for (int i = 0; i < aggregations.size(); i++) {, +            InternalAggregation aggregation = aggregations.get(i);, +            aggregations.set(i, aggregation.reduce(new InternalAggregation.ReduceContext(ImmutableList.of(aggregation), cacheRecycler)));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/SingleBucketAggregation.java, +            B reduced = ((B) aggregations.get(0));, +            reduced.aggregations.reduce(reduceContext.cacheRecycler());, +            return reduced;, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridBuilder.java, +        if ((precision < 1) || (precision > 12)) {, +, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +     * @param aggregationsList  A list of aggregation to reduce, +        // first we collect all aggregations of the same type and list them together, +    /**, +     * Reduces this aggregations, effectively propagates the reduce to all the sub aggregations, +     * @param cacheRecycler, +     */, +    public void reduce(CacheRecycler cacheRecycler) {, +        for (int i = 0; i < aggregations.size(); i++) {, +            InternalAggregation aggregation = aggregations.get(i);, +            aggregations.set(i, aggregation.reduce(new InternalAggregation.ReduceContext(ImmutableList.of(aggregation), cacheRecycler)));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/SingleBucketAggregation.java, +            B reduced = ((B) aggregations.get(0));, +            reduced.aggregations.reduce(reduceContext.cacheRecycler());, +            return reduced;, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridBuilder.java, +        if ((precision < 1) || (precision > 12)) {, +, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/InternalGeoHashGrid.java, +                // we still need to reduce the sub aggs, +                Bucket bucket = buckets.get(0);, +                bucket.aggregations.reduce(cacheRecycler);, +                return bucket;, +            grid.trimExcessEntries(reduceContext.cacheRecycler());, +    protected void trimExcessEntries(CacheRecycler cacheRecycler) {, +            Bucket bucket = iter.next();, +            } else {, +                bucket.aggregations.reduce(cacheRecycler);, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +     * @param aggregationsList  A list of aggregation to reduce, +        // first we collect all aggregations of the same type and list them together, +    /**, +     * Reduces this aggregations, effectively propagates the reduce to all the sub aggregations, +     * @param cacheRecycler, +     */, +    public void reduce(CacheRecycler cacheRecycler) {, +        for (int i = 0; i < aggregations.size(); i++) {, +            InternalAggregation aggregation = aggregations.get(i);, +            aggregations.set(i, aggregation.reduce(new InternalAggregation.ReduceContext(ImmutableList.of(aggregation), cacheRecycler)));, +        }, +    }, +]