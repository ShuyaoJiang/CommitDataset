[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.applyDynamicSettings(transientToApply, transientSettings, transientUpdates, "transient");, +        changed |= clusterSettings.applyDynamicSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent");, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.applyDynamicSettings(transientToApply, transientSettings, transientUpdates, "transient");, +        changed |= clusterSettings.applyDynamicSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent");, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.applyDynamicSettings(transientToApply, transientSettings, transientUpdates, "transient");, +        changed |= clusterSettings.applyDynamicSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent");, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final Setting<Long> INDEX_CREATION_DATE_SETTING = Setting.longSetting(SETTING_CREATION_DATE, -1, -1, false, Setting.Scope.INDEX);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.applyDynamicSettings(transientToApply, transientSettings, transientUpdates, "transient");, +        changed |= clusterSettings.applyDynamicSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent");, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final Setting<Long> INDEX_CREATION_DATE_SETTING = Setting.longSetting(SETTING_CREATION_DATE, -1, -1, false, Setting.Scope.INDEX);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        for (Map.Entry<String, String> entry : updatedSettingsBuilder.internalMap().entrySet()) {, +            indexScopeSettings.validate(entry.getKey(), entry.getValue());, +        }, +        //norelease - this can be removed?, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.applyDynamicSettings(transientToApply, transientSettings, transientUpdates, "transient");, +        changed |= clusterSettings.applyDynamicSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent");, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final Setting<Long> INDEX_CREATION_DATE_SETTING = Setting.longSetting(SETTING_CREATION_DATE, -1, -1, false, Setting.Scope.INDEX);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        for (Map.Entry<String, String> entry : updatedSettingsBuilder.internalMap().entrySet()) {, +            indexScopeSettings.validate(entry.getKey(), entry.getValue());, +        }, +        //norelease - this can be removed?, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +import org.elasticsearch.common.settings.Setting;, +    private final IndexScopeSettings indexScopeSettings;, +    public MetaDataUpdateSettingsService(Settings settings, ClusterService clusterService, AllocationService allocationService, IndexScopeSettings indexScopeSettings, IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.indexScopeSettings = indexScopeSettings;, +        Settings.Builder settingsForClosedIndices = Settings.builder();, +        Settings.Builder settingsForOpenIndices = Settings.builder();, +        Settings.Builder skipppedSettings = Settings.builder();, +, +, +        for (Map.Entry<String, String> entry : updatedSettingsBuilder.internalMap().entrySet()) {, +            if (entry.getKey().equals(IndexMetaData.SETTING_NUMBER_OF_SHARDS)) {, +            Setting setting = indexScopeSettings.get(entry.getKey());, +            if (setting == null) {, +                throw new IllegalArgumentException("setting [" + entry.getKey() + "] is unknown");, +            indexScopeSettings.validate(entry.getKey(), entry.getValue());, +            settingsForClosedIndices.put(entry.getKey(), entry.getValue());, +            if (setting.isDynamic()) {, +                settingsForOpenIndices.put(entry.getKey(), entry.getValue());, +                skipppedSettings.put(entry.getKey(), entry.getValue());, +        final Settings skippedSettigns = skipppedSettings.build();, +        final Settings closedSettings = settingsForClosedIndices.build();, +        final Settings openSettings = settingsForOpenIndices.build();, +                if (closeIndices.size() > 0 && closedSettings.get(IndexMetaData.SETTING_NUMBER_OF_REPLICAS) != null) {, +                if (!skippedSettigns.getAsMap().isEmpty() && !openIndices.isEmpty()) {, +                            skippedSettigns.getAsMap().keySet(),, +                    metaDataBuilder.updateSettings(closedSettings, indices);, +                for (String index : openIndices) {, +                    indexScopeSettings.dryRun(updatedState.metaData().index(index).getSettings());, +                }, +                for (String index : closeIndices) {, +                    indexScopeSettings.dryRun(updatedState.metaData().index(index).getSettings());, +                }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.applyDynamicSettings(transientToApply, transientSettings, transientUpdates, "transient");, +        changed |= clusterSettings.applyDynamicSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent");, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final Setting<Long> INDEX_CREATION_DATE_SETTING = Setting.longSetting(SETTING_CREATION_DATE, -1, -1, false, Setting.Scope.INDEX);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        for (Map.Entry<String, String> entry : updatedSettingsBuilder.internalMap().entrySet()) {, +            indexScopeSettings.validate(entry.getKey(), entry.getValue());, +        }, +        //norelease - this can be removed?, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +import org.elasticsearch.common.settings.Setting;, +    private final IndexScopeSettings indexScopeSettings;, +    public MetaDataUpdateSettingsService(Settings settings, ClusterService clusterService, AllocationService allocationService, IndexScopeSettings indexScopeSettings, IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.indexScopeSettings = indexScopeSettings;, +        Settings.Builder settingsForClosedIndices = Settings.builder();, +        Settings.Builder settingsForOpenIndices = Settings.builder();, +        Settings.Builder skipppedSettings = Settings.builder();, +, +, +        for (Map.Entry<String, String> entry : updatedSettingsBuilder.internalMap().entrySet()) {, +            if (entry.getKey().equals(IndexMetaData.SETTING_NUMBER_OF_SHARDS)) {, +            Setting setting = indexScopeSettings.get(entry.getKey());, +            if (setting == null) {, +                throw new IllegalArgumentException("setting [" + entry.getKey() + "] is unknown");, +            indexScopeSettings.validate(entry.getKey(), entry.getValue());, +            settingsForClosedIndices.put(entry.getKey(), entry.getValue());, +            if (setting.isDynamic()) {]