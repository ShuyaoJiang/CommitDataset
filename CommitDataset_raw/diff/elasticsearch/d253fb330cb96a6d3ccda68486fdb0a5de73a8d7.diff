[+++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +        ZonedDateTime now = ZonedDateTime.now(Clock.tick(Clock.system(ZoneId.of("Z")), Duration.ofMillis(1)));, +        assertEquals(now.toInstant().toEpochMilli(), ((Timestamp) convertAsNative(now, EsType.DATETIME)).getTime());, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +        ZonedDateTime now = ZonedDateTime.now(Clock.tick(Clock.system(ZoneId.of("Z")), Duration.ofMillis(1)));, +        assertEquals(now.toInstant().toEpochMilli(), ((Timestamp) convertAsNative(now, EsType.DATETIME)).getTime());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/extractor/FieldHitExtractor.java, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +        ZonedDateTime now = ZonedDateTime.now(Clock.tick(Clock.system(ZoneId.of("Z")), Duration.ofMillis(1)));, +        assertEquals(now.toInstant().toEpochMilli(), ((Timestamp) convertAsNative(now, EsType.DATETIME)).getTime());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/extractor/FieldHitExtractor.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +import java.time.LocalTime;, +import java.time.format.DateTimeParseException;, +import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;, +import static org.elasticsearch.xpack.sql.util.DateUtils.asDateOnly;, +import static org.elasticsearch.xpack.sql.util.DateUtils.ofEscapedLiteral;, +            return new Literal(source, asDateOnly(string), DataType.DATE);, +        } catch(DateTimeParseException ex) {, +        LocalTime lt = null;, +            lt = LocalTime.parse(string, ISO_LOCAL_TIME);, +        } catch (DateTimeParseException ex) {, +            return new Literal(source, ofEscapedLiteral(string), DataType.DATETIME);, +        } catch (DateTimeParseException ex) {, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +        ZonedDateTime now = ZonedDateTime.now(Clock.tick(Clock.system(ZoneId.of("Z")), Duration.ofMillis(1)));, +        assertEquals(now.toInstant().toEpochMilli(), ((Timestamp) convertAsNative(now, EsType.DATETIME)).getTime());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/extractor/FieldHitExtractor.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +import java.time.LocalTime;, +import java.time.format.DateTimeParseException;, +import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;, +import static org.elasticsearch.xpack.sql.util.DateUtils.asDateOnly;, +import static org.elasticsearch.xpack.sql.util.DateUtils.ofEscapedLiteral;, +            return new Literal(source, asDateOnly(string), DataType.DATE);, +        } catch(DateTimeParseException ex) {, +        LocalTime lt = null;, +            lt = LocalTime.parse(string, ISO_LOCAL_TIME);, +        } catch (DateTimeParseException ex) {, +            return new Literal(source, ofEscapedLiteral(string), DataType.DATETIME);, +        } catch (DateTimeParseException ex) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataTypeConversion.java, +import java.time.format.DateTimeParseException;, +                } catch (DateTimeParseException | IllegalArgumentException e) {, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +        ZonedDateTime now = ZonedDateTime.now(Clock.tick(Clock.system(ZoneId.of("Z")), Duration.ofMillis(1)));, +        assertEquals(now.toInstant().toEpochMilli(), ((Timestamp) convertAsNative(now, EsType.DATETIME)).getTime());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/extractor/FieldHitExtractor.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +import java.time.LocalTime;, +import java.time.format.DateTimeParseException;, +import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;, +import static org.elasticsearch.xpack.sql.util.DateUtils.asDateOnly;, +import static org.elasticsearch.xpack.sql.util.DateUtils.ofEscapedLiteral;, +            return new Literal(source, asDateOnly(string), DataType.DATE);, +        } catch(DateTimeParseException ex) {, +        LocalTime lt = null;, +            lt = LocalTime.parse(string, ISO_LOCAL_TIME);, +        } catch (DateTimeParseException ex) {, +            return new Literal(source, ofEscapedLiteral(string), DataType.DATETIME);, +        } catch (DateTimeParseException ex) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataTypeConversion.java, +import java.time.format.DateTimeParseException;, +                } catch (DateTimeParseException | IllegalArgumentException e) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java, +import org.elasticsearch.common.time.DateFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.LocalDate;, +import java.time.format.DateTimeFormatter;, +import java.time.format.DateTimeFormatterBuilder;, +import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;, +    private static final DateTimeFormatter DATE_TIME_ESCAPED_LITERAL_FORMATTER = new DateTimeFormatterBuilder(), +        .append(ISO_LOCAL_DATE), +        .appendLiteral(" "), +        .append(ISO_LOCAL_TIME), +        .toFormatter().withZone(UTC);, +, +    private static final DateFormatter UTC_DATE_TIME_FORMATTER = DateFormatter.forPattern("date_optional_time").withZone(UTC);, +, +    private static final long DAY_IN_MILLIS = 60 * 60 * 24 * 1000L;]