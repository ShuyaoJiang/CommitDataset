[+++ b/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +    public boolean isCacheable() {, +        // a hack for now :) to determine if a query string is cacheable, +        return !queryString.contains("now");, +    }, +, +++ b/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +    public boolean isCacheable() {, +        // a hack for now :) to determine if a query string is cacheable, +        return !queryString.contains("now");, +    }, +, +++ b/src/main/java/org/elasticsearch/index/cache/query/parser/QueryParserCache.java, + * The main benefit of the query parser cache is to not parse the same query string on different shards., + * Less about long running query strings., +++ b/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +    public boolean isCacheable() {, +        // a hack for now :) to determine if a query string is cacheable, +        return !queryString.contains("now");, +    }, +, +++ b/src/main/java/org/elasticsearch/index/cache/query/parser/QueryParserCache.java, + * The main benefit of the query parser cache is to not parse the same query string on different shards., + * Less about long running query strings., +++ b/src/main/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCache.java, +        if (queryString.isCacheable()) {, +    }, +++ b/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +    public boolean isCacheable() {, +        // a hack for now :) to determine if a query string is cacheable, +        return !queryString.contains("now");, +    }, +, +++ b/src/main/java/org/elasticsearch/index/cache/query/parser/QueryParserCache.java, + * The main benefit of the query parser cache is to not parse the same query string on different shards., + * Less about long running query strings., +++ b/src/main/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCache.java, +        if (queryString.isCacheable()) {, +    }, +++ /dev/null]