[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.XContentThrowableRestResponse;, +import org.elasticsearch.util.guice.inject.Inject;, +                                channel.sendResponse(new XContentThrowableRestResponse(request, e));, +                        channel.sendResponse(new XContentThrowableRestResponse(request, e));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.XContentThrowableRestResponse;, +import org.elasticsearch.util.guice.inject.Inject;, +                                channel.sendResponse(new XContentThrowableRestResponse(request, e));, +                        channel.sendResponse(new XContentThrowableRestResponse(request, e));, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.XContentThrowableRestResponse;, +import org.elasticsearch.util.guice.inject.Inject;, +                                channel.sendResponse(new XContentThrowableRestResponse(request, e));, +                        channel.sendResponse(new XContentThrowableRestResponse(request, e));, +++ /dev/null, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.XContentThrowableRestResponse;, +import org.elasticsearch.util.guice.inject.Inject;, +                                channel.sendResponse(new XContentThrowableRestResponse(request, e));, +                        channel.sendResponse(new XContentThrowableRestResponse(request, e));, +++ /dev/null, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/RestController.java, +                channel.sendResponse(new XContentThrowableRestResponse(request, e));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.XContentThrowableRestResponse;, +import org.elasticsearch.util.guice.inject.Inject;, +                                channel.sendResponse(new XContentThrowableRestResponse(request, e));, +                        channel.sendResponse(new XContentThrowableRestResponse(request, e));, +++ /dev/null, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/RestController.java, +                channel.sendResponse(new XContentThrowableRestResponse(request, e));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/XContentRestResponse.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest;, +, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.util.ThreadLocals;, +import org.elasticsearch.util.xcontent.builder.XContentBuilder;, +, +import java.io.IOException;, +, +/**, + * @author kimchy (shay.banon), + */, +public class XContentRestResponse extends AbstractRestResponse {, +, +    private static final byte[] END_JSONP;, +, +    static {, +        UnicodeUtil.UTF8Result U_END_JSONP = new UnicodeUtil.UTF8Result();, +        UnicodeUtil.UTF16toUTF8(");", 0, ");".length(), U_END_JSONP);, +        END_JSONP = new byte[U_END_JSONP.length];, +        System.arraycopy(U_END_JSONP.result, 0, END_JSONP, 0, U_END_JSONP.length);, +    }, +, +    private static ThreadLocal<ThreadLocals.CleanableValue<UnicodeUtil.UTF8Result>> prefixCache = new ThreadLocal<ThreadLocals.CleanableValue<UnicodeUtil.UTF8Result>>() {, +        @Override protected ThreadLocals.CleanableValue<UnicodeUtil.UTF8Result> initialValue() {, +            return new ThreadLocals.CleanableValue<UnicodeUtil.UTF8Result>(new UnicodeUtil.UTF8Result());, +        }, +    };, +, +    private final UnicodeUtil.UTF8Result prefixUtf8Result;, +, +    private final Status status;, +, +    private final XContentBuilder builder;, +, +    public XContentRestResponse(RestRequest request, Status status) {, +        this.builder = null;, +        this.status = status;, +        this.prefixUtf8Result = startJsonp(request);, +    }, +, +    public XContentRestResponse(RestRequest request, Status status, XContentBuilder builder) throws IOException {, +        this.builder = builder;, +        this.status = status;, +        this.prefixUtf8Result = startJsonp(request);]