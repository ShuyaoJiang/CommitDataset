[+++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +     * Creates a new IdsQueryBuilder without providing the types of the documents to look for, +    public IdsQueryBuilder() {, +        this.types = new String[0];, +    }, +, +    /**, +     * Creates a new IdsQueryBuilder by providing the types of the documents to look for, +     */, +    public IdsQueryBuilder(String... types) {, +        if (types == null) {, +            throw new IllegalArgumentException("[ids] types cannot be null");, +        }, +        if (ids == null) {, +            throw new IllegalArgumentException("[ids] ids cannot be null");, +        }, +            if (types.length == 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +     * Creates a new IdsQueryBuilder without providing the types of the documents to look for, +    public IdsQueryBuilder() {, +        this.types = new String[0];, +    }, +, +    /**, +     * Creates a new IdsQueryBuilder by providing the types of the documents to look for, +     */, +    public IdsQueryBuilder(String... types) {, +        if (types == null) {, +            throw new IllegalArgumentException("[ids] types cannot be null");, +        }, +        if (ids == null) {, +            throw new IllegalArgumentException("[ids] ids cannot be null");, +        }, +            if (types.length == 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +            Query query = parseInnerQuery(context);, +    public Query parseInnerQuery(QueryShardContext context) throws IOException {, +        return toQuery(context.parseContext().parseInnerQueryBuilder(), context);, +            }, +, +    public ParsedQuery toQuery(QueryBuilder<?> queryBuilder) {, +        QueryShardContext context = cache.get();, +        context.reset();, +        context.parseFieldMatcher(parseFieldMatcher);, +        try {, +            Query query = toQuery(queryBuilder, context);, +            return new ParsedQuery(query, context.copyNamedQueries());, +        } catch(QueryShardException | ParsingException e ) {, +            throw e;, +        } catch(Exception e) {, +            throw new QueryShardException(context, "failed to create query: {}", e, queryBuilder);, +        } finally {, +            context.reset();, +        }, +    }, +, +    private static Query toQuery(QueryBuilder<?> queryBuilder, QueryShardContext context) throws IOException {, +        Query query = queryBuilder.toQuery(context);, +        if (query == null) {, +            query = Queries.newMatchNoDocsQuery();, +        }, +        return query;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +     * Creates a new IdsQueryBuilder without providing the types of the documents to look for, +    public IdsQueryBuilder() {, +        this.types = new String[0];, +    }, +, +    /**, +     * Creates a new IdsQueryBuilder by providing the types of the documents to look for, +     */, +    public IdsQueryBuilder(String... types) {, +        if (types == null) {, +            throw new IllegalArgumentException("[ids] types cannot be null");, +        }, +        if (ids == null) {, +            throw new IllegalArgumentException("[ids] ids cannot be null");, +        }, +            if (types.length == 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +            Query query = parseInnerQuery(context);, +    public Query parseInnerQuery(QueryShardContext context) throws IOException {, +        return toQuery(context.parseContext().parseInnerQueryBuilder(), context);, +            }, +, +    public ParsedQuery toQuery(QueryBuilder<?> queryBuilder) {, +        QueryShardContext context = cache.get();, +        context.reset();, +        context.parseFieldMatcher(parseFieldMatcher);, +        try {, +            Query query = toQuery(queryBuilder, context);, +            return new ParsedQuery(query, context.copyNamedQueries());, +        } catch(QueryShardException | ParsingException e ) {, +            throw e;, +        } catch(Exception e) {, +            throw new QueryShardException(context, "failed to create query: {}", e, queryBuilder);, +        } finally {, +            context.reset();]