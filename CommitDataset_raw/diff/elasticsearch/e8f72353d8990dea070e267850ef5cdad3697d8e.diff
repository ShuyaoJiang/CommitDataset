[+++ b/core/src/main/java/org/elasticsearch/search/searchafter/SearchAfterBuilder.java, +    /**, +     * Returns the inner {@link SortField.Type} expected for this sort field., +     */, +    static SortField.Type extractSortType(SortField sortField) {, +        if (sortField.getComparatorSource() instanceof IndexFieldData.XFieldComparatorSource) {, +            return ((IndexFieldData.XFieldComparatorSource) sortField.getComparatorSource()).reducedType();, +        } else if (sortField instanceof SortedSetSortField) {, +        } else if ("LatLonPointSortField".equals(sortField.getClass().getSimpleName())) {, +            // for geo distance sorting, +            return SortField.Type.DOUBLE;, +    static Object convertValueFromSortField(Object value, SortField sortField, DocValueFormat format) {, +++ b/core/src/main/java/org/elasticsearch/search/searchafter/SearchAfterBuilder.java, +    /**, +     * Returns the inner {@link SortField.Type} expected for this sort field., +     */, +    static SortField.Type extractSortType(SortField sortField) {, +        if (sortField.getComparatorSource() instanceof IndexFieldData.XFieldComparatorSource) {, +            return ((IndexFieldData.XFieldComparatorSource) sortField.getComparatorSource()).reducedType();, +        } else if (sortField instanceof SortedSetSortField) {, +        } else if ("LatLonPointSortField".equals(sortField.getClass().getSimpleName())) {, +            // for geo distance sorting, +            return SortField.Type.DOUBLE;, +    static Object convertValueFromSortField(Object value, SortField sortField, DocValueFormat format) {, +++ b/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterBuilderTests.java, +import org.apache.lucene.document.LatLonDocValuesField;, +import org.apache.lucene.search.FieldComparator;, +import org.apache.lucene.search.SortField;, +import org.apache.lucene.search.SortedNumericSortField;, +import org.apache.lucene.search.SortedSetSortField;, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.search.MultiValueMode;, +import static org.elasticsearch.search.searchafter.SearchAfterBuilder.extractSortType;, +import static org.hamcrest.Matchers.equalTo;, +            assertThat(e.getMessage(), equalTo("Values cannot be null."));, +            assertThat(e.getMessage(), equalTo("Values must contains at least one value."));, +, +    public void testExtractSortType() throws Exception {, +        SortField.Type type = extractSortType(LatLonDocValuesField.newDistanceSort("field", 0.0, 180.0));, +        assertThat(type, equalTo(SortField.Type.DOUBLE));, +        IndexFieldData.XFieldComparatorSource source = new IndexFieldData.XFieldComparatorSource(null, MultiValueMode.MIN, null) {, +            @Override, +            public SortField.Type reducedType() {, +                return SortField.Type.STRING;, +            }, +, +            @Override, +            public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {, +                return null;, +            }, +        };, +, +        type = extractSortType(new SortField("field", source));, +        assertThat(type, equalTo(SortField.Type.STRING));, +, +        type = extractSortType(new SortedNumericSortField("field", SortField.Type.DOUBLE));, +        assertThat(type, equalTo(SortField.Type.DOUBLE));, +, +        type = extractSortType(new SortedSetSortField("field", false));, +        assertThat(type, equalTo(SortField.Type.STRING));, +    }]