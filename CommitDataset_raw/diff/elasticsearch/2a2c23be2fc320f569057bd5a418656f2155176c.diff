[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import static org.hamcrest.Matchers.contains;, +        assertThat(response.get().keySet(), contains("user"));, +        Map<String, FieldCapabilities> userResponse = response.getField("user");, +, +        assertThat(userResponse.keySet(), containsInAnyOrder("keyword", "text")); // <1>, +        assertTrue(textCapabilities.isSearchable());, +        assertFalse(textCapabilities.isAggregatable());, +        assertArrayEquals(textCapabilities.indices(), // <2>, +                          new String[]{"authors", "contributors"});, +        assertNull(textCapabilities.nonSearchableIndices()); // <3>, +        assertArrayEquals(textCapabilities.nonAggregatableIndices(), // <4>, +                          new String[]{"authors"});, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import static org.hamcrest.Matchers.contains;, +        assertThat(response.get().keySet(), contains("user"));, +        Map<String, FieldCapabilities> userResponse = response.getField("user");, +, +        assertThat(userResponse.keySet(), containsInAnyOrder("keyword", "text")); // <1>, +        assertTrue(textCapabilities.isSearchable());, +        assertFalse(textCapabilities.isAggregatable());, +        assertArrayEquals(textCapabilities.indices(), // <2>, +                          new String[]{"authors", "contributors"});, +        assertNull(textCapabilities.nonSearchableIndices()); // <3>, +        assertArrayEquals(textCapabilities.nonAggregatableIndices(), // <4>, +                          new String[]{"authors"});, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestTests.java, +    // TODO equals and hashcode, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import static org.hamcrest.Matchers.contains;, +        assertThat(response.get().keySet(), contains("user"));, +        Map<String, FieldCapabilities> userResponse = response.getField("user");, +, +        assertThat(userResponse.keySet(), containsInAnyOrder("keyword", "text")); // <1>, +        assertTrue(textCapabilities.isSearchable());, +        assertFalse(textCapabilities.isAggregatable());, +        assertArrayEquals(textCapabilities.indices(), // <2>, +                          new String[]{"authors", "contributors"});, +        assertNull(textCapabilities.nonSearchableIndices()); // <3>, +        assertArrayEquals(textCapabilities.nonAggregatableIndices(), // <4>, +                          new String[]{"authors"});, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestTests.java, +    // TODO equals and hashcode, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientTests.java, +     * @deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetParameters()}., +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import static org.hamcrest.Matchers.contains;, +        assertThat(response.get().keySet(), contains("user"));, +        Map<String, FieldCapabilities> userResponse = response.getField("user");, +, +        assertThat(userResponse.keySet(), containsInAnyOrder("keyword", "text")); // <1>, +        assertTrue(textCapabilities.isSearchable());, +        assertFalse(textCapabilities.isAggregatable());, +        assertArrayEquals(textCapabilities.indices(), // <2>, +                          new String[]{"authors", "contributors"});, +        assertNull(textCapabilities.nonSearchableIndices()); // <3>, +        assertArrayEquals(textCapabilities.nonAggregatableIndices(), // <4>, +                          new String[]{"authors"});, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestTests.java, +    // TODO equals and hashcode, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientTests.java, +     * @deprecated will remove method in 7.0 but needs tests until then. Replaced by {@link RequestTests#testSetParameters()}., +++ b/docs/CHANGELOG.asciidoc, +[[es-release-notes]], += {es} Release Notes, +, +[partintro], +--, +// To add a release, copy and paste the template text, +// and add a link to the new section. Note that release subheads must, +// be floated and sections cannot be empty., +, +// Use these for links to issue and pulls. Note issues and pulls redirect one to, +// each other on Github, so don't worry too much on using the right prefix., +:issue: https://github.com/elastic/elasticsearch/issues/, +:pull: https://github.com/elastic/elasticsearch/pull/, +, +This section summarizes the changes in each release., +, +* <<release-notes-7.0.0>>, +* <<release-notes-6.4.0>>, +* <<release-notes-6.3.1>>, +, +--, +, +////, +// To add a release, copy and paste the following text,  uncomment the relevant, +// sections, and add a link to the new section in the list of releases at the, +// top of the page. Note that release subheads must be floated and sections, +// cannot be empty., +// TEMPLATE:, +, +// [[release-notes-n.n.n]], +// == {es} n.n.n, +, +//[float], +[[breaking-n.n.n]], +//=== Breaking Changes, +, +//[float]]