[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import java.util.Objects;, +import java.util.concurrent.TimeUnit;, +import java.util.function.BiFunction;, +    private static final String LOG_MESSAGE =, +        "[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}";, +, +        scheduledFuture = threadPool.scheduleWithFixedDelay(new JvmMonitor(gcThresholds) {, +            @Override, +            void onMonitorFailure(Throwable t) {, +                logger.debug("failed to monitor", t);, +            }, +, +            @Override, +            void onSlowGc(final Threshold threshold, final long seq, final SlowGcEvent slowGcEvent) {, +                logSlowGc(logger, threshold, seq, slowGcEvent, JvmGcMonitorService::buildPools);, +            }, +        }, interval);, +    }, +, +    static void logSlowGc(, +        final ESLogger logger,, +        final JvmMonitor.Threshold threshold,, +        final long seq,, +        final JvmMonitor.SlowGcEvent slowGcEvent,, +        BiFunction<JvmStats, JvmStats, String> pools) {, +, +        final String name = slowGcEvent.currentGc.getName();, +        final long elapsed = slowGcEvent.elapsed;, +        final long totalGcCollectionCount = slowGcEvent.currentGc.getCollectionCount();, +        final long currentGcCollectionCount = slowGcEvent.collectionCount;, +        final TimeValue totalGcCollectionTime = slowGcEvent.currentGc.getCollectionTime();, +        final TimeValue currentGcCollectionTime = slowGcEvent.collectionTime;, +        final JvmStats lastJvmStats = slowGcEvent.lastJvmStats;, +        final JvmStats currentJvmStats = slowGcEvent.currentJvmStats;, +        final ByteSizeValue maxHeapUsed = slowGcEvent.maxHeapUsed;, +, +        switch (threshold) {, +            case WARN:, +                if (logger.isWarnEnabled()) {, +                    logger.warn(, +                        LOG_MESSAGE,, +                        name,, +                        seq,, +                        totalGcCollectionCount,, +                        currentGcCollectionTime,, +                        currentGcCollectionCount,, +                        TimeValue.timeValueMillis(elapsed),, +                        currentGcCollectionTime,, +                        totalGcCollectionTime,, +                        lastJvmStats.getMem().getHeapUsed(),, +                        currentJvmStats.getMem().getHeapUsed(),, +                        maxHeapUsed,, +                        pools.apply(lastJvmStats, currentJvmStats));, +                }, +                break;, +            case INFO:, +                if (logger.isInfoEnabled()) {, +                    logger.info(, +                        LOG_MESSAGE,, +                        name,, +                        seq,, +                        totalGcCollectionCount,, +                        currentGcCollectionTime,, +                        currentGcCollectionCount,, +                        TimeValue.timeValueMillis(elapsed),, +                        currentGcCollectionTime,, +                        totalGcCollectionTime,, +                        lastJvmStats.getMem().getHeapUsed(),, +                        currentJvmStats.getMem().getHeapUsed(),, +                        maxHeapUsed,, +                        pools.apply(lastJvmStats, currentJvmStats));, +                }, +                break;, +            case DEBUG:, +                if (logger.isDebugEnabled()) {, +                    logger.debug(, +                        LOG_MESSAGE,, +                        name,, +                        seq,, +                        totalGcCollectionCount,, +                        currentGcCollectionTime,, +                        currentGcCollectionCount,, +                        TimeValue.timeValueMillis(elapsed),, +                        currentGcCollectionTime,, +                        totalGcCollectionTime,, +                        lastJvmStats.getMem().getHeapUsed(),, +                        currentJvmStats.getMem().getHeapUsed(),, +                        maxHeapUsed,, +                        pools.apply(lastJvmStats, currentJvmStats));, +                }, +                break;, +        }, +    }, +, +    static String buildPools(JvmStats last, JvmStats current) {]