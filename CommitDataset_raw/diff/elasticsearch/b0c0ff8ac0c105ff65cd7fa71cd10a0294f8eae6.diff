[+++ b/src/main/java/org/elasticsearch/common/unit/SizeValue.java, +import org.elasticsearch.common.Preconditions;, +        Preconditions.checkArgument(size >= 0, "size in SizeValue may not be negative");, +++ b/src/main/java/org/elasticsearch/common/unit/SizeValue.java, +import org.elasticsearch.common.Preconditions;, +        Preconditions.checkArgument(size >= 0, "size in SizeValue may not be negative");, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.SettingsException;, +import org.elasticsearch.common.unit.SizeUnit;, +import static org.elasticsearch.common.unit.SizeValue.parseSizeValue;, +            SizeValue defaultQueueSize = getAsSizeOrUnbounded(defaultSettings, "queue", getAsSizeOrUnbounded(defaultSettings, "queue_size", null));, +                    SizeValue updatedQueueSize = getAsSizeOrUnbounded(settings, "capacity", getAsSizeOrUnbounded(settings, "queue", getAsSizeOrUnbounded(settings, "queue_size", previousInfo.getQueueSize())));, +            SizeValue queueSize = getAsSizeOrUnbounded(settings, "capacity", getAsSizeOrUnbounded(settings, "queue", getAsSizeOrUnbounded(settings, "queue_size", defaultQueueSize)));, +    /**, +     * A thread pool size can also be unbounded and is represented by -1, which is not supported by SizeValue (which only supports positive numbers), +     */, +    private SizeValue getAsSizeOrUnbounded(Settings settings, String setting, SizeValue defaultValue) throws SettingsException {, +        if ("-1".equals(settings.get(setting))) {, +            return null;, +        }, +        return parseSizeValue(settings.get(setting), defaultValue);, +    }, +, +                if (in.getVersion().after(Version.V_1_2_2)) {, +                    boolean isQueueSizeBounded = in.readBoolean();, +                    queueSize = isQueueSizeBounded ? SizeValue.readSizeValue(in) : null;, +                } else {, +            }, +                if (out.getVersion().onOrAfter(Version.V_1_2_3)) {, +                    boolean isQueueSizeBounded = queueSize.singles() >= 0;, +                    out.writeBoolean(isQueueSizeBounded);, +                    if (isQueueSizeBounded) {, +                } else {, +                    queueSize.writeTo(out);, +                }, +            }, +            if (queueSize == null) {, +                builder.field(Fields.QUEUE_SIZE, -1);, +            } else {, +++ b/src/main/java/org/elasticsearch/common/unit/SizeValue.java, +import org.elasticsearch.common.Preconditions;, +        Preconditions.checkArgument(size >= 0, "size in SizeValue may not be negative");, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.SettingsException;, +import org.elasticsearch.common.unit.SizeUnit;, +import static org.elasticsearch.common.unit.SizeValue.parseSizeValue;, +            SizeValue defaultQueueSize = getAsSizeOrUnbounded(defaultSettings, "queue", getAsSizeOrUnbounded(defaultSettings, "queue_size", null));, +                    SizeValue updatedQueueSize = getAsSizeOrUnbounded(settings, "capacity", getAsSizeOrUnbounded(settings, "queue", getAsSizeOrUnbounded(settings, "queue_size", previousInfo.getQueueSize())));, +            SizeValue queueSize = getAsSizeOrUnbounded(settings, "capacity", getAsSizeOrUnbounded(settings, "queue", getAsSizeOrUnbounded(settings, "queue_size", defaultQueueSize)));, +    /**, +     * A thread pool size can also be unbounded and is represented by -1, which is not supported by SizeValue (which only supports positive numbers), +     */, +    private SizeValue getAsSizeOrUnbounded(Settings settings, String setting, SizeValue defaultValue) throws SettingsException {, +        if ("-1".equals(settings.get(setting))) {, +            return null;, +        }, +        return parseSizeValue(settings.get(setting), defaultValue);, +    }, +, +                if (in.getVersion().after(Version.V_1_2_2)) {, +                    boolean isQueueSizeBounded = in.readBoolean();, +                    queueSize = isQueueSizeBounded ? SizeValue.readSizeValue(in) : null;, +                } else {, +            }, +                if (out.getVersion().onOrAfter(Version.V_1_2_3)) {, +                    boolean isQueueSizeBounded = queueSize.singles() >= 0;, +                    out.writeBoolean(isQueueSizeBounded);, +                    if (isQueueSizeBounded) {, +                } else {, +                    queueSize.writeTo(out);, +                }, +            }, +            if (queueSize == null) {, +                builder.field(Fields.QUEUE_SIZE, -1);, +            } else {, +++ b/src/test/java/org/elasticsearch/common/unit/SizeValueTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.common.unit;, +, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.test.ElasticsearchTestCase;]