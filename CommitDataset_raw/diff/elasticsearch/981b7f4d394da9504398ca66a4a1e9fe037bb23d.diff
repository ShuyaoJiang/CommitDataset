[+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestClient.java, +, +import java.util.Map.Entry;, +import java.util.Set;, +import java.util.stream.Collectors;, +, +        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(e -> e.getValue() == true).map(Entry::getKey), +                .collect(Collectors.toSet());, +        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(e -> e.getValue() == true).map(Entry::getKey), +                .collect(Collectors.toSet());, +, +            if (restApi.getPathParts().containsKey(entry.getKey())) {, +                apiRequiredPathParts.remove(entry.getKey());, +            } else if (restApi.getParams().containsKey(entry.getKey()), +                    || restSpec.isGlobalParameter(entry.getKey()), +                apiRequiredParameters.remove(entry.getKey());, +                throw new IllegalArgumentException(, +                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api");, +, +        if (false == apiRequiredPathParts.isEmpty()) {, +            throw new IllegalArgumentException(, +                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api");, +        }, +        if (false == apiRequiredParameters.isEmpty()) {, +            throw new IllegalArgumentException(, +                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api");, +            if (false == restApi.isBodySupported()) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestClient.java, +, +import java.util.Map.Entry;, +import java.util.Set;, +import java.util.stream.Collectors;, +, +        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(e -> e.getValue() == true).map(Entry::getKey), +                .collect(Collectors.toSet());, +        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(e -> e.getValue() == true).map(Entry::getKey), +                .collect(Collectors.toSet());, +, +            if (restApi.getPathParts().containsKey(entry.getKey())) {, +                apiRequiredPathParts.remove(entry.getKey());, +            } else if (restApi.getParams().containsKey(entry.getKey()), +                    || restSpec.isGlobalParameter(entry.getKey()), +                apiRequiredParameters.remove(entry.getKey());, +                throw new IllegalArgumentException(, +                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api");, +, +        if (false == apiRequiredPathParts.isEmpty()) {, +            throw new IllegalArgumentException(, +                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api");, +        }, +        if (false == apiRequiredParameters.isEmpty()) {, +            throw new IllegalArgumentException(, +                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api");, +            if (false == restApi.isBodySupported()) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/restspec/ClientYamlSuiteRestApi.java, +import java.util.HashMap;, +    private Map<String, Boolean> pathParts = new HashMap<>();, +    private Map<String, Boolean> params = new HashMap<>();, +    /**, +     * Gets all path parts supported by the api. For every path part defines if it, +     * is required or optional., +     */, +    public Map<String, Boolean> getPathParts() {, +    void addPathPart(String pathPart, boolean required) {, +        this.pathParts.put(pathPart, required);, +    /**, +     * Gets all parameters supported by the api. For every parameter defines if it, +     * is required or optional., +     */, +    public Map<String, Boolean> getParams() {, +    void addParam(String param, boolean required) {, +        this.params.put(param, required);, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestClient.java, +, +import java.util.Map.Entry;, +import java.util.Set;, +import java.util.stream.Collectors;, +, +        Set<String> apiRequiredPathParts = restApi.getPathParts().entrySet().stream().filter(e -> e.getValue() == true).map(Entry::getKey), +                .collect(Collectors.toSet());, +        Set<String> apiRequiredParameters = restApi.getParams().entrySet().stream().filter(e -> e.getValue() == true).map(Entry::getKey), +                .collect(Collectors.toSet());, +, +            if (restApi.getPathParts().containsKey(entry.getKey())) {, +                apiRequiredPathParts.remove(entry.getKey());, +            } else if (restApi.getParams().containsKey(entry.getKey()), +                    || restSpec.isGlobalParameter(entry.getKey()), +                apiRequiredParameters.remove(entry.getKey());, +                throw new IllegalArgumentException(, +                        "path/param [" + entry.getKey() + "] not supported by [" + restApi.getName() + "] " + "api");, +, +        if (false == apiRequiredPathParts.isEmpty()) {, +            throw new IllegalArgumentException(, +                    "missing required path part: " + apiRequiredPathParts + " by [" + restApi.getName() + "] api");, +        }, +        if (false == apiRequiredParameters.isEmpty()) {, +            throw new IllegalArgumentException(, +                    "missing required parameter: " + apiRequiredParameters + " by [" + restApi.getName() + "] api");, +            if (false == restApi.isBodySupported()) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/restspec/ClientYamlSuiteRestApi.java]