[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +import org.elasticsearch.index.search.ESToParentBlockJoinQuery;, +        map.put(ESToParentBlockJoinQuery.class, toParentBlockJoinQuery());, +    private static BiFunction<Query, Map<String, Float>, Result> toParentBlockJoinQuery() {, +        return (query, boosts) -> {, +            ESToParentBlockJoinQuery toParentBlockJoinQuery = (ESToParentBlockJoinQuery) query;, +            Result result = analyze(toParentBlockJoinQuery.getChildQuery(), boosts);, +            return new Result(false, result.extractions);, +        };, +    }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +import org.elasticsearch.index.search.ESToParentBlockJoinQuery;, +        map.put(ESToParentBlockJoinQuery.class, toParentBlockJoinQuery());, +    private static BiFunction<Query, Map<String, Float>, Result> toParentBlockJoinQuery() {, +        return (query, boosts) -> {, +            ESToParentBlockJoinQuery toParentBlockJoinQuery = (ESToParentBlockJoinQuery) query;, +            Result result = analyze(toParentBlockJoinQuery.getChildQuery(), boosts);, +            return new Result(false, result.extractions);, +        };, +    }, +, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/QueryAnalyzerTests.java, +import org.apache.lucene.search.join.QueryBitSetProducer;, +import org.apache.lucene.search.join.ScoreMode;, +import org.elasticsearch.index.search.ESToParentBlockJoinQuery;, +    public void testToParentBlockJoinQuery() {, +        TermQuery termQuery = new TermQuery(new Term("field", "value"));, +        QueryBitSetProducer queryBitSetProducer = new QueryBitSetProducer(new TermQuery(new Term("_type", "child")));, +        ESToParentBlockJoinQuery query = new ESToParentBlockJoinQuery(termQuery, queryBitSetProducer, ScoreMode.None, "child");, +        Result result = analyze(query, Collections.emptyMap());, +        assertFalse(result.verified);, +        assertEquals(1, result.extractions.size());, +        assertNull(result.extractions.toArray(new QueryExtraction[0])[0].range);, +        assertEquals(new Term("field", "value"), result.extractions.toArray(new QueryExtraction[0])[0].term);, +    }, +]