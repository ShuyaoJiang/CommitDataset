[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQuery.java, +import org.elasticsearch.common.CheckedFunction;, +                                CheckedFunction<Integer, Query, IOException> percolatorQueries = queryStore.getQueries(leafReaderContext);, +                                Query query = percolatorQueries.apply(docId);, +                final CheckedFunction<Integer, Query, IOException> queries = queryStore.getQueries(leafReaderContext);, +                            Query query = percolatorQueries.apply(docId);, +                            Query query = percolatorQueries.apply(docId);, +    interface QueryStore {, +        CheckedFunction<Integer, Query, IOException> getQueries(LeafReaderContext ctx) throws IOException;, +        final CheckedFunction<Integer, Query, IOException> percolatorQueries;, +        BaseScorer(Weight weight, Scorer approximation, CheckedFunction<Integer, Query, IOException> percolatorQueries,, +                   IndexSearcher percolatorIndexSearcher) {, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQuery.java, +import org.elasticsearch.common.CheckedFunction;, +                                CheckedFunction<Integer, Query, IOException> percolatorQueries = queryStore.getQueries(leafReaderContext);, +                                Query query = percolatorQueries.apply(docId);, +                final CheckedFunction<Integer, Query, IOException> queries = queryStore.getQueries(leafReaderContext);, +                            Query query = percolatorQueries.apply(docId);, +                            Query query = percolatorQueries.apply(docId);, +    interface QueryStore {, +        CheckedFunction<Integer, Query, IOException> getQueries(LeafReaderContext ctx) throws IOException;, +        final CheckedFunction<Integer, Query, IOException> percolatorQueries;, +        BaseScorer(Weight weight, Scorer approximation, CheckedFunction<Integer, Query, IOException> percolatorQueries,, +                   IndexSearcher percolatorIndexSearcher) {, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorHighlightSubFetchPhase.java, +                query = queryStore.getQueries(ctx).apply(segmentDocId);, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQuery.java, +import org.elasticsearch.common.CheckedFunction;, +                                CheckedFunction<Integer, Query, IOException> percolatorQueries = queryStore.getQueries(leafReaderContext);, +                                Query query = percolatorQueries.apply(docId);, +                final CheckedFunction<Integer, Query, IOException> queries = queryStore.getQueries(leafReaderContext);, +                            Query query = percolatorQueries.apply(docId);, +                            Query query = percolatorQueries.apply(docId);, +    interface QueryStore {, +        CheckedFunction<Integer, Query, IOException> getQueries(LeafReaderContext ctx) throws IOException;, +        final CheckedFunction<Integer, Query, IOException> percolatorQueries;, +        BaseScorer(Weight weight, Scorer approximation, CheckedFunction<Integer, Query, IOException> percolatorQueries,, +                   IndexSearcher percolatorIndexSearcher) {, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorHighlightSubFetchPhase.java, +                query = queryStore.getQueries(ctx).apply(segmentDocId);, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.common.CheckedFunction;, +                    CheckedFunction<Integer, Query, IOException> leaf = queryStore.getQueries(context);, +                                Query query = leaf.apply(doc);]