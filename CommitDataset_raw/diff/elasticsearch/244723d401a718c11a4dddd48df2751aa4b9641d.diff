[+++ b/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;, +                } else if ("fields".equals(fieldName) || "path".equals(fieldName)) {, +                    parseMultiField(builder, name, node, parserContext, fieldName, fieldNode);, +            multiFields.parse(this, context);, +        multiFields.toXContent(builder, params);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;, +                } else if ("fields".equals(fieldName) || "path".equals(fieldName)) {, +                    parseMultiField(builder, name, node, parserContext, fieldName, fieldNode);, +            multiFields.parse(this, context);, +        multiFields.toXContent(builder, params);, +++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;, +            return new GeoPointFieldMapper(buildNames(context), fieldType, docValues, indexAnalyzer, searchAnalyzer, postingsProvider, docValuesProvider,, +                    similarity, fieldDataSettings, context.indexSettings(), origPathType, enableLatLon, enableGeoHash, enableGeohashPrefix, precisionStep,, +                    geoHashPrecision, latMapper, lonMapper, geohashMapper, validateLon, validateLat, normalizeLon, normalizeLat, +            , multiFieldsBuilder.build(this, context));, +                } else {, +                    parseMultiField(builder, name, node, parserContext, fieldName, fieldNode);, +            boolean normalizeLon, boolean normalizeLat, MultiFields multiFields) {, +        super(names, 1f, fieldType, docValues, null, indexAnalyzer, postingsFormat, docValuesFormat, similarity, null, fieldDataSettings, indexSettings, multiFields, null);, +        multiFields.parse(this, context);, +        super.close();, +++ b/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;, +                } else if ("fields".equals(fieldName) || "path".equals(fieldName)) {, +                    parseMultiField(builder, name, node, parserContext, fieldName, fieldNode);, +            multiFields.parse(this, context);, +        multiFields.toXContent(builder, params);, +++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;, +            return new GeoPointFieldMapper(buildNames(context), fieldType, docValues, indexAnalyzer, searchAnalyzer, postingsProvider, docValuesProvider,, +                    similarity, fieldDataSettings, context.indexSettings(), origPathType, enableLatLon, enableGeoHash, enableGeohashPrefix, precisionStep,, +                    geoHashPrecision, latMapper, lonMapper, geohashMapper, validateLon, validateLat, normalizeLon, normalizeLat, +            , multiFieldsBuilder.build(this, context));, +                } else {, +                    parseMultiField(builder, name, node, parserContext, fieldName, fieldNode);, +            boolean normalizeLon, boolean normalizeLat, MultiFields multiFields) {, +        super(names, 1f, fieldType, docValues, null, indexAnalyzer, postingsFormat, docValuesFormat, similarity, null, fieldDataSettings, indexSettings, multiFields, null);, +        multiFields.parse(this, context);, +        super.close();, +++ b/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java, +import org.elasticsearch.index.mapper.core.*;, +import org.elasticsearch.index.mapper.geo.GeoPointFieldMapper;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +, +    @Test, +    public void testConvertMultiFieldGeoPoint() throws Exception {, +        String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-geo_point.json");, +        DocumentMapper docMapper = MapperTestUtils.newParser().parse(mapping);, +, +        assertThat(docMapper.mappers().fullName("a").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("a").mapper(), instanceOf(StringFieldMapper.class));, +        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().indexed(), equalTo(true));, +        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().stored(), equalTo(false));, +        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().tokenized(), equalTo(false));, +, +        assertThat(docMapper.mappers().fullName("a.b").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("a.b").mapper(), instanceOf(GeoPointFieldMapper.class));, +        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().indexed(), equalTo(true));, +        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().stored(), equalTo(false));, +        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().tokenized(), equalTo(false));, +, +        BytesReference json = jsonBuilder().startObject(), +                .field("_id", "1"), +                .field("a", "-1,-1"), +                .endObject().bytes();, +        Document doc = docMapper.parse(json).rootDoc();, +, +        IndexableField f = doc.getField("a");, +        assertThat(f, notNullValue());, +        assertThat(f.name(), equalTo("a"));, +        assertThat(f.stringValue(), equalTo("-1,-1"));, +        assertThat(f.fieldType().stored(), equalTo(false));, +        assertThat(f.fieldType().indexed(), equalTo(true));, +, +        f = doc.getField("a.b");, +        assertThat(f, notNullValue());, +        assertThat(f.name(), equalTo("a.b"));, +        assertThat(f.stringValue(), equalTo("-1.0,-1.0"));, +        assertThat(f.fieldType().stored(), equalTo(false));, +        assertThat(f.fieldType().indexed(), equalTo(true));, +, +        assertThat(docMapper.mappers().fullName("b").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("b").mapper(), instanceOf(GeoPointFieldMapper.class));, +        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().indexed(), equalTo(true));, +        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().stored(), equalTo(false));, +        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().tokenized(), equalTo(false));, +, +        assertThat(docMapper.mappers().fullName("b.a").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("b.a").mapper(), instanceOf(StringFieldMapper.class));, +        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().indexed(), equalTo(true));, +        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().stored(), equalTo(false));, +        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().tokenized(), equalTo(false));, +, +        json = jsonBuilder().startObject(), +                .field("_id", "1"), +                .field("b", "-1,-1"), +                .endObject().bytes();]