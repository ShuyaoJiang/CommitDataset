[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +, +    /**, +     * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {, +        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +, +    /**, +     * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {, +        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        BasicReplicationRequest replicationRequest = new BasicReplicationRequest(shardId);, +        replicationRequest.waitForActiveShards(ActiveShardCount.NONE);, +        return replicationRequest;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +, +    /**, +     * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {, +        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        BasicReplicationRequest replicationRequest = new BasicReplicationRequest(shardId);, +        replicationRequest.waitForActiveShards(ActiveShardCount.NONE);, +        return replicationRequest;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +                indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +, +    /**, +     * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {]