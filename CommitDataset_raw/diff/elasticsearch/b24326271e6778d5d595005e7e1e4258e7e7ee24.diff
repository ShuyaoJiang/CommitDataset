[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-expression[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]script[/\\]expression[/\\]ExpressionScriptEngine.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-expression[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]script[/\\]expression[/\\]ExpressionScriptEngine.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-expression[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]script[/\\]expression[/\\]ExpressionScriptEngine.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-expression[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]script[/\\]expression[/\\]ExpressionScriptEngine.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-expression[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]script[/\\]expression[/\\]ExpressionScriptEngine.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-expression[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]script[/\\]expression[/\\]ExpressionScriptEngine.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/StringFieldType.java, +    public Query fuzzyQuery(Object value, Fuzziness fuzziness, int prefixLength, int maxExpansions,, +    public Query prefixQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {, +    public Query regexpQuery(String value, int flags, int maxDeterminizedStates,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-expression[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]script[/\\]expression[/\\]ExpressionScriptEngine.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/StringFieldType.java, +    public Query fuzzyQuery(Object value, Fuzziness fuzziness, int prefixLength, int maxExpansions,, +    public Query prefixQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {, +    public Query regexpQuery(String value, int flags, int maxDeterminizedStates,, +++ b/core/src/main/java/org/elasticsearch/plugins/ScriptPlugin.java, +import org.elasticsearch.script.ScriptEngine;, +     * Returns a {@link ScriptEngine} instance or <code>null</code> if this plugin doesn't add a new script engine, +    default ScriptEngine getScriptEngine(Settings settings) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-expression[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]script[/\\]expression[/\\]ExpressionScriptEngine.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/StringFieldType.java, +    public Query fuzzyQuery(Object value, Fuzziness fuzziness, int prefixLength, int maxExpansions,]