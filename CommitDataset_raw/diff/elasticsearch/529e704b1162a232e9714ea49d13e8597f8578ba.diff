[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.common.concurrent.CompletableContext;, +    private final CompletableContext<Void> closeContext = new CompletableContext<>();, +        this.channel.closeFuture().addListener(f -> {, +            if (f.isSuccess()) {, +                closeContext.complete(null);, +            } else {, +                Throwable cause = f.cause();, +                if (cause instanceof Error) {, +                    Netty4Utils.maybeDie(cause);, +                    closeContext.completeExceptionally(new Exception(cause));, +                } else {, +                    closeContext.completeExceptionally((Exception) cause);, +                }, +            }, +        });, +    public void addCloseListener(ActionListener<Void> listener) {, +        closeContext.addListener(ActionListener.toBiConsumer(listener));, +    }, +, +    @Override, +    public boolean isOpen() {, +        return channel.isOpen();, +    }, +, +    @Override, +, +    @Override, +    public String toString() {, +        return "Netty4HttpChannel{" +, +            "localAddress=" + getLocalAddress() +, +            ", remoteAddress=" + getRemoteAddress() +, +            '}';, +    }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.common.concurrent.CompletableContext;, +    private final CompletableContext<Void> closeContext = new CompletableContext<>();, +        this.channel.closeFuture().addListener(f -> {, +            if (f.isSuccess()) {, +                closeContext.complete(null);, +            } else {, +                Throwable cause = f.cause();, +                if (cause instanceof Error) {, +                    Netty4Utils.maybeDie(cause);, +                    closeContext.completeExceptionally(new Exception(cause));, +                } else {, +                    closeContext.completeExceptionally((Exception) cause);, +                }, +            }, +        });, +    public void addCloseListener(ActionListener<Void> listener) {, +        closeContext.addListener(ActionListener.toBiConsumer(listener));, +    }, +, +    @Override, +    public boolean isOpen() {, +        return channel.isOpen();, +    }, +, +    @Override, +, +    @Override, +    public String toString() {, +        return "Netty4HttpChannel{" +, +            "localAddress=" + getLocalAddress() +, +            ", remoteAddress=" + getRemoteAddress() +, +            '}';, +    }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java, +import static org.elasticsearch.http.netty4.Netty4HttpServerTransport.HTTP_CHANNEL_KEY;, +, +        Netty4HttpChannel channel = ctx.channel().attr(HTTP_CHANNEL_KEY).get();, +        Netty4HttpChannel httpChannel = ctx.channel().attr(HTTP_CHANNEL_KEY).get();, +        if (cause instanceof Error) {, +            serverTransport.onException(httpChannel, new Exception(cause));, +        } else {, +            serverTransport.onException(httpChannel, (Exception) cause);, +        }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.common.concurrent.CompletableContext;, +    private final CompletableContext<Void> closeContext = new CompletableContext<>();, +        this.channel.closeFuture().addListener(f -> {, +            if (f.isSuccess()) {, +                closeContext.complete(null);, +            } else {, +                Throwable cause = f.cause();, +                if (cause instanceof Error) {, +                    Netty4Utils.maybeDie(cause);, +                    closeContext.completeExceptionally(new Exception(cause));, +                } else {, +                    closeContext.completeExceptionally((Exception) cause);, +                }, +            }, +        });, +    public void addCloseListener(ActionListener<Void> listener) {, +        closeContext.addListener(ActionListener.toBiConsumer(listener));, +    }, +, +    @Override, +    public boolean isOpen() {]