[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.action;, +, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.StatusToXContent;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.rest.RestStatus;, +, +import java.io.IOException;, +, +/**, + * A base class for the response of a write operation that involves a single doc, + */, +public abstract class DocWriteResponse extends ReplicationResponse implements StatusToXContent {, +, +    private ShardId shardId;, +    private String id;, +    private String type;, +    private long version;, +, +    public DocWriteResponse(ShardId shardId, String type, String id, long version) {, +        this.shardId = shardId;, +        this.type = type;, +        this.id = id;, +        this.version = version;, +    }, +, +    // needed for deserialization, +    protected DocWriteResponse() {, +    }, +, +    /**, +     * The index the document was changed in., +     */, +    public String getIndex() {, +        return this.shardId.getIndex();, +    }, +, +, +    /**, +     * The exact shard the document was changed in., +     */, +    public ShardId getShardId() {, +        return this.shardId;, +    }, +, +    /**, +     * The type of the document changed., +     */, +    public String getType() {, +        return this.type;, +    }, +, +    /**, +     * The id of the document changed., +     */, +    public String getId() {, +        return this.id;, +    }, +, +    /**, +     * Returns the current version of the doc., +     */, +    public long getVersion() {, +        return this.version;, +    }, +, +    /** returns the rest status for this response (based on {@link ShardInfo#status()} */, +    public RestStatus status() {, +        return getShardInfo().status();, +    }, +, +, +    @Override, +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);]