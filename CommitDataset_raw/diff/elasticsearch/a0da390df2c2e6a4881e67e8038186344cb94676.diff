[+++ b/docs/painless/painless-contexts/painless-watcher-condition-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/docs/painless/painless-contexts/painless-watcher-condition-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/docs/painless/painless-contexts/painless-watcher-transform-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/docs/painless/painless-contexts/painless-watcher-condition-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/docs/painless/painless-contexts/painless-watcher-transform-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +        "java.util.stream.txt", +++ b/docs/painless/painless-contexts/painless-watcher-condition-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/docs/painless/painless-contexts/painless-watcher-transform-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +        "java.util.stream.txt", +++ /dev/null, +++ b/docs/painless/painless-contexts/painless-watcher-condition-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/docs/painless/painless-contexts/painless-watcher-transform-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +        "java.util.stream.txt", +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/script/JodaCompatibleZonedDateTime.java, +import org.elasticsearch.common.time.DateFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.util.Objects;, +    private static final DateFormatter DATE_FORMATTER = DateFormatters.forPattern("strict_date_time");, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        JodaCompatibleZonedDateTime that = (JodaCompatibleZonedDateTime) o;, +        return Objects.equals(dt, that.dt);, +        return DATE_FORMATTER.format(dt);, +++ b/docs/painless/painless-contexts/painless-watcher-condition-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/docs/painless/painless-contexts/painless-watcher-transform-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +        "java.util.stream.txt", +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/script/JodaCompatibleZonedDateTime.java, +import org.elasticsearch.common.time.DateFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.util.Objects;, +    private static final DateFormatter DATE_FORMATTER = DateFormatters.forPattern("strict_date_time");, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        JodaCompatibleZonedDateTime that = (JodaCompatibleZonedDateTime) o;, +        return Objects.equals(dt, that.dt);, +        return DATE_FORMATTER.format(dt);, +++ b/server/src/test/java/org/elasticsearch/script/JodaCompatibleZonedDateTimeTests.java, +    public void testEquals() {, +        assertThat(javaTime, equalTo(javaTime));, +    }, +, +++ b/docs/painless/painless-contexts/painless-watcher-condition-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/docs/painless/painless-contexts/painless-watcher-transform-context.asciidoc, +`ctx['execution_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['scheduled_time']` (`ZonedDateTime`, read-only)::, +`ctx['trigger']['triggered_time']` (`ZonedDateTime`, read-only)::, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +        "java.util.stream.txt", +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/script/JodaCompatibleZonedDateTime.java, +import org.elasticsearch.common.time.DateFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.util.Objects;, +    private static final DateFormatter DATE_FORMATTER = DateFormatters.forPattern("strict_date_time");, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        JodaCompatibleZonedDateTime that = (JodaCompatibleZonedDateTime) o;, +        return Objects.equals(dt, that.dt);]