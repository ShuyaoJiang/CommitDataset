[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.IOUtils;, +    public static final ImmutableMap<String, FieldQueryExtension> fieldQueryExtensions;, +        fieldQueryExtensions = ImmutableMap.<String, FieldQueryExtension>builder(), +                .put(ExistsFieldQueryExtension.NAME, new ExistsFieldQueryExtension()), +                .put(MissingFieldQueryExtension.NAME, new MissingFieldQueryExtension()), +                .build();, +        FieldQueryExtension fieldQueryExtension = fieldQueryExtensions.get(field);, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.IOUtils;, +    public static final ImmutableMap<String, FieldQueryExtension> fieldQueryExtensions;, +        fieldQueryExtensions = ImmutableMap.<String, FieldQueryExtension>builder(), +                .put(ExistsFieldQueryExtension.NAME, new ExistsFieldQueryExtension()), +                .put(MissingFieldQueryExtension.NAME, new MissingFieldQueryExtension()), +                .build();, +        FieldQueryExtension fieldQueryExtension = fieldQueryExtensions.get(field);, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +import com.google.common.collect.ImmutableMap;, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +            ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +            serviceAttributes = builder.build();, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.IOUtils;, +    public static final ImmutableMap<String, FieldQueryExtension> fieldQueryExtensions;, +        fieldQueryExtensions = ImmutableMap.<String, FieldQueryExtension>builder(), +                .put(ExistsFieldQueryExtension.NAME, new ExistsFieldQueryExtension()), +                .put(MissingFieldQueryExtension.NAME, new MissingFieldQueryExtension()), +                .build();, +        FieldQueryExtension fieldQueryExtension = fieldQueryExtensions.get(field);, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +import com.google.common.collect.ImmutableMap;, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +            ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +            serviceAttributes = builder.build();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoResponse.java, +                for (Map.Entry<String, String> attr : nodeInfo.getNode().attributes().entrySet()) {, +                    builder.field(attr.getKey(), attr.getValue(), XContentBuilder.FieldCaseConversion.NONE);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.IOUtils;, +    public static final ImmutableMap<String, FieldQueryExtension> fieldQueryExtensions;, +        fieldQueryExtensions = ImmutableMap.<String, FieldQueryExtension>builder(), +                .put(ExistsFieldQueryExtension.NAME, new ExistsFieldQueryExtension()), +                .put(MissingFieldQueryExtension.NAME, new MissingFieldQueryExtension()), +                .build();, +        FieldQueryExtension fieldQueryExtension = fieldQueryExtensions.get(field);, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +import com.google.common.collect.ImmutableMap;, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +            ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +            serviceAttributes = builder.build();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoResponse.java, +                for (Map.Entry<String, String> attr : nodeInfo.getNode().attributes().entrySet()) {, +                    builder.field(attr.getKey(), attr.getValue(), XContentBuilder.FieldCaseConversion.NONE);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java, +import java.util.Map;, +                for (Map.Entry<String, String> attr : getNode().attributes().entrySet()) {, +                    builder.field(attr.getKey(), attr.getValue(), XContentBuilder.FieldCaseConversion.NONE);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.IOUtils;, +    public static final ImmutableMap<String, FieldQueryExtension> fieldQueryExtensions;, +        fieldQueryExtensions = ImmutableMap.<String, FieldQueryExtension>builder(), +                .put(ExistsFieldQueryExtension.NAME, new ExistsFieldQueryExtension()), +                .put(MissingFieldQueryExtension.NAME, new MissingFieldQueryExtension()), +                .build();, +        FieldQueryExtension fieldQueryExtension = fieldQueryExtensions.get(field);, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +import com.google.common.collect.ImmutableMap;, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +            ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +            serviceAttributes = builder.build();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoResponse.java, +                for (Map.Entry<String, String> attr : nodeInfo.getNode().attributes().entrySet()) {, +                    builder.field(attr.getKey(), attr.getValue(), XContentBuilder.FieldCaseConversion.NONE);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java, +import java.util.Map;, +                for (Map.Entry<String, String> attr : getNode().attributes().entrySet()) {, +                    builder.field(attr.getKey(), attr.getValue(), XContentBuilder.FieldCaseConversion.NONE);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/SnapshotIndexStatus.java, +import com.google.common.collect.ImmutableMap;]