[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.DeactivateWatchRequest;, +import org.elasticsearch.client.watcher.DeactivateWatchResponse;, +     * Deactivate an existing watch, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">, +     *     the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public DeactivateWatchResponse deactivateWatch(DeactivateWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::deactivateWatch, options,, +            DeactivateWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously deactivate an existing watch, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">, +     *     the docs</a> for more., +     *, +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void deactivateWatchAsync(DeactivateWatchRequest request, RequestOptions options,, +                                     ActionListener<DeactivateWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::deactivateWatch, options,, +            DeactivateWatchResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.DeactivateWatchRequest;, +import org.elasticsearch.client.watcher.DeactivateWatchResponse;, +     * Deactivate an existing watch, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">, +     *     the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public DeactivateWatchResponse deactivateWatch(DeactivateWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::deactivateWatch, options,, +            DeactivateWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously deactivate an existing watch, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">, +     *     the docs</a> for more., +     *, +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void deactivateWatchAsync(DeactivateWatchRequest request, RequestOptions options,, +                                     ActionListener<DeactivateWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::deactivateWatch, options,, +            DeactivateWatchResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +import org.elasticsearch.client.watcher.DeactivateWatchRequest;, +    static Request deactivateWatch(DeactivateWatchRequest deactivateWatchRequest) {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("watcher"), +            .addPathPartAsIs("watch"), +            .addPathPart(deactivateWatchRequest.getWatchId()), +            .addPathPartAsIs("_deactivate"), +            .build();, +        return new Request(HttpPut.METHOD_NAME, endpoint);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.DeactivateWatchRequest;, +import org.elasticsearch.client.watcher.DeactivateWatchResponse;, +     * Deactivate an existing watch, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">, +     *     the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public DeactivateWatchResponse deactivateWatch(DeactivateWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::deactivateWatch, options,, +            DeactivateWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously deactivate an existing watch, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html">, +     *     the docs</a> for more., +     *, +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized]