[+++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java, +import java.util.HashSet;, +import java.util.Set;, +        return Arrays.asList(RandomExceptionDirectoryReaderWrapper.TestPlugin.class);, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> getMockPlugins() {, +        Set<Class<? extends Plugin>> mocks = new HashSet<>(super.getMockPlugins());, +        mocks.remove(MockEngineFactoryPlugin.class);, +        return mocks;, +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java, +import java.util.HashSet;, +import java.util.Set;, +        return Arrays.asList(RandomExceptionDirectoryReaderWrapper.TestPlugin.class);, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> getMockPlugins() {, +        Set<Class<? extends Plugin>> mocks = new HashSet<>(super.getMockPlugins());, +        mocks.remove(MockEngineFactoryPlugin.class);, +        return mocks;, +++ b/core/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsIT.java, +import java.util.HashSet;, +import java.util.Set;, +        return Arrays.asList(RandomExceptionDirectoryReaderWrapper.TestPlugin.class);, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> getMockPlugins() {, +        Set<Class<? extends Plugin>> mocks = new HashSet<>(super.getMockPlugins());, +        mocks.remove(MockEngineFactoryPlugin.class);, +        return mocks;]