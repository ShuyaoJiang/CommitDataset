[+++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/FieldCapabilitiesRequest.java, +        return  Arrays.equals(indices, that.indices) &&, +            Objects.equals(indicesOptions, that.indicesOptions) &&, +            Arrays.equals(fields, that.fields) &&, +            Objects.equals(mergeResults, that.mergeResults);, +        return Objects.hash(Arrays.hashCode(indices),, +            indicesOptions,, +            Arrays.hashCode(fields),, +            mergeResults);, +++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/FieldCapabilitiesRequest.java, +        return  Arrays.equals(indices, that.indices) &&, +            Objects.equals(indicesOptions, that.indicesOptions) &&, +            Arrays.equals(fields, that.fields) &&, +            Objects.equals(mergeResults, that.mergeResults);, +        return Objects.hash(Arrays.hashCode(indices),, +            indicesOptions,, +            Arrays.hashCode(fields),, +            mergeResults);, +++ b/server/src/test/java/org/elasticsearch/action/fieldcaps/FieldCapabilitiesRequestTests.java, +import org.elasticsearch.common.util.ArrayUtils;, +import org.elasticsearch.test.AbstractStreamableTestCase;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.function.Consumer;, +public class FieldCapabilitiesRequestTests extends AbstractStreamableTestCase<FieldCapabilitiesRequest> {, +, +    @Override, +    protected FieldCapabilitiesRequest createTestInstance() {, +    @Override, +    protected FieldCapabilitiesRequest createBlankInstance() {, +        return new FieldCapabilitiesRequest();, +    @Override, +    protected FieldCapabilitiesRequest mutateInstance(FieldCapabilitiesRequest instance) throws IOException {, +        List<Consumer<FieldCapabilitiesRequest>> mutators = new ArrayList<>();, +        mutators.add(request -> {, +            String[] fields = ArrayUtils.concat(request.fields(), new String[] {randomAlphaOfLength(10)});, +            request.fields(fields);, +        });, +        mutators.add(request -> {, +            String[] indices = ArrayUtils.concat(instance.indices(), generateRandomStringArray(5, 10, false, false));, +            request.indices(indices);, +        });, +        mutators.add(request -> {, +            IndicesOptions indicesOptions = randomValueOtherThan(request.indicesOptions(),, +                () -> IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()));, +            request.indicesOptions(indicesOptions);, +        });, +        mutators.add(request -> request.setMergeResults(!request.isMergeResults()));, +, +        FieldCapabilitiesRequest mutatedInstance = copyInstance(instance);, +        Consumer<FieldCapabilitiesRequest> mutator = randomFrom(mutators);, +        mutator.accept(mutatedInstance);, +        return mutatedInstance;]