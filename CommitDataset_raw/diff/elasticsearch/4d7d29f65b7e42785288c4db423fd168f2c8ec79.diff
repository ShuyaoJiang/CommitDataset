[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import java.nio.file.attribute.*;, +                terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s", sourcePluginBinDirectory, destPluginBinDirectory, ExceptionsHelper.detailedMessage(e));, +, +                if (Environment.getFileStore(destConfigDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) {, +                    //We copy owner, group and permissions from the parent ES_CONFIG directory, assuming they were properly set depending, +                    // on how es was installed in the first place: can be root:elasticsearch (750) if es was installed from rpm/deb packages, +                    // or most likely elasticsearch:elasticsearch if installed from tar/zip. As for permissions we don't rely on umask., +                    PosixFileAttributes parentDirAttributes = Files.getFileAttributeView(destConfigDirectory.getParent(), PosixFileAttributeView.class).readAttributes();, +                    //for files though, we make sure not to copy execute permissions from the parent dir and leave them untouched, +                    Set<PosixFilePermission> baseFilePermissions = new HashSet<>();, +                    for (PosixFilePermission posixFilePermission : parentDirAttributes.permissions()) {, +                        switch (posixFilePermission) {, +                            case OWNER_EXECUTE:, +                            case GROUP_EXECUTE:, +                            case OTHERS_EXECUTE:, +                                break;, +                            default:, +                                baseFilePermissions.add(posixFilePermission);, +                        }, +                    }, +                    Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() {, +                        @Override, +                        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {, +                            if (attrs.isRegularFile()) {, +                                Set<PosixFilePermission> newFilePermissions = new HashSet<>(baseFilePermissions);, +                                Set<PosixFilePermission> currentFilePermissions = Files.getPosixFilePermissions(file);, +                                for (PosixFilePermission posixFilePermission : currentFilePermissions) {, +                                    switch (posixFilePermission) {, +                                        case OWNER_EXECUTE:, +                                        case GROUP_EXECUTE:, +                                        case OTHERS_EXECUTE:, +                                            newFilePermissions.add(posixFilePermission);, +                                    }, +                                }, +                                setPosixFileAttributes(file, parentDirAttributes.owner(), parentDirAttributes.group(), newFilePermissions);, +                            }, +                            return FileVisitResult.CONTINUE;, +                        }, +, +                        @Override, +                        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {, +                            setPosixFileAttributes(dir, parentDirAttributes.owner(), parentDirAttributes.group(), parentDirAttributes.permissions());, +                            return FileVisitResult.CONTINUE;, +                        }, +                    });, +                } else {, +                    terminal.println(VERBOSE, "Skipping posix permissions - filestore doesn't support posix permission");, +                }, +, +                terminal.printError("Error copying config directory [%s] to [%s], cleaning up, reason: %s", sourceConfigDirectory, destConfigDirectory, ExceptionsHelper.detailedMessage(e));, +    private static void setPosixFileAttributes(Path path, UserPrincipal owner, GroupPrincipal group, Set<PosixFilePermission> permissions) throws IOException {, +        PosixFileAttributeView fileAttributeView = Files.getFileAttributeView(path, PosixFileAttributeView.class);, +        fileAttributeView.setOwner(owner);, +        fileAttributeView.setGroup(group);, +        fileAttributeView.setPermissions(permissions);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import java.nio.file.attribute.*;, +                terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s", sourcePluginBinDirectory, destPluginBinDirectory, ExceptionsHelper.detailedMessage(e));, +, +                if (Environment.getFileStore(destConfigDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) {, +                    //We copy owner, group and permissions from the parent ES_CONFIG directory, assuming they were properly set depending, +                    // on how es was installed in the first place: can be root:elasticsearch (750) if es was installed from rpm/deb packages, +                    // or most likely elasticsearch:elasticsearch if installed from tar/zip. As for permissions we don't rely on umask., +                    PosixFileAttributes parentDirAttributes = Files.getFileAttributeView(destConfigDirectory.getParent(), PosixFileAttributeView.class).readAttributes();, +                    //for files though, we make sure not to copy execute permissions from the parent dir and leave them untouched, +                    Set<PosixFilePermission> baseFilePermissions = new HashSet<>();, +                    for (PosixFilePermission posixFilePermission : parentDirAttributes.permissions()) {, +                        switch (posixFilePermission) {, +                            case OWNER_EXECUTE:, +                            case GROUP_EXECUTE:, +                            case OTHERS_EXECUTE:, +                                break;, +                            default:, +                                baseFilePermissions.add(posixFilePermission);, +                        }, +                    }, +                    Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() {, +                        @Override, +                        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {, +                            if (attrs.isRegularFile()) {, +                                Set<PosixFilePermission> newFilePermissions = new HashSet<>(baseFilePermissions);, +                                Set<PosixFilePermission> currentFilePermissions = Files.getPosixFilePermissions(file);, +                                for (PosixFilePermission posixFilePermission : currentFilePermissions) {, +                                    switch (posixFilePermission) {, +                                        case OWNER_EXECUTE:, +                                        case GROUP_EXECUTE:, +                                        case OTHERS_EXECUTE:, +                                            newFilePermissions.add(posixFilePermission);, +                                    }, +                                }, +                                setPosixFileAttributes(file, parentDirAttributes.owner(), parentDirAttributes.group(), newFilePermissions);, +                            }, +                            return FileVisitResult.CONTINUE;, +                        }, +, +                        @Override, +                        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {]