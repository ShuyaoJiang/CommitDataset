[+++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import java.util.Collections;, +import java.util.HashMap;, +    @FunctionalInterface, +    interface Writer {, +        void write(StreamOutput o, Object value) throws IOException;, +    }, +, +    private final static Map<Class<?>, Writer> WRITERS;, +, +    static {, +        Map<Class<?>, Writer> writers = new HashMap<>();, +        writers.put(String.class, (o, v) -> {, +            o.writeByte((byte) 0);, +            o.writeString((String) v);, +        });, +        writers.put(Integer.class, (o, v) -> {, +            o.writeByte((byte) 1);, +            o.writeInt((Integer) v);, +        });, +        writers.put(Long.class, (o, v) -> {, +            o.writeByte((byte) 2);, +            o.writeLong((Long) v);, +        });, +        writers.put(Float.class, (o, v) -> {, +            o.writeByte((byte) 3);, +            o.writeFloat((float) v);, +        });, +        writers.put(Double.class, (o, v) -> {, +            o.writeByte((byte) 4);, +            o.writeDouble((double) v);, +        });, +        writers.put(Boolean.class, (o, v) -> {, +            o.writeByte((byte) 5);, +            o.writeBoolean((boolean) v);, +        });, +        writers.put(byte[].class, (o, v) -> {, +            o.writeByte((byte) 6);, +            final byte[] bytes = (byte[]) v;, +            o.writeVInt(bytes.length);, +            o.writeBytes(bytes);, +        });, +        writers.put(List.class, (o, v) -> {, +            o.writeByte((byte) 7);, +            final List list = (List) v;, +            o.writeVInt(list.size());, +            for (Object item : list) {, +                o.writeGenericValue(item);, +            }, +        });, +        writers.put(Object[].class, (o, v) -> {, +            o.writeByte((byte) 8);, +            final Object[] list = (Object[]) v;, +            o.writeVInt(list.length);, +            for (Object item : list) {, +                o.writeGenericValue(item);, +            }, +        });, +        writers.put(Map.class, (o, v) -> {, +            if (v instanceof LinkedHashMap) {, +                o.writeByte((byte) 9);, +            } else {, +                o.writeByte((byte) 10);, +            }, +            @SuppressWarnings("unchecked"), +            final Map<String, Object> map = (Map<String, Object>) v;, +            o.writeVInt(map.size());, +            for (Map.Entry<String, Object> entry : map.entrySet()) {, +                o.writeString(entry.getKey());, +                o.writeGenericValue(entry.getValue());, +            }, +        });, +        writers.put(Byte.class, (o, v) -> {, +            o.writeByte((byte) 11);, +            o.writeByte((Byte) v);, +        });, +        writers.put(Date.class, (o, v) -> {, +            o.writeByte((byte) 12);, +            o.writeLong(((Date) v).getTime());, +        });, +        writers.put(ReadableInstant.class, (o, v) -> {, +            o.writeByte((byte) 13);, +            final ReadableInstant instant = (ReadableInstant) v;, +            o.writeString(instant.getZone().getID());, +            o.writeLong(instant.getMillis());, +        });, +        writers.put(BytesReference.class, (o, v) -> {, +            o.writeByte((byte) 14);, +            o.writeBytesReference((BytesReference) v);, +        });, +        writers.put(Text.class, (o, v) -> {, +            o.writeByte((byte) 15);, +            o.writeText((Text) v);, +        });, +        writers.put(Short.class, (o, v) -> {, +            o.writeByte((byte) 16);, +            o.writeShort((Short) v);, +        });, +        writers.put(int[].class, (o, v) -> {, +            o.writeByte((byte) 17);]