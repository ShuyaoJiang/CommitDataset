[+++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +        expected.put("columns", singletonList(columnInfo(mode, "COUNT(*)", "long", JDBCType.BIGINT, 20)));, +++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +        expected.put("columns", singletonList(columnInfo(mode, "COUNT(*)", "long", JDBCType.BIGINT, 20)));, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/UserFunctionIT.java, +        users = new ArrayList<>(usersCount);, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                    columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +        expected.put("columns", singletonList(columnInfo(mode, "COUNT(*)", "long", JDBCType.BIGINT, 20)));, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/UserFunctionIT.java, +        users = new ArrayList<>(usersCount);, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                    columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Project[[?COUNT(*)]]"));, +        assertThat(readLine(), startsWith("Aggregate[[],[COUNT(*)#"));, +        assertThat(readLine(), startsWith("Aggregate[[],[COUNT(*)#"));, +++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +        expected.put("columns", singletonList(columnInfo(mode, "COUNT(*)", "long", JDBCType.BIGINT, 20)));, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/UserFunctionIT.java, +        users = new ArrayList<>(usersCount);, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                    columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Project[[?COUNT(*)]]"));, +        assertThat(readLine(), startsWith("Aggregate[[],[COUNT(*)#"));, +        assertThat(readLine(), startsWith("Aggregate[[],[COUNT(*)#"));, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/DebugCsvSpec.java, +@TestLogging("org.elasticsearch.xpack.sql:TRACE"), +++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +        expected.put("columns", singletonList(columnInfo(mode, "COUNT(*)", "long", JDBCType.BIGINT, 20)));, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/UserFunctionIT.java, +        users = new ArrayList<>(usersCount);, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                    columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Project[[?COUNT(*)]]"));, +        assertThat(readLine(), startsWith("Aggregate[[],[COUNT(*)#"));, +        assertThat(readLine(), startsWith("Aggregate[[],[COUNT(*)#"));, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/DebugCsvSpec.java, +@TestLogging("org.elasticsearch.xpack.sql:TRACE"), +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +CHAR_LENGTH(SPACE(CAST(languages AS SMALLINT))):i|   COUNT(*):l, +ROUND(SQRT(CAST(EXP(languages) AS SMALLINT)),2):d|  COUNT(*):l, +++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +        expected.put("columns", singletonList(columnInfo(mode, "COUNT(*)", "long", JDBCType.BIGINT, 20)));, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/UserFunctionIT.java, +        users = new ArrayList<>(usersCount);, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                    columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +                columnInfo(mode, "USER()", "keyword", JDBCType.VARCHAR, 0)));, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Filter[i = 2#"));, +        assertThat(readLine(), startsWith("\\_Project[[?COUNT(*)]]"));, +        assertThat(readLine(), startsWith("Aggregate[[],[COUNT(*)#"));, +        assertThat(readLine(), startsWith("Aggregate[[],[COUNT(*)#"));, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/DebugCsvSpec.java, +@TestLogging("org.elasticsearch.xpack.sql:TRACE"), +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +CHAR_LENGTH(SPACE(CAST(languages AS SMALLINT))):i|   COUNT(*):l, +ROUND(SQRT(CAST(EXP(languages) AS SMALLINT)),2):d|  COUNT(*):l, +++ b/x-pack/plugin/sql/qa/src/main/resources/docs.csv-spec, +ASCII('Elastic') , +----------------, +BIT_LENGTH('Elastic'), +---------------------, +CHAR_LENGTH('Elastic'), +----------------------, +CONCAT('Elasticsearch', ' SQL'), +-------------------------------, +INSERT('Elastic ', 8, 1, 'search'), +----------------------------------, +LCASE('Elastic'), +----------------]