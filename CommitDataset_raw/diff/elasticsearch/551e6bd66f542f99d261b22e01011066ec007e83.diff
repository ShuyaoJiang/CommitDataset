[+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    if (ExceptionsHelper.status(e) == RestStatus.CONFLICT) {, +                        logger.trace("{} failed to execute bulk item (index) {}", e, request.shardId(), indexRequest);, +                    } else {, +                        logger.debug("{} failed to execute bulk item (index) {}", e, request.shardId(), indexRequest);, +                    }, +            } else if (item.request() instanceof DeleteRequest) {, +                    if (ExceptionsHelper.status(e) == RestStatus.CONFLICT) {, +                        logger.trace("{} failed to execute bulk item (delete) {}", e, request.shardId(), deleteRequest);, +                    } else {, +                        logger.debug("{} failed to execute bulk item (delete) {}", e, request.shardId(), deleteRequest);, +                    }, +            } else if (item.request() instanceof UpdateRequest) {, +                                        if (ExceptionsHelper.status(t) == RestStatus.CONFLICT) {, +                                            logger.trace("{} failed to execute bulk item (index) {}", t, request.shardId(), indexRequest);, +                                        } else {, +                                            logger.debug("{} failed to execute bulk item (index) {}", t, request.shardId(), indexRequest);, +                                        }, +                                        if (ExceptionsHelper.status(t) == RestStatus.CONFLICT) {, +                                            logger.trace("{} failed to execute bulk item (delete) {}", t, request.shardId(), deleteRequest);, +                                        } else {, +                                            logger.debug("{} failed to execute bulk item (delete) {}", t, request.shardId(), deleteRequest);, +                                        }, +            } else {, +                throw new IllegalStateException("Unexpected index operation: " + item.request());, +            }, +, +            assert item.getPrimaryResponse() != null;, +            assert preVersionTypes[requestIndex] != null;, +        }, +, +        processAfterWrite(request.refresh(), indexShard, location);, +        BulkItemResponse[] responses = new BulkItemResponse[request.items().length];, +        BulkItemRequest[] items = request.items();, +        for (int i = 0; i < items.length; i++) {, +            responses[i] = items[i].getPrimaryResponse();, +        }, +        return new Tuple<>(new BulkShardResponse(request.shardId(), responses), request);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    if (ExceptionsHelper.status(e) == RestStatus.CONFLICT) {, +                        logger.trace("{} failed to execute bulk item (index) {}", e, request.shardId(), indexRequest);, +                    } else {, +                        logger.debug("{} failed to execute bulk item (index) {}", e, request.shardId(), indexRequest);, +                    }, +            } else if (item.request() instanceof DeleteRequest) {, +                    if (ExceptionsHelper.status(e) == RestStatus.CONFLICT) {, +                        logger.trace("{} failed to execute bulk item (delete) {}", e, request.shardId(), deleteRequest);, +                    } else {, +                        logger.debug("{} failed to execute bulk item (delete) {}", e, request.shardId(), deleteRequest);, +                    }, +            } else if (item.request() instanceof UpdateRequest) {, +                                        if (ExceptionsHelper.status(t) == RestStatus.CONFLICT) {, +                                            logger.trace("{} failed to execute bulk item (index) {}", t, request.shardId(), indexRequest);, +                                        } else {, +                                            logger.debug("{} failed to execute bulk item (index) {}", t, request.shardId(), indexRequest);, +                                        }, +                                        if (ExceptionsHelper.status(t) == RestStatus.CONFLICT) {, +                                            logger.trace("{} failed to execute bulk item (delete) {}", t, request.shardId(), deleteRequest);, +                                        } else {, +                                            logger.debug("{} failed to execute bulk item (delete) {}", t, request.shardId(), deleteRequest);, +                                        }, +            } else {, +                throw new IllegalStateException("Unexpected index operation: " + item.request());, +            }, +, +            assert item.getPrimaryResponse() != null;, +            assert preVersionTypes[requestIndex] != null;, +        }, +, +        processAfterWrite(request.refresh(), indexShard, location);, +        BulkItemResponse[] responses = new BulkItemResponse[request.items().length];, +        BulkItemRequest[] items = request.items();, +        for (int i = 0; i < items.length; i++) {, +            responses[i] = items[i].getPrimaryResponse();, +        }, +        return new Tuple<>(new BulkShardResponse(request.shardId(), responses), request);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            ClusterBlockException blockException = state.blocks().globalBlockedException(globalBlockLevel());, +            if (blockException != null) {, +                handleBlockException(blockException);, +                return;, +            }, +            final String concreteIndex = resolveIndex() ? indexNameExpressionResolver.concreteSingleIndex(state, request) : request.index();, +            blockException = state.blocks().indexBlockedException(indexBlockLevel(), concreteIndex);, +            if (blockException != null) {, +                handleBlockException(blockException);, +            IndexShardRoutingTable indexShard = state.getRoutingTable().shardRoutingTable(request.shardId());, +            final ShardRouting primary = indexShard.primaryShard();, +            if (primary == null || primary.active() == false) {, +                logger.trace("primary shard [{}] is not yet active, scheduling a retry: action [{}], request [{}], cluster state version [{}]", request.shardId(), actionName, request, state.version());, +                retryBecauseUnavailable(request.shardId(), "primary shard is not active");, +                return;, +            }, +            if (state.nodes().nodeExists(primary.currentNodeId()) == false) {, +                logger.trace("primary shard [{}] is assigned to an unknown node [{}], scheduling a retry: action [{}], request [{}], cluster state version [{}]", request.shardId(), primary.currentNodeId(), actionName, request, state.version());, +                retryBecauseUnavailable(request.shardId(), "primary shard isn't assigned to a known node.");, +            } else {, +            } else {, +        }, +            final IndexRoutingTable index = state.getRoutingTable().index(shardId.getIndex());]