[+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java, +                    containsString("A CLI tool to do unsafe cluster and index manipulations on current node"));, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java, +                    containsString("A CLI tool to do unsafe cluster and index manipulations on current node"));, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/DetachClusterCommand.java, +    protected void processNodePaths(Terminal terminal, Path[] dataPaths, Environment env) throws IOException {, +, +        terminal.println(NODE_DETACHED_MSG);, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java, +                    containsString("A CLI tool to do unsafe cluster and index manipulations on current node"));, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/DetachClusterCommand.java, +    protected void processNodePaths(Terminal terminal, Path[] dataPaths, Environment env) throws IOException {, +, +        terminal.println(NODE_DETACHED_MSG);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java, +    protected static final String FAILED_TO_OBTAIN_NODE_LOCK_MSG = "failed to lock node's directory, is Elasticsearch still running?";, +    protected static final String GLOBAL_GENERATION_MISSING_MSG =, +        "no metadata is referenced from the manifest file, cluster has never been bootstrapped?";, +    protected static final String ABORTED_BY_USER_MSG = "aborted by user";, +            processNodePaths(terminal, dataPaths, env);, +    protected final void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {, +        if (validateBeforeLock(terminal, env)) {, +            processNodePathsWithLock(terminal, options, env);, +        }, +    /**, +     * Validate that the command can run before taking any locks., +     * @param terminal the terminal to print to, +     * @param env the env to validate., +     * @return true to continue, false to stop (must print message in validate)., +     */, +    protected boolean validateBeforeLock(Terminal terminal, Environment env) {, +        return true;, +    }, +, +, +    /**, +     * Process the paths. Locks for the paths is held during this method invocation., +     * @param terminal the terminal to use for messages, +     * @param dataPaths the paths of the node to process, +     * @param env the env of the node to process, +     */, +    protected abstract void processNodePaths(Terminal terminal, Path[] dataPaths, Environment env) throws IOException;, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java, +                    containsString("A CLI tool to do unsafe cluster and index manipulations on current node"));, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/DetachClusterCommand.java, +    protected void processNodePaths(Terminal terminal, Path[] dataPaths, Environment env) throws IOException {, +, +        terminal.println(NODE_DETACHED_MSG);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java, +    protected static final String FAILED_TO_OBTAIN_NODE_LOCK_MSG = "failed to lock node's directory, is Elasticsearch still running?";, +    protected static final String GLOBAL_GENERATION_MISSING_MSG =, +        "no metadata is referenced from the manifest file, cluster has never been bootstrapped?";, +    protected static final String ABORTED_BY_USER_MSG = "aborted by user";, +            processNodePaths(terminal, dataPaths, env);, +    protected final void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {, +        if (validateBeforeLock(terminal, env)) {, +            processNodePathsWithLock(terminal, options, env);, +        }, +    /**, +     * Validate that the command can run before taking any locks., +     * @param terminal the terminal to print to, +     * @param env the env to validate., +     * @return true to continue, false to stop (must print message in validate)., +     */, +    protected boolean validateBeforeLock(Terminal terminal, Environment env) {, +        return true;, +    }, +, +, +    /**, +     * Process the paths. Locks for the paths is held during this method invocation., +     * @param terminal the terminal to use for messages, +     * @param dataPaths the paths of the node to process, +     * @param env the env of the node to process, +     */, +    protected abstract void processNodePaths(Terminal terminal, Path[] dataPaths, Environment env) throws IOException;, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/NodeToolCli.java, +import org.elasticsearch.env.NodeRepurposeCommand;, +        super("A CLI tool to do unsafe cluster and index manipulations on current node",, +            ()->{});, +        subcommands.put("repurpose", new NodeRepurposeCommand());, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java, +                    containsString("A CLI tool to do unsafe cluster and index manipulations on current node"));, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/DetachClusterCommand.java, +    protected void processNodePaths(Terminal terminal, Path[] dataPaths, Environment env) throws IOException {, +, +        terminal.println(NODE_DETACHED_MSG);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java, +    protected static final String FAILED_TO_OBTAIN_NODE_LOCK_MSG = "failed to lock node's directory, is Elasticsearch still running?";, +    protected static final String GLOBAL_GENERATION_MISSING_MSG =, +        "no metadata is referenced from the manifest file, cluster has never been bootstrapped?";, +    protected static final String ABORTED_BY_USER_MSG = "aborted by user";, +            processNodePaths(terminal, dataPaths, env);, +    protected final void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {, +        if (validateBeforeLock(terminal, env)) {, +            processNodePathsWithLock(terminal, options, env);, +        }, +    /**, +     * Validate that the command can run before taking any locks., +     * @param terminal the terminal to print to]