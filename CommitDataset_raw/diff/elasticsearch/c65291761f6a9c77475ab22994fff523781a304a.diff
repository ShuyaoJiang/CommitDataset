[+++ b/buildSrc/build.gradle, +    exclude '**/*.p12', +++ b/buildSrc/build.gradle, +    exclude '**/*.p12', +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/http/WaitForHttpResource.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.gradle.http;, +, +import org.gradle.api.logging.Logger;, +import org.gradle.api.logging.Logging;, +, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.KeyManager;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.TrustManagerFactory;, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.HttpURLConnection;, +import java.net.MalformedURLException;, +import java.net.URL;, +import java.nio.charset.StandardCharsets;, +import java.security.GeneralSecurityException;, +import java.security.KeyStore;, +import java.security.KeyStoreException;, +import java.security.SecureRandom;, +import java.security.cert.Certificate;, +import java.security.cert.CertificateFactory;, +import java.util.Arrays;, +import java.util.Base64;, +import java.util.Collections;, +import java.util.Enumeration;, +import java.util.HashSet;, +import java.util.Set;, +import java.util.concurrent.TimeUnit;, +, +/**, + * A utility to wait for a specific HTTP resource to be available, optionally with customized TLS trusted CAs., + * This is logically similar to using the Ant Get task to retrieve a resource, but with the difference that it can, + * access resources that do not use the JRE's default trusted CAs., + */, +public class WaitForHttpResource {, +, +    private static final Logger logger = Logging.getLogger(WaitForHttpResource.class);, +, +    private Set<Integer> validResponseCodes = Collections.singleton(200);, +    private URL url;, +    private Set<File> certificateAuthorities;, +    private File trustStoreFile;, +    private String trustStorePassword;, +    private String username;, +    private String password;, +, +    public WaitForHttpResource(String protocol, String host, int numberOfNodes) throws MalformedURLException {, +        this(new URL(protocol + "://" + host + "/_cluster/health?wait_for_nodes=>=" + numberOfNodes + "&wait_for_status=yellow"));, +    }, +, +    public WaitForHttpResource(URL url) {, +        this.url = url;, +    }, +, +    public void setValidResponseCodes(int... validResponseCodes) {, +        this.validResponseCodes = new HashSet<>(validResponseCodes.length);, +        for (int rc : validResponseCodes) {, +            this.validResponseCodes.add(rc);, +        }, +    }, +, +    public void setCertificateAuthorities(File... certificateAuthorities) {, +        this.certificateAuthorities = new HashSet<>(Arrays.asList(certificateAuthorities));, +    }, +, +    public void setTrustStoreFile(File trustStoreFile) {, +        this.trustStoreFile = trustStoreFile;, +    }, +, +    public void setTrustStorePassword(String trustStorePassword) {, +        this.trustStorePassword = trustStorePassword;, +    }, +, +    public void setUsername(String username) {]