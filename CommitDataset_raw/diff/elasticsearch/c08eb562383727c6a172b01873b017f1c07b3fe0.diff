[+++ b/sql/server/src/main/antlr/SqlBase.g4, +    : '"' ( ~'"' | '""' )* '"', +    : '`' ( ~'`' | '``' )* '`', +++ b/sql/server/src/main/antlr/SqlBase.g4, +    : '"' ( ~'"' | '""' )* '"', +    : '`' ( ~'`' | '``' )* '`', +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +    public SearchSourceBuilder searchSource(String sql, Configuration cfg) {, +        PhysicalPlan executable = newSession(cfg).executable(sql);, +            return SourceGenerator.sourceBuilder(e.queryContainer(), cfg.filter(), cfg.pageSize());, +    public void sql(Configuration cfg, String sql, ActionListener<SchemaRowSet> listener) {, +        SqlSession session = newSession(cfg);, +++ b/sql/server/src/main/antlr/SqlBase.g4, +    : '"' ( ~'"' | '""' )* '"', +    : '`' ( ~'`' | '``' )* '`', +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +    public SearchSourceBuilder searchSource(String sql, Configuration cfg) {, +        PhysicalPlan executable = newSession(cfg).executable(sql);, +            return SourceGenerator.sourceBuilder(e.queryContainer(), cfg.filter(), cfg.pageSize());, +    public void sql(Configuration cfg, String sql, ActionListener<SchemaRowSet> listener) {, +        SqlSession session = newSession(cfg);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedAttribute.java, +++ b/sql/server/src/main/antlr/SqlBase.g4, +    : '"' ( ~'"' | '""' )* '"', +    : '`' ( ~'`' | '``' )* '`', +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +    public SearchSourceBuilder searchSource(String sql, Configuration cfg) {, +        PhysicalPlan executable = newSession(cfg).executable(sql);, +            return SourceGenerator.sourceBuilder(e.queryContainer(), cfg.filter(), cfg.pageSize());, +    public void sql(Configuration cfg, String sql, ActionListener<SchemaRowSet> listener) {, +        SqlSession session = newSession(cfg);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedAttribute.java, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/AbstractBuilder.java, +import java.util.ArrayList;, +import java.util.List;, +    @SuppressWarnings("unchecked"), +            return (T) result;, +        List<T> results = new ArrayList<>(contexts.size());, +        for (ParserRuleContext context : contexts) {, +            results.add(clazz.cast(visit(context)));, +        }, +        return results;, +    /**, +     * Retrieves the raw text of the node (without interpreting it as a string literal)., +     */, +        return node == null ? null : node.getText();, +    /**, +     * Extracts the actual unescaped string (literal) value of a token. , +     */, +    static String string(Token token) {, +        return token == null ? null : unquoteString(token.getText());, +    static String unquoteString(String text) {, +        // remove leading and trailing ' for strings and also eliminate escaped single quotes, +        return text == null ? null : text.substring(1, text.length() - 1).replace("''", "'");, +++ b/sql/server/src/main/antlr/SqlBase.g4, +    : '"' ( ~'"' | '""' )* '"', +    : '`' ( ~'`' | '``' )* '`', +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +    public SearchSourceBuilder searchSource(String sql, Configuration cfg) {, +        PhysicalPlan executable = newSession(cfg).executable(sql);, +            return SourceGenerator.sourceBuilder(e.queryContainer(), cfg.filter(), cfg.pageSize());, +    public void sql(Configuration cfg, String sql, ActionListener<SchemaRowSet> listener) {, +        SqlSession session = newSession(cfg);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedAttribute.java, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/AbstractBuilder.java, +import java.util.ArrayList;, +import java.util.List;, +    @SuppressWarnings("unchecked"), +            return (T) result;, +        List<T> results = new ArrayList<>(contexts.size());, +        for (ParserRuleContext context : contexts) {, +            results.add(clazz.cast(visit(context)));, +        }, +        return results;, +    /**, +     * Retrieves the raw text of the node (without interpreting it as a string literal)., +     */, +        return node == null ? null : node.getText();, +    /**, +     * Extracts the actual unescaped string (literal) value of a token. , +     */, +    static String string(Token token) {, +        return token == null ? null : unquoteString(token.getText());, +    static String unquoteString(String text) {, +        // remove leading and trailing ' for strings and also eliminate escaped single quotes, +        return text == null ? null : text.substring(1, text.length() - 1).replace("''", "'");, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        return new ShowFunctions(source(ctx), string(ctx.pattern));, +        return new ShowTables(source(ctx), string(ctx.pattern));, +++ b/sql/server/src/main/antlr/SqlBase.g4, +    : '"' ( ~'"' | '""' )* '"', +    : '`' ( ~'`' | '``' )* '`', +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +    public SearchSourceBuilder searchSource(String sql, Configuration cfg) {, +        PhysicalPlan executable = newSession(cfg).executable(sql);, +            return SourceGenerator.sourceBuilder(e.queryContainer(), cfg.filter(), cfg.pageSize());, +    public void sql(Configuration cfg, String sql, ActionListener<SchemaRowSet> listener) {, +        SqlSession session = newSession(cfg);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedAttribute.java, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/parser/AbstractBuilder.java]