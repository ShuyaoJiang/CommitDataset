[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (values.isEmpty() == false) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (values.isEmpty() == false) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +, +        @Override, +        public Object valueForSearch(Object value) {, +            if (value == null) {, +                return null;, +            }, +            // keywords are internally stored as utf8 bytes, +            BytesRef binaryValue = (BytesRef) value;, +            return binaryValue.utf8ToString();, +        }, +        // convert to utf8 only once before feeding postings/dv/stored fields, +        final BytesRef binaryValue = new BytesRef(value);, +            Field field = new Field(fieldType().name(), binaryValue, fieldType());, +            fields.add(new SortedSetDocValuesField(fieldType().name(), binaryValue));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (values.isEmpty() == false) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +, +        @Override, +        public Object valueForSearch(Object value) {, +            if (value == null) {, +                return null;, +            }, +            // keywords are internally stored as utf8 bytes, +            BytesRef binaryValue = (BytesRef) value;, +            return binaryValue.utf8ToString();, +        }, +        // convert to utf8 only once before feeding postings/dv/stored fields, +        final BytesRef binaryValue = new BytesRef(value);, +            Field field = new Field(fieldType().name(), binaryValue, fieldType());, +            fields.add(new SortedSetDocValuesField(fieldType().name(), binaryValue));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +import org.apache.lucene.index.IndexOptions;, +import org.elasticsearch.index.mapper.core.StringFieldMapper;, +                                FieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo);, +            FieldMapper geoHashMapper = null;, +                if (context.indexCreatedVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +                    geoHashMapper = new KeywordFieldMapper.Builder(Names.GEOHASH), +                            .index(true).includeInAll(false).store(fieldType.stored()).build(context);, +                } else {, +                    geoHashMapper = new StringFieldMapper.Builder(Names.GEOHASH), +                            .tokenized(false).index(true).omitNorms(true).indexOptions(IndexOptions.DOCS), +                            .includeInAll(false).store(fieldType.stored()).build(context);, +                }, +    protected FieldMapper geoHashMapper;, +                                      FieldMapper latMapper, FieldMapper lonMapper, FieldMapper geoHashMapper,, +        FieldMapper geoUpdated = geoHashMapper == null ? null : geoHashMapper.updateFieldType(fullNameToFieldType);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        if (System.getProperty('build.snapshot', 'true').equals('false')) {, +            patterns.put('norelease', /norelease/), +        }, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    if (values.isEmpty() == false) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +, +        @Override, +        public Object valueForSearch(Object value) {, +            if (value == null) {, +                return null;, +            }]