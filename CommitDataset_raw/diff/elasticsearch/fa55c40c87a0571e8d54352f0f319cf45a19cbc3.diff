[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/AbstractFsStore.java, +import com.google.common.collect.ImmutableSet;, +import org.apache.lucene.store.Directory;, +import org.elasticsearch.index.store.memory.ByteBufferDirectory;, +import org.elasticsearch.index.store.memory.HeapDirectory;, +import org.elasticsearch.util.SizeUnit;, +import org.elasticsearch.util.SizeValue;, +import org.elasticsearch.util.lucene.store.SwitchDirectory;, +public abstract class AbstractFsStore<T extends Directory> extends AbstractStore<T> {, +        FileSystemUtils.deleteRecursively(fsDirectory().getFile());, +        if (fsDirectory().getFile().getParentFile().list().length == 0) {, +            FileSystemUtils.deleteRecursively(fsDirectory().getFile().getParentFile());, +, +    public abstract FSDirectory fsDirectory();, +, +    protected SwitchDirectory buildSwitchDirectoryIfNeeded(Directory fsDirectory) {, +        boolean cache = componentSettings.getAsBoolean("cache.enabled", false);, +        if (!cache) {, +            return null;, +        }, +        SizeValue bufferSize = componentSettings.getAsSize("cache.bufferSize", new SizeValue(100, SizeUnit.KB));, +        SizeValue cacheSize = componentSettings.getAsSize("cache.cacheSize", new SizeValue(20, SizeUnit.MB));, +        boolean direct = componentSettings.getAsBoolean("cache.direct", true);, +        boolean warmCache = componentSettings.getAsBoolean("cache.warmCache", true);, +, +        Directory memDir;, +        if (direct) {, +            memDir = new ByteBufferDirectory((int) bufferSize.bytes(), (int) cacheSize.bytes(), true, warmCache);, +        } else {, +            memDir = new HeapDirectory(bufferSize, cacheSize, warmCache);, +        }, +        // see http://lucene.apache.org/java/3_0_1/fileformats.html, +        String[] primaryExtensions = componentSettings.getAsArray("cache.extensions", new String[]{"", "del", "gen"});, +        return new SwitchDirectory(ImmutableSet.of(primaryExtensions), memDir, fsDirectory, true);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/AbstractFsStore.java, +import com.google.common.collect.ImmutableSet;, +import org.apache.lucene.store.Directory;, +import org.elasticsearch.index.store.memory.ByteBufferDirectory;, +import org.elasticsearch.index.store.memory.HeapDirectory;, +import org.elasticsearch.util.SizeUnit;, +import org.elasticsearch.util.SizeValue;, +import org.elasticsearch.util.lucene.store.SwitchDirectory;, +public abstract class AbstractFsStore<T extends Directory> extends AbstractStore<T> {, +        FileSystemUtils.deleteRecursively(fsDirectory().getFile());, +        if (fsDirectory().getFile().getParentFile().list().length == 0) {, +            FileSystemUtils.deleteRecursively(fsDirectory().getFile().getParentFile());, +, +    public abstract FSDirectory fsDirectory();, +, +    protected SwitchDirectory buildSwitchDirectoryIfNeeded(Directory fsDirectory) {, +        boolean cache = componentSettings.getAsBoolean("cache.enabled", false);, +        if (!cache) {, +            return null;, +        }, +        SizeValue bufferSize = componentSettings.getAsSize("cache.bufferSize", new SizeValue(100, SizeUnit.KB));, +        SizeValue cacheSize = componentSettings.getAsSize("cache.cacheSize", new SizeValue(20, SizeUnit.MB));, +        boolean direct = componentSettings.getAsBoolean("cache.direct", true);, +        boolean warmCache = componentSettings.getAsBoolean("cache.warmCache", true);, +, +        Directory memDir;, +        if (direct) {, +            memDir = new ByteBufferDirectory((int) bufferSize.bytes(), (int) cacheSize.bytes(), true, warmCache);, +        } else {, +            memDir = new HeapDirectory(bufferSize, cacheSize, warmCache);, +        }, +        // see http://lucene.apache.org/java/3_0_1/fileformats.html, +        String[] primaryExtensions = componentSettings.getAsArray("cache.extensions", new String[]{"", "del", "gen"});, +        return new SwitchDirectory(ImmutableSet.of(primaryExtensions), memDir, fsDirectory, true);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/MmapFsStore.java, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.store.FSDirectory;, +import org.elasticsearch.util.lucene.store.SwitchDirectory;, +public class MmapFsStore extends AbstractFsStore<Directory> {, +    private final MMapDirectory fsDirectory;, +, +    private final Directory directory;, +, +    private final boolean suggestUseCompoundFile;, +        this.fsDirectory = new CustomMMapDirectory(createStoreFilePath(environment.workWithClusterFile(), localNodeId, shardId, MAIN_INDEX_SUFFIX), syncToDisk);, +, +        SwitchDirectory switchDirectory = buildSwitchDirectoryIfNeeded(fsDirectory);, +        if (switchDirectory != null) {, +            suggestUseCompoundFile = false;, +            logger.debug("Using [MmapFs] Store with path [{}], cache [true] with extensions [{}]", new Object[]{fsDirectory.getFile(), switchDirectory.primaryExtensions()});, +            directory = switchDirectory;, +        } else {, +            suggestUseCompoundFile = true;, +            directory = fsDirectory;, +            logger.debug("Using [MmapFs] Store with path [{}]", fsDirectory.getFile());, +        }, +    @Override public FSDirectory fsDirectory() {, +        return fsDirectory;, +    }, +, +    @Override public Directory directory() {, +    @Override public boolean suggestUseCompoundFile() {, +        return suggestUseCompoundFile;, +    }]