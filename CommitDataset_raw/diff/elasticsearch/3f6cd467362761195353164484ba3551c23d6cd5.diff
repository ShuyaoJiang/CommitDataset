[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        public static final String TCP_BLOCKING = "network.tcp.blocking";, +        public static final String TCP_BLOCKING_SERVER = "network.tcp.blocking_server";, +        public static final String TCP_BLOCKING_CLIENT = "network.tcp.blocking_client";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        public static final String TCP_BLOCKING = "network.tcp.blocking";, +        public static final String TCP_BLOCKING_SERVER = "network.tcp.blocking_server";, +        public static final String TCP_BLOCKING_CLIENT = "network.tcp.blocking_client";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.common.netty.channel.socket.oio.OioServerSocketChannelFactory;, +    private final boolean blockingServer;, +, +        this.blockingServer = componentSettings.getAsBoolean("http.blocking_server", componentSettings.getAsBoolean(TCP_BLOCKING_SERVER, componentSettings.getAsBoolean(TCP_BLOCKING, false)));, +        if (blockingServer) {, +            serverBootstrap = new ServerBootstrap(new OioServerSocketChannelFactory(, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_worker")), +            ));, +        } else {, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_worker")),, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        public static final String TCP_BLOCKING = "network.tcp.blocking";, +        public static final String TCP_BLOCKING_SERVER = "network.tcp.blocking_server";, +        public static final String TCP_BLOCKING_CLIENT = "network.tcp.blocking_client";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.common.netty.channel.socket.oio.OioServerSocketChannelFactory;, +    private final boolean blockingServer;, +, +        this.blockingServer = componentSettings.getAsBoolean("http.blocking_server", componentSettings.getAsBoolean(TCP_BLOCKING_SERVER, componentSettings.getAsBoolean(TCP_BLOCKING, false)));, +        if (blockingServer) {, +            serverBootstrap = new ServerBootstrap(new OioServerSocketChannelFactory(, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_worker")), +            ));, +        } else {, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_worker")),, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import org.elasticsearch.common.netty.channel.socket.oio.OioClientSocketChannelFactory;, +import org.elasticsearch.common.netty.channel.socket.oio.OioServerSocketChannelFactory;, +    final boolean blockingServer;, +, +    final boolean blockingClient;, +, +        this.blockingServer = componentSettings.getAsBoolean("transport.tcp.blocking_server", componentSettings.getAsBoolean(TCP_BLOCKING_SERVER, componentSettings.getAsBoolean(TCP_BLOCKING, false)));, +        this.blockingClient = componentSettings.getAsBoolean("transport.tcp.blocking_client", componentSettings.getAsBoolean(TCP_BLOCKING_CLIENT, componentSettings.getAsBoolean(TCP_BLOCKING, false)));, +        if (blockingClient) {, +            clientBootstrap = new ClientBootstrap(new OioClientSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_client_worker"))));, +        } else {, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_client_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_client_worker")),, +        }, +        if (blockingServer) {, +            serverBootstrap = new ServerBootstrap(new OioServerSocketChannelFactory(, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_server_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_server_worker")), +            ));, +        } else {, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_server_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_server_worker")),, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        public static final String TCP_BLOCKING = "network.tcp.blocking";, +        public static final String TCP_BLOCKING_SERVER = "network.tcp.blocking_server";, +        public static final String TCP_BLOCKING_CLIENT = "network.tcp.blocking_client";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.common.netty.channel.socket.oio.OioServerSocketChannelFactory;, +    private final boolean blockingServer;, +, +        this.blockingServer = componentSettings.getAsBoolean("http.blocking_server", componentSettings.getAsBoolean(TCP_BLOCKING_SERVER, componentSettings.getAsBoolean(TCP_BLOCKING, false)));, +        if (blockingServer) {, +            serverBootstrap = new ServerBootstrap(new OioServerSocketChannelFactory(, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_worker")), +            ));, +        } else {, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "http_server_worker")),, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import org.elasticsearch.common.netty.channel.socket.oio.OioClientSocketChannelFactory;, +import org.elasticsearch.common.netty.channel.socket.oio.OioServerSocketChannelFactory;, +    final boolean blockingServer;, +, +    final boolean blockingClient;, +, +        this.blockingServer = componentSettings.getAsBoolean("transport.tcp.blocking_server", componentSettings.getAsBoolean(TCP_BLOCKING_SERVER, componentSettings.getAsBoolean(TCP_BLOCKING, false)));, +        this.blockingClient = componentSettings.getAsBoolean("transport.tcp.blocking_client", componentSettings.getAsBoolean(TCP_BLOCKING_CLIENT, componentSettings.getAsBoolean(TCP_BLOCKING, false)));, +        if (blockingClient) {, +            clientBootstrap = new ClientBootstrap(new OioClientSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_client_worker"))));, +        } else {, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_client_boss")),, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_client_worker")),, +        }, +        if (blockingServer) {, +            serverBootstrap = new ServerBootstrap(new OioServerSocketChannelFactory(, +                    Executors.newCachedThreadPool(daemonThreadFactory(settings, "transport_server_boss")),]