[+++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecyclerC.java, +    public abstract T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecyclerC.java, +    public abstract T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/ConcurrentDequeRecycler.java, +        super(c, ConcurrentCollections.newDeque(), maxSize);, +    public V<T> obtain() {, +        final V<T> v = super.obtain();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecyclerC.java, +    public abstract T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/ConcurrentDequeRecycler.java, +        super(c, ConcurrentCollections.newDeque(), maxSize);, +    public V<T> obtain() {, +        final V<T> v = super.obtain();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/DequeRecycler.java, +    public V<T> obtain() {, +            return new DV(c.newInstance(), false);, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecyclerC.java, +    public abstract T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/ConcurrentDequeRecycler.java, +        super(c, ConcurrentCollections.newDeque(), maxSize);, +    public V<T> obtain() {, +        final V<T> v = super.obtain();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/DequeRecycler.java, +    public V<T> obtain() {, +            return new DV(c.newInstance(), false);, +++ b/server/src/main/java/org/elasticsearch/common/recycler/FilterRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecyclerC.java, +    public abstract T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/ConcurrentDequeRecycler.java, +        super(c, ConcurrentCollections.newDeque(), maxSize);, +    public V<T> obtain() {, +        final V<T> v = super.obtain();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/DequeRecycler.java, +    public V<T> obtain() {, +            return new DV(c.newInstance(), false);, +++ b/server/src/main/java/org/elasticsearch/common/recycler/FilterRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/NoneRecycler.java, +    public V<T> obtain() {, +        return new NV<>(c.newInstance());, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecyclerC.java, +    public abstract T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/ConcurrentDequeRecycler.java, +        super(c, ConcurrentCollections.newDeque(), maxSize);, +    public V<T> obtain() {, +        final V<T> v = super.obtain();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/DequeRecycler.java, +    public V<T> obtain() {, +            return new DV(c.newInstance(), false);, +++ b/server/src/main/java/org/elasticsearch/common/recycler/FilterRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/NoneRecycler.java, +    public V<T> obtain() {, +        return new NV<>(c.newInstance());, +++ b/server/src/main/java/org/elasticsearch/common/recycler/Recycler.java, +        T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecyclerC.java, +    public abstract T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/ConcurrentDequeRecycler.java, +        super(c, ConcurrentCollections.newDeque(), maxSize);, +    public V<T> obtain() {, +        final V<T> v = super.obtain();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/DequeRecycler.java, +    public V<T> obtain() {, +            return new DV(c.newInstance(), false);, +++ b/server/src/main/java/org/elasticsearch/common/recycler/FilterRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/NoneRecycler.java, +    public V<T> obtain() {, +        return new NV<>(c.newInstance());, +++ b/server/src/main/java/org/elasticsearch/common/recycler/Recycler.java, +        T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/Recyclers.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/AbstractRecyclerC.java, +    public abstract T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/ConcurrentDequeRecycler.java, +        super(c, ConcurrentCollections.newDeque(), maxSize);, +    public V<T> obtain() {, +        final V<T> v = super.obtain();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/DequeRecycler.java, +    public V<T> obtain() {, +            return new DV(c.newInstance(), false);, +++ b/server/src/main/java/org/elasticsearch/common/recycler/FilterRecycler.java, +++ b/server/src/main/java/org/elasticsearch/common/recycler/NoneRecycler.java, +    public V<T> obtain() {, +        return new NV<>(c.newInstance());, +++ b/server/src/main/java/org/elasticsearch/common/recycler/Recycler.java, +        T newInstance();, +++ b/server/src/main/java/org/elasticsearch/common/recycler/Recyclers.java, +++ b/server/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +            public byte[] newInstance() {, +            public int[] newInstance() {, +            public long[] newInstance() {]