[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<Integer> intSetting(String key, int defaultValue, int minValue, int maxValue, boolean dynamic, Scope scope) {, +        return new Setting<>(key, (s) -> Integer.toString(defaultValue), (s) -> parseInt(s, minValue, maxValue, key), dynamic, scope);, +    }, +, +        return parseInt(s, minValue, Integer.MAX_VALUE, key);, +    }, +, +    public static int parseInt(String s, int minValue, int maxValue, String key) {, +        if (value > maxValue) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<Integer> intSetting(String key, int defaultValue, int minValue, int maxValue, boolean dynamic, Scope scope) {, +        return new Setting<>(key, (s) -> Integer.toString(defaultValue), (s) -> parseInt(s, minValue, maxValue, key), dynamic, scope);, +    }, +, +        return parseInt(s, minValue, Integer.MAX_VALUE, key);, +    }, +, +    public static int parseInt(String s, int minValue, int maxValue, String key) {, +        if (value > maxValue) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +import java.util.Set;, +, +    public void testMinMaxInt() {, +        Setting<Integer> integerSetting = Setting.intSetting("foo.bar", 1, 0, 10, false, Setting.Scope.CLUSTER);, +        try {, +            integerSetting.get(Settings.builder().put("foo.bar", 11).build());, +            fail();, +        } catch (IllegalArgumentException ex) {, +            assertEquals("Failed to parse value [11] for setting [foo.bar] must be =< 10", ex.getMessage());, +        }, +, +        try {, +            integerSetting.get(Settings.builder().put("foo.bar", -1).build());, +            fail();, +        } catch (IllegalArgumentException ex) {, +            assertEquals("Failed to parse value [-1] for setting [foo.bar] must be >= 0", ex.getMessage());, +        }, +, +        assertEquals(5, integerSetting.get(Settings.builder().put("foo.bar", 5).build()).intValue());, +        assertEquals(1, integerSetting.get(Settings.EMPTY).intValue());, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<Integer> intSetting(String key, int defaultValue, int minValue, int maxValue, boolean dynamic, Scope scope) {, +        return new Setting<>(key, (s) -> Integer.toString(defaultValue), (s) -> parseInt(s, minValue, maxValue, key), dynamic, scope);, +    }, +, +        return parseInt(s, minValue, Integer.MAX_VALUE, key);, +    }, +, +    public static int parseInt(String s, int minValue, int maxValue, String key) {, +        if (value > maxValue) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +import java.util.Set;, +, +    public void testMinMaxInt() {, +        Setting<Integer> integerSetting = Setting.intSetting("foo.bar", 1, 0, 10, false, Setting.Scope.CLUSTER);, +        try {, +            integerSetting.get(Settings.builder().put("foo.bar", 11).build());, +            fail();, +        } catch (IllegalArgumentException ex) {, +            assertEquals("Failed to parse value [11] for setting [foo.bar] must be =< 10", ex.getMessage());, +        }, +, +        try {, +            integerSetting.get(Settings.builder().put("foo.bar", -1).build());, +            fail();, +        } catch (IllegalArgumentException ex) {, +            assertEquals("Failed to parse value [-1] for setting [foo.bar] must be >= 0", ex.getMessage());, +        }, +, +        assertEquals(5, integerSetting.get(Settings.builder().put("foo.bar", 5).build()).intValue());, +        assertEquals(1, integerSetting.get(Settings.EMPTY).intValue());, +    }, +++ b/plugins/discovery-multicast/src/main/java/org/elasticsearch/plugin/discovery/multicast/MulticastDiscoveryPlugin.java, +import org.elasticsearch.common.settings.SettingsModule;, +, +    public void onModule(SettingsModule module) {, +        module.registerSetting(MulticastZenPing.ADDRESS_SETTING);, +        module.registerSetting(MulticastZenPing.GROUP_SETTING);, +        module.registerSetting(MulticastZenPing.PORT_SETTING);, +        module.registerSetting(MulticastZenPing.SHARED_SETTING);, +        module.registerSetting(MulticastZenPing.TTL_SETTING);, +        module.registerSetting(MulticastZenPing.BUFFER_SIZE_SETTING);, +        module.registerSetting(MulticastZenPing.PING_ENABLED_SETTING);, +        module.registerSetting(MulticastZenPing.DEFERE_TO_INTERFACE_SETTING);, +, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<Integer> intSetting(String key, int defaultValue, int minValue, int maxValue, boolean dynamic, Scope scope) {, +        return new Setting<>(key, (s) -> Integer.toString(defaultValue), (s) -> parseInt(s, minValue, maxValue, key), dynamic, scope);, +    }, +, +        return parseInt(s, minValue, Integer.MAX_VALUE, key);]