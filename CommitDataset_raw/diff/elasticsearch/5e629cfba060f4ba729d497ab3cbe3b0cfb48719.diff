[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import java.io.UncheckedIOException;, +        transportService.registerRequestHandler(DFS_ACTION_NAME, ShardSearchTransportRequest::new, ThreadPool.Names.SAME,, +                    searchService.executeDfsPhase(request, (SearchTask) task, new ActionListener<SearchPhaseResult>() {, +                        @Override, +                        public void onResponse(SearchPhaseResult searchPhaseResult) {, +                            try {, +                                channel.sendResponse(searchPhaseResult);, +                            } catch (IOException e) {, +                                throw new UncheckedIOException(e);, +                            }, +                        }, +, +                        @Override, +                        public void onFailure(Exception e) {, +                            try {, +                                channel.sendResponse(e);, +                            } catch (IOException e1) {, +                                throw new UncheckedIOException(e1);, +                            }, +                        }, +                    });, +        transportService.registerRequestHandler(QUERY_ACTION_NAME, ShardSearchTransportRequest::new, ThreadPool.Names.SAME,, +                    searchService.executeQueryPhase(request, (SearchTask) task, new ActionListener<SearchPhaseResult>() {, +                        @Override, +                        public void onResponse(SearchPhaseResult searchPhaseResult) {, +                            try {, +                                channel.sendResponse(searchPhaseResult);, +                            } catch (IOException e) {, +                                throw new UncheckedIOException(e);, +                            }, +                        }, +, +                        @Override, +                        public void onFailure(Exception e) {, +                            try {, +                                channel.sendResponse(e);, +                            } catch (IOException e1) {, +                                throw new UncheckedIOException(e1);, +                            }, +                        }, +                    });, +        transportService.registerRequestHandler(QUERY_CAN_MATCH_NAME, ShardSearchTransportRequest::new, ThreadPool.Names.SAME,, +            new TaskAwareTransportRequestHandler<ShardSearchTransportRequest>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import java.io.UncheckedIOException;, +        transportService.registerRequestHandler(DFS_ACTION_NAME, ShardSearchTransportRequest::new, ThreadPool.Names.SAME,, +                    searchService.executeDfsPhase(request, (SearchTask) task, new ActionListener<SearchPhaseResult>() {, +                        @Override, +                        public void onResponse(SearchPhaseResult searchPhaseResult) {, +                            try {, +                                channel.sendResponse(searchPhaseResult);, +                            } catch (IOException e) {, +                                throw new UncheckedIOException(e);, +                            }, +                        }, +, +                        @Override, +                        public void onFailure(Exception e) {, +                            try {, +                                channel.sendResponse(e);, +                            } catch (IOException e1) {, +                                throw new UncheckedIOException(e1);, +                            }, +                        }, +                    });, +        transportService.registerRequestHandler(QUERY_ACTION_NAME, ShardSearchTransportRequest::new, ThreadPool.Names.SAME,, +                    searchService.executeQueryPhase(request, (SearchTask) task, new ActionListener<SearchPhaseResult>() {, +                        @Override, +                        public void onResponse(SearchPhaseResult searchPhaseResult) {, +                            try {, +                                channel.sendResponse(searchPhaseResult);, +                            } catch (IOException e) {, +                                throw new UncheckedIOException(e);, +                            }, +                        }, +, +                        @Override, +                        public void onFailure(Exception e) {, +                            try {, +                                channel.sendResponse(e);, +                            } catch (IOException e1) {, +                                throw new UncheckedIOException(e1);, +                            }, +                        }, +                    });, +        transportService.registerRequestHandler(QUERY_CAN_MATCH_NAME, ShardSearchTransportRequest::new, ThreadPool.Names.SAME,, +            new TaskAwareTransportRequestHandler<ShardSearchTransportRequest>() {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +        QueryBuilder queryBuilder = Rewriteable.rewrite(parseInnerQueryBuilder, queryShardContext, true);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import java.io.UncheckedIOException;, +        transportService.registerRequestHandler(DFS_ACTION_NAME, ShardSearchTransportRequest::new, ThreadPool.Names.SAME,, +                    searchService.executeDfsPhase(request, (SearchTask) task, new ActionListener<SearchPhaseResult>() {, +                        @Override, +                        public void onResponse(SearchPhaseResult searchPhaseResult) {, +                            try {, +                                channel.sendResponse(searchPhaseResult);, +                            } catch (IOException e) {, +                                throw new UncheckedIOException(e);]