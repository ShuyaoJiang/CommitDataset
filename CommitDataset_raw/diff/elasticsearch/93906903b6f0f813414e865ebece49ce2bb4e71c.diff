[+++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        collector.setNextReader(context);, +        docSet = DocSets.convert(context.reader(), filter.getDocIdSet(context));, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        collector.setNextReader(context);, +        docSet = DocSets.convert(context.reader(), filter.getDocIdSet(context));, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        collector.setNextReader(context);, +        docSet = DocSets.convert(context.reader(), filter.getDocIdSet(context));, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.util.Bits;, +    public Weight createWeight(IndexSearcher searcher) throws IOException {, +        IndexSearcher searcher;, +        public CustomBoostFactorWeight(IndexSearcher searcher) throws IOException {, +        public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Bits acceptDocs) throws IOException {, +            Scorer subQueryScorer = subQueryWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);, +                filterFunction.function.setNextReader(context);, +                docSets[i] = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context, acceptDocs));, +        public Explanation explain(AtomicReaderContext context, int doc) throws IOException {, +            Explanation subQueryExpl = subQueryWeight.explain(context, doc);, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context));, +                        filterFunction.function.setNextReader(context);, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context));, +                        filterFunction.function.setNextReader(context);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        collector.setNextReader(context);, +        docSet = DocSets.convert(context.reader(), filter.getDocIdSet(context));, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.util.Bits;, +    public Weight createWeight(IndexSearcher searcher) throws IOException {, +        IndexSearcher searcher;, +        public CustomBoostFactorWeight(IndexSearcher searcher) throws IOException {, +        public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Bits acceptDocs) throws IOException {, +            Scorer subQueryScorer = subQueryWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);, +                filterFunction.function.setNextReader(context);, +                docSets[i] = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context, acceptDocs));, +        public Explanation explain(AtomicReaderContext context, int doc) throws IOException {, +            Explanation subQueryExpl = subQueryWeight.explain(context, doc);, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context));, +                        filterFunction.function.setNextReader(context);, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context));, +                        filterFunction.function.setNextReader(context);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.util.Bits;, +    public Weight createWeight(IndexSearcher searcher) throws IOException {, +        IndexSearcher searcher;, +        public CustomBoostFactorWeight(IndexSearcher searcher) throws IOException {, +            this.subQueryWeight = subQuery.createWeight(searcher);, +        public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Bits acceptDocs) throws IOException {, +            Scorer subQueryScorer = subQueryWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);, +            function.setNextReader(context);, +        public Explanation explain(AtomicReaderContext context, int doc) throws IOException {, +            Explanation subQueryExpl = subQueryWeight.explain(context, doc);, +            function.setNextReader(context);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        collector.setNextReader(context);, +        docSet = DocSets.convert(context.reader(), filter.getDocIdSet(context));, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.util.Bits;, +    public Weight createWeight(IndexSearcher searcher) throws IOException {, +        IndexSearcher searcher;, +        public CustomBoostFactorWeight(IndexSearcher searcher) throws IOException {, +        public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Bits acceptDocs) throws IOException {, +            Scorer subQueryScorer = subQueryWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);, +                filterFunction.function.setNextReader(context);, +                docSets[i] = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context, acceptDocs));, +        public Explanation explain(AtomicReaderContext context, int doc) throws IOException {, +            Explanation subQueryExpl = subQueryWeight.explain(context, doc);, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context));, +                        filterFunction.function.setNextReader(context);, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context));, +                        filterFunction.function.setNextReader(context);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +import org.apache.lucene.index.AtomicReaderContext;]