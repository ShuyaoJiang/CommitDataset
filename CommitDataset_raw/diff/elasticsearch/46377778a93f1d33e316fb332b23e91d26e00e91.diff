[+++ b/build.gradle, +    "org.elasticsearch.distribution.integ-test-zip:elasticsearch:${version}": ':distribution:integ-test-zip',, +++ b/build.gradle, +    "org.elasticsearch.distribution.integ-test-zip:elasticsearch:${version}": ':distribution:integ-test-zip',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import org.gradle.api.tasks.SourceSet, +public class PluginBuildPlugin extends BuildPlugin {, +    public void apply(Project project) {, +        // this afterEvaluate must happen before the afterEvaluate added by integTest creation,, +, +            if (project.path.startsWith(':modules:')) {, +                project.integTest.clusterConfig.module(project), +                project.tasks.run.clusterConfig.module(project), +            } else {, +                project.integTest.clusterConfig.plugin(name, project.bundlePlugin.outputs.files), +        createIntegTestTask(project), +        createBundleTask(project), +        project.tasks.create('run', RunTask) // allow running ES with this plugin in the foreground of a build, +    private static void configureDependencies(Project project) {, +    /** Adds an integTest task which runs rest tests */, +    private static void createIntegTestTask(Project project) {, +        RestIntegTestTask integTest = project.tasks.create('integTest', RestIntegTestTask.class), +        integTest.mustRunAfter(project.precommit, project.test), +        project.check.dependsOn(integTest), +, +    /**, +     * Adds a bundlePlugin task which builds the zip containing the plugin jars,, +     * metadata, properties, and packaging files, +     */, +    private static void createBundleTask(Project project) {, +        File pluginMetadata = project.file('src/main/plugin-metadata'), +, +        // create a task to build the properties file for this plugin, +        PluginPropertiesTask buildProperties = project.tasks.create('pluginProperties', PluginPropertiesTask.class), +, +        // add the plugin properties and metadata to test resources, so unit tests can, +        // know about the plugin (used by test security code to statically initialize the plugin in unit tests), +        SourceSet testSourceSet = project.sourceSets.test, +        testSourceSet.output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +        testSourceSet.resources.srcDir(pluginMetadata), +, +        // create the actual bundle task, which zips up all the files for the plugin, +        Zip bundle = project.tasks.create(name: 'bundlePlugin', type: Zip, dependsOn: [project.jar, buildProperties]) {, +            from buildProperties // plugin properties file, +            from pluginMetadata // metadata (eg custom security policy), +            from project.jar // this plugin's jar, +            from project.configurations.runtime - project.configurations.provided // the dep jars, +            // extra files for the plugin to go into the zip, +, +        // remove jar from the archives (things that will be published), and set it to the zip, +        project.configurations.archives.artifacts.removeAll { it.archiveTask.is project.jar }, +        project.artifacts.add('archives', bundle), +, +        // also make the zip the default artifact (used when depending on this project), +        project.configurations.getByName('default').extendsFrom = [], +        project.artifacts.add('default', bundle), +++ b/build.gradle, +    "org.elasticsearch.distribution.integ-test-zip:elasticsearch:${version}": ':distribution:integ-test-zip',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import org.gradle.api.tasks.SourceSet, +public class PluginBuildPlugin extends BuildPlugin {, +    public void apply(Project project) {, +        // this afterEvaluate must happen before the afterEvaluate added by integTest creation,, +, +            if (project.path.startsWith(':modules:')) {, +                project.integTest.clusterConfig.module(project), +                project.tasks.run.clusterConfig.module(project), +            } else {, +                project.integTest.clusterConfig.plugin(name, project.bundlePlugin.outputs.files), +        createIntegTestTask(project), +        createBundleTask(project), +        project.tasks.create('run', RunTask) // allow running ES with this plugin in the foreground of a build, +    private static void configureDependencies(Project project) {, +    /** Adds an integTest task which runs rest tests */, +    private static void createIntegTestTask(Project project) {, +        RestIntegTestTask integTest = project.tasks.create('integTest', RestIntegTestTask.class), +        integTest.mustRunAfter(project.precommit, project.test), +        project.check.dependsOn(integTest), +, +    /**, +     * Adds a bundlePlugin task which builds the zip containing the plugin jars,, +     * metadata, properties, and packaging files, +     */, +    private static void createBundleTask(Project project) {, +        File pluginMetadata = project.file('src/main/plugin-metadata'), +, +        // create a task to build the properties file for this plugin, +        PluginPropertiesTask buildProperties = project.tasks.create('pluginProperties', PluginPropertiesTask.class), +, +        // add the plugin properties and metadata to test resources, so unit tests can, +        // know about the plugin (used by test security code to statically initialize the plugin in unit tests), +        SourceSet testSourceSet = project.sourceSets.test, +        testSourceSet.output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +        testSourceSet.resources.srcDir(pluginMetadata), +, +        // create the actual bundle task, which zips up all the files for the plugin, +        Zip bundle = project.tasks.create(name: 'bundlePlugin', type: Zip, dependsOn: [project.jar, buildProperties]) {, +            from buildProperties // plugin properties file, +            from pluginMetadata // metadata (eg custom security policy), +            from project.jar // this plugin's jar]