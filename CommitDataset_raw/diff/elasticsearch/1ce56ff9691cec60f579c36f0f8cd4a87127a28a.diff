[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.ElasticsearchParseException;, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.ElasticsearchParseException;, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.ElasticsearchParseException;, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.ElasticsearchParseException;, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +            VersionValue versionValue = versionMap.get(versionKey);, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.ElasticsearchParseException;, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +            VersionValue versionValue = versionMap.get(versionKey);, +++ b/src/test/java/org/elasticsearch/benchmark/stress/SingleThreadBulkStress.java, +                request.add(Requests.indexRequest("test").type("type1").id(Integer.toString(counter)).source(source(Integer.toString(counter), "test" + counter)));]