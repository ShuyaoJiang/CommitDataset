[+++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.routing.*;, +import org.elasticsearch.transport.*;, +import java.util.List;, +    private final TransportService transportService;, +, +        this.transportService = transportService;, +        RoutingNode routingNode = clusterState.getRoutingNodes().nodesToShards().get(clusterService.localNode().getId());, +        if (routingNode == null) {, +            redirect(request, listener, clusterState);, +            return;, +        }, +        boolean hasIndexLocally = false;, +        for (MutableShardRouting shardRouting : routingNode.shards()) {, +            if (concreteIndex.equals(shardRouting.index())) {, +                hasIndexLocally = true;, +                break;, +            }, +        }, +        if (!hasIndexLocally) {, +            redirect(request, listener, clusterState);, +            return;, +        }, +    // Redirects the request to a data node, that has the index meta data locally available., +    private void redirect(MoreLikeThisRequest request, final ActionListener<SearchResponse> listener, ClusterState clusterState) {, +        ShardIterator shardIterator = clusterService.operationRouting().getShards(clusterState, request.index(), request.type(), request.id(), null, null);, +        ShardRouting shardRouting = shardIterator.firstOrNull();, +        if (shardRouting == null) {, +            throw new ElasticSearchException("No shards for index " + request.index());, +        }, +        String nodeId = shardRouting.currentNodeId();, +        DiscoveryNode discoveryNode = clusterState.nodes().get(nodeId);, +        transportService.sendRequest(discoveryNode, MoreLikeThisAction.NAME, request, new TransportResponseHandler<SearchResponse>() {, +, +            @Override, +            public SearchResponse newInstance() {, +                return new SearchResponse();, +            }, +, +            @Override, +            public void handleResponse(SearchResponse response) {, +                listener.onResponse(response);, +            }, +, +            @Override, +            public void handleException(TransportException exp) {, +                listener.onFailure(exp);, +            }, +, +            @Override, +            public String executor() {, +                return ThreadPool.Names.SAME;, +            }, +        });, +    }, +, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.routing.*;, +import org.elasticsearch.transport.*;, +import java.util.List;, +    private final TransportService transportService;, +, +        this.transportService = transportService;, +        RoutingNode routingNode = clusterState.getRoutingNodes().nodesToShards().get(clusterService.localNode().getId());, +        if (routingNode == null) {, +            redirect(request, listener, clusterState);, +            return;, +        }, +        boolean hasIndexLocally = false;, +        for (MutableShardRouting shardRouting : routingNode.shards()) {, +            if (concreteIndex.equals(shardRouting.index())) {, +                hasIndexLocally = true;, +                break;, +            }, +        }, +        if (!hasIndexLocally) {, +            redirect(request, listener, clusterState);, +            return;, +        }, +    // Redirects the request to a data node, that has the index meta data locally available., +    private void redirect(MoreLikeThisRequest request, final ActionListener<SearchResponse> listener, ClusterState clusterState) {, +        ShardIterator shardIterator = clusterService.operationRouting().getShards(clusterState, request.index(), request.type(), request.id(), null, null);, +        ShardRouting shardRouting = shardIterator.firstOrNull();, +        if (shardRouting == null) {, +            throw new ElasticSearchException("No shards for index " + request.index());, +        }, +        String nodeId = shardRouting.currentNodeId();, +        DiscoveryNode discoveryNode = clusterState.nodes().get(nodeId);, +        transportService.sendRequest(discoveryNode, MoreLikeThisAction.NAME, request, new TransportResponseHandler<SearchResponse>() {, +, +            @Override, +            public SearchResponse newInstance() {, +                return new SearchResponse();, +            }, +, +            @Override, +            public void handleResponse(SearchResponse response) {, +                listener.onResponse(response);]