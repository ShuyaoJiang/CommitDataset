[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorMatchedSlotSubFetchPhase.java, +        innerHitsExecute(context.query(), context.searcher(), hits);, +    }, +, +    static void innerHitsExecute(Query mainQuery, IndexSearcher indexSearcher, SearchHit[] hits) throws IOException {, +        List<PercolateQuery> percolateQueries = locatePercolatorQuery(mainQuery);, +            List<LeafReaderContext> ctxs = indexSearcher.getIndexReader().leaves();, +                if (query == null) {, +                    // This is not a document with a percolator field., +                    continue;, +                }, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorMatchedSlotSubFetchPhase.java, +        innerHitsExecute(context.query(), context.searcher(), hits);, +    }, +, +    static void innerHitsExecute(Query mainQuery, IndexSearcher indexSearcher, SearchHit[] hits) throws IOException {, +        List<PercolateQuery> percolateQueries = locatePercolatorQuery(mainQuery);, +            List<LeafReaderContext> ctxs = indexSearcher.getIndexReader().leaves();, +                if (query == null) {, +                    // This is not a document with a percolator field., +                    continue;, +                }, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorMatchedSlotSubFetchPhaseTests.java, +import org.apache.lucene.analysis.core.WhitespaceAnalyzer;, +import org.apache.lucene.document.Document;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.RandomIndexWriter;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.index.memory.MemoryIndex;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.MatchAllDocsQuery;, +import org.apache.lucene.search.MatchNoDocsQuery;, +import org.apache.lucene.search.TermQuery;, +import org.apache.lucene.store.Directory;, +import org.elasticsearch.search.SearchHit;, +import java.util.Collections;, +    public void testHitsExecute() throws Exception {, +        try (Directory directory = newDirectory()) {, +            // Need a one doc index:, +            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {, +                Document document = new Document();, +                indexWriter.addDocument(document);, +            }, +, +            try (DirectoryReader reader = DirectoryReader.open(directory)) {, +                IndexSearcher indexSearcher = new IndexSearcher(reader);, +, +                // A match:, +                {, +                    SearchHit[] hits = new SearchHit[]{new SearchHit(0)};, +                    PercolateQuery.QueryStore queryStore = ctx -> docId -> new TermQuery(new Term("field", "value"));, +                    MemoryIndex memoryIndex = new MemoryIndex();, +                    memoryIndex.addField("field", "value", new WhitespaceAnalyzer());, +                    PercolateQuery percolateQuery =  new PercolateQuery("_name", queryStore, Collections.emptyList(),, +                        new MatchAllDocsQuery(), memoryIndex.createSearcher(), new MatchNoDocsQuery());, +, +                    PercolatorMatchedSlotSubFetchPhase.innerHitsExecute(percolateQuery, indexSearcher, hits);, +                    assertNotNull(hits[0].field(PercolatorMatchedSlotSubFetchPhase.FIELD_NAME_PREFIX));, +                    assertEquals(0, (int) hits[0].field(PercolatorMatchedSlotSubFetchPhase.FIELD_NAME_PREFIX).getValue());, +                }, +, +                // No match:, +                {, +                    SearchHit[] hits = new SearchHit[]{new SearchHit(0)};, +                    PercolateQuery.QueryStore queryStore = ctx -> docId -> new TermQuery(new Term("field", "value"));, +                    MemoryIndex memoryIndex = new MemoryIndex();, +                    memoryIndex.addField("field", "value1", new WhitespaceAnalyzer());, +                    PercolateQuery percolateQuery =  new PercolateQuery("_name", queryStore, Collections.emptyList(),, +                        new MatchAllDocsQuery(), memoryIndex.createSearcher(), new MatchNoDocsQuery());, +, +                    PercolatorMatchedSlotSubFetchPhase.innerHitsExecute(percolateQuery, indexSearcher, hits);, +                    assertNull(hits[0].field(PercolatorMatchedSlotSubFetchPhase.FIELD_NAME_PREFIX));, +                }, +, +                // No query:, +                {, +                    SearchHit[] hits = new SearchHit[]{new SearchHit(0)};, +                    PercolateQuery.QueryStore queryStore = ctx -> docId -> null;, +                    MemoryIndex memoryIndex = new MemoryIndex();, +                    memoryIndex.addField("field", "value", new WhitespaceAnalyzer());, +                    PercolateQuery percolateQuery =  new PercolateQuery("_name", queryStore, Collections.emptyList(),, +                        new MatchAllDocsQuery(), memoryIndex.createSearcher(), new MatchNoDocsQuery());, +, +                    PercolatorMatchedSlotSubFetchPhase.innerHitsExecute(percolateQuery, indexSearcher, hits);, +                    assertNull(hits[0].field(PercolatorMatchedSlotSubFetchPhase.FIELD_NAME_PREFIX));, +                }, +            }, +        }, +    }, +]