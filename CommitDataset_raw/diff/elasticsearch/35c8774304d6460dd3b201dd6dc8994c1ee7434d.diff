[+++ b/.idea/dictionaries/kimchy.xml, +      <w>javax</w>, +      <w>threadpool</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>javax</w>, +      <w>threadpool</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +    /**, +     * Returns the current number of threads in the pool., +     *, +     * @return the number of threads, +     */, +    int getPoolSize();, +, +    /**, +     * Returns the approximate number of threads that are actively, +     * executing tasks., +     *, +     * @return the number of threads, +     */, +    int getActiveCount();, +, +    int getSchedulerPoolSize();, +, +    int getSchedulerActiveCount();, +, +    /**, +     * Returns <tt>true</tt> if the thread pool has started., +     */, +++ b/.idea/dictionaries/kimchy.xml, +      <w>javax</w>, +      <w>threadpool</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +    /**, +     * Returns the current number of threads in the pool., +     *, +     * @return the number of threads, +     */, +    int getPoolSize();, +, +    /**, +     * Returns the approximate number of threads that are actively, +     * executing tasks., +     *, +     * @return the number of threads, +     */, +    int getActiveCount();, +, +    int getSchedulerPoolSize();, +, +    int getSchedulerActiveCount();, +, +    /**, +     * Returns <tt>true</tt> if the thread pool has started., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPoolModule.java, +import org.elasticsearch.threadpool.cached.CachedThreadPoolModule;, +import org.elasticsearch.util.guice.inject.Module;, +import static org.elasticsearch.util.guice.ModulesFactory.*;, +, +        Class<? extends Module> moduleClass = settings.getAsClass("transport.type", CachedThreadPoolModule.class, "org.elasticsearch.threadpool.", "ThreadPoolModule");, +        createModule(moduleClass, settings).configure(binder());, +++ b/.idea/dictionaries/kimchy.xml, +      <w>javax</w>, +      <w>threadpool</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +    /**, +     * Returns the current number of threads in the pool., +     *, +     * @return the number of threads, +     */, +    int getPoolSize();, +, +    /**, +     * Returns the approximate number of threads that are actively, +     * executing tasks., +     *, +     * @return the number of threads, +     */, +    int getActiveCount();, +, +    int getSchedulerPoolSize();, +, +    int getSchedulerActiveCount();, +, +    /**, +     * Returns <tt>true</tt> if the thread pool has started., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPoolModule.java, +import org.elasticsearch.threadpool.cached.CachedThreadPoolModule;, +import org.elasticsearch.util.guice.inject.Module;, +import static org.elasticsearch.util.guice.ModulesFactory.*;, +, +        Class<? extends Module> moduleClass = settings.getAsClass("transport.type", CachedThreadPoolModule.class, "org.elasticsearch.threadpool.", "ThreadPoolModule");, +        createModule(moduleClass, settings).configure(binder());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/blocking/BlockingThreadPool.java, +import org.elasticsearch.util.guice.inject.Inject;, +import java.util.concurrent.ThreadPoolExecutor;, +    final int min;, +    final int max;]