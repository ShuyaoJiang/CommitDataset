[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportIndexReplicationPingAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardReplicationPingAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportIndexReplicationPingAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardReplicationPingAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportIndexGatewaySnapshotAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardGatewaySnapshotAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportIndexReplicationPingAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardReplicationPingAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportIndexGatewaySnapshotAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardGatewaySnapshotAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/TransportCountAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(CountRequest request, ClusterState state) {, +        for (String index : request.indices()) {, +            state.blocks().indexBlocked(ClusterBlockLevel.READ, index);, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportIndexReplicationPingAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardReplicationPingAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportIndexGatewaySnapshotAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardGatewaySnapshotAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/TransportCountAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(CountRequest request, ClusterState state) {, +        for (String index : request.indices()) {, +            state.blocks().indexBlocked(ClusterBlockLevel.READ, index);, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(DeleteRequest request, ClusterState state) {, +        state.blocks().indexBlockedRaiseException(ClusterBlockLevel.WRITE, request.index());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportIndexReplicationPingAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardReplicationPingAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportIndexGatewaySnapshotAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardGatewaySnapshotAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/TransportCountAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(CountRequest request, ClusterState state) {, +        for (String index : request.indices()) {, +            state.blocks().indexBlocked(ClusterBlockLevel.READ, index);, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(DeleteRequest request, ClusterState state) {, +        state.blocks().indexBlockedRaiseException(ClusterBlockLevel.WRITE, request.index());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/TransportDeleteByQueryAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, + * @author kimchy (shay.banon), +    @Override protected void checkBlock(DeleteByQueryRequest request, ClusterState state) {, +        for (String index : request.indices()) {, +            state.blocks().indexBlockedRaiseException(ClusterBlockLevel.WRITE, index);, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportIndexReplicationPingAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardReplicationPingAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportIndexGatewaySnapshotAction.java, + * @author kimchy (shay.banon), +        super(settings, transportService, clusterService, threadPool, shardGatewaySnapshotAction);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/TransportCountAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(CountRequest request, ClusterState state) {, +        for (String index : request.indices()) {, +            state.blocks().indexBlocked(ClusterBlockLevel.READ, index);, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(DeleteRequest request, ClusterState state) {, +        state.blocks().indexBlockedRaiseException(ClusterBlockLevel.WRITE, request.index());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/TransportDeleteByQueryAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, + * @author kimchy (shay.banon), +    @Override protected void checkBlock(DeleteByQueryRequest request, ClusterState state) {, +        for (String index : request.indices()) {, +            state.blocks().indexBlockedRaiseException(ClusterBlockLevel.WRITE, index);]