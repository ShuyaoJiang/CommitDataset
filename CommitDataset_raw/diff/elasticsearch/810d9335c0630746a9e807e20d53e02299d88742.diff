[+++ b/server/src/main/java/org/elasticsearch/persistent/NodePersistentTask.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.persistent;, +, +import org.elasticsearch.common.inject.Provider;, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.TaskId;, +, +/**, + * Represents a executor node operation that corresponds to a persistent task, + */, +public class NodePersistentTask extends CancellableTask {, +    private Provider<Status> statusProvider;, +, +    private long persistentTaskId;, +, +    public NodePersistentTask(long id, String type, String action, String description, TaskId parentTask) {, +        super(id, type, action, description, parentTask);, +    }, +, +    @Override, +    public boolean shouldCancelChildrenOnCancellation() {, +        return true;, +    }, +, +    // In case of persistent tasks we always need to return: `false`, +    // because in case of persistent task the parent task isn't a task in the task manager, but in cluster state., +    // This instructs the task manager not to try to kill this persistent task when the task manager cannot find, +    // a fake parent node id "cluster" in the cluster state, +    @Override, +    public final boolean cancelOnParentLeaving() {, +        return false;, +    }, +, +    @Override, +    public Status getStatus() {, +        Provider<Status> statusProvider = this.statusProvider;, +        if (statusProvider != null) {, +            return statusProvider.get();, +        } else {, +            return null;, +        }, +    }, +, +    public void setStatusProvider(Provider<Status> statusProvider) {, +        assert this.statusProvider == null;, +        this.statusProvider = statusProvider;, +    }, +, +    public long getPersistentTaskId() {, +        return persistentTaskId;, +    }, +, +    public void setPersistentTaskId(long persistentTaskId) {, +        this.persistentTaskId = persistentTaskId;, +    }, +, +}, +++ b/server/src/main/java/org/elasticsearch/persistent/NodePersistentTask.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.persistent;, +, +import org.elasticsearch.common.inject.Provider;, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.TaskId;, +]