[+++ b/src/main/java/org/elasticsearch/index/query/SpanTermQueryParser.java, +        return query;, +++ b/src/main/java/org/elasticsearch/index/query/SpanTermQueryParser.java, +        return query;, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +    public static void assertNoFailures(SearchResponse searchResponse) {, +        assertThat("Unexpectd ShardFailures: " + Arrays.toString(searchResponse.getShardFailures()), searchResponse.getShardFailures().length, equalTo(0));, +    }, +, +        assertNoFailures(resp);, +++ b/src/main/java/org/elasticsearch/index/query/SpanTermQueryParser.java, +        return query;, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +    public static void assertNoFailures(SearchResponse searchResponse) {, +        assertThat("Unexpectd ShardFailures: " + Arrays.toString(searchResponse.getShardFailures()), searchResponse.getShardFailures().length, equalTo(0));, +    }, +, +        assertNoFailures(resp);, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +    @Test // see #2994, +    public void testSimpleSpan() throws ElasticSearchException, IOException {, +        client.admin().indices().prepareDelete().execute().actionGet();, +        client.admin().indices().prepareCreate("test").setSettings(, +                ImmutableSettings.settingsBuilder(), +                        .put("index.number_of_shards", 1), +                        .put("index.number_of_replicas", 0), +        ), +                .execute().actionGet();, +, +        client.prepareIndex("test", "test", "1").setSource(jsonBuilder().startObject(), +                .field("description", "foo other anything bar"), +                .endObject()), +                .execute().actionGet();, +, +        client.prepareIndex("test", "test", "2").setSource(jsonBuilder().startObject(), +                .field("description", "foo other anything"), +                .endObject()), +                .execute().actionGet();, +, +        client.prepareIndex("test", "test", "3").setSource(jsonBuilder().startObject(), +                .field("description", "foo other"), +                .endObject()), +                .execute().actionGet();, +, +        client.prepareIndex("test", "test", "4").setSource(jsonBuilder().startObject(), +                .field("description", "foo"), +                .endObject()), +                .execute().actionGet();, +        , +        client.admin().indices().prepareRefresh().execute().actionGet();, +        , +        SearchResponse response = client.prepareSearch("test"), +                .setQuery(QueryBuilders.spanOrQuery().clause(QueryBuilders.spanTermQuery("description", "bar"))), +                .execute().actionGet();, +        assertNoFailures(response);, +        assertHitCount(response, 1l);, +        response = client.prepareSearch("test"), +                .setQuery(QueryBuilders.spanOrQuery().clause(QueryBuilders.spanTermQuery("test.description", "bar"))), +                .execute().actionGet();, +        assertNoFailures(response);, +        assertHitCount(response, 1l);, +        , +        response = client.prepareSearch("test").setQuery(, +                QueryBuilders.spanNearQuery(), +                    .clause(QueryBuilders.spanTermQuery("description", "foo")), +                    .clause(QueryBuilders.spanTermQuery("test.description", "other")), +                .slop(3)).execute().actionGet();, +        assertNoFailures(response);, +        assertHitCount(response, 3l);, +    }, +]