[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.common.Classes;, +                                    "index.buffer_size",, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.common.Classes;, +                                    "index.buffer_size",, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +     * Index setting to control the initial index buffer size., +     * This setting is <b>not</b> realtime updateable., +     */, +    public static final String INDEX_BUFFER_SIZE_SETTING = "index.buffer_size";, +, +    /**, +        indexingBufferSize = indexSettings.getAsBytesSize(INDEX_BUFFER_SIZE_SETTING, DEFAULT_INDEX_BUFFER_SIZE);, +            versionMapSize = new ByteSizeValue((long) (((double) indexingBufferSize.bytes() * (percent / 100))));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.common.Classes;, +                                    "index.buffer_size",, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +     * Index setting to control the initial index buffer size., +     * This setting is <b>not</b> realtime updateable., +     */, +    public static final String INDEX_BUFFER_SIZE_SETTING = "index.buffer_size";, +, +    /**, +        indexingBufferSize = indexSettings.getAsBytesSize(INDEX_BUFFER_SIZE_SETTING, DEFAULT_INDEX_BUFFER_SIZE);, +            versionMapSize = new ByteSizeValue((long) (((double) indexingBufferSize.bytes() * (percent / 100))));, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java, +            assertThat("usage has be retrieved", usage.getFreeBytes(), greaterThanOrEqualTo(0L));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.common.Classes;, +                                    "index.buffer_size",, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +     * Index setting to control the initial index buffer size., +     * This setting is <b>not</b> realtime updateable., +     */, +    public static final String INDEX_BUFFER_SIZE_SETTING = "index.buffer_size";, +, +    /**, +        indexingBufferSize = indexSettings.getAsBytesSize(INDEX_BUFFER_SIZE_SETTING, DEFAULT_INDEX_BUFFER_SIZE);, +            versionMapSize = new ByteSizeValue((long) (((double) indexingBufferSize.bytes() * (percent / 100))));, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java, +            assertThat("usage has be retrieved", usage.getFreeBytes(), greaterThanOrEqualTo(0L));, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +        // Tiny indexing buffer:, +        Settings indexSettings = Settings.builder().put(defaultSettings), +                .put(EngineConfig.INDEX_BUFFER_SIZE_SETTING, "1kb").build();, +             Engine engine = new InternalEngine(config(indexSettings, store, createTempDir(), new MergeSchedulerConfig(defaultSettings), newMergePolicy()),]