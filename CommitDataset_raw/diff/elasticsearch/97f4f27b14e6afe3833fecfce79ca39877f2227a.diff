[+++ b/build.gradle, +    // minimum java 8, +    sourceCompatibility = JavaVersion.VERSION_1_8, +    targetCompatibility = sourceCompatibility, +, +      languageLevel = sourceCompatibility, +  task cleanEclipseSettings(type: Delete) {, +    delete '.settings', +  }, +  tasks.cleanEclipse.dependsOn(cleanEclipseSettings), +  tasks.eclipse.dependsOn(cleanEclipse), +  tasks.eclipse.dependsOn(copyEclipseSettings), +++ b/build.gradle, +    // minimum java 8, +    sourceCompatibility = JavaVersion.VERSION_1_8, +    targetCompatibility = sourceCompatibility, +, +      languageLevel = sourceCompatibility, +  task cleanEclipseSettings(type: Delete) {, +    delete '.settings', +  }, +  tasks.cleanEclipse.dependsOn(cleanEclipseSettings), +  tasks.eclipse.dependsOn(cleanEclipse), +  tasks.eclipse.dependsOn(copyEclipseSettings), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        globalBuildInfo(project), +        configureRepositories(project), +            if (!JavaVersion.current().isJava8Compatible()) {, +                throw new GradleException('Java 8 or above is required to build Elasticsearch'), +            jvm System.getProperty("java.home") + File.separator + 'bin' + File.separator + 'java', +++ b/build.gradle, +    // minimum java 8, +    sourceCompatibility = JavaVersion.VERSION_1_8, +    targetCompatibility = sourceCompatibility, +, +      languageLevel = sourceCompatibility, +  task cleanEclipseSettings(type: Delete) {, +    delete '.settings', +  }, +  tasks.cleanEclipse.dependsOn(cleanEclipseSettings), +  tasks.eclipse.dependsOn(cleanEclipse), +  tasks.eclipse.dependsOn(copyEclipseSettings), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        globalBuildInfo(project), +        configureRepositories(project), +            if (!JavaVersion.current().isJava8Compatible()) {, +                throw new GradleException('Java 8 or above is required to build Elasticsearch'), +            jvm System.getProperty("java.home") + File.separator + 'bin' + File.separator + 'java', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.internal.jvm.Jvm, +, +import java.nio.file.Paths, +, +import org.gradle.api.DefaultTask, +import org.gradle.api.GradleException, +import org.gradle.api.InvalidUserDataException, +import org.gradle.api.Project, +import org.gradle.api.Task, +            'JAVA_HOME' : System.getProperty('java.home'),, +        List esProps = config.systemProperties.collect { key, value -> "-D${key}=${value}" }, +        Closure esPostStartActions = { ant, logger ->, +            ant.waitfor(maxwait: '30', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond', timeoutproperty: "failed${name.capitalize()}") {, +                        file file: pidFile.toString(), +        File esScript = new File(home, 'bin/elasticsearch'), +        if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +            // elasticsearch.bat is spawned as it has no daemon mode, +            return project.tasks.create(name: name, type: DefaultTask, dependsOn: setup) << {, +                // Fall back to Ant exec task as Gradle Exec task does not support spawning yet, +                ant.exec(executable: 'cmd', spawn: config.daemonize, dir: cwd) {, +                    esEnv.each { key, value -> env(key: key, value: value) }, +                    (['/C', 'call', esScript] + esProps).each { arg(value: it) }, +                }, +                esPostStartActions(ant, logger), +            }, +        } else {, +            List esExecutable = [esScript], +            if(config.daemonize) {, +                esExecutable.add("-d"), +            }, +, +            return project.tasks.create(name: name, type: Exec, dependsOn: setup) {, +                workingDir cwd, +                executable 'sh', +                args esExecutable, +                args esProps, +                environment esEnv, +                errorOutput = new ByteArrayOutputStream(), +                doLast {, +                    if (errorOutput.toString().isEmpty() == false) {, +                        logger.error(errorOutput.toString()), +                        File logFile = new File(home, "logs/${clusterName}.log"), +                        if (logFile.exists()) {, +                            logFile.eachLine { line -> logger.error(line) }, +                        }, +                        throw new GradleException('Failed to start elasticsearch'), +                    }, +                    esPostStartActions(ant, logger), +                }, +            }, +        }]