[+++ b/plugin/build.gradle, +      if (findProject(':machine-learning-cpp') != null) {, +      } else {, +        substitute module("org.elasticsearch.ml:ml-cpp") with project("${project.path}:ml-cpp-snapshot"), +  }, +  nativeBundle "org.elasticsearch.ml:ml-cpp:${project.version}@zip", +  dependsOn configurations.nativeBundle, +  from {, +    project.zipTree(configurations.nativeBundle.singleFile), +  }, +  dependsOn configurations.nativeBundle, +  from {, +    project.zipTree(configurations.nativeBundle.singleFile), +  }, +++ b/plugin/build.gradle, +      if (findProject(':machine-learning-cpp') != null) {, +      } else {, +        substitute module("org.elasticsearch.ml:ml-cpp") with project("${project.path}:ml-cpp-snapshot"), +  }, +  nativeBundle "org.elasticsearch.ml:ml-cpp:${project.version}@zip", +  dependsOn configurations.nativeBundle, +  from {, +    project.zipTree(configurations.nativeBundle.singleFile), +  }, +  dependsOn configurations.nativeBundle, +  from {, +    project.zipTree(configurations.nativeBundle.singleFile), +  }, +++ b/plugin/ml-cpp-snapshot/build.gradle, +import com.amazonaws.AmazonServiceException, +import com.amazonaws.ClientConfiguration, +import com.amazonaws.auth.AWSCredentials, +import com.amazonaws.auth.BasicAWSCredentials, +import com.amazonaws.services.s3.AmazonS3Client, +import com.amazonaws.services.s3.model.S3Object, +import com.bettercloud.vault.Vault, +import com.bettercloud.vault.VaultConfig, +import com.bettercloud.vault.response.LogicalResponse, +import java.nio.file.Files, +import java.nio.file.attribute.PosixFilePermission, +import java.nio.file.attribute.PosixFilePermissions, +import org.elasticsearch.gradle.VersionProperties, +, +apply plugin: 'distribution', +, +buildscript {, +  repositories {, +    mavenCentral(), +  }, +  dependencies {, +    classpath group: 'com.bettercloud', name: 'vault-java-driver', version:"1.1.0", +    classpath 'com.amazonaws:aws-java-sdk-s3:1.10.33', +  }, +}, +, +ext.version = VersionProperties.elasticsearch, +, +// This project pulls a snapshot version of the ML cpp artifacts and sets that as the artifact, +// for this project so it can be used with dependency substitution. We do not use gradle's, +// handling of S3 as a maven repo due to the dynamically generated creds being slow to propagate,, +// necessitating retries., +, +void checkJavaVersion() {, +  /**, +   * The Elastic Secrets vault is served via HTTPS with a Let's Encrypt certificate. The root certificates that cross-signed the Let's, +   * Encrypt certificates were not trusted by the JDK until 8u101. Therefore, we enforce that the JDK is at least 8u101 here., +   */, +  final String javaVersion = System.getProperty('java.version'), +  final String javaVendor = System.getProperty('java.vendor'), +  def matcher = javaVersion =~ /1\.8\.0(?:_(\d+))?/, +  boolean matches = matcher.matches(), +  assert matches, +, +  final int update, +  if (matcher.group(1) == null) {, +    update = 0, +  } else {, +    update = matcher.group(1).toInteger(), +  }, +  if (update < 101) {, +    throw new GradleException("JDK ${javaVendor} ${javaVersion} does not have necessary root certificates " +, +            "(https://bugs.openjdk.java.net/browse/JDK-8154757), update your JDK to at least JDK 8u101+"), +  }, +}, +, +void setupVaultAuthMethod() {, +  String VAULT_BASE_URL = 'https://secrets.elastic.co:8200', +  String VAULT_ROLE_ID = "8e90dd88-5a8e-9c12-0da9-5439f293ff97", +  String VAULT_SECRET_ID = System.env.VAULT_SECRET_ID, +  // get an authentication token with vault, +  String homePath = System.properties['user.home'], +  File githubToken = file("${homePath}/.elastic/github.token"), +  String vaultAuthBody = null, +  URL vaultUrl = null, +  if (githubToken.exists()) {, +    try {, +      Set<PosixFilePermission> perms = Files.getPosixFilePermissions(githubToken.toPath()), +      if (perms.equals(PosixFilePermissions.fromString("rw-------")) == false) {, +        throw new GradleException('github.token must have 600 permissions'), +      }]