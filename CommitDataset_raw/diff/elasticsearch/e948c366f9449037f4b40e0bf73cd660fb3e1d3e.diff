[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/CacheRecycler.java, +import org.elasticsearch.common.util.concurrent.jsr166y.LinkedTransferQueue;, +import java.util.Queue;, +        hashMap.clear();, +        doubleObjectHashMap.clear();, +        longObjectHashMap.clear();, +        longLongHashMap.clear();, +        intIntHashMap.clear();, +        floatIntHashMap.clear();, +        doubleIntHashMap.clear();, +        shortIntHashMap.clear();, +        longIntHashMap.clear();, +        objectIntHashMap.clear();, +        objectArray.clear();, +        intArray.clear();, +    }, +, +    static class SoftWrapper<T> {, +        private SoftReference<T> ref;, +, +        public SoftWrapper() {, +        }, +, +        public void set(T ref) {, +            this.ref = new SoftReference<T>(ref);, +        }, +, +        public T get() {, +            return ref == null ? null : ref.get();, +        }, +, +        public void clear() {, +            ref = null;, +        }, +    private static SoftWrapper<Queue<ExtTHashMap>> hashMap = new SoftWrapper<Queue<ExtTHashMap>>();, +        Queue<ExtTHashMap> ref = hashMap.get();, +        if (ref == null) {, +            return new ExtTHashMap<K, V>();, +        ExtTHashMap map = ref.poll();, +        if (map == null) {, +            return new ExtTHashMap<K, V>();, +        Queue<ExtTHashMap> ref = hashMap.get();, +        if (ref == null) {, +            ref = new LinkedTransferQueue<ExtTHashMap>();, +            hashMap.set(ref);, +        map.clear();, +        ref.add(map);, +    private static SoftWrapper<Queue<ExtTDoubleObjectHashMap>> doubleObjectHashMap = new SoftWrapper<Queue<ExtTDoubleObjectHashMap>>();, +        Queue<ExtTDoubleObjectHashMap> ref = doubleObjectHashMap.get();, +        if (ref == null) {, +        ExtTDoubleObjectHashMap map = ref.poll();, +        if (map == null) {, +            return new ExtTDoubleObjectHashMap();, +        }, +        Queue<ExtTDoubleObjectHashMap> ref = doubleObjectHashMap.get();, +        if (ref == null) {, +            ref = new LinkedTransferQueue<ExtTDoubleObjectHashMap>();, +            doubleObjectHashMap.set(ref);, +        map.clear();, +        ref.add(map);, +    private static SoftWrapper<Queue<ExtTLongObjectHashMap>> longObjectHashMap = new SoftWrapper<Queue<ExtTLongObjectHashMap>>();, +        Queue<ExtTLongObjectHashMap> ref = longObjectHashMap.get();, +        if (ref == null) {, +        ExtTLongObjectHashMap map = ref.poll();, +        if (map == null) {, +            return new ExtTLongObjectHashMap();, +        }, +        Queue<ExtTLongObjectHashMap> ref = longObjectHashMap.get();, +        if (ref == null) {, +            ref = new LinkedTransferQueue<ExtTLongObjectHashMap>();, +            longObjectHashMap.set(ref);, +        map.clear();, +        ref.add(map);, +    private static SoftWrapper<Queue<TLongLongHashMap>> longLongHashMap = new SoftWrapper<Queue<TLongLongHashMap>>();, +        Queue<TLongLongHashMap> ref = longLongHashMap.get();, +        if (ref == null) {, +        TLongLongHashMap map = ref.poll();, +        if (map == null) {, +            return new TLongLongHashMap();, +        }, +        Queue<TLongLongHashMap> ref = longLongHashMap.get();, +        if (ref == null) {, +            ref = new LinkedTransferQueue<TLongLongHashMap>();, +            longLongHashMap.set(ref);, +        map.clear();, +        ref.add(map);, +    private static SoftWrapper<Queue<TIntIntHashMap>> intIntHashMap = new SoftWrapper<Queue<TIntIntHashMap>>();, +        Queue<TIntIntHashMap> ref = intIntHashMap.get();, +        if (ref == null) {, +        TIntIntHashMap map = ref.poll();, +        if (map == null) {, +            return new TIntIntHashMap();, +        }, +        Queue<TIntIntHashMap> ref = intIntHashMap.get();, +        if (ref == null) {, +            ref = new LinkedTransferQueue<TIntIntHashMap>();, +            intIntHashMap.set(ref);, +        map.clear();, +        ref.add(map);, +    private static SoftWrapper<Queue<TFloatIntHashMap>> floatIntHashMap = new SoftWrapper<Queue<TFloatIntHashMap>>();]