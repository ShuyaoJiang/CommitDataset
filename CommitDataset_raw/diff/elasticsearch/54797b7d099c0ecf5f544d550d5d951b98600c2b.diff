[+++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public void setScriptService(ScriptService scriptService) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public void setScriptService(ScriptService scriptService) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry.Builder processorsRegistryBuilder, ScriptService scriptService) {, +        TemplateService templateService = new InternalTemplateService(scriptService);, +        this.processorRegistry = processorsRegistryBuilder.build(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public void setScriptService(ScriptService scriptService) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry.Builder processorsRegistryBuilder, ScriptService scriptService) {, +        TemplateService templateService = new InternalTemplateService(scriptService);, +        this.processorRegistry = processorsRegistryBuilder.build(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +import org.elasticsearch.ingest.core.ProcessorInfo;, +import java.util.function.BiFunction;, +    private ProcessorsRegistry(TemplateService templateService,, +                               Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers) {, +        for (Map.Entry<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> entry : providers.entrySet()) {, +            processorFactories.put(entry.getKey(), entry.getValue().apply(templateService, this));, +        private final Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers = new HashMap<>();, +        public void registerProcessor(String name, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> provider) {, +            BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> previous = this.providers.putIfAbsent(name, provider);, +        public ProcessorsRegistry build(TemplateService templateService) {, +            return new ProcessorsRegistry(templateService, providers);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public void setScriptService(ScriptService scriptService) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry.Builder processorsRegistryBuilder, ScriptService scriptService) {, +        TemplateService templateService = new InternalTemplateService(scriptService);, +        this.processorRegistry = processorsRegistryBuilder.build(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +import org.elasticsearch.ingest.core.ProcessorInfo;, +import java.util.function.BiFunction;, +    private ProcessorsRegistry(TemplateService templateService,, +                               Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers) {, +        for (Map.Entry<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> entry : providers.entrySet()) {, +            processorFactories.put(entry.getKey(), entry.getValue().apply(templateService, this));, +        private final Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers = new HashMap<>();, +        public void registerProcessor(String name, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> provider) {, +            BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> previous = this.providers.putIfAbsent(name, provider);, +        public ProcessorsRegistry build(TemplateService templateService) {, +            return new ProcessorsRegistry(templateService, providers);, +++ b/core/src/main/java/org/elasticsearch/node/NodeModule.java, +import org.elasticsearch.ingest.core.TemplateService;, +import java.util.function.BiFunction;, +    public void registerProcessor(String type, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> provider) {, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public void setScriptService(ScriptService scriptService) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry.Builder processorsRegistryBuilder, ScriptService scriptService) {, +        TemplateService templateService = new InternalTemplateService(scriptService);, +        this.processorRegistry = processorsRegistryBuilder.build(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +import org.elasticsearch.ingest.core.ProcessorInfo;, +import java.util.function.BiFunction;, +    private ProcessorsRegistry(TemplateService templateService,, +                               Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers) {, +        for (Map.Entry<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> entry : providers.entrySet()) {, +            processorFactories.put(entry.getKey(), entry.getValue().apply(templateService, this));, +        private final Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers = new HashMap<>();, +        public void registerProcessor(String name, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> provider) {, +            BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> previous = this.providers.putIfAbsent(name, provider);, +        public ProcessorsRegistry build(TemplateService templateService) {, +            return new ProcessorsRegistry(templateService, providers);, +++ b/core/src/main/java/org/elasticsearch/node/NodeModule.java, +import org.elasticsearch.ingest.core.TemplateService;, +import java.util.function.BiFunction;, +    public void registerProcessor(String type, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> provider) {, +++ b/core/src/main/java/org/elasticsearch/node/service/NodeService.java, +        this.ingestService.setScriptService(scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public void setScriptService(ScriptService scriptService) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry.Builder processorsRegistryBuilder, ScriptService scriptService) {, +        TemplateService templateService = new InternalTemplateService(scriptService);, +        this.processorRegistry = processorsRegistryBuilder.build(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +import org.elasticsearch.ingest.core.ProcessorInfo;, +import java.util.function.BiFunction;, +    private ProcessorsRegistry(TemplateService templateService,, +                               Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers) {, +        for (Map.Entry<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> entry : providers.entrySet()) {, +            processorFactories.put(entry.getKey(), entry.getValue().apply(templateService, this));, +        private final Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers = new HashMap<>();, +        public void registerProcessor(String name, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> provider) {, +            BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> previous = this.providers.putIfAbsent(name, provider);, +        public ProcessorsRegistry build(TemplateService templateService) {, +            return new ProcessorsRegistry(templateService, providers);, +++ b/core/src/main/java/org/elasticsearch/node/NodeModule.java, +import org.elasticsearch.ingest.core.TemplateService;, +import java.util.function.BiFunction;, +    public void registerProcessor(String type, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> provider) {]