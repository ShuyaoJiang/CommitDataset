[+++ b/docs/en/security/securing-communications/enabling-cipher-suites.asciidoc, +After installation, all cipher suites in the JCE are available for use but requires, +configuration in order to use them. To enable the use of stronger cipher suites with, +{security}, configure the `cipher_suites` parameter. See the, +{ref}/security-settings.html#ssl-tls-settings[Configuration Parameters for TLS/SSL], +++ b/docs/en/security/securing-communications/enabling-cipher-suites.asciidoc, +After installation, all cipher suites in the JCE are available for use but requires, +configuration in order to use them. To enable the use of stronger cipher suites with, +{security}, configure the `cipher_suites` parameter. See the, +{ref}/security-settings.html#ssl-tls-settings[Configuration Parameters for TLS/SSL], +++ b/docs/en/settings/security-settings.asciidoc, +`TLS_RSA_WITH_AES_128_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA`. If the _Java Cryptography Extension (JCE) Unlimited Strength, +Jurisdiction Policy Files_ has been installed, the default value also includes `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`,, +`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`,, +`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_256_CBC_SHA`., +++ b/docs/en/security/securing-communications/enabling-cipher-suites.asciidoc, +After installation, all cipher suites in the JCE are available for use but requires, +configuration in order to use them. To enable the use of stronger cipher suites with, +{security}, configure the `cipher_suites` parameter. See the, +{ref}/security-settings.html#ssl-tls-settings[Configuration Parameters for TLS/SSL], +++ b/docs/en/settings/security-settings.asciidoc, +`TLS_RSA_WITH_AES_128_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA`. If the _Java Cryptography Extension (JCE) Unlimited Strength, +Jurisdiction Policy Files_ has been installed, the default value also includes `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`,, +`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`,, +`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_256_CBC_SHA`., +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +import javax.crypto.Cipher;, +import java.security.NoSuchAlgorithmException;, +    public static final List<String> DEFAULT_CIPHERS;, +, +    static {, +        List<String> ciphers = Arrays.asList("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",, +        try {, +            final boolean use256Bit = Cipher.getMaxAllowedKeyLength("AES") > 128;, +            if (use256Bit) {, +                List<String> strongerCiphers = new ArrayList<>(ciphers.size() * 2);, +                strongerCiphers.addAll(Arrays.asList("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",, +                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",, +                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA256", "TLS_RSA_WITH_AES_256_CBC_SHA"));, +                strongerCiphers.addAll(ciphers);, +                ciphers = strongerCiphers;, +            }, +        } catch (NoSuchAlgorithmException e) {, +            // ignore it here - there will be issues elsewhere and its not nice to throw in a static initializer, +        }, +, +        DEFAULT_CIPHERS = ciphers;, +    }, +, +++ b/docs/en/security/securing-communications/enabling-cipher-suites.asciidoc, +After installation, all cipher suites in the JCE are available for use but requires, +configuration in order to use them. To enable the use of stronger cipher suites with, +{security}, configure the `cipher_suites` parameter. See the, +{ref}/security-settings.html#ssl-tls-settings[Configuration Parameters for TLS/SSL], +++ b/docs/en/settings/security-settings.asciidoc, +`TLS_RSA_WITH_AES_128_CBC_SHA256`, `TLS_RSA_WITH_AES_128_CBC_SHA`. If the _Java Cryptography Extension (JCE) Unlimited Strength, +Jurisdiction Policy Files_ has been installed, the default value also includes `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`,, +`TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`,, +`TLS_RSA_WITH_AES_256_CBC_SHA256`, `TLS_RSA_WITH_AES_256_CBC_SHA`., +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +import javax.crypto.Cipher;, +import java.security.NoSuchAlgorithmException;, +    public static final List<String> DEFAULT_CIPHERS;, +, +    static {, +        List<String> ciphers = Arrays.asList("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",, +        try {, +            final boolean use256Bit = Cipher.getMaxAllowedKeyLength("AES") > 128;, +            if (use256Bit) {, +                List<String> strongerCiphers = new ArrayList<>(ciphers.size() * 2);, +                strongerCiphers.addAll(Arrays.asList("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",, +                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",, +                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA256", "TLS_RSA_WITH_AES_256_CBC_SHA"));, +                strongerCiphers.addAll(ciphers);, +                ciphers = strongerCiphers;, +            }, +        } catch (NoSuchAlgorithmException e) {, +            // ignore it here - there will be issues elsewhere and its not nice to throw in a static initializer, +        }, +, +        DEFAULT_CIPHERS = ciphers;, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/XPackSettingsTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack;, +, +import org.elasticsearch.test.ESTestCase;, +, +import javax.crypto.Cipher;, +, +import static org.hamcrest.Matchers.hasItem;, +import static org.hamcrest.Matchers.not;, +, +public class XPackSettingsTests extends ESTestCase {, +]