[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +        private final long lastTranslogLength;, +        public Snapshot(SnapshotIndexCommit indexCommit, Translog.Snapshot translogSnapshot, long lastIndexVersion, long lastTranslogId, long lastTranslogLength) {, +            this.lastTranslogLength = lastTranslogLength;, +            return translogSnapshot.length() > lastTranslogLength;, +        public long lastTranslogPosition() {, +            return lastTranslogLength;, +            private long translogLength;, +            public Translog(long translogId, long translogLength, int numberOfOperations, ByteSizeValue totalSize) {, +                this.translogLength = translogLength;, +            public long translogLength() {, +                return translogLength;, +            }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +        private final long lastTranslogLength;, +        public Snapshot(SnapshotIndexCommit indexCommit, Translog.Snapshot translogSnapshot, long lastIndexVersion, long lastTranslogId, long lastTranslogLength) {, +            this.lastTranslogLength = lastTranslogLength;, +            return translogSnapshot.length() > lastTranslogLength;, +        public long lastTranslogPosition() {, +            return lastTranslogLength;, +            private long translogLength;, +            public Translog(long translogId, long translogLength, int numberOfOperations, ByteSizeValue totalSize) {, +                this.translogLength = translogLength;, +            public long translogLength() {, +                return translogLength;, +            }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +import org.elasticsearch.index.shard.*;, +    private volatile long lastTranslogLength;, +            lastTranslogLength = recoveryStatus.translog().translogLength();, +        } catch (IndexShardGatewayRecoveryException e) {, +            if ((e.getCause() instanceof IndexShardClosedException) || (e.getCause() instanceof IndexShardNotStartedException)) {, +                // got closed on us, just ignore this recovery, +                throw new IgnoreGatewayRecoveryException(shardId, "shard closed");, +            }, +            throw e;, +        } catch (IndexShardClosedException e) {, +            // got closed on us, just ignore this recovery, +            throw new IgnoreGatewayRecoveryException(shardId, "shard closed");, +        } catch (IndexShardNotStartedException e) {, +            // got closed on us, just ignore this recovery, +            throw new IgnoreGatewayRecoveryException(shardId, "shard closed");, +                    if (lastIndexVersion != snapshotIndexCommit.getVersion() || lastTranslogId != translogSnapshot.translogId() || lastTranslogLength != translogSnapshot.length()) {, +                                shardGateway.snapshot(new IndexShardGateway.Snapshot(snapshotIndexCommit, translogSnapshot, lastIndexVersion, lastTranslogId, lastTranslogLength));, +                        lastTranslogLength = translogSnapshot.length();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +        private final long lastTranslogLength;, +        public Snapshot(SnapshotIndexCommit indexCommit, Translog.Snapshot translogSnapshot, long lastIndexVersion, long lastTranslogId, long lastTranslogLength) {, +            this.lastTranslogLength = lastTranslogLength;, +            return translogSnapshot.length() > lastTranslogLength;, +        public long lastTranslogPosition() {, +            return lastTranslogLength;, +            private long translogLength;, +            public Translog(long translogId, long translogLength, int numberOfOperations, ByteSizeValue totalSize) {, +                this.translogLength = translogLength;, +            public long translogLength() {, +                return translogLength;, +            }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +import org.elasticsearch.index.shard.*;, +    private volatile long lastTranslogLength;, +            lastTranslogLength = recoveryStatus.translog().translogLength();, +        } catch (IndexShardGatewayRecoveryException e) {, +            if ((e.getCause() instanceof IndexShardClosedException) || (e.getCause() instanceof IndexShardNotStartedException)) {, +                // got closed on us, just ignore this recovery, +                throw new IgnoreGatewayRecoveryException(shardId, "shard closed");, +            }, +            throw e;, +        } catch (IndexShardClosedException e) {, +            // got closed on us, just ignore this recovery, +            throw new IgnoreGatewayRecoveryException(shardId, "shard closed");, +        } catch (IndexShardNotStartedException e) {, +            // got closed on us, just ignore this recovery, +            throw new IgnoreGatewayRecoveryException(shardId, "shard closed");, +                    if (lastIndexVersion != snapshotIndexCommit.getVersion() || lastTranslogId != translogSnapshot.translogId() || lastTranslogLength != translogSnapshot.length()) {, +                                shardGateway.snapshot(new IndexShardGateway.Snapshot(snapshotIndexCommit, translogSnapshot, lastIndexVersion, lastTranslogId, lastTranslogLength));, +                        lastTranslogLength = translogSnapshot.length();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import org.elasticsearch.common.io.FastByteArrayOutputStream;, +import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;, +import org.elasticsearch.index.translog.TranslogStreams;, +import java.lang.ref.SoftReference;, +    private volatile SoftReference<FastByteArrayOutputStream> cachedBos = new SoftReference<FastByteArrayOutputStream>(new FastByteArrayOutputStream());, +, +                    if (!snapshot.newTranslogCreated()) {, +                        translogSnapshot.seekForward(snapshot.lastTranslogPosition());, +                    FastByteArrayOutputStream bos = cachedBos.get();, +                    if (bos == null) {, +                        bos = new FastByteArrayOutputStream();, +                        cachedBos = new SoftReference<FastByteArrayOutputStream>(bos);, +                    int totalNumberOfOperations = 0;, +                    OutputStreamStreamOutput bosOs = new OutputStreamStreamOutput(bos);, +                    while (translogSnapshot.hasNext()) {, +                        bos.reset();, +                        TranslogStreams.writeTranslogOperation(bosOs, translogSnapshot.next());, +                        bosOs.flush();, +                        os.writeVInt(bos.size());]