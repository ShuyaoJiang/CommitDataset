[+++ b/core/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +        return hasField(path, false);, +    }, +, +    /**, +     * Checks whether the document contains a value for the provided path, +     * @param path The path within the document in dot-notation, +     * @param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range, +     * @return true if the document contains a value for the field, false otherwise, +     * @throws IllegalArgumentException if the path is null, empty or invalid., +     */, +    public boolean hasField(String path, boolean failOutOfRange) {, +                        if (failOutOfRange) {, +                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +, +                                    list.size() + "] as part of path [" + path +"]");, +                        } else {, +                    }, +                if (index >= 0 && index < list.size()) {, +                    return true;, +                } else {, +                    if (failOutOfRange) {, +                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +, +                                list.size() + "] as part of path [" + path +"]");, +                    } else {, +                        return false;, +                    }, +                }, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +        return hasField(path, false);, +    }, +, +    /**, +     * Checks whether the document contains a value for the provided path, +     * @param path The path within the document in dot-notation, +     * @param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range, +     * @return true if the document contains a value for the field, false otherwise, +     * @throws IllegalArgumentException if the path is null, empty or invalid., +     */, +    public boolean hasField(String path, boolean failOutOfRange) {, +                        if (failOutOfRange) {, +                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +, +                                    list.size() + "] as part of path [" + path +"]");, +                        } else {, +                    }, +                if (index >= 0 && index < list.size()) {, +                    return true;, +                } else {, +                    if (failOutOfRange) {, +                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +, +                                list.size() + "] as part of path [" + path +"]");, +                    } else {, +                        return false;, +                    }, +                }, +++ b/core/src/test/java/org/elasticsearch/ingest/IngestDocumentTests.java, +    public void testListHasFieldIndexOutOfBounds_fail() {, +        assertTrue(ingestDocument.hasField("list.0", true));, +        assertTrue(ingestDocument.hasField("list.1", true));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> ingestDocument.hasField("list.2", true));, +        assertThat(e.getMessage(), equalTo("[2] is out of bounds for array with length [2] as part of path [list.2]"));, +        e = expectThrows(IllegalArgumentException.class, () -> ingestDocument.hasField("list.10", true));, +        assertThat(e.getMessage(), equalTo("[10] is out of bounds for array with length [2] as part of path [list.10]"));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +        return hasField(path, false);, +    }, +, +    /**, +     * Checks whether the document contains a value for the provided path, +     * @param path The path within the document in dot-notation, +     * @param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range, +     * @return true if the document contains a value for the field, false otherwise, +     * @throws IllegalArgumentException if the path is null, empty or invalid., +     */, +    public boolean hasField(String path, boolean failOutOfRange) {, +                        if (failOutOfRange) {, +                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +, +                                    list.size() + "] as part of path [" + path +"]");, +                        } else {, +                    }, +                if (index >= 0 && index < list.size()) {, +                    return true;, +                } else {, +                    if (failOutOfRange) {, +                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +, +                                list.size() + "] as part of path [" + path +"]");, +                    } else {, +                        return false;, +                    }, +                }, +++ b/core/src/test/java/org/elasticsearch/ingest/IngestDocumentTests.java, +    public void testListHasFieldIndexOutOfBounds_fail() {, +        assertTrue(ingestDocument.hasField("list.0", true));, +        assertTrue(ingestDocument.hasField("list.1", true));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> ingestDocument.hasField("list.2", true));, +        assertThat(e.getMessage(), equalTo("[2] is out of bounds for array with length [2] as part of path [list.2]"));, +        e = expectThrows(IllegalArgumentException.class, () -> ingestDocument.hasField("list.10", true));, +        assertThat(e.getMessage(), equalTo("[10] is out of bounds for array with length [2] as part of path [list.10]"));, +    }]