[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/jsr166e/ConcurrentHashMapV8.java, +/*, + * Written by Doug Lea with assistance from members of JCP JSR-166, + * Expert Group and released to the public domain, as explained at, + * http://creativecommons.org/publicdomain/zero/1.0/, + */, +, +// Snapshot Tue Jun  5 14:56:09 2012  Doug Lea  (dl at altair), +, +package jsr166e;, +import jsr166e.LongAdder;, +import jsr166y.ThreadLocalRandom;, +, +import java.util.Arrays;, +import java.util.Map;, +import java.util.Set;, +import java.util.Collection;, +import java.util.AbstractMap;, +import java.util.AbstractSet;, +import java.util.AbstractCollection;, +import java.util.Hashtable;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.Enumeration;, +import java.util.ConcurrentModificationException;, +import java.util.NoSuchElementException;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.locks.LockSupport;, +import java.util.concurrent.locks.AbstractQueuedSynchronizer;, +import java.io.Serializable;, +, +/**, + * A hash table supporting full concurrency of retrievals and, + * high expected concurrency for updates. This class obeys the, + * same functional specification as {@link java.util.Hashtable}, and, + * includes versions of methods corresponding to each method of, + * {@code Hashtable}. However, even though all operations are, + * thread-safe, retrieval operations do <em>not</em> entail locking,, + * and there is <em>not</em> any support for locking the entire table, + * in a way that prevents all access.  This class is fully, + * interoperable with {@code Hashtable} in programs that rely on its, + * thread safety but not on its synchronization details., + *, + * <p> Retrieval operations (including {@code get}) generally do not, + * block, so may overlap with update operations (including {@code put}, + * and {@code remove}). Retrievals reflect the results of the most, + * recently <em>completed</em> update operations holding upon their, + * onset.  For aggregate operations such as {@code putAll} and {@code, + * clear}, concurrent retrievals may reflect insertion or removal of, + * only some entries.  Similarly, Iterators and Enumerations return, + * elements reflecting the state of the hash table at some point at or, + * since the creation of the iterator/enumeration.  They do, + * <em>not</em> throw {@link ConcurrentModificationException}., + * However, iterators are designed to be used by only one thread at a, + * time.  Bear in mind that the results of aggregate status methods, + * including {@code size}, {@code isEmpty}, and {@code containsValue}, + * are typically useful only when a map is not undergoing concurrent, + * updates in other threads.  Otherwise the results of these methods, + * reflect transient states that may be adequate for monitoring, + * or estimation purposes, but not for program control., + *, + * <p> The table is dynamically expanded when there are too many, + * collisions (i.e., keys that have distinct hash codes but fall into, + * the same slot modulo the table size), with the expected average, + * effect of maintaining roughly two bins per mapping (corresponding, + * to a 0.75 load factor threshold for resizing). There may be much, + * variance around this average as mappings are added and removed, but, + * overall, this maintains a commonly accepted time/space tradeoff for, + * hash tables.  However, resizing this or any other kind of hash, + * table may be a relatively slow operation. When possible, it is a, + * good idea to provide a size estimate as an optional {@code, + * initialCapacity} constructor argument. An additional optional, + * {@code loadFactor} constructor argument provides a further means of, + * customizing initial table capacity by specifying the table density, + * to be used in calculating the amount of space to allocate for the, + * given number of elements.  Also, for compatibility with previous, + * versions of this class, constructors may optionally specify an, + * expected {@code concurrencyLevel} as an additional hint for, + * internal sizing.  Note that using many keys with exactly the same, + * {@code hashCode()} is a sure way to slow down performance of any, + * hash table., + *, + * <p>This class and its views and iterators implement all of the, + * <em>optional</em> methods of the {@link Map} and {@link Iterator}, + * interfaces., + *, + * <p> Like {@link Hashtable} but unlike {@link HashMap}, this class, + * does <em>not</em> allow {@code null} to be used as a key or value., + *, + * <p>This class is a member of the, + * <a href="{@docRoot}/../technotes/guides/collections/index.html">, + * Java Collections Framework</a>., + *, + * <p><em>jsr166e note: This class is a candidate replacement for, + * java.util.concurrent.ConcurrentHashMap.<em>, + *, + * @since 1.5, + * @author Doug Lea]