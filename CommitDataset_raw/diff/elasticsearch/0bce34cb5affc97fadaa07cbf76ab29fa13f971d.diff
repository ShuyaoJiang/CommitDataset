[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +public class SearchPhaseController extends AbstractComponent {, +    private final boolean optimizeSingleShard;, +, +    @Inject public SearchPhaseController(Settings settings, FacetProcessors facetProcessors) {, +        super(settings);, +        this.optimizeSingleShard = componentSettings.getAsBoolean("optimize_single_shard", true);, +    }, +, +    public boolean optimizeSingleShard() {, +        return optimizeSingleShard;, +        if (optimizeSingleShard) {, +            boolean canOptimize = false;, +            QuerySearchResult result = null;, +            if (results1.size() == 1) {, +                canOptimize = true;, +                result = results1.iterator().next().queryResult();, +            } else {, +                // lets see if we only got hits from a single shard, if so, we can optimize..., +                for (QuerySearchResultProvider queryResult : results1) {, +                    if (queryResult.queryResult().topDocs().scoreDocs.length > 0) {, +                        if (result != null) { // we already have one, can't really optimize, +                            canOptimize = false;, +                            break;, +                        }, +                        canOptimize = true;, +                        result = queryResult.queryResult();, +                    }, +                }, +            }, +            if (canOptimize) {, +                ScoreDoc[] scoreDocs = result.topDocs().scoreDocs;, +                if (scoreDocs.length < result.from()) {, +                    return EMPTY;, +                }, +                int resultDocsSize = result.size();, +                if ((scoreDocs.length - result.from()) < resultDocsSize) {, +                    resultDocsSize = scoreDocs.length - result.from();, +                }, +                if (result.topDocs() instanceof TopFieldDocs) {, +                    ShardDoc[] docs = new ShardDoc[resultDocsSize];, +                    for (int i = 0; i < resultDocsSize; i++) {, +                        ScoreDoc scoreDoc = scoreDocs[result.from() + i];, +                        docs[i] = new ShardFieldDoc(result.shardTarget(), scoreDoc.doc, scoreDoc.score, ((FieldDoc) scoreDoc).fields);, +                    }, +                    return docs;, +                } else {, +                    ShardDoc[] docs = new ShardDoc[resultDocsSize];, +                    for (int i = 0; i < resultDocsSize; i++) {, +                        ScoreDoc scoreDoc = scoreDocs[result.from() + i];, +                        docs[i] = new ShardScoreDoc(result.shardTarget(), scoreDoc.doc, scoreDoc.score);, +                    }, +                    return docs;, +                }, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +public class SearchPhaseController extends AbstractComponent {, +    private final boolean optimizeSingleShard;, +, +    @Inject public SearchPhaseController(Settings settings, FacetProcessors facetProcessors) {, +        super(settings);, +        this.optimizeSingleShard = componentSettings.getAsBoolean("optimize_single_shard", true);, +    }, +, +    public boolean optimizeSingleShard() {, +        return optimizeSingleShard;, +        if (optimizeSingleShard) {, +            boolean canOptimize = false;, +            QuerySearchResult result = null;, +            if (results1.size() == 1) {, +                canOptimize = true;, +                result = results1.iterator().next().queryResult();, +            } else {, +                // lets see if we only got hits from a single shard, if so, we can optimize..., +                for (QuerySearchResultProvider queryResult : results1) {, +                    if (queryResult.queryResult().topDocs().scoreDocs.length > 0) {, +                        if (result != null) { // we already have one, can't really optimize, +                            canOptimize = false;, +                            break;, +                        }, +                        canOptimize = true;, +                        result = queryResult.queryResult();, +                    }, +                }, +            }, +            if (canOptimize) {, +                ScoreDoc[] scoreDocs = result.topDocs().scoreDocs;, +                if (scoreDocs.length < result.from()) {, +                    return EMPTY;, +                }, +                int resultDocsSize = result.size();, +                if ((scoreDocs.length - result.from()) < resultDocsSize) {, +                    resultDocsSize = scoreDocs.length - result.from();, +                }]