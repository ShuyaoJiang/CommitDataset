[+++ b/src/main/java/org/elasticsearch/shield/authc/ldap/LdapModule.java, +            /* This socket factory needs to be configured before any LDAP connections are created.  LDAP configuration, +            for JNDI invokes a static getSocketFactory method from LdapSslSocketFactory.  This doesn't mesh well with, +            guice so we set the factory here during startup.  See LdapSslSocketFactory for more details. */, +            LdapSslSocketFactory.init(settings);, +, +++ b/src/main/java/org/elasticsearch/shield/authc/ldap/LdapModule.java, +            /* This socket factory needs to be configured before any LDAP connections are created.  LDAP configuration, +            for JNDI invokes a static getSocketFactory method from LdapSslSocketFactory.  This doesn't mesh well with, +            guice so we set the factory here during startup.  See LdapSslSocketFactory for more details. */, +            LdapSslSocketFactory.init(settings);, +, +++ b/src/main/java/org/elasticsearch/shield/authc/ldap/LdapSslSocketFactory.java, + * factory that is initiated by the settings constructor.  JNDI uses reflection to call the getDefault() static method, + * then checks to make sure that the factory returned is an LdapSslSocketFactory.  Because of this we have to wrap, + * the socket factory, + *, + * http://docs.oracle.com/javase/tutorial/jndi/ldap/ssl.html, +, +    private static LdapSslSocketFactory instance;, +     * This should only be invoked once to establish a static instance that will be used for each constructor., +    public static void init(Settings settings) {, +        if (instance != null) {, +, +        Settings componentSettings = settings.getComponentSettings(LdapSslSocketFactory.class);, +        instance = new LdapSslSocketFactory(sslConfig.createSSLSocketFactory());, +        assert instance != null;, +        return instance;, +        return instance != null;, +    final private SocketFactory socketFactory;, +, +    private LdapSslSocketFactory(SocketFactory wrappedSocketFactory){, +        socketFactory = wrappedSocketFactory;, +    //The following methods are all wrappers around the instance of socketFactory, +     * If one of the ldapUrls are SSL this will set the LdapSslSocketFactory as a socket provider on the builder, +    public static void configureJndiSSL(String[] ldapUrls, ImmutableMap.Builder<String, Serializable> builder) {, +            assert instance != null : "LdapSslSocketFactory not initialized and won't be used for LDAP connections";, +++ b/src/main/java/org/elasticsearch/shield/authc/ldap/LdapModule.java, +            /* This socket factory needs to be configured before any LDAP connections are created.  LDAP configuration, +            for JNDI invokes a static getSocketFactory method from LdapSslSocketFactory.  This doesn't mesh well with, +            guice so we set the factory here during startup.  See LdapSslSocketFactory for more details. */, +            LdapSslSocketFactory.init(settings);, +, +++ b/src/main/java/org/elasticsearch/shield/authc/ldap/LdapSslSocketFactory.java, + * factory that is initiated by the settings constructor.  JNDI uses reflection to call the getDefault() static method, + * then checks to make sure that the factory returned is an LdapSslSocketFactory.  Because of this we have to wrap, + * the socket factory, + *, + * http://docs.oracle.com/javase/tutorial/jndi/ldap/ssl.html, +, +    private static LdapSslSocketFactory instance;, +     * This should only be invoked once to establish a static instance that will be used for each constructor., +    public static void init(Settings settings) {, +        if (instance != null) {, +, +        Settings componentSettings = settings.getComponentSettings(LdapSslSocketFactory.class);, +        instance = new LdapSslSocketFactory(sslConfig.createSSLSocketFactory());, +        assert instance != null;, +        return instance;, +        return instance != null;, +    final private SocketFactory socketFactory;, +, +    private LdapSslSocketFactory(SocketFactory wrappedSocketFactory){, +        socketFactory = wrappedSocketFactory;, +    //The following methods are all wrappers around the instance of socketFactory, +     * If one of the ldapUrls are SSL this will set the LdapSslSocketFactory as a socket provider on the builder, +    public static void configureJndiSSL(String[] ldapUrls, ImmutableMap.Builder<String, Serializable> builder) {, +            assert instance != null : "LdapSslSocketFactory not initialized and won't be used for LDAP connections";, +++ b/src/test/java/org/elasticsearch/shield/authc/ldap/ActiveDirectoryFactoryTests.java, +import static org.hamcrest.Matchers.*;, +@Network, +        LdapSslSocketFactory.init(ImmutableSettings.builder(), +    @Test, +    @Test, +    @Test, +    @Test, +++ b/src/main/java/org/elasticsearch/shield/authc/ldap/LdapModule.java, +            /* This socket factory needs to be configured before any LDAP connections are created.  LDAP configuration, +            for JNDI invokes a static getSocketFactory method from LdapSslSocketFactory.  This doesn't mesh well with, +            guice so we set the factory here during startup.  See LdapSslSocketFactory for more details. */, +            LdapSslSocketFactory.init(settings);, +, +++ b/src/main/java/org/elasticsearch/shield/authc/ldap/LdapSslSocketFactory.java, + * factory that is initiated by the settings constructor.  JNDI uses reflection to call the getDefault() static method, + * then checks to make sure that the factory returned is an LdapSslSocketFactory.  Because of this we have to wrap, + * the socket factory, + *, + * http://docs.oracle.com/javase/tutorial/jndi/ldap/ssl.html, +, +    private static LdapSslSocketFactory instance;, +     * This should only be invoked once to establish a static instance that will be used for each constructor., +    public static void init(Settings settings) {, +        if (instance != null) {, +, +        Settings componentSettings = settings.getComponentSettings(LdapSslSocketFactory.class);, +        instance = new LdapSslSocketFactory(sslConfig.createSSLSocketFactory());, +        assert instance != null;, +        return instance;, +        return instance != null;, +    final private SocketFactory socketFactory;]