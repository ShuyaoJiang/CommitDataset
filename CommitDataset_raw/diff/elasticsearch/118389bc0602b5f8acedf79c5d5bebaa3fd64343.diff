[+++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestWatchServiceAction.java, +    protected RestWatchServiceAction(Settings settings, RestController controller, Client client) {, +        controller.registerHandler(RestRequest.Method.PUT, URI_BASE + "/_start", new StartRestHandler(settings, controller, client));, +        controller.registerHandler(RestRequest.Method.PUT, URI_BASE + "/_stop", new StopRestHandler(settings, controller, client));, +        client.watcherService(new WatcherServiceRequest().restart(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +    static class StartRestHandler extends WatcherRestHandler {, +        public StartRestHandler(Settings settings, RestController controller, Client client) {, +        protected void handleRequest(RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +            client.watcherService(new WatcherServiceRequest().start(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +    static class StopRestHandler extends WatcherRestHandler {, +        public StopRestHandler(Settings settings, RestController controller, Client client) {, +        protected void handleRequest(RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +            client.watcherService(new WatcherServiceRequest().stop(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestWatchServiceAction.java, +    protected RestWatchServiceAction(Settings settings, RestController controller, Client client) {, +        controller.registerHandler(RestRequest.Method.PUT, URI_BASE + "/_start", new StartRestHandler(settings, controller, client));, +        controller.registerHandler(RestRequest.Method.PUT, URI_BASE + "/_stop", new StopRestHandler(settings, controller, client));, +        client.watcherService(new WatcherServiceRequest().restart(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +    static class StartRestHandler extends WatcherRestHandler {, +        public StartRestHandler(Settings settings, RestController controller, Client client) {, +        protected void handleRequest(RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +            client.watcherService(new WatcherServiceRequest().start(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +    static class StopRestHandler extends WatcherRestHandler {, +        public StopRestHandler(Settings settings, RestController controller, Client client) {, +        protected void handleRequest(RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +            client.watcherService(new WatcherServiceRequest().stop(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestWatcherInfoAction.java, +    protected RestWatcherInfoAction(Settings settings, RestController controller, Client client) {, +        client.watcherStats(new WatcherStatsRequest(), new RestBuilderListener<WatcherStatsResponse>(restChannel) {, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestWatchServiceAction.java, +    protected RestWatchServiceAction(Settings settings, RestController controller, Client client) {, +        controller.registerHandler(RestRequest.Method.PUT, URI_BASE + "/_start", new StartRestHandler(settings, controller, client));, +        controller.registerHandler(RestRequest.Method.PUT, URI_BASE + "/_stop", new StopRestHandler(settings, controller, client));, +        client.watcherService(new WatcherServiceRequest().restart(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +    static class StartRestHandler extends WatcherRestHandler {, +        public StartRestHandler(Settings settings, RestController controller, Client client) {, +        protected void handleRequest(RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +            client.watcherService(new WatcherServiceRequest().start(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +    static class StopRestHandler extends WatcherRestHandler {, +        public StopRestHandler(Settings settings, RestController controller, Client client) {, +        protected void handleRequest(RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +            client.watcherService(new WatcherServiceRequest().stop(), new AcknowledgedRestListener<WatcherServiceResponse>(channel));, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestWatcherInfoAction.java, +    protected RestWatcherInfoAction(Settings settings, RestController controller, Client client) {, +        client.watcherStats(new WatcherStatsRequest(), new RestBuilderListener<WatcherStatsResponse>(restChannel) {, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestWatcherStatsAction.java, +    protected RestWatcherStatsAction(Settings settings, RestController controller, Client client) {, +        client.watcherStats(new WatcherStatsRequest(), new RestBuilderListener<WatcherStatsResponse>(restChannel) {]