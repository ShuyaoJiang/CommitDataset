[+++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +            if (DocIdSets.isEmpty(set)) {, +                return null;, +            }, +        // first, go over and see if we can shortcut the execution, +        // and gather Bits if we need to, +        List<ResultClause> results = new ArrayList<ResultClause>(clauses.size());, +        boolean hasNonEmptyShouldClause = false;, +        for (int i = 0; i < clauses.size(); i++) {, +            FilterClause clause = clauses.get(i);, +            DocIdSet set = clause.getFilter().getDocIdSet(context, acceptDocs);, +            if (clause.getOccur() == Occur.MUST) {, +                if (DocIdSets.isEmpty(set)) {, +                    return null;, +                }, +            } else if (clause.getOccur() == Occur.SHOULD) {, +                if (DocIdSets.isEmpty(set)) {, +                    continue;, +                }, +                hasNonEmptyShouldClause = true;, +            } else if (clause.getOccur() == Occur.MUST_NOT) {, +                if (DocIdSets.isEmpty(set)) {, +                    // we mark empty ones as null for must_not, handle it in the next run..., +                    results.add(new ResultClause(null, null, clause));, +                    continue;, +                }, +            }, +            Bits bits = null;, +            if (!DocIdSets.isFastIterator(set)) {, +                bits = set.bits();, +            }, +            results.add(new ResultClause(set, bits, clause));, +        }, +, +        if (hasShouldClauses && !hasNonEmptyShouldClause) {, +            return null;, +        }, +, +        // now, go over the clauses and apply the "fast" ones..., +        boolean hasBits = false;, +        for (int i = 0; i < results.size(); i++) {, +            ResultClause clause = results.get(i);, +            // we apply bits in based ones (slow) in the second run, +            if (clause.bits != null) {, +                hasBits = true;, +                continue;, +            }, +            if (clause.clause.getOccur() == Occur.SHOULD) {, +                DocIdSetIterator it = clause.docIdSet.iterator();, +                if (it == null) {, +                    continue;, +                }, +                res.or(it);, +            } else if (clause.clause.getOccur() == Occur.MUST) {, +                DocIdSetIterator it = clause.docIdSet.iterator();, +                if (it == null) {, +                }, +                    res = new FixedBitSet(reader.maxDoc());, +                    res.or(it);, +                } else {, +                    res.and(it);, +                }, +            } else if (clause.clause.getOccur() == Occur.MUST_NOT) {, +                if (res == null) {, +                if (clause.docIdSet != null) {, +                    DocIdSetIterator it = clause.docIdSet.iterator();, +                    if (it != null) {, +                        res.andNot(it);, +                    }, +        if (!hasBits) {, +            return res;, +        }, +, +        // we have some clauses with bits, apply them..., +        // we let the "res" drive the computation, and check Bits for that, +        for (int i = 0; i < results.size(); i++) {, +            ResultClause clause = results.get(i);, +            // we apply bits in based ones (slow) in the second run, +            if (clause.bits == null) {, +                continue;, +            }, +            if (clause.clause.getOccur() == Occur.SHOULD) {, +                // TODO: we should let res drive it, and check on all unset bits on it with Bits, +                DocIdSetIterator it = clause.docIdSet.iterator();, +                if (it == null) {, +                    continue;, +                }, +                res.or(it);, +            } else if (clause.clause.getOccur() == Occur.MUST) {, +                if (res == null) {, +                    // nothing we can do, just or it..., +                    res = new FixedBitSet(reader.maxDoc());, +                    DocIdSetIterator it = clause.docIdSet.iterator();, +                    if (it == null) {, +                        return null;, +                    }, +                    res.or(it);, +                    Bits bits = clause.bits;, +                    // use the "res" to drive the iteration, +                    DocIdSetIterator it = res.iterator();]