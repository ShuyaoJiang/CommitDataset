[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import org.elasticsearch.index.mapper.MapperService;, +                                        // temporarily create the index and add mappings so we have can parse the filter, +                                            if (indexMetaData.mappings().containsKey(MapperService.DEFAULT_MAPPING)) {, +                                                indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source().string(), false);, +                                            }, +                                            for (MappingMetaData mappingMetaData : indexMetaData.mappings().values()) {, +                                                indexService.mapperService().merge(mappingMetaData.type(), mappingMetaData.source().string(), false);, +                                            }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import org.elasticsearch.index.mapper.MapperService;, +                                        // temporarily create the index and add mappings so we have can parse the filter, +                                            if (indexMetaData.mappings().containsKey(MapperService.DEFAULT_MAPPING)) {, +                                                indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source().string(), false);, +                                            }, +                                            for (MappingMetaData mappingMetaData : indexMetaData.mappings().values()) {, +                                                indexService.mapperService().merge(mappingMetaData.type(), mappingMetaData.source().string(), false);, +                                            }, +++ b/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesTests.java, +import org.elasticsearch.index.query.FilterBuilders;, +, +    @Test, +    public void testAliasFilterValidation() throws Exception {, +        logger.info("--> start master node / non data");, +        cluster().startNode(settingsBuilder().put("node.data", false).put("node.master", true));, +, +        logger.info("--> start data node / non master node");, +        cluster().startNode(settingsBuilder().put("node.data", true).put("node.master", false));, +, +        assertAcked(prepareCreate("test").addMapping("type1", "{\"type1\" : {\"properties\" : {\"table_a\" : { \"type\" : \"nested\", \"properties\" : {\"field_a\" : { \"type\" : \"string\" },\"field_b\" :{ \"type\" : \"string\" }}}}}}"));, +        client().admin().indices().prepareAliases().addAlias("test", "a_test", FilterBuilders.nestedFilter("table_a", FilterBuilders.termFilter("table_a.field_b", "y"))).get();, +    }]