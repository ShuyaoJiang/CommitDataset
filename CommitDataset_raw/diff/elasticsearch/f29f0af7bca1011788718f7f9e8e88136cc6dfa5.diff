[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            targetCompatibility = project.runtimeJavaVersion, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            targetCompatibility = project.runtimeJavaVersion, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.java, +import org.gradle.api.JavaVersion;, +    private JavaVersion targetCompatibility;, +, +    @Input, +    public JavaVersion getTargetCompatibility() {, +        return targetCompatibility;, +    }, +, +    public void setTargetCompatibility(JavaVersion targetCompatibility) {, +        this.targetCompatibility = targetCompatibility;, +    }, +, +        // We need to clean up to make sure old dependencies don't linger, +        getProject().delete(jarExpandDir);, +                // Exclude classes for multi release jars above target, +                for (int i = Integer.parseInt(targetCompatibility.getMajorVersion()) + 1;, +                     i <= Integer.parseInt(JavaVersion.VERSION_HIGHER.getMajorVersion());, +                     i++, +                ) {, +                  spec.exclude("META-INF/versions/" + i + "/**");, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            targetCompatibility = project.runtimeJavaVersion, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.java, +import org.gradle.api.JavaVersion;, +    private JavaVersion targetCompatibility;, +, +    @Input, +    public JavaVersion getTargetCompatibility() {, +        return targetCompatibility;, +    }, +, +    public void setTargetCompatibility(JavaVersion targetCompatibility) {, +        this.targetCompatibility = targetCompatibility;, +    }, +, +        // We need to clean up to make sure old dependencies don't linger, +        getProject().delete(jarExpandDir);, +                // Exclude classes for multi release jars above target, +                for (int i = Integer.parseInt(targetCompatibility.getMajorVersion()) + 1;, +                     i <= Integer.parseInt(JavaVersion.VERSION_HIGHER.getMajorVersion());, +                     i++, +                ) {, +                  spec.exclude("META-INF/versions/" + i + "/**");, +                }, +++ b/server/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            targetCompatibility = project.runtimeJavaVersion, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.java, +import org.gradle.api.JavaVersion;, +    private JavaVersion targetCompatibility;, +, +    @Input, +    public JavaVersion getTargetCompatibility() {, +        return targetCompatibility;, +    }, +, +    public void setTargetCompatibility(JavaVersion targetCompatibility) {, +        this.targetCompatibility = targetCompatibility;, +    }, +, +        // We need to clean up to make sure old dependencies don't linger, +        getProject().delete(jarExpandDir);, +                // Exclude classes for multi release jars above target, +                for (int i = Integer.parseInt(targetCompatibility.getMajorVersion()) + 1;, +                     i <= Integer.parseInt(JavaVersion.VERSION_HIGHER.getMajorVersion());, +                     i++, +                ) {, +                  spec.exclude("META-INF/versions/" + i + "/**");, +                }, +++ b/server/build.gradle, +++ b/test/logger-usage/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            targetCompatibility = project.runtimeJavaVersion, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.java, +import org.gradle.api.JavaVersion;, +    private JavaVersion targetCompatibility;, +, +    @Input, +    public JavaVersion getTargetCompatibility() {, +        return targetCompatibility;, +    }, +, +    public void setTargetCompatibility(JavaVersion targetCompatibility) {, +        this.targetCompatibility = targetCompatibility;, +    }, +, +        // We need to clean up to make sure old dependencies don't linger, +        getProject().delete(jarExpandDir);, +                // Exclude classes for multi release jars above target, +                for (int i = Integer.parseInt(targetCompatibility.getMajorVersion()) + 1;, +                     i <= Integer.parseInt(JavaVersion.VERSION_HIGHER.getMajorVersion());, +                     i++, +                ) {, +                  spec.exclude("META-INF/versions/" + i + "/**");]