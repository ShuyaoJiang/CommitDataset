[+++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.unit.ByteSizeValue;, +, +    final String nodeName;, +    public DiskUsage(String nodeId, String nodeName, long totalBytes, long freeBytes) {, +        this.nodeName = nodeName;, +        return "[" + nodeId + "][" + nodeName + "] free: " + new ByteSizeValue(getFreeBytes()) +, +                "[" + Strings.format1Decimals(getFreeDiskAsPercentage(), "%") + "]";, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.unit.ByteSizeValue;, +, +    final String nodeName;, +    public DiskUsage(String nodeId, String nodeName, long totalBytes, long freeBytes) {, +        this.nodeName = nodeName;, +        return "[" + nodeId + "][" + nodeName + "] free: " + new ByteSizeValue(getFreeBytes()) +, +                "[" + Strings.format1Decimals(getFreeDiskAsPercentage(), "%") + "]";, +++ b/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +                            String nodeName = nodeStats.getNode().getName();, +                            newUsages.put(nodeId, new DiskUsage(nodeId, nodeName, total, available));, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.unit.ByteSizeValue;, +, +    final String nodeName;, +    public DiskUsage(String nodeId, String nodeName, long totalBytes, long freeBytes) {, +        this.nodeName = nodeName;, +        return "[" + nodeId + "][" + nodeName + "] free: " + new ByteSizeValue(getFreeBytes()) +, +                "[" + Strings.format1Decimals(getFreeDiskAsPercentage(), "%") + "]";, +++ b/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +                            String nodeName = nodeStats.getNode().getName();, +                            newUsages.put(nodeId, new DiskUsage(nodeId, nodeName, total, available));, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +import org.elasticsearch.common.Strings;, +     * reroute if it does. Also responsible for logging about nodes that have, +     * passed the disk watermarks, +        /**, +         * Warn about the given disk usage if the low or high watermark has been passed, +         */, +        private void warnAboutDiskIfNeeded(DiskUsage usage) {, +            // Check absolute disk values, +            if (usage.getFreeBytes() < DiskThresholdDecider.this.freeBytesThresholdHigh.bytes()) {, +                logger.warn("high disk watermark [{}] exceeded on {}, shards will be relocated away from this node",, +                        DiskThresholdDecider.this.freeBytesThresholdHigh, usage);, +            } else if (usage.getFreeBytes() < DiskThresholdDecider.this.freeBytesThresholdLow.bytes()) {, +                logger.info("low disk watermark [{}] exceeded on {}, replicas will not be assigned to this node",, +                        DiskThresholdDecider.this.freeBytesThresholdLow, usage);, +            }, +, +            // Check percentage disk values, +            if (usage.getFreeDiskAsPercentage() < DiskThresholdDecider.this.freeDiskThresholdHigh) {, +                logger.warn("high disk watermark [{}] exceeded on {}, shards will be relocated away from this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdHigh, "%"), usage);, +            } else if (usage.getFreeDiskAsPercentage() < DiskThresholdDecider.this.freeDiskThresholdLow) {, +                logger.info("low disk watermark [{}] exceeded on {}, replicas will not be assigned to this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdLow, "%"), usage);, +            }, +        }, +, +                boolean reroute = false;, +                    warnAboutDiskIfNeeded(entry);, +                    if (entry.getFreeBytes() < DiskThresholdDecider.this.freeBytesThresholdHigh.bytes() ||, +                            entry.getFreeDiskAsPercentage() < DiskThresholdDecider.this.freeDiskThresholdHigh) {, +                            reroute = true;, +                        } else {, +                            logger.debug("high disk watermark exceeded on {} but an automatic reroute has occurred in the last [{}], skipping reroute",, +                                    entry, DiskThresholdDecider.this.rerouteInterval);, +                        }, +                    }, +                }, +                if (reroute) {, +                    logger.info("high disk watermark exceeded on one or more nodes, rerouting shards");, +            DiskUsage usageIncludingRelocations = new DiskUsage(node.nodeId(), node.node().name(),, +                    usage.getTotalBytes(), usage.getFreeBytes() - relocatingShardsSize);, +        if (logger.isTraceEnabled()) {, +            logger.trace("Node [{}] has {}% free disk", node.nodeId(), freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], preventing allocation",, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], " +, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                            Strings.format1Decimals(freeDiskThresholdHigh, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +            logger.warn("After allocating, node [{}] would have less than the required {} free disk threshold ({} free), preventing allocation",, +                    node.nodeId(), Strings.format1Decimals(freeDiskThresholdHigh, "%"), Strings.format1Decimals(freeSpaceAfterShard, "%"));, +            DiskUsage usageIncludingRelocations = new DiskUsage(node.nodeId(), node.node().name(),, +                    usage.getTotalBytes(), usage.getFreeBytes() - relocatingShardsSize);, +        return new DiskUsage(node.nodeId(), node.node().name(), totalBytes / usages.size(), freeBytes / usages.size());, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.unit.ByteSizeValue;, +, +    final String nodeName;, +    public DiskUsage(String nodeId, String nodeName, long totalBytes, long freeBytes) {, +        this.nodeName = nodeName;, +        return "[" + nodeId + "][" + nodeName + "] free: " + new ByteSizeValue(getFreeBytes()) +, +                "[" + Strings.format1Decimals(getFreeDiskAsPercentage(), "%") + "]";, +++ b/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java]