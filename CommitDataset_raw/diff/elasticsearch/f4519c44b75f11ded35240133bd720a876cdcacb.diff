[+++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +    public P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception {, +        return doCreate(registry, tag, config);, +    protected abstract P doCreate(ProcessorsRegistry registry, String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +    public P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception {, +        return doCreate(registry, tag, config);, +    protected abstract P doCreate(ProcessorsRegistry registry, String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +            Processor processor = factory.create(processorRegistry, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +    public P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception {, +        return doCreate(registry, tag, config);, +    protected abstract P doCreate(ProcessorsRegistry registry, String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +            Processor processor = factory.create(processorRegistry, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java, +        P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +    public P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception {, +        return doCreate(registry, tag, config);, +    protected abstract P doCreate(ProcessorsRegistry registry, String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +            Processor processor = factory.create(processorRegistry, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java, +        P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +    public ProcessorsRegistry(Map<String, Processor.Factory> processors) {, +        this.processorFactories = Collections.unmodifiableMap(processors);, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +    public P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception {, +        return doCreate(registry, tag, config);, +    protected abstract P doCreate(ProcessorsRegistry registry, String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +            Processor processor = factory.create(processorRegistry, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java, +        P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +    public ProcessorsRegistry(Map<String, Processor.Factory> processors) {, +        this.processorFactories = Collections.unmodifiableMap(processors);, +++ b/core/src/main/java/org/elasticsearch/plugins/IngestPlugin.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.plugins;, +, +import java.util.Collections;, +import java.util.Map;, +, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.ingest.Processor;, +import org.elasticsearch.ingest.TemplateService;, +import org.elasticsearch.script.ScriptService;, +, +/**, + * An extension point for {@link Plugin} implementations to add custom ingest processors, + */, +public interface IngestPlugin {, +, +    /**, +     * Returns additional ingest processor types added by this plugin., +     *, +     * The key of the returned {@link Map} is the unique name for the processor which is specified, +     * in pipeline configurations, and the value is a {@link org.elasticsearch.ingest.Processor.Factory}, +     * to create the processor from a given pipeline configuration., +     */, +    default Map<String, Processor.Factory> getProcessors(, +        Environment env, ScriptService scriptService, TemplateService templateService) {, +        return Collections.emptyMap();, +    }, +}, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +    public P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception {, +        return doCreate(registry, tag, config);, +    protected abstract P doCreate(ProcessorsRegistry registry, String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +            Processor processor = factory.create(processorRegistry, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java, +        P create(ProcessorsRegistry registry, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +    public ProcessorsRegistry(Map<String, Processor.Factory> processors) {, +        this.processorFactories = Collections.unmodifiableMap(processors);, +++ b/core/src/main/java/org/elasticsearch/plugins/IngestPlugin.java]