[+++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTask.java, +, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTask.java, +, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksInProgress.java, +        PERSISTENT_TASK_IN_PROGRESS_PARSER.declareLong(TaskBuilder::setAllocationIdOnLastStatusUpdate,, +                new ParseField("allocation_id_on_last_status_update"));, +        @Nullable, +        private final Long allocationIdOnLastStatusUpdate;, +            this(id, 0L, action, request, stopped, removeOnCompletion, null, executorNode, null);, +                    newExecutorNode, task.allocationId);, +            this(task.id, task.allocationId, task.action, task.request, task.stopped, task.removeOnCompletion, status,, +                    task.executorNode, task.allocationId);, +                                         boolean stopped, boolean removeOnCompletion, Status status,, +                                         String executorNode, Long allocationIdOnLastStatusUpdate) {, +            this.allocationIdOnLastStatusUpdate = allocationIdOnLastStatusUpdate;, +            allocationIdOnLastStatusUpdate = in.readOptionalLong();, +            out.writeOptionalLong(allocationIdOnLastStatusUpdate);, +                    Objects.equals(executorNode, that.executorNode) &&, +                    Objects.equals(allocationIdOnLastStatusUpdate, that.allocationIdOnLastStatusUpdate);, +            return Objects.hash(id, allocationId, action, request, stopped, removeOnCompletion, status, executorNode,, +                    allocationIdOnLastStatusUpdate);, +        /**, +         * @return Whether the task status isn't stale. When a task gets unassigned from the executor node or assigned, +         * to a new executor node and the status hasn't been updated then the task status is stale., +         */, +        public boolean isCurrentStatus() {, +            return allocationIdOnLastStatusUpdate == allocationId;, +        }, +, +                    if (allocationIdOnLastStatusUpdate != null) {, +                        builder.field("allocation_id_on_last_status_update", allocationIdOnLastStatusUpdate);, +                    }, +        private Long allocationIdOnLastStatusUpdate;, +        public TaskBuilder<Request> setAllocationIdOnLastStatusUpdate(Long allocationIdOnLastStatusUpdate) {, +            this.allocationIdOnLastStatusUpdate = allocationIdOnLastStatusUpdate;, +            return this;, +        }, +, +            return new PersistentTaskInProgress<>(id, allocationId, action, request, stopped, removeOnCompletion, status,, +                    executorNode, allocationIdOnLastStatusUpdate);]