[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndicesClientIT.java, +import org.elasticsearch.index.mapper.MapperService;, +            createIndexRequest.mapping(MapperService.SINGLE_MAPPING_NAME, mappingBuilder);, +            assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +        String mappings = "\"_doc\":{\"properties\":{\"field-1\":{\"type\":\"integer\"}}}";, +        assertNotNull(getIndexResponse.getMappings().get(indexName).get("_doc"));, +        Object o = getIndexResponse.getMappings().get(indexName).get("_doc").getSourceAsMap().get("properties");, +        String mappings = "\"_doc\":{\"properties\":{\"field-1\":{\"type\":\"integer\"}}}";, +        assertNotNull(getIndexResponse.getMappings().get(indexName).get("_doc"));, +        Object o = getIndexResponse.getMappings().get(indexName).get("_doc").getSourceAsMap().get("properties");, +        putMappingRequest.type("_doc");, +        assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +        assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndicesClientIT.java, +import org.elasticsearch.index.mapper.MapperService;, +            createIndexRequest.mapping(MapperService.SINGLE_MAPPING_NAME, mappingBuilder);, +            assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +        String mappings = "\"_doc\":{\"properties\":{\"field-1\":{\"type\":\"integer\"}}}";, +        assertNotNull(getIndexResponse.getMappings().get(indexName).get("_doc"));, +        Object o = getIndexResponse.getMappings().get(indexName).get("_doc").getSourceAsMap().get("properties");, +        String mappings = "\"_doc\":{\"properties\":{\"field-1\":{\"type\":\"integer\"}}}";, +        assertNotNull(getIndexResponse.getMappings().get(indexName).get("_doc"));, +        Object o = getIndexResponse.getMappings().get(indexName).get("_doc").getSourceAsMap().get("properties");, +        putMappingRequest.type("_doc");, +        assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +        assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/IndicesClientDocumentationIT.java, +import org.elasticsearch.client.core.ShardsAcknowledgedResponse;, +import org.elasticsearch.client.indices.FreezeIndexRequest;, +                new CreateIndexRequest("index", settings).mapping("_doc", mappings, XContentType.JSON),, +        Map<String, Object> indexTypeMappings = indexMappings.get("_doc").getSourceAsMap(); // <2>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndicesClientIT.java, +import org.elasticsearch.index.mapper.MapperService;, +            createIndexRequest.mapping(MapperService.SINGLE_MAPPING_NAME, mappingBuilder);, +            assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +        String mappings = "\"_doc\":{\"properties\":{\"field-1\":{\"type\":\"integer\"}}}";, +        assertNotNull(getIndexResponse.getMappings().get(indexName).get("_doc"));, +        Object o = getIndexResponse.getMappings().get(indexName).get("_doc").getSourceAsMap().get("properties");, +        String mappings = "\"_doc\":{\"properties\":{\"field-1\":{\"type\":\"integer\"}}}";, +        assertNotNull(getIndexResponse.getMappings().get(indexName).get("_doc"));, +        Object o = getIndexResponse.getMappings().get(indexName).get("_doc").getSourceAsMap().get("properties");, +        putMappingRequest.type("_doc");, +        assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +        assertEquals("text", XContentMapValues.extractValue(indexName + ".mappings.properties.field.type", getIndexResponse));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/IndicesClientDocumentationIT.java, +import org.elasticsearch.client.core.ShardsAcknowledgedResponse;, +import org.elasticsearch.client.indices.FreezeIndexRequest;, +                new CreateIndexRequest("index", settings).mapping("_doc", mappings, XContentType.JSON),, +        Map<String, Object> indexTypeMappings = indexMappings.get("_doc").getSourceAsMap(); // <2>, +++ b/docs/reference/indices/get-index.asciidoc, +, +[float], +=== Skipping types, +, +Types are scheduled to be fully removed in Elasticsearch 8.0 and will not appear, +in requests or responses anymore. You can opt in for this future behaviour by, +setting `include_type_name=false` in the request, which will return mappings, +directly under `mappings` without keying by the type name., +, +Here is an example:, +, +[source,js], +--------------------------------------------------, +PUT test?include_type_name=false, +{, +  "mappings": {, +    "properties": {, +      "foo": {, +        "type": "keyword", +      }, +    }, +  }, +}, +, +GET test?include_type_name=false, +--------------------------------------------------, +// CONSOLE, +, +which returns, +, +[source,js], +--------------------------------------------------, +{, +    "test": {, +        "aliases": {},, +        "mappings": {, +            "properties": {, +                "foo": {, +                    "type": "keyword", +                }, +            }, +        },, +        "settings": {, +            "index": {, +                "creation_date": "1547028674905",, +                "number_of_shards": "1",, +                "number_of_replicas": "1",, +                "uuid": "u1YpkPqLSqGIn3kNAvY8cA",, +                "version": {, +                    "created": ...]