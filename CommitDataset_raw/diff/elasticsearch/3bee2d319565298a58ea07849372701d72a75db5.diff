[+++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/AzureDiscoveryModule.java, +import org.elasticsearch.common.settings.Setting;, +        if (isDefined(settings, Management.SUBSCRIPTION_ID_SETTING) &&, +            isDefined(settings, Management.SERVICE_NAME_SETTING) &&, +            isDefined(settings, Management.KEYSTORE_PATH_SETTING) &&, +            isDefined(settings, Management.KEYSTORE_PASSWORD_SETTING)) {, +            logger.trace("All required properties for Azure discovery are set!");, +            return true;, +        } else {, +            logger.debug("One or more Azure discovery settings are missing. " +, +                    Management.SUBSCRIPTION_ID_SETTING.getKey(),, +                    Management.SERVICE_NAME_SETTING.getKey(),, +                    Management.KEYSTORE_PATH_SETTING.getKey(),, +                    Management.KEYSTORE_PASSWORD_SETTING.getKey());, +    private static boolean isDefined(Settings settings, Setting<String> property) throws ElasticsearchException {, +        return (property.exists(settings) && Strings.hasText(property.get(settings)));, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/AzureDiscoveryModule.java, +import org.elasticsearch.common.settings.Setting;, +        if (isDefined(settings, Management.SUBSCRIPTION_ID_SETTING) &&, +            isDefined(settings, Management.SERVICE_NAME_SETTING) &&, +            isDefined(settings, Management.KEYSTORE_PATH_SETTING) &&, +            isDefined(settings, Management.KEYSTORE_PASSWORD_SETTING)) {, +            logger.trace("All required properties for Azure discovery are set!");, +            return true;, +        } else {, +            logger.debug("One or more Azure discovery settings are missing. " +, +                    Management.SUBSCRIPTION_ID_SETTING.getKey(),, +                    Management.SERVICE_NAME_SETTING.getKey(),, +                    Management.KEYSTORE_PATH_SETTING.getKey(),, +                    Management.KEYSTORE_PASSWORD_SETTING.getKey());, +    private static boolean isDefined(Settings settings, Setting<String> property) throws ElasticsearchException {, +        return (property.exists(settings) && Strings.hasText(property.get(settings)));, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeService.java, +import com.microsoft.windowsazure.core.utils.KeyStoreType;, +    final class Management {, +        public static final Setting<String> SUBSCRIPTION_ID_SETTING = Setting.simpleString("cloud.azure.management.subscription.id", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> SERVICE_NAME_SETTING = Setting.simpleString("cloud.azure.management.cloud.service.name", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> KEYSTORE_PATH_SETTING = Setting.simpleString("cloud.azure.management.keystore.path", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> KEYSTORE_PASSWORD_SETTING = Setting.simpleString("cloud.azure.management.keystore.password", false, Setting.Scope.CLUSTER);, +        public static final Setting<KeyStoreType> KEYSTORE_TYPE_SETTING = new Setting<>("cloud.azure.management.keystore.type", KeyStoreType.pkcs12.name(), KeyStoreType::fromString, false, Setting.Scope.CLUSTER);, +    final class Discovery {, +, +    HostedServiceGetDetailedResponse getServiceDetails();, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/AzureDiscoveryModule.java, +import org.elasticsearch.common.settings.Setting;, +        if (isDefined(settings, Management.SUBSCRIPTION_ID_SETTING) &&, +            isDefined(settings, Management.SERVICE_NAME_SETTING) &&, +            isDefined(settings, Management.KEYSTORE_PATH_SETTING) &&, +            isDefined(settings, Management.KEYSTORE_PASSWORD_SETTING)) {, +            logger.trace("All required properties for Azure discovery are set!");, +            return true;, +        } else {, +            logger.debug("One or more Azure discovery settings are missing. " +, +                    Management.SUBSCRIPTION_ID_SETTING.getKey(),, +                    Management.SERVICE_NAME_SETTING.getKey(),, +                    Management.KEYSTORE_PATH_SETTING.getKey(),, +                    Management.KEYSTORE_PASSWORD_SETTING.getKey());, +    private static boolean isDefined(Settings settings, Setting<String> property) throws ElasticsearchException {, +        return (property.exists(settings) && Strings.hasText(property.get(settings)));, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeService.java, +import com.microsoft.windowsazure.core.utils.KeyStoreType;, +    final class Management {, +        public static final Setting<String> SUBSCRIPTION_ID_SETTING = Setting.simpleString("cloud.azure.management.subscription.id", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> SERVICE_NAME_SETTING = Setting.simpleString("cloud.azure.management.cloud.service.name", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> KEYSTORE_PATH_SETTING = Setting.simpleString("cloud.azure.management.keystore.path", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> KEYSTORE_PASSWORD_SETTING = Setting.simpleString("cloud.azure.management.keystore.password", false, Setting.Scope.CLUSTER);, +        public static final Setting<KeyStoreType> KEYSTORE_TYPE_SETTING = new Setting<>("cloud.azure.management.keystore.type", KeyStoreType.pkcs12.name(), KeyStoreType::fromString, false, Setting.Scope.CLUSTER);, +    final class Discovery {, +, +    HostedServiceGetDetailedResponse getServiceDetails();, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeServiceImpl.java, +        String subscriptionId = Management.SUBSCRIPTION_ID_SETTING.get(settings);, +        serviceName = Management.SERVICE_NAME_SETTING.get(settings);, +        String keystorePath = Management.KEYSTORE_PATH_SETTING.get(settings);, +        String keystorePassword = Management.KEYSTORE_PASSWORD_SETTING.get(settings);, +        KeyStoreType keystoreType = Management.KEYSTORE_TYPE_SETTING.get(settings);, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/AzureDiscoveryModule.java, +import org.elasticsearch.common.settings.Setting;, +        if (isDefined(settings, Management.SUBSCRIPTION_ID_SETTING) &&, +            isDefined(settings, Management.SERVICE_NAME_SETTING) &&, +            isDefined(settings, Management.KEYSTORE_PATH_SETTING) &&, +            isDefined(settings, Management.KEYSTORE_PASSWORD_SETTING)) {, +            logger.trace("All required properties for Azure discovery are set!");, +            return true;, +        } else {, +            logger.debug("One or more Azure discovery settings are missing. " +, +                    Management.SUBSCRIPTION_ID_SETTING.getKey(),, +                    Management.SERVICE_NAME_SETTING.getKey(),, +                    Management.KEYSTORE_PATH_SETTING.getKey(),, +                    Management.KEYSTORE_PASSWORD_SETTING.getKey());, +    private static boolean isDefined(Settings settings, Setting<String> property) throws ElasticsearchException {, +        return (property.exists(settings) && Strings.hasText(property.get(settings)));, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeService.java, +import com.microsoft.windowsazure.core.utils.KeyStoreType;, +    final class Management {, +        public static final Setting<String> SUBSCRIPTION_ID_SETTING = Setting.simpleString("cloud.azure.management.subscription.id", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> SERVICE_NAME_SETTING = Setting.simpleString("cloud.azure.management.cloud.service.name", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> KEYSTORE_PATH_SETTING = Setting.simpleString("cloud.azure.management.keystore.path", false, Setting.Scope.CLUSTER);, +        public static final Setting<String> KEYSTORE_PASSWORD_SETTING = Setting.simpleString("cloud.azure.management.keystore.password", false, Setting.Scope.CLUSTER);, +        public static final Setting<KeyStoreType> KEYSTORE_TYPE_SETTING = new Setting<>("cloud.azure.management.keystore.type", KeyStoreType.pkcs12.name(), KeyStoreType::fromString, false, Setting.Scope.CLUSTER);]