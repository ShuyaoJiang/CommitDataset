[+++ b/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.*;, +        BooleanQuery bq = new BooleanQuery(true);, +        for (Map.Entry<String,Float> entry : weights.entrySet()) {, +                Query q = createBooleanQuery(entry.getKey(), text, super.getDefaultOperator());, +                if (q != null) {, +                    q.setBoost(entry.getValue());, +                    bq.add(q, BooleanClause.Occur.SHOULD);, +            } catch (RuntimeException e) {, +                rethrowUnlessLenient(e);, +            }, +        }, +        return super.simplify(bq);, +        BooleanQuery bq = new BooleanQuery(true);, +        for (Map.Entry<String,Float> entry : weights.entrySet()) {, +                Query q = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);, +                if (q != null) {, +                    q.setBoost(entry.getValue());, +                    bq.add(q, BooleanClause.Occur.SHOULD);, +            } catch (RuntimeException e) {, +                rethrowUnlessLenient(e);, +            }, +        }, +        return super.simplify(bq);, +        BooleanQuery bq = new BooleanQuery(true);, +        for (Map.Entry<String,Float> entry : weights.entrySet()) {, +                Query q = createPhraseQuery(entry.getKey(), text, slop);, +                if (q != null) {, +                    q.setBoost(entry.getValue());, +                    bq.add(q, BooleanClause.Occur.SHOULD);, +            } catch (RuntimeException e) {, +                rethrowUnlessLenient(e);, +            }, +        }, +        return super.simplify(bq);, +        BooleanQuery bq = new BooleanQuery(true);, +        for (Map.Entry<String,Float> entry : weights.entrySet()) {, +                PrefixQuery prefix = new PrefixQuery(new Term(entry.getKey(), text));, +                prefix.setBoost(entry.getValue());, +                bq.add(prefix, BooleanClause.Occur.SHOULD);, +        return super.simplify(bq);, +    }, +++ b/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.*;, +        BooleanQuery bq = new BooleanQuery(true);, +        for (Map.Entry<String,Float> entry : weights.entrySet()) {, +                Query q = createBooleanQuery(entry.getKey(), text, super.getDefaultOperator());, +                if (q != null) {, +                    q.setBoost(entry.getValue());, +                    bq.add(q, BooleanClause.Occur.SHOULD);, +            } catch (RuntimeException e) {, +                rethrowUnlessLenient(e);, +            }, +        }, +        return super.simplify(bq);, +        BooleanQuery bq = new BooleanQuery(true);, +        for (Map.Entry<String,Float> entry : weights.entrySet()) {, +                Query q = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);, +                if (q != null) {, +                    q.setBoost(entry.getValue());, +                    bq.add(q, BooleanClause.Occur.SHOULD);, +            } catch (RuntimeException e) {, +                rethrowUnlessLenient(e);, +            }, +        }, +        return super.simplify(bq);, +        BooleanQuery bq = new BooleanQuery(true);, +        for (Map.Entry<String,Float> entry : weights.entrySet()) {, +                Query q = createPhraseQuery(entry.getKey(), text, slop);, +                if (q != null) {, +                    q.setBoost(entry.getValue());, +                    bq.add(q, BooleanClause.Occur.SHOULD);, +            } catch (RuntimeException e) {, +                rethrowUnlessLenient(e);, +            }, +        }, +        return super.simplify(bq);, +        BooleanQuery bq = new BooleanQuery(true);, +        for (Map.Entry<String,Float> entry : weights.entrySet()) {, +                PrefixQuery prefix = new PrefixQuery(new Term(entry.getKey(), text));, +                prefix.setBoost(entry.getValue());, +                bq.add(prefix, BooleanClause.Occur.SHOULD);, +        return super.simplify(bq);, +    }, +++ b/src/test/java/org/elasticsearch/search/query/SimpleQueryStringTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an]