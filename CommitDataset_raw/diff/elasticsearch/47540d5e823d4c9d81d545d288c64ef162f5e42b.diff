[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        // we resolve symlinks so map is keyed on the normalize codebase name, +                                codebases.add(jar.toRealPath().toUri().toURL());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        // we resolve symlinks so map is keyed on the normalize codebase name, +                                codebases.add(jar.toRealPath().toUri().toURL());, +++ b/core/src/main/java/org/elasticsearch/common/geo/XShapeCollection.java, + * Extends spatial4j ShapeCollection for points_only shape indexing support, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        // we resolve symlinks so map is keyed on the normalize codebase name, +                                codebases.add(jar.toRealPath().toUri().toURL());, +++ b/core/src/main/java/org/elasticsearch/common/geo/XShapeCollection.java, + * Extends spatial4j ShapeCollection for points_only shape indexing support, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by ESTestCase for leniency of thread exceptions (?!), +  // otherwise can be provided only to test libraries, +  permission java.lang.RuntimePermission "setDefaultUncaughtExceptionHandler";, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        // we resolve symlinks so map is keyed on the normalize codebase name, +                                codebases.add(jar.toRealPath().toUri().toURL());, +++ b/core/src/main/java/org/elasticsearch/common/geo/XShapeCollection.java, + * Extends spatial4j ShapeCollection for points_only shape indexing support, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by ESTestCase for leniency of thread exceptions (?!), +  // otherwise can be provided only to test libraries, +  permission java.lang.RuntimePermission "setDefaultUncaughtExceptionHandler";, +, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/test-framework.policy, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        // we resolve symlinks so map is keyed on the normalize codebase name, +                                codebases.add(jar.toRealPath().toUri().toURL());, +++ b/core/src/main/java/org/elasticsearch/common/geo/XShapeCollection.java, + * Extends spatial4j ShapeCollection for points_only shape indexing support, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by ESTestCase for leniency of thread exceptions (?!), +  // otherwise can be provided only to test libraries, +  permission java.lang.RuntimePermission "setDefaultUncaughtExceptionHandler";, +, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/test-framework.policy, +, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +        Set<URL> codebases = new HashSet<>(Arrays.asList(parseClassPathWithSymlinks()));, +    /**, +     * return parsed classpath, but with symlinks resolved to destination files for matching, +     * this is for matching the toRealPath() in the code where we have a proper plugin structure, +     */, +    @SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls"), +    static URL[] parseClassPathWithSymlinks() throws Exception {, +        URL raw[] = JarHell.parseClassPath();, +        for (int i = 0; i < raw.length; i++) {, +            raw[i] = PathUtils.get(raw[i].toURI()).toRealPath().toUri().toURL();, +        }, +        return raw;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        // we resolve symlinks so map is keyed on the normalize codebase name, +                                codebases.add(jar.toRealPath().toUri().toURL());, +++ b/core/src/main/java/org/elasticsearch/common/geo/XShapeCollection.java, + * Extends spatial4j ShapeCollection for points_only shape indexing support, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by ESTestCase for leniency of thread exceptions (?!), +  // otherwise can be provided only to test libraries, +  permission java.lang.RuntimePermission "setDefaultUncaughtExceptionHandler";, +, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/test-framework.policy, +, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +        Set<URL> codebases = new HashSet<>(Arrays.asList(parseClassPathWithSymlinks()));, +    /**, +     * return parsed classpath, but with symlinks resolved to destination files for matching, +     * this is for matching the toRealPath() in the code where we have a proper plugin structure, +     */, +    @SuppressForbidden(reason = "does evil stuff with paths and urls because devs and jenkins do evil stuff with paths and urls"), +    static URL[] parseClassPathWithSymlinks() throws Exception {, +        URL raw[] = JarHell.parseClassPath();, +        for (int i = 0; i < raw.length; i++) {, +            raw[i] = PathUtils.get(raw[i].toURI()).toRealPath().toUri().toURL();, +        }, +        return raw;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/index/analysis/PatternAnalyzerTests.java, +import java.lang.Thread.UncaughtExceptionHandler;, +    , +    // dodge jre bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7104012, +    final UncaughtExceptionHandler savedHandler = Thread.getDefaultUncaughtExceptionHandler();, +    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {, +      @Override, +      public void uncaughtException(Thread thread, Throwable throwable) {, +        assumeTrue("not failing due to jre bug ", !isJREBug7104012(throwable));, +        // otherwise its some other bug, pass to default handler, +        savedHandler.uncaughtException(thread, throwable);, +      }, +    });, +    , +    try {, +      Thread.getDefaultUncaughtExceptionHandler();]