[+++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.monitor.process.ProcessProbe;, +        maybeWarnFileDescriptors();, +    private void maybeWarnFileDescriptors() {, +        long maxFileDescriptorCount = ProcessProbe.getInstance().getMaxFileDescriptorCount();, +        if (maxFileDescriptorCount == -1) {, +            return;, +        }, +        int fileDescriptorCountThreshold = (1 << 16);, +        if (maxFileDescriptorCount < fileDescriptorCountThreshold) {, +            logger.warn(, +                    "max file descriptors [{}] for elasticsearch process likely too low, consider increasing to at least [{}]",, +                    maxFileDescriptorCount,, +                    fileDescriptorCountThreshold);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.monitor.process.ProcessProbe;, +        maybeWarnFileDescriptors();, +    private void maybeWarnFileDescriptors() {, +        long maxFileDescriptorCount = ProcessProbe.getInstance().getMaxFileDescriptorCount();, +        if (maxFileDescriptorCount == -1) {, +            return;, +        }, +        int fileDescriptorCountThreshold = (1 << 16);, +        if (maxFileDescriptorCount < fileDescriptorCountThreshold) {, +            logger.warn(, +                    "max file descriptors [{}] for elasticsearch process likely too low, consider increasing to at least [{}]",, +                    maxFileDescriptorCount,, +                    fileDescriptorCountThreshold);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {, +            StringFieldMapper.Builder builder = stringField(name);, +                    throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            parseTextField(builder, name, node, parserContext);, +                        throw new MapperParsingException("Analyzer [" + propNode.toString() + "] not found for field [" + name + "]");, +                } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.monitor.process.ProcessProbe;, +        maybeWarnFileDescriptors();, +    private void maybeWarnFileDescriptors() {, +        long maxFileDescriptorCount = ProcessProbe.getInstance().getMaxFileDescriptorCount();, +        if (maxFileDescriptorCount == -1) {, +            return;, +        }, +        int fileDescriptorCountThreshold = (1 << 16);, +        if (maxFileDescriptorCount < fileDescriptorCountThreshold) {, +            logger.warn(, +                    "max file descriptors [{}] for elasticsearch process likely too low, consider increasing to at least [{}]",, +                    maxFileDescriptorCount,, +                    fileDescriptorCountThreshold);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {, +            StringFieldMapper.Builder builder = stringField(name);, +                    throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            parseTextField(builder, name, node, parserContext);, +                        throw new MapperParsingException("Analyzer [" + propNode.toString() + "] not found for field [" + name + "]");, +                } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +                throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true] or [false]");, +                throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            throw new MapperParsingException("Unknown Similarity type [" + value + "] for [" + name + "]");]