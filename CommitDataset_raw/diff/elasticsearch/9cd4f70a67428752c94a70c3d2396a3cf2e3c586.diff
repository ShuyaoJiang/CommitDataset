[+++ b/server/src/main/java/org/elasticsearch/index/mapper/IgnoredFieldMapper.java, +    public static final class IgnoredFieldType extends StringFieldType {, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IgnoredFieldMapper.java, +    public static final class IgnoredFieldType extends StringFieldType {, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IndexFieldMapper.java, +import java.util.regex.Pattern;, +        public Query prefixQuery(String value,, +                                 @Nullable MultiTermQuery.RewriteMethod method,, +                                 QueryShardContext context) {, +            String indexName = context.getFullyQualifiedIndex().getName();, +            if (indexName.startsWith(value)) {, +                return Queries.newMatchAllQuery();, +            } else {, +                return Queries.newMatchNoDocsQuery("The index [" + indexName +, +                    "] doesn't match the provided prefix [" + value + "].");, +            }, +        }, +, +        @Override, +        public Query regexpQuery(String value, int flags, int maxDeterminizedStates,, +                                 MultiTermQuery.RewriteMethod method, QueryShardContext context) {, +            String indexName = context.getFullyQualifiedIndex().getName();, +            Pattern pattern = Regex.compile(value, Regex.flagsToString(flags));, +, +            if (pattern.matcher(indexName).matches()) {, +                return Queries.newMatchAllQuery();, +            } else {, +                return Queries.newMatchNoDocsQuery("The index [" + indexName +, +                    "] doesn't match the provided pattern [" + value + "].");, +            }, +        }, +, +        @Override, +            String indexName = context.getFullyQualifiedIndex().getName();, +            if (isSameIndex(value, indexName)) {, +                return Queries.newMatchNoDocsQuery("The index [" + indexName +, +                    "] doesn't match the provided pattern [" + value + "].");, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IgnoredFieldMapper.java, +    public static final class IgnoredFieldType extends StringFieldType {, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IndexFieldMapper.java, +import java.util.regex.Pattern;, +        public Query prefixQuery(String value,, +                                 @Nullable MultiTermQuery.RewriteMethod method,, +                                 QueryShardContext context) {, +            String indexName = context.getFullyQualifiedIndex().getName();, +            if (indexName.startsWith(value)) {, +                return Queries.newMatchAllQuery();, +            } else {, +                return Queries.newMatchNoDocsQuery("The index [" + indexName +, +                    "] doesn't match the provided prefix [" + value + "].");, +            }, +        }, +, +        @Override, +        public Query regexpQuery(String value, int flags, int maxDeterminizedStates,, +                                 MultiTermQuery.RewriteMethod method, QueryShardContext context) {, +            String indexName = context.getFullyQualifiedIndex().getName();, +            Pattern pattern = Regex.compile(value, Regex.flagsToString(flags));, +, +            if (pattern.matcher(indexName).matches()) {, +                return Queries.newMatchAllQuery();, +            } else {, +                return Queries.newMatchNoDocsQuery("The index [" + indexName +, +                    "] doesn't match the provided pattern [" + value + "].");, +            }, +        }, +, +        @Override, +            String indexName = context.getFullyQualifiedIndex().getName();, +            if (isSameIndex(value, indexName)) {, +                return Queries.newMatchNoDocsQuery("The index [" + indexName +, +                    "] doesn't match the provided pattern [" + value + "].");, +++ b/server/src/main/java/org/elasticsearch/index/mapper/RoutingFieldMapper.java, +    static final class RoutingFieldType extends StringFieldType {, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IgnoredFieldMapper.java, +    public static final class IgnoredFieldType extends StringFieldType {, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IndexFieldMapper.java, +import java.util.regex.Pattern;, +        public Query prefixQuery(String value,, +                                 @Nullable MultiTermQuery.RewriteMethod method,, +                                 QueryShardContext context) {, +            String indexName = context.getFullyQualifiedIndex().getName();, +            if (indexName.startsWith(value)) {, +                return Queries.newMatchAllQuery();, +            } else {, +                return Queries.newMatchNoDocsQuery("The index [" + indexName +, +                    "] doesn't match the provided prefix [" + value + "].");, +            }, +        }, +, +        @Override, +        public Query regexpQuery(String value, int flags, int maxDeterminizedStates,, +                                 MultiTermQuery.RewriteMethod method, QueryShardContext context) {, +            String indexName = context.getFullyQualifiedIndex().getName();, +            Pattern pattern = Regex.compile(value, Regex.flagsToString(flags));, +, +            if (pattern.matcher(indexName).matches()) {, +                return Queries.newMatchAllQuery();, +            } else {, +                return Queries.newMatchNoDocsQuery("The index [" + indexName +]