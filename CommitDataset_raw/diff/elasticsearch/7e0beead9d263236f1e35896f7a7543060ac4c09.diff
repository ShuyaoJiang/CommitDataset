[+++ b/src/test/java/org/elasticsearch/search/stats/SearchStatsTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +        int docsTest1 = atLeast(20);, +        for (int i = 0; i < docsTest1; i++) {, +            if (rarely()) {, +        int docsTest2 = atLeast(20);, +        for (int i = 0; i < docsTest2; i++) {, +            if (rarely()) {, +        refresh();, +        int iters = atLeast(20);, +        for (int i = 0; i < iters; i++) {, +            SearchResponse searchResponse = client().prepareSearch().setQuery(QueryBuilders.termQuery("field", "value")).setStats("group1", "group2").execute().actionGet();, +            assertHitCount(searchResponse, docsTest1 + docsTest2);, +            assertAllSuccessful(searchResponse);, +        final int docs = atLeast(20);, +        for (int i = 0; i < docs; i++) {, +++ b/src/test/java/org/elasticsearch/search/stats/SearchStatsTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +        int docsTest1 = atLeast(20);, +        for (int i = 0; i < docsTest1; i++) {, +            if (rarely()) {, +        int docsTest2 = atLeast(20);, +        for (int i = 0; i < docsTest2; i++) {, +            if (rarely()) {, +        refresh();, +        int iters = atLeast(20);, +        for (int i = 0; i < iters; i++) {, +            SearchResponse searchResponse = client().prepareSearch().setQuery(QueryBuilders.termQuery("field", "value")).setStats("group1", "group2").execute().actionGet();, +            assertHitCount(searchResponse, docsTest1 + docsTest2);, +            assertAllSuccessful(searchResponse);, +        final int docs = atLeast(20);, +        for (int i = 0; i < docs; i++) {, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +    public static void assertAllSuccessful(SearchResponse response) {, +        assertNoFailures(response);, +        assertThat("Expected all shards successful but got successful [" + response.getSuccessfulShards() + "] total [" + response.getTotalShards() + "]",, +                response.getTotalShards(), equalTo(response.getSuccessfulShards()));, +        assertVersionSerializable(response);, +    }, +]