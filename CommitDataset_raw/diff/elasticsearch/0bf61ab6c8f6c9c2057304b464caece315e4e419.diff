[+++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/DateHistogramFacetBuilder.java, +import org.elasticsearch.common.unit.TimeValue;, +    private String preZone = null;, +    private String postZone = null;, +    long preOffset = 0;, +    long postOffset = 0;, +    float factor = 1.0f;, +     * Sets the pre time zone to use when bucketing the values. This timezone will be applied before, +     * rounding off the result., +     * <p/>, +     * Can either be in the form of "-10:00" or, +    public DateHistogramFacetBuilder preZone(String preZone) {, +        this.preZone = preZone;, +        return this;, +    }, +, +    /**, +     * Sets the post time zone to use when bucketing the values. This timezone will be applied after, +     * rounding off the result., +     * <p/>, +     * Can either be in the form of "-10:00" or, +     * one of the values listed here: http://joda-time.sourceforge.net/timezones.html., +     */, +    public DateHistogramFacetBuilder postZone(String postZone) {, +        this.postZone = postZone;, +        return this;, +    }, +, +    /**, +     * Sets a pre offset that will be applied before rounding the results., +     */, +    public DateHistogramFacetBuilder preOffset(TimeValue preOffset) {, +        this.preOffset = preOffset.millis();, +        return this;, +    }, +, +    /**, +     * Sets a post offset that will be applied after rounding the results., +     */, +    public DateHistogramFacetBuilder postOffset(TimeValue postOffset) {, +        this.postOffset = postOffset.millis();, +        return this;, +    }, +, +    /**, +     * Sets the factor that will be used to multiply the value with before and divided, +     * by after the rounding of the results., +     */, +    public DateHistogramFacetBuilder factor(float factor) {, +        this.factor = factor;, +        if (preZone != null) {, +            builder.field("pre_zone", preZone);, +        }, +        if (postZone != null) {, +            builder.field("post_zone", postZone);, +        }, +        if (preOffset != 0) {, +            builder.field("pre_offset", preOffset);, +        }, +        if (postOffset != 0) {, +            builder.field("post_offset", postOffset);, +        }, +        if (factor != 1.0f) {, +            builder.field("factor", factor);, +++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/DateHistogramFacetBuilder.java, +import org.elasticsearch.common.unit.TimeValue;, +    private String preZone = null;, +    private String postZone = null;, +    long preOffset = 0;, +    long postOffset = 0;, +    float factor = 1.0f;, +     * Sets the pre time zone to use when bucketing the values. This timezone will be applied before, +     * rounding off the result., +     * <p/>, +     * Can either be in the form of "-10:00" or, +    public DateHistogramFacetBuilder preZone(String preZone) {, +        this.preZone = preZone;, +        return this;, +    }, +, +    /**, +     * Sets the post time zone to use when bucketing the values. This timezone will be applied after, +     * rounding off the result., +     * <p/>, +     * Can either be in the form of "-10:00" or, +     * one of the values listed here: http://joda-time.sourceforge.net/timezones.html., +     */, +    public DateHistogramFacetBuilder postZone(String postZone) {, +        this.postZone = postZone;, +        return this;, +    }, +, +    /**, +     * Sets a pre offset that will be applied before rounding the results., +     */, +    public DateHistogramFacetBuilder preOffset(TimeValue preOffset) {, +        this.preOffset = preOffset.millis();, +        return this;, +    }, +]