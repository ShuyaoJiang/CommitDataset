[+++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/UidFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/UidFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/VersionFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/UidFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/VersionFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/UidFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/VersionFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        // document's score as a read-only double., +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.doubleType).slot;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/UidFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/VersionFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        // document's score as a read-only double., +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.doubleType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() * (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left * ((Number)right).longValue();, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() / (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left / ((Number)right).longValue();, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() % (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left % ((Number)right).longValue();, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() + (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left + ((Number)right).longValue();, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() - (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left - ((Number)right).longValue();, +                        left instanceof Float || right instanceof Float ||, +                        left instanceof Long || right instanceof Long) {, +                if (left instanceof Double || left instanceof Float || left instanceof Long) {, +                if (right instanceof Double || right instanceof Float || right instanceof Long) {, +                        left instanceof Float || right instanceof Float ||, +                        left instanceof Long || right instanceof Long) {, +                if (left instanceof Double || left instanceof Float || left instanceof Long) {, +                if (right instanceof Double || right instanceof Float || right instanceof Long) {, +                        left instanceof Float || right instanceof Float ||, +                        left instanceof Long || right instanceof Long) {, +                if (left instanceof Double || left instanceof Float || left instanceof Long) {, +                if (right instanceof Double || right instanceof Float || right instanceof Long) {, +                        left instanceof Float || right instanceof Float ||, +                        left instanceof Long || right instanceof Long) {, +                if (left instanceof Double || left instanceof Float || left instanceof Long) {, +                if (right instanceof Double || right instanceof Float || right instanceof Long) {, +                        left instanceof Float || right instanceof Float ||, +                        left instanceof Long || right instanceof Long) {, +                if (left instanceof Double || left instanceof Float || left instanceof Long) {, +                if (right instanceof Double || right instanceof Float || right instanceof Long) {, +                        left instanceof Float || right instanceof Float ||, +                        left instanceof Long || right instanceof Long) {, +                if (left instanceof Double || left instanceof Float || left instanceof Long) {, +                if (right instanceof Double || right instanceof Float || right instanceof Long) {, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() < (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left < ((Number)right).longValue();, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() <= (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left <= ((Number)right).longValue();, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() > (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left > ((Number)right).longValue();, +                } else if (left instanceof Long) {, +                    return ((Number)left).longValue() >= (char)right;, +                } else if (right instanceof Long) {, +                    return (char)left >= ((Number)right).longValue();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/UidFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/VersionFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        // document's score as a read-only double., +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.doubleType).slot;]