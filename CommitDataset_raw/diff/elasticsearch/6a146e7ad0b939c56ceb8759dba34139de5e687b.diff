[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +import org.apache.lucene.analysis.Analyzer;, +        Analyzer oldAnalyzer = analyzer;, +        try {, +            MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +                analyzer = fieldMappers.searchAnalyzer();, +        } finally {, +            analyzer = oldAnalyzer;, +        }, +        MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +        MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +        Analyzer oldAnalyzer = analyzer;, +        try {, +            MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +                analyzer = fieldMappers.searchAnalyzer();, +        } finally {, +            analyzer = oldAnalyzer;, +        }, +        Analyzer oldAnalyzer = analyzer;, +        try {, +            MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +                analyzer = fieldMappers.searchAnalyzer();, +        } finally {, +            analyzer = oldAnalyzer;, +        }, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +import org.apache.lucene.analysis.Analyzer;, +        Analyzer oldAnalyzer = analyzer;, +        try {, +            MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +                analyzer = fieldMappers.searchAnalyzer();, +        } finally {, +            analyzer = oldAnalyzer;, +        }, +        MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +        MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +        Analyzer oldAnalyzer = analyzer;, +        try {, +            MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +                analyzer = fieldMappers.searchAnalyzer();, +        } finally {, +            analyzer = oldAnalyzer;, +        }, +        Analyzer oldAnalyzer = analyzer;, +        try {, +            MapperService.SmartNameFieldMappers fieldMappers = parseContext.smartFieldMappers(field);, +                analyzer = fieldMappers.searchAnalyzer();, +        } finally {, +            analyzer = oldAnalyzer;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +    public SmartNameObjectMapper smartNameObjectMapper(String smartName) {, +        int dotIndex = smartName.indexOf('.');, +        if (dotIndex != -1) {, +            String possibleType = smartName.substring(0, dotIndex);, +            DocumentMapper possibleDocMapper = mappers.get(possibleType);, +            if (possibleDocMapper != null) {, +                String possiblePath = smartName.substring(dotIndex + 1);, +                ObjectMapper mapper = possibleDocMapper.objectMappers().get(possiblePath);, +                if (mapper != null) {, +                    return new SmartNameObjectMapper(mapper, possibleDocMapper);, +                }, +            }, +        }, +        ObjectMappers mappers = objectMapper(smartName);, +        if (mappers != null) {, +            return new SmartNameObjectMapper(mappers.mapper(), null);, +        }, +        return null;, +    }, +, +    /**, +     * Same as {@link #smartNameFieldMappers(String)} but returns the first field mapper for it. Returns, +     * <tt>null</tt> if there is none., +     */, +    public FieldMapper smartNameFieldMapper(String smartName) {, +        FieldMappers fieldMappers = smartNameFieldMappers(smartName);, +        if (fieldMappers != null) {, +            return fieldMappers.mapper();, +        }, +        return null;, +    }, +, +    public FieldMapper smartNameFieldMapper(String smartName, @Nullable String[] types) {, +        FieldMappers fieldMappers = smartNameFieldMappers(smartName, types);, +        if (fieldMappers != null) {, +            return fieldMappers.mapper();, +        }, +        return null;, +    }, +, +    public FieldMappers smartNameFieldMappers(String smartName, @Nullable String[] types) {, +        if (types == null || types.length == 0) {, +            return smartNameFieldMappers(smartName);, +        }, +        for (String type : types) {, +            DocumentMapper documentMapper = mappers.get(type);, +            // we found a mapper, +            if (documentMapper != null) {, +                // see if we find a field for it]