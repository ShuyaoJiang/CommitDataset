[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +    public boolean isJobDeleted(String jobId) {, +        Job job = jobs.get(jobId);, +        return job == null || job.isDeleted();, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +    public boolean isJobDeleted(String jobId) {, +        Job job = jobs.get(jobId);, +        return job == null || job.isDeleted();, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +            listener = ActionListener.wrap(response -> gatherStatsForClosedJobs(mlMetadata,, +                    request, response, finalListener), listener::onFailure);, +        void gatherStatsForClosedJobs(MlMetadata mlMetadata, Request request, Response response,, +                                      ActionListener<Response> listener) {, +            List<String> jobIds = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata,, +                    request.expandedJobsIds, response.jobsStats.results());, +        static List<String> determineNonDeletedJobIdsWithoutLiveStats(MlMetadata mlMetadata,, +                                                                      List<String> requestedJobIds,, +                                                                      List<Response.JobStats> stats) {, +            return requestedJobIds.stream().filter(jobId -> !excludeJobIds.contains(jobId) &&, +                    !mlMetadata.isJobDeleted(jobId)).collect(Collectors.toList());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +    public boolean isJobDeleted(String jobId) {, +        Job job = jobs.get(jobId);, +        return job == null || job.isDeleted();, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +            listener = ActionListener.wrap(response -> gatherStatsForClosedJobs(mlMetadata,, +                    request, response, finalListener), listener::onFailure);, +        void gatherStatsForClosedJobs(MlMetadata mlMetadata, Request request, Response response,, +                                      ActionListener<Response> listener) {, +            List<String> jobIds = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata,, +                    request.expandedJobsIds, response.jobsStats.results());, +        static List<String> determineNonDeletedJobIdsWithoutLiveStats(MlMetadata mlMetadata,, +                                                                      List<String> requestedJobIds,, +                                                                      List<Response.JobStats> stats) {, +            return requestedJobIds.stream().filter(jobId -> !excludeJobIds.contains(jobId) &&, +                    !mlMetadata.isJobDeleted(jobId)).collect(Collectors.toList());, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/GetJobsStatsActionTests.java, +import org.elasticsearch.xpack.ml.MlMetadata;, +import static org.elasticsearch.xpack.ml.action.GetJobsStatsAction.TransportAction.determineNonDeletedJobIdsWithoutLiveStats;, +, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +        MlMetadata mlMetadata = mock(MlMetadata.class);, +        when(mlMetadata.isJobDeleted(eq("id4"))).thenReturn(true);, +, +        List<String> result = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata,, +                Collections.singletonList("id1"), Collections.emptyList());, +        result = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata,, +                Collections.singletonList("id1"), Collections.singletonList(, +                new GetJobsStatsAction.Response.JobStats("id1", new DataCounts("id1"), null, JobState.OPENED, null, null, null)));, +        result = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata,, +        result = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata,, +        result = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata,, +                Arrays.asList("id1", "id2", "id3"), Arrays.asList(, +                new GetJobsStatsAction.Response.JobStats("id1", new DataCounts("id1"), null, JobState.OPENED, null, null, null),, +                new GetJobsStatsAction.Response.JobStats("id3", new DataCounts("id3"), null, JobState.OPENED, null, null, null), +        result = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata, Arrays.asList("id1", "id2", "id3"),, +                        new GetJobsStatsAction.Response.JobStats("id1", new DataCounts("id1"), null, JobState.OPENED, null, null, null),, +                        new GetJobsStatsAction.Response.JobStats("id2", new DataCounts("id2"), null, JobState.OPENED, null, null, null),, +                        new GetJobsStatsAction.Response.JobStats("id3", new DataCounts("id3"), null, JobState.OPENED, null, null, null)));, +, +        // No jobs running, but job 4 is being deleted, +        result = determineNonDeletedJobIdsWithoutLiveStats(mlMetadata,, +                Arrays.asList("id1", "id2", "id3", "id4"), Collections.emptyList());, +        assertEquals(3, result.size());, +        assertEquals("id1", result.get(0));, +        assertEquals("id2", result.get(1));, +        assertEquals("id3", result.get(2));]