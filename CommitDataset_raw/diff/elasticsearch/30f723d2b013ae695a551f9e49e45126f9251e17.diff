[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/pipelining/HttpPipeliningHandler.java, + * Implements HTTP pipelining ordering, ensuring that responses are completely served in the same order as their corresponding requests., +    private static final int INITIAL_EVENTS_HELD = 8;, +    /*, +     * The current read and write sequence numbers. Read sequence numbers are attached to requests in the order they are read from the, +     * channel, and then transferred to responses. A response is not written to the channel context until its sequence number matches the, +     * current write sequence, implying that all preceding messages have been written., +     */, +    private final PriorityQueue<HttpPipelinedResponse> holdingQueue;, +     * Construct a new pipelining handler; this handler should be used downstream of HTTP decoding/aggregation., +     *, +     * @param maxEventsHeld the maximum number of channel events that will be retained prior to aborting the channel connection; this is, +     *                      required as events cannot queue up indefinitely, +        // we use a priority queue so that responses are ordered by their sequence number, +    public void channelRead(final ChannelHandlerContext ctx, final Object msg) throws Exception {, +    public void write(final ChannelHandlerContext ctx, final Object msg, final ChannelPromise promise) throws Exception {, +                        /*, +                         * Since the response with the lowest sequence number is the top of the priority queue, we know if its sequence, +                         * number does not match the current write sequence then we have not processed all preceding responses yet., +                         */]