[+++ b/core/src/main/java/org/elasticsearch/index/mapper/RangeFieldMapper.java, +        if (fieldType().rangeType == RangeType.DATE, +                && (includeDefaults || (fieldType().dateTimeFormatter() != null, +                && fieldType().dateTimeFormatter().format().equals(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format()) == false))) {, +        if (fieldType().rangeType == RangeType.DATE, +                && (includeDefaults || (fieldType().dateTimeFormatter() != null, +                && fieldType().dateTimeFormatter().locale() != Locale.ROOT))) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/RangeFieldMapper.java, +        if (fieldType().rangeType == RangeType.DATE, +                && (includeDefaults || (fieldType().dateTimeFormatter() != null, +                && fieldType().dateTimeFormatter().format().equals(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.format()) == false))) {, +        if (fieldType().rangeType == RangeType.DATE, +                && (includeDefaults || (fieldType().dateTimeFormatter() != null, +                && fieldType().dateTimeFormatter().locale() != Locale.ROOT))) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import java.util.Locale;, +, +    public void testSerializeDefaults() throws Exception {, +        for (String type : TYPES) {, +            String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", type).endObject().endObject(), +                .endObject().endObject().string();, +, +            DocumentMapper docMapper = parser.parse("type", new CompressedXContent(mapping));, +            RangeFieldMapper mapper = (RangeFieldMapper) docMapper.root().getMapper("field");, +            XContentBuilder builder = XContentFactory.jsonBuilder().startObject();, +            mapper.doXContentBody(builder, true, ToXContent.EMPTY_PARAMS);, +            String got = builder.endObject().string();, +, +            // if type is date_range we check that the mapper contains the default format and locale, +            // otherwise it should not contain a locale or format, +            assertTrue(got, got.contains("\"format\":\"strict_date_optional_time||epoch_millis\"") == type.equals("date_range"));, +            assertTrue(got, got.contains("\"locale\":" + "\"" + Locale.ROOT + "\"") == type.equals("date_range"));, +        }, +    }]