[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +                // powershell sessions run over winrm always run as administrator, whether --elevated is passed or not. however, +                // remote sessions have some restrictions on what they can do, such as impersonating another user (or the same user, +                // without administrator elevation), which we need to do for these tests. passing --elevated runs the session, +                // as a scheduled job locally on the vm as a true administrator to get around this limitation, +                //, +                // https://github.com/hashicorp/vagrant/blob/9c299a2a357fcf87f356bb9d56e18a037a53d138/plugins/communicators/winrm/communicator.rb#L195-L225, +                // https://devops-collective-inc.gitbooks.io/secrets-of-powershell-remoting/content/manuscript/accessing-remote-computers.html, +                javaPackagingTest.args = ['--elevated', '--command', 'powershell -File "$Env:PACKAGING_TESTS/run-tests.ps1"'], +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +                // powershell sessions run over winrm always run as administrator, whether --elevated is passed or not. however, +                // remote sessions have some restrictions on what they can do, such as impersonating another user (or the same user, +                // without administrator elevation), which we need to do for these tests. passing --elevated runs the session, +                // as a scheduled job locally on the vm as a true administrator to get around this limitation, +                //, +                // https://github.com/hashicorp/vagrant/blob/9c299a2a357fcf87f356bb9d56e18a037a53d138/plugins/communicators/winrm/communicator.rb#L195-L225, +                // https://devops-collective-inc.gitbooks.io/secrets-of-powershell-remoting/content/manuscript/accessing-remote-computers.html, +                javaPackagingTest.args = ['--elevated', '--command', 'powershell -File "$Env:PACKAGING_TESTS/run-tests.ps1"'], +++ b/buildSrc/version.properties, +lucene            = 7.4.0, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +                // powershell sessions run over winrm always run as administrator, whether --elevated is passed or not. however, +                // remote sessions have some restrictions on what they can do, such as impersonating another user (or the same user, +                // without administrator elevation), which we need to do for these tests. passing --elevated runs the session, +                // as a scheduled job locally on the vm as a true administrator to get around this limitation, +                //, +                // https://github.com/hashicorp/vagrant/blob/9c299a2a357fcf87f356bb9d56e18a037a53d138/plugins/communicators/winrm/communicator.rb#L195-L225, +                // https://devops-collective-inc.gitbooks.io/secrets-of-powershell-remoting/content/manuscript/accessing-remote-computers.html, +                javaPackagingTest.args = ['--elevated', '--command', 'powershell -File "$Env:PACKAGING_TESTS/run-tests.ps1"'], +++ b/buildSrc/version.properties, +lucene            = 7.4.0, +++ b/client/rest-high-level/build.gradle, +, +import org.elasticsearch.gradle.precommit.PrecommitTasks, +import org.gradle.api.XmlProvider, +import org.gradle.api.publish.maven.MavenPublication, +, +buildscript {, +  repositories {, +    maven {, +      url 'https://plugins.gradle.org/m2/', +    }, +  }, +  dependencies {, +    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4', +  }, +}, +, +apply plugin: 'com.github.johnrengelman.shadow', +    nebula(MavenPublication) {, +      artifact shadowJar, +      /*, +       * Configure the pom to include the "shadow" as compile dependencies, +       * because that is how we're using them but remove all other dependencies, +       * because they've been shaded into the jar., +       */, +      pom.withXml { XmlProvider xml ->, +        Node root = xml.asNode(), +        root.remove(root.dependencies), +        Node dependenciesNode = root.appendNode('dependencies'), +        project.configurations.shadow.allDependencies.each {, +          if (false == it instanceof SelfResolvingDependency) {, +            Node dependencyNode = dependenciesNode.appendNode('dependency'), +            dependencyNode.appendNode('groupId', it.group), +            dependencyNode.appendNode('artifactId', it.name), +            dependencyNode.appendNode('version', it.version), +            dependencyNode.appendNode('scope', 'compile'), +          }, +        }, +      }, +/*, + * We need somewhere to configure dependencies that we don't wish to shade, + * into the high level REST client. The shadow plugin creates a "shadow", + * configuration which is *almost* exactly that. It is never bundled into, + * the shaded jar but is used for main source compilation. Unfortunately,, + * by default it is not used for *test* source compilation and isn't used, + * in tests at all. This change makes it available for test compilation., + * A change below makes it available for testing., + */, +sourceSets {, +  test {, +    compileClasspath += configurations.shadow, +  }, +}, +, +  /*, +   * Everything in the "shadow" configuration is *not* copied into the, +   * shadowJar., +   */, +  shadow "org.elasticsearch:elasticsearch:${version}", +  shadow "org.elasticsearch.client:elasticsearch-rest-client:${version}", +  shadow "org.elasticsearch.plugin:parent-join-client:${version}"]