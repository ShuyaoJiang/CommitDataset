[+++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +     * Tries to acquire the {@link IndexWriter#WRITE_LOCK_NAME} on the given directory. The returned lock must be closed once, +     * the lock is released. If the lock can't be obtained a {@link LockObtainFailedException} is thrown., +     * This method uses the {@link IndexWriterConfig#getDefaultWriteLockTimeout()} as the lock timeout., +     */, +    public static Lock acquireWriteLock(Directory directory) throws IOException {, +        return acquireLock(directory, IndexWriter.WRITE_LOCK_NAME, IndexWriterConfig.getDefaultWriteLockTimeout());, +    }, +, +    /**, +     * Tries to acquire a lock on the given directory. The returned lock must be closed once, +     * the lock is released. If the lock can't be obtained a {@link LockObtainFailedException} is thrown., +     */, +    @SuppressForbidden(reason = "this method uses trappy Directory#makeLock API"), +    public static Lock acquireLock(Directory directory, String lockName, long timeout) throws IOException {, +        final Lock writeLock = directory.makeLock(lockName);, +        if (writeLock.obtain(timeout) == false) {, +            throw new LockObtainFailedException("failed to obtain lock: " + writeLock);, +        }, +        return writeLock;, +    }, +, +    /**, +        try (Lock writeLock = acquireWriteLock(directory)) {, +        try (Lock writeLock = acquireWriteLock(directory)) {, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +     * Tries to acquire the {@link IndexWriter#WRITE_LOCK_NAME} on the given directory. The returned lock must be closed once, +     * the lock is released. If the lock can't be obtained a {@link LockObtainFailedException} is thrown., +     * This method uses the {@link IndexWriterConfig#getDefaultWriteLockTimeout()} as the lock timeout., +     */, +    public static Lock acquireWriteLock(Directory directory) throws IOException {, +        return acquireLock(directory, IndexWriter.WRITE_LOCK_NAME, IndexWriterConfig.getDefaultWriteLockTimeout());, +    }, +, +    /**, +     * Tries to acquire a lock on the given directory. The returned lock must be closed once, +     * the lock is released. If the lock can't be obtained a {@link LockObtainFailedException} is thrown., +     */, +    @SuppressForbidden(reason = "this method uses trappy Directory#makeLock API"), +    public static Lock acquireLock(Directory directory, String lockName, long timeout) throws IOException {, +        final Lock writeLock = directory.makeLock(lockName);, +        if (writeLock.obtain(timeout) == false) {, +            throw new LockObtainFailedException("failed to obtain lock: " + writeLock);, +        }, +        return writeLock;, +    }, +, +    /**, +        try (Lock writeLock = acquireWriteLock(directory)) {, +        try (Lock writeLock = acquireWriteLock(directory)) {, +++ b/src/main/java/org/elasticsearch/common/util/MultiDataPathUpgrader.java, +import org.apache.lucene.store.LockObtainFailedException;, +import org.elasticsearch.common.lucene.Lucene;, +            try (final Lock lock = Lucene.acquireWriteLock(directory)) {, +            } catch (LockObtainFailedException ex) {, +                throw new IllegalStateException("Can't obtain lock on " + targetPath.resolveIndex(), ex);, +, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +     * Tries to acquire the {@link IndexWriter#WRITE_LOCK_NAME} on the given directory. The returned lock must be closed once, +     * the lock is released. If the lock can't be obtained a {@link LockObtainFailedException} is thrown., +     * This method uses the {@link IndexWriterConfig#getDefaultWriteLockTimeout()} as the lock timeout., +     */, +    public static Lock acquireWriteLock(Directory directory) throws IOException {, +        return acquireLock(directory, IndexWriter.WRITE_LOCK_NAME, IndexWriterConfig.getDefaultWriteLockTimeout());, +    }, +, +    /**, +     * Tries to acquire a lock on the given directory. The returned lock must be closed once, +     * the lock is released. If the lock can't be obtained a {@link LockObtainFailedException} is thrown., +     */, +    @SuppressForbidden(reason = "this method uses trappy Directory#makeLock API"), +    public static Lock acquireLock(Directory directory, String lockName, long timeout) throws IOException {, +        final Lock writeLock = directory.makeLock(lockName);, +        if (writeLock.obtain(timeout) == false) {, +            throw new LockObtainFailedException("failed to obtain lock: " + writeLock);, +        }, +        return writeLock;, +    }, +, +    /**, +        try (Lock writeLock = acquireWriteLock(directory)) {, +        try (Lock writeLock = acquireWriteLock(directory)) {, +++ b/src/main/java/org/elasticsearch/common/util/MultiDataPathUpgrader.java, +import org.apache.lucene.store.LockObtainFailedException;, +import org.elasticsearch.common.lucene.Lucene;, +            try (final Lock lock = Lucene.acquireWriteLock(directory)) {, +            } catch (LockObtainFailedException ex) {, +                throw new IllegalStateException("Can't obtain lock on " + targetPath.resolveIndex(), ex);, +, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.common.lucene.Lucene;, +                    try {, +                        locks[dirIndex] = Lucene.acquireLock(luceneDir, NODE_LOCK_FILENAME, 0);, +                    } catch (LockObtainFailedException ex) {, +, +                try {, +                    locks[i] = Lucene.acquireWriteLock(dirs[i]);, +                } catch (IOException ex) {, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +     * Tries to acquire the {@link IndexWriter#WRITE_LOCK_NAME} on the given directory. The returned lock must be closed once]