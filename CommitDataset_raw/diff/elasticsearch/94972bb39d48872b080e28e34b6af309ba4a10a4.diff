[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        BytesReference source = null;, +                        if (request.searchRequest().source() != null && request.searchRequest().source().length() > 0) {, +                            source = request.searchRequest().source();, +                        } else if (request.searchRequest().extraSource() != null && request.searchRequest().extraSource().length() > 0) {, +                            source = request.searchRequest().extraSource();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        BytesReference source = null;, +                        if (request.searchRequest().source() != null && request.searchRequest().source().length() > 0) {, +                            source = request.searchRequest().source();, +                        } else if (request.searchRequest().extraSource() != null && request.searchRequest().extraSource().length() > 0) {, +                            source = request.searchRequest().extraSource();, +++ b/core/src/main/java/org/elasticsearch/action/count/CountRequest.java, + * <p>, + * The request requires the query source to be set either using {@link #source(QuerySourceBuilder)},, + * or {@link #source(byte[])}., +    private BytesReference source;, +, +    /**, +     * The source to execute., +     */, +    public BytesReference source() {, +        return source;, +    }, +     * The source to execute., +    public CountRequest source(QuerySourceBuilder sourceBuilder) {, +        this.source = sourceBuilder.buildAsBytes(Requests.CONTENT_TYPE);, +    /**, +     * The source to execute in the form of a map., +     */, +    @SuppressWarnings("unchecked"), +    public CountRequest source(Map querySource) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(Requests.CONTENT_TYPE);, +            builder.map(querySource);, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticsearchGenerationException("Failed to generate [" + querySource + "]", e);, +        }, +    }, +, +    public CountRequest source(XContentBuilder builder) {, +        this.source = builder.bytes();, +    /**, +     * The source to execute. It is preferable to use either {@link #source(byte[])}, +     * or {@link #source(QuerySourceBuilder)}., +     */, +    public CountRequest source(String querySource) {, +        this.source = new BytesArray(querySource);, +        return this;, +    }, +    /**, +     * The source to execute., +     */, +    public CountRequest source(byte[] querySource) {, +        return source(querySource, 0, querySource.length);, +    }, +, +    /**, +     * The source to execute., +     */, +    public CountRequest source(byte[] querySource, int offset, int length) {, +        return source(new BytesArray(querySource, offset, length));, +    }, +, +    public CountRequest source(BytesReference querySource) {, +        this.source = querySource;, +        return this;, +    }, +            sSource = XContentHelper.convertToJson(source, false);, +        SearchRequest searchRequest = new SearchRequest(indices());, +        searchRequest.indicesOptions(indicesOptions());, +        searchRequest.types(types());]