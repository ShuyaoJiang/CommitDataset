[+++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.index.FieldInfo.IndexOptions;, +import org.elasticsearch.Version;, +    /** Returns the {@link AllEntries} containing the original text fields for the document. */, +    public AllEntries getAllEntries() {, +        return allEntries;, +    }, +, +    static {, +        assert Version.CURRENT.luceneVersion == org.apache.lucene.util.Version.LUCENE_48: "Re-use the incoming AllTokenStream once we upgrade to Lucene 4.9";, +    }, +, +            if (allEntries.customBoost() && fieldType().indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {, +                // AllTokenStream maps boost to 4-byte payloads, so we only need to use it any field had non-default (!= 1.0f) boost and if, +                // positions are indexed:, +            } else {, +                return analyzer.tokenStream(name, allEntries);, +            }, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.index.FieldInfo.IndexOptions;, +import org.elasticsearch.Version;, +    /** Returns the {@link AllEntries} containing the original text fields for the document. */, +    public AllEntries getAllEntries() {, +        return allEntries;, +    }, +, +    static {, +        assert Version.CURRENT.luceneVersion == org.apache.lucene.util.Version.LUCENE_48: "Re-use the incoming AllTokenStream once we upgrade to Lucene 4.9";, +    }, +, +            if (allEntries.customBoost() && fieldType().indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {, +                // AllTokenStream maps boost to 4-byte payloads, so we only need to use it any field had non-default (!= 1.0f) boost and if, +                // positions are indexed:, +            } else {, +                return analyzer.tokenStream(name, allEntries);, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +        if (fieldType.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.index.FieldInfo.IndexOptions;, +import org.elasticsearch.Version;, +    /** Returns the {@link AllEntries} containing the original text fields for the document. */, +    public AllEntries getAllEntries() {, +        return allEntries;, +    }, +, +    static {, +        assert Version.CURRENT.luceneVersion == org.apache.lucene.util.Version.LUCENE_48: "Re-use the incoming AllTokenStream once we upgrade to Lucene 4.9";, +    }, +, +            if (allEntries.customBoost() && fieldType().indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {, +                // AllTokenStream maps boost to 4-byte payloads, so we only need to use it any field had non-default (!= 1.0f) boost and if, +                // positions are indexed:, +            } else {, +                return analyzer.tokenStream(name, allEntries);, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +        if (fieldType.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {, +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +        // One field is boosted so we should see AllTokenStream used:, +        assertThat(field.tokenStream(docMapper.mappers().indexAnalyzer()), Matchers.instanceOf(AllTokenStream.class));, +        AllEntries allEntries = field.getAllEntries();, +        AllEntries allEntries = field.getAllEntries();, +        AllEntries allEntries = field.getAllEntries();, +    // #6187: make sure we see AllTermQuery even when offsets are indexed in the _all field:, +    @Test, +    public void testAllMappersWithOffsetsTermQuery() throws Exception {, +        String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/all/mapping_offsets_on_all.json");, +        DocumentMapper docMapper = MapperTestUtils.newParser().parse(mapping);, +        byte[] json = copyToBytesFromClasspath("/org/elasticsearch/index/mapper/all/test1.json");, +        Document doc = docMapper.parse(new BytesArray(json)).rootDoc();, +        AllField field = (AllField) doc.getField("_all");, +        // _all field indexes positions, and mapping has boosts, so we should see AllTokenStream:, +        assertThat(field.tokenStream(docMapper.mappers().indexAnalyzer()), Matchers.instanceOf(AllTokenStream.class));, +        AllEntries allEntries = field.getAllEntries();, +        assertThat(allEntries.fields().size(), equalTo(3));, +        assertThat(allEntries.fields().contains("address.last.location"), equalTo(true));, +        assertThat(allEntries.fields().contains("name.last"), equalTo(true));, +        assertThat(allEntries.fields().contains("simple1"), equalTo(true));, +        FieldMapper mapper = docMapper.mappers().smartNameFieldMapper("_all");, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(mapper.queryStringTermQuery(new Term("_all", "foobar")), Matchers.instanceOf(AllTermQuery.class));, +    }, +, +    // #6187: if _all doesn't index positions then we never use AllTokenStream, even if some fields have boost, +    @Test, +    public void testBoostWithOmitPositions() throws Exception {, +        String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/all/mapping_boost_omit_positions_on_all.json");, +        DocumentMapper docMapper = MapperTestUtils.newParser().parse(mapping);, +        byte[] json = copyToBytesFromClasspath("/org/elasticsearch/index/mapper/all/test1.json");, +        Document doc = docMapper.parse(new BytesArray(json)).rootDoc();, +        AllField field = (AllField) doc.getField("_all");, +        // _all field omits positions, so we should not get AllTokenStream even though fields are boosted, +        assertThat(field.tokenStream(docMapper.mappers().indexAnalyzer()), Matchers.not(Matchers.instanceOf(AllTokenStream.class)));, +    }, +, +    // #6187: if no fields were boosted, we shouldn't use AllTokenStream, +    @Test, +    public void testNoBoost() throws Exception {, +        String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/all/noboost-mapping.json");]