[+++ b/core/src/test/java/org/elasticsearch/search/morelikethis/MoreLikeThisTests.java, +                .like((Item) new Item().doc(malformedFieldDoc).index("test").type("type1")), +                .like((Item) new Item().doc(emptyDoc).index("test").type("type1")), +                .like((Item) new Item().doc(malformedDoc).index("test").type("type1")), +                .like((Item) new Item().doc(normalDoc).index("test").type("type1")), +, +    @Test, +    public void testSelectFields() throws IOException, ExecutionException, InterruptedException {, +        assertAcked(prepareCreate("test"), +                .addMapping("type1", "text", "type=string,analyzer=whitespace", "text1", "type=string,analyzer=whitespace"));, +        ensureGreen("test");, +, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource(jsonBuilder(), +                        .startObject(), +                        .field("text", "hello world"), +                        .field("text1", "elasticsearch"), +                        .endObject()),, +                client().prepareIndex("test", "type1", "2").setSource(jsonBuilder(), +                        .startObject(), +                        .field("text", "goodby moon"), +                        .field("text1", "elasticsearch"), +                        .endObject()));, +, +        MoreLikeThisQueryBuilder mltQuery = moreLikeThisQuery(), +                .like(new Item("test", "type1", "1")), +                .minTermFreq(0), +                .minDocFreq(0), +                .include(true), +                .minimumShouldMatch("1%");, +        SearchResponse response = client().prepareSearch("test").setTypes("type1"), +                .setQuery(mltQuery).get();, +        assertSearchResponse(response);, +        assertHitCount(response, 2);, +, +        mltQuery = moreLikeThisQuery("text"), +                .like(new Item("test", "type1", "1")), +                .minTermFreq(0), +                .minDocFreq(0), +                .include(true), +                .minimumShouldMatch("1%");, +        response = client().prepareSearch("test").setTypes("type1"), +                .setQuery(mltQuery).get();, +        assertSearchResponse(response);, +        assertHitCount(response, 1);, +    }, +]