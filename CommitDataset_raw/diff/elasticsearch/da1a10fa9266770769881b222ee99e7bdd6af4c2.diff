[+++ b/server/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +        declareFieldArray(consumer, (p, c) -> objectParser.parse(p, c), field, ValueType.OBJECT_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.text(), field, ValueType.STRING_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.doubleValue(), field, ValueType.DOUBLE_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.floatValue(), field, ValueType.FLOAT_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.longValue(), field, ValueType.LONG_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.intValue(), field, ValueType.INT_ARRAY);, +    }, +, +    /**, +     * Declares a field that can contain an array of elements listed in the type ValueType enum, +     */, +    public <T> void declareFieldArray(BiConsumer<Value, List<T>> consumer, ContextParser<Context, T> itemParser,, +                                      ParseField field, ValueType type) {, +        declareField(consumer, (p, c) -> parseArray(p, () -> itemParser.parse(p, c)), field, type);, +, +        if (parser.currentToken().isValue(), +                || parser.currentToken() == XContentParser.Token.VALUE_NULL, +                || parser.currentToken() == XContentParser.Token.START_OBJECT) {, +                if (parser.currentToken().isValue(), +                        || parser.currentToken() == XContentParser.Token.VALUE_NULL, +                        || parser.currentToken() == XContentParser.Token.START_OBJECT) {, +++ b/server/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +        declareFieldArray(consumer, (p, c) -> objectParser.parse(p, c), field, ValueType.OBJECT_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.text(), field, ValueType.STRING_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.doubleValue(), field, ValueType.DOUBLE_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.floatValue(), field, ValueType.FLOAT_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.longValue(), field, ValueType.LONG_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.intValue(), field, ValueType.INT_ARRAY);, +    }, +, +    /**, +     * Declares a field that can contain an array of elements listed in the type ValueType enum, +     */, +    public <T> void declareFieldArray(BiConsumer<Value, List<T>> consumer, ContextParser<Context, T> itemParser,, +                                      ParseField field, ValueType type) {, +        declareField(consumer, (p, c) -> parseArray(p, () -> itemParser.parse(p, c)), field, type);, +, +        if (parser.currentToken().isValue(), +                || parser.currentToken() == XContentParser.Token.VALUE_NULL, +                || parser.currentToken() == XContentParser.Token.START_OBJECT) {, +                if (parser.currentToken().isValue(), +                        || parser.currentToken() == XContentParser.Token.VALUE_NULL, +                        || parser.currentToken() == XContentParser.Token.START_OBJECT) {, +++ b/server/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +        VALUE_OBJECT_ARRAY(VALUE_BOOLEAN, VALUE_NULL, VALUE_EMBEDDED_OBJECT, VALUE_NUMBER, VALUE_STRING, START_OBJECT, START_ARRAY),, +        VALUE_ARRAY(VALUE_BOOLEAN, VALUE_NULL, VALUE_NUMBER, VALUE_STRING, START_ARRAY);, +++ b/server/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +        declareFieldArray(consumer, (p, c) -> objectParser.parse(p, c), field, ValueType.OBJECT_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.text(), field, ValueType.STRING_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.doubleValue(), field, ValueType.DOUBLE_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.floatValue(), field, ValueType.FLOAT_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.longValue(), field, ValueType.LONG_ARRAY);, +        declareFieldArray(consumer, (p, c) -> p.intValue(), field, ValueType.INT_ARRAY);, +    }, +, +    /**, +     * Declares a field that can contain an array of elements listed in the type ValueType enum, +     */, +    public <T> void declareFieldArray(BiConsumer<Value, List<T>> consumer, ContextParser<Context, T> itemParser,, +                                      ParseField field, ValueType type) {, +        declareField(consumer, (p, c) -> parseArray(p, () -> itemParser.parse(p, c)), field, type);, +, +        if (parser.currentToken().isValue(), +                || parser.currentToken() == XContentParser.Token.VALUE_NULL, +                || parser.currentToken() == XContentParser.Token.START_OBJECT) {, +                if (parser.currentToken().isValue(), +                        || parser.currentToken() == XContentParser.Token.VALUE_NULL, +                        || parser.currentToken() == XContentParser.Token.START_OBJECT) {, +++ b/server/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +        VALUE_OBJECT_ARRAY(VALUE_BOOLEAN, VALUE_NULL, VALUE_EMBEDDED_OBJECT, VALUE_NUMBER, VALUE_STRING, START_OBJECT, START_ARRAY),, +        VALUE_ARRAY(VALUE_BOOLEAN, VALUE_NULL, VALUE_NUMBER, VALUE_STRING, START_ARRAY);, +++ b/server/src/test/java/org/elasticsearch/common/xcontent/ObjectParserTests.java, +import static org.hamcrest.CoreMatchers.startsWith;, +    public void testArraysOfGenericValues() throws IOException {, +        XContentParser parser = createParser(JsonXContent.jsonXContent,, +            "{\n", +                + "  \"test_array\":  [ 1, null, \"3\", 4.2],\n", +                + "  \"int_array\":  [ 1, 2, 3]\n", +                + "}");, +        class TestStruct {, +            List<Object> testArray = new ArrayList<>();, +, +            List<Integer> ints = new ArrayList<>();, +, +            public void setInts(List<Integer> ints) {, +                this.ints = ints;, +            }, +, +            public void setArray(List<Object> testArray) {, +                this.testArray = testArray;, +            }, +        }, +        ObjectParser<TestStruct, Void> objectParser = new ObjectParser<>("foo");, +        TestStruct s = new TestStruct();, +, +        objectParser.declareFieldArray(TestStruct::setArray, (p, c) -> XContentParserUtils.parseFieldsValue(p),, +            new ParseField("test_array"), ValueType.VALUE_ARRAY);, +        objectParser.declareIntArray(TestStruct::setInts, new ParseField("int_array"));, +        objectParser.parse(parser, s, null);]