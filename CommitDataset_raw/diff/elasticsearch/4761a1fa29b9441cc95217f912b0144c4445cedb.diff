[+++ b/server/src/main/java/org/elasticsearch/action/AliasesRequest.java, +     * Replaces current aliases with the provided aliases., +     *, +     * Sometimes aliases expressions need to be resolved to concrete aliases prior to executing the transport action., +    void replaceAliases(String... aliases);, +++ b/server/src/main/java/org/elasticsearch/action/AliasesRequest.java, +     * Replaces current aliases with the provided aliases., +     *, +     * Sometimes aliases expressions need to be resolved to concrete aliases prior to executing the transport action., +    void replaceAliases(String... aliases);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +        public void replaceAliases(String... aliases) {, +            this.aliases = aliases;, +        }, +, +        @Override, +++ b/server/src/main/java/org/elasticsearch/action/AliasesRequest.java, +     * Replaces current aliases with the provided aliases., +     *, +     * Sometimes aliases expressions need to be resolved to concrete aliases prior to executing the transport action., +    void replaceAliases(String... aliases);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +        public void replaceAliases(String... aliases) {, +            this.aliases = aliases;, +        }, +, +        @Override, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/GetAliasesRequest.java, +import org.elasticsearch.Version;, +    private String[] originalAliases = Strings.EMPTY_ARRAY;, +    public GetAliasesRequest(String... aliases) {, +        this.originalAliases = aliases;, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            originalAliases = in.readStringArray();, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            out.writeStringArray(originalAliases);, +        }, +        this.originalAliases = aliases;, +    public void replaceAliases(String... aliases) {, +        this.aliases = aliases;, +    }, +, +    /**, +     * Returns the aliases as was originally specified by the user, +     */, +    public String[] getOriginalAliases() {, +        return originalAliases;, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/action/AliasesRequest.java, +     * Replaces current aliases with the provided aliases., +     *, +     * Sometimes aliases expressions need to be resolved to concrete aliases prior to executing the transport action., +    void replaceAliases(String... aliases);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +        public void replaceAliases(String... aliases) {, +            this.aliases = aliases;, +        }, +, +        @Override, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/GetAliasesRequest.java, +import org.elasticsearch.Version;, +    private String[] originalAliases = Strings.EMPTY_ARRAY;, +    public GetAliasesRequest(String... aliases) {, +        this.originalAliases = aliases;, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            originalAliases = in.readStringArray();, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            out.writeStringArray(originalAliases);, +        }, +        this.originalAliases = aliases;, +    public void replaceAliases(String... aliases) {, +        this.aliases = aliases;, +    }, +, +    /**, +     * Returns the aliases as was originally specified by the user, +     */, +    public String[] getOriginalAliases() {, +        return originalAliases;, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/TransportGetAliasesAction.java, +import java.util.Collections;, +        ImmutableOpenMap<String, List<AliasMetaData>> aliases = state.metaData().findAliases(request.aliases(), concreteIndices);, +        listener.onResponse(new GetAliasesResponse(postProcess(request, concreteIndices, aliases)));, +, +    /**, +     * Fills alias result with empty entries for requested indices when no specific aliases were requested., +     */, +    static ImmutableOpenMap<String, List<AliasMetaData>> postProcess(GetAliasesRequest request, String[] concreteIndices,, +                                                                     ImmutableOpenMap<String, List<AliasMetaData>> aliases) {, +        boolean noAliasesSpecified = request.getOriginalAliases() == null || request.getOriginalAliases().length == 0;, +        ImmutableOpenMap.Builder<String, List<AliasMetaData>> mapBuilder = ImmutableOpenMap.builder(aliases);, +        for (String index : concreteIndices) {, +            if (aliases.get(index) == null && noAliasesSpecified) {]