[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +import java.util.Map;, +        Map<String, LocalMethod> localMethods = root.analyze(painlessLookup);, +            clazz.getField("$LOCALS").set(null, localMethods);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +import java.util.Map;, +        Map<String, LocalMethod> localMethods = root.analyze(painlessLookup);, +            clazz.getField("$LOCALS").set(null, localMethods);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +    static MethodHandle lookupMethod(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, MethodType callSiteType, Class<?> receiverClass, String name, Object args[]), +            throws Throwable {, +, +                                                      localMethods,, +                                                              localMethods,, +    static MethodHandle lookupReference(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, String interfaceClass, Class<?> receiverClass, String name) throws Throwable {, +        return lookupReferenceInternal(painlessLookup, localMethods, methodHandlesLookup,, +                interfaceType, PainlessLookupUtility.typeToCanonicalTypeName(implMethod.targetClass),, +    private static MethodHandle lookupReferenceInternal(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, Class<?> clazz, String type, String call, Class<?>... captures) throws Throwable {, +             LocalMethod localMethod = localMethods.get(Locals.buildLocalMethodKey(call, arity));, +             if (localMethod == null) {, +             ref = new FunctionRef(clazz, interfaceMethod, call, localMethod.methodType, captures.length);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +import java.util.Map;, +        Map<String, LocalMethod> localMethods = root.analyze(painlessLookup);, +            clazz.getField("$LOCALS").set(null, localMethods);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +    static MethodHandle lookupMethod(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, MethodType callSiteType, Class<?> receiverClass, String name, Object args[]), +            throws Throwable {, +, +                                                      localMethods,, +                                                              localMethods,, +    static MethodHandle lookupReference(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, String interfaceClass, Class<?> receiverClass, String name) throws Throwable {, +        return lookupReferenceInternal(painlessLookup, localMethods, methodHandlesLookup,, +                interfaceType, PainlessLookupUtility.typeToCanonicalTypeName(implMethod.targetClass),, +    private static MethodHandle lookupReferenceInternal(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, Class<?> clazz, String type, String call, Class<?>... captures) throws Throwable {, +             LocalMethod localMethod = localMethods.get(Locals.buildLocalMethodKey(call, arity));, +             if (localMethod == null) {, +             ref = new FunctionRef(clazz, interfaceMethod, call, localMethod.methodType, captures.length);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +import java.util.Map;, +        private final Map<String, LocalMethod> localMethods;, +        PIC(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +                MethodHandles.Lookup methodHandlesLookup, String name, MethodType type, int initialDepth, int flavor, Object[] args) {, +            this.localMethods = localMethods;, +                    return Def.lookupMethod(painlessLookup, localMethods, methodHandlesLookup, type(), receiver, name, args);, +                    return Def.lookupReference(painlessLookup, localMethods, methodHandlesLookup, (String) args[0], receiver, name);, +    @SuppressWarnings("unchecked"), +    public static CallSite bootstrap(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, String name, MethodType type, int initialDepth, int flavor, Object... args) {, +                return new PIC(painlessLookup, localMethods, methodHandlesLookup, name, type, initialDepth, flavor, args);, +                return new PIC(painlessLookup, localMethods, methodHandlesLookup, name, type, initialDepth, flavor, args);, +                return new PIC(painlessLookup, localMethods, methodHandlesLookup, name, type, initialDepth, flavor, args);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +import java.util.Map;, +        Map<String, LocalMethod> localMethods = root.analyze(painlessLookup);, +            clazz.getField("$LOCALS").set(null, localMethods);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +    static MethodHandle lookupMethod(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, MethodType callSiteType, Class<?> receiverClass, String name, Object args[]), +            throws Throwable {, +, +                                                      localMethods,, +                                                              localMethods,, +    static MethodHandle lookupReference(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, String interfaceClass, Class<?> receiverClass, String name) throws Throwable {, +        return lookupReferenceInternal(painlessLookup, localMethods, methodHandlesLookup,, +                interfaceType, PainlessLookupUtility.typeToCanonicalTypeName(implMethod.targetClass),, +    private static MethodHandle lookupReferenceInternal(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, Class<?> clazz, String type, String call, Class<?>... captures) throws Throwable {, +             LocalMethod localMethod = localMethods.get(Locals.buildLocalMethodKey(call, arity));, +             if (localMethod == null) {, +             ref = new FunctionRef(clazz, interfaceMethod, call, localMethod.methodType, captures.length);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +import org.elasticsearch.painless.Locals.LocalMethod;, +import java.util.Map;, +        private final Map<String, LocalMethod> localMethods;, +        PIC(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +                MethodHandles.Lookup methodHandlesLookup, String name, MethodType type, int initialDepth, int flavor, Object[] args) {, +            this.localMethods = localMethods;, +                    return Def.lookupMethod(painlessLookup, localMethods, methodHandlesLookup, type(), receiver, name, args);, +                    return Def.lookupReference(painlessLookup, localMethods, methodHandlesLookup, (String) args[0], receiver, name);, +    @SuppressWarnings("unchecked"), +    public static CallSite bootstrap(PainlessLookup painlessLookup, Map<String, LocalMethod> localMethods,, +            MethodHandles.Lookup methodHandlesLookup, String name, MethodType type, int initialDepth, int flavor, Object... args) {, +                return new PIC(painlessLookup, localMethods, methodHandlesLookup, name, type, initialDepth, flavor, args);, +                return new PIC(painlessLookup, localMethods, methodHandlesLookup, name, type, initialDepth, flavor, args);]