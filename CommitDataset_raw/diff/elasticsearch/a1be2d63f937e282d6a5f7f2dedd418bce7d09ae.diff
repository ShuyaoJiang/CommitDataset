[+++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +import java.util.Collections;, +        Collections.addAll(this.filters, filters);, +     * @return the list of queries added to "and"., +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +import java.util.Collections;, +        Collections.addAll(this.filters, filters);, +     * @return the list of queries added to "and"., +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/BoostingQueryBuilder.java, +    public QueryBuilder positiveQuery() {, +    public QueryBuilder negativeQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +import java.util.Collections;, +        Collections.addAll(this.filters, filters);, +     * @return the list of queries added to "and"., +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/BoostingQueryBuilder.java, +    public QueryBuilder positiveQuery() {, +    public QueryBuilder negativeQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +    public Object value() {, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +import java.util.Collections;, +        Collections.addAll(this.filters, filters);, +     * @return the list of queries added to "and"., +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/BoostingQueryBuilder.java, +    public QueryBuilder positiveQuery() {, +    public QueryBuilder negativeQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +    public Object value() {, +++ b/core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryBuilder.java, +    public QueryBuilder innerQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +import java.util.Collections;, +        Collections.addAll(this.filters, filters);, +     * @return the list of queries added to "and"., +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/BoostingQueryBuilder.java, +    public QueryBuilder positiveQuery() {, +    public QueryBuilder negativeQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +    public Object value() {, +++ b/core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryBuilder.java, +    public QueryBuilder innerQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java, +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +import java.util.Collections;, +        Collections.addAll(this.filters, filters);, +     * @return the list of queries added to "and"., +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/BoostingQueryBuilder.java, +    public QueryBuilder positiveQuery() {, +    public QueryBuilder negativeQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +    public Object value() {, +++ b/core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryBuilder.java, +    public QueryBuilder innerQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java, +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +    private final String fieldName;, +    public ExistsQueryBuilder(String fieldName) {, +        this.fieldName = fieldName;, +    public String fieldName() {, +        return this.fieldName;, +        builder.field("field", fieldName);, +        return newFilter(context, fieldName);, +        return Objects.hash(fieldName);, +        return Objects.equals(fieldName, other.fieldName);, +        out.writeString(fieldName);, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +import java.util.Collections;, +        Collections.addAll(this.filters, filters);, +     * @return the list of queries added to "and"., +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/BoostingQueryBuilder.java, +    public QueryBuilder positiveQuery() {, +    public QueryBuilder negativeQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +    public Object value() {, +++ b/core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryBuilder.java, +    public QueryBuilder innerQuery() {, +++ b/core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java, +    public List<QueryBuilder> innerQueries() {, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +    private final String fieldName;, +    public ExistsQueryBuilder(String fieldName) {, +        this.fieldName = fieldName;, +    public String fieldName() {, +        return this.fieldName;, +        builder.field("field", fieldName);, +        return newFilter(context, fieldName);, +        return Objects.hash(fieldName);, +        return Objects.equals(fieldName, other.fieldName);, +        out.writeString(fieldName);, +++ b/core/src/main/java/org/elasticsearch/index/query/FilteredQueryBuilder.java]