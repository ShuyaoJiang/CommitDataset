[+++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java, +            // only connect edges if intersections are pairwise (per comment above), +            if (e1.intersect != Edge.maxCoordinate() && e2.intersect != Edge.maxCoordinate()) {, +        }, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java, +            // only connect edges if intersections are pairwise (per comment above), +            if (e1.intersect != Edge.maxCoordinate() && e2.intersect != Edge.maxCoordinate()) {, +        }, +++ b/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java, +        public static Coordinate maxCoordinate() {, +            return IntersectionOrder.SENTINEL;, +        }, +, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java, +            // only connect edges if intersections are pairwise (per comment above), +            if (e1.intersect != Edge.maxCoordinate() && e2.intersect != Edge.maxCoordinate()) {, +        }, +++ b/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java, +        public static Coordinate maxCoordinate() {, +            return IntersectionOrder.SENTINEL;, +        }, +, +++ b/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java, +        // test case 1: test the positive side of the dateline, +        assertPolygon(shape);, +, +        // test case 2: test the negative side of the dateline, +        builder = ShapeBuilder.newPolygon(), +                .point(-180, 0), +                .point(-176, 4), +                .point(-180, -4), +                .point(-180, 0);, +, +        shape = builder.close().build();, +        assertPolygon(shape);, +     }, +, +    /**, +     * Test an enveloping polygon around the max mercator bounds, +     */, +    @Test, +    public void testBoundaryShape() {, +        PolygonBuilder builder = ShapeBuilder.newPolygon(), +                .point(-180, 90), +                .point(180, 90), +                .point(180, -90), +                .point(-180, -90);, +, +        Shape shape = builder.close().build();]