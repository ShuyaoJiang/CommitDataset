[+++ b/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +        if (request.hasContent() && request.isContentConsumed() == false) {, +            throw new IllegalArgumentException("request [" + request.method() + " " + request.path() + "] does not support having a body");, +        }, +, +++ b/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +        if (request.hasContent() && request.isContentConsumed() == false) {, +            throw new IllegalArgumentException("request [" + request.method() + " " + request.path() + "] does not support having a body");, +        }, +, +++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java, +    private boolean contentConsumed = false;, +, +    public boolean isContentConsumed() {, +        return contentConsumed;, +    }, +, +        return content(false).length() > 0;, +        return content(true);, +    }, +, +    protected BytesReference content(final boolean contentConsumed) {, +        this.contentConsumed = this.contentConsumed | contentConsumed;, +++ b/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +        if (request.hasContent() && request.isContentConsumed() == false) {, +            throw new IllegalArgumentException("request [" + request.method() + " " + request.path() + "] does not support having a body");, +        }, +, +++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java, +    private boolean contentConsumed = false;, +, +    public boolean isContentConsumed() {, +        return contentConsumed;, +    }, +, +        return content(false).length() > 0;, +        return content(true);, +    }, +, +    protected BytesReference content(final boolean contentConsumed) {, +        this.contentConsumed = this.contentConsumed | contentConsumed;, +++ b/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestForceMergeAction.java, +, +    public RestForceMergeAction(final Settings settings, final RestController controller) {, +        final ForceMergeRequest mergeRequest = new ForceMergeRequest(Strings.splitStringByCommaToArray(request.param("index")));, +, +++ b/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +        if (request.hasContent() && request.isContentConsumed() == false) {, +            throw new IllegalArgumentException("request [" + request.method() + " " + request.path() + "] does not support having a body");, +        }, +, +++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java, +    private boolean contentConsumed = false;, +, +    public boolean isContentConsumed() {, +        return contentConsumed;, +    }, +, +        return content(false).length() > 0;, +        return content(true);, +    }, +, +    protected BytesReference content(final boolean contentConsumed) {, +        this.contentConsumed = this.contentConsumed | contentConsumed;, +++ b/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestForceMergeAction.java, +, +    public RestForceMergeAction(final Settings settings, final RestController controller) {, +        final ForceMergeRequest mergeRequest = new ForceMergeRequest(Strings.splitStringByCommaToArray(request.param("index")));, +, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/forcemerge/RestForceMergeActionTests.java, +import org.elasticsearch.test.rest.FakeRestChannel;, +                .withContent(new BytesArray(json), XContentType.JSON), +                .withPath("/_forcemerge"), +                .build();, +            () -> handler.handleRequest(request, new FakeRestChannel(request, randomBoolean(), 1), mock(NodeClient.class)));, +        assertThat(e.getMessage(), equalTo("request [GET /_forcemerge] does not support having a body"));, +, +++ b/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +        if (request.hasContent() && request.isContentConsumed() == false) {, +            throw new IllegalArgumentException("request [" + request.method() + " " + request.path() + "] does not support having a body");, +        }, +, +++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java, +    private boolean contentConsumed = false;, +, +    public boolean isContentConsumed() {, +        return contentConsumed;, +    }, +, +        return content(false).length() > 0;, +        return content(true);, +    }, +, +    protected BytesReference content(final boolean contentConsumed) {, +        this.contentConsumed = this.contentConsumed | contentConsumed;, +++ b/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestForceMergeAction.java, +, +    public RestForceMergeAction(final Settings settings, final RestController controller) {, +        final ForceMergeRequest mergeRequest = new ForceMergeRequest(Strings.splitStringByCommaToArray(request.param("index")));, +]