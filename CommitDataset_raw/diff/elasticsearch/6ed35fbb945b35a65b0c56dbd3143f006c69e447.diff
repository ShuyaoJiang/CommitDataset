[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/ExecutableJiraAction.java, +                        } else if (v instanceof Map) {, +                            newValues.add(merge(new HashMap<>(), (Map<String, ?>) v, fn));, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/ExecutableJiraAction.java, +                        } else if (v instanceof Map) {, +                            newValues.add(merge(new HashMap<>(), (Map<String, ?>) v, fn));, +++ b/x-pack/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/actions/jira/ExecutableJiraActionTests.java, +import java.util.ArrayList;, +import java.util.List;, +, +    public void testMerge() {, +        Map<String, Object> writeableMap = new HashMap<>();, +        Map<String, Object> mergeNull = ExecutableJiraAction.merge(writeableMap, null, s -> s);, +        assertTrue(mergeNull.isEmpty());, +        Map<String, Object> map = new HashMap<>();, +        map.put("foo", "bar");, +        map.put("list", Arrays.asList("test1", "test2"));, +        Map<String, Object> valueMap = new HashMap<>();, +        valueMap.put("var", "abc");, +        map.put("map", valueMap);, +        Map<String, Object> componentMap = new HashMap<>();, +        componentMap.put("name", "value");, +        List<Map<String, Object>> list = new ArrayList<>();, +        list.add(componentMap);, +        map.put("components", list);, +        Map<String, Object> result = ExecutableJiraAction.merge(writeableMap, map, s -> s.toUpperCase(Locale.ROOT));, +        assertThat(result, hasEntry("FOO", "BAR"));, +        assertThat(result.get("LIST"), instanceOf(List.class));, +        List<String> mergedList = (List<String>) result.get("LIST");, +        assertEquals(2, mergedList.size());, +        assertEquals("TEST1", mergedList.get(0));, +        assertEquals("TEST2", mergedList.get(1));, +        Map<String, Object> mergedMap = (Map<String, Object>) result.get("MAP");, +        assertEquals(1, mergedMap.size());, +        assertEquals("ABC", mergedMap.get("VAR"));, +        assertThat(result.get("COMPONENTS"), instanceOf(List.class));, +        List<Map<String, Object>> components = (List<Map<String, Object>>) result.get("COMPONENTS");, +        assertThat(components.get(0), hasEntry("NAME", "VALUE"));, +, +        // test the fields is not overwritten, +        Map<String, Object> fields = new HashMap<>();, +        fields.put("FOO", "bob");, +        fields.put("LIST", Arrays.asList("test3"));, +        fields.put("MAP", new HashMap<>());, +        fields.put("COMPONENTS", new ArrayList<>());, +, +        result = ExecutableJiraAction.merge(fields, map, s -> s.toUpperCase(Locale.ROOT));, +        assertThat(result, hasEntry("FOO", "bob"));, +        assertThat(result.get("LIST"), instanceOf(List.class));, +        mergedList = (List<String>) result.get("LIST");, +        assertEquals(1, mergedList.size());, +        assertEquals("test3", mergedList.get(0));, +        mergedMap = (Map<String, Object>) result.get("MAP");, +        assertTrue(mergedMap.isEmpty());, +        assertThat(result.get("COMPONENTS"), instanceOf(List.class));, +        components = (List<Map<String, Object>>) result.get("COMPONENTS");, +        assertTrue(components.isEmpty());, +    }, +]