[+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfigTests.java, +        feedBuilder1.setIndices(Collections.singletonList("foo"));, +        feedBuilder2.setIndices(Collections.singletonList("foo"));, +        feedBuilder3.setIndices(Collections.singletonList("foo"));, +    public void testCheckValid_GivenNullIndices() {, +    public void testCheckValid_GivenEmptyIndices() {, +    public void testCheckValid_GivenIndicesContainsOnlyNulls() {, +    public void testCheckValid_GivenIndicesContainsOnlyEmptyStrings() {, +    public void testCheckValid_GivenNegativeQueryDelay() {, +    public void testCheckValid_GivenZeroFrequency() {, +    public void testCheckValid_GivenNegativeFrequency() {, +    public void testCheckValid_GivenNegativeScrollSize() {, +        datafeedBuilder.setIndices(Collections.singletonList("my_index"));, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfigTests.java, +        feedBuilder1.setIndices(Collections.singletonList("foo"));, +        feedBuilder2.setIndices(Collections.singletonList("foo"));, +        feedBuilder3.setIndices(Collections.singletonList("foo"));, +    public void testCheckValid_GivenNullIndices() {, +    public void testCheckValid_GivenEmptyIndices() {, +    public void testCheckValid_GivenIndicesContainsOnlyNulls() {, +    public void testCheckValid_GivenIndicesContainsOnlyEmptyStrings() {, +    public void testCheckValid_GivenNegativeQueryDelay() {, +    public void testCheckValid_GivenZeroFrequency() {, +    public void testCheckValid_GivenNegativeFrequency() {, +    public void testCheckValid_GivenNegativeScrollSize() {, +        datafeedBuilder.setIndices(Collections.singletonList("my_index"));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDatafeedAction.java, +import org.elasticsearch.xpack.ml.datafeed.MlRemoteLicenseChecker;, +import java.util.List;, +, +            ActionListener<PersistentTasksCustomMetaData.PersistentTask<StartDatafeedAction.DatafeedParams>> waitForTaskListener =, +                        public void onResponse(PersistentTasksCustomMetaData.PersistentTask<StartDatafeedAction.DatafeedParams>, +                                                       persistentTask) {, +, +            if (MlRemoteLicenseChecker.containsRemoteIndex(datafeed.getIndices())) {, +                MlRemoteLicenseChecker remoteLicenseChecker = new MlRemoteLicenseChecker(client);, +                remoteLicenseChecker.checkRemoteClusterLicenses(MlRemoteLicenseChecker.remoteClusterNames(datafeed.getIndices()),, +                        ActionListener.wrap(, +                                response -> {, +                                    if (response.isViolated()) {, +                                        listener.onFailure(createUnlicensedError(datafeed.getId(), response));, +                                    } else {, +                                        createDataExtractor(job, datafeed, params, waitForTaskListener);, +                                    }, +                                },, +                                e -> listener.onFailure(createUnknownLicenseError(datafeed.getId(),, +                                        MlRemoteLicenseChecker.remoteIndices(datafeed.getIndices()), e)), +                        ));, +            } else {, +                createDataExtractor(job, datafeed, params, waitForTaskListener);, +            }, +    private void createDataExtractor(Job job, DatafeedConfig datafeed, StartDatafeedAction.DatafeedParams params,, +                                     ActionListener<PersistentTasksCustomMetaData.PersistentTask<StartDatafeedAction.DatafeedParams>>, +                                             listener) {, +        DataExtractorFactory.create(client, datafeed, job, ActionListener.wrap(, +                dataExtractorFactory ->, +                        persistentTasksService.sendStartRequest(MLMetadataField.datafeedTaskId(params.getDatafeedId()),, +                                StartDatafeedAction.TASK_NAME, params, listener), +                , listener::onFailure));, +    }, +, +                    public void onResponse(PersistentTasksCustomMetaData.PersistentTask<StartDatafeedAction.DatafeedParams>, +                                                   persistentTask) {, +    private ElasticsearchStatusException createUnlicensedError(String datafeedId,, +                                                               MlRemoteLicenseChecker.LicenseViolation licenseViolation) {, +        String message = "Cannot start datafeed [" + datafeedId + "] as it is configured to use ", +                + "indices on a remote cluster [" + licenseViolation.get().getClusterName(), +                + "] that is not licensed for Machine Learning. ", +                + MlRemoteLicenseChecker.buildErrorMessage(licenseViolation.get());, +, +        return new ElasticsearchStatusException(message, RestStatus.BAD_REQUEST);, +    }, +, +    private ElasticsearchStatusException createUnknownLicenseError(String datafeedId, List<String> remoteIndices,, +                                                                   Exception cause) {, +        String message = "Cannot start datafeed [" + datafeedId + "] as it is configured to use", +                + " indices on a remote cluster " + remoteIndices, +                + " but the license type could not be verified";, +, +        return new ElasticsearchStatusException(message, RestStatus.BAD_REQUEST, new Exception(cause.getMessage()));, +    }, +, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfigTests.java, +        feedBuilder1.setIndices(Collections.singletonList("foo"));, +        feedBuilder2.setIndices(Collections.singletonList("foo"));, +        feedBuilder3.setIndices(Collections.singletonList("foo"));, +    public void testCheckValid_GivenNullIndices() {, +    public void testCheckValid_GivenEmptyIndices() {, +    public void testCheckValid_GivenIndicesContainsOnlyNulls() {, +    public void testCheckValid_GivenIndicesContainsOnlyEmptyStrings() {, +    public void testCheckValid_GivenNegativeQueryDelay() {, +    public void testCheckValid_GivenZeroFrequency() {, +    public void testCheckValid_GivenNegativeFrequency() {, +    public void testCheckValid_GivenNegativeScrollSize() {, +        datafeedBuilder.setIndices(Collections.singletonList("my_index"));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDatafeedAction.java, +import org.elasticsearch.xpack.ml.datafeed.MlRemoteLicenseChecker;, +import java.util.List;, +, +            ActionListener<PersistentTasksCustomMetaData.PersistentTask<StartDatafeedAction.DatafeedParams>> waitForTaskListener =]