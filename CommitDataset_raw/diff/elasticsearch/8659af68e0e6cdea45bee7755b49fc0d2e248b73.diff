[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.tasks.InputFiles, +import org.gradle.api.tasks.SkipWhenEmpty, +, +    /**, +     * The list of java files to check. protected so the afterEvaluate closure in the, +     * constructor can write to it., +     */, +    @InputFiles, +    @SkipWhenEmpty, +    public List<FileCollection> getJavaFiles() {, +        return project.sourceSets.collect({it.allJava}), +            for (FileCollection dirSet : javaFiles) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.tasks.InputFiles, +import org.gradle.api.tasks.SkipWhenEmpty, +, +    /**, +     * The list of java files to check. protected so the afterEvaluate closure in the, +     * constructor can write to it., +     */, +    @InputFiles, +    @SkipWhenEmpty, +    public List<FileCollection> getJavaFiles() {, +        return project.sourceSets.collect({it.allJava}), +            for (FileCollection dirSet : javaFiles) {, +++ b/rest-api-spec/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.tasks.InputFiles, +import org.gradle.api.tasks.SkipWhenEmpty, +, +    /**, +     * The list of java files to check. protected so the afterEvaluate closure in the, +     * constructor can write to it., +     */, +    @InputFiles, +    @SkipWhenEmpty, +    public List<FileCollection> getJavaFiles() {, +        return project.sourceSets.collect({it.allJava}), +            for (FileCollection dirSet : javaFiles) {, +++ b/rest-api-spec/build.gradle, +++ b/test/fixtures/krb5kdc-fixture/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.tasks.InputFiles, +import org.gradle.api.tasks.SkipWhenEmpty, +, +    /**, +     * The list of java files to check. protected so the afterEvaluate closure in the, +     * constructor can write to it., +     */, +    @InputFiles, +    @SkipWhenEmpty, +    public List<FileCollection> getJavaFiles() {, +        return project.sourceSets.collect({it.allJava}), +            for (FileCollection dirSet : javaFiles) {, +++ b/rest-api-spec/build.gradle, +++ b/test/fixtures/krb5kdc-fixture/build.gradle, +++ b/x-pack/plugin/ilm/qa/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.tasks.InputFiles, +import org.gradle.api.tasks.SkipWhenEmpty, +, +    /**, +     * The list of java files to check. protected so the afterEvaluate closure in the, +     * constructor can write to it., +     */, +    @InputFiles, +    @SkipWhenEmpty, +    public List<FileCollection> getJavaFiles() {, +        return project.sourceSets.collect({it.allJava}), +            for (FileCollection dirSet : javaFiles) {, +++ b/rest-api-spec/build.gradle, +++ b/test/fixtures/krb5kdc-fixture/build.gradle, +++ b/x-pack/plugin/ilm/qa/build.gradle, +++ b/x-pack/test/idp-fixture/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.tasks.InputFiles, +import org.gradle.api.tasks.SkipWhenEmpty, +, +    /**, +     * The list of java files to check. protected so the afterEvaluate closure in the, +     * constructor can write to it., +     */, +    @InputFiles, +    @SkipWhenEmpty, +    public List<FileCollection> getJavaFiles() {, +        return project.sourceSets.collect({it.allJava}), +            for (FileCollection dirSet : javaFiles) {, +++ b/rest-api-spec/build.gradle, +++ b/test/fixtures/krb5kdc-fixture/build.gradle, +++ b/x-pack/plugin/ilm/qa/build.gradle, +++ b/x-pack/test/idp-fixture/build.gradle, +++ b/x-pack/test/smb-fixture/build.gradle]