[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +import org.elasticsearch.xpack.core.dataframe.DataFrameField;, +import org.elasticsearch.xpack.core.dataframe.transforms.DataFrameTransform;, +import org.elasticsearch.xpack.core.dataframe.transforms.DataFrameTransformState;, +                new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.DATA_FRAME, DataFrameFeatureSetUsage::new),, +                new NamedWriteableRegistry.Entry(PersistentTaskParams.class, DataFrameField.TASK_NAME, DataFrameTransform::new),, +                new NamedWriteableRegistry.Entry(Task.Status.class, DataFrameField.TASK_NAME, DataFrameTransformState::new),, +                new NamedWriteableRegistry.Entry(PersistentTaskState.class, DataFrameField.TASK_NAME, DataFrameTransformState::new), +        );, +                        RollupJobStatus::fromXContent),, +                // Data Frame, +                new NamedXContentRegistry.Entry(PersistentTaskParams.class, new ParseField(DataFrameField.TASK_NAME),, +                        DataFrameTransform::fromXContent),, +                new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(DataFrameField.TASK_NAME),, +                        DataFrameTransformState::fromXContent),, +                new NamedXContentRegistry.Entry(PersistentTaskState.class, new ParseField(DataFrameField.TASK_NAME),, +                        DataFrameTransformState::fromXContent), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +import org.elasticsearch.xpack.core.dataframe.DataFrameField;, +import org.elasticsearch.xpack.core.dataframe.transforms.DataFrameTransform;, +import org.elasticsearch.xpack.core.dataframe.transforms.DataFrameTransformState;, +                new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.DATA_FRAME, DataFrameFeatureSetUsage::new),, +                new NamedWriteableRegistry.Entry(PersistentTaskParams.class, DataFrameField.TASK_NAME, DataFrameTransform::new),, +                new NamedWriteableRegistry.Entry(Task.Status.class, DataFrameField.TASK_NAME, DataFrameTransformState::new),, +                new NamedWriteableRegistry.Entry(PersistentTaskState.class, DataFrameField.TASK_NAME, DataFrameTransformState::new), +        );, +                        RollupJobStatus::fromXContent),, +                // Data Frame, +                new NamedXContentRegistry.Entry(PersistentTaskParams.class, new ParseField(DataFrameField.TASK_NAME),, +                        DataFrameTransform::fromXContent),, +                new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(DataFrameField.TASK_NAME),, +                        DataFrameTransformState::fromXContent),, +                new NamedXContentRegistry.Entry(PersistentTaskState.class, new ParseField(DataFrameField.TASK_NAME),, +                        DataFrameTransformState::fromXContent), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/transforms/DataFrameTransform.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.core.dataframe.transforms;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.AbstractDiffable;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.xpack.core.XPackPlugin;, +import org.elasticsearch.xpack.core.dataframe.DataFrameField;, +, +import java.io.IOException;, +import java.util.Objects;, +, +public class DataFrameTransform extends AbstractDiffable<DataFrameTransform> implements XPackPlugin.XPackPersistentTaskParams {, +, +    public static final String NAME = DataFrameField.TASK_NAME;, +, +    private final String transformId;, +, +    public static final ConstructingObjectParser<DataFrameTransform, Void> PARSER = new ConstructingObjectParser<>(NAME,, +            a -> new DataFrameTransform((String) a[0]));, +, +    static {, +        PARSER.declareString(ConstructingObjectParser.constructorArg(), DataFrameField.ID);, +    }, +, +    public DataFrameTransform(String transformId) {, +        this.transformId = transformId;, +    }, +, +    public DataFrameTransform(StreamInput in) throws IOException {, +        this.transformId  = in.readString();, +    }, +, +    @Override, +    public String getWriteableName() {, +        return NAME;, +    }, +, +    @Override, +    public Version getMinimalSupportedVersion() {, +        return Version.V_7_1_0;, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(transformId);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.field(DataFrameField.ID.getPreferredName(), transformId);, +        builder.endObject();, +        return builder;, +    }, +]