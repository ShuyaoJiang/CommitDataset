[+++ b/src/test/java/org/elasticsearch/river/RiverTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.river;, +, +import com.google.common.base.Predicate;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Test;, +, +import java.util.concurrent.TimeUnit;, +, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.*;, +import static org.hamcrest.Matchers.equalTo;, +, +@ClusterScope(scope = Scope.TEST), +public class RiverTests extends ElasticsearchIntegrationTest {, +, +    @Test, +    public void testRiverStart() throws Exception {, +        final String riverName = "test_river";, +        logger.info("-->  creating river [{}]", riverName);, +        IndexResponse indexResponse = client().prepareIndex(RiverIndexName.Conf.DEFAULT_INDEX_NAME, riverName, "_meta"), +                .setSource("type", TestRiverModule.class.getCanonicalName()).get();, +        assertTrue(indexResponse.isCreated());, +, +        logger.info("-->  checking that river [{}] was created", riverName);, +        assertThat(awaitBusy(new Predicate<Object>() {, +            public boolean apply(Object obj) {, +                GetResponse response = client().prepareGet(RiverIndexName.Conf.DEFAULT_INDEX_NAME, riverName, "_status").get();, +                return response.isExists();, +            }, +        }, 5, TimeUnit.SECONDS), equalTo(true));, +, +    }, +}, +++ b/src/test/java/org/elasticsearch/river/RiverTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.river;, +, +import com.google.common.base.Predicate;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Test;, +, +import java.util.concurrent.TimeUnit;, +, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.*;, +import static org.hamcrest.Matchers.equalTo;, +, +@ClusterScope(scope = Scope.TEST), +public class RiverTests extends ElasticsearchIntegrationTest {, +, +    @Test, +    public void testRiverStart() throws Exception {, +        final String riverName = "test_river";, +        logger.info("-->  creating river [{}]", riverName);, +        IndexResponse indexResponse = client().prepareIndex(RiverIndexName.Conf.DEFAULT_INDEX_NAME, riverName, "_meta"), +                .setSource("type", TestRiverModule.class.getCanonicalName()).get();, +        assertTrue(indexResponse.isCreated());, +, +        logger.info("-->  checking that river [{}] was created", riverName);, +        assertThat(awaitBusy(new Predicate<Object>() {]