[+++ b/distribution/src/main/resources/bin/elasticsearch.bat, +set ES_JVM_OPTIONS="%~dp0\..\config\jvm.options", +++ b/distribution/src/main/resources/bin/elasticsearch.bat, +set ES_JVM_OPTIONS="%~dp0\..\config\jvm.options", +++ b/distribution/src/main/resources/bin/service.bat, +set ES_JVM_OPTIONS="%ES_HOME%\config\jvm.options", +++ b/distribution/src/main/resources/bin/elasticsearch.bat, +set ES_JVM_OPTIONS="%~dp0\..\config\jvm.options", +++ b/distribution/src/main/resources/bin/service.bat, +set ES_JVM_OPTIONS="%ES_HOME%\config\jvm.options", +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkIndexByScrollAction.java, +            Object newValue = context.remove(IndexFieldMapper.NAME);, +            newValue = context.remove(TypeFieldMapper.NAME);, +            newValue = context.remove(IdFieldMapper.NAME);, +            newValue = context.remove(VersionFieldMapper.NAME);, +            newValue = context.remove(ParentFieldMapper.NAME);, +            newValue = context.remove(RoutingFieldMapper.NAME);, +            newValue = context.remove(TimestampFieldMapper.NAME);, +            newValue = context.remove(TTLFieldMapper.NAME);, +            if (false == context.isEmpty()) {, +                throw new IllegalArgumentException("Invalid fields added to context [" + String.join(",", context.keySet()) + ']');, +++ b/distribution/src/main/resources/bin/elasticsearch.bat, +set ES_JVM_OPTIONS="%~dp0\..\config\jvm.options", +++ b/distribution/src/main/resources/bin/service.bat, +set ES_JVM_OPTIONS="%ES_HOME%\config\jvm.options", +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkIndexByScrollAction.java, +            Object newValue = context.remove(IndexFieldMapper.NAME);, +            newValue = context.remove(TypeFieldMapper.NAME);, +            newValue = context.remove(IdFieldMapper.NAME);, +            newValue = context.remove(VersionFieldMapper.NAME);, +            newValue = context.remove(ParentFieldMapper.NAME);, +            newValue = context.remove(RoutingFieldMapper.NAME);, +            newValue = context.remove(TimestampFieldMapper.NAME);, +            newValue = context.remove(TTLFieldMapper.NAME);, +            if (false == context.isEmpty()) {, +                throw new IllegalArgumentException("Invalid fields added to context [" + String.join(",", context.keySet()) + ']');, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/DeleteByQueryRequest.java, +public class DeleteByQueryRequest extends AbstractBulkByScrollRequest<DeleteByQueryRequest> implements IndicesRequest.Replaceable {, +    //delete by query deletes all documents that match a query. The indices and indices options that affect how, +    //indices are resolved depend entirely on the inner search request. That's why the following methods delegate to it., +    @Override, +    public IndicesRequest indices(String... indices) {, +        assert getSearchRequest() != null;, +        getSearchRequest().indices(indices);, +        return this;, +    }, +, +++ b/distribution/src/main/resources/bin/elasticsearch.bat, +set ES_JVM_OPTIONS="%~dp0\..\config\jvm.options", +++ b/distribution/src/main/resources/bin/service.bat, +set ES_JVM_OPTIONS="%ES_HOME%\config\jvm.options", +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkIndexByScrollAction.java, +            Object newValue = context.remove(IndexFieldMapper.NAME);, +            newValue = context.remove(TypeFieldMapper.NAME);, +            newValue = context.remove(IdFieldMapper.NAME);, +            newValue = context.remove(VersionFieldMapper.NAME);, +            newValue = context.remove(ParentFieldMapper.NAME);, +            newValue = context.remove(RoutingFieldMapper.NAME);, +            newValue = context.remove(TimestampFieldMapper.NAME);, +            newValue = context.remove(TTLFieldMapper.NAME);, +            if (false == context.isEmpty()) {, +                throw new IllegalArgumentException("Invalid fields added to context [" + String.join(",", context.keySet()) + ']');, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/DeleteByQueryRequest.java, +public class DeleteByQueryRequest extends AbstractBulkByScrollRequest<DeleteByQueryRequest> implements IndicesRequest.Replaceable {, +    //delete by query deletes all documents that match a query. The indices and indices options that affect how, +    //indices are resolved depend entirely on the inner search request. That's why the following methods delegate to it., +    @Override, +    public IndicesRequest indices(String... indices) {, +        assert getSearchRequest() != null;, +        getSearchRequest().indices(indices);, +        return this;, +    }, +, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/DeleteByQueryRequestTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.reindex;, +, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.test.ESTestCase;, +, +import static org.apache.lucene.util.TestUtil.randomSimpleString;]