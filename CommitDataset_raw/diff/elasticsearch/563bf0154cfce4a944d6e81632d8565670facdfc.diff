[+++ b/core/src/main/java/org/elasticsearch/search/suggest/DirectSpellcheckerSettings.java, +import org.apache.lucene.search.spell.SuggestWord;, +import org.apache.lucene.search.spell.SuggestWordFrequencyComparator;, +import org.apache.lucene.search.spell.SuggestWordQueue;, +import java.util.Comparator;, +, +    private static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    private static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +, +    public DirectSpellChecker createDirectSpellChecker() {, +, +        DirectSpellChecker directSpellChecker = new DirectSpellChecker();, +        directSpellChecker.setAccuracy(accuracy());, +        Comparator<SuggestWord> comparator;, +        switch (sort()) {, +            case SCORE:, +                comparator = SCORE_COMPARATOR;, +                break;, +            case FREQUENCY:, +                comparator = LUCENE_FREQUENCY;, +                break;, +            default:, +                throw new IllegalArgumentException("Illegal suggest sort: " + sort());, +        }, +        directSpellChecker.setComparator(comparator);, +        directSpellChecker.setDistance(stringDistance());, +        directSpellChecker.setMaxEdits(maxEdits());, +        directSpellChecker.setMaxInspections(maxInspections());, +        directSpellChecker.setMaxQueryFrequency(maxTermFreq());, +        directSpellChecker.setMinPrefix(prefixLength());, +        directSpellChecker.setMinQueryLength(minWordLength());, +        directSpellChecker.setThresholdFrequency(minDocFreq());, +        directSpellChecker.setLowerCaseTerms(false);, +        return directSpellChecker;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/DirectSpellcheckerSettings.java, +import org.apache.lucene.search.spell.SuggestWord;, +import org.apache.lucene.search.spell.SuggestWordFrequencyComparator;, +import org.apache.lucene.search.spell.SuggestWordQueue;, +import java.util.Comparator;, +, +    private static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    private static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +, +    public DirectSpellChecker createDirectSpellChecker() {, +, +        DirectSpellChecker directSpellChecker = new DirectSpellChecker();, +        directSpellChecker.setAccuracy(accuracy());, +        Comparator<SuggestWord> comparator;, +        switch (sort()) {, +            case SCORE:, +                comparator = SCORE_COMPARATOR;, +                break;, +            case FREQUENCY:, +                comparator = LUCENE_FREQUENCY;, +                break;, +            default:, +                throw new IllegalArgumentException("Illegal suggest sort: " + sort());, +        }, +        directSpellChecker.setComparator(comparator);, +        directSpellChecker.setDistance(stringDistance());, +        directSpellChecker.setMaxEdits(maxEdits());, +        directSpellChecker.setMaxInspections(maxInspections());, +        directSpellChecker.setMaxQueryFrequency(maxTermFreq());, +        directSpellChecker.setMinPrefix(prefixLength());, +        directSpellChecker.setMinQueryLength(minWordLength());, +        directSpellChecker.setThresholdFrequency(minDocFreq());, +        directSpellChecker.setLowerCaseTerms(false);, +        return directSpellChecker;, +    }, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/suggest/DirectSpellcheckerSettings.java, +import org.apache.lucene.search.spell.SuggestWord;, +import org.apache.lucene.search.spell.SuggestWordFrequencyComparator;, +import org.apache.lucene.search.spell.SuggestWordQueue;, +import java.util.Comparator;, +, +    private static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    private static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +, +    public DirectSpellChecker createDirectSpellChecker() {, +, +        DirectSpellChecker directSpellChecker = new DirectSpellChecker();, +        directSpellChecker.setAccuracy(accuracy());, +        Comparator<SuggestWord> comparator;, +        switch (sort()) {, +            case SCORE:, +                comparator = SCORE_COMPARATOR;, +                break;, +            case FREQUENCY:, +                comparator = LUCENE_FREQUENCY;, +                break;, +            default:, +                throw new IllegalArgumentException("Illegal suggest sort: " + sort());, +        }, +        directSpellChecker.setComparator(comparator);, +        directSpellChecker.setDistance(stringDistance());, +        directSpellChecker.setMaxEdits(maxEdits());]