[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                } else if (shouldExecuteReplication(indexMetaData.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                } else if (shouldExecuteReplication(indexMetaData.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +    public ESPolicy(PermissionCollection dynamic) throws Exception {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                } else if (shouldExecuteReplication(indexMetaData.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +    public ESPolicy(PermissionCollection dynamic) throws Exception {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, + * Groovy scripts are assigned no permissions. This does not provide adequate, + * JAVA_OPTS="-Djava.security.debug=access:failure" bin/elasticsearch, +        // set properties for problematic plugins, +        setPluginCodebaseProperties(environment);, +        // enable security policy: union of template and environment-based paths., +        Policy.setPolicy(new ESPolicy(createPermissions(environment)));, +    // mapping of plugins to plugin class name. see getPluginClass why we need this., +    // plugin codebase property is always implicit (es.security.plugin.foobar), +    // note that this is only read once, when policy is parsed., +    static final Map<String,String> SPECIAL_PLUGINS;, +    static {, +        Map<String,String> m = new HashMap<>();, +        m.put("repository-s3",       "org.elasticsearch.plugin.repository.s3.S3RepositoryPlugin");, +        m.put("discovery-ec2",       "org.elasticsearch.plugin.discovery.ec2.Ec2DiscoveryPlugin");, +        m.put("discovery-gce",       "org.elasticsearch.plugin.discovery.gce.GceDiscoveryPlugin");]