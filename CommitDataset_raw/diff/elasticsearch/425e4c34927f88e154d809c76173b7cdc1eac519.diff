[+++ b/core/src/test/java/org/elasticsearch/NamingConventionTests.java, +                    pkgPrefix = pkgPrefix.resolve(dir.getFileName());, +        assertTrue("Classes ending with [Test|Tests] must subclass [" + classesToSubclass +"]:\n" + Joiner.on('\n').join(notImplementing),, +++ b/core/src/test/java/org/elasticsearch/NamingConventionTests.java, +                    pkgPrefix = pkgPrefix.resolve(dir.getFileName());, +        assertTrue("Classes ending with [Test|Tests] must subclass [" + classesToSubclass +"]:\n" + Joiner.on('\n').join(notImplementing),, +++ b/core/src/test/java/org/elasticsearch/benchmark/stress/NodesStressBenchmark.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.benchmark.stress;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.common.StopWatch;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.node.Node;, +, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.CyclicBarrier;, +import java.util.concurrent.atomic.AtomicLong;, +, +import static org.elasticsearch.client.Requests.searchRequest;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;, +import static org.elasticsearch.common.settings.Settings.settingsBuilder;, +import static org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;, +import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.elasticsearch.node.NodeBuilder.nodeBuilder;, +import static org.elasticsearch.search.builder.SearchSourceBuilder.searchSource;, +, +/**, + *, + */, +public class NodesStressBenchmark {, +, +    private Node[] nodes;, +, +    private int numberOfNodes = 2;, +, +    private Client[] clients;, +, +    private AtomicLong idGenerator = new AtomicLong();, +, +    private int fieldNumLimit = 50;, +, +    private long searcherIterations = 10;, +    private Searcher[] searcherThreads = new Searcher[1];, +, +    private long indexIterations = 10;, +    private Indexer[] indexThreads = new Indexer[1];, +, +    private TimeValue sleepAfterDone = TimeValue.timeValueMillis(0);, +    private TimeValue sleepBeforeClose = TimeValue.timeValueMillis(0);, +, +    private CountDownLatch latch;, +    private CyclicBarrier barrier1;, +    private CyclicBarrier barrier2;, +, +    public NodesStressBenchmark() {, +    }, +, +    public NodesStressBenchmark numberOfNodes(int numberOfNodes) {, +        this.numberOfNodes = numberOfNodes;, +        return this;, +    }, +, +    public NodesStressBenchmark fieldNumLimit(int fieldNumLimit) {, +        this.fieldNumLimit = fieldNumLimit;, +        return this;, +    }, +, +    public NodesStressBenchmark searchIterations(int searchIterations) {, +        this.searcherIterations = searchIterations;, +        return this;, +    }, +, +    public NodesStressBenchmark searcherThreads(int numberOfSearcherThreads) {, +        searcherThreads = new Searcher[numberOfSearcherThreads];]