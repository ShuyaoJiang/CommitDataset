[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import org.elasticsearch.ElasticSearchException;, +                Class<? extends Plugin> pluginClass = (Class<? extends Plugin>) settings.getClassLoader().loadClass(sPluginClass);, +                Plugin plugin;, +                try {, +                    plugin = pluginClass.getConstructor(Settings.class).newInstance(settings);, +                } catch (NoSuchMethodException e) {, +                    try {, +                        plugin = pluginClass.getConstructor().newInstance();, +                    } catch (NoSuchMethodException e1) {, +                        throw new ElasticSearchException("No constructor for [" + pluginClass + "]");, +                    }, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import org.elasticsearch.ElasticSearchException;, +                Class<? extends Plugin> pluginClass = (Class<? extends Plugin>) settings.getClassLoader().loadClass(sPluginClass);, +                Plugin plugin;, +                try {, +                    plugin = pluginClass.getConstructor(Settings.class).newInstance(settings);, +                } catch (NoSuchMethodException e) {, +                    try {, +                        plugin = pluginClass.getConstructor().newInstance();, +                    } catch (NoSuchMethodException e1) {, +                        throw new ElasticSearchException("No constructor for [" + pluginClass + "]");, +                    }, +                }, +++ b/plugins/memcached/src/main/java/org/elasticsearch/memcached/MemcachedPlugin.java, +import org.elasticsearch.util.settings.Settings;, +    private final Settings settings;, +, +    public MemcachedPlugin(Settings settings) {, +        this.settings = settings;, +    }, +, +        if (settings.getAsBoolean("memcached.enabled", true)) {, +        }, +        if (settings.getAsBoolean("memcached.enabled", true)) {, +        }]