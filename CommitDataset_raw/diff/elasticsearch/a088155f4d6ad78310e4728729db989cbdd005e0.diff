[+++ /dev/null, +++ /dev/null, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +import org.elasticsearch.xpack.sql.stats.QueryMetric;, +import static org.elasticsearch.action.ActionListener.wrap;, +, +        metrics.translate();, +, +        newSession(cfg).sqlExecutable(sql, params, wrap(exec -> {, +        QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId());, +        metrics.total(metric);, +, +        newSession(cfg).sql(sql, params, wrap(listener::onResponse, ex -> {, +            metrics.failed(metric);, +            listener.onFailure(ex);, +        }));, +        QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId());, +        metrics.total(metric);, +        metrics.paging(metric);, +, +        cursor.nextPage(cfg, client, writableRegistry, wrap(listener::onResponse, ex -> {, +            metrics.failed(metric);, +            listener.onFailure(ex);, +        }));, +++ /dev/null, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +import org.elasticsearch.xpack.sql.stats.QueryMetric;, +import static org.elasticsearch.action.ActionListener.wrap;, +, +        metrics.translate();, +, +        newSession(cfg).sqlExecutable(sql, params, wrap(exec -> {, +        QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId());, +        metrics.total(metric);, +, +        newSession(cfg).sql(sql, params, wrap(listener::onResponse, ex -> {, +            metrics.failed(metric);, +            listener.onFailure(ex);, +        }));, +        QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId());, +        metrics.total(metric);, +        metrics.paging(metric);, +, +        cursor.nextPage(cfg, client, writableRegistry, wrap(listener::onResponse, ex -> {, +            metrics.failed(metric);, +            listener.onFailure(ex);, +        }));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlClearCursorAction.java, +import org.elasticsearch.xpack.sql.util.StringUtils;, +                        request.mode(), StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY),, +++ /dev/null, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +import org.elasticsearch.xpack.sql.stats.QueryMetric;, +import static org.elasticsearch.action.ActionListener.wrap;, +, +        metrics.translate();, +, +        newSession(cfg).sqlExecutable(sql, params, wrap(exec -> {, +        QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId());, +        metrics.total(metric);, +, +        newSession(cfg).sql(sql, params, wrap(listener::onResponse, ex -> {, +            metrics.failed(metric);, +            listener.onFailure(ex);, +        }));, +        QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId());, +        metrics.total(metric);, +        metrics.paging(metric);, +, +        cursor.nextPage(cfg, client, writableRegistry, wrap(listener::onResponse, ex -> {, +            metrics.failed(metric);, +            listener.onFailure(ex);, +        }));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlClearCursorAction.java, +import org.elasticsearch.xpack.sql.util.StringUtils;, +                        request.mode(), StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TransportSqlQueryAction.java, +import static org.elasticsearch.action.ActionListener.wrap;, +                request.filter(), request.mode(), request.clientId(), username, clusterName);, +                    wrap(rowSet -> listener.onResponse(createResponse(request, rowSet)), listener::onFailure));, +                    wrap(rowSet -> listener.onResponse(createResponse(request.mode(), rowSet, null)), listener::onFailure));, +++ /dev/null, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +import org.elasticsearch.xpack.sql.stats.QueryMetric;, +import static org.elasticsearch.action.ActionListener.wrap;, +, +        metrics.translate();, +, +        newSession(cfg).sqlExecutable(sql, params, wrap(exec -> {, +        QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId());, +        metrics.total(metric);, +, +        newSession(cfg).sql(sql, params, wrap(listener::onResponse, ex -> {, +            metrics.failed(metric);, +            listener.onFailure(ex);, +        }));, +        QueryMetric metric = QueryMetric.from(cfg.mode(), cfg.clientId());, +        metrics.total(metric);, +        metrics.paging(metric);, +]