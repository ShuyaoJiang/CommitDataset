[+++ b/docs/reference/search/suggesters/completion-suggest.asciidoc, +    A positive integer or a string containing a positive integer,, +    which defines a weight and allows you to rank your suggestions., +    This field is optional., +++ b/docs/reference/search/suggesters/completion-suggest.asciidoc, +    A positive integer or a string containing a positive integer,, +    which defines a weight and allows you to rank your suggestions., +    This field is optional., +++ b/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +                    if (Fields.CONTENT_FIELD_NAME_WEIGHT.equals(currentFieldName)) {, +                        Number weightValue;, +                        try {, +                            weightValue = Long.parseLong(parser.text());, +                        } catch (NumberFormatException e) {, +                            throw new ElasticsearchIllegalArgumentException("Weight must be a string representing a numeric value, but was [" + parser.text() + "]");, +                        }, +                        weight = weightValue.longValue(); // always parse a long to make sure we don't get overflow, +                        checkWeight(weight);, +                    }, +                        weight = parser.longValue(); // always parse a long to make sure we don't get overflow, +                        checkWeight(weight);, +    private void checkWeight(long weight) {, +        if (weight < 0 || weight > Integer.MAX_VALUE) {, +            throw new ElasticsearchIllegalArgumentException("Weight must be in the interval [0..2147483647], but was [" + weight + "]");, +        }, +    }, +, +++ b/docs/reference/search/suggesters/completion-suggest.asciidoc, +    A positive integer or a string containing a positive integer,, +    which defines a weight and allows you to rank your suggestions., +    This field is optional., +++ b/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +                    if (Fields.CONTENT_FIELD_NAME_WEIGHT.equals(currentFieldName)) {, +                        Number weightValue;, +                        try {, +                            weightValue = Long.parseLong(parser.text());, +                        } catch (NumberFormatException e) {, +                            throw new ElasticsearchIllegalArgumentException("Weight must be a string representing a numeric value, but was [" + parser.text() + "]");, +                        }, +                        weight = weightValue.longValue(); // always parse a long to make sure we don't get overflow, +                        checkWeight(weight);, +                    }, +                        weight = parser.longValue(); // always parse a long to make sure we don't get overflow, +                        checkWeight(weight);, +    private void checkWeight(long weight) {, +        if (weight < 0 || weight > Integer.MAX_VALUE) {, +            throw new ElasticsearchIllegalArgumentException("Weight must be in the interval [0..2147483647], but was [" + weight + "]");, +        }, +    }, +, +++ b/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchTests.java, +    public void testThatWeightCanBeAString() throws Exception {, +        createIndexAndMapping(completionMappingBuilder);, +, +        client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder(), +                        .startObject().startObject(FIELD), +                        .startArray("input").value("testing").endArray(), +                        .field("weight", "10"), +                        .endObject().endObject(), +        ).get();, +, +        refresh();, +, +        SuggestResponse suggestResponse = client().prepareSuggest(INDEX).addSuggestion(, +                new CompletionSuggestionBuilder("testSuggestions").field(FIELD).text("test").size(10), +        ).execute().actionGet();, +, +        assertSuggestions(suggestResponse, "testSuggestions", "testing");, +        Suggest.Suggestion.Entry.Option option = suggestResponse.getSuggest().getSuggestion("testSuggestions").getEntries().get(0).getOptions().get(0);, +        assertThat(option, is(instanceOf(CompletionSuggestion.Entry.Option.class)));, +        CompletionSuggestion.Entry.Option prefixOption = (CompletionSuggestion.Entry.Option) option;, +, +        assertThat(prefixOption.getText().string(), equalTo("testing"));, +        assertThat((long) prefixOption.getScore(), equalTo(10l));, +    }, +, +, +    @Test, +    public void testThatWeightMustNotBeANonNumberString() throws Exception {, +        createIndexAndMapping(completionMappingBuilder);, +, +        try {, +            client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder(), +                            .startObject().startObject(FIELD), +                            .startArray("input").value("sth").endArray(), +                            .field("weight", "thisIsNotValid"), +                            .endObject().endObject(), +            ).get();, +            fail("Indexing with a non-number representing string as weight was successful, but should not be");, +        } catch (MapperParsingException e) {, +            assertThat(ExceptionsHelper.detailedMessage(e), containsString("thisIsNotValid"));, +        }, +    }, +, +    @Test, +    public void testThatWeightAsStringMustBeInt() throws Exception {, +        createIndexAndMapping(completionMappingBuilder);, +, +        String weight = String.valueOf(Long.MAX_VALUE - 4);, +        try {]