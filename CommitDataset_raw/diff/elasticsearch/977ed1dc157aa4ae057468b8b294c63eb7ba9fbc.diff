[+++ b/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.bytes;, +, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.CharsRef;, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.util.BigArrays;, +import org.elasticsearch.common.util.ByteArray;, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +, +import java.io.EOFException;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +import java.nio.channels.GatheringByteChannel;, +import java.util.Arrays;, +, +public final class PagedBytesReference implements BytesReference {, +, +    private static final int PAGE_SIZE = BigArrays.BYTE_PAGE_SIZE;, +    private static final int NIO_GATHERING_LIMIT = 524288;, +, +    private final BigArrays bigarrays;, +    private final ByteArray bytearray;, +    private final int offset;, +    private final int length;, +    private int hash = 0;, +, +    public PagedBytesReference(BigArrays bigarrays, ByteArray bytearray, int length) {, +        this(bigarrays, bytearray, 0, length);, +    }, +, +    public PagedBytesReference(BigArrays bigarrays, ByteArray bytearray, int from, int length) {, +        this.bigarrays = bigarrays;, +        this.bytearray = bytearray;, +        this.offset = from;, +        this.length = length;, +    }, +, +    @Override, +    public byte get(int index) {, +        return bytearray.get(offset + index);, +    }, +, +    @Override, +    public int length() {, +        return length;, +    }, +, +    @Override, +    public BytesReference slice(int from, int length) {, +        if (from < 0 || (from + length) > length()) {, +            throw new ElasticsearchIllegalArgumentException("can't slice a buffer with length [" + length() + "], with slice parameters from [" + from + "], length [" + length + "]");, +        }, +, +        return new PagedBytesReference(bigarrays, bytearray, offset + from, length);, +    }, +, +    @Override, +    public StreamInput streamInput() {, +        return new PagedBytesReferenceStreamInput(bytearray, offset, length);, +    }, +, +    @Override, +    public void writeTo(OutputStream os) throws IOException {, +            BytesRef ref = new BytesRef();, +            int written = 0;, +            , +            // are we a slice?, +            if (offset != 0) {, +                // remaining size of page fragment at offset, +                int fragmentSize = Math.min(length, PAGE_SIZE - (offset % PAGE_SIZE));, +                bytearray.get(offset, fragmentSize, ref);, +                os.write(ref.bytes, ref.offset, fragmentSize);, +                written += fragmentSize;, +            }, +, +            // handle remainder of pages + trailing fragment]