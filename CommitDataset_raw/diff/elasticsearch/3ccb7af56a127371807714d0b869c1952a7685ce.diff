[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.ActivateWatchRequest;, +import org.elasticsearch.client.watcher.ActivateWatchResponse;, +    /**, +     * Activate a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public ActivateWatchResponse activateWatch(ActivateWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::activateWatch, options,, +            ActivateWatchResponse::fromXContent, singleton(404));, +    }, +, +    /**, +     * Asynchronously activates a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void activateWatchAsync(ActivateWatchRequest request, RequestOptions options, ActionListener<ActivateWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::activateWatch, options,, +            ActivateWatchResponse::fromXContent, listener, singleton(404));, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.ActivateWatchRequest;, +import org.elasticsearch.client.watcher.ActivateWatchResponse;, +    /**, +     * Activate a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public ActivateWatchResponse activateWatch(ActivateWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::activateWatch, options,, +            ActivateWatchResponse::fromXContent, singleton(404));, +    }, +, +    /**, +     * Asynchronously activates a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void activateWatchAsync(ActivateWatchRequest request, RequestOptions options, ActionListener<ActivateWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::activateWatch, options,, +            ActivateWatchResponse::fromXContent, listener, singleton(404));, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +import org.elasticsearch.client.watcher.ActivateWatchRequest;, +, +    static Request activateWatch(ActivateWatchRequest activateWatchRequest) {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("watcher"), +            .addPathPartAsIs("watch"), +            .addPathPart(activateWatchRequest.getWatchId()), +            .addPathPartAsIs("_activate"), +            .build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +        return request;, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.ActivateWatchRequest;, +import org.elasticsearch.client.watcher.ActivateWatchResponse;, +    /**, +     * Activate a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public ActivateWatchResponse activateWatch(ActivateWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::activateWatch, options,, +            ActivateWatchResponse::fromXContent, singleton(404));, +    }, +, +    /**, +     * Asynchronously activates a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void activateWatchAsync(ActivateWatchRequest request, RequestOptions options, ActionListener<ActivateWatchResponse> listener) {]