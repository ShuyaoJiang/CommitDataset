[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/FieldDataSource.java, +            static class SortedUniqueBytesValues extends BytesValues {, +                final BytesValues delegate;, +                    super(delegate.isMultiValued());, +                    this.delegate = delegate;, +                    final int numValues = delegate.setDocument(docId);, +                        final BytesRef next = delegate.nextValue();, +                        final int hash = delegate.currentValueHash();, +                        assert hash == next.hashCode();, +                        bytes.add(next, hash);, +                    bytes.get(sortedIds[pos++], scratch);, +                    return scratch;, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/FieldDataSource.java, +            static class SortedUniqueBytesValues extends BytesValues {, +                final BytesValues delegate;, +                    super(delegate.isMultiValued());, +                    this.delegate = delegate;, +                    final int numValues = delegate.setDocument(docId);, +                        final BytesRef next = delegate.nextValue();, +                        final int hash = delegate.currentValueHash();, +                        assert hash == next.hashCode();, +                        bytes.add(next, hash);, +                    bytes.get(sortedIds[pos++], scratch);, +                    return scratch;, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/bytes/ScriptBytesValues.java, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/FieldDataSource.java, +            static class SortedUniqueBytesValues extends BytesValues {, +                final BytesValues delegate;, +                    super(delegate.isMultiValued());, +                    this.delegate = delegate;, +                    final int numValues = delegate.setDocument(docId);, +                        final BytesRef next = delegate.nextValue();, +                        final int hash = delegate.currentValueHash();, +                        assert hash == next.hashCode();, +                        bytes.add(next, hash);, +                    bytes.get(sortedIds[pos++], scratch);, +                    return scratch;, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/bytes/ScriptBytesValues.java, +++ b/src/test/java/org/elasticsearch/search/aggregations/support/FieldDataSourceTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations.support;, +, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.index.fielddata.BytesValues;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.Test;, +, +import java.util.Map;, +, +public class FieldDataSourceTests extends ElasticsearchTestCase {, +, +    private static BytesValues randomBytesValues() {, +        final boolean multiValued = randomBoolean();, +        return new BytesValues(multiValued) {, +            @Override, +            public int setDocument(int docId) {, +                return randomInt(multiValued ? 10 : 1);, +            }, +            @Override, +            public BytesRef nextValue() {, +                scratch.copyChars(randomAsciiOfLength(10));, +                return scratch;, +            }, +, +        };, +    }, +, +    private static SearchScript randomScript() {, +        return new SearchScript() {, +, +            @Override, +            public void setNextVar(String name, Object value) {, +            }, +, +            @Override]