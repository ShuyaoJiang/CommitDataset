[+++ b/core/src/test/java/org/elasticsearch/action/support/ActiveShardsObserverIT.java, +import org.elasticsearch.common.Priority;, +        final String indexName = "test-idx";, +        assertFalse(prepareCreate(indexName), +        waitForIndexCreationToComplete(indexName);, +                                .put(INDEX_NUMBER_OF_SHARDS_SETTING.getKey(), randomIntBetween(1, 5)), +        final String indexName = "test-idx";, +        assertFalse(prepareCreate(indexName), +        waitForIndexCreationToComplete(indexName);, +                                .put(INDEX_NUMBER_OF_SHARDS_SETTING.getKey(), randomIntBetween(1, 5)), +        final String indexName = "test-idx";, +        assertFalse(prepareCreate(indexName), +        waitForIndexCreationToComplete(indexName);, +        if (client().admin().indices().prepareExists(indexName).get().isExists()) {, +            client().admin().indices().prepareDelete(indexName).get();, +        }, +        assertAcked(prepareCreate(indexName).setSettings(settings).setWaitForActiveShards(ActiveShardCount.ALL).get());, +    // Its possible that the cluster state update task that includes the create index hasn't processed before we timeout,, +    // and subsequently the test cleanup process does not delete the index in question because it does not see it, and, +    // only after the test cleanup does the index creation manifest in the cluster state.  To take care of this problem, +    // and its potential ramifications, we wait here for the index creation cluster state update task to finish, +    private void waitForIndexCreationToComplete(final String indexName) {, +        client().admin().cluster().prepareHealth(indexName).setWaitForEvents(Priority.URGENT).get();, +    }, +]