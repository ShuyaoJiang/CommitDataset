[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +import org.elasticsearch.index.rankeval.DiscountedCumulativeGain;, +import org.elasticsearch.index.rankeval.EvaluationMetric;, +import org.elasticsearch.index.rankeval.ExpectedReciprocalRank;, +import org.elasticsearch.index.rankeval.MeanReciprocalRank;, +import java.util.Arrays;, +import java.util.function.Supplier;, +        List<RatedRequest> specifications = createTestEvaluationSpec();, +    private static List<RatedRequest> createTestEvaluationSpec() {, +        SearchSourceBuilder testQuery = new SearchSourceBuilder();, +        testQuery.query(new MatchAllQueryBuilder());, +        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "amsterdam1", "amsterdam2", "amsterdam3", "amsterdam4");, +        amsterdamRatedDocs.addAll(createRelevant("index2", "amsterdam0"));, +        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery);, +        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("index", "berlin"), testQuery);, +        List<RatedRequest> specifications = new ArrayList<>();, +        specifications.add(amsterdamRequest);, +        specifications.add(berlinRequest);, +        return specifications;, +    }, +, +    /**, +     * Test case checks that the default metrics are registered and usable, +     */, +    public void testMetrics() throws IOException {, +        List<RatedRequest> specifications = createTestEvaluationSpec();, +        List<Supplier<EvaluationMetric>> metrics = Arrays.asList(PrecisionAtK::new, MeanReciprocalRank::new, DiscountedCumulativeGain::new,, +                () -> new ExpectedReciprocalRank(1));, +        double expectedScores[] = new double[] {0.4285714285714286, 0.75, 1.6408962261063627, 0.4407738095238095};, +        int i = 0;, +        for (Supplier<EvaluationMetric> metricSupplier : metrics) {, +            RankEvalSpec spec = new RankEvalSpec(specifications, metricSupplier.get());, +, +            RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" });, +            RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync);, +            assertEquals(expectedScores[i], response.getMetricScore(), Double.MIN_VALUE);, +            i++;, +        }, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +import org.elasticsearch.index.rankeval.DiscountedCumulativeGain;, +import org.elasticsearch.index.rankeval.EvaluationMetric;, +import org.elasticsearch.index.rankeval.ExpectedReciprocalRank;, +import org.elasticsearch.index.rankeval.MeanReciprocalRank;, +import java.util.Arrays;, +import java.util.function.Supplier;, +        List<RatedRequest> specifications = createTestEvaluationSpec();, +    private static List<RatedRequest> createTestEvaluationSpec() {, +        SearchSourceBuilder testQuery = new SearchSourceBuilder();, +        testQuery.query(new MatchAllQueryBuilder());, +        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "amsterdam1", "amsterdam2", "amsterdam3", "amsterdam4");, +        amsterdamRatedDocs.addAll(createRelevant("index2", "amsterdam0"));, +        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery);, +        RatedRequest berlinRequest = new RatedRequest("berlin_query", createRelevant("index", "berlin"), testQuery);, +        List<RatedRequest> specifications = new ArrayList<>();, +        specifications.add(amsterdamRequest);, +        specifications.add(berlinRequest);, +        return specifications;, +    }, +, +    /**, +     * Test case checks that the default metrics are registered and usable, +     */, +    public void testMetrics() throws IOException {, +        List<RatedRequest> specifications = createTestEvaluationSpec();, +        List<Supplier<EvaluationMetric>> metrics = Arrays.asList(PrecisionAtK::new, MeanReciprocalRank::new, DiscountedCumulativeGain::new,, +                () -> new ExpectedReciprocalRank(1));, +        double expectedScores[] = new double[] {0.4285714285714286, 0.75, 1.6408962261063627, 0.4407738095238095};, +        int i = 0;, +        for (Supplier<EvaluationMetric> metricSupplier : metrics) {, +            RankEvalSpec spec = new RankEvalSpec(specifications, metricSupplier.get());, +, +            RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" });, +            RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync);, +            assertEquals(expectedScores[i], response.getMetricScore(), Double.MIN_VALUE);, +            i++;, +        }, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +, +import org.elasticsearch.index.rankeval.ExpectedReciprocalRank;, +        assertEquals(10, namedXContents.size());, +        assertEquals(Integer.valueOf(4), categories.get(EvaluationMetric.class));, +        assertTrue(names.contains(ExpectedReciprocalRank.NAME));, +        assertEquals(Integer.valueOf(4), categories.get(MetricDetail.class));, +        assertTrue(names.contains(ExpectedReciprocalRank.NAME));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +import org.elasticsearch.index.rankeval.DiscountedCumulativeGain;, +import org.elasticsearch.index.rankeval.EvaluationMetric;, +import org.elasticsearch.index.rankeval.ExpectedReciprocalRank;, +import org.elasticsearch.index.rankeval.MeanReciprocalRank;, +import java.util.Arrays;, +import java.util.function.Supplier;, +        List<RatedRequest> specifications = createTestEvaluationSpec();, +    private static List<RatedRequest> createTestEvaluationSpec() {, +        SearchSourceBuilder testQuery = new SearchSourceBuilder();, +        testQuery.query(new MatchAllQueryBuilder());, +        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "amsterdam1", "amsterdam2", "amsterdam3", "amsterdam4");]