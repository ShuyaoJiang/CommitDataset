[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/percentiles/hdr/HDRPercentilesAggregatorTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations.metrics.percentiles.hdr;, +, +import org.apache.lucene.document.LongPoint;, +import org.apache.lucene.document.NumericDocValuesField;, +import org.apache.lucene.document.SortedNumericDocValuesField;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.RandomIndexWriter;, +import org.apache.lucene.search.FieldValueQuery;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.MatchAllDocsQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.store.Directory;, +import org.elasticsearch.common.CheckedConsumer;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.NumberFieldMapper;, +import org.elasticsearch.search.aggregations.AggregatorTestCase;, +import org.elasticsearch.search.aggregations.metrics.percentiles.PercentilesAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.percentiles.PercentilesMethod;, +, +import java.io.IOException;, +import java.util.function.Consumer;, +, +import static java.util.Arrays.asList;, +import static java.util.Collections.singleton;, +, +public class HDRPercentilesAggregatorTests extends AggregatorTestCase {, +, +    public void testNoDocs() throws IOException {, +        testCase(new MatchAllDocsQuery(), iw -> {, +            // Intentionally not writing any docs, +        }, hdr -> {, +            assertEquals(0L, hdr.state.getTotalCount());, +        });, +    }, +, +    public void testNoMatchingField() throws IOException {, +        testCase(new MatchAllDocsQuery(), iw -> {, +            iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 7)));, +            iw.addDocument(singleton(new SortedNumericDocValuesField("wrong_number", 1)));, +        }, hdr -> {, +            assertEquals(0L, hdr.state.getTotalCount());, +        });, +    }, +, +    public void testSomeMatchesSortedNumericDocValues() throws IOException {, +        testCase(new FieldValueQuery("number"), iw -> {, +            iw.addDocument(singleton(new SortedNumericDocValuesField("number", 60)));, +            iw.addDocument(singleton(new SortedNumericDocValuesField("number", 40)));, +            iw.addDocument(singleton(new SortedNumericDocValuesField("number", 20)));, +            iw.addDocument(singleton(new SortedNumericDocValuesField("number", 10)));, +        }, hdr -> {, +            assertEquals(4L, hdr.state.getTotalCount());, +            double approximation = 0.05d;, +            assertEquals(10.0d, hdr.percentile(25), approximation);, +            assertEquals(20.0d, hdr.percentile(50), approximation);, +            assertEquals(40.0d, hdr.percentile(75), approximation);, +            assertEquals(60.0d, hdr.percentile(99), approximation);, +        });, +    }, +, +    public void testSomeMatchesNumericDocValues() throws IOException {, +        testCase(new FieldValueQuery("number"), iw -> {, +            iw.addDocument(singleton(new NumericDocValuesField("number", 60)));, +            iw.addDocument(singleton(new NumericDocValuesField("number", 40)));, +            iw.addDocument(singleton(new NumericDocValuesField("number", 20)));, +            iw.addDocument(singleton(new NumericDocValuesField("number", 10)));, +        }, hdr -> {, +            assertEquals(4L, hdr.state.getTotalCount());, +            double approximation = 0.05d;, +            assertEquals(10.0d, hdr.percentile(25), approximation);, +            assertEquals(20.0d, hdr.percentile(50), approximation);, +            assertEquals(40.0d, hdr.percentile(75), approximation);, +            assertEquals(60.0d, hdr.percentile(99), approximation);, +        });, +    }, +, +    public void testQueryFiltering() throws IOException {, +        final CheckedConsumer<RandomIndexWriter, IOException> docs = iw -> {, +            iw.addDocument(asList(new LongPoint("row", 4), new SortedNumericDocValuesField("number", 60)));]