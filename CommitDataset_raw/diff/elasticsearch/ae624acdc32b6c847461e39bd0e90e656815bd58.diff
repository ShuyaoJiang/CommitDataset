[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +        Path pluginFile = download(pluginHandle, terminal);, +        extract(pluginHandle, terminal, pluginFile);, +    }, +, +    private Path download(PluginHandle pluginHandle, Terminal terminal) throws IOException {, +, +        HttpDownloadHelper downloadHelper = new HttpDownloadHelper();, +        boolean downloaded = false;, +        HttpDownloadHelper.DownloadProgress progress;, +        if (outputMode == OutputMode.SILENT) {, +            progress = new HttpDownloadHelper.NullProgress();, +        } else {, +            progress = new HttpDownloadHelper.VerboseProgress(terminal.writer());, +            // try to cleanup what we downloaded, +            IOUtils.deleteFilesIgnoringExceptions(pluginFile);, +        return pluginFile;, +    }, +    private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile) throws IOException {, +        final Path extractLocation = pluginHandle.extractedDir(environment);, +        if (Files.exists(extractLocation)) {, +            throw new IOException("plugin directory " + extractLocation.toAbsolutePath() + " already exists. To update the plugin, uninstall it first using remove " + pluginHandle.name + " command");, +        }, +, +        // unzip plugin to a staging temp dir, named for the plugin, +        Path tmp = Files.createTempDirectory(environment.tmpFile(), null);, +        Path root = tmp.resolve(pluginHandle.name); , +        unzipPlugin(pluginFile, root);, +, +        // find the actual root (in case its unzipped with extra directory wrapping), +        root = findPluginRoot(root);, +, +        // read and validate the plugin descriptor, +        PluginInfo info = PluginInfo.readFromProperties(root);, +        terminal.println("%s", info);, +        // TODO: verify bundles here, +        // add plugin jars to the list, +        Path pluginJars[] = FileSystemUtils.files(root, "*.jar");, +        for (Path jar : pluginJars) {, +            jars.add(jar.toUri().toURL());, +        // install plugin, +        FileSystemUtils.copyDirectoryRecursively(root, extractLocation);, +        terminal.println("Installed %s into %s", pluginHandle.name, extractLocation.toAbsolutePath());, +, +        IOUtils.rm(tmp, pluginFile);, +        // take care of bin/ by moving and applying permissions if needed, +            terminal.println(VERBOSE, "Installed %s into %s", pluginHandle.name, toLocation.toAbsolutePath());, +            terminal.println(VERBOSE, "Installed %s into %s", pluginHandle.name, configDestLocation.toAbsolutePath());, +    /** we check whether we need to remove the top-level folder while extracting, +     *   sometimes (e.g. github) the downloaded archive contains a top-level folder which needs to be removed, +     */, +    private Path findPluginRoot(Path dir) throws IOException {, +        if (Files.exists(dir.resolve(PluginInfo.ES_PLUGIN_PROPERTIES))) {, +            return dir;, +        } else {, +            final Path[] topLevelFiles = FileSystemUtils.files(dir);, +            if (topLevelFiles.length == 1 && Files.isDirectory(topLevelFiles[0])) {, +                Path subdir = topLevelFiles[0];, +                if (Files.exists(subdir.resolve(PluginInfo.ES_PLUGIN_PROPERTIES))) {, +                    return subdir;, +                }, +            }, +        }, +        throw new RuntimeException("Could not find plugin descriptor '" + PluginInfo.ES_PLUGIN_PROPERTIES + "' in plugin zip");, +    }, +, +    private void unzipPlugin(Path zip, Path target) throws IOException {, +        Files.createDirectories(target);, +                Path targetFile = target.resolve(entry.getName());]