[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/InternalTermsFacet.java, +import org.elasticsearch.search.facet.terms.ip.InternalIpTermsFacet;, +        InternalIpTermsFacet.registerStream();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/InternalTermsFacet.java, +import org.elasticsearch.search.facet.terms.ip.InternalIpTermsFacet;, +        InternalIpTermsFacet.registerStream();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +import org.elasticsearch.index.mapper.xcontent.ip.IpFieldMapper;, +import org.elasticsearch.search.facet.terms.ip.TermsIpFacetCollector;, +            if (fieldMapper instanceof IpFieldMapper) {, +                return new TermsIpFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +            } else if (fieldMapper.fieldDataType() == FieldDataType.DefaultTypes.LONG) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/InternalTermsFacet.java, +import org.elasticsearch.search.facet.terms.ip.InternalIpTermsFacet;, +        InternalIpTermsFacet.registerStream();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +import org.elasticsearch.index.mapper.xcontent.ip.IpFieldMapper;, +import org.elasticsearch.search.facet.terms.ip.TermsIpFacetCollector;, +            if (fieldMapper instanceof IpFieldMapper) {, +                return new TermsIpFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +            } else if (fieldMapper.fieldDataType() == FieldDataType.DefaultTypes.LONG) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/ip/InternalIpTermsFacet.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.facet.terms.ip;, +, +import org.elasticsearch.common.collect.BoundedTreeSet;, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.thread.ThreadLocals;, +import org.elasticsearch.common.trove.iterator.TLongIntIterator;, +import org.elasticsearch.common.trove.map.hash.TLongIntHashMap;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.index.mapper.xcontent.ip.IpFieldMapper;, +import org.elasticsearch.search.facet.Facet;, +import org.elasticsearch.search.facet.terms.InternalTermsFacet;, +import org.elasticsearch.search.facet.terms.TermsFacet;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.List;, +, +/**, + * @author kimchy (shay.banon), + */, +public class InternalIpTermsFacet extends InternalTermsFacet {, +, +    private static final String STREAM_TYPE = "ipTerms";, +, +    public static void registerStream() {, +        Streams.registerStream(STREAM, STREAM_TYPE);, +    }, +, +    static Stream STREAM = new Stream() {, +        @Override public Facet readFacet(String type, StreamInput in) throws IOException {, +            return readTermsFacet(in);, +        }, +    };, +, +    @Override public String streamType() {, +        return STREAM_TYPE;, +    }, +, +    public static class LongEntry implements Entry {, +, +        long term;, +        int count;, +, +        public LongEntry(long term, int count) {, +            this.term = term;, +            this.count = count;, +        }, +, +        public String term() {, +            return IpFieldMapper.longToIp(term);, +        }, +, +        public String getTerm() {, +            return term();]