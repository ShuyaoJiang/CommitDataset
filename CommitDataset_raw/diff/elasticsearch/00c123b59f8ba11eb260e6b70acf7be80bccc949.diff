[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String EVEN_SHARD_COUNT_ALLOCATOR = "even_shard";, +    private final ExtensionPoint.SelectedType<ShardsAllocator> shardsAllocators = new ExtensionPoint.SelectedType<>("shards_allocator", ShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +    public void registerShardsAllocator(String name, Class<? extends ShardsAllocator> clazz) {, +        shardsAllocators.registerExtension(name, clazz);, +        // bind ShardsAllocator, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_SETTING.getKey(), ClusterModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR)) {, +            final ESLogger logger = Loggers.getLogger(getClass(), settings);, +            logger.warn("{} allocator has been removed in 2.0 using {} instead", ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, ClusterModule.BALANCED_ALLOCATOR);, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String EVEN_SHARD_COUNT_ALLOCATOR = "even_shard";, +    private final ExtensionPoint.SelectedType<ShardsAllocator> shardsAllocators = new ExtensionPoint.SelectedType<>("shards_allocator", ShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +    public void registerShardsAllocator(String name, Class<? extends ShardsAllocator> clazz) {, +        shardsAllocators.registerExtension(name, clazz);, +        // bind ShardsAllocator, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_SETTING.getKey(), ClusterModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR)) {, +            final ESLogger logger = Loggers.getLogger(getClass(), settings);, +            logger.warn("{} allocator has been removed in 2.0 using {} instead", ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, ClusterModule.BALANCED_ALLOCATOR);, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateFilter.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String EVEN_SHARD_COUNT_ALLOCATOR = "even_shard";, +    private final ExtensionPoint.SelectedType<ShardsAllocator> shardsAllocators = new ExtensionPoint.SelectedType<>("shards_allocator", ShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +    public void registerShardsAllocator(String name, Class<? extends ShardsAllocator> clazz) {, +        shardsAllocators.registerExtension(name, clazz);, +        // bind ShardsAllocator, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_SETTING.getKey(), ClusterModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR)) {, +            final ESLogger logger = Loggers.getLogger(getClass(), settings);, +            logger.warn("{} allocator has been removed in 2.0 using {} instead", ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, ClusterModule.BALANCED_ALLOCATOR);, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateFilter.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                      AliasValidator aliasValidator, Environment env,, +                            List<IndexTemplateMetaData> templates = findTemplates(request, currentState);, +    private List<IndexTemplateMetaData> findTemplates(CreateIndexClusterStateUpdateRequest request, ClusterState state) throws IOException {, +            if (Regex.simpleMatch(template.template(), request.index())) {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String EVEN_SHARD_COUNT_ALLOCATOR = "even_shard";, +    private final ExtensionPoint.SelectedType<ShardsAllocator> shardsAllocators = new ExtensionPoint.SelectedType<>("shards_allocator", ShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +    public void registerShardsAllocator(String name, Class<? extends ShardsAllocator> clazz) {, +        shardsAllocators.registerExtension(name, clazz);, +        // bind ShardsAllocator, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_SETTING.getKey(), ClusterModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR)) {, +            final ESLogger logger = Loggers.getLogger(getClass(), settings);, +            logger.warn("{} allocator has been removed in 2.0 using {} instead", ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, ClusterModule.BALANCED_ALLOCATOR);, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateFilter.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                      AliasValidator aliasValidator, Environment env,, +                            List<IndexTemplateMetaData> templates = findTemplates(request, currentState);, +    private List<IndexTemplateMetaData> findTemplates(CreateIndexClusterStateUpdateRequest request, ClusterState state) throws IOException {, +            if (Regex.simpleMatch(template.template(), request.index())) {, +++ b/core/src/main/java/org/elasticsearch/plugins/ClusterPlugin.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String EVEN_SHARD_COUNT_ALLOCATOR = "even_shard";, +    private final ExtensionPoint.SelectedType<ShardsAllocator> shardsAllocators = new ExtensionPoint.SelectedType<>("shards_allocator", ShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +    public void registerShardsAllocator(String name, Class<? extends ShardsAllocator> clazz) {, +        shardsAllocators.registerExtension(name, clazz);, +        // bind ShardsAllocator, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_SETTING.getKey(), ClusterModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR)) {, +            final ESLogger logger = Loggers.getLogger(getClass(), settings);, +            logger.warn("{} allocator has been removed in 2.0 using {} instead", ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, ClusterModule.BALANCED_ALLOCATOR);, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateFilter.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                      AliasValidator aliasValidator, Environment env,, +                            List<IndexTemplateMetaData> templates = findTemplates(request, currentState);, +    private List<IndexTemplateMetaData> findTemplates(CreateIndexClusterStateUpdateRequest request, ClusterState state) throws IOException {, +            if (Regex.simpleMatch(template.template(), request.index())) {, +++ b/core/src/main/java/org/elasticsearch/plugins/ClusterPlugin.java, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/template/put/MetaDataIndexTemplateServiceTests.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String EVEN_SHARD_COUNT_ALLOCATOR = "even_shard";, +    private final ExtensionPoint.SelectedType<ShardsAllocator> shardsAllocators = new ExtensionPoint.SelectedType<>("shards_allocator", ShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        registerShardsAllocator(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +    public void registerShardsAllocator(String name, Class<? extends ShardsAllocator> clazz) {, +        shardsAllocators.registerExtension(name, clazz);, +        // bind ShardsAllocator, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_SETTING.getKey(), ClusterModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR)) {, +            final ESLogger logger = Loggers.getLogger(getClass(), settings);, +            logger.warn("{} allocator has been removed in 2.0 using {} instead", ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR, ClusterModule.BALANCED_ALLOCATOR);, +        }]