[+++ b/docs/reference/aggregations/bucket/autodatehistogram-aggregation.asciidoc, +            ],, +            "interval": "1M", +      ],, +      "interval": "1h", +      ],, +      "interval": "1h", +++ b/docs/reference/aggregations/bucket/autodatehistogram-aggregation.asciidoc, +            ],, +            "interval": "1M", +      ],, +      "interval": "1h", +      ],, +      "interval": "1h", +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregationBuilder.java, +            1000L, "s" , 1, 5, 10, 30);, +            60 * 1000L, "m", 1, 5, 10, 30);, +            60 * 60 * 1000L, "h", 1, 3, 12);, +            24 * 60 * 60 * 1000L, "d", 1, 7);, +            30 * 24 * 60 * 60 * 1000L, "M", 1, 3);, +            365 * 24 * 60 * 60 * 1000L, "y", 1, 5, 10, 20, 50, 100);, +        final String unitAbbreviation;, +        public RoundingInfo(Rounding rounding, long roughEstimateDurationMillis, String unitAbbreviation, int... innerIntervals) {, +            this.unitAbbreviation = unitAbbreviation;, +            unitAbbreviation = in.readString();, +            out.writeString(unitAbbreviation);, +++ b/docs/reference/aggregations/bucket/autodatehistogram-aggregation.asciidoc, +            ],, +            "interval": "1M", +      ],, +      "interval": "1h", +      ],, +      "interval": "1h", +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregationBuilder.java, +            1000L, "s" , 1, 5, 10, 30);, +            60 * 1000L, "m", 1, 5, 10, 30);, +            60 * 60 * 1000L, "h", 1, 3, 12);, +            24 * 60 * 60 * 1000L, "d", 1, 7);, +            30 * 24 * 60 * 60 * 1000L, "M", 1, 3);, +            365 * 24 * 60 * 60 * 1000L, "y", 1, 5, 10, 20, 50, 100);, +        final String unitAbbreviation;, +        public RoundingInfo(Rounding rounding, long roughEstimateDurationMillis, String unitAbbreviation, int... innerIntervals) {, +            this.unitAbbreviation = unitAbbreviation;, +            unitAbbreviation = in.readString();, +            out.writeString(unitAbbreviation);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregator.java, +        return new InternalAutoDateHistogram(name, buckets, targetBuckets, emptyBucketInfo,, +            formatter, pipelineAggregators(), metaData(), 1);, +                pipelineAggregators(), metaData(), 1);, +++ b/docs/reference/aggregations/bucket/autodatehistogram-aggregation.asciidoc, +            ],, +            "interval": "1M", +      ],, +      "interval": "1h", +      ],, +      "interval": "1h", +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregationBuilder.java, +            1000L, "s" , 1, 5, 10, 30);, +            60 * 1000L, "m", 1, 5, 10, 30);, +            60 * 60 * 1000L, "h", 1, 3, 12);, +            24 * 60 * 60 * 1000L, "d", 1, 7);, +            30 * 24 * 60 * 60 * 1000L, "M", 1, 3);, +            365 * 24 * 60 * 60 * 1000L, "y", 1, 5, 10, 20, 50, 100);, +        final String unitAbbreviation;, +        public RoundingInfo(Rounding rounding, long roughEstimateDurationMillis, String unitAbbreviation, int... innerIntervals) {, +            this.unitAbbreviation = unitAbbreviation;, +            unitAbbreviation = in.readString();, +            out.writeString(unitAbbreviation);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregator.java, +        return new InternalAutoDateHistogram(name, buckets, targetBuckets, emptyBucketInfo,, +            formatter, pipelineAggregators(), metaData(), 1);, +                pipelineAggregators(), metaData(), 1);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalAutoDateHistogram.java, +    private long bucketInnerInterval;, +                              List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData, long bucketInnerInterval) {, +        this.bucketInnerInterval = bucketInnerInterval;, +    public DateHistogramInterval getInterval() {, +, +        RoundingInfo roundingInfo = this.bucketInfo.roundingInfos[this.bucketInfo.roundingIdx];, +        String unitAbbreviation = roundingInfo.unitAbbreviation;, +        return new DateHistogramInterval(Long.toString(bucketInnerInterval) + unitAbbreviation);, +    }, +, +        return new InternalAutoDateHistogram(name, buckets, targetBuckets, bucketInfo, format, pipelineAggregators(), metaData, 1);, +        return new BucketReduceResult(reducedBuckets, reduceRoundingInfo, reduceRoundingIdx, 1);, +        long innerInterval;, +        BucketReduceResult(List<Bucket> buckets, RoundingInfo roundingInfo, int roundingIdx, long innerInterval) {, +            this.innerInterval = innerInterval;, +        return new BucketReduceResult(list, roundingInfo, roundingIdx, currentResult.innerInterval);, +                pipelineAggregators(), getMetaData(), reducedBucketsResult.innerInterval);, +        return new BucketReduceResult(mergedBuckets, roundingInfo, roundingIdx, mergeInterval);, +        builder.field("interval", getInterval().toString());, +        return new InternalAutoDateHistogram(name, buckets2, targetBuckets, bucketInfo, format, pipelineAggregators(), getMetaData(), 1);, +++ b/docs/reference/aggregations/bucket/autodatehistogram-aggregation.asciidoc, +            ],, +            "interval": "1M", +      ],, +      "interval": "1h", +      ],, +      "interval": "1h"]