[+++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +        objParser.declareObject(optionalConstructorArg(), (p, c) -> ShardInfo.fromXContent(p), new ParseField(_SHARDS));, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +        objParser.declareObject(optionalConstructorArg(), (p, c) -> ShardInfo.fromXContent(p), new ParseField(_SHARDS));, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexResponse.java, +                    ShardInfo shardInfo = (ShardInfo) args[5];, +                    long seqNo = (args[6] != null) ? (long) args[6] : SequenceNumbersService.UNASSIGNED_SEQ_NO;, +                    boolean created = (boolean) args[7];, +, +                    IndexResponse indexResponse = new IndexResponse(shardId, type, id, seqNo, version, created);, +                    indexResponse.setShardInfo(shardInfo);, +                    return indexResponse;, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +        objParser.declareObject(optionalConstructorArg(), (p, c) -> ShardInfo.fromXContent(p), new ParseField(_SHARDS));, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexResponse.java, +                    ShardInfo shardInfo = (ShardInfo) args[5];, +                    long seqNo = (args[6] != null) ? (long) args[6] : SequenceNumbersService.UNASSIGNED_SEQ_NO;, +                    boolean created = (boolean) args[7];, +, +                    IndexResponse indexResponse = new IndexResponse(shardId, type, id, seqNo, version, created);, +                    indexResponse.setShardInfo(shardInfo);, +                    return indexResponse;, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateResponse.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.Index;, +import java.util.function.BiConsumer;, +    private static final String GET = "get";, +, +            builder.startObject(GET);, +, +    private static final ConstructingObjectParser<UpdateResponse, Void> PARSER;, +    static {, +        PARSER = new ConstructingObjectParser<>(UpdateResponse.class.getName(),, +                args -> {, +                    // index uuid and shard id are unknown and can't be parsed back for now., +                    String index = (String) args[0];, +                    ShardId shardId = new ShardId(new Index(index, IndexMetaData.INDEX_UUID_NA_VALUE), -1);, +                    String type = (String) args[1];, +                    String id = (String) args[2];, +                    long version = (long) args[3];, +                    ShardInfo shardInfo = (ShardInfo) args[5];, +                    Long seqNo = (Long) args[6];, +, +                    Result result = null;, +                    for (Result r : Result.values()) {, +                        if (r.getLowercase().equals(args[4])) {, +                            result = r;, +                            break;, +                        }, +                    }, +, +                    UpdateResponse updateResponse = null;, +                    if (shardInfo != null && seqNo != null) {, +                        updateResponse = new UpdateResponse(shardInfo, shardId, type, id, seqNo, version, result);, +                    } else {, +                        updateResponse = new UpdateResponse(shardId, type, id, version, result);, +                    }, +                    return updateResponse;, +                });, +, +        DocWriteResponse.declareParserFields(PARSER);, +        BiConsumer<UpdateResponse, GetResult> setGetResult = (update, get) ->, +            update.setGetResult(new GetResult(update.getIndex(), update.getType(), update.getId(), update.getVersion(),, +                    get.isExists(), get.internalSourceRef(), get.getFields()));, +        PARSER.declareObject(setGetResult, (parser, context) -> GetResult.fromXContentEmbedded(parser), new ParseField(GET));, +    }, +, +    public static UpdateResponse fromXContent(XContentParser parser) {, +        return PARSER.apply(parser, null);, +    }, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +        objParser.declareObject(optionalConstructorArg(), (p, c) -> ShardInfo.fromXContent(p), new ParseField(_SHARDS));, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexResponse.java, +                    ShardInfo shardInfo = (ShardInfo) args[5];, +                    long seqNo = (args[6] != null) ? (long) args[6] : SequenceNumbersService.UNASSIGNED_SEQ_NO;, +                    boolean created = (boolean) args[7];, +, +                    IndexResponse indexResponse = new IndexResponse(shardId, type, id, seqNo, version, created);, +                    indexResponse.setShardInfo(shardInfo);, +                    return indexResponse;, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateResponse.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.Index;, +import java.util.function.BiConsumer;, +    private static final String GET = "get";, +, +            builder.startObject(GET);, +, +    private static final ConstructingObjectParser<UpdateResponse, Void> PARSER;, +    static {, +        PARSER = new ConstructingObjectParser<>(UpdateResponse.class.getName(),, +                args -> {, +                    // index uuid and shard id are unknown and can't be parsed back for now., +                    String index = (String) args[0];]