[+++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        bulkRequest.add(data, contentUnsafe, defaultIndex, defaultType, payload, true);, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        bulkRequest.add(data, contentUnsafe, defaultIndex, defaultType, payload, true);, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        return add(data, contentUnsafe, defaultIndex, defaultType, null, true);, +    /**, +     * Adds a framed data in binary format, +     */, +    public BulkRequest add(BytesReference data, boolean contentUnsafe, @Nullable String defaultIndex, @Nullable String defaultType, boolean allowExplicitIndex) throws Exception {, +        return add(data, contentUnsafe, defaultIndex, defaultType, null, allowExplicitIndex);, +    }, +, +    public BulkRequest add(BytesReference data, boolean contentUnsafe, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable Object payload, boolean allowExplicitIndex) throws Exception {, +                            if (!allowExplicitIndex) {, +                                throw new ElasticSearchIllegalArgumentException("explicit index in bulk is not allowed");, +                            }, +                        if (!allowExplicitIndex) {, +                            throw new ElasticSearchIllegalArgumentException("explicit index in bulk is not allowed");, +                        }, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        bulkRequest.add(data, contentUnsafe, defaultIndex, defaultType, payload, true);, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        return add(data, contentUnsafe, defaultIndex, defaultType, null, true);, +    /**, +     * Adds a framed data in binary format, +     */, +    public BulkRequest add(BytesReference data, boolean contentUnsafe, @Nullable String defaultIndex, @Nullable String defaultType, boolean allowExplicitIndex) throws Exception {, +        return add(data, contentUnsafe, defaultIndex, defaultType, null, allowExplicitIndex);, +    }, +, +    public BulkRequest add(BytesReference data, boolean contentUnsafe, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable Object payload, boolean allowExplicitIndex) throws Exception {, +                            if (!allowExplicitIndex) {, +                                throw new ElasticSearchIllegalArgumentException("explicit index in bulk is not allowed");, +                            }, +                        if (!allowExplicitIndex) {, +                            throw new ElasticSearchIllegalArgumentException("explicit index in bulk is not allowed");, +                        }, +++ b/src/main/java/org/elasticsearch/action/get/MultiGetRequest.java, +    public MultiGetRequest add(@Nullable String defaultIndex, @Nullable String defaultType, @Nullable String[] defaultFields, @Nullable FetchSourceContext defaultFetchSource, byte[] data, int from, int length) throws Exception {, +        return add(defaultIndex, defaultType, defaultFields, defaultFetchSource, new BytesArray(data, from, length), true);, +    public MultiGetRequest add(@Nullable String defaultIndex, @Nullable String defaultType, @Nullable String[] defaultFields, @Nullable FetchSourceContext defaultFetchSource, BytesReference data) throws Exception {, +        return add(defaultIndex, defaultType, defaultFields, defaultFetchSource, data, true);, +    }, +, +    public MultiGetRequest add(@Nullable String defaultIndex, @Nullable String defaultType, @Nullable String[] defaultFields, @Nullable FetchSourceContext defaultFetchSource, BytesReference data, boolean allowExplicitIndex) throws Exception {, +                                        if (!allowExplicitIndex) {, +                                            throw new ElasticSearchIllegalArgumentException("explicit index in multi get is not allowed");, +                                        }, +        return this;, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        bulkRequest.add(data, contentUnsafe, defaultIndex, defaultType, payload, true);, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        return add(data, contentUnsafe, defaultIndex, defaultType, null, true);, +    /**, +     * Adds a framed data in binary format, +     */, +    public BulkRequest add(BytesReference data, boolean contentUnsafe, @Nullable String defaultIndex, @Nullable String defaultType, boolean allowExplicitIndex) throws Exception {, +        return add(data, contentUnsafe, defaultIndex, defaultType, null, allowExplicitIndex);, +    }, +, +    public BulkRequest add(BytesReference data, boolean contentUnsafe, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable Object payload, boolean allowExplicitIndex) throws Exception {, +                            if (!allowExplicitIndex) {, +                                throw new ElasticSearchIllegalArgumentException("explicit index in bulk is not allowed");, +                            }, +                        if (!allowExplicitIndex) {, +                            throw new ElasticSearchIllegalArgumentException("explicit index in bulk is not allowed");, +                        }, +++ b/src/main/java/org/elasticsearch/action/get/MultiGetRequest.java, +    public MultiGetRequest add(@Nullable String defaultIndex, @Nullable String defaultType, @Nullable String[] defaultFields, @Nullable FetchSourceContext defaultFetchSource, byte[] data, int from, int length) throws Exception {, +        return add(defaultIndex, defaultType, defaultFields, defaultFetchSource, new BytesArray(data, from, length), true);, +    public MultiGetRequest add(@Nullable String defaultIndex, @Nullable String defaultType, @Nullable String[] defaultFields, @Nullable FetchSourceContext defaultFetchSource, BytesReference data) throws Exception {, +        return add(defaultIndex, defaultType, defaultFields, defaultFetchSource, data, true);, +    }, +, +    public MultiGetRequest add(@Nullable String defaultIndex, @Nullable String defaultType, @Nullable String[] defaultFields, @Nullable FetchSourceContext defaultFetchSource, BytesReference data, boolean allowExplicitIndex) throws Exception {, +                                        if (!allowExplicitIndex) {, +                                            throw new ElasticSearchIllegalArgumentException("explicit index in multi get is not allowed");, +                                        }, +        return this;, +++ b/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +        return add(new BytesArray(data, from, length), contentUnsafe, indices, types, searchType, IgnoreIndices.NONE, true);, +    public MultiSearchRequest add(BytesReference data, boolean contentUnsafe, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IgnoreIndices ignoreIndices) throws Exception {, +        return add(data, contentUnsafe, indices, types, searchType, ignoreIndices, true);, +    }, +, +    public MultiSearchRequest add(BytesReference data, boolean contentUnsafe, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IgnoreIndices ignoreIndices, boolean allowExplicitIndex) throws Exception {, +                                    if (!allowExplicitIndex) {, +                                        throw new ElasticSearchIllegalArgumentException("explicit index in multi search is not allowed");, +                                    }, +                                    if (!allowExplicitIndex) {, +                                        throw new ElasticSearchIllegalArgumentException("explicit index in multi search is not allowed");, +                                    }, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        bulkRequest.add(data, contentUnsafe, defaultIndex, defaultType, payload, true);, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        return add(data, contentUnsafe, defaultIndex, defaultType, null, true);, +    /**, +     * Adds a framed data in binary format]