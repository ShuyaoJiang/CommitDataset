[+++ b/server/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +import org.elasticsearch.core.internal.io.IOUtils;, +                        factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings);, +                    factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings);, +            analyzers.merge(entry.getKey(), produceAnalyzer(entry.getKey(), entry.getValue(), tokenFilterFactoryFactories,, +                    charFilterFactoryFactories, tokenizerFactoryFactories), (k, v) -> {, +                        throw new IllegalStateException("already registered analyzer with name: " + entry.getKey());, +                    });, +            NamedAnalyzer defaultAnalyzer = produceAnalyzer("default", new StandardAnalyzerProvider(indexSettings, null, "default",, +                    Settings.Builder.EMPTY_SETTINGS), tokenFilterFactoryFactories, charFilterFactoryFactories, tokenizerFactoryFactories);, +            analyzers.put("default", defaultAnalyzer);, +    private static NamedAnalyzer produceAnalyzer(String name, AnalyzerProvider<?> analyzerFactory,, +            Map<String, TokenFilterFactory> tokenFilters, Map<String, CharFilterFactory> charFilters,, +            Map<String, TokenizerFactory> tokenizers) {, +        return analyzer;, +++ b/server/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +import org.elasticsearch.core.internal.io.IOUtils;, +                        factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings);, +                    factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings);, +            analyzers.merge(entry.getKey(), produceAnalyzer(entry.getKey(), entry.getValue(), tokenFilterFactoryFactories,, +                    charFilterFactoryFactories, tokenizerFactoryFactories), (k, v) -> {, +                        throw new IllegalStateException("already registered analyzer with name: " + entry.getKey());, +                    });, +            NamedAnalyzer defaultAnalyzer = produceAnalyzer("default", new StandardAnalyzerProvider(indexSettings, null, "default",, +                    Settings.Builder.EMPTY_SETTINGS), tokenFilterFactoryFactories, charFilterFactoryFactories, tokenizerFactoryFactories);, +            analyzers.put("default", defaultAnalyzer);, +    private static NamedAnalyzer produceAnalyzer(String name, AnalyzerProvider<?> analyzerFactory,, +            Map<String, TokenFilterFactory> tokenFilters, Map<String, CharFilterFactory> charFilters,, +            Map<String, TokenizerFactory> tokenizers) {, +        return analyzer;, +++ b/server/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzerProvider.java, +                                  String name, Settings settings) {, +    void build(final Map<String, TokenizerFactory> tokenizers, final Map<String, CharFilterFactory> charFilters,, +++ b/server/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +import org.elasticsearch.core.internal.io.IOUtils;, +                        factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings);, +                    factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings);, +            analyzers.merge(entry.getKey(), produceAnalyzer(entry.getKey(), entry.getValue(), tokenFilterFactoryFactories,, +                    charFilterFactoryFactories, tokenizerFactoryFactories), (k, v) -> {, +                        throw new IllegalStateException("already registered analyzer with name: " + entry.getKey());, +                    });, +            NamedAnalyzer defaultAnalyzer = produceAnalyzer("default", new StandardAnalyzerProvider(indexSettings, null, "default",, +                    Settings.Builder.EMPTY_SETTINGS), tokenFilterFactoryFactories, charFilterFactoryFactories, tokenizerFactoryFactories);, +            analyzers.put("default", defaultAnalyzer);, +    private static NamedAnalyzer produceAnalyzer(String name, AnalyzerProvider<?> analyzerFactory,, +            Map<String, TokenFilterFactory> tokenFilters, Map<String, CharFilterFactory> charFilters,, +            Map<String, TokenizerFactory> tokenizers) {, +        return analyzer;, +++ b/server/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzerProvider.java, +                                  String name, Settings settings) {, +    void build(final Map<String, TokenizerFactory> tokenizers, final Map<String, CharFilterFactory> charFilters,, +++ b/server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java]