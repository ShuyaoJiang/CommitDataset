[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +import org.elasticsearch.ElasticsearchException;, +        if (size <= 0) {, +                    "[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than 0. Found [" + shardSize + "] in [" + name + "]");, +            // Use default heuristic to avoid any wrong-ranking caused by, +            // distributed counting, +        if (requiredSize <= 0 || shardSize <= 0) {, +            throw new ElasticsearchException(, +                    "parameters [required_size] and [shard_size] must be >0 in geohash_grid aggregation [" + name + "].");, +        }, +, +        if (shardSize > -1) {, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +import org.elasticsearch.ElasticsearchException;, +        if (size <= 0) {, +                    "[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than 0. Found [" + shardSize + "] in [" + name + "]");, +            // Use default heuristic to avoid any wrong-ranking caused by, +            // distributed counting, +        if (requiredSize <= 0 || shardSize <= 0) {, +            throw new ElasticsearchException(, +                    "parameters [required_size] and [shard_size] must be >0 in geohash_grid aggregation [" + name + "].");, +        }, +, +        if (shardSize > -1) {, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregationBuilder.java, +        if (size <= 0) {, +            throw new IllegalArgumentException("[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than  0. Found [" + shardSize + "] in [" + name + "]");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +import org.elasticsearch.ElasticsearchException;, +        if (size <= 0) {, +                    "[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than 0. Found [" + shardSize + "] in [" + name + "]");, +            // Use default heuristic to avoid any wrong-ranking caused by, +            // distributed counting, +        if (requiredSize <= 0 || shardSize <= 0) {, +            throw new ElasticsearchException(, +                    "parameters [required_size] and [shard_size] must be >0 in geohash_grid aggregation [" + name + "].");, +        }, +, +        if (shardSize > -1) {, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregationBuilder.java, +        if (size <= 0) {, +            throw new IllegalArgumentException("[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than  0. Found [" + shardSize + "] in [" + name + "]");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregationBuilder.java, +        if (size <= 0) {, +            throw new IllegalArgumentException("[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than 0. Found [" + shardSize + "] in [" + name + "]");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +import org.elasticsearch.ElasticsearchException;, +        if (size <= 0) {, +                    "[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than 0. Found [" + shardSize + "] in [" + name + "]");, +            // Use default heuristic to avoid any wrong-ranking caused by, +            // distributed counting, +        if (requiredSize <= 0 || shardSize <= 0) {, +            throw new ElasticsearchException(, +                    "parameters [required_size] and [shard_size] must be >0 in geohash_grid aggregation [" + name + "].");, +        }, +, +        if (shardSize > -1) {, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregationBuilder.java, +        if (size <= 0) {, +            throw new IllegalArgumentException("[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than  0. Found [" + shardSize + "] in [" + name + "]");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregationBuilder.java, +        if (size <= 0) {, +            throw new IllegalArgumentException("[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than 0. Found [" + shardSize + "] in [" + name + "]");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregator.java, +            if (requiredSize <= 0 || shardSize <= 0) {, +                throw new ElasticsearchException("parameters [required_size] and [shard_size] must be >0 in terms aggregation.");, +            }, +, +            if (minDocCount < 0 || shardMinDocCount < 0) {, +                throw new ElasticsearchException("parameter [min_doc_count] and [shardMinDocCount] must be >=0 in terms aggregation.");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +import org.elasticsearch.ElasticsearchException;, +        if (size <= 0) {, +                    "[size] must be greater than 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize <= 0) {, +                    "[shardSize] must be greater than 0. Found [" + shardSize + "] in [" + name + "]");, +            // Use default heuristic to avoid any wrong-ranking caused by, +            // distributed counting]