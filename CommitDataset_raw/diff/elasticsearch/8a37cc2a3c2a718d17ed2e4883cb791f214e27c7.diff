[+++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/bin/plugin, +, +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/bin/plugin, +, +++ b/dev-tools/build_release.py, +verify_java_version('1.7') # we require to build with 1.7, +verify_mvn_java_version('1.7', MVN), +, +def check_s3_credentials():, +  if not env.get('AWS_ACCESS_KEY_ID', None) or not env.get('AWS_SECRET_ACCESS_KEY', None):, +    raise RuntimeError('Could not find "AWS_ACCESS_KEY_ID" / "AWS_SECRET_ACCESS_KEY" in the env variables please export in order to upload to S3'), +, +def check_gpg_credentials():, +  if not env.get('GPG_KEY_ID', None) or not env.get('GPG_PASSPHRASE', None):, +    raise RuntimeError('Could not find "GPG_KEY_ID" / "GPG_PASSPHRASE" in the env variables please export in order to sign the packages (also make sure that GPG_KEYRING is set when not in ~/.gnupg)'), +, +# we print a notice if we can not find the relevant infos in the ~/.m2/settings.xml, +print_sonatype_notice(), +, +  check_gpg_credentials(), +  check_command_exists('gpg', 'gpg --version'), +  check_command_exists('expect', 'expect -v'), +  , +    check_s3_credentials(), +    check_command_exists('createrepo', 'createrepo --version'), +    check_command_exists('s3cmd', 's3cmd --version'), +    check_command_exists('apt-ftparchive', 'apt-ftparchive --version'), +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/bin/plugin, +, +++ b/dev-tools/build_release.py, +verify_java_version('1.7') # we require to build with 1.7, +verify_mvn_java_version('1.7', MVN), +, +def check_s3_credentials():, +  if not env.get('AWS_ACCESS_KEY_ID', None) or not env.get('AWS_SECRET_ACCESS_KEY', None):, +    raise RuntimeError('Could not find "AWS_ACCESS_KEY_ID" / "AWS_SECRET_ACCESS_KEY" in the env variables please export in order to upload to S3'), +, +def check_gpg_credentials():, +  if not env.get('GPG_KEY_ID', None) or not env.get('GPG_PASSPHRASE', None):, +    raise RuntimeError('Could not find "GPG_KEY_ID" / "GPG_PASSPHRASE" in the env variables please export in order to sign the packages (also make sure that GPG_KEYRING is set when not in ~/.gnupg)'), +, +# we print a notice if we can not find the relevant infos in the ~/.m2/settings.xml, +print_sonatype_notice(), +, +  check_gpg_credentials(), +  check_command_exists('gpg', 'gpg --version'), +  check_command_exists('expect', 'expect -v'), +  , +    check_s3_credentials(), +    check_command_exists('createrepo', 'createrepo --version'), +    check_command_exists('s3cmd', 's3cmd --version'), +    check_command_exists('apt-ftparchive', 'apt-ftparchive --version'), +++ b/dev-tools/elasticsearch_license_header.txt, +Licensed to Elasticsearch under one or more contributor, +license agreements. See the NOTICE file distributed with, +this work for additional information regarding copyright, +ownership. Elasticsearch licenses this file to you under, +the Apache License, Version 2.0 (the "License"); you may, +not use this file except in compliance with the License., +You may obtain a copy of the License at, +, +   http://www.apache.org/licenses/LICENSE-2.0, +, +Unless required by applicable law or agreed to in writing,, +software distributed under the License is distributed on an, +"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, +KIND, either express or implied.  See the License for the, +specific language governing permissions and limitations, +under the License., +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/bin/plugin, +, +++ b/dev-tools/build_release.py, +verify_java_version('1.7') # we require to build with 1.7, +verify_mvn_java_version('1.7', MVN), +, +def check_s3_credentials():, +  if not env.get('AWS_ACCESS_KEY_ID', None) or not env.get('AWS_SECRET_ACCESS_KEY', None):, +    raise RuntimeError('Could not find "AWS_ACCESS_KEY_ID" / "AWS_SECRET_ACCESS_KEY" in the env variables please export in order to upload to S3'), +, +def check_gpg_credentials():, +  if not env.get('GPG_KEY_ID', None) or not env.get('GPG_PASSPHRASE', None):, +    raise RuntimeError('Could not find "GPG_KEY_ID" / "GPG_PASSPHRASE" in the env variables please export in order to sign the packages (also make sure that GPG_KEYRING is set when not in ~/.gnupg)'), +, +# we print a notice if we can not find the relevant infos in the ~/.m2/settings.xml, +print_sonatype_notice(), +, +  check_gpg_credentials(), +  check_command_exists('gpg', 'gpg --version'), +  check_command_exists('expect', 'expect -v'), +  ]