[+++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, +import org.elasticsearch.rest.action.document.RestGetAction;, +import org.elasticsearch.rest.action.document.RestUpdateAction;, +import org.elasticsearch.rest.action.search.RestExplainAction;, +        explainRequest.setOptions(expectWarnings(RestExplainAction.TYPES_DEPRECATION_MESSAGE));, +++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, +import org.elasticsearch.rest.action.document.RestGetAction;, +import org.elasticsearch.rest.action.document.RestUpdateAction;, +import org.elasticsearch.rest.action.search.RestExplainAction;, +        explainRequest.setOptions(expectWarnings(RestExplainAction.TYPES_DEPRECATION_MESSAGE));, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, +import org.elasticsearch.rest.action.document.RestGetAction;, +import org.elasticsearch.rest.action.document.RestUpdateAction;, +import org.elasticsearch.rest.action.search.RestExplainAction;, +        explainRequest.setOptions(expectWarnings(RestExplainAction.TYPES_DEPRECATION_MESSAGE));, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.index.mapper.TypeFieldMapper;, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(QueryShardContext.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Using the _type field " +, +        "in queries is deprecated, prefer to filter on a field instead.";, +        if (name.equals(TypeFieldMapper.NAME)) {, +            deprecationLogger.deprecatedAndMaybeLog("query_with_types", TYPES_DEPRECATION_MESSAGE);, +        }, +++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, +import org.elasticsearch.rest.action.document.RestGetAction;, +import org.elasticsearch.rest.action.document.RestUpdateAction;, +import org.elasticsearch.rest.action.search.RestExplainAction;, +        explainRequest.setOptions(expectWarnings(RestExplainAction.TYPES_DEPRECATION_MESSAGE));, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.index.mapper.TypeFieldMapper;, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(QueryShardContext.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Using the _type field " +, +        "in queries is deprecated, prefer to filter on a field instead.";, +        if (name.equals(TypeFieldMapper.NAME)) {, +            deprecationLogger.deprecatedAndMaybeLog("query_with_types", TYPES_DEPRECATION_MESSAGE);, +        }, +++ b/server/src/main/java/org/elasticsearch/index/query/TypeQueryBuilder.java, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(TypeQueryBuilder.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Type queries are deprecated, " +, +        "prefer to filter on a field instead.";, +        deprecationLogger.deprecatedAndMaybeLog("type_query", TYPES_DEPRECATION_MESSAGE);, +++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, +import org.elasticsearch.rest.action.document.RestGetAction;, +import org.elasticsearch.rest.action.document.RestUpdateAction;, +import org.elasticsearch.rest.action.search.RestExplainAction;, +        explainRequest.setOptions(expectWarnings(RestExplainAction.TYPES_DEPRECATION_MESSAGE));, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.index.mapper.TypeFieldMapper;, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(QueryShardContext.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Using the _type field " +, +        "in queries is deprecated, prefer to filter on a field instead.";, +        if (name.equals(TypeFieldMapper.NAME)) {, +            deprecationLogger.deprecatedAndMaybeLog("query_with_types", TYPES_DEPRECATION_MESSAGE);, +        }, +++ b/server/src/main/java/org/elasticsearch/index/query/TypeQueryBuilder.java, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(TypeQueryBuilder.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Type queries are deprecated, " +, +        "prefer to filter on a field instead.";, +        deprecationLogger.deprecatedAndMaybeLog("type_query", TYPES_DEPRECATION_MESSAGE);, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TypeFieldTypeTests.java, +++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, +import org.elasticsearch.rest.action.document.RestGetAction;, +import org.elasticsearch.rest.action.document.RestUpdateAction;, +import org.elasticsearch.rest.action.search.RestExplainAction;, +        explainRequest.setOptions(expectWarnings(RestExplainAction.TYPES_DEPRECATION_MESSAGE));, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.index.mapper.TypeFieldMapper;, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(QueryShardContext.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Using the _type field " +, +        "in queries is deprecated, prefer to filter on a field instead.";, +        if (name.equals(TypeFieldMapper.NAME)) {, +            deprecationLogger.deprecatedAndMaybeLog("query_with_types", TYPES_DEPRECATION_MESSAGE);, +        }, +++ b/server/src/main/java/org/elasticsearch/index/query/TypeQueryBuilder.java, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(, +        LogManager.getLogger(TypeQueryBuilder.class));, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Type queries are deprecated, " +, +        "prefer to filter on a field instead.";, +        deprecationLogger.deprecatedAndMaybeLog("type_query", TYPES_DEPRECATION_MESSAGE);, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TypeFieldTypeTests.java, +++ b/server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java]