[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.unit.TimeValue;, +        private final CounterMetric throttleTimeMillisMetric = new CounterMetric();, +        private volatile long startOfThrottleNS;, +            startOfThrottleNS = System.nanoTime();, +, +            assert startOfThrottleNS > 0 : "Bad state of startOfThrottleNS";, +            long throttleTimeNS = System.nanoTime() - startOfThrottleNS;, +            if (throttleTimeNS >= 0) {, +                // Paranoia (System.nanoTime() is supposed to be monotonic): time slip may have occurred but never want to add a negative number, +                throttleTimeMillisMetric.inc(TimeValue.nsecToMSec(throttleTimeNS));, +        long getThrottleTimeInMillis() {, +            long currentThrottleNS = 0;, +            if (isThrottled() && startOfThrottleNS != 0) {, +                currentThrottleNS +=  System.nanoTime() - startOfThrottleNS;, +                if (currentThrottleNS < 0) {, +                    // Paranoia (System.nanoTime() is supposed to be monotonic): time slip must have happened, have to ignore this value, +                    currentThrottleNS = 0;, +                }, +            }, +            return throttleTimeMillisMetric.count() + TimeValue.nsecToMSec(currentThrottleNS);, +        }, +, +        boolean isThrottled() {, +            return lock != NOOP_LOCK;, +        }, +    }, +, +    /**, +     * Returns the number of milliseconds this engine was under index throttling., +     */, +    public long getIndexThrottleTimeInMillis() {, +        return 0;, +    }, +, +    /**, +     * Returns the <code>true</code> iff this engine is currently under index throttling., +     * @see #getIndexThrottleTimeInMillis(), +     */, +    public boolean isThrottled() {, +        return false;, +    }, +, +    public static class GetResult implements Releasable {, +        @Override, +        public void close() {, +            release();, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.unit.TimeValue;, +        private final CounterMetric throttleTimeMillisMetric = new CounterMetric();, +        private volatile long startOfThrottleNS;, +            startOfThrottleNS = System.nanoTime();, +, +            assert startOfThrottleNS > 0 : "Bad state of startOfThrottleNS";, +            long throttleTimeNS = System.nanoTime() - startOfThrottleNS;, +            if (throttleTimeNS >= 0) {, +                // Paranoia (System.nanoTime() is supposed to be monotonic): time slip may have occurred but never want to add a negative number, +                throttleTimeMillisMetric.inc(TimeValue.nsecToMSec(throttleTimeNS));, +        long getThrottleTimeInMillis() {, +            long currentThrottleNS = 0;, +            if (isThrottled() && startOfThrottleNS != 0) {, +                currentThrottleNS +=  System.nanoTime() - startOfThrottleNS;, +                if (currentThrottleNS < 0) {, +                    // Paranoia (System.nanoTime() is supposed to be monotonic): time slip must have happened, have to ignore this value, +                    currentThrottleNS = 0;, +                }, +            }, +            return throttleTimeMillisMetric.count() + TimeValue.nsecToMSec(currentThrottleNS);, +        }, +, +        boolean isThrottled() {, +            return lock != NOOP_LOCK;, +        }, +    }, +, +    /**, +     * Returns the number of milliseconds this engine was under index throttling., +     */, +    public long getIndexThrottleTimeInMillis() {, +        return 0;, +    }, +, +    /**, +     * Returns the <code>true</code> iff this engine is currently under index throttling., +     * @see #getIndexThrottleTimeInMillis(), +     */, +    public boolean isThrottled() {, +        return false;, +    }, +, +    public static class GetResult implements Releasable {, +        @Override, +        public void close() {, +            release();, +        }, +]