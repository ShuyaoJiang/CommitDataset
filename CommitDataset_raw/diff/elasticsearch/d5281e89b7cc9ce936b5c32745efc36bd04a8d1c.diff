[+++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.xpack.watcher.notification.email.HtmlSanitizer;, +        settings.addAll(HtmlSanitizer.getSettings());, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.xpack.watcher.notification.email.HtmlSanitizer;, +        settings.addAll(HtmlSanitizer.getSettings());, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/email/HtmlSanitizer.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +import java.util.Collections;, +import java.util.function.Function;, +    private static Setting<Boolean> SETTING_SANITIZATION_ENABLED =, +            Setting.boolSetting("xpack.notification.email.html.sanitization.enabled", true, Property.NodeScope);, +, +    private static Setting<List<String>> SETTING_SANITIZATION_ALLOW =, +            Setting.listSetting("xpack.notification.email.html.sanitization.allow", DEFAULT_ALLOWED, Function.identity(),, +                    Property.NodeScope);, +, +    private static Setting<List<String>> SETTING_SANITIZATION_DISALLOW =, +            Setting.listSetting("xpack.notification.email.html.sanitization.disallow", Collections.emptyList(), Function.identity(),, +                    Property.NodeScope);, +, +        enabled = SETTING_SANITIZATION_ENABLED.get(settings);, +        List<String> allow = SETTING_SANITIZATION_ALLOW.get(settings);, +        List<String> disallow = SETTING_SANITIZATION_DISALLOW.get(settings);, +, +    public static List<Setting<?>> getSettings() {, +        return Arrays.asList(SETTING_SANITIZATION_ALLOW, SETTING_SANITIZATION_DISALLOW, SETTING_SANITIZATION_ENABLED);, +    }, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.xpack.watcher.notification.email.HtmlSanitizer;, +        settings.addAll(HtmlSanitizer.getSettings());, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/email/HtmlSanitizer.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +import java.util.Collections;, +import java.util.function.Function;, +    private static Setting<Boolean> SETTING_SANITIZATION_ENABLED =, +            Setting.boolSetting("xpack.notification.email.html.sanitization.enabled", true, Property.NodeScope);, +, +    private static Setting<List<String>> SETTING_SANITIZATION_ALLOW =, +            Setting.listSetting("xpack.notification.email.html.sanitization.allow", DEFAULT_ALLOWED, Function.identity(),, +                    Property.NodeScope);, +, +    private static Setting<List<String>> SETTING_SANITIZATION_DISALLOW =, +            Setting.listSetting("xpack.notification.email.html.sanitization.disallow", Collections.emptyList(), Function.identity(),, +                    Property.NodeScope);, +, +        enabled = SETTING_SANITIZATION_ENABLED.get(settings);, +        List<String> allow = SETTING_SANITIZATION_ALLOW.get(settings);, +        List<String> disallow = SETTING_SANITIZATION_DISALLOW.get(settings);, +, +    public static List<Setting<?>> getSettings() {, +        return Arrays.asList(SETTING_SANITIZATION_ALLOW, SETTING_SANITIZATION_DISALLOW, SETTING_SANITIZATION_ENABLED);, +    }, +++ b/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/notification/email/HtmlSanitizerTests.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.xpack.watcher.Watcher;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.containsInAnyOrder;, +import static org.hamcrest.Matchers.hasItem;, +, +    public void testEnsureSettingsAreRegistered() {, +        Settings settings = Settings.builder().put("path.home", createTempDir()).build();, +        Watcher watcher = new Watcher(settings);, +        for (Setting<?> setting : HtmlSanitizer.getSettings()) {, +            assertThat(watcher.getSettings(), hasItem(setting));, +        }, +    }]