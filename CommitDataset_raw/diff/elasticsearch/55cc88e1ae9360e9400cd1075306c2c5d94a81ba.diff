[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/NodeVersionAllocationDecider.java, +            if (shardRouting.currentNodeId() == null) {, +                // fresh primary, we can allocate wherever, +            } else {, +                // relocating primary, only migrate to newer host, +                return isVersionCompatible(allocation.routingNodes(), shardRouting.currentNodeId(), node, allocation);, +        } else {, +            // check that active primary has a newer version so that peer recovery works, +            if (primary != null) {, +                return isVersionCompatible(allocation.routingNodes(), primary.currentNodeId(), node, allocation);, +            } else {, +                // ReplicaAfterPrimaryActiveAllocationDecider should prevent this case from occurring, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/NodeVersionAllocationDecider.java, +            if (shardRouting.currentNodeId() == null) {, +                // fresh primary, we can allocate wherever, +            } else {, +                // relocating primary, only migrate to newer host, +                return isVersionCompatible(allocation.routingNodes(), shardRouting.currentNodeId(), node, allocation);, +        } else {, +            // check that active primary has a newer version so that peer recovery works, +            if (primary != null) {, +                return isVersionCompatible(allocation.routingNodes(), primary.currentNodeId(), node, allocation);, +            } else {, +                // ReplicaAfterPrimaryActiveAllocationDecider should prevent this case from occurring, +++ b/core/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onShardActive(IndexShard indexShard) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onShardActive(indexShard);, +            } catch (Throwable t) {, +                logger.warn("[{}] failed to invoke on shard active callback", t, indexShard.shardId().getId());, +                throw t;, +            }, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/NodeVersionAllocationDecider.java, +            if (shardRouting.currentNodeId() == null) {, +                // fresh primary, we can allocate wherever, +            } else {, +                // relocating primary, only migrate to newer host, +                return isVersionCompatible(allocation.routingNodes(), shardRouting.currentNodeId(), node, allocation);, +        } else {, +            // check that active primary has a newer version so that peer recovery works, +            if (primary != null) {, +                return isVersionCompatible(allocation.routingNodes(), primary.currentNodeId(), node, allocation);, +            } else {, +                // ReplicaAfterPrimaryActiveAllocationDecider should prevent this case from occurring, +++ b/core/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onShardActive(IndexShard indexShard) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onShardActive(indexShard);, +            } catch (Throwable t) {, +                logger.warn("[{}] failed to invoke on shard active callback", t, indexShard.shardId().getId());, +                throw t;, +            }, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, TermVectorsService termVectorsService, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService) {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/NodeVersionAllocationDecider.java, +            if (shardRouting.currentNodeId() == null) {, +                // fresh primary, we can allocate wherever, +            } else {, +                // relocating primary, only migrate to newer host, +                return isVersionCompatible(allocation.routingNodes(), shardRouting.currentNodeId(), node, allocation);, +        } else {, +            // check that active primary has a newer version so that peer recovery works, +            if (primary != null) {, +                return isVersionCompatible(allocation.routingNodes(), primary.currentNodeId(), node, allocation);, +            } else {, +                // ReplicaAfterPrimaryActiveAllocationDecider should prevent this case from occurring, +++ b/core/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onShardActive(IndexShard indexShard) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onShardActive(indexShard);, +            } catch (Throwable t) {, +                logger.warn("[{}] failed to invoke on shard active callback", t, indexShard.shardId().getId());, +                throw t;, +            }, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java]