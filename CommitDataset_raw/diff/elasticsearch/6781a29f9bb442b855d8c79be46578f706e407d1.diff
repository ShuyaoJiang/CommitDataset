[+++ b/plugins/ingest-geoip/build.gradle, +    into '/', +++ b/plugins/ingest-geoip/build.gradle, +    into '/', +++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/IngestGeoIpPlugin.java, +import org.elasticsearch.common.io.PathUtils;, +    static String[] DEFAULT_DATABASE_FILENAMES = new String[]{"GeoLite2-ASN.mmdb", "GeoLite2-City.mmdb", "GeoLite2-Country.mmdb"};, +, +        final Path geoIpDirectory = getGeoIpDirectory(parameters);, +        final Path geoIpConfigDirectory = parameters.env.configFile().resolve("ingest-geoip");, +            databaseReaders = loadDatabaseReaders(geoIpDirectory, geoIpConfigDirectory);, +    /*, +     * In GeoIpProcessorNonIngestNodeTests, ingest-geoip is loaded on the classpath. This means that the plugin is never unbundled into a, +     * directory where the database files would live. Therefore, we have to copy these database files ourselves. To do this, we need the, +     * ability to specify where those database files would go. We do this by adding a plugin that registers ingest.geoip.database_path as, +     * an actual setting. Otherwise, in production code, this setting is not registered and the database path is not configurable., +     */, +    @SuppressForbidden(reason = "PathUtils#get"), +    private Path getGeoIpDirectory(Processor.Parameters parameters) {, +        final Path geoIpDirectory;, +        if (parameters.env.settings().get("ingest.geoip.database_path") == null) {, +            geoIpDirectory = parameters.env.pluginsFile().resolve("ingest-geoip");, +        } else {, +            geoIpDirectory = PathUtils.get(parameters.env.settings().get("ingest.geoip.database_path"));, +        return geoIpDirectory;, +    }, +, +    static Map<String, DatabaseReaderLazyLoader> loadDatabaseReaders(Path geoIpDirectory, Path geoIpConfigDirectory) throws IOException {, +        assertDatabaseExistence(geoIpDirectory, true);, +        assertDatabaseExistence(geoIpConfigDirectory, false);, +        final boolean loadDatabaseOnHeap = Booleans.parseBoolean(System.getProperty("es.geoip.load_db_on_heap", "false"));, +        final Map<String, DatabaseReaderLazyLoader> databaseReaders = new HashMap<>();, +, +        // load the default databases, +        for (final String databaseFilename : DEFAULT_DATABASE_FILENAMES) {, +            final Path databasePath = geoIpDirectory.resolve(databaseFilename);, +            final DatabaseReaderLazyLoader loader = createLoader(databasePath, loadDatabaseOnHeap);, +            databaseReaders.put(databaseFilename, loader);, +        }, +, +        // load any custom databases, +        if (Files.exists(geoIpConfigDirectory)) {, +                        final DatabaseReaderLazyLoader loader = createLoader(databasePath, loadDatabaseOnHeap);, +                        databaseReaders.put(databaseFileName, loader);, +                    }, +                }, +            }, +        }, +        return Collections.unmodifiableMap(databaseReaders);, +    }, +, +    private static DatabaseReaderLazyLoader createLoader(Path databasePath, boolean loadDatabaseOnHeap) {, +        return new DatabaseReaderLazyLoader(, +    }, +, +    private static void assertDatabaseExistence(final Path path, final boolean exists) throws IOException {, +        for (final String database : DEFAULT_DATABASE_FILENAMES) {, +            if (Files.exists(path.resolve(database)) != exists) {, +                final String message = "expected database [" + database + "] to " + (exists ? "" : "not ") + "exist in [" + path + "]";, +                throw new IOException(message);, +++ b/plugins/ingest-geoip/build.gradle, +    into '/', +++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/IngestGeoIpPlugin.java, +import org.elasticsearch.common.io.PathUtils;, +    static String[] DEFAULT_DATABASE_FILENAMES = new String[]{"GeoLite2-ASN.mmdb", "GeoLite2-City.mmdb", "GeoLite2-Country.mmdb"};, +, +        final Path geoIpDirectory = getGeoIpDirectory(parameters);, +        final Path geoIpConfigDirectory = parameters.env.configFile().resolve("ingest-geoip");, +            databaseReaders = loadDatabaseReaders(geoIpDirectory, geoIpConfigDirectory);, +    /*, +     * In GeoIpProcessorNonIngestNodeTests, ingest-geoip is loaded on the classpath. This means that the plugin is never unbundled into a, +     * directory where the database files would live. Therefore, we have to copy these database files ourselves. To do this, we need the, +     * ability to specify where those database files would go. We do this by adding a plugin that registers ingest.geoip.database_path as, +     * an actual setting. Otherwise, in production code, this setting is not registered and the database path is not configurable., +     */, +    @SuppressForbidden(reason = "PathUtils#get"), +    private Path getGeoIpDirectory(Processor.Parameters parameters) {, +        final Path geoIpDirectory;, +        if (parameters.env.settings().get("ingest.geoip.database_path") == null) {, +            geoIpDirectory = parameters.env.pluginsFile().resolve("ingest-geoip");, +        } else {, +            geoIpDirectory = PathUtils.get(parameters.env.settings().get("ingest.geoip.database_path"));, +        return geoIpDirectory;, +    }, +, +    static Map<String, DatabaseReaderLazyLoader> loadDatabaseReaders(Path geoIpDirectory, Path geoIpConfigDirectory) throws IOException {, +        assertDatabaseExistence(geoIpDirectory, true);, +        assertDatabaseExistence(geoIpConfigDirectory, false);, +        final boolean loadDatabaseOnHeap = Booleans.parseBoolean(System.getProperty("es.geoip.load_db_on_heap", "false"));, +        final Map<String, DatabaseReaderLazyLoader> databaseReaders = new HashMap<>();, +, +        // load the default databases, +        for (final String databaseFilename : DEFAULT_DATABASE_FILENAMES) {, +            final Path databasePath = geoIpDirectory.resolve(databaseFilename);, +            final DatabaseReaderLazyLoader loader = createLoader(databasePath, loadDatabaseOnHeap);, +            databaseReaders.put(databaseFilename, loader);, +        }, +, +        // load any custom databases, +        if (Files.exists(geoIpConfigDirectory)) {]