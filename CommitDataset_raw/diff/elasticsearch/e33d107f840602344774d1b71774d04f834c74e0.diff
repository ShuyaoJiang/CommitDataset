[+++ b/docs/reference/aggregations/bucket/composite-aggregation.asciidoc, +====== Missing bucket, +, +By default documents without a value for a given source are ignored., +It is possible to include them in the response by setting `missing_bucket` to, +`true` (defaults to `false`):, +, +[source,js], +--------------------------------------------------, +GET /_search, +{, +    "aggs" : {, +        "my_buckets": {, +            "composite" : {, +                "sources" : [, +                    { "product_name": { "terms" : { "field": "product", "missing_bucket": true } } }, +                ], +            }, +        }, +     }, +}, +--------------------------------------------------, +// CONSOLE, +, +In the example above the source `product_name` will emit an explicit `null` value, +for documents without a value for the field `product`., +The `order` specified in the source dictates whether the `null` values should rank, +first (ascending order, `asc`) or last (descending order, `desc`)., +, +++ b/docs/reference/aggregations/bucket/composite-aggregation.asciidoc, +====== Missing bucket, +, +By default documents without a value for a given source are ignored., +It is possible to include them in the response by setting `missing_bucket` to, +`true` (defaults to `false`):, +, +[source,js], +--------------------------------------------------, +GET /_search, +{, +    "aggs" : {, +        "my_buckets": {, +            "composite" : {, +                "sources" : [, +                    { "product_name": { "terms" : { "field": "product", "missing_bucket": true } } }, +                ], +            }, +        }, +     }, +}, +--------------------------------------------------, +// CONSOLE, +, +In the example above the source `product_name` will emit an explicit `null` value, +for documents without a value for the field `product`., +The `order` specified in the source dictates whether the `null` values should rank, +first (ascending order, `asc`) or last (descending order, `desc`)., +, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/230_composite.yml, +, +---, +"Composite aggregation and array size":, +  - skip:, +      version: " - 6.99.99", +      reason:  starting in 7.0 the composite sources do not allocate arrays eagerly., +, +  - do:, +        search:, +          index: test, +          body:, +            aggregations:, +              test:, +                composite:, +                  size: 1000000000, +                  sources: [, +                    {, +                      "keyword": {, +                        "terms": {, +                          "field": "keyword",, +                        }, +                      }, +                    }, +                  ], +, +  - match: {hits.total: 6}, +  - length: { aggregations.test.buckets: 2 }, +  - length: { aggregations.test.after_key: 1 }, +  - match: { aggregations.test.after_key.keyword:  "foo" }, +++ b/docs/reference/aggregations/bucket/composite-aggregation.asciidoc, +====== Missing bucket, +, +By default documents without a value for a given source are ignored., +It is possible to include them in the response by setting `missing_bucket` to, +`true` (defaults to `false`):, +, +[source,js], +--------------------------------------------------, +GET /_search, +{, +    "aggs" : {]