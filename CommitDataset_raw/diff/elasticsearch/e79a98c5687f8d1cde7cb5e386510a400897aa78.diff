[+++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +import org.elasticsearch.alerts.actions.AlertActionRegistry;, +import org.elasticsearch.common.io.stream.DataOutputStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.joda.time.DateTimeZone;, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +import java.util.ArrayList;, +        ByteArrayOutputStream out = new ByteArrayOutputStream();, +        searchRequest.writeTo(new DataOutputStreamOutput(new DataOutputStream(out)));, +        builder.field(AlertsStore.REQUEST_BINARY_FIELD.getPreferredName(), out.toByteArray());, +++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +import org.elasticsearch.alerts.actions.AlertActionRegistry;, +import org.elasticsearch.common.io.stream.DataOutputStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.joda.time.DateTimeZone;, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +import java.util.ArrayList;, +        ByteArrayOutputStream out = new ByteArrayOutputStream();, +        searchRequest.writeTo(new DataOutputStreamOutput(new DataOutputStream(out)));, +        builder.field(AlertsStore.REQUEST_BINARY_FIELD.getPreferredName(), out.toByteArray());, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +import org.elasticsearch.alerts.actions.AlertActionRegistry;, +import org.elasticsearch.common.io.stream.DataOutputStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.joda.time.DateTimeZone;, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +import java.util.ArrayList;, +        ByteArrayOutputStream out = new ByteArrayOutputStream();, +        searchRequest.writeTo(new DataOutputStreamOutput(new DataOutputStream(out)));, +        builder.field(AlertsStore.REQUEST_BINARY_FIELD.getPreferredName(), out.toByteArray());, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/alerts/AlertsStore.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.ArrayList;, +    public static final ParseField REQUEST_BINARY_FIELD = new ParseField("request_binary");, +                        String searchRequestFieldName = null;, +                        SearchRequest searchRequest = new SearchRequest();, +                        searchRequest.indicesOptions(IndicesOptions.lenientExpandOpen()); // TODO: make options configurable, +                        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                            if (token == XContentParser.Token.FIELD_NAME) {, +                                searchRequestFieldName = parser.currentName();, +                            } else if (token == XContentParser.Token.START_ARRAY) {, +                                switch (searchRequestFieldName) {, +                                    case "indices":, +                                        List<String> indices = new ArrayList<>();, +                                        while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                                            if (token == XContentParser.Token.VALUE_STRING) {, +                                                indices.add(parser.textOrNull());, +                                            } else {, +                                                throw new ElasticsearchIllegalArgumentException("Unexpected token [" + token + "]");, +                                            }, +                                        }, +                                        searchRequest.indices(indices.toArray(new String[indices.size()]));, +                                        break;, +                                    default:, +                                        throw new ElasticsearchIllegalArgumentException("Unexpected field [" + searchRequestFieldName + "]");, +                                }, +                            } else if (token == XContentParser.Token.START_OBJECT) {, +                                switch (searchRequestFieldName) {, +                                    case "body":, +                                        XContentBuilder builder = XContentBuilder.builder(parser.contentType().xContent());, +                                        builder.copyCurrentStructure(parser);, +                                        searchRequest.source(builder);, +                                        break;, +                                    default:, +                                        throw new ElasticsearchIllegalArgumentException("Unexpected field [" + searchRequestFieldName + "]");, +                                }, +                            } else if (token.isValue()) {, +                                switch (searchRequestFieldName) {, +                                    case "template_name":, +                                        searchRequest.templateName(parser.textOrNull());, +                                        break;, +                                    default:, +                                        throw new ElasticsearchIllegalArgumentException("Unexpected field [" + searchRequestFieldName + "]");, +                                }, +                            } else {, +                                throw new ElasticsearchIllegalArgumentException("Unexpected field [" + searchRequestFieldName + "]");, +                            }, +                        }, +                        alert.setSearchRequest(searchRequest);, +                    } else if (REQUEST_BINARY_FIELD.match(currentFieldName)) {, +                        SearchRequest searchRequest = new SearchRequest();, +                        searchRequest.readFrom(new BytesStreamInput(parser.binaryValue(), false));, +                        alert.setSearchRequest(searchRequest);, +++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +import org.elasticsearch.alerts.actions.AlertActionRegistry;, +import org.elasticsearch.common.io.stream.DataOutputStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.joda.time.DateTimeZone;]