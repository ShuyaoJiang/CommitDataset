[+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryPlugin.java, +            AzureStorageSettings.MAX_RETRIES_SETTING,, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryPlugin.java, +            AzureStorageSettings.MAX_RETRIES_SETTING,, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageSettings.java, +    public static final Setting<Integer> MAX_RETRIES_SETTING =, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryPlugin.java, +            AzureStorageSettings.MAX_RETRIES_SETTING,, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageSettings.java, +    public static final Setting<Integer> MAX_RETRIES_SETTING =, +++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureStorageServiceTests.java, +import org.elasticsearch.common.settings.SettingsModule;, +import java.io.UncheckedIOException;, +import java.util.Collections;, +    private AzureRepositoryPlugin pluginWithSettingsValidation(Settings settings) {, +        final AzureRepositoryPlugin plugin = new AzureRepositoryPlugin(settings);, +        new SettingsModule(settings, plugin.getSettings(), Collections.emptyList(), Collections.emptySet());, +        return plugin;, +    }, +, +    private AzureStorageService storageServiceWithSettingsValidation(Settings settings) {, +        try (AzureRepositoryPlugin plugin = pluginWithSettingsValidation(settings)) {, +            return plugin.azureStoreService;, +        } catch (IOException e) {, +            throw new UncheckedIOException(e);, +        }, +    }, +, +        try (AzureRepositoryPlugin plugin = pluginWithSettingsValidation(settings)) {, +        try (AzureRepositoryPlugin plugin = pluginWithSettingsValidation(settings1)) {, +        try (AzureRepositoryPlugin plugin = pluginWithSettingsValidation(settings)) {, +        try (AzureRepositoryPlugin plugin = pluginWithSettingsValidation(settings1)) {, +        final AzureStorageService azureStorageService = storageServiceWithSettingsValidation(buildSettings());, +        final AzureStorageService azureStorageService = storageServiceWithSettingsValidation(timeoutSettings);, +        final AzureStorageService azureStorageService = storageServiceWithSettingsValidation(buildSettings());, +        final AzureStorageService azureStorageService = storageServiceWithSettingsValidation(buildSettings());, +        final AzureStorageService azureStorageService = storageServiceWithSettingsValidation(timeoutSettings);, +        final AzureStorageService mock = storageServiceWithSettingsValidation(settings);, +        final AzureStorageService mock = storageServiceWithSettingsValidation(settings);, +        final AzureStorageService mock = storageServiceWithSettingsValidation(settings);, +        final AzureStorageService mock = storageServiceWithSettingsValidation(settings);, +        final SettingsException e = expectThrows(SettingsException.class, () -> storageServiceWithSettingsValidation(settings));, +        final SettingsException e = expectThrows(SettingsException.class, () -> storageServiceWithSettingsValidation(settings));, +        final SettingsException e = expectThrows(SettingsException.class, () -> storageServiceWithSettingsValidation(settings));, +        final SettingsException e = expectThrows(SettingsException.class, () -> storageServiceWithSettingsValidation(settings));]