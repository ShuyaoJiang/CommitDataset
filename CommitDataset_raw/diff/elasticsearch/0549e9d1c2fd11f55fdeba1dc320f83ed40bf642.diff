[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.metrics.MeanMetric;, +    private final MeanMetric totalMerges = new MeanMetric();, +    private final CounterMetric currentMerges = new CounterMetric();, +        return totalMerges.count();, +        return totalMerges.sum();, +        return currentMerges.count();, +        currentMerges.inc();, +            currentMerges.dec();, +            totalMerges.inc(took);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.metrics.MeanMetric;, +    private final MeanMetric totalMerges = new MeanMetric();, +    private final CounterMetric currentMerges = new CounterMetric();, +        return totalMerges.count();, +        return totalMerges.sum();, +        return currentMerges.count();, +        currentMerges.inc();, +            currentMerges.dec();, +            totalMerges.inc(took);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingSerialMergeScheduler.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.metrics.MeanMetric;, +    private final MeanMetric totalMerges = new MeanMetric();, +    private final CounterMetric currentMerges = new CounterMetric();, +        return totalMerges.count();, +        return totalMerges.sum();, +        return currentMerges.count();, +            currentMerges.inc();, +                currentMerges.dec();, +                totalMerges.inc(took);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.metrics.MeanMetric;, +    private final MeanMetric totalMerges = new MeanMetric();, +    private final CounterMetric currentMerges = new CounterMetric();, +        return totalMerges.count();, +        return totalMerges.sum();, +        return currentMerges.count();, +        currentMerges.inc();, +            currentMerges.dec();, +            totalMerges.inc(took);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingSerialMergeScheduler.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.metrics.MeanMetric;, +    private final MeanMetric totalMerges = new MeanMetric();, +    private final CounterMetric currentMerges = new CounterMetric();, +        return totalMerges.count();, +        return totalMerges.sum();, +        return currentMerges.count();, +            currentMerges.inc();, +                currentMerges.dec();, +                totalMerges.inc(took);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/metrics/CounterMetric.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.metrics;, +, +import org.elasticsearch.common.util.concurrent.jsr166e.LongAdder;, +, +/**, + */, +public class CounterMetric implements Metric {, +, +    private final LongAdder counter = new LongAdder();, +, +    public void inc() {, +        counter.increment();, +    }, +, +    public void inc(long n) {, +        counter.add(n);, +    }, +, +    public void dec() {, +        counter.decrement();, +    }, +, +    public void dec(long n) {, +        counter.add(-n);, +    }]