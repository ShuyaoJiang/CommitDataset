[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +, +[float], +=== Highlighting, +, +The postings highlighter doesn't support the `require_field_match` option, +anymore, it will only highlight fields that were queried., +, +The `match` query with type set to `match_phrase_prefix` is not supported by the, +postings highlighter. No highlighted snippets will be returned., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +, +[float], +=== Highlighting, +, +The postings highlighter doesn't support the `require_field_match` option, +anymore, it will only highlight fields that were queried., +, +The `match` query with type set to `match_phrase_prefix` is not supported by the, +postings highlighter. No highlighted snippets will be returned., +++ b/docs/reference/search/request/highlighting.asciidoc, +The postings highlighter doesn't support highlighting some complex queries,, +like a `match` query with `type` set to `match_phrase_prefix`. No highlighted, +snippets will be returned in that case., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +, +[float], +=== Highlighting, +, +The postings highlighter doesn't support the `require_field_match` option, +anymore, it will only highlight fields that were queried., +, +The `match` query with type set to `match_phrase_prefix` is not supported by the, +postings highlighter. No highlighted snippets will be returned., +++ b/docs/reference/search/request/highlighting.asciidoc, +The postings highlighter doesn't support highlighting some complex queries,, +like a `match` query with `type` set to `match_phrase_prefix`. No highlighted, +snippets will be returned in that case., +++ b/src/main/java/org/apache/lucene/search/postingshighlight/CustomPassageFormatter.java, +            } else if (sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR) {, +                sb.deleteCharAt(sb.length() - 1);, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +, +[float], +=== Highlighting, +, +The postings highlighter doesn't support the `require_field_match` option, +anymore, it will only highlight fields that were queried., +, +The `match` query with type set to `match_phrase_prefix` is not supported by the, +postings highlighter. No highlighted snippets will be returned., +++ b/docs/reference/search/request/highlighting.asciidoc, +The postings highlighter doesn't support highlighting some complex queries,, +like a `match` query with `type` set to `match_phrase_prefix`. No highlighted, +snippets will be returned in that case., +++ b/src/main/java/org/apache/lucene/search/postingshighlight/CustomPassageFormatter.java, +            } else if (sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR) {, +                sb.deleteCharAt(sb.length() - 1);, +++ b/src/main/java/org/apache/lucene/search/postingshighlight/CustomPostingsHighlighter.java, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.search.Query;, + * Subclass of the {@link PostingsHighlighter} that works for a single field in a single document., + * Uses a custom {@link PassageFormatter}. Accepts field content as a constructor argument, given that loading, + * is custom and can be done reading from _source field. Supports using different {@link BreakIterator} to break, + * the text into fragments. Considers every distinct field value as a discrete passage for highlighting (unless, + * the whole content needs to be highlighted). Supports both returning empty snippets and non highlighted snippets, + * when no highlighting can be performed., + * The use that we make of the postings highlighter is not optimal. It would be much better to highlight, + * multiple docs in a single call, as we actually lose its sequential IO.  That would require to, + * refactor the elasticsearch highlight api which currently works per hit., +public final class CustomPostingsHighlighter extends PostingsHighlighter {, +    private final Analyzer analyzer;, +    private final BreakIterator breakIterator;, +    private final boolean returnNonHighlightedSnippets;, +    private final String fieldValue;, +    /**, +     * Creates a new instance of {@link CustomPostingsHighlighter}, +     *, +     * @param analyzer the analyzer used for the field at index time, used for multi term queries internally, +     * @param passageFormatter our own {@link PassageFormatter} which generates snippets in forms of {@link Snippet} objects, +     * @param fieldValue the original field values as constructor argument, loaded from te _source field or the relevant stored field., +     * @param returnNonHighlightedSnippets whether non highlighted snippets should be returned rather than empty snippets when, +     *                                     no highlighting can be performed, +    public CustomPostingsHighlighter(Analyzer analyzer, CustomPassageFormatter passageFormatter, String fieldValue, boolean returnNonHighlightedSnippets) {, +        this(analyzer, passageFormatter, null, fieldValue, returnNonHighlightedSnippets);, +    }, +    /**, +     * Creates a new instance of {@link CustomPostingsHighlighter}, +     *, +     * @param analyzer the analyzer used for the field at index time, used for multi term queries internally, +     * @param passageFormatter our own {@link PassageFormatter} which generates snippets in forms of {@link Snippet} objects, +     * @param breakIterator an instance {@link BreakIterator} selected depending on the highlighting options, +     * @param fieldValue the original field values as constructor argument, loaded from te _source field or the relevant stored field., +     * @param returnNonHighlightedSnippets whether non highlighted snippets should be returned rather than empty snippets when, +     *                                     no highlighting can be performed, +     */, +    public CustomPostingsHighlighter(Analyzer analyzer, CustomPassageFormatter passageFormatter, BreakIterator breakIterator, String fieldValue, boolean returnNonHighlightedSnippets) {, +        this.analyzer = analyzer;, +        this.passageFormatter = passageFormatter;, +        this.breakIterator = breakIterator;]