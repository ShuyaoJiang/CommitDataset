[+++ b/docs/reference/cluster/nodes-info.asciidoc, +++ b/docs/reference/cluster/nodes-info.asciidoc, +++ b/docs/reference/modules/plugins.asciidoc, +++ b/docs/reference/cluster/nodes-info.asciidoc, +++ b/docs/reference/modules/plugins.asciidoc, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginInfo.java, +    public PluginInfo(String name, String description, boolean site, boolean jvm, String version) {, +        final StringBuffer sb = new StringBuffer("PluginInfo{");, +++ b/docs/reference/cluster/nodes-info.asciidoc, +++ b/docs/reference/modules/plugins.asciidoc, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginInfo.java, +    public PluginInfo(String name, String description, boolean site, boolean jvm, String version) {, +        final StringBuffer sb = new StringBuffer("PluginInfo{");, +++ /dev/null, +++ b/docs/reference/cluster/nodes-info.asciidoc, +++ b/docs/reference/modules/plugins.asciidoc, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginInfo.java, +    public PluginInfo(String name, String description, boolean site, boolean jvm, String version) {, +        final StringBuffer sb = new StringBuffer("PluginInfo{");, +++ /dev/null, +++ /dev/null, +++ b/docs/reference/cluster/nodes-info.asciidoc, +++ b/docs/reference/modules/plugins.asciidoc, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginInfo.java, +    public PluginInfo(String name, String description, boolean site, boolean jvm, String version) {, +        final StringBuffer sb = new StringBuffer("PluginInfo{");, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import java.io.IOException;, +            Plugin plugin = loadPlugin(pluginClass, settings);, +            PluginInfo pluginInfo = new PluginInfo(plugin.name(), plugin.description(), hasSite(plugin.name()), true, PluginInfo.VERSION_NOT_AVAILABLE);, +        loadPluginsIntoClassLoader();, +        tupleBuilder.addAll(loadPluginsFromClasspath(settings));, +    private void loadPluginsIntoClassLoader() {, +        File pluginsDirectory = environment.pluginsFile();, +        if (!isAccessibleDirectory(pluginsDirectory, logger)) {, +            return;, +        ClassLoader classLoader = settings.getClassLoader();, +        Class classLoaderClass = classLoader.getClass();, +        while (!classLoaderClass.equals(Object.class)) {, +                addURL = classLoaderClass.getDeclaredMethod("addURL", URL.class);, +                classLoaderClass = classLoaderClass.getSuperclass();, +        if (addURL == null) {, +            logger.debug("failed to find addURL method on classLoader [" + classLoader + "] to add methods");, +            return;, +        for (File plugin : pluginsDirectory.listFiles()) {, +            // We check that subdirs are directories and readable, +            if (!isAccessibleDirectory(plugin, logger)) {, +                continue;, +, +            logger.trace("--- adding plugin [{}]", plugin.getAbsolutePath());, +, +            try {, +                // add the root, +                addURL.invoke(classLoader, plugin.toURI().toURL());, +                // gather files to add, +                List<File> libFiles = Lists.newArrayList();, +                if (plugin.listFiles() != null) {, +                    libFiles.addAll(Arrays.asList(plugin.listFiles()));, +                File libLocation = new File(plugin, "lib");, +                if (libLocation.exists() && libLocation.isDirectory() && libLocation.listFiles() != null) {, +                    libFiles.addAll(Arrays.asList(libLocation.listFiles()));, +, +                // if there are jars in it, add it as well, +                for (File libFile : libFiles) {, +                    if (!(libFile.getName().endsWith(".jar") || libFile.getName().endsWith(".zip"))) {, +                        continue;, +                    }, +                    addURL.invoke(classLoader, libFile.toURI().toURL());, +                logger.warn("failed to add plugin [" + plugin + "]", e);, +    private ImmutableList<Tuple<PluginInfo,Plugin>> loadPluginsFromClasspath(Settings settings) {, +        ImmutableList.Builder<Tuple<PluginInfo, Plugin>> plugins = ImmutableList.builder();, +        // Trying JVM plugins: looking for es-plugin.properties files, +        try {, +            Enumeration<URL> pluginUrls = settings.getClassLoader().getResources(ES_PLUGIN_PROPERTIES);, +            while (pluginUrls.hasMoreElements()) {, +                URL pluginUrl = pluginUrls.nextElement();, +                    Plugin plugin = loadPlugin(pluginClassName, settings);, +                    PluginInfo pluginInfo = new PluginInfo(plugin.name(), plugin.description(), isSite, true, pluginVersion);, +, +        } catch (IOException e) {, +            logger.warn("failed to find jvm plugins from classpath", e);, +        }, +        return plugins.build();, +                    sitePlugins.add(new Tuple<PluginInfo, Plugin>(new PluginInfo(name, description, true, false, version), null));, +, +    private Plugin loadPlugin(String className, Settings settings) {, +        try {, +            Class<? extends Plugin> pluginClass = (Class<? extends Plugin>) settings.getClassLoader().loadClass(className);, +            Plugin plugin;, +            try {, +                plugin = pluginClass.getConstructor(Settings.class).newInstance(settings);, +            } catch (NoSuchMethodException e) {, +                try {, +                    plugin = pluginClass.getConstructor().newInstance();, +                } catch (NoSuchMethodException e1) {, +                    throw new ElasticsearchException("No constructor for [" + pluginClass + "]. A plugin class must " +, +                            "have either an empty default constructor or a single argument constructor accepting a " +, +                            "Settings instance");]