[+++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +    public SimulateProcessorResult(String processorTag, IngestDocument ingestDocument) {, +        this.processorTag = processorTag;, +        this.ingestDocument = new WriteableIngestDocument(ingestDocument);, +        this.failure = null;, +    }, +, +    public SimulateProcessorResult(String processorTag, Exception failure) {, +        this.processorTag = processorTag;, +        this.failure = failure;, +        this.ingestDocument = null;, +    }, +, +    /**, +     * Read from a stream., +     */, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(processorTag);, +        if (failure == null) {, +            out.writeBoolean(false);, +            ingestDocument.writeTo(out);, +        } else {, +            out.writeBoolean(true);, +            out.writeThrowable(failure);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +    public SimulateProcessorResult(String processorTag, IngestDocument ingestDocument) {, +        this.processorTag = processorTag;, +        this.ingestDocument = new WriteableIngestDocument(ingestDocument);, +        this.failure = null;, +    }, +, +    public SimulateProcessorResult(String processorTag, Exception failure) {, +        this.processorTag = processorTag;, +        this.failure = failure;, +        this.ingestDocument = null;, +    }, +, +    /**, +     * Read from a stream., +     */, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(processorTag);, +        if (failure == null) {, +            out.writeBoolean(false);, +            ingestDocument.writeTo(out);, +        } else {, +            out.writeBoolean(true);, +            out.writeThrowable(failure);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestStats.java, +    public IngestStats(Stats totalStats, Map<String, Stats> statsPerPipeline) {, +        this.totalStats = totalStats;, +        this.statsPerPipeline = statsPerPipeline;, +    }, +, +    /**, +     * Read from a stream., +     */, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        totalStats.writeTo(out);, +        out.writeVLong(statsPerPipeline.size());, +        for (Map.Entry<String, Stats> entry : statsPerPipeline.entrySet()) {, +            out.writeString(entry.getKey());, +            entry.getValue().writeTo(out);, +    }, +, +        public Stats(long ingestCount, long ingestTimeInMillis, long ingestCurrent, long ingestFailedCount) {, +            this.ingestCount = ingestCount;, +            this.ingestTimeInMillis = ingestTimeInMillis;, +            this.ingestCurrent = ingestCurrent;, +            this.ingestFailedCount = ingestFailedCount;, +        }, +, +        /**, +         * Read from a stream., +         */, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeVLong(ingestCount);, +            out.writeVLong(ingestTimeInMillis);, +            out.writeVLong(ingestCurrent);, +            out.writeVLong(ingestFailedCount);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +    public SimulateProcessorResult(String processorTag, IngestDocument ingestDocument) {, +        this.processorTag = processorTag;, +        this.ingestDocument = new WriteableIngestDocument(ingestDocument);, +        this.failure = null;, +    }, +, +    public SimulateProcessorResult(String processorTag, Exception failure) {, +        this.processorTag = processorTag;, +        this.failure = failure;, +        this.ingestDocument = null;, +    }, +, +    /**, +     * Read from a stream., +     */]