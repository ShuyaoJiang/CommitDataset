[+++ b/x-pack/plugin/sql/jdbc/build.gradle, +    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts'), +++ b/x-pack/plugin/sql/jdbc/build.gradle, +    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts'), +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/InfoResponse.java, +    final int revisionVersion;, +    InfoResponse(String clusterName, byte versionMajor, byte versionMinor, byte revisionVersion) {, +        this.revisionVersion = revisionVersion;, +    }, +, +    @Override, +    public String toString() {, +        return cluster + "[" + versionString() + "]";, +    }, +    , +    public String versionString() {, +        return majorVersion + "." + minorVersion + "." + revisionVersion;, +++ b/x-pack/plugin/sql/jdbc/build.gradle, +    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts'), +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/InfoResponse.java, +    final int revisionVersion;, +    InfoResponse(String clusterName, byte versionMajor, byte versionMinor, byte revisionVersion) {, +        this.revisionVersion = revisionVersion;, +    }, +, +    @Override, +    public String toString() {, +        return cluster + "[" + versionString() + "]";, +    }, +    , +    public String versionString() {, +        return majorVersion + "." + minorVersion + "." + revisionVersion;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcHttpClient.java, +    private final InfoResponse serverInfo;, +        this.serverInfo = fetchServerInfo();, +        checkServerVersion();, +        return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor, version.revision);, +    }, +    , +    private void checkServerVersion() throws SQLException {, +        if (serverInfo.majorVersion != Version.CURRENT.major, +                || serverInfo.minorVersion != Version.CURRENT.minor, +                || serverInfo.revisionVersion != Version.CURRENT.revision) {, +            throw new SQLException("This version of the JDBC driver is only compatible with Elasticsearch version " +, +                    Version.CURRENT.toString() + ", attempting to connect to a server version " + serverInfo.versionString());, +        }, +++ b/x-pack/plugin/sql/jdbc/build.gradle, +    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts'), +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/InfoResponse.java, +    final int revisionVersion;, +    InfoResponse(String clusterName, byte versionMajor, byte versionMinor, byte revisionVersion) {, +        this.revisionVersion = revisionVersion;, +    }, +, +    @Override, +    public String toString() {, +        return cluster + "[" + versionString() + "]";, +    }, +    , +    public String versionString() {, +        return majorVersion + "." + minorVersion + "." + revisionVersion;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcHttpClient.java, +    private final InfoResponse serverInfo;, +        this.serverInfo = fetchServerInfo();, +        checkServerVersion();, +        return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor, version.revision);, +    }, +    , +    private void checkServerVersion() throws SQLException {, +        if (serverInfo.majorVersion != Version.CURRENT.major, +                || serverInfo.minorVersion != Version.CURRENT.minor, +                || serverInfo.revisionVersion != Version.CURRENT.revision) {, +            throw new SQLException("This version of the JDBC driver is only compatible with Elasticsearch version " +, +                    Version.CURRENT.toString() + ", attempting to connect to a server version " + serverInfo.versionString());, +        }, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfigurationDataSourceTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.sql.jdbc;, +, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.test.http.MockResponse;, +, +import java.io.IOException;, +import java.net.URISyntaxException;, +import java.sql.SQLException;, +import java.util.Map;, +import java.util.Properties;, +import java.util.stream.Collectors;, +, +public class JdbcConfigurationDataSourceTests extends WebServerTestCase {, +    , +    public void testDataSourceConfigurationWithSSLInURL() throws SQLException, URISyntaxException, IOException {, +        webServer().enqueue(new MockResponse().setResponseCode(200).addHeader("Content-Type", "application/json").setBody(, +                XContentHelper.toXContent(createCurrentVersionMainResponse(), XContentType.JSON, false).utf8ToString()));]