[+++ b/core/src/main/java/org/elasticsearch/index/shard/SearchOperationListener.java, +import org.elasticsearch.ExceptionsHelper;, +     * Executed prior to using a {@link SearchContext} that has been retrieved, +     * from the active contexts. If the context is deemed invalid a runtime, +     * exception can be thrown, which will prevent the context from being used., +     * @param context the context retrieved from the active contexts, +     */, +    default void validateSearchContext(SearchContext context) {}, +, +    /**, +, +        @Override, +        public void validateSearchContext(SearchContext context) {, +            Exception exception = null;, +            for (SearchOperationListener listener : listeners) {, +                try {, +                    listener.validateSearchContext(context);, +                } catch (Exception e) {, +                    exception = ExceptionsHelper.useOrSuppress(exception, e);, +                }, +            }, +            ExceptionsHelper.reThrowIfNotNull(exception);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/shard/SearchOperationListener.java, +import org.elasticsearch.ExceptionsHelper;, +     * Executed prior to using a {@link SearchContext} that has been retrieved, +     * from the active contexts. If the context is deemed invalid a runtime, +     * exception can be thrown, which will prevent the context from being used., +     * @param context the context retrieved from the active contexts, +     */, +    default void validateSearchContext(SearchContext context) {}, +, +    /**, +, +        @Override, +        public void validateSearchContext(SearchContext context) {, +            Exception exception = null;, +            for (SearchOperationListener listener : listeners) {, +                try {, +                    listener.validateSearchContext(context);, +                } catch (Exception e) {, +                    exception = ExceptionsHelper.useOrSuppress(exception, e);, +                }, +            }, +            ExceptionsHelper.reThrowIfNotNull(exception);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +, +        SearchOperationListener operationListener = context.indexShard().getSearchOperationListener();, +        try {, +            operationListener.validateSearchContext(context);, +        } catch (Exception e) {, +            processFailure(context, e);, +            throw e;, +        }, +++ b/core/src/main/java/org/elasticsearch/index/shard/SearchOperationListener.java, +import org.elasticsearch.ExceptionsHelper;, +     * Executed prior to using a {@link SearchContext} that has been retrieved, +     * from the active contexts. If the context is deemed invalid a runtime, +     * exception can be thrown, which will prevent the context from being used., +     * @param context the context retrieved from the active contexts, +     */, +    default void validateSearchContext(SearchContext context) {}, +, +    /**, +, +        @Override, +        public void validateSearchContext(SearchContext context) {, +            Exception exception = null;, +            for (SearchOperationListener listener : listeners) {, +                try {, +                    listener.validateSearchContext(context);, +                } catch (Exception e) {, +                    exception = ExceptionsHelper.useOrSuppress(exception, e);, +                }, +            }, +            ExceptionsHelper.reThrowIfNotNull(exception);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +, +        SearchOperationListener operationListener = context.indexShard().getSearchOperationListener();, +        try {, +            operationListener.validateSearchContext(context);, +        } catch (Exception e) {, +            processFailure(context, e);, +            throw e;, +        }, +++ b/core/src/test/java/org/elasticsearch/index/shard/SearchOperationListenerTests.java, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.sameInstance;, +, +        AtomicInteger validateSearchContext = new AtomicInteger();, +, +            @Override, +            public void validateSearchContext(SearchContext context) {, +                assertNotNull(context);, +                validateSearchContext.incrementAndGet();, +            }, +        int throwingListeners = 0;, +            throwingListeners++;]