[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +import org.elasticsearch.common.geo.builders.MultiPointBuilder;, +                    new MultiPointBuilder(                         // <2>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +import org.elasticsearch.common.geo.builders.MultiPointBuilder;, +                    new MultiPointBuilder(                         // <2>, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoShapeType.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.common.geo;, +, +import com.vividsolutions.jts.geom.Coordinate;, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.geo.builders.CircleBuilder;, +import org.elasticsearch.common.geo.builders.CoordinatesBuilder;, +import org.elasticsearch.common.geo.builders.EnvelopeBuilder;, +import org.elasticsearch.common.geo.builders.GeometryCollectionBuilder;, +import org.elasticsearch.common.geo.builders.LineStringBuilder;, +import org.elasticsearch.common.geo.builders.MultiLineStringBuilder;, +import org.elasticsearch.common.geo.builders.MultiPointBuilder;, +import org.elasticsearch.common.geo.builders.MultiPolygonBuilder;, +import org.elasticsearch.common.geo.builders.PointBuilder;, +import org.elasticsearch.common.geo.builders.PolygonBuilder;, +import org.elasticsearch.common.geo.builders.ShapeBuilder;, +import org.elasticsearch.common.geo.builders.ShapeBuilder.Orientation;, +import org.elasticsearch.common.geo.parsers.CoordinateNode;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry.Entry;, +import org.elasticsearch.common.unit.DistanceUnit;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +/**, + * Enumeration that lists all {@link GeoShapeType}s that can be parsed and indexed, + */, +public enum GeoShapeType {, +    POINT("point") {, +        @Override, +        public ShapeBuilder getBuilder(CoordinateNode coordinates, DistanceUnit.Distance radius,, +                                       Orientation orientation, boolean coerce) {, +            return new PointBuilder().coordinate(validate(coordinates, coerce).coordinate);, +        }, +, +        @Override, +        CoordinateNode validate(CoordinateNode coordinates, boolean coerce) {, +            if (coordinates.isEmpty()) {, +                throw new ElasticsearchParseException(, +                    "invalid number of points (0) provided when expecting a single coordinate ([lat, lng])");, +            } else if (coordinates.children != null) {, +                throw new ElasticsearchParseException("multipoint data provided when single point data expected.");, +            }, +            return coordinates;, +        }, +    },, +    MULTIPOINT("multipoint") {, +        @Override, +        public ShapeBuilder getBuilder(CoordinateNode coordinates, DistanceUnit.Distance radius,, +                                       Orientation orientation, boolean coerce) {, +            validate(coordinates, coerce);, +            CoordinatesBuilder coordinatesBuilder = new CoordinatesBuilder();, +            for (CoordinateNode node : coordinates.children) {, +                coordinatesBuilder.coordinate(node.coordinate);, +            }, +            return new MultiPointBuilder(coordinatesBuilder.build());, +        }, +, +        @Override, +        CoordinateNode validate(CoordinateNode coordinates, boolean coerce) {, +            if (coordinates.children == null || coordinates.children.isEmpty()) {, +                if (coordinates.coordinate != null) {, +                    throw new ElasticsearchParseException("single coordinate found when expecting an array of " +, +                        "coordinates. change type to point or change data to an array of >0 coordinates");, +                }, +                throw new ElasticsearchParseException("no data provided for multipoint object when expecting " +, +                    ">0 points (e.g., [[lat, lng]] or [[lat, lng], ...])");, +            } else {, +                for (CoordinateNode point : coordinates.children) {, +                    POINT.validate(point, coerce);, +                }, +            }, +            return coordinates;]