[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                "dynamic setter [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "] not found");, +    // Conversion methods for def to primitive types., +    public static boolean defToboolean(final Object value) {, +    public static byte defTobyteImplicit(final Object value) {, +    public static short defToshortImplicit(final Object value) {, +    public static char defTocharImplicit(final Object value) {, +    public static int defTointImplicit(final Object value) {, +    public static long defTolongImplicit(final Object value) {, +    public static float defTofloatImplicit(final Object value) {, +    public static double defTodoubleImplicit(final Object value) {, +    public static byte defTobyteExplicit(final Object value) {, +    public static short defToshortExplicit(final Object value) {, +    public static char defTocharExplicit(final Object value) {, +            return (char)value;, +    public static int defTointExplicit(final Object value) {, +    public static long defTolongExplicit(final Object value) {, +    public static float defTofloatExplicit(final Object value) {, +    public static double defTodoubleExplicit(final Object value) {, +    // Conversion methods for def to boxed types., +, +    public static Byte defToByteImplicit(final Object value) {, +        if (value == null) {, +            return null;, +        } else {, +            return (Byte)value;, +        }, +    }, +, +    public static Short defToShortImplicit(final Object value) {, +        if (value == null) {, +            return null;, +        } else if (value instanceof Byte) {, +            return (short)(byte)value;, +        } else {, +            return (Short)value;, +        }, +    }, +, +    public static Character defToCharacterImplicit(final Object value) {, +        if (value == null) {, +            return null;, +        } else {, +            return (Character)value;, +        }, +    }, +, +    public static Integer defToIntegerImplicit(final Object value) {, +        if (value == null) {, +            return null;, +        } else if (value instanceof Byte) {, +            return (int)(byte)value;, +        } else if (value instanceof Short) {, +            return (int)(short)value;, +        } else if (value instanceof Character) {, +            return (int)(char)value;, +        } else {, +            return (Integer)value;, +        }, +    }, +, +    public static Long defToLongImplicit(final Object value) {, +        if (value == null) {, +            return null;, +        } else if (value instanceof Byte) {, +            return (long)(byte)value;, +        } else if (value instanceof Short) {, +            return (long)(short)value;, +        } else if (value instanceof Character) {, +            return (long)(char)value;, +        } else if (value instanceof Integer) {, +            return (long)(int)value;, +        } else {, +            return (Long)value;, +        }, +    }, +, +    public static Float defToFloatImplicit(final Object value) {, +        if (value == null) {, +            return null;, +        } else if (value instanceof Byte) {, +            return (float)(byte)value;, +        } else if (value instanceof Short) {, +            return (float)(short)value;, +        } else if (value instanceof Character) {, +            return (float)(char)value;, +        } else if (value instanceof Integer) {, +            return (float)(int)value;, +        } else if (value instanceof Long) {, +            return (float)(long)value;, +        } else {, +            return (Float)value;, +        }, +    }, +, +    public static Double defToDoubleImplicit(final Object value) {, +        if (value == null) {, +            return null;, +        } else if (value instanceof Byte) {, +            return (double)(byte)value;]