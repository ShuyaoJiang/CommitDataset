[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +            preProcessFixture.onlyIf(spec -> buildFixture.getEnabled());, +            postProcessFixture.onlyIf(spec -> buildFixture.getEnabled());, +            extension.fixtures.add(project);, +        extension.fixtures, +            .matching(fixtureProject -> fixtureProject.equals(project) == false), +            .all(fixtureProject ->  project.evaluationDependsOn(fixtureProject.getPath()));, +, +        conditionTaskByType(tasks, extension, getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"));, +        conditionTaskByType(tasks, extension, getTaskClass("org.elasticsearch.gradle.test.RestIntegTestTask"));, +        conditionTaskByType(tasks, extension, TestingConventionsTasks.class);, +        conditionTaskByType(tasks, extension, ComposeUp.class);, +, +, +    private void conditionTaskByType(TaskContainer tasks, TestFixtureExtension extension, Class<? extends DefaultTask> taskClass) {, +        tasks.withType(, +            taskClass,, +            task -> task.onlyIf(spec ->, +                extension.fixtures.stream(), +                    .anyMatch(fixtureProject -> fixtureProject.getTasks().getByName("buildFixture").getEnabled() == false) == false, +            ), +        );, +    }, +, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +            preProcessFixture.onlyIf(spec -> buildFixture.getEnabled());, +            postProcessFixture.onlyIf(spec -> buildFixture.getEnabled());, +            extension.fixtures.add(project);, +        extension.fixtures, +            .matching(fixtureProject -> fixtureProject.equals(project) == false), +            .all(fixtureProject ->  project.evaluationDependsOn(fixtureProject.getPath()));, +, +        conditionTaskByType(tasks, extension, getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"));, +        conditionTaskByType(tasks, extension, getTaskClass("org.elasticsearch.gradle.test.RestIntegTestTask"));, +        conditionTaskByType(tasks, extension, TestingConventionsTasks.class);, +        conditionTaskByType(tasks, extension, ComposeUp.class);, +, +, +    private void conditionTaskByType(TaskContainer tasks, TestFixtureExtension extension, Class<? extends DefaultTask> taskClass) {, +        tasks.withType(, +            taskClass,, +            task -> task.onlyIf(spec ->, +                extension.fixtures.stream(), +                    .anyMatch(fixtureProject -> fixtureProject.getTasks().getByName("buildFixture").getEnabled() == false) == false, +            ), +        );, +    }, +, +++ b/test/fixtures/krb5kdc-fixture/build.gradle, +// https://github.com/elastic/elasticsearch/issues/40624, +buildFixture.enabled = false, +]