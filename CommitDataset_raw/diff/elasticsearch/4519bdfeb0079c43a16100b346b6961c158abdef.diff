[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 30000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom(), +                .setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 30000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom(), +                .setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +import org.apache.lucene.index.TermsEnum;, +import org.elasticsearch.Version;, +    private boolean hasMinMax;, +    /**, +     * Builds a FieldStats where min and max value are not available for the field., +     * @param type The native type of this FieldStats, +     * @param maxDoc Max number of docs, +     * @param docCount  the number of documents that have at least one term for this field,, +     *                  or -1 if this information isn't available for this field., +     * @param sumDocFreq  the sum of {@link TermsEnum#docFreq()} for all terms in this field,, +     *                    or -1 if this information isn't available for this field., +     * @param sumTotalTermFreq the sum of {@link TermsEnum#totalTermFreq} for all terms in this field,, +     *                         or -1 if this measure isn't available for this field., +     * @param isSearchable true if this field is searchable, +     * @param isAggregatable true if this field is aggregatable, +     */, +    FieldStats(byte type, long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq,, +               boolean isSearchable, boolean isAggregatable) {, +        this.type = type;, +        this.maxDoc = maxDoc;, +        this.docCount = docCount;, +        this.sumDocFreq = sumDocFreq;, +        this.sumTotalTermFreq = sumTotalTermFreq;, +        this.isSearchable = isSearchable;, +        this.isAggregatable = isAggregatable;, +        this.hasMinMax = false;, +    }, +, +    /**, +     * Builds a FieldStats with min and max value for the field., +     * @param type The native type of this FieldStats, +     * @param maxDoc Max number of docs, +     * @param docCount  the number of documents that have at least one term for this field,, +     *                  or -1 if this information isn't available for this field., +     * @param sumDocFreq  the sum of {@link TermsEnum#docFreq()} for all terms in this field,, +     *                    or -1 if this information isn't available for this field., +     * @param sumTotalTermFreq the sum of {@link TermsEnum#totalTermFreq} for all terms in this field,, +     *                         or -1 if this measure isn't available for this field., +     * @param isSearchable true if this field is searchable, +     * @param isAggregatable true if this field is aggregatable, +     * @param minValue the minimum value indexed in this field, +     * @param maxValue the maximum value indexed in this field, +     */, +        this.hasMinMax = true;, +     * @return true if min/max informations are available for this field, +     */, +    public boolean hasMinMax() {, +        return hasMinMax;, +    }, +, +    /**, +        if (hasMinMax && other.hasMinMax) {, +        } else {, +            hasMinMax = false;, +            minValue = null;, +            maxValue = null;, +        }, +        if (hasMinMax) {, +        }, +        if (out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)) {, +            out.writeBoolean(hasMinMax);, +            if (hasMinMax) {, +        } else {, +            writeMinMax(out);, +        }, +    }, +        if (hasMinMax == false) {, +            return false;, +        }, +        if (hasMinMax != that.hasMinMax) return false;, +        if (hasMinMax == false) {, +            return true;, +        }, +            hasMinMax, minValue, maxValue);, +                    boolean isSearchable, boolean isAggregatable) {, +            super((byte) 0, maxDoc, docCount, sumDocFreq, sumTotalTermFreq,, +                isSearchable, isAggregatable);, +        }, +, +        public Long(long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq,, +                      boolean isSearchable, boolean isAggregatable) {, +            super((byte) 1, maxDoc, docCount, sumDocFreq, sumTotalTermFreq, isSearchable, isAggregatable);, +        }, +, +        public Double(long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq,, +                    boolean isSearchable, boolean isAggregatable) {, +            super((byte) 2, maxDoc, docCount, sumDocFreq, sumTotalTermFreq, isSearchable, isAggregatable);, +            this.formatter = null;, +        }, +, +        public Date(long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq,]