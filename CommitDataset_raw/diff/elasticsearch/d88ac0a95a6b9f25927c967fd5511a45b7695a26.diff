[+++ b/src/test/java/org/elasticsearch/search/suggest/SuggestSearchTests.java, +++ b/src/test/java/org/elasticsearch/search/suggest/SuggestSearchTests.java, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import com.google.common.collect.Lists;, +     * Threshold at which indexing switches from frequently async to frequently bulk., +     */, +    private static final int FREQUENT_BULK_THRESHOLD = 300;, +    /**, +     * Maximum number of async operations that indexRandom will kick off at one time., +     */, +    private static final int MAX_IN_FLIGHT_ASYNC_INDEXES = 150;, +    /**, +     * Maximum number of documents in a single bulk index request., +     */, +    private static final int MAX_BULK_INDEX_REQUEST_SIZE = 1000;, +, +    /**, +        List<CountDownLatch> inFlightAsyncOperations = new ArrayList<CountDownLatch>();, +        // If you are indexing just a few documents then frequently do it one at a time.  If many then frequently in bulk., +        if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : rarely()) {, +                    indexRequestBuilder.execute(new PayloadLatchedActionListener<IndexResponse, IndexRequestBuilder>(indexRequestBuilder, newLatch(inFlightAsyncOperations), errors));, +                    postIndexAsyncActions(indices, inFlightAsyncOperations);, +            } else {, +                    postIndexAsyncActions(indices, inFlightAsyncOperations);, +            for (List<IndexRequestBuilder> segmented : Lists.partition(builders, between(MAX_BULK_INDEX_REQUEST_SIZE / 2, MAX_BULK_INDEX_REQUEST_SIZE))) {, +                for (IndexRequestBuilder indexRequestBuilder : segmented) {, +        }, +        for (CountDownLatch operation: inFlightAsyncOperations) {, +            operation.await();, +    /**, +     * Maybe refresh, optimize, or flush then always make sure there aren't too many in flight async operations. , +     */, +    private void postIndexAsyncActions(String[] indices, List<CountDownLatch> inFlightAsyncOperations) throws InterruptedException {, +        if (rarely()) {, +            if (rarely()) {, +                client().admin().indices().prepareRefresh(indices).setIndicesOptions(IndicesOptions.lenient()).execute(, +                        new LatchedActionListener<RefreshResponse>(newLatch(inFlightAsyncOperations)));, +            } else if (rarely()) {, +                client().admin().indices().prepareFlush(indices).setIndicesOptions(IndicesOptions.lenient()).execute(, +                        new LatchedActionListener<FlushResponse>(newLatch(inFlightAsyncOperations)));, +            } else if (rarely()) {, +                client().admin().indices().prepareOptimize(indices).setIndicesOptions(IndicesOptions.lenient()).setMaxNumSegments(between(1, 10)).setFlush(randomBoolean()).execute(, +                        new LatchedActionListener<OptimizeResponse>(newLatch(inFlightAsyncOperations)));, +            }, +        }, +        while (inFlightAsyncOperations.size() > MAX_IN_FLIGHT_ASYNC_INDEXES) {, +            int waitFor = between(0, inFlightAsyncOperations.size() - 1);, +            inFlightAsyncOperations.remove(waitFor).await();, +        }, +    }, +]