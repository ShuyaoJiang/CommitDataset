[+++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction;, +import org.elasticsearch.action.support.AutoCreateIndex;, +import org.elasticsearch.indices.IndexAlreadyExistsException;, +    private final AutoCreateIndex autoCreateIndex;, +, +    private final TransportCreateIndexAction createIndexAction;, +, +                                 IndicesService indicesService, TransportIndexAction indexAction, TransportDeleteAction deleteAction, ScriptService scriptService, TransportCreateIndexAction createIndexAction) {, +        this.createIndexAction = createIndexAction;, +        this.autoCreateIndex = new AutoCreateIndex(settings);, +    protected void doExecute(final UpdateRequest request, final ActionListener<UpdateResponse> listener) {, +        // if we don't have a master, we don't have metadata, that's fine, let it find a master using create index API, +        if (autoCreateIndex.shouldAutoCreate(request.index(), clusterService.state())) {, +            request.beforeLocalFork(); // we fork on another thread..., +            createIndexAction.execute(new CreateIndexRequest(request.index()).cause("auto(update api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                @Override, +                public void onResponse(CreateIndexResponse result) {, +                    innerExecute(request, listener);, +                }, +, +                @Override, +                public void onFailure(Throwable e) {, +                    if (ExceptionsHelper.unwrapCause(e) instanceof IndexAlreadyExistsException) {, +                        // we have the index, do it, +                        try {, +                            innerExecute(request, listener);, +                        } catch (Exception e1) {, +                            listener.onFailure(e1);, +                        }, +                    } else {, +                        listener.onFailure(e);, +                    }, +                }, +            });, +        } else {, +            innerExecute(request, listener);, +        }, +    }, +, +    private void innerExecute(final UpdateRequest request, final ActionListener<UpdateResponse> listener) {, +        super.doExecute(request, listener);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction;, +import org.elasticsearch.action.support.AutoCreateIndex;, +import org.elasticsearch.indices.IndexAlreadyExistsException;, +    private final AutoCreateIndex autoCreateIndex;, +, +    private final TransportCreateIndexAction createIndexAction;, +, +                                 IndicesService indicesService, TransportIndexAction indexAction, TransportDeleteAction deleteAction, ScriptService scriptService, TransportCreateIndexAction createIndexAction) {, +        this.createIndexAction = createIndexAction;, +        this.autoCreateIndex = new AutoCreateIndex(settings);, +    protected void doExecute(final UpdateRequest request, final ActionListener<UpdateResponse> listener) {, +        // if we don't have a master, we don't have metadata, that's fine, let it find a master using create index API, +        if (autoCreateIndex.shouldAutoCreate(request.index(), clusterService.state())) {, +            request.beforeLocalFork(); // we fork on another thread..., +            createIndexAction.execute(new CreateIndexRequest(request.index()).cause("auto(update api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                @Override, +                public void onResponse(CreateIndexResponse result) {, +                    innerExecute(request, listener);, +                }, +, +                @Override, +                public void onFailure(Throwable e) {, +                    if (ExceptionsHelper.unwrapCause(e) instanceof IndexAlreadyExistsException) {, +                        // we have the index, do it, +                        try {, +                            innerExecute(request, listener);, +                        } catch (Exception e1) {, +                            listener.onFailure(e1);, +                        }, +                    } else {, +                        listener.onFailure(e);, +                    }, +                }, +            });, +        } else {, +            innerExecute(request, listener);, +        }, +    }, +, +    private void innerExecute(final UpdateRequest request, final ActionListener<UpdateResponse> listener) {, +        super.doExecute(request, listener);, +    }, +, +    @Override, +++ b/src/test/java/org/elasticsearch/test/integration/update/UpdateTests.java, +    public void testIndexAutoCreation() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore]