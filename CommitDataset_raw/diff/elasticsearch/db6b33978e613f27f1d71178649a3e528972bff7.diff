[+++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +    /**, +     * Creates a new Setting instance with a String value, +     *, +     * @param key          the settings key for this setting., +     * @param defaultValue the default String value., +     * @param properties   properties for this setting like scope, filtering..., +     * @return the Setting Object, +     */, +    public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {, +        return new Setting<>(key, s -> defaultValue, Function.identity(), properties);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +    /**, +     * Creates a new Setting instance with a String value, +     *, +     * @param key          the settings key for this setting., +     * @param defaultValue the default String value., +     * @param properties   properties for this setting like scope, filtering..., +     * @return the Setting Object, +     */, +    public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {, +        return new Setting<>(key, s -> defaultValue, Function.identity(), properties);, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java, +import org.elasticsearch.xpack.core.security.authc.support.Hasher;, +import java.util.Locale;, +import java.util.function.Function;, +, +    private XPackSettings() {, +        throw new IllegalStateException("Utility class should not be instantiated");, +    }, +, +    /*, +     * Do not allow insecure hashing algorithms to be used for password hashing, +     */, +    public static final Setting<String> PASSWORD_HASHING_ALGORITHM = new Setting<>(, +        "xpack.security.authc.password_hashing.algorithm", "bcrypt", Function.identity(), (v, s) -> {, +        if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {, +            throw new IllegalArgumentException("Invalid algorithm: " + v + ". Only pbkdf2 or bcrypt family algorithms can be used for " +, +                "password hashing.");, +        }, +    }, Setting.Property.NodeScope);, +, +        settings.add(PASSWORD_HASHING_ALGORITHM);, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +    /**, +     * Creates a new Setting instance with a String value, +     *, +     * @param key          the settings key for this setting., +     * @param defaultValue the default String value., +     * @param properties   properties for this setting like scope, filtering..., +     * @return the Setting Object, +     */, +    public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {, +        return new Setting<>(key, s -> defaultValue, Function.identity(), properties);, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java, +import org.elasticsearch.xpack.core.security.authc.support.Hasher;, +import java.util.Locale;, +import java.util.function.Function;, +, +    private XPackSettings() {, +        throw new IllegalStateException("Utility class should not be instantiated");, +    }, +, +    /*, +     * Do not allow insecure hashing algorithms to be used for password hashing, +     */, +    public static final Setting<String> PASSWORD_HASHING_ALGORITHM = new Setting<>(, +        "xpack.security.authc.password_hashing.algorithm", "bcrypt", Function.identity(), (v, s) -> {, +        if (Hasher.getAvailableAlgoStoredHash().contains(v.toLowerCase(Locale.ROOT)) == false) {, +            throw new IllegalArgumentException("Invalid algorithm: " + v + ". Only pbkdf2 or bcrypt family algorithms can be used for " +, +                "password hashing.");, +        }, +    }, Setting.Property.NodeScope);, +, +        settings.add(PASSWORD_HASHING_ALGORITHM);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/user/ChangePasswordRequestBuilder.java, +    public static char[] validateAndHashPassword(SecureString password, Hasher hasher) {, +        return hasher.hash(password);, +    public ChangePasswordRequestBuilder password(char[] password, Hasher hasher) {, +            char[] hash = validateAndHashPassword(secureString, hasher);, +    public ChangePasswordRequestBuilder source(BytesReference source, XContentType xContentType, Hasher hasher) throws, +        IOException {, +                        password(passwordChars, hasher);, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +    /**, +     * Creates a new Setting instance with a String value, +     *, +     * @param key          the settings key for this setting., +     * @param defaultValue the default String value., +     * @param properties   properties for this setting like scope, filtering..., +     * @return the Setting Object, +     */, +    public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {, +        return new Setting<>(key, s -> defaultValue, Function.identity(), properties);]