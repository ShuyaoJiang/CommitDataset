[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobProvider.java, +    public void influencers(String jobId, InfluencersQuery query, Consumer<QueryPage<Influencer>> handler,, +                            Consumer<Exception> errorHandler) {, +                () -> (query.getSortField() != null) ?, +                        " with sort " + (query.isSortDescending() ? "descending" : "ascending") + " on field " + query.getSortField() : "",, +                query::getFrom, query::getSize);, +        QueryBuilder qb = new BoolQueryBuilder(), +                .filter(fb), +        FieldSortBuilder sb = query.getSortField() == null ? SortBuilders.fieldSort(ElasticsearchMappings.ES_DOC), +                : new FieldSortBuilder(query.getSortField()).order(query.isSortDescending() ? SortOrder.DESC : SortOrder.ASC);, +        searchRequest.source(new SearchSourceBuilder().query(qb).from(query.getFrom()).size(query.getSize()).sort(sb));, +        client.search(searchRequest, ActionListener.wrap(response -> {, +            QueryPage<Influencer> result = new QueryPage<>(influencers, response.getHits().getTotalHits(), Influencer.RESULTS_FIELD);, +            handler.accept(result);, +        }, errorHandler));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobProvider.java, +    public void influencers(String jobId, InfluencersQuery query, Consumer<QueryPage<Influencer>> handler,, +                            Consumer<Exception> errorHandler) {, +                () -> (query.getSortField() != null) ?, +                        " with sort " + (query.isSortDescending() ? "descending" : "ascending") + " on field " + query.getSortField() : "",, +                query::getFrom, query::getSize);, +        QueryBuilder qb = new BoolQueryBuilder(), +                .filter(fb), +        FieldSortBuilder sb = query.getSortField() == null ? SortBuilders.fieldSort(ElasticsearchMappings.ES_DOC), +                : new FieldSortBuilder(query.getSortField()).order(query.isSortDescending() ? SortOrder.DESC : SortOrder.ASC);, +        searchRequest.source(new SearchSourceBuilder().query(qb).from(query.getFrom()).size(query.getSize()).sort(sb));, +        client.search(searchRequest, ActionListener.wrap(response -> {, +            QueryPage<Influencer> result = new QueryPage<>(influencers, response.getHits().getTotalHits(), Influencer.RESULTS_FIELD);, +            handler.accept(result);, +        }, errorHandler));, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/prelert/integration/AutodetectResultProcessorIT.java, +        QueryPage<Influencer> persistedInfluencers = getInfluencers();, +        QueryPage<Influencer> persistedInfluencers = getInfluencers();, +, +    private QueryPage<Influencer> getInfluencers() throws Exception {, +        AtomicReference<Exception> errorHolder = new AtomicReference<>();, +        AtomicReference<QueryPage<Influencer>> resultHolder = new AtomicReference<>();, +        CountDownLatch latch = new CountDownLatch(1);, +        jobProvider.influencers(JOB_ID, new InfluencersQueryBuilder().build(), page -> {, +            resultHolder.set(page);, +            latch.countDown();, +        }, e -> {, +            errorHolder.set(e);, +            latch.countDown();, +        });, +        latch.await();, +        if (errorHolder.get() != null) {, +            throw errorHolder.get();, +        }, +        return resultHolder.get();, +    }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobProvider.java, +    public void influencers(String jobId, InfluencersQuery query, Consumer<QueryPage<Influencer>> handler,, +                            Consumer<Exception> errorHandler) {, +                () -> (query.getSortField() != null) ?, +                        " with sort " + (query.isSortDescending() ? "descending" : "ascending") + " on field " + query.getSortField() : "",, +                query::getFrom, query::getSize);, +        QueryBuilder qb = new BoolQueryBuilder(), +                .filter(fb), +        FieldSortBuilder sb = query.getSortField() == null ? SortBuilders.fieldSort(ElasticsearchMappings.ES_DOC), +                : new FieldSortBuilder(query.getSortField()).order(query.isSortDescending() ? SortOrder.DESC : SortOrder.ASC);, +        searchRequest.source(new SearchSourceBuilder().query(qb).from(query.getFrom()).size(query.getSize()).sort(sb));, +        client.search(searchRequest, ActionListener.wrap(response -> {, +            QueryPage<Influencer> result = new QueryPage<>(influencers, response.getHits().getTotalHits(), Influencer.RESULTS_FIELD);, +            handler.accept(result);, +        }, errorHandler));, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/prelert/integration/AutodetectResultProcessorIT.java, +        QueryPage<Influencer> persistedInfluencers = getInfluencers();, +        QueryPage<Influencer> persistedInfluencers = getInfluencers();, +, +    private QueryPage<Influencer> getInfluencers() throws Exception {, +        AtomicReference<Exception> errorHolder = new AtomicReference<>();, +        AtomicReference<QueryPage<Influencer>> resultHolder = new AtomicReference<>();, +        CountDownLatch latch = new CountDownLatch(1);, +        jobProvider.influencers(JOB_ID, new InfluencersQueryBuilder().build(), page -> {, +            resultHolder.set(page);, +            latch.countDown();, +        }, e -> {, +            errorHolder.set(e);, +            latch.countDown();, +        });, +        latch.await();, +        if (errorHolder.get() != null) {, +            throw errorHolder.get();, +        }, +        return resultHolder.get();, +    }, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/prelert/job/persistence/JobProviderTests.java, +import org.elasticsearch.action.ActionFuture;, +        Client client = getMockedClient(getResponse);, +        JobProvider provider = createProvider(client);, +        Client client = getMockedClient(getResponse);]