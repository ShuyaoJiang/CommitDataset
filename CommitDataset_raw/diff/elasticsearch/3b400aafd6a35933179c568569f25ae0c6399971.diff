[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            searchContext.close();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            searchContext.close();, +++ b/core/src/main/java/org/elasticsearch/action/exists/TransportExistsAction.java, +                boolean exists = Lucene.exists(context, context.query(), Lucene.createExistsCollector());, +                return new ShardExistsResponse(request.shardId(), exists);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            searchContext.close();, +++ b/core/src/main/java/org/elasticsearch/action/exists/TransportExistsAction.java, +                boolean exists = Lucene.exists(context, context.query(), Lucene.createExistsCollector());, +                return new ShardExistsResponse(request.shardId(), exists);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import org.apache.lucene.store.*;, +import org.elasticsearch.search.internal.SearchContext;, +import java.util.*;, +     * Performs an exists (count > 0) query on the searcher from the <code>searchContext</code> for <code>query</code>, +     * using the given <code>collector</code>, +     *, +     * The <code>collector</code> can be instantiated using <code>Lucene.createExistsCollector()</code>, +     */, +    public static boolean exists(SearchContext searchContext, Query query, EarlyTerminatingCollector collector) throws IOException {, +        collector.reset();, +        try {, +            searchContext.searcher().search(query, collector);, +        } catch (EarlyTerminationException e) {, +            // ignore, just early termination..., +        } finally {, +            searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION);, +        }, +        return collector.exists();, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            searchContext.close();, +++ b/core/src/main/java/org/elasticsearch/action/exists/TransportExistsAction.java, +                boolean exists = Lucene.exists(context, context.query(), Lucene.createExistsCollector());, +                return new ShardExistsResponse(request.shardId(), exists);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import org.apache.lucene.store.*;, +import org.elasticsearch.search.internal.SearchContext;, +import java.util.*;, +     * Performs an exists (count > 0) query on the searcher from the <code>searchContext</code> for <code>query</code>, +     * using the given <code>collector</code>, +     *, +     * The <code>collector</code> can be instantiated using <code>Lucene.createExistsCollector()</code>, +     */, +    public static boolean exists(SearchContext searchContext, Query query, EarlyTerminatingCollector collector) throws IOException {, +        collector.reset();, +        try {, +            searchContext.searcher().search(query, collector);, +        } catch (EarlyTerminationException e) {, +            // ignore, just early termination..., +        } finally {, +            searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION);, +        }, +        return collector.exists();, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +            IndexSearcher indexSearcher = searchContext.searcher();, +            IndexParentChildFieldData indexParentChildFieldData = parentChildIndexFieldData.loadGlobal(indexSearcher.getIndexReader());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            searchContext.close();, +++ b/core/src/main/java/org/elasticsearch/action/exists/TransportExistsAction.java, +                boolean exists = Lucene.exists(context, context.query(), Lucene.createExistsCollector());, +                return new ShardExistsResponse(request.shardId(), exists);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import org.apache.lucene.store.*;, +import org.elasticsearch.search.internal.SearchContext;, +import java.util.*;, +     * Performs an exists (count > 0) query on the searcher from the <code>searchContext</code> for <code>query</code>, +     * using the given <code>collector</code>, +     *, +     * The <code>collector</code> can be instantiated using <code>Lucene.createExistsCollector()</code>, +     */, +    public static boolean exists(SearchContext searchContext, Query query, EarlyTerminatingCollector collector) throws IOException {, +        collector.reset();, +        try {, +            searchContext.searcher().search(query, collector);, +        } catch (EarlyTerminationException e) {, +            // ignore, just early termination..., +        } finally {, +            searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION);, +        }, +        return collector.exists();, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +            IndexSearcher indexSearcher = searchContext.searcher();, +            IndexParentChildFieldData indexParentChildFieldData = parentChildIndexFieldData.loadGlobal(indexSearcher.getIndexReader());]