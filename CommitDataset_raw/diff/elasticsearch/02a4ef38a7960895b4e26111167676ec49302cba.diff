[+++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +     *, +     * Note that this method will be executed using system context., +     *, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +     *, +     * Note that this method will be executed using system context., +     *, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +    @Override, +    public final void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {, +        // final, empty implementation here as this method should only be defined in combination, +        // with a batching executor as it will always be executed within the system context., +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +     *, +     * Note that this method will be executed using system context., +     *, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +    @Override, +    public final void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {, +        // final, empty implementation here as this method should only be defined in combination, +        // with a batching executor as it will always be executed within the system context., +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/service/MasterService.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import java.util.function.Supplier;, +    private SafeClusterStateTaskListener safe(ClusterStateTaskListener listener, Supplier<ThreadContext.StoredContext> contextSupplier) {, +            return new SafeAckedClusterStateTaskListener((AckedClusterStateTaskListener) listener, contextSupplier, logger);, +            return new SafeClusterStateTaskListener(listener, contextSupplier, logger);, +        protected final Supplier<ThreadContext.StoredContext> context;, +        SafeClusterStateTaskListener(ClusterStateTaskListener listener, Supplier<ThreadContext.StoredContext> context, Logger logger) {, +            this.context = context;, +            try (ThreadContext.StoredContext ignore = context.get()) {, +            try (ThreadContext.StoredContext ignore = context.get()) {, +            try (ThreadContext.StoredContext ignore = context.get()) {, +        SafeAckedClusterStateTaskListener(AckedClusterStateTaskListener listener, Supplier<ThreadContext.StoredContext> context,, +                                          Logger logger) {, +            super(listener, context, logger);, +            try (ThreadContext.StoredContext ignore = context.get()) {, +            try (ThreadContext.StoredContext ignore = context.get()) {, +        final ThreadContext threadContext = threadPool.getThreadContext();, +        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false);, +        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +            threadContext.markAsSystemContext();, +, +                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor)), +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +     *, +     * Note that this method will be executed using system context., +     *, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +    @Override, +    public final void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {, +        // final, empty implementation here as this method should only be defined in combination, +        // with a batching executor as it will always be executed within the system context., +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/service/MasterService.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import java.util.function.Supplier;, +    private SafeClusterStateTaskListener safe(ClusterStateTaskListener listener, Supplier<ThreadContext.StoredContext> contextSupplier) {, +            return new SafeAckedClusterStateTaskListener((AckedClusterStateTaskListener) listener, contextSupplier, logger);, +            return new SafeClusterStateTaskListener(listener, contextSupplier, logger);, +        protected final Supplier<ThreadContext.StoredContext> context;, +        SafeClusterStateTaskListener(ClusterStateTaskListener listener, Supplier<ThreadContext.StoredContext> context, Logger logger) {, +            this.context = context;, +            try (ThreadContext.StoredContext ignore = context.get()) {, +            try (ThreadContext.StoredContext ignore = context.get()) {, +            try (ThreadContext.StoredContext ignore = context.get()) {, +        SafeAckedClusterStateTaskListener(AckedClusterStateTaskListener listener, Supplier<ThreadContext.StoredContext> context,, +                                          Logger logger) {, +            super(listener, context, logger);, +            try (ThreadContext.StoredContext ignore = context.get()) {, +            try (ThreadContext.StoredContext ignore = context.get()) {, +        final ThreadContext threadContext = threadPool.getThreadContext();, +        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false);, +        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +            threadContext.markAsSystemContext();, +, +                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor)), +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterConnection.java, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +     *, +     * Note that this method will be executed using system context., +     *, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +    @Override, +    public final void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {, +        // final, empty implementation here as this method should only be defined in combination, +        // with a batching executor as it will always be executed within the system context., +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/service/MasterService.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import java.util.function.Supplier;, +    private SafeClusterStateTaskListener safe(ClusterStateTaskListener listener, Supplier<ThreadContext.StoredContext> contextSupplier) {, +            return new SafeAckedClusterStateTaskListener((AckedClusterStateTaskListener) listener, contextSupplier, logger);]