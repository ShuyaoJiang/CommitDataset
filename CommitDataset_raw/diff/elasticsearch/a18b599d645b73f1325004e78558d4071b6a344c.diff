[+++ b/qa/evil-tests/src/test/java/org/elasticsearch/monitor/os/EvilOsProbeTests.java, +import java.util.Collections;, +            final List<String> lines;, +            if (Files.exists(PathUtils.get("/etc/os-release"))) {, +                lines = Files.readAllLines(PathUtils.get("/etc/os-release"));, +            } else if (Files.exists(PathUtils.get("/usr/lib/os-release"))) {, +                lines = Files.readAllLines(PathUtils.get("/usr/lib/os-release"));, +            } else {, +                lines = Collections.singletonList(, +                        "PRETTY_NAME=\"" + Files.readAllLines(PathUtils.get("/etc/system-release")).get(0) + "\"");, +            }, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/monitor/os/EvilOsProbeTests.java, +import java.util.Collections;, +            final List<String> lines;, +            if (Files.exists(PathUtils.get("/etc/os-release"))) {, +                lines = Files.readAllLines(PathUtils.get("/etc/os-release"));, +            } else if (Files.exists(PathUtils.get("/usr/lib/os-release"))) {, +                lines = Files.readAllLines(PathUtils.get("/usr/lib/os-release"));, +            } else {, +                lines = Collections.singletonList(, +                        "PRETTY_NAME=\"" + Files.readAllLines(PathUtils.get("/etc/system-release")).get(0) + "\"");, +            }, +++ b/server/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import java.util.Collections;, +     * The lines from {@code /etc/os-release} or {@code /usr/lib/os-release} as a fallback, with an additional fallback to, +     * {@code /etc/system-release}. These files represent identification of the underlying operating system. The structure of the file is, +     * newlines of key-value pairs of shell-compatible variable assignments., +     * @return the lines from {@code /etc/os-release} or {@code /usr/lib/os-release} or {@code /etc/system-release}, +     * @throws IOException if an I/O exception occurs reading {@code /etc/os-release} or {@code /usr/lib/os-release} or, +     *                     {@code /etc/system-release}, +    @SuppressForbidden(reason = "access /etc/os-release or /usr/lib/os-release or /etc/system-release"), +        } else if (Files.exists(PathUtils.get("/usr/lib/os-release"))) {, +            lines = Files.readAllLines(PathUtils.get("/usr/lib/os-release"));, +            assert lines != null && lines.isEmpty() == false;, +            return lines;, +        } else if (Files.exists(PathUtils.get("/etc/system-release"))) {, +            // fallback for older Red Hat-like OS, +            lines = Files.readAllLines(PathUtils.get("/etc/system-release"));, +            assert lines != null && lines.size() == 1;, +            return Collections.singletonList("PRETTY_NAME=\"" + lines.get(0) + "\"");, +        } else {, +            return Collections.emptyList();, +        }, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/monitor/os/EvilOsProbeTests.java, +import java.util.Collections;, +            final List<String> lines;, +            if (Files.exists(PathUtils.get("/etc/os-release"))) {, +                lines = Files.readAllLines(PathUtils.get("/etc/os-release"));, +            } else if (Files.exists(PathUtils.get("/usr/lib/os-release"))) {, +                lines = Files.readAllLines(PathUtils.get("/usr/lib/os-release"));, +            } else {, +                lines = Collections.singletonList(, +                        "PRETTY_NAME=\"" + Files.readAllLines(PathUtils.get("/etc/system-release")).get(0) + "\"");, +            }, +++ b/server/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import java.util.Collections;, +     * The lines from {@code /etc/os-release} or {@code /usr/lib/os-release} as a fallback, with an additional fallback to, +     * {@code /etc/system-release}. These files represent identification of the underlying operating system. The structure of the file is, +     * newlines of key-value pairs of shell-compatible variable assignments., +     * @return the lines from {@code /etc/os-release} or {@code /usr/lib/os-release} or {@code /etc/system-release}, +     * @throws IOException if an I/O exception occurs reading {@code /etc/os-release} or {@code /usr/lib/os-release} or, +     *                     {@code /etc/system-release}, +    @SuppressForbidden(reason = "access /etc/os-release or /usr/lib/os-release or /etc/system-release"), +        } else if (Files.exists(PathUtils.get("/usr/lib/os-release"))) {, +            lines = Files.readAllLines(PathUtils.get("/usr/lib/os-release"));, +            assert lines != null && lines.isEmpty() == false;, +            return lines;, +        } else if (Files.exists(PathUtils.get("/etc/system-release"))) {, +            // fallback for older Red Hat-like OS, +            lines = Files.readAllLines(PathUtils.get("/etc/system-release"));, +            assert lines != null && lines.size() == 1;, +            return Collections.singletonList("PRETTY_NAME=\"" + lines.get(0) + "\"");, +        } else {, +            return Collections.emptyList();, +        }, +++ b/server/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  permission java.io.FilePermission "/etc/system-release", "read";]