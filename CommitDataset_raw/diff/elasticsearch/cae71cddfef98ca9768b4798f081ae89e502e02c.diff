[+++ b/docs/reference/docs.asciidoc, +, +include::docs/concurrency-control.asciidoc[], +++ b/docs/reference/docs.asciidoc, +, +include::docs/concurrency-control.asciidoc[], +++ b/docs/reference/docs/bulk.asciidoc, +[[bulk-optimistic-concurrency-control]], +=== Optimistic Concurrency Control, +, +Each `index` and `delete` action within a bulk API call may include the, +`if_seq_no` and `if_primary_term` parameters in their respective action, +and meta data lines. The `if_seq_no` and `if_primary_term` parameters control, +how operations are executed, based on the last modification to existing, +documents. See <<optimistic-concurrency-control>> for more details., +, +, +[float], +++ b/docs/reference/docs.asciidoc, +, +include::docs/concurrency-control.asciidoc[], +++ b/docs/reference/docs/bulk.asciidoc, +[[bulk-optimistic-concurrency-control]], +=== Optimistic Concurrency Control, +, +Each `index` and `delete` action within a bulk API call may include the, +`if_seq_no` and `if_primary_term` parameters in their respective action, +and meta data lines. The `if_seq_no` and `if_primary_term` parameters control, +how operations are executed, based on the last modification to existing, +documents. See <<optimistic-concurrency-control>> for more details., +, +, +[float], +++ b/docs/reference/docs/concurrency-control.asciidoc, +[[optimistic-concurrency-control]], +== Optimistic concurrency control, +, +Elasticsearch is distributed. When documents are created, updated, or deleted,, +the new version of the document has to be replicated to other nodes in the cluster. , +Elasticsearch is also asynchronous and concurrent, meaning that these replication, +requests are sent in parallel, and may arrive at their destination out of sequence. , +Elasticsearch needs a way of ensuring that an older version of a document never , +overwrites a newer version., +, +, +To ensure an older version of a document doesn't overwrite a newer version, every, +operation performed to a document is assigned a sequence number by the primary, +shard that coordinates that change. The sequence number is increased with each, +operation and thus newer operations are guaranteed to have a higher sequence, +number than older operations. Elasticsearch can then use the sequence number of, +operations to make sure they never override a newer document version is never, +overridden by a change that has a smaller sequence number assigned to it., +, +For example, the following indexing command will create a document and assign it, +an initial sequence number and primary term:, +, +[source,js], +--------------------------------------------------, +PUT products/_doc/1567, +{, +    "product" : "r2d2",, +    "details" : "A resourceful astromech droid", +}, +--------------------------------------------------, +// CONSOLE, +, +You can see the assigned sequence number and primary term in the , +the `_seq_no` and `_primary_term` fields of the response:, +, +[source,js], +--------------------------------------------------, +{, +    "_shards" : {, +        "total" : 2,, +        "failed" : 0,, +        "successful" : 1, +    },, +    "_index" : "products",, +    "_type" : "_doc",, +    "_id" : "1567",, +    "_version" : 1,, +    "_seq_no" : 362,, +    "_primary_term" : 2,, +    "result" : "created", +}, +--------------------------------------------------, +// TESTRESPONSE[s/"_seq_no" : \d+/"_seq_no" : $body._seq_no/ s/"_primary_term" : 2/"_primary_term" : $body._primary_term/], +, +, +Elasticsearch keeps tracks of the sequence number and primary of the last, +operation to have changed each of the document it stores. The sequence number, +and primary term are returned in the `_seq_no` and `_primary_term` fields in, +the response of the <<docs-get,GET API>>:, +, +[source,js], +--------------------------------------------------, +GET products/_doc/1567, +--------------------------------------------------, +// CONSOLE, +// TEST[continued]]