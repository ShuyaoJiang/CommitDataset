[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private volatile ElasticsearchException fatalException;, +, +            fatalException = ExceptionsHelper.convertToElastic(e);, +        return fatalException != null || isCancelled() || isCompleted();, +                timeSinceLastFetchMillis,, +                fatalException);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private volatile ElasticsearchException fatalException;, +, +            fatalException = ExceptionsHelper.convertToElastic(e);, +        return fatalException != null || isCancelled() || isCompleted();, +                timeSinceLastFetchMillis,, +                fatalException);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +import org.elasticsearch.persistent.PersistentTasksCustomMetaData;, +import java.util.stream.Collectors;, +        final PersistentTasksCustomMetaData persistentTasksMetaData = state.metaData().custom(PersistentTasksCustomMetaData.TYPE);, +        final Set<String> followerIndices = persistentTasksMetaData.tasks().stream(), +            .filter(persistentTask -> persistentTask.getTaskName().equals(ShardFollowTask.NAME)), +            .map(persistentTask -> {, +                ShardFollowTask shardFollowTask = (ShardFollowTask) persistentTask.getParams();, +                return shardFollowTask.getFollowShardId().getIndexName();, +            }), +            .collect(Collectors.toSet());, +, +                if (followerIndices.contains(shardFollowNodeTask.getFollowShardId().getIndexName())) {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private volatile ElasticsearchException fatalException;, +, +            fatalException = ExceptionsHelper.convertToElastic(e);, +        return fatalException != null || isCancelled() || isCompleted();, +                timeSinceLastFetchMillis,, +                fatalException);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +import org.elasticsearch.persistent.PersistentTasksCustomMetaData;, +import java.util.stream.Collectors;, +        final PersistentTasksCustomMetaData persistentTasksMetaData = state.metaData().custom(PersistentTasksCustomMetaData.TYPE);, +        final Set<String> followerIndices = persistentTasksMetaData.tasks().stream(), +            .filter(persistentTask -> persistentTask.getTaskName().equals(ShardFollowTask.NAME)), +            .map(persistentTask -> {, +                ShardFollowTask shardFollowTask = (ShardFollowTask) persistentTask.getParams();, +                return shardFollowTask.getFollowShardId().getIndexName();, +            }), +            .collect(Collectors.toSet());, +, +                if (followerIndices.contains(shardFollowNodeTask.getFollowShardId().getIndexName())) {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPauseFollowAction.java, +import java.util.List;, +import java.util.stream.Collectors;, +            PersistentTasksCustomMetaData persistentTasksMetaData = r.getState().metaData().custom(PersistentTasksCustomMetaData.TYPE);, +            if (persistentTasksMetaData == null) {, +                listener.onFailure(new IllegalArgumentException("no shard follow tasks for [" + request.getFollowIndex() + "]"));, +            List<String> shardFollowTaskIds = persistentTasksMetaData.tasks().stream(), +                .filter(persistentTask -> ShardFollowTask.NAME.equals(persistentTask.getTaskName())), +                .filter(persistentTask -> {, +                    ShardFollowTask shardFollowTask = (ShardFollowTask) persistentTask.getParams();, +                    return shardFollowTask.getFollowShardId().getIndexName().equals(request.getFollowIndex());, +                }), +                .map(PersistentTasksCustomMetaData.PersistentTask::getId), +                .collect(Collectors.toList());, +, +            if (shardFollowTaskIds.isEmpty()) {, +                listener.onFailure(new IllegalArgumentException("no shard follow tasks for [" + request.getFollowIndex() + "]"));, +                return;, +            }, +, +            final AtomicInteger counter = new AtomicInteger(shardFollowTaskIds.size());, +            final AtomicReferenceArray<Object> responses = new AtomicReferenceArray<>(shardFollowTaskIds.size());, +            int i = 0;, +, +            for (String taskId : shardFollowTaskIds) {, +                final int shardId = i++;, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private volatile ElasticsearchException fatalException;, +, +            fatalException = ExceptionsHelper.convertToElastic(e);, +        return fatalException != null || isCancelled() || isCompleted();, +                timeSinceLastFetchMillis,, +                fatalException);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +import org.elasticsearch.persistent.PersistentTasksCustomMetaData;, +import java.util.stream.Collectors;, +        final PersistentTasksCustomMetaData persistentTasksMetaData = state.metaData().custom(PersistentTasksCustomMetaData.TYPE);, +        final Set<String> followerIndices = persistentTasksMetaData.tasks().stream(), +            .filter(persistentTask -> persistentTask.getTaskName().equals(ShardFollowTask.NAME)), +            .map(persistentTask -> {, +                ShardFollowTask shardFollowTask = (ShardFollowTask) persistentTask.getParams();, +                return shardFollowTask.getFollowShardId().getIndexName();, +            }), +            .collect(Collectors.toSet());, +, +                if (followerIndices.contains(shardFollowNodeTask.getFollowShardId().getIndexName())) {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPauseFollowAction.java, +import java.util.List;, +import java.util.stream.Collectors;, +            PersistentTasksCustomMetaData persistentTasksMetaData = r.getState().metaData().custom(PersistentTasksCustomMetaData.TYPE);, +            if (persistentTasksMetaData == null) {, +                listener.onFailure(new IllegalArgumentException("no shard follow tasks for [" + request.getFollowIndex() + "]"));, +            List<String> shardFollowTaskIds = persistentTasksMetaData.tasks().stream()]