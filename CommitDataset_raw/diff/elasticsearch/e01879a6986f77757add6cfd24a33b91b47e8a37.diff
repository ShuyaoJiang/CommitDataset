[+++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataStats.java, +    long evictions;, +    public FieldDataStats(long memorySize, long evictions) {, +        this.evictions = evictions;, +        this.evictions += stats.evictions;, +    public long getEvictions() {, +        return this.evictions;, +    }, +, +        evictions = in.readVLong();, +        out.writeVLong(evictions);, +        builder.field(Fields.EVICTIONS, getEvictions());, +        static final XContentBuilderString EVICTIONS = new XContentBuilderString("evictions");, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataStats.java, +    long evictions;, +    public FieldDataStats(long memorySize, long evictions) {, +        this.evictions = evictions;, +        this.evictions += stats.evictions;, +    public long getEvictions() {, +        return this.evictions;, +    }, +, +        evictions = in.readVLong();, +        out.writeVLong(evictions);, +        builder.field(Fields.EVICTIONS, getEvictions());, +        static final XContentBuilderString EVICTIONS = new XContentBuilderString("evictions");, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, RemovalNotification<Object, AtomicFieldData> notification);, +            listener.onUnload(index, fieldNames, fieldDataType, notification);, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataStats.java, +    long evictions;, +    public FieldDataStats(long memorySize, long evictions) {, +        this.evictions = evictions;, +        this.evictions += stats.evictions;, +    public long getEvictions() {, +        return this.evictions;, +    }, +, +        evictions = in.readVLong();, +        out.writeVLong(evictions);, +        builder.field(Fields.EVICTIONS, getEvictions());, +        static final XContentBuilderString EVICTIONS = new XContentBuilderString("evictions");, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, RemovalNotification<Object, AtomicFieldData> notification);, +            listener.onUnload(index, fieldNames, fieldDataType, notification);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import com.google.common.cache.RemovalNotification;, +    private final CounterMetric evictions = new CounterMetric();, +    public void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, RemovalNotification<Object, AtomicFieldData> notification) {, +        if (notification.getValue() != null) {, +            memoryUsedInBytes.dec(notification.getValue().getMemorySizeInBytes());, +        }, +        if (notification.wasEvicted()) {, +            evictions.inc();, +        return new FieldDataStats(memoryUsedInBytes.count(), evictions.count());]