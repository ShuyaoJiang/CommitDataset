[+++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DocValuesIndexFieldData.java, +import org.elasticsearch.Version;, +                if (Version.indexCreated(indexSettings).onOrAfter(Version.V_1_4_0)) {, +                    return new SortedNumericDVIndexFieldData(index, fieldNames, numericType, mapper.fieldDataType());, +                } else {, +                    // prior to ES 1.4: multi-valued numerics were boxed inside a byte[] as BINARY, +                }, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DocValuesIndexFieldData.java, +import org.elasticsearch.Version;, +                if (Version.indexCreated(indexSettings).onOrAfter(Version.V_1_4_0)) {, +                    return new SortedNumericDVIndexFieldData(index, fieldNames, numericType, mapper.fieldDataType());, +                } else {, +                    // prior to ES 1.4: multi-valued numerics were boxed inside a byte[] as BINARY, +                }, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/SortedNumericDVIndexFieldData.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.fielddata.plain;, +, +import com.google.common.base.Preconditions;, +import org.apache.lucene.index.*;, +import org.apache.lucene.util.NumericUtils;, +import org.elasticsearch.ElasticsearchIllegalStateException;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.fielddata.*;, +import org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource.Nested;, +import org.elasticsearch.index.fielddata.fieldcomparator.DoubleValuesComparatorSource;, +import org.elasticsearch.index.fielddata.fieldcomparator.FloatValuesComparatorSource;, +import org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource;, +import org.elasticsearch.index.mapper.FieldMapper.Names;, +import org.elasticsearch.search.MultiValueMode;, +, +import java.io.IOException;, +, +/**, + * FieldData backed by {@link AtomicReader#getSortedNumericDocValues(String)}, + * @see FieldInfo.DocValuesType#SORTED_NUMERIC, + */, +public class SortedNumericDVIndexFieldData extends DocValuesIndexFieldData implements IndexNumericFieldData {, +    private final NumericType numericType;, +    , +    public SortedNumericDVIndexFieldData(Index index, Names fieldNames, NumericType numericType, FieldDataType fieldDataType) {, +        super(index, fieldNames, fieldDataType);, +        Preconditions.checkArgument(numericType != null, "numericType must be non-null");, +        this.numericType = numericType;, +    }, +, +    @Override, +    public org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource comparatorSource(Object missingValue, MultiValueMode sortMode, Nested nested) {, +        switch (numericType) {, +            case FLOAT:, +                return new FloatValuesComparatorSource(this, missingValue, sortMode, nested);, +            case DOUBLE: , +                return new DoubleValuesComparatorSource(this, missingValue, sortMode, nested);, +            default:, +                assert !numericType.isFloatingPoint();, +                return new LongValuesComparatorSource(this, missingValue, sortMode, nested);, +        }, +    }, +, +    @Override, +    public NumericType getNumericType() {, +        return numericType;, +    }, +    , +    @Override, +    public AtomicNumericFieldData loadDirect(AtomicReaderContext context) throws Exception {, +        return load(context);, +    }, +, +    @Override, +    public AtomicNumericFieldData load(AtomicReaderContext context) {, +        final AtomicReader reader = context.reader();, +        final String field = fieldNames.indexName();, +        , +        switch (numericType) {, +            case FLOAT:, +                return new SortedNumericFloatFieldData(reader, field);, +            case DOUBLE:, +                return new SortedNumericDoubleFieldData(reader, field);, +            default:, +                return new SortedNumericLongFieldData(reader, field);, +        } ]