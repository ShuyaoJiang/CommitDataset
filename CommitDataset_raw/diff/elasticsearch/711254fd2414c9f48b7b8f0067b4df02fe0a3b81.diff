[+++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +        final MonitoringService monitoringService = new MonitoringService(settings, clusterService, threadPool, collectors, exporters);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +        final MonitoringService monitoringService = new MonitoringService(settings, clusterService, threadPool, collectors, exporters);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.service.ClusterService;, +    private final ClusterService clusterService;, +    MonitoringService(Settings settings, ClusterService clusterService, ThreadPool threadPool,, +        this.clusterService = Objects.requireNonNull(clusterService);, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(INTERVAL, this::setInterval);, +                    final long intervalInMillis = interval.getMillis();, +                    final ClusterState clusterState = clusterService.state();, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, intervalInMillis, clusterState);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +        final MonitoringService monitoringService = new MonitoringService(settings, clusterService, threadPool, collectors, exporters);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.service.ClusterService;, +    private final ClusterService clusterService;, +    MonitoringService(Settings settings, ClusterService clusterService, ThreadPool threadPool,, +        this.clusterService = Objects.requireNonNull(clusterService);, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(INTERVAL, this::setInterval);, +                    final long intervalInMillis = interval.getMillis();, +                    final ClusterState clusterState = clusterService.state();, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, intervalInMillis, clusterState);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/Collector.java, +import org.elasticsearch.cluster.ClusterState;, +     *, +     * @param isElectedMaster true if the current local node is the elected master node, +    protected boolean shouldCollect(final boolean isElectedMaster) {, +    public Collection<MonitoringDoc> collect(final long timestamp, final long interval, final ClusterState clusterState) {, +            final boolean isElectedMaster = clusterState.getNodes().isLocalNodeElectedMaster();, +            if (shouldCollect(isElectedMaster)) {, +                return doCollect(convertNode(timestamp, clusterService.localNode()), interval, clusterState);, +    protected abstract Collection<MonitoringDoc> doCollect(MonitoringDoc.Node node,, +                                                           long interval,, +                                                           ClusterState clusterState) throws Exception;, +     * Extracts the current cluster's UUID from a {@link ClusterState}, +     *, +     * @param clusterState the {@link ClusterState}, +     * @return the cluster's UUID, +     */, +    protected static String clusterUuid(final ClusterState clusterState) {, +        return clusterState.metaData().clusterUUID();, +    }, +, +    /**, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +        final MonitoringService monitoringService = new MonitoringService(settings, clusterService, threadPool, collectors, exporters);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.service.ClusterService;, +    private final ClusterService clusterService;, +    MonitoringService(Settings settings, ClusterService clusterService, ThreadPool threadPool,, +        this.clusterService = Objects.requireNonNull(clusterService);, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(INTERVAL, this::setInterval);, +                    final long intervalInMillis = interval.getMillis();, +                    final ClusterState clusterState = clusterService.state();, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, intervalInMillis, clusterState);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/Collector.java, +import org.elasticsearch.cluster.ClusterState;, +     *, +     * @param isElectedMaster true if the current local node is the elected master node, +    protected boolean shouldCollect(final boolean isElectedMaster) {, +    public Collection<MonitoringDoc> collect(final long timestamp, final long interval, final ClusterState clusterState) {, +            final boolean isElectedMaster = clusterState.getNodes().isLocalNodeElectedMaster();, +            if (shouldCollect(isElectedMaster)) {, +                return doCollect(convertNode(timestamp, clusterService.localNode()), interval, clusterState);, +    protected abstract Collection<MonitoringDoc> doCollect(MonitoringDoc.Node node,, +                                                           long interval,, +                                                           ClusterState clusterState) throws Exception;, +     * Extracts the current cluster's UUID from a {@link ClusterState}, +     *, +     * @param clusterState the {@link ClusterState}, +     * @return the cluster's UUID, +     */, +    protected static String clusterUuid(final ClusterState clusterState) {, +        return clusterState.metaData().clusterUUID();, +    }, +, +    /**, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +    protected boolean shouldCollect(final boolean isElectedMaster) {, +        return isElectedMaster;, +    protected Collection<MonitoringDoc> doCollect(final MonitoringDoc.Node node,, +                                                  final long interval,, +                                                  final ClusterState clusterState) throws Exception {, +        final String clusterUuid = clusterUuid(clusterState);, +                new ClusterStatsMonitoringDoc(clusterUuid, timestamp(), interval, node, clusterName, version,  clusterStats.getStatus(),, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +        final MonitoringService monitoringService = new MonitoringService(settings, clusterService, threadPool, collectors, exporters);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.service.ClusterService;, +    private final ClusterService clusterService;, +    MonitoringService(Settings settings, ClusterService clusterService, ThreadPool threadPool,, +        this.clusterService = Objects.requireNonNull(clusterService);, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(INTERVAL, this::setInterval);, +                    final long intervalInMillis = interval.getMillis();]