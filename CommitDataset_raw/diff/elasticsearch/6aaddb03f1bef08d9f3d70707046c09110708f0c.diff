[+++ b/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchAndIndexingBenchmark.java, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.indices.IndexAlreadyExistsException;, +    static int PARENT_COUNT = (int) SizeValue.parseSizeValue("1m").singles();, +    static int NUM_CHILDREN_PER_PARENT = 12;, +    static int QUERY_VALUE_RATIO_PER_PARENT = 3;, +            long startTime = System.currentTimeMillis();, +            ParentChildIndexGenerator generator = new ParentChildIndexGenerator(client, PARENT_COUNT, NUM_CHILDREN_PER_PARENT, QUERY_VALUE_RATIO_PER_PARENT);, +            generator.index();, +            System.out.println("--> Indexing took " + ((System.currentTimeMillis() - startTime) / 1000) + " seconds.");, +        } catch (IndexAlreadyExistsException e) {, +                int childIdLimit = PARENT_COUNT * NUM_CHILDREN_PER_PARENT;, +                for (int childId = 1; run && childId < childIdLimit;) {, +                        for (int j = 0; j < 8; j++) {, +                            GetResponse getResponse = client, +                                    .prepareGet(indexName, "child", String.valueOf(++childId)), +                                    .setFields("_source", "_parent"), +                                    .setRouting("1") // Doesn't matter what value, since there is only one shard, +                                    .get();, +                            client.prepareIndex(indexName, "child", Integer.toString(childId) + "_" + j), +                                    .setParent(getResponse.getField("_parent").getValue().toString()), +                                    .setSource(getResponse.getSource()), +                                    .get();, +                        Thread.sleep(1000);, +                        if (childId % 500 == 0) {, +        private final int numValues;, +            this.numValues = NUM_CHILDREN_PER_PARENT / NUM_CHILDREN_PER_PARENT;, +                                                hasChildFilter("child", termQuery("field2", "value" + random.nextInt(numValues))), +++ b/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchAndIndexingBenchmark.java, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.indices.IndexAlreadyExistsException;, +    static int PARENT_COUNT = (int) SizeValue.parseSizeValue("1m").singles();, +    static int NUM_CHILDREN_PER_PARENT = 12;, +    static int QUERY_VALUE_RATIO_PER_PARENT = 3;, +            long startTime = System.currentTimeMillis();, +            ParentChildIndexGenerator generator = new ParentChildIndexGenerator(client, PARENT_COUNT, NUM_CHILDREN_PER_PARENT, QUERY_VALUE_RATIO_PER_PARENT);, +            generator.index();, +            System.out.println("--> Indexing took " + ((System.currentTimeMillis() - startTime) / 1000) + " seconds.");, +        } catch (IndexAlreadyExistsException e) {, +                int childIdLimit = PARENT_COUNT * NUM_CHILDREN_PER_PARENT;, +                for (int childId = 1; run && childId < childIdLimit;) {, +                        for (int j = 0; j < 8; j++) {, +                            GetResponse getResponse = client, +                                    .prepareGet(indexName, "child", String.valueOf(++childId)), +                                    .setFields("_source", "_parent"), +                                    .setRouting("1") // Doesn't matter what value, since there is only one shard, +                                    .get();, +                            client.prepareIndex(indexName, "child", Integer.toString(childId) + "_" + j), +                                    .setParent(getResponse.getField("_parent").getValue().toString()), +                                    .setSource(getResponse.getSource()), +                                    .get();, +                        Thread.sleep(1000);, +                        if (childId % 500 == 0) {, +        private final int numValues;, +            this.numValues = NUM_CHILDREN_PER_PARENT / NUM_CHILDREN_PER_PARENT;, +                                                hasChildFilter("child", termQuery("field2", "value" + random.nextInt(numValues))), +++ b/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java, +import org.elasticsearch.indices.IndexAlreadyExistsException;, +        int COUNT = (int) SizeValue.parseSizeValue("2m").singles();, +        int CHILD_COUNT = 15;, +        int QUERY_VALUE_RATIO = 3;, +        int QUERY_WARMUP = 10;, +        int QUERY_COUNT = 20;, +        ParentChildIndexGenerator parentChildIndexGenerator = new ParentChildIndexGenerator(client, COUNT, CHILD_COUNT, QUERY_VALUE_RATIO);, +            long startTime = System.currentTimeMillis();, +            parentChildIndexGenerator.index();, +            System.out.println("--> Indexing took " + ((System.currentTimeMillis() - startTime) / 1000) + " seconds.");, +        } catch (IndexAlreadyExistsException e) {, +            client.prepareSearch(indexName).setQuery(termQuery("child.tag", "tag1")).execute().actionGet();, +                                    hasChildFilter("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())), +                                    hasChildFilter("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())), +            if (j % 10 == 0) {, +                System.out.println("--> hits [" + j + "], got [" + searchResponse.getHits().totalHits() + "]");, +            if (j % 10 == 0) {, +                System.out.println("--> hits [" + j + "], got [" + searchResponse.getHits().totalHits() + "]");, +                                    hasParentFilter("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())), +                                    hasParentFilter("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())), +            if (j % 10 == 0) {, +                System.out.println("--> hits [" + j + "], got [" + searchResponse.getHits().totalHits() + "]");, +            if (j % 10 == 0) {, +                System.out.println("--> hits [" + j + "], got [" + searchResponse.getHits().totalHits() + "]");, +            client.prepareSearch(indexName).setQuery(topChildrenQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue()))).execute().actionGet();, +            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(topChildrenQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue()))).execute().actionGet();, +            if (j % 10 == 0) {, +                System.out.println("--> hits [" + j + "], got [" + searchResponse.getHits().totalHits() + "]");, +            }, +            client.prepareSearch(indexName).setQuery(topChildrenQuery("child", matchAllQuery())).execute().actionGet();, +            if (j % 10 == 0) {, +                System.out.println("--> hits [" + j + "], got [" + searchResponse.getHits().totalHits() + "]");, +            }, +            client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreType("max")).execute().actionGet();, +            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreType("max")).execute().actionGet();, +            if (j % 10 == 0) {, +                System.out.println("--> hits [" + j + "], got [" + searchResponse.getHits().totalHits() + "]");, +            if (j % 10 == 0) {, +                System.out.println("--> hits [" + j + "], got [" + searchResponse.getHits().totalHits() + "]");, +        System.out.println("--> Running has_parent query with score type");, +            client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).scoreType("score")).execute().actionGet();, +        for (int j = 1; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).scoreType("score")).execute().actionGet();]