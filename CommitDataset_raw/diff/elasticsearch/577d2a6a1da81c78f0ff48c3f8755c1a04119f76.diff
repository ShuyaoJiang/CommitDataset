[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.ByteSizeValue;, +/**, + * The response for getting the cluster state., + */, +    // the total compressed size of the full cluster state, not just, +    // the parts included in this response, +    private ByteSizeValue totalCompressedSize;, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState, long sizeInBytes) {, +        this.totalCompressedSize = new ByteSizeValue(sizeInBytes);, +    /**, +     * The requested cluster state.  Only the parts of the cluster state that were, +     * requested are included in the returned {@link ClusterState} instance., +     */, +    /**, +     * The name of the cluster., +     */, +    /**, +     * The total compressed size of the full cluster state, not just the parts, +     * returned by {@link #getState()}.  The total compressed size is the size, +     * of the cluster state as it would be transmitted over the network during, +     * intra-node communication., +     */, +    public ByteSizeValue getTotalCompressedSize() {, +        return totalCompressedSize;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            totalCompressedSize = new ByteSizeValue(in);, +        } else {, +            // in a mixed cluster, if a pre 6.0 node processes the get cluster state, +            // request, then a compressed size won't be returned, so just return 0;, +            // its a temporary situation until all nodes in the cluster have been upgraded,, +            // at which point the correct cluster state size will always be reported, +            totalCompressedSize = new ByteSizeValue(0L);, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            totalCompressedSize.writeTo(out);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.ByteSizeValue;, +/**, + * The response for getting the cluster state., + */, +    // the total compressed size of the full cluster state, not just, +    // the parts included in this response, +    private ByteSizeValue totalCompressedSize;, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState, long sizeInBytes) {, +        this.totalCompressedSize = new ByteSizeValue(sizeInBytes);, +    /**, +     * The requested cluster state.  Only the parts of the cluster state that were, +     * requested are included in the returned {@link ClusterState} instance., +     */, +    /**, +     * The name of the cluster., +     */, +    /**, +     * The total compressed size of the full cluster state, not just the parts, +     * returned by {@link #getState()}.  The total compressed size is the size, +     * of the cluster state as it would be transmitted over the network during, +     * intra-node communication., +     */, +    public ByteSizeValue getTotalCompressedSize() {, +        return totalCompressedSize;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            totalCompressedSize = new ByteSizeValue(in);, +        } else {, +            // in a mixed cluster, if a pre 6.0 node processes the get cluster state, +            // request, then a compressed size won't be returned, so just return 0;, +            // its a temporary situation until all nodes in the cluster have been upgraded,, +            // at which point the correct cluster state size will always be reported, +            totalCompressedSize = new ByteSizeValue(0L);, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            totalCompressedSize.writeTo(out);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +import org.elasticsearch.Version;, +import java.io.IOException;, +, +import static org.elasticsearch.discovery.zen.PublishClusterStateAction.serializeFullClusterState;, +, +    protected void masterOperation(final ClusterStateRequest request, final ClusterState state,, +                                   final ActionListener<ClusterStateResponse> listener) throws IOException {, +        listener.onResponse(new ClusterStateResponse(currentState.getClusterName(), builder.build(),, +                                                        serializeFullClusterState(currentState, Version.CURRENT).length()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.ByteSizeValue;, +/**, + * The response for getting the cluster state., + */, +    // the total compressed size of the full cluster state, not just, +    // the parts included in this response, +    private ByteSizeValue totalCompressedSize;, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState, long sizeInBytes) {]