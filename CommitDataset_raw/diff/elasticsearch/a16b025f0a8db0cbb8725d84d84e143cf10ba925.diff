[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +                boolean hasSource = warmerEntry.source() != null;, +                out.writeBoolean(hasSource);, +                if (hasSource) {, +                    warmerEntry.source().writeTo(out);, +                }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +                boolean hasSource = warmerEntry.source() != null;, +                out.writeBoolean(hasSource);, +                if (hasSource) {, +                    warmerEntry.source().writeTo(out);, +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +, +                IndexWarmersMetaData.SearchSource source = null;, +                if (in.readBoolean()) {, +                    source = new IndexWarmersMetaData.SearchSource(in);, +                }, +                boolean hasWarmerSource = warmerEntry != null;, +                out.writeBoolean(hasWarmerSource);, +                if (hasWarmerSource) {, +                    warmerEntry.source().writeTo(out);, +                }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +                boolean hasSource = warmerEntry.source() != null;, +                out.writeBoolean(hasSource);, +                if (hasSource) {, +                    warmerEntry.source().writeTo(out);, +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +, +                IndexWarmersMetaData.SearchSource source = null;, +                if (in.readBoolean()) {, +                    source = new IndexWarmersMetaData.SearchSource(in);, +                }, +                boolean hasWarmerSource = warmerEntry != null;, +                out.writeBoolean(hasWarmerSource);, +                if (hasWarmerSource) {, +                    warmerEntry.source().writeTo(out);, +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +                        IndexWarmersMetaData.SearchSource source = null;, +                        if (request.searchRequest().source() != null) {, +                            source = new IndexWarmersMetaData.SearchSource(request.searchRequest().source());, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +                boolean hasSource = warmerEntry.source() != null;, +                out.writeBoolean(hasSource);, +                if (hasSource) {, +                    warmerEntry.source().writeTo(out);, +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +, +                IndexWarmersMetaData.SearchSource source = null;]