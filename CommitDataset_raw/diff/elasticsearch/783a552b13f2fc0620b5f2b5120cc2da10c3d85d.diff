[+++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeAutodetectIntegTestCase.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.xpack.ml.action.FlushJobAction;, +import org.elasticsearch.xpack.ml.action.PostDataAction;, +import org.elasticsearch.xpack.ml.job.process.autodetect.state.DataCounts;, +    protected void flushJob(String jobId, boolean calcInterim) throws Exception {, +        FlushJobAction.Request request = new FlushJobAction.Request(jobId);, +        request.setCalcInterim(calcInterim);, +        client().execute(FlushJobAction.INSTANCE, request).get();, +    }, +, +    protected DataCounts postData(String jobId, String data) {, +        logger.debug("Posting data to job [{}]:\n{}", jobId, data);, +        PostDataAction.Request request = new PostDataAction.Request(jobId);, +        request.setContent(new BytesArray(data), XContentType.JSON);, +        return client().execute(PostDataAction.INSTANCE, request).actionGet().getDataCounts();, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeAutodetectIntegTestCase.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.xpack.ml.action.FlushJobAction;, +import org.elasticsearch.xpack.ml.action.PostDataAction;, +import org.elasticsearch.xpack.ml.job.process.autodetect.state.DataCounts;, +    protected void flushJob(String jobId, boolean calcInterim) throws Exception {, +        FlushJobAction.Request request = new FlushJobAction.Request(jobId);, +        request.setCalcInterim(calcInterim);, +        client().execute(FlushJobAction.INSTANCE, request).get();, +    }, +, +    protected DataCounts postData(String jobId, String data) {, +        logger.debug("Posting data to job [{}]:\n{}", jobId, data);, +        PostDataAction.Request request = new PostDataAction.Request(jobId);, +        request.setContent(new BytesArray(data), XContentType.JSON);, +        return client().execute(PostDataAction.INSTANCE, request).actionGet().getDataCounts();, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/UpdateInterimResultsIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.ml.action.GetBucketsAction;, +import org.elasticsearch.xpack.ml.action.util.PageParams;, +import org.elasticsearch.xpack.ml.job.config.AnalysisConfig;, +import org.elasticsearch.xpack.ml.job.config.DataDescription;, +import org.elasticsearch.xpack.ml.job.config.Detector;, +import org.elasticsearch.xpack.ml.job.config.Job;, +import org.elasticsearch.xpack.ml.job.results.Bucket;, +, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.stream.Collectors;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.lessThan;, +, +/**, + * A fast integration test for categorization, + */, +public class UpdateInterimResultsIT extends MlNativeAutodetectIntegTestCase {, +, +    private static final String JOB_ID = "update-interim-test";, +    private static final long BUCKET_SPAN_SECONDS = 1000;, +, +    private long time;, +, +    public void test() throws Exception {, +        AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(, +                Arrays.asList(new Detector.Builder("max", "value").build()));, +        analysisConfig.setBucketSpan(TimeValue.timeValueSeconds(BUCKET_SPAN_SECONDS));, +        analysisConfig.setOverlappingBuckets(true);, +        DataDescription.Builder dataDescription = new DataDescription.Builder();, +        dataDescription.setTimeFormat("epoch");, +        Job.Builder job = new Job.Builder(JOB_ID);, +        job.setAnalysisConfig(analysisConfig);, +        job.setDataDescription(dataDescription);, +, +        registerJob(job);, +        putJob(job);, +        openJob(job.getId());, +, +        time = 1400000000;, +        Map<Long, Integer> anomalies = new HashMap<>();, +        anomalies.put(1400021500L, 14);, +, +        // push some data, flush job, verify no interim results, +        assertThat(postData(job.getId(), createData(50, anomalies)).getProcessedRecordCount(), equalTo(50L));, +        flushJob(job.getId(), false);, +        assertThat(getInterimResults(job.getId()).isEmpty(), is(true));, +]