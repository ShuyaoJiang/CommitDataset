[+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +, +     * Algorithm largely based on {@link java.util.Random} except this one is not, +     * thread safe and it incorporates the doc id on next();, +                doc = 0xCAFEBAB;, +            long rand = doc;, +            rand |= rand << 32;, +            rand ^= rand;, +            return nextFloat(rand);, +        }, +, +        public float nextFloat(long rand) {, +            rand ^= seed;, +            double result = rand / (double)(1L << 54);, +            return (float) result;, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +, +     * Algorithm largely based on {@link java.util.Random} except this one is not, +     * thread safe and it incorporates the doc id on next();, +                doc = 0xCAFEBAB;, +            long rand = doc;, +            rand |= rand << 32;, +            rand ^= rand;, +            return nextFloat(rand);, +        }, +, +        public float nextFloat(long rand) {, +            rand ^= seed;, +            double result = rand / (double)(1L << 54);, +            return (float) result;, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/random/RandomScoreFunctionParser.java, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.search.internal.SearchContext;, +        ShardId shardId = SearchContext.current().indexShard().shardId();, +        seed = salt(seed, shardId.index().name(), shardId.id());, +, +, +    public static long salt(long seed, String index, int shardId) {, +        long salt = index.hashCode();, +        salt = salt << 32;, +        salt |= shardId;, +        return salt^seed;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +, +     * Algorithm largely based on {@link java.util.Random} except this one is not, +     * thread safe and it incorporates the doc id on next();, +                doc = 0xCAFEBAB;, +            long rand = doc;, +            rand |= rand << 32;, +            rand ^= rand;, +            return nextFloat(rand);, +        }, +, +        public float nextFloat(long rand) {, +            rand ^= seed;, +            double result = rand / (double)(1L << 54);, +            return (float) result;, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/random/RandomScoreFunctionParser.java, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.search.internal.SearchContext;, +        ShardId shardId = SearchContext.current().indexShard().shardId();, +        seed = salt(seed, shardId.index().name(), shardId.id());, +, +, +    public static long salt(long seed, String index, int shardId) {, +        long salt = index.hashCode();, +        salt = salt << 32;, +        salt |= shardId;, +        return salt^seed;, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/search/functionscore/RandomScoreFunctionTests.java, +        int sumRepeat = 0;, +            sumRepeat += value;, +, +        System.out.println("avg repeat: " +  sumRepeat / (double)filled);]