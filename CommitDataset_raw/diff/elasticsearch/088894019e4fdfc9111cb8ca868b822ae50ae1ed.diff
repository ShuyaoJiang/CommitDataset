[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/EnoughShardsWaitStep.java, +import java.util.Objects;, +, +    , +    @Override, +    public int hashCode() {, +        return Objects.hash(super.hashCode(), numberOfShards);, +    }, +    , +    @Override, +    public boolean equals(Object obj) {, +        if (obj == null) {, +            return false;, +        }, +        if (getClass() != obj.getClass()) {, +            return false;, +        }, +        EnoughShardsWaitStep other = (EnoughShardsWaitStep) obj;, +        return super.equals(obj) &&, +                Objects.equals(numberOfShards, other.numberOfShards);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/EnoughShardsWaitStep.java, +import java.util.Objects;, +, +    , +    @Override, +    public int hashCode() {, +        return Objects.hash(super.hashCode(), numberOfShards);, +    }, +    , +    @Override, +    public boolean equals(Object obj) {, +        if (obj == null) {, +            return false;, +        }, +        if (getClass() != obj.getClass()) {, +            return false;, +        }, +        EnoughShardsWaitStep other = (EnoughShardsWaitStep) obj;, +        return super.equals(obj) &&, +                Objects.equals(numberOfShards, other.numberOfShards);, +    }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicyTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.core.indexlifecycle;, +, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.ClusterModule;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.io.stream.Writeable.Reader;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.test.AbstractSerializingTestCase;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.function.LongSupplier;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.mockito.Mockito.mock;, +, +public class LifecyclePolicyTests extends AbstractSerializingTestCase<LifecyclePolicy> {, +, +    private String lifecycleName;, +, +    @Override, +    protected LifecyclePolicy doParseInstance(XContentParser parser) {, +        return LifecyclePolicy.parse(parser, lifecycleName);, +    }, +, +    @Override, +    protected NamedWriteableRegistry getNamedWriteableRegistry() {, +        return new NamedWriteableRegistry(, +                Arrays.asList(new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),, +                        new NamedWriteableRegistry.Entry(LifecycleType.class, TestLifecycleType.TYPE, (in) -> TestLifecycleType.INSTANCE)));, +    }, +, +    @Override, +    protected NamedXContentRegistry xContentRegistry() {, +        List<NamedXContentRegistry.Entry> entries = new ArrayList<>(ClusterModule.getNamedXWriteables());, +        entries.add(new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(MockAction.NAME), MockAction::parse));, +        entries.add(new NamedXContentRegistry.Entry(LifecycleType.class, new ParseField(TestLifecycleType.TYPE),, +                (p) -> TestLifecycleType.INSTANCE));, +        return new NamedXContentRegistry(entries);, +    }, +, +    @Override]