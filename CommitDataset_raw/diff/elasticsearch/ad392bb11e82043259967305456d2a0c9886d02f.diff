[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            traverse(fieldMapperListener);, +        }, +    }, +, +    public void traverse(FieldMapperListener listener) {, +                listener.fieldMapper((FieldMapper) rootMapper);, +        rootObjectMapper.traverse(listener);, +            traverse(objectMapperListener);, +    public void traverse(ObjectMapperListener listener) {, +        rootObjectMapper.traverse(listener);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            traverse(fieldMapperListener);, +        }, +    }, +, +    public void traverse(FieldMapperListener listener) {, +                listener.fieldMapper((FieldMapper) rootMapper);, +        rootObjectMapper.traverse(listener);, +            traverse(objectMapperListener);, +    public void traverse(ObjectMapperListener listener) {, +        rootObjectMapper.traverse(listener);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapperListener.java, +import java.util.ArrayList;, +import java.util.List;, +, +    public static class Aggregator implements FieldMapperListener {, +, +        public final List<FieldMapper> fieldMappers = new ArrayList<FieldMapper>();, +, +        @Override, +        public void fieldMapper(FieldMapper fieldMapper) {, +            fieldMappers.add(fieldMapper);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            traverse(fieldMapperListener);, +        }, +    }, +, +    public void traverse(FieldMapperListener listener) {, +                listener.fieldMapper((FieldMapper) rootMapper);, +        rootObjectMapper.traverse(listener);, +            traverse(objectMapperListener);, +    public void traverse(ObjectMapperListener listener) {, +        rootObjectMapper.traverse(listener);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapperListener.java, +import java.util.ArrayList;, +import java.util.List;, +, +    public static class Aggregator implements FieldMapperListener {, +, +        public final List<FieldMapper> fieldMappers = new ArrayList<FieldMapper>();, +, +        @Override, +        public void fieldMapper(FieldMapper fieldMapper) {, +            fieldMappers.add(fieldMapper);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.common.collect.MapBuilder;, +    private volatile Map<String, ObjectMappers> fullPathObjectMappers = ImmutableMap.of();, +, +            FieldMapperListener.Aggregator fieldMappersAgg = new FieldMapperListener.Aggregator();, +            mapper.traverse(fieldMappersAgg);, +            addFieldMappers(fieldMappersAgg.fieldMappers.toArray(new FieldMapper[fieldMappersAgg.fieldMappers.size()]));, +            mapper.addFieldMapperListener(fieldMapperListener, false);, +, +            ObjectMapperListener.Aggregator objectMappersAgg = new ObjectMapperListener.Aggregator();, +            mapper.traverse(objectMappersAgg);, +            addObjectMappers(objectMappersAgg.objectMappers.toArray(new ObjectMapper[objectMappersAgg.objectMappers.size()]));, +            mapper.addObjectMapperListener(objectMapperListener, false);, +, +                removeObjectAndFieldMappers(oldMapper);, +    private void addObjectMappers(ObjectMapper[] objectMappers) {, +        synchronized (mutex) {, +            MapBuilder<String, ObjectMappers> fullPathObjectMappers = newMapBuilder(this.fullPathObjectMappers);, +            for (ObjectMapper objectMapper : objectMappers) {, +                ObjectMappers mappers = fullPathObjectMappers.get(objectMapper.fullPath());, +                if (mappers == null) {, +                    mappers = new ObjectMappers(objectMapper);, +                } else {, +                    mappers = mappers.concat(objectMapper);, +                }, +                fullPathObjectMappers.put(objectMapper.fullPath(), mappers);, +                // update the hasNested flag, +                if (objectMapper.nested().isNested()) {, +                    hasNested = true;, +                }, +            }, +            this.fullPathObjectMappers = fullPathObjectMappers.map();, +        }]