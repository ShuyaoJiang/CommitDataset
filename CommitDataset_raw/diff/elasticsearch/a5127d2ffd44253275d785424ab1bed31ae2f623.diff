[+++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +                        move(dir, path);, +        Files.walkFileTree(source, new TreeCopier(source, destination, false));, +    }, +, +    /**, +     * Move or rename a file to a target file. This method supports moving a file from, +     * different filesystems (not supported by Files.move())., +     *, +     * @param source source file, +     * @param destination destination file, +     */, +    public static void move(Path source, Path destination) throws IOException {, +        try {, +            // We can't use atomic move here since source & target can be on different filesystems., +            Files.move(source, destination);, +        } catch (DirectoryNotEmptyException e) {, +            Files.walkFileTree(source, new TreeCopier(source, destination, true));, +        }, +        private final boolean delete;, +        TreeCopier(Path source, Path target, boolean delete) {, +            this.delete = delete;, +        public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {, +            if (delete) {, +                IOUtils.rm(dir);, +            }, +            return CONTINUE;, +        }, +, +        @Override, +                if ((delete) && (Files.exists(newFile))) {, +                    Files.delete(file);, +                }, +++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +                        move(dir, path);, +        Files.walkFileTree(source, new TreeCopier(source, destination, false));, +    }, +, +    /**, +     * Move or rename a file to a target file. This method supports moving a file from, +     * different filesystems (not supported by Files.move())., +     *, +     * @param source source file, +     * @param destination destination file, +     */, +    public static void move(Path source, Path destination) throws IOException {, +        try {, +            // We can't use atomic move here since source & target can be on different filesystems., +            Files.move(source, destination);, +        } catch (DirectoryNotEmptyException e) {, +            Files.walkFileTree(source, new TreeCopier(source, destination, true));, +        }, +        private final boolean delete;, +        TreeCopier(Path source, Path target, boolean delete) {, +            this.delete = delete;, +        public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {, +            if (delete) {, +                IOUtils.rm(dir);, +            }, +            return CONTINUE;, +        }, +, +        @Override, +                if ((delete) && (Files.exists(newFile))) {, +                    Files.delete(file);, +                }, +++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +            try {, +                FileSystemUtils.move(binFile, toLocation);, +            } catch (IOException e) {, +                throw new IOException("Could not move [" + binFile + "] to [" + toLocation + "]", e);, +            }]