[+++ b/core/src/main/java/org/elasticsearch/common/Table.java, +import org.joda.time.format.DateTimeFormat;, +import org.joda.time.format.DateTimeFormatter;, +, +import java.util.concurrent.TimeUnit;, +    private boolean withTime = false;, +    public static final String EPOCH = "epoch";, +    public static final String TIMESTAMP = "timestamp";, +    public Table startHeadersWithTimestamp() {, +        startHeaders();, +        this.withTime = true;, +        addCell("epoch", "alias:t,time;desc:seconds since 1970-01-01 00:00:00");, +        addCell("timestamp", "alias:ts,hms,hhmmss;desc:time in HH:MM:SS");, +        return this;, +    }, +, +, +    private DateTimeFormatter dateFormat = DateTimeFormat.forPattern("HH:mm:ss");, +, +        if (withTime) {, +            long time = System.currentTimeMillis();, +            addCell(TimeUnit.SECONDS.convert(time, TimeUnit.MILLISECONDS));, +            addCell(dateFormat.print(time));, +        }, +++ b/core/src/main/java/org/elasticsearch/common/Table.java, +import org.joda.time.format.DateTimeFormat;, +import org.joda.time.format.DateTimeFormatter;, +, +import java.util.concurrent.TimeUnit;, +    private boolean withTime = false;, +    public static final String EPOCH = "epoch";, +    public static final String TIMESTAMP = "timestamp";, +    public Table startHeadersWithTimestamp() {, +        startHeaders();, +        this.withTime = true;, +        addCell("epoch", "alias:t,time;desc:seconds since 1970-01-01 00:00:00");, +        addCell("timestamp", "alias:ts,hms,hhmmss;desc:time in HH:MM:SS");, +        return this;, +    }, +, +, +    private DateTimeFormatter dateFormat = DateTimeFormat.forPattern("HH:mm:ss");, +, +        if (withTime) {, +            long time = System.currentTimeMillis();, +            addCell(TimeUnit.SECONDS.convert(time, TimeUnit.MILLISECONDS));, +            addCell(dateFormat.print(time));, +        }, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestCountAction.java, +        table.startHeadersWithTimestamp();, +++ b/core/src/main/java/org/elasticsearch/common/Table.java, +import org.joda.time.format.DateTimeFormat;, +import org.joda.time.format.DateTimeFormatter;, +, +import java.util.concurrent.TimeUnit;, +    private boolean withTime = false;, +    public static final String EPOCH = "epoch";, +    public static final String TIMESTAMP = "timestamp";, +    public Table startHeadersWithTimestamp() {, +        startHeaders();, +        this.withTime = true;, +        addCell("epoch", "alias:t,time;desc:seconds since 1970-01-01 00:00:00");, +        addCell("timestamp", "alias:ts,hms,hhmmss;desc:time in HH:MM:SS");, +        return this;, +    }, +, +, +    private DateTimeFormatter dateFormat = DateTimeFormat.forPattern("HH:mm:ss");, +, +        if (withTime) {, +            long time = System.currentTimeMillis();, +            addCell(TimeUnit.SECONDS.convert(time, TimeUnit.MILLISECONDS));, +            addCell(dateFormat.print(time));, +        }, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestCountAction.java, +        table.startHeadersWithTimestamp();, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestHealthAction.java, +        t.startHeadersWithTimestamp();, +++ b/core/src/main/java/org/elasticsearch/common/Table.java, +import org.joda.time.format.DateTimeFormat;, +import org.joda.time.format.DateTimeFormatter;, +, +import java.util.concurrent.TimeUnit;, +    private boolean withTime = false;, +    public static final String EPOCH = "epoch";, +    public static final String TIMESTAMP = "timestamp";, +    public Table startHeadersWithTimestamp() {, +        startHeaders();, +        this.withTime = true;, +        addCell("epoch", "alias:t,time;desc:seconds since 1970-01-01 00:00:00");, +        addCell("timestamp", "alias:ts,hms,hhmmss;desc:time in HH:MM:SS");, +        return this;, +    }, +, +, +    private DateTimeFormatter dateFormat = DateTimeFormat.forPattern("HH:mm:ss");, +, +        if (withTime) {, +            long time = System.currentTimeMillis();, +            addCell(TimeUnit.SECONDS.convert(time, TimeUnit.MILLISECONDS));]