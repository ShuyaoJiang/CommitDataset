[+++ b/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsTests.java, +import org.elasticsearch.action.suggest.SuggestRequestBuilder;, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder;, +import org.elasticsearch.search.suggest.term.TermSuggestionBuilder;, +                .put(SETTING_NUMBER_OF_REPLICAS, 0)), +                .addMapping("type", "f", "type=string"));, +                .put(SETTING_NUMBER_OF_REPLICAS, 0)), +                .addMapping("type", "f", "type=string"));, +, +        for (int i = 0; i < randomIntBetween(20, 100); i++) {, +            index("test" + ((i % 2) + 1), "type", "" + i, "f", "test" + i);, +        }, +        refresh();, +, +            SuggestResponse suggestResponse = addSuggestions(cluster().clientNodeClient().prepareSuggest(), i).get();, +            SuggestResponse suggestResponse = addSuggestions(cluster().clientNodeClient().prepareSuggest("test1"), i).get();, +            SuggestResponse suggestResponse = addSuggestions(cluster().clientNodeClient().prepareSuggest("test2"), i).get();, +        logger.info("iter {}, iter1 {}, iter2 {}, {}", suggestAllIdx, suggestIdx1, suggestIdx2, endTime - startTime);, +            logger.info("evaluating {}", stat.getNode());, +    private SuggestRequestBuilder addSuggestions(SuggestRequestBuilder request, int i) {, +        for (int s = 0; s < randomIntBetween(2, 10); s++) {, +            if (randomBoolean()) {, +                request.addSuggestion(new PhraseSuggestionBuilder("s" + s).field("f").text("test" + i + " test" + (i - 1)));, +            } else {, +                request.addSuggestion(new TermSuggestionBuilder("s" + s).field("f").text("test" + i));, +            }, +        }, +        return request;, +    }, +]