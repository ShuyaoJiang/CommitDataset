[+++ b/server/src/main/java/org/elasticsearch/common/geo/builders/PolygonBuilder.java, +import static org.apache.lucene.geo.GeoUtils.orient;, +, +, +        boolean orientation = getOrientation(points, offset, length);, +    /**, +     * @return whether the points are clockwise (true) or anticlockwise (false), +     */, +    private static boolean getOrientation(Coordinate[] points, int offset, int length) {, +        // calculate the direction of the points: find the southernmost point, +        // and check its neighbors orientation., +, +        final int top = top(points, offset, length);, +        final int prev = (top + length - 1) % length;, +        final int next = (top + 1) % length;, +, +        final int determinantSign = orient(, +            points[offset + prev].x, points[offset + prev].y,, +            points[offset + top].x, points[offset + top].y,, +            points[offset + next].x, points[offset + next].y);, +, +        if (determinantSign == 0) {, +            // Points are collinear, but `top` is not in the middle if so, so the edges either side of `top` are intersecting., +            throw new InvalidShapeException("Cannot determine orientation: edges adjacent to (", +                + points[offset + top].x + "," + points[offset +top].y + ") coincide");, +        }, +, +        return determinantSign < 0;, +    }, +, +    /**, +     * @return the (offset) index of the point that is furthest west amongst, +     * those points that are the furthest south in the set., +     */, +++ b/server/src/main/java/org/elasticsearch/common/geo/builders/PolygonBuilder.java, +import static org.apache.lucene.geo.GeoUtils.orient;, +, +, +        boolean orientation = getOrientation(points, offset, length);, +    /**, +     * @return whether the points are clockwise (true) or anticlockwise (false), +     */, +    private static boolean getOrientation(Coordinate[] points, int offset, int length) {, +        // calculate the direction of the points: find the southernmost point, +        // and check its neighbors orientation., +, +        final int top = top(points, offset, length);, +        final int prev = (top + length - 1) % length;, +        final int next = (top + 1) % length;, +, +        final int determinantSign = orient(, +            points[offset + prev].x, points[offset + prev].y,, +            points[offset + top].x, points[offset + top].y,, +            points[offset + next].x, points[offset + next].y);, +, +        if (determinantSign == 0) {, +            // Points are collinear, but `top` is not in the middle if so, so the edges either side of `top` are intersecting., +            throw new InvalidShapeException("Cannot determine orientation: edges adjacent to (", +                + points[offset + top].x + "," + points[offset +top].y + ") coincide");, +        }, +, +        return determinantSign < 0;, +    }, +, +    /**, +     * @return the (offset) index of the point that is furthest west amongst, +     * those points that are the furthest south in the set., +     */, +++ b/server/src/test/java/org/elasticsearch/common/geo/builders/PolygonBuilderTests.java, +, +    public void testWidePolygonWithConfusingOrientation() {, +        // A valid polygon that is oriented correctly (anticlockwise) but which, +        // confounds a naive algorithm for determining its orientation leading, +        // ES to believe that it crosses the dateline and "fixing" it in a way, +        // that self-intersects., +, +        PolygonBuilder pb = new PolygonBuilder(new CoordinatesBuilder(), +            .coordinate(10, -20).coordinate(100, 0).coordinate(-100, 0).coordinate(20, -45).coordinate(40, -60).close());, +        pb.build(); // Should not throw an exception, +    }, +, +    public void testPolygonWithUndefinedOrientationDueToCollinearPoints() {, +        PolygonBuilder pb = new PolygonBuilder(new CoordinatesBuilder(), +            .coordinate(0.0, 0.0).coordinate(1.0, 1.0).coordinate(-1.0, -1.0).close());, +        InvalidShapeException e = expectThrows(InvalidShapeException.class, pb::build);, +        assertEquals("Cannot determine orientation: edges adjacent to (-1.0,-1.0) coincide", e.getMessage());, +    }]