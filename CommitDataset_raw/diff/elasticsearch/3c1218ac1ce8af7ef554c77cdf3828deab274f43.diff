[+++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authc/Realms.java, +import org.elasticsearch.common.collect.Iterators;, +        if (shieldLicenseState.authenticationAndAuthorizationEnabled() == false) {, +            return Collections.emptyIterator();, +        }, +, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authc/Realms.java, +import org.elasticsearch.common.collect.Iterators;, +        if (shieldLicenseState.authenticationAndAuthorizationEnabled() == false) {, +            return Collections.emptyIterator();, +        }, +, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/SecurityFeatureSetTests.java, +import java.util.Collections;, +        when(realms.iterator()).thenReturn(available ? realmsList.iterator() : Collections.<Realm>emptyIterator());, +        if (enabled && available) {, +        } else if (enabled) {, +            assertThat(source.getValue("enabled_realms"), is(notNullValue()));, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authc/Realms.java, +import org.elasticsearch.common.collect.Iterators;, +        if (shieldLicenseState.authenticationAndAuthorizationEnabled() == false) {, +            return Collections.emptyIterator();, +        }, +, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/SecurityFeatureSetTests.java, +import java.util.Collections;, +        when(realms.iterator()).thenReturn(available ? realmsList.iterator() : Collections.<Realm>emptyIterator());, +        if (enabled && available) {, +        } else if (enabled) {, +            assertThat(source.getValue("enabled_realms"), is(notNullValue()));, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/authc/InternalAuthenticationServiceTests.java, +        when(shieldLicenseState.authenticationAndAuthorizationEnabled()).thenReturn(true);, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authc/Realms.java, +import org.elasticsearch.common.collect.Iterators;, +        if (shieldLicenseState.authenticationAndAuthorizationEnabled() == false) {, +            return Collections.emptyIterator();, +        }, +, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/SecurityFeatureSetTests.java, +import java.util.Collections;, +        when(realms.iterator()).thenReturn(available ? realmsList.iterator() : Collections.<Realm>emptyIterator());, +        if (enabled && available) {, +        } else if (enabled) {, +            assertThat(source.getValue("enabled_realms"), is(notNullValue()));, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/authc/InternalAuthenticationServiceTests.java, +        when(shieldLicenseState.authenticationAndAuthorizationEnabled()).thenReturn(true);, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/authc/RealmsTests.java, +        when(shieldLicenseState.authenticationAndAuthorizationEnabled()).thenReturn(true);, +    public void testAuthcAuthzDisabled() {, +        Settings settings = Settings.builder(), +                .put("path.home", createTempDir()), +                .put("xpack.security.authc.realms.realm_1.type", FileRealm.TYPE), +                .put("xpack.security.authc.realms.realm_1.order", 0), +                .build();, +        Environment env = new Environment(settings);, +        Realms realms = new Realms(settings, env, factories, shieldLicenseState, reservedRealm).start();, +, +        assertThat(realms.iterator().hasNext(), is(true));, +, +        when(shieldLicenseState.authenticationAndAuthorizationEnabled()).thenReturn(false);, +        assertThat(realms.iterator().hasNext(), is(false));, +    }, +]