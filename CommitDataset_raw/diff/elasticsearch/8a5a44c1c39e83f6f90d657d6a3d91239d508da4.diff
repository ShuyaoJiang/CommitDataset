[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    private TObjectFloatHashMap<String> indexBoost = EMPTY;, +    public TObjectFloatHashMap<String> indexBoost() {, +        return indexBoost;, +    public SearchRequest indexBoost(String index, float indexBoost) {, +        if (this.indexBoost == EMPTY) {, +            this.indexBoost = new TObjectFloatHashMap<String>();, +        this.indexBoost.put(index, indexBoost);, +            indexBoost = EMPTY;, +            indexBoost = new TObjectFloatHashMap<String>(size);, +                indexBoost.put(in.readUTF(), in.readFloat());, +        if (indexBoost == null) {, +            out.writeInt(indexBoost.size());, +            for (TObjectFloatIterator<String> it = indexBoost.iterator(); it.hasNext();) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    private TObjectFloatHashMap<String> indexBoost = EMPTY;, +    public TObjectFloatHashMap<String> indexBoost() {, +        return indexBoost;, +    public SearchRequest indexBoost(String index, float indexBoost) {, +        if (this.indexBoost == EMPTY) {, +            this.indexBoost = new TObjectFloatHashMap<String>();, +        this.indexBoost.put(index, indexBoost);, +            indexBoost = EMPTY;, +            indexBoost = new TObjectFloatHashMap<String>(size);, +                indexBoost.put(in.readUTF(), in.readFloat());, +        if (indexBoost == null) {, +            out.writeInt(indexBoost.size());, +            for (TObjectFloatIterator<String> it = indexBoost.iterator(); it.hasNext();) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchHelper.java, +        if (request.indexBoost() != null) {, +            if (request.indexBoost().containsKey(shardRouting.index())) {, +                internalRequest.queryBoost(request.indexBoost().get(shardRouting.index()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    private TObjectFloatHashMap<String> indexBoost = EMPTY;, +    public TObjectFloatHashMap<String> indexBoost() {, +        return indexBoost;, +    public SearchRequest indexBoost(String index, float indexBoost) {, +        if (this.indexBoost == EMPTY) {, +            this.indexBoost = new TObjectFloatHashMap<String>();, +        this.indexBoost.put(index, indexBoost);, +            indexBoost = EMPTY;, +            indexBoost = new TObjectFloatHashMap<String>(size);, +                indexBoost.put(in.readUTF(), in.readFloat());, +        if (indexBoost == null) {, +            out.writeInt(indexBoost.size());, +            for (TObjectFloatIterator<String> it = indexBoost.iterator(); it.hasNext();) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchHelper.java, +        if (request.indexBoost() != null) {, +            if (request.indexBoost().containsKey(shardRouting.index())) {, +                internalRequest.queryBoost(request.indexBoost().get(shardRouting.index()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java, +    private final static Pattern fieldsPattern;, +, +    private final static Pattern indicesBoostPattern;, +        indicesBoostPattern = Pattern.compile(",");, +        String sIndicesBoost = request.param("indicesBoost");, +        if (sIndicesBoost != null) {, +            String[] indicesBoost = indicesBoostPattern.split(sIndicesBoost);, +            for (String indexBoost : indicesBoost) {, +                int divisor = indexBoost.indexOf(',');, +                if (divisor == -1) {, +                    throw new ElasticSearchIllegalArgumentException("Illegal index boost [" + indexBoost + "], no ','");, +                }, +                String indexName = indexBoost.substring(0, divisor);, +                String sBoost = indexBoost.substring(divisor + 1);, +                try {, +                    searchRequest.indexBoost(indexName, Float.parseFloat(sBoost));, +                } catch (NumberFormatException e) {, +                    throw new ElasticSearchIllegalArgumentException("Illegal index boost [" + indexBoost + "], boost not a float number");, +                }, +            }, +        }]