[+++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import java.nio.file.StandardOpenOption;, +        try (OutputStream outputStream = Files.newOutputStream(file, StandardOpenOption.CREATE_NEW)) {, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import java.nio.file.StandardOpenOption;, +        try (OutputStream outputStream = Files.newOutputStream(file, StandardOpenOption.CREATE_NEW)) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, + *   |- index.latest      - contains the numeric value of the latest generation of the index file (i.e. N from above), +            globalMetaDataFormat.write(clusterMetadata, snapshotsBlobContainer, blobId(snapshotId));, +                indexMetaDataFormat.write(indexMetaData, indexMetaDataBlobContainer, blobId(snapshotId));, +            safeGlobalMetaDataBlobDelete(snapshot, blobId(snapshotId));, +                    indexMetaDataFormat(snapshot.version()).delete(indexMetaDataBlobContainer, blobId(snapshotId));, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, blobId(snapshotId))) {, +            metaData = globalMetaDataFormat(snapshotVersion).read(snapshotsBlobContainer, blobId(snapshotId));, +                metaDataBuilder.put(indexMetaDataFormat(snapshotVersion).read(indexMetaDataBlobContainer, blobId(snapshotId)), false);, +    public static String blobId(final SnapshotId snapshotId) {, +        return uuid;, +                indexShardSnapshotFormat(version).delete(blobContainer, blobId(snapshotId));, +                return indexShardSnapshotFormat(version).read(blobContainer, blobId(snapshotId));, +                        snapshot = indexShardSnapshotFormat.readBlob(blobContainer, blobId(snapshotId));, +                    indexShardSnapshotFormat.write(snapshot, blobContainer, blobId(snapshotId));, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import java.nio.file.StandardOpenOption;, +        try (OutputStream outputStream = Files.newOutputStream(file, StandardOpenOption.CREATE_NEW)) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, + *   |- index.latest      - contains the numeric value of the latest generation of the index file (i.e. N from above), +            globalMetaDataFormat.write(clusterMetadata, snapshotsBlobContainer, blobId(snapshotId));, +                indexMetaDataFormat.write(indexMetaData, indexMetaDataBlobContainer, blobId(snapshotId));, +            safeGlobalMetaDataBlobDelete(snapshot, blobId(snapshotId));, +                    indexMetaDataFormat(snapshot.version()).delete(indexMetaDataBlobContainer, blobId(snapshotId));, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, blobId(snapshotId))) {, +            metaData = globalMetaDataFormat(snapshotVersion).read(snapshotsBlobContainer, blobId(snapshotId));, +                metaDataBuilder.put(indexMetaDataFormat(snapshotVersion).read(indexMetaDataBlobContainer, blobId(snapshotId)), false);, +    public static String blobId(final SnapshotId snapshotId) {, +        return uuid;, +                indexShardSnapshotFormat(version).delete(blobContainer, blobId(snapshotId));, +                return indexShardSnapshotFormat(version).read(blobContainer, blobId(snapshotId));, +                        snapshot = indexShardSnapshotFormat.readBlob(blobContainer, blobId(snapshotId));, +                    indexShardSnapshotFormat.write(snapshot, blobContainer, blobId(snapshotId));, +++ b/core/src/test/java/org/elasticsearch/repositories/blobstore/BlobStoreRepositoryTests.java, +        assertThat(blobId(snapshotId), equalTo(uuid)); // uuid only, +        assertThat(blobId(snapshotId), equalTo(uuid)); // uuid only, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import java.nio.file.StandardOpenOption;, +        try (OutputStream outputStream = Files.newOutputStream(file, StandardOpenOption.CREATE_NEW)) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, + *   |- index.latest      - contains the numeric value of the latest generation of the index file (i.e. N from above), +            globalMetaDataFormat.write(clusterMetadata, snapshotsBlobContainer, blobId(snapshotId));, +                indexMetaDataFormat.write(indexMetaData, indexMetaDataBlobContainer, blobId(snapshotId));, +            safeGlobalMetaDataBlobDelete(snapshot, blobId(snapshotId));, +                    indexMetaDataFormat(snapshot.version()).delete(indexMetaDataBlobContainer, blobId(snapshotId));, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, blobId(snapshotId))) {, +            metaData = globalMetaDataFormat(snapshotVersion).read(snapshotsBlobContainer, blobId(snapshotId));, +                metaDataBuilder.put(indexMetaDataFormat(snapshotVersion).read(indexMetaDataBlobContainer, blobId(snapshotId)), false);, +    public static String blobId(final SnapshotId snapshotId) {, +        return uuid;, +                indexShardSnapshotFormat(version).delete(blobContainer, blobId(snapshotId));, +                return indexShardSnapshotFormat(version).read(blobContainer, blobId(snapshotId));, +                        snapshot = indexShardSnapshotFormat.readBlob(blobContainer, blobId(snapshotId));, +                    indexShardSnapshotFormat.write(snapshot, blobContainer, blobId(snapshotId));, +++ b/core/src/test/java/org/elasticsearch/repositories/blobstore/BlobStoreRepositoryTests.java, +        assertThat(blobId(snapshotId), equalTo(uuid)); // uuid only, +        assertThat(blobId(snapshotId), equalTo(uuid)); // uuid only, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +        Path metadata = repo.resolve("meta-" + createSnapshotResponse.getSnapshotInfo().snapshotId().getUUID() + ".dat");, +        Path snapshotPath = repo.resolve("snap-" + createSnapshotResponse.getSnapshotInfo().snapshotId().getUUID() + ".dat");, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import java.nio.file.StandardOpenOption;, +        try (OutputStream outputStream = Files.newOutputStream(file, StandardOpenOption.CREATE_NEW)) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, + *   |- index.latest      - contains the numeric value of the latest generation of the index file (i.e. N from above), +            globalMetaDataFormat.write(clusterMetadata, snapshotsBlobContainer, blobId(snapshotId));, +                indexMetaDataFormat.write(indexMetaData, indexMetaDataBlobContainer, blobId(snapshotId));, +            safeGlobalMetaDataBlobDelete(snapshot, blobId(snapshotId));, +                    indexMetaDataFormat(snapshot.version()).delete(indexMetaDataBlobContainer, blobId(snapshotId));, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, blobId(snapshotId))) {, +            metaData = globalMetaDataFormat(snapshotVersion).read(snapshotsBlobContainer, blobId(snapshotId));, +                metaDataBuilder.put(indexMetaDataFormat(snapshotVersion).read(indexMetaDataBlobContainer, blobId(snapshotId)), false);, +    public static String blobId(final SnapshotId snapshotId) {, +        return uuid;, +                indexShardSnapshotFormat(version).delete(blobContainer, blobId(snapshotId));, +                return indexShardSnapshotFormat(version).read(blobContainer, blobId(snapshotId));, +                        snapshot = indexShardSnapshotFormat.readBlob(blobContainer, blobId(snapshotId));, +                    indexShardSnapshotFormat.write(snapshot, blobContainer, blobId(snapshotId));, +++ b/core/src/test/java/org/elasticsearch/repositories/blobstore/BlobStoreRepositoryTests.java, +        assertThat(blobId(snapshotId), equalTo(uuid)); // uuid only, +        assertThat(blobId(snapshotId), equalTo(uuid)); // uuid only, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +        Path metadata = repo.resolve("meta-" + createSnapshotResponse.getSnapshotInfo().snapshotId().getUUID() + ".dat");, +        Path snapshotPath = repo.resolve("snap-" + createSnapshotResponse.getSnapshotInfo().snapshotId().getUUID() + ".dat");, +++ b/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import java.nio.file.StandardOpenOption;, +        try (OutputStream outputStream = Files.newOutputStream(file, StandardOpenOption.CREATE_NEW)) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, + *   |- index.latest      - contains the numeric value of the latest generation of the index file (i.e. N from above), +            globalMetaDataFormat.write(clusterMetadata, snapshotsBlobContainer, blobId(snapshotId));, +                indexMetaDataFormat.write(indexMetaData, indexMetaDataBlobContainer, blobId(snapshotId));, +            safeGlobalMetaDataBlobDelete(snapshot, blobId(snapshotId));, +                    indexMetaDataFormat(snapshot.version()).delete(indexMetaDataBlobContainer, blobId(snapshotId));]