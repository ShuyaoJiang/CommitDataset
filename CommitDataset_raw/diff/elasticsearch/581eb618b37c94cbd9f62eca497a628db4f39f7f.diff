[+++ b/src/test/java/org/elasticsearch/test/junit/annotations/TestLogging.java, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.ElementType.PACKAGE;, +import static java.lang.annotation.ElementType.TYPE;, +, +@Target({PACKAGE, TYPE, METHOD}), +++ b/src/test/java/org/elasticsearch/test/junit/annotations/TestLogging.java, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.ElementType.PACKAGE;, +import static java.lang.annotation.ElementType.TYPE;, +, +@Target({PACKAGE, TYPE, METHOD}), +++ b/src/test/java/org/elasticsearch/test/junit/listeners/LoggingListener.java, +import org.junit.runner.Result;, +    private Map<String, String> previousClassLoggingMap;, +    private Map<String, String> previousPackageLoggingMap;, +, +    @Override, +    public void testRunStarted(Description description) throws Exception {, +        previousPackageLoggingMap = processTestLogging( description.getTestClass().getPackage().getAnnotation(TestLogging.class));, +        previousClassLoggingMap = processTestLogging(description.getAnnotation(TestLogging.class));, +    }, +, +    @Override, +    public void testRunFinished(Result result) throws Exception {, +        previousClassLoggingMap = reset(previousClassLoggingMap);, +        previousPackageLoggingMap = reset(previousPackageLoggingMap);, +    }, +        final TestLogging testLogging = description.getAnnotation(TestLogging.class);, +        previousLoggingMap = processTestLogging(testLogging);, +        previousLoggingMap = reset(previousLoggingMap);, +, +    private Map<String, String> processTestLogging(TestLogging testLogging) {, +        if (testLogging == null) {, +            return null;, +        }, +        Map<String, String> map = new HashMap<String, String>();, +        final String[] loggersAndLevels = testLogging.value().split(",");, +        for (String loggerAndLevel : loggersAndLevels) {, +            String[] loggerAndLevelArray = loggerAndLevel.split(":");, +            if (loggerAndLevelArray.length >=2) {, +                String loggerName = loggerAndLevelArray[0];, +                String level = loggerAndLevelArray[1];, +                ESLogger esLogger = resolveLogger(loggerName);, +                map.put(loggerName, esLogger.getLevel());, +                esLogger.setLevel(level);, +            }, +        }, +        return map;, +    }, +, +    private Map<String, String> reset(Map<String, String> map) {, +        if (map != null) {, +            for (Map.Entry<String, String> previousLogger : map.entrySet()) {, +                ESLogger esLogger = resolveLogger(previousLogger.getKey());, +                esLogger.setLevel(previousLogger.getValue());, +            }, +        }, +        return null;, +    }]