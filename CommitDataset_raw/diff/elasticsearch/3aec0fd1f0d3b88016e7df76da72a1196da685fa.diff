[+++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, + * Service responsible for managing {@link LicensesMetaData}, + *, + * <p/>, + * If the feature can not be registered immediately, it is queued up and registered on the first clusterChanged event with, + * no {@link GatewayService#STATE_NOT_RECOVERED_BLOCK} block, + * Upon successful registration, the feature(s) are notified appropriately using the notification scheme, + * {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, + * - if the previous cluster state had a global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, + * - no-op in case of global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, +     * When there is no global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}:, +     * {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, calls, +        logLicenseMetaDataStats("Setting last observed metaData", currentLicensesMetaData);, +        if (logger.isDebugEnabled()) {, +                StringBuilder signedFeatures = new StringBuilder();, +                for (ESLicense license : licenseManager.fromSignatures(licensesMetaData.getSignatures())) {, +                    signedFeatures.append(license.feature());, +                    signedFeatures.append(", ");, +                }, +                StringBuilder trialFeatures = new StringBuilder();, +                for (ESLicense license : TrialLicenseUtils.fromEncodedTrialLicenses(licensesMetaData.getEncodedTrialLicenses())) {, +                    trialFeatures.append(license.feature());, +                    trialFeatures.append(", ");, +                }, +                logger.debug(prefix + " LicensesMetaData: signedLicenses: [" + signedFeatures.toString() + "] trialLicenses: [" + trialFeatures.toString() + "]");, +                logger.debug(prefix + " LicensesMetaData: signedLicenses: [] trialLicenses: []");, +            }, +     * or if there is a global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, +     * In case of a global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK},, +                logger.debug("feature: " + feature + " calling onEnabled");, +                logger.debug("feature: " + feature + " calling onDisabled");, +     * Thin wrapper to work with {@link LicensesMetaData}, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, + * Service responsible for managing {@link LicensesMetaData}, + *, + * <p/>, + * If the feature can not be registered immediately, it is queued up and registered on the first clusterChanged event with, + * no {@link GatewayService#STATE_NOT_RECOVERED_BLOCK} block, + * Upon successful registration, the feature(s) are notified appropriately using the notification scheme, + * {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, + * - if the previous cluster state had a global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, + * - no-op in case of global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, +     * When there is no global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}:, +     * {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, calls, +        logLicenseMetaDataStats("Setting last observed metaData", currentLicensesMetaData);, +        if (logger.isDebugEnabled()) {, +                StringBuilder signedFeatures = new StringBuilder();, +                for (ESLicense license : licenseManager.fromSignatures(licensesMetaData.getSignatures())) {, +                    signedFeatures.append(license.feature());, +                    signedFeatures.append(", ");, +                }, +                StringBuilder trialFeatures = new StringBuilder();, +                for (ESLicense license : TrialLicenseUtils.fromEncodedTrialLicenses(licensesMetaData.getEncodedTrialLicenses())) {, +                    trialFeatures.append(license.feature());, +                    trialFeatures.append(", ");, +                }, +                logger.debug(prefix + " LicensesMetaData: signedLicenses: [" + signedFeatures.toString() + "] trialLicenses: [" + trialFeatures.toString() + "]");, +                logger.debug(prefix + " LicensesMetaData: signedLicenses: [] trialLicenses: []");, +            }, +     * or if there is a global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, +     * In case of a global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK},, +                logger.debug("feature: " + feature + " calling onEnabled");, +                logger.debug("feature: " + feature + " calling onDisabled");, +     * Thin wrapper to work with {@link LicensesMetaData}, +++ b/src/test/java/org/elasticsearch/license/plugin/AbstractLicensesIntegrationTests.java, +import org.elasticsearch.common.collect.Lists;, +import org.elasticsearch.license.plugin.action.put.PutLicenseRequestBuilder;, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +import org.elasticsearch.license.plugin.core.LicensesStatus;, +    protected void putLicense(String feature, TimeValue expiryDuration) throws Exception {, +        ESLicense license1 = generateSignedLicense(feature, expiryDuration);, +        final PutLicenseResponse putLicenseResponse = new PutLicenseRequestBuilder(client().admin().cluster()).setLicense(Lists.newArrayList(license1)).get();, +        assertThat(putLicenseResponse.isAcknowledged(), equalTo(true));, +        assertThat(putLicenseResponse.status(), equalTo(LicensesStatus.VALID));, +    }, +, +, +        assertThat("LicenseManager for feature " + feature + " should have enabled status of " + expectedEnabled, awaitBusy(new Predicate<Object>() {, +        assertConsumerPluginNotification("LazyConsumer should have license status of: " + expectedEnabled, consumerPluginServices, expectedEnabled, timeoutInSec);, +        assertConsumerPluginNotification("EagerConsumer should have license status of: " + expectedEnabled, consumerPluginServices, expectedEnabled, timeoutInSec);, +    private void assertConsumerPluginNotification(String msg, final Iterable<TestPluginServiceBase> consumerPluginServices, final boolean expectedEnabled, int timeoutInSec) throws InterruptedException {, +        assertThat(msg, awaitBusy(new Predicate<Object>() {, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, + * Service responsible for managing {@link LicensesMetaData}, + *, + * <p/>, + * If the feature can not be registered immediately, it is queued up and registered on the first clusterChanged event with, + * no {@link GatewayService#STATE_NOT_RECOVERED_BLOCK} block, + * Upon successful registration, the feature(s) are notified appropriately using the notification scheme, + * {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, + * - if the previous cluster state had a global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, + * - no-op in case of global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, +     * When there is no global block on {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}:, +     * {@link GatewayService#STATE_NOT_RECOVERED_BLOCK}, calls, +        logLicenseMetaDataStats("Setting last observed metaData", currentLicensesMetaData);, +        if (logger.isDebugEnabled()) {, +                StringBuilder signedFeatures = new StringBuilder();, +                for (ESLicense license : licenseManager.fromSignatures(licensesMetaData.getSignatures())) {, +                    signedFeatures.append(license.feature());, +                    signedFeatures.append(", ");]