[+++ b/server/src/test/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java, +        IndexShard getPrimaryShard() {, +            return replicationGroup.primary;, +        }, +, +            executeShardBulkOnReplica(request, replica, getPrimaryShard().getPrimaryTerm(), getPrimaryShard().getGlobalCheckpoint());, +        final PlainActionFuture<Releasable> permitAcquiredFuture = new PlainActionFuture<>();, +        primary.acquirePrimaryOperationPermit(permitAcquiredFuture, ThreadPool.Names.SAME, request);, +        final TransportWriteAction.WritePrimaryResult<BulkShardRequest, BulkShardResponse> result;, +        try (Releasable ignored = permitAcquiredFuture.actionGet()) {, +            result = TransportShardBulkAction.performOnPrimary(request, primary, null, System::currentTimeMillis,, +                new TransportShardBulkActionTests.NoopMappingUpdatePerformer());, +        }, +    private void executeShardBulkOnReplica(BulkShardRequest request, IndexShard replica, long operationPrimaryTerm, long globalCheckpointOnPrimary) throws Exception {, +        final PlainActionFuture<Releasable> permitAcquiredFuture = new PlainActionFuture<>();, +        replica.acquireReplicaOperationPermit(operationPrimaryTerm, globalCheckpointOnPrimary, permitAcquiredFuture, ThreadPool.Names.SAME, request);, +        final Translog.Location location;, +        try (Releasable ignored = permitAcquiredFuture.actionGet()) {, +            location = TransportShardBulkAction.performOnReplica(request, replica);, +        }, +    void indexOnReplica(BulkShardRequest request, ReplicationGroup group, IndexShard replica) throws Exception {, +        executeShardBulkOnReplica(request, replica, group.primary.getPrimaryTerm(), group.primary.getGlobalCheckpoint());, +++ b/server/src/test/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java, +        IndexShard getPrimaryShard() {, +            return replicationGroup.primary;, +        }, +, +            executeShardBulkOnReplica(request, replica, getPrimaryShard().getPrimaryTerm(), getPrimaryShard().getGlobalCheckpoint());, +        final PlainActionFuture<Releasable> permitAcquiredFuture = new PlainActionFuture<>();, +        primary.acquirePrimaryOperationPermit(permitAcquiredFuture, ThreadPool.Names.SAME, request);, +        final TransportWriteAction.WritePrimaryResult<BulkShardRequest, BulkShardResponse> result;, +        try (Releasable ignored = permitAcquiredFuture.actionGet()) {, +            result = TransportShardBulkAction.performOnPrimary(request, primary, null, System::currentTimeMillis,, +                new TransportShardBulkActionTests.NoopMappingUpdatePerformer());, +        }, +    private void executeShardBulkOnReplica(BulkShardRequest request, IndexShard replica, long operationPrimaryTerm, long globalCheckpointOnPrimary) throws Exception {, +        final PlainActionFuture<Releasable> permitAcquiredFuture = new PlainActionFuture<>();, +        replica.acquireReplicaOperationPermit(operationPrimaryTerm, globalCheckpointOnPrimary, permitAcquiredFuture, ThreadPool.Names.SAME, request);, +        final Translog.Location location;, +        try (Releasable ignored = permitAcquiredFuture.actionGet()) {, +            location = TransportShardBulkAction.performOnReplica(request, replica);, +        }, +    void indexOnReplica(BulkShardRequest request, ReplicationGroup group, IndexShard replica) throws Exception {, +        executeShardBulkOnReplica(request, replica, group.primary.getPrimaryTerm(), group.primary.getGlobalCheckpoint());, +++ b/server/src/test/java/org/elasticsearch/index/replication/IndexLevelReplicationTests.java, +                indexOnReplica(replicationRequest, shards, replicas.get(i));, +            indexOnReplica(replicationRequest, shards, replica2);, +++ b/server/src/test/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java, +        IndexShard getPrimaryShard() {, +            return replicationGroup.primary;, +        }, +, +            executeShardBulkOnReplica(request, replica, getPrimaryShard().getPrimaryTerm(), getPrimaryShard().getGlobalCheckpoint());, +        final PlainActionFuture<Releasable> permitAcquiredFuture = new PlainActionFuture<>();, +        primary.acquirePrimaryOperationPermit(permitAcquiredFuture, ThreadPool.Names.SAME, request);, +        final TransportWriteAction.WritePrimaryResult<BulkShardRequest, BulkShardResponse> result;, +        try (Releasable ignored = permitAcquiredFuture.actionGet()) {, +            result = TransportShardBulkAction.performOnPrimary(request, primary, null, System::currentTimeMillis,, +                new TransportShardBulkActionTests.NoopMappingUpdatePerformer());, +        }, +    private void executeShardBulkOnReplica(BulkShardRequest request, IndexShard replica, long operationPrimaryTerm, long globalCheckpointOnPrimary) throws Exception {, +        final PlainActionFuture<Releasable> permitAcquiredFuture = new PlainActionFuture<>();, +        replica.acquireReplicaOperationPermit(operationPrimaryTerm, globalCheckpointOnPrimary, permitAcquiredFuture, ThreadPool.Names.SAME, request);, +        final Translog.Location location;, +        try (Releasable ignored = permitAcquiredFuture.actionGet()) {, +            location = TransportShardBulkAction.performOnReplica(request, replica);, +        }, +    void indexOnReplica(BulkShardRequest request, ReplicationGroup group, IndexShard replica) throws Exception {, +        executeShardBulkOnReplica(request, replica, group.primary.getPrimaryTerm(), group.primary.getGlobalCheckpoint());, +++ b/server/src/test/java/org/elasticsearch/index/replication/IndexLevelReplicationTests.java, +                indexOnReplica(replicationRequest, shards, replicas.get(i));, +            indexOnReplica(replicationRequest, shards, replica2);, +++ b/server/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java, +                    indexOnReplica(bulkShardRequest, shards, replica);, +                indexOnReplica(bulkShardRequest, shards, replica);, +                indexOnReplica(bulkShardRequest, shards, newPrimary);]