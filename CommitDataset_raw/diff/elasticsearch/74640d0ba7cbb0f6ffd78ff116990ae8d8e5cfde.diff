[+++ b/server/src/main/java/org/elasticsearch/index/seqno/RetentionLease.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +, +import java.io.IOException;, +public final class RetentionLease implements Writeable {, +     * Constructs a new retention lease from a stream. The retention lease should have been written via {@link #writeTo(StreamOutput)}., +     *, +     * @param in the stream to construct the retention lease from, +     * @throws IOException if an I/O exception occurs reading from the stream, +     */, +    public RetentionLease(final StreamInput in) throws IOException {, +        id = in.readString();, +        retainingSequenceNumber = in.readZLong();, +        timestamp = in.readVLong();, +        source = in.readString();, +    }, +, +    /**, +     * Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}., +     *, +     * @param out the stream to write the retention lease to, +     * @throws IOException if an I/O exception occurs writing to the stream, +     */, +    @Override, +    public void writeTo(final StreamOutput out) throws IOException {, +        out.writeString(id);, +        out.writeZLong(retainingSequenceNumber);, +        out.writeVLong(timestamp);, +        out.writeString(source);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/seqno/RetentionLease.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +, +import java.io.IOException;, +public final class RetentionLease implements Writeable {, +     * Constructs a new retention lease from a stream. The retention lease should have been written via {@link #writeTo(StreamOutput)}., +     *, +     * @param in the stream to construct the retention lease from, +     * @throws IOException if an I/O exception occurs reading from the stream, +     */, +    public RetentionLease(final StreamInput in) throws IOException {, +        id = in.readString();, +        retainingSequenceNumber = in.readZLong();, +        timestamp = in.readVLong();, +        source = in.readString();, +    }, +, +    /**, +     * Writes a retention lease to a stream in a manner suitable for later reconstruction via {@link #RetentionLease(StreamInput)}., +     *, +     * @param out the stream to write the retention lease to, +     * @throws IOException if an I/O exception occurs writing to the stream, +     */, +    @Override, +    public void writeTo(final StreamOutput out) throws IOException {, +        out.writeString(id);, +        out.writeZLong(retainingSequenceNumber);, +        out.writeVLong(timestamp);, +        out.writeString(source);, +    }, +, +    /**, +++ b/server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseTests.java, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import java.io.IOException;, +    public void testRetentionLeaseSerialization() throws IOException {, +        final String id = randomAlphaOfLength(8);, +        final long retainingSequenceNumber = randomLongBetween(SequenceNumbers.NO_OPS_PERFORMED, Long.MAX_VALUE);, +        final long timestamp = randomNonNegativeLong();, +        final String source = randomAlphaOfLength(8);, +        final RetentionLease retentionLease = new RetentionLease(id, retainingSequenceNumber, timestamp, source);, +        try (BytesStreamOutput out = new BytesStreamOutput()) {, +            retentionLease.writeTo(out);, +            try (StreamInput in = out.bytes().streamInput()) {, +                assertThat(retentionLease, equalTo(new RetentionLease(in)));, +            }, +        }, +    }, +]