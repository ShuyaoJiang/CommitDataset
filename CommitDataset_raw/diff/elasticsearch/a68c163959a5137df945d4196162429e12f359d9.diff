[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String pathSeparator = System.getProperty("path.separator");, +        String fileSeparator = System.getProperty("file.separator");, +        String elements[] = classPath.split(pathSeparator);, +            // we should be able to just Paths.get() each element, but unfortunately this is not the, +            // whole story on how classpath parsing works: if you want to know, start at sun.misc.Launcher,, +            // be sure to stop before you tear out your eyes. we just handle the "alternative" filename, +            // specification which java seems to allow, explicitly, right here..., +            if (element.startsWith("/") && "\\".equals(fileSeparator)) {, +                // "correct" the entry to become a normal entry, +                // change to correct file separators, +                element = element.replace("/", "\\");, +                // if there is a drive letter, nuke the leading separator, +                if (element.length() >= 3 && element.charAt(2) == ':') {, +                    element = element.substring(1);, +                }, +            }, +            // now just parse as ordinary file, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String pathSeparator = System.getProperty("path.separator");, +        String fileSeparator = System.getProperty("file.separator");, +        String elements[] = classPath.split(pathSeparator);, +            // we should be able to just Paths.get() each element, but unfortunately this is not the, +            // whole story on how classpath parsing works: if you want to know, start at sun.misc.Launcher,, +            // be sure to stop before you tear out your eyes. we just handle the "alternative" filename, +            // specification which java seems to allow, explicitly, right here..., +            if (element.startsWith("/") && "\\".equals(fileSeparator)) {, +                // "correct" the entry to become a normal entry, +                // change to correct file separators, +                element = element.replace("/", "\\");, +                // if there is a drive letter, nuke the leading separator, +                if (element.length() >= 3 && element.charAt(2) == ':') {, +                    element = element.substring(1);, +                }, +            }, +            // now just parse as ordinary file, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    float weightSum = 0;, +                                weightSum++;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String pathSeparator = System.getProperty("path.separator");, +        String fileSeparator = System.getProperty("file.separator");, +        String elements[] = classPath.split(pathSeparator);, +            // we should be able to just Paths.get() each element, but unfortunately this is not the, +            // whole story on how classpath parsing works: if you want to know, start at sun.misc.Launcher,, +            // be sure to stop before you tear out your eyes. we just handle the "alternative" filename, +            // specification which java seems to allow, explicitly, right here..., +            if (element.startsWith("/") && "\\".equals(fileSeparator)) {, +                // "correct" the entry to become a normal entry, +                // change to correct file separators, +                element = element.replace("/", "\\");, +                // if there is a drive letter, nuke the leading separator, +                if (element.length() >= 3 && element.charAt(2) == ':') {, +                    element = element.substring(1);, +                }, +            }, +            // now just parse as ordinary file, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    float weightSum = 0;, +                                weightSum++;, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    abstract class XFieldComparatorSource extends FieldComparatorSource {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String pathSeparator = System.getProperty("path.separator");, +        String fileSeparator = System.getProperty("file.separator");, +        String elements[] = classPath.split(pathSeparator);, +            // we should be able to just Paths.get() each element, but unfortunately this is not the, +            // whole story on how classpath parsing works: if you want to know, start at sun.misc.Launcher,, +            // be sure to stop before you tear out your eyes. we just handle the "alternative" filename, +            // specification which java seems to allow, explicitly, right here..., +            if (element.startsWith("/") && "\\".equals(fileSeparator)) {, +                // "correct" the entry to become a normal entry, +                // change to correct file separators, +                element = element.replace("/", "\\");, +                // if there is a drive letter, nuke the leading separator, +                if (element.length() >= 3 && element.charAt(2) == ':') {, +                    element = element.substring(1);, +                }, +            }, +            // now just parse as ordinary file, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    float weightSum = 0;, +                                weightSum++;, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    abstract class XFieldComparatorSource extends FieldComparatorSource {, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String pathSeparator = System.getProperty("path.separator");, +        String fileSeparator = System.getProperty("file.separator");, +        String elements[] = classPath.split(pathSeparator);, +            // we should be able to just Paths.get() each element, but unfortunately this is not the, +            // whole story on how classpath parsing works: if you want to know, start at sun.misc.Launcher,, +            // be sure to stop before you tear out your eyes. we just handle the "alternative" filename, +            // specification which java seems to allow, explicitly, right here..., +            if (element.startsWith("/") && "\\".equals(fileSeparator)) {, +                // "correct" the entry to become a normal entry, +                // change to correct file separators, +                element = element.replace("/", "\\");, +                // if there is a drive letter, nuke the leading separator, +                if (element.length() >= 3 && element.charAt(2) == ':') {]