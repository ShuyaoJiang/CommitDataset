[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    protected TranslogRecoveryPerformer(MapperService mapperService, MapperAnalyzer mapperAnalyzer, IndexQueryParserService queryParserService, IndexAliasesService indexAliasesService, IndexCache indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    protected TranslogRecoveryPerformer(MapperService mapperService, MapperAnalyzer mapperAnalyzer, IndexQueryParserService queryParserService, IndexAliasesService indexAliasesService, IndexCache indexCache) {, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +import org.elasticsearch.common.logging.ESLoggerFactory;, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    protected TranslogRecoveryPerformer(MapperService mapperService, MapperAnalyzer mapperAnalyzer, IndexQueryParserService queryParserService, IndexAliasesService indexAliasesService, IndexCache indexCache) {, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +import org.elasticsearch.common.logging.ESLoggerFactory;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +import org.elasticsearch.index.shard.IllegalIndexShardStateException;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.IndexShardClosedException;, +import org.elasticsearch.index.shard.ShardId;, +                } catch (MapperException mapperException) {, +                    logger.trace("delaying recovery due to missing mapping changes", mapperException);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    protected TranslogRecoveryPerformer(MapperService mapperService, MapperAnalyzer mapperAnalyzer, IndexQueryParserService queryParserService, IndexAliasesService indexAliasesService, IndexCache indexCache) {, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +import org.elasticsearch.common.logging.ESLoggerFactory;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +import org.elasticsearch.index.shard.IllegalIndexShardStateException;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.IndexShardClosedException;, +import org.elasticsearch.index.shard.ShardId;, +                } catch (MapperException mapperException) {, +                    logger.trace("delaying recovery due to missing mapping changes", mapperException);, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +            super(null, new MapperAnalyzer(null), null, null, null);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    protected TranslogRecoveryPerformer(MapperService mapperService, MapperAnalyzer mapperAnalyzer, IndexQueryParserService queryParserService, IndexAliasesService indexAliasesService, IndexCache indexCache) {, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +import org.elasticsearch.common.logging.ESLoggerFactory;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +import org.elasticsearch.index.shard.IllegalIndexShardStateException;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.IndexShardClosedException;, +import org.elasticsearch.index.shard.ShardId;, +                } catch (MapperException mapperException) {, +                    logger.trace("delaying recovery due to missing mapping changes", mapperException);, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +            super(null, new MapperAnalyzer(null), null, null, null);, +++ b/core/src/test/java/org/elasticsearch/index/query/plugin/CustomQueryParserTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query.plugin;, +, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.query.BoolQueryBuilder;, +import org.elasticsearch.index.query.IndexQueryParserService;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Before;, +import org.junit.Test;, +, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.instanceOf;, +, +public class CustomQueryParserTests extends ElasticsearchIntegrationTest {, +, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return Settings.builder().put(super.nodeSettings(nodeOrdinal)), +                .put("plugin.types", DummyQueryParserPlugin.class.getName()).build();]