[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java, +import java.util.Collections;, + * A base class for a plugin which returns no services or modules., +public abstract class AbstractPlugin extends Plugin {, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java, +import java.util.Collections;, + * A base class for a plugin which returns no services or modules., +public abstract class AbstractPlugin extends Plugin {, +++ b/core/src/main/java/org/elasticsearch/plugins/IndexPluginsModule.java, +        return pluginsService.indexModules(settings);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java, +import java.util.Collections;, + * A base class for a plugin which returns no services or modules., +public abstract class AbstractPlugin extends Plugin {, +++ b/core/src/main/java/org/elasticsearch/plugins/IndexPluginsModule.java, +        return pluginsService.indexModules(settings);, +++ b/core/src/main/java/org/elasticsearch/plugins/Plugin.java, +import java.util.Collections;, + * A plugin can be register custom extensions to builtin behavior by implementing <tt>onModule(AnyModule)</tt>,, + * and registering the extension with the given module., +public abstract class Plugin {, +    public abstract String name();, +    public abstract String description();, +     * Node level modules., +    public Collection<Module> nodeModules() {, +        return Collections.emptyList();, +    }, +    public Collection<Class<? extends LifecycleComponent>> nodeServices() {, +        return Collections.emptyList();, +    }, +    public Collection<Module> indexModules(Settings indexSettings) {, +        return Collections.emptyList();, +    }, +    public Collection<Class<? extends Closeable>> indexServices() {, +        return Collections.emptyList();, +    }, +    public Collection<Module> shardModules(Settings indexSettings) {, +        return Collections.emptyList();, +    }, +    public Collection<Class<? extends Closeable>> shardServices() {, +        return Collections.emptyList();, +    }, +    public Settings additionalSettings() {, +        return Settings.Builder.EMPTY_SETTINGS;, +    }, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {, +++ b/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java, +import java.util.Collections;, + * A base class for a plugin which returns no services or modules., +public abstract class AbstractPlugin extends Plugin {, +++ b/core/src/main/java/org/elasticsearch/plugins/IndexPluginsModule.java, +        return pluginsService.indexModules(settings);, +++ b/core/src/main/java/org/elasticsearch/plugins/Plugin.java, +import java.util.Collections;, + * A plugin can be register custom extensions to builtin behavior by implementing <tt>onModule(AnyModule)</tt>,, + * and registering the extension with the given module., +public abstract class Plugin {, +    public abstract String name();, +    public abstract String description();, +     * Node level modules., +    public Collection<Module> nodeModules() {, +        return Collections.emptyList();, +    }, +    public Collection<Class<? extends LifecycleComponent>> nodeServices() {, +        return Collections.emptyList();, +    }, +    public Collection<Module> indexModules(Settings indexSettings) {, +        return Collections.emptyList();, +    }]