[+++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ArrayLikeObjectTestCase.java, +     * Matcher for the message of the out of bounds exceptions thrown for too negative or too positive offsets., +    protected abstract Matcher<String> outOfBoundsExceptionMessageMatcher(int index, int size);, +            assertThat(e.getMessage(), outOfBoundsExceptionMessageMatcher(index, 5));, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ArrayLikeObjectTestCase.java, +     * Matcher for the message of the out of bounds exceptions thrown for too negative or too positive offsets., +    protected abstract Matcher<String> outOfBoundsExceptionMessageMatcher(int index, int size);, +            assertThat(e.getMessage(), outOfBoundsExceptionMessageMatcher(index, 5));, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ArrayTests.java, +import static org.hamcrest.Matchers.equalTo;, +    protected Matcher<String> outOfBoundsExceptionMessageMatcher(int index, int size) {, +        return equalTo(Integer.toString(index));, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ArrayLikeObjectTestCase.java, +     * Matcher for the message of the out of bounds exceptions thrown for too negative or too positive offsets., +    protected abstract Matcher<String> outOfBoundsExceptionMessageMatcher(int index, int size);, +            assertThat(e.getMessage(), outOfBoundsExceptionMessageMatcher(index, 5));, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ArrayTests.java, +import static org.hamcrest.Matchers.equalTo;, +    protected Matcher<String> outOfBoundsExceptionMessageMatcher(int index, int size) {, +        return equalTo(Integer.toString(index));, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ListTests.java, +import static org.hamcrest.Matchers.anyOf;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.nullValue;, +    protected Matcher<String> outOfBoundsExceptionMessageMatcher(int index, int size) {, +        if ("1.8".equals(Runtime.class.getPackage().getSpecificationVersion())) {, +            // 1.8 and below aren't as clean as 1.9+, +                return equalTo("Index: " + index + ", Size: " + size);, +                Matcher<String> m = equalTo(Integer.toString(index));, +                m = anyOf(m, nullValue());, +        } else {, +            // Starting with 1.9 it gets nicer, +            return equalTo("Index " + index + " out-of-bounds for length " + size);, +        }]