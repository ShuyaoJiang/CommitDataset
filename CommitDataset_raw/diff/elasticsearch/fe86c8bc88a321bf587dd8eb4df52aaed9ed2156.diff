[+++ b/docs/reference/search/request/sort.asciidoc, +, +==== Multiple reference points, +, +Multiple geo points can be passed as an array containing any `geo_point` format, for example, +, +```, +"pin.location" : [[-70, 40], [-71, 42]], +"pin.location" : [{"lat": -70, "lon": 40}, {"lat": -71, "lon": 42}], +, +```, +and so forth., +, +The final distance for a document will then be `min`/`max` distance of all points contained in the document to all points given in the sort request., +, +, +, +++ b/docs/reference/search/request/sort.asciidoc, +, +==== Multiple reference points, +, +Multiple geo points can be passed as an array containing any `geo_point` format, for example, +, +```, +"pin.location" : [[-70, 40], [-71, 42]], +"pin.location" : [{"lat": -70, "lon": 40}, {"lat": -71, "lon": 42}], +, +```, +and so forth., +, +The final distance for a document will then be `min`/`max` distance of all points contained in the document to all points given in the sort request., +, +, +, +++ b/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import java.util.List;, +, +     * Return a {@link SortedNumericDoubleValues} instance that returns the distances to a list of geo-points for each document., +    public static SortedNumericDoubleValues distanceValues(final MultiGeoPointValues geoPointValues, final FixedSourceDistance... distances) {, +        if (singleValues != null && distances.length == 1) {, +                    return distances[0].calculate(point.lat(), point.lon());, +                    count = geoPointValues.count() * distances.length;, +                    int valueCounter = 0;, +                    for (FixedSourceDistance distance : distances) {, +                        for (int i = 0; i < geoPointValues.count(); ++i) {, +                            values[valueCounter] = distance.calculate(point.lat(), point.lon());, +                            valueCounter++;, +                        }, +++ b/docs/reference/search/request/sort.asciidoc, +, +==== Multiple reference points, +, +Multiple geo points can be passed as an array containing any `geo_point` format, for example, +, +```, +"pin.location" : [[-70, 40], [-71, 42]], +"pin.location" : [{"lat": -70, "lon": 40}, {"lat": -71, "lon": 42}], +, +```, +and so forth., +, +The final distance for a document will then be `min`/`max` distance of all points contained in the document to all points given in the sort request., +, +, +, +++ b/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import java.util.List;, +, +     * Return a {@link SortedNumericDoubleValues} instance that returns the distances to a list of geo-points for each document., +    public static SortedNumericDoubleValues distanceValues(final MultiGeoPointValues geoPointValues, final FixedSourceDistance... distances) {, +        if (singleValues != null && distances.length == 1) {, +                    return distances[0].calculate(point.lat(), point.lon());, +                    count = geoPointValues.count() * distances.length;, +                    int valueCounter = 0;, +                    for (FixedSourceDistance distance : distances) {, +                        for (int i = 0; i < geoPointValues.count(); ++i) {, +                            values[valueCounter] = distance.calculate(point.lat(), point.lon());, +                            valueCounter++;, +                        }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceParser.java, +                distanceValues = GeoDistance.distanceValues(geoValues, distance);, +++ b/docs/reference/search/request/sort.asciidoc, +, +==== Multiple reference points, +, +Multiple geo points can be passed as an array containing any `geo_point` format, for example, +, +```, +"pin.location" : [[-70, 40], [-71, 42]], +"pin.location" : [{"lat": -70, "lon": 40}, {"lat": -71, "lon": 42}], +, +```, +and so forth., +, +The final distance for a document will then be `min`/`max` distance of all points contained in the document to all points given in the sort request., +, +, +, +++ b/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import java.util.List;]