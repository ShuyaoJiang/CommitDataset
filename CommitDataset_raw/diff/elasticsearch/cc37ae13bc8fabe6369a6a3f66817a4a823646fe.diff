[+++ b/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +import org.apache.lucene.util.BytesRef;, +        InetAddress address;, +        for (NetworkInterface intf : getInterfaces()) {, +    private static List<NetworkInterface> getInterfaces() throws SocketException {, +        Enumeration intfs = NetworkInterface.getNetworkInterfaces();, +, +        List<NetworkInterface> intfsList = Lists.newArrayList();, +        while (intfs.hasMoreElements()) {, +            intfsList.add((NetworkInterface) intfs.nextElement());, +        }, +, +        sortInterfaces(intfsList);, +        return intfsList;, +    }, +, +    private static void sortInterfaces(List<NetworkInterface> intfsList) {, +        // order by index, assuming first ones are more interesting, +        CollectionUtil.timSort(intfsList, new Comparator<NetworkInterface>() {, +            @Override, +            public int compare(NetworkInterface o1, NetworkInterface o2) {, +                return Integer.compare (o1.getIndex(), o2.getIndex());, +            }, +        });, +    }, +, +        sortInterfaces(allInterfaces);, +        // we want consistent order here., +        final Set<InetAddress> retval = new TreeSet<>(new Comparator<InetAddress>() {, +            BytesRef left = new BytesRef();, +            BytesRef right = new BytesRef();, +            @Override, +            public int compare(InetAddress o1, InetAddress o2) {, +                return set(left, o1).compareTo(set(right, o1));, +            }, +            private BytesRef set(BytesRef ref, InetAddress addr) {, +                ref.bytes = addr.getAddress();, +                ref.offset = 0;, +                ref.length = ref.bytes.length;, +                return ref;, +            }, +        });, +            for (NetworkInterface intf : getInterfaces()) {]