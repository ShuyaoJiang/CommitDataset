[+++ b/server/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java, +import static org.apache.lucene.geo.GeoUtils.MAX_LAT_INCL;, +, +    /** Bit encoded representation of the latitude of north pole */, +    private static final long MAX_LAT_BITS = (0x1L << (PRECISION * 5 / 2)) - 1;, +        // deinterleave, +        long lon = BitUtil.deinterleave(ghLong >>> 1);, +        long lat = BitUtil.deinterleave(ghLong);, +        if (lat < MAX_LAT_BITS) {, +            // add 1 to lat and lon to get topRight, +            GeoPoint topRight = GeoPoint.fromGeohash(BitUtil.interleave((int)(lat + 1), (int)(lon + 1)) << 4 | len);, +        } else {, +            // We cannot go north of north pole, so just using 90 degrees instead of calculating it using, +            // add 1 to lon to get lon of topRight, we are going to use 90 for lat, +            GeoPoint topRight = GeoPoint.fromGeohash(BitUtil.interleave((int)lat, (int)(lon + 1)) << 4 | len);, +            return new Rectangle(bottomLeft.lat(), MAX_LAT_INCL, bottomLeft.lon(), topRight.lon());, +        }, +++ b/server/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java, +import static org.apache.lucene.geo.GeoUtils.MAX_LAT_INCL;, +, +    /** Bit encoded representation of the latitude of north pole */, +    private static final long MAX_LAT_BITS = (0x1L << (PRECISION * 5 / 2)) - 1;, +        // deinterleave, +        long lon = BitUtil.deinterleave(ghLong >>> 1);, +        long lat = BitUtil.deinterleave(ghLong);, +        if (lat < MAX_LAT_BITS) {, +            // add 1 to lat and lon to get topRight, +            GeoPoint topRight = GeoPoint.fromGeohash(BitUtil.interleave((int)(lat + 1), (int)(lon + 1)) << 4 | len);, +        } else {, +            // We cannot go north of north pole, so just using 90 degrees instead of calculating it using, +            // add 1 to lon to get lon of topRight, we are going to use 90 for lat, +            GeoPoint topRight = GeoPoint.fromGeohash(BitUtil.interleave((int)lat, (int)(lon + 1)) << 4 | len);, +            return new Rectangle(bottomLeft.lat(), MAX_LAT_INCL, bottomLeft.lon(), topRight.lon());, +        }, +++ b/server/src/test/java/org/elasticsearch/common/geo/GeoHashTests.java, +    public void testNorthPoleBoundingBox() {, +        Rectangle bbox = GeoHashUtils.bbox("zzbxfpgzupbx"); // Bounding box with maximum precision touching north pole, +        assertEquals(90.0, bbox.maxLat, 0.0000001); // Should be 90 degrees, +    }, +]