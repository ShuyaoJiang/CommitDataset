[+++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +    private boolean detectNoop = false;, +     * Should this update attempt to detect if it is a noop?, +, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +    private boolean detectNoop = false;, +     * Should this update attempt to detect if it is a noop?, +, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +    private boolean detectNoop = false;, +     * Should this update attempt to detect if it is a noop?, +, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequestBuilder.java, +++ b/core/src/test/java/org/elasticsearch/document/BulkIT.java, +                .add(client().prepareUpdate("test", "type", "e1").setDoc("field", "3").setVersion(20).setVersionType(VersionType.INTERNAL)).get();, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +    private boolean detectNoop = false;, +     * Should this update attempt to detect if it is a noop?, +, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequestBuilder.java, +++ b/core/src/test/java/org/elasticsearch/document/BulkIT.java, +                .add(client().prepareUpdate("test", "type", "e1").setDoc("field", "3").setVersion(20).setVersionType(VersionType.INTERNAL)).get();, +++ b/core/src/test/java/org/elasticsearch/index/shard/NewPathForShardTest.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.shard;, +, +import com.carrotsearch.randomizedtesting.annotations.Repeat;, +, +import org.apache.lucene.mockfile.FilterFileSystem;, +import org.apache.lucene.mockfile.FilterFileSystemProvider;, +import org.apache.lucene.mockfile.FilterPath;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.io.PathUtils;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.env.NodeEnvironment;, +import org.elasticsearch.test.ESTestCase;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.lang.reflect.Field;, +import java.nio.file.FileStore;, +import java.nio.file.FileSystem;, +import java.nio.file.FileSystems;, +import java.nio.file.Path;, +import java.nio.file.attribute.FileAttributeView;, +import java.nio.file.attribute.FileStoreAttributeView;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.Set;, +, +import static org.elasticsearch.common.settings.Settings.settingsBuilder;, +, +public class NewPathForShardTest extends ESTestCase {, +, +    // Sneakiness to install a mock filesystem to pretend how much free space we have on each path.data:, +, +    private static MockFileStore aFileStore = new MockFileStore("mocka");, +    private static MockFileStore bFileStore = new MockFileStore("mockb");, +    private static FileSystem origFileSystem;, +, +    @BeforeClass, +    public static void installMockUsableSpaceFS() throws Exception {, +        // Necessary so when Environment.clinit runs, to gather all FileStores, it sees ours:, +        Field field = PathUtils.class.getDeclaredField("DEFAULT");, +        field.setAccessible(true);, +        // nocommit can't double Filter maybe?, +        // origFileSystem = (FileSystem) field.get(null);, +        origFileSystem = FileSystems.getDefault();, +        FileSystem mock = new MockUsableSpaceFileSystemProvider().getFileSystem(getBaseTempDirForTestClass().toUri());, +        field.set(null, mock);, +        assertEquals(mock, PathUtils.getDefaultFileSystem());, +    }, +, +    @AfterClass, +    public static void removeMockUsableSpaceFS() throws Exception {, +        Field field = PathUtils.class.getDeclaredField("DEFAULT");, +        field.setAccessible(true);, +        field.set(null, origFileSystem);]