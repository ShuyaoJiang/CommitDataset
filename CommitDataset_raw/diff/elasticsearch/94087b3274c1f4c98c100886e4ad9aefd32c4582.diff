[+++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(isScrollRequest, sortedDocs, reducedQueryPhase,, +                fetchResultsArr);, +, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(isScrollRequest, sortedDocs, reducedQueryPhase,, +                fetchResultsArr);, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.SearchHits;, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(isScrollRequest, sortedDocs, reducedQueryPhase,, +                fetchResultsArr);, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.SearchHits;, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +    /**, +     * Used by {@link TransportSearchAction} to send the expand queries (field collapsing)., +     */, +    void sendExecuteMultiSearch(DiscoveryNode node, final MultiSearchRequest request, SearchTask task,, +                                       final ActionListener<MultiSearchResponse> listener) {, +        transportService.sendChildRequest(transportService.getConnection(node), MultiSearchAction.NAME, request, task,, +            new ActionListenerResponseHandler<>(listener, MultiSearchResponse::new));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(isScrollRequest, sortedDocs, reducedQueryPhase,, +                fetchResultsArr);, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.SearchHits;, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +    /**, +     * Used by {@link TransportSearchAction} to send the expand queries (field collapsing)., +     */, +    void sendExecuteMultiSearch(DiscoveryNode node, final MultiSearchRequest request, SearchTask task,, +                                       final ActionListener<MultiSearchResponse> listener) {, +        transportService.sendChildRequest(transportService.getConnection(node), MultiSearchAction.NAME, request, task,, +            new ActionListenerResponseHandler<>(listener, MultiSearchResponse::new));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.index.query.BoolQueryBuilder;, +import org.elasticsearch.index.query.InnerHitBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.SearchHits;, +import org.elasticsearch.search.collapse.CollapseBuilder;, +import java.util.Iterator;, +        // Only enrich the search response iff collapsing has been specified:, +        if (searchRequest.source() != null &&, +            searchRequest.source().collapse() != null &&, +            searchRequest.source().collapse().getInnerHit() != null) {, +            wrapper = ActionListener.wrap(searchResponse -> {, +                if (searchResponse.getHits().getHits().length == 0) {, +                    listener.onResponse(searchResponse);, +                } else {, +                    expandCollapsedHits(nodes.getLocalNode(), task, searchRequest, searchResponse, listener);, +                }, +, +    /**, +     * Expands collapsed using the {@link CollapseBuilder#innerHit} options., +     */, +    void expandCollapsedHits(DiscoveryNode node,, +                             SearchTask parentTask,, +                             SearchRequest searchRequest,, +                             SearchResponse searchResponse,, +                             ActionListener<SearchResponse> finalListener) {, +        CollapseBuilder collapseBuilder = searchRequest.source().collapse();, +        MultiSearchRequest multiRequest = new MultiSearchRequest();, +        if (collapseBuilder.getMaxConcurrentGroupRequests() > 0) {, +            multiRequest.maxConcurrentSearchRequests(collapseBuilder.getMaxConcurrentGroupRequests());, +        }, +        for (SearchHit hit : searchResponse.getHits()) {, +            BoolQueryBuilder groupQuery = new BoolQueryBuilder();, +            Object collapseValue = hit.field(collapseBuilder.getField()).getValue();, +            if (collapseValue != null) {, +                groupQuery.filter(QueryBuilders.matchQuery(collapseBuilder.getField(), collapseValue));, +            } else {, +                groupQuery.mustNot(QueryBuilders.existsQuery(collapseBuilder.getField()));, +            }, +            QueryBuilder origQuery = searchRequest.source().query();, +            if (origQuery != null) {, +                groupQuery.must(origQuery);, +            }, +            SearchSourceBuilder sourceBuilder = buildExpandSearchSourceBuilder(collapseBuilder.getInnerHit()), +                .query(groupQuery);, +            SearchRequest groupRequest = new SearchRequest(searchRequest.indices()), +                .types(searchRequest.types()), +                .source(sourceBuilder);, +            multiRequest.add(groupRequest);, +        }, +        searchTransportService.sendExecuteMultiSearch(node, multiRequest, parentTask,, +            ActionListener.wrap(response -> {, +                Iterator<MultiSearchResponse.Item> it = response.iterator();]