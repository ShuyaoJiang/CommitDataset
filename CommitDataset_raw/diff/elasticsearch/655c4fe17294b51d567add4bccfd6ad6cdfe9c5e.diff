[+++ b/modules/lang-groovy/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +import org.codehaus.groovy.GroovyBugError;, +import java.util.Collections;, +            } catch (final AssertionError ae) {, +                if (ae instanceof GroovyBugError) {, +                    // we encountered a bug in Groovy; we wrap this so it does not go to the uncaught exception handler and tear us down, +                    final String message =  "encountered bug in Groovy while executing script [" + compiledScript.name() + "]";, +                    throw new ScriptException(message, ae, Collections.emptyList(), compiledScript.toString(), compiledScript.lang());, +                }, +                    logger.debug((Supplier<?>) () -> new ParameterizedMessage("failed to run {}", compiledScript), ae);, +                    throw new ScriptException("error evaluating " + compiledScript.name(), ae, emptyList(), "", compiledScript.lang());, +                throw new ScriptException("error evaluating " + compiledScript.name(), e, emptyList(), "", compiledScript.lang());, +++ b/modules/lang-groovy/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +import org.codehaus.groovy.GroovyBugError;, +import java.util.Collections;, +            } catch (final AssertionError ae) {, +                if (ae instanceof GroovyBugError) {, +                    // we encountered a bug in Groovy; we wrap this so it does not go to the uncaught exception handler and tear us down, +                    final String message =  "encountered bug in Groovy while executing script [" + compiledScript.name() + "]";, +                    throw new ScriptException(message, ae, Collections.emptyList(), compiledScript.toString(), compiledScript.lang());, +                }, +                    logger.debug((Supplier<?>) () -> new ParameterizedMessage("failed to run {}", compiledScript), ae);, +                    throw new ScriptException("error evaluating " + compiledScript.name(), ae, emptyList(), "", compiledScript.lang());, +                throw new ScriptException("error evaluating " + compiledScript.name(), e, emptyList(), "", compiledScript.lang());, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovySecurityTests.java, +    public void testGroovyBugError() {, +        // this script throws a GroovyBugError because our security manager permissions prevent Groovy from accessing this private field, +        // and Groovy does not handle it gracefully; this test will likely start failing if the bug is fixed upstream so that a, +        // GroovyBugError no longer surfaces here in which case the script should be replaced with another script that intentionally, +        // surfaces a GroovyBugError, +        assertFailure("[1, 2].size", AssertionError.class);, +    }, +]