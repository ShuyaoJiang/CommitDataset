[+++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expression.java, +        public TypeResolution(String message) {, +            this(true, message);, +        }, +, +        TypeResolution(String message, Object... args) {, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expression.java, +        public TypeResolution(String message) {, +            this(true, message);, +        }, +, +        TypeResolution(String message, Object... args) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +import org.elasticsearch.xpack.sql.type.DataTypes;, +import java.util.Locale;, +    public enum ParamOrdinal {, +        DEFAULT,, +        FIRST,, +        SECOND,, +        THIRD,, +        FOURTH, +    }, +, +    public static TypeResolution typeMustBeBoolean(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, dt -> dt == DataType.BOOLEAN, operationName, paramOrd, "boolean");, +    public static TypeResolution typeMustBeInteger(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, dt -> dt.isInteger, operationName, paramOrd, "integer");, +    public static TypeResolution typeMustBeNumeric(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, DataType::isNumeric, operationName, paramOrd, "numeric");, +    }, +, +    public static TypeResolution typeMustBeString(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, DataType::isString, operationName, paramOrd, "string");, +    }, +, +    public static TypeResolution typeMustBeDate(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, dt -> dt == DataType.DATE, operationName, paramOrd, "date");, +    }, +, +    public static TypeResolution typeMustBeNumericOrDate(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, dt -> dt.isNumeric() || dt == DataType.DATE, operationName, paramOrd, "numeric", "date");, +    }, +, +    private static TypeResolution typeMustBe(Expression e,, +                                             Predicate<DataType> predicate,, +                                             String operationName,, +                                             ParamOrdinal pOrd,, +                                             String... acceptedTypes) {, +, +        return predicate.test(e.dataType()) || DataTypes.isNull(e.dataType())?, +            new TypeResolution(incorrectTypeErrorMessage(e, operationName, pOrd, acceptedTypes));, +, +    private static String incorrectTypeErrorMessage(Expression e,, +                                                    String operationName,, +                                                    ParamOrdinal paramOrd,, +                                                    String... acceptedTypes) {, +        return String.format(Locale.ROOT, "[%s]%s argument must be [%s], found value [%s] type [%s]",, +            operationName,, +            paramOrd == null || paramOrd == ParamOrdinal.DEFAULT ? "" : " " + paramOrd.name().toLowerCase(Locale.ROOT),, +            Strings.arrayToDelimitedString(acceptedTypes, " or "),, +            Expressions.name(e),, +            e.dataType().esType);, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expression.java, +        public TypeResolution(String message) {, +            this(true, message);, +        }, +, +        TypeResolution(String message, Object... args) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +import org.elasticsearch.xpack.sql.type.DataTypes;, +import java.util.Locale;, +    public enum ParamOrdinal {, +        DEFAULT,, +        FIRST,, +        SECOND,, +        THIRD,, +        FOURTH, +    }, +, +    public static TypeResolution typeMustBeBoolean(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, dt -> dt == DataType.BOOLEAN, operationName, paramOrd, "boolean");, +    public static TypeResolution typeMustBeInteger(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, dt -> dt.isInteger, operationName, paramOrd, "integer");, +    public static TypeResolution typeMustBeNumeric(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, DataType::isNumeric, operationName, paramOrd, "numeric");, +    }, +, +    public static TypeResolution typeMustBeString(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, DataType::isString, operationName, paramOrd, "string");, +    }, +, +    public static TypeResolution typeMustBeDate(Expression e, String operationName, ParamOrdinal paramOrd) {, +        return typeMustBe(e, dt -> dt == DataType.DATE, operationName, paramOrd, "date");, +    }, +, +    public static TypeResolution typeMustBeNumericOrDate(Expression e, String operationName, ParamOrdinal paramOrd) {]