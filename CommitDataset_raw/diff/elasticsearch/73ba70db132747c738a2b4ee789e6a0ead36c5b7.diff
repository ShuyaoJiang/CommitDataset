[+++ b/x-pack/plugin/data-frame/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/dataframe/integration/DataFramePivotRestIT.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +    @SuppressWarnings("unchecked"), +    public void testPreviewTransform() throws Exception {, +        final Request createPreviewRequest = new Request("POST", DATAFRAME_ENDPOINT + "_preview");, +, +        String config = "{", +            + " \"source\": \"reviews\",";, +, +        config += " \"pivot\": {", +            + "   \"group_by\": {", +            + "     \"reviewer\": {\"terms\": { \"field\": \"user_id\" }},", +            + "     \"by_day\": {\"date_histogram\": {\"interval\": \"1d\",\"field\":\"timestamp\",\"format\":\"yyyy-MM-DD\"}}},", +            + "   \"aggregations\": {", +            + "     \"avg_rating\": {", +            + "       \"avg\": {", +            + "         \"field\": \"stars\"", +            + " } } } }", +            + "}";, +        createPreviewRequest.setJsonEntity(config);, +        Map<String, Object> previewDataframeResponse = entityAsMap(client().performRequest(createPreviewRequest));, +        List<Map<String, Object>> preview = (List<Map<String, Object>>)previewDataframeResponse.get("preview");, +        assertThat(preview.size(), equalTo(393));, +        Set<String> expectedFields = new HashSet<>(Arrays.asList("reviewer", "by_day", "avg_rating"));, +        preview.forEach(p -> {, +            Set<String> keys = p.keySet();, +            assertThat(keys, equalTo(expectedFields));, +        });, +    }, +, +++ b/x-pack/plugin/data-frame/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/dataframe/integration/DataFramePivotRestIT.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +    @SuppressWarnings("unchecked"), +    public void testPreviewTransform() throws Exception {, +        final Request createPreviewRequest = new Request("POST", DATAFRAME_ENDPOINT + "_preview");, +, +        String config = "{", +            + " \"source\": \"reviews\",";, +, +        config += " \"pivot\": {", +            + "   \"group_by\": {", +            + "     \"reviewer\": {\"terms\": { \"field\": \"user_id\" }},", +            + "     \"by_day\": {\"date_histogram\": {\"interval\": \"1d\",\"field\":\"timestamp\",\"format\":\"yyyy-MM-DD\"}}},", +            + "   \"aggregations\": {", +            + "     \"avg_rating\": {", +            + "       \"avg\": {", +            + "         \"field\": \"stars\"", +            + " } } } }", +            + "}";, +        createPreviewRequest.setJsonEntity(config);, +        Map<String, Object> previewDataframeResponse = entityAsMap(client().performRequest(createPreviewRequest));, +        List<Map<String, Object>> preview = (List<Map<String, Object>>)previewDataframeResponse.get("preview");, +        assertThat(preview.size(), equalTo(393));, +        Set<String> expectedFields = new HashSet<>(Arrays.asList("reviewer", "by_day", "avg_rating"));, +        preview.forEach(p -> {, +            Set<String> keys = p.keySet();, +            assertThat(keys, equalTo(expectedFields));, +        });, +    }, +, +++ b/x-pack/plugin/data-frame/src/main/java/org/elasticsearch/xpack/dataframe/DataFrame.java, +import org.elasticsearch.xpack.dataframe.action.PreviewDataFrameTransformAction;, +import org.elasticsearch.xpack.dataframe.action.TransportPreviewDataFrameTransformAction;, +import org.elasticsearch.xpack.dataframe.rest.action.RestPreviewDataFrameTransformAction;, +                new RestGetDataFrameTransformsStatsAction(settings, restController),, +                new RestPreviewDataFrameTransformAction(settings, restController), +                new ActionHandler<>(GetDataFrameTransformsStatsAction.INSTANCE, TransportGetDataFrameTransformsStatsAction.class),, +                new ActionHandler<>(PreviewDataFrameTransformAction.INSTANCE, TransportPreviewDataFrameTransformAction.class), +++ b/x-pack/plugin/data-frame/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/dataframe/integration/DataFramePivotRestIT.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +    @SuppressWarnings("unchecked"), +    public void testPreviewTransform() throws Exception {, +        final Request createPreviewRequest = new Request("POST", DATAFRAME_ENDPOINT + "_preview");, +, +        String config = "{", +            + " \"source\": \"reviews\",";, +, +        config += " \"pivot\": {", +            + "   \"group_by\": {", +            + "     \"reviewer\": {\"terms\": { \"field\": \"user_id\" }},", +            + "     \"by_day\": {\"date_histogram\": {\"interval\": \"1d\",\"field\":\"timestamp\",\"format\":\"yyyy-MM-DD\"}}},", +            + "   \"aggregations\": {", +            + "     \"avg_rating\": {", +            + "       \"avg\": {", +            + "         \"field\": \"stars\"", +            + " } } } }", +            + "}";, +        createPreviewRequest.setJsonEntity(config);, +        Map<String, Object> previewDataframeResponse = entityAsMap(client().performRequest(createPreviewRequest));, +        List<Map<String, Object>> preview = (List<Map<String, Object>>)previewDataframeResponse.get("preview");, +        assertThat(preview.size(), equalTo(393));, +        Set<String> expectedFields = new HashSet<>(Arrays.asList("reviewer", "by_day", "avg_rating"));, +        preview.forEach(p -> {, +            Set<String> keys = p.keySet();]