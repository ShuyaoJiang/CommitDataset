[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexGateway.java, +import org.elasticsearch.common.blobstore.BlobMetaData;, +import org.elasticsearch.common.blobstore.ImmutableBlobContainer;, +import org.elasticsearch.common.collect.ImmutableMap;, +import java.io.IOException;, +, +    public ImmutableMap<String, BlobMetaData> listIndexBlobs(int shardId) throws IOException {, +        ImmutableBlobContainer indexContainer = blobStore.immutableBlobContainer(shardIndexPath(shardId));, +        return BlobStoreIndexShardGateway.aggregateParts(indexContainer.listBlobs());, +    }, +, +    public BlobPath shardPath(int shardId) {, +        return indexPath.add(Integer.toString(shardId));, +    }, +, +    public BlobPath shardIndexPath(int shardId) {, +        return shardPath(shardId).add("index");, +    }, +, +    public BlobPath shardTranslogPath(int shardId) {, +        return shardPath(shardId).add("translog");, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexGateway.java, +import org.elasticsearch.common.blobstore.BlobMetaData;, +import org.elasticsearch.common.blobstore.ImmutableBlobContainer;, +import org.elasticsearch.common.collect.ImmutableMap;, +import java.io.IOException;, +, +    public ImmutableMap<String, BlobMetaData> listIndexBlobs(int shardId) throws IOException {, +        ImmutableBlobContainer indexContainer = blobStore.immutableBlobContainer(shardIndexPath(shardId));, +        return BlobStoreIndexShardGateway.aggregateParts(indexContainer.listBlobs());, +    }, +, +    public BlobPath shardPath(int shardId) {, +        return indexPath.add(Integer.toString(shardId));, +    }, +, +    public BlobPath shardIndexPath(int shardId) {, +        return shardPath(shardId).add("index");, +    }, +, +    public BlobPath shardTranslogPath(int shardId) {, +        return shardPath(shardId).add("translog");, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import org.elasticsearch.common.blobstore.support.PlainBlobMetaData;, +        BlobStoreIndexGateway blobStoreIndexGateway = (BlobStoreIndexGateway) indexGateway;, +        this.chunkSize = blobStoreIndexGateway.chunkSize(); // can be null -> no chunking, +        this.blobStore = blobStoreIndexGateway.blobStore();, +        this.shardPath = blobStoreIndexGateway.shardPath(shardId.id());, +, +        this.indexContainer = blobStore.immutableBlobContainer(blobStoreIndexGateway.shardIndexPath(shardId.id()));, +        this.translogContainer = blobStore.appendableBlobContainer(blobStoreIndexGateway.shardTranslogPath(shardId.id()));, +    public static ImmutableMap<String, BlobMetaData> aggregateParts(ImmutableMap<String, BlobMetaData> blobs) {, +        TObjectLongHashMap<String> combined = buildCombinedPartsBlobs(blobs);, +        ImmutableMap.Builder<String, BlobMetaData> builder = ImmutableMap.builder();, +        for (TObjectLongIterator<String> it = combined.iterator(); it.hasNext();) {, +            it.advance();, +            builder.put(it.key(), new PlainBlobMetaData(it.key(), it.value()));, +        }, +        return builder.build();, +    }, +, +    private static TObjectLongHashMap<String> buildCombinedPartsBlobs(ImmutableMap<String, BlobMetaData> blobs) {]