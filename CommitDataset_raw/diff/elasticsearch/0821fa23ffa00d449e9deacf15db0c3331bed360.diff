[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.AllFieldMapper;, +            /**, +             * We rewrite _all:* to a match all query., +             * TODO: We can remove this special case when _all is completely removed., +             */, +            if ("*".equals(field) || AllFieldMapper.NAME.equals(field)) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.AllFieldMapper;, +            /**, +             * We rewrite _all:* to a match all query., +             * TODO: We can remove this special case when _all is completely removed., +             */, +            if ("*".equals(field) || AllFieldMapper.NAME.equals(field)) {, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.AllFieldMapper;, +            /**, +             * We rewrite _all:* to a match all query., +             * TODO: We can remove this special case when _all is completely removed., +             */, +            if ("*".equals(field) || AllFieldMapper.NAME.equals(field)) {, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.hamcrest.Matchers.either;, +        final AtomicInteger numUpdates = new AtomicInteger();, +            numUpdates.incrementAndGet();, +        assertThat(numUpdates.get(), either(equalTo(1)).or(equalTo(2))); // due to batching, both nodes can be handled in same CS update, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.AllFieldMapper;, +            /**, +             * We rewrite _all:* to a match all query., +             * TODO: We can remove this special case when _all is completely removed., +             */, +            if ("*".equals(field) || AllFieldMapper.NAME.equals(field)) {, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.hamcrest.Matchers.either;, +        final AtomicInteger numUpdates = new AtomicInteger();, +            numUpdates.incrementAndGet();, +        assertThat(numUpdates.get(), either(equalTo(1)).or(equalTo(2))); // due to batching, both nodes can be handled in same CS update, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +        expected = new MatchAllDocsQuery();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.AllFieldMapper;, +            /**, +             * We rewrite _all:* to a match all query., +             * TODO: We can remove this special case when _all is completely removed., +             */, +            if ("*".equals(field) || AllFieldMapper.NAME.equals(field)) {, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.hamcrest.Matchers.either;, +        final AtomicInteger numUpdates = new AtomicInteger();, +            numUpdates.incrementAndGet();, +        assertThat(numUpdates.get(), either(equalTo(1)).or(equalTo(2))); // due to batching, both nodes can be handled in same CS update, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +        expected = new MatchAllDocsQuery();, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.AllFieldMapper;, +            /**, +             * We rewrite _all:* to a match all query., +             * TODO: We can remove this special case when _all is completely removed., +             */, +            if ("*".equals(field) || AllFieldMapper.NAME.equals(field)) {, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.hamcrest.Matchers.either;, +        final AtomicInteger numUpdates = new AtomicInteger();, +            numUpdates.incrementAndGet();, +        assertThat(numUpdates.get(), either(equalTo(1)).or(equalTo(2))); // due to batching, both nodes can be handled in same CS update, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +        expected = new MatchAllDocsQuery();, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java, +            // parent test shuffles xContent, we need to make sure highlight fields are ordered, +            factory.highlighter(, +                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.AllFieldMapper;, +            /**, +             * We rewrite _all:* to a match all query., +             * TODO: We can remove this special case when _all is completely removed., +             */, +            if ("*".equals(field) || AllFieldMapper.NAME.equals(field)) {, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java]