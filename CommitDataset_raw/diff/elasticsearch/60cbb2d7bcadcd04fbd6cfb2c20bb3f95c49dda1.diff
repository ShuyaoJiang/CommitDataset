[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import java.util.Comparator;, +        // as failing primaries also fail associated replicas, we fail replicas first here so that their nodes are added to ignore list, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.shard.primary()));, +        for (FailedRerouteAllocation.FailedShard failedShard : orderedFailedShards) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import java.util.Comparator;, +        // as failing primaries also fail associated replicas, we fail replicas first here so that their nodes are added to ignore list, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.shard.primary()));, +        for (FailedRerouteAllocation.FailedShard failedShard : orderedFailedShards) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/upgrade/UpgradeIT.java, +    @Override, +    protected int maximumNumberOfReplicas() {, +        return Math.max(0, Math.min(backwardsCluster().numBackwardsDataNodes(), backwardsCluster().numNewDataNodes()) - 1);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import java.util.Comparator;, +        // as failing primaries also fail associated replicas, we fail replicas first here so that their nodes are added to ignore list, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.shard.primary()));, +        for (FailedRerouteAllocation.FailedShard failedShard : orderedFailedShards) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/upgrade/UpgradeIT.java, +    @Override, +    protected int maximumNumberOfReplicas() {, +        return Math.max(0, Math.min(backwardsCluster().numBackwardsDataNodes(), backwardsCluster().numNewDataNodes()) - 1);, +    }, +, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import java.util.Comparator;, +        // as failing primaries also fail associated replicas, we fail replicas first here so that their nodes are added to ignore list, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.shard.primary()));, +        for (FailedRerouteAllocation.FailedShard failedShard : orderedFailedShards) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/upgrade/UpgradeIT.java, +    @Override, +    protected int maximumNumberOfReplicas() {, +        return Math.max(0, Math.min(backwardsCluster().numBackwardsDataNodes(), backwardsCluster().numNewDataNodes()) - 1);, +    }, +, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +++ b/modules/lang-mustache/src/test/java/org/elasticsearch/messy/tests/SuggestSearchTests.java, +                            .field("title", "{{suggestion}}")]