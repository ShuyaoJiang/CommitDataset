[+++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.engine.EngineClosedException;, +            try {, +            } catch (EngineClosedException e) {, +                // ignore, the engine is already closed and we do not want the, +                // operation to be retried, because it has been modified, +            }, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.engine.EngineClosedException;, +            try {, +            } catch (EngineClosedException e) {, +                // ignore, the engine is already closed and we do not want the, +                // operation to be retried, because it has been modified, +            }, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.engine.EngineClosedException;, +            try {, +            } catch (EngineClosedException e) {, +                // ignore, the engine is already closed and we do not want the, +                // operation to be retried, because it has been modified, +            }, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +++ b/core/src/main/java/org/elasticsearch/action/support/single/instance/InstanceShardOperationRequest.java, +    private String concreteIndex;, +, +    public String concreteIndex() {, +        return concreteIndex;, +    }, +, +    void concreteIndex(String concreteIndex) {, +        this.concreteIndex = concreteIndex;, +    }, +, +        concreteIndex = in.readOptionalString();, +        out.writeOptionalString(concreteIndex);, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.engine.EngineClosedException;, +            try {, +            } catch (EngineClosedException e) {, +                // ignore, the engine is already closed and we do not want the, +                // operation to be retried, because it has been modified, +            }, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +++ b/core/src/main/java/org/elasticsearch/action/support/single/instance/InstanceShardOperationRequest.java, +    private String concreteIndex;, +, +    public String concreteIndex() {, +        return concreteIndex;, +    }, +, +    void concreteIndex(String concreteIndex) {, +        this.concreteIndex = concreteIndex;, +    }, +, +        concreteIndex = in.readOptionalString();, +        out.writeOptionalString(concreteIndex);, +++ b/core/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java, +    final String shardActionName;, +        this.shardActionName = actionName + "[s]";, +        transportService.registerRequestHandler(shardActionName, request, executor, new ShardTransportHandler());, +    protected abstract void shardOperation(Request request, ActionListener<Response> listener);, +    protected ClusterBlockException checkRequestBlock(ClusterState state, Request request) {, +    protected abstract boolean resolveRequest(ClusterState state, Request request, ActionListener<Response> listener);, +    protected abstract ShardIterator shards(ClusterState clusterState, Request request);, +        private final Request request;, +            this.request = request;, +            this.observer = new ClusterStateObserver(clusterService, request.timeout(), logger);, +                request.concreteIndex(indexNameExpressionResolver.concreteSingleIndex(observer.observedState(), request));]