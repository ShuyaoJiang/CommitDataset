[+++ b/src/main/java/org/elasticsearch/search/SearchService.java, +    private static final String DEFAUTL_KEEPALIVE_COMPONENENT_KEY ="default_keep_alive";, +    public static final String DEFAUTL_KEEPALIVE_KEY ="search."+DEFAUTL_KEEPALIVE_COMPONENENT_KEY;, +    private static final String KEEPALIVE_INTERVAL_COMPONENENT_KEY ="keep_alive_interval";, +    public static final String KEEPALIVE_INTERVAL_KEY ="search."+KEEPALIVE_INTERVAL_COMPONENENT_KEY;, +, +        TimeValue keepAliveInterval = componentSettings.getAsTime(KEEPALIVE_INTERVAL_COMPONENENT_KEY, timeValueMinutes(1));, +        this.defaultKeepAlive = componentSettings.getAsTime(DEFAUTL_KEEPALIVE_COMPONENENT_KEY, timeValueMinutes(5)).millis();, +    final SearchContext createAndPutContext(ShardSearchRequest request) throws ElasticsearchException {, +        SearchContext context = createContext(request, null);, +    final SearchContext createContext(ShardSearchRequest request, @Nullable Engine.Searcher searcher) throws ElasticsearchException {, +            final long time = threadPool.estimatedTimeInMillis();, +                final long lastAccessTime = context.lastAccessTime();, +++ b/src/main/java/org/elasticsearch/search/SearchService.java, +    private static final String DEFAUTL_KEEPALIVE_COMPONENENT_KEY ="default_keep_alive";, +    public static final String DEFAUTL_KEEPALIVE_KEY ="search."+DEFAUTL_KEEPALIVE_COMPONENENT_KEY;, +    private static final String KEEPALIVE_INTERVAL_COMPONENENT_KEY ="keep_alive_interval";, +    public static final String KEEPALIVE_INTERVAL_KEY ="search."+KEEPALIVE_INTERVAL_COMPONENENT_KEY;, +, +        TimeValue keepAliveInterval = componentSettings.getAsTime(KEEPALIVE_INTERVAL_COMPONENENT_KEY, timeValueMinutes(1));, +        this.defaultKeepAlive = componentSettings.getAsTime(DEFAUTL_KEEPALIVE_COMPONENENT_KEY, timeValueMinutes(5)).millis();, +    final SearchContext createAndPutContext(ShardSearchRequest request) throws ElasticsearchException {, +        SearchContext context = createContext(request, null);, +    final SearchContext createContext(ShardSearchRequest request, @Nullable Engine.Searcher searcher) throws ElasticsearchException {, +            final long time = threadPool.estimatedTimeInMillis();, +                final long lastAccessTime = context.lastAccessTime();, +++ b/src/test/java/org/elasticsearch/search/StressSearchServiceReaperTest.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search;, +, +import org.apache.lucene.util.English;, +import org.apache.lucene.util.LuceneTestCase.Slow;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Test;, +, +import java.util.concurrent.ExecutionException;, +, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;, +, +/**, + */, +@ElasticsearchIntegrationTest.ClusterScope(scope = ElasticsearchIntegrationTest.Scope.SUITE), +public class StressSearchServiceReaperTest extends ElasticsearchIntegrationTest {, +, +, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        // very frequent checks, +        return ImmutableSettings.builder().put(SearchService.KEEPALIVE_INTERVAL_KEY, TimeValue.timeValueMillis(1)).build();, +    }, +, +    @Slow, +    @Test // see issue #5165 - this test fails each time without the fix in pull #5170, +    public void testStressReaper() throws ExecutionException, InterruptedException {, +        int num = atLeast(100);, +        IndexRequestBuilder[] builders = new IndexRequestBuilder[num];, +        for (int i = 0; i < builders.length; i++) {, +            builders[i] = client().prepareIndex("test", "type", "" + i).setSource("f", English.intToEnglish(i));, +        }, +        prepareCreate("test").setSettings("number_of_shards", randomIntBetween(1,5), "number_of_replicas", randomIntBetween(0,1)).setSettings();, +        indexRandom(true, builders);, +        ensureYellow();, +        final int iterations = atLeast(500);, +        for (int i = 0; i < iterations; i++) {, +            SearchResponse searchResponse = client().prepareSearch("test").setQuery(matchAllQuery()).setSize(num).get();, +            assertNoFailures(searchResponse);, +            assertHitCount(searchResponse, num);, +        }, +    }, +}, +++ b/src/main/java/org/elasticsearch/search/SearchService.java, +    private static final String DEFAUTL_KEEPALIVE_COMPONENENT_KEY ="default_keep_alive";, +    public static final String DEFAUTL_KEEPALIVE_KEY ="search."+DEFAUTL_KEEPALIVE_COMPONENENT_KEY;, +    private static final String KEEPALIVE_INTERVAL_COMPONENENT_KEY ="keep_alive_interval";, +    public static final String KEEPALIVE_INTERVAL_KEY ="search."+KEEPALIVE_INTERVAL_COMPONENENT_KEY;, +]