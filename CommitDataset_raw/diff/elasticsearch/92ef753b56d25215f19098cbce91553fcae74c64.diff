[+++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/index/seqno/RetentionLeaseSyncAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +        return new WritePrimaryResult<>(request, new Response(), null, null, primary, getLogger());, +        return new WriteReplicaResult<>(request, null, null, replica, getLogger());, +    }, +, +    @Override, +    public ClusterBlockLevel indexBlockLevel() {, +        return null;, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/index/seqno/RetentionLeaseSyncAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +        return new WritePrimaryResult<>(request, new Response(), null, null, primary, getLogger());, +        return new WriteReplicaResult<>(request, null, null, replica, getLogger());, +    }, +, +    @Override, +    public ClusterBlockLevel indexBlockLevel() {, +        return null;, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +            public ClusterBlockLevel indexBlockLevel() {, +                public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/index/seqno/RetentionLeaseSyncAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +        return new WritePrimaryResult<>(request, new Response(), null, null, primary, getLogger());, +        return new WriteReplicaResult<>(request, null, null, replica, getLogger());, +    }, +, +    @Override, +    public ClusterBlockLevel indexBlockLevel() {, +        return null;, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +            public ClusterBlockLevel indexBlockLevel() {, +                public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationAllPermitsAcquisitionTests.java, +        public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +    public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/main/java/org/elasticsearch/index/seqno/RetentionLeaseSyncAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +        return new WritePrimaryResult<>(request, new Response(), null, null, primary, getLogger());, +        return new WriteReplicaResult<>(request, null, null, replica, getLogger());, +    }, +, +    @Override, +    public ClusterBlockLevel indexBlockLevel() {, +        return null;, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +            public ClusterBlockLevel indexBlockLevel() {, +                public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationAllPermitsAcquisitionTests.java, +        public ClusterBlockLevel indexBlockLevel() {, +++ b/server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java, +    public void testBlocks() {, +        final IndicesService indicesService = mock(IndicesService.class);, +, +        final Index index = new Index("index", "uuid");, +        final IndexService indexService = mock(IndexService.class);, +        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);, +, +        final int id = randomIntBetween(0, 4);, +        final IndexShard indexShard = mock(IndexShard.class);, +        when(indexService.getShard(id)).thenReturn(indexShard);, +, +        final ShardId shardId = new ShardId(index, id);, +        when(indexShard.shardId()).thenReturn(shardId);, +]