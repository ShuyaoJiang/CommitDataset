[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.store.FsDirectoryService;, +        FsDirectoryService.INDEX_LOCK_FACTOR_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.store.FsDirectoryService;, +        FsDirectoryService.INDEX_LOCK_FACTOR_SETTING,, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +                dirs[i] = new SimpleFSDirectory(p, indexSettings.getValue(FsDirectoryService.INDEX_LOCK_FACTOR_SETTING));, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.store.FsDirectoryService;, +        FsDirectoryService.INDEX_LOCK_FACTOR_SETTING,, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +                dirs[i] = new SimpleFSDirectory(p, indexSettings.getValue(FsDirectoryService.INDEX_LOCK_FACTOR_SETTING));, +++ b/core/src/main/java/org/elasticsearch/index/store/FsDirectoryService.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<LockFactory> INDEX_LOCK_FACTOR_SETTING = new Setting<>("index.store.fs.fs_lock", "native", (s) -> {, +        switch (s) {, +            case "native":, +                return NativeFSLockFactory.INSTANCE;, +            case "simple":, +                return SimpleFSLockFactory.INSTANCE;, +            default:, +                throw new IllegalArgumentException("unrecognized [index.store.fs.fs_lock] \"" + s + "\": must be native or simple");, +        }, +    }, false, Setting.Scope.INDEX);, +        Directory wrapped = newFSDirectory(location, indexSettings.getValue(INDEX_LOCK_FACTOR_SETTING));, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.store.FsDirectoryService;, +        FsDirectoryService.INDEX_LOCK_FACTOR_SETTING,, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +                dirs[i] = new SimpleFSDirectory(p, indexSettings.getValue(FsDirectoryService.INDEX_LOCK_FACTOR_SETTING));, +++ b/core/src/main/java/org/elasticsearch/index/store/FsDirectoryService.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<LockFactory> INDEX_LOCK_FACTOR_SETTING = new Setting<>("index.store.fs.fs_lock", "native", (s) -> {, +        switch (s) {, +            case "native":, +                return NativeFSLockFactory.INSTANCE;, +            case "simple":, +                return SimpleFSLockFactory.INSTANCE;, +            default:, +                throw new IllegalArgumentException("unrecognized [index.store.fs.fs_lock] \"" + s + "\": must be native or simple");, +        }, +    }, false, Setting.Scope.INDEX);, +        Directory wrapped = newFSDirectory(location, indexSettings.getValue(INDEX_LOCK_FACTOR_SETTING));, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.InternalSettingsPlugin;, +import java.util.Collection;, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return pluginList(InternalSettingsPlugin.class);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.store.FsDirectoryService;, +        FsDirectoryService.INDEX_LOCK_FACTOR_SETTING,, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +                dirs[i] = new SimpleFSDirectory(p, indexSettings.getValue(FsDirectoryService.INDEX_LOCK_FACTOR_SETTING));, +++ b/core/src/main/java/org/elasticsearch/index/store/FsDirectoryService.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<LockFactory> INDEX_LOCK_FACTOR_SETTING = new Setting<>("index.store.fs.fs_lock", "native", (s) -> {, +        switch (s) {, +            case "native":, +                return NativeFSLockFactory.INSTANCE;, +            case "simple":, +                return SimpleFSLockFactory.INSTANCE;, +            default:, +                throw new IllegalArgumentException("unrecognized [index.store.fs.fs_lock] \"" + s + "\": must be native or simple");, +        }, +    }, false, Setting.Scope.INDEX);, +        Directory wrapped = newFSDirectory(location, indexSettings.getValue(INDEX_LOCK_FACTOR_SETTING));, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.InternalSettingsPlugin;, +import java.util.Collection;, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return pluginList(InternalSettingsPlugin.class);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java, +import org.elasticsearch.test.store.MockFSIndexStore;, +        return pluginList(MockTransportService.TestPlugin.class, MockFSIndexStore.TestPlugin.class);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.store.FsDirectoryService;, +        FsDirectoryService.INDEX_LOCK_FACTOR_SETTING,, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +                dirs[i] = new SimpleFSDirectory(p, indexSettings.getValue(FsDirectoryService.INDEX_LOCK_FACTOR_SETTING));, +++ b/core/src/main/java/org/elasticsearch/index/store/FsDirectoryService.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<LockFactory> INDEX_LOCK_FACTOR_SETTING = new Setting<>("index.store.fs.fs_lock", "native", (s) -> {, +        switch (s) {, +            case "native":, +                return NativeFSLockFactory.INSTANCE;, +            case "simple":, +                return SimpleFSLockFactory.INSTANCE;, +            default:, +                throw new IllegalArgumentException("unrecognized [index.store.fs.fs_lock] \"" + s + "\": must be native or simple");]