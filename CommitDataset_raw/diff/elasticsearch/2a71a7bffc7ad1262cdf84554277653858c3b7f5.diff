[+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregationBuilder.java, +import org.elasticsearch.join.mapper.ParentIdFieldMapper;, +import org.elasticsearch.join.mapper.ParentJoinFieldMapper;, +        if (context.mapperService().getIndexSettings().isSingleType()) {, +            joinFieldResolveConfig(context, config);, +        } else {, +            parentFieldResolveConfig(context, config);, +        }, +        return config;, +    }, +    private void joinFieldResolveConfig(SearchContext context, ValuesSourceConfig<WithOrdinals> config) {, +        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(context.mapperService());, +        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);, +        if (parentIdFieldMapper != null) {, +            parentFilter = parentIdFieldMapper.getParentFilter();, +            childFilter = parentIdFieldMapper.getChildFilter(childType);, +            MappedFieldType fieldType = parentIdFieldMapper.fieldType();, +            final SortedSetDVOrdinalsIndexFieldData fieldData = context.fieldData().getForField(fieldType);, +            config.fieldContext(new FieldContext(fieldType.name(), fieldData, fieldType));, +        } else {, +            config.unmapped(true);, +        }, +    }, +, +    private void parentFieldResolveConfig(SearchContext context, ValuesSourceConfig<WithOrdinals> config) {, +        DocumentMapper childDocMapper = context.mapperService().documentMapper(childType);, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregationBuilder.java, +import org.elasticsearch.join.mapper.ParentIdFieldMapper;, +import org.elasticsearch.join.mapper.ParentJoinFieldMapper;, +        if (context.mapperService().getIndexSettings().isSingleType()) {, +            joinFieldResolveConfig(context, config);, +        } else {, +            parentFieldResolveConfig(context, config);, +        }, +        return config;, +    }, +    private void joinFieldResolveConfig(SearchContext context, ValuesSourceConfig<WithOrdinals> config) {, +        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(context.mapperService());, +        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);, +        if (parentIdFieldMapper != null) {, +            parentFilter = parentIdFieldMapper.getParentFilter();, +            childFilter = parentIdFieldMapper.getChildFilter(childType);, +            MappedFieldType fieldType = parentIdFieldMapper.fieldType();, +            final SortedSetDVOrdinalsIndexFieldData fieldData = context.fieldData().getForField(fieldType);, +            config.fieldContext(new FieldContext(fieldType.name(), fieldData, fieldType));, +        } else {, +            config.unmapped(true);, +        }, +    }, +, +    private void parentFieldResolveConfig(SearchContext context, ValuesSourceConfig<WithOrdinals> config) {, +        DocumentMapper childDocMapper = context.mapperService().documentMapper(childType);, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/MetaJoinFieldMapper.java, +public class MetaJoinFieldMapper extends FieldMapper {, +    public static class MetaJoinFieldType extends StringFieldType {, +, +        private ParentJoinFieldMapper mapper;, +, +        public ParentJoinFieldMapper getMapper() {, +            return mapper;, +        }, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregationBuilder.java, +import org.elasticsearch.join.mapper.ParentIdFieldMapper;, +import org.elasticsearch.join.mapper.ParentJoinFieldMapper;, +        if (context.mapperService().getIndexSettings().isSingleType()) {, +            joinFieldResolveConfig(context, config);, +        } else {, +            parentFieldResolveConfig(context, config);, +        }, +        return config;, +    }, +    private void joinFieldResolveConfig(SearchContext context, ValuesSourceConfig<WithOrdinals> config) {, +        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(context.mapperService());, +        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);, +        if (parentIdFieldMapper != null) {, +            parentFilter = parentIdFieldMapper.getParentFilter();, +            childFilter = parentIdFieldMapper.getChildFilter(childType);, +            MappedFieldType fieldType = parentIdFieldMapper.fieldType();, +            final SortedSetDVOrdinalsIndexFieldData fieldData = context.fieldData().getForField(fieldType);, +            config.fieldContext(new FieldContext(fieldType.name(), fieldData, fieldType));, +        } else {, +            config.unmapped(true);, +        }, +    }, +, +    private void parentFieldResolveConfig(SearchContext context, ValuesSourceConfig<WithOrdinals> config) {, +        DocumentMapper childDocMapper = context.mapperService().documentMapper(childType);, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/MetaJoinFieldMapper.java, +public class MetaJoinFieldMapper extends FieldMapper {, +    public static class MetaJoinFieldType extends StringFieldType {, +, +        private ParentJoinFieldMapper mapper;, +, +        public ParentJoinFieldMapper getMapper() {, +            return mapper;, +        }, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentIdFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;]