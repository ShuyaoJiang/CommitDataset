[+++ b/src/main/java/org/elasticsearch/index/cache/id/IdCache.java, + * This id cache contains only the ids of parent documents, loaded via the uid or parent field., + * This name IdCache is misleading, parentIdCache would be a better name., +++ b/src/main/java/org/elasticsearch/index/cache/id/IdCache.java, + * This id cache contains only the ids of parent documents, loaded via the uid or parent field., + * This name IdCache is misleading, parentIdCache would be a better name., +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                // We don't want to load uid of child documents, this allows us to not load uids of child types., +                Set<HashedBytesArray> parentTypes = new HashSet<HashedBytesArray>();, +                for (String type : indexService.mapperService().types()) {, +                    ParentFieldMapper parentFieldMapper = indexService.mapperService().documentMapper(type).parentFieldMapper();, +                    if (parentFieldMapper != null) {, +                        parentTypes.add(new HashedBytesArray(parentFieldMapper.type()));, +                    }, +                }, +, +                            // TODO: seek!, +                            if (!parentTypes.contains(typeAndId[0])) {, +                                continue;, +                            }, +, +                            String type = typeAndId[0].toUtf8();, +                            TypeBuilder typeBuilder = readerBuilder.get(type);, +                                readerBuilder.put(type, typeBuilder);, +++ b/src/main/java/org/elasticsearch/index/cache/id/IdCache.java, + * This id cache contains only the ids of parent documents, loaded via the uid or parent field., + * This name IdCache is misleading, parentIdCache would be a better name., +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                // We don't want to load uid of child documents, this allows us to not load uids of child types., +                Set<HashedBytesArray> parentTypes = new HashSet<HashedBytesArray>();, +                for (String type : indexService.mapperService().types()) {, +                    ParentFieldMapper parentFieldMapper = indexService.mapperService().documentMapper(type).parentFieldMapper();, +                    if (parentFieldMapper != null) {, +                        parentTypes.add(new HashedBytesArray(parentFieldMapper.type()));, +                    }, +                }, +, +                            // TODO: seek!, +                            if (!parentTypes.contains(typeAndId[0])) {, +                                continue;, +                            }, +, +                            String type = typeAndId[0].toUtf8();, +                            TypeBuilder typeBuilder = readerBuilder.get(type);, +                                readerBuilder.put(type, typeBuilder);, +++ b/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java, +        client.admin().cluster().prepareHealth(indexName).setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +        System.gc();]