[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobDataDeleter.java, +import org.elasticsearch.action.support.IndicesOptions;, +                .setIndicesOptions(IndicesOptions.lenientExpandOpen()), +            searchResponse = client.prepareSearchScroll(searchResponse.getScrollId()).setScroll(SCROLL_CONTEXT_DURATION).get();, +        }, +, +        clearScroll(searchResponse.getScrollId());, +    }, +, +    private void clearScroll(String scrollId) {, +        try {, +            client.prepareClearScroll().addScrollId(scrollId).get();, +        } catch (Exception e) {, +            LOGGER.warn("[{}] Error while clearing scroll with id [{}]", jobId, scrollId);, +                clearScroll(searchResponse.getScrollId());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobDataDeleter.java, +import org.elasticsearch.action.support.IndicesOptions;, +                .setIndicesOptions(IndicesOptions.lenientExpandOpen()), +            searchResponse = client.prepareSearchScroll(searchResponse.getScrollId()).setScroll(SCROLL_CONTEXT_DURATION).get();, +        }, +, +        clearScroll(searchResponse.getScrollId());, +    }, +, +    private void clearScroll(String scrollId) {, +        try {, +            client.prepareClearScroll().addScrollId(scrollId).get();, +        } catch (Exception e) {, +            LOGGER.warn("[{}] Error while clearing scroll with id [{}]", jobId, scrollId);, +                clearScroll(searchResponse.getScrollId());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java, +            this.deleteInterimRequired = true;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobDataDeleter.java, +import org.elasticsearch.action.support.IndicesOptions;, +                .setIndicesOptions(IndicesOptions.lenientExpandOpen()), +            searchResponse = client.prepareSearchScroll(searchResponse.getScrollId()).setScroll(SCROLL_CONTEXT_DURATION).get();, +        }, +, +        clearScroll(searchResponse.getScrollId());, +    }, +, +    private void clearScroll(String scrollId) {, +        try {, +            client.prepareClearScroll().addScrollId(scrollId).get();, +        } catch (Exception e) {, +            LOGGER.warn("[{}] Error while clearing scroll with id [{}]", jobId, scrollId);, +                clearScroll(searchResponse.getScrollId());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java, +            this.deleteInterimRequired = true;, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/InterimResultsDeletedAfterReopeningJobIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.xpack.ml.job.config.AnalysisConfig;, +import org.elasticsearch.xpack.ml.job.config.DataDescription;, +import org.elasticsearch.xpack.ml.job.config.Detector;, +import org.elasticsearch.xpack.ml.job.config.Job;, +import org.elasticsearch.xpack.ml.job.persistence.AnomalyDetectorsIndex;, +import org.elasticsearch.xpack.ml.job.results.AnomalyRecord;, +import org.junit.After;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.stream.Collectors;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +, +/**, + * This tests that interim results created before a job was reopened get, + * deleted after new buckets are created., + */, +public class InterimResultsDeletedAfterReopeningJobIT extends MlNativeAutodetectIntegTestCase {, +, +    @After, +    public void cleanUpTest() throws Exception {, +        cleanUp();, +    }, +, +    public void test() throws Exception {, +        Detector.Builder detector = new Detector.Builder("mean", "value");, +        detector.setByFieldName("by_field");, +, +        AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(, +                Arrays.asList(detector.build()));, +        analysisConfig.setBucketSpan(TimeValue.timeValueHours(1));, +        DataDescription.Builder dataDescription = new DataDescription.Builder();, +        Job.Builder job = new Job.Builder("interim-results-deleted-after-reopening-job-test");]