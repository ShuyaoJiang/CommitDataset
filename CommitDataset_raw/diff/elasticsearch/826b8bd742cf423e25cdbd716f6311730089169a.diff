[+++ b/src/main/java/org/elasticsearch/common/util/BloomFilter.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.util;, +, +import com.google.common.math.LongMath;, +import com.google.common.primitives.Ints;, +import org.apache.lucene.store.DataInput;, +import org.apache.lucene.store.DataOutput;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.unit.SizeValue;, +, +import java.io.IOException;, +import java.math.RoundingMode;, +import java.util.Arrays;, +import java.util.Comparator;, +, +/**, + * A bloom filter. Inspired by Guava bloom filter implementation though with some optimizations., + */, +public class BloomFilter {, +, +    /**, +     * A factory that can use different fpp based on size., +     */, +    public static class Factory {, +, +        public static final Factory DEFAULT = buildDefault();, +, +        private static Factory buildDefault() {, +            // Some numbers:, +            // 10k =0.001: 140.4kb  , 10 Hashes, +            // 10k =0.01 :  93.6kb  ,  6 Hashes, +            // 100k=0.01 : 936.0kb  ,  6 Hashes, +            // 100k=0.03 : 712.7kb  ,  5 Hashes, +            // 500k=0.01 :   4.5mb  ,  6 Hashes, +            // 500k=0.03 :   3.4mb  ,  5 Hashes, +            // 500k=0.05 :   2.9mb  ,  4 Hashes, +            //   1m=0.01 :   9.1mb  ,  6 Hashes, +            //   1m=0.03 :   6.9mb  ,  5 Hashes, +            //   1m=0.05 :   5.9mb  ,  4 Hashes, +            //   5m=0.01 :  45.7mb  ,  6 Hashes, +            //   5m=0.03 :  34.8mb  ,  5 Hashes, +            //   5m=0.05 :  29.7mb  ,  4 Hashes, +            //  50m=0.01 : 457.0mb  ,  6 Hashes, +            //  50m=0.03 : 297.3mb  ,  4 Hashes, +            //  50m=0.10 : 228.5mb  ,  3 Hashes, +            return buildFromString("10k=0.01,1m=0.03");, +        }, +, +        /**, +         * Supports just passing fpp, as in "0.01", and also ranges, like "50k=0.01,1m=0.05". If, +         * its null, returns {@link #buildDefault()}., +         */, +        public static Factory buildFromString(@Nullable String config) {, +            if (config == null) {, +                return buildDefault();, +            }, +            String[] sEntries = Strings.splitStringToArray(config, ',');, +            if (sEntries.length == 0) {, +                if (config.length() > 0) {, +                    return new Factory(new Entry[]{new Entry(0, Double.parseDouble(config))});, +                }, +                return buildDefault();, +            }, +            Entry[] entries = new Entry[sEntries.length];, +            for (int i = 0; i < sEntries.length; i++) {, +                int index = sEntries[i].indexOf('=');, +                entries[i] = new Entry(, +                        (int) SizeValue.parseSizeValue(sEntries[i].substring(0, index).trim()).singles(),, +                        Double.parseDouble(sEntries[i].substring(index + 1).trim()), +                );, +            }, +            return new Factory(entries);, +        }, +, +        private final Entry[] entries;, +, +        public Factory(Entry[] entries) {, +            this.entries = entries;, +            // the order is from the upper most expected insertions to the lowest]