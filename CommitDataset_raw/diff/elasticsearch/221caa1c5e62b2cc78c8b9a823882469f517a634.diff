[+++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.net.SocketPermission;, +import java.net.URL;, +import java.util.function.Predicate;, +    /**, +     * Wraps a bad default permission, applying a pre-implies to any permissions before checking if the wrapped bad default permission, +     * implies a permission., +     */, +    private static class BadDefaultPermission extends Permission {, +, +        private final Permission badDefaultPermission;, +        private final Predicate<Permission> preImplies;, +, +        /**, +         * Construct an instance with a pre-implies check to apply to desired permissions., +         *, +         * @param badDefaultPermission the bad default permission to wrap, +         * @param preImplies           a test that is applied to a desired permission before checking if the bad default permission that, +         *                             this instance wraps implies the desired permission, +         */, +        public BadDefaultPermission(final Permission badDefaultPermission, final Predicate<Permission> preImplies) {, +            super(badDefaultPermission.getName());, +            this.badDefaultPermission = badDefaultPermission;, +            this.preImplies = preImplies;, +        }, +, +        @Override, +        public final boolean implies(Permission permission) {, +            return preImplies.test(permission) && badDefaultPermission.implies(permission);, +        }, +, +        @Override, +        public final boolean equals(Object obj) {, +            return badDefaultPermission.equals(obj);, +        }, +, +        @Override, +        public int hashCode() {, +            return badDefaultPermission.hashCode();, +        }, +, +        @Override, +        public String getActions() {, +            return badDefaultPermission.getActions();, +        }, +, +    }, +, +    private static final Permission BAD_DEFAULT_NUMBER_ONE = new BadDefaultPermission(new RuntimePermission("stopThread"), p -> true);, +    private static final Permission BAD_DEFAULT_NUMBER_TWO =, +        new BadDefaultPermission(, +            new SocketPermission("localhost:0", "listen"),, +            // we apply this pre-implies test because some SocketPermission#implies calls do expensive reverse-DNS resolves, +            p -> p instanceof SocketPermission && p.getActions().contains("listen"));, +            if (BAD_DEFAULT_NUMBER_ONE.implies(permission) || BAD_DEFAULT_NUMBER_TWO.implies(permission)) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.net.SocketPermission;, +import java.net.URL;, +import java.util.function.Predicate;, +    /**, +     * Wraps a bad default permission, applying a pre-implies to any permissions before checking if the wrapped bad default permission, +     * implies a permission., +     */, +    private static class BadDefaultPermission extends Permission {, +, +        private final Permission badDefaultPermission;, +        private final Predicate<Permission> preImplies;, +, +        /**, +         * Construct an instance with a pre-implies check to apply to desired permissions., +         *, +         * @param badDefaultPermission the bad default permission to wrap, +         * @param preImplies           a test that is applied to a desired permission before checking if the bad default permission that, +         *                             this instance wraps implies the desired permission, +         */, +        public BadDefaultPermission(final Permission badDefaultPermission, final Predicate<Permission> preImplies) {, +            super(badDefaultPermission.getName());, +            this.badDefaultPermission = badDefaultPermission;, +            this.preImplies = preImplies;, +        }, +, +        @Override, +        public final boolean implies(Permission permission) {, +            return preImplies.test(permission) && badDefaultPermission.implies(permission);, +        }, +, +        @Override, +        public final boolean equals(Object obj) {, +            return badDefaultPermission.equals(obj);, +        }, +, +        @Override, +        public int hashCode() {, +            return badDefaultPermission.hashCode();, +        }, +, +        @Override, +        public String getActions() {, +            return badDefaultPermission.getActions();, +        }]