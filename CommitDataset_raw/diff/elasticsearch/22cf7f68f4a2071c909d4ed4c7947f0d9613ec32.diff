[+++ b/src/main/java/org/elasticsearch/alerts/scheduler/AlertScheduler.java, +            if (scheduler != null) {, +            }, +++ b/src/main/java/org/elasticsearch/alerts/scheduler/AlertScheduler.java, +            if (scheduler != null) {, +            }, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/delete/DeleteAlertRequest.java, +public class DeleteAlertRequest extends MasterNodeOperationRequest<DeleteAlertRequest> {, +    private long version = Versions.MATCH_ANY;, +    DeleteAlertRequest() {, +    public String getAlertName() {, +        return alertName;, +    }, +, +    public void setAlertName(String alertName) {, +    /**, +     * Sets the version, which will cause the delete operation to only be performed if a matching, +     * version exists and no changes happened on the doc since then., +     */, +    public long getVersion() {, +        return version;, +    }, +, +    public void setVersion(long version) {, +        this.version = version;, +        alertName = in.readString();, +        out.writeString(alertName);, +++ b/src/main/java/org/elasticsearch/alerts/scheduler/AlertScheduler.java, +            if (scheduler != null) {, +            }, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/delete/DeleteAlertRequest.java, +public class DeleteAlertRequest extends MasterNodeOperationRequest<DeleteAlertRequest> {, +    private long version = Versions.MATCH_ANY;, +    DeleteAlertRequest() {, +    public String getAlertName() {, +        return alertName;, +    }, +, +    public void setAlertName(String alertName) {, +    /**, +     * Sets the version, which will cause the delete operation to only be performed if a matching, +     * version exists and no changes happened on the doc since then., +     */, +    public long getVersion() {, +        return version;, +    }, +, +    public void setVersion(long version) {, +        this.version = version;, +        alertName = in.readString();, +        out.writeString(alertName);, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/delete/DeleteAlertRequestBuilder.java, +        this.request().setAlertName(alertName);, +++ b/src/main/java/org/elasticsearch/alerts/scheduler/AlertScheduler.java, +            if (scheduler != null) {, +            }, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/delete/DeleteAlertRequest.java, +public class DeleteAlertRequest extends MasterNodeOperationRequest<DeleteAlertRequest> {, +    private long version = Versions.MATCH_ANY;, +    DeleteAlertRequest() {, +    public String getAlertName() {, +        return alertName;, +    }, +, +    public void setAlertName(String alertName) {, +    /**, +     * Sets the version, which will cause the delete operation to only be performed if a matching, +     * version exists and no changes happened on the doc since then., +     */, +    public long getVersion() {, +        return version;, +    }, +, +    public void setVersion(long version) {, +        this.version = version;, +        alertName = in.readString();, +        out.writeString(alertName);, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/delete/DeleteAlertRequestBuilder.java, +        this.request().setAlertName(alertName);, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/delete/TransportDeleteAlertAction.java, +            listener.onResponse(new DeleteAlertResponse(alertManager.deleteAlert(request.getAlertName())));, +++ b/src/main/java/org/elasticsearch/alerts/scheduler/AlertScheduler.java, +            if (scheduler != null) {, +            }, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/delete/DeleteAlertRequest.java, +public class DeleteAlertRequest extends MasterNodeOperationRequest<DeleteAlertRequest> {, +    private long version = Versions.MATCH_ANY;, +    DeleteAlertRequest() {, +    public String getAlertName() {, +        return alertName;, +    }, +, +    public void setAlertName(String alertName) {, +    /**, +     * Sets the version, which will cause the delete operation to only be performed if a matching, +     * version exists and no changes happened on the doc since then., +     */, +    public long getVersion() {, +        return version;, +    }]