[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityContext.java, +import org.elasticsearch.Version;, +    void setUser(User user, Version version) {, +                    new Authentication(user, new Authentication.RealmRef("__attach", "__attach", nodeName), lookedUpBy, version);, +    public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {, +            setUser(user, version);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityContext.java, +import org.elasticsearch.Version;, +    void setUser(User user, Version version) {, +                    new Authentication(user, new Authentication.RealmRef("__attach", "__attach", nodeName), lookedUpBy, version);, +    public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {, +            setUser(user, version);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +import org.elasticsearch.Version;, +                    }, Version.CURRENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityContext.java, +import org.elasticsearch.Version;, +    void setUser(User user, Version version) {, +                    new Authentication(user, new Authentication.RealmRef("__attach", "__attach", nodeName), lookedUpBy, version);, +    public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {, +            setUser(user, version);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +import org.elasticsearch.Version;, +                    }, Version.CURRENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/Authentication.java, +        this(user, authenticatedBy, lookedUpBy, Version.CURRENT);, +    }, +, +    public Authentication(User user, RealmRef authenticatedBy, RealmRef lookedUpBy, Version version) {, +        this.version = version;, +        Version.writeVersion(version, output);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityContext.java, +import org.elasticsearch.Version;, +    void setUser(User user, Version version) {, +                    new Authentication(user, new Authentication.RealmRef("__attach", "__attach", nodeName), lookedUpBy, version);, +    public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {, +            setUser(user, version);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +import org.elasticsearch.Version;, +                    }, Version.CURRENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/Authentication.java, +        this(user, authenticatedBy, lookedUpBy, Version.CURRENT);, +    }, +, +    public Authentication(User user, RealmRef authenticatedBy, RealmRef lookedUpBy, Version version) {, +        this.version = version;, +        Version.writeVersion(version, output);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java, +                                        , handler), sender), connection.getVersion());, +                                        handler), sender), connection.getVersion());, +                    } else if (securityContext.getAuthentication() != null &&, +                            securityContext.getAuthentication().getVersion().equals(connection.getVersion()) == false) {, +                        // re-write the authentication since we want the authentication version to match the version of the connection, +                        securityContext.executeAsUser(securityContext.getUser(),, +                                (original) -> sendWithUser(connection, action, request, options,, +                                    new TransportService.ContextRestoreResponseHandler<>(, +                                            threadPool.getThreadContext().wrapRestorable(original), handler), sender),, +                                    connection.getVersion());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityContext.java, +import org.elasticsearch.Version;, +    void setUser(User user, Version version) {, +                    new Authentication(user, new Authentication.RealmRef("__attach", "__attach", nodeName), lookedUpBy, version);, +    public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {, +            setUser(user, version);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +import org.elasticsearch.Version;, +                    }, Version.CURRENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/Authentication.java, +        this(user, authenticatedBy, lookedUpBy, Version.CURRENT);, +    }, +, +    public Authentication(User user, RealmRef authenticatedBy, RealmRef lookedUpBy, Version version) {, +        this.version = version;, +        Version.writeVersion(version, output);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java, +                                        , handler), sender), connection.getVersion());, +                                        handler), sender), connection.getVersion());, +                    } else if (securityContext.getAuthentication() != null &&, +                            securityContext.getAuthentication().getVersion().equals(connection.getVersion()) == false) {, +                        // re-write the authentication since we want the authentication version to match the version of the connection, +                        securityContext.executeAsUser(securityContext.getUser(),, +                                (original) -> sendWithUser(connection, action, request, options,, +                                    new TransportService.ContextRestoreResponseHandler<>(, +                                            threadPool.getThreadContext().wrapRestorable(original), handler), sender),, +                                    connection.getVersion());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/transport/ServerTransportFilter.java, +                            }, transportChannel.getVersion());, +                        }, transportChannel.getVersion());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityContext.java, +import org.elasticsearch.Version;, +    void setUser(User user, Version version) {, +                    new Authentication(user, new Authentication.RealmRef("__attach", "__attach", nodeName), lookedUpBy, version);, +    public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {, +            setUser(user, version);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +import org.elasticsearch.Version;, +                    }, Version.CURRENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/Authentication.java, +        this(user, authenticatedBy, lookedUpBy, Version.CURRENT);, +    }]