[+++ b/pom.xml, +            <version>2.0.5</version>, +            <groupId>com.fasterxml.jackson.dataformat</groupId>, +            <artifactId>jackson-dataformat-yaml</artifactId>, +            <version>2.0.5</version>, +                            <include>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</include>, +++ b/pom.xml, +            <version>2.0.5</version>, +            <groupId>com.fasterxml.jackson.dataformat</groupId>, +            <artifactId>jackson-dataformat-yaml</artifactId>, +            <version>2.0.5</version>, +                            <include>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</include>, +++ b/src/main/java/org/elasticsearch/common/settings/loader/JsonSettingsLoader.java, +public class JsonSettingsLoader extends XContentSettingsLoader {, +    public XContentType contentType() {, +        return XContentType.JSON;, +++ b/pom.xml, +            <version>2.0.5</version>, +            <groupId>com.fasterxml.jackson.dataformat</groupId>, +            <artifactId>jackson-dataformat-yaml</artifactId>, +            <version>2.0.5</version>, +                            <include>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</include>, +++ b/src/main/java/org/elasticsearch/common/settings/loader/JsonSettingsLoader.java, +public class JsonSettingsLoader extends XContentSettingsLoader {, +    public XContentType contentType() {, +        return XContentType.JSON;, +++ b/src/main/java/org/elasticsearch/common/settings/loader/XContentSettingsLoader.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.settings.loader;, +, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.Map;, +, +import static com.google.common.collect.Lists.newArrayList;, +import static com.google.common.collect.Maps.newHashMap;, +, +/**, + * Settings loader that loads (parses) the settings in a xcontent format by flattening them, + * into a map., + */, +public abstract class XContentSettingsLoader implements SettingsLoader {, +, +    public abstract XContentType contentType();, +, +    @Override, +    public Map<String, String> load(String source) throws IOException {, +        XContentParser parser = XContentFactory.xContent(contentType()).createParser(source);, +        try {, +            return load(parser);, +        } finally {, +            parser.close();, +        }, +    }, +, +    @Override, +    public Map<String, String> load(byte[] source) throws IOException {, +        XContentParser parser = XContentFactory.xContent(contentType()).createParser(source);, +        try {, +            return load(parser);, +        } finally {, +            parser.close();, +        }, +    }, +, +    public Map<String, String> load(XContentParser jp) throws IOException {, +        StringBuilder sb = new StringBuilder();, +        Map<String, String> settings = newHashMap();, +        List<String> path = newArrayList();, +        XContentParser.Token token = jp.nextToken();, +        if (token == null) {, +            return settings;, +        }, +        serializeObject(settings, sb, path, jp, null);, +        return settings;, +    }, +, +    private void serializeObject(Map<String, String> settings, StringBuilder sb, List<String> path, XContentParser parser, String objFieldName) throws IOException {]