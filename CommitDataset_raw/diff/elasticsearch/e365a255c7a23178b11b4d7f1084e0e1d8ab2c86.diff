[+++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/GetDatafeedsStatsAction.java, +                        if (entry.getKey().startsWith("ml.")) {, +                    }, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/GetDatafeedsStatsAction.java, +                        if (entry.getKey().startsWith("ml.")) {, +                    }, +++ b/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDatafeedStatsActionResponseTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.io.IOException;, +import java.util.EnumSet;, +import java.util.HashMap;, +import java.util.Map;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.hasEntry;, +import static org.hamcrest.Matchers.hasKey;, +import static org.hamcrest.Matchers.is;, +    @SuppressWarnings("unchecked"), +    public void testDatafeedStatsToXContent() throws IOException {, +        Map<String, String> attributes = new HashMap<>();, +        attributes.put("ml.enabled", "true");, +        attributes.put("ml.max_open_jobs", "5");, +        attributes.put("non-ml-attribute", "should be filtered out");, +        TransportAddress transportAddress = new TransportAddress(TransportAddress.META_ADDRESS, 9000);, +, +        DiscoveryNode node = new DiscoveryNode("df-node-name", "df-node-id", transportAddress, attributes,, +                EnumSet.noneOf(DiscoveryNode.Role.class),, +                Version.CURRENT);, +, +        Response.DatafeedStats stats = new Response.DatafeedStats("df-id", DatafeedState.STARTED, node, null);, +, +        XContentType xContentType = randomFrom(XContentType.values());, +        BytesReference bytes;, +        try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {, +            stats.toXContent(builder, ToXContent.EMPTY_PARAMS);, +            bytes = builder.bytes();, +        }, +, +        Map<String, Object> dfStatsMap = XContentHelper.convertToMap(bytes, randomBoolean(), xContentType).v2();, +, +        assertThat(dfStatsMap.size(), is(equalTo(3)));, +        assertThat(dfStatsMap, hasEntry("datafeed_id", "df-id"));, +        assertThat(dfStatsMap, hasEntry("state", "started"));, +        assertThat(dfStatsMap, hasKey("node"));, +, +        Map<String, Object> nodeMap = (Map<String, Object>) dfStatsMap.get("node");, +        assertThat(nodeMap, hasEntry("id", "df-node-id"));, +        assertThat(nodeMap, hasEntry("name", "df-node-name"));, +        assertThat(nodeMap, hasKey("ephemeral_id"));, +        assertThat(nodeMap, hasKey("transport_address"));, +        assertThat(nodeMap, hasKey("attributes"));, +, +        Map<String, Object> nodeAttributes = (Map<String, Object>) nodeMap.get("attributes");, +        assertThat(nodeAttributes.size(), is(equalTo(2)));, +        assertThat(nodeAttributes, hasEntry("ml.enabled", "true"));, +        assertThat(nodeAttributes, hasEntry("ml.max_open_jobs", "5"));, +    }]