[+++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +            if (logger.isTraceEnabled()) {, +            }, +            if (logger.isTraceEnabled()) {, +            }, +            if (logger.isTraceEnabled()) {, +            }, +                if (logger.isTraceEnabled()) {, +                }, +                if (logger.isTraceEnabled()) {, +                }, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +            if (logger.isTraceEnabled()) {, +            }, +            if (logger.isTraceEnabled()) {, +            }, +            if (logger.isTraceEnabled()) {, +            }, +                if (logger.isTraceEnabled()) {, +                }, +                if (logger.isTraceEnabled()) {, +                }, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.*;, +    private final ShardFailedClusterStateHandler shardFailedClusterStateHandler = new ShardFailedClusterStateHandler();, +, +        clusterService.submitStateUpdateTask(, +                "shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]",, +                shardRoutingEntry,, +                ClusterStateTaskConfig.build(Priority.HIGH),, +                shardFailedClusterStateHandler,, +                shardFailedClusterStateHandler);, +    }, +    class ShardFailedClusterStateHandler implements ClusterStateTaskExecutor<ShardRoutingEntry>, ClusterStateTaskListener {, +        public BatchResult<ShardRoutingEntry> execute(ClusterState currentState, List<ShardRoutingEntry> tasks) throws Exception {, +            BatchResult.Builder<ShardRoutingEntry> batchResultBuilder = BatchResult.builder();, +            List<FailedRerouteAllocation.FailedShard> shardRoutingsToBeApplied = new ArrayList<>(tasks.size());, +            for (ShardRoutingEntry task : tasks) {, +                shardRoutingsToBeApplied.add(new FailedRerouteAllocation.FailedShard(task.shardRouting, task.message, task.failure));, +            ClusterState maybeUpdatedState = currentState;, +            try {, +                RoutingAllocation.Result result = allocationService.applyFailedShards(currentState, shardRoutingsToBeApplied);, +                if (result.changed()) {, +                    maybeUpdatedState = ClusterState.builder(currentState).routingResult(result).build();, +                batchResultBuilder.successes(tasks);, +            } catch (Throwable t) {, +                batchResultBuilder.failures(tasks, t);, +            return batchResultBuilder.build(maybeUpdatedState);, +, +        @Override, +        public void onFailure(String source, Throwable t) {, +            logger.error("unexpected failure during [{}]", t, source);, +    }, +, +    private final ShardStartedClusterStateHandler shardStartedClusterStateHandler =, +            new ShardStartedClusterStateHandler();, +        clusterService.submitStateUpdateTask(, +                "shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.message + "]",, +                shardRoutingEntry,, +                ClusterStateTaskConfig.build(Priority.URGENT),, +                shardStartedClusterStateHandler,, +                shardStartedClusterStateHandler);, +    }, +, +    class ShardStartedClusterStateHandler implements ClusterStateTaskExecutor<ShardRoutingEntry>, ClusterStateTaskListener {, +        public BatchResult<ShardRoutingEntry> execute(ClusterState currentState, List<ShardRoutingEntry> tasks) throws Exception {, +            BatchResult.Builder<ShardRoutingEntry> builder = BatchResult.builder();, +            List<ShardRouting> shardRoutingsToBeApplied = new ArrayList<>(tasks.size());, +            for (ShardRoutingEntry task : tasks) {, +                shardRoutingsToBeApplied.add(task.shardRouting);, +            }, +            ClusterState maybeUpdatedState = currentState;, +            try {, +                RoutingAllocation.Result result =, +                    allocationService.applyStartedShards(currentState, shardRoutingsToBeApplied, true);, +                if (result.changed()) {, +                    maybeUpdatedState = ClusterState.builder(currentState).routingResult(result).build();, +                }, +                builder.successes(tasks);, +            } catch (Throwable t) {, +                builder.failures(tasks, t);, +            return builder.build(maybeUpdatedState);, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +            if (logger.isTraceEnabled()) {, +            }, +            if (logger.isTraceEnabled()) {, +            }, +            if (logger.isTraceEnabled()) {, +            }, +                if (logger.isTraceEnabled()) {, +                }, +                if (logger.isTraceEnabled()) {, +                }, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.*;, +    private final ShardFailedClusterStateHandler shardFailedClusterStateHandler = new ShardFailedClusterStateHandler();, +, +        clusterService.submitStateUpdateTask(, +                "shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]",, +                shardRoutingEntry,]