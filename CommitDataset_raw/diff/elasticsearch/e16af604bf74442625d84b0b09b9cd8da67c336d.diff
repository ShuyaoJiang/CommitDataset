[+++ b/build.gradle, +  // we only use maven publish to add tasks for pom generation, +  plugins.withType(MavenPublishPlugin).whenPluginAdded {, +    publishing {, +      publications {, +        // add license information to generated poms, +        all {, +          pom.withXml { XmlProvider xml ->, +            Node node = xml.asNode(), +            node.appendNode('inceptionYear', '2009'), +, +            Node license = node.appendNode('licenses').appendNode('license'), +            license.appendNode('name', 'The Apache Software License, Version 2.0'), +            license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt'), +            license.appendNode('distribution', 'repo'), +          }, +        }, +      }, +    }, +  }, +, +++ b/build.gradle, +  // we only use maven publish to add tasks for pom generation, +  plugins.withType(MavenPublishPlugin).whenPluginAdded {, +    publishing {, +      publications {, +        // add license information to generated poms, +        all {, +          pom.withXml { XmlProvider xml ->, +            Node node = xml.asNode(), +            node.appendNode('inceptionYear', '2009'), +, +            Node license = node.appendNode('licenses').appendNode('license'), +            license.appendNode('name', 'The Apache Software License, Version 2.0'), +            license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt'), +            license.appendNode('distribution', 'repo'), +          }, +        }, +      }, +    }, +  }, +, +++ b/buildSrc/build.gradle, +  compile 'com.netflix.nebula:nebula-publishing-plugin:4.4.4', +++ b/build.gradle, +  // we only use maven publish to add tasks for pom generation, +  plugins.withType(MavenPublishPlugin).whenPluginAdded {, +    publishing {, +      publications {, +        // add license information to generated poms, +        all {, +          pom.withXml { XmlProvider xml ->, +            Node node = xml.asNode(), +            node.appendNode('inceptionYear', '2009'), +, +            Node license = node.appendNode('licenses').appendNode('license'), +            license.appendNode('name', 'The Apache Software License, Version 2.0'), +            license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt'), +            license.appendNode('distribution', 'repo'), +          }, +        }, +      }, +    }, +  }, +, +++ b/buildSrc/build.gradle, +  compile 'com.netflix.nebula:nebula-publishing-plugin:4.4.4', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.publish.maven.MavenPublication, +import org.gradle.api.publish.maven.plugins.MavenPublishPlugin, +import org.gradle.api.publish.maven.tasks.GenerateMavenPom, +        configureJars(project) // jar config must be added before info broker, +        configurePomGeneration(project), +            pom.withXml(removeTransitiveDependencies(project)), +        }, +    }, +, +    /** Adds repositores used by ES dependencies */, +    static void configureRepositories(Project project) {, +        RepositoryHandler repos = project.repositories, +        if (System.getProperty("repos.mavenlocal") != null) {, +            // with -Drepos.mavenlocal=true we can force checking the local .m2 repo which is, +            // useful for development ie. bwc tests where we install stuff in the local repository, +            // such that we don't have to pass hardcoded files to gradle, +            repos.mavenLocal(), +        }, +        repos.mavenCentral(), +        repos.maven {, +            name 'sonatype-snapshots', +            url 'http://oss.sonatype.org/content/repositories/snapshots/', +        }, +        String luceneVersion = VersionProperties.lucene, +        if (luceneVersion.contains('-snapshot')) {, +            // extract the revision number from the version with a regex matcher, +            String revision = (luceneVersion =~ /\w+-snapshot-([a-z0-9]+)/)[0][1], +            repos.maven {, +                name 'lucene-snapshots', +                url "http://s3.amazonaws.com/download.elasticsearch.org/lucenesnapshots/${revision}", +            }, +        }]