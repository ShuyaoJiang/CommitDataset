[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksRequest;, +    static Request cancelTasks(CancelTasksRequest cancelTasksRequest) {, +        Request request = new Request(HttpPost.METHOD_NAME, "/_tasks/_cancel");, +        Params params = new Params(request);, +        params.withTimeout(cancelTasksRequest.getTimeout()), +            .withTaskId(cancelTasksRequest.getTaskId()), +            .withNodes(cancelTasksRequest.getNodes()), +            .withParentTaskId(cancelTasksRequest.getParentTaskId()), +            .withActions(cancelTasksRequest.getActions());, +        return request;, +    }, +, +        Params withTaskId(TaskId taskId) {, +            if (taskId != null && taskId.isSet()) {, +                return putParam("task_id", taskId.toString());, +            }, +            return this;, +        }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksRequest;, +    static Request cancelTasks(CancelTasksRequest cancelTasksRequest) {, +        Request request = new Request(HttpPost.METHOD_NAME, "/_tasks/_cancel");, +        Params params = new Params(request);, +        params.withTimeout(cancelTasksRequest.getTimeout()), +            .withTaskId(cancelTasksRequest.getTaskId()), +            .withNodes(cancelTasksRequest.getNodes()), +            .withParentTaskId(cancelTasksRequest.getParentTaskId()), +            .withActions(cancelTasksRequest.getActions());, +        return request;, +    }, +, +        Params withTaskId(TaskId taskId) {, +            if (taskId != null && taskId.isSet()) {, +                return putParam("task_id", taskId.toString());, +            }, +            return this;, +        }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/TasksClient.java, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksRequest;, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksResponse;, +, +    /**, +     * Cancel one or more cluster tasks using the Task Management API., +     *, +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>, +     * @param cancelTasksRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     *, +     */, +    public CancelTasksResponse cancel(CancelTasksRequest cancelTasksRequest, RequestOptions options ) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(, +            cancelTasksRequest,, +            RequestConverters::cancelTasks,, +            options,, +            parser -> CancelTasksResponse.fromXContent(parser),, +            emptySet(), +        );, +    }, +, +    /**, +     * Asynchronously cancel one or more cluster tasks using the Task Management API., +     *, +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>, +     * @param cancelTasksRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void cancelAsync(CancelTasksRequest cancelTasksRequest, RequestOptions options, ActionListener<CancelTasksResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(, +            cancelTasksRequest,, +            RequestConverters::cancelTasks,, +            options,, +            parser -> CancelTasksResponse.fromXContent(parser),, +            listener,, +            emptySet(), +        );, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksRequest;, +    static Request cancelTasks(CancelTasksRequest cancelTasksRequest) {, +        Request request = new Request(HttpPost.METHOD_NAME, "/_tasks/_cancel");, +        Params params = new Params(request);, +        params.withTimeout(cancelTasksRequest.getTimeout()), +            .withTaskId(cancelTasksRequest.getTaskId()), +            .withNodes(cancelTasksRequest.getNodes()), +            .withParentTaskId(cancelTasksRequest.getParentTaskId()), +            .withActions(cancelTasksRequest.getActions());, +        return request;, +    }, +, +        Params withTaskId(TaskId taskId) {, +            if (taskId != null && taskId.isSet()) {, +                return putParam("task_id", taskId.toString());]