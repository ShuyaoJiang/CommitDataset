[+++ b/core/src/test/java/org/elasticsearch/action/ingest/BulkRequestModifierTests.java, +import java.util.HashSet;, +import java.util.Set;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.nullValue;, +import static org.mockito.Mockito.mock;, +    public void testBulkRequestModifier() {, +        int numRequests = scaledRandomIntBetween(8, 64);, +        BulkRequest bulkRequest = new BulkRequest();, +        for (int i = 0; i < numRequests; i++) {, +            bulkRequest.add(new IndexRequest("_index", "_type", String.valueOf(i)).source("{}"));, +        }, +        CaptureActionListener actionListener = new CaptureActionListener();, +        IngestActionFilter.BulkRequestModifier bulkRequestModifier = new IngestActionFilter.BulkRequestModifier(bulkRequest);, +, +        int i = 0;, +        Set<Integer> failedSlots = new HashSet<>();, +        while (bulkRequestModifier.hasNext()) {, +            bulkRequestModifier.next();, +            if (randomBoolean()) {, +                bulkRequestModifier.markCurrentItemAsFailed(new RuntimeException());, +                failedSlots.add(i);, +            }, +            i++;, +        }, +, +        assertThat(bulkRequestModifier.getBulkRequest().requests().size(), equalTo(numRequests - failedSlots.size()));, +        // simulate that we actually executed the modified bulk request:, +        ActionListener<BulkResponse> result = bulkRequestModifier.wrapActionListenerIfNeeded(actionListener);, +        result.onResponse(new BulkResponse(new BulkItemResponse[numRequests - failedSlots.size()], 0));, +, +        BulkResponse bulkResponse = actionListener.getResponse();, +        for (int j = 0; j < bulkResponse.getItems().length; j++) {, +            if (failedSlots.contains(j)) {, +                BulkItemResponse item =  bulkResponse.getItems()[j];, +                assertThat(item.isFailed(), is(true));, +                assertThat(item.getFailure().getIndex(), equalTo("_index"));, +                assertThat(item.getFailure().getType(), equalTo("_type"));, +                assertThat(item.getFailure().getId(), equalTo(String.valueOf(j)));, +                assertThat(item.getFailure().getMessage(), equalTo("java.lang.RuntimeException"));, +            } else {, +                assertThat(bulkResponse.getItems()[j], nullValue());, +            }, +        }, +    }, +, +        bulkResponseListener.onResponse(new BulkResponse(originalResponses.toArray(new BulkItemResponse[originalResponses.size()]), 0));, +        while (modifier.hasNext()) {, +        @SuppressWarnings("unchecked"), +        ActionListener<BulkResponse> actionListener = mock(ActionListener.class);, +    private static class CaptureActionListener implements ActionListener<BulkResponse> {, +, +        private BulkResponse response;, +, +        @Override, +        public void onResponse(BulkResponse bulkItemResponses) {, +            this.response = bulkItemResponses ;, +        }, +, +        @Override, +        public void onFailure(Throwable e) {, +        }, +, +        public BulkResponse getResponse() {, +            return response;, +        }, +    }, +++ b/core/src/test/java/org/elasticsearch/action/ingest/BulkRequestModifierTests.java, +import java.util.HashSet;, +import java.util.Set;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.nullValue;, +import static org.mockito.Mockito.mock;, +    public void testBulkRequestModifier() {, +        int numRequests = scaledRandomIntBetween(8, 64);, +        BulkRequest bulkRequest = new BulkRequest();, +        for (int i = 0; i < numRequests; i++) {, +            bulkRequest.add(new IndexRequest("_index", "_type", String.valueOf(i)).source("{}"));, +        }, +        CaptureActionListener actionListener = new CaptureActionListener();, +        IngestActionFilter.BulkRequestModifier bulkRequestModifier = new IngestActionFilter.BulkRequestModifier(bulkRequest);, +, +        int i = 0;, +        Set<Integer> failedSlots = new HashSet<>();, +        while (bulkRequestModifier.hasNext()) {, +            bulkRequestModifier.next();, +            if (randomBoolean()) {, +                bulkRequestModifier.markCurrentItemAsFailed(new RuntimeException());, +                failedSlots.add(i);, +            }, +            i++;, +        }, +, +        assertThat(bulkRequestModifier.getBulkRequest().requests().size(), equalTo(numRequests - failedSlots.size()));, +        // simulate that we actually executed the modified bulk request:, +        ActionListener<BulkResponse> result = bulkRequestModifier.wrapActionListenerIfNeeded(actionListener);]