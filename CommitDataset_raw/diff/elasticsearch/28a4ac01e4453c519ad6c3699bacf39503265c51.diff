[+++ b/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.inject.AbstractModule;, +    /**, +     * Returns the smallest version between the 2., +     */, +    public static Version smallest(Version version1, Version version2) {, +        return version1.id < version2.id ? version1 : version2;, +    }, +, +, +    public static class Module extends AbstractModule {, +, +        private final Version version;, +, +        public Module(Version version) {, +            this.version = version;, +        }, +, +        @Override, +        protected void configure() {, +            bind(Version.class).toInstance(version);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.inject.AbstractModule;, +    /**, +     * Returns the smallest version between the 2., +     */, +    public static Version smallest(Version version1, Version version2) {, +        return version1.id < version2.id ? version1 : version2;, +    }, +, +, +    public static class Module extends AbstractModule {, +, +        private final Version version;, +, +        public Module(Version version) {, +            this.version = version;, +        }, +, +        @Override, +        protected void configure() {, +            bind(Version.class).toInstance(version);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.Version;, +        Version version = Version.CURRENT;, +, +        modules.add(new Version.Module(version));, +++ b/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.inject.AbstractModule;, +    /**, +     * Returns the smallest version between the 2., +     */, +    public static Version smallest(Version version1, Version version2) {, +        return version1.id < version2.id ? version1 : version2;, +    }, +, +, +    public static class Module extends AbstractModule {, +, +        private final Version version;, +, +        public Module(Version version) {, +            this.version = version;, +        }, +, +        @Override, +        protected void configure() {, +            bind(Version.class).toInstance(version);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.Version;, +        Version version = Version.CURRENT;, +, +        modules.add(new Version.Module(version));, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.Version;, +    private final Version version;, +, +    public TransportClientNodesService(Settings settings, ClusterName clusterName, TransportService transportService, ThreadPool threadPool, Version version) {, +        this.version = version;, +                DiscoveryNode node = new DiscoveryNode("#transport#-" + tempNodeIdGenerator.incrementAndGet(), transportAddress, version);, +++ b/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.inject.AbstractModule;, +    /**, +     * Returns the smallest version between the 2., +     */, +    public static Version smallest(Version version1, Version version2) {, +        return version1.id < version2.id ? version1 : version2;, +    }, +, +, +    public static class Module extends AbstractModule {, +, +        private final Version version;, +]