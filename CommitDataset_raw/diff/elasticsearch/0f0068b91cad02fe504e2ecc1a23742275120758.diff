[+++ b/docs/reference/mapping/types/alias.asciidoc, +will result in a failure. Likewise, aliases cannot be used as the target of `copy_to` or in multi-fields., +++ b/docs/reference/mapping/types/alias.asciidoc, +will result in a failure. Likewise, aliases cannot be used as the target of `copy_to` or in multi-fields., +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeParsers.java, +                if (type.equals(ObjectMapper.CONTENT_TYPE), +                        || type.equals(ObjectMapper.NESTED_CONTENT_TYPE), +                        || type.equals(FieldAliasMapper.CONTENT_TYPE)) {, +++ b/docs/reference/mapping/types/alias.asciidoc, +will result in a failure. Likewise, aliases cannot be used as the target of `copy_to` or in multi-fields., +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeParsers.java, +                if (type.equals(ObjectMapper.CONTENT_TYPE), +                        || type.equals(ObjectMapper.NESTED_CONTENT_TYPE), +                        || type.equals(FieldAliasMapper.CONTENT_TYPE)) {, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentMapperParserTests.java, +, +    public void testMultiFieldsWithFieldAlias() throws Exception {, +        IndexService indexService = createIndex("test");, +        DocumentMapperParser mapperParser = indexService.mapperService().documentMapperParser();, +        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("properties"), +                .startObject("field"), +                    .field("type", "text"), +                    .startObject("fields"), +                        .startObject("alias"), +                            .field("type", "alias"), +                            .field("path", "other-field"), +                        .endObject(), +                    .endObject(), +                .endObject(), +                .startObject("other-field"), +                    .field("type", "keyword"), +                .endObject(), +            .endObject(), +        .endObject().endObject());, +        MapperParsingException e = expectThrows(MapperParsingException.class, () ->, +            mapperParser.parse("type", new CompressedXContent(mapping)));, +        assertEquals("Type [alias] cannot be used in multi field", e.getMessage());, +    }]