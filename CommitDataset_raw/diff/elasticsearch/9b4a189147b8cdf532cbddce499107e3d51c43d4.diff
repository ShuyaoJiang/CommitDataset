[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import java.util.Iterator;, +import java.util.stream.Stream;, +    static void checkForFailedPluginRemovals(final Path pluginsDirectory) throws IOException {, +        /*, +         * Check for the existence of a marker file that indicates any plugins are in a garbage state from a failed attempt to remove the, +         * plugin., +         */, +        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory, ".removing-*")) {, +            final Iterator<Path> iterator = stream.iterator();, +            if (iterator.hasNext()) {, +                final Path removing = iterator.next();, +                final String fileName = removing.getFileName().toString();, +                final String name = fileName.substring(1 + fileName.indexOf("-"));, +                final String message = String.format(, +                        Locale.ROOT,, +                        "found file [%s] from a failed attempt to remove the plugin [%s]; execute [elasticsearch-plugin remove %2$s]",, +                        removing,, +                        name);, +                throw new IllegalStateException(message);, +            }, +        }, +    }, +, +        checkForFailedPluginRemovals(pluginsDirectory);, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import java.util.Iterator;, +import java.util.stream.Stream;, +    static void checkForFailedPluginRemovals(final Path pluginsDirectory) throws IOException {, +        /*, +         * Check for the existence of a marker file that indicates any plugins are in a garbage state from a failed attempt to remove the, +         * plugin., +         */, +        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory, ".removing-*")) {, +            final Iterator<Path> iterator = stream.iterator();, +            if (iterator.hasNext()) {, +                final Path removing = iterator.next();, +                final String fileName = removing.getFileName().toString();, +                final String name = fileName.substring(1 + fileName.indexOf("-"));, +                final String message = String.format(, +                        Locale.ROOT,, +                        "found file [%s] from a failed attempt to remove the plugin [%s]; execute [elasticsearch-plugin remove %2$s]",, +                        removing,, +                        name);, +                throw new IllegalStateException(message);, +            }, +        }, +    }, +, +        checkForFailedPluginRemovals(pluginsDirectory);, +, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginsServiceTests.java, +        final Path removing = home.resolve("plugins").resolve(".removing-fake");, +        Files.createFile(removing);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import java.util.Iterator;, +import java.util.stream.Stream;, +    static void checkForFailedPluginRemovals(final Path pluginsDirectory) throws IOException {, +        /*, +         * Check for the existence of a marker file that indicates any plugins are in a garbage state from a failed attempt to remove the, +         * plugin., +         */, +        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory, ".removing-*")) {, +            final Iterator<Path> iterator = stream.iterator();, +            if (iterator.hasNext()) {, +                final Path removing = iterator.next();, +                final String fileName = removing.getFileName().toString();, +                final String name = fileName.substring(1 + fileName.indexOf("-"));, +                final String message = String.format(, +                        Locale.ROOT,, +                        "found file [%s] from a failed attempt to remove the plugin [%s]; execute [elasticsearch-plugin remove %2$s]",, +                        removing,, +                        name);, +                throw new IllegalStateException(message);, +            }, +        }, +    }, +, +        checkForFailedPluginRemovals(pluginsDirectory);, +, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginsServiceTests.java, +        final Path removing = home.resolve("plugins").resolve(".removing-fake");, +        Files.createFile(removing);, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        PluginsService.checkForFailedPluginRemovals(env.pluginsFile());, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import java.util.Iterator;, +import java.util.stream.Stream;, +    static void checkForFailedPluginRemovals(final Path pluginsDirectory) throws IOException {, +        /*, +         * Check for the existence of a marker file that indicates any plugins are in a garbage state from a failed attempt to remove the, +         * plugin., +         */, +        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory, ".removing-*")) {, +            final Iterator<Path> iterator = stream.iterator();, +            if (iterator.hasNext()) {, +                final Path removing = iterator.next();, +                final String fileName = removing.getFileName().toString();]