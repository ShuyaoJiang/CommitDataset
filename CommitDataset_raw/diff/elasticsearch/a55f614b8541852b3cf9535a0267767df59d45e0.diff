[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = System.getProperty(, +                        'run.distribution', 'integ-test-zip', +                ), +        project.integTestCluster.distribution = System.getProperty('tests.distribution', 'integ-test-zip'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = System.getProperty(, +                        'run.distribution', 'integ-test-zip', +                ), +        project.integTestCluster.distribution = System.getProperty('tests.distribution', 'integ-test-zip'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        if (System.getProperty('tests.distribution', 'oss-zip') == 'integ-test-zip') {, +            throw new Exception("tests.distribution=integ-test-zip is not supported"), +        }, +            project.logger.info("Not installing modules for $name, ${node.config.distribution} already has them"), +            return setup, +        start.doFirst {, +            project.logger.info("Starting node in ${node.clusterName} distribution: ${node.config.distribution}"), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = System.getProperty(, +                        'run.distribution', 'integ-test-zip', +                ), +        project.integTestCluster.distribution = System.getProperty('tests.distribution', 'integ-test-zip'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        if (System.getProperty('tests.distribution', 'oss-zip') == 'integ-test-zip') {, +            throw new Exception("tests.distribution=integ-test-zip is not supported"), +        }, +            project.logger.info("Not installing modules for $name, ${node.config.distribution} already has them"), +            return setup, +        start.doFirst {, +            project.logger.info("Starting node in ${node.clusterName} distribution: ${node.config.distribution}"), +        }, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder<?> sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer, int window) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = System.getProperty(, +                        'run.distribution', 'integ-test-zip', +                ), +        project.integTestCluster.distribution = System.getProperty('tests.distribution', 'integ-test-zip'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        if (System.getProperty('tests.distribution', 'oss-zip') == 'integ-test-zip') {, +            throw new Exception("tests.distribution=integ-test-zip is not supported"), +        }, +            project.logger.info("Not installing modules for $name, ${node.config.distribution} already has them"), +            return setup, +        start.doFirst {, +            project.logger.info("Starting node in ${node.clusterName} distribution: ${node.config.distribution}"), +        }, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder<?> sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer, int window) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +            assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, indexResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, indexResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, indexResponse.getResult());, +            assertSame(RestStatus.CREATED, indexResponse.status());, +            assertEquals(RestStatus.OK.getStatus(), response.getStatusLine().getStatusCode());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, updateResponse.getResult());, +            assertSame(RestStatus.CREATED, indexResponse.status());, +            assertSame(DocWriteResponse.Result.DELETED, deleteResponse.getResult());, +            assertSame(RestStatus.CREATED, indexResponse.status());, +            assertSame(RestStatus.CREATED, indexResponse.status());, +            assertSame(RestStatus.OK, bulkResponse.status());, +            assertSame(RestStatus.OK, bulkResponse.status());, +            assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = System.getProperty(, +                        'run.distribution', 'integ-test-zip', +                ), +        project.integTestCluster.distribution = System.getProperty('tests.distribution', 'integ-test-zip'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        if (System.getProperty('tests.distribution', 'oss-zip') == 'integ-test-zip') {, +            throw new Exception("tests.distribution=integ-test-zip is not supported"), +        }, +            project.logger.info("Not installing modules for $name, ${node.config.distribution} already has them"), +            return setup, +        start.doFirst {, +            project.logger.info("Starting node in ${node.clusterName} distribution: ${node.config.distribution}"), +        }, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder<?> sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer, int window) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +            assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, indexResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, indexResponse.getResult());, +            assertEquals(DocWriteResponse.Result.UPDATED, indexResponse.getResult());, +            assertSame(RestStatus.CREATED, indexResponse.status());, +            assertEquals(RestStatus.OK.getStatus(), response.getStatusLine().getStatusCode());]