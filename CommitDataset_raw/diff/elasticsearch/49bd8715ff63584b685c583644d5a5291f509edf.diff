[+++ b/client/rest-high-level/build.gradle, +  setting 'indices.lifecycle.poll_interval', '1000ms', +++ b/client/rest-high-level/build.gradle, +  setting 'indices.lifecycle.poll_interval', '1000ms', +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        // The injected Unfollow step will run pretty rapidly here, so we need, +        // to wait for it to settle into the "stable" step of waiting to be, +        // ready to roll over, +        assertBusy(() -> {, +, +        });, +++ b/client/rest-high-level/build.gradle, +  setting 'indices.lifecycle.poll_interval', '1000ms', +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        // The injected Unfollow step will run pretty rapidly here, so we need, +        // to wait for it to settle into the "stable" step of waiting to be, +        // ready to roll over, +        assertBusy(() -> {, +, +        });, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java, +import org.elasticsearch.action.admin.indices.alias.Alias;, +import org.elasticsearch.client.indexlifecycle.OperationMode;, +import org.elasticsearch.client.indexlifecycle.ShrinkAction;, +            CreateIndexRequest createIndexRequest = new CreateIndexRequest("my_index-1"), +                    .put("index.lifecycle.rollover_alias", "my_alias"), +            createIndexRequest.alias(new Alias("my_alias").writeIndex(true));, +                .explainLifecycle(new ExplainLifecycleRequest("my_index-1"), RequestOptions.DEFAULT), +                .getIndexResponses().get("my_index-1").getAction()));, +            new ExplainLifecycleRequest("my_index-1", "other_index"); // <1>, +, +        assertBusy(() -> {, +            IndexLifecycleExplainResponse myIndex = indices.get("my_index-1");, +, +        });, +++ b/client/rest-high-level/build.gradle, +  setting 'indices.lifecycle.poll_interval', '1000ms', +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        // The injected Unfollow step will run pretty rapidly here, so we need, +        // to wait for it to settle into the "stable" step of waiting to be, +        // ready to roll over, +        assertBusy(() -> {, +, +        });, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java, +import org.elasticsearch.action.admin.indices.alias.Alias;, +import org.elasticsearch.client.indexlifecycle.OperationMode;, +import org.elasticsearch.client.indexlifecycle.ShrinkAction;, +            CreateIndexRequest createIndexRequest = new CreateIndexRequest("my_index-1"), +                    .put("index.lifecycle.rollover_alias", "my_alias"), +            createIndexRequest.alias(new Alias("my_alias").writeIndex(true));, +                .explainLifecycle(new ExplainLifecycleRequest("my_index-1"), RequestOptions.DEFAULT), +                .getIndexResponses().get("my_index-1").getAction()));, +            new ExplainLifecycleRequest("my_index-1", "other_index"); // <1>, +, +        assertBusy(() -> {, +            IndexLifecycleExplainResponse myIndex = indices.get("my_index-1");, +, +        });, +++ b/docs/reference/ilm/policy-definitions.asciidoc, +[IMPORTANT], +If a policy using the Rollover action is used on a <<ccr-put-follow,follower, +index>>, policy execution will wait until the leader index rolls over (or has, +<<skipping-rollover, otherwise been marked as complete>>), then convert the, +follower index into a regular index as if <<ilm-unfollow-action,the Unfollow, +action>> had been used instead of rolling over., +, +[IMPORTANT], +If a policy using the Shrink action is used on a <<ccr-put-follow,follower, +index>>, policy execution will wait until the leader index rolls over (or has, +<<skipping-rollover, otherwise been marked as complete>>), then convert the, +follower index into a regular index as if <<ilm-unfollow-action,the Unfollow, +action>> had been used before shrink is applied, as shrink cannot be safely, +applied to follower indices., +[IMPORTANT], +This action may be used explicitly, as shown below, but this action is also run, +before <<ilm-rollover-action,the Rollover action>> and <<ilm-shrink-action,the, +Shrink action>> as described in the documentation for those actions., +, +This action will wait until is it safe to convert a follower index into a, +regular index. In particular, the following conditions must be met:, +, +* The leader index must have `index.lifecycle.indexing_complete` set to `true`., +This happens automatically if the leader index is rolled over using, +<<ilm-rollover-action,the Rollover action>>, or may be set manually using, +the <<indices-update-settings,Index Settings API>>., +* All operations performed on the leader index must have been replicated to the, +follower index. This ensures that no operations will be lost when the index is, +converted into a regular index., +, +++ b/client/rest-high-level/build.gradle, +  setting 'indices.lifecycle.poll_interval', '1000ms', +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        // The injected Unfollow step will run pretty rapidly here, so we need, +        // to wait for it to settle into the "stable" step of waiting to be, +        // ready to roll over, +        assertBusy(() -> {, +, +        });, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java]