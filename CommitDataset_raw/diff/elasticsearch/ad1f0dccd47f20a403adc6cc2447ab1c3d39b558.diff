[+++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[float], +==== Multi Search Request metadata validation, +, +MultiSearchRequests issued through `_msearch` now validate all keys in the metadata section. Previously unknown keys were ignored, +while now an exception is thrown., +++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[float], +==== Multi Search Request metadata validation, +, +MultiSearchRequests issued through `_msearch` now validate all keys in the metadata section. Previously unknown keys were ignored, +while now an exception is thrown., +++ b/server/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                    Object expandWildcards = null;, +                    Object ignoreUnavailable = null;, +                    Object ignoreThrottled = null;, +                    Object allowNoIndices = null;, +                        } else if ("expand_wildcards".equals(entry.getKey()) || "expandWildcards".equals(entry.getKey())) {, +                            expandWildcards = value;, +                        } else if ("ignore_unavailable".equals(entry.getKey()) || "ignoreUnavailable".equals(entry.getKey())) {, +                            ignoreUnavailable = value;, +                        } else if ("allow_no_indices".equals(entry.getKey()) || "allowNoIndices".equals(entry.getKey())) {, +                            allowNoIndices = value;, +                        } else if ("ignore_throttled".equals(entry.getKey()) || "ignoreThrottled".equals(entry.getKey())) {, +                            ignoreThrottled = value;, +                            throw new IllegalArgumentException("key [" + entry.getKey() + "] is not supported in the metadata section");, +                    defaultOptions = IndicesOptions.fromParameters(expandWildcards, ignoreUnavailable, allowNoIndices, ignoreThrottled,, +                        defaultOptions);, +++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[float], +==== Multi Search Request metadata validation, +, +MultiSearchRequests issued through `_msearch` now validate all keys in the metadata section. Previously unknown keys were ignored, +while now an exception is thrown., +++ b/server/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                    Object expandWildcards = null;, +                    Object ignoreUnavailable = null;, +                    Object ignoreThrottled = null;, +                    Object allowNoIndices = null;, +                        } else if ("expand_wildcards".equals(entry.getKey()) || "expandWildcards".equals(entry.getKey())) {, +                            expandWildcards = value;, +                        } else if ("ignore_unavailable".equals(entry.getKey()) || "ignoreUnavailable".equals(entry.getKey())) {, +                            ignoreUnavailable = value;, +                        } else if ("allow_no_indices".equals(entry.getKey()) || "allowNoIndices".equals(entry.getKey())) {, +                            allowNoIndices = value;, +                        } else if ("ignore_throttled".equals(entry.getKey()) || "ignoreThrottled".equals(entry.getKey())) {, +                            ignoreThrottled = value;, +                            throw new IllegalArgumentException("key [" + entry.getKey() + "] is not supported in the metadata section");, +                    defaultOptions = IndicesOptions.fromParameters(expandWildcards, ignoreUnavailable, allowNoIndices, ignoreThrottled,, +                        defaultOptions);, +++ b/server/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java, +    public void testFailWithUnknownKey() {, +        final String requestContent = "{\"index\":\"test\", \"ignore_unavailable\" : true, \"unknown_key\" : \"open,closed\"}}\r\n" +, +            "{\"query\" : {\"match_all\" :{}}}\r\n";, +        FakeRestRequest restRequest = new FakeRestRequest.Builder(xContentRegistry()), +            .withContent(new BytesArray(requestContent), XContentType.JSON).build();, +        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,, +            () -> RestMultiSearchAction.parseRequest(restRequest, true));, +        assertEquals("key [unknown_key] is not supported in the metadata section", ex.getMessage());, +    }, +]