[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/JobTaskState.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Nullable;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +    private static ParseField REASON = new ParseField("reason");, +            new ConstructingObjectParser<>(NAME, true,, +                    args -> new JobTaskState((JobState) args[0], (Long) args[1], (String) args[2]));, +        PARSER.declareString(optionalConstructorArg(), REASON);, +    private final String reason;, +    public JobTaskState(JobState state, long allocationId, @Nullable String reason) {, +        this.reason = reason;, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            reason = in.readOptionalString();, +        } else {, +            reason = null;, +        }, +    @Nullable, +    public String getReason() {, +        return reason;, +    }, +, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeOptionalString(reason);, +        }, +        if (reason != null) {, +            builder.field(REASON.getPreferredName(), reason);, +        }, +                Objects.equals(allocationId, that.allocationId) &&, +                Objects.equals(reason, that.reason);, +        return Objects.hash(state, allocationId, reason);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/JobTaskState.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Nullable;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +    private static ParseField REASON = new ParseField("reason");, +            new ConstructingObjectParser<>(NAME, true,, +                    args -> new JobTaskState((JobState) args[0], (Long) args[1], (String) args[2]));, +        PARSER.declareString(optionalConstructorArg(), REASON);, +    private final String reason;, +    public JobTaskState(JobState state, long allocationId, @Nullable String reason) {, +        this.reason = reason;, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            reason = in.readOptionalString();, +        } else {, +            reason = null;, +        }, +    @Nullable, +    public String getReason() {, +        return reason;, +    }, +, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeOptionalString(reason);, +        }, +        if (reason != null) {, +            builder.field(REASON.getPreferredName(), reason);, +        }, +                Objects.equals(allocationId, that.allocationId) &&, +                Objects.equals(reason, that.reason);, +        return Objects.hash(state, allocationId, reason);, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/MlTasksTests.java, +        tasksBuilder.updateTaskState(MlTasks.jobTaskId("foo"), new JobTaskState(JobState.OPENED, tasksBuilder.getLastAllocationId(), null));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/JobTaskState.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Nullable;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +    private static ParseField REASON = new ParseField("reason");, +            new ConstructingObjectParser<>(NAME, true,, +                    args -> new JobTaskState((JobState) args[0], (Long) args[1], (String) args[2]));, +        PARSER.declareString(optionalConstructorArg(), REASON);, +    private final String reason;, +    public JobTaskState(JobState state, long allocationId, @Nullable String reason) {, +        this.reason = reason;, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            reason = in.readOptionalString();, +        } else {, +            reason = null;, +        }, +    @Nullable, +    public String getReason() {, +        return reason;, +    }, +, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeOptionalString(reason);, +        }, +        if (reason != null) {, +            builder.field(REASON.getPreferredName(), reason);, +        }, +                Objects.equals(allocationId, that.allocationId) &&, +                Objects.equals(reason, that.reason);, +        return Objects.hash(state, allocationId, reason);, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/MlTasksTests.java, +        tasksBuilder.updateTaskState(MlTasks.jobTaskId("foo"), new JobTaskState(JobState.OPENED, tasksBuilder.getLastAllocationId(), null));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportCloseJobAction.java, +        JobTaskState taskState = new JobTaskState(JobState.CLOSING, jobTask.getAllocationId(), "close job (api)");, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/JobTaskState.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Nullable;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;]