[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse;, +                            .addAlias(indexName, aliasName, QueryBuilders.termQuery(Job.ID.getPreferredName(), job.getId())), +        client.admin().indices().prepareGetFieldMappings(indexName).setTypes("*").setFields("*").execute(, +                new ActionListener<GetFieldMappingsResponse>() {, +                    public void onResponse(GetFieldMappingsResponse getFieldMappingsResponse) {, +                        Map<String, Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>>> indexMappings =, +                                getFieldMappingsResponse.mappings();, +                        for (String index : indexMappings.keySet()) {, +                            Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>> typeMappings = indexMappings.get(index);, +                            for (String type : typeMappings.keySet()) {, +                                Map<String, GetFieldMappingsResponse.FieldMappingMetaData> fieldMappings = typeMappings.get(type);, +                                numFields += fieldMappings.size();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse;, +                            .addAlias(indexName, aliasName, QueryBuilders.termQuery(Job.ID.getPreferredName(), job.getId())), +        client.admin().indices().prepareGetFieldMappings(indexName).setTypes("*").setFields("*").execute(, +                new ActionListener<GetFieldMappingsResponse>() {, +                    public void onResponse(GetFieldMappingsResponse getFieldMappingsResponse) {, +                        Map<String, Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>>> indexMappings =, +                                getFieldMappingsResponse.mappings();, +                        for (String index : indexMappings.keySet()) {, +                            Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>> typeMappings = indexMappings.get(index);, +                            for (String type : typeMappings.keySet()) {, +                                Map<String, GetFieldMappingsResponse.FieldMappingMetaData> fieldMappings = typeMappings.get(type);, +                                numFields += fieldMappings.size();, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +                + "\":{\"aliases\":{\"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId1), +                + "\":{\"filter\":{\"term\":{\"job_id\":{\"value\":\"" + jobId1 + "\",\"boost\":1.0}}}},\"" +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse;, +                            .addAlias(indexName, aliasName, QueryBuilders.termQuery(Job.ID.getPreferredName(), job.getId())), +        client.admin().indices().prepareGetFieldMappings(indexName).setTypes("*").setFields("*").execute(, +                new ActionListener<GetFieldMappingsResponse>() {, +                    public void onResponse(GetFieldMappingsResponse getFieldMappingsResponse) {, +                        Map<String, Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>>> indexMappings =, +                                getFieldMappingsResponse.mappings();, +                        for (String index : indexMappings.keySet()) {, +                            Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>> typeMappings = indexMappings.get(index);, +                            for (String type : typeMappings.keySet()) {, +                                Map<String, GetFieldMappingsResponse.FieldMappingMetaData> fieldMappings = typeMappings.get(type);, +                                numFields += fieldMappings.size();, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +                + "\":{\"aliases\":{\"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId1), +                + "\":{\"filter\":{\"term\":{\"job_id\":{\"value\":\"" + jobId1 + "\",\"boost\":1.0}}}},\"" +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobProviderTests.java, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.xpack.ml.MlMetadata;, +        QueryBuilder jobFilter = QueryBuilders.termQuery("job_id", "foo");, +        clientBuilder.prepareAlias(resultsIndexName, AnomalyDetectorsIndex.jobResultsAliasedName("foo"), jobFilter);, +        QueryBuilder jobFilter = QueryBuilders.termQuery("job_id", "foo");, +                AnomalyDetectorsIndex.jobResultsAliasedName("foo123"), jobFilter);, +        QueryBuilder jobFilter = QueryBuilders.termQuery("job_id", "foo");, +        clientBuilder.prepareAlias(indexName, aliasName, jobFilter);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse;, +                            .addAlias(indexName, aliasName, QueryBuilders.termQuery(Job.ID.getPreferredName(), job.getId())), +        client.admin().indices().prepareGetFieldMappings(indexName).setTypes("*").setFields("*").execute(, +                new ActionListener<GetFieldMappingsResponse>() {, +                    public void onResponse(GetFieldMappingsResponse getFieldMappingsResponse) {, +                        Map<String, Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>>> indexMappings =, +                                getFieldMappingsResponse.mappings();, +                        for (String index : indexMappings.keySet()) {, +                            Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>> typeMappings = indexMappings.get(index);, +                            for (String type : typeMappings.keySet()) {, +                                Map<String, GetFieldMappingsResponse.FieldMappingMetaData> fieldMappings = typeMappings.get(type);, +                                numFields += fieldMappings.size();, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +                + "\":{\"aliases\":{\"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId1), +                + "\":{\"filter\":{\"term\":{\"job_id\":{\"value\":\"" + jobId1 + "\",\"boost\":1.0}}}},\"" +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobProviderTests.java, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.xpack.ml.MlMetadata;, +        QueryBuilder jobFilter = QueryBuilders.termQuery("job_id", "foo");, +        clientBuilder.prepareAlias(resultsIndexName, AnomalyDetectorsIndex.jobResultsAliasedName("foo"), jobFilter);, +        QueryBuilder jobFilter = QueryBuilders.termQuery("job_id", "foo");, +                AnomalyDetectorsIndex.jobResultsAliasedName("foo123"), jobFilter);, +        QueryBuilder jobFilter = QueryBuilders.termQuery("job_id", "foo");, +        clientBuilder.prepareAlias(indexName, aliasName, jobFilter);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/persistence/MockClientBuilder.java, +    public MockClientBuilder prepareAlias(String indexName, String alias, QueryBuilder filter) {, +        when(aliasesRequestBuilder.addAlias(eq(indexName), eq(alias), eq(filter))).thenReturn(aliasesRequestBuilder);]