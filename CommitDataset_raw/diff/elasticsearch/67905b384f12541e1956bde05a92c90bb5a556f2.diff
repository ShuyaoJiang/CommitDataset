[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +        public float weight(Balancer balancer, ModelNode node, String index) {, +         * returned sorter is not sorted. Use {@link NodeSorter#reset(String)}, +                    for (String index : buildWeightOrderedIndidces(sorter)) {, +                        sorter.reset(index);, +                                if (tryRelocateShard(minNode, maxNode, index, delta)) {, +                                    weights[lowIdx] = sorter.weight(modelNodes[lowIdx]);, +                                    weights[highIdx] = sorter.weight(modelNodes[highIdx]);, +        private String[] buildWeightOrderedIndidces(NodeSorter sorter) {, +                sorter.reset(indices[i]);, +                sorter.reset(shard.getIndex());, +                                float currentWeight = weight.weight(this, node, shard.index());, +        private boolean tryRelocateShard(ModelNode minNode, ModelNode maxNode, String idx, float minCost) {, +                                final float delta = weight.weight(this, minNode, idx) - weight.weight(this, maxNode, idx);, +        public void reset(String index) {, +                weights[i] = weight(modelNodes[i]);, +        public float weight(ModelNode node) {, +            return function.weight(balancer, node, index);]