[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +            return new DatafeedTask(id, type, action, parentTaskId, this);, +        private final String datafeedId;, +        private final long startTime;, +        private final Long endTime;, +        public DatafeedTask(long id, String type, String action, TaskId parentTaskId, Request request) {, +            super(id, type, action, "datafeed-" + request.getDatafeedId(), parentTaskId);, +            this.datafeedId = request.getDatafeedId();, +            this.startTime = request.startTime;, +            this.endTime = request.endTime;, +        }, +, +        public String getDatafeedId() {, +            return datafeedId;, +        }, +, +        public long getStartTime() {, +            return startTime;, +        }, +, +        @org.elasticsearch.common.Nullable, +        public Long getEndTime() {, +            return endTime;, +        }, +, +        public boolean isLookbackOnly() {, +            return endTime != null;, +            datafeedJobRunner.run(datafeedTask,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +            return new DatafeedTask(id, type, action, parentTaskId, this);, +        private final String datafeedId;, +        private final long startTime;, +        private final Long endTime;, +        public DatafeedTask(long id, String type, String action, TaskId parentTaskId, Request request) {, +            super(id, type, action, "datafeed-" + request.getDatafeedId(), parentTaskId);, +            this.datafeedId = request.getDatafeedId();, +            this.startTime = request.startTime;, +            this.endTime = request.endTime;, +        }, +, +        public String getDatafeedId() {, +            return datafeedId;, +        }, +, +        public long getStartTime() {, +            return startTime;, +        }, +, +        @org.elasticsearch.common.Nullable, +        public Long getEndTime() {, +            return endTime;, +        }, +, +        public boolean isLookbackOnly() {, +            return endTime != null;, +            datafeedJobRunner.run(datafeedTask,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +            return new DatafeedTask(id, type, action, parentTaskId, this);, +        private final String datafeedId;, +        private final long startTime;, +        private final Long endTime;, +        public DatafeedTask(long id, String type, String action, TaskId parentTaskId, Request request) {, +            super(id, type, action, "datafeed-" + request.getDatafeedId(), parentTaskId);, +            this.datafeedId = request.getDatafeedId();, +            this.startTime = request.startTime;, +            this.endTime = request.endTime;, +        }, +, +        public String getDatafeedId() {, +            return datafeedId;, +        }, +, +        public long getStartTime() {, +            return startTime;, +        }, +, +        @org.elasticsearch.common.Nullable, +        public Long getEndTime() {, +            return endTime;, +        }, +, +        public boolean isLookbackOnly() {, +            return endTime != null;, +            datafeedJobRunner.run(datafeedTask,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobRunner.java, +import org.elasticsearch.xpack.ml.action.CloseJobAction;, +import org.elasticsearch.xpack.ml.job.messages.Messages;, +    public void run(StartDatafeedAction.DatafeedTask task, Consumer<Exception> handler) {, +        DatafeedConfig datafeed = mlMetadata.getDatafeed(task.getDatafeedId());, +                innerRun(holder, task.getStartTime(), task.getEndTime());, +        Holder holder = new Holder(datafeed, datafeedJob, task.isLookbackOnly(), new ProblemTracker(() -> auditor), handler);, +        private final boolean autoCloseJob;, +        private Holder(DatafeedConfig datafeed, DatafeedJob datafeedJob, boolean autoCloseJob, ProblemTracker problemTracker,, +                       Consumer<Exception> handler) {, +            this.autoCloseJob = autoCloseJob;, +                        jobProvider.audit(datafeed.getJobId()).info(Messages.getMessage(Messages.JOB_AUDIT_DATAFEED_STOPPED));, +                        if (autoCloseJob) {, +                            closeJob();]