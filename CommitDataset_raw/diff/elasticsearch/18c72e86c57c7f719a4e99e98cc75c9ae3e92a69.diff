[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        parameters.withPipeline(bulkRequest.pipeline());, +        parameters.withRouting(bulkRequest.routing());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        parameters.withPipeline(bulkRequest.pipeline());, +        parameters.withRouting(bulkRequest.routing());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.metrics.MedianAbsoluteDeviationAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.ParsedMedianAbsoluteDeviation;, +        map.put(MedianAbsoluteDeviationAggregationBuilder.NAME, (p, c) -> ParsedMedianAbsoluteDeviation.fromXContent(p, (String) c));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        parameters.withPipeline(bulkRequest.pipeline());, +        parameters.withRouting(bulkRequest.routing());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.metrics.MedianAbsoluteDeviationAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.ParsedMedianAbsoluteDeviation;, +        map.put(MedianAbsoluteDeviationAggregationBuilder.NAME, (p, c) -> ParsedMedianAbsoluteDeviation.fromXContent(p, (String) c));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/BulkProcessorIT.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.search.SearchHit;, +import org.hamcrest.Matcher;, +import org.hamcrest.Matchers;, +import java.io.IOException;, +import java.util.stream.IntStream;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.fieldFromSource;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasId;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasIndex;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasProperty;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasType;, +import static org.hamcrest.Matchers.containsInAnyOrder;, +import static org.hamcrest.Matchers.everyItem;, +    @SuppressWarnings("unchecked"), +    public void testGlobalParametersAndSingleRequest() throws Exception {, +        createIndexWithMultipleShards("test");, +, +        final CountDownLatch latch = new CountDownLatch(1);, +        BulkProcessorTestListener listener = new BulkProcessorTestListener(latch);, +        createFieldAddingPipleine("pipeline_id", "fieldNameXYZ", "valueXYZ");, +, +        // tag::bulk-processor-mix-parameters, +        try (BulkProcessor processor = initBulkProcessorBuilder(listener), +                .setGlobalIndex("tweets"), +                .setGlobalType("_doc"), +                .setGlobalRouting("routing"), +                .setGlobalPipeline("pipeline_id"), +                .build()) {, +, +, +            processor.add(new IndexRequest() // <1>, +                .source(XContentType.JSON, "user", "some user"));, +            processor.add(new IndexRequest("blogs", "post_type", "1") // <2>, +                .source(XContentType.JSON, "title", "some title"));, +        }, +        // end::bulk-processor-mix-parameters, +        latch.await();, +, +        Iterable<SearchHit> hits = searchAll(new SearchRequest("tweets").routing("routing"));, +        assertThat(hits, everyItem(hasProperty(fieldFromSource("user"), equalTo("some user"))));, +        assertThat(hits, everyItem(hasProperty(fieldFromSource("fieldNameXYZ"), equalTo("valueXYZ"))));, +, +, +        Iterable<SearchHit> blogs = searchAll(new SearchRequest("blogs").routing("routing"));, +        assertThat(blogs, everyItem(hasProperty(fieldFromSource("title"), equalTo("some title"))));, +        assertThat(blogs, everyItem(hasProperty(fieldFromSource("fieldNameXYZ"), equalTo("valueXYZ"))));, +    }, +, +    @SuppressWarnings("unchecked"), +    public void testGlobalParametersAndBulkProcessor() throws Exception {, +        createIndexWithMultipleShards("test");, +, +        final CountDownLatch latch = new CountDownLatch(1);, +        BulkProcessorTestListener listener = new BulkProcessorTestListener(latch);, +        createFieldAddingPipleine("pipeline_id", "fieldNameXYZ", "valueXYZ");, +, +        int numDocs = randomIntBetween(10, 10);, +        try (BulkProcessor processor = initBulkProcessorBuilder(listener), +                //let's make sure that the bulk action limit trips, one single execution will index all the documents, +                .setConcurrentRequests(randomIntBetween(0, 1)).setBulkActions(numDocs), +                .setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(1, ByteSizeUnit.GB)), +                .setGlobalIndex("test"), +                .setGlobalType("test"), +                .setGlobalRouting("routing"), +                .setGlobalPipeline("pipeline_id"), +                .build()) {, +, +            indexDocs(processor, numDocs, null, null, "test", "test", "pipeline_id");, +            latch.await();, +, +            assertThat(listener.beforeCounts.get(), equalTo(1));, +            assertThat(listener.afterCounts.get(), equalTo(1));, +            assertThat(listener.bulkFailures.size(), equalTo(0));, +            assertResponseItems(listener.bulkItems, numDocs);, +, +            Iterable<SearchHit> hits = searchAll(new SearchRequest("test").routing("routing"));, +]