[+++ b/.idea/dictionaries/kimchy.xml, +      <w>sbuf</w>, +      <w>serializers</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>sbuf</w>, +      <w>serializers</w>, +++ b/.idea/libraries/logging.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.slf4j/slf4j-log4j12/jars/slf4j-log4j12-1.5.11.jar!/" />, +++ b/.idea/dictionaries/kimchy.xml, +      <w>sbuf</w>, +      <w>serializers</w>, +++ b/.idea/libraries/logging.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.slf4j/slf4j-log4j12/jars/slf4j-log4j12-1.5.11.jar!/" />, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "slf4j-*.jar") } // no need for slf4j, +++ b/.idea/dictionaries/kimchy.xml, +      <w>sbuf</w>, +      <w>serializers</w>, +++ b/.idea/libraries/logging.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.slf4j/slf4j-log4j12/jars/slf4j-log4j12-1.5.11.jar!/" />, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "slf4j-*.jar") } // no need for slf4j, +++ b/modules/elasticsearch/build.gradle, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('log4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('slf4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('jline') }, +++ b/.idea/dictionaries/kimchy.xml, +      <w>sbuf</w>, +      <w>serializers</w>, +++ b/.idea/libraries/logging.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.slf4j/slf4j-log4j12/jars/slf4j-log4j12-1.5.11.jar!/" />, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "slf4j-*.jar") } // no need for slf4j, +++ b/modules/elasticsearch/build.gradle, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('log4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('slf4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('jline') }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.util.logging.ESLogger;, +            ESLogger logger = Loggers.getLogger(Bootstrap.class);, +++ b/.idea/dictionaries/kimchy.xml, +      <w>sbuf</w>, +      <w>serializers</w>, +++ b/.idea/libraries/logging.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.slf4j/slf4j-log4j12/jars/slf4j-log4j12-1.5.11.jar!/" />, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "slf4j-*.jar") } // no need for slf4j, +++ b/modules/elasticsearch/build.gradle, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('log4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('slf4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('jline') }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.util.logging.ESLogger;, +            ESLogger logger = Loggers.getLogger(Bootstrap.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/jgroups/JgroupsCustomLogFactory.java, +import org.elasticsearch.util.logging.ESLogger;, +import org.elasticsearch.util.logging.ESLoggerFactory;, +        return new JgroupsESLog(ESLoggerFactory.getLogger(category.replace("org.jgroups.", "jgroups.").replace(".protocols.", ".")));, +    private static class JgroupsESLog implements Log {, +        private final ESLogger logger;, +        private JgroupsESLog(ESLogger logger) {, +++ b/.idea/dictionaries/kimchy.xml, +      <w>sbuf</w>, +      <w>serializers</w>, +++ b/.idea/libraries/logging.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.slf4j/slf4j-log4j12/jars/slf4j-log4j12-1.5.11.jar!/" />, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "slf4j-*.jar") } // no need for slf4j, +++ b/modules/elasticsearch/build.gradle, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('log4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('slf4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('jline') }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.util.logging.ESLogger;, +            ESLogger logger = Loggers.getLogger(Bootstrap.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/jgroups/JgroupsCustomLogFactory.java, +import org.elasticsearch.util.logging.ESLogger;, +import org.elasticsearch.util.logging.ESLoggerFactory;, +        return new JgroupsESLog(ESLoggerFactory.getLogger(category.replace("org.jgroups.", "jgroups.").replace(".protocols.", ".")));, +    private static class JgroupsESLog implements Log {, +        private final ESLogger logger;, +        private JgroupsESLog(ESLogger logger) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.transport.netty.NettyInternalESLoggerFactory;, +        InternalLoggerFactory.setDefaultFactory(new NettyInternalESLoggerFactory() {, +                return super.newInstance(name.replace("org.jboss.netty.", "netty."));, +++ b/.idea/dictionaries/kimchy.xml, +      <w>sbuf</w>, +      <w>serializers</w>, +++ b/.idea/libraries/logging.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.slf4j/slf4j-log4j12/jars/slf4j-log4j12-1.5.11.jar!/" />, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "slf4j-*.jar") } // no need for slf4j, +++ b/modules/elasticsearch/build.gradle, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('log4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('slf4j') }, +            pom.dependencies = pom.dependencies.findAll {dep -> !dep.artifactId.contains('jline') }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.util.logging.ESLogger;, +            ESLogger logger = Loggers.getLogger(Bootstrap.class);]