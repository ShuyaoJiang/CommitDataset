[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.sort.SortBuilder;, +import org.elasticsearch.search.sort.SortOrder;, +    public SearchRequestBuilder addSort(String field, SortOrder order) {, +     * Adds a generic sort builder., +     * @see org.elasticsearch.search.sort.SortBuilders, +    public SearchRequestBuilder addSort(SortBuilder sort) {, +        sourceBuilder().sort(sort);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.sort.SortBuilder;, +import org.elasticsearch.search.sort.SortOrder;, +    public SearchRequestBuilder addSort(String field, SortOrder order) {, +     * Adds a generic sort builder., +     * @see org.elasticsearch.search.sort.SortBuilders, +    public SearchRequestBuilder addSort(SortBuilder sort) {, +        sourceBuilder().sort(sort);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/geo/GeoDistanceDataComparator.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.geo;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.search.FieldComparator;, +import org.apache.lucene.search.FieldComparatorSource;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.common.unit.DistanceUnit;, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.field.data.FieldData;, +import org.elasticsearch.index.field.data.NumericFieldData;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.xcontent.XContentGeoPointFieldMapper;, +, +import java.io.IOException;, +, +/**, + * @author kimchy (shay.banon), + */, +// LUCENE MONITOR: Monitor against FieldComparator.Double, +public class GeoDistanceDataComparator extends FieldComparator {, +, +    public static FieldComparatorSource comparatorSource(String fieldName, double lat, double lon, DistanceUnit unit, GeoDistance geoDistance,, +                                                         FieldDataCache fieldDataCache, MapperService mapperService) {, +        return new InnerSource(fieldName, lat, lon, unit, geoDistance, fieldDataCache, mapperService);, +    }, +, +    private static class InnerSource extends FieldComparatorSource {, +, +        protected final String fieldName;, +, +        protected final double lat;, +, +        protected final double lon;, +, +        protected final DistanceUnit unit;, +, +        protected final GeoDistance geoDistance;, +, +        protected final FieldDataCache fieldDataCache;, +, +        private final MapperService mapperService;, +, +        private InnerSource(String fieldName, double lat, double lon, DistanceUnit unit, GeoDistance geoDistance,, +                            FieldDataCache fieldDataCache, MapperService mapperService) {, +            this.fieldName = fieldName;, +            this.lat = lat;, +            this.lon = lon;, +            this.unit = unit;, +            this.geoDistance = geoDistance;, +            this.fieldDataCache = fieldDataCache;, +            this.mapperService = mapperService;, +        }, +, +        @Override public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {, +            return new GeoDistanceDataComparator(numHits, fieldname, lat, lon, unit, geoDistance, fieldDataCache, mapperService);, +        }, +    }, +, +    protected final String fieldName;, +, +    protected final String indexLatFieldName;, +, +    protected final String indexLonFieldName;]