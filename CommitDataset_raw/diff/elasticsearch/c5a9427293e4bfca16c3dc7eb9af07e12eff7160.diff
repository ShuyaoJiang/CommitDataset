[+++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +import java.util.Objects;, +        Objects.requireNonNull(fieldName, "fieldName cannot be null");, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +import java.util.Objects;, +        Objects.requireNonNull(fieldName, "fieldName cannot be null");, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (token != XContentParser.Token.START_OBJECT) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + queryName + "] query malformed, no start_object after query name");, +        if (parser.currentToken() == XContentParser.Token.END_OBJECT) {, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +import java.util.Objects;, +        Objects.requireNonNull(fieldName, "fieldName cannot be null");, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (token != XContentParser.Token.START_OBJECT) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + queryName + "] query malformed, no start_object after query name");, +        if (parser.currentToken() == XContentParser.Token.END_OBJECT) {, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchAllQueryBuilderTests.java, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +import java.util.Objects;, +        Objects.requireNonNull(fieldName, "fieldName cannot be null");, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (token != XContentParser.Token.START_OBJECT) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + queryName + "] query malformed, no start_object after query name");, +        if (parser.currentToken() == XContentParser.Token.END_OBJECT) {, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchAllQueryBuilderTests.java, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryParseContextTests.java, +            assertEquals("[foo] query malformed, no start_object after query name", exception.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +import java.util.Objects;, +        Objects.requireNonNull(fieldName, "fieldName cannot be null");, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (token != XContentParser.Token.START_OBJECT) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + queryName + "] query malformed, no start_object after query name");, +        if (parser.currentToken() == XContentParser.Token.END_OBJECT) {, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchAllQueryBuilderTests.java, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryParseContextTests.java, +            assertEquals("[foo] query malformed, no start_object after query name", exception.getMessage());, +++ b/test/framework/src/main/java/org/elasticsearch/test/AbstractQueryTestCase.java, +import static org.hamcrest.Matchers.greaterThan;, +     * Test that wraps the randomly generated query into an array as follows: { "query_name" : [{}]}, +     * This causes unexpected situations in parser code that may not be handled properly., +     */, +    public void testQueryWrappedInArray() throws IOException {, +        QB queryBuilder = createTestQueryBuilder();, +        String validQuery = queryBuilder.toString();, +        String queryName = queryBuilder.getName();, +        int i = validQuery.indexOf("\"" + queryName + "\"");, +        assertThat(i, greaterThan(0));, +, +        int insertionPosition;, +        for (insertionPosition = i; insertionPosition < validQuery.length(); insertionPosition++) {, +            if (validQuery.charAt(insertionPosition) == ':') {, +                break;, +            }, +        }, +        insertionPosition++;, +, +        int endArrayPosition;, +        for (endArrayPosition = validQuery.length() - 1; endArrayPosition >= 0; endArrayPosition--) {, +            if (validQuery.charAt(endArrayPosition) == '}') {, +                break;, +            }, +        }, +, +        String testQuery = validQuery.substring(0, insertionPosition) + "[" +, +                validQuery.substring(insertionPosition, endArrayPosition) + "]" +, +                validQuery.substring(endArrayPosition, validQuery.length());, +, +        try {, +            parseQuery(testQuery);, +            fail("some parsing exception expected for query: " + testQuery);, +        } catch (ParsingException e) {, +            assertEquals("[" + queryName + "] query malformed, no start_object after query name", e.getMessage());, +        }, +    }, +, +    /**]