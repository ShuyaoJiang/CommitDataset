[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        String mlEnabledNodeAttrName = "node.attr." + ML_ENABLED_NODE_ATTR;, +        String maxOpenJobsPerNodeNodeAttrName = "node.attr." + MAX_OPEN_JOBS_NODE_ATTR;, +, +            disallowMlNodeAttributes(mlEnabledNodeAttrName, maxOpenJobsPerNodeNodeAttrName);, +            addMlNodeAttribute(additionalSettings, mlEnabledNodeAttrName, "true");, +            addMlNodeAttribute(additionalSettings, maxOpenJobsPerNodeNodeAttrName,, +                    String.valueOf(AutodetectProcessManager.MAX_OPEN_JOBS_PER_NODE.get(settings)));, +        } else {, +            disallowMlNodeAttributes(mlEnabledNodeAttrName, maxOpenJobsPerNodeNodeAttrName);, +    private void addMlNodeAttribute(Settings.Builder additionalSettings, String attrName, String value) {, +        // Unfortunately we cannot simply disallow any value, because the internal cluster integration, +        // test framework will restart nodes with settings copied from the node immediately before it, +        // was stopped.  The best we can do is reject inconsistencies, and report this in a way that, +        // makes clear that setting the node attribute directly is not allowed., +        String oldValue = settings.get(attrName);, +        if (oldValue == null || oldValue.equals(value)) {, +            additionalSettings.put(attrName, value);, +        } else {, +            reportClashingNodeAttribute(attrName);, +        }, +    }, +, +    private void disallowMlNodeAttributes(String... mlNodeAttributes) {, +        for (String attrName : mlNodeAttributes) {, +            if (settings.get(attrName) != null) {, +                reportClashingNodeAttribute(attrName);, +            }, +        }, +    }, +, +    private void reportClashingNodeAttribute(String attrName) {, +        throw new IllegalArgumentException("Directly setting [" + attrName + "] is not permitted - " +, +                "it is reserved for machine learning. If your intention was to customize machine learning, set the [" +, +                attrName.replace("node.attr.", "xpack.") + "] setting instead.");, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        String mlEnabledNodeAttrName = "node.attr." + ML_ENABLED_NODE_ATTR;, +        String maxOpenJobsPerNodeNodeAttrName = "node.attr." + MAX_OPEN_JOBS_NODE_ATTR;, +, +            disallowMlNodeAttributes(mlEnabledNodeAttrName, maxOpenJobsPerNodeNodeAttrName);, +            addMlNodeAttribute(additionalSettings, mlEnabledNodeAttrName, "true");, +            addMlNodeAttribute(additionalSettings, maxOpenJobsPerNodeNodeAttrName,, +                    String.valueOf(AutodetectProcessManager.MAX_OPEN_JOBS_PER_NODE.get(settings)));, +        } else {, +            disallowMlNodeAttributes(mlEnabledNodeAttrName, maxOpenJobsPerNodeNodeAttrName);, +    private void addMlNodeAttribute(Settings.Builder additionalSettings, String attrName, String value) {, +        // Unfortunately we cannot simply disallow any value, because the internal cluster integration, +        // test framework will restart nodes with settings copied from the node immediately before it, +        // was stopped.  The best we can do is reject inconsistencies, and report this in a way that, +        // makes clear that setting the node attribute directly is not allowed., +        String oldValue = settings.get(attrName);, +        if (oldValue == null || oldValue.equals(value)) {, +            additionalSettings.put(attrName, value);, +        } else {, +            reportClashingNodeAttribute(attrName);, +        }, +    }, +, +    private void disallowMlNodeAttributes(String... mlNodeAttributes) {, +        for (String attrName : mlNodeAttributes) {, +            if (settings.get(attrName) != null) {, +                reportClashingNodeAttribute(attrName);, +            }, +        }, +    }, +, +    private void reportClashingNodeAttribute(String attrName) {, +        throw new IllegalArgumentException("Directly setting [" + attrName + "] is not permitted - " +, +                "it is reserved for machine learning. If your intention was to customize machine learning, set the [" +, +                attrName.replace("node.attr.", "xpack.") + "] setting instead.");, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/MachineLearningTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml;, +, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.license.XPackLicenseState;, +import org.elasticsearch.test.ESTestCase;, +, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.startsWith;, +import static org.mockito.Mockito.mock;, +, +public class MachineLearningTests extends ESTestCase {, +, +    public void testNoAttributes_givenNoClash() {, +        Settings.Builder builder = Settings.builder();, +        if (randomBoolean()) {, +            builder.put("xpack.ml.enabled", randomBoolean());, +        }, +        if (randomBoolean()) {, +            builder.put("xpack.ml.max_open_jobs", randomIntBetween(9, 12));]