[+++ b/src/main/java/org/elasticsearch/common/compress/CompressedDirectory.java, +package org.elasticsearch.common.compress;, +, +import com.google.common.collect.ImmutableSet;, +import org.apache.lucene.store.*;, +import org.elasticsearch.index.store.support.ForceSyncDirectory;, +, +import java.io.IOException;, +import java.util.Collection;, +, +/**, + */, +public class CompressedDirectory extends Directory implements ForceSyncDirectory {, +, +    private final Directory dir;, +, +    private final Compressor compressor;, +, +    private final boolean actualLength;, +, +    private final ImmutableSet<String> compressExtensions;, +    private final ImmutableSet<String> decompressExtensions;, +, +    private volatile boolean compress = true;, +, +    public CompressedDirectory(Directory dir, Compressor compressor, boolean actualLength, String... extensions) {, +        this(dir, compressor, actualLength, extensions, extensions);, +    }, +, +    public CompressedDirectory(Directory dir, Compressor compressor, boolean actualLength, String[] compressExtensions, String[] decompressExtensions) {, +        this.dir = dir;, +        this.actualLength = actualLength;, +        this.compressor = compressor;, +        this.compressExtensions = ImmutableSet.copyOf(compressExtensions);, +        this.decompressExtensions = ImmutableSet.copyOf(decompressExtensions);, +        this.lockFactory = dir.getLockFactory();, +    }, +, +    @Override, +    public String[] listAll() throws IOException {, +        return dir.listAll();, +    }, +, +    public void setCompress(boolean compress) {, +        this.compress = compress;, +    }, +, +    /**, +     * Utility method to return a file's extension., +     */, +    public static String getExtension(String name) {, +        int i = name.lastIndexOf('.');, +        if (i == -1) {, +            return "";, +        }, +        return name.substring(i + 1, name.length());, +    }, +, +    @Override, +    public boolean fileExists(String name) throws IOException {, +        return dir.fileExists(name);, +    }, +, +    @Override, +    public long fileModified(String name) throws IOException {, +        return dir.fileModified(name);, +    }, +, +    @Override, +    public void touchFile(String name) throws IOException {, +        dir.touchFile(name);, +    }, +, +    @Override, +    public void deleteFile(String name) throws IOException {, +        dir.deleteFile(name);, +    }, +, +    /**, +     * Returns the actual file size, so will work with compound file format, +     * when compressed. Its the only one that really uses it for offsets..., +     */, +    @Override, +    public long fileLength(String name) throws IOException {, +        if (actualLength && decompressExtensions.contains(getExtension(name))) {, +            IndexInput in = openInput(name);, +            try {, +                return in.length();, +            } catch (Exception e) {, +                in.close();, +            }, +        }, +        return dir.fileLength(name);, +    }, +, +    @Override, +    public void sync(Collection<String> names) throws IOException {, +        dir.sync(names);, +    }, +]