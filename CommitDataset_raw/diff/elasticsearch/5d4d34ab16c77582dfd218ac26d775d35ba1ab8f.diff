[+++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries);, +            super.flatten(sourceQuery, reader, flatQueries);, +                        super.flatten(new TermQuery(term), reader, flatQueries);    , +            this.flatten(query, reader, flatQueries);, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries);, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries);, +            super.flatten(sourceQuery, reader, flatQueries);, +                        super.flatten(new TermQuery(term), reader, flatQueries);    , +            this.flatten(query, reader, flatQueries);, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries);, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +import java.util.Objects;, +, +        Objects.requireNonNull(action, "action must not be null");, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries);, +            super.flatten(sourceQuery, reader, flatQueries);, +                        super.flatten(new TermQuery(term), reader, flatQueries);    , +            this.flatten(query, reader, flatQueries);, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries);, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +import java.util.Objects;, +, +        Objects.requireNonNull(action, "action must not be null");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries);, +            super.flatten(sourceQuery, reader, flatQueries);, +                        super.flatten(new TermQuery(term), reader, flatQueries);    , +            this.flatten(query, reader, flatQueries);, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries);, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +import java.util.Objects;, +, +        Objects.requireNonNull(action, "action must not be null");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/common/inject/AbstractModule.java, +import java.util.Objects;, +        this.binder = Objects.requireNonNull(builder, "builder");, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries);, +            super.flatten(sourceQuery, reader, flatQueries);, +                        super.flatten(new TermQuery(term), reader, flatQueries);    , +            this.flatten(query, reader, flatQueries);, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries);, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +import java.util.Objects;, +, +        Objects.requireNonNull(action, "action must not be null");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/common/inject/AbstractModule.java, +import java.util.Objects;, +        this.binder = Objects.requireNonNull(builder, "builder");, +++ b/core/src/main/java/org/elasticsearch/common/inject/InheritingState.java, +import java.util.Objects;, +        this.parent = Objects.requireNonNull(parent, "parent");, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries);]