[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/CompilerSettings.java, +     * For testing: do not use., +     */, +    public static final String INITIAL_CALL_SITE_DEPTH = "initialCallSiteDepth";, +, +    /**, +     * For testing. Do not use., +     */, +    private int initialCallSiteDepth = 0;, +, +    /**, +    , +    /**, +     * Returns initial call site depth. This means we pretend we've already seen N different types,, +     * to better exercise fallback code in tests., +     */, +    public int getInitialCallSiteDepth() {, +        return initialCallSiteDepth;, +    }, +    , +    /**, +     * For testing megamorphic fallbacks. Do not use., +     * @see #getInitialCallSiteDepth(), +     */, +    public void setInitialCallSiteDepth(int depth) {, +        this.initialCallSiteDepth = depth;, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/CompilerSettings.java, +     * For testing: do not use., +     */, +    public static final String INITIAL_CALL_SITE_DEPTH = "initialCallSiteDepth";, +, +    /**, +     * For testing. Do not use., +     */, +    private int initialCallSiteDepth = 0;, +, +    /**, +    , +    /**, +     * Returns initial call site depth. This means we pretend we've already seen N different types,, +     * to better exercise fallback code in tests., +     */, +    public int getInitialCallSiteDepth() {, +        return initialCallSiteDepth;, +    }, +    , +    /**, +     * For testing megamorphic fallbacks. Do not use., +     * @see #getInitialCallSiteDepth(), +     */, +    public void setInitialCallSiteDepth(int depth) {, +        this.initialCallSiteDepth = depth;, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                                                              0,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/CompilerSettings.java, +     * For testing: do not use., +     */, +    public static final String INITIAL_CALL_SITE_DEPTH = "initialCallSiteDepth";, +, +    /**, +     * For testing. Do not use., +     */, +    private int initialCallSiteDepth = 0;, +, +    /**, +    , +    /**, +     * Returns initial call site depth. This means we pretend we've already seen N different types,, +     * to better exercise fallback code in tests., +     */, +    public int getInitialCallSiteDepth() {, +        return initialCallSiteDepth;, +    }, +    , +    /**, +     * For testing megamorphic fallbacks. Do not use., +     * @see #getInitialCallSiteDepth(), +     */, +    public void setInitialCallSiteDepth(int depth) {, +        this.initialCallSiteDepth = depth;, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                                                              0,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +import java.lang.invoke.WrongMethodTypeException;, +     * <p>, +     * may require {@link MethodHandles#explicitCastArguments}, or a dynamic cast, +     * to cast back to the receiver's type, depending on types seen., +     * static bootstrap parameter indicating an explicit cast to the return type., +     * <p>, +     * may require {@link MethodHandles#explicitCastArguments}, depending on types seen., +     */, +    public static final int OPERATOR_EXPLICIT_CAST = 1 << 2;, +, +    /**, +        PIC(Lookup lookup, String name, MethodType type, int initialDepth, int flavor, Object[] args) {, +            this.depth = initialDepth;, +        MIC(String name, MethodType type, int initialDepth, int flavor, int flags) {]