[+++ b/core/src/main/java/org/elasticsearch/ingest/core/IngestDocument.java, +        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata));, +    @SuppressWarnings("unchecked"), +    private static <K, V> Map<K, V> deepCopyMap(Map<K, V> source) {, +        return (Map<K, V>) deepCopy(source);, +    }, +, +    private static Object deepCopy(Object value) {, +        if (value instanceof Map) {, +            Map<?, ?> mapValue = (Map<?, ?>) value;, +            Map<Object, Object> copy = new HashMap<>(mapValue.size());, +            for (Map.Entry<?, ?> entry : mapValue.entrySet()) {, +                copy.put(entry.getKey(), deepCopy(entry.getValue()));, +            }, +            return copy;, +        } else if (value instanceof List) {, +            List<?> listValue = (List<?>) value;, +            List<Object> copy = new ArrayList<>(listValue.size());, +            for (Object itemValue : listValue) {, +                copy.add(deepCopy(itemValue));, +            }, +            return copy;, +        } else if (value == null || value instanceof String || value instanceof Integer ||, +            value instanceof Long || value instanceof Float ||, +            value instanceof Double || value instanceof Boolean) {, +            return value;, +        } else {, +            throw new IllegalArgumentException("unexpected value type [" + value.getClass() + "]");, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ingest/core/IngestDocument.java, +        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata));, +    @SuppressWarnings("unchecked"), +    private static <K, V> Map<K, V> deepCopyMap(Map<K, V> source) {, +        return (Map<K, V>) deepCopy(source);, +    }, +, +    private static Object deepCopy(Object value) {, +        if (value instanceof Map) {, +            Map<?, ?> mapValue = (Map<?, ?>) value;, +            Map<Object, Object> copy = new HashMap<>(mapValue.size());, +            for (Map.Entry<?, ?> entry : mapValue.entrySet()) {, +                copy.put(entry.getKey(), deepCopy(entry.getValue()));, +            }, +            return copy;, +        } else if (value instanceof List) {, +            List<?> listValue = (List<?>) value;, +            List<Object> copy = new ArrayList<>(listValue.size());, +            for (Object itemValue : listValue) {, +                copy.add(deepCopy(itemValue));, +            }, +            return copy;, +        } else if (value == null || value instanceof String || value instanceof Integer ||, +            value instanceof Long || value instanceof Float ||, +            value instanceof Double || value instanceof Boolean) {, +            return value;, +        } else {, +            throw new IllegalArgumentException("unexpected value type [" + value.getClass() + "]");, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/ingest/core/IngestDocumentTests.java, +        recursiveEqualsButNotSameCheck(ingestDocument.getSourceAndMetadata(), copy.getSourceAndMetadata());, +, +    private void recursiveEqualsButNotSameCheck(Object a, Object b) {, +        assertThat(a, not(sameInstance(b)));, +        assertThat(a, equalTo(b));, +        if (a instanceof Map) {, +            Map<?, ?> mapA = (Map<?, ?>) a;, +            Map<?, ?> mapB = (Map<?, ?>) b;, +            for (Map.Entry<?, ?> entry : mapA.entrySet()) {, +                if (entry.getValue() instanceof List || entry.getValue() instanceof Map) {, +                    recursiveEqualsButNotSameCheck(entry.getValue(), mapB.get(entry.getKey()));, +                }, +            }, +        } else if (a instanceof List) {, +            List<?> listA = (List<?>) a;, +            List<?> listB = (List<?>) b;, +            for (int i = 0; i < listA.size(); i++) {, +                Object value = listA.get(i);, +                if (value instanceof List || value instanceof Map) {, +                    recursiveEqualsButNotSameCheck(value, listB.get(i));, +                }, +            }, +        }, +, +    }, +]