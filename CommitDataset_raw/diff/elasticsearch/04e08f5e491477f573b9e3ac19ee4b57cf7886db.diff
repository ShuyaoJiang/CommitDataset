[+++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplier.java, +     * Sets the initial state for this applier. Should only be called once., +     * @param initialState the initial state to set, +     */, +    void setInitialState(ClusterState initialState);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplier.java, +     * Sets the initial state for this applier. Should only be called once., +     * @param initialState the initial state to set, +     */, +    void setInitialState(ClusterState initialState);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +    @Override, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplier.java, +     * Sets the initial state for this applier. Should only be called once., +     * @param initialState the initial state to set, +     */, +    void setInitialState(ClusterState initialState);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +    @Override, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplier.java, +     * Sets the initial state for this applier. Should only be called once., +     * @param initialState the initial state to set, +     */, +    void setInitialState(ClusterState initialState);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +    @Override, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        discoveryTypes.put("tribe", () -> new TribeDiscovery(settings, transportService, masterService, clusterApplier));, +        discoveryTypes.put("single-node", () -> new SingleNodeDiscovery(settings, transportService, masterService, clusterApplier));, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplier.java, +     * Sets the initial state for this applier. Should only be called once., +     * @param initialState the initial state to set, +     */, +    void setInitialState(ClusterState initialState);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +    @Override, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        discoveryTypes.put("tribe", () -> new TribeDiscovery(settings, transportService, masterService, clusterApplier));, +        discoveryTypes.put("single-node", () -> new SingleNodeDiscovery(settings, transportService, masterService, clusterApplier));, +++ b/core/src/main/java/org/elasticsearch/discovery/TribeDiscovery.java, +import org.elasticsearch.cluster.service.MasterService;, +    public TribeDiscovery(Settings settings, TransportService transportService,, +                          MasterService masterService, ClusterApplier clusterApplier) {, +        super(settings, transportService, masterService, clusterApplier);, +    protected ClusterState createInitialState(DiscoveryNode localNode) {, +        return ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.get(settings)), +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplier.java, +     * Sets the initial state for this applier. Should only be called once., +     * @param initialState the initial state to set, +     */, +    void setInitialState(ClusterState initialState);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +    @Override, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        discoveryTypes.put("tribe", () -> new TribeDiscovery(settings, transportService, masterService, clusterApplier));, +        discoveryTypes.put("single-node", () -> new SingleNodeDiscovery(settings, transportService, masterService, clusterApplier));, +++ b/core/src/main/java/org/elasticsearch/discovery/TribeDiscovery.java, +import org.elasticsearch.cluster.service.MasterService;, +    public TribeDiscovery(Settings settings, TransportService transportService,, +                          MasterService masterService, ClusterApplier clusterApplier) {, +        super(settings, transportService, masterService, clusterApplier);, +    protected ClusterState createInitialState(DiscoveryNode localNode) {, +        return ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.get(settings)), +++ b/core/src/main/java/org/elasticsearch/discovery/single/SingleNodeDiscovery.java, +import org.elasticsearch.cluster.service.MasterService;, +                               final MasterService masterService, final ClusterApplier clusterApplier) {, +        masterService.setClusterStateSupplier(() -> clusterState);, +        clusterApplier.onNewClusterState("apply-locally-on-node[" + event.source() + "]", () -> clusterState, listener);, +    public DiscoveryStats stats() {, +        return new DiscoveryStats((PendingClusterStateStats) null);, +    }, +, +    @Override, +    public synchronized void startInitialJoin() {, +        if (lifecycle.started() == false) {, +            throw new IllegalStateException("can't start initial join when not started");, +        }, +        // apply a fresh cluster state just so that state recovery gets triggered by GatewayService, +        // TODO: give discovery module control over GatewayService, +        clusterState = ClusterState.builder(clusterState).build();, +        clusterApplier.onNewClusterState("single-node-start-initial-join", () -> clusterState, (source, e) -> {});, +    }, +, +    @Override]