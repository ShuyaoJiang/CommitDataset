[+++ b/server/src/main/java/org/elasticsearch/search/query/TopDocsCollectorContext.java, +import org.apache.lucene.index.FieldInfo;, +import org.apache.lucene.index.FieldInfos;, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.index.PointValues;, +import org.apache.lucene.index.Terms;, +import org.apache.lucene.search.DocValuesFieldExistsQuery;, +        @Override, +        } else if (query.getClass() == DocValuesFieldExistsQuery.class && reader.hasDeletions() == false) {, +            final String field = ((DocValuesFieldExistsQuery) query).getField();, +            int count = 0;, +            for (LeafReaderContext context : reader.leaves()) {, +                FieldInfos fieldInfos = context.reader().getFieldInfos();, +                FieldInfo fieldInfo = fieldInfos.fieldInfo(field);, +                if (fieldInfo != null) {, +                    if (fieldInfo.getPointIndexDimensionCount() > 0) {, +                        PointValues points = context.reader().getPointValues(field);, +                        if (points != null) {, +                            count += points.getDocCount();, +                        }, +                    } else if (fieldInfo.getIndexOptions() != IndexOptions.NONE) {, +                        Terms terms = context.reader().terms(field);, +                        if (terms != null) {, +                            count += terms.getDocCount();, +                        }, +                    } else {, +                        return -1; // no shortcut possible for fields that are not indexed, +                    }, +                }, +            }, +            return count;, +++ b/server/src/main/java/org/elasticsearch/search/query/TopDocsCollectorContext.java, +import org.apache.lucene.index.FieldInfo;, +import org.apache.lucene.index.FieldInfos;, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.index.PointValues;, +import org.apache.lucene.index.Terms;, +import org.apache.lucene.search.DocValuesFieldExistsQuery;, +        @Override, +        } else if (query.getClass() == DocValuesFieldExistsQuery.class && reader.hasDeletions() == false) {, +            final String field = ((DocValuesFieldExistsQuery) query).getField();, +            int count = 0;, +            for (LeafReaderContext context : reader.leaves()) {, +                FieldInfos fieldInfos = context.reader().getFieldInfos();, +                FieldInfo fieldInfo = fieldInfos.fieldInfo(field);, +                if (fieldInfo != null) {, +                    if (fieldInfo.getPointIndexDimensionCount() > 0) {, +                        PointValues points = context.reader().getPointValues(field);, +                        if (points != null) {, +                            count += points.getDocCount();, +                        }, +                    } else if (fieldInfo.getIndexOptions() != IndexOptions.NONE) {, +                        Terms terms = context.reader().terms(field);, +                        if (terms != null) {, +                            count += terms.getDocCount();, +                        }, +                    } else {, +                        return -1; // no shortcut possible for fields that are not indexed, +                    }, +                }, +            }, +            return count;, +++ b/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java, +import org.apache.lucene.document.LatLonDocValuesField;, +import org.apache.lucene.document.LatLonPoint;, +import org.apache.lucene.document.SortedSetDocValuesField;, +import org.apache.lucene.search.DocValuesFieldExistsQuery;, +import org.apache.lucene.util.BytesRef;, +    private void countTestCase(Query query, IndexReader reader, boolean shouldCollectSearch, boolean shouldCollectCount) throws Exception {, +        final IndexSearcher searcher = shouldCollectSearch ? new IndexSearcher(reader) :, +        IndexSearcher countSearcher = shouldCollectCount ? new IndexSearcher(reader) :, +            getAssertingEarlyTerminationSearcher(reader, 0);, +        assertEquals(countSearcher.count(query), context.queryResult().topDocs().topDocs.totalHits.value);, +                doc.add(new SortedSetDocValuesField("foo", new BytesRef("bar")));, +                doc.add(new SortedSetDocValuesField("docValuesOnlyField", new BytesRef("bar")));, +                doc.add(new LatLonDocValuesField("latLonDVField", 1.0, 1.0));, +                doc.add(new LatLonPoint("latLonDVField", 1.0, 1.0));, +                doc.add(new SortedSetDocValuesField("foo", new BytesRef("baz")));, +        Query dvfeq = new DocValuesFieldExistsQuery("foo");, +        Query dvfeq_points = new DocValuesFieldExistsQuery("latLonDVField");, +        Query dvfeqCsq = new ConstantScoreQuery(dvfeq);, +        // field with doc-values but not indexed will need to collect, +        Query dvOnlyfeq = new DocValuesFieldExistsQuery("docValuesOnlyField");, +        countTestCase(matchAll, reader, false, false);, +        countTestCase(matchAllCsq, reader, false, false);, +        countTestCase(tq, reader, withDeletions, withDeletions);, +        countTestCase(tCsq, reader, withDeletions, withDeletions);, +        countTestCase(dvfeq, reader, withDeletions, true);, +        countTestCase(dvfeq_points, reader, withDeletions, true);, +        countTestCase(dvfeqCsq, reader, withDeletions, true);, +        countTestCase(dvOnlyfeq, reader, true, true);, +        countTestCase(bq, reader, true, true);, +            @Override]