[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +import org.elasticsearch.common.bytes.BytesReference;, +    private BytesReference source;, +        this.source = request.source();, +    public BytesReference source() {, +        return source;, +        source = in.readBytesReference();, +        out.writeBytesReference(source);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +import org.elasticsearch.common.bytes.BytesReference;, +    private BytesReference source;, +        this.source = request.source();, +    public BytesReference source() {, +        return source;, +        source = in.readBytesReference();, +        out.writeBytesReference(source);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +            if (request.source() != null && request.source().length() > 0) {, +                searchContext.parsedQuery(queryParserService.parseTopLevelQuery(request.source()));, +            }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +import org.elasticsearch.common.bytes.BytesReference;, +    private BytesReference source;, +        this.source = request.source();, +    public BytesReference source() {, +        return source;, +        source = in.readBytesReference();, +        out.writeBytesReference(source);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +            if (request.source() != null && request.source().length() > 0) {, +                searchContext.parsedQuery(queryParserService.parseTopLevelQuery(request.source()));, +            }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequest.java, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.action.support.QuerySourceBuilder;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import java.util.Map;, + * The request requires the query source to be set either using {@link #source(QuerySourceBuilder)},, + * or {@link #source(byte[])}., +    private BytesReference source;, +     * The source to execute., +    public BytesReference source() {, +        return source;, +    public ValidateQueryRequest source(QuerySourceBuilder sourceBuilder) {, +        this.source = sourceBuilder.buildAsBytes(Requests.CONTENT_TYPE);, +        return this;, +    }, +, +    /**, +     * The source to execute in the form of a map., +     */, +    public ValidateQueryRequest source(Map source) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(Requests.CONTENT_TYPE);, +            builder.map(source);, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e);, +        }, +    }, +, +    public ValidateQueryRequest source(XContentBuilder builder) {, +        this.source = builder.bytes();, +        return this;, +    }, +, +    /**, +     * The query source to validate. It is preferable to use either {@link #source(byte[])}, +     * or {@link #source(QuerySourceBuilder)}., +     */, +    public ValidateQueryRequest source(String source) {, +        this.source = new BytesArray(source);, +        return this;, +    }, +, +    /**, +     * The source to validate., +     */, +    public ValidateQueryRequest source(byte[] source) {, +        return source(source, 0, source.length);, +    }, +, +    /**, +     * The source to validate., +     */, +    public ValidateQueryRequest source(byte[] source, int offset, int length) {, +        return source(new BytesArray(source, offset, length));, +    }, +, +    /**, +     * The source to validate., +     */, +    public ValidateQueryRequest source(BytesReference source) {]