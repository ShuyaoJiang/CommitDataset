[+++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/secure_hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/secure_hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.restore/10_basic.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/secure_hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.restore/10_basic.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +        indexShard.flush(new FlushRequest().force(true));, +        logger.trace("{} shard is ready for closing", shardId);, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/secure_hdfs_repository/40_restore.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.restore/10_basic.yml, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt:    { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +        indexShard.flush(new FlushRequest().force(true));, +        logger.trace("{} shard is ready for closing", shardId);, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseActionTests.java, +import org.elasticsearch.index.engine.Engine;, +import org.mockito.ArgumentCaptor;, +import static org.hamcrest.Matchers.is;, +    public void testShardIsFlushed() throws Exception {, +        final ArgumentCaptor<FlushRequest> flushRequest = ArgumentCaptor.forClass(FlushRequest.class);, +        when(indexShard.flush(flushRequest.capture())).thenReturn(new Engine.CommitId(new byte[0]));, +, +        assertThat(flushRequest.getValue().force(), is(true));]