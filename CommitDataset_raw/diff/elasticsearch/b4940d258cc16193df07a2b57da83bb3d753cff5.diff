[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                            logger.info("{}, Reason: {}", summary, source);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                            logger.info("{}, Reason: {}", summary, source);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    private void handleNodeFailure(final DiscoveryNode node, String reason) {, +        clusterService.submitStateUpdateTask("zen-disco-node_failed(" + node + "), reason " + reason, new ProcessedClusterStateUpdateTask() {, +        @Override public void onNodeFailure(DiscoveryNode node, String reason) {, +            handleNodeFailure(node, reason);, +        @Override public void onMasterFailure(DiscoveryNode masterNode, String reason) {, +            handleMasterGone(masterNode, reason);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                            logger.info("{}, Reason: {}", summary, source);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    private void handleNodeFailure(final DiscoveryNode node, String reason) {, +        clusterService.submitStateUpdateTask("zen-disco-node_failed(" + node + "), reason " + reason, new ProcessedClusterStateUpdateTask() {, +        @Override public void onNodeFailure(DiscoveryNode node, String reason) {, +            handleNodeFailure(node, reason);, +        @Override public void onMasterFailure(DiscoveryNode masterNode, String reason) {, +            handleMasterGone(masterNode, reason);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +        void onMasterFailure(DiscoveryNode masterNode, String reason);, +            notifyMasterFailure(masterNode, "failed to perform initial connect [" + e.getMessage() + "]");, +                notifyMasterFailure(masterNode, "Failed on disconnect (with verified connect)");, +            notifyMasterFailure(masterNode, "Failed on disconnect");, +    private void notifyMasterFailure(DiscoveryNode masterNode, String reason) {, +                listener.onMasterFailure(masterNode, reason);, +                                        notifyMasterFailure(sentToNode, "Failed on ping, tried [" + pingRetryCount + "] times, each with [" + pingRetryTimeout + "] timeout");, +                                    } else {, +                                        transportService.sendRequest(sentToNode, MasterPingRequestHandler.ACTION, new MasterPingRequest(nodesProvider.nodes().localNode()), pingRetryTimeout, this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                            logger.info("{}, Reason: {}", summary, source);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    private void handleNodeFailure(final DiscoveryNode node, String reason) {, +        clusterService.submitStateUpdateTask("zen-disco-node_failed(" + node + "), reason " + reason, new ProcessedClusterStateUpdateTask() {, +        @Override public void onNodeFailure(DiscoveryNode node, String reason) {, +            handleNodeFailure(node, reason);, +        @Override public void onMasterFailure(DiscoveryNode masterNode, String reason) {, +            handleMasterGone(masterNode, reason);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +        void onMasterFailure(DiscoveryNode masterNode, String reason);, +            notifyMasterFailure(masterNode, "failed to perform initial connect [" + e.getMessage() + "]");, +                notifyMasterFailure(masterNode, "Failed on disconnect (with verified connect)");, +            notifyMasterFailure(masterNode, "Failed on disconnect");, +    private void notifyMasterFailure(DiscoveryNode masterNode, String reason) {, +                listener.onMasterFailure(masterNode, reason);, +                                        notifyMasterFailure(sentToNode, "Failed on ping, tried [" + pingRetryCount + "] times, each with [" + pingRetryTimeout + "] timeout");, +                                    } else {, +                                        transportService.sendRequest(sentToNode, MasterPingRequestHandler.ACTION, new MasterPingRequest(nodesProvider.nodes().localNode()), pingRetryTimeout, this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/fd/NodesFaultDetection.java, +        void onNodeFailure(DiscoveryNode node, String reason);, +            if (newNode.id().equals(nodes.localNodeId())) {, +                // no need to monitor the local node, +                continue;, +            }, +                notifyNodeFailure(node, "Failed on disconnect (with verified connect)");, +            notifyNodeFailure(node, "Failed on disconnect");, +    private void notifyNodeFailure(DiscoveryNode node, String reason) {, +            listener.onNodeFailure(node, reason);, +                                            notifyNodeFailure(node, "Failed on ping, tried [" + pingRetryCount + "] times, each with [" + pingRetryTimeout + "] timeout");, +                                    } else {, +                                        // resend the request, +                                        transportService.sendRequest(node, PingRequestHandler.ACTION, new PingRequest(), pingRetryTimeout, this);]