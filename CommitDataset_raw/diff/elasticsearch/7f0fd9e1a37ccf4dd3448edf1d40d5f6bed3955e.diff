[+++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectoryGroupsResolver.java, +    private final boolean ignoreReferralErrors;, +    ActiveDirectoryGroupsResolver(Settings settings, String baseDnDefault,, +                                  boolean ignoreReferralErrors) {, +        this.ignoreReferralErrors = ignoreReferralErrors;, +                ignoreReferralErrors, ActionListener.wrap((filter) -> {, +                        search(connection, baseDn, scope.scope(), filter,, +                                Math.toIntExact(timeout.seconds()), ignoreReferralErrors,, +    static void buildGroupQuery(LDAPInterface connection, String userDn, TimeValue timeout,, +                                boolean ignoreReferralErrors, ActionListener<Filter> listener) {, +        searchForEntry(connection, userDn, SearchScope.BASE, OBJECT_CLASS_PRESENCE_FILTER,, +                Math.toIntExact(timeout.seconds()), ignoreReferralErrors,, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectoryGroupsResolver.java, +    private final boolean ignoreReferralErrors;, +    ActiveDirectoryGroupsResolver(Settings settings, String baseDnDefault,, +                                  boolean ignoreReferralErrors) {, +        this.ignoreReferralErrors = ignoreReferralErrors;, +                ignoreReferralErrors, ActionListener.wrap((filter) -> {, +                        search(connection, baseDn, scope.scope(), filter,, +                                Math.toIntExact(timeout.seconds()), ignoreReferralErrors,, +    static void buildGroupQuery(LDAPInterface connection, String userDn, TimeValue timeout,, +                                boolean ignoreReferralErrors, ActionListener<Filter> listener) {, +        searchForEntry(connection, userDn, SearchScope.BASE, OBJECT_CLASS_PRESENCE_FILTER,, +                Math.toIntExact(timeout.seconds()), ignoreReferralErrors,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +            throw new IllegalArgumentException("missing [" + AD_DOMAIN_NAME_SETTING +, +                    "] setting for active directory");, +        GroupsResolver groupResolver = new ActiveDirectoryGroupsResolver(, +                settings.getAsSettings("group_search"), domainDN, ignoreReferralErrors);, +        defaultADAuthenticator = new DefaultADAuthenticator(settings, timeout,, +                ignoreReferralErrors, logger, groupResolver, domainDN);, +        downLevelADAuthenticator = new DownLevelADAuthenticator(config, timeout,, +                ignoreReferralErrors, logger, groupResolver, domainDN, sslService);, +        upnADAuthenticator = new UpnADAuthenticator(settings, timeout,, +                ignoreReferralErrors, logger, groupResolver, domainDN);, +        final boolean ignoreReferralErrors;, +        ADAuthenticator(Settings settings, TimeValue timeout, boolean ignoreReferralErrors,, +                        Logger logger, GroupsResolver groupsResolver, String domainDN) {, +            this.ignoreReferralErrors = ignoreReferralErrors;, +        DefaultADAuthenticator(Settings settings, TimeValue timeout, boolean ignoreReferralErrors,, +                               Logger logger, GroupsResolver groupsResolver, String domainDN) {, +            super(settings, timeout, ignoreReferralErrors, logger, groupsResolver, domainDN);, +        void searchForDN(LDAPConnection connection, String username, SecuredString password,, +                         int timeLimitSeconds, ActionListener<SearchResultEntry> listener) {, +                searchForEntry(connection, userSearchDN, userSearchScope.scope(),, +                        createFilter(userSearchFilter, username), timeLimitSeconds,, +                        ignoreReferralErrors, listener,, +                        attributesToSearchFor(groupsResolver.attributes()));, +     * Active Directory calls the format <code>DOMAIN\\username</code> down-level credentials and, +     * this class contains the logic necessary to authenticate this form of a username, +        DownLevelADAuthenticator(RealmConfig config, TimeValue timeout,, +                                 boolean ignoreReferralErrors, Logger logger,, +                                 GroupsResolver groupsResolver, String domainDN,, +            super(config.settings(), timeout, ignoreReferralErrors, logger, groupsResolver,, +                    domainDN);, +                                createFilter("(&(objectClass=user)(sAMAccountName={0}))",, +                                        accountName), timeLimitSeconds, ignoreReferralErrors,, +                                listener, attributesToSearchFor(groupsResolver.attributes()));, +                // the global catalog does not replicate the necessary information to map a netbios, +                // dns name to a DN so we need to instead connect to the normal ports. This code, +                // uses the standard ports to avoid adding even more settings and is probably ok as, +                        searchConnection = LdapUtils.privilegedConnect(, +                                () -> new LDAPConnection(connection.getSocketFactory(), options,, +                    search(finalConnection, domainDN, LdapSearchScope.SUB_TREE.scope(), filter,, +                            timeLimitSeconds, ignoreReferralErrors, ActionListener.wrap(, +                                    (results) -> {, +                                        handleSearchResults(results, netBiosDomainName,, +                                                domainNameCache, listener);, +                    search(connection, domainDN, LdapSearchScope.SUB_TREE.scope(), filter,, +                            timeLimitSeconds, ignoreReferralErrors, ActionListener.wrap(, +                                    (results) -> handleSearchResults(results, netBiosDomainName,, +                                            domainNameCache, listener),, +        static void handleSearchResults(List<SearchResultEntry> results, String netBiosDomainName,, +                                        Cache<String, String> domainNameCache,, +            Optional<SearchResultEntry> entry = results.stream(), +                    .filter((r) -> r.hasAttribute("ncname")), +                    .findFirst();, +        UpnADAuthenticator(Settings settings, TimeValue timeout, boolean ignoreReferralErrors,, +                           Logger logger, GroupsResolver groupsResolver, String domainDN) {, +            super(settings, timeout, ignoreReferralErrors, logger, groupsResolver, domainDN);, +                searchForEntry(connection, domainDN, LdapSearchScope.SUB_TREE.scope(), filter,, +                        timeLimitSeconds, ignoreReferralErrors, listener,, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectoryGroupsResolver.java, +    private final boolean ignoreReferralErrors;, +    ActiveDirectoryGroupsResolver(Settings settings, String baseDnDefault,, +                                  boolean ignoreReferralErrors) {, +        this.ignoreReferralErrors = ignoreReferralErrors;, +                ignoreReferralErrors, ActionListener.wrap((filter) -> {, +                        search(connection, baseDn, scope.scope(), filter,, +                                Math.toIntExact(timeout.seconds()), ignoreReferralErrors,, +    static void buildGroupQuery(LDAPInterface connection, String userDn, TimeValue timeout,, +                                boolean ignoreReferralErrors, ActionListener<Filter> listener) {, +        searchForEntry(connection, userDn, SearchScope.BASE, OBJECT_CLASS_PRESENCE_FILTER,, +                Math.toIntExact(timeout.seconds()), ignoreReferralErrors,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +            throw new IllegalArgumentException("missing [" + AD_DOMAIN_NAME_SETTING +]