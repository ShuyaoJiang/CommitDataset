[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.indices.IndexClosedException;, +                if (request instanceof DocumentRequest) {, +                    DocumentRequest req = (DocumentRequest) request;, +                    if (!indices.contains(req.index())) {, +                        indices.add(req.index());, +            if (request instanceof DocumentRequest) {, +                DocumentRequest req = (DocumentRequest) request;, +, +                if (addFailureIfIndexIsClosed(req, bulkRequest, responses, i, concreteIndices, metaData)) {, +                    continue;, +                }, +, +                String concreteIndex = concreteIndices.resolveIfAbsent(req.index(), req.indicesOptions());, +                } else {, +                    concreteIndices.resolveIfAbsent(req.index(), req.indicesOptions());, +                    req.routing(clusterState.metaData().resolveIndexRouting(req.routing(), req.index()));, +                }, +    private boolean addFailureIfIndexIsClosed(DocumentRequest request, BulkRequest bulkRequest, AtomicArray<BulkItemResponse> responses, int idx,, +                                              final ConcreteIndices concreteIndices,, +                                              final MetaData metaData) {, +        String concreteIndex = concreteIndices.getConcreteIndex(request.index());, +        boolean isClosed = false;, +        if (concreteIndex == null) {, +            try {, +                concreteIndex = concreteIndices.resolveIfAbsent(request.index(), request.indicesOptions());, +            } catch (IndexClosedException ice) {, +                isClosed = true;, +            }, +        }, +        if (!isClosed) {, +            IndexMetaData indexMetaData = metaData.index(concreteIndex);, +            isClosed = indexMetaData.getState() == IndexMetaData.State.CLOSE;, +        }, +        if (isClosed) {, +            BulkItemResponse.Failure failure = new BulkItemResponse.Failure(request.index(), request.type(), request.id(),, +                    new IndexClosedException(new Index(metaData.index(request.index()).getIndex())));, +            BulkItemResponse bulkItemResponse = new BulkItemResponse(idx, "index", failure);, +            responses.set(idx, bulkItemResponse);, +            // make sure the request gets never processed again, +            bulkRequest.requests.set(idx, null);, +        }, +        return isClosed;, +    }, +, +    private static class ConcreteIndices  {, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.indices.IndexClosedException;, +                if (request instanceof DocumentRequest) {, +                    DocumentRequest req = (DocumentRequest) request;, +                    if (!indices.contains(req.index())) {, +                        indices.add(req.index());, +            if (request instanceof DocumentRequest) {, +                DocumentRequest req = (DocumentRequest) request;, +, +                if (addFailureIfIndexIsClosed(req, bulkRequest, responses, i, concreteIndices, metaData)) {, +                    continue;, +                }, +, +                String concreteIndex = concreteIndices.resolveIfAbsent(req.index(), req.indicesOptions());, +                } else {, +                    concreteIndices.resolveIfAbsent(req.index(), req.indicesOptions());, +                    req.routing(clusterState.metaData().resolveIndexRouting(req.routing(), req.index()));, +                }, +    private boolean addFailureIfIndexIsClosed(DocumentRequest request, BulkRequest bulkRequest, AtomicArray<BulkItemResponse> responses, int idx,, +                                              final ConcreteIndices concreteIndices,, +                                              final MetaData metaData) {, +        String concreteIndex = concreteIndices.getConcreteIndex(request.index());, +        boolean isClosed = false;, +        if (concreteIndex == null) {, +            try {, +                concreteIndex = concreteIndices.resolveIfAbsent(request.index(), request.indicesOptions());, +            } catch (IndexClosedException ice) {, +                isClosed = true;, +            }, +        }, +        if (!isClosed) {, +            IndexMetaData indexMetaData = metaData.index(concreteIndex);, +            isClosed = indexMetaData.getState() == IndexMetaData.State.CLOSE;, +        }, +        if (isClosed) {, +            BulkItemResponse.Failure failure = new BulkItemResponse.Failure(request.index(), request.type(), request.id(),, +                    new IndexClosedException(new Index(metaData.index(request.index()).getIndex())));, +            BulkItemResponse bulkItemResponse = new BulkItemResponse(idx, "index", failure);, +            responses.set(idx, bulkItemResponse);, +            // make sure the request gets never processed again, +            bulkRequest.requests.set(idx, null);, +        }, +        return isClosed;, +    }, +, +    private static class ConcreteIndices  {, +++ b/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.action.DocumentRequest;]