[+++ b/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java, +import java.nio.file.attribute.PosixFilePermissions;, +import static org.elasticsearch.common.cli.Terminal.Verbosity.SILENT;, +, +                terminal.println(SILENT, "WARN: The file permissions of [%s] have changed from [%s] to [%s]",, +                        entry.getKey(), PosixFilePermissions.toString(permissionsBeforeWrite), PosixFilePermissions.toString(permissionsAfterWrite));, +                terminal.println(SILENT, "Please ensure that the user account running Elasticsearch has read access to this file!");, +                terminal.println(SILENT, "WARN: Owner of file [%s] used to be [%s], but now is [%s]", entry.getKey(), ownerBeforeWrite, ownerAfterWrite);, +                terminal.println(SILENT, "WARN: Group of file [%s] used to be [%s], but now is [%s]", entry.getKey(), groupBeforeWrite, groupAfterWrite);, +++ b/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java, +import java.nio.file.attribute.PosixFilePermissions;, +import static org.elasticsearch.common.cli.Terminal.Verbosity.SILENT;, +, +                terminal.println(SILENT, "WARN: The file permissions of [%s] have changed from [%s] to [%s]",, +                        entry.getKey(), PosixFilePermissions.toString(permissionsBeforeWrite), PosixFilePermissions.toString(permissionsAfterWrite));, +                terminal.println(SILENT, "Please ensure that the user account running Elasticsearch has read access to this file!");, +                terminal.println(SILENT, "WARN: Owner of file [%s] used to be [%s], but now is [%s]", entry.getKey(), ownerBeforeWrite, ownerAfterWrite);, +                terminal.println(SILENT, "WARN: Group of file [%s] used to be [%s], but now is [%s]", entry.getKey(), groupBeforeWrite, groupAfterWrite);, +++ b/src/main/java/org/elasticsearch/shield/support/ShieldFiles.java, +import java.nio.file.attribute.PosixFileAttributeView;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.Set;, +                // get original permissions, +                boolean supportsPosixPermissions = false;, +                Set<PosixFilePermission> posixFilePermissions = null;, +                if (Files.exists(path)) {, +                    supportsPosixPermissions = Files.getFileStore(path).supportsFileAttributeView(PosixFileAttributeView.class);, +                    if (supportsPosixPermissions) {, +                        posixFilePermissions = Files.getPosixFilePermissions(path);, +                    }, +                }, +                // restore original permissions, +                if (supportsPosixPermissions && posixFilePermissions != null) {, +                    Files.setPosixFilePermissions(path, posixFilePermissions);, +                }, +++ b/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java, +import java.nio.file.attribute.PosixFilePermissions;, +import static org.elasticsearch.common.cli.Terminal.Verbosity.SILENT;, +, +                terminal.println(SILENT, "WARN: The file permissions of [%s] have changed from [%s] to [%s]",, +                        entry.getKey(), PosixFilePermissions.toString(permissionsBeforeWrite), PosixFilePermissions.toString(permissionsAfterWrite));, +                terminal.println(SILENT, "Please ensure that the user account running Elasticsearch has read access to this file!");, +                terminal.println(SILENT, "WARN: Owner of file [%s] used to be [%s], but now is [%s]", entry.getKey(), ownerBeforeWrite, ownerAfterWrite);, +                terminal.println(SILENT, "WARN: Group of file [%s] used to be [%s], but now is [%s]", entry.getKey(), groupBeforeWrite, groupAfterWrite);, +++ b/src/main/java/org/elasticsearch/shield/support/ShieldFiles.java, +import java.nio.file.attribute.PosixFileAttributeView;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.Set;, +                // get original permissions, +                boolean supportsPosixPermissions = false;, +                Set<PosixFilePermission> posixFilePermissions = null;, +                if (Files.exists(path)) {, +                    supportsPosixPermissions = Files.getFileStore(path).supportsFileAttributeView(PosixFileAttributeView.class);, +                    if (supportsPosixPermissions) {, +                        posixFilePermissions = Files.getPosixFilePermissions(path);, +                    }, +                }, +                // restore original permissions, +                if (supportsPosixPermissions && posixFilePermissions != null) {, +                    Files.setPosixFilePermissions(path, posixFilePermissions);, +                }, +++ b/src/test/java/org/elasticsearch/common/cli/CheckFileCommandTests.java, +import java.nio.file.attribute.*;, +import java.util.Set;, +    private enum Mode {, +        CHANGE, KEEP, DISABLED, +    public void testThatCommandLogsErrorMessageOnFail() throws Exception {, +        executeCommand(jimFsConfiguration, new PermissionCheckFileCommand(captureOutputTerminal, Mode.CHANGE));, +        assertThat(captureOutputTerminal.getTerminalOutput(), hasItem(containsString("Please ensure that the user account running Elasticsearch has read access to this file")));, +    }, +, +    @Test, +    public void testThatCommandLogsNothingWhenPermissionRemains() throws Exception {, +        executeCommand(jimFsConfiguration, new PermissionCheckFileCommand(captureOutputTerminal, Mode.KEEP));, +        assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));, +    }, +, +    @Test, +    public void testThatCommandLogsNothingWhenDisabled() throws Exception {, +        executeCommand(jimFsConfiguration, new PermissionCheckFileCommand(captureOutputTerminal, Mode.DISABLED));, +        executeCommand(jimFsConfigurationWithoutPermissions, new PermissionCheckFileCommand(captureOutputTerminal, Mode.DISABLED));, +        executeCommand(jimFsConfiguration, new OwnerCheckFileCommand(captureOutputTerminal, Mode.CHANGE));, +    public void testThatCommandLogsNothingIfOwnerRemainsSame() throws Exception {, +        executeCommand(jimFsConfiguration, new OwnerCheckFileCommand(captureOutputTerminal, Mode.KEEP));, +        assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));, +    }, +, +    @Test, +    public void testThatCommandLogsNothingIfOwnerIsDisabled() throws Exception {, +        executeCommand(jimFsConfiguration, new OwnerCheckFileCommand(captureOutputTerminal, Mode.DISABLED));, +        executeCommand(jimFsConfigurationWithoutPermissions, new OwnerCheckFileCommand(captureOutputTerminal, Mode.DISABLED));, +        executeCommand(jimFsConfiguration, new GroupCheckFileCommand(captureOutputTerminal, Mode.CHANGE));, +    public void testThatCommandLogsNothingIfGroupRemainsSame() throws Exception {, +        executeCommand(jimFsConfiguration, new GroupCheckFileCommand(captureOutputTerminal, Mode.KEEP));, +        assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0));, +    }, +, +    @Test, +    public void testThatCommandLogsNothingIfGroupIsDisabled() throws Exception {, +        executeCommand(jimFsConfiguration, new GroupCheckFileCommand(captureOutputTerminal, Mode.DISABLED));]