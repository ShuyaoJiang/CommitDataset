[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    final static ImmutableList<ShardRouting> NO_SHARDS = ImmutableList.of();, +     * Returns true if no primaries are active or initializing for this shard, +     */, +    private boolean noPrimariesActive() {, +        if (!primaryAsList.isEmpty() && !primaryAsList.get(0).active() && !primaryAsList.get(0).initializing()) {, +            return true;, +        }, +        return false;, +    }, +, +    /**, +        if (noPrimariesActive()) {, +            return new PlainShardIterator(shardId, NO_SHARDS);, +    public ShardIterator replicaActiveInitializingShardIt() {, +        // If the primaries are unassigned, return an empty list (there aren't, +        // any replicas to query anyway), +        if (noPrimariesActive()) {, +            return new PlainShardIterator(shardId, NO_SHARDS);, +        }, +, +        LinkedList<ShardRouting> ordered = new LinkedList<>();, +        for (ShardRouting replica : shuffler.shuffle(replicas)) {, +            if (replica.active()) {, +                ordered.addFirst(replica);, +            } else if (replica.initializing()) {, +                ordered.addLast(replica);, +            }, +        }, +        return new PlainShardIterator(shardId, ordered);, +    }, +, +    public ShardIterator replicaFirstActiveInitializingShardsIt() {, +        // If the primaries are unassigned, return an empty list (there aren't, +        // any replicas to query anyway), +        if (noPrimariesActive()) {, +            return new PlainShardIterator(shardId, NO_SHARDS);, +        }, +, +        ArrayList<ShardRouting> ordered = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +        // fill it in a randomized fashion with the active replicas, +        for (ShardRouting replica : shuffler.shuffle(replicas)) {, +            if (replica.active()) {, +                ordered.add(replica);, +            }, +        }, +, +        // Add the primary shard, +        ordered.add(primary);, +, +        // Add initializing shards last, +        if (!allInitializingShards.isEmpty()) {, +            ordered.addAll(allInitializingShards);, +        }, +        return new PlainShardIterator(shardId, ordered);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    final static ImmutableList<ShardRouting> NO_SHARDS = ImmutableList.of();, +     * Returns true if no primaries are active or initializing for this shard, +     */, +    private boolean noPrimariesActive() {, +        if (!primaryAsList.isEmpty() && !primaryAsList.get(0).active() && !primaryAsList.get(0).initializing()) {, +            return true;, +        }, +        return false;, +    }, +, +    /**, +        if (noPrimariesActive()) {, +            return new PlainShardIterator(shardId, NO_SHARDS);, +    public ShardIterator replicaActiveInitializingShardIt() {, +        // If the primaries are unassigned, return an empty list (there aren't, +        // any replicas to query anyway), +        if (noPrimariesActive()) {, +            return new PlainShardIterator(shardId, NO_SHARDS);, +        }, +, +        LinkedList<ShardRouting> ordered = new LinkedList<>();, +        for (ShardRouting replica : shuffler.shuffle(replicas)) {, +            if (replica.active()) {, +                ordered.addFirst(replica);, +            } else if (replica.initializing()) {, +                ordered.addLast(replica);, +            }, +        }, +        return new PlainShardIterator(shardId, ordered);, +    }, +, +    public ShardIterator replicaFirstActiveInitializingShardsIt() {, +        // If the primaries are unassigned, return an empty list (there aren't, +        // any replicas to query anyway), +        if (noPrimariesActive()) {, +            return new PlainShardIterator(shardId, NO_SHARDS);, +        }, +, +        ArrayList<ShardRouting> ordered = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +        // fill it in a randomized fashion with the active replicas, +        for (ShardRouting replica : shuffler.shuffle(replicas)) {, +            if (replica.active()) {]