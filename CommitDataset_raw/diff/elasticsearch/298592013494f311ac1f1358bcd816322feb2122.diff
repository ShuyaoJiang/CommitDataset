[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessField.java, +import java.lang.reflect.Field;, +    public final Field javaField;, +    public final Class<?> typeParameter;, +    public final MethodHandle getterMethodHandle;, +    public final MethodHandle setterMethodHandle;, +, +    PainlessField(Field javaField, Class<?> typeParameter, MethodHandle getterMethodHandle, MethodHandle setterMethodHandle) {, +        this.javaField = javaField;, +        this.typeParameter = typeParameter;, +, +        this.getterMethodHandle = getterMethodHandle;, +        this.setterMethodHandle = setterMethodHandle;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessField.java, +import java.lang.reflect.Field;, +    public final Field javaField;, +    public final Class<?> typeParameter;, +    public final MethodHandle getterMethodHandle;, +    public final MethodHandle setterMethodHandle;, +, +    PainlessField(Field javaField, Class<?> typeParameter, MethodHandle getterMethodHandle, MethodHandle setterMethodHandle) {, +        this.javaField = javaField;, +        this.typeParameter = typeParameter;, +, +        this.getterMethodHandle = getterMethodHandle;, +        this.setterMethodHandle = setterMethodHandle;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +        String painlessFieldKey = buildPainlessFieldKey(fieldName);, +, +        if (Modifier.isStatic(javaField.getModifiers())) {, +            if (Modifier.isFinal(javaField.getModifiers()) == false) {, +                throw new IllegalArgumentException("static field [[" + targetCanonicalClassName + "], [" + fieldName + "]] must be final");, +            }, +, +            PainlessField painlessField = painlessClassBuilder.staticFields.get(painlessFieldKey);, +, +            if (painlessField == null) {, +                painlessField = painlessFieldCache.computeIfAbsent(, +                        new PainlessFieldCacheKey(targetClass, fieldName, typeParameter),, +                        key -> new PainlessField(javaField, typeParameter, methodHandleGetter, null));, +, +                painlessClassBuilder.staticFields.put(painlessFieldKey, painlessField);, +            } else if (painlessField.typeParameter != typeParameter) {, +                throw new IllegalArgumentException("cannot have static fields " +, +                        "[[" + targetCanonicalClassName + "], [" + fieldName + "], [" +, +                        typeToCanonicalTypeName(typeParameter) + "] and " +, +                        "[[" + targetCanonicalClassName + "], [" + painlessField.javaField.getName() + "], " +, +                        typeToCanonicalTypeName(painlessField.typeParameter) + "] " +, +                        "with the same name and different type parameters");, +            }, +        } else {, +                        key -> new PainlessField(javaField, typeParameter, methodHandleGetter, methodHandleSetter));, +            } else if (painlessField.typeParameter != typeParameter) {, +                        "[[" + targetCanonicalClassName + "], [" + painlessField.javaField.getName() + "], " +, +                        typeToCanonicalTypeName(painlessField.typeParameter) + "] " +, +                        "with the same name and different type parameters");, +            if (existingPainlessField == null ||, +                    existingPainlessField.javaField.getDeclaringClass() != newPainlessField.javaField.getDeclaringClass() &&, +                    existingPainlessField.javaField.getDeclaringClass().isAssignableFrom(newPainlessField.javaField.getDeclaringClass())) {, +            painlessClassBuilder.getterMethodHandles.put(painlessField.javaField.getName(), painlessField.getterMethodHandle);, +            painlessClassBuilder.setterMethodHandles.put(painlessField.javaField.getName(), painlessField.setterMethodHandle);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessField.java, +import java.lang.reflect.Field;, +    public final Field javaField;, +    public final Class<?> typeParameter;, +    public final MethodHandle getterMethodHandle;, +    public final MethodHandle setterMethodHandle;, +, +    PainlessField(Field javaField, Class<?> typeParameter, MethodHandle getterMethodHandle, MethodHandle setterMethodHandle) {, +        this.javaField = javaField;, +        this.typeParameter = typeParameter;, +, +        this.getterMethodHandle = getterMethodHandle;, +        this.setterMethodHandle = setterMethodHandle;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +        String painlessFieldKey = buildPainlessFieldKey(fieldName);, +, +        if (Modifier.isStatic(javaField.getModifiers())) {, +            if (Modifier.isFinal(javaField.getModifiers()) == false) {, +                throw new IllegalArgumentException("static field [[" + targetCanonicalClassName + "], [" + fieldName + "]] must be final");, +            }, +, +            PainlessField painlessField = painlessClassBuilder.staticFields.get(painlessFieldKey);, +, +            if (painlessField == null) {, +                painlessField = painlessFieldCache.computeIfAbsent(, +                        new PainlessFieldCacheKey(targetClass, fieldName, typeParameter),, +                        key -> new PainlessField(javaField, typeParameter, methodHandleGetter, null));, +, +                painlessClassBuilder.staticFields.put(painlessFieldKey, painlessField);, +            } else if (painlessField.typeParameter != typeParameter) {, +                throw new IllegalArgumentException("cannot have static fields " +, +                        "[[" + targetCanonicalClassName + "], [" + fieldName + "], [" +, +                        typeToCanonicalTypeName(typeParameter) + "] and " +, +                        "[[" + targetCanonicalClassName + "], [" + painlessField.javaField.getName() + "], " +, +                        typeToCanonicalTypeName(painlessField.typeParameter) + "] " +, +                        "with the same name and different type parameters");, +            }, +        } else {, +                        key -> new PainlessField(javaField, typeParameter, methodHandleGetter, methodHandleSetter));]