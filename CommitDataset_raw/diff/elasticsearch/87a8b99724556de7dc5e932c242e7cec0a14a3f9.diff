[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +import org.elasticsearch.client.security.HasPrivilegesRequest;, +import org.elasticsearch.client.security.HasPrivilegesResponse;, +     * Determine whether the current user has a specified list of privileges, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges.html">, +     * the docs</a> for more., +     *, +     * @param request the request with the privileges to check, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response from the has privileges call, +     */, +    public HasPrivilegesResponse hasPrivileges(HasPrivilegesRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, SecurityRequestConverters::hasPrivileges, options,, +            HasPrivilegesResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously determine whether the current user has a specified list of privileges, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges.html">, +     * the docs</a> for more., +     *, +     * @param request the request with the privileges to check, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void hasPrivilegesAsync(HasPrivilegesRequest request, RequestOptions options, ActionListener<HasPrivilegesResponse> listener) {, +         restHighLevelClient.performRequestAsyncAndParseEntity(request, SecurityRequestConverters::hasPrivileges, options,, +            HasPrivilegesResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +import org.elasticsearch.client.security.HasPrivilegesRequest;, +import org.elasticsearch.client.security.HasPrivilegesResponse;, +     * Determine whether the current user has a specified list of privileges, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges.html">, +     * the docs</a> for more., +     *, +     * @param request the request with the privileges to check, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response from the has privileges call, +     */, +    public HasPrivilegesResponse hasPrivileges(HasPrivilegesRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, SecurityRequestConverters::hasPrivileges, options,, +            HasPrivilegesResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously determine whether the current user has a specified list of privileges, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges.html">, +     * the docs</a> for more., +     *, +     * @param request the request with the privileges to check, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void hasPrivilegesAsync(HasPrivilegesRequest request, RequestOptions options, ActionListener<HasPrivilegesResponse> listener) {, +         restHighLevelClient.performRequestAsyncAndParseEntity(request, SecurityRequestConverters::hasPrivileges, options,, +            HasPrivilegesResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityRequestConverters.java, +import org.elasticsearch.client.security.HasPrivilegesRequest;, +    static Request hasPrivileges(HasPrivilegesRequest hasPrivilegesRequest) throws IOException {, +        Request request = new Request(HttpGet.METHOD_NAME, "/_xpack/security/user/_has_privileges");, +        request.setEntity(createEntity(hasPrivilegesRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +import org.elasticsearch.client.security.HasPrivilegesRequest;, +import org.elasticsearch.client.security.HasPrivilegesResponse;, +     * Determine whether the current user has a specified list of privileges, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges.html">, +     * the docs</a> for more., +     *, +     * @param request the request with the privileges to check, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response from the has privileges call, +     */, +    public HasPrivilegesResponse hasPrivileges(HasPrivilegesRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, SecurityRequestConverters::hasPrivileges, options,, +            HasPrivilegesResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously determine whether the current user has a specified list of privileges, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges.html">, +     * the docs</a> for more., +     *, +     * @param request the request with the privileges to check, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void hasPrivilegesAsync(HasPrivilegesRequest request, RequestOptions options, ActionListener<HasPrivilegesResponse> listener) {, +         restHighLevelClient.performRequestAsyncAndParseEntity(request, SecurityRequestConverters::hasPrivileges, options,, +            HasPrivilegesResponse::fromXContent, listener, emptySet());, +    }, +]