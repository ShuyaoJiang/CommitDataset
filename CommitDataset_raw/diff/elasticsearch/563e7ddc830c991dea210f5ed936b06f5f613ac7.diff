[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +    public void setLikeFields(Fields... likeFields) {, +    public void setUnlikeFields(Fields... unlikeFields) {, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +    public void setLikeFields(Fields... likeFields) {, +    public void setUnlikeFields(Fields... unlikeFields) {, +++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +            this.routing = copy.routing;, +        TermVectorsRequest toTermVectorsRequest() {, +        mltQuery.setLikeFields(getFieldsFor(likeItemsResponse));, +                mltQuery.setUnlikeFields(unlikeFields);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +    public void setLikeFields(Fields... likeFields) {, +    public void setUnlikeFields(Fields... unlikeFields) {, +++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +            this.routing = copy.routing;, +        TermVectorsRequest toTermVectorsRequest() {, +        mltQuery.setLikeFields(getFieldsFor(likeItemsResponse));, +                mltQuery.setUnlikeFields(unlikeFields);, +++ b/core/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java, +import org.apache.lucene.search.BooleanClause;, +import static org.hamcrest.Matchers.greaterThan;, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            for (BooleanClause booleanClause : booleanQuery) {, +                if (booleanClause.getQuery() instanceof MoreLikeThisQuery) {, +                    MoreLikeThisQuery moreLikeThisQuery = (MoreLikeThisQuery) booleanClause.getQuery();, +                    assertThat(moreLikeThisQuery.getLikeFields().length, greaterThan(0));, +                }, +            }, +    public void testItemCopy() throws IOException {, +        Item expectedItem = generateRandomItem();, +        Item newItem = new Item(expectedItem);, +        assertEquals(expectedItem, newItem);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +    public void setLikeFields(Fields... likeFields) {, +    public void setUnlikeFields(Fields... unlikeFields) {, +++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +            this.routing = copy.routing;, +        TermVectorsRequest toTermVectorsRequest() {, +        mltQuery.setLikeFields(getFieldsFor(likeItemsResponse));, +                mltQuery.setUnlikeFields(unlikeFields);, +++ b/core/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java, +import org.apache.lucene.search.BooleanClause;, +import static org.hamcrest.Matchers.greaterThan;, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            for (BooleanClause booleanClause : booleanQuery) {, +                if (booleanClause.getQuery() instanceof MoreLikeThisQuery) {, +                    MoreLikeThisQuery moreLikeThisQuery = (MoreLikeThisQuery) booleanClause.getQuery();, +                    assertThat(moreLikeThisQuery.getLikeFields().length, greaterThan(0));, +                }, +            }, +    public void testItemCopy() throws IOException {, +        Item expectedItem = generateRandomItem();, +        Item newItem = new Item(expectedItem);, +        assertEquals(expectedItem, newItem);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/morelikethis/MoreLikeThisIT.java, +, +    public void testWithRouting() throws IOException {, +        client().prepareIndex("index", "type", "1").setRouting("3").setSource("text", "this is a document").get();, +        client().prepareIndex("index", "type", "2").setRouting("1").setSource("text", "this is another document").get();, +        client().prepareIndex("index", "type", "3").setRouting("4").setSource("text", "this is yet another document").get();, +        refresh("index");, +, +        Item item = new Item("index", "type", "2").routing("1");, +        MoreLikeThisQueryBuilder moreLikeThisQueryBuilder = new MoreLikeThisQueryBuilder(new String[]{"text"}, null, new Item[]{item});, +        moreLikeThisQueryBuilder.minTermFreq(1);, +        moreLikeThisQueryBuilder.minDocFreq(1);, +        SearchResponse searchResponse = client().prepareSearch("index").setQuery(moreLikeThisQueryBuilder).get();, +        assertEquals(2, searchResponse.getHits().totalHits);, +    }]