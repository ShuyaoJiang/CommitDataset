[+++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksCustomMetaData.java, +    private static final NamedObjectParser<TaskDescriptionBuilder<PersistentTaskParams>, Void> TASK_DESCRIPTION_PARSER;, +        // Task description parser initialization, +        ObjectParser<TaskDescriptionBuilder<PersistentTaskParams>, String> parser = new ObjectParser<>("named");, +        parser.declareObject(TaskDescriptionBuilder::setParams,, +                (p, c) -> p.namedObject(PersistentTaskParams.class, c, null), new ParseField("params"));, +        parser.declareObject(TaskDescriptionBuilder::setStatus,, +                (p, c) -> p.namedObject(Status.class, c, null), new ParseField("status"));, +        TASK_DESCRIPTION_PARSER = (XContentParser p, Void c, String name) -> parser.parse(p, new TaskDescriptionBuilder<>(name), name);, +, +                (TaskBuilder<PersistentTaskParams> taskBuilder, List<TaskDescriptionBuilder<PersistentTaskParams>> objects) -> {, +                        throw new IllegalArgumentException("only one task description per task is allowed");, +                    TaskDescriptionBuilder<PersistentTaskParams> builder = objects.get(0);, +                    taskBuilder.setTaskName(builder.taskName);, +                    taskBuilder.setParams(builder.params);, +                    taskBuilder.setStatus(builder.status);, +                }, TASK_DESCRIPTION_PARSER, new ParseField("task"));, +    /**, +     * Private builder used in XContent parser to build task-specific portion (params and status), +     */, +    private static class TaskDescriptionBuilder<Params extends PersistentTaskParams> {, +        private final String taskName;, +        private Params params;, +        private Status status;, +, +        private TaskDescriptionBuilder(String taskName) {, +            this.taskName = taskName;, +        }, +, +        private TaskDescriptionBuilder setParams(Params params) {, +            this.params = params;, +            return this;, +        }, +, +        private TaskDescriptionBuilder setStatus(Status status) {, +            this.status = status;, +            return this;, +        }, +    }, +, +, +            if (params != null) {, +                if (params.getWriteableName().equals(taskName) == false) {, +                    throw new IllegalArgumentException("params have to have the same writeable name as task. params: " +, +                            params.getWriteableName() + " task: " + taskName);, +                }, +            }, +            if (status != null) {, +                if (status.getWriteableName().equals(taskName) == false) {, +                    throw new IllegalArgumentException("status has to have the same writeable name as task. status: " +, +                            status.getWriteableName() + " task: " + taskName);, +                }, +            }, +                builder.startObject("task");, +                    builder.startObject(taskName);, +                    {, +                        if (params != null) {, +                            builder.field("params", params, xParams);, +                            builder.field("status", status, xParams);, +                        }, +                builder.endObject();, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksCustomMetaData.java, +    private static final NamedObjectParser<TaskDescriptionBuilder<PersistentTaskParams>, Void> TASK_DESCRIPTION_PARSER;, +        // Task description parser initialization, +        ObjectParser<TaskDescriptionBuilder<PersistentTaskParams>, String> parser = new ObjectParser<>("named");, +        parser.declareObject(TaskDescriptionBuilder::setParams,, +                (p, c) -> p.namedObject(PersistentTaskParams.class, c, null), new ParseField("params"));, +        parser.declareObject(TaskDescriptionBuilder::setStatus,, +                (p, c) -> p.namedObject(Status.class, c, null), new ParseField("status"));, +        TASK_DESCRIPTION_PARSER = (XContentParser p, Void c, String name) -> parser.parse(p, new TaskDescriptionBuilder<>(name), name);, +, +                (TaskBuilder<PersistentTaskParams> taskBuilder, List<TaskDescriptionBuilder<PersistentTaskParams>> objects) -> {, +                        throw new IllegalArgumentException("only one task description per task is allowed");, +                    TaskDescriptionBuilder<PersistentTaskParams> builder = objects.get(0);, +                    taskBuilder.setTaskName(builder.taskName);, +                    taskBuilder.setParams(builder.params);, +                    taskBuilder.setStatus(builder.status);, +                }, TASK_DESCRIPTION_PARSER, new ParseField("task"));, +    /**, +     * Private builder used in XContent parser to build task-specific portion (params and status), +     */, +    private static class TaskDescriptionBuilder<Params extends PersistentTaskParams> {, +        private final String taskName;, +        private Params params;, +        private Status status;, +, +        private TaskDescriptionBuilder(String taskName) {, +            this.taskName = taskName;, +        }, +, +        private TaskDescriptionBuilder setParams(Params params) {, +            this.params = params;, +            return this;, +        }, +, +        private TaskDescriptionBuilder setStatus(Status status) {, +            this.status = status;, +            return this;, +        }, +    }]