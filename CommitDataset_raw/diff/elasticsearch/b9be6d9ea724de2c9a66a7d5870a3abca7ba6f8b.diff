[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/geo/GeoPointDocFieldData.java, +import org.elasticsearch.common.unit.DistanceUnit;, +    public double distance(double lat, double lon) {, +        return fieldData.distance(docId, DistanceUnit.MILES, lat, lon);, +    }, +, +    public double distanceInKm(double lat, double lon) {, +        return fieldData.distance(docId, DistanceUnit.KILOMETERS, lat, lon);, +    }, +, +    public double geohashDistance(String geohash) {, +        return fieldData.distanceGeohash(docId, DistanceUnit.MILES, geohash);, +    }, +, +    public double geohashDistanceInKm(String geohash) {, +        return fieldData.distanceGeohash(docId, DistanceUnit.KILOMETERS, geohash);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/geo/GeoPointDocFieldData.java, +import org.elasticsearch.common.unit.DistanceUnit;, +    public double distance(double lat, double lon) {, +        return fieldData.distance(docId, DistanceUnit.MILES, lat, lon);, +    }, +, +    public double distanceInKm(double lat, double lon) {, +        return fieldData.distance(docId, DistanceUnit.KILOMETERS, lat, lon);, +    }, +, +    public double geohashDistance(String geohash) {, +        return fieldData.distanceGeohash(docId, DistanceUnit.MILES, geohash);, +    }, +, +    public double geohashDistanceInKm(String geohash) {, +        return fieldData.distanceGeohash(docId, DistanceUnit.KILOMETERS, geohash);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/geo/GeoPointFieldData.java, +import org.elasticsearch.common.unit.DistanceUnit;, +import org.elasticsearch.index.search.geo.GeoDistance;, +    static class GeoPointHash {, +        public double lat;, +        public double lon;, +        public String geoHash = "";, +    }, +, +    static ThreadLocal<ThreadLocals.CleanableValue<GeoPointHash>> geoHashCache = new ThreadLocal<ThreadLocals.CleanableValue<GeoPointHash>>() {, +        @Override protected ThreadLocals.CleanableValue<GeoPointHash> initialValue() {, +            return new ThreadLocals.CleanableValue<GeoPointHash>(new GeoPointHash());, +        }, +    };, +, +    public double distance(int docId, DistanceUnit unit, double lat, double lon) {, +        return GeoDistance.PLANE.calculate(latValue(docId), lonValue(docId), lat, lon, unit);, +    }, +, +    public double distanceGeohash(int docId, DistanceUnit unit, String geoHash) {, +        GeoPointHash geoPointHash = geoHashCache.get().get();, +        if (geoPointHash.geoHash != geoHash) {, +            geoPointHash.geoHash = geoHash;, +            double[] decode = GeoHashUtils.decode(geoHash);, +            geoPointHash.lat = decode[0];, +            geoPointHash.lon = decode[1];, +        }, +        return GeoDistance.PLANE.calculate(latValue(docId), lonValue(docId), geoPointHash.lat, geoPointHash.lon, unit);, +    }, +]