[+++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    public void finalizeRecovery(final long targetLocalCheckpoint) throws IOException {, +        cancellableThreads.executeIO(() -> recoveryTarget.finalizeRecovery(globalCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    public void finalizeRecovery(final long targetLocalCheckpoint) throws IOException {, +        cancellableThreads.executeIO(() -> recoveryTarget.finalizeRecovery(globalCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public void finalizeRecovery(final long globalCheckpoint) throws IOException {, +        indexShard.updateGlobalCheckpointOnReplica(globalCheckpoint, "finalizing recovery");, +        // Persist the global checkpoint., +        indexShard.sync();, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    public void finalizeRecovery(final long targetLocalCheckpoint) throws IOException {, +        cancellableThreads.executeIO(() -> recoveryTarget.finalizeRecovery(globalCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public void finalizeRecovery(final long globalCheckpoint) throws IOException {, +        indexShard.updateGlobalCheckpointOnReplica(globalCheckpoint, "finalizing recovery");, +        // Persist the global checkpoint., +        indexShard.sync();, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +    void finalizeRecovery(long globalCheckpoint) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    public void finalizeRecovery(final long targetLocalCheckpoint) throws IOException {, +        cancellableThreads.executeIO(() -> recoveryTarget.finalizeRecovery(globalCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public void finalizeRecovery(final long globalCheckpoint) throws IOException {, +        indexShard.updateGlobalCheckpointOnReplica(globalCheckpoint, "finalizing recovery");, +        // Persist the global checkpoint., +        indexShard.sync();, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +    void finalizeRecovery(long globalCheckpoint) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java, +        public void finalizeRecovery(long globalCheckpoint) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    public void finalizeRecovery(final long targetLocalCheckpoint) throws IOException {, +        cancellableThreads.executeIO(() -> recoveryTarget.finalizeRecovery(globalCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public void finalizeRecovery(final long globalCheckpoint) throws IOException {, +        indexShard.updateGlobalCheckpointOnReplica(globalCheckpoint, "finalizing recovery");, +        // Persist the global checkpoint., +        indexShard.sync();, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +    void finalizeRecovery(long globalCheckpoint) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java, +        public void finalizeRecovery(long globalCheckpoint) throws IOException {, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +                public void finalizeRecovery(long globalCheckpoint) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    public void finalizeRecovery(final long targetLocalCheckpoint) throws IOException {, +        cancellableThreads.executeIO(() -> recoveryTarget.finalizeRecovery(globalCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public void finalizeRecovery(final long globalCheckpoint) throws IOException {, +        indexShard.updateGlobalCheckpointOnReplica(globalCheckpoint, "finalizing recovery");, +        // Persist the global checkpoint., +        indexShard.sync();, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +    void finalizeRecovery(long globalCheckpoint) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java, +        public void finalizeRecovery(long globalCheckpoint) throws IOException {, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +                public void finalizeRecovery(long globalCheckpoint) throws IOException {, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetServiceTests.java, +            assertThat(PeerRecoveryTargetService.getStartingSeqNo(recoveryTarget), equalTo(0L));, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    public void finalizeRecovery(final long targetLocalCheckpoint) throws IOException {, +        cancellableThreads.executeIO(() -> recoveryTarget.finalizeRecovery(globalCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public void finalizeRecovery(final long globalCheckpoint) throws IOException {, +        indexShard.updateGlobalCheckpointOnReplica(globalCheckpoint, "finalizing recovery");, +        // Persist the global checkpoint., +        indexShard.sync();, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +    void finalizeRecovery(long globalCheckpoint) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java, +        public void finalizeRecovery(long globalCheckpoint) throws IOException {, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +                public void finalizeRecovery(long globalCheckpoint) throws IOException {, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetServiceTests.java, +            assertThat(PeerRecoveryTargetService.getStartingSeqNo(recoveryTarget), equalTo(0L));, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryTests.java, +, +    public void testPeerRecoveryPersistGlobalCheckpoint() throws Exception {, +        try (ReplicationGroup shards = createGroup(0)) {, +            shards.startPrimary();, +            final long numDocs = shards.indexDocs(between(1, 100));, +            if (randomBoolean()) {, +                shards.flush();, +            }, +            final IndexShard replica = shards.addReplica();, +            shards.recoverReplica(replica);, +            assertThat(replica.getTranslog().getLastSyncedGlobalCheckpoint(), equalTo(numDocs - 1));, +        }, +    }]