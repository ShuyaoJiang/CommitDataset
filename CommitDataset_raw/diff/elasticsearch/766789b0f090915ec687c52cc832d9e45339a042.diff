[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ingest/core/CompoundProcessor.java, +    private final boolean ignoreFailure;, +        this(false, Arrays.asList(processor), Collections.emptyList());, +    public CompoundProcessor(boolean ignoreFailure, List<Processor> processors, List<Processor> onFailureProcessors) {, +        this.ignoreFailure = ignoreFailure;, +    public boolean isIgnoreFailure() {, +        return ignoreFailure;, +    }, +, +                if (ignoreFailure) {, +                    continue;, +                }, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ingest/core/CompoundProcessor.java, +    private final boolean ignoreFailure;, +        this(false, Arrays.asList(processor), Collections.emptyList());, +    public CompoundProcessor(boolean ignoreFailure, List<Processor> processors, List<Processor> onFailureProcessors) {, +        this.ignoreFailure = ignoreFailure;, +    public boolean isIgnoreFailure() {, +        return ignoreFailure;, +    }, +, +                if (ignoreFailure) {, +                    continue;, +                }, +, +++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java, +            boolean ignoreFailure = ConfigurationUtils.readBooleanProperty(null, null, config, "ignore_failure", false);, +            if (onFailureProcessors.size() > 0 || ignoreFailure) {, +                return new CompoundProcessor(ignoreFailure, Collections.singletonList(processor), onFailureProcessors);, +            } else {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ingest/core/CompoundProcessor.java, +    private final boolean ignoreFailure;, +        this(false, Arrays.asList(processor), Collections.emptyList());, +    public CompoundProcessor(boolean ignoreFailure, List<Processor> processors, List<Processor> onFailureProcessors) {, +        this.ignoreFailure = ignoreFailure;, +    public boolean isIgnoreFailure() {, +        return ignoreFailure;, +    }, +, +                if (ignoreFailure) {, +                    continue;, +                }, +, +++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java, +            boolean ignoreFailure = ConfigurationUtils.readBooleanProperty(null, null, config, "ignore_failure", false);, +            if (onFailureProcessors.size() > 0 || ignoreFailure) {, +                return new CompoundProcessor(ignoreFailure, Collections.singletonList(processor), onFailureProcessors);, +            } else {, +++ b/core/src/main/java/org/elasticsearch/ingest/core/Pipeline.java, +            CompoundProcessor compoundProcessor = new CompoundProcessor(false, Collections.unmodifiableList(processors), Collections.unmodifiableList(onFailureProcessors));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ingest/core/CompoundProcessor.java, +    private final boolean ignoreFailure;, +        this(false, Arrays.asList(processor), Collections.emptyList());, +    public CompoundProcessor(boolean ignoreFailure, List<Processor> processors, List<Processor> onFailureProcessors) {, +        this.ignoreFailure = ignoreFailure;, +    public boolean isIgnoreFailure() {, +        return ignoreFailure;, +    }, +, +                if (ignoreFailure) {, +                    continue;, +                }, +, +++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java, +            boolean ignoreFailure = ConfigurationUtils.readBooleanProperty(null, null, config, "ignore_failure", false);, +            if (onFailureProcessors.size() > 0 || ignoreFailure) {, +                return new CompoundProcessor(ignoreFailure, Collections.singletonList(processor), onFailureProcessors);, +            } else {, +++ b/core/src/main/java/org/elasticsearch/ingest/core/Pipeline.java, +            CompoundProcessor compoundProcessor = new CompoundProcessor(false, Collections.unmodifiableList(processors), Collections.unmodifiableList(onFailureProcessors));, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/TrackingResultProcessor.java, +        return new CompoundProcessor(false, processors, onFailureProcessors);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ingest/core/CompoundProcessor.java, +    private final boolean ignoreFailure;, +        this(false, Arrays.asList(processor), Collections.emptyList());, +    public CompoundProcessor(boolean ignoreFailure, List<Processor> processors, List<Processor> onFailureProcessors) {, +        this.ignoreFailure = ignoreFailure;, +    public boolean isIgnoreFailure() {, +        return ignoreFailure;, +    }, +, +                if (ignoreFailure) {, +                    continue;, +                }, +, +++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java, +            boolean ignoreFailure = ConfigurationUtils.readBooleanProperty(null, null, config, "ignore_failure", false);, +            if (onFailureProcessors.size() > 0 || ignoreFailure) {, +                return new CompoundProcessor(ignoreFailure, Collections.singletonList(processor), onFailureProcessors);, +            } else {, +++ b/core/src/main/java/org/elasticsearch/ingest/core/Pipeline.java, +            CompoundProcessor compoundProcessor = new CompoundProcessor(false, Collections.unmodifiableList(processors), Collections.unmodifiableList(onFailureProcessors));, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/TrackingResultProcessor.java]