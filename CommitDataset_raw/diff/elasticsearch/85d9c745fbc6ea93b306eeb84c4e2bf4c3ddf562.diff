[+++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_0_0_beta1_ID = 2000001;, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_rc1_ID = 2000051;, +    public static final Version V_2_0_0_rc1 = new Version(V_2_0_0_rc1_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_rc1_ID:, +                return V_2_0_0_rc1;, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +            case V_2_0_0_beta1_ID:, +                return V_2_0_0_beta1;, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_0_0_beta1_ID = 2000001;, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_rc1_ID = 2000051;, +    public static final Version V_2_0_0_rc1 = new Version(V_2_0_0_rc1_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_rc1_ID:, +                return V_2_0_0_rc1;, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +            case V_2_0_0_beta1_ID:, +                return V_2_0_0_beta1;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +        private final Exception cause;, +        public Failure(String index, String type, String id, Exception cause) {, +        public Exception getCause() {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_0_0_beta1_ID = 2000001;, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_rc1_ID = 2000051;, +    public static final Version V_2_0_0_rc1 = new Version(V_2_0_0_rc1_ID, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_rc1_ID:, +                return V_2_0_0_rc1;, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +            case V_2_0_0_beta1_ID:, +                return V_2_0_0_beta1;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +        private final Exception cause;, +        public Failure(String index, String type, String id, Exception cause) {, +        public Exception getCause() {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.support.ActiveShardCount;, +import org.elasticsearch.cluster.ClusterStateObserver;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.node.NodeClosedException;, +                                executeBulk(task, bulkRequest, startTime, ActionListener.wrap(listener::onResponse, inner -> {, +                                }), responses);, +    /**, +     * retries on retryable cluster blocks, resolves item requests,, +     * constructs shard bulk requests and delegates execution to shard bulk action, +     * */, +    private final class BulkOperation extends AbstractRunnable {, +        private final Task task;, +        private final BulkRequest bulkRequest;, +        private final ActionListener<BulkResponse> listener;, +        private final AtomicArray<BulkItemResponse> responses;, +        private final long startTimeNanos;, +        private final ClusterStateObserver observer;, +        BulkOperation(Task task, BulkRequest bulkRequest, ActionListener<BulkResponse> listener,, +                      AtomicArray<BulkItemResponse> responses, long startTimeNanos) {, +            this.task = task;, +            this.bulkRequest = bulkRequest;, +            this.listener = listener;, +            this.responses = responses;, +            this.startTimeNanos = startTimeNanos;, +            this.observer = new ClusterStateObserver(clusterService, bulkRequest.timeout(), logger, threadPool.getThreadContext());, +        }, +, +        @Override, +        public void onFailure(Exception e) {, +            listener.onFailure(e);, +        }, +, +        @Override, +        protected void doRun() throws Exception {, +            final ClusterState clusterState = observer.observedState().getClusterState();, +            if (handleBlockExceptions(clusterState)) {, +                return;, +            }, +                            docWriteRequest.routing(metaData.resolveIndexRouting(docWriteRequest.parent(), docWriteRequest.routing(), docWriteRequest.index()));, +                            // check if routing is required, if so, throw error if routing wasn't specified, +                            if (docWriteRequest.routing() == null && metaData.routingRequired(concreteIndex.getName(), docWriteRequest.type())) {, +                                throw new RoutingMissingException(concreteIndex.getName(), docWriteRequest.type(), docWriteRequest.id());, +                            }, +        private boolean handleBlockExceptions(ClusterState state) {, +            ClusterBlockException blockException = state.blocks().globalBlockedException(ClusterBlockLevel.WRITE);, +            if (blockException != null) {, +                if (blockException.retryable()) {, +                    logger.trace("cluster is blocked, scheduling a retry", blockException);, +                    retry(blockException);]