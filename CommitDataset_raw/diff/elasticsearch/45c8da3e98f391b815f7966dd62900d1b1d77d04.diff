[+++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import java.util.HashSet;, +import java.util.Set;, +            //we check whether we need to remove the top-level folder while extracting, +            //sometimes (e.g. github) the downloaded archive contains a top-level folder which needs to be removed, +            boolean removeTopLevelDir = topLevelDirInExcess(zipFile);, +                if (removeTopLevelDir) {, +    private boolean topLevelDirInExcess(ZipFile zipFile) {, +        //We don't rely on ZipEntry#isDirectory because it might be that there is no explicit dir, +        //but the files path do contain dirs, thus they are going to be extracted on sub-folders anyway, +        Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();, +        Set<String> topLevelDirNames = new HashSet<String>();, +        while (zipEntries.hasMoreElements()) {, +            ZipEntry zipEntry = zipEntries.nextElement();, +            String zipEntryName = zipEntry.getName().replace('\\', '/');, +, +            int slash = zipEntryName.indexOf('/');, +            //if there isn't a slash in the entry name it means that we have a file in the top-level, +            if (slash == -1 ) {, +                return false;, +            }, +, +            topLevelDirNames.add(zipEntryName.substring(0, slash));, +            //if we have more than one top-level folder, +            if (topLevelDirNames.size() > 1) {, +                return false;, +            }, +        }, +        return topLevelDirNames.size() == 1 && !"_site".equals(topLevelDirNames.iterator().next());, +    }, +, +++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import java.util.HashSet;, +import java.util.Set;, +            //we check whether we need to remove the top-level folder while extracting, +            //sometimes (e.g. github) the downloaded archive contains a top-level folder which needs to be removed, +            boolean removeTopLevelDir = topLevelDirInExcess(zipFile);, +                if (removeTopLevelDir) {, +    private boolean topLevelDirInExcess(ZipFile zipFile) {, +        //We don't rely on ZipEntry#isDirectory because it might be that there is no explicit dir, +        //but the files path do contain dirs, thus they are going to be extracted on sub-folders anyway, +        Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();, +        Set<String> topLevelDirNames = new HashSet<String>();, +        while (zipEntries.hasMoreElements()) {, +            ZipEntry zipEntry = zipEntries.nextElement();, +            String zipEntryName = zipEntry.getName().replace('\\', '/');, +, +            int slash = zipEntryName.indexOf('/');, +            //if there isn't a slash in the entry name it means that we have a file in the top-level, +            if (slash == -1 ) {, +                return false;, +            }, +, +            topLevelDirNames.add(zipEntryName.substring(0, slash));, +            //if we have more than one top-level folder, +            if (topLevelDirNames.size() > 1) {, +                return false;, +            }, +        }, +        return topLevelDirNames.size() == 1 && !"_site".equals(topLevelDirNames.iterator().next());, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/plugin/PluginManagerTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements. See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +, +package org.elasticsearch.test.integration.plugin;, +, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.io.FileSystemUtils;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.node.internal.InternalSettingsPerparer;, +import org.elasticsearch.plugins.PluginManager;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.elasticsearch.test.integration.rest.helper.HttpClient;, +import org.elasticsearch.test.integration.rest.helper.HttpClientResponse;, +import org.hamcrest.Matchers;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +]