[+++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.ShardSearchFailure;, +@ClusterScope(scope = TEST, randomDynamicTemplates = false, numClientNodes = 0, maxNumDataNodes = 1), +            SearchResponse searchResponse = client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC).get();, +            if (searchResponse.getShardFailures().length > 0) {, +                // each shard must have failed with CircuitBreakingException, +                for (ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {, +                    Throwable cause = ExceptionsHelper.unwrap(shardSearchFailure.getCause(), CircuitBreakingException.class);, +                    assertThat(cause, instanceOf(CircuitBreakingException.class));, +                    assertEquals(((CircuitBreakingException) cause).getByteLimit(), 500L);, +            } else {, +                fail("should have thrown a CircuitBreakingException");, +            }, +        } catch (Exception e) {, +            Throwable cause = ExceptionsHelper.unwrap(e, CircuitBreakingException.class);, +            assertThat(cause, instanceOf(CircuitBreakingException.class));, +            assertEquals(((CircuitBreakingException) cause).getByteLimit(), 500L);, +            assertThat("Exception: [" + cause.toString() + "] should be caused by the parent circuit breaker",, +                cause.toString(), startsWith("CircuitBreakingException[[parent] Data too large"));, +        }, +, +        reset();]