[+++ b/.idea/dictionaries/kimchy.xml, +      <w>pinger</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>pinger</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            masterFD.stop("zen disco stop");, +                masterFD.start(masterNode, "initial_join");, +            masterFD.stop("got elected as new master since master left (reason = " + reason + ")");, +                masterFD.restart(electedMaster, "possible elected master since master left (reason = " + reason + ")");, +                masterFD.stop("no master elected since master left (reason = " + reason + ")");, +            if (masterFD.masterNode() == null || !masterFD.masterNode().equals(latestDiscoNodes.masterNode())) {, +                masterFD.restart(latestDiscoNodes.masterNode(), "new cluster stare received and we monitor the wrong master [" + masterFD.masterNode() + "]");, +            DiscoveryNode masterNode = latestDiscoNodes.masterNode();, +            try {, +                membership.sendJoinRequest(masterNode, localNode);, +            } catch (Exception e) {, +                logger.warn("Failed to send join request on disconnection from master [{}]", masterNode);, +            }, +++ b/.idea/dictionaries/kimchy.xml, +      <w>pinger</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            masterFD.stop("zen disco stop");, +                masterFD.start(masterNode, "initial_join");, +            masterFD.stop("got elected as new master since master left (reason = " + reason + ")");, +                masterFD.restart(electedMaster, "possible elected master since master left (reason = " + reason + ")");, +                masterFD.stop("no master elected since master left (reason = " + reason + ")");, +            if (masterFD.masterNode() == null || !masterFD.masterNode().equals(latestDiscoNodes.masterNode())) {, +                masterFD.restart(latestDiscoNodes.masterNode(), "new cluster stare received and we monitor the wrong master [" + masterFD.masterNode() + "]");, +            DiscoveryNode masterNode = latestDiscoNodes.masterNode();, +            try {, +                membership.sendJoinRequest(masterNode, localNode);, +            } catch (Exception e) {, +                logger.warn("Failed to send join request on disconnection from master [{}]", masterNode);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +    private volatile MasterPinger masterPinger;, +, +    private final Object masterNodeMutex = new Object();, +, +    public void restart(DiscoveryNode masterNode, String reason) {, +        synchronized (masterNodeMutex) {, +            if (logger.isDebugEnabled()) {, +                logger.debug("Restarting fault detection against master [{}], reason [{}]", masterNode, reason);, +            }, +            innerStop();, +            innerStart(masterNode);, +        }, +    public void start(final DiscoveryNode masterNode, String reason) {, +        synchronized (masterNodeMutex) {, +            if (logger.isDebugEnabled()) {, +                logger.debug("Starting fault detection against master [{}], reason [{}]", masterNode, reason);, +            }, +            innerStart(masterNode);, +        }, +    }, +, +    private void innerStart(final DiscoveryNode masterNode) {, +        } catch (final Exception e) {, +            // notify master failure (which stops also) and bail.., +            return;, +        if (masterPinger != null) {, +            masterPinger.stop();, +        }, +        this.masterPinger = new MasterPinger();, +        threadPool.schedule(masterPinger, pingInterval);, +    public void stop(String reason) {, +        synchronized (masterNodeMutex) {, +            if (masterNode != null) {, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Stopping fault detection against master [{}], reason [{}]", masterNode, reason);, +                }, +            }, +            innerStop();, +        }, +    }, +, +    private void innerStop() {, +        if (masterPinger != null) {, +            masterPinger.stop();, +            masterPinger = null;, +        }, +        stop("closing");, +        synchronized (masterNodeMutex) {, +                    notifyMasterFailure(masterNode, "failed on disconnect (with verified connect)");, +                logger.trace("Master [{}] failed on disconnect", node);, +                notifyMasterFailure(node, "failed on disconnect");, +            }, +    private void notifyMasterFailure(final DiscoveryNode masterNode, final String reason) {, +            threadPool.execute(new Runnable() {, +                @Override public void run() {, +                }, +            });, +            stop("master failure, " + reason);, +    private class MasterPinger implements Runnable {, +, +        private volatile boolean running = true;, +, +        public void stop() {, +            this.running = false;, +        }]