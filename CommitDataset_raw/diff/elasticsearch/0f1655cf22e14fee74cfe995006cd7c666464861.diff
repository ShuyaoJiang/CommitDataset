[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/NotFilterParser.java, +                } else {, +                    // its the filter, and the name is the field, +                    filter = parseContext.parseInnerFilter(currentFieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/NotFilterParser.java, +                } else {, +                    // its the filter, and the name is the field, +                    filter = parseContext.parseInnerFilter(currentFieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/QueryParseContext.java, +    public Filter parseInnerFilter(String filterName) throws IOException, QueryParsingException {, +        XContentFilterParser filterParser = indexQueryParser.filterParser(filterName);, +        if (filterParser == null) {, +            throw new QueryParsingException(index, "No filter registered for [" + filterName + "]");, +        }, +        Filter result = filterParser.parse(this);, +        // don't move to the nextToken in this case..., +//        if (parser.currentToken() == XContentParser.Token.END_OBJECT || parser.currentToken() == XContentParser.Token.END_ARRAY) {, +//            // if we are at END_OBJECT, move to the next one..., +//            parser.nextToken();, +//        }, +        return result;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/NotFilterParser.java, +                } else {, +                    // its the filter, and the name is the field, +                    filter = parseContext.parseInnerFilter(currentFieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/QueryParseContext.java, +    public Filter parseInnerFilter(String filterName) throws IOException, QueryParsingException {, +        XContentFilterParser filterParser = indexQueryParser.filterParser(filterName);, +        if (filterParser == null) {, +            throw new QueryParsingException(index, "No filter registered for [" + filterName + "]");, +        }, +        Filter result = filterParser.parse(this);, +        // don't move to the nextToken in this case..., +//        if (parser.currentToken() == XContentParser.Token.END_OBJECT || parser.currentToken() == XContentParser.Token.END_ARRAY) {, +//            // if we are at END_OBJECT, move to the next one..., +//            parser.nextToken();, +//        }, +        return result;, +    }, +, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/query/xcontent/SimpleIndexQueryParserTests.java, +        assertThat(((TermQuery) filteredQuery.getQuery()).getTerm(), equalTo(new Term("name.first", "shay")));, +, +        NotFilter notFilter = (NotFilter) filteredQuery.getFilter();, +        assertThat(((TermFilter) notFilter.filter()).getTerm(), equalTo(new Term("name.first", "shay1")));, +    }, +, +    @Test public void testNotFilteredQuery2() throws IOException {, +        IndexQueryParser queryParser = queryParser();, +        String query = copyToStringFromClasspath("/org/elasticsearch/index/query/xcontent/not-filter2.json");, +        Query parsedQuery = queryParser.parse(query).query();, +        assertThat(parsedQuery, instanceOf(FilteredQuery.class));, +        FilteredQuery filteredQuery = (FilteredQuery) parsedQuery;, +        assertThat(((TermQuery) filteredQuery.getQuery()).getTerm(), equalTo(new Term("name.first", "shay")));, +, +        NotFilter notFilter = (NotFilter) filteredQuery.getFilter();, +        assertThat(((TermFilter) notFilter.filter()).getTerm(), equalTo(new Term("name.first", "shay1")));, +    }, +, +    @Test public void testNotFilteredQuery3() throws IOException {, +        IndexQueryParser queryParser = queryParser();, +        String query = copyToStringFromClasspath("/org/elasticsearch/index/query/xcontent/not-filter3.json");, +        Query parsedQuery = queryParser.parse(query).query();, +        assertThat(parsedQuery, instanceOf(FilteredQuery.class));, +        FilteredQuery filteredQuery = (FilteredQuery) parsedQuery;, +        assertThat(((TermQuery) filteredQuery.getQuery()).getTerm(), equalTo(new Term("name.first", "shay")));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/NotFilterParser.java, +                } else {, +                    // its the filter, and the name is the field, +                    filter = parseContext.parseInnerFilter(currentFieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/QueryParseContext.java, +    public Filter parseInnerFilter(String filterName) throws IOException, QueryParsingException {, +        XContentFilterParser filterParser = indexQueryParser.filterParser(filterName);, +        if (filterParser == null) {, +            throw new QueryParsingException(index, "No filter registered for [" + filterName + "]");, +        }, +        Filter result = filterParser.parse(this);, +        // don't move to the nextToken in this case..., +//        if (parser.currentToken() == XContentParser.Token.END_OBJECT || parser.currentToken() == XContentParser.Token.END_ARRAY) {, +//            // if we are at END_OBJECT, move to the next one..., +//            parser.nextToken();, +//        }, +        return result;, +    }, +, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/query/xcontent/SimpleIndexQueryParserTests.java, +        assertThat(((TermQuery) filteredQuery.getQuery()).getTerm(), equalTo(new Term("name.first", "shay")));, +, +        NotFilter notFilter = (NotFilter) filteredQuery.getFilter();, +        assertThat(((TermFilter) notFilter.filter()).getTerm(), equalTo(new Term("name.first", "shay1")));, +    }, +, +    @Test public void testNotFilteredQuery2() throws IOException {, +        IndexQueryParser queryParser = queryParser();, +        String query = copyToStringFromClasspath("/org/elasticsearch/index/query/xcontent/not-filter2.json");, +        Query parsedQuery = queryParser.parse(query).query();, +        assertThat(parsedQuery, instanceOf(FilteredQuery.class));, +        FilteredQuery filteredQuery = (FilteredQuery) parsedQuery;]