[+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +     * Finds the specific index aliases that point to the requested concrete indices directly, +     * or that match with the indices via wildcards., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned., +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    public ImmutableOpenMap<String, List<AliasMetaData>> findAllAliases(final String[] concreteIndices) {, +        return findAliases(Strings.EMPTY_ARRAY, concreteIndices);, +     * Finds the specific index aliases that match with the specified aliases directly or partially via wildcards, and, +     * that point to the specified concrete indices (directly or matching indices via wildcards)., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned., +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    public ImmutableOpenMap<String, List<AliasMetaData>> findAliases(final AliasesRequest aliasesRequest, final String[] concreteIndices) {, +        return findAliases(aliasesRequest.aliases(), concreteIndices);, +     * Finds the specific index aliases that match with the specified aliases directly or partially via wildcards, and, +     * that point to the specified concrete indices (directly or matching indices via wildcards)., +     * @param aliases The aliases to look for. Might contain include or exclude wildcards., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned, +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    private ImmutableOpenMap<String, List<AliasMetaData>> findAliases(final String[] aliases, final String[] concreteIndices) {, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +     * Finds the specific index aliases that point to the requested concrete indices directly, +     * or that match with the indices via wildcards., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned., +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    public ImmutableOpenMap<String, List<AliasMetaData>> findAllAliases(final String[] concreteIndices) {, +        return findAliases(Strings.EMPTY_ARRAY, concreteIndices);, +     * Finds the specific index aliases that match with the specified aliases directly or partially via wildcards, and, +     * that point to the specified concrete indices (directly or matching indices via wildcards)., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned., +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    public ImmutableOpenMap<String, List<AliasMetaData>> findAliases(final AliasesRequest aliasesRequest, final String[] concreteIndices) {, +        return findAliases(aliasesRequest.aliases(), concreteIndices);, +     * Finds the specific index aliases that match with the specified aliases directly or partially via wildcards, and, +     * that point to the specified concrete indices (directly or matching indices via wildcards)., +     * @param aliases The aliases to look for. Might contain include or exclude wildcards., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned, +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    private ImmutableOpenMap<String, List<AliasMetaData>> findAliases(final String[] aliases, final String[] concreteIndices) {, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/IndexCreationTaskTests.java, +import org.elasticsearch.indices.InvalidAliasNameException;, +    private final AliasValidator aliasValidator = new AliasValidator(Settings.EMPTY);, +    public void testInvalidAliasName() throws Exception {, +        final String[] invalidAliasNames = new String[] { "-alias1", "+alias2", "_alias3", "a#lias", "al:ias", ".", ".." };, +        setupRequestAlias(new Alias(randomFrom(invalidAliasNames)));, +        expectThrows(InvalidAliasNameException.class, this::executeTask);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +     * Finds the specific index aliases that point to the requested concrete indices directly, +     * or that match with the indices via wildcards., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned., +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    public ImmutableOpenMap<String, List<AliasMetaData>> findAllAliases(final String[] concreteIndices) {, +        return findAliases(Strings.EMPTY_ARRAY, concreteIndices);, +     * Finds the specific index aliases that match with the specified aliases directly or partially via wildcards, and, +     * that point to the specified concrete indices (directly or matching indices via wildcards)., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned., +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    public ImmutableOpenMap<String, List<AliasMetaData>> findAliases(final AliasesRequest aliasesRequest, final String[] concreteIndices) {, +        return findAliases(aliasesRequest.aliases(), concreteIndices);, +     * Finds the specific index aliases that match with the specified aliases directly or partially via wildcards, and, +     * that point to the specified concrete indices (directly or matching indices via wildcards)., +     * @param aliases The aliases to look for. Might contain include or exclude wildcards., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned, +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    private ImmutableOpenMap<String, List<AliasMetaData>> findAliases(final String[] aliases, final String[] concreteIndices) {, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/IndexCreationTaskTests.java, +import org.elasticsearch.indices.InvalidAliasNameException;, +    private final AliasValidator aliasValidator = new AliasValidator(Settings.EMPTY);, +    public void testInvalidAliasName() throws Exception {, +        final String[] invalidAliasNames = new String[] { "-alias1", "+alias2", "_alias3", "a#lias", "al:ias", ".", ".." };, +        setupRequestAlias(new Alias(randomFrom(invalidAliasNames)));, +        expectThrows(InvalidAliasNameException.class, this::executeTask);, +    }, +, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java, +            final GetAliasesRequest request;, +            if (randomBoolean()) {, +                request = new GetAliasesRequest();, +            } else {, +                request = new GetAliasesRequest(randomFrom("alias1", "alias2"));, +                // replacing with empty aliases behaves as if aliases were unspecified at request building, +                request.replaceAliases(Strings.EMPTY_ARRAY);, +            }, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +     * Finds the specific index aliases that point to the requested concrete indices directly, +     * or that match with the indices via wildcards., +     * @param concreteIndices The concrete indices that the aliases must point to in order to be returned., +     * @return A map of index name to the list of aliases metadata. If a concrete index does not have matching, +     * aliases then the result will <b>not</b> include the index's key., +    public ImmutableOpenMap<String, List<AliasMetaData>> findAllAliases(final String[] concreteIndices) {]