[+++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/Grok.java, +import java.util.Arrays;, +    /**, +     * Checks whether a specific text matches the defined grok expression., +     *, +     * @param text the string to match, +     * @return true if grok expression matches text, false otherwise., +     */, +    /**, +     * Matches and returns any named captures within a compiled grok expression that matched, +     * within the provided text., +     *, +     * @param text the text to match and extract values from., +     * @return a map containing field names and their respective coerced values that matched., +     */, +                for (int number : e.getBackRefs()) {, +                        String matchValue = new String(textAsBytes, region.beg[number], region.end[number] - region.beg[number],, +                        break;, +                    }, +                }, +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/Grok.java, +import java.util.Arrays;, +    /**, +     * Checks whether a specific text matches the defined grok expression., +     *, +     * @param text the string to match, +     * @return true if grok expression matches text, false otherwise., +     */, +    /**, +     * Matches and returns any named captures within a compiled grok expression that matched, +     * within the provided text., +     *, +     * @param text the text to match and extract values from., +     * @return a map containing field names and their respective coerced values that matched., +     */, +                for (int number : e.getBackRefs()) {, +                        String matchValue = new String(textAsBytes, region.beg[number], region.end[number] - region.beg[number],, +                        break;, +                    }, +                }, +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/GrokProcessor.java, +                String pattern = patterns.get(i);, +                String valueWrap;, +                if (traceMatch) {, +                    valueWrap = "(?<" + PATTERN_MATCH_KEY + "." + i + ">" + pattern + ")";, +                } else {, +                    valueWrap = "(?:" + patterns.get(i) + ")";, +                }, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/Grok.java, +import java.util.Arrays;, +    /**, +     * Checks whether a specific text matches the defined grok expression., +     *, +     * @param text the string to match, +     * @return true if grok expression matches text, false otherwise., +     */, +    /**, +     * Matches and returns any named captures within a compiled grok expression that matched, +     * within the provided text., +     *, +     * @param text the text to match and extract values from., +     * @return a map containing field names and their respective coerced values that matched., +     */, +                for (int number : e.getBackRefs()) {, +                        String matchValue = new String(textAsBytes, region.beg[number], region.end[number] - region.beg[number],, +                        break;, +                    }, +                }, +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/GrokProcessor.java, +                String pattern = patterns.get(i);, +                String valueWrap;, +                if (traceMatch) {, +                    valueWrap = "(?<" + PATTERN_MATCH_KEY + "." + i + ">" + pattern + ")";, +                } else {, +                    valueWrap = "(?:" + patterns.get(i) + ")";, +                }, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/GrokProcessorTests.java, +, +    public void testCombineSamePatternNameAcrossPatterns() throws Exception {, +        String fieldName = RandomDocumentPicks.randomFieldName(random());, +        IngestDocument doc = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());, +        doc.setFieldValue(fieldName, "1-3");, +        Map<String, String> patternBank = new HashMap<>();, +        patternBank.put("ONE", "1");, +        patternBank.put("TWO", "2");, +        patternBank.put("THREE", "3");, +        GrokProcessor processor = new GrokProcessor(randomAsciiOfLength(10), patternBank,, +            Arrays.asList("%{ONE:first}-%{TWO:second}", "%{ONE:first}-%{THREE:second}"), fieldName, randomBoolean(), randomBoolean());, +        processor.execute(doc);, +        assertThat(doc.getFieldValue("first", String.class), equalTo("1"));, +        assertThat(doc.getFieldValue("second", String.class), equalTo("3"));, +    }, +, +    public void testFirstWinNamedCapture() throws Exception {, +        String fieldName = RandomDocumentPicks.randomFieldName(random());, +        IngestDocument doc = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());, +        doc.setFieldValue(fieldName, "12");]