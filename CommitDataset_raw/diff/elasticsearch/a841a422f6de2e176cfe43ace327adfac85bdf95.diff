[+++ b/docs/reference/query-dsl/filters/terms-filter.asciidoc, +`fielddata`::, +    Generates a terms filters that uses the fielddata cache to, +    compare terms.  This execution mode is great to use when filtering, +    on a field that is already loaded into the fielddata cache from , +    faceting, sorting, or index warmers.  When filtering on, +    a large number of terms, this execution can be considerably faster, +    than the other modes.  The total filter is not cached unless, +    explicitly configured to do so., +, +++ b/docs/reference/query-dsl/filters/terms-filter.asciidoc, +`fielddata`::, +    Generates a terms filters that uses the fielddata cache to, +    compare terms.  This execution mode is great to use when filtering, +    on a field that is already loaded into the fielddata cache from , +    faceting, sorting, or index warmers.  When filtering on, +    a large number of terms, this execution can be considerably faster, +    than the other modes.  The total filter is not cached unless, +    explicitly configured to do so., +, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +    Filter termsFilter(IndexFieldDataService fieldData, List values, @Nullable QueryParseContext context);, +, +++ b/docs/reference/query-dsl/filters/terms-filter.asciidoc, +`fielddata`::, +    Generates a terms filters that uses the fielddata cache to, +    compare terms.  This execution mode is great to use when filtering, +    on a field that is already loaded into the fielddata cache from , +    faceting, sorting, or index warmers.  When filtering on, +    a large number of terms, this execution can be considerably faster, +    than the other modes.  The total filter is not cached unless, +    explicitly configured to do so., +, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +    Filter termsFilter(IndexFieldDataService fieldData, List values, @Nullable QueryParseContext context);, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import com.carrotsearch.hppc.ObjectOpenHashSet;, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.search.FieldDataTermsFilter;, +    /**, +     * A terms filter based on the field data cache, +     */, +    @Override, +    public Filter termsFilter(IndexFieldDataService fieldDataService, List values, @Nullable QueryParseContext context) {, +        // create with initial size large enough to avoid rehashing, +        ObjectOpenHashSet<BytesRef> terms =, +                new ObjectOpenHashSet<BytesRef>((int) (values.size() * (1 + ObjectOpenHashSet.DEFAULT_LOAD_FACTOR)));, +        for (int i = 0, len = values.size(); i < len; i++) {, +            terms.add(indexedValueForSearch(values.get(i)));, +        }, +, +        return FieldDataTermsFilter.newBytes(fieldDataService.getForField(this), terms);, +    }, +, +++ b/docs/reference/query-dsl/filters/terms-filter.asciidoc, +`fielddata`::, +    Generates a terms filters that uses the fielddata cache to, +    compare terms.  This execution mode is great to use when filtering, +    on a field that is already loaded into the fielddata cache from , +    faceting, sorting, or index warmers.  When filtering on, +    a large number of terms, this execution can be considerably faster, +    than the other modes.  The total filter is not cached unless, +    explicitly configured to do so., +, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +    Filter termsFilter(IndexFieldDataService fieldData, List values, @Nullable QueryParseContext context);, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import com.carrotsearch.hppc.ObjectOpenHashSet;, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.search.FieldDataTermsFilter;, +    /**, +     * A terms filter based on the field data cache, +     */, +    @Override, +    public Filter termsFilter(IndexFieldDataService fieldDataService, List values, @Nullable QueryParseContext context) {, +        // create with initial size large enough to avoid rehashing, +        ObjectOpenHashSet<BytesRef> terms =, +                new ObjectOpenHashSet<BytesRef>((int) (values.size() * (1 + ObjectOpenHashSet.DEFAULT_LOAD_FACTOR)));, +        for (int i = 0, len = values.size(); i < len; i++) {, +            terms.add(indexedValueForSearch(values.get(i)));, +        }, +, +        return FieldDataTermsFilter.newBytes(fieldDataService.getForField(this), terms);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +        long longValue = NumericUtils.doubleToSortableLong(parseDoubleValue(value));, +        double dValue = parseDoubleValue(value);, +                lowerTerm == null ? null : parseDoubleValue(lowerTerm),, +                upperTerm == null ? null : parseDoubleValue(upperTerm),, +        double dValue = parseDoubleValue(value);, +                lowerTerm == null ? null : parseDoubleValue(lowerTerm),, +                upperTerm == null ? null : parseDoubleValue(upperTerm),, +                lowerTerm == null ? null : parseDoubleValue(lowerTerm),, +                upperTerm == null ? null : parseDoubleValue(upperTerm),]