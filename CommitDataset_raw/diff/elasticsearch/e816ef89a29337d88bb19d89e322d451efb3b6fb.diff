[+++ b/build.gradle, +    if (project.path == ':test:framework' || project.path == ':client:test') {, +++ b/build.gradle, +    if (project.path == ':test:framework' || project.path == ':client:test') {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.artifacts.Dependency, +        Closure disableTransitiveDeps = { Dependency dep ->, +            if (dep instanceof ModuleDependency && !(dep instanceof ProjectDependency) && dep.group.startsWith('org.elasticsearch') == false) {, +++ b/build.gradle, +    if (project.path == ':test:framework' || project.path == ':client:test') {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.artifacts.Dependency, +        Closure disableTransitiveDeps = { Dependency dep ->, +            if (dep instanceof ModuleDependency && !(dep instanceof ProjectDependency) && dep.group.startsWith('org.elasticsearch') == false) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +import org.gradle.api.artifacts.FileCollectionDependency;, +                // include SelfResolvingDependency with files in the validation, +                if (dependency instanceof FileCollectionDependency) {, +                    return true, +                }, +                return dependency.group && dependency.group.startsWith("org.elasticsearch") == false, +++ b/build.gradle, +    if (project.path == ':test:framework' || project.path == ':client:test') {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.artifacts.Dependency, +        Closure disableTransitiveDeps = { Dependency dep ->, +            if (dep instanceof ModuleDependency && !(dep instanceof ProjectDependency) && dep.group.startsWith('org.elasticsearch') == false) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +import org.gradle.api.artifacts.FileCollectionDependency;, +                // include SelfResolvingDependency with files in the validation, +                if (dependency instanceof FileCollectionDependency) {, +                    return true, +                }, +                return dependency.group && dependency.group.startsWith("org.elasticsearch") == false, +++ b/buildSrc/src/main/resources/forbidden/http-signatures.txt, +org.elasticsearch.client.http.entity.StringEntity#<init>(java.lang.String), +org.elasticsearch.client.http.entity.StringEntity#<init>(java.lang.String,java.lang.String), +org.elasticsearch.client.http.entity.StringEntity#<init>(java.lang.String,java.nio.charset.Charset), +org.elasticsearch.client.http.entity.ByteArrayEntity#<init>(byte[]), +org.elasticsearch.client.http.entity.ByteArrayEntity#<init>(byte[],int,int), +org.elasticsearch.client.http.entity.FileEntity#<init>(java.io.File), +org.elasticsearch.client.http.entity.InputStreamEntity#<init>(java.io.InputStream), +org.elasticsearch.client.http.entity.InputStreamEntity#<init>(java.io.InputStream,long), +org.elasticsearch.client.http.nio.entity.NByteArrayEntity#<init>(byte[]), +org.elasticsearch.client.http.nio.entity.NByteArrayEntity#<init>(byte[],int,int), +org.elasticsearch.client.http.nio.entity.NFileEntity#<init>(java.io.File), +org.elasticsearch.client.http.nio.entity.NStringEntity#<init>(java.lang.String), +org.elasticsearch.client.http.nio.entity.NStringEntity#<init>(java.lang.String,java.lang.String), +org.elasticsearch.client.http.nio.entity.NFileEntity#<init>(java.io.File,java.lang.String), +org.elasticsearch.client.http.nio.entity.NFileEntity#<init>(java.io.File,java.lang.String,boolean), +org.elasticsearch.client.http.entity.FileEntity#<init>(java.io.File,java.lang.String), +org.elasticsearch.client.http.entity.StringEntity#<init>(java.lang.String,java.lang.String,java.lang.String), +org.elasticsearch.client.http.entity.BasicHttpEntity#<init>(), +org.elasticsearch.client.http.entity.EntityTemplate#<init>(org.elasticsearch.client.http.entity.ContentProducer), +org.elasticsearch.client.http.entity.SerializableEntity#<init>(java.io.Serializable), +++ b/build.gradle, +    if (project.path == ':test:framework' || project.path == ':client:test') {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.artifacts.Dependency, +        Closure disableTransitiveDeps = { Dependency dep ->, +            if (dep instanceof ModuleDependency && !(dep instanceof ProjectDependency) && dep.group.startsWith('org.elasticsearch') == false) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +import org.gradle.api.artifacts.FileCollectionDependency;, +                // include SelfResolvingDependency with files in the validation, +                if (dependency instanceof FileCollectionDependency) {, +                    return true, +                }, +                return dependency.group && dependency.group.startsWith("org.elasticsearch") == false, +++ b/buildSrc/src/main/resources/forbidden/http-signatures.txt, +org.elasticsearch.client.http.entity.StringEntity#<init>(java.lang.String), +org.elasticsearch.client.http.entity.StringEntity#<init>(java.lang.String,java.lang.String), +org.elasticsearch.client.http.entity.StringEntity#<init>(java.lang.String,java.nio.charset.Charset), +org.elasticsearch.client.http.entity.ByteArrayEntity#<init>(byte[]), +org.elasticsearch.client.http.entity.ByteArrayEntity#<init>(byte[],int,int), +org.elasticsearch.client.http.entity.FileEntity#<init>(java.io.File), +org.elasticsearch.client.http.entity.InputStreamEntity#<init>(java.io.InputStream), +org.elasticsearch.client.http.entity.InputStreamEntity#<init>(java.io.InputStream,long), +org.elasticsearch.client.http.nio.entity.NByteArrayEntity#<init>(byte[]), +org.elasticsearch.client.http.nio.entity.NByteArrayEntity#<init>(byte[],int,int), +org.elasticsearch.client.http.nio.entity.NFileEntity#<init>(java.io.File), +org.elasticsearch.client.http.nio.entity.NStringEntity#<init>(java.lang.String), +org.elasticsearch.client.http.nio.entity.NStringEntity#<init>(java.lang.String,java.lang.String), +org.elasticsearch.client.http.nio.entity.NFileEntity#<init>(java.io.File,java.lang.String), +org.elasticsearch.client.http.nio.entity.NFileEntity#<init>(java.io.File,java.lang.String,boolean), +org.elasticsearch.client.http.entity.FileEntity#<init>(java.io.File,java.lang.String), +org.elasticsearch.client.http.entity.StringEntity#<init>(java.lang.String,java.lang.String,java.lang.String), +org.elasticsearch.client.http.entity.BasicHttpEntity#<init>(), +org.elasticsearch.client.http.entity.EntityTemplate#<init>(org.elasticsearch.client.http.entity.ContentProducer), +org.elasticsearch.client.http.entity.SerializableEntity#<init>(java.io.Serializable), +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/rest/RestClientBenchmark.java, +import org.elasticsearch.client.http.HttpEntity;, +import org.elasticsearch.client.http.HttpHeaders;, +import org.elasticsearch.client.http.HttpHost;, +import org.elasticsearch.client.http.HttpStatus;, +import org.elasticsearch.client.http.client.config.RequestConfig;, +import org.elasticsearch.client.http.conn.ConnectionKeepAliveStrategy;, +import org.elasticsearch.client.http.entity.ContentType;, +import org.elasticsearch.client.http.entity.StringEntity;, +import org.elasticsearch.client.http.impl.nio.client.HttpAsyncClientBuilder;, +import org.elasticsearch.client.http.message.BasicHeader;]