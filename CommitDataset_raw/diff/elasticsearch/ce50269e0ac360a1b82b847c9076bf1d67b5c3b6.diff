[+++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI policyUri = getClass().getResource(POLICY_RESOURCE).toURI();, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(policyUri));, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +                // run groovy scripts with no permissions (except logging property), +                    return groovy.implies(domain, permission);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI policyUri = getClass().getResource(POLICY_RESOURCE).toURI();, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(policyUri));, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +                // run groovy scripts with no permissions (except logging property), +                    return groovy.implies(domain, permission);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI policyUri = getClass().getResource(POLICY_RESOURCE).toURI();, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(policyUri));, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +                // run groovy scripts with no permissions (except logging property), +                    return groovy.implies(domain, permission);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +    /**, +     * The name of the scripting engine/language., +     */, +    /**, +     * The setting to enable or disable <code>invokedynamic</code> instruction support in Java 7+., +     * <p>, +     * Note: If this is disabled because <code>invokedynamic</code> is causing issues, then the Groovy, +     * <code>indy</code> jar needs to be replaced by the non-<code>indy</code> variant of it on the classpath (e.g.,, +     * <code>groovy-all-2.4.4-indy.jar</code> should be replaced by <code>groovy-all-2.4.4.jar</code>)., +     * <p>, +     * Defaults to {@code true}., +     */, +    public static final String GROOVY_INDY_ENABLED = "script.groovy.indy";, +    /**, +     * The name of the Groovy compiler setting to use associated with activating <code>invokedynamic</code> support., +     */, +    public static final String GROOVY_INDY_SETTING_NAME = "indy";, +, +, +, +, +, +        // Implicitly requires Java 7u60 or later to get valid support, +        if (settings.getAsBoolean(GROOVY_INDY_ENABLED, true)) {, +            // maintain any default optimizations, +            config.getOptimizationOptions().put(GROOVY_INDY_SETTING_NAME, true);, +        }, +, +        // Groovy class loader to isolate Groovy-land code, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI policyUri = getClass().getResource(POLICY_RESOURCE).toURI();, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(policyUri));, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +                // run groovy scripts with no permissions (except logging property), +                    return groovy.implies(domain, permission);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;, +import org.elasticsearch.action.support.TransportActions;, +++ b/core/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +    /**, +     * The name of the scripting engine/language., +     */, +    /**, +     * The setting to enable or disable <code>invokedynamic</code> instruction support in Java 7+., +     * <p>, +     * Note: If this is disabled because <code>invokedynamic</code> is causing issues, then the Groovy, +     * <code>indy</code> jar needs to be replaced by the non-<code>indy</code> variant of it on the classpath (e.g.,, +     * <code>groovy-all-2.4.4-indy.jar</code> should be replaced by <code>groovy-all-2.4.4.jar</code>)., +     * <p>, +     * Defaults to {@code true}., +     */]