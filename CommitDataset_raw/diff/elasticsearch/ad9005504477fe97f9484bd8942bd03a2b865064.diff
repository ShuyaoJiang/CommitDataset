[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +                new AutoFollowCoordinator(, +                        settings,, +                        client,, +                        clusterService,, +                        ccrLicenseChecker,, +                        threadPool::relativeTimeInMillis,, +                        threadPool::absoluteTimeInMillis));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +                new AutoFollowCoordinator(, +                        settings,, +                        client,, +                        clusterService,, +                        ccrLicenseChecker,, +                        threadPool::relativeTimeInMillis,, +                        threadPool::absoluteTimeInMillis));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +import org.elasticsearch.common.component.AbstractLifecycleComponent;, +import org.elasticsearch.common.component.Lifecycle;, +public class AutoFollowCoordinator extends AbstractLifecycleComponent implements ClusterStateListener {, +    @Override, +    protected void doStart() {, +, +    }, +, +    @Override, +    protected void doStop() {, +        LOGGER.trace("stopping all auto-followers");, +        /*, +         * Synchronization is not necessary here; the field is volatile and the map is a copy-on-write map, any new auto-followers will not, +         * start since we check started status of the coordinator before starting them., +         */, +        autoFollowers.values().forEach(AutoFollower::stop);, +    }, +, +    @Override, +    protected void doClose() {, +, +    }, +, +            LOGGER.info("starting auto-follower for remote cluster [{}]", remoteCluster);, +            if (lifecycleState() == Lifecycle.State.STARTED) {, +        }, +                LOGGER.info("removing auto-follower for remote cluster [{}]", remoteCluster);, +                LOGGER.info("retrying auto-follower for remote cluster [{}] after remote cluster connection was missing", remoteCluster);, +                if (lifecycleState() == Lifecycle.State.STARTED) {, +        }, +        private volatile boolean stop;, +            if (stop) {, +                LOGGER.trace("auto-follower is stopped for remote cluster [{}]", remoteCluster);, +                return;, +            }, +        void stop() {, +            LOGGER.trace("stopping auto-follower for remote cluster [{}]", remoteCluster);, +            stop = true;, +        }, +]