[+++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +public abstract class FieldStats<T extends Comparable<T>> implements Streamable, ToXContent {, +     * @param value The string to be parsed, +     * @return The concrete object represented by the string argument, +     */, +    protected abstract T valueOf(String value);, +, +    /**, +    /**, +     * @return <code>true</code> if this instance matches with the provided index constraint, otherwise <code>false</code> is returned, +     */, +    public boolean match(IndexConstraint constraint) {, +        int cmp;, +        T value  = valueOf(constraint.getValue());, +        if (constraint.getProperty() == IndexConstraint.Property.MIN) {, +            cmp = minValue.compareTo(value);, +        } else if (constraint.getProperty() == IndexConstraint.Property.MAX) {, +            cmp = maxValue.compareTo(value);, +        } else {, +            throw new IllegalArgumentException("Unsupported property [" + constraint.getProperty() + "]");, +        }, +, +        switch (constraint.getComparison()) {, +            case GT:, +                return cmp > 0;, +            case GTE:, +                return cmp >= 0;, +            case LT:, +                return cmp < 0;, +            case LTE:, +                return cmp <= 0;, +            default:, +                throw new IllegalArgumentException("Unsupported comparison [" + constraint.getComparison() + "]");, +        }, +    }, +, +        protected java.lang.Long valueOf(String value) {, +            return java.lang.Long.valueOf(value);, +        }, +, +        @Override, +        protected java.lang.Float valueOf(String value) {, +            return java.lang.Float.valueOf(value);, +        }, +, +        @Override, +        protected java.lang.Double valueOf(String value) {, +            return java.lang.Double.valueOf(value);, +        }, +, +        @Override, +        protected BytesRef valueOf(String value) {, +            return new BytesRef(value);, +        }, +, +        @Override, +        protected java.lang.Long valueOf(String value) {, +            return dateFormatter.parser().parseMillis(value);, +        }, +, +        @Override, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +public abstract class FieldStats<T extends Comparable<T>> implements Streamable, ToXContent {, +     * @param value The string to be parsed, +     * @return The concrete object represented by the string argument, +     */, +    protected abstract T valueOf(String value);, +, +    /**, +    /**, +     * @return <code>true</code> if this instance matches with the provided index constraint, otherwise <code>false</code> is returned, +     */, +    public boolean match(IndexConstraint constraint) {, +        int cmp;, +        T value  = valueOf(constraint.getValue());, +        if (constraint.getProperty() == IndexConstraint.Property.MIN) {, +            cmp = minValue.compareTo(value);, +        } else if (constraint.getProperty() == IndexConstraint.Property.MAX) {, +            cmp = maxValue.compareTo(value);, +        } else {, +            throw new IllegalArgumentException("Unsupported property [" + constraint.getProperty() + "]");, +        }, +, +        switch (constraint.getComparison()) {, +            case GT:, +                return cmp > 0;, +            case GTE:, +                return cmp >= 0;, +            case LT:, +                return cmp < 0;, +            case LTE:, +                return cmp <= 0;, +            default:, +                throw new IllegalArgumentException("Unsupported comparison [" + constraint.getComparison() + "]");, +        }, +    }, +, +        protected java.lang.Long valueOf(String value) {, +            return java.lang.Long.valueOf(value);, +        }]