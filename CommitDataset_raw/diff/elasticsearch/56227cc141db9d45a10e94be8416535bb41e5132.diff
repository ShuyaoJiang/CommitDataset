[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    public PercolateRequest(String[] indices, String documentType) {, +        super(indices);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    public PercolateRequest(String[] indices, String documentType) {, +        super(indices);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder(Client client) {, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    public PercolateRequest(String[] indices, String documentType) {, +        super(indices);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder(Client client) {, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +import org.elasticsearch.common.io.stream.Streamable;, +public class PercolateResponse extends BroadcastOperationResponse implements Iterable<PercolateResponse.Match> {, +    private Match[] matches;, +    public PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures, Match[] matches, long tookInMillis) {, +    public PercolateResponse(Match[] matches) {, +    public Match[] getMatches() {, +    public Iterator<Match> iterator() {, +        int size = in.readVInt();, +        matches = new Match[size];, +        for (int i = 0; i < size; i++) {, +            matches[i] = new Match();, +            matches[i].readFrom(in);, +        }, +        out.writeVInt(matches.length);, +        for (Match match : matches) {, +            match.writeTo(out);, +        }, +    }, +, +    public static class Match implements Streamable {, +, +        private Text id;, +        private Text index;, +, +        public Match(Text id, Text index) {, +            this.id = id;, +            this.index = index;, +        }, +, +        Match() {, +        }, +, +        public Text id() {, +            return id;, +        }, +, +        public Text index() {, +            return index;, +        }, +, +        public Text getId() {, +            return id;, +        }, +, +        public Text getIndex() {, +            return index;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            id = in.readText();, +            index = in.readText();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeText(id);, +            out.writeText(index);, +        }, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    public PercolateRequest(String[] indices, String documentType) {, +        super(indices);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder(Client client) {, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +import org.elasticsearch.common.io.stream.Streamable;, +public class PercolateResponse extends BroadcastOperationResponse implements Iterable<PercolateResponse.Match> {, +    private Match[] matches;, +    public PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures, Match[] matches, long tookInMillis) {, +    public PercolateResponse(Match[] matches) {, +    public Match[] getMatches() {, +    public Iterator<Match> iterator() {, +        int size = in.readVInt();, +        matches = new Match[size];, +        for (int i = 0; i < size; i++) {, +            matches[i] = new Match();, +            matches[i].readFrom(in);, +        }, +        out.writeVInt(matches.length);, +        for (Match match : matches) {, +            match.writeTo(out);, +        }, +    }, +, +    public static class Match implements Streamable {, +]