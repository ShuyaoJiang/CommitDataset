[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/util/lucene/versioned/VersionedMapBenchmark.java, +import org.elasticsearch.util.lucene.versioned.ConcurrentVersionedMapLong;, +            versionedMap = new ConcurrentVersionedMapLong();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/util/lucene/versioned/VersionedMapBenchmark.java, +import org.elasticsearch.util.lucene.versioned.ConcurrentVersionedMapLong;, +            versionedMap = new ConcurrentVersionedMapLong();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.util.concurrent.ConcurrentMapLong;, +import org.elasticsearch.util.concurrent.ConcurrentMaps;, +    private final ConcurrentMapLong<SearchContext> activeContexts = ConcurrentMaps.newConcurrentMapLong();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/util/lucene/versioned/VersionedMapBenchmark.java, +import org.elasticsearch.util.lucene.versioned.ConcurrentVersionedMapLong;, +            versionedMap = new ConcurrentVersionedMapLong();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.util.concurrent.ConcurrentMapLong;, +import org.elasticsearch.util.concurrent.ConcurrentMaps;, +    private final ConcurrentMapLong<SearchContext> activeContexts = ConcurrentMaps.newConcurrentMapLong();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportService.java, +import org.elasticsearch.util.concurrent.ConcurrentMapLong;, +import org.elasticsearch.util.concurrent.ConcurrentMaps;, +import org.elasticsearch.util.guice.inject.Inject;, +    final ConcurrentMapLong<RequestHolder> clientHandlers = ConcurrentMaps.newConcurrentMapLong();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/util/lucene/versioned/VersionedMapBenchmark.java, +import org.elasticsearch.util.lucene.versioned.ConcurrentVersionedMapLong;, +            versionedMap = new ConcurrentVersionedMapLong();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.util.concurrent.ConcurrentMapLong;, +import org.elasticsearch.util.concurrent.ConcurrentMaps;, +    private final ConcurrentMapLong<SearchContext> activeContexts = ConcurrentMaps.newConcurrentMapLong();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportService.java, +import org.elasticsearch.util.concurrent.ConcurrentMapLong;, +import org.elasticsearch.util.concurrent.ConcurrentMaps;, +import org.elasticsearch.util.guice.inject.Inject;, +    final ConcurrentMapLong<RequestHolder> clientHandlers = ConcurrentMaps.newConcurrentMapLong();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/concurrent/ConcurrentHashMapLong.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.util.concurrent;, +, +import java.util.Collection;, +import java.util.Enumeration;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +, +/**, + * @author kimchy (shay.banon), + */, +public class ConcurrentHashMapLong<T> implements ConcurrentMapLong<T> {, +, +    private final ConcurrentHashMap<Long, T> map;, +, +    public ConcurrentHashMapLong() {, +        this.map = new ConcurrentHashMap<Long, T>();, +    }, +, +    @Override public T get(long key) {, +        return map.get(key);, +    }, +, +    @Override public T remove(long key) {, +        return map.remove(key);, +    }, +, +    @Override public T put(long key, T value) {, +        return map.put(key, value);, +    }, +, +    @Override public T putIfAbsent(long key, T value) {, +        return map.putIfAbsent(key, value);, +    }, +, +    // MAP DELEGATION, +, +    @Override public boolean isEmpty() {, +        return map.isEmpty();, +    }, +, +    @Override public int size() {, +        return map.size();, +    }, +, +    @Override public T get(Object key) {]