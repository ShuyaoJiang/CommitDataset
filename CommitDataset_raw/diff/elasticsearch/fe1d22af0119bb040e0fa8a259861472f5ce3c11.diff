[+++ b/src/test/java/org/elasticsearch/count/query/SimpleQueryTests.java, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +        client().prepareIndex("test", "type1", "1").setSource("field1", "value1_1", "field2", "value2_1").setRefresh(true).get();, +        CountResponse countResponse = client().prepareCount().setQuery(new BytesArray("{ \"term\" : { \"field1\" : \"value1_1\" }}").array()).get();, +        assertAcked(prepareCreate("test"), +                .setSettings("index.number_of_shards", 1));, +        client().prepareIndex("test", "type1", "1").setSource("field1", "quick brown fox", "field2", "quick brown fox").get();, +        client().prepareIndex("test", "type1", "2").setSource("field1", "quick lazy huge brown fox", "field2", "quick lazy huge brown fox").setRefresh(true).get();, +        assertAcked(prepareCreate("test"), +                .setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +, +        indexRandom(true,, +                client().prepareIndex("test", "type1", "3").setSource("field1", "quick lazy huge brown pidgin", "field2", "the quick lazy huge brown fox jumps over the tree"),, +                client().prepareIndex("test", "type1", "2").setSource("field1", "the quick lazy huge brown fox jumps over the tree") );, +        CountResponse countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the quick brown").cutoffFrequency(3).lowFreqOperator(Operator.OR)).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the quick brown").cutoffFrequency(3).lowFreqOperator(Operator.AND)).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the quick brown").cutoffFrequency(3)).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the huge fox").lowFreqMinimumShouldMatch("2")).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the lazy fox brown").cutoffFrequency(1).highFreqMinimumShouldMatch("3")).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the lazy fox brown").cutoffFrequency(1).highFreqMinimumShouldMatch("4")).get();, +        countResponse = client().prepareCount().setQuery(new BytesArray("{ \"common\" : { \"field1\" : { \"query\" : \"the lazy fox brown\", \"cutoff_frequency\" : 1, \"minimum_should_match\" : { \"high_freq\" : 4 } } } }").array()).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the lazy fox brown").cutoffFrequency(1)).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the quick brown").cutoffFrequency(3).analyzer("standard")).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.matchQuery("field1", "the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.matchQuery("field1", "the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.OR)).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.matchQuery("field1", "the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND).analyzer("stop")).get();, +        countResponse = client().prepareCount().setQuery(QueryBuilders.multiMatchQuery("the quick brown", "field1", "field2").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).get();, +        assertAcked(prepareCreate("test"), +                .setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +        CountResponse countResponse = client().prepareCount().setQuery(QueryBuilders.matchQuery("field2", "quick brown").type(Type.PHRASE).slop(0)).get();, +            client().prepareCount().setQuery(QueryBuilders.matchQuery("field1", "quick brown").type(Type.PHRASE).slop(0)).get();, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +        client().prepareIndex("test", "type1", "1").setSource("field1", "value_1", "field2", "value_2").get();, +        refresh();, +        CountResponse countResponse = client().prepareCount().setQuery(queryString("value*").analyzeWildcard(true)).get();, +        countResponse = client().prepareCount().setQuery(queryString("*ue*").analyzeWildcard(true)).get();, +        countResponse = client().prepareCount().setQuery(queryString("*ue_1").analyzeWildcard(true)).get();, +        countResponse = client().prepareCount().setQuery(queryString("val*e_1").analyzeWildcard(true)).get();, +        countResponse = client().prepareCount().setQuery(queryString("v?l*e?1").analyzeWildcard(true)).get();, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +        client().prepareIndex("test", "type1", "1").setSource("field1", "value_1", "field2", "value_2").get();, +        refresh();, +        CountResponse countResponse = client().prepareCount().setQuery(queryString("VALUE_3~1").lowercaseExpandedTerms(true)).get();, +        countResponse = client().prepareCount().setQuery(queryString("VALUE_3~1").lowercaseExpandedTerms(false)).get();, +        countResponse = client().prepareCount().setQuery(queryString("ValUE_*").lowercaseExpandedTerms(true)).get();, +        countResponse = client().prepareCount().setQuery(queryString("vAl*E_1")).get();, +        countResponse = client().prepareCount().setQuery(queryString("[VALUE_1 TO VALUE_3]")).get();, +        countResponse = client().prepareCount().setQuery(queryString("[VALUE_1 TO VALUE_3]").lowercaseExpandedTerms(false)).get();, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +        client().prepareIndex("test", "type", "1").setSource("past", aMonthAgo, "future", aMonthFromNow).get();, +        CountResponse countResponse = client().prepareCount().setQuery(queryString("past:[now-2M/d TO now/d]")).get();, +        countResponse = client().prepareCount().setQuery(queryString("future:[now/d TO now+2M/d]").lowercaseExpandedTerms(false)).get();, +        countResponse = client().prepareCount().setQuery(queryString("future:[now/D TO now+2M/d]").lowercaseExpandedTerms(false)).get();, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1), +                        .endObject().endObject()));, +        assertHitCount(client().prepareCount().setTypes("type1").setQuery(matchAllQuery()).get(), 2l);, +        assertHitCount(client().prepareCount().setTypes("type2").setQuery(matchAllQuery()).get(), 3l);, +        assertHitCount(client().prepareCount().setTypes("type1", "type2").setQuery(matchAllQuery()).get(), 5l);, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1), +                        .endObject().endObject()));, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "value1"),, +                client().prepareIndex("test", "type1", "2").setSource("field1", "value2"),, +                client().prepareIndex("test", "type1", "3").setSource("field1", "value3"));, +        CountResponse countResponse = client().prepareCount().setQuery(constantScoreQuery(idsFilter("type1").ids("1", "3"))).get();, +        countResponse = client().prepareCount().setQuery(constantScoreQuery(idsFilter().ids("1", "3"))).get();, +        countResponse = client().prepareCount().setQuery(idsQuery("type1").ids("1", "3")).get();, +        countResponse = client().prepareCount().setQuery(idsQuery().ids("1", "3")).get();, +        countResponse = client().prepareCount().setQuery(idsQuery("type1").ids("7", "10")).get();, +        countResponse = client().prepareCount().setTypes("type1").setQuery(constantScoreQuery(termsFilter("_id", "1", "3"))).get();, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "value1_1"),, +                client().prepareIndex("test", "type1", "2").setSource("field1", "value1_2"),, +                client().prepareIndex("test", "type1", "3").setSource("field2", "value2_3"),, +                client().prepareIndex("test", "type1", "4").setSource("field3", "value3_4"));, +        CountResponse countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), limitFilter(2))).get();, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +        indexRandom(true,, +                client().prepareIndex("test", "type1", "1").setSource(jsonBuilder().startObject().startObject("obj1").field("obj1_val", "1").endObject().field("x1", "x_1").field("field1", "value1_1").field("field2", "value2_1").endObject()),, +                client().prepareIndex("test", "type1", "2").setSource(jsonBuilder().startObject().startObject("obj1").field("obj1_val", "1").endObject().field("x2", "x_2").field("field1", "value1_2").endObject()),, +                client().prepareIndex("test", "type1", "3").setSource(jsonBuilder().startObject().startObject("obj2").field("obj2_val", "1").endObject().field("y1", "y_1").field("field2", "value2_3").endObject()),, +                client().prepareIndex("test", "type1", "4").setSource(jsonBuilder().startObject().startObject("obj2").field("obj2_val", "1").endObject().field("y2", "y_2").field("field3", "value3_4").endObject()));, +        CountResponse countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), existsFilter("field1"))).get();, +        countResponse = client().prepareCount().setQuery(constantScoreQuery(existsFilter("field1"))).get();, +        countResponse = client().prepareCount().setQuery(queryString("_exists_:field1")).get();, +        countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), existsFilter("field2"))).get();, +        countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), existsFilter("field3"))).get();, +        countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), existsFilter("x*"))).get();, +        countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), existsFilter("obj1"))).get();, +        countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), missingFilter("field1"))).get();, +        countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), missingFilter("field1"))).get();, +        countResponse = client().prepareCount().setQuery(constantScoreQuery(missingFilter("field1"))).get();, +        countResponse = client().prepareCount().setQuery(queryString("_missing_:field1")).get();, +        countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), missingFilter("x*"))).get();, +        countResponse = client().prepareCount().setQuery(filteredQuery(matchAllQuery(), missingFilter("obj1"))).get();, +        assertAcked(prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1));, +        client().prepareIndex("test", "type1", "1").setSource("field1", "value1_1", "field2", "value2_1").setRefresh(true).get();, +        assertHitCount(client().prepareCount().setQuery(wrapper).get(), 1l);, +        BoolQueryBuilder bool = boolQuery().must(wrapper).must(new TermQueryBuilder("field2", "value2_1"));]