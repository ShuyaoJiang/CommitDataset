[+++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.apache.lucene.search.spans.FieldMaskingSpanQuery;, +import org.apache.lucene.search.spans.SpanContainingQuery;, +import org.apache.lucene.search.spans.SpanFirstQuery;, +import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;, +import org.apache.lucene.search.spans.SpanNearQuery;, +import org.apache.lucene.search.spans.SpanNotQuery;, +import org.apache.lucene.search.spans.SpanOrQuery;, +import org.apache.lucene.search.spans.SpanQuery;, +import org.apache.lucene.search.spans.SpanTermQuery;, +import org.apache.lucene.search.spans.SpanWithinQuery;, +        } else if (query instanceof SpanTermQuery) {, +            return Collections.singleton(((SpanTermQuery) query).getTerm());, +        } else if (query instanceof SpanNearQuery) {, +            Set<Term> bestClause = null;, +            SpanNearQuery spanNearQuery = (SpanNearQuery) query;, +            for (SpanQuery clause : spanNearQuery.getClauses()) {, +                Set<Term> temp = extractQueryTerms(clause);, +                bestClause = selectTermListWithTheLongestShortestTerm(temp, bestClause);, +            }, +            return bestClause;, +        } else if (query instanceof SpanOrQuery) {, +            Set<Term> terms = new HashSet<>();, +            SpanOrQuery spanOrQuery = (SpanOrQuery) query;, +            for (SpanQuery clause : spanOrQuery.getClauses()) {, +                terms.addAll(extractQueryTerms(clause));, +            }, +            return terms;, +        } else if (query instanceof SpanFirstQuery) {, +            return extractQueryTerms(((SpanFirstQuery)query).getMatch());, +        } else if (query instanceof SpanNotQuery) {, +            return extractQueryTerms(((SpanNotQuery) query).getInclude());, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.apache.lucene.search.spans.FieldMaskingSpanQuery;, +import org.apache.lucene.search.spans.SpanContainingQuery;, +import org.apache.lucene.search.spans.SpanFirstQuery;, +import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;, +import org.apache.lucene.search.spans.SpanNearQuery;, +import org.apache.lucene.search.spans.SpanNotQuery;, +import org.apache.lucene.search.spans.SpanOrQuery;, +import org.apache.lucene.search.spans.SpanQuery;, +import org.apache.lucene.search.spans.SpanTermQuery;, +import org.apache.lucene.search.spans.SpanWithinQuery;, +        } else if (query instanceof SpanTermQuery) {, +            return Collections.singleton(((SpanTermQuery) query).getTerm());, +        } else if (query instanceof SpanNearQuery) {, +            Set<Term> bestClause = null;, +            SpanNearQuery spanNearQuery = (SpanNearQuery) query;, +            for (SpanQuery clause : spanNearQuery.getClauses()) {, +                Set<Term> temp = extractQueryTerms(clause);, +                bestClause = selectTermListWithTheLongestShortestTerm(temp, bestClause);, +            }, +            return bestClause;, +        } else if (query instanceof SpanOrQuery) {, +            Set<Term> terms = new HashSet<>();, +            SpanOrQuery spanOrQuery = (SpanOrQuery) query;, +            for (SpanQuery clause : spanOrQuery.getClauses()) {, +                terms.addAll(extractQueryTerms(clause));, +            }, +            return terms;, +        } else if (query instanceof SpanFirstQuery) {, +            return extractQueryTerms(((SpanFirstQuery)query).getMatch());, +        } else if (query instanceof SpanNotQuery) {, +            return extractQueryTerms(((SpanNotQuery) query).getInclude());, +++ b/core/src/test/java/org/elasticsearch/index/percolator/ExtractQueryTermsServiceTests.java, +import org.apache.lucene.search.spans.FieldMaskingSpanQuery;, +import org.apache.lucene.search.spans.SpanFirstQuery;, +import org.apache.lucene.search.spans.SpanNearQuery;, +import org.apache.lucene.search.spans.SpanNotQuery;, +import org.apache.lucene.search.spans.SpanOrQuery;, +import org.apache.lucene.search.spans.SpanTermQuery;, +import java.util.Arrays;, +    public void testExtractQueryMetadata_spanTermQuery() {, +        // the following span queries aren't exposed in the query dsl and are therefor not supported:, +        // 1) SpanPositionRangeQuery, +        // 2) PayloadScoreQuery, +        // 3) SpanBoostQuery, +, +        // The following span queries can't be supported because of how these queries work:, +        // 1) SpanMultiTermQueryWrapper, not supported, because there is no support for MTQ typed queries yet., +        // 2) SpanContainingQuery, is kind of range of spans and we don't know what is between the little and big terms, +        // 3) SpanWithinQuery, same reason as SpanContainingQuery, +        // 4) FieldMaskingSpanQuery is a tricky query so we shouldn't optimize this, +, +        SpanTermQuery spanTermQuery1 = new SpanTermQuery(new Term("_field", "_short_term"));, +        Set<Term> terms = ExtractQueryTermsService.extractQueryTerms(spanTermQuery1);, +        assertTermsEqual(terms, spanTermQuery1.getTerm());, +    }, +, +    public void testExtractQueryMetadata_spanNearQuery() {, +        SpanTermQuery spanTermQuery1 = new SpanTermQuery(new Term("_field", "_short_term"));, +        SpanTermQuery spanTermQuery2 = new SpanTermQuery(new Term("_field", "_very_long_term"));, +        SpanNearQuery spanNearQuery = new SpanNearQuery.Builder("_field", true), +                .addClause(spanTermQuery1).addClause(spanTermQuery2).build();, +        Set<Term> terms = ExtractQueryTermsService.extractQueryTerms(spanNearQuery);, +        assertTermsEqual(terms, spanTermQuery2.getTerm());, +    }, +, +    public void testExtractQueryMetadata_spanOrQuery() {, +        SpanTermQuery spanTermQuery1 = new SpanTermQuery(new Term("_field", "_short_term"));]