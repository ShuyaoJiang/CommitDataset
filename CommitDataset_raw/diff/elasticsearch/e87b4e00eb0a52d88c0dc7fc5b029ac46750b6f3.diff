[+++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/context/GeoContextMapping.java, +        for (GeoQueryContext queryContext : queryContexts) {, +            int minPrecision = this.precision;, +            if (queryContext.precision != -1) {, +                minPrecision = Math.min(minPrecision, queryContext.precision);, +            GeoPoint point = queryContext.geoPoint;, +            final Collection<String> locations = new HashSet<>();, +            String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision);, +            locations.add(geoHash);, +            if (queryContext.neighbours.isEmpty() && geoHash.length() == this.precision) {, +                GeoHashUtils.addNeighbors(geoHash, locations);, +            } else if (queryContext.neighbours.isEmpty() == false) {, +                for (Integer neighbourPrecision : queryContext.neighbours) {, +                    if (neighbourPrecision < geoHash.length()) {, +                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision);, +                        locations.add(truncatedGeoHash);, +                        GeoHashUtils.addNeighbors(truncatedGeoHash, locations);, +                    }, +, +                }, +            }, +            for (String location : locations) {, +                queryContextList.add(new QueryContext(location, queryContext.boost, location.length() < this.precision));, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/context/GeoContextMapping.java, +        for (GeoQueryContext queryContext : queryContexts) {, +            int minPrecision = this.precision;, +            if (queryContext.precision != -1) {, +                minPrecision = Math.min(minPrecision, queryContext.precision);, +            GeoPoint point = queryContext.geoPoint;, +            final Collection<String> locations = new HashSet<>();, +            String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision);, +            locations.add(geoHash);, +            if (queryContext.neighbours.isEmpty() && geoHash.length() == this.precision) {, +                GeoHashUtils.addNeighbors(geoHash, locations);, +            } else if (queryContext.neighbours.isEmpty() == false) {, +                for (Integer neighbourPrecision : queryContext.neighbours) {, +                    if (neighbourPrecision < geoHash.length()) {, +                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision);, +                        locations.add(truncatedGeoHash);, +                        GeoHashUtils.addNeighbors(truncatedGeoHash, locations);, +                    }, +, +                }, +            }, +            for (String location : locations) {, +                queryContextList.add(new QueryContext(location, queryContext.boost, location.length() < this.precision));, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/context/GeoQueryContext.java, +import java.util.ArrayList;, +import java.util.Collections;, +    public GeoPoint geoPoint;, +    public int precision = -1;, +    public List<Integer> neighbours = new ArrayList<>(0);, +        this(geoHash, boost, -1);, +    public GeoQueryContext(CharSequence geoHash, int boost, int precision, Integer... neighbours) {, +        this(GeoPoint.fromGeohash(geoHash.toString()), boost, precision, neighbours);, +    public GeoQueryContext(GeoPoint geoPoint, int boost, int precision, Integer... neighbours) {, +        this.geoPoint = geoPoint;, +        Collections.addAll(this.neighbours, neighbours);, +        this.neighbours = neighbours;, +    void setGeoPoint(GeoPoint geoPoint) {, +        this.geoPoint = geoPoint;, +        if (geoPoint == null) {, +                geoPoint = new GeoPoint(lat, lon);, +        GEO_CONTEXT_PARSER.declareField((parser, geoQueryContext, geoContextMapping) -> geoQueryContext.setGeoPoint(GeoUtils.parseGeoPoint(parser)), new ParseField("context"), ObjectParser.ValueType.OBJECT);, +            queryContext.setGeoPoint(GeoPoint.fromGeohash(parser.text()));, +        builder.field("lat", geoPoint.getLat());, +        builder.field("lon", geoPoint.getLon());, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/context/GeoContextMapping.java, +        for (GeoQueryContext queryContext : queryContexts) {, +            int minPrecision = this.precision;, +            if (queryContext.precision != -1) {, +                minPrecision = Math.min(minPrecision, queryContext.precision);, +            GeoPoint point = queryContext.geoPoint;, +            final Collection<String> locations = new HashSet<>();, +            String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision);, +            locations.add(geoHash);, +            if (queryContext.neighbours.isEmpty() && geoHash.length() == this.precision) {, +                GeoHashUtils.addNeighbors(geoHash, locations);, +            } else if (queryContext.neighbours.isEmpty() == false) {, +                for (Integer neighbourPrecision : queryContext.neighbours) {, +                    if (neighbourPrecision < geoHash.length()) {, +                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision);, +                        locations.add(truncatedGeoHash);, +                        GeoHashUtils.addNeighbors(truncatedGeoHash, locations);, +                    }, +, +                }, +            }, +            for (String location : locations) {, +                queryContextList.add(new QueryContext(location, queryContext.boost, location.length() < this.precision));, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/context/GeoQueryContext.java, +import java.util.ArrayList;, +import java.util.Collections;, +    public GeoPoint geoPoint;, +    public int precision = -1;, +    public List<Integer> neighbours = new ArrayList<>(0);, +        this(geoHash, boost, -1);, +    public GeoQueryContext(CharSequence geoHash, int boost, int precision, Integer... neighbours) {, +        this(GeoPoint.fromGeohash(geoHash.toString()), boost, precision, neighbours);, +    public GeoQueryContext(GeoPoint geoPoint, int boost, int precision, Integer... neighbours) {]