[+++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +++ b/docs/reference/search/request/sort.asciidoc, +field name for `_score` to sort by score, and `_doc` to sort by index order., +NOTE: `_doc` has no real use-case besides being the most efficient sort order., +So if you don't care about the order in which documents are returned, then you, +should sort by `_doc`. This especially helps when <<search-request-scroll,scrolling>>., +, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +++ b/docs/reference/search/request/sort.asciidoc, +field name for `_score` to sort by score, and `_doc` to sort by index order., +NOTE: `_doc` has no real use-case besides being the most efficient sort order., +So if you don't care about the order in which documents are returned, then you, +should sort by `_doc`. This especially helps when <<search-request-scroll,scrolling>>., +, +++ b/qa/vagrant/src/test/resources/packaging/scripts/20_tar_package.bats, +    skip_not_tar_gz, +    # Cleans everything for the 1st execution, +    clean_before_test, +    rm -rf "/tmp/elasticsearch", +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +++ b/docs/reference/search/request/sort.asciidoc, +field name for `_score` to sort by score, and `_doc` to sort by index order., +NOTE: `_doc` has no real use-case besides being the most efficient sort order., +So if you don't care about the order in which documents are returned, then you, +should sort by `_doc`. This especially helps when <<search-request-scroll,scrolling>>., +, +++ b/qa/vagrant/src/test/resources/packaging/scripts/20_tar_package.bats, +    skip_not_tar_gz, +    # Cleans everything for the 1st execution, +    clean_before_test, +    rm -rf "/tmp/elasticsearch", +++ b/qa/vagrant/src/test/resources/packaging/scripts/packaging_test_utils.bash, +    tar -xzvf elasticsearch*.tar.gz -C "$eshome", +    find "$eshome" -depth -type d -name 'elasticsearch*' -exec mv {} "$eshome/elasticsearch" \;, +            addgroup --system "elasticsearch", +            groupadd -r "elasticsearch", +            adduser --quiet --system --no-create-home --ingroup "elasticsearch" --disabled-password --shell /bin/false "elasticsearch", +            useradd --system -M --gid "elasticsearch" --shell /sbin/nologin --comment "elasticsearch user" "elasticsearch", +    chown -R elasticsearch:elasticsearch "$eshome/elasticsearch", +        # su and the Elasticsearch init script work together to break bats., +        # sudo isolates bats enough from the init script so everything continues, +        # to tick along, +        sudo -u elasticsearch /tmp/elasticsearch/bin/elasticsearch -d \, +            -p /tmp/elasticsearch/elasticsearch.pid, +        echo "Looking for elasticsearch pid....", +        ps $pid, +        kill -SIGTERM $pid, +    local desired_status="green", +    echo "Making sure elasticsearch is up...", +    wget -O - --retry-connrefused --waitretry=1 --timeout=60 http://localhost:9200 || {, +          echo "Looks like elasticsearch never started. Here is its log:", +          if [ -r "/tmp/elasticsearch/elasticsearch.pid" ]; then, +              cat /tmp/elasticsearch/log/elasticsearch.log, +          else, +              if [ -e '/var/log/elasticsearch/elasticsearch.log' ]; then, +                  cat /var/log/elasticsearch/elasticsearch.log, +              else, +                  echo "The elasticsearch log doesn't exist. Maybe /vag/log/messages has something:", +                  tail -n20 /var/log/messages, +          fi, +          false, +    }, +, +    echo "Tring to connect to elasticsearch and wait for expected status...", +    curl -sS "http://localhost:9200/_cluster/health?wait_for_status=$desired_status&timeout=60s&pretty", +    if [ $? -eq 0 ]; then, +        echo "Connected", +    else, +        echo "Unable to connect to Elastisearch", +        false, +    fi, +, +    echo "Checking that the cluster health matches the waited for status...", +    run curl -sS -XGET 'http://localhost:9200/_cat/health?h=status&v=false', +    if [ "$status" -ne 0 ]; then, +        echo "error when checking cluster health. code=$status output=", +        echo $output, +        false, +    fi, +    echo $output | grep $desired_status || {, +        echo "unexpected status:  '$output' wanted '$desired_status'", +        false, +    }, +    # TODO this assertion is the same the one made when waiting for, +    # elasticsearch to start, +    curl -s -XPOST 'http://localhost:9200/library/book/1?refresh=true&pretty' -d '{, +      "title": "Elasticsearch - The Definitive Guide", +    }', +    curl -s -XGET 'http://localhost:9200/_cat/count?h=count&v=false&pretty' |, +      grep -w "1", +    curl -s -XDELETE 'http://localhost:9200/_all']