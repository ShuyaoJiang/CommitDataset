[+++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +|`percent_terms_to_match` |From the generated query, the percentage of terms, +that must match (float value between 0 and 1). Defaults to `0.3` (30 percent)., +++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +|`percent_terms_to_match` |From the generated query, the percentage of terms, +that must match (float value between 0 and 1). Defaults to `0.3` (30 percent)., +++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +            Query mltQuery = mlt.like(this.likeFields);, +            setMinimumShouldMatch((BooleanQuery) mltQuery, percentTermsToMatch);, +            bq.add(mltQuery, BooleanClause.Occur.SHOULD);, +            Query mltQuery = mlt.like(moreLikeFields[0], readers);, +            setMinimumShouldMatch((BooleanQuery) mltQuery, percentTermsToMatch);, +            bq.add(mltQuery, BooleanClause.Occur.SHOULD);, +, +    private static void setMinimumShouldMatch(BooleanQuery bq, float percentTermsToMatch) {, +        BooleanClause[] clauses = bq.getClauses();, +        bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));, +    }, +++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +|`percent_terms_to_match` |From the generated query, the percentage of terms, +that must match (float value between 0 and 1). Defaults to `0.3` (30 percent)., +++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +            Query mltQuery = mlt.like(this.likeFields);, +            setMinimumShouldMatch((BooleanQuery) mltQuery, percentTermsToMatch);, +            bq.add(mltQuery, BooleanClause.Occur.SHOULD);, +            Query mltQuery = mlt.like(moreLikeFields[0], readers);, +            setMinimumShouldMatch((BooleanQuery) mltQuery, percentTermsToMatch);, +            bq.add(mltQuery, BooleanClause.Occur.SHOULD);, +, +    private static void setMinimumShouldMatch(BooleanQuery bq, float percentTermsToMatch) {, +        BooleanClause[] clauses = bq.getClauses();, +        bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java, +        // term selection is per field, then appended to a single boolean query, +            addToQuery(createQueue(termFreqMap, fieldName), bq);, +        addToQuery(q, query);, +        return query;, +    }, +, +    /**, +     * Add to an existing boolean query the More Like This query from this PriorityQueue, +     */, +    private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery query) {, +        return createQueue(words, this.fieldNames);, +    }, +, +    /**, +     * Create a PriorityQueue from a word->tf map., +     *, +     * @param words a map of words keyed on the word(String) with Int objects as the values., +     * @param fieldNames an array of field names to override defaults., +     */, +    private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException {, +++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +|`percent_terms_to_match` |From the generated query, the percentage of terms, +that must match (float value between 0 and 1). Defaults to `0.3` (30 percent)., +++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +            Query mltQuery = mlt.like(this.likeFields);, +            setMinimumShouldMatch((BooleanQuery) mltQuery, percentTermsToMatch);, +            bq.add(mltQuery, BooleanClause.Occur.SHOULD);, +            Query mltQuery = mlt.like(moreLikeFields[0], readers);, +            setMinimumShouldMatch((BooleanQuery) mltQuery, percentTermsToMatch);, +            bq.add(mltQuery, BooleanClause.Occur.SHOULD);, +, +    private static void setMinimumShouldMatch(BooleanQuery bq, float percentTermsToMatch) {, +        BooleanClause[] clauses = bq.getClauses();, +        bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java, +        // term selection is per field, then appended to a single boolean query, +            addToQuery(createQueue(termFreqMap, fieldName), bq);, +        addToQuery(q, query);, +        return query;, +    }, +, +    /**, +     * Add to an existing boolean query the More Like This query from this PriorityQueue, +     */, +    private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery query) {, +        return createQueue(words, this.fieldNames);, +    }, +, +    /**, +     * Create a PriorityQueue from a word->tf map., +     *, +     * @param words a map of words keyed on the word(String) with Int objects as the values., +     * @param fieldNames an array of field names to override defaults., +     */, +    private PriorityQueue<ScoreTerm> createQueue(Map<String, Int> words, String... fieldNames) throws IOException {, +++ b/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java, +    @Test, +    public void testMLTPercentTermsToMatch() throws Exception {, +        // setup for mocking fetching items, +        MoreLikeThisQueryParser parser = (MoreLikeThisQueryParser) queryParser.queryParser("more_like_this");, +        parser.setFetchService(new MockMoreLikeThisFetchService());, +, +        // parsing the ES query, +        IndexQueryParserService queryParser = queryParser();, +        String query = copyToStringFromClasspath("/org/elasticsearch/index/query/mlt-items.json");]