[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null || System.getProperty("eclipse.launcher") != null) {, +                    // hack until gradle supports java 9's new "--release" arg, +                    options.compilerArgs << '--release' << '8', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null || System.getProperty("eclipse.launcher") != null) {, +                    // hack until gradle supports java 9's new "--release" arg, +                    options.compilerArgs << '--release' << '8', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.file.FileCollection, +     * The seed nodes port file. In the case the cluster has more than one node we use a seed node, +     * to form the cluster. The file is null if there is no seed node yet available., +     * Note: this can only be null if the cluster has only one node or if the first node is not yet, +     * configured. All nodes but the first node should see a non null value., +    File seedNodePortsFile, +, +    /** Returns an address and port suitable for a uri to connect to this clusters seed node over transport protocol*/, +    String seedNodeTransportUri() {, +        if (seedNodePortsFile != null) {, +            return seedNodePortsFile.readLines("UTF-8").get(0), +        }, +        return null;, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null || System.getProperty("eclipse.launcher") != null) {, +                    // hack until gradle supports java 9's new "--release" arg, +                    options.compilerArgs << '--release' << '8', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.file.FileCollection, +     * The seed nodes port file. In the case the cluster has more than one node we use a seed node, +     * to form the cluster. The file is null if there is no seed node yet available., +     * Note: this can only be null if the cluster has only one node or if the first node is not yet, +     * configured. All nodes but the first node should see a non null value., +    File seedNodePortsFile, +, +    /** Returns an address and port suitable for a uri to connect to this clusters seed node over transport protocol*/, +    String seedNodeTransportUri() {, +        if (seedNodePortsFile != null) {, +            return seedNodePortsFile.readLines("UTF-8").get(0), +        }, +        return null;, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    static NodeInfo setup(Project project, Task task, ClusterConfiguration config) {, +            if (i == 0) {, +                if (config.seedNodePortsFile != null) {, +                    // we might allow this in the future to be set but for now we are the only authority to set this!, +                    throw new GradleException("seedNodePortsFile has a non-null value but first node has not been intialized"), +                }, +                config.seedNodePortsFile = node.transportPortsFile;, +            }, +            startTasks.add(configureNode(project, task, cleanup, node, distro)), +        return nodes[0], +    static Task configureNode(Project project, Task task, Object dependsOn, NodeInfo node, Configuration configuration) {, +        setup = configureWriteConfigTask(taskName(task, node, 'configure'), project, setup, node), +    static Task configureWriteConfigTask(String name, Project project, Task setup, NodeInfo node) {, +            if (node.nodeNum > 0) { // multi-node cluster case, we have to wait for the seed node to startup, +                ant.waitfor(maxwait: '20', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond') {, +                    resourceexists {, +                        file(file: node.config.seedNodePortsFile.toString()), +                    }, +                }, +                // the seed node is enough to form the cluster - all subsequent nodes will get the seed node as a unicast, +                // host and join the cluster via that., +                esConfig['discovery.zen.ping.unicast.hosts'] = "\"${node.config.seedNodeTransportUri()}\"", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null || System.getProperty("eclipse.launcher") != null) {, +                    // hack until gradle supports java 9's new "--release" arg, +                    options.compilerArgs << '--release' << '8', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.file.FileCollection, +     * The seed nodes port file. In the case the cluster has more than one node we use a seed node, +     * to form the cluster. The file is null if there is no seed node yet available., +     * Note: this can only be null if the cluster has only one node or if the first node is not yet, +     * configured. All nodes but the first node should see a non null value., +    File seedNodePortsFile, +, +    /** Returns an address and port suitable for a uri to connect to this clusters seed node over transport protocol*/, +    String seedNodeTransportUri() {, +        if (seedNodePortsFile != null) {, +            return seedNodePortsFile.readLines("UTF-8").get(0), +        }, +        return null;, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    static NodeInfo setup(Project project, Task task, ClusterConfiguration config) {, +            if (i == 0) {, +                if (config.seedNodePortsFile != null) {, +                    // we might allow this in the future to be set but for now we are the only authority to set this!, +                    throw new GradleException("seedNodePortsFile has a non-null value but first node has not been intialized"), +                }, +                config.seedNodePortsFile = node.transportPortsFile;, +            }, +            startTasks.add(configureNode(project, task, cleanup, node, distro)), +        return nodes[0], +    static Task configureNode(Project project, Task task, Object dependsOn, NodeInfo node, Configuration configuration) {, +        setup = configureWriteConfigTask(taskName(task, node, 'configure'), project, setup, node)]