[+++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +import com.google.common.collect.ImmutableList;, +                            if (value instanceof List) {, +                                fields.put(field, new GetField(field, (List) value));, +                            } else {, +                                fields.put(field, new GetField(field, ImmutableList.of(value)));, +                    if (value instanceof List) {, +                        fields.put(field, new GetField(field, (List) value));, +                    } else {, +                        fields.put(field, new GetField(field, ImmutableList.of(value)));, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +import com.google.common.collect.ImmutableList;, +                            if (value instanceof List) {, +                                fields.put(field, new GetField(field, (List) value));, +                            } else {, +                                fields.put(field, new GetField(field, ImmutableList.of(value)));, +                    if (value instanceof List) {, +                        fields.put(field, new GetField(field, (List) value));, +                    } else {, +                        fields.put(field, new GetField(field, ImmutableList.of(value)));, +++ b/src/test/java/org/elasticsearch/test/integration/get/GetActionTests.java, +        assertThat(getResponse.getField("strs").getValues(), contains((Object) "A", "B", "C"));, +        assertThat(getResponse.getField("ints").getValues(), contains((Object) 1L, 2L, 3L, 4L));, +        assertThat(getResponse.getField("strs").getValues(), contains((Object) "A", "B", "C"));, +        assertThat(getResponse.getField("ints").getValues(), contains((Object) 1, 2, 3, 4));, +        assertThat(getResponse.getField("strs").getValues(), contains((Object) "A", "B", "C"));, +        assertThat(getResponse.getField("ints").getValues(), contains((Object) 1L, 2L, 3L, 4L));, +        assertThat(response.getFields().get("field").getValues().size(), equalTo(2));, +        assertThat(response.getFields().get("field").getValues().get(0).toString(), equalTo("1"));, +        assertThat(response.getFields().get("field").getValues().get(1).toString(), equalTo("2"));, +        assertThat(response.getFields().get("field").getValues().size(), equalTo(2));, +        assertThat(response.getFields().get("field").getValues().get(0).toString(), equalTo("1"));, +        assertThat(response.getFields().get("field").getValues().get(1).toString(), equalTo("2"));, +        assertThat(response.getFields().get("field").getValues().size(), equalTo(2));, +        assertThat(response.getFields().get("field").getValues().get(0).toString(), equalTo("1"));, +        assertThat(response.getFields().get("field").getValues().get(1).toString(), equalTo("2"));, +        assertThat(response.getFields().get("field").getValues().size(), equalTo(2));, +        assertThat(response.getFields().get("field").getValues().get(0).toString(), equalTo("1"));, +        assertThat(response.getFields().get("field").getValues().get(1).toString(), equalTo("2"));]