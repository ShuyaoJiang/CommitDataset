[+++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +        if (Constants.WINDOWS) {, +            // Load average is always -1 on Windows platforms, +            assertThat(stats.getLoadAverage(), equalTo((double) -1));, +        } else {, +            // Load average can be negative if not available or not computed yet, otherwise it should be >= 0, +            assertThat(stats.getLoadAverage(), anyOf(lessThan((double) 0), greaterThanOrEqualTo((double) 0)));, +        }, +        assertThat(stats.getMem().getTotal().bytes(), greaterThan(0L));, +        assertThat(stats.getMem().getFree().bytes(), greaterThan(0L));, +        assertThat(stats.getMem().getUsed().bytes(), greaterThan(0L));, +        assertNotNull(stats.getSwap().getTotal());, +, +        long total = stats.getSwap().getTotal().bytes();, +        if (total > 0) {, +            assertThat(stats.getSwap().getTotal().bytes(), greaterThan(0L));, +            assertThat(stats.getSwap().getFree().bytes(), greaterThan(0L));, +            assertThat(stats.getSwap().getUsed().bytes(), greaterThanOrEqualTo(0L));, +        } else {, +            // On platforms with no swap, +            assertThat(stats.getSwap().getTotal().bytes(), equalTo(0L));, +            assertThat(stats.getSwap().getFree().bytes(), equalTo(0L));, +            assertThat(stats.getSwap().getUsed().bytes(), equalTo(0L));, +        }, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +        if (Constants.WINDOWS) {, +            // Load average is always -1 on Windows platforms, +            assertThat(stats.getLoadAverage(), equalTo((double) -1));, +        } else {, +            // Load average can be negative if not available or not computed yet, otherwise it should be >= 0, +            assertThat(stats.getLoadAverage(), anyOf(lessThan((double) 0), greaterThanOrEqualTo((double) 0)));, +        }, +        assertThat(stats.getMem().getTotal().bytes(), greaterThan(0L));, +        assertThat(stats.getMem().getFree().bytes(), greaterThan(0L));, +        assertThat(stats.getMem().getUsed().bytes(), greaterThan(0L));, +        assertNotNull(stats.getSwap().getTotal());, +, +        long total = stats.getSwap().getTotal().bytes();, +        if (total > 0) {, +            assertThat(stats.getSwap().getTotal().bytes(), greaterThan(0L));, +            assertThat(stats.getSwap().getFree().bytes(), greaterThan(0L));, +            assertThat(stats.getSwap().getUsed().bytes(), greaterThanOrEqualTo(0L));, +        } else {, +            // On platforms with no swap, +            assertThat(stats.getSwap().getTotal().bytes(), equalTo(0L));, +            assertThat(stats.getSwap().getFree().bytes(), equalTo(0L));, +            assertThat(stats.getSwap().getUsed().bytes(), equalTo(0L));, +        }, +++ b/core/src/test/java/org/elasticsearch/monitor/process/ProcessProbeTests.java, +import org.apache.lucene.util.Constants;, +        assertThat(stats.getTimestamp(), greaterThan(0L));, +, +        if (Constants.WINDOWS) {, +            // Open/Max files descriptors are not supported on Windows platforms, +            assertThat(stats.getOpenFileDescriptors(), equalTo(-1L));, +            assertThat(stats.getMaxFileDescriptors(), equalTo(-1L));, +        } else {, +            assertThat(stats.getOpenFileDescriptors(), greaterThan(0L));, +            assertThat(stats.getMaxFileDescriptors(), greaterThan(0L));, +        }, +, +        // CPU percent can be negative if the system recent cpu usage is not available, +        assertThat(cpu.getPercent(), anyOf(lessThan((short) 0), allOf(greaterThanOrEqualTo((short) 0), lessThanOrEqualTo((short) 100))));, +, +        // CPU time can return -1 if the the platform does not support this operation, let's see which platforms fail, +        assertThat(cpu.total, greaterThan(0L));, +        // Commited total virtual memory can return -1 if not supported, let's see which platforms fail, +        assertThat(mem.totalVirtual, greaterThan(0L));, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +        if (Constants.WINDOWS) {, +            // Load average is always -1 on Windows platforms, +            assertThat(stats.getLoadAverage(), equalTo((double) -1));, +        } else {, +            // Load average can be negative if not available or not computed yet, otherwise it should be >= 0, +            assertThat(stats.getLoadAverage(), anyOf(lessThan((double) 0), greaterThanOrEqualTo((double) 0)));, +        }, +        assertThat(stats.getMem().getTotal().bytes(), greaterThan(0L));, +        assertThat(stats.getMem().getFree().bytes(), greaterThan(0L));, +        assertThat(stats.getMem().getUsed().bytes(), greaterThan(0L));, +        assertNotNull(stats.getSwap().getTotal());, +, +        long total = stats.getSwap().getTotal().bytes();, +        if (total > 0) {, +            assertThat(stats.getSwap().getTotal().bytes(), greaterThan(0L));, +            assertThat(stats.getSwap().getFree().bytes(), greaterThan(0L));, +            assertThat(stats.getSwap().getUsed().bytes(), greaterThanOrEqualTo(0L));, +        } else {, +            // On platforms with no swap, +            assertThat(stats.getSwap().getTotal().bytes(), equalTo(0L));, +            assertThat(stats.getSwap().getFree().bytes(), equalTo(0L));, +            assertThat(stats.getSwap().getUsed().bytes(), equalTo(0L));, +        }, +++ b/core/src/test/java/org/elasticsearch/monitor/process/ProcessProbeTests.java, +import org.apache.lucene.util.Constants;, +        assertThat(stats.getTimestamp(), greaterThan(0L));, +, +        if (Constants.WINDOWS) {, +            // Open/Max files descriptors are not supported on Windows platforms, +            assertThat(stats.getOpenFileDescriptors(), equalTo(-1L));, +            assertThat(stats.getMaxFileDescriptors(), equalTo(-1L));]