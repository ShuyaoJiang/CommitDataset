[+++ b/docs/reference/mapping/types/geo-shape.asciidoc, +bounding rectangle in the format [[minLon, maxLat],[maxLon, minLat]]:, +++ b/docs/reference/mapping/types/geo-shape.asciidoc, +bounding rectangle in the format [[minLon, maxLat],[maxLon, minLat]]:, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   An `envelope` crossing the dateline in a `geo_shape `query is now processed, +    correctly when specified using REST API instead of having its left and, +    right corners flipped., +, +++ b/docs/reference/mapping/types/geo-shape.asciidoc, +bounding rectangle in the format [[minLon, maxLat],[maxLon, minLat]]:, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   An `envelope` crossing the dateline in a `geo_shape `query is now processed, +    correctly when specified using REST API instead of having its left and, +    right corners flipped., +, +++ b/server/src/main/java/org/elasticsearch/common/geo/GeoShapeType.java, +++ b/docs/reference/mapping/types/geo-shape.asciidoc, +bounding rectangle in the format [[minLon, maxLat],[maxLon, minLat]]:, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   An `envelope` crossing the dateline in a `geo_shape `query is now processed, +    correctly when specified using REST API instead of having its left and, +    right corners flipped., +, +++ b/server/src/main/java/org/elasticsearch/common/geo/GeoShapeType.java, +++ b/server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java, +        // test #2: envelope that spans dateline, +        expected = SPATIAL_CONTEXT.makeRectangle(50, -50, -30, 30);, +++ b/docs/reference/mapping/types/geo-shape.asciidoc, +bounding rectangle in the format [[minLon, maxLat],[maxLon, minLat]]:, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   An `envelope` crossing the dateline in a `geo_shape `query is now processed, +    correctly when specified using REST API instead of having its left and, +    right corners flipped., +, +++ b/server/src/main/java/org/elasticsearch/common/geo/GeoShapeType.java, +++ b/server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java, +        // test #2: envelope that spans dateline, +        expected = SPATIAL_CONTEXT.makeRectangle(50, -50, -30, 30);, +++ b/server/src/test/java/org/elasticsearch/search/geo/GeoShapeQueryTests.java, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.common.CheckedSupplier;, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    // Test for issue #34418, +    public void testEnvelopeSpanningDateline() throws IOException {, +        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject(), +            .startObject("doc"), +                .startObject("properties"), +                    .startObject("geo").field("type", "geo_shape").endObject(), +                .endObject(), +            .endObject(), +        .endObject();, +, +        createIndex("test", Settings.builder().put("index.number_of_shards", 1).build(), "doc", mapping);, +, +        String doc1 = "{\"geo\": {\r\n" + "\"coordinates\": [\r\n" + "-33.918711,\r\n" + "18.847685\r\n" + "],\r\n" +, +                "\"type\": \"Point\"\r\n" + "}}";, +        client().index(new IndexRequest("test", "doc", "1").source(doc1, XContentType.JSON).setRefreshPolicy(IMMEDIATE)).actionGet();, +, +        String doc2 = "{\"geo\": {\r\n" + "\"coordinates\": [\r\n" + "-49.0,\r\n" + "18.847685\r\n" + "],\r\n" +, +            "\"type\": \"Point\"\r\n" + "}}";, +        client().index(new IndexRequest("test", "doc", "2").source(doc2, XContentType.JSON).setRefreshPolicy(IMMEDIATE)).actionGet();, +, +        String doc3 = "{\"geo\": {\r\n" + "\"coordinates\": [\r\n" + "49.0,\r\n" + "18.847685\r\n" + "],\r\n" +, +            "\"type\": \"Point\"\r\n" + "}}";, +        client().index(new IndexRequest("test", "doc", "3").source(doc3, XContentType.JSON).setRefreshPolicy(IMMEDIATE)).actionGet();, +, +        @SuppressWarnings("unchecked") CheckedSupplier<GeoShapeQueryBuilder, IOException> querySupplier = randomFrom(, +            () -> QueryBuilders.geoShapeQuery(, +                "geo",, +                new EnvelopeBuilder(new Coordinate(-21, 44), new Coordinate(-39, 9)), +            ).relation(ShapeRelation.WITHIN),, +            () -> {, +                XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                    .startObject("geo"), +                    .startObject("shape"), +                    .field("type", "envelope"), +                    .startArray("coordinates"), +                    .startArray().value(-21).value(44).endArray(), +                    .startArray().value(-39).value(9).endArray(), +                    .endArray(), +                    .endObject(), +                    .field("relation", "within"), +                    .endObject(), +                    .endObject();, +                try (XContentParser parser = createParser(builder)){, +                    parser.nextToken();, +                    return GeoShapeQueryBuilder.fromXContent(parser);, +                }, +            },, +            () -> {, +                XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                    .startObject("geo"), +                    .field("shape", "BBOX (-21, -39, 44, 9)"), +                    .field("relation", "within"), +                    .endObject(), +                    .endObject();, +                try (XContentParser parser = createParser(builder)){, +                    parser.nextToken();]