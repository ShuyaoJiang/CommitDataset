[+++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/DebugSqlSpec.java, +public class DebugSqlSpec extends SqlSpecIT {, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/DebugSqlSpec.java, +public class DebugSqlSpec extends SqlSpecIT {, +++ b/sql/jdbc/src/test/resources/agg.sql-spec, +aggCountOnColumnAndHavingBetween, +SELECT gender g, COUNT(gender) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 10 AND 70;, +aggCountOnColumnAndHavingBetweenWithLimit, +SELECT gender g, COUNT(gender) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 10 AND 70 LIMIT 1;, +, +aggMinWithMultipleHavingBetween, +SELECT gender g, MIN(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999;, +aggMinWithMultipleHavingBetween, +SELECT gender g, MIN(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999 LIMIT 1;, +aggMaxWithMultipleHavingBetween, +SELECT gender g, MAX(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999;, +aggMaxWithMultipleHavingBetweenWithLimit, +SELECT gender g, MAX(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999 LIMIT 1;, +aggSumWithMultipleHavingBetween, +SELECT gender g, CAST(SUM(emp_no) AS INT) s FROM "test_emp" GROUP BY g HAVING s BETWEEN 10 AND 10000000;, +aggSumWithMultipleHavingBetweenWithLimit, +SELECT gender g, CAST(SUM(emp_no) AS INT) s FROM "test_emp" GROUP BY g HAVING s BETWEEN 10 AND 10000000 LIMIT 1;, +aggAvgWithMultipleHavingBetween, +SELECT gender g, CAST(AVG(emp_no) AS FLOAT) a FROM "test_emp" GROUP BY g HAVING a BETWEEN 10 AND 10000000;, +aggAvgWithMultipleHavingBetweenWithLimit, +SELECT gender g, CAST(AVG(emp_no) AS FLOAT) a FROM "test_emp" GROUP BY g HAVING a BETWEEN 10 AND 10000000 LIMIT 1;, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/DebugSqlSpec.java, +public class DebugSqlSpec extends SqlSpecIT {, +++ b/sql/jdbc/src/test/resources/agg.sql-spec, +aggCountOnColumnAndHavingBetween, +SELECT gender g, COUNT(gender) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 10 AND 70;, +aggCountOnColumnAndHavingBetweenWithLimit, +SELECT gender g, COUNT(gender) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 10 AND 70 LIMIT 1;, +, +aggMinWithMultipleHavingBetween, +SELECT gender g, MIN(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999;, +aggMinWithMultipleHavingBetween, +SELECT gender g, MIN(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999 LIMIT 1;, +aggMaxWithMultipleHavingBetween, +SELECT gender g, MAX(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999;, +aggMaxWithMultipleHavingBetweenWithLimit, +SELECT gender g, MAX(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999 LIMIT 1;, +aggSumWithMultipleHavingBetween, +SELECT gender g, CAST(SUM(emp_no) AS INT) s FROM "test_emp" GROUP BY g HAVING s BETWEEN 10 AND 10000000;, +aggSumWithMultipleHavingBetweenWithLimit, +SELECT gender g, CAST(SUM(emp_no) AS INT) s FROM "test_emp" GROUP BY g HAVING s BETWEEN 10 AND 10000000 LIMIT 1;, +aggAvgWithMultipleHavingBetween, +SELECT gender g, CAST(AVG(emp_no) AS FLOAT) a FROM "test_emp" GROUP BY g HAVING a BETWEEN 10 AND 10000000;, +aggAvgWithMultipleHavingBetweenWithLimit, +SELECT gender g, CAST(AVG(emp_no) AS FLOAT) a FROM "test_emp" GROUP BY g HAVING a BETWEEN 10 AND 10000000 LIMIT 1;, +++ b/sql/jdbc/src/test/resources/filter.sql-spec, +whereFieldWithNegatedLikeMatch, +SELECT last_name l FROM "test_emp" WHERE emp_no < 10003 AND last_name NOT LIKE 'K%';, +, +// TODO: (NOT) RLIKE, <>, <=>, !=, +whereBetween, +SELECT last_name l FROM "test_emp" WHERE emp_no BETWEEN 9990 AND 10003 ORDER BY emp_no;, +whereNotBetween, +SELECT last_name l FROM "test_emp" WHERE emp_no NOT BETWEEN 10010 AND 10020 ORDER BY emp_no LIMIT 5;, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/DebugSqlSpec.java, +public class DebugSqlSpec extends SqlSpecIT {, +++ b/sql/jdbc/src/test/resources/agg.sql-spec, +aggCountOnColumnAndHavingBetween, +SELECT gender g, COUNT(gender) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 10 AND 70;, +aggCountOnColumnAndHavingBetweenWithLimit, +SELECT gender g, COUNT(gender) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 10 AND 70 LIMIT 1;, +, +aggMinWithMultipleHavingBetween, +SELECT gender g, MIN(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999;, +aggMinWithMultipleHavingBetween, +SELECT gender g, MIN(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999 LIMIT 1;, +aggMaxWithMultipleHavingBetween, +SELECT gender g, MAX(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999;, +aggMaxWithMultipleHavingBetweenWithLimit, +SELECT gender g, MAX(emp_no) m FROM "test_emp" GROUP BY g HAVING m BETWEEN 10 AND 99999 LIMIT 1;, +aggSumWithMultipleHavingBetween, +SELECT gender g, CAST(SUM(emp_no) AS INT) s FROM "test_emp" GROUP BY g HAVING s BETWEEN 10 AND 10000000;, +aggSumWithMultipleHavingBetweenWithLimit, +SELECT gender g, CAST(SUM(emp_no) AS INT) s FROM "test_emp" GROUP BY g HAVING s BETWEEN 10 AND 10000000 LIMIT 1;, +aggAvgWithMultipleHavingBetween, +SELECT gender g, CAST(AVG(emp_no) AS FLOAT) a FROM "test_emp" GROUP BY g HAVING a BETWEEN 10 AND 10000000;, +aggAvgWithMultipleHavingBetweenWithLimit, +SELECT gender g, CAST(AVG(emp_no) AS FLOAT) a FROM "test_emp" GROUP BY g HAVING a BETWEEN 10 AND 10000000 LIMIT 1;, +++ b/sql/jdbc/src/test/resources/filter.sql-spec, +whereFieldWithNegatedLikeMatch, +SELECT last_name l FROM "test_emp" WHERE emp_no < 10003 AND last_name NOT LIKE 'K%';, +, +// TODO: (NOT) RLIKE, <>, <=>, !=, +whereBetween, +SELECT last_name l FROM "test_emp" WHERE emp_no BETWEEN 9990 AND 10003 ORDER BY emp_no;, +whereNotBetween, +SELECT last_name l FROM "test_emp" WHERE emp_no NOT BETWEEN 10010 AND 10020 ORDER BY emp_no LIMIT 5;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/Predicates.java, +import org.elasticsearch.xpack.sql.expression.Expression;, +import org.elasticsearch.xpack.sql.plan.logical.LogicalPlan;, +, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/DebugSqlSpec.java, +public class DebugSqlSpec extends SqlSpecIT {, +++ b/sql/jdbc/src/test/resources/agg.sql-spec, +aggCountOnColumnAndHavingBetween]