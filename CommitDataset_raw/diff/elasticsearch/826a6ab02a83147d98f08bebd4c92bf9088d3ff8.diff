[+++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +                if (res == null) {, +                } else {, +                    Bits bits = clause.bits;, +                    // use the "res" to drive the iteration, +                    int lastSetDoc = res.nextSetBit(0);, +                    DocIdSetIterator it = res.iterator();, +                    for (int setDoc = it.nextDoc(); setDoc != DocIdSetIterator.NO_MORE_DOCS; setDoc = it.nextDoc()) {, +                        int diff = setDoc - lastSetDoc;, +                        if (diff > 1) {, +                            for (int unsetDoc = lastSetDoc + 1; unsetDoc < setDoc; unsetDoc++) {, +                                if (bits.get(unsetDoc)) {, +                                    res.set(unsetDoc);, +                                }, +                            }, +                        }, +                        lastSetDoc = setDoc;, +                    }, +                }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +                if (res == null) {, +                } else {, +                    Bits bits = clause.bits;, +                    // use the "res" to drive the iteration, +                    int lastSetDoc = res.nextSetBit(0);, +                    DocIdSetIterator it = res.iterator();, +                    for (int setDoc = it.nextDoc(); setDoc != DocIdSetIterator.NO_MORE_DOCS; setDoc = it.nextDoc()) {, +                        int diff = setDoc - lastSetDoc;, +                        if (diff > 1) {, +                            for (int unsetDoc = lastSetDoc + 1; unsetDoc < setDoc; unsetDoc++) {, +                                if (bits.get(unsetDoc)) {, +                                    res.set(unsetDoc);, +                                }, +                            }, +                        }, +                        lastSetDoc = setDoc;, +                    }, +                }, +++ b/src/test/java/org/elasticsearch/test/unit/common/lucene/search/XBooleanFilterTests.java, +package org.elasticsearch.test.unit.common.lucene.search;, +, +import org.apache.lucene.analysis.core.KeywordAnalyzer;, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.StringField;, +import org.apache.lucene.index.*;, +import org.apache.lucene.queries.FilterClause;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.FieldCacheTermsFilter;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.store.RAMDirectory;, +import org.apache.lucene.util.FixedBitSet;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.common.lucene.search.TermFilter;, +import org.elasticsearch.common.lucene.search.XBooleanFilter;, +import org.testng.annotations.AfterClass;, +import org.testng.annotations.BeforeClass;, +import org.testng.annotations.Test;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.apache.lucene.search.BooleanClause.Occur.*;, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.core.IsEqual.equalTo;, +, +/**, + */, +public class XBooleanFilterTests {, +, +    private Directory directory;, +    private AtomicReader reader;, +, +    @BeforeClass, +    public void setup() throws Exception {, +        char[][] documentMatrix = new char[][] {, +                {'a', 'b', 'c', 'd'},, +                {'a', 'b', 'c', 'd'},, +                {'a', 'a', 'a', 'a'}, +        };, +, +        List<Document> documents = new ArrayList<Document>(documentMatrix.length);, +        for (char[] fields : documentMatrix) {, +            Document document = new Document();, +            for (int i = 0; i < fields.length; i++) {, +                document.add(new StringField(Integer.toString(i), String.valueOf(fields[i]), Field.Store.NO));, +            }, +            documents.add(document);, +        }, +        directory = new RAMDirectory();, +        IndexWriter w = new IndexWriter(directory, new IndexWriterConfig(Lucene.VERSION, new KeywordAnalyzer()));, +        w.addDocuments(documents);, +        w.close();, +        reader = new SlowCompositeReaderWrapper(DirectoryReader.open(directory));, +    }, +, +    @AfterClass, +    public void tearDown() throws Exception {, +        reader.close();]