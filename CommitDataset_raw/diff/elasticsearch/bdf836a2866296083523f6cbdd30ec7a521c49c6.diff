[+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageService.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +    ByteSizeValue MIN_CHUNK_SIZE = new ByteSizeValue(1, ByteSizeUnit.BYTES);, +    ByteSizeValue MAX_CHUNK_SIZE = new ByteSizeValue(64, ByteSizeUnit.MB);, +, +            Setting.byteSizeSetting("repositories.azure.chunk_size", MAX_CHUNK_SIZE, MIN_CHUNK_SIZE, MAX_CHUNK_SIZE, Property.NodeScope);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageService.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +    ByteSizeValue MIN_CHUNK_SIZE = new ByteSizeValue(1, ByteSizeUnit.BYTES);, +    ByteSizeValue MAX_CHUNK_SIZE = new ByteSizeValue(64, ByteSizeUnit.MB);, +, +            Setting.byteSizeSetting("repositories.azure.chunk_size", MAX_CHUNK_SIZE, MIN_CHUNK_SIZE, MAX_CHUNK_SIZE, Property.NodeScope);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +import static org.elasticsearch.cloud.azure.storage.AzureStorageService.MAX_CHUNK_SIZE;, +import static org.elasticsearch.cloud.azure.storage.AzureStorageService.MIN_CHUNK_SIZE;, +            Setting.byteSizeSetting("chunk_size", MAX_CHUNK_SIZE, MIN_CHUNK_SIZE, MAX_CHUNK_SIZE, Property.NodeScope);, +        this.chunkSize = getValue(metadata.settings(), settings, Repository.CHUNK_SIZE_SETTING, Storage.CHUNK_SIZE_SETTING);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageService.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +    ByteSizeValue MIN_CHUNK_SIZE = new ByteSizeValue(1, ByteSizeUnit.BYTES);, +    ByteSizeValue MAX_CHUNK_SIZE = new ByteSizeValue(64, ByteSizeUnit.MB);, +, +            Setting.byteSizeSetting("repositories.azure.chunk_size", MAX_CHUNK_SIZE, MIN_CHUNK_SIZE, MAX_CHUNK_SIZE, Property.NodeScope);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +import static org.elasticsearch.cloud.azure.storage.AzureStorageService.MAX_CHUNK_SIZE;, +import static org.elasticsearch.cloud.azure.storage.AzureStorageService.MIN_CHUNK_SIZE;, +            Setting.byteSizeSetting("chunk_size", MAX_CHUNK_SIZE, MIN_CHUNK_SIZE, MAX_CHUNK_SIZE, Property.NodeScope);, +        this.chunkSize = getValue(metadata.settings(), settings, Repository.CHUNK_SIZE_SETTING, Storage.CHUNK_SIZE_SETTING);, +++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureRepositorySettingsTests.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +, +    public void testChunkSize() throws StorageException, IOException, URISyntaxException {, +        // default chunk size, +        AzureRepository azureRepository = azureRepository(Settings.EMPTY);, +        assertEquals(AzureStorageService.MAX_CHUNK_SIZE, azureRepository.chunkSize());, +, +        // chunk size in settings, +        int size = randomIntBetween(1, 64);, +        azureRepository = azureRepository(Settings.builder().put("chunk_size", size + "mb").build());, +        assertEquals(new ByteSizeValue(size, ByteSizeUnit.MB), azureRepository.chunkSize());, +, +        // zero bytes is not allowed, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->, +            azureRepository(Settings.builder().put("chunk_size", "0").build()));, +        assertEquals("Failed to parse value [0] for setting [chunk_size] must be >= 1b", e.getMessage());, +, +        // negative bytes not allowed, +        e = expectThrows(IllegalArgumentException.class, () ->, +            azureRepository(Settings.builder().put("chunk_size", "-1").build()));, +        assertEquals("Failed to parse value [-1] for setting [chunk_size] must be >= 1b", e.getMessage());, +, +        // greater than max chunk size not allowed, +        e = expectThrows(IllegalArgumentException.class, () ->, +            azureRepository(Settings.builder().put("chunk_size", "65mb").build()));, +        assertEquals("Failed to parse value [65mb] for setting [chunk_size] must be <= 64mb", e.getMessage());, +    }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageService.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +    ByteSizeValue MIN_CHUNK_SIZE = new ByteSizeValue(1, ByteSizeUnit.BYTES);, +    ByteSizeValue MAX_CHUNK_SIZE = new ByteSizeValue(64, ByteSizeUnit.MB);, +, +            Setting.byteSizeSetting("repositories.azure.chunk_size", MAX_CHUNK_SIZE, MIN_CHUNK_SIZE, MAX_CHUNK_SIZE, Property.NodeScope);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +import static org.elasticsearch.cloud.azure.storage.AzureStorageService.MAX_CHUNK_SIZE;, +import static org.elasticsearch.cloud.azure.storage.AzureStorageService.MIN_CHUNK_SIZE;, +            Setting.byteSizeSetting("chunk_size", MAX_CHUNK_SIZE, MIN_CHUNK_SIZE, MAX_CHUNK_SIZE, Property.NodeScope);, +        this.chunkSize = getValue(metadata.settings(), settings, Repository.CHUNK_SIZE_SETTING, Storage.CHUNK_SIZE_SETTING);, +++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureRepositorySettingsTests.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +, +    public void testChunkSize() throws StorageException, IOException, URISyntaxException {, +        // default chunk size, +        AzureRepository azureRepository = azureRepository(Settings.EMPTY);, +        assertEquals(AzureStorageService.MAX_CHUNK_SIZE, azureRepository.chunkSize());, +, +        // chunk size in settings, +        int size = randomIntBetween(1, 64);, +        azureRepository = azureRepository(Settings.builder().put("chunk_size", size + "mb").build());, +        assertEquals(new ByteSizeValue(size, ByteSizeUnit.MB), azureRepository.chunkSize());, +, +        // zero bytes is not allowed, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->, +            azureRepository(Settings.builder().put("chunk_size", "0").build()));, +        assertEquals("Failed to parse value [0] for setting [chunk_size] must be >= 1b", e.getMessage());, +, +        // negative bytes not allowed, +        e = expectThrows(IllegalArgumentException.class, () ->, +            azureRepository(Settings.builder().put("chunk_size", "-1").build()));, +        assertEquals("Failed to parse value [-1] for setting [chunk_size] must be >= 1b", e.getMessage());, +, +        // greater than max chunk size not allowed, +        e = expectThrows(IllegalArgumentException.class, () ->, +            azureRepository(Settings.builder().put("chunk_size", "65mb").build()));, +        assertEquals("Failed to parse value [65mb] for setting [chunk_size] must be <= 64mb", e.getMessage());, +    }, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageRepository.java, +    // package private for testing, +    static final ByteSizeValue MIN_CHUNK_SIZE = new ByteSizeValue(1, ByteSizeUnit.BYTES);]