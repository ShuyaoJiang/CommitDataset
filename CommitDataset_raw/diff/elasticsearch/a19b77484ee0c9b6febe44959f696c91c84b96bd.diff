[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginInfo.java, +        static final XContentBuilderString ISOLATION = new XContentBuilderString("isolation");, +    private boolean isolation;, +     * @param isolation   true if it's an isolated plugin, +    public PluginInfo(String name, String description, boolean site, boolean jvm, String version, boolean isolation) {, +        this.isolation = isolation;, +    /**, +     * @return Plugin isolation, +     */, +    public boolean isIsolation() {, +        return isolation;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_1_0)) {, +            this.isolation = in.readBoolean();, +        } else {, +            this.isolation = false;, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_1_0)) {, +            out.writeBoolean(isolation);, +        }, +        builder.field(Fields.ISOLATION, isolation);, +        sb.append(", isolation='").append(isolation);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginInfo.java, +        static final XContentBuilderString ISOLATION = new XContentBuilderString("isolation");, +    private boolean isolation;, +     * @param isolation   true if it's an isolated plugin, +    public PluginInfo(String name, String description, boolean site, boolean jvm, String version, boolean isolation) {, +        this.isolation = isolation;, +    /**, +     * @return Plugin isolation, +     */, +    public boolean isIsolation() {, +        return isolation;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_1_0)) {, +            this.isolation = in.readBoolean();, +        } else {, +            this.isolation = false;, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_1_0)) {, +            out.writeBoolean(isolation);, +        }, +        builder.field(Fields.ISOLATION, isolation);, +        sb.append(", isolation='").append(isolation);, +++ b/src/main/java/org/elasticsearch/plugins/PluginClassLoader.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.plugins;, +, +import com.google.common.collect.Lists;, +, +import java.io.IOException;, +import java.net.URL;, +import java.net.URLClassLoader;, +import java.util.*;, +, +public class PluginClassLoader extends URLClassLoader {, +, +    private final ClassLoader system;, +    private final URL url;, +, +    PluginClassLoader(URL[] urls, ClassLoader parent) throws IOException {, +        super(urls, parent);, +        url = (urls != null && urls.length > 0 ? urls[0] : null);, +, +        ClassLoader sys = getSystemClassLoader();, +        while (sys.getParent() != null) {, +            sys = sys.getParent();, +        }, +, +        system = sys;, +    }, +, +    // load first from system class loader then fall back to this one, +    @Override, +    protected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {, +        Class<?> c = findLoadedClass(name);, +        if (c == null) {, +            // check system class loader (jvm & bootclasspath), +            if (system != null) {, +                try {]