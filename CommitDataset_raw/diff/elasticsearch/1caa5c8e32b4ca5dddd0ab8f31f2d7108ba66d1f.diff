[+++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {, +            assert assertOriginPrimarySequenceNumber(seqNo);, +    protected boolean assertOriginPrimarySequenceNumber(final long seqNo) {, +        // sequence number should not be set when operation origin is primary, +        assert seqNo == SequenceNumbers.UNASSIGNED_SEQ_NO, +                : "primary operations must never have an assigned sequence number but was [" + seqNo + "]";, +        return true;, +    }, +, +    protected long doGenerateSeqNoForOperation(final Operation operation) {, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {, +            assert assertOriginPrimarySequenceNumber(seqNo);, +    protected boolean assertOriginPrimarySequenceNumber(final long seqNo) {, +        // sequence number should not be set when operation origin is primary, +        assert seqNo == SequenceNumbers.UNASSIGNED_SEQ_NO, +                : "primary operations must never have an assigned sequence number but was [" + seqNo + "]";, +        return true;, +    }, +, +    protected long doGenerateSeqNoForOperation(final Operation operation) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.index.engine.InternalEngineFactory;, +    protected final EngineFactory engineFactory;, +        this.engineFactory = engineFactory == null ? new InternalEngineFactory() : engineFactory;, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {, +            assert assertOriginPrimarySequenceNumber(seqNo);, +    protected boolean assertOriginPrimarySequenceNumber(final long seqNo) {, +        // sequence number should not be set when operation origin is primary, +        assert seqNo == SequenceNumbers.UNASSIGNED_SEQ_NO, +                : "primary operations must never have an assigned sequence number but was [" + seqNo + "]";, +        return true;, +    }, +, +    protected long doGenerateSeqNoForOperation(final Operation operation) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.index.engine.InternalEngineFactory;, +    protected final EngineFactory engineFactory;, +        this.engineFactory = engineFactory == null ? new InternalEngineFactory() : engineFactory;, +++ b/core/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +            Translog.Snapshot snapshot = indexShard.getTranslog().newSnapshotFromMinSeqNo(startingSeqNo);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java]