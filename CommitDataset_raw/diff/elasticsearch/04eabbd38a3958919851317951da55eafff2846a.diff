[+++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        protected boolean omitNormsSet = false;, +        protected boolean indexOptionsSet = false;, +            this.omitNormsSet = true;, +            this.indexOptionsSet = true;, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        protected boolean omitNormsSet = false;, +        protected boolean indexOptionsSet = false;, +            this.omitNormsSet = true;, +            this.indexOptionsSet = true;, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            // if the field is not analyzed, then by default, we should omit norms and have docs only, +            // index options, as probably what the user really wants, +            // if they are set explicitly, we will use those values, +            if (index == Field.Index.NOT_ANALYZED) {, +                if (!omitNormsSet) {, +                    omitNorms = true;, +                }, +                if (!indexOptionsSet) {, +                    indexOptions = IndexOptions.DOCS_ONLY;, +                }, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        protected boolean omitNormsSet = false;, +        protected boolean indexOptionsSet = false;, +            this.omitNormsSet = true;, +            this.indexOptionsSet = true;, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            // if the field is not analyzed, then by default, we should omit norms and have docs only, +            // index options, as probably what the user really wants, +            // if they are set explicitly, we will use those values, +            if (index == Field.Index.NOT_ANALYZED) {, +                if (!omitNormsSet) {, +                    omitNorms = true;, +                }, +                if (!indexOptionsSet) {, +                    indexOptions = IndexOptions.DOCS_ONLY;, +                }, +            }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/string/SimpleStringMappingTests.java, +import org.apache.lucene.index.FieldInfo;, +import static org.hamcrest.Matchers.*;, +, +    @Test, +    public void testDefaultsForAnalyzed() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = MapperTests.newParser().parse(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "1234"), +                .endObject(), +                .bytes());, +, +        assertThat(doc.rootDoc().getFieldable("field").getOmitNorms(), equalTo(false));, +        assertThat(doc.rootDoc().getFieldable("field").getIndexOptions(), equalTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS));, +    }, +, +    @Test, +    public void testDefaultsForNotAnalyzed() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").field("index", "not_analyzed").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = MapperTests.newParser().parse(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "1234"), +                .endObject(), +                .bytes());, +, +        assertThat(doc.rootDoc().getFieldable("field").getOmitNorms(), equalTo(true));, +        assertThat(doc.rootDoc().getFieldable("field").getIndexOptions(), equalTo(FieldInfo.IndexOptions.DOCS_ONLY));, +, +        // now test it explicitly set, +, +        mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").field("index", "not_analyzed").field("omit_norms", false).field("index_options", "freqs").endObject().endObject(), +                .endObject().endObject().string();, +, +        defaultMapper = MapperTests.newParser().parse(mapping);, +, +        doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "1234"), +                .endObject(), +                .bytes());, +, +        assertThat(doc.rootDoc().getFieldable("field").getOmitNorms(), equalTo(false));, +        assertThat(doc.rootDoc().getFieldable("field").getIndexOptions(), equalTo(FieldInfo.IndexOptions.DOCS_AND_FREQS));, +    }]