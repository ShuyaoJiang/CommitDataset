[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/Action.java, +            ACKNOWLEDGED,, +         * {@code Acknowledged} is a {@link StoppedResult} with a status of {@link Status#ACKNOWLEDGED} for actions that, +         * have been throttled., +         */, +        public static class Acknowledged extends StoppedResult {, +, +            public Acknowledged(String type, String reason) {, +                super(type, Status.ACKNOWLEDGED, reason);, +            }, +        }, +, +        /**, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/Action.java, +            ACKNOWLEDGED,, +         * {@code Acknowledged} is a {@link StoppedResult} with a status of {@link Status#ACKNOWLEDGED} for actions that, +         * have been throttled., +         */, +        public static class Acknowledged extends StoppedResult {, +, +            public Acknowledged(String type, String reason) {, +                super(type, Status.ACKNOWLEDGED, reason);, +            }, +        }, +, +        /**, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/ActionWrapper.java, +import java.util.Objects;, +                if (throttleResult.type() == Throttler.Type.ACK) {, +                    return new ActionWrapper.Result(id, new Action.Result.Acknowledged(action.type(), throttleResult.reason()));, +                } else {, +        }, +            return Objects.equals(id, result.id) &&, +                    Objects.equals(condition, result.condition) &&, +                    Objects.equals(transform, result.transform) &&, +                    Objects.equals(action, result.action);, +            return Objects.hash(id, condition, transform, action);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/Action.java, +            ACKNOWLEDGED,, +         * {@code Acknowledged} is a {@link StoppedResult} with a status of {@link Status#ACKNOWLEDGED} for actions that, +         * have been throttled., +         */, +        public static class Acknowledged extends StoppedResult {, +, +            public Acknowledged(String type, String reason) {, +                super(type, Status.ACKNOWLEDGED, reason);, +            }, +        }, +, +        /**, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/ActionWrapper.java, +import java.util.Objects;, +                if (throttleResult.type() == Throttler.Type.ACK) {, +                    return new ActionWrapper.Result(id, new Action.Result.Acknowledged(action.type(), throttleResult.reason()));, +                } else {, +        }, +            return Objects.equals(id, result.id) &&, +                    Objects.equals(condition, result.condition) &&, +                    Objects.equals(transform, result.transform) &&, +                    Objects.equals(action, result.action);, +            return Objects.hash(id, condition, transform, action);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/throttler/AckThrottler.java, +import static org.elasticsearch.xpack.watcher.actions.throttler.Throttler.Type.ACK;, +            return Result.throttle(ACK, "action [{}] was acked at [{}]", actionId, formatDate(ackStatus.timestamp()));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/Action.java, +            ACKNOWLEDGED,, +         * {@code Acknowledged} is a {@link StoppedResult} with a status of {@link Status#ACKNOWLEDGED} for actions that, +         * have been throttled., +         */, +        public static class Acknowledged extends StoppedResult {, +, +            public Acknowledged(String type, String reason) {, +                super(type, Status.ACKNOWLEDGED, reason);, +            }, +        }, +, +        /**, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/ActionWrapper.java, +import java.util.Objects;, +                if (throttleResult.type() == Throttler.Type.ACK) {, +                    return new ActionWrapper.Result(id, new Action.Result.Acknowledged(action.type(), throttleResult.reason()));, +                } else {, +        }, +            return Objects.equals(id, result.id) &&, +                    Objects.equals(condition, result.condition) &&, +                    Objects.equals(transform, result.transform) &&, +                    Objects.equals(action, result.action);, +            return Objects.hash(id, condition, transform, action);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/throttler/AckThrottler.java, +import static org.elasticsearch.xpack.watcher.actions.throttler.Throttler.Type.ACK;, +            return Result.throttle(ACK, "action [{}] was acked at [{}]", actionId, formatDate(ackStatus.timestamp()));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/throttler/ActionThrottler.java, +import static org.elasticsearch.xpack.watcher.actions.throttler.Throttler.Type.LICENSE;, +, +            return Result.throttle(LICENSE, "watcher license does not allow action execution");, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/Action.java, +            ACKNOWLEDGED,, +         * {@code Acknowledged} is a {@link StoppedResult} with a status of {@link Status#ACKNOWLEDGED} for actions that, +         * have been throttled., +         */]