[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +        return null;, +    protected final void masterOperation(ClusterHealthRequest request, ClusterState state,, +                                         ActionListener<ClusterHealthResponse> listener) throws Exception {, +    protected void masterOperation(Task task, final ClusterHealthRequest request, final ClusterState unusedState,, +                                   final ActionListener<ClusterHealthResponse> listener) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",, +                    new LocalClusterUpdateTask(request.waitForEvents()) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",, +                    new ClusterStateUpdateTask(request.waitForEvents()) {, +                            logger.trace("stopped being master while waiting for events with priority [{}]. retrying.",, +                                request.waitForEvents());, +    private ClusterHealthResponse getResponse(final ClusterHealthRequest request, ClusterState clusterState, final int waitFor,, +                                              boolean timedOut) {, +    private ClusterHealthResponse clusterHealth(ClusterHealthRequest request, ClusterState clusterState, int numberOfPendingTasks,, +                                                int numberOfInFlightFetch, TimeValue pendingTaskTimeInQueue) {, +            ClusterHealthResponse response = new ClusterHealthResponse(clusterState.getClusterName().value(), Strings.EMPTY_ARRAY,, +                clusterState, numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(clusterState),, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +        return null;, +    protected final void masterOperation(ClusterHealthRequest request, ClusterState state,, +                                         ActionListener<ClusterHealthResponse> listener) throws Exception {, +    protected void masterOperation(Task task, final ClusterHealthRequest request, final ClusterState unusedState,, +                                   final ActionListener<ClusterHealthResponse> listener) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",, +                    new LocalClusterUpdateTask(request.waitForEvents()) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",, +                    new ClusterStateUpdateTask(request.waitForEvents()) {, +                            logger.trace("stopped being master while waiting for events with priority [{}]. retrying.",, +                                request.waitForEvents());, +    private ClusterHealthResponse getResponse(final ClusterHealthRequest request, ClusterState clusterState, final int waitFor,, +                                              boolean timedOut) {, +    private ClusterHealthResponse clusterHealth(ClusterHealthRequest request, ClusterState clusterState, int numberOfPendingTasks,, +                                                int numberOfInFlightFetch, TimeValue pendingTaskTimeInQueue) {, +            ClusterHealthResponse response = new ClusterHealthResponse(clusterState.getClusterName().value(), Strings.EMPTY_ARRAY,, +                clusterState, numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(clusterState),, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodeResponse.java, +    public ClusterStatsNodeResponse(DiscoveryNode node, @Nullable ClusterHealthStatus clusterStatus, NodeInfo nodeInfo,, +                                    NodeStats nodeStats, ShardStats[] shardsStats) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +        return null;, +    protected final void masterOperation(ClusterHealthRequest request, ClusterState state,, +                                         ActionListener<ClusterHealthResponse> listener) throws Exception {, +    protected void masterOperation(Task task, final ClusterHealthRequest request, final ClusterState unusedState,, +                                   final ActionListener<ClusterHealthResponse> listener) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",, +                    new LocalClusterUpdateTask(request.waitForEvents()) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",, +                    new ClusterStateUpdateTask(request.waitForEvents()) {, +                            logger.trace("stopped being master while waiting for events with priority [{}]. retrying.",, +                                request.waitForEvents());, +    private ClusterHealthResponse getResponse(final ClusterHealthRequest request, ClusterState clusterState, final int waitFor,, +                                              boolean timedOut) {, +    private ClusterHealthResponse clusterHealth(ClusterHealthRequest request, ClusterState clusterState, int numberOfPendingTasks,, +                                                int numberOfInFlightFetch, TimeValue pendingTaskTimeInQueue) {, +            ClusterHealthResponse response = new ClusterHealthResponse(clusterState.getClusterName().value(), Strings.EMPTY_ARRAY,, +                clusterState, numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(clusterState),, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodeResponse.java, +    public ClusterStatsNodeResponse(DiscoveryNode node, @Nullable ClusterHealthStatus clusterStatus, NodeInfo nodeInfo,, +                                    NodeStats nodeStats, ShardStats[] shardsStats) {, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponsesTests.java, +        ClusterHealthResponse clusterHealth = new ClusterHealthResponse("bla", new String[] {MetaData.ALL}, clusterState, pendingTasks,, +            inFlight, delayedUnassigned, pendingTaskInQueueTime);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +        return null;, +    protected final void masterOperation(ClusterHealthRequest request, ClusterState state,, +                                         ActionListener<ClusterHealthResponse> listener) throws Exception {, +    protected void masterOperation(Task task, final ClusterHealthRequest request, final ClusterState unusedState,, +                                   final ActionListener<ClusterHealthResponse> listener) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",, +                    new LocalClusterUpdateTask(request.waitForEvents()) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",, +                    new ClusterStateUpdateTask(request.waitForEvents()) {, +                            logger.trace("stopped being master while waiting for events with priority [{}]. retrying.",, +                                request.waitForEvents());, +    private ClusterHealthResponse getResponse(final ClusterHealthRequest request, ClusterState clusterState, final int waitFor,, +                                              boolean timedOut) {, +    private ClusterHealthResponse clusterHealth(ClusterHealthRequest request, ClusterState clusterState, int numberOfPendingTasks,, +                                                int numberOfInFlightFetch, TimeValue pendingTaskTimeInQueue) {, +            ClusterHealthResponse response = new ClusterHealthResponse(clusterState.getClusterName().value(), Strings.EMPTY_ARRAY,, +                clusterState, numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(clusterState),, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodeResponse.java, +    public ClusterStatsNodeResponse(DiscoveryNode node, @Nullable ClusterHealthStatus clusterStatus, NodeInfo nodeInfo,, +                                    NodeStats nodeStats, ShardStats[] shardsStats) {, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponsesTests.java, +        ClusterHealthResponse clusterHealth = new ClusterHealthResponse("bla", new String[] {MetaData.ALL}, clusterState, pendingTasks,, +            inFlight, delayedUnassigned, pendingTaskInQueueTime);, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/repositories/RepositoryBlocksIT.java, +            VerifyRepositoryResponse response = client().admin().cluster().prepareVerifyRepository("test-repo-blocks").execute(), +                .actionGet();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml]