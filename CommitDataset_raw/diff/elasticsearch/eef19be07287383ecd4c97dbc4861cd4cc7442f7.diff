[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "string", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "text", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "keyword", "string");, +                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "text", null);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "string", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "text", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "keyword", "string");, +                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "text", null);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0)) {, +                throw new IllegalArgumentException("The [string] type is removed in 5.0. You should now use either a [text] ", +                        + "or [keyword] field instead for field [" + fieldName + "]");, +            }, +        if (Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0)) {, +            throw new IllegalArgumentException("The [string] type is removed in 5.0. You should now use either a [text] ", +                    + "or [keyword] field instead for field [" + fieldType.name() + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "string", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "text", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "keyword", "string");, +                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "text", null);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0)) {, +                throw new IllegalArgumentException("The [string] type is removed in 5.0. You should now use either a [text] ", +                        + "or [keyword] field instead for field [" + fieldName + "]");, +            }, +        if (Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0)) {, +            throw new IllegalArgumentException("The [string] type is removed in 5.0. You should now use either a [text] ", +                    + "or [keyword] field instead for field [" + fieldType.name() + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;, +                                KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo);, +            KeywordFieldMapper geoHashMapper = null;, +                geoHashMapper = new KeywordFieldMapper.Builder(Names.GEOHASH).index(true).includeInAll(false).store(fieldType.stored()).build(context);, +    protected KeywordFieldMapper geoHashMapper;, +                                      DoubleFieldMapper latMapper, DoubleFieldMapper lonMapper, KeywordFieldMapper geoHashMapper,, +        KeywordFieldMapper geoUpdated = geoHashMapper == null ? null : (KeywordFieldMapper) geoHashMapper.updateFieldType(fullNameToFieldType);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "string", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "text", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "keyword", "string");, +                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "text", null);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0)) {, +                throw new IllegalArgumentException("The [string] type is removed in 5.0. You should now use either a [text] ", +                        + "or [keyword] field instead for field [" + fieldName + "]");, +            }, +        if (Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0)) {, +            throw new IllegalArgumentException("The [string] type is removed in 5.0. You should now use either a [text] ", +                    + "or [keyword] field instead for field [" + fieldType.name() + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;, +                                KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo);, +            KeywordFieldMapper geoHashMapper = null;, +                geoHashMapper = new KeywordFieldMapper.Builder(Names.GEOHASH).index(true).includeInAll(false).store(fieldType.stored()).build(context);, +    protected KeywordFieldMapper geoHashMapper;, +                                      DoubleFieldMapper latMapper, DoubleFieldMapper lonMapper, KeywordFieldMapper geoHashMapper,, +        KeywordFieldMapper geoUpdated = geoHashMapper == null ? null : (KeywordFieldMapper) geoHashMapper.updateFieldType(fullNameToFieldType);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;, +                                         DoubleFieldMapper lonMapper, KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed,, +                               KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "string", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "text", "string");, +            builder = context.root().findTemplateBuilder(context, currentFieldName, "keyword", "string");, +                Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "text", null);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0)) {, +                throw new IllegalArgumentException("The [string] type is removed in 5.0. You should now use either a [text] ", +                        + "or [keyword] field instead for field [" + fieldName + "]");, +            }, +        if (Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0)) {, +            throw new IllegalArgumentException("The [string] type is removed in 5.0. You should now use either a [text] ", +                    + "or [keyword] field instead for field [" + fieldType.name() + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;, +                                KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo);, +            KeywordFieldMapper geoHashMapper = null;, +                geoHashMapper = new KeywordFieldMapper.Builder(Names.GEOHASH).index(true).includeInAll(false).store(fieldType.stored()).build(context);, +    protected KeywordFieldMapper geoHashMapper;, +                                      DoubleFieldMapper latMapper, DoubleFieldMapper lonMapper, KeywordFieldMapper geoHashMapper,, +        KeywordFieldMapper geoUpdated = geoHashMapper == null ? null : (KeywordFieldMapper) geoHashMapper.updateFieldType(fullNameToFieldType);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;, +                                         DoubleFieldMapper lonMapper, KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed,, +                               KeywordFieldMapper geoHashMapper, MultiFields multiFields, Explicit<Boolean> ignoreMalformed, CopyTo copyTo) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapperLegacy.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;]