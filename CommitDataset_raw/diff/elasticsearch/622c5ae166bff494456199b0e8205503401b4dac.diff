[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        JobManager jobManager = new JobManager(settings, jobProvider, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        JobManager jobManager = new JobManager(settings, jobProvider, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.xpack.ml.job.persistence.AnomalyDetectorsIndex;, +import java.io.IOException;, +    public JobManager(Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor, Client client,, +        String index = AnomalyDetectorsIndex.jobResultsAliasedName(modelSnapshot.getJobId());, +        IndexRequest indexRequest = new IndexRequest(index, ModelSnapshot.TYPE.getPreferredName(), ModelSnapshot.documentId(modelSnapshot));, +        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {, +            modelSnapshot.toXContent(builder, ToXContent.EMPTY_PARAMS);, +            indexRequest.source(builder);, +        } catch (IOException e) {, +            errorHandler.accept(e);, +        }, +        client.index(indexRequest, ActionListener.wrap(r -> handler.accept(true), errorHandler));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        JobManager jobManager = new JobManager(settings, jobProvider, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.xpack.ml.job.persistence.AnomalyDetectorsIndex;, +import java.io.IOException;, +    public JobManager(Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor, Client client,, +        String index = AnomalyDetectorsIndex.jobResultsAliasedName(modelSnapshot.getJobId());, +        IndexRequest indexRequest = new IndexRequest(index, ModelSnapshot.TYPE.getPreferredName(), ModelSnapshot.documentId(modelSnapshot));, +        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {, +            modelSnapshot.toXContent(builder, ToXContent.EMPTY_PARAMS);, +            indexRequest.source(builder);, +        } catch (IOException e) {, +            errorHandler.accept(e);, +        }, +        client.index(indexRequest, ActionListener.wrap(r -> handler.accept(true), errorHandler));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        JobManager jobManager = new JobManager(settings, jobProvider, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.xpack.ml.job.persistence.AnomalyDetectorsIndex;, +import java.io.IOException;, +    public JobManager(Settings settings, JobProvider jobProvider, ClusterService clusterService, Auditor auditor, Client client,, +        String index = AnomalyDetectorsIndex.jobResultsAliasedName(modelSnapshot.getJobId());, +        IndexRequest indexRequest = new IndexRequest(index, ModelSnapshot.TYPE.getPreferredName(), ModelSnapshot.documentId(modelSnapshot));, +        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {, +            modelSnapshot.toXContent(builder, ToXContent.EMPTY_PARAMS);, +            indexRequest.source(builder);, +        } catch (IOException e) {, +            errorHandler.accept(e);, +        }, +        client.index(indexRequest, ActionListener.wrap(r -> handler.accept(true), errorHandler));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +        persistable.persist(AnomalyDetectorsIndex.jobStateIndexName());, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/JobManagerTests.java, +        return new JobManager(settings, jobProvider, clusterService, auditor, client, notifier);]