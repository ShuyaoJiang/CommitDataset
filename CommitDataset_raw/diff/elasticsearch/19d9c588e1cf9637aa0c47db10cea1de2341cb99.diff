[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/BaseAggregationTestCase.java, +                Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                        // no file watching, so we don't need a, +                        // ResourceWatcherService, +                        .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(), false).build();, +                ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections, +                        .singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(MockScriptEngine.class, MockScriptEngine.TYPES)));, +                    ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null,, +                            scriptEngineRegistry, scriptContextRegistry, scriptSettings);, +                AggregatorFactory prototype = (AggregatorFactory) namedWriteableRegistry.getPrototype(AggregatorFactory.class,, +                        testAgg.getWriteableName());, +                AggregatorFactory prototype = (AggregatorFactory) namedWriteableRegistry.getPrototype(AggregatorFactory.class,, +                        agg.getWriteableName());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/BaseAggregationTestCase.java, +                Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                        // no file watching, so we don't need a, +                        // ResourceWatcherService, +                        .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(), false).build();, +                ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections, +                        .singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(MockScriptEngine.class, MockScriptEngine.TYPES)));, +                    ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null,, +                            scriptEngineRegistry, scriptContextRegistry, scriptSettings);, +                AggregatorFactory prototype = (AggregatorFactory) namedWriteableRegistry.getPrototype(AggregatorFactory.class,, +                        testAgg.getWriteableName());, +                AggregatorFactory prototype = (AggregatorFactory) namedWriteableRegistry.getPrototype(AggregatorFactory.class,, +                        agg.getWriteableName());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/BasePipelineAggregationTestCase.java, +                Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                        // no file watching, so we don't need a, +                        // ResourceWatcherService, +                        .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(), false).build();, +                ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections, +                        .singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(MockScriptEngine.class, MockScriptEngine.TYPES)));, +                    ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null,, +                            scriptEngineRegistry, scriptContextRegistry, scriptSettings);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/BaseAggregationTestCase.java, +                Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                        // no file watching, so we don't need a, +                        // ResourceWatcherService, +                        .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(), false).build();, +                ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections, +                        .singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(MockScriptEngine.class, MockScriptEngine.TYPES)));, +                    ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null,, +                            scriptEngineRegistry, scriptContextRegistry, scriptSettings);, +                AggregatorFactory prototype = (AggregatorFactory) namedWriteableRegistry.getPrototype(AggregatorFactory.class,, +                        testAgg.getWriteableName());, +                AggregatorFactory prototype = (AggregatorFactory) namedWriteableRegistry.getPrototype(AggregatorFactory.class,, +                        agg.getWriteableName());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/BasePipelineAggregationTestCase.java, +                Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                        // no file watching, so we don't need a, +                        // ResourceWatcherService, +                        .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(), false).build();, +                ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections, +                        .singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(MockScriptEngine.class, MockScriptEngine.TYPES)));, +                    ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null,, +                            scriptEngineRegistry, scriptContextRegistry, scriptSettings);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DiversifiedSamplerIT.java, +                .addMapping("book", "name", "type=string,index=analyzed", "genre", "type=string,index=not_analyzed", "price",, +                        "type=float"));, +            client().prepareIndex("test", "book", "" + i), +                    .setSource("author", parts[5], "name", parts[2], "genre", parts[8], "price", Float.parseFloat(parts[3])).get();, +            client().prepareIndex("idx_unmapped_author", "book", "" + i), +                    .setSource("name", parts[2], "genre", parts[8], "price", Float.parseFloat(parts[3])).get();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/BaseAggregationTestCase.java, +                Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                        // no file watching, so we don't need a, +                        // ResourceWatcherService, +                        .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(), false).build();, +                ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections, +                        .singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(MockScriptEngine.class, MockScriptEngine.TYPES)));, +                    ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null,, +                            scriptEngineRegistry, scriptContextRegistry, scriptSettings);, +                AggregatorFactory prototype = (AggregatorFactory) namedWriteableRegistry.getPrototype(AggregatorFactory.class,, +                        testAgg.getWriteableName());, +                AggregatorFactory prototype = (AggregatorFactory) namedWriteableRegistry.getPrototype(AggregatorFactory.class,, +                        agg.getWriteableName());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/BasePipelineAggregationTestCase.java, +                Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                        // no file watching, so we don't need a, +                        // ResourceWatcherService, +                        .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(), false).build();, +                ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(Collections, +                        .singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(MockScriptEngine.class, MockScriptEngine.TYPES)));, +                    ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null,, +                            scriptEngineRegistry, scriptContextRegistry, scriptSettings);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DiversifiedSamplerIT.java, +                .addMapping("book", "name", "type=string,index=analyzed", "genre", "type=string,index=not_analyzed", "price",, +                        "type=float"));, +            client().prepareIndex("test", "book", "" + i), +                    .setSource("author", parts[5], "name", parts[2], "genre", parts[8], "price", Float.parseFloat(parts[3])).get();, +            client().prepareIndex("idx_unmapped_author", "book", "" + i), +                    .setSource("name", parts[2], "genre", parts[8], "price", Float.parseFloat(parts[3])).get();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgTests.java, +                    factory.modelBuilder(, +                            new HoltWintersModel.HoltWintersModelBuilder().alpha(randomDouble()).beta(randomDouble()).gamma(randomDouble()), +                                    .period(period).seasonalityType(randomFrom(SeasonalityType.values())).pad(randomBoolean()));, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/BaseAggregationTestCase.java, +                Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                        // no file watching, so we don't need a]