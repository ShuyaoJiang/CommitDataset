[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, mapperRegistry, () -> null);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, mapperRegistry, () -> null);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +                IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, analysisService, refreshTask, fsyncTask,, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, mapperRegistry, () -> null);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +                IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, analysisService, refreshTask, fsyncTask,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, mapperRegistry, () -> null);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +                IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, analysisService, refreshTask, fsyncTask,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper.KeywordFieldType;, +final class DocumentParser {, +        final ParseContext.InternalParseContext context = new ParseContext.InternalParseContext(indexSettings.getSettings(), docMapperParser, docMapper, new ContentPath(0));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, mapperRegistry, () -> null);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +                IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, analysisService, refreshTask, fsyncTask,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper.KeywordFieldType;, +final class DocumentParser {, +        final ParseContext.InternalParseContext context = new ParseContext.InternalParseContext(indexSettings.getSettings(), docMapperParser, docMapper, new ContentPath(0));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +public class MapperService extends AbstractIndexComponent {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, mapperRegistry, () -> null);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +                IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, analysisService, refreshTask, fsyncTask,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper;, +import org.elasticsearch.index.mapper.core.KeywordFieldMapper.KeywordFieldType;, +final class DocumentParser {, +        final ParseContext.InternalParseContext context = new ParseContext.InternalParseContext(indexSettings.getSettings(), docMapperParser, docMapper, new ContentPath(0));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +public class MapperService extends AbstractIndexComponent {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java, +import java.io.IOException;, +import java.io.UncheckedIOException;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.concurrent.ExecutionException;, +import java.util.function.Function;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.compress.CompressedXContent;, +        MapperParsingException e = expectThrows(MapperParsingException.class, () -> {, +            client().admin().indices().prepareCreate(index), +                    .execute().actionGet();, +        });, +        assertTrue(e.getMessage(), e.getMessage().contains("mapping type name [.test-type] must not start with a '.'"));, +        MapperParsingException e = expectThrows(MapperParsingException.class, () -> {, +            client().admin().indices().prepareCreate(index), +                    .execute().actionGet();, +        });, +        assertTrue(e.getMessage(), e.getMessage().contains("mapping type name [" + type + "] is too long; limit is length 255 but was [256]"));, +        ExecutionException e = expectThrows(ExecutionException.class, () -> {, +            client().prepareIndex("index1", MapperService.DEFAULT_MAPPING, "1").setSource("{}").execute().get();, +        });, +        Throwable throwable = ExceptionsHelper.unwrapCause(e.getCause());, +            throw e;, +        expectThrows(ExecutionException.class, () -> {, +            client().prepareIndex("index1", MapperService.DEFAULT_MAPPING, "2").setSource().execute().get();, +        });, +        throwable = ExceptionsHelper.unwrapCause(e.getCause());, +            throw e;, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {, +        });, +        assertTrue(e.getMessage(), e.getMessage().contains("Limit of total fields [1] in index [test2] has been exceeded"));]