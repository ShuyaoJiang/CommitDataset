[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplainRequest.java, +import org.elasticsearch.Version;, +        PARSER.declareString(ClusterAllocationExplainRequest::setCurrentNode, new ParseField("current_node"));, +    @Nullable, +    @Nullable, +    @Nullable, +    @Nullable, +    private String currentNode;, +    /**, +     * Create a new allocation explain request to explain any unassigned shard in the cluster., +     */, +        this.currentNode = null;, +     *, +     * Package private for testing., +    ClusterAllocationExplainRequest(String index, int shard, boolean primary, @Nullable String currentNode) {, +        this.currentNode = currentNode;, +        return this.index == null && this.shard == null && this.primary == null && this.currentNode == null;, +    /**, +     * Sets the index name of the shard to explain., +     */, +    /**, +     * Returns the index name of the shard to explain, or {@code null} to use any unassigned shard (see {@link #useAnyUnassignedShard()})., +     */, +    /**, +     * Sets the shard id of the shard to explain., +     */, +    /**, +     * Returns the shard id of the shard to explain, or {@code null} to use any unassigned shard (see {@link #useAnyUnassignedShard()})., +     */, +    /**, +     * Sets whether to explain the allocation of the primary shard or a replica shard copy, +     * for the shard id (see {@link #getShard()})., +     */, +    /**, +     * Returns {@code true} if explaining the primary shard for the shard id (see {@link #getShard()}),, +     * {@code false} if explaining a replica shard copy for the shard id, or {@code null} to use any, +     * unassigned shard (see {@link #useAnyUnassignedShard()})., +     */, +    /**, +     * Requests the explain API to explain an already assigned replica shard currently allocated to, +     * the given node., +     */, +    public ClusterAllocationExplainRequest setCurrentNode(String currentNodeId) {, +        this.currentNode = currentNodeId;, +        return this;, +    }, +, +    /**, +     * Returns the node holding the replica shard to be explained.  Returns {@code null} if any replica shard, +     * can be explained., +     */, +    @Nullable, +    public String getCurrentNode() {, +        return currentNode;, +    }, +, +    /**, +     * Set to {@code true} to include yes decisions for a particular node., +     */, +    /**, +     * Returns {@code true} if yes decisions should be included.  Otherwise only "no" and "throttle", +     * decisions are returned., +     */, +    /**, +     * Set to {@code true} to include information about the gathered disk information of nodes in the cluster., +     */, +    /**, +     * Returns {@code true} if information about disk usage and shard sizes should also be returned., +     */, +            if (currentNode != null) {, +                sb.append(",currentNode=").append(currentNode);, +            }, +        checkVersion(in.getVersion());, +        this.currentNode = in.readOptionalString();, +        checkVersion(out.getVersion());, +        out.writeOptionalString(currentNode);, +, +    private void checkVersion(Version version) {, +        if (version.before(Version.V_5_2_0_UNRELEASED)) {, +            throw new IllegalArgumentException("cannot explain shards in a mixed-cluster with pre-" + Version.V_5_2_0_UNRELEASED +, +                                               " nodes, node version [" + version + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplainRequest.java, +import org.elasticsearch.Version;, +        PARSER.declareString(ClusterAllocationExplainRequest::setCurrentNode, new ParseField("current_node"));, +    @Nullable, +    @Nullable, +    @Nullable, +    @Nullable, +    private String currentNode;, +    /**, +     * Create a new allocation explain request to explain any unassigned shard in the cluster., +     */, +        this.currentNode = null;, +     *, +     * Package private for testing., +    ClusterAllocationExplainRequest(String index, int shard, boolean primary, @Nullable String currentNode) {, +        this.currentNode = currentNode;, +        return this.index == null && this.shard == null && this.primary == null && this.currentNode == null;]