[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.common.collect.Tuple;, +            context.path().add(currentFieldName);, +            context.path().remove();, +, +            // TODO: why Strings.splitStringToArray instead of String.split?, +            final String[] paths = Strings.splitStringToArray(currentFieldName, '.');, +            currentFieldName = paths[paths.length - 1];, +            Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, mapper);, +            ObjectMapper parentMapper = parentMapperTuple.v2();, +            ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);, +                context.path().remove();, +            for (int i = 0; i < parentMapperTuple.v1(); i++) {, +                context.path().remove();, +            }, +            // TODO: why Strings.splitStringToArray instead of String.split?, +            final String[] paths = Strings.splitStringToArray(arrayFieldName, '.');, +            arrayFieldName = paths[paths.length - 1];, +            lastFieldName = arrayFieldName;, +            Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, parentMapper);, +            parentMapper = parentMapperTuple.v2();, +                } else {, +                }, +            for (int i = 0; i < parentMapperTuple.v1(); i++) {, +                context.path().remove();, +            }, +, +            // TODO: why Strings.splitStringToArray instead of String.split?, +            final String[] paths = Strings.splitStringToArray(currentFieldName, '.');, +            currentFieldName = paths[paths.length - 1];, +            Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, parentMapper);, +            parentMapper = parentMapperTuple.v2();, +            for (int i = 0; i < parentMapperTuple.v1(); i++) {, +                context.path().remove();, +            }, +            Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, null);, +            ObjectMapper mapper = parentMapperTuple.v2();, +            parseDynamicValue(context, mapper, fieldName, context.parser().currentToken());, +            for (int i = 0; i < parentMapperTuple.v1(); i++) {, +                context.path().remove();, +            }, +        }, +    }, +, +    private static Tuple<Integer, ObjectMapper> getDynamicParentMapper(ParseContext context, final String[] paths,, +            ObjectMapper currentParent) {, +        ObjectMapper mapper = currentParent == null ? context.root() : currentParent;, +        int pathsAdded = 0;, +            ObjectMapper parent = mapper;, +                           // Should not dynamically create any more mappers so return the last mapper, +                        return new Tuple<Integer, ObjectMapper>(pathsAdded, parent);, +                pathsAdded++;, +        return new Tuple<Integer, ObjectMapper>(pathsAdded, mapper);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.common.collect.Tuple;, +            context.path().add(currentFieldName);, +            context.path().remove();, +, +            // TODO: why Strings.splitStringToArray instead of String.split?, +            final String[] paths = Strings.splitStringToArray(currentFieldName, '.');, +            currentFieldName = paths[paths.length - 1];, +            Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, mapper);, +            ObjectMapper parentMapper = parentMapperTuple.v2();, +            ObjectMapper.Dynamic dynamic = dynamicOrDefault(parentMapper, context);, +                context.path().remove();, +            for (int i = 0; i < parentMapperTuple.v1(); i++) {, +                context.path().remove();, +            }, +            // TODO: why Strings.splitStringToArray instead of String.split?, +            final String[] paths = Strings.splitStringToArray(arrayFieldName, '.');, +            arrayFieldName = paths[paths.length - 1];, +            lastFieldName = arrayFieldName;, +            Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, parentMapper);, +            parentMapper = parentMapperTuple.v2();, +                } else {, +                }, +            for (int i = 0; i < parentMapperTuple.v1(); i++) {, +                context.path().remove();, +            }, +, +            // TODO: why Strings.splitStringToArray instead of String.split?, +            final String[] paths = Strings.splitStringToArray(currentFieldName, '.');, +            currentFieldName = paths[paths.length - 1];, +            Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, parentMapper);, +            parentMapper = parentMapperTuple.v2();, +            for (int i = 0; i < parentMapperTuple.v1(); i++) {, +                context.path().remove();, +            }, +            Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, null);, +            ObjectMapper mapper = parentMapperTuple.v2();, +            parseDynamicValue(context, mapper, fieldName, context.parser().currentToken());, +            for (int i = 0; i < parentMapperTuple.v1(); i++) {, +                context.path().remove();, +            }, +        }, +    }, +, +    private static Tuple<Integer, ObjectMapper> getDynamicParentMapper(ParseContext context, final String[] paths,, +            ObjectMapper currentParent) {, +        ObjectMapper mapper = currentParent == null ? context.root() : currentParent;]