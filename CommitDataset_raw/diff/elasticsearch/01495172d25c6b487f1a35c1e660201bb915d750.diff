[+++ /dev/null, +++ /dev/null, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/shard/MockEngineFactoryPlugin.class</include>, +++ /dev/null, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/shard/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +    public static final ImmutableMap<String, FieldQueryExtension> fieldQueryExtensions;, +        fieldQueryExtensions = ImmutableMap.<String, FieldQueryExtension>builder(), +                .put(ExistsFieldQueryExtension.NAME, new ExistsFieldQueryExtension()), +                .put(MissingFieldQueryExtension.NAME, new MissingFieldQueryExtension()), +                .build();, +        FieldQueryExtension fieldQueryExtension = fieldQueryExtensions.get(field);, +        TokenStream source;, +        List<String> tlist = new ArrayList<>();, +, +        try {, +            source.close();, +        } catch (IOException e) {, +            // ignore, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +                    try {, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                        source.close();, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                source.close();, +++ /dev/null, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/shard/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +    public static final ImmutableMap<String, FieldQueryExtension> fieldQueryExtensions;, +        fieldQueryExtensions = ImmutableMap.<String, FieldQueryExtension>builder(), +                .put(ExistsFieldQueryExtension.NAME, new ExistsFieldQueryExtension()), +                .put(MissingFieldQueryExtension.NAME, new MissingFieldQueryExtension()), +                .build();, +        FieldQueryExtension fieldQueryExtension = fieldQueryExtensions.get(field);, +        TokenStream source;, +        List<String> tlist = new ArrayList<>();, +, +        try {, +            source.close();, +        } catch (IOException e) {, +            // ignore, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +                    try {, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                        source.close();, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                source.close();, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      TokenStream ts = queryAnalyzer.tokenStream("", key.toString());, +      try {, +      } finally {, +          IOUtils.closeWhileHandlingException(ts);, +++ /dev/null, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/shard/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +    public static final ImmutableMap<String, FieldQueryExtension> fieldQueryExtensions;, +        fieldQueryExtensions = ImmutableMap.<String, FieldQueryExtension>builder(), +                .put(ExistsFieldQueryExtension.NAME, new ExistsFieldQueryExtension()), +                .put(MissingFieldQueryExtension.NAME, new MissingFieldQueryExtension()), +                .build();, +        FieldQueryExtension fieldQueryExtension = fieldQueryExtensions.get(field);, +        TokenStream source;, +        List<String> tlist = new ArrayList<>();, +, +        try {, +            source.close();, +        } catch (IOException e) {, +            // ignore, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +                    try {, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                        source.close();, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                source.close();, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      TokenStream ts = queryAnalyzer.tokenStream("", key.toString());, +      try {, +      } finally {, +          IOUtils.closeWhileHandlingException(ts);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +import com.google.common.collect.ImmutableMap;, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +            ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +            serviceAttributes = builder.build();, +++ /dev/null, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/shard/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;]