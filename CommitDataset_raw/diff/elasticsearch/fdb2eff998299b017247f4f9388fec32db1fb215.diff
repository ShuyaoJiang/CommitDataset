[+++ b/.idea/dictionaries/kimchy.xml, +      <w>calc</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>calc</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void indexingBuffer(ByteSizeValue indexingBufferSize);, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>calc</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void indexingBuffer(ByteSizeValue indexingBufferSize);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private volatile ByteSizeValue indexingBufferSize;, +        this.indexingBufferSize = componentSettings.getAsBytesSize("indexing_buffer_size", new ByteSizeValue(64, ByteSizeUnit.MB));, +    @Override public void indexingBuffer(ByteSizeValue indexingBufferSize) {, +        this.indexingBufferSize = indexingBufferSize;, +        IndexWriter indexWriter = this.indexWriter;, +        if (indexWriter != null) {, +            indexWriter.setRAMBufferSizeMB(indexingBufferSize.mbFrac());, +        }, +    }, +, +            logger.debug("Starting engine with ram_buffer_size[" + indexingBufferSize + "], refresh_interval[" + refreshInterval + "]");, +            indexWriter.setRAMBufferSizeMB(indexingBufferSize.mbFrac());, +++ b/.idea/dictionaries/kimchy.xml, +      <w>calc</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void indexingBuffer(ByteSizeValue indexingBufferSize);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private volatile ByteSizeValue indexingBufferSize;, +        this.indexingBufferSize = componentSettings.getAsBytesSize("indexing_buffer_size", new ByteSizeValue(64, ByteSizeUnit.MB));, +    @Override public void indexingBuffer(ByteSizeValue indexingBufferSize) {, +        this.indexingBufferSize = indexingBufferSize;, +        IndexWriter indexWriter = this.indexWriter;, +        if (indexWriter != null) {, +            indexWriter.setRAMBufferSizeMB(indexingBufferSize.mbFrac());, +        }, +    }, +, +            logger.debug("Starting engine with ram_buffer_size[" + indexingBufferSize + "], refresh_interval[" + refreshInterval + "]");, +            indexWriter.setRAMBufferSizeMB(indexingBufferSize.mbFrac());, +++ /dev/null, +++ b/.idea/dictionaries/kimchy.xml, +      <w>calc</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void indexingBuffer(ByteSizeValue indexingBufferSize);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private volatile ByteSizeValue indexingBufferSize;, +        this.indexingBufferSize = componentSettings.getAsBytesSize("indexing_buffer_size", new ByteSizeValue(64, ByteSizeUnit.MB));, +    @Override public void indexingBuffer(ByteSizeValue indexingBufferSize) {, +        this.indexingBufferSize = indexingBufferSize;, +        IndexWriter indexWriter = this.indexWriter;, +        if (indexWriter != null) {, +            indexWriter.setRAMBufferSizeMB(indexingBufferSize.mbFrac());, +        }, +    }, +, +            logger.debug("Starting engine with ram_buffer_size[" + indexingBufferSize + "], refresh_interval[" + refreshInterval + "]");, +            indexWriter.setRAMBufferSizeMB(indexingBufferSize.mbFrac());, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/IndicesModule.java, +import org.elasticsearch.indices.memory.IndexingMemoryBufferController;, +import org.elasticsearch.indices.memory.IndicesMemoryCleaner;, + * @author kimchy (shay.banon), +        bind(IndexingMemoryBufferController.class).asEagerSingleton();, +++ b/.idea/dictionaries/kimchy.xml, +      <w>calc</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void indexingBuffer(ByteSizeValue indexingBufferSize);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private volatile ByteSizeValue indexingBufferSize;, +        this.indexingBufferSize = componentSettings.getAsBytesSize("indexing_buffer_size", new ByteSizeValue(64, ByteSizeUnit.MB));, +    @Override public void indexingBuffer(ByteSizeValue indexingBufferSize) {, +        this.indexingBufferSize = indexingBufferSize;, +        IndexWriter indexWriter = this.indexWriter;, +        if (indexWriter != null) {, +            indexWriter.setRAMBufferSizeMB(indexingBufferSize.mbFrac());, +        }, +    }, +, +            logger.debug("Starting engine with ram_buffer_size[" + indexingBufferSize + "], refresh_interval[" + refreshInterval + "]");, +            indexWriter.setRAMBufferSizeMB(indexingBufferSize.mbFrac());, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/IndicesModule.java, +import org.elasticsearch.indices.memory.IndexingMemoryBufferController;, +import org.elasticsearch.indices.memory.IndicesMemoryCleaner;, + * @author kimchy (shay.banon), +        bind(IndexingMemoryBufferController.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryBufferController.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance]