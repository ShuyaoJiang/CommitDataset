[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().fieldFilter(type, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().fieldFilter(type, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.common.Nullable;, +    Query fieldQuery(String value, @Nullable QueryParseContext context);, +    Filter fieldFilter(String value, @Nullable QueryParseContext context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().fieldFilter(type, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.common.Nullable;, +    Query fieldQuery(String value, @Nullable QueryParseContext context);, +    Filter fieldFilter(String value, @Nullable QueryParseContext context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.elasticsearch.common.Nullable;, +    @Override public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +    @Override public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        return new TermFilter(names().createIndexNameTerm(indexedValue(value)));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().fieldFilter(type, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.common.Nullable;, +    Query fieldQuery(String value, @Nullable QueryParseContext context);, +    Filter fieldFilter(String value, @Nullable QueryParseContext context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.elasticsearch.common.Nullable;, +    @Override public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +    @Override public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        return new TermFilter(names().createIndexNameTerm(indexedValue(value)));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +    @Override public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +    @Override public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().fieldFilter(type, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.common.Nullable;, +    Query fieldQuery(String value, @Nullable QueryParseContext context);, +    Filter fieldFilter(String value, @Nullable QueryParseContext context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.elasticsearch.common.Nullable;, +    @Override public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +    @Override public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        return new TermFilter(names().createIndexNameTerm(indexedValue(value)));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +    @Override public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +    @Override public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.index.search.UidFilter;, +    @Override public boolean useFieldQueryWithQueryString() {, +        return true;, +    }, +, +    @Override public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +        if (indexed() || context == null) {, +            return super.fieldQuery(value, context);, +        }, +        UidFilter filter = new UidFilter(context.mapperService().types(), ImmutableList.of(value), context.indexCache().bloomCache());, +        // no need for constant score filter, since we don't cache the filter, and it always takes deletes into account, +        return new ConstantScoreQuery(filter);, +    }, +, +    @Override public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        if (indexed() || context == null) {, +            return super.fieldFilter(value, context);, +        }, +        return new UidFilter(context.mapperService().types(), ImmutableList.of(value), context.indexCache().bloomCache());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().fieldFilter(type, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.common.Nullable;, +    Query fieldQuery(String value, @Nullable QueryParseContext context);, +    Filter fieldFilter(String value, @Nullable QueryParseContext context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.elasticsearch.common.Nullable;, +    @Override public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +    @Override public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        return new TermFilter(names().createIndexNameTerm(indexedValue(value)));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +    @Override public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +    @Override public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.Filter;]