[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            String auditIndex = IndexAuditTrail.INDEX_NAME_PREFIX + "*";, +                            " restrictive. disable [action.auto_create_index] or set it to include " +, +                            "[{}]", (Object) value, auditIndex);, +            List<String> indices = new ArrayList<>();, +            templates.remove(SECURITY_TEMPLATE_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            String auditIndex = IndexAuditTrail.INDEX_NAME_PREFIX + "*";, +                            " restrictive. disable [action.auto_create_index] or set it to include " +, +                            "[{}]", (Object) value, auditIndex);, +            List<String> indices = new ArrayList<>();, +            templates.remove(SECURITY_TEMPLATE_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import java.util.function.Consumer;, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME);, +    /**, +     * Returns {@code true} if the security index exists, +     */, +    /**, +     * Returns <code>true</code> if the security index does not exist or it exists and has the current, +     * value for the <code>index.format</code> index setting, +     */, +    /**, +     * Returns <code>true</code> if the security index exists and all primary shards are active, +     */, +    /**, +     * Returns <code>true</code> if the security index does not exist or the mappings are up to date, +     * based on the version in the <code>_meta</code> field, +     */, +    public boolean isSecurityIndexMappingUpToDate() {, +        return securityIndex().isMappingUpToDate();, +    public static boolean securityIndexMappingSufficientToRead(ClusterState clusterState, Logger logger) {, +        return checkMappingVersions(clusterState, logger, MIN_READ_VERSION::onOrBefore);, +    static boolean securityIndexMappingUpToDate(ClusterState clusterState, Logger logger) {, +        return checkMappingVersions(clusterState, logger, Version.CURRENT::equals);, +    private static boolean checkMappingVersions(ClusterState clusterState, Logger logger, Predicate<Version> versionPredicate) {, +        return IndexLifecycleManager.checkIndexMappingVersionMatches(SECURITY_INDEX_NAME, clusterState, logger, versionPredicate);, +     * Prepares the security index by creating it if it doesn't exist or updating the mappings if the mappings are, +     * out of date. After any tasks have been executed, the runnable is then executed., +    public void prepareIndexIfNeededThenExecute(final Consumer<Exception> consumer, final Runnable andThen) {, +            securityIndex.prepareIndexIfNeededThenExecute(consumer, andThen);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            String auditIndex = IndexAuditTrail.INDEX_NAME_PREFIX + "*";, +                            " restrictive. disable [action.auto_create_index] or set it to include " +, +                            "[{}]", (Object) value, auditIndex);, +            List<String> indices = new ArrayList<>();, +            templates.remove(SECURITY_TEMPLATE_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import java.util.function.Consumer;, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME);, +    /**, +     * Returns {@code true} if the security index exists, +     */, +    /**, +     * Returns <code>true</code> if the security index does not exist or it exists and has the current, +     * value for the <code>index.format</code> index setting, +     */, +    /**, +     * Returns <code>true</code> if the security index exists and all primary shards are active, +     */, +    /**, +     * Returns <code>true</code> if the security index does not exist or the mappings are up to date, +     * based on the version in the <code>_meta</code> field, +     */, +    public boolean isSecurityIndexMappingUpToDate() {, +        return securityIndex().isMappingUpToDate();, +    public static boolean securityIndexMappingSufficientToRead(ClusterState clusterState, Logger logger) {, +        return checkMappingVersions(clusterState, logger, MIN_READ_VERSION::onOrBefore);, +    static boolean securityIndexMappingUpToDate(ClusterState clusterState, Logger logger) {, +        return checkMappingVersions(clusterState, logger, Version.CURRENT::equals);, +    private static boolean checkMappingVersions(ClusterState clusterState, Logger logger, Predicate<Version> versionPredicate) {, +        return IndexLifecycleManager.checkIndexMappingVersionMatches(SECURITY_INDEX_NAME, clusterState, logger, versionPredicate);, +     * Prepares the security index by creating it if it doesn't exist or updating the mappings if the mappings are, +     * out of date. After any tasks have been executed, the runnable is then executed., +    public void prepareIndexIfNeededThenExecute(final Consumer<Exception> consumer, final Runnable andThen) {, +            securityIndex.prepareIndexIfNeededThenExecute(consumer, andThen);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +        if (Strings.isNullOrEmpty(tokenString)) {, +                        lifecycleService.prepareIndexIfNeededThenExecute(listener::onFailure, () -> {, +        if (lifecycleService.isSecurityIndexExisting() == false) {, +            // index doesn't exist so the token is considered valid., +            listener.onResponse(userToken);, +        } else {, +            lifecycleService.prepareIndexIfNeededThenExecute(listener::onFailure, () ->, +                        }, client::get));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +            String auditIndex = IndexAuditTrail.INDEX_NAME_PREFIX + "*";, +                            " restrictive. disable [action.auto_create_index] or set it to include " +, +                            "[{}]", (Object) value, auditIndex);, +            List<String> indices = new ArrayList<>();, +            templates.remove(SECURITY_TEMPLATE_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import java.util.function.Consumer;, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME);, +    /**, +     * Returns {@code true} if the security index exists, +     */, +    /**, +     * Returns <code>true</code> if the security index does not exist or it exists and has the current, +     * value for the <code>index.format</code> index setting]