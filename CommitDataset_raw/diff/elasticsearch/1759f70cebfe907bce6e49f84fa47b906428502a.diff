[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +            // openJobIds are excluded, +            // openJobIds are excluded, +            // openJobIds are excluded, +                List<String> openJobIds = new ArrayList<>();, +                List<String> closingJobIds = new ArrayList<>();, +                resolveAndValidateJobId(request.getJobId(), state, openJobIds, closingJobIds, request.isForce());, +                request.setOpenJobIds(openJobIds.toArray(new String[0]));, +                if (openJobIds.isEmpty() && closingJobIds.isEmpty()) {, +                    List<String> jobIdsToForceClose = new ArrayList<>(openJobIds);, +                    jobIdsToForceClose.addAll(closingJobIds);, +                    forceCloseJob(state, request, jobIdsToForceClose, listener);, +                    normalCloseJob(state, task, request, openJobIds, closingJobIds, listener);, +        private void forceCloseJob(ClusterState currentState, Request request, List<String> jobIdsToForceClose,, +                                   ActionListener<Response> listener) {, +            final int numberOfJobs = jobIdsToForceClose.size();, +            for (String jobId : jobIdsToForceClose) {, +        private void normalCloseJob(ClusterState currentState, Task task, Request request,, +                                    List<String> openJobIds, List<String> closingJobIds,, +                                    ActionListener<Response> listener) {, +            WaitForCloseRequest waitForCloseRequest = buildWaitForCloseRequest(openJobIds, closingJobIds, tasks, auditor);, +            boolean noOpenJobsToClose = openJobIds.isEmpty();, +     * Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added, +     * to {@code openJobIds} if allowFailed is set otherwise an exception is thrown., +     * @param openJobIds Opened or failed jobs are added to this list, +     * @param closingJobIds Closing jobs are added to this list, +     * @param allowFailed Whether failed jobs are allowed, if yes, they are added to {@code openJobIds}, +    static void resolveAndValidateJobId(String jobId, ClusterState state, List<String> openJobIds, List<String> closingJobIds,, +            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs);, +        openJobIds.addAll(failedJobs);, +    static TransportAction.WaitForCloseRequest buildWaitForCloseRequest(List<String> openJobIds, List<String> closingJobIds,, +        for (String jobId : openJobIds) {, +        for (String jobId : closingJobIds) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +            // openJobIds are excluded, +            // openJobIds are excluded, +            // openJobIds are excluded, +                List<String> openJobIds = new ArrayList<>();, +                List<String> closingJobIds = new ArrayList<>();, +                resolveAndValidateJobId(request.getJobId(), state, openJobIds, closingJobIds, request.isForce());, +                request.setOpenJobIds(openJobIds.toArray(new String[0]));, +                if (openJobIds.isEmpty() && closingJobIds.isEmpty()) {, +                    List<String> jobIdsToForceClose = new ArrayList<>(openJobIds);, +                    jobIdsToForceClose.addAll(closingJobIds);, +                    forceCloseJob(state, request, jobIdsToForceClose, listener);, +                    normalCloseJob(state, task, request, openJobIds, closingJobIds, listener);, +        private void forceCloseJob(ClusterState currentState, Request request, List<String> jobIdsToForceClose,, +                                   ActionListener<Response> listener) {, +            final int numberOfJobs = jobIdsToForceClose.size();, +            for (String jobId : jobIdsToForceClose) {, +        private void normalCloseJob(ClusterState currentState, Task task, Request request,, +                                    List<String> openJobIds, List<String> closingJobIds,, +                                    ActionListener<Response> listener) {, +            WaitForCloseRequest waitForCloseRequest = buildWaitForCloseRequest(openJobIds, closingJobIds, tasks, auditor);, +            boolean noOpenJobsToClose = openJobIds.isEmpty();, +     * Opened jobs are added to {@code openJobIds} and closing jobs added to {@code closingJobIds}. Failed jobs are added, +     * to {@code openJobIds} if allowFailed is set otherwise an exception is thrown., +     * @param openJobIds Opened or failed jobs are added to this list, +     * @param closingJobIds Closing jobs are added to this list, +     * @param allowFailed Whether failed jobs are allowed, if yes, they are added to {@code openJobIds}, +    static void resolveAndValidateJobId(String jobId, ClusterState state, List<String> openJobIds, List<String> closingJobIds,, +            addJobAccordingToState(id, tasksMetaData, openJobIds, closingJobIds, failedJobs);, +        openJobIds.addAll(failedJobs);, +    static TransportAction.WaitForCloseRequest buildWaitForCloseRequest(List<String> openJobIds, List<String> closingJobIds,, +        for (String jobId : openJobIds) {, +        for (String jobId : closingJobIds) {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/CloseJobActionRequestTests.java, +        List<String> openJobIds = Arrays.asList(new String[] {"openjob1", "openjob2"});, +        List<String> closingJobIds = Arrays.asList(new String[] {"closingjob1"});, +                CloseJobAction.buildWaitForCloseRequest(openJobIds, closingJobIds, tasksBuilder.build(), mock(Auditor.class));, +        waitForCloseRequest = CloseJobAction.buildWaitForCloseRequest(Collections.emptyList(), Collections.emptyList(),, +                tasksBuilder.build(), mock(Auditor.class));]