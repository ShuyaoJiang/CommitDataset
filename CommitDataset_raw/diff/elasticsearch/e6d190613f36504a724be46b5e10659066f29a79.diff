[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.stream.Collectors, +        boolean hasBwcNodes = config.numBwcNodes > 0, +        if (hasBwcNodes) {, +                    if (hasBwcNodes == false && esConfig['discovery.type'] == null) {, +                        esConfig['discovery.type'] = 'zen2', +                        esConfig['cluster.initial_master_nodes'] = nodes.stream().map({ n ->, +                            if (n.config.settings['node.name'] == null) {, +                                return "node-" + n.nodeNum, +                            } else {, +                                return n.config.settings['node.name'], +                            }, +                        }).collect(Collectors.toList()), +                    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.stream.Collectors, +        boolean hasBwcNodes = config.numBwcNodes > 0, +        if (hasBwcNodes) {, +                    if (hasBwcNodes == false && esConfig['discovery.type'] == null) {, +                        esConfig['discovery.type'] = 'zen2', +                        esConfig['cluster.initial_master_nodes'] = nodes.stream().map({ n ->, +                            if (n.config.settings['node.name'] == null) {, +                                return "node-" + n.nodeNum, +                            } else {, +                                return n.config.settings['node.name'], +                            }, +                        }).collect(Collectors.toList()), +                    }, +++ b/docs/reference/modules/node.asciidoc, +// TEST[skip:Test use Zen2 now so we can't test Zen1 behaviour here], +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.stream.Collectors, +        boolean hasBwcNodes = config.numBwcNodes > 0, +        if (hasBwcNodes) {, +                    if (hasBwcNodes == false && esConfig['discovery.type'] == null) {, +                        esConfig['discovery.type'] = 'zen2', +                        esConfig['cluster.initial_master_nodes'] = nodes.stream().map({ n ->, +                            if (n.config.settings['node.name'] == null) {, +                                return "node-" + n.nodeNum, +                            } else {, +                                return n.config.settings['node.name'], +                            }, +                        }).collect(Collectors.toList()), +                    }, +++ b/docs/reference/modules/node.asciidoc, +// TEST[skip:Test use Zen2 now so we can't test Zen1 behaviour here], +++ b/qa/rolling-upgrade/build.gradle, +      // TODO: Move to Zen2 once we support rolling upgrade with Zen2, +      setting 'discovery.type', 'zen', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.stream.Collectors, +        boolean hasBwcNodes = config.numBwcNodes > 0, +        if (hasBwcNodes) {, +                    if (hasBwcNodes == false && esConfig['discovery.type'] == null) {, +                        esConfig['discovery.type'] = 'zen2', +                        esConfig['cluster.initial_master_nodes'] = nodes.stream().map({ n ->, +                            if (n.config.settings['node.name'] == null) {, +                                return "node-" + n.nodeNum, +                            } else {, +                                return n.config.settings['node.name'], +                            }, +                        }).collect(Collectors.toList()), +                    }, +++ b/docs/reference/modules/node.asciidoc, +// TEST[skip:Test use Zen2 now so we can't test Zen1 behaviour here], +++ b/qa/rolling-upgrade/build.gradle, +      // TODO: Move to Zen2 once we support rolling upgrade with Zen2, +      setting 'discovery.type', 'zen', +++ b/qa/unconfigured-node-name/build.gradle, +  // TODO: Run this using zen2, +  setting 'discovery.type', 'zen', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.stream.Collectors, +        boolean hasBwcNodes = config.numBwcNodes > 0, +        if (hasBwcNodes) {, +                    if (hasBwcNodes == false && esConfig['discovery.type'] == null) {, +                        esConfig['discovery.type'] = 'zen2', +                        esConfig['cluster.initial_master_nodes'] = nodes.stream().map({ n ->, +                            if (n.config.settings['node.name'] == null) {, +                                return "node-" + n.nodeNum, +                            } else {, +                                return n.config.settings['node.name'], +                            }, +                        }).collect(Collectors.toList()), +                    }, +++ b/docs/reference/modules/node.asciidoc, +// TEST[skip:Test use Zen2 now so we can't test Zen1 behaviour here], +++ b/qa/rolling-upgrade/build.gradle, +      // TODO: Move to Zen2 once we support rolling upgrade with Zen2, +      setting 'discovery.type', 'zen', +++ b/qa/unconfigured-node-name/build.gradle, +  // TODO: Run this using zen2, +  setting 'discovery.type', 'zen', +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterBootstrapService.java, +        if ((initialMasterNodeCount > 0 || initialMasterNodes.isEmpty() == false) && transportService.getLocalNode().isMasterNode()) {, +                if (initialMasterNodeCount > 0) {, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.stream.Collectors, +        boolean hasBwcNodes = config.numBwcNodes > 0]