[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +import java.util.ArrayList;, +    public static enum ScoreMode {First, Avg, Max, Total}, +, +    final ScoreMode scoreMode;, +    public FiltersFunctionScoreQuery(Query subQuery, ScoreMode scoreMode, FilterFunction[] filterFunctions) {, +        this.scoreMode = scoreMode;, +            return new CustomBoostFactorScorer(getSimilarity(searcher), this, subQueryScorer, scoreMode, filterFunctions, docSets);, +            if (scoreMode == ScoreMode.First) {, +            } else {, +                int count = 0;, +                float total = 0;, +                float max = Float.NEGATIVE_INFINITY;, +                ArrayList<Explanation> filtersExplanations = new ArrayList<Explanation>();, +                for (FilterFunction filterFunction : filterFunctions) {, +                    DocSet docSet = DocSets.convert(reader, filterFunction.filter.getDocIdSet(reader));, +                    if (docSet.get(doc)) {, +                        filterFunction.function.setNextReader(reader);, +                        Explanation functionExplanation = filterFunction.function.explain(doc, subQueryExpl);, +                        float sc = functionExplanation.getValue();, +                        count++;, +                        total += sc;, +                        max = Math.max(sc, max);, +                        Explanation res = new ComplexExplanation(true, sc, "custom score, product of:");, +                        res.addDetail(new Explanation(1.0f, "match filter: " + filterFunction.filter.toString()));, +                        res.addDetail(functionExplanation);, +                        res.addDetail(new Explanation(getValue(), "queryBoost"));, +                        filtersExplanations.add(res);, +                    }, +                }, +                if (count > 0) {, +                    float sc = 0;, +                    switch (scoreMode) {, +                        case Avg:, +                            sc = total / count;, +                            break;, +                        case Max:, +                            sc = max;, +                            break;, +                        case Total:, +                            sc = total;, +                            break;, +                    }, +                    sc *= getValue();, +                    Explanation res = new ComplexExplanation(true, sc, "custom score, score mode [" + scoreMode.toString().toLowerCase() + "]");, +                    for (Explanation explanation : filtersExplanations) {, +                        res.addDetail(explanation);, +                    }, +                    return res;, +                }, +            }, +        private final ScoreMode scoreMode;, +                                        ScoreMode scoreMode, FilterFunction[] filterFunctions, DocSet[] docSets) throws IOException {, +            this.scoreMode = scoreMode;, +            if (scoreMode == ScoreMode.First) {, +            } else if (scoreMode == ScoreMode.Max) {, +                float maxScore = Float.NEGATIVE_INFINITY;, +                for (int i = 0; i < filterFunctions.length; i++) {, +                    if (docSets[i].get(docId)) {, +                        maxScore = Math.max(filterFunctions[i].function.score(docId, score), maxScore);, +                    }, +                }, +                if (maxScore != Float.NEGATIVE_INFINITY) {, +                    score = maxScore;, +                }, +            } else { // Avg / Total, +                float totalScore = 0.0f;, +                int count = 0;, +                for (int i = 0; i < filterFunctions.length; i++) {, +                    if (docSets[i].get(docId)) {, +                        totalScore += filterFunctions[i].function.score(docId, score);, +                        count++;, +                    }, +                }, +                if (count != 0) {, +                    score = totalScore;, +                    if (scoreMode == ScoreMode.Avg) {, +                        score /= count;, +                    }, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +import java.util.ArrayList;, +    public static enum ScoreMode {First, Avg, Max, Total}, +, +    final ScoreMode scoreMode;, +    public FiltersFunctionScoreQuery(Query subQuery, ScoreMode scoreMode, FilterFunction[] filterFunctions) {, +        this.scoreMode = scoreMode;, +            return new CustomBoostFactorScorer(getSimilarity(searcher), this, subQueryScorer, scoreMode, filterFunctions, docSets);, +            if (scoreMode == ScoreMode.First) {, +            } else {, +                int count = 0;, +                float total = 0;, +                float max = Float.NEGATIVE_INFINITY;, +                ArrayList<Explanation> filtersExplanations = new ArrayList<Explanation>();, +                for (FilterFunction filterFunction : filterFunctions) {, +                    DocSet docSet = DocSets.convert(reader, filterFunction.filter.getDocIdSet(reader));, +                    if (docSet.get(doc)) {, +                        filterFunction.function.setNextReader(reader);, +                        Explanation functionExplanation = filterFunction.function.explain(doc, subQueryExpl);]