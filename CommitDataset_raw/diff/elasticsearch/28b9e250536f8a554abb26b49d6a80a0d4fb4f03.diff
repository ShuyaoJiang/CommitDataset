[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/RoutingFieldMapper.java, +            builder.field("index", indexTokenizeOptionToString(fieldType.indexed(), fieldType.tokenized()));, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/RoutingFieldMapper.java, +            builder.field("index", indexTokenizeOptionToString(fieldType.indexed(), fieldType.tokenized()));, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +                builder.field("index", indexTokenizeOptionToString(fieldType.indexed(), fieldType.tokenized()));, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/RoutingFieldMapper.java, +            builder.field("index", indexTokenizeOptionToString(fieldType.indexed(), fieldType.tokenized()));, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +                builder.field("index", indexTokenizeOptionToString(fieldType.indexed(), fieldType.tokenized()));, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/routing/RoutingTypeMapperTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Map;, +, +import static org.hamcrest.Matchers.*;, +, +    @Test, +    public void testSetValues() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_routing"), +                    .field("store", "no"), +                    .field("index", "no"), +                    .field("path", "route"), +                .endObject(), +                .endObject().endObject().string();, +        DocumentMapper docMapper = MapperTests.newParser().parse(mapping);, +        assertThat(docMapper.routingFieldMapper().fieldType().stored(), equalTo(false));, +        assertThat(docMapper.routingFieldMapper().fieldType().indexed(), equalTo(false));, +        assertThat(docMapper.routingFieldMapper().path(), equalTo("route"));, +    }, +, +    @Test, +    public void testThatSerializationWorksCorrectlyForIndexField() throws Exception {, +        String enabledMapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_routing").field("store", "no").field("index", "no").endObject(), +                .endObject().endObject().string();, +        DocumentMapper enabledMapper = MapperTests.newParser().parse(enabledMapping);, +, +        XContentBuilder builder = JsonXContent.contentBuilder().startObject();, +        enabledMapper.routingFieldMapper().toXContent(builder, null).endObject();, +        builder.close();, +        Map<String, Object> serializedMap = JsonXContent.jsonXContent.createParser(builder.bytes()).mapAndClose();, +        assertThat(serializedMap, hasKey("_routing"));, +        assertThat(serializedMap.get("_routing"), instanceOf(Map.class));, +        Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing");, +        assertThat(routingConfiguration, hasKey("store"));, +        assertThat(routingConfiguration.get("store").toString(), is("false"));, +        assertThat(routingConfiguration, hasKey("index"));, +        assertThat(routingConfiguration.get("index").toString(), is("no"));, +    }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/RoutingFieldMapper.java, +            builder.field("index", indexTokenizeOptionToString(fieldType.indexed(), fieldType.tokenized()));, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +                builder.field("index", indexTokenizeOptionToString(fieldType.indexed(), fieldType.tokenized()));, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/routing/RoutingTypeMapperTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Map;, +, +import static org.hamcrest.Matchers.*;, +, +    @Test, +    public void testSetValues() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_routing"), +                    .field("store", "no"), +                    .field("index", "no"), +                    .field("path", "route"), +                .endObject(), +                .endObject().endObject().string();, +        DocumentMapper docMapper = MapperTests.newParser().parse(mapping);, +        assertThat(docMapper.routingFieldMapper().fieldType().stored(), equalTo(false));, +        assertThat(docMapper.routingFieldMapper().fieldType().indexed(), equalTo(false));, +        assertThat(docMapper.routingFieldMapper().path(), equalTo("route"));, +    }, +, +    @Test, +    public void testThatSerializationWorksCorrectlyForIndexField() throws Exception {, +        String enabledMapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_routing").field("store", "no").field("index", "no").endObject(), +                .endObject().endObject().string();, +        DocumentMapper enabledMapper = MapperTests.newParser().parse(enabledMapping);, +, +        XContentBuilder builder = JsonXContent.contentBuilder().startObject();, +        enabledMapper.routingFieldMapper().toXContent(builder, null).endObject();, +        builder.close();, +        Map<String, Object> serializedMap = JsonXContent.jsonXContent.createParser(builder.bytes()).mapAndClose();, +        assertThat(serializedMap, hasKey("_routing"));, +        assertThat(serializedMap.get("_routing"), instanceOf(Map.class));, +        Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing");, +        assertThat(routingConfiguration, hasKey("store"));, +        assertThat(routingConfiguration.get("store").toString(), is("false"));, +        assertThat(routingConfiguration, hasKey("index"));, +        assertThat(routingConfiguration.get("index").toString(), is("no"));, +    }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/timestamp/TimestampMappingTests.java, +import java.util.Map;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import static org.hamcrest.Matchers.*;]