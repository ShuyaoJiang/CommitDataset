[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +    private final transient int totalNumberOfShards; // Transient ? not serializable anyway?, +    private final int numberOfShards;, +, +, +        int numberOfShards = 0;, +            numberOfShards += indexMetaData.numberOfShards();, +        this.numberOfShards = numberOfShards;, +    public int numberOfShards() {, +        return this.numberOfShards;, +    }, +, +    public int getnumberOfShards() {, +        return numberOfShards();, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +    private final transient int totalNumberOfShards; // Transient ? not serializable anyway?, +    private final int numberOfShards;, +, +, +        int numberOfShards = 0;, +            numberOfShards += indexMetaData.numberOfShards();, +        this.numberOfShards = numberOfShards;, +    public int numberOfShards() {, +        return this.numberOfShards;, +    }, +, +    public int getnumberOfShards() {, +        return numberOfShards();, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +    private final transient int totalNumberOfShards; // Transient ? not serializable anyway?, +    private final int numberOfShards;, +, +, +        int numberOfShards = 0;, +            numberOfShards += indexMetaData.numberOfShards();, +        this.numberOfShards = numberOfShards;, +    public int numberOfShards() {, +        return this.numberOfShards;, +    }, +, +    public int getnumberOfShards() {, +        return numberOfShards();, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.routing.allocation.allocator;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Comparator;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.TreeSet;, +, +import org.apache.lucene.util.SorterTemplate;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.routing.IndexRoutingTable;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.RoutingNodes;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.cluster.routing.allocation.FailedRerouteAllocation;, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +import org.elasticsearch.cluster.routing.allocation.StartedRerouteAllocation;, +import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;, +import org.elasticsearch.cluster.routing.allocation.decider.Decision;, +import org.elasticsearch.cluster.routing.allocation.decider.Decision.Type;]