[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.apache.lucene.util.UnicodeUtil;, +import java.util.Arrays;, +    private byte[] source;, +    private int sourceOffset;, +    private int sourceLength;, +    private boolean sourceUnsafe;, +, +    private OpType opType = OpType.INDEX;, +        if (source == null) {, +     * Before we fork on a local thread, make sure we copy over the bytes if they are unsafe, +     */, +    @Override protected void beforeLocalFork() {, +        source();, +    }, +, +    /**, +        if (sourceUnsafe) {, +            source = Arrays.copyOfRange(source, sourceOffset, sourceLength);, +            sourceUnsafe = false;, +     * Writes the Map as the provided content type., +            return source(builder);, +     * Sets the document source to index., +        UnicodeUtil.UTF8Result result = Unicode.fromStringAsUtf8(source);, +        this.source = result.result;, +        this.sourceOffset = 0;, +        this.sourceLength = result.length;, +        this.sourceUnsafe = true;, +        try {, +            source = sourceBuilder.unsafeBytes();, +            sourceOffset = 0;, +            sourceLength = sourceBuilder.unsafeBytesLength();, +            sourceUnsafe = true;, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + sourceBuilder + "]", e);, +        }, +     * Sets the document to index in bytes form., +    public IndexRequest source(byte[] source) {, +        return source(source, 0, source.length);, +    }, +, +    /**, +     * Sets the document to index in bytes form (assumed to be safe to be used from different, +     * threads)., +     *, +     * @param source The source to index, +     * @param offset The offset in the byte array, +     * @param length The length of the data, +     * @return, +     */, +    @Required public IndexRequest source(byte[] source, int offset, int length) {, +        return source(source, offset, length, false);, +    }, +, +    /**, +     * Sets the document to index in bytes form., +     *, +     * @param source The source to index, +     * @param offset The offset in the byte array, +     * @param length The length of the data, +     * @param unsafe Is the byte array safe to be used form a different thread, +     * @return, +     */, +    @Required public IndexRequest source(byte[] source, int offset, int length, boolean unsafe) {, +        this.sourceOffset = offset;, +        this.sourceLength = length;, +        this.sourceUnsafe = unsafe;, +, +        sourceUnsafe = false;, +        sourceOffset = 0;, +        sourceLength = in.readVInt();, +        source = new byte[sourceLength];, +, +        out.writeVInt(sourceLength);, +        out.writeBytes(source, sourceOffset, sourceLength);, +        return "[" + index + "][" + type + "][" + id + "], source[" + Unicode.fromBytes(source, sourceOffset, sourceLength) + "]";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.apache.lucene.util.UnicodeUtil;, +import java.util.Arrays;, +    private byte[] source;, +    private int sourceOffset;, +    private int sourceLength;, +    private boolean sourceUnsafe;, +, +    private OpType opType = OpType.INDEX;, +        if (source == null) {, +     * Before we fork on a local thread, make sure we copy over the bytes if they are unsafe, +     */, +    @Override protected void beforeLocalFork() {, +        source();, +    }, +, +    /**, +        if (sourceUnsafe) {, +            source = Arrays.copyOfRange(source, sourceOffset, sourceLength);, +            sourceUnsafe = false;, +     * Writes the Map as the provided content type., +            return source(builder);, +     * Sets the document source to index., +        UnicodeUtil.UTF8Result result = Unicode.fromStringAsUtf8(source);]