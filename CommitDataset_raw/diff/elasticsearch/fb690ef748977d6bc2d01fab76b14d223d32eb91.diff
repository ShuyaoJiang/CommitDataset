[+++ b/core/build.gradle, +  testCompile 'com.google.jimfs:jimfs:1.1', +  testCompile 'com.google.guava:guava:18.0', +++ b/core/build.gradle, +  testCompile 'com.google.jimfs:jimfs:1.1', +  testCompile 'com.google.guava:guava:18.0', +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.settings.KeyStoreWrapper;, +    private static KeyStoreWrapper loadKeyStore(Environment env0) throws BootstrapException {, +        final KeyStoreWrapper keystore;, +        try {, +            keystore = KeyStoreWrapper.loadMetadata(env0.configFile());, +        } catch (IOException e) {, +            throw new BootstrapException(e);, +        }, +        if (keystore == null) {, +            return null; // no keystore, +        }, +, +        try {, +            keystore.loadKeystore(new char[0] /* TODO: read password from stdin */);, +        } catch (Exception e) {, +            throw new BootstrapException(e);, +        }, +        return keystore;, +    }, +, +    private static Environment initialEnvironment(boolean foreground, Path pidFile,, +                                                  KeyStoreWrapper keystore, Settings initialSettings) {, +        builder.setKeyStore(keystore);, +            final Environment env0) throws BootstrapException, NodeValidationException, UserException {, +        final KeyStoreWrapper keystore = loadKeyStore(env0);, +        Environment environment = initialEnvironment(foreground, pidFile, keystore, env0.settings());, +            try {, +                // any secure settings must be read during node construction, +                IOUtils.close(keystore);, +            } catch (IOException e) {, +                throw new BootstrapException(e);, +            }, +, +++ b/core/build.gradle, +  testCompile 'com.google.jimfs:jimfs:1.1', +  testCompile 'com.google.guava:guava:18.0', +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.settings.KeyStoreWrapper;, +    private static KeyStoreWrapper loadKeyStore(Environment env0) throws BootstrapException {, +        final KeyStoreWrapper keystore;, +        try {, +            keystore = KeyStoreWrapper.loadMetadata(env0.configFile());, +        } catch (IOException e) {, +            throw new BootstrapException(e);, +        }, +        if (keystore == null) {, +            return null; // no keystore, +        }, +, +        try {, +            keystore.loadKeystore(new char[0] /* TODO: read password from stdin */);, +        } catch (Exception e) {, +            throw new BootstrapException(e);, +        }, +        return keystore;, +    }, +, +    private static Environment initialEnvironment(boolean foreground, Path pidFile,, +                                                  KeyStoreWrapper keystore, Settings initialSettings) {, +        builder.setKeyStore(keystore);, +            final Environment env0) throws BootstrapException, NodeValidationException, UserException {, +        final KeyStoreWrapper keystore = loadKeyStore(env0);, +        Environment environment = initialEnvironment(foreground, pidFile, keystore, env0.settings());, +            try {, +                // any secure settings must be read during node construction, +                IOUtils.close(keystore);, +            } catch (IOException e) {, +                throw new BootstrapException(e);, +            }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapException.java, + * {@link Bootstrap#init(boolean, Path, boolean, org.elasticsearch.env.Environment)}, +++ b/core/build.gradle, +  testCompile 'com.google.jimfs:jimfs:1.1', +  testCompile 'com.google.guava:guava:18.0', +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.settings.KeyStoreWrapper;, +    private static KeyStoreWrapper loadKeyStore(Environment env0) throws BootstrapException {, +        final KeyStoreWrapper keystore;, +        try {, +            keystore = KeyStoreWrapper.loadMetadata(env0.configFile());, +        } catch (IOException e) {, +            throw new BootstrapException(e);, +        }, +        if (keystore == null) {, +            return null; // no keystore, +        }, +, +        try {, +            keystore.loadKeystore(new char[0] /* TODO: read password from stdin */);, +        } catch (Exception e) {, +            throw new BootstrapException(e);, +        }]