[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java, +import static org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.*;, +, +    private final int flags;, +        int flags = 0;, +        // If set, causes parts of words to be generated: "PowerShot" => "Power" "Shot", +        flags |= getFlag(GENERATE_WORD_PARTS ,settings, "generate_word_parts", true);, +        // If set, causes number subwords to be generated: "500-42" => "500" "42", +        flags |= getFlag(GENERATE_WORD_PARTS, settings,"generate_number_parts", true);, +        flags |= getFlag(CATENATE_WORDS, settings,"catenate_words", false);, +        // If set, causes maximum runs of number parts to be catenated: "500-42" => "50042", +        flags |= getFlag(CATENATE_NUMBERS, settings,"catenate_numbers", false);, +        // If set, causes all subword parts to be catenated: "wi-fi-4000" => "wifi4000", +        flags |= getFlag(CATENATE_ALL,settings,"catenate_all", false);, +        flags |= getFlag(SPLIT_ON_CASE_CHANGE, settings,"split_on_case_change", true);, +        // If set, includes original words in subwords: "500-42" => "500" "42" "500-42", +        flags |= getFlag(PRESERVE_ORIGINAL, settings,"preserve_original", false);, +        flags |= getFlag(SPLIT_ON_NUMERICS, settings,"split_on_numerics", true);, +        // If set, causes trailing "'s" to be removed for each subword: "O'Neil's" => "O", "Neil", +        flags |= getFlag(STEM_ENGLISH_POSSESSIVE, settings,"stem_english_possessive", true);, +        this.flags = flags;, +                flags,, +    public int getFlag(int flag, Settings settings, String key, boolean defaultValue) {, +        if (settings.getAsBoolean(key, true)) {, +            return 0;, +        }, +        return flag;, +    }, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/analysis/WordDelimiterTokenFilterFactory.java, +import static org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter.*;, +, +    private final int flags;, +        int flags = 0;, +        // If set, causes parts of words to be generated: "PowerShot" => "Power" "Shot", +        flags |= getFlag(GENERATE_WORD_PARTS ,settings, "generate_word_parts", true);, +        // If set, causes number subwords to be generated: "500-42" => "500" "42", +        flags |= getFlag(GENERATE_WORD_PARTS, settings,"generate_number_parts", true);, +        flags |= getFlag(CATENATE_WORDS, settings,"catenate_words", false);, +        // If set, causes maximum runs of number parts to be catenated: "500-42" => "50042", +        flags |= getFlag(CATENATE_NUMBERS, settings,"catenate_numbers", false);, +        // If set, causes all subword parts to be catenated: "wi-fi-4000" => "wifi4000", +        flags |= getFlag(CATENATE_ALL,settings,"catenate_all", false);, +        flags |= getFlag(SPLIT_ON_CASE_CHANGE, settings,"split_on_case_change", true);, +        // If set, includes original words in subwords: "500-42" => "500" "42" "500-42", +        flags |= getFlag(PRESERVE_ORIGINAL, settings,"preserve_original", false);, +        flags |= getFlag(SPLIT_ON_NUMERICS, settings,"split_on_numerics", true);, +        // If set, causes trailing "'s" to be removed for each subword: "O'Neil's" => "O", "Neil", +        flags |= getFlag(STEM_ENGLISH_POSSESSIVE, settings,"stem_english_possessive", true);, +        this.flags = flags;, +                flags,, +    public int getFlag(int flag, Settings settings, String key, boolean defaultValue) {, +        if (settings.getAsBoolean(key, true)) {, +            return 0;, +        }, +        return flag;, +    }, +, +++ b/src/main/java/org/elasticsearch/indices/analysis/IndicesAnalysisService.java, +                return new WordDelimiterFilter(tokenStream, , +                        WordDelimiterFilter.GENERATE_WORD_PARTS |, +                        WordDelimiterFilter.GENERATE_NUMBER_PARTS |, +                        WordDelimiterFilter.SPLIT_ON_CASE_CHANGE | , +                        WordDelimiterFilter.SPLIT_ON_NUMERICS |, +                        WordDelimiterFilter.STEM_ENGLISH_POSSESSIVE, null);]