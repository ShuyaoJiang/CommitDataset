[+++ b/src/main/java/org/elasticsearch/client/transport/NoNodeAvailableException.java, +import org.elasticsearch.rest.RestStatus;, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.SERVICE_UNAVAILABLE;, +    }, +++ b/src/main/java/org/elasticsearch/client/transport/NoNodeAvailableException.java, +import org.elasticsearch.rest.RestStatus;, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.SERVICE_UNAVAILABLE;, +    }, +++ b/src/main/java/org/elasticsearch/cluster/block/ClusterBlock.java, +import org.elasticsearch.rest.RestStatus;, +    private RestStatus status;, +, +    public ClusterBlock(int id, String description, boolean retryable, boolean disableStatePersistence, RestStatus status, ClusterBlockLevel... levels) {, +        this.status = status;, +    public RestStatus status() {, +        return this.status;, +    }, +, +        status = RestStatus.readFrom(in);, +        RestStatus.writeTo(out, status);, +++ b/src/main/java/org/elasticsearch/client/transport/NoNodeAvailableException.java, +import org.elasticsearch.rest.RestStatus;, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.SERVICE_UNAVAILABLE;, +    }, +++ b/src/main/java/org/elasticsearch/cluster/block/ClusterBlock.java, +import org.elasticsearch.rest.RestStatus;, +    private RestStatus status;, +, +    public ClusterBlock(int id, String description, boolean retryable, boolean disableStatePersistence, RestStatus status, ClusterBlockLevel... levels) {, +        this.status = status;, +    public RestStatus status() {, +        return this.status;, +    }, +, +        status = RestStatus.readFrom(in);, +        RestStatus.writeTo(out, status);, +++ b/src/main/java/org/elasticsearch/cluster/block/ClusterBlockException.java, +            sb.append("[").append(block.status()).append("/").append(block.id()).append("/").append(block.description()).append("];");, +        RestStatus status = null;, +        for (ClusterBlock block : blocks) {, +            if (status == null) {, +                status = block.status();, +            } else if (status.getStatus() < block.status().getStatus()) {, +                status = block.status();, +            }, +        }, +        return status;, +++ b/src/main/java/org/elasticsearch/client/transport/NoNodeAvailableException.java, +import org.elasticsearch.rest.RestStatus;, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.SERVICE_UNAVAILABLE;, +    }, +++ b/src/main/java/org/elasticsearch/cluster/block/ClusterBlock.java, +import org.elasticsearch.rest.RestStatus;, +    private RestStatus status;, +, +    public ClusterBlock(int id, String description, boolean retryable, boolean disableStatePersistence, RestStatus status, ClusterBlockLevel... levels) {, +        this.status = status;, +    public RestStatus status() {, +        return this.status;, +    }, +, +        status = RestStatus.readFrom(in);, +        RestStatus.writeTo(out, status);, +++ b/src/main/java/org/elasticsearch/cluster/block/ClusterBlockException.java, +            sb.append("[").append(block.status()).append("/").append(block.id()).append("/").append(block.description()).append("];");, +        RestStatus status = null;, +        for (ClusterBlock block : blocks) {, +            if (status == null) {, +                status = block.status();, +            } else if (status.getStatus() < block.status().getStatus()) {, +                status = block.status();, +            }, +        }, +        return status;, +++ b/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    public void globalBlockedRaiseException(ClusterBlockLevel level) throws ClusterBlockException {, +        ClusterBlockException blockException = globalBlockedException(level);, +        if (blockException != null) {, +            throw blockException;, +        }, +    }, +, +    public ClusterBlockException globalBlockedException(ClusterBlockLevel level) {, +        if (global(level).isEmpty()) {, +            return null;, +        }, +        return new ClusterBlockException(ImmutableSet.copyOf(global(level)));, +    }]