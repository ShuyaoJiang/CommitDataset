[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java, +        /**, +         * Read from a stream., +         */, +        public Range(StreamInput in) throws IOException {, +            key = in.readOptionalString();, +            fromAsStr = in.readOptionalString();, +            toAsStr = in.readOptionalString();, +            from = in.readDouble();, +            to = in.readDouble();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(key);, +            out.writeOptionalString(fromAsStr);, +            out.writeOptionalString(toAsStr);, +            out.writeDouble(from);, +            out.writeDouble(to);, +        }, +, +, +        public static Range fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java, +        /**, +         * Read from a stream., +         */, +        public Range(StreamInput in) throws IOException {, +            key = in.readOptionalString();, +            fromAsStr = in.readOptionalString();, +            toAsStr = in.readOptionalString();, +            from = in.readDouble();, +            to = in.readDouble();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(key);, +            out.writeOptionalString(fromAsStr);, +            out.writeOptionalString(toAsStr);, +            out.writeDouble(from);, +            out.writeDouble(to);, +        }, +, +, +        public static Range fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregatorBuilder.java, +        super(in, InternalRange.FACTORY, Range::new);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java, +        /**, +         * Read from a stream., +         */, +        public Range(StreamInput in) throws IOException {, +            key = in.readOptionalString();, +            fromAsStr = in.readOptionalString();, +            toAsStr = in.readOptionalString();, +            from = in.readDouble();, +            to = in.readDouble();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(key);, +            out.writeOptionalString(fromAsStr);, +            out.writeOptionalString(toAsStr);, +            out.writeDouble(from);, +            out.writeDouble(to);, +        }, +, +, +        public static Range fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregatorBuilder.java, +        super(in, InternalRange.FACTORY, Range::new);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeParser.java, +        return Range.fromXContent(parser, parseFieldMatcher);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java, +        /**, +         * Read from a stream., +         */, +        public Range(StreamInput in) throws IOException {, +            key = in.readOptionalString();, +            fromAsStr = in.readOptionalString();, +            toAsStr = in.readOptionalString();, +            from = in.readDouble();, +            to = in.readDouble();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(key);, +            out.writeOptionalString(fromAsStr);, +            out.writeOptionalString(toAsStr);, +            out.writeDouble(from);, +            out.writeDouble(to);, +        }, +, +, +        public static Range fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregatorBuilder.java, +        super(in, InternalRange.FACTORY, Range::new);]