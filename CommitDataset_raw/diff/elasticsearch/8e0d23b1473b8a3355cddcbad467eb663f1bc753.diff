[+++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +                                      SearchServiceTransportAction searchService, SearchPhaseController searchPhaseController) {, +        super(settings, threadPool, clusterService, searchService, searchPhaseController);, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(EMPTY_DOCS, firstResults, (AtomicArray<? extends FetchSearchResultProvider>) AtomicArray.empty());, +                scrollId = buildScrollId(request.searchType(), firstResults, null);, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +                                      SearchServiceTransportAction searchService, SearchPhaseController searchPhaseController) {, +        super(settings, threadPool, clusterService, searchService, searchPhaseController);, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(EMPTY_DOCS, firstResults, (AtomicArray<? extends FetchSearchResultProvider>) AtomicArray.empty());, +                scrollId = buildScrollId(request.searchType(), firstResults, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +                                                 SearchServiceTransportAction searchService, SearchPhaseController searchPhaseController) {, +        super(settings, threadPool, clusterService, searchService, searchPhaseController);, +        private final AtomicArray<QueryFetchSearchResult> queryFetchResults;, +            queryFetchResults = new AtomicArray<QueryFetchSearchResult>(firstResults.length());, +            final AggregatedDfs dfs = searchPhaseController.aggregateDfs(firstResults);, +            final AtomicInteger counter = new AtomicInteger(firstResults.asList().size());, +            for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                DfsSearchResult dfsResult = entry.value;, +                    executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +                            for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                                DfsSearchResult dfsResult = entry.value;, +                                    executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +                    for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                        final DfsSearchResult dfsResult = entry.value;, +                                        executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +                                executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +        void executeSecondPhase(final int shardRequestId, final DfsSearchResult dfsResult, final AtomicInteger counter, DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +                    queryFetchResults.set(shardRequestId, result);, +                    AsyncAction.this.addShardFailure(shardRequestId, new ShardSearchFailure(t));, +                //, +            sortedShardList = searchPhaseController.sortDocs(queryFetchResults);, +                scrollId = TransportSearchHelper.buildScrollId(request.searchType(), firstResults, null);, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +                                      SearchServiceTransportAction searchService, SearchPhaseController searchPhaseController) {, +        super(settings, threadPool, clusterService, searchService, searchPhaseController);, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(EMPTY_DOCS, firstResults, (AtomicArray<? extends FetchSearchResultProvider>) AtomicArray.empty());, +                scrollId = buildScrollId(request.searchType(), firstResults, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +                                                 SearchServiceTransportAction searchService, SearchPhaseController searchPhaseController) {, +        super(settings, threadPool, clusterService, searchService, searchPhaseController);, +        private final AtomicArray<QueryFetchSearchResult> queryFetchResults;, +            queryFetchResults = new AtomicArray<QueryFetchSearchResult>(firstResults.length());, +            final AggregatedDfs dfs = searchPhaseController.aggregateDfs(firstResults);, +            final AtomicInteger counter = new AtomicInteger(firstResults.asList().size());, +            for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                DfsSearchResult dfsResult = entry.value;, +                    executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +                            for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                                DfsSearchResult dfsResult = entry.value;, +                                    executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +                    for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                        final DfsSearchResult dfsResult = entry.value;, +                                        executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +                                executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +        void executeSecondPhase(final int shardRequestId, final DfsSearchResult dfsResult, final AtomicInteger counter, DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +                    queryFetchResults.set(shardRequestId, result);, +                    AsyncAction.this.addShardFailure(shardRequestId, new ShardSearchFailure(t));, +                //, +            sortedShardList = searchPhaseController.sortDocs(queryFetchResults);, +                scrollId = TransportSearchHelper.buildScrollId(request.searchType(), firstResults, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +                                                  SearchServiceTransportAction searchService, SearchPhaseController searchPhaseController) {, +        super(settings, threadPool, clusterService, searchService, searchPhaseController);, +        final AtomicArray<QuerySearchResult> queryResults;, +        final AtomicArray<FetchSearchResult> fetchResults;, +        final AtomicArray<ExtTIntArrayList> docIdsToLoad;, +            queryResults = new AtomicArray<QuerySearchResult>(firstResults.length());, +            fetchResults = new AtomicArray<FetchSearchResult>(firstResults.length());, +            docIdsToLoad = new AtomicArray<ExtTIntArrayList>(firstResults.length());, +            final AggregatedDfs dfs = searchPhaseController.aggregateDfs(firstResults);, +            final AtomicInteger counter = new AtomicInteger(firstResults.asList().size());, +            for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                DfsSearchResult dfsResult = entry.value;, +                    executeQuery(entry.index, dfsResult, counter, querySearchRequest, node);, +                            for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                                DfsSearchResult dfsResult = entry.value;, +                                    executeQuery(entry.index, dfsResult, counter, querySearchRequest, node);, +                    for (final AtomicArray.Entry<DfsSearchResult> entry : firstResults.asList()) {, +                        final DfsSearchResult dfsResult = entry.value;, +                                        executeQuery(entry.index, dfsResult, counter, querySearchRequest, node);, +                                executeQuery(entry.index, dfsResult, counter, querySearchRequest, node);, +        void executeQuery(final int shardRequestId, final DfsSearchResult dfsResult, final AtomicInteger counter, final QuerySearchRequest querySearchRequest, DiscoveryNode node) {, +                    queryResults.set(shardRequestId, result);, +                    AsyncAction.this.addShardFailure(shardRequestId, new ShardSearchFailure(t));]