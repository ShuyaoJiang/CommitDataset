[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/query/QueryFacetCollector.java, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.QueryWrapperFilter;, +import org.elasticsearch.search.facets.support.AbstractFacetCollector;, +public class QueryFacetCollector extends AbstractFacetCollector {, +    public QueryFacetCollector(String facetName, Query query, FilterCache filterCache) {, +        super(facetName);, +        return new InternalQueryFacet(facetName, count);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/query/QueryFacetCollector.java, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.QueryWrapperFilter;, +import org.elasticsearch.search.facets.support.AbstractFacetCollector;, +public class QueryFacetCollector extends AbstractFacetCollector {, +    public QueryFacetCollector(String facetName, Query query, FilterCache filterCache) {, +        super(facetName);, +        return new InternalQueryFacet(facetName, count);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/statistical/StatisticalFacetCollector.java, +import org.elasticsearch.search.facets.support.AbstractFacetCollector;, +public class StatisticalFacetCollector extends AbstractFacetCollector {, +    public StatisticalFacetCollector(String facetName, String fieldName, FieldDataCache fieldDataCache, MapperService mapperService) {, +        super(facetName);, +            throw new FacetPhaseExecutionException(facetName, "No mapping found for field [" + fieldName + "]");, +        return new InternalStatisticalFacet(facetName, statsProc.min(), statsProc.max(), statsProc.total(), statsProc.sumOfSquares(), statsProc.count());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/query/QueryFacetCollector.java, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.QueryWrapperFilter;, +import org.elasticsearch.search.facets.support.AbstractFacetCollector;, +public class QueryFacetCollector extends AbstractFacetCollector {, +    public QueryFacetCollector(String facetName, Query query, FilterCache filterCache) {, +        super(facetName);, +        return new InternalQueryFacet(facetName, count);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/statistical/StatisticalFacetCollector.java, +import org.elasticsearch.search.facets.support.AbstractFacetCollector;, +public class StatisticalFacetCollector extends AbstractFacetCollector {, +    public StatisticalFacetCollector(String facetName, String fieldName, FieldDataCache fieldDataCache, MapperService mapperService) {, +        super(facetName);, +            throw new FacetPhaseExecutionException(facetName, "No mapping found for field [" + fieldName + "]");, +        return new InternalStatisticalFacet(facetName, statsProc.min(), statsProc.max(), statsProc.total(), statsProc.sumOfSquares(), statsProc.count());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/support/AbstractFacetCollector.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.facets.support;, +, +import org.apache.lucene.search.Scorer;, +import org.elasticsearch.search.facets.collector.FacetCollector;, +, +import java.io.IOException;, +, +/**, + * @author kimchy (shay.banon), + */, +public abstract class AbstractFacetCollector extends FacetCollector {, +, +    protected final String facetName;, +, +    public AbstractFacetCollector(String facetName) {, +        this.facetName = facetName;, +    }, +, +    @Override public void setScorer(Scorer scorer) throws IOException {, +        // usually, there is nothing to do here, +    }, +, +    @Override public boolean acceptsDocsOutOfOrder() {, +        return true; // when working on FieldData, docs can be out of order, +    }, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/query/QueryFacetCollector.java, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.QueryWrapperFilter;, +import org.elasticsearch.search.facets.support.AbstractFacetCollector;, +public class QueryFacetCollector extends AbstractFacetCollector {, +    public QueryFacetCollector(String facetName, Query query, FilterCache filterCache) {, +        super(facetName);, +        return new InternalQueryFacet(facetName, count);]