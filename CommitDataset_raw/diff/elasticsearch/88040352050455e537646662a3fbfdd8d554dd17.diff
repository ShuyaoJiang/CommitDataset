[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +import java.util.Arrays;, +import java.util.Objects;, +public final class SearchRequest extends ActionRequest<SearchRequest> implements IndicesRequest.Replaceable {, +    private String[] indices = Strings.EMPTY_ARRAY;, +        return null;, +        Objects.requireNonNull(indices, "indices must not be null");, +        for (String index : indices) {, +            Objects.requireNonNull(index, "index must not be null");, +        this.indicesOptions = Objects.requireNonNull(indicesOptions, "indicesOptions must not be null");, +        Objects.requireNonNull(types, "types must not be null");, +        for (String type : types) {, +            Objects.requireNonNull(type, "type must not be null");, +        }, +        this.searchType = Objects.requireNonNull(searchType, "searchType must not be null");, +        this.source = Objects.requireNonNull(sourceBuilder, "source must not be null");, +        scroll = in.readOptionalWriteable(Scroll::new);, +        source = in.readOptionalWriteable(SearchSourceBuilder::new);, +        out.writeOptionalWriteable(scroll);, +        out.writeOptionalWriteable(source);, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +        SearchRequest that = (SearchRequest) o;, +        return searchType == that.searchType &&, +                Arrays.equals(indices, that.indices) &&, +                Objects.equals(routing, that.routing) &&, +                Objects.equals(preference, that.preference) &&, +                Objects.equals(source, that.source) &&, +                Objects.equals(requestCache, that.requestCache)  &&, +                Objects.equals(scroll, that.scroll) &&, +                Arrays.equals(types, that.types) &&, +                Objects.equals(indicesOptions, that.indicesOptions);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(searchType, Arrays.hashCode(indices), routing, preference, source, requestCache,, +                scroll, Arrays.hashCode(types), indicesOptions);, +    }, +, +    @Override, +    public String toString() {, +        return "SearchRequest{" +, +                "searchType=" + searchType +, +                ", indices=" + Arrays.toString(indices) +, +                ", indicesOptions=" + indicesOptions +, +                ", types=" + Arrays.toString(types) +, +                ", routing='" + routing + '\'' +, +                ", preference='" + preference + '\'' +, +                ", requestCache=" + requestCache +, +                ", scroll=" + scroll +, +                ", source=" + source + '}';, +    }, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +import java.util.Arrays;, +import java.util.Objects;, +public final class SearchRequest extends ActionRequest<SearchRequest> implements IndicesRequest.Replaceable {, +    private String[] indices = Strings.EMPTY_ARRAY;, +        return null;, +        Objects.requireNonNull(indices, "indices must not be null");, +        for (String index : indices) {, +            Objects.requireNonNull(index, "index must not be null");, +        this.indicesOptions = Objects.requireNonNull(indicesOptions, "indicesOptions must not be null");, +        Objects.requireNonNull(types, "types must not be null");, +        for (String type : types) {, +            Objects.requireNonNull(type, "type must not be null");, +        }, +        this.searchType = Objects.requireNonNull(searchType, "searchType must not be null");, +        this.source = Objects.requireNonNull(sourceBuilder, "source must not be null");, +        scroll = in.readOptionalWriteable(Scroll::new);, +        source = in.readOptionalWriteable(SearchSourceBuilder::new);, +        out.writeOptionalWriteable(scroll);, +        out.writeOptionalWriteable(source);, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +        SearchRequest that = (SearchRequest) o;, +        return searchType == that.searchType &&, +                Arrays.equals(indices, that.indices) &&, +                Objects.equals(routing, that.routing) &&, +                Objects.equals(preference, that.preference) &&, +                Objects.equals(source, that.source) &&, +                Objects.equals(requestCache, that.requestCache)  &&, +                Objects.equals(scroll, that.scroll) &&, +                Arrays.equals(types, that.types) &&, +                Objects.equals(indicesOptions, that.indicesOptions);, +    }]