[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ChannelContext.java, +    public abstract NioSelector getSelector();, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ChannelContext.java, +    public abstract NioSelector getSelector();, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +    public Socket openNioChannel(InetSocketAddress remoteAddress, Supplier<NioSelector> supplier) throws IOException {, +        NioSelector selector = supplier.get();, +    public Socket acceptNioChannel(ServerChannelContext serverContext, Supplier<NioSelector> supplier) throws IOException {, +            NioSelector selector = supplier.get();, +    public ServerSocket openNioServerSocketChannel(InetSocketAddress address, Supplier<NioSelector> supplier) throws IOException {, +        NioSelector selector = supplier.get();, +    public abstract Socket createChannel(NioSelector selector, SocketChannel channel) throws IOException;, +    public abstract ServerSocket createServerChannel(NioSelector selector, ServerSocketChannel channel) throws IOException;, +    private Socket internalCreateChannel(NioSelector selector, SocketChannel rawChannel) throws IOException {, +    private ServerSocket internalCreateServerChannel(NioSelector selector, ServerSocketChannel rawChannel) throws IOException {, +    private void scheduleChannel(Socket channel, NioSelector selector) {, +    private void scheduleServerChannel(ServerSocket channel, NioSelector selector) {, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ChannelContext.java, +    public abstract NioSelector getSelector();, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +    public Socket openNioChannel(InetSocketAddress remoteAddress, Supplier<NioSelector> supplier) throws IOException {, +        NioSelector selector = supplier.get();, +    public Socket acceptNioChannel(ServerChannelContext serverContext, Supplier<NioSelector> supplier) throws IOException {, +            NioSelector selector = supplier.get();, +    public ServerSocket openNioServerSocketChannel(InetSocketAddress address, Supplier<NioSelector> supplier) throws IOException {, +        NioSelector selector = supplier.get();, +    public abstract Socket createChannel(NioSelector selector, SocketChannel channel) throws IOException;, +    public abstract ServerSocket createServerChannel(NioSelector selector, ServerSocketChannel channel) throws IOException;, +    private Socket internalCreateChannel(NioSelector selector, SocketChannel rawChannel) throws IOException {, +    private ServerSocket internalCreateServerChannel(NioSelector selector, ServerSocketChannel rawChannel) throws IOException {, +    private void scheduleChannel(Socket channel, NioSelector selector) {, +    private void scheduleServerChannel(ServerSocket channel, NioSelector selector) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +    public BytesChannelContext(NioSocketChannel channel, NioSelector selector, Consumer<Exception> exceptionHandler,, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ChannelContext.java, +    public abstract NioSelector getSelector();, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +    public Socket openNioChannel(InetSocketAddress remoteAddress, Supplier<NioSelector> supplier) throws IOException {, +        NioSelector selector = supplier.get();, +    public Socket acceptNioChannel(ServerChannelContext serverContext, Supplier<NioSelector> supplier) throws IOException {, +            NioSelector selector = supplier.get();, +    public ServerSocket openNioServerSocketChannel(InetSocketAddress address, Supplier<NioSelector> supplier) throws IOException {, +        NioSelector selector = supplier.get();, +    public abstract Socket createChannel(NioSelector selector, SocketChannel channel) throws IOException;, +    public abstract ServerSocket createServerChannel(NioSelector selector, ServerSocketChannel channel) throws IOException;, +    private Socket internalCreateChannel(NioSelector selector, SocketChannel rawChannel) throws IOException {, +    private ServerSocket internalCreateServerChannel(NioSelector selector, ServerSocketChannel rawChannel) throws IOException {, +    private void scheduleChannel(Socket channel, NioSelector selector) {, +    private void scheduleServerChannel(ServerSocket channel, NioSelector selector) {, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/EventHandler.java, +import java.nio.channels.SelectionKey;, +import java.util.function.Supplier;, +public class EventHandler {, +    private final Supplier<NioSelector> selectorSupplier;, +    public EventHandler(Consumer<Exception> exceptionHandler, Supplier<NioSelector> selectorSupplier) {, +        this.selectorSupplier = selectorSupplier;, +    }, +, +    /**, +     * This method is called when a server channel signals it is ready to accept a connection. All of the, +     * accept logic should occur in this call., +     *, +     * @param context that can accept a connection, +     */, +    protected void acceptChannel(ServerChannelContext context) throws IOException {, +        context.acceptChannels(selectorSupplier);, +    }, +, +    /**, +     * This method is called when an attempt to accept a connection throws an exception., +     *, +     * @param context that accepting a connection, +     * @param exception that occurred, +     */, +    protected void acceptException(ServerChannelContext context, Exception exception) {, +        context.handleException(exception);, +    }]