[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import static org.elasticsearch.xpack.XPackSettings.HTTP_SSL_ENABLED;, +        final boolean ssl = HTTP_SSL_ENABLED.get(settings);, +        Settings httpSSLSettings = SSLService.getHttpTransportSSLSettings(settings);, +        boolean extractClientCertificate = ssl && sslService.isSSLClientAuthEnabled(httpSSLSettings);, +        return handler -> new SecurityRestFilter(licenseState, threadContext, authcService.get(), handler,, +                extractClientCertificate);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import static org.elasticsearch.xpack.XPackSettings.HTTP_SSL_ENABLED;, +        final boolean ssl = HTTP_SSL_ENABLED.get(settings);, +        Settings httpSSLSettings = SSLService.getHttpTransportSSLSettings(settings);, +        boolean extractClientCertificate = ssl && sslService.isSSLClientAuthEnabled(httpSSLSettings);, +        return handler -> new SecurityRestFilter(licenseState, threadContext, authcService.get(), handler,, +                extractClientCertificate);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java, +    public SecurityRestFilter(XPackLicenseState licenseState, ThreadContext threadContext, AuthenticationService service,, +                              RestHandler restHandler, boolean extractClientCertificate) {, +        this.extractClientCertificate = extractClientCertificate;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import static org.elasticsearch.xpack.XPackSettings.HTTP_SSL_ENABLED;, +        final boolean ssl = HTTP_SSL_ENABLED.get(settings);, +        Settings httpSSLSettings = SSLService.getHttpTransportSSLSettings(settings);, +        boolean extractClientCertificate = ssl && sslService.isSSLClientAuthEnabled(httpSSLSettings);, +        return handler -> new SecurityRestFilter(licenseState, threadContext, authcService.get(), handler,, +                extractClientCertificate);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java, +    public SecurityRestFilter(XPackLicenseState licenseState, ThreadContext threadContext, AuthenticationService service,, +                              RestHandler restHandler, boolean extractClientCertificate) {, +        this.extractClientCertificate = extractClientCertificate;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/transport/netty4/SecurityNetty4HttpServerTransport.java, +import org.elasticsearch.xpack.ssl.SSLConfiguration;, +    private final Settings sslSettings;, +    private final SSLConfiguration sslConfiguration;, +        final boolean ssl = HTTP_SSL_ENABLED.get(settings);, +        this.sslSettings = SSLService.getHttpTransportSSLSettings(settings);, +        if (ssl) {, +            if (sslService.isConfigurationValidForServerUsage(sslSettings, false) == false) {, +                throw new IllegalArgumentException("a key must be provided to run as a server. the key should be configured using the " +, +                        "[xpack.security.http.ssl.key] or [xpack.security.http.ssl.keystore.path] setting");, +            }, +            this.sslConfiguration = sslService.sslConfiguration(sslSettings, Settings.EMPTY);, +        } else {, +            this.sslConfiguration = null;, +        }, +, +        return new HttpSslChannelHandler();, +    private final class HttpSslChannelHandler extends HttpChannelHandler {, +        HttpSslChannelHandler() {, +            super(SecurityNetty4HttpServerTransport.this, detailedErrorsEnabled, threadPool.getThreadContext());, +            if (sslConfiguration != null) {, +                SSLEngine sslEngine = sslService.createSSLEngine(sslConfiguration, null, -1);, +                sslEngine.setUseClientMode(false);, +                ch.pipeline().addFirst("ssl", new SslHandler(sslEngine));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import static org.elasticsearch.xpack.XPackSettings.HTTP_SSL_ENABLED;, +        final boolean ssl = HTTP_SSL_ENABLED.get(settings);, +        Settings httpSSLSettings = SSLService.getHttpTransportSSLSettings(settings);, +        boolean extractClientCertificate = ssl && sslService.isSSLClientAuthEnabled(httpSSLSettings);, +        return handler -> new SecurityRestFilter(licenseState, threadContext, authcService.get(), handler,, +                extractClientCertificate);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java, +    public SecurityRestFilter(XPackLicenseState licenseState, ThreadContext threadContext, AuthenticationService service,, +                              RestHandler restHandler, boolean extractClientCertificate) {, +        this.extractClientCertificate = extractClientCertificate;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/transport/netty4/SecurityNetty4HttpServerTransport.java, +import org.elasticsearch.xpack.ssl.SSLConfiguration;, +    private final Settings sslSettings;, +    private final SSLConfiguration sslConfiguration;, +        final boolean ssl = HTTP_SSL_ENABLED.get(settings);, +        this.sslSettings = SSLService.getHttpTransportSSLSettings(settings);, +        if (ssl) {, +            if (sslService.isConfigurationValidForServerUsage(sslSettings, false) == false) {, +                throw new IllegalArgumentException("a key must be provided to run as a server. the key should be configured using the " +, +                        "[xpack.security.http.ssl.key] or [xpack.security.http.ssl.keystore.path] setting");, +            }, +            this.sslConfiguration = sslService.sslConfiguration(sslSettings, Settings.EMPTY);, +        } else {, +            this.sslConfiguration = null;, +        }, +, +        return new HttpSslChannelHandler();, +    private final class HttpSslChannelHandler extends HttpChannelHandler {, +        HttpSslChannelHandler() {, +            super(SecurityNetty4HttpServerTransport.this, detailedErrorsEnabled, threadPool.getThreadContext());, +            if (sslConfiguration != null) {, +                SSLEngine sslEngine = sslService.createSSLEngine(sslConfiguration, null, -1);, +                sslEngine.setUseClientMode(false);, +                ch.pipeline().addFirst("ssl", new SslHandler(sslEngine));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/transport/netty4/SecurityNetty4Transport.java, +import org.elasticsearch.transport.TransportSettings;, +import org.elasticsearch.xpack.security.transport.ServerTransportFilter;, +import org.elasticsearch.xpack.ssl.SSLConfiguration;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +    private final SSLConfiguration sslConfiguration;, +    private final Map<String, SSLConfiguration> profileConfiguration;, +        final Settings transportSSLSettings = settings.getByPrefix(setting("transport.ssl."));, +        sslConfiguration = sslService.sslConfiguration(transportSSLSettings, Settings.EMPTY);, +        Map<String, Settings> profileSettingsMap = settings.getGroups("transport.profiles.", true);]