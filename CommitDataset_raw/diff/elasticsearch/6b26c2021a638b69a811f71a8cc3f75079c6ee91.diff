[+++ b/src/main/java/org/elasticsearch/index/query/HasParentFilterParser.java, +        XContentStructure.InnerQuery iq = null;, +                    iq = new XContentStructure.InnerQuery(parseContext, parentType == null ? null : new String[] {parentType});, +        Query innerQuery;, +            innerQuery = iq.asQuery(parentType);, +            innerQuery = innerFilter.asFilter(parentType);, +        if (innerQuery == null) {, +        Query parentQuery = createParentQuery(innerQuery, parentType, false, parseContext);, +++ b/src/main/java/org/elasticsearch/index/query/HasParentFilterParser.java, +        XContentStructure.InnerQuery iq = null;, +                    iq = new XContentStructure.InnerQuery(parseContext, parentType == null ? null : new String[] {parentType});, +        Query innerQuery;, +            innerQuery = iq.asQuery(parentType);, +            innerQuery = innerFilter.asFilter(parentType);, +        if (innerQuery == null) {, +        Query parentQuery = createParentQuery(innerQuery, parentType, false, parseContext);, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +        DocumentMapper parentDocMapper = parseContext.mapperService().documentMapper(parentType);, +        if (parentDocMapper == null) {, +            throw new QueryParsingException(parseContext.index(), "[has_parent] query configured 'parent_type' [" + parentType + "] is not a valid type");, +        }, +, +        parentTypes.add(parentDocMapper.type());, +        // wrap the query with type query, +        innerQuery = new XFilteredQuery(innerQuery, parseContext.cacheFilter(parentDocMapper.typeFilter(), null));, +            return new ParentQuery(parentChildIndexFieldData, innerQuery, parentDocMapper.type(), childrenFilter);, +            return new ParentConstantScoreQuery(parentChildIndexFieldData, innerQuery, parentDocMapper.type(), childrenFilter);, +++ b/src/main/java/org/elasticsearch/index/query/HasParentFilterParser.java, +        XContentStructure.InnerQuery iq = null;, +                    iq = new XContentStructure.InnerQuery(parseContext, parentType == null ? null : new String[] {parentType});, +        Query innerQuery;, +            innerQuery = iq.asQuery(parentType);, +            innerQuery = innerFilter.asFilter(parentType);, +        if (innerQuery == null) {, +        Query parentQuery = createParentQuery(innerQuery, parentType, false, parseContext);, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +        DocumentMapper parentDocMapper = parseContext.mapperService().documentMapper(parentType);, +        if (parentDocMapper == null) {, +            throw new QueryParsingException(parseContext.index(), "[has_parent] query configured 'parent_type' [" + parentType + "] is not a valid type");, +        }, +, +        parentTypes.add(parentDocMapper.type());, +        // wrap the query with type query, +        innerQuery = new XFilteredQuery(innerQuery, parseContext.cacheFilter(parentDocMapper.typeFilter(), null));, +            return new ParentQuery(parentChildIndexFieldData, innerQuery, parentDocMapper.type(), childrenFilter);, +            return new ParentConstantScoreQuery(parentChildIndexFieldData, innerQuery, parentDocMapper.type(), childrenFilter);, +++ b/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java, +    @Test, +    public void testTypeIsAppliedInHasParentInnerQuery() throws Exception {, +        assertAcked(prepareCreate("test"), +                .addMapping("parent"), +                .addMapping("child", "_parent", "type=parent"));, +        ensureGreen();, +, +        List<IndexRequestBuilder> indexRequests = new ArrayList<>();, +        indexRequests.add(client().prepareIndex("test", "parent", "1").setSource("field1", "a"));, +        indexRequests.add(client().prepareIndex("test", "child", "1").setParent("1").setSource("{}"));, +        indexRequests.add(client().prepareIndex("test", "child", "2").setParent("1").setSource("{}"));, +        indexRandom(true, indexRequests);, +, +        SearchResponse searchResponse = client().prepareSearch("test"), +                .setQuery(constantScoreQuery(hasParentFilter("parent", notFilter(termFilter("field1", "a"))))), +                .get();, +        assertHitCount(searchResponse, 0l);, +, +        searchResponse = client().prepareSearch("test"), +                .setQuery(hasParentQuery("parent", constantScoreQuery(notFilter(termFilter("field1", "a"))))), +                .get();, +        assertHitCount(searchResponse, 0l);, +, +        searchResponse = client().prepareSearch("test"), +                .setQuery(constantScoreQuery(hasParentFilter("parent", termFilter("field1", "a")))), +                .get();, +        assertHitCount(searchResponse, 2l);, +, +        searchResponse = client().prepareSearch("test"), +                .setQuery(hasParentQuery("parent", constantScoreQuery(termFilter("field1", "a")))), +                .get();, +        assertHitCount(searchResponse, 2l);, +    }, +]