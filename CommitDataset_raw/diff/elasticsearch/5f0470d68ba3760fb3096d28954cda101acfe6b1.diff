[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpResponse.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpResponse.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.StringRestResponse;, +import static org.elasticsearch.rest.RestResponse.Status.*;, +, +            // if nothing was dispatched by the rest request, send either error or default handling per method, +            if (!restController.dispatchRequest(request, channel)) {, +                if (request.method() == RestRequest.Method.OPTIONS) {, +                    // when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gest automatically added), +                    StringRestResponse response = new StringRestResponse(OK);, +                    channel.sendResponse(response);, +                } else {, +                    channel.sendResponse(new StringRestResponse(BAD_REQUEST, "No handler found for uri [" + request.uri() + "] and method [" + request.method() + "]"));, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpResponse.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.StringRestResponse;, +import static org.elasticsearch.rest.RestResponse.Status.*;, +, +            // if nothing was dispatched by the rest request, send either error or default handling per method, +            if (!restController.dispatchRequest(request, channel)) {, +                if (request.method() == RestRequest.Method.OPTIONS) {, +                    // when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gest automatically added), +                    StringRestResponse response = new StringRestResponse(OK);, +                    channel.sendResponse(response);, +                } else {, +                    channel.sendResponse(new StringRestResponse(BAD_REQUEST, "No handler found for uri [" + request.uri() + "] and method [" + request.method() + "]"));, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, + * @author kimchy (shay.banon), +        // add support for cross origin, +        resp.addHeader("Access-Control-Allow-Origin", "*");, +        if (request.getMethod() == HttpMethod.OPTIONS) {, +            // also add more access control parameters, +            resp.addHeader("Access-Control-Max-Age", 1728000);, +            resp.addHeader("Access-Control-Allow-Methods", "PUT, DELETE");, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpResponse.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.StringRestResponse;, +import static org.elasticsearch.rest.RestResponse.Status.*;, +, +            // if nothing was dispatched by the rest request, send either error or default handling per method, +            if (!restController.dispatchRequest(request, channel)) {, +                if (request.method() == RestRequest.Method.OPTIONS) {, +                    // when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gest automatically added), +                    StringRestResponse response = new StringRestResponse(OK);, +                    channel.sendResponse(response);, +                } else {, +                    channel.sendResponse(new StringRestResponse(BAD_REQUEST, "No handler found for uri [" + request.uri() + "] and method [" + request.method() + "]"));, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, + * @author kimchy (shay.banon), +        // add support for cross origin, +        resp.addHeader("Access-Control-Allow-Origin", "*");, +        if (request.getMethod() == HttpMethod.OPTIONS) {, +            // also add more access control parameters, +            resp.addHeader("Access-Control-Max-Age", 1728000);, +            resp.addHeader("Access-Control-Allow-Methods", "PUT, DELETE");, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/RestController.java, +    public boolean dispatchRequest(final RestRequest request, final RestChannel channel) {, +            return false;, +        return true;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpResponse.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.StringRestResponse;, +import static org.elasticsearch.rest.RestResponse.Status.*;, +, +            // if nothing was dispatched by the rest request, send either error or default handling per method, +            if (!restController.dispatchRequest(request, channel)) {, +                if (request.method() == RestRequest.Method.OPTIONS) {, +                    // when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gest automatically added), +                    StringRestResponse response = new StringRestResponse(OK);, +                    channel.sendResponse(response);, +                } else {, +                    channel.sendResponse(new StringRestResponse(BAD_REQUEST, "No handler found for uri [" + request.uri() + "] and method [" + request.method() + "]"));, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, + * @author kimchy (shay.banon), +        // add support for cross origin, +        resp.addHeader("Access-Control-Allow-Origin", "*");, +        if (request.getMethod() == HttpMethod.OPTIONS) {, +            // also add more access control parameters, +            resp.addHeader("Access-Control-Max-Age", 1728000);, +            resp.addHeader("Access-Control-Allow-Methods", "PUT, DELETE");, +        }, +]