[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/TranslogService.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +    private final IndexSettingsService indexSettingsService;, +, +    private int flushThresholdOperations;, +    private ByteSizeValue flushThresholdSize;, +    private TimeValue flushThresholdPeriod;, +    private final ApplySettings applySettings = new ApplySettings();, +, +    @Inject public TranslogService(ShardId shardId, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService, ThreadPool threadPool, IndexShard indexShard, Translog translog) {, +        this.indexSettingsService = indexSettingsService;, +, +        indexSettingsService.addListener(applySettings);, +        indexSettingsService.removeListener(applySettings);, +    class ApplySettings implements IndexSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            int flushThresholdOperations = settings.getAsInt("index.translog.flush_threshold_ops", TranslogService.this.flushThresholdOperations);, +            if (flushThresholdOperations != TranslogService.this.flushThresholdOperations) {, +                logger.info("updating flush_threshold_ops from [{}] to [{}]", TranslogService.this.flushThresholdOperations, flushThresholdOperations);, +                TranslogService.this.flushThresholdOperations = flushThresholdOperations;, +            }, +            ByteSizeValue flushThresholdSize = settings.getAsBytesSize("index.translog.flush_threshold_size", TranslogService.this.flushThresholdSize);, +            if (!flushThresholdSize.equals(TranslogService.this.flushThresholdSize)) {, +                logger.info("updating flush_threshold_size from [{}] to [{}]", TranslogService.this.flushThresholdSize, flushThresholdSize);, +                TranslogService.this.flushThresholdSize = flushThresholdSize;, +            }, +            TimeValue flushThresholdPeriod = settings.getAsTime("index.translog.flush_threshold_period", TranslogService.this.flushThresholdPeriod);, +            if (!flushThresholdPeriod.equals(TranslogService.this.flushThresholdPeriod)) {, +                logger.info("updating flush_threshold_period from [{}] to [{}]", TranslogService.this.flushThresholdPeriod, flushThresholdPeriod);, +                TranslogService.this.flushThresholdPeriod = flushThresholdPeriod;, +            }, +        }, +    }, +]