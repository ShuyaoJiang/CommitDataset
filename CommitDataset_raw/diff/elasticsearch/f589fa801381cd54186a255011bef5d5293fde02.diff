[+++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +            builder.field(FunctionScoreQueryParser.QUERY_FIELD.getPreferredName());, +        builder.startArray(FunctionScoreQueryParser.FUNCTIONS_FIELD.getPreferredName());, +        builder.field(FunctionScoreQueryParser.SCORE_MODE_FIELD.getPreferredName(), scoreMode.name().toLowerCase(Locale.ROOT));, +            builder.field(FunctionScoreQueryParser.BOOST_MODE_FIELD.getPreferredName(), boostMode.name().toLowerCase(Locale.ROOT));, +        builder.field(FunctionScoreQueryParser.MAX_BOOST_FIELD.getPreferredName(), maxBoost);, +            builder.field(FunctionScoreQueryParser.MIN_SCORE_FIELD.getPreferredName(), minScore);, +            builder.field(FunctionScoreQueryParser.FILTER_FIELD.getPreferredName());, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +            builder.field(FunctionScoreQueryParser.QUERY_FIELD.getPreferredName());, +        builder.startArray(FunctionScoreQueryParser.FUNCTIONS_FIELD.getPreferredName());, +        builder.field(FunctionScoreQueryParser.SCORE_MODE_FIELD.getPreferredName(), scoreMode.name().toLowerCase(Locale.ROOT));, +            builder.field(FunctionScoreQueryParser.BOOST_MODE_FIELD.getPreferredName(), boostMode.name().toLowerCase(Locale.ROOT));, +        builder.field(FunctionScoreQueryParser.MAX_BOOST_FIELD.getPreferredName(), maxBoost);, +            builder.field(FunctionScoreQueryParser.MIN_SCORE_FIELD.getPreferredName(), minScore);, +            builder.field(FunctionScoreQueryParser.FILTER_FIELD.getPreferredName());, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +, +    public static final ParseField QUERY_FIELD = new ParseField("query");, +    public static final ParseField FILTER_FIELD = new ParseField("filter");, +    public static final ParseField FUNCTIONS_FIELD = new ParseField("functions");, +    public static final ParseField SCORE_MODE_FIELD = new ParseField("score_mode");, +    public static final ParseField BOOST_MODE_FIELD = new ParseField("boost_mode");, +    public static final ParseField MAX_BOOST_FIELD = new ParseField("max_boost");, +    public static final ParseField MIN_SCORE_FIELD = new ParseField("min_score");, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {, +                    if (query != null) {, +                        throw new ParsingException(parser.getTokenLocation(), "failed to parse [{}] query. [query] is already defined.", FunctionScoreQueryBuilder.NAME);, +                    query = parseContext.parseInnerQueryBuilder();, +                    // we try to parse a score function. If there is no score function for the current field name,, +                    // functionParserMapper.get() may throw an Exception., +                    ScoreFunctionBuilder<?> scoreFunction = functionParserMapper.get(parser.getTokenLocation(), currentFieldName).fromXContent(parseContext, parser);, +            } else if (token == XContentParser.Token.START_ARRAY) {, +                if (parseContext.parseFieldMatcher().match(currentFieldName, FUNCTIONS_FIELD)) {, +                    if (singleFunctionFound) {, +                        String errorString = "already found [" + singleFunctionName + "], now encountering [functions].";, +                        handleMisplacedFunctionsDeclaration(parser.getTokenLocation(), errorString);, +                    }, +                    functionArrayFound = true;, +                    currentFieldName = parseFiltersAndFunctions(parseContext, parser, filterFunctionBuilders);, +                } else {, +                    throw new ParsingException(parser.getTokenLocation(), "failed to parse [{}] query. array [{}] is not supported", FunctionScoreQueryBuilder.NAME, currentFieldName);, +                }, +, +            } else if (token.isValue()) {, +                if (parseContext.parseFieldMatcher().match(currentFieldName, SCORE_MODE_FIELD)) {, +                    scoreMode = FiltersFunctionScoreQuery.ScoreMode.fromString(parser.text());, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, BOOST_MODE_FIELD)) {, +                    combineFunction = CombineFunction.fromString(parser.text());, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, MAX_BOOST_FIELD)) {, +                    maxBoost = parser.floatValue();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {, +                    boost = parser.floatValue();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {, +                    queryName = parser.text();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, MIN_SCORE_FIELD)) {, +                    minScore = parser.floatValue();, +                } else {, +                    if (singleFunctionFound) {, +                        throw new ParsingException(parser.getTokenLocation(), "failed to parse [{}] query. already found function [{}], now encountering [{}]. use [functions] array if you want to define several functions.", FunctionScoreQueryBuilder.NAME, singleFunctionName, currentFieldName);, +                    }, +                    if (functionArrayFound) {, +                        String errorString = "already found [functions] array, now encountering [" + currentFieldName + "].";, +                        handleMisplacedFunctionsDeclaration(parser.getTokenLocation(), errorString);, +                    }, +                    if (parseContext.parseFieldMatcher().match(currentFieldName, WEIGHT_FIELD)) {, +                        filterFunctionBuilders.add(new FunctionScoreQueryBuilder.FilterFunctionBuilder(new WeightBuilder().setWeight(parser.floatValue())));, +                        singleFunctionFound = true;, +                        singleFunctionName = currentFieldName;, +                    } else {, +                        throw new ParsingException(parser.getTokenLocation(), "failed to parse [{}] query. field [{}] is not supported", FunctionScoreQueryBuilder.NAME, currentFieldName);, +                    }, +                }, +            }, +                    } else if (token == XContentParser.Token.START_OBJECT) {, +                        if (parseContext.parseFieldMatcher().match(currentFieldName, FILTER_FIELD)) {, +                            // do not need to check null here, functionParserMapper does it already, +                    } else if (token.isValue()) {, +                        if (parseContext.parseFieldMatcher().match(currentFieldName, WEIGHT_FIELD)) {, +                            functionWeight = parser.floatValue();, +                        } else {, +                            throw new ParsingException(parser.getTokenLocation(), "failed to parse [{}] query. field [{}] is not supported", FunctionScoreQueryBuilder.NAME, currentFieldName);, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +            builder.field(FunctionScoreQueryParser.QUERY_FIELD.getPreferredName());, +        builder.startArray(FunctionScoreQueryParser.FUNCTIONS_FIELD.getPreferredName());, +        builder.field(FunctionScoreQueryParser.SCORE_MODE_FIELD.getPreferredName(), scoreMode.name().toLowerCase(Locale.ROOT));, +            builder.field(FunctionScoreQueryParser.BOOST_MODE_FIELD.getPreferredName(), boostMode.name().toLowerCase(Locale.ROOT));, +        builder.field(FunctionScoreQueryParser.MAX_BOOST_FIELD.getPreferredName(), maxBoost);, +            builder.field(FunctionScoreQueryParser.MIN_SCORE_FIELD.getPreferredName(), minScore);, +            builder.field(FunctionScoreQueryParser.FILTER_FIELD.getPreferredName());, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +]