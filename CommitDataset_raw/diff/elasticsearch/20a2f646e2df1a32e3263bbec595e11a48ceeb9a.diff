[+++ b/build.gradle, +    configurations.all {, +++ b/build.gradle, +    configurations.all {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +     * Updates cluster wide specific settings using the Cluster Update Settings API, +     * Asynchronously updates cluster wide specific settings using the Cluster Update Settings API, +++ b/build.gradle, +    configurations.all {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +     * Updates cluster wide specific settings using the Cluster Update Settings API, +     * Asynchronously updates cluster wide specific settings using the Cluster Update Settings API, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.admin.indices.rollover.RolloverRequest;, +import org.elasticsearch.action.admin.indices.rollover.RolloverResponse;, +     * Deletes an index using the Delete Index API, +     * Asynchronously deletes an index using the Delete Index API, +     * Creates an index using the Create Index API, +     * Asynchronously creates an index using the Create Index API, +     * Updates the mappings on an index using the Put Mapping API, +     * Asynchronously updates the mappings on an index using the Put Mapping API, +     * Retrieves the mappings on an index or indices using the Get Mapping API, +     * <p>, +    public GetMappingsResponse getMappings(GetMappingsRequest getMappingsRequest, Header... headers) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(getMappingsRequest, RequestConverters::getMappings,, +            GetMappingsResponse::fromXContent, emptySet(), headers);, +     * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API, +     * <p>, +    public void getMappingsAsync(GetMappingsRequest getMappingsRequest, ActionListener<GetMappingsResponse> listener,, +                                 Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(getMappingsRequest, RequestConverters::getMappings,, +            GetMappingsResponse::fromXContent, listener, emptySet(), headers);, +     * Updates aliases using the Index Aliases API, +     * Asynchronously updates aliases using the Index Aliases API, +     * Opens an index using the Open Index API, +     * Asynchronously opens an index using the Open Index API, +     * Closes an index using the Close Index API, +     * Asynchronously closes an index using the Close Index API, +     * Checks if one or more aliases exist using the Aliases Exist API, +     * Asynchronously checks if one or more aliases exist using the Aliases Exist API, +     * Refresh one or more indices using the Refresh API, +     * Asynchronously refresh one or more indices using the Refresh API, +     * Flush one or more indices using the Flush API, +     * Asynchronously flush one or more indices using the Flush API, +    /** Initiate a synced flush manually using the synced flush API, +      * <p>, +    public SyncedFlushResponse flushSynced(SyncedFlushRequest syncedFlushRequest, Header... headers) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(syncedFlushRequest, RequestConverters::flushSynced,, +                SyncedFlushResponse::fromXContent, emptySet(), headers);, +     * Asynchronously initiate a synced flush manually using the synced flush API, +     * <p>, +    public void flushSyncedAsync(SyncedFlushRequest syncedFlushRequest, ActionListener<SyncedFlushResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(syncedFlushRequest, RequestConverters::flushSynced,, +                SyncedFlushResponse::fromXContent, listener, emptySet(), headers);, +, +     * Retrieve the settings of one or more indices, +     * <p>, +    public GetSettingsResponse getSettings(GetSettingsRequest getSettingsRequest, Header... headers) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(getSettingsRequest, RequestConverters::getSettings,, +            GetSettingsResponse::fromXContent, emptySet(), headers);, +     * Asynchronously retrieve the settings of one or more indices, +     * <p>, +    public void getSettingsAsync(GetSettingsRequest getSettingsRequest, ActionListener<GetSettingsResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(getSettingsRequest, RequestConverters::getSettings,, +            GetSettingsResponse::fromXContent, listener, emptySet(), headers);, +     * Force merge one or more indices using the Force Merge API, +     * Asynchronously force merge one or more indices using the Force Merge API, +     * Clears the cache of one or more indices using the Clear Cache API, +     * Asynchronously clears the cache of one or more indices using the Clear Cache API, +     * Shrinks an index using the Shrink Index API, +     * Asynchronously shrinks an index using the Shrink index API, +     * Splits an index using the Split Index API, +     * Asynchronously splits an index using the Split Index API, +     * Rolls over an index using the Rollover Index API, +     * Asynchronously rolls over an index using the Rollover Index API, +     * Updates specific index level settings using the Update Indices Settings API, +     * Asynchronously updates specific index level settings using the Update Indices Settings API, +     * Puts an index template using the Index Templates API, +     * <p>, +    public PutIndexTemplateResponse putTemplate(PutIndexTemplateRequest putIndexTemplateRequest, Header... headers) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(putIndexTemplateRequest, RequestConverters::putTemplate,, +            PutIndexTemplateResponse::fromXContent, emptySet(), headers);, +     * Asynchronously puts an index template using the Index Templates API, +     * <p>, +    public void putTemplateAsync(PutIndexTemplateRequest putIndexTemplateRequest,, +                                 ActionListener<PutIndexTemplateResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(putIndexTemplateRequest, RequestConverters::putTemplate,, +            PutIndexTemplateResponse::fromXContent, listener, emptySet(), headers);, +++ b/build.gradle, +    configurations.all {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +     * Updates cluster wide specific settings using the Cluster Update Settings API, +     * Asynchronously updates cluster wide specific settings using the Cluster Update Settings API, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.admin.indices.rollover.RolloverRequest;, +import org.elasticsearch.action.admin.indices.rollover.RolloverResponse;, +     * Deletes an index using the Delete Index API, +     * Asynchronously deletes an index using the Delete Index API]