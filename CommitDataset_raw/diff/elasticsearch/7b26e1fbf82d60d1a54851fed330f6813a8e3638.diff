[+++ b/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    /** @see Arrays.hashCode(byte[]) */, +    public int hashCode(ByteArray array) {, +        if (array == null) {, +            return 0;, +        }, +, +        int hash = 1;, +        for (long i = 0; i < array.size(); i++) {, +            hash = 31 * hash + array.get(i);, +        }, +, +        return hash;, +    }, +, +    /** @see Arrays.equals(byte[], byte[]) */, +    public boolean equals(ByteArray array, ByteArray other) {, +        if (array == other) {, +            return true;, +        }, +, +        if (array.size() != other.size()) {, +            return false;, +        }, +, +        for (long i = 0; i < array.size(); i++) {, +            if (array.get(i) != other.get(i)) {, +                return false;, +            }, +        }, +, +        return true;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    /** @see Arrays.hashCode(byte[]) */, +    public int hashCode(ByteArray array) {, +        if (array == null) {, +            return 0;, +        }, +, +        int hash = 1;, +        for (long i = 0; i < array.size(); i++) {, +            hash = 31 * hash + array.get(i);, +        }, +, +        return hash;, +    }, +, +    /** @see Arrays.equals(byte[], byte[]) */, +    public boolean equals(ByteArray array, ByteArray other) {, +        if (array == other) {, +            return true;, +        }, +, +        if (array.size() != other.size()) {, +            return false;, +        }, +, +        for (long i = 0; i < array.size(); i++) {, +            if (array.get(i) != other.get(i)) {, +                return false;, +            }, +        }, +, +        return true;, +    }, +, +++ b/src/test/java/org/elasticsearch/common/util/BigArraysTests.java, +    public void testByteArrayEquals() {, +        final ByteArray empty1 = byteArrayWithBytes(BytesRef.EMPTY_BYTES);, +        final ByteArray empty2 = byteArrayWithBytes(BytesRef.EMPTY_BYTES);, +, +        // identity = equality, +        assertTrue(bigArrays.equals(empty1, empty1));, +        // equality: both empty, +        assertTrue(bigArrays.equals(empty1, empty2));, +        empty1.release();, +        empty2.release();, +, +        // not equal: contents differ, +        final ByteArray a1 = byteArrayWithBytes(new byte[]{0});, +        final ByteArray a2 = byteArrayWithBytes(new byte[]{1});, +        assertFalse(bigArrays.equals(a1, a2));, +        a1.release();, +        a2.release();, +, +        // not equal: contents differ, +        final ByteArray a3 = byteArrayWithBytes(new byte[]{1,2,3});, +        final ByteArray a4 = byteArrayWithBytes(new byte[]{1,1,3});, +        assertFalse(bigArrays.equals(a3, a4));, +        a3.release();, +        a4.release();, +, +        // not equal: contents differ, +        final ByteArray a5 = byteArrayWithBytes(new byte[]{1,2,3});, +        final ByteArray a6 = byteArrayWithBytes(new byte[]{1,2,4});, +        assertFalse(bigArrays.equals(a5, a6));, +        a5.release();, +        a6.release();]