[+++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +histogramGroupByWithoutAlias, +schema::h:ts|c:l, +SELECT HISTOGRAM(birth_date, INTERVAL 1 YEAR) AS h, COUNT(*) as c FROM test_emp GROUP BY HISTOGRAM(birth_date, INTERVAL 1 YEAR) ORDER BY h DESC;, +, +         h          |       c       , +--------------------+---------------, +1964-02-02T00:00:00Z|5              , +1963-02-07T00:00:00Z|7              , +1962-02-12T00:00:00Z|6              , +1961-02-17T00:00:00Z|8              , +1960-02-23T00:00:00Z|7              , +1959-02-28T00:00:00Z|9              , +1958-03-05T00:00:00Z|6              , +1957-03-10T00:00:00Z|6              , +1956-03-15T00:00:00Z|4              , +1955-03-21T00:00:00Z|4              , +1954-03-26T00:00:00Z|7              , +1953-03-31T00:00:00Z|10             , +1952-04-05T00:00:00Z|10             , +1951-04-11T00:00:00Z|1              , +null                |10   , +;, +, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +histogramGroupByWithoutAlias, +schema::h:ts|c:l, +SELECT HISTOGRAM(birth_date, INTERVAL 1 YEAR) AS h, COUNT(*) as c FROM test_emp GROUP BY HISTOGRAM(birth_date, INTERVAL 1 YEAR) ORDER BY h DESC;, +, +         h          |       c       , +--------------------+---------------, +1964-02-02T00:00:00Z|5              , +1963-02-07T00:00:00Z|7              , +1962-02-12T00:00:00Z|6              , +1961-02-17T00:00:00Z|8              , +1960-02-23T00:00:00Z|7              , +1959-02-28T00:00:00Z|9              , +1958-03-05T00:00:00Z|6              , +1957-03-10T00:00:00Z|6              , +1956-03-15T00:00:00Z|4              , +1955-03-21T00:00:00Z|4              , +1954-03-26T00:00:00Z|7              , +1953-03-31T00:00:00Z|10             , +1952-04-05T00:00:00Z|10             , +1951-04-11T00:00:00Z|1              , +null                |10   , +;, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.expression.function.grouping.GroupingFunction;, +                checkGroupingFunctionInGroupBy(p, localFailures);, +    private static void checkGroupingFunctionInGroupBy(LogicalPlan p, Set<Failure> localFailures) {, +        // check if the query has a grouping function (Histogram) but no GROUP BY, +        if (p instanceof Project) {, +            Project proj = (Project) p;, +            proj.projections().forEach(e -> e.forEachDown(f -> , +                localFailures.add(fail(f, "[{}] needs to be part of the grouping", Expressions.name(f))), GroupingFunction.class));, +        } else if (p instanceof Aggregate) {, +            // if it does have a GROUP BY, check if the groupings contain the grouping functions (Histograms) , +            Aggregate a = (Aggregate) p;, +            a.aggregates().forEach(agg -> agg.forEachDown(e -> {, +                if (a.groupings().size() == 0 , +                        || Expressions.anyMatch(a.groupings(), g -> g instanceof Function && e.functionEquals((Function) g)) == false) {, +                    localFailures.add(fail(e, "[{}] needs to be part of the grouping", Expressions.name(e)));, +                }, +            }, GroupingFunction.class));, +        }, +    }, +, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +histogramGroupByWithoutAlias, +schema::h:ts|c:l, +SELECT HISTOGRAM(birth_date, INTERVAL 1 YEAR) AS h, COUNT(*) as c FROM test_emp GROUP BY HISTOGRAM(birth_date, INTERVAL 1 YEAR) ORDER BY h DESC;, +, +         h          |       c       , +--------------------+---------------, +1964-02-02T00:00:00Z|5              , +1963-02-07T00:00:00Z|7              , +1962-02-12T00:00:00Z|6              , +1961-02-17T00:00:00Z|8              , +1960-02-23T00:00:00Z|7              , +1959-02-28T00:00:00Z|9              , +1958-03-05T00:00:00Z|6              , +1957-03-10T00:00:00Z|6              , +1956-03-15T00:00:00Z|4              , +1955-03-21T00:00:00Z|4              , +1954-03-26T00:00:00Z|7              , +1953-03-31T00:00:00Z|10             , +1952-04-05T00:00:00Z|10             , +1951-04-11T00:00:00Z|1              , +null                |10   , +;, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.expression.function.grouping.GroupingFunction;, +                checkGroupingFunctionInGroupBy(p, localFailures);, +    private static void checkGroupingFunctionInGroupBy(LogicalPlan p, Set<Failure> localFailures) {, +        // check if the query has a grouping function (Histogram) but no GROUP BY, +        if (p instanceof Project) {, +            Project proj = (Project) p;]