[+++ b/core/src/main/java/org/elasticsearch/common/Priority.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +import java.util.Locale;, +    private static final List<Priority> values = Arrays.asList(IMMEDIATE, URGENT, HIGH, NORMAL, LOW, LANGUID);, +     * @return a list of all available priorities, sorted from the highest to the lowest., +    public static List<Priority> values() {, +, +    public static Priority valueOf(String value) {, +        switch (value) {, +            case "IMMEDIATE":, +                return IMMEDIATE;, +            case "URGENT":, +                return URGENT;, +            case "HIGH":, +                return HIGH;, +            case "NORMAL":, +                return NORMAL;, +            case "LOW":, +                return LOW;, +            case "LANGUID":, +                return LANGUID;, +            default:, +                throw new IllegalArgumentException("no such priority: " + value);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/Priority.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +import java.util.Locale;, +    private static final List<Priority> values = Arrays.asList(IMMEDIATE, URGENT, HIGH, NORMAL, LOW, LANGUID);, +     * @return a list of all available priorities, sorted from the highest to the lowest., +    public static List<Priority> values() {, +, +    public static Priority valueOf(String value) {, +        switch (value) {, +            case "IMMEDIATE":, +                return IMMEDIATE;, +            case "URGENT":, +                return URGENT;, +            case "HIGH":, +                return HIGH;, +            case "NORMAL":, +                return NORMAL;, +            case "LOW":, +                return LOW;, +            case "LANGUID":, +                return LANGUID;, +            default:, +                throw new IllegalArgumentException("no such priority: " + value);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/health/RestClusterHealthAction.java, +import org.elasticsearch.common.Priority;, +        if (request.param("wait_for_events") != null) {, +            clusterHealthRequest.waitForEvents(Priority.valueOf(request.param("wait_for_events").toUpperCase(Locale.ROOT)));, +        }, +++ b/core/src/main/java/org/elasticsearch/common/Priority.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +import java.util.Locale;, +    private static final List<Priority> values = Arrays.asList(IMMEDIATE, URGENT, HIGH, NORMAL, LOW, LANGUID);, +     * @return a list of all available priorities, sorted from the highest to the lowest., +    public static List<Priority> values() {, +, +    public static Priority valueOf(String value) {, +        switch (value) {, +            case "IMMEDIATE":, +                return IMMEDIATE;, +            case "URGENT":, +                return URGENT;, +            case "HIGH":, +                return HIGH;, +            case "NORMAL":, +                return NORMAL;, +            case "LOW":, +                return LOW;, +            case "LANGUID":, +                return LANGUID;, +            default:, +                throw new IllegalArgumentException("no such priority: " + value);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/health/RestClusterHealthAction.java, +import org.elasticsearch.common.Priority;, +        if (request.param("wait_for_events") != null) {, +            clusterHealthRequest.waitForEvents(Priority.valueOf(request.param("wait_for_events").toUpperCase(Locale.ROOT)));, +        }, +++ b/core/src/test/java/org/elasticsearch/cluster/service/ClusterServiceTests.java, +            Priority priority = randomFrom(Priority.values());, +++ b/core/src/main/java/org/elasticsearch/common/Priority.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +import java.util.Locale;, +    private static final List<Priority> values = Arrays.asList(IMMEDIATE, URGENT, HIGH, NORMAL, LOW, LANGUID);, +     * @return a list of all available priorities, sorted from the highest to the lowest.]