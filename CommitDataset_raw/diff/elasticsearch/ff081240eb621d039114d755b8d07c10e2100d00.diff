[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;, +import org.elasticsearch.action.admin.indices.refresh.TransportRefreshAction;, +    private final TransportRefreshAction refreshAction;, +, +                                                ThreadPool threadPool, MetaDataMappingService metaDataMappingService,, +                                                TransportDeleteByQueryAction deleteByQueryAction, TransportRefreshAction refreshAction) {, +        this.refreshAction = refreshAction;, +                refreshAction.execute(Requests.refreshRequest(request.indices()), new ActionListener<RefreshResponse>() {, +                    @Override public void onResponse(RefreshResponse refreshResponse) {, +                        metaDataMappingService.removeMapping(new MetaDataMappingService.RemoveRequest(request.indices(), request.type()));, +                        latch.countDown();, +                    }, +                });, +            }, +, +            @Override public void onFailure(Throwable e) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;, +import org.elasticsearch.action.admin.indices.refresh.TransportRefreshAction;, +    private final TransportRefreshAction refreshAction;, +, +                                                ThreadPool threadPool, MetaDataMappingService metaDataMappingService,, +                                                TransportDeleteByQueryAction deleteByQueryAction, TransportRefreshAction refreshAction) {, +        this.refreshAction = refreshAction;, +                refreshAction.execute(Requests.refreshRequest(request.indices()), new ActionListener<RefreshResponse>() {, +                    @Override public void onResponse(RefreshResponse refreshResponse) {, +                        metaDataMappingService.removeMapping(new MetaDataMappingService.RemoveRequest(request.indices(), request.type()));, +                        latch.countDown();, +                    }, +                });, +            }, +, +            @Override public void onFailure(Throwable e) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/collect/Tuple.java, +, +    @Override public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        Tuple tuple = (Tuple) o;, +, +        if (v1 != null ? !v1.equals(tuple.v1) : tuple.v1 != null) return false;, +        if (v2 != null ? !v2.equals(tuple.v2) : tuple.v2 != null) return false;, +, +        return true;, +    }, +, +    @Override public int hashCode() {, +        int result = v1 != null ? v1.hashCode() : 0;, +        result = 31 * result + (v2 != null ? v2.hashCode() : 0);, +        return result;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;, +import org.elasticsearch.action.admin.indices.refresh.TransportRefreshAction;, +    private final TransportRefreshAction refreshAction;, +, +                                                ThreadPool threadPool, MetaDataMappingService metaDataMappingService,, +                                                TransportDeleteByQueryAction deleteByQueryAction, TransportRefreshAction refreshAction) {, +        this.refreshAction = refreshAction;, +                refreshAction.execute(Requests.refreshRequest(request.indices()), new ActionListener<RefreshResponse>() {, +                    @Override public void onResponse(RefreshResponse refreshResponse) {, +                        metaDataMappingService.removeMapping(new MetaDataMappingService.RemoveRequest(request.indices(), request.type()));, +                        latch.countDown();, +                    }, +                });, +            }, +, +            @Override public void onFailure(Throwable e) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/collect/Tuple.java, +, +    @Override public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        Tuple tuple = (Tuple) o;, +, +        if (v1 != null ? !v1.equals(tuple.v1) : tuple.v1 != null) return false;, +        if (v2 != null ? !v2.equals(tuple.v2) : tuple.v2 != null) return false;, +, +        return true;, +    }, +, +    @Override public int hashCode() {, +        int result = v1 != null ? v1.hashCode() : 0;, +        result = 31 * result + (v2 != null ? v2.hashCode() : 0);, +        return result;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/soft/SoftFieldDataCache.java, +        super(index, indexSettings);, +    }, +, +    @Override protected ConcurrentMap<String, FieldData> buildFieldDataMap() {, +        return new MapMaker().softValues().makeMap();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;, +import org.elasticsearch.action.admin.indices.refresh.TransportRefreshAction;, +    private final TransportRefreshAction refreshAction;, +]