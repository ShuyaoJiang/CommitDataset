[+++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addClientJarPomGeneration(project), +    protected static void addClientJarPomGeneration(Project project) {, +                    artifactId = artifactId + '-client', +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addClientJarPomGeneration(project), +    protected static void addClientJarPomGeneration(Project project) {, +                    artifactId = artifactId + '-client', +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addClientJarPomGeneration(project), +    protected static void addClientJarPomGeneration(Project project) {, +                    artifactId = artifactId + '-client', +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest/build.gradle, +apply plugin: 'nebula.maven-base-publish', +apply plugin: 'nebula.maven-scm', +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addClientJarPomGeneration(project), +    protected static void addClientJarPomGeneration(Project project) {, +                    artifactId = artifactId + '-client', +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest/build.gradle, +apply plugin: 'nebula.maven-base-publish', +apply plugin: 'nebula.maven-scm', +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +    HttpResponse getHttpResponse() {, +        return response;, +    }, +, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addClientJarPomGeneration(project), +    protected static void addClientJarPomGeneration(Project project) {, +                    artifactId = artifactId + '-client', +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest/build.gradle, +apply plugin: 'nebula.maven-base-publish', +apply plugin: 'nebula.maven-scm', +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +    HttpResponse getHttpResponse() {, +        return response;, +    }, +, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +import org.apache.http.HttpEntity;, +import org.apache.http.entity.BufferedHttpEntity;, +import org.apache.http.util.EntityUtils;, +, +    private static String buildMessage(Response response) throws IOException {, +        String message = response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +, +        HttpEntity entity = response.getEntity();, +        if (entity != null) {, +            if (entity.isRepeatable() == false) {, +                entity = new BufferedHttpEntity(entity);, +                response.getHttpResponse().setEntity(entity);, +            }, +            message += "\n" + EntityUtils.toString(entity);, +        }, +        return message;, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy]