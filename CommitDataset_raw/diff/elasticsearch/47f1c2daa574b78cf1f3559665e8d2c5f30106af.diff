[+++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +    static Builder builder() {, +        return new Builder();, +    }, +, +            if (Strings.hasLength(supposedUrl) == false) {, +                throw new ElasticsearchParseException("Configured URL is empty, please configure a valid URL");, +            }, +, +                if (Strings.hasLength(uri.getScheme()) == false) {, +                    throw new ElasticsearchParseException("URL [{}] does not contain a scheme", uri);, +                }, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +    static Builder builder() {, +        return new Builder();, +    }, +, +            if (Strings.hasLength(supposedUrl) == false) {, +                throw new ElasticsearchParseException("Configured URL is empty, please configure a valid URL");, +            }, +, +                if (Strings.hasLength(uri.getScheme()) == false) {, +                    throw new ElasticsearchParseException("URL [{}] does not contain a scheme", uri);, +                }, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequestTemplate.java, +    static Builder builder() {, +        return new Builder();, +    }, +, +            if (Strings.hasLength(supposedUrl) == false) {, +                throw new ElasticsearchParseException("Configured URL is empty, please configure a valid URL");, +            }, +, +                if (Strings.hasLength(uri.getScheme()) == false) {, +                    throw new ElasticsearchParseException("URL [{}] does not contain a scheme", uri);, +                }, +                throw new ElasticsearchParseException("Malformed URL [{}]", supposedUrl);, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +    static Builder builder() {, +        return new Builder();, +    }, +, +            if (Strings.hasLength(supposedUrl) == false) {, +                throw new ElasticsearchParseException("Configured URL is empty, please configure a valid URL");, +            }, +, +                if (Strings.hasLength(uri.getScheme()) == false) {, +                    throw new ElasticsearchParseException("URL [{}] does not contain a scheme", uri);, +                }, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequestTemplate.java, +    static Builder builder() {, +        return new Builder();, +    }, +, +            if (Strings.hasLength(supposedUrl) == false) {, +                throw new ElasticsearchParseException("Configured URL is empty, please configure a valid URL");, +            }, +, +                if (Strings.hasLength(uri.getScheme()) == false) {, +                    throw new ElasticsearchParseException("URL [{}] does not contain a scheme", uri);, +                }, +                throw new ElasticsearchParseException("Malformed URL [{}]", supposedUrl);, +++ b/elasticsearch/x-pack/watcher/src/test/java/org/elasticsearch/watcher/support/http/HttpRequestTemplateTests.java, +import org.elasticsearch.ElasticsearchParseException;, +import static org.hamcrest.Matchers.containsString;, +    public void testParsingEmptyUrl() throws Exception {, +        try {, +            HttpRequestTemplate.builder().fromUrl("");, +            fail("Expected exception due to empty URL");, +        } catch (ElasticsearchParseException e) {, +            assertThat(e.getMessage(), containsString("Configured URL is empty, please configure a valid URL"));, +        }, +    }, +, +    public void testInvalidUrlsWithMissingScheme() throws Exception {, +        try {, +            HttpRequestTemplate.builder().fromUrl("www.test.de");, +            fail("Expected exception due to missing scheme");, +        } catch (ElasticsearchParseException e) {, +            assertThat(e.getMessage(), containsString("URL [www.test.de] does not contain a scheme"));, +        }, +    }, +, +    public void testInvalidUrlsWithHost() throws Exception {, +        try {, +            HttpRequestTemplate.builder().fromUrl("https://");, +            fail("Expected exception due to missing host");, +        } catch (ElasticsearchParseException e) {, +            assertThat(e.getMessage(), containsString("Malformed URL [https://]"));, +        }, +    }, +, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +    static Builder builder() {, +        return new Builder();, +    }, +, +            if (Strings.hasLength(supposedUrl) == false) {, +                throw new ElasticsearchParseException("Configured URL is empty, please configure a valid URL");, +            }]