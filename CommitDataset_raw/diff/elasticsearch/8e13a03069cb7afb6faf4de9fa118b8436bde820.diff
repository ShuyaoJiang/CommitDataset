[+++ b/README.asciidoc, += Elasticsearch Watcher Plugin, +, +This plugins adds conditioned scheduled tasks features to elasticsearch - such a task is called a `Watch`., +, +You can build the plugin with `mvn package`., +, +The documentation is put in the `docs/` directory., +++ b/README.asciidoc, += Elasticsearch Watcher Plugin, +, +This plugins adds conditioned scheduled tasks features to elasticsearch - such a task is called a `Watch`., +, +You can build the plugin with `mvn package`., +, +The documentation is put in the `docs/` directory., +++ /dev/null, +++ b/README.asciidoc, += Elasticsearch Watcher Plugin, +, +This plugins adds conditioned scheduled tasks features to elasticsearch - such a task is called a `Watch`., +, +You can build the plugin with `mvn package`., +, +The documentation is put in the `docs/` directory., +++ /dev/null, +++ b/all-signatures.txt, +@defaultMessage Convert to URI, +java.net.URL#getPath(), +java.net.URL#getFile(), +++ b/README.asciidoc, += Elasticsearch Watcher Plugin, +, +This plugins adds conditioned scheduled tasks features to elasticsearch - such a task is called a `Watch`., +, +You can build the plugin with `mvn package`., +, +The documentation is put in the `docs/` directory., +++ /dev/null, +++ b/all-signatures.txt, +@defaultMessage Convert to URI, +java.net.URL#getPath(), +java.net.URL#getFile(), +++ /dev/null, +++ b/README.asciidoc, += Elasticsearch Watcher Plugin, +, +This plugins adds conditioned scheduled tasks features to elasticsearch - such a task is called a `Watch`., +, +You can build the plugin with `mvn package`., +, +The documentation is put in the `docs/` directory., +++ /dev/null, +++ b/all-signatures.txt, +@defaultMessage Convert to URI, +java.net.URL#getPath(), +java.net.URL#getFile(), +++ /dev/null, +++ /dev/null, +++ b/README.asciidoc, += Elasticsearch Watcher Plugin, +, +This plugins adds conditioned scheduled tasks features to elasticsearch - such a task is called a `Watch`., +, +You can build the plugin with `mvn package`., +, +The documentation is put in the `docs/` directory., +++ /dev/null, +++ b/all-signatures.txt, +@defaultMessage Convert to URI, +java.net.URL#getPath(), +java.net.URL#getFile(), +++ /dev/null, +++ /dev/null, +++ b/core-signatures.txt, +@defaultMessage spawns threads with vague names; use a custom thread factory and name threads so that you can tell (by its name) which executor it is associated with, +, +java.util.concurrent.Executors#newFixedThreadPool(int), +java.util.concurrent.Executors#newSingleThreadExecutor(), +java.util.concurrent.Executors#newCachedThreadPool(), +java.util.concurrent.Executors#newSingleThreadScheduledExecutor(), +java.util.concurrent.Executors#newScheduledThreadPool(int), +java.util.concurrent.Executors#defaultThreadFactory(), +java.util.concurrent.Executors#privilegedThreadFactory(), +, +java.lang.Character#codePointBefore(char[],int) @ Implicit start offset is error-prone when the char[] is a buffer and the first chars are random chars, +java.lang.Character#codePointAt(char[],int) @ Implicit end offset is error-prone when the char[] is a buffer and the last chars are random chars, +, +java.io.StringReader#<init>(java.lang.String) @ Use FastStringReader instead, +, +@defaultMessage Reference management is tricky, leave it to SearcherManager, +org.apache.lucene.index.IndexReader#decRef(), +org.apache.lucene.index.IndexReader#incRef(), +org.apache.lucene.index.IndexReader#tryIncRef(), +, +@defaultMessage QueryWrapperFilter is cachable by default - use Queries#wrap instead, +org.apache.lucene.search.QueryWrapperFilter#<init>(org.apache.lucene.search.Query), +, +@defaultMessage Because the filtercache doesn't take deletes into account FilteredQuery can't be used - use XFilteredQuery instead, +org.apache.lucene.search.FilteredQuery#<init>(org.apache.lucene.search.Query,org.apache.lucene.search.Filter)]