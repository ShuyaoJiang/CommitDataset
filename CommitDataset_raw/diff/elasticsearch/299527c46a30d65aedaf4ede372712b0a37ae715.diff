[+++ b/src/main/java/org/elasticsearch/watcher/history/WatchRecord.java, +        builder.startObject(Watch.Parser.INPUT_FIELD.getPreferredName()), +                .field(input.type(), input, params), +                .endObject();, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                    throw new WatcherException("could not parse watch record [{}]. unexpected token [{}] for [{}]", id, token, currentFieldName);, +            assert record.name() != null : "watch record [" + id +"] is missing watch_id";, +            assert record.triggerEvent() != null : "watch record [" + id +"] is missing trigger";, +            assert record.input() != null : "watch record [" + id +"] is missing input";, +            assert record.condition() != null : "watch record [" + id +"] is condition input";, +            assert record.state() != null : "watch record [" + id +"] is state input";, +, +++ b/src/main/java/org/elasticsearch/watcher/history/WatchRecord.java, +        builder.startObject(Watch.Parser.INPUT_FIELD.getPreferredName()), +                .field(input.type(), input, params), +                .endObject();, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                    throw new WatcherException("could not parse watch record [{}]. unexpected token [{}] for [{}]", id, token, currentFieldName);, +            assert record.name() != null : "watch record [" + id +"] is missing watch_id";, +            assert record.triggerEvent() != null : "watch record [" + id +"] is missing trigger";, +            assert record.input() != null : "watch record [" + id +"] is missing input";, +            assert record.condition() != null : "watch record [" + id +"] is condition input";, +            assert record.state() != null : "watch record [" + id +"] is state input";, +, +++ b/src/main/resources/watch_history.json, +        "input" : {, +          "type" : "object",, +          "dynamic" : true, +        },, +++ b/src/main/java/org/elasticsearch/watcher/history/WatchRecord.java, +        builder.startObject(Watch.Parser.INPUT_FIELD.getPreferredName()), +                .field(input.type(), input, params), +                .endObject();, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                    throw new WatcherException("could not parse watch record [{}]. unexpected token [{}] for [{}]", id, token, currentFieldName);, +            assert record.name() != null : "watch record [" + id +"] is missing watch_id";, +            assert record.triggerEvent() != null : "watch record [" + id +"] is missing trigger";, +            assert record.input() != null : "watch record [" + id +"] is missing input";, +            assert record.condition() != null : "watch record [" + id +"] is condition input";, +            assert record.state() != null : "watch record [" + id +"] is state input";, +, +++ b/src/main/resources/watch_history.json, +        "input" : {, +          "type" : "object",, +          "dynamic" : true, +        },, +++ b/src/test/java/org/elasticsearch/watcher/history/HistoryStoreLifeCycleTest.java, +import org.elasticsearch.watcher.input.none.ExecutableNoneInput;, +        Watch watch = new Watch("_name", SystemClock.INSTANCE, licenseService(), null, new ExecutableNoneInput(logger), condition, null, null, null, null, null);, +++ b/src/main/java/org/elasticsearch/watcher/history/WatchRecord.java, +        builder.startObject(Watch.Parser.INPUT_FIELD.getPreferredName()), +                .field(input.type(), input, params), +                .endObject();, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                    throw new WatcherException("could not parse watch record [{}]. unexpected token [{}] for [{}]", id, token, currentFieldName);, +            assert record.name() != null : "watch record [" + id +"] is missing watch_id";, +            assert record.triggerEvent() != null : "watch record [" + id +"] is missing trigger";, +            assert record.input() != null : "watch record [" + id +"] is missing input";, +            assert record.condition() != null : "watch record [" + id +"] is condition input";, +            assert record.state() != null : "watch record [" + id +"] is state input";, +, +++ b/src/main/resources/watch_history.json, +        "input" : {, +          "type" : "object",, +          "dynamic" : true, +        },, +++ b/src/test/java/org/elasticsearch/watcher/history/HistoryStoreLifeCycleTest.java, +import org.elasticsearch.watcher.input.none.ExecutableNoneInput;, +        Watch watch = new Watch("_name", SystemClock.INSTANCE, licenseService(), null, new ExecutableNoneInput(logger), condition, null, null, null, null, null);, +++ b/src/test/java/org/elasticsearch/watcher/history/HistoryStoreTests.java, +import org.elasticsearch.watcher.input.none.ExecutableNoneInput;, +        when(watch.input()).thenReturn(new ExecutableNoneInput(logger));, +        when(watch.input()).thenReturn(new ExecutableNoneInput(logger));, +++ b/src/main/java/org/elasticsearch/watcher/history/WatchRecord.java, +        builder.startObject(Watch.Parser.INPUT_FIELD.getPreferredName()), +                .field(input.type(), input, params), +                .endObject();, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                        throw new WatcherException("could not parse watch record [{}]. unexpected field [{}]", id, currentFieldName);, +                    throw new WatcherException("could not parse watch record [{}]. unexpected token [{}] for [{}]", id, token, currentFieldName);, +            assert record.name() != null : "watch record [" + id +"] is missing watch_id";, +            assert record.triggerEvent() != null : "watch record [" + id +"] is missing trigger";, +            assert record.input() != null : "watch record [" + id +"] is missing input";, +            assert record.condition() != null : "watch record [" + id +"] is condition input";, +            assert record.state() != null : "watch record [" + id +"] is state input";, +, +++ b/src/main/resources/watch_history.json, +        "input" : {, +          "type" : "object",, +          "dynamic" : true, +        },, +++ b/src/test/java/org/elasticsearch/watcher/history/HistoryStoreLifeCycleTest.java, +import org.elasticsearch.watcher.input.none.ExecutableNoneInput;, +        Watch watch = new Watch("_name", SystemClock.INSTANCE, licenseService(), null, new ExecutableNoneInput(logger), condition, null, null, null, null, null);, +++ b/src/test/java/org/elasticsearch/watcher/history/HistoryStoreTests.java, +import org.elasticsearch.watcher.input.none.ExecutableNoneInput;]