[+++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +import java.util.*;, +        List<ResultClause> fastOrClauses = new ArrayList<ResultClause>();, +                if (hasMustClauses || hasMustNotClauses) {, +                    fastOrClauses.add(clause);, +                } else if (res == null) {, +                    if (it != null) {, +                } else {, +                    DocIdSetIterator it = clause.docIdSet.iterator();, +                    if (it != null) {, +                        hasNonEmptyShouldClause = true;, +                        res.or(it);, +                    }, +                }, +            }, +            if (!fastOrClauses.isEmpty()) {, +                DocIdSetIterator it = res.iterator();, +                at_least_one_should_clause_iter:, +                for (int setDoc = it.nextDoc(); setDoc != DocIdSetIterator.NO_MORE_DOCS; setDoc = it.nextDoc()) {, +                    for (ResultClause fastOrClause : fastOrClauses) {, +                        DocIdSetIterator clauseIterator = fastOrClause.iterator();, +                        if (clauseIterator == null) {, +                            continue;, +                        }, +                        if (iteratorMatch(clauseIterator, setDoc)) {, +                            hasNonEmptyShouldClause = true;, +                            continue at_least_one_should_clause_iter;, +                        }, +                    }, +                    res.clear(setDoc);, +                }, +            }, +, +        List<ResultClause> slowOrClauses = new ArrayList<ResultClause>();, +                    slowOrClauses.add(clause);, +                    } else {, +        // is already a must or must_not clause. However in the current ES bool filter behaviour at least one should, +        // clause must match in order for a doc to be a match. What we do here is checking if matched docs match with, +        // any should filter. TODO: Add an option to have disable minimum_should_match=1 behaviour, +        if (!slowOrClauses.isEmpty() || !fastOrClauses.isEmpty()) {, +            at_least_one_should_clause_iter:, +            for (int setDoc = it.nextDoc(); setDoc != DocIdSetIterator.NO_MORE_DOCS; setDoc = it.nextDoc()) {, +                for (ResultClause fastOrClause : fastOrClauses) {, +                    DocIdSetIterator clauseIterator = fastOrClause.iterator();, +                    if (it == null) {, +                        continue;, +                    }, +                    if (iteratorMatch(clauseIterator, setDoc)) {, +                        continue at_least_one_should_clause_iter;, +                    }, +                }, +                for (ResultClause slowOrClause : slowOrClauses) {, +                    if (slowOrClause.bits.get(setDoc)) {, +                        hasNonEmptyShouldClause = true;, +                        continue at_least_one_should_clause_iter;, +, +        DocIdSetIterator docIdSetIterator;, +, +, +        /**, +         * @return An iterator, but caches it for subsequent usage. Don't use if iterator is consumed in one invocation., +         */, +        DocIdSetIterator iterator() throws IOException {, +            if (docIdSetIterator != null) {, +                return docIdSetIterator;, +            } else {, +                return docIdSetIterator = docIdSet.iterator();, +, +    }, +, +    static boolean iteratorMatch(DocIdSetIterator docIdSetIterator, int target) throws IOException {, +        assert docIdSetIterator != null;, +        int current = docIdSetIterator.docID();, +        if (current == DocIdSetIterator.NO_MORE_DOCS || target < current) {, +            return false;, +        } else {, +            if (current == target) {, +                return true;, +            } else {, +                return docIdSetIterator.advance(target) == target;, +            }, +        }, +    }, +, +}, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +import java.util.*;, +        List<ResultClause> fastOrClauses = new ArrayList<ResultClause>();, +                if (hasMustClauses || hasMustNotClauses) {, +                    fastOrClauses.add(clause);, +                } else if (res == null) {, +                    if (it != null) {, +                } else {, +                    DocIdSetIterator it = clause.docIdSet.iterator();, +                    if (it != null) {, +                        hasNonEmptyShouldClause = true;, +                        res.or(it);, +                    }, +                }, +            }]