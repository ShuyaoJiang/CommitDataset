[+++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +    public void testIndexAuditTrailWorking() throws Exception {, +        HttpResponse response = httpClient().path("/"), +                .addHeader("Authorization", UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +    public void testIndexAuditTrailWorking() throws Exception {, +        HttpResponse response = httpClient().path("/"), +                .addHeader("Authorization", UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = httpClient().path("/").execute();, +        assertThat(response.getStatusCode(), is(401));, +        String value = response.getHeaders().get("WWW-Authenticate");, +        HttpResponse response = httpClient().path("/"), +                .addHeader(CustomRealm.USER_HEADER, CustomRealm.KNOWN_USER), +                .addHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +    public void testIndexAuditTrailWorking() throws Exception {, +        HttpResponse response = httpClient().path("/"), +                .addHeader("Authorization", UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = httpClient().path("/").execute();, +        assertThat(response.getStatusCode(), is(401));, +        String value = response.getHeaders().get("WWW-Authenticate");, +        HttpResponse response = httpClient().path("/"), +                .addHeader(CustomRealm.USER_HEADER, CustomRealm.KNOWN_USER), +                .addHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityIT.java, +, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +    public void testIndexAuditTrailWorking() throws Exception {, +        HttpResponse response = httpClient().path("/"), +                .addHeader("Authorization", UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = httpClient().path("/").execute();, +        assertThat(response.getStatusCode(), is(401));, +        String value = response.getHeaders().get("WWW-Authenticate");, +        HttpResponse response = httpClient().path("/"), +                .addHeader(CustomRealm.USER_HEADER, CustomRealm.KNOWN_USER), +                .addHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityIT.java, +, +++ b/elasticsearch/qa/smoke-test-plugins-ssl/src/test/java/org/elasticsearch/smoketest/SmokeTestPluginsSslIT.java, +import org.elasticsearch.test.rest.client.RestClient;, +                .put(RestClient.PROTOCOL, "https"), +                .put(RestClient.TRUSTSTORE_PATH, keyStore), +                .put(RestClient.TRUSTSTORE_PASSWORD, KEYSTORE_PASS), +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +    public void testIndexAuditTrailWorking() throws Exception {, +        HttpResponse response = httpClient().path("/"), +                .addHeader("Authorization", UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = httpClient().path("/").execute();, +        assertThat(response.getStatusCode(), is(401));, +        String value = response.getHeaders().get("WWW-Authenticate");, +        HttpResponse response = httpClient().path("/"), +                .addHeader(CustomRealm.USER_HEADER, CustomRealm.KNOWN_USER), +                .addHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW), +                .execute();, +        assertThat(response.getStatusCode(), is(200));, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityIT.java, +, +++ b/elasticsearch/qa/smoke-test-plugins-ssl/src/test/java/org/elasticsearch/smoketest/SmokeTestPluginsSslIT.java, +import org.elasticsearch.test.rest.client.RestClient;, +                .put(RestClient.PROTOCOL, "https"), +                .put(RestClient.TRUSTSTORE_PATH, keyStore), +                .put(RestClient.TRUSTSTORE_PASSWORD, KEYSTORE_PASS), +++ b/elasticsearch/qa/smoke-test-watcher-with-groovy/src/test/java/org/elasticsearch/smoketest/WatcherRestTestCase.java, +import java.io.IOException;, +import java.net.URI;, +import java.net.URL;]