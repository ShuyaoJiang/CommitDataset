[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterChangedEvent.java, +    public boolean blocksChanged() {, +        return state.blocks() != previousState.blocks();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterChangedEvent.java, +    public boolean blocksChanged() {, +        return state.blocks() != previousState.blocks();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                logger.info("[{}] remove_mapping [{}]", request.indices, request.mappingType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterChangedEvent.java, +    public boolean blocksChanged() {, +        return state.blocks() != previousState.blocks();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                logger.info("[{}] remove_mapping [{}]", request.indices, request.mappingType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/AbstractIndexerComponent.java, +    protected final IndexerSettings settings;, +    protected AbstractIndexerComponent(IndexerName indexerName, IndexerSettings settings) {, +        this.logger = Loggers.getLogger(getClass(), settings.globalSettings(), indexerName);, +        return settings.globalSettings().get("name", "");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterChangedEvent.java, +    public boolean blocksChanged() {, +        return state.blocks() != previousState.blocks();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                logger.info("[{}] remove_mapping [{}]", request.indices, request.mappingType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/AbstractIndexerComponent.java, +    protected final IndexerSettings settings;, +    protected AbstractIndexerComponent(IndexerName indexerName, IndexerSettings settings) {, +        this.logger = Loggers.getLogger(getClass(), settings.globalSettings(), indexerName);, +        return settings.globalSettings().get("name", "");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/Indexer.java, +    void close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterChangedEvent.java, +    public boolean blocksChanged() {, +        return state.blocks() != previousState.blocks();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                logger.info("[{}] remove_mapping [{}]", request.indices, request.mappingType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/AbstractIndexerComponent.java, +    protected final IndexerSettings settings;, +    protected AbstractIndexerComponent(IndexerName indexerName, IndexerSettings settings) {, +        this.logger = Loggers.getLogger(getClass(), settings.globalSettings(), indexerName);, +        return settings.globalSettings().get("name", "");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/Indexer.java, +    void close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/IndexerModule.java, +        bind(IndexerSettings.class).toInstance(new IndexerSettings(globalSettings, settings));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterChangedEvent.java, +    public boolean blocksChanged() {, +        return state.blocks() != previousState.blocks();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                logger.info("[{}] remove_mapping [{}]", request.indices, request.mappingType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/AbstractIndexerComponent.java, +    protected final IndexerSettings settings;, +    protected AbstractIndexerComponent(IndexerName indexerName, IndexerSettings settings) {, +        this.logger = Loggers.getLogger(getClass(), settings.globalSettings(), indexerName);, +        return settings.globalSettings().get("name", "");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/Indexer.java, +    void close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/IndexerModule.java, +        bind(IndexerSettings.class).toInstance(new IndexerSettings(globalSettings, settings));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/IndexerSettings.java, +import org.elasticsearch.common.settings.Settings;, +import java.util.Map;, + * @author kimchy (shayy.banon), +public class IndexerSettings {, +, +    private final Settings globalSettings;, +, +    private final Map<String, Object> settings;, +, +    public IndexerSettings(Settings globalSettings, Map<String, Object> settings) {, +        this.globalSettings = globalSettings;, +        this.settings = settings;, +    }, +, +    public Settings globalSettings() {, +        return globalSettings;, +    }, +, +    public Map<String, Object> settings() {, +        return settings;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterChangedEvent.java, +    public boolean blocksChanged() {, +        return state.blocks() != previousState.blocks();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                logger.info("[{}] remove_mapping [{}]", request.indices, request.mappingType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/AbstractIndexerComponent.java]