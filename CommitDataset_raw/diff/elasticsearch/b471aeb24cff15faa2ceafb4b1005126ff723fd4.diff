[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.cluster.*;, +import org.elasticsearch.common.collect.Tuple;, +    Tuple<ClusterState, List<MappingTask>> executeRefreshOrUpdate(final ClusterState currentState, final long insertionOrder) throws Exception {, +                return Tuple.tuple(currentState, allTasks);, +                return Tuple.tuple(currentState, allTasks);, +            return Tuple.tuple(currentState, allTasks);, +            return Tuple.tuple(currentState, allTasks);, +        return Tuple.tuple(ClusterState.builder(currentState).metaData(mdBuilder).build(), allTasks);, +        clusterService.submitStateUpdateTask("refresh-mapping [" + index + "][" + Arrays.toString(types) + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +            private volatile List<MappingTask> allTasks;, +, +                Tuple<ClusterState, List<MappingTask>> tuple = executeRefreshOrUpdate(currentState, insertOrder);, +                this.allTasks = tuple.v2();, +                return tuple.v1();, +            }, +, +            @Override, +            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                if (allTasks == null) {, +                    return;, +                }, +                for (Object task : allTasks) {, +                    if (task instanceof UpdateTask) {, +                        UpdateTask uTask = (UpdateTask) task;, +                        ClusterStateUpdateResponse response = new ClusterStateUpdateResponse(true);, +                        uTask.listener.onResponse(response);, +                    }, +                }, +        clusterService.submitStateUpdateTask("update-mapping [" + index + "][" + type + "] / node [" + nodeId + "], order [" + order + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +            private volatile List<MappingTask> allTasks;, +, +                Tuple<ClusterState, List<MappingTask>> tuple = executeRefreshOrUpdate(currentState, insertOrder);, +                this.allTasks = tuple.v2();, +                return tuple.v1();, +            }, +, +            @Override, +            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                if (allTasks == null) {, +                    return;, +                }, +                for (Object task : allTasks) {, +                    if (task instanceof UpdateTask) {, +                        UpdateTask uTask = (UpdateTask) task;, +                        ClusterStateUpdateResponse response = new ClusterStateUpdateResponse(true);, +                        try {, +                            uTask.listener.onResponse(response);, +                        } catch (Throwable t) {, +                            logger.debug("failed ot ping back on response of mapping processing for task [{}]", t, uTask.listener);, +                        }, +                    }, +                }]