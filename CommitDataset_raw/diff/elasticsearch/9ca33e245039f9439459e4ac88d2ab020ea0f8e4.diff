[+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java, +import org.elasticsearch.common.xcontent.XContentParserUtils;, +                unique, Collections.unmodifiableList(parentIdFields), eagerGlobalOrdinals);, +                if ("relations".equals(entry.getKey())) {, +                    Map<String, Object> relations = XContentMapValues.nodeMapValue(entry.getValue(), "relations");, +                    for (Iterator<Map.Entry<String, Object>> relIt = relations.entrySet().iterator(); relIt.hasNext(); ) {, +                        Map.Entry<String, Object> relation = relIt.next();, +                        final String parent = relation.getKey();, +                        if (XContentMapValues.isArray(relation.getValue())) {, +                            children = new HashSet<>(Arrays.asList(XContentMapValues.nodeStringArrayValue(relation.getValue())));, +                            children = Collections.singleton(relation.getValue().toString());, +                    }, +            }, +    private boolean eagerGlobalOrdinals;, +                                    List<ParentIdFieldMapper> parentIdFields,, +                                    boolean eagerGlobalOrdinals) {, +        this.eagerGlobalOrdinals = eagerGlobalOrdinals;, +        this.eagerGlobalOrdinals = joinMergeWith.eagerGlobalOrdinals;, +        builder.field("eager_global_ordinals", eagerGlobalOrdinals);, +        builder.startObject("relations");, +        builder.endObject();, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java, +import org.elasticsearch.common.xcontent.XContentParserUtils;, +                unique, Collections.unmodifiableList(parentIdFields), eagerGlobalOrdinals);, +                if ("relations".equals(entry.getKey())) {, +                    Map<String, Object> relations = XContentMapValues.nodeMapValue(entry.getValue(), "relations");, +                    for (Iterator<Map.Entry<String, Object>> relIt = relations.entrySet().iterator(); relIt.hasNext(); ) {, +                        Map.Entry<String, Object> relation = relIt.next();, +                        final String parent = relation.getKey();, +                        if (XContentMapValues.isArray(relation.getValue())) {, +                            children = new HashSet<>(Arrays.asList(XContentMapValues.nodeStringArrayValue(relation.getValue())));, +                            children = Collections.singleton(relation.getValue().toString());, +                    }, +            }, +    private boolean eagerGlobalOrdinals;, +                                    List<ParentIdFieldMapper> parentIdFields,, +                                    boolean eagerGlobalOrdinals) {, +        this.eagerGlobalOrdinals = eagerGlobalOrdinals;, +        this.eagerGlobalOrdinals = joinMergeWith.eagerGlobalOrdinals;, +        builder.field("eager_global_ordinals", eagerGlobalOrdinals);, +        builder.startObject("relations");, +        builder.endObject();, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ChildrenIT.java, +                    .addMapping("doc",, +                        addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true, "article", "comment"),, +                            "commenter", "keyword", "category", "keyword")), +                        .addMapping("doc",, +                            addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true, "parent", "child"),, +                                "name", "keyword")), +                        .addMapping("doc",, +                            addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true,, +                                masterType, childType),, +                                "brand", "text", "name", "keyword", "material", "text", "color", "keyword", "size", "keyword")), +                        .addMapping("doc",, +                            addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true,, +                                grandParentType, parentType, parentType, childType),, +                                "name", "keyword")), +                        .addMapping("doc",, +                            addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true,, +                                "parentType", "childType"),, +                                "name", "keyword", "town", "keyword", "age", "integer")), +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java, +import org.elasticsearch.common.xcontent.XContentParserUtils;, +                unique, Collections.unmodifiableList(parentIdFields), eagerGlobalOrdinals);, +                if ("relations".equals(entry.getKey())) {, +                    Map<String, Object> relations = XContentMapValues.nodeMapValue(entry.getValue(), "relations");, +                    for (Iterator<Map.Entry<String, Object>> relIt = relations.entrySet().iterator(); relIt.hasNext(); ) {, +                        Map.Entry<String, Object> relation = relIt.next();, +                        final String parent = relation.getKey();, +                        if (XContentMapValues.isArray(relation.getValue())) {, +                            children = new HashSet<>(Arrays.asList(XContentMapValues.nodeStringArrayValue(relation.getValue())));, +                            children = Collections.singleton(relation.getValue().toString());, +                    }, +            }, +    private boolean eagerGlobalOrdinals;, +                                    List<ParentIdFieldMapper> parentIdFields,, +                                    boolean eagerGlobalOrdinals) {, +        this.eagerGlobalOrdinals = eagerGlobalOrdinals;, +        this.eagerGlobalOrdinals = joinMergeWith.eagerGlobalOrdinals;, +        builder.field("eager_global_ordinals", eagerGlobalOrdinals);, +        builder.startObject("relations");, +        builder.endObject();, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ChildrenIT.java, +                    .addMapping("doc",, +                        addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true, "article", "comment"),, +                            "commenter", "keyword", "category", "keyword")), +                        .addMapping("doc",, +                            addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true, "parent", "child"),, +                                "name", "keyword")), +                        .addMapping("doc",, +                            addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true,, +                                masterType, childType),, +                                "brand", "text", "name", "keyword", "material", "text", "color", "keyword", "size", "keyword")), +                        .addMapping("doc",, +                            addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true,, +                                grandParentType, parentType, parentType, childType),, +                                "name", "keyword")), +                        .addMapping("doc",, +                            addFieldMappings(buildParentJoinFieldMappingFromSimplifiedDef("join_field", true,, +                                "parentType", "childType"),]