[+++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java, +import org.elasticsearch.repositories.IndexId;, +        private final List<IndexId> indices;, +        public Entry(Snapshot snapshot, boolean includeGlobalState, boolean partial, State state, List<IndexId> indices,, +                     long startTime, ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards) {, +        public List<IndexId> indices() {, +            List<IndexId> indexBuilder = new ArrayList<>();, +                indexBuilder.add(new IndexId(in.readString(), in.readString()));, +            for (IndexId index : entry.indices()) {, +                index.writeTo(out);, +            for (IndexId index : entry.indices()) {, +                index.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java, +import org.elasticsearch.repositories.IndexId;, +        private final List<IndexId> indices;, +        public Entry(Snapshot snapshot, boolean includeGlobalState, boolean partial, State state, List<IndexId> indices,, +                     long startTime, ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards) {, +        public List<IndexId> indices() {, +            List<IndexId> indexBuilder = new ArrayList<>();, +                indexBuilder.add(new IndexId(in.readString(), in.readString()));, +            for (IndexId index : entry.indices()) {, +                index.writeTo(out);, +            for (IndexId index : entry.indices()) {, +                index.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java, +import org.elasticsearch.repositories.IndexId;, +            final String indexName = restoreSource.index();, +            if (!shardId.getIndexName().equals(indexName)) {, +                snapshotShardId = new ShardId(indexName, IndexMetaData.INDEX_UUID_NA_VALUE, shardId.id());, +            final IndexId indexId = repository.getRepositoryData().resolveIndexId(indexName);, +            repository.restoreShard(indexShard, restoreSource.snapshot().getSnapshotId(), restoreSource.version(), indexId, snapshotShardId, indexShard.recoveryState());, +++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java, +import org.elasticsearch.repositories.IndexId;, +        private final List<IndexId> indices;, +        public Entry(Snapshot snapshot, boolean includeGlobalState, boolean partial, State state, List<IndexId> indices,, +                     long startTime, ImmutableOpenMap<ShardId, ShardSnapshotStatus> shards) {, +        public List<IndexId> indices() {, +            List<IndexId> indexBuilder = new ArrayList<>();, +                indexBuilder.add(new IndexId(in.readString(), in.readString()));, +            for (IndexId index : entry.indices()) {, +                index.writeTo(out);, +            for (IndexId index : entry.indices()) {, +                index.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java, +import org.elasticsearch.repositories.IndexId;, +            final String indexName = restoreSource.index();, +            if (!shardId.getIndexName().equals(indexName)) {, +                snapshotShardId = new ShardId(indexName, IndexMetaData.INDEX_UUID_NA_VALUE, shardId.id());, +            final IndexId indexId = repository.getRepositoryData().resolveIndexId(indexName);, +            repository.restoreShard(indexShard, restoreSource.snapshot().getSnapshotId(), restoreSource.version(), indexId, snapshotShardId, indexShard.recoveryState());, +++ b/core/src/main/java/org/elasticsearch/repositories/IndexId.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.repositories;, +, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +import java.io.IOException;, +import java.util.Objects;, +, +/**, + * Represents a single snapshotted index in the repository., + */, +public final class IndexId implements Writeable, ToXContent {, +    protected static final String NAME = "name";, +    protected static final String ID = "id";, +, +    private final String name;, +    private final String id;, +, +    public IndexId(final String name, final String id) {, +        this.name = name;, +        this.id = id;, +    }, +, +    public IndexId(final StreamInput in) throws IOException {, +        this.name = in.readString();, +        this.id = in.readString();, +    }]