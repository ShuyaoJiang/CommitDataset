[+++ b/server/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java, +import org.elasticsearch.transport.TransportMessageListener;, +        transportService.transport().addMessageListener(new TransportMessageListener() {, +            public void onRequestReceived(long requestId, String action) {, +++ b/server/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java, +import org.elasticsearch.transport.TransportMessageListener;, +        transportService.transport().addMessageListener(new TransportMessageListener() {, +            public void onRequestReceived(long requestId, String action) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +++ b/server/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java, +import org.elasticsearch.transport.TransportMessageListener;, +        transportService.transport().addMessageListener(new TransportMessageListener() {, +            public void onRequestReceived(long requestId, String action) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java, +++ b/server/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationIT.java, +import org.elasticsearch.transport.TransportMessageListener;, +        transportService.transport().addMessageListener(new TransportMessageListener() {, +            public void onRequestReceived(long requestId, String action) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java, +++ b/test/framework/src/main/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java, +import org.apache.logging.log4j.Level;, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.test.MockLogAppender;, +import org.elasticsearch.test.junit.annotations.TestLogging;, +    public void testMessageListeners() throws Exception {, +        class CountingListener implements TransportMessageListener {, +            public void onRequestReceived(long requestId, String action) {, +            public void onResponseSent(long requestId, String action, TransportResponse response) {, +            public void onResponseSent(long requestId, String action, Exception error) {, +            public void onResponseReceived(long requestId, Transport.ResponseContext context) {, +                if (context.action().equals(ACTION)) {, +            public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,, +                                      TransportRequestOptions options) {, +, +        final CountingListener tracerA = new CountingListener();, +        final CountingListener tracerB = new CountingListener();, +        serviceA.transport().addMessageListener(tracerA);, +        serviceB.transport().addMessageListener(tracerB);, +            serviceA.submitRequest(nodeB, ACTION, TransportRequest.Empty.INSTANCE, EmptyTransportResponseHandler.INSTANCE_SAME).get();, +            serviceB.submitRequest(nodeA, ACTION, TransportRequest.Empty.INSTANCE, EmptyTransportResponseHandler.INSTANCE_SAME).get();, +            assertThat(tracerA.requestsSent.get(), equalTo(1));, +            assertThat(tracerA.responseReceived.get(), equalTo(1));, +            assertThat(tracerB.requestsSent.get(), equalTo(1));, +            assertThat(tracerB.responseReceived.get(), equalTo(1));, +    @TestLogging(value = "org.elasticsearch.transport.TransportService.tracer:trace"), +    public void testTracerLog() throws Exception {, +        TransportRequestHandler<StringMessageRequest> handlerWithError = (request, channel, task) -> {, +        serviceA.registerRequestHandler("internal:testNotSeen", StringMessageRequest::new, ThreadPool.Names.SAME, handler);, +        serviceB.registerRequestHandler("internal:testNotSeen", StringMessageRequest::new, ThreadPool.Names.SAME, handler);, +            excludeSettings = "internal:testNotSeen";, +            includeSettings = "internal:test,internal:testError";, +        MockLogAppender appender = new MockLogAppender();, +        Loggers.addAppender(LogManager.getLogger("org.elasticsearch.transport.TransportService.tracer"), appender);, +        try {, +            appender.start();, +            final String requestSent = ".*\\[internal:test].*sent to.*\\{TS_B}.*";, +            final MockLogAppender.LoggingExpectation requestSentExpectation =, +                new MockLogAppender.PatternSeenEventExcpectation(, +                    "sent request", "org.elasticsearch.transport.TransportService.tracer", Level.TRACE, requestSent);, +            final String requestReceived = ".*\\[internal:test].*received request.*";, +            final MockLogAppender.LoggingExpectation requestReceivedExpectation =, +                new MockLogAppender.PatternSeenEventExcpectation(, +                    "received request", "org.elasticsearch.transport.TransportService.tracer", Level.TRACE, requestReceived);, +            final String responseSent = ".*\\[internal:test].*sent response.*";, +            final MockLogAppender.LoggingExpectation responseSentExpectation =, +                new MockLogAppender.PatternSeenEventExcpectation(, +                    "sent response", "org.elasticsearch.transport.TransportService.tracer", Level.TRACE, responseSent);, +            final String responseReceived = ".*\\[internal:test].*received response from.*\\{TS_B}.*";, +            final MockLogAppender.LoggingExpectation responseReceivedExpectation =, +                new MockLogAppender.PatternSeenEventExcpectation(, +                    "received response", "org.elasticsearch.transport.TransportService.tracer", Level.TRACE, responseReceived);, +, +            appender.addExpectation(requestSentExpectation);, +            appender.addExpectation(requestReceivedExpectation);, +            appender.addExpectation(responseSentExpectation);, +            appender.addExpectation(responseReceivedExpectation);, +, +            StringMessageRequest request = new StringMessageRequest("", 10);, +            serviceA.sendRequest(nodeB, "internal:test", request, TransportRequestOptions.EMPTY, noopResponseHandler);, +, +            assertBusy(appender::assertAllExpectationsMatched);, +, +            final String errorResponseSent = ".*\\[internal:testError].*sent error response.*";, +            final MockLogAppender.LoggingExpectation errorResponseSentExpectation =, +                new MockLogAppender.PatternSeenEventExcpectation(, +                    "sent error response", "org.elasticsearch.transport.TransportService.tracer", Level.TRACE, errorResponseSent);, +, +            final String errorResponseReceived = ".*\\[internal:testError].*received response from.*\\{TS_B}.*";, +            final MockLogAppender.LoggingExpectation errorResponseReceivedExpectation =, +                new MockLogAppender.PatternSeenEventExcpectation(, +                    "received error response", "org.elasticsearch.transport.TransportService.tracer", Level.TRACE, errorResponseReceived);, +, +            appender.addExpectation(errorResponseSentExpectation);, +            appender.addExpectation(errorResponseReceivedExpectation);, +, +            assertBusy(appender::assertAllExpectationsMatched);, +            final String notSeenSent = "*[internal:testNotSeen]*sent to*";]