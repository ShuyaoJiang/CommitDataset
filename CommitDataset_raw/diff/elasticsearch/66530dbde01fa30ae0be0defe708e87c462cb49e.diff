[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +     * @return {@code true} if the request succeeded (the user is enabled), +    public boolean enableUser(EnableUserRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequest(request, SecurityRequestConverters::enableUser, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +     * @deprecated use {@link #enableUser(EnableUserRequest, RequestOptions)} instead, +    public boolean enableUser(RequestOptions options, EnableUserRequest request) throws IOException {, +        return enableUser(request, options);, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +    public void enableUserAsync(EnableUserRequest request, RequestOptions options,, +     * Enable a native realm or built-in user asynchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html">, +     * the docs</a> for more., +     *, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request  the request with the user to enable, +     * @param listener the listener to be notified upon request completion, +     * @deprecated use {@link #enableUserAsync(EnableUserRequest, RequestOptions, ActionListener)} instead, +     */, +    @Deprecated, +    public void enableUserAsync(RequestOptions options, EnableUserRequest request,, +                                ActionListener<Boolean> listener) {, +        enableUserAsync(request, options, listener);, +    }, +, +    /**, +     * @return {@code true} if the request succeeded (the user is disabled), +    public boolean disableUser(DisableUserRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequest(request, SecurityRequestConverters::disableUser, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +     * @deprecated use {@link #disableUser(DisableUserRequest, RequestOptions)} instead, +    public boolean disableUser(RequestOptions options, DisableUserRequest request) throws IOException {, +        return disableUser(request, options);, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +    public void disableUserAsync(DisableUserRequest request, RequestOptions options,, +     * Disable a native realm or built-in user asynchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html">, +     * the docs</a> for more., +     *, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request  the request with the user to disable, +     * @param listener the listener to be notified upon request completion, +     * @deprecated use {@link #disableUserAsync(DisableUserRequest, RequestOptions, ActionListener)} instead, +     */, +    @Deprecated, +    public void disableUserAsync(RequestOptions options, DisableUserRequest request,, +                                 ActionListener<Boolean> listener) {, +        disableUserAsync(request, options, listener);, +    }, +, +    /**, +     * @return {@code true} if the request succeeded (the new password was set), +    public boolean changePassword(ChangePasswordRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequest(request, SecurityRequestConverters::changePassword, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +     * @deprecated use {@link #changePassword(ChangePasswordRequest, RequestOptions)} instead, +    public boolean changePassword(RequestOptions options, ChangePasswordRequest request) throws IOException {, +        return changePassword(request, options);, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +    public void changePasswordAsync(ChangePasswordRequest request, RequestOptions options,, +    /**, +     * Change the password of a user of a native realm or built-in user asynchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html">, +     * the docs</a> for more., +     *, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request  the request with the user's new password, +     * @param listener the listener to be notified upon request completion, +     * @deprecated use {@link #changePasswordAsync(ChangePasswordRequest, RequestOptions, ActionListener)} instead, +     */, +    @Deprecated, +    public void changePasswordAsync(RequestOptions options, ChangePasswordRequest request,, +                                    ActionListener<Boolean> listener) {, +        changePasswordAsync(request, options, listener);, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +     * @return {@code true} if the request succeeded (the user is enabled), +    public boolean enableUser(EnableUserRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequest(request, SecurityRequestConverters::enableUser, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +     * @deprecated use {@link #enableUser(EnableUserRequest, RequestOptions)} instead, +    public boolean enableUser(RequestOptions options, EnableUserRequest request) throws IOException {, +        return enableUser(request, options);, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +    public void enableUserAsync(EnableUserRequest request, RequestOptions options,, +     * Enable a native realm or built-in user asynchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html">, +     * the docs</a> for more., +     *, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request  the request with the user to enable, +     * @param listener the listener to be notified upon request completion, +     * @deprecated use {@link #enableUserAsync(EnableUserRequest, RequestOptions, ActionListener)} instead, +     */, +    @Deprecated, +    public void enableUserAsync(RequestOptions options, EnableUserRequest request,, +                                ActionListener<Boolean> listener) {, +        enableUserAsync(request, options, listener);, +    }, +]