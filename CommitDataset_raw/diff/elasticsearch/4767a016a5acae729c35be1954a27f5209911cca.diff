[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MachineLearningFeatureSetUsage.java, +import org.elasticsearch.Version;, +    public static final String NODE_COUNT = "node_count";, +    private final int nodeCount;, +                                          Map<String, Object> datafeedsUsage, int nodeCount) {, +        this.nodeCount = nodeCount;, +        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, +            this.nodeCount = in.readInt();, +        } else {, +            this.nodeCount = -1;, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +            out.writeInt(nodeCount);, +        }, +        if (nodeCount >= 0) {, +            builder.field(NODE_COUNT, nodeCount);, +        }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MachineLearningFeatureSetUsage.java, +import org.elasticsearch.Version;, +    public static final String NODE_COUNT = "node_count";, +    private final int nodeCount;, +                                          Map<String, Object> datafeedsUsage, int nodeCount) {, +        this.nodeCount = nodeCount;, +        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, +            this.nodeCount = in.readInt();, +        } else {, +            this.nodeCount = -1;, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +            out.writeInt(nodeCount);, +        }, +        if (nodeCount >= 0) {, +            builder.field(NODE_COUNT, nodeCount);, +        }, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +        new Retriever(client, MlMetadata.getMlMetadata(state), available(), enabled(), mlNodeCount(state)).execute(listener);, +    }, +, +    private int mlNodeCount(final ClusterState clusterState) {, +        if (enabled == false) {, +            return 0;, +        }, +, +        int mlNodeCount = 0;, +        for (DiscoveryNode node : clusterState.getNodes()) {, +            String enabled = node.getAttributes().get(MachineLearning.ML_ENABLED_NODE_ATTR);, +            if (Boolean.parseBoolean(enabled)) {, +                ++mlNodeCount;, +            }, +        }, +        return mlNodeCount;, +        private int nodeCount;, +        public Retriever(Client client, MlMetadata mlMetadata, boolean available, boolean enabled, int nodeCount) {, +            this.nodeCount = nodeCount;, +                listener.onResponse(, +                    new MachineLearningFeatureSetUsage(available, enabled, Collections.emptyMap(), Collections.emptyMap(), 0));, +                                        available, enabled, jobsUsage, datafeedsUsage, nodeCount));, +                            listener::onFailure, +                    listener::onFailure, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MachineLearningFeatureSetUsage.java, +import org.elasticsearch.Version;, +    public static final String NODE_COUNT = "node_count";, +    private final int nodeCount;, +                                          Map<String, Object> datafeedsUsage, int nodeCount) {, +        this.nodeCount = nodeCount;, +        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, +            this.nodeCount = in.readInt();, +        } else {, +            this.nodeCount = -1;, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +            out.writeInt(nodeCount);, +        }, +        if (nodeCount >= 0) {, +            builder.field(NODE_COUNT, nodeCount);, +        }, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +        new Retriever(client, MlMetadata.getMlMetadata(state), available(), enabled(), mlNodeCount(state)).execute(listener);, +    }, +, +    private int mlNodeCount(final ClusterState clusterState) {, +        if (enabled == false) {, +            return 0;, +        }, +, +        int mlNodeCount = 0;, +        for (DiscoveryNode node : clusterState.getNodes()) {, +            String enabled = node.getAttributes().get(MachineLearning.ML_ENABLED_NODE_ATTR);, +            if (Boolean.parseBoolean(enabled)) {, +                ++mlNodeCount;, +            }, +        }, +        return mlNodeCount;, +        private int nodeCount;, +        public Retriever(Client client, MlMetadata mlMetadata, boolean available, boolean enabled, int nodeCount) {, +            this.nodeCount = nodeCount;, +                listener.onResponse(, +                    new MachineLearningFeatureSetUsage(available, enabled, Collections.emptyMap(), Collections.emptyMap(), 0));]