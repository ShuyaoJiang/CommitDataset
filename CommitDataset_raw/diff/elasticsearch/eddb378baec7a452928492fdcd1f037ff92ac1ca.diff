[+++ b/src/test/java/org/elasticsearch/test/CompositeTestCluster.java, +                    externalNodes[i] = externalNodes[i].start(client, defaultSettings, NODE_PREFIX + i, cluster.getClusterName(), i);, +++ b/src/test/java/org/elasticsearch/test/CompositeTestCluster.java, +                    externalNodes[i] = externalNodes[i].start(client, defaultSettings, NODE_PREFIX + i, cluster.getClusterName(), i);, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +import org.hamcrest.CoreMatchers;, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new NodeSettingsSource() {, +            @Override, +            public Settings settings(int nodeOrdinal) {, +                return externalNodeSettings(nodeOrdinal);, +            }, +        });, +        return new CompositeTestCluster((InternalTestCluster) cluster, between(minExternalNodes(), maxExternalNodes()), externalNode);, +, +    protected Settings externalNodeSettings(int nodeOrdinal) {, +        return ImmutableSettings.EMPTY;, +    }, +++ b/src/test/java/org/elasticsearch/test/CompositeTestCluster.java, +                    externalNodes[i] = externalNodes[i].start(client, defaultSettings, NODE_PREFIX + i, cluster.getClusterName(), i);, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +import org.hamcrest.CoreMatchers;, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new NodeSettingsSource() {, +            @Override, +            public Settings settings(int nodeOrdinal) {, +                return externalNodeSettings(nodeOrdinal);, +            }, +        });, +        return new CompositeTestCluster((InternalTestCluster) cluster, between(minExternalNodes(), maxExternalNodes()), externalNode);, +, +    protected Settings externalNodeSettings(int nodeOrdinal) {, +        return ImmutableSettings.EMPTY;, +    }, +++ b/src/test/java/org/elasticsearch/test/ExternalNode.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +    private final NodeSettingsSource nodeSettingsSource;, +    ExternalNode(File path, long seed, NodeSettingsSource nodeSettingsSource) {, +        this(path, null, seed, nodeSettingsSource);, +    ExternalNode(File path, String clusterName, long seed, NodeSettingsSource nodeSettingsSource) {, +        this.nodeSettingsSource = nodeSettingsSource;, +    synchronized ExternalNode start(Client localNode, Settings defaultSettings, String nodeName, String clusterName, int nodeOrdinal) throws IOException, InterruptedException {, +        ExternalNode externalNode = new ExternalNode(path, clusterName, random.nextLong(), nodeSettingsSource);, +        Settings settings = ImmutableSettings.builder().put(nodeSettingsSource.settings(nodeOrdinal)).put(defaultSettings).build();]