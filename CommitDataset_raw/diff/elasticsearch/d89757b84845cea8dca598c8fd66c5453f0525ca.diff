[+++ b/core/src/test/java/org/elasticsearch/action/support/replication/ReplicationResponseTests.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +            final Set<String> indexNamePool = new HashSet<>(Arrays.asList(randomUnicodeOfCodepointLength(5), randomUnicodeOfCodepointLength(6)));, +            indexNamePool.remove(index.getName());, +            final ShardId randomIndex = new ShardId(randomFrom(indexNamePool), index.getUUID(), failure.shardId());, +            final Set<String> uuidPool = new HashSet<>(Arrays.asList(randomUnicodeOfCodepointLength(5), randomUnicodeOfCodepointLength(6)));, +            uuidPool.remove(index.getUUID());, +            final ShardId randomUUID = new ShardId(index.getName(), randomFrom(uuidPool), failure.shardId());, +            final Set<String> nodeIdPool = new HashSet<>(Arrays.asList(randomUnicodeOfLength(3), randomUnicodeOfLength(4)));, +            nodeIdPool.remove(failure.nodeId());, +            final String randomNode = randomFrom(nodeIdPool);, +            final Set<Exception> exceptionPool = new HashSet<>(Arrays.asList(new IllegalStateException("a"), new IllegalArgumentException("b")));, +            exceptionPool.remove(failure.getCause());, +            final Exception randomException = randomFrom(exceptionPool);, +            final Set<RestStatus> otherStatuses = new HashSet<>(Arrays.asList(RestStatus.values()));, +            otherStatuses.remove(failure.status());, +            final RestStatus randomStatus = randomFrom(otherStatuses);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/ReplicationResponseTests.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +            final Set<String> indexNamePool = new HashSet<>(Arrays.asList(randomUnicodeOfCodepointLength(5), randomUnicodeOfCodepointLength(6)));, +            indexNamePool.remove(index.getName());, +            final ShardId randomIndex = new ShardId(randomFrom(indexNamePool), index.getUUID(), failure.shardId());, +            final Set<String> uuidPool = new HashSet<>(Arrays.asList(randomUnicodeOfCodepointLength(5), randomUnicodeOfCodepointLength(6)));, +            uuidPool.remove(index.getUUID());, +            final ShardId randomUUID = new ShardId(index.getName(), randomFrom(uuidPool), failure.shardId());, +            final Set<String> nodeIdPool = new HashSet<>(Arrays.asList(randomUnicodeOfLength(3), randomUnicodeOfLength(4)));, +            nodeIdPool.remove(failure.nodeId());, +            final String randomNode = randomFrom(nodeIdPool);, +            final Set<Exception> exceptionPool = new HashSet<>(Arrays.asList(new IllegalStateException("a"), new IllegalArgumentException("b")));, +            exceptionPool.remove(failure.getCause());, +            final Exception randomException = randomFrom(exceptionPool);, +            final Set<RestStatus> otherStatuses = new HashSet<>(Arrays.asList(RestStatus.values()));, +            otherStatuses.remove(failure.status());, +            final RestStatus randomStatus = randomFrom(otherStatuses);, +++ b/test/framework/src/main/java/org/elasticsearch/test/EqualsHashCodeTestUtils.java, +                T mutation = mutationFunction.mutate(original);, +                assertThat(objectName + " mutation should not be equal to original", mutation,]