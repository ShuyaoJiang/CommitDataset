[+++ b/core/src/test/java/org/elasticsearch/search/stats/SearchStatsTests.java, +import org.elasticsearch.action.admin.cluster.stats.ClusterStatsRequest;, +import org.elasticsearch.action.admin.cluster.stats.ClusterStatsRequestBuilder;, +import java.util.Iterator;, +        String index = "test1";, +        createIndex(index);, +        ensureGreen(index);, +, +        // create shards * docs number of docs and attempt to distribute them equally, +        // this distribution will not be perfect; each shard will have an integer multiple of docs (possibly zero), +        // we do this so we have a lot of pages to scroll through, +        for (int s = 0; s < numAssignedShards(index); s++) {, +                client(), +                        .prepareIndex(index, "type", Integer.toString(s * docs + i)), +                        .setSource("field", "value"), +                        .setRouting(Integer.toString(s)), +                        .execute(), +                        .actionGet();, +        }, +        client().admin().indices().prepareRefresh(index).execute().actionGet();, +, +        IndicesStatsResponse indicesStats = client().admin().indices().prepareStats(index).execute().actionGet();, +        int size = scaledRandomIntBetween(1, docs);, +                .setSize(size), +        // refresh the stats now that scroll contexts are opened, +        indicesStats = client().admin().indices().prepareStats(index).execute().actionGet();, +        assertThat(indicesStats.getTotal().getSearch().getOpenContexts(), equalTo((long) numAssignedShards(index)));, +        assertThat(indicesStats.getTotal().getSearch().getTotal().getScrollCurrent(), equalTo((long) numAssignedShards(index)));, +, +        int hits = 0;, +            hits += searchResponse.getHits().getHits().length;, +        long expected = 0;, +, +        // the number of queries executed is equal to the sum of 1 + number of pages in shard over all shards, +        IndicesStatsResponse r = client().admin().indices().prepareStats(index).execute().actionGet();, +        for (int s = 0; s < numAssignedShards(index); s++) {, +            expected += 1 + (long)Math.ceil(r.getShards()[s].getStats().getDocs().getCount() / size);, +        }, +        assertEquals(hits, docs * numAssignedShards(index));, +        assertThat(stats.getQueryCount(), equalTo(expected));, +        assertThat(stats.getScrollCount(), equalTo((long)numAssignedShards(index)));]