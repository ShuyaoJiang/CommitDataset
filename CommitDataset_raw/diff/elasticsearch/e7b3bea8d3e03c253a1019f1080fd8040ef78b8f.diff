[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.config.Registry;, +import org.apache.http.conn.socket.ConnectionSocketFactory;, +    private RestClient(CloseableHttpClient client, long maxRetryTimeoutMillis, Header[] defaultHeaders,, +        private CloseableHttpClient httpClient;, +         * Sets the http client. A new default one will be created if not, +         * specified, by calling {@link #createDefaultHttpClient(Registry)})}., +         *, +         * @see CloseableHttpClient, +         */, +        public Builder setHttpClient(CloseableHttpClient httpClient) {, +            this.httpClient = httpClient;, +            return this;, +        }, +, +        /**, +         * Sets the default request headers, to be used when creating the default http client instance., +         * In case the http client is set through {@link #setHttpClient(CloseableHttpClient)}, the default headers need to be, +         * set to it externally during http client construction., +            Objects.requireNonNull(defaultHeaders, "default headers must not be null");, +            Objects.requireNonNull(failureListener, "failure listener must not be null");, +            if (httpClient == null) {, +                httpClient = createDefaultHttpClient(null);, +            }, +        /**, +         * Creates a {@link CloseableHttpClient} with default settings. Used when the http client instance is not provided., +         *, +         * @see CloseableHttpClient, +         */, +        public static CloseableHttpClient createDefaultHttpClient(Registry<ConnectionSocketFactory> socketFactoryRegistry) {, +            PoolingHttpClientConnectionManager connectionManager;, +            if (socketFactoryRegistry == null) {, +                connectionManager = new PoolingHttpClientConnectionManager();, +            } else {, +                connectionManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);, +            //default timeouts are all infinite, +            RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +                    .setSocketTimeout(DEFAULT_SOCKET_TIMEOUT_MILLIS), +                    .setConnectionRequestTimeout(DEFAULT_CONNECTION_REQUEST_TIMEOUT_MILLIS).build();, +            return HttpClientBuilder.create().setConnectionManager(connectionManager).setDefaultRequestConfig(requestConfig).build();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.config.Registry;, +import org.apache.http.conn.socket.ConnectionSocketFactory;, +    private RestClient(CloseableHttpClient client, long maxRetryTimeoutMillis, Header[] defaultHeaders,, +        private CloseableHttpClient httpClient;, +         * Sets the http client. A new default one will be created if not, +         * specified, by calling {@link #createDefaultHttpClient(Registry)})}., +         *, +         * @see CloseableHttpClient, +         */, +        public Builder setHttpClient(CloseableHttpClient httpClient) {, +            this.httpClient = httpClient;, +            return this;, +        }, +, +        /**, +         * Sets the default request headers, to be used when creating the default http client instance., +         * In case the http client is set through {@link #setHttpClient(CloseableHttpClient)}, the default headers need to be, +         * set to it externally during http client construction., +            Objects.requireNonNull(defaultHeaders, "default headers must not be null");, +            Objects.requireNonNull(failureListener, "failure listener must not be null");, +            if (httpClient == null) {, +                httpClient = createDefaultHttpClient(null);, +            }, +        /**, +         * Creates a {@link CloseableHttpClient} with default settings. Used when the http client instance is not provided., +         *, +         * @see CloseableHttpClient, +         */, +        public static CloseableHttpClient createDefaultHttpClient(Registry<ConnectionSocketFactory> socketFactoryRegistry) {, +            PoolingHttpClientConnectionManager connectionManager;, +            if (socketFactoryRegistry == null) {, +                connectionManager = new PoolingHttpClientConnectionManager();, +            } else {, +                connectionManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);, +            //default timeouts are all infinite, +            RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +                    .setSocketTimeout(DEFAULT_SOCKET_TIMEOUT_MILLIS), +                    .setConnectionRequestTimeout(DEFAULT_CONNECTION_REQUEST_TIMEOUT_MILLIS).build();, +            return HttpClientBuilder.create().setConnectionManager(connectionManager).setDefaultRequestConfig(requestConfig).build();, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.config.Registry;, +import org.apache.http.conn.socket.ConnectionSocketFactory;, +    private RestClient(CloseableHttpClient client, long maxRetryTimeoutMillis, Header[] defaultHeaders,, +        private CloseableHttpClient httpClient;, +         * Sets the http client. A new default one will be created if not, +         * specified, by calling {@link #createDefaultHttpClient(Registry)})}., +         *, +         * @see CloseableHttpClient, +         */, +        public Builder setHttpClient(CloseableHttpClient httpClient) {, +            this.httpClient = httpClient;, +            return this;, +        }, +]