[+++ b/src/test/java/org/elasticsearch/search/basic/SearchWhileRelocatingTests.java, +import com.carrotsearch.randomizedtesting.annotations.Nightly;, +import com.carrotsearch.randomizedtesting.annotations.Repeat;, +import static org.hamcrest.Matchers.is;, +// @LuceneTestCase.AwaitsFix(bugUrl = "problem with search searching on 1 shard (no replica), " +, +//   "and between getting the cluster state to do the search, and executing it, " +, +//   "the shard has fully relocated (moved from started on one node, to fully started on another node"), +//   ^^ the current impl of the test handles this case gracefully since it can happen with 1 replica as well, +//   we just make sure if we get a partial result without a failure that the postsearch is ok!, +    @Nightly, +    @Nightly, +    @Test, +    public void testSearchAndRelocateConcurrentlyRanodmReplicas() throws Exception {, +        testSearchAndRelocateConcurrently(randomIntBetween(0, 1));, +    }, +, +    private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception {, +        final int numShards = between(1, 20);, +        final int numIters = scaledRandomIntBetween(5, 20);, +            final List<Throwable> nonCriticalExceptions = new CopyOnWriteArrayList<Throwable>();, +, +                        boolean criticalException = true;, +                                // if we did not search all shards but had no failures that is potentially fine, +                                // if only the hit-count is wrong. this can happen if the cluster-state is behind when the, +                                // request comes in. It's a small window but a known limitation., +                                //, +                                criticalException = sr.getTotalShards() == sr.getSuccessfulShards() || sr.getFailedShards() > 0;, +                                criticalException = true;, +                                // this is the more critical but that we hit the actual hit array has a different size than the, +                                // actual number of hits., +                            if (!criticalException) {, +                                nonCriticalExceptions.add(t);, +                            } else {, +                    }, +            if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) {, +                boolean postSearchOK = true;, +                        postSearchOK = false;, +                assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration " + i + ", verification: " + verified, thrownExceptions, Matchers.emptyIterable());, +                // if we hit only non-critical exceptions we only make sure that the post search works, +                logger.info("Non-CriticalExceptions: " + nonCriticalExceptions.toString());, +                assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration " + i + ", verification: " + verified, postSearchOK, is(true));]