[+++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +        settingsModule.registerSetting(scriptSettings.getDefaultScriptLanguageSetting());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +        settingsModule.registerSetting(scriptSettings.getDefaultScriptLanguageSetting());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +        this.defaultLang = scriptSettings.getDefaultScriptLanguageSetting().get(settings);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +        settingsModule.registerSetting(scriptSettings.getDefaultScriptLanguageSetting());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +        this.defaultLang = scriptSettings.getDefaultScriptLanguageSetting().get(settings);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptSettings.java, +    public final static String DEFAULT_LANG = "groovy";, +, +    private final Setting<String> defaultScriptLanguageSetting;, +, +        this.defaultScriptLanguageSetting = new Setting<>("script.default_lang", DEFAULT_LANG, setting -> {, +            if (!"groovy".equals(setting) && !scriptEngineRegistry.getRegisteredLanguages().containsKey(setting)) {, +                throw new IllegalArgumentException("unregistered default language [" + setting + "]");, +            }, +            return setting;, +        }, false, Setting.Scope.CLUSTER);, +, +    public Setting<String> getDefaultScriptLanguageSetting() {, +        return defaultScriptLanguageSetting;, +    }, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +        settingsModule.registerSetting(scriptSettings.getDefaultScriptLanguageSetting());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +        this.defaultLang = scriptSettings.getDefaultScriptLanguageSetting().get(settings);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptSettings.java, +    public final static String DEFAULT_LANG = "groovy";, +, +    private final Setting<String> defaultScriptLanguageSetting;, +, +        this.defaultScriptLanguageSetting = new Setting<>("script.default_lang", DEFAULT_LANG, setting -> {, +            if (!"groovy".equals(setting) && !scriptEngineRegistry.getRegisteredLanguages().containsKey(setting)) {, +                throw new IllegalArgumentException("unregistered default language [" + setting + "]");, +            }, +            return setting;, +        }, false, Setting.Scope.CLUSTER);, +, +    public Setting<String> getDefaultScriptLanguageSetting() {, +        return defaultScriptLanguageSetting;, +    }, +++ b/core/src/test/java/org/elasticsearch/script/ScriptSettingsTests.java, +    public void testDefaultLanguageIsGroovy() {, +        ScriptEngineRegistry scriptEngineRegistry =, +            new ScriptEngineRegistry(Collections.singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(CustomScriptEngineService.class, CustomScriptEngineService.TYPES)));, +        ScriptContextRegistry scriptContextRegistry = new ScriptContextRegistry(Collections.emptyList());, +        ScriptSettings scriptSettings = new ScriptSettings(scriptEngineRegistry, scriptContextRegistry);, +        assertThat(scriptSettings.getDefaultScriptLanguageSetting().get(Settings.EMPTY), equalTo("groovy"));, +    }, +, +    public void testCustomDefaultLanguage() {, +        ScriptEngineRegistry scriptEngineRegistry =, +            new ScriptEngineRegistry(Collections.singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(CustomScriptEngineService.class, CustomScriptEngineService.TYPES)));, +        ScriptContextRegistry scriptContextRegistry = new ScriptContextRegistry(Collections.emptyList());, +        ScriptSettings scriptSettings = new ScriptSettings(scriptEngineRegistry, scriptContextRegistry);, +        String defaultLanguage = randomFrom(CustomScriptEngineService.TYPES);, +        Settings settings = Settings.builder().put("script.default_lang", defaultLanguage).build();, +        assertThat(scriptSettings.getDefaultScriptLanguageSetting().get(settings), equalTo(defaultLanguage));, +    }, +, +    public void testInvalidDefaultLanguage() {, +        ScriptEngineRegistry scriptEngineRegistry =, +            new ScriptEngineRegistry(Collections.singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(CustomScriptEngineService.class, CustomScriptEngineService.TYPES)));, +        ScriptContextRegistry scriptContextRegistry = new ScriptContextRegistry(Collections.emptyList());, +        ScriptSettings scriptSettings = new ScriptSettings(scriptEngineRegistry, scriptContextRegistry);, +        Settings settings = Settings.builder().put("script.default_lang", "C++").build();, +        try {, +            scriptSettings.getDefaultScriptLanguageSetting().get(settings);, +            fail("should have seen unregistered default language");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("unregistered default language [C++]"));, +        }, +    }, +]