[+++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import com.google.common.base.Charsets;, +        } else if (e.getCause() instanceof SizeHeaderFrameDecoder.HttpOnTransportException) {, +            // in case we are able to return data, serialize the exception content and sent it back to the client, +            if (ctx.getChannel().isOpen()) {, +                ChannelBuffer buffer = ChannelBuffers.wrappedBuffer(e.getCause().getMessage().getBytes(Charsets.UTF_8));, +                ChannelFuture channelFuture = ctx.getChannel().write(buffer);, +                channelFuture.addListener(new ChannelFutureListener() {, +                    @Override, +                    public void operationComplete(ChannelFuture future) throws Exception {, +                        future.getChannel().close();, +                    }, +                });, +            }, +++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import com.google.common.base.Charsets;, +        } else if (e.getCause() instanceof SizeHeaderFrameDecoder.HttpOnTransportException) {, +            // in case we are able to return data, serialize the exception content and sent it back to the client, +            if (ctx.getChannel().isOpen()) {, +                ChannelBuffer buffer = ChannelBuffers.wrappedBuffer(e.getCause().getMessage().getBytes(Charsets.UTF_8));, +                ChannelFuture channelFuture = ctx.getChannel().write(buffer);, +                channelFuture.addListener(new ChannelFutureListener() {, +                    @Override, +                    public void operationComplete(ChannelFuture future) throws Exception {, +                        future.getChannel().close();, +                    }, +                });, +            }, +++ b/src/main/java/org/elasticsearch/transport/netty/SizeHeaderFrameDecoder.java, +import com.google.common.base.Charsets;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.rest.RestStatus;, +            // special handling for what is probably HTTP, +            if (bufferStartsWith(buffer, readerIndex, "GET ") ||, +                bufferStartsWith(buffer, readerIndex, "POST ") ||, +                bufferStartsWith(buffer, readerIndex, "PUT ") ||, +                bufferStartsWith(buffer, readerIndex, "HEAD ") ||, +                bufferStartsWith(buffer, readerIndex, "DELETE ") ||, +                bufferStartsWith(buffer, readerIndex, "OPTIONS ") ||, +                bufferStartsWith(buffer, readerIndex, "PATCH ") ||, +                bufferStartsWith(buffer, readerIndex, "TRACE ")) {, +, +                throw new HttpOnTransportException("This is not a HTTP port");, +            }, +, +, +    private boolean bufferStartsWith(ChannelBuffer buffer, int readerIndex, String method) {, +        char[] chars = method.toCharArray();, +        for (int i = 0; i < chars.length; i++) {, +            if (buffer.getByte(readerIndex + i) != chars[i]) {, +                return false;, +            }, +        }, +, +        return true;, +    }, +, +    /**, +     * A helper exception to mark an incoming connection as potentially being HTTP, +     * so an appropriate error code can be returned, +     */, +    public class HttpOnTransportException extends ElasticsearchException {, +, +        public HttpOnTransportException(String msg) {, +            super(msg);, +        }, +, +        @Override, +        public RestStatus status() {, +            return RestStatus.BAD_REQUEST;, +        }, +    }, +++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import com.google.common.base.Charsets;, +        } else if (e.getCause() instanceof SizeHeaderFrameDecoder.HttpOnTransportException) {, +            // in case we are able to return data, serialize the exception content and sent it back to the client, +            if (ctx.getChannel().isOpen()) {, +                ChannelBuffer buffer = ChannelBuffers.wrappedBuffer(e.getCause().getMessage().getBytes(Charsets.UTF_8));, +                ChannelFuture channelFuture = ctx.getChannel().write(buffer);, +                channelFuture.addListener(new ChannelFutureListener() {, +                    @Override, +                    public void operationComplete(ChannelFuture future) throws Exception {, +                        future.getChannel().close();, +                    }, +                });, +            }, +++ b/src/main/java/org/elasticsearch/transport/netty/SizeHeaderFrameDecoder.java, +import com.google.common.base.Charsets;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.rest.RestStatus;, +            // special handling for what is probably HTTP, +            if (bufferStartsWith(buffer, readerIndex, "GET ") ||, +                bufferStartsWith(buffer, readerIndex, "POST ") ||, +                bufferStartsWith(buffer, readerIndex, "PUT ") ||, +                bufferStartsWith(buffer, readerIndex, "HEAD ") ||, +                bufferStartsWith(buffer, readerIndex, "DELETE ") ||, +                bufferStartsWith(buffer, readerIndex, "OPTIONS ") ||, +                bufferStartsWith(buffer, readerIndex, "PATCH ") ||, +                bufferStartsWith(buffer, readerIndex, "TRACE ")) {, +]