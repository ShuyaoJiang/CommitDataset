[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder copyCurrentStructure(XContentParser parser) throws IOException {, +        generator.copyCurrentStructure(parser);, +        return this;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder copyCurrentStructure(XContentParser parser) throws IOException {, +        generator.copyCurrentStructure(parser);, +        return this;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +    void copyCurrentStructure(XContentParser parser) throws IOException;, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder copyCurrentStructure(XContentParser parser) throws IOException {, +        generator.copyCurrentStructure(parser);, +        return this;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +    void copyCurrentStructure(XContentParser parser) throws IOException;, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.xcontent;, +, +import java.io.IOException;, +import java.util.Map;, +, +/**, + * @author kimchy (shay.banon), + */, +public class XContentHelper {, +, +    /**, +     * Merges the defaults provided as the second parameter into the content of the first. Only does recursive merge, +     * for inner maps., +     */, +    @SuppressWarnings({"unchecked"}) public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) {, +        for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) {, +            if (!content.containsKey(defaultEntry.getKey())) {, +                // copy it over, it does not exists in the content, +                content.put(defaultEntry.getKey(), defaultEntry.getValue());, +            } else {, +                // in the content and in the default, only merge compound ones (maps), +                if (content.get(defaultEntry.getKey()) instanceof Map && defaultEntry.getValue() instanceof Map) {, +                    mergeDefaults((Map<String, Object>) content.get(defaultEntry.getKey()), (Map<String, Object>) defaultEntry.getValue());, +                }, +            }, +        }, +    }, +, +    public static void copyCurrentStructure(XContentGenerator generator, XContentParser parser) throws IOException {, +        XContentParser.Token t = parser.currentToken();, +, +        // Let's handle field-name separately first, +        if (t == XContentParser.Token.FIELD_NAME) {, +            generator.writeFieldName(parser.currentName());, +            t = parser.nextToken();, +            // fall-through to copy the associated value, +        }, +, +        switch (t) {, +            case START_ARRAY:, +                generator.writeStartArray();, +                while (parser.nextToken() != XContentParser.Token.END_ARRAY) {, +                    copyCurrentStructure(generator, parser);, +                }, +                generator.writeEndArray();, +                break;, +            case START_OBJECT:, +                generator.writeStartObject();, +                while (parser.nextToken() != XContentParser.Token.END_OBJECT) {, +                    copyCurrentStructure(generator, parser);, +                }, +                generator.writeEndObject();, +                break;, +            default: // others are simple:, +                copyCurrentEvent(generator, parser);, +        }]