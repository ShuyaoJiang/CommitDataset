[+++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/CountDateHistogramFacetCollector.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.LongValues;, +    private final IndexNumericFieldData indexFieldData;, +    private LongValues values;, +    public CountDateHistogramFacetCollector(String facetName, IndexNumericFieldData indexFieldData, TimeZoneRounding tzRounding, DateHistogramFacet.ComparatorType comparatorType, SearchContext context) {, +        this.indexFieldData = indexFieldData;, +        this.histoProc = new DateHistogramProc(tzRounding);, +        values.forEachValueInDoc(doc, histoProc);, +        values = indexFieldData.load(context).getLongValues();, +    public static class DateHistogramProc implements LongValues.ValueInDocProc {, +        public void onMissing(int docId) {, +        }, +, +        @Override, +++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/CountDateHistogramFacetCollector.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.LongValues;, +    private final IndexNumericFieldData indexFieldData;, +    private LongValues values;, +    public CountDateHistogramFacetCollector(String facetName, IndexNumericFieldData indexFieldData, TimeZoneRounding tzRounding, DateHistogramFacet.ComparatorType comparatorType, SearchContext context) {, +        this.indexFieldData = indexFieldData;, +        this.histoProc = new DateHistogramProc(tzRounding);, +        values.forEachValueInDoc(doc, histoProc);, +        values = indexFieldData.load(context).getLongValues();, +    public static class DateHistogramProc implements LongValues.ValueInDocProc {, +        public void onMissing(int docId) {, +        }, +, +        @Override, +++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/DateHistogramFacetProcessor.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.script.SearchScript;, +        if (interval == null) {, +            throw new FacetPhaseExecutionException(facetName, "[interval] is required to be set for histogram facet");, +        }, +, +        FieldMapper keyMapper = context.smartNameFieldMapper(keyField);, +        if (keyMapper == null) {, +        IndexNumericFieldData keyIndexFieldData = context.fieldData().getForField(keyMapper);, +            SearchScript script = context.scriptService().search(context.lookup(), scriptLang, valueScript, params);, +            return new ValueScriptDateHistogramFacetCollector(facetName, keyIndexFieldData, script, tzRounding, comparatorType, context);, +        } else if (valueField != null) {, +            FieldMapper valueMapper = context.smartNameFieldMapper(valueField);, +            if (valueMapper == null) {, +                throw new FacetPhaseExecutionException(facetName, "(value) field [" + valueField + "] not found");, +            }, +            IndexNumericFieldData valueIndexFieldData = context.fieldData().getForField(valueMapper);, +            return new ValueDateHistogramFacetCollector(facetName, keyIndexFieldData, valueIndexFieldData, tzRounding, comparatorType, context);, +            return new CountDateHistogramFacetCollector(facetName, keyIndexFieldData, tzRounding, comparatorType, context);, +++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/CountDateHistogramFacetCollector.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.LongValues;, +    private final IndexNumericFieldData indexFieldData;, +    private LongValues values;, +    public CountDateHistogramFacetCollector(String facetName, IndexNumericFieldData indexFieldData, TimeZoneRounding tzRounding, DateHistogramFacet.ComparatorType comparatorType, SearchContext context) {, +        this.indexFieldData = indexFieldData;, +        this.histoProc = new DateHistogramProc(tzRounding);, +        values.forEachValueInDoc(doc, histoProc);, +        values = indexFieldData.load(context).getLongValues();, +    public static class DateHistogramProc implements LongValues.ValueInDocProc {, +        public void onMissing(int docId) {, +        }, +, +        @Override, +++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/DateHistogramFacetProcessor.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.script.SearchScript;, +        if (interval == null) {, +            throw new FacetPhaseExecutionException(facetName, "[interval] is required to be set for histogram facet");, +        }, +, +        FieldMapper keyMapper = context.smartNameFieldMapper(keyField);, +        if (keyMapper == null) {, +        IndexNumericFieldData keyIndexFieldData = context.fieldData().getForField(keyMapper);, +            SearchScript script = context.scriptService().search(context.lookup(), scriptLang, valueScript, params);, +            return new ValueScriptDateHistogramFacetCollector(facetName, keyIndexFieldData, script, tzRounding, comparatorType, context);, +        } else if (valueField != null) {, +            FieldMapper valueMapper = context.smartNameFieldMapper(valueField);, +            if (valueMapper == null) {, +                throw new FacetPhaseExecutionException(facetName, "(value) field [" + valueField + "] not found");, +            }, +            IndexNumericFieldData valueIndexFieldData = context.fieldData().getForField(valueMapper);, +            return new ValueDateHistogramFacetCollector(facetName, keyIndexFieldData, valueIndexFieldData, tzRounding, comparatorType, context);, +            return new CountDateHistogramFacetCollector(facetName, keyIndexFieldData, tzRounding, comparatorType, context);, +++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/ValueDateHistogramFacetCollector.java, +import org.elasticsearch.index.fielddata.DoubleValues;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.LongValues;, +    private final IndexNumericFieldData keyIndexFieldData;, +    private final IndexNumericFieldData valueIndexFieldData;, +    private LongValues keyValues;, +    public ValueDateHistogramFacetCollector(String facetName, IndexNumericFieldData keyIndexFieldData, IndexNumericFieldData valueIndexFieldData, TimeZoneRounding tzRounding, DateHistogramFacet.ComparatorType comparatorType, SearchContext context) {, +        this.keyIndexFieldData = keyIndexFieldData;, +        this.valueIndexFieldData = valueIndexFieldData;, +        keyValues.forEachValueInDoc(doc, histoProc);, +        keyValues = keyIndexFieldData.load(context).getLongValues();, +        histoProc.valueValues = valueIndexFieldData.load(context).getDoubleValues();, +    public static class DateHistogramProc implements LongValues.ValueInDocProc {, +        DoubleValues valueValues;]