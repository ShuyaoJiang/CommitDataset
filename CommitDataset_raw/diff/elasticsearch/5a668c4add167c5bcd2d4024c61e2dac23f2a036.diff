[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalMappedSignificantTerms.java, +import java.util.Objects;, +, +    @Override, +    protected boolean doEquals(Object obj) {, +        InternalMappedSignificantTerms<?, ?> that = (InternalMappedSignificantTerms<?, ?>) obj;, +        return super.doEquals(obj), +                && Objects.equals(format, that.format), +                && subsetSize == that.subsetSize, +                && supersetSize == that.supersetSize, +                && Objects.equals(significanceHeuristic, that.significanceHeuristic), +                && Objects.equals(buckets, that.buckets), +                && Objects.equals(bucketMap, that.bucketMap);, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(super.doHashCode(), format, subsetSize, supersetSize, significanceHeuristic, buckets, bucketMap);, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalMappedSignificantTerms.java, +import java.util.Objects;, +, +    @Override, +    protected boolean doEquals(Object obj) {, +        InternalMappedSignificantTerms<?, ?> that = (InternalMappedSignificantTerms<?, ?>) obj;, +        return super.doEquals(obj), +                && Objects.equals(format, that.format), +                && subsetSize == that.subsetSize, +                && supersetSize == that.supersetSize, +                && Objects.equals(significanceHeuristic, that.significanceHeuristic), +                && Objects.equals(buckets, that.buckets), +                && Objects.equals(bucketMap, that.bucketMap);, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(super.doHashCode(), format, subsetSize, supersetSize, significanceHeuristic, buckets, bucketMap);, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +import java.util.Objects;, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) {, +                return true;, +            }, +            if (o == null || getClass() != o.getClass()) {, +                return false;, +            }, +, +            Bucket<?> that = (Bucket<?>) o;, +            return bucketOrd == that.bucketOrd &&, +                    Double.compare(that.score, score) == 0 &&, +                    Objects.equals(aggregations, that.aggregations) &&, +                    Objects.equals(format, that.format);, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(getClass(), bucketOrd, aggregations, score, format);, +        }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(minDocCount, requiredSize);, +    }, +, +    @Override, +    protected boolean doEquals(Object obj) {, +        InternalSignificantTerms<?, ?> that = (InternalSignificantTerms<?, ?>) obj;, +        return Objects.equals(minDocCount, that.minDocCount), +                && Objects.equals(requiredSize, that.requiredSize);, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalMappedSignificantTerms.java, +import java.util.Objects;, +, +    @Override, +    protected boolean doEquals(Object obj) {, +        InternalMappedSignificantTerms<?, ?> that = (InternalMappedSignificantTerms<?, ?>) obj;, +        return super.doEquals(obj), +                && Objects.equals(format, that.format), +                && subsetSize == that.subsetSize, +                && supersetSize == that.supersetSize, +                && Objects.equals(significanceHeuristic, that.significanceHeuristic), +                && Objects.equals(buckets, that.buckets), +                && Objects.equals(bucketMap, that.bucketMap);, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(super.doHashCode(), format, subsetSize, supersetSize, significanceHeuristic, buckets, bucketMap);, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +import java.util.Objects;, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) {, +                return true;, +            }]