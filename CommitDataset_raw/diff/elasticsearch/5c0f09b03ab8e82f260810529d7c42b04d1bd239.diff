[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +import org.elasticsearch.tasks.Task;, +    private final Task.Status status;, +, +    public TaskInfo(DiscoveryNode node, long id, String type, String action, String description, Task.Status status) {, +        this(node, id, type, action, description, status, null, -1L);, +    public TaskInfo(DiscoveryNode node, long id, String type, String action, String description, Task.Status status, String parentNode, long parentId) {, +        this.status = status;, +        if (in.readBoolean()) {, +            status = in.readTaskStatus();, +        } else {, +            status = null;, +        }, +    /**, +     * The status of the running task. Only available if TaskInfos were build, +     * with the detailed flag., +     */, +    public Task.Status getStatus() {, +        return status;, +    }, +, +        if (status != null) {, +            out.writeBoolean(true);, +            out.writeTaskStatus(status);, +        } else {, +            out.writeBoolean(false);, +        }, +        if (status != null) {, +            builder.field("status", status, params);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +import org.elasticsearch.tasks.Task;, +    private final Task.Status status;, +, +    public TaskInfo(DiscoveryNode node, long id, String type, String action, String description, Task.Status status) {, +        this(node, id, type, action, description, status, null, -1L);, +    public TaskInfo(DiscoveryNode node, long id, String type, String action, String description, Task.Status status, String parentNode, long parentId) {, +        this.status = status;, +        if (in.readBoolean()) {, +            status = in.readTaskStatus();, +        } else {, +            status = null;, +        }, +    /**, +     * The status of the running task. Only available if TaskInfos were build, +     * with the detailed flag., +     */, +    public Task.Status getStatus() {, +        return status;, +    }, +, +        if (status != null) {, +            out.writeBoolean(true);, +            out.writeTaskStatus(status);, +        } else {, +            out.writeBoolean(false);, +        }, +        if (status != null) {, +            builder.field("status", status, params);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = settingsFilter.filter(indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +import org.elasticsearch.tasks.Task;, +    private final Task.Status status;, +, +    public TaskInfo(DiscoveryNode node, long id, String type, String action, String description, Task.Status status) {, +        this(node, id, type, action, description, status, null, -1L);, +    public TaskInfo(DiscoveryNode node, long id, String type, String action, String description, Task.Status status, String parentNode, long parentId) {, +        this.status = status;, +        if (in.readBoolean()) {, +            status = in.readTaskStatus();, +        } else {, +            status = null;, +        }, +    /**, +     * The status of the running task. Only available if TaskInfos were build, +     * with the detailed flag., +     */, +    public Task.Status getStatus() {, +        return status;, +    }, +, +        if (status != null) {, +            out.writeBoolean(true);, +            out.writeTaskStatus(status);, +        } else {, +            out.writeBoolean(false);, +        }, +        if (status != null) {, +            builder.field("status", status, params);, +        }]