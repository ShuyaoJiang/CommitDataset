[+++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import java.io.IOException;, +    // Filtered nodes are nodes whose cluster name does not match the configured cluster name, +         * Establishes the node connections. If validateInHandshake is set to true, the connection will fail if, +         * node returned in the handshake response is different than the discovery node., +        List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {, +            ArrayList<DiscoveryNode> newFilteredNodes = new ArrayList<>();, +                            public LivenessResponse read(StreamInput in) throws IOException {, +                                LivenessResponse response = new LivenessResponse();, +                                response.readFrom(in);, +                                return response;, +            nodes = establishNodeConnections(newNodes);, +            filteredNodes = Collections.unmodifiableList(newFilteredNodes);, +            nodes = establishNodeConnections(newNodes);, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import java.io.IOException;, +    // Filtered nodes are nodes whose cluster name does not match the configured cluster name, +         * Establishes the node connections. If validateInHandshake is set to true, the connection will fail if, +         * node returned in the handshake response is different than the discovery node., +        List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {, +            ArrayList<DiscoveryNode> newFilteredNodes = new ArrayList<>();, +                            public LivenessResponse read(StreamInput in) throws IOException {, +                                LivenessResponse response = new LivenessResponse();, +                                response.readFrom(in);, +                                return response;, +            nodes = establishNodeConnections(newNodes);, +            filteredNodes = Collections.unmodifiableList(newFilteredNodes);, +            nodes = establishNodeConnections(newNodes);, +++ b/server/src/main/java/org/elasticsearch/transport/TransportService.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.transport.TransportClient;, +    private final boolean validateConnections;, +, +        // The only time we do not want to validate node connections is when this is a transport client using the simple node sampler, +        this.validateConnections = TransportClient.CLIENT_TYPE.equals(settings.get(Client.CLIENT_TYPE_SETTING_S.getKey())) == false ||, +            TransportClient.CLIENT_TRANSPORT_SNIFF.get(settings);, +    /**, +     * Connect to the specified node with the default connection profile, +     *, +     * @param node the node to connect to, +     */, +            if (validateConnections && node.equals(remote) == false) {, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import java.io.IOException;, +    // Filtered nodes are nodes whose cluster name does not match the configured cluster name, +         * Establishes the node connections. If validateInHandshake is set to true, the connection will fail if, +         * node returned in the handshake response is different than the discovery node., +        List<DiscoveryNode> establishNodeConnections(Set<DiscoveryNode> nodes) {, +            ArrayList<DiscoveryNode> newFilteredNodes = new ArrayList<>();, +                            public LivenessResponse read(StreamInput in) throws IOException {, +                                LivenessResponse response = new LivenessResponse();, +                                response.readFrom(in);, +                                return response;, +            nodes = establishNodeConnections(newNodes);, +            filteredNodes = Collections.unmodifiableList(newFilteredNodes);, +            nodes = establishNodeConnections(newNodes);, +++ b/server/src/main/java/org/elasticsearch/transport/TransportService.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.transport.TransportClient;, +    private final boolean validateConnections;, +, +        // The only time we do not want to validate node connections is when this is a transport client using the simple node sampler, +        this.validateConnections = TransportClient.CLIENT_TYPE.equals(settings.get(Client.CLIENT_TYPE_SETTING_S.getKey())) == false ||, +            TransportClient.CLIENT_TRANSPORT_SNIFF.get(settings);, +    /**, +     * Connect to the specified node with the default connection profile, +     *, +     * @param node the node to connect to, +     */, +            if (validateConnections && node.equals(remote) == false) {, +++ b/server/src/test/java/org/elasticsearch/transport/TransportServiceHandshakeTests.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.transport.TransportClient;, +    public void testNodeConnectWithDifferentNodeIdSucceedsIfThisIsTransportClientOfSimpleNodeSampler() {, +        Settings.Builder settings = Settings.builder().put("cluster.name", "test");, +        Settings transportClientSettings = settings.put(Client.CLIENT_TYPE_SETTING_S.getKey(), TransportClient.CLIENT_TYPE).build();, +        NetworkHandle handleA = startServices("TS_A", transportClientSettings, Version.CURRENT);, +        NetworkHandle handleB = startServices("TS_B", settings.build(), Version.CURRENT);, +        DiscoveryNode discoveryNode = new DiscoveryNode(, +            randomAlphaOfLength(10),, +            handleB.discoveryNode.getAddress(),, +            emptyMap(),, +            emptySet(),, +            handleB.discoveryNode.getVersion());, +, +        handleA.transportService.connectToNode(discoveryNode, MockTcpTransport.LIGHT_PROFILE);, +        assertTrue(handleA.transportService.nodeConnected(discoveryNode));, +    }, +, +    public void testNodeConnectWithDifferentNodeIdFailsWhenSnifferTransportClient() {, +        Settings.Builder settings = Settings.builder().put("cluster.name", "test");, +        Settings transportClientSettings = settings.put(Client.CLIENT_TYPE_SETTING_S.getKey(), TransportClient.CLIENT_TYPE), +            .put(TransportClient.CLIENT_TRANSPORT_SNIFF.getKey(), true), +            .build();, +        NetworkHandle handleA = startServices("TS_A", transportClientSettings, Version.CURRENT);, +        NetworkHandle handleB = startServices("TS_B", settings.build(), Version.CURRENT);, +        DiscoveryNode discoveryNode = new DiscoveryNode(]