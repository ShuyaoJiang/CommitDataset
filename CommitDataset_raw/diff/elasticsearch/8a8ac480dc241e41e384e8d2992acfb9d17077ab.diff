[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        if (version != that.version) {, +            return false;, +        }, +        if (unassignedInfo != null ? !unassignedInfo.equals(that.unassignedInfo) : that.unassignedInfo != null) {, +            return false;, +        }, +        result = 31 * result + (int) (version ^ (version >>> 32));, +        result = 31 * result + (unassignedInfo != null ? unassignedInfo.hashCode() : 0);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        if (version != that.version) {, +            return false;, +        }, +        if (unassignedInfo != null ? !unassignedInfo.equals(that.unassignedInfo) : that.unassignedInfo != null) {, +            return false;, +        }, +        result = 31 * result + (int) (version ^ (version >>> 32));, +        result = 31 * result + (unassignedInfo != null ? unassignedInfo.hashCode() : 0);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        UnassignedInfo that = (UnassignedInfo) o;, +, +        if (timestamp != that.timestamp) return false;, +        if (reason != that.reason) return false;, +        if (message != null ? !message.equals(that.message) : that.message != null) return false;, +        return !(failure != null ? !failure.equals(that.failure) : that.failure != null);, +, +    }, +, +    @Override, +    public int hashCode() {, +        int result = reason != null ? reason.hashCode() : 0;, +        result = 31 * result + (int) (timestamp ^ (timestamp >>> 32));, +        result = 31 * result + (message != null ? message.hashCode() : 0);, +        result = 31 * result + (failure != null ? failure.hashCode() : 0);, +        return result;, +    }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        if (version != that.version) {, +            return false;, +        }, +        if (unassignedInfo != null ? !unassignedInfo.equals(that.unassignedInfo) : that.unassignedInfo != null) {, +            return false;, +        }, +        result = 31 * result + (int) (version ^ (version >>> 32));, +        result = 31 * result + (unassignedInfo != null ? unassignedInfo.hashCode() : 0);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java]