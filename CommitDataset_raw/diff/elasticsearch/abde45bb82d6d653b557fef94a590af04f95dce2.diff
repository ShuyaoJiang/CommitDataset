[+++ b/plugins/client/groovy/src/main/groovy/org/elasticsearch/groovy/client/GClient.groovy, +import org.elasticsearch.groovy.common.xcontent.GXContentBuilder, +++ b/plugins/client/groovy/src/main/groovy/org/elasticsearch/groovy/client/GClient.groovy, +import org.elasticsearch.groovy.common.xcontent.GXContentBuilder, +++ b/plugins/client/groovy/src/main/groovy/org/elasticsearch/groovy/client/GIndicesAdminClient.groovy, +import org.elasticsearch.groovy.common.xcontent.GXContentBuilder, +++ b/plugins/client/groovy/src/main/groovy/org/elasticsearch/groovy/client/GClient.groovy, +import org.elasticsearch.groovy.common.xcontent.GXContentBuilder, +++ b/plugins/client/groovy/src/main/groovy/org/elasticsearch/groovy/client/GIndicesAdminClient.groovy, +import org.elasticsearch.groovy.common.xcontent.GXContentBuilder, +++ b/plugins/client/groovy/src/main/groovy/org/elasticsearch/groovy/common/xcontent/GXContentBuilder.groovy, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.groovy.common.xcontent, +, +import org.elasticsearch.common.xcontent.XContentFactory, +import org.elasticsearch.common.xcontent.XContentType, +import org.elasticsearch.common.xcontent.builder.BinaryXContentBuilder, +import org.elasticsearch.common.xcontent.builder.TextXContentBuilder, +, +/**, + * Used to build JSON data., + *, + * @author Marc Palmer, + * @author Graeme Rocher, + *, + * @since 1.2, + */, +class GXContentBuilder {, +, +    static NODE_ELEMENT = "element", +, +    static int rootResolveStrategy = Closure.DELEGATE_FIRST; // the default, +, +    def root, +, +    def current, +, +    def nestingStack = [], +, +    def build(Closure c) {, +        return buildRoot(c), +    }, +, +    String buildAsString(Closure c) {, +        TextXContentBuilder builder = XContentFactory.contentTextBuilder(XContentType.JSON);, +        def json = build(c), +        builder.map(json);, +        return builder.string();, +    }, +, +    byte[] buildAsBytes(Closure c) {, +        return buildAsBytes(c, XContentType.JSON);, +    }, +, +    byte[] buildAsBytes(Closure c, XContentType contentType) {, +        BinaryXContentBuilder builder = XContentFactory.contentBinaryBuilder(contentType);, +        def json = build(c), +        builder.map(json);, +        return builder.copiedBytes();, +    }, +, +    private buildRoot(Closure c) {, +        c.delegate = this, +        c.resolveStrategy = rootResolveStrategy;, +        root = [:], +        current = root, +        def returnValue = c.call(), +        if (!root) {, +            return returnValue, +        }, +        return root, +    }, +, +    def invokeMethod(String methodName) {, +        current[methodName] = [], +    }, +, +    List array(Closure c) {, +        def prev = current, +        def list = [], +        try {, +]