[+++ b/core/src/main/java/org/elasticsearch/index/query/SpanNearQueryBuilder.java, +import java.util.Collections;, +            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause");, +    /**, +     * Add a span clause to the current list of clauses, +     */, +    public SpanNearQueryBuilder addClause(SpanQueryBuilder clause) {, +            throw new IllegalArgumentException("[" + NAME + "]  clauses cannot be null");, +        return Collections.unmodifiableList(this.clauses);, +            queryBuilder.addClause(clauses.get(i));, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanNearQueryBuilder.java, +import java.util.Collections;, +            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause");, +    /**, +     * Add a span clause to the current list of clauses, +     */, +    public SpanNearQueryBuilder addClause(SpanQueryBuilder clause) {, +            throw new IllegalArgumentException("[" + NAME + "]  clauses cannot be null");, +        return Collections.unmodifiableList(this.clauses);, +            queryBuilder.addClause(clauses.get(i));, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +import java.util.Collections;, +            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause");, +    /**, +     * Add a span clause to the current list of clauses, +     */, +    public SpanOrQueryBuilder addClause(SpanQueryBuilder clause) {, +            throw new IllegalArgumentException("[" + NAME + "] inner clause cannot be null");, +        return Collections.unmodifiableList(this.clauses);, +            queryBuilder.addClause(clauses.get(i));, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanNearQueryBuilder.java, +import java.util.Collections;, +            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause");, +    /**, +     * Add a span clause to the current list of clauses, +     */, +    public SpanNearQueryBuilder addClause(SpanQueryBuilder clause) {, +            throw new IllegalArgumentException("[" + NAME + "]  clauses cannot be null");, +        return Collections.unmodifiableList(this.clauses);, +            queryBuilder.addClause(clauses.get(i));, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +import java.util.Collections;, +            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause");, +    /**, +     * Add a span clause to the current list of clauses, +     */, +    public SpanOrQueryBuilder addClause(SpanQueryBuilder clause) {, +            throw new IllegalArgumentException("[" + NAME + "] inner clause cannot be null");, +        return Collections.unmodifiableList(this.clauses);, +            queryBuilder.addClause(clauses.get(i));, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryDSLDocumentationTests.java, +                    .addClause(spanTermQuery("field1","baz")), +        .addClause(spanTermQuery("field","value2")), +        .addClause(spanTermQuery("field","value3")), +        .addClause(spanTermQuery("field","value2")), +        .addClause(spanTermQuery("field","value3"));, +                    .addClause(spanTermQuery("field1", "baz")), +++ b/core/src/main/java/org/elasticsearch/index/query/SpanNearQueryBuilder.java, +import java.util.Collections;, +            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause");, +    /**, +     * Add a span clause to the current list of clauses, +     */, +    public SpanNearQueryBuilder addClause(SpanQueryBuilder clause) {, +            throw new IllegalArgumentException("[" + NAME + "]  clauses cannot be null");, +        return Collections.unmodifiableList(this.clauses);, +            queryBuilder.addClause(clauses.get(i));, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +import java.util.Collections;, +            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause");, +    /**, +     * Add a span clause to the current list of clauses, +     */, +    public SpanOrQueryBuilder addClause(SpanQueryBuilder clause) {, +            throw new IllegalArgumentException("[" + NAME + "] inner clause cannot be null");, +        return Collections.unmodifiableList(this.clauses);, +            queryBuilder.addClause(clauses.get(i));, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryDSLDocumentationTests.java, +                    .addClause(spanTermQuery("field1","baz")), +        .addClause(spanTermQuery("field","value2")), +        .addClause(spanTermQuery("field","value3")), +        .addClause(spanTermQuery("field","value2")), +        .addClause(spanTermQuery("field","value3"));, +                    .addClause(spanTermQuery("field1", "baz")), +++ b/core/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java, +            queryBuilder.addClause(spanTermQueries[i]);, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new SpanNearQueryBuilder(null, 1));, +            assertEquals("[span_near] must include at least one clause", e.getMessage());, +, +            SpanNearQueryBuilder spanNearQueryBuilder = new SpanNearQueryBuilder(new SpanTermQueryBuilder("field", "value"), 1);, +            e = expectThrows(IllegalArgumentException.class, () -> spanNearQueryBuilder.addClause(null));, +            assertEquals("[span_near]  clauses cannot be null", e.getMessage());, +    public void testClausesUnmodifiable() {, +        expectThrows(UnsupportedOperationException.class,, +                () -> spanNearQueryBuilder.clauses().add(new SpanTermQueryBuilder("field", "value2")));, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanNearQueryBuilder.java, +import java.util.Collections;, +            throw new IllegalArgumentException("[" + NAME + "] must include at least one clause");, +    /**, +     * Add a span clause to the current list of clauses]