[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +    GeoHashGridAggregator(String name, AggregatorFactories factories, GeoGridAggregationBuilder.CellIdSource valuesSource,, +            super(0, 0, null);, +        return new InternalGeoHashGrid(name, requiredSize, Collections.emptyList(), pipelineAggregators(), metaData());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +    GeoHashGridAggregator(String name, AggregatorFactories factories, GeoGridAggregationBuilder.CellIdSource valuesSource,, +            super(0, 0, null);, +        return new InternalGeoHashGrid(name, requiredSize, Collections.emptyList(), pipelineAggregators(), metaData());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregatorFactory.java, +    GeoHashGridAggregatorFactory(String name, ValuesSourceConfig<GeoPoint> config, int precision, int requiredSize,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +    GeoHashGridAggregator(String name, AggregatorFactories factories, GeoGridAggregationBuilder.CellIdSource valuesSource,, +            super(0, 0, null);, +        return new InternalGeoHashGrid(name, requiredSize, Collections.emptyList(), pipelineAggregators(), metaData());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregatorFactory.java, +    GeoHashGridAggregatorFactory(String name, ValuesSourceConfig<GeoPoint> config, int precision, int requiredSize,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParams.java, +    static final ParseField FIELD_PRECISION = new ParseField("precision");, +    static final ParseField FIELD_SIZE = new ParseField("size");, +    static final ParseField FIELD_SHARD_SIZE = new ParseField("shard_size");, +    static int checkPrecision(int precision) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +    GeoHashGridAggregator(String name, AggregatorFactories factories, GeoGridAggregationBuilder.CellIdSource valuesSource,, +            super(0, 0, null);, +        return new InternalGeoHashGrid(name, requiredSize, Collections.emptyList(), pipelineAggregators(), metaData());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregatorFactory.java, +    GeoHashGridAggregatorFactory(String name, ValuesSourceConfig<GeoPoint> config, int precision, int requiredSize,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParams.java, +    static final ParseField FIELD_PRECISION = new ParseField("precision");, +    static final ParseField FIELD_SIZE = new ParseField("size");, +    static final ParseField FIELD_SHARD_SIZE = new ParseField("shard_size");, +    static int checkPrecision(int precision) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/InternalGeoHashGrid.java, +import java.util.Objects;, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +            Bucket bucket = (Bucket) o;, +            return geohashAsLong == bucket.geohashAsLong &&, +                docCount == bucket.docCount &&, +                Objects.equals(aggregations, bucket.aggregations);, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(geohashAsLong, docCount, aggregations);, +        }, +, +    InternalGeoHashGrid(String name, int requiredSize, List<Bucket> buckets, List<PipelineAggregator> pipelineAggregators,, +    // package protected for testing, +    int getRequiredSize() {, +        return requiredSize;, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(requiredSize, buckets);, +    }, +, +    @Override, +    protected boolean doEquals(Object obj) {, +        InternalGeoHashGrid other = (InternalGeoHashGrid) obj;, +        return Objects.equals(requiredSize, other.requiredSize) &&, +            Objects.equals(buckets, other.buckets);, +    }, +, +            int cmp = Long.compare(o2.getDocCount(), o1.getDocCount());, +            if (cmp == 0) {, +                cmp = o2.compareTo(o1);, +                if (cmp == 0) {, +                    cmp = System.identityHashCode(o2) - System.identityHashCode(o1);, +            return cmp > 0;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregator.java, +    GeoHashGridAggregator(String name, AggregatorFactories factories, GeoGridAggregationBuilder.CellIdSource valuesSource,, +            super(0, 0, null);, +        return new InternalGeoHashGrid(name, requiredSize, Collections.emptyList(), pipelineAggregators(), metaData());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridAggregatorFactory.java, +    GeoHashGridAggregatorFactory(String name, ValuesSourceConfig<GeoPoint> config, int precision, int requiredSize,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParams.java, +    static final ParseField FIELD_PRECISION = new ParseField("precision");, +    static final ParseField FIELD_SIZE = new ParseField("size");, +    static final ParseField FIELD_SHARD_SIZE = new ParseField("shard_size");, +    static int checkPrecision(int precision) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/InternalGeoHashGrid.java, +import java.util.Objects;, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +            Bucket bucket = (Bucket) o;, +            return geohashAsLong == bucket.geohashAsLong &&, +                docCount == bucket.docCount &&, +                Objects.equals(aggregations, bucket.aggregations);, +        }, +, +        @Override, +        public int hashCode() {]