[+++ b/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentParser.Token;, +import java.io.IOException;, +, +    private static final char[] BASE_32 = {'0', '1', '2', '3', '4', '5', '6',, +        '7', '8', '9', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n',, +        'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};, +    private static final double MAX_ACCEPTABLE_ERROR = 0.000000001;, +, +    public void testGeohashCellWidth() {, +        double equatorialDistance = 2 * Math.PI * 6378137.0;, +        assertThat(GeoUtils.geoHashCellWidth(0), equalTo(equatorialDistance));, +        assertThat(GeoUtils.geoHashCellWidth(1), equalTo(equatorialDistance / 8));, +        assertThat(GeoUtils.geoHashCellWidth(2), equalTo(equatorialDistance / 32));, +        assertThat(GeoUtils.geoHashCellWidth(3), equalTo(equatorialDistance / 256));, +        assertThat(GeoUtils.geoHashCellWidth(4), equalTo(equatorialDistance / 1024));, +        assertThat(GeoUtils.geoHashCellWidth(5), equalTo(equatorialDistance / 8192));, +        assertThat(GeoUtils.geoHashCellWidth(6), equalTo(equatorialDistance / 32768));, +        assertThat(GeoUtils.geoHashCellWidth(7), equalTo(equatorialDistance / 262144));, +        assertThat(GeoUtils.geoHashCellWidth(8), equalTo(equatorialDistance / 1048576));, +        assertThat(GeoUtils.geoHashCellWidth(9), equalTo(equatorialDistance / 8388608));, +        assertThat(GeoUtils.geoHashCellWidth(10), equalTo(equatorialDistance / 33554432));, +        assertThat(GeoUtils.geoHashCellWidth(11), equalTo(equatorialDistance / 268435456));, +        assertThat(GeoUtils.geoHashCellWidth(12), equalTo(equatorialDistance / 1073741824));, +    public void testGeohashCellHeight() {, +        double polarDistance = Math.PI * 6356752.314245;, +        assertThat(GeoUtils.geoHashCellHeight(0), equalTo(polarDistance));, +        assertThat(GeoUtils.geoHashCellHeight(1), equalTo(polarDistance / 4));, +        assertThat(GeoUtils.geoHashCellHeight(2), equalTo(polarDistance / 32));, +        assertThat(GeoUtils.geoHashCellHeight(3), equalTo(polarDistance / 128));, +        assertThat(GeoUtils.geoHashCellHeight(4), equalTo(polarDistance / 1024));, +        assertThat(GeoUtils.geoHashCellHeight(5), equalTo(polarDistance / 4096));, +        assertThat(GeoUtils.geoHashCellHeight(6), equalTo(polarDistance / 32768));, +        assertThat(GeoUtils.geoHashCellHeight(7), equalTo(polarDistance / 131072));, +        assertThat(GeoUtils.geoHashCellHeight(8), equalTo(polarDistance / 1048576));, +        assertThat(GeoUtils.geoHashCellHeight(9), equalTo(polarDistance / 4194304));, +        assertThat(GeoUtils.geoHashCellHeight(10), equalTo(polarDistance / 33554432));, +        assertThat(GeoUtils.geoHashCellHeight(11), equalTo(polarDistance / 134217728));, +        assertThat(GeoUtils.geoHashCellHeight(12), equalTo(polarDistance / 1073741824));, +    public void testGeohashCellSize() {, +        double equatorialDistance = 2 * Math.PI * 6378137.0;, +        double polarDistance = Math.PI * 6356752.314245;, +        assertThat(GeoUtils.geoHashCellSize(0), equalTo(Math.sqrt(Math.pow(polarDistance, 2) + Math.pow(equatorialDistance, 2))));, +        assertThat(GeoUtils.geoHashCellSize(1), equalTo(Math.sqrt(Math.pow(polarDistance / 4, 2) + Math.pow(equatorialDistance / 8, 2))));, +        assertThat(GeoUtils.geoHashCellSize(2), equalTo(Math.sqrt(Math.pow(polarDistance / 32, 2) + Math.pow(equatorialDistance / 32, 2))));, +        assertThat(GeoUtils.geoHashCellSize(3),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 128, 2) + Math.pow(equatorialDistance / 256, 2))));, +        assertThat(GeoUtils.geoHashCellSize(4),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 1024, 2) + Math.pow(equatorialDistance / 1024, 2))));, +        assertThat(GeoUtils.geoHashCellSize(5),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 4096, 2) + Math.pow(equatorialDistance / 8192, 2))));, +        assertThat(GeoUtils.geoHashCellSize(6),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 32768, 2) + Math.pow(equatorialDistance / 32768, 2))));, +        assertThat(GeoUtils.geoHashCellSize(7),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 131072, 2) + Math.pow(equatorialDistance / 262144, 2))));, +        assertThat(GeoUtils.geoHashCellSize(8),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 1048576, 2) + Math.pow(equatorialDistance / 1048576, 2))));, +        assertThat(GeoUtils.geoHashCellSize(9),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 4194304, 2) + Math.pow(equatorialDistance / 8388608, 2))));, +        assertThat(GeoUtils.geoHashCellSize(10),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 33554432, 2) + Math.pow(equatorialDistance / 33554432, 2))));, +        assertThat(GeoUtils.geoHashCellSize(11),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 134217728, 2) + Math.pow(equatorialDistance / 268435456, 2))));, +        assertThat(GeoUtils.geoHashCellSize(12),, +                equalTo(Math.sqrt(Math.pow(polarDistance / 1073741824, 2) + Math.pow(equatorialDistance / 1073741824, 2))));, +, +    @Test, +    public void testGeoHashLevelsForPrecision() {, +        for (int i = 0; i < 100; i++) {, +            double precision = randomDouble() * 100;, +            int level = GeoUtils.geoHashLevelsForPrecision(precision);, +            assertThat(GeoUtils.geoHashCellSize(level), lessThanOrEqualTo(precision));, +    public void testGeoHashLevelsForPrecision_String() {, +        for (int i = 0; i < 100; i++) {, +            double precision = randomDouble() * 100;, +            String precisionString = precision + "m";, +            int level = GeoUtils.geoHashLevelsForPrecision(precisionString);, +            assertThat(GeoUtils.geoHashCellSize(level), lessThanOrEqualTo(precision));, +        }, +    }, +, +    @Test, +    public void testQuadTreeCellWidth() {, +        double equatorialDistance = 2 * Math.PI * 6378137.0;, +        assertThat(GeoUtils.quadTreeCellWidth(0), equalTo(equatorialDistance));, +        assertThat(GeoUtils.quadTreeCellWidth(1), equalTo(equatorialDistance / 2));, +        assertThat(GeoUtils.quadTreeCellWidth(2), equalTo(equatorialDistance / 4));, +        assertThat(GeoUtils.quadTreeCellWidth(3), equalTo(equatorialDistance / 8));, +        assertThat(GeoUtils.quadTreeCellWidth(4), equalTo(equatorialDistance / 16));, +        assertThat(GeoUtils.quadTreeCellWidth(5), equalTo(equatorialDistance / 32));, +        assertThat(GeoUtils.quadTreeCellWidth(6), equalTo(equatorialDistance / 64));, +        assertThat(GeoUtils.quadTreeCellWidth(7), equalTo(equatorialDistance / 128));, +        assertThat(GeoUtils.quadTreeCellWidth(8), equalTo(equatorialDistance / 256));, +        assertThat(GeoUtils.quadTreeCellWidth(9), equalTo(equatorialDistance / 512));, +        assertThat(GeoUtils.quadTreeCellWidth(10), equalTo(equatorialDistance / 1024));, +        assertThat(GeoUtils.quadTreeCellWidth(11), equalTo(equatorialDistance / 2048));, +        assertThat(GeoUtils.quadTreeCellWidth(12), equalTo(equatorialDistance / 4096));, +    }]