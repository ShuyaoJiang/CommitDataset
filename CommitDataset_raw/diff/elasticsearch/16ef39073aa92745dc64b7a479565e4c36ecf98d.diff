[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        final NativeRealmMigrator nativeRealmMigrator = new NativeRealmMigrator(settings, licenseState, client);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        final NativeRealmMigrator nativeRealmMigrator = new NativeRealmMigrator(settings, licenseState, client);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeRealmMigrator.java, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;, +import org.elasticsearch.action.update.UpdateResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.xpack.security.InternalClient;, +import org.elasticsearch.xpack.security.authc.support.SecuredString;, +import org.elasticsearch.xpack.security.client.SecurityClient;, +import org.elasticsearch.xpack.security.user.User;, +import org.elasticsearch.xpack.security.user.User.Fields;, +    private Client client;, +    public NativeRealmMigrator(Settings settings, XPackLicenseState licenseState, InternalClient internalClient) {, +        this.client = internalClient;, +            tasks.add(this::createLogstashUserAsDisabled);, +    private void createLogstashUserAsDisabled(@Nullable Version previousVersion, ActionListener<Void> listener) {, +        client.prepareGet(SecurityTemplateService.SECURITY_INDEX_NAME, NativeUsersStore.RESERVED_USER_DOC_TYPE, LogstashSystemUser.NAME), +                .execute(ActionListener.wrap(getResponse -> {, +                    if (getResponse.isExists()) {, +                        // the document exists - we shouldn't do anything, +                        listener.onResponse(null);, +                    } else {, +                        client.prepareIndex(SecurityTemplateService.SECURITY_INDEX_NAME, NativeUsersStore.RESERVED_USER_DOC_TYPE,, +                                LogstashSystemUser.NAME), +                                .setSource(Requests.INDEX_CONTENT_TYPE,, +                                        User.Fields.ENABLED.getPreferredName(), false,, +                                        User.Fields.PASSWORD.getPreferredName(), ""), +                                .setCreate(true), +                                .execute(ActionListener.wrap(r -> {, +                                    if (clearCache) {, +                                        new SecurityClient(client).prepareClearRealmCache(), +                                                .usernames(LogstashSystemUser.NAME), +                                                .execute(ActionListener.wrap(re -> listener.onResponse(null), listener::onFailure));, +                                    } else {, +                                        listener.onResponse(null);, +                                    }, +                                }, listener::onFailure));, +                    }, +                }, listener::onFailure));, +        client.prepareSearch(SecurityTemplateService.SECURITY_INDEX_NAME), +                .setTypes(NativeUsersStore.RESERVED_USER_DOC_TYPE), +                .setQuery(QueryBuilders.matchAllQuery()), +                .setFetchSource(true), +                .execute(ActionListener.wrap(searchResponse -> {, +                    assert searchResponse.getHits().getTotalHits() <= 10 : "there are more than 10 reserved users we need to change " +, +                            "this to retrieve them all!";, +                    Set<String> toConvert = new HashSet<>();, +                    for (SearchHit searchHit : searchResponse.getHits()) {, +                        Map<String, Object> sourceMap = searchHit.getSourceAsMap();, +                        if (hasOldStyleDefaultPassword(sourceMap)) {, +                            toConvert.add(searchHit.getId());, +                        }, +                    }, +, +                        GroupedActionListener<UpdateResponse> countDownListener = new GroupedActionListener<>(, +                            client.prepareUpdate(, +                                    SecurityTemplateService.SECURITY_INDEX_NAME,NativeUsersStore.RESERVED_USER_DOC_TYPE, username), +                                    .setDoc(Fields.PASSWORD.getPreferredName(), ""), +                                    .setRefreshPolicy(RefreshPolicy.IMMEDIATE), +                                    .execute(countDownListener);, +                }, listener::onFailure));, +     * Determines whether the supplied source as a {@link Map} has its password explicitly set to be the default password, +    private boolean hasOldStyleDefaultPassword(Map<String, Object> userSource) {, +        final String passwordHash = (String) userSource.get(User.Fields.PASSWORD.getPreferredName());, +        if (passwordHash == null) {, +            throw new IllegalStateException("passwordHash should never be null");, +        } else if (passwordHash.isEmpty()) {, +            // we know empty is the new style, +            return false;, +        try (SecuredString securedString = new SecuredString(passwordHash.toCharArray())) {, +            return Hasher.BCRYPT.verify(ReservedRealm.DEFAULT_PASSWORD_TEXT, securedString.internalChars());, +    }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        final NativeRealmMigrator nativeRealmMigrator = new NativeRealmMigrator(settings, licenseState, client);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeRealmMigrator.java, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;, +import org.elasticsearch.action.update.UpdateResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.xpack.security.InternalClient;, +import org.elasticsearch.xpack.security.authc.support.SecuredString;, +import org.elasticsearch.xpack.security.client.SecurityClient;, +import org.elasticsearch.xpack.security.user.User;, +import org.elasticsearch.xpack.security.user.User.Fields;, +    private Client client;, +    public NativeRealmMigrator(Settings settings, XPackLicenseState licenseState, InternalClient internalClient) {, +        this.client = internalClient;]