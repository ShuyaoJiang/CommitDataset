[+++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Compiled compiledScript = scriptService.compile(script, ScriptContext.UPDATE);, +                ExecutableScript executableScript = compiledScript.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Compiled compiledScript = scriptService.compile(script, ScriptContext.UPDATE);, +                ExecutableScript executableScript = compiledScript.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +        CompiledTemplate compiledTemplate = scriptService.compileTemplate(template, ScriptContext.EXECUTABLE);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Compiled compiledScript = scriptService.compile(script, ScriptContext.UPDATE);, +                ExecutableScript executableScript = compiledScript.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +        CompiledTemplate compiledTemplate = scriptService.compileTemplate(template, ScriptContext.EXECUTABLE);, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext<SearchScript, SearchScript.Compiled> context) {, +        SearchScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled.newInstance(script.getParams(), lookup());, +    public final Function<Map<String, Object>, SearchScript> getLazySearchScript(, +        Script script, ScriptContext<SearchScript, SearchScript.Compiled> context) {, +        // TODO: this "lazy" binding can be removed once scripted metric aggs have their own contexts, which take _agg/_aggs as a parameter, +        SearchScript.Compiled compiled = scriptService.compile(script, context);, +        return (p) -> compiled.newInstance(p, lookup());, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext<ExecutableScript, ExecutableScript.Compiled> context) {, +        ExecutableScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled.newInstance(script.getParams());, +    public final Function<Map<String, Object>, ExecutableScript> getLazyExecutableScript(, +        Script script, ScriptContext<ExecutableScript, ExecutableScript.Compiled> context) {, +        // TODO: this "lazy" binding can be removed once scripted metric aggs have their own contexts, which take _agg/_aggs as a parameter, +        ExecutableScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled::newInstance;, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Compiled compiledScript = scriptService.compile(script, ScriptContext.UPDATE);, +                ExecutableScript executableScript = compiledScript.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +        CompiledTemplate compiledTemplate = scriptService.compileTemplate(template, ScriptContext.EXECUTABLE);, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext<SearchScript, SearchScript.Compiled> context) {, +        SearchScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled.newInstance(script.getParams(), lookup());, +    public final Function<Map<String, Object>, SearchScript> getLazySearchScript(, +        Script script, ScriptContext<SearchScript, SearchScript.Compiled> context) {, +        // TODO: this "lazy" binding can be removed once scripted metric aggs have their own contexts, which take _agg/_aggs as a parameter, +        SearchScript.Compiled compiled = scriptService.compile(script, context);, +        return (p) -> compiled.newInstance(p, lookup());, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext<ExecutableScript, ExecutableScript.Compiled> context) {, +        ExecutableScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled.newInstance(script.getParams());, +    public final Function<Map<String, Object>, ExecutableScript> getLazyExecutableScript(, +        Script script, ScriptContext<ExecutableScript, ExecutableScript.Compiled> context) {, +        // TODO: this "lazy" binding can be removed once scripted metric aggs have their own contexts, which take _agg/_aggs as a parameter, +        ExecutableScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled::newInstance;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Compiled compiledScript = scriptService.compile(script, ScriptContext.UPDATE);, +                ExecutableScript executableScript = compiledScript.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +        CompiledTemplate compiledTemplate = scriptService.compileTemplate(template, ScriptContext.EXECUTABLE);, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext<SearchScript, SearchScript.Compiled> context) {, +        SearchScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled.newInstance(script.getParams(), lookup());, +    public final Function<Map<String, Object>, SearchScript> getLazySearchScript(, +        Script script, ScriptContext<SearchScript, SearchScript.Compiled> context) {, +        // TODO: this "lazy" binding can be removed once scripted metric aggs have their own contexts, which take _agg/_aggs as a parameter, +        SearchScript.Compiled compiled = scriptService.compile(script, context);, +        return (p) -> compiled.newInstance(p, lookup());, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext<ExecutableScript, ExecutableScript.Compiled> context) {, +        ExecutableScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled.newInstance(script.getParams());, +    public final Function<Map<String, Object>, ExecutableScript> getLazyExecutableScript(, +        Script script, ScriptContext<ExecutableScript, ExecutableScript.Compiled> context) {, +        // TODO: this "lazy" binding can be removed once scripted metric aggs have their own contexts, which take _agg/_aggs as a parameter, +        ExecutableScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled::newInstance;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ExecutableScript.java, +import java.util.Map;, +, +, +    interface Compiled {, +        ExecutableScript newInstance(Map<String, Object> params);, +    }, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Compiled compiledScript = scriptService.compile(script, ScriptContext.UPDATE);, +                ExecutableScript executableScript = compiledScript.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +        CompiledTemplate compiledTemplate = scriptService.compileTemplate(template, ScriptContext.EXECUTABLE);, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext<SearchScript, SearchScript.Compiled> context) {, +        SearchScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled.newInstance(script.getParams(), lookup());, +    public final Function<Map<String, Object>, SearchScript> getLazySearchScript(, +        Script script, ScriptContext<SearchScript, SearchScript.Compiled> context) {, +        // TODO: this "lazy" binding can be removed once scripted metric aggs have their own contexts, which take _agg/_aggs as a parameter, +        SearchScript.Compiled compiled = scriptService.compile(script, context);, +        return (p) -> compiled.newInstance(p, lookup());, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext<ExecutableScript, ExecutableScript.Compiled> context) {, +        ExecutableScript.Compiled compiled = scriptService.compile(script, context);, +        return compiled.newInstance(script.getParams());]