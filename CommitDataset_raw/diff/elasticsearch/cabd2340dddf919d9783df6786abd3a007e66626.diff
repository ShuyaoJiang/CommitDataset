[+++ b/src/main/java/org/elasticsearch/common/joda/Joda.java, +import java.util.Locale;, +, +                        FormatDateTimeFormatter currentFormatter = forPattern(formats[i], locale);, +                        DateTimeFormatter currentParser = currentFormatter.parser();, +                            dateTimeFormatter = currentFormatter.printer();, +                        parsers[i] = currentParser.getParser();, +++ b/src/main/java/org/elasticsearch/common/joda/Joda.java, +import java.util.Locale;, +, +                        FormatDateTimeFormatter currentFormatter = forPattern(formats[i], locale);, +                        DateTimeFormatter currentParser = currentFormatter.parser();, +                            dateTimeFormatter = currentFormatter.printer();, +                        parsers[i] = currentParser.getParser();, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java, +, +    @Test, +    public void singleValue_WithMultipleDateFormatsFromMapping() throws Exception {, +        , +        String mappingJson = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("date").field("type", "date").field("format", "dateOptionalTime||dd-MM-yyyy").endObject().endObject().endObject().endObject().string();, +        prepareCreate("idx2").addMapping("type", mappingJson).execute().actionGet();, +        IndexRequestBuilder[] reqs = new IndexRequestBuilder[5];, +        for (int i = 0; i < reqs.length; i++) {, +            reqs[i] = client().prepareIndex("idx2", "type", "" + i).setSource(jsonBuilder().startObject().field("date", "10-03-2014").endObject());, +        }, +        indexRandom(true, reqs);, +, +        SearchResponse response = client().prepareSearch("idx2"), +                .setQuery(matchAllQuery()), +                .addAggregation(dateHistogram("date_histo"), +                        .field("date"), +                        .interval(DateHistogram.Interval.DAY)), +                .execute().actionGet();, +, +        assertThat(response.getHits().getTotalHits(), equalTo(5l));, +, +        DateHistogram histo = response.getAggregations().get("date_histo");, +        Collection<? extends DateHistogram.Bucket> buckets = histo.getBuckets();, +        assertThat(buckets.size(), equalTo(1));, +, +        DateHistogram.Bucket bucket = histo.getBucketByKey("2014-03-10T00:00:00.000Z");, +        assertThat(bucket, Matchers.notNullValue());, +        assertThat(bucket.getDocCount(), equalTo(5l));, +    }]