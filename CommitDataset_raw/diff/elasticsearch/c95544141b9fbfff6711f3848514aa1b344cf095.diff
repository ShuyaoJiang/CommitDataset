[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +import org.elasticsearch.index.analysis.compound.DictionaryCompoundWordTokenFilterFactory;, +import org.elasticsearch.index.analysis.compound.HyphenationCompoundWordTokenFilterFactory;, +            tokenFiltersBindings.processTokenFilter("dictionaryDecompounder", DictionaryCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("dictionary_decompounder", DictionaryCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("hyphenationDecompounder", HyphenationCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("hypennation_decompounder", HyphenationCompoundWordTokenFilterFactory.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +import org.elasticsearch.index.analysis.compound.DictionaryCompoundWordTokenFilterFactory;, +import org.elasticsearch.index.analysis.compound.HyphenationCompoundWordTokenFilterFactory;, +            tokenFiltersBindings.processTokenFilter("dictionaryDecompounder", DictionaryCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("dictionary_decompounder", DictionaryCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("hyphenationDecompounder", HyphenationCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("hypennation_decompounder", HyphenationCompoundWordTokenFilterFactory.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/compound/AbstractCompoundWordTokenFilterFactory.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.analysis.compound;, +, +import org.apache.lucene.analysis.WordlistLoader;, +import org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.inject.assistedinject.Assisted;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.analysis.AbstractTokenFilterFactory;, +import org.elasticsearch.index.settings.IndexSettings;, +, +import java.io.File;, +import java.io.IOException;, +import java.util.Set;, +, +/**, + * Contains the common configuration settings between subclasses of this class., + *, + * @author Edward Dale (scompt@scompt.com), + * @author kimchy (shay.banon), + */, +public abstract class AbstractCompoundWordTokenFilterFactory extends AbstractTokenFilterFactory {, +, +    protected final int minWordSize;, +    protected final int minSubwordSize;, +    protected final int maxSubwordSize;, +    protected final boolean onlyLongestMatch;, +    protected final Set<String> wordList;, +, +    @Inject public AbstractCompoundWordTokenFilterFactory(Index index, @IndexSettings Settings indexSettings, @Assisted String name, @Assisted Settings settings) {, +        super(index, indexSettings, name);, +, +        minWordSize = settings.getAsInt("min_word_size", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);, +        minSubwordSize = settings.getAsInt("min_subword_size", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);, +        maxSubwordSize = settings.getAsInt("max_subword_size", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);, +        onlyLongestMatch = settings.getAsBoolean("only_longest_max", false);, +, +        String wordListPath = settings.get("word_list_path", null);, +        if (wordListPath == null) {, +            throw new ElasticSearchIllegalArgumentException("word_list_path is a required setting.");, +        }, +, +        File wordListFile = new File(wordListPath);, +        if (!wordListFile.exists()) {, +            throw new ElasticSearchIllegalArgumentException("word_list_path file must exist.");, +        }, +, +        try {, +            wordList = WordlistLoader.getWordSet(wordListFile);, +        } catch (IOException ioe) {, +            throw new ElasticSearchIllegalArgumentException("IOException while reading word_list_path: " + ioe.getMessage());, +        }, +    }, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +import org.elasticsearch.index.analysis.compound.DictionaryCompoundWordTokenFilterFactory;, +import org.elasticsearch.index.analysis.compound.HyphenationCompoundWordTokenFilterFactory;, +            tokenFiltersBindings.processTokenFilter("dictionaryDecompounder", DictionaryCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("dictionary_decompounder", DictionaryCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("hyphenationDecompounder", HyphenationCompoundWordTokenFilterFactory.class);, +            tokenFiltersBindings.processTokenFilter("hypennation_decompounder", HyphenationCompoundWordTokenFilterFactory.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/compound/AbstractCompoundWordTokenFilterFactory.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file]