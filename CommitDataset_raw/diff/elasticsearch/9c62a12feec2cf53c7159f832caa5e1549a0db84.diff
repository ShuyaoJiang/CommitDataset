[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java, +        os = in.readOptionalWriteable(OsStats::new);, +        process = in.readOptionalWriteable(ProcessStats::new);, +        jvm = in.readOptionalWriteable(JvmStats::new);, +        threadPool = in.readOptionalWriteable(ThreadPoolStats::new);, +        out.writeOptionalWriteable(os);, +        out.writeOptionalWriteable(process);, +        out.writeOptionalWriteable(jvm);, +        out.writeOptionalWriteable(threadPool);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java, +        os = in.readOptionalWriteable(OsStats::new);, +        process = in.readOptionalWriteable(ProcessStats::new);, +        jvm = in.readOptionalWriteable(JvmStats::new);, +        threadPool = in.readOptionalWriteable(ThreadPoolStats::new);, +        out.writeOptionalWriteable(os);, +        out.writeOptionalWriteable(process);, +        out.writeOptionalWriteable(jvm);, +        out.writeOptionalWriteable(threadPool);, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPoolStats.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ThreadPoolStats implements Writeable, ToXContent, Iterable<ThreadPoolStats.Stats> {, +    public static class Stats implements Writeable, ToXContent, Comparable<Stats> {, +        private final String name;, +        private final int threads;, +        private final int queue;, +        private final int active;, +        private final long rejected;, +        private final int largest;, +        private final long completed;, +        public Stats(StreamInput in) throws IOException {, +            name = in.readString();, +            threads = in.readInt();, +            queue = in.readInt();, +            active = in.readInt();, +            rejected = in.readLong();, +            largest = in.readInt();, +            completed = in.readLong();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(name);, +            out.writeInt(threads);, +            out.writeInt(queue);, +            out.writeInt(active);, +            out.writeLong(rejected);, +            out.writeInt(largest);, +            out.writeLong(completed);, +        }, +, +    public ThreadPoolStats(StreamInput in) throws IOException {, +        stats = in.readList(Stats::new);, +        out.writeList(stats);, +, +    @Override, +    public Iterator<Stats> iterator() {, +        return stats.iterator();]