[+++ b/server/src/main/java/org/elasticsearch/index/engine/CombinedDeletionPolicy.java, +import org.apache.logging.log4j.Logger;, +import java.util.Locale;, +    private final Logger logger;, +    CombinedDeletionPolicy(EngineConfig.OpenMode openMode, Logger logger, TranslogDeletionPolicy translogDeletionPolicy,, +        this.logger = logger;, +    private void keepOnlyStartingCommitOnInit(List<? extends IndexCommit> commits) throws IOException {, +        for (IndexCommit commit : commits) {, +            if (startingCommit.equals(commit) == false) {, +                this.deleteCommit(commit);, +            }, +        }, +                deleteCommit(commits.get(i));, +    private void deleteCommit(IndexCommit commit) throws IOException {, +        assert commit.isDeleted() == false : "Index commit [" + commitDescription(commit) + "] is deleted twice";, +        logger.debug("Delete index commit [{}]", commitDescription(commit));, +        commit.delete();, +        assert commit.isDeleted() : "Deletion commit [" + commitDescription(commit) + "] was suppressed";, +    }, +, +        logger.debug("Safe commit [{}], last commit [{}]", commitDescription(safeCommit), commitDescription(lastCommit));, +     * Returns a description for a given {@link IndexCommit}. This should be only used for logging and debugging., +     */, +    public static String commitDescription(IndexCommit commit) throws IOException {, +        return String.format(Locale.ROOT, "CommitPoint{segment[%s], userData[%s]}", commit.getSegmentsFileName(), commit.getUserData());, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/CombinedDeletionPolicy.java, +import org.apache.logging.log4j.Logger;, +import java.util.Locale;, +    private final Logger logger;, +    CombinedDeletionPolicy(EngineConfig.OpenMode openMode, Logger logger, TranslogDeletionPolicy translogDeletionPolicy,, +        this.logger = logger;, +    private void keepOnlyStartingCommitOnInit(List<? extends IndexCommit> commits) throws IOException {, +        for (IndexCommit commit : commits) {, +            if (startingCommit.equals(commit) == false) {, +                this.deleteCommit(commit);, +            }, +        }, +                deleteCommit(commits.get(i));, +    private void deleteCommit(IndexCommit commit) throws IOException {, +        assert commit.isDeleted() == false : "Index commit [" + commitDescription(commit) + "] is deleted twice";, +        logger.debug("Delete index commit [{}]", commitDescription(commit));, +        commit.delete();, +        assert commit.isDeleted() : "Deletion commit [" + commitDescription(commit) + "] was suppressed";, +    }, +, +        logger.debug("Safe commit [{}], last commit [{}]", commitDescription(safeCommit), commitDescription(lastCommit));, +     * Returns a description for a given {@link IndexCommit}. This should be only used for logging and debugging., +     */, +    public static String commitDescription(IndexCommit commit) throws IOException {, +        return String.format(Locale.ROOT, "CommitPoint{segment[%s], userData[%s]}", commit.getSegmentsFileName(), commit.getUserData());, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                this.combinedDeletionPolicy = new CombinedDeletionPolicy(openMode, logger, translogDeletionPolicy,, +++ b/server/src/main/java/org/elasticsearch/index/engine/CombinedDeletionPolicy.java, +import org.apache.logging.log4j.Logger;, +import java.util.Locale;, +    private final Logger logger;, +    CombinedDeletionPolicy(EngineConfig.OpenMode openMode, Logger logger, TranslogDeletionPolicy translogDeletionPolicy,, +        this.logger = logger;, +    private void keepOnlyStartingCommitOnInit(List<? extends IndexCommit> commits) throws IOException {, +        for (IndexCommit commit : commits) {, +            if (startingCommit.equals(commit) == false) {, +                this.deleteCommit(commit);, +            }, +        }, +                deleteCommit(commits.get(i));, +    private void deleteCommit(IndexCommit commit) throws IOException {, +        assert commit.isDeleted() == false : "Index commit [" + commitDescription(commit) + "] is deleted twice";, +        logger.debug("Delete index commit [{}]", commitDescription(commit));, +        commit.delete();, +        assert commit.isDeleted() : "Deletion commit [" + commitDescription(commit) + "] was suppressed";, +    }, +, +        logger.debug("Safe commit [{}], last commit [{}]", commitDescription(safeCommit), commitDescription(lastCommit));, +     * Returns a description for a given {@link IndexCommit}. This should be only used for logging and debugging., +     */, +    public static String commitDescription(IndexCommit commit) throws IOException {, +        return String.format(Locale.ROOT, "CommitPoint{segment[%s], userData[%s]}", commit.getSegmentsFileName(), commit.getUserData());, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                this.combinedDeletionPolicy = new CombinedDeletionPolicy(openMode, logger, translogDeletionPolicy,, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +import org.apache.logging.log4j.Logger;, +import java.util.StringJoiner;, +            startingSeqNo = getStartingSeqNo(logger, recoveryTarget);, +    public static long getStartingSeqNo(final Logger logger, final RecoveryTarget recoveryTarget) {, +            if (logger.isTraceEnabled()) {, +                final StringJoiner descriptionOfExistingCommits = new StringJoiner(",");, +                for (IndexCommit commit : existingCommits) {, +                    descriptionOfExistingCommits.add(CombinedDeletionPolicy.commitDescription(commit));, +                }, +                logger.trace("Calculate starting seqno based on global checkpoint [{}], safe commit [{}], existing commits [{}]",, +                    globalCheckpoint, CombinedDeletionPolicy.commitDescription(safeCommit), descriptionOfExistingCommits);]