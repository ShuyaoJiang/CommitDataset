[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.elasticsearch.common.lucene.search.Queries;, +import org.elasticsearch.common.lucene.search.TermFilter;, +        if (Uid.hasDelimiter(bValue)) {, +            return new TermFilter(new Term(names.indexName(), bValue));, +        }, +, +        List<String> parentTypes = new ArrayList<String>(context.mapperService().types().size());, +        for (DocumentMapper documentMapper : context.mapperService()) {, +            if (documentMapper.parentFieldMapper() == null) {, +                parentTypes.add(documentMapper.type());, +            }, +        }, +, +        if (parentTypes.isEmpty()) {, +            return Queries.MATCH_NO_FILTER;, +        } else if (parentTypes.size() == 1) {, +            return new TermFilter(new Term(names.indexName(), Uid.createUidAsBytes(parentTypes.get(0), bValue)));, +        } else {, +            List<BytesRef> typesValues = new ArrayList<BytesRef>(parentTypes.size());, +                typesValues.add(Uid.createUidAsBytes(type, bValue));, +    }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.elasticsearch.common.lucene.search.Queries;, +import org.elasticsearch.common.lucene.search.TermFilter;, +        if (Uid.hasDelimiter(bValue)) {, +            return new TermFilter(new Term(names.indexName(), bValue));, +        }, +, +        List<String> parentTypes = new ArrayList<String>(context.mapperService().types().size());, +        for (DocumentMapper documentMapper : context.mapperService()) {, +            if (documentMapper.parentFieldMapper() == null) {, +                parentTypes.add(documentMapper.type());, +            }, +        }, +, +        if (parentTypes.isEmpty()) {, +            return Queries.MATCH_NO_FILTER;, +        } else if (parentTypes.size() == 1) {, +            return new TermFilter(new Term(names.indexName(), Uid.createUidAsBytes(parentTypes.get(0), bValue)));, +        } else {, +            List<BytesRef> typesValues = new ArrayList<BytesRef>(parentTypes.size());, +                typesValues.add(Uid.createUidAsBytes(type, bValue));, +    }, +++ b/src/test/java/org/elasticsearch/test/integration/search/child/SimpleChildQuerySearchTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +        refresh();, +    @Test, +    public void testParentFieldFilter() throws Exception {, +        client().admin().indices().prepareCreate("test"), +                .setSettings(, +                        ImmutableSettings.settingsBuilder(), +                                .put("index.number_of_shards", 1), +                                .put("index.number_of_replicas", 1), +                                .put("index.refresh_interval", -1), +                ).execute().actionGet();, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();, +        client().admin().indices().preparePutMapping("test").setType("child").setSource(jsonBuilder().startObject().startObject("type"), +                .startObject("_parent").field("type", "parent").endObject(), +                .endObject().endObject()).execute().actionGet();, +, +        SearchResponse response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termFilter("_parent", "p1"))), +                .execute().actionGet();, +        assertHitCount(response, 0l);, +, +        client().prepareIndex("test", "parent", "p1").setSource("p_field", "value").execute().actionGet();, +        client().prepareIndex("test", "child", "c1").setSource("c_field", "value").setParent("p1"), +                .execute().actionGet();, +, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termFilter("_parent", "p1"))), +                .execute().actionGet();, +        assertHitCount(response, 0l);, +        refresh();, +, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termFilter("_parent", "p1"))), +                .execute().actionGet();, +        assertHitCount(response, 1l);, +, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termFilter("_parent", "parent#p1"))), +                .execute().actionGet();, +        assertHitCount(response, 1l);, +, +        client().prepareIndex("test", "parent2", "p1").setSource("p_field", "value"), +                .setRefresh(true).execute().actionGet();, +, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termFilter("_parent", "p1"))), +                .execute().actionGet();, +        assertHitCount(response, 1l);, +, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termFilter("_parent", "parent#p1"))), +                .execute().actionGet();, +        assertHitCount(response, 1l);, +    }, +]