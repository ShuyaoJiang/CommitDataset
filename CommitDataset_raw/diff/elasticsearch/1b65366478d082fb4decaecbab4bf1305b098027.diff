[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +                autodetectProcessFactory = new NativeAutodetectProcessFactory(jobProvider, env, settings, nativeController, client);, +                jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +                autodetectProcessFactory = new NativeAutodetectProcessFactory(jobProvider, env, settings, nativeController, client);, +                jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +                autodetectProcessFactory = new NativeAutodetectProcessFactory(jobProvider, env, settings, nativeController, client);, +                jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    public AutodetectCommunicator(Job job, AutodetectProcess process, DataCountsReporter dataCountsReporter,, +                                  AutoDetectResultProcessor autoDetectResultProcessor, Consumer<Exception> handler) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +                autodetectProcessFactory = new NativeAutodetectProcessFactory(jobProvider, env, settings, nativeController, client);, +                jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    public AutodetectCommunicator(Job job, AutodetectProcess process, DataCountsReporter dataCountsReporter,, +                                  AutoDetectResultProcessor autoDetectResultProcessor, Consumer<Exception> handler) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +import org.elasticsearch.xpack.ml.job.results.AutodetectResult;, +import java.util.Iterator;, +     * @return stream of autodetect results., +    Iterator<AutodetectResult> readAutodetectResults();, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +                autodetectProcessFactory = new NativeAutodetectProcessFactory(jobProvider, env, settings, nativeController, client);, +                jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    public AutodetectCommunicator(Job job, AutodetectProcess process, DataCountsReporter dataCountsReporter,, +                                  AutoDetectResultProcessor autoDetectResultProcessor, Consumer<Exception> handler) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +import org.elasticsearch.xpack.ml.job.results.AutodetectResult;, +import java.util.Iterator;, +     * @return stream of autodetect results., +    Iterator<AutodetectResult> readAutodetectResults();, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +                                    JobDataCountsPersister jobDataCountsPersister,, +            ScoresUpdater scoresUpdater = new ScoresUpdater(job, jobProvider, new JobRenormalizedResultsPersister(settings, client),, +            Renormalizer renormalizer = new ShortCircuitingRenormalizer(jobId, scoresUpdater,, +            AutodetectProcess process = autodetectProcessFactory.createAutodetectProcess(job, modelSnapshot, quantiles, filters,, +            boolean usePerPartitionNormalization = job.getAnalysisConfig().getUsePerPartitionNormalization();, +            AutoDetectResultProcessor processor = new AutoDetectResultProcessor(jobId, renormalizer, jobResultsPersister);, +            try {, +                executorService.submit(() -> processor.process(process, usePerPartitionNormalization));, +            } catch (EsRejectedExecutionException e) {, +                // If submitting the operation to read the results from the process fails we need to close, +                // the process too, so that other submitted operations to threadpool are stopped., +            return new AutodetectCommunicator(job, process, dataCountsReporter, processor, handler);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +                autodetectProcessFactory = new NativeAutodetectProcessFactory(jobProvider, env, settings, nativeController, client);, +                jobResultsPersister, jobDataCountsPersister, autodetectProcessFactory, normalizerFactory);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsPersister.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    public AutodetectCommunicator(Job job, AutodetectProcess process, DataCountsReporter dataCountsReporter,, +                                  AutoDetectResultProcessor autoDetectResultProcessor, Consumer<Exception> handler) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +import org.elasticsearch.xpack.ml.job.results.AutodetectResult;, +import java.util.Iterator;, +     * @return stream of autodetect results., +    Iterator<AutodetectResult> readAutodetectResults();, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +                                    JobDataCountsPersister jobDataCountsPersister,, +            ScoresUpdater scoresUpdater = new ScoresUpdater(job, jobProvider, new JobRenormalizedResultsPersister(settings, client),, +            Renormalizer renormalizer = new ShortCircuitingRenormalizer(jobId, scoresUpdater,, +            AutodetectProcess process = autodetectProcessFactory.createAutodetectProcess(job, modelSnapshot, quantiles, filters,, +            boolean usePerPartitionNormalization = job.getAnalysisConfig().getUsePerPartitionNormalization();, +            AutoDetectResultProcessor processor = new AutoDetectResultProcessor(jobId, renormalizer, jobResultsPersister);, +            try {, +                executorService.submit(() -> processor.process(process, usePerPartitionNormalization));, +            } catch (EsRejectedExecutionException e) {, +                // If submitting the operation to read the results from the process fails we need to close, +                // the process too, so that other submitted operations to threadpool are stopped., +            return new AutodetectCommunicator(job, process, dataCountsReporter, processor, handler);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/BlackHoleAutodetectProcess.java, +import java.util.Iterator;, +import java.util.concurrent.ArrayBlockingQueue;, +import java.util.concurrent.BlockingQueue;, + * message is expected on the {@link #readAutodetectResults()} ()} stream. This class writes the flush, +    private final BlockingQueue<AutodetectResult> results = new ArrayBlockingQueue<>(128);, +, +     * Accept the request do nothing with it but write the flush acknowledgement to {@link #readAutodetectResults()}, +        results.add(result);, +    public Iterator<AutodetectResult> readAutodetectResults() {, +        // Create a custom iterator here, because ArrayBlockingQueue iterator and stream are not blocking when empty:, +        return new Iterator<AutodetectResult>() {, +, +            AutodetectResult result;, +, +            @Override, +            public boolean hasNext() {, +                try {, +                    result = results.take();, +                } catch (InterruptedException e) {, +                    Thread.currentThread().interrupt();, +                }]