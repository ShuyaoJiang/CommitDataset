[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsStore.java, +import org.elasticsearch.common.collect.Tuple;, +    protected Tuple<SwitchDirectory, Boolean> buildSwitchDirectoryIfNeeded(Directory fsDirectory, ByteBufferCache byteBufferCache) {, +        if (primaryExtensions == null || primaryExtensions.length == 0) {, +            return null;, +        }, +        Boolean forceUseCompound = null;, +        for (String extension : primaryExtensions) {, +            if (!("".equals(extension) || "del".equals(extension) || "gen".equals(extension))) {, +                // caching internal CFS extension, don't use compound file extension, +                forceUseCompound = false;, +            }, +        }, +, +        return new Tuple<SwitchDirectory, Boolean>(new SwitchDirectory(ImmutableSet.copyOf(primaryExtensions), memDir, fsDirectory, true), forceUseCompound);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsStore.java, +import org.elasticsearch.common.collect.Tuple;, +    protected Tuple<SwitchDirectory, Boolean> buildSwitchDirectoryIfNeeded(Directory fsDirectory, ByteBufferCache byteBufferCache) {, +        if (primaryExtensions == null || primaryExtensions.length == 0) {, +            return null;, +        }, +        Boolean forceUseCompound = null;, +        for (String extension : primaryExtensions) {, +            if (!("".equals(extension) || "del".equals(extension) || "gen".equals(extension))) {, +                // caching internal CFS extension, don't use compound file extension, +                forceUseCompound = false;, +            }, +        }, +, +        return new Tuple<SwitchDirectory, Boolean>(new SwitchDirectory(ImmutableSet.copyOf(primaryExtensions), memDir, fsDirectory, true), forceUseCompound);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/MmapFsStore.java, +import org.elasticsearch.common.collect.Tuple;, +        boolean suggestUseCompoundFile;, +        Tuple<SwitchDirectory, Boolean> switchDirectory = buildSwitchDirectoryIfNeeded(fsDirectory, byteBufferCache);, +            suggestUseCompoundFile = true;, +            if (switchDirectory.v2() != null) {, +                suggestUseCompoundFile = switchDirectory.v2();, +            }, +            logger.debug("Using [mmap_fs] Store with path [{}], cache [true] with extensions [{}]", fsDirectory.getFile(), switchDirectory.v1().primaryExtensions());, +            directory = wrapDirectory(switchDirectory.v1());, +        this.suggestUseCompoundFile = suggestUseCompoundFile;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsStore.java, +import org.elasticsearch.common.collect.Tuple;, +    protected Tuple<SwitchDirectory, Boolean> buildSwitchDirectoryIfNeeded(Directory fsDirectory, ByteBufferCache byteBufferCache) {, +        if (primaryExtensions == null || primaryExtensions.length == 0) {, +            return null;, +        }, +        Boolean forceUseCompound = null;, +        for (String extension : primaryExtensions) {, +            if (!("".equals(extension) || "del".equals(extension) || "gen".equals(extension))) {, +                // caching internal CFS extension, don't use compound file extension, +                forceUseCompound = false;, +            }, +        }, +, +        return new Tuple<SwitchDirectory, Boolean>(new SwitchDirectory(ImmutableSet.copyOf(primaryExtensions), memDir, fsDirectory, true), forceUseCompound);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/MmapFsStore.java, +import org.elasticsearch.common.collect.Tuple;, +        boolean suggestUseCompoundFile;, +        Tuple<SwitchDirectory, Boolean> switchDirectory = buildSwitchDirectoryIfNeeded(fsDirectory, byteBufferCache);, +            suggestUseCompoundFile = true;, +            if (switchDirectory.v2() != null) {, +                suggestUseCompoundFile = switchDirectory.v2();, +            }, +            logger.debug("Using [mmap_fs] Store with path [{}], cache [true] with extensions [{}]", fsDirectory.getFile(), switchDirectory.v1().primaryExtensions());, +            directory = wrapDirectory(switchDirectory.v1());, +        this.suggestUseCompoundFile = suggestUseCompoundFile;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/NioFsStore.java, +import org.elasticsearch.common.collect.Tuple;, +        boolean suggestUseCompoundFile;, +        Tuple<SwitchDirectory, Boolean> switchDirectory = buildSwitchDirectoryIfNeeded(fsDirectory, byteBufferCache);, +            suggestUseCompoundFile = true;, +            if (switchDirectory.v2() != null) {, +                suggestUseCompoundFile = switchDirectory.v2();, +            }, +            logger.debug("Using [nio_fs] Store with path [{}], cache [true] with extensions [{}]", fsDirectory.getFile(), switchDirectory.v1().primaryExtensions());, +            directory = wrapDirectory(switchDirectory.v1());, +        this.suggestUseCompoundFile = suggestUseCompoundFile;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsStore.java, +import org.elasticsearch.common.collect.Tuple;, +    protected Tuple<SwitchDirectory, Boolean> buildSwitchDirectoryIfNeeded(Directory fsDirectory, ByteBufferCache byteBufferCache) {, +        if (primaryExtensions == null || primaryExtensions.length == 0) {, +            return null;, +        }, +        Boolean forceUseCompound = null;, +        for (String extension : primaryExtensions) {, +            if (!("".equals(extension) || "del".equals(extension) || "gen".equals(extension))) {, +                // caching internal CFS extension, don't use compound file extension, +                forceUseCompound = false;, +            }, +        }, +, +        return new Tuple<SwitchDirectory, Boolean>(new SwitchDirectory(ImmutableSet.copyOf(primaryExtensions), memDir, fsDirectory, true), forceUseCompound);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/MmapFsStore.java, +import org.elasticsearch.common.collect.Tuple;, +        boolean suggestUseCompoundFile;, +        Tuple<SwitchDirectory, Boolean> switchDirectory = buildSwitchDirectoryIfNeeded(fsDirectory, byteBufferCache);, +            suggestUseCompoundFile = true;, +            if (switchDirectory.v2() != null) {, +                suggestUseCompoundFile = switchDirectory.v2();]