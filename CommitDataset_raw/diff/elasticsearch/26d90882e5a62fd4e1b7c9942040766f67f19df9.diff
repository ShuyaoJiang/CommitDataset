[+++ b/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, +    private final ThreadPoolExecutor workers;, +    public static final String TRANSPORT_LOCAL_ADDRESS = "transport.local.address";, +    public static final String TRANSPORT_LOCAL_WORKERS = "transport.local.workers";, +    public static final String TRANSPORT_LOCAL_QUEUE = "transport.local.queue";, +, +        int workerCount = this.settings.getAsInt(TRANSPORT_LOCAL_WORKERS, EsExecutors.boundedNumberOfProcessors(settings));, +        int queueSize = this.settings.getAsInt(TRANSPORT_LOCAL_QUEUE, -1);, +        logger.debug("creating [{}] workers, queue_size [{}]", workerCount, queueSize);, +        this.workers = EsExecutors.newFixed(workerCount, queueSize, EsExecutors.daemonThreadFactory(this.settings, "local_transport"));, +        workers.shutdown();, +        try {, +            workers.awaitTermination(10, TimeUnit.SECONDS);, +        } catch (InterruptedException e) {, +            Thread.currentThread().interrupt();, +        }, +        workers.shutdownNow();, +        targetTransport.workers().execute(new Runnable() {, +    ThreadPoolExecutor workers() {, +        return this.workers;, +++ b/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, +    private final ThreadPoolExecutor workers;, +    public static final String TRANSPORT_LOCAL_ADDRESS = "transport.local.address";, +    public static final String TRANSPORT_LOCAL_WORKERS = "transport.local.workers";, +    public static final String TRANSPORT_LOCAL_QUEUE = "transport.local.queue";, +, +        int workerCount = this.settings.getAsInt(TRANSPORT_LOCAL_WORKERS, EsExecutors.boundedNumberOfProcessors(settings));, +        int queueSize = this.settings.getAsInt(TRANSPORT_LOCAL_QUEUE, -1);, +        logger.debug("creating [{}] workers, queue_size [{}]", workerCount, queueSize);, +        this.workers = EsExecutors.newFixed(workerCount, queueSize, EsExecutors.daemonThreadFactory(this.settings, "local_transport"));, +        workers.shutdown();, +        try {, +            workers.awaitTermination(10, TimeUnit.SECONDS);, +        } catch (InterruptedException e) {, +            Thread.currentThread().interrupt();, +        }, +        workers.shutdownNow();, +        targetTransport.workers().execute(new Runnable() {, +    ThreadPoolExecutor workers() {, +        return this.workers;, +++ b/src/main/java/org/elasticsearch/transport/local/LocalTransportChannel.java, +        targetTransport.workers().execute(new Runnable() {, +        targetTransport.workers().execute(new Runnable() {]