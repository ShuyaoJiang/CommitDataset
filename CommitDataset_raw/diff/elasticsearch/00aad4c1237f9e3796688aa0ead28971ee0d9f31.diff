[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +    /**, +     * Shortcut ids to load, we load only "from" and up to "size". The phase controller, +     * handles this as well since the result is always size * shards for Q_A_F, +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +    /**, +     * Shortcut ids to load, we load only "from" and up to "size". The phase controller, +     * handles this as well since the result is always size * shards for Q_A_F, +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +            // this is also important since we shortcut and fetch only docs from "from" and up to "size", +        // we only pop the first, this handles "from" nicely since the "from" are down the queue, +        // that we already fetched, so we are actually popping the "from" and up to "size", +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +    /**, +     * Shortcut ids to load, we load only "from" and up to "size". The phase controller, +     * handles this as well since the result is always size * shards for Q_A_F, +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +            // this is also important since we shortcut and fetch only docs from "from" and up to "size", +        // we only pop the first, this handles "from" nicely since the "from" are down the queue, +        // that we already fetched, so we are actually popping the "from" and up to "size", +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +    /**, +     * Shortcut ids to load, we load only "from" and up to "size". The phase controller, +     * handles this as well since the result is always size * shards for Q_A_F, +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +            // this is also important since we shortcut and fetch only docs from "from" and up to "size", +        // we only pop the first, this handles "from" nicely since the "from" are down the queue, +        // that we already fetched, so we are actually popping the "from" and up to "size", +++ /dev/null, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/embedded/SingleShardEmbeddedSearchTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.integration.search.embedded;, +, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.collect.Sets;, +import org.elasticsearch.common.trove.ExtTIntArrayList;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.node.internal.InternalNode;, +import org.elasticsearch.search.*;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.controller.SearchPhaseController;, +import org.elasticsearch.search.controller.ShardDoc;, +import org.elasticsearch.search.dfs.AggregatedDfs;, +import org.elasticsearch.search.dfs.DfsSearchResult;, +import org.elasticsearch.search.facet.FacetBuilders;, +import org.elasticsearch.search.facet.query.QueryFacet;, +import org.elasticsearch.search.fetch.FetchSearchRequest;, +import org.elasticsearch.search.fetch.FetchSearchResult;, +import org.elasticsearch.search.fetch.QueryFetchSearchResult;, +import org.elasticsearch.search.internal.InternalSearchRequest;, +import org.elasticsearch.search.query.QuerySearchRequest;, +import org.elasticsearch.search.query.QuerySearchResult;, +import org.elasticsearch.search.sort.SortOrder;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.testng.annotations.AfterClass;, +import org.testng.annotations.BeforeClass;, +import org.testng.annotations.Test;, +, +import java.util.Map;, +import java.util.Set;, +, +import static org.elasticsearch.client.Requests.*;, +import static org.elasticsearch.common.collect.Lists.*;, +import static org.elasticsearch.common.settings.ImmutableSettings.*;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +import static org.elasticsearch.search.builder.SearchSourceBuilder.*;, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.Matchers.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class SingleShardEmbeddedSearchTests extends AbstractNodesTests {, +, +    private SearchService searchService;, +, +    private SearchPhaseController searchPhaseController;]