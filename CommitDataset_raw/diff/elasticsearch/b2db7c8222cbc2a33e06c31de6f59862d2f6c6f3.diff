[+++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XCollector.java, +import java.io.IOException;, +, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XCollector.java, +import java.io.IOException;, +, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                collector.postCollection();, +        public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XCollector.java, +import java.io.IOException;, +, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                collector.postCollection();, +        public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.Iterables;, +import java.util.*;, +public abstract class Aggregator extends BucketCollector implements Releasable {, +, +    private static final Predicate<Aggregator> COLLECTABLE_AGGREGATOR = new Predicate<Aggregator>() {, +        @Override, +        public boolean apply(Aggregator aggregator) {, +            return aggregator.shouldCollect();, +        }, +    };, +    protected final BucketCollector collectableSugAggregators;, +        collectableSugAggregators = BucketCollector.wrap(Iterables.filter(Arrays.asList(subAggregators), COLLECTABLE_AGGREGATOR));, +    public final void postCollection() throws IOException {, +        collectableSugAggregators.postCollection();, +    protected void doPostCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XCollector.java, +import java.io.IOException;, +, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                collector.postCollection();, +        public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.Iterables;, +import java.util.*;, +public abstract class Aggregator extends BucketCollector implements Releasable {, +, +    private static final Predicate<Aggregator> COLLECTABLE_AGGREGATOR = new Predicate<Aggregator>() {, +        @Override, +        public boolean apply(Aggregator aggregator) {, +            return aggregator.shouldCollect();, +        }, +    };, +    protected final BucketCollector collectableSugAggregators;, +        collectableSugAggregators = BucketCollector.wrap(Iterables.filter(Arrays.asList(subAggregators), COLLECTABLE_AGGREGATOR));, +    public final void postCollection() throws IOException {, +        collectableSugAggregators.postCollection();, +    protected void doPostCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +                protected void doPostCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/FilteredCollector.java, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XCollector.java, +import java.io.IOException;, +, +    public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                collector.postCollection();, +        public void postCollection() throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.Iterables;, +import java.util.*;, +public abstract class Aggregator extends BucketCollector implements Releasable {, +]