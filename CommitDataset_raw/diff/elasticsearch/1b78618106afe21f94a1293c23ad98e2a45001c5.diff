[+++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +        return PARSER.parse(context.parser(), new FieldSortBuilder(fieldName), context);, +    private static ObjectParser<FieldSortBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME);, +, +    static {, +        PARSER.declareField(FieldSortBuilder::missing, p -> p.objectText(),  MISSING, ValueType.VALUE);, +        PARSER.declareString(FieldSortBuilder::setNestedPath , NESTED_PATH);, +        PARSER.declareString(FieldSortBuilder::unmappedType , UNMAPPED_TYPE);, +        PARSER.declareField(FieldSortBuilder::order, p -> SortOrder.fromString(p.text()), ORDER_FIELD, ValueType.STRING);, +        PARSER.declareField(FieldSortBuilder::sortMode, p -> SortMode.fromString(p.text()), SORT_MODE, ValueType.STRING);, +        PARSER.declareObject(FieldSortBuilder::setNestedFilter,  (p, c) -> {, +            try {, +                QueryBuilder builder = c.parseInnerQueryBuilder().orElseThrow(, +                        () -> new ParsingException(p.getTokenLocation(), "Expected " + NESTED_FILTER.getPreferredName() + " element."));, +            } catch (Exception e) {, +                throw new ParsingException(p.getTokenLocation(), "Expected " + NESTED_FILTER.getPreferredName() + " element.", e);, +            }}, NESTED_FILTER);, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +        return PARSER.parse(context.parser(), new FieldSortBuilder(fieldName), context);, +    private static ObjectParser<FieldSortBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME);, +, +    static {, +        PARSER.declareField(FieldSortBuilder::missing, p -> p.objectText(),  MISSING, ValueType.VALUE);, +        PARSER.declareString(FieldSortBuilder::setNestedPath , NESTED_PATH);, +        PARSER.declareString(FieldSortBuilder::unmappedType , UNMAPPED_TYPE);, +        PARSER.declareField(FieldSortBuilder::order, p -> SortOrder.fromString(p.text()), ORDER_FIELD, ValueType.STRING);, +        PARSER.declareField(FieldSortBuilder::sortMode, p -> SortMode.fromString(p.text()), SORT_MODE, ValueType.STRING);, +        PARSER.declareObject(FieldSortBuilder::setNestedFilter,  (p, c) -> {, +            try {, +                QueryBuilder builder = c.parseInnerQueryBuilder().orElseThrow(, +                        () -> new ParsingException(p.getTokenLocation(), "Expected " + NESTED_FILTER.getPreferredName() + " element."));, +            } catch (Exception e) {, +                throw new ParsingException(p.getTokenLocation(), "Expected " + NESTED_FILTER.getPreferredName() + " element.", e);, +            }}, NESTED_FILTER);, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +        return PARSER.apply(context.parser(), context);, +    }, +    private static ObjectParser<ScoreSortBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME, ScoreSortBuilder::new);, +, +    static {, +        PARSER.declareField(ScoreSortBuilder::order, p -> SortOrder.fromString(p.text()), ORDER_FIELD, ValueType.STRING);, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +        return PARSER.parse(context.parser(), new FieldSortBuilder(fieldName), context);, +    private static ObjectParser<FieldSortBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME);, +, +    static {, +        PARSER.declareField(FieldSortBuilder::missing, p -> p.objectText(),  MISSING, ValueType.VALUE);, +        PARSER.declareString(FieldSortBuilder::setNestedPath , NESTED_PATH);, +        PARSER.declareString(FieldSortBuilder::unmappedType , UNMAPPED_TYPE);, +        PARSER.declareField(FieldSortBuilder::order, p -> SortOrder.fromString(p.text()), ORDER_FIELD, ValueType.STRING);, +        PARSER.declareField(FieldSortBuilder::sortMode, p -> SortMode.fromString(p.text()), SORT_MODE, ValueType.STRING);, +        PARSER.declareObject(FieldSortBuilder::setNestedFilter,  (p, c) -> {, +            try {, +                QueryBuilder builder = c.parseInnerQueryBuilder().orElseThrow(, +                        () -> new ParsingException(p.getTokenLocation(), "Expected " + NESTED_FILTER.getPreferredName() + " element."));, +            } catch (Exception e) {, +                throw new ParsingException(p.getTokenLocation(), "Expected " + NESTED_FILTER.getPreferredName() + " element.", e);, +            }}, NESTED_FILTER);, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +        return PARSER.apply(context.parser(), context);, +    }, +    private static ObjectParser<ScoreSortBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME, ScoreSortBuilder::new);, +, +    static {, +        PARSER.declareField(ScoreSortBuilder::order, p -> SortOrder.fromString(p.text()), ORDER_FIELD, ValueType.STRING);, +++ b/core/src/test/java/org/elasticsearch/search/sort/FieldSortBuilderTests.java, +        } catch (IllegalArgumentException e) {, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +        return PARSER.parse(context.parser(), new FieldSortBuilder(fieldName), context);, +    private static ObjectParser<FieldSortBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME);, +, +    static {, +        PARSER.declareField(FieldSortBuilder::missing, p -> p.objectText(),  MISSING, ValueType.VALUE);, +        PARSER.declareString(FieldSortBuilder::setNestedPath , NESTED_PATH);, +        PARSER.declareString(FieldSortBuilder::unmappedType , UNMAPPED_TYPE);, +        PARSER.declareField(FieldSortBuilder::order, p -> SortOrder.fromString(p.text()), ORDER_FIELD, ValueType.STRING);, +        PARSER.declareField(FieldSortBuilder::sortMode, p -> SortMode.fromString(p.text()), SORT_MODE, ValueType.STRING);, +        PARSER.declareObject(FieldSortBuilder::setNestedFilter,  (p, c) -> {, +            try {, +                QueryBuilder builder = c.parseInnerQueryBuilder().orElseThrow(, +                        () -> new ParsingException(p.getTokenLocation(), "Expected " + NESTED_FILTER.getPreferredName() + " element."));, +            } catch (Exception e) {, +                throw new ParsingException(p.getTokenLocation(), "Expected " + NESTED_FILTER.getPreferredName() + " element.", e);, +            }}, NESTED_FILTER);, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +        return PARSER.apply(context.parser(), context);]