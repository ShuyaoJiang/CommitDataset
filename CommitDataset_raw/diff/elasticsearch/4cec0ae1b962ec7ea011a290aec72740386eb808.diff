[+++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value (without any guarantees of what that, +will be - typically the first in natural ascending order) for fields with multiple values (true) or throw an exception., +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value (without any guarantees of what that, +will be - typically the first in natural ascending order) for fields with multiple values (true) or throw an exception., +++ b/docs/reference/sql/functions/aggs.asciidoc, +[[sql-functions-aggs-general]], +[float], +=== General Purpose, +==== `AVG`, +==== `COUNT`, +==== `COUNT(ALL)`, +==== `COUNT(DISTINCT)`, +==== `FIRST/FIRST_VALUE`, +==== `LAST/LAST_VALUE`, +==== `MAX`, +==== `MIN`, +==== `SUM`, +[[sql-functions-aggs-statistics]], +[float], +=== Statistics, +==== `KURTOSIS`, +==== `MAD`, +==== `PERCENTILE`, +==== `PERCENTILE_RANK`, +==== `SKEWNESS`, +==== `STDDEV_POP`, +==== `SUM_OF_SQUARES`, +==== `VAR_POP`, +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value (without any guarantees of what that, +will be - typically the first in natural ascending order) for fields with multiple values (true) or throw an exception., +++ b/docs/reference/sql/functions/aggs.asciidoc, +[[sql-functions-aggs-general]], +[float], +=== General Purpose, +==== `AVG`, +==== `COUNT`, +==== `COUNT(ALL)`, +==== `COUNT(DISTINCT)`, +==== `FIRST/FIRST_VALUE`, +==== `LAST/LAST_VALUE`, +==== `MAX`, +==== `MIN`, +==== `SUM`, +[[sql-functions-aggs-statistics]], +[float], +=== Statistics, +==== `KURTOSIS`, +==== `MAD`, +==== `PERCENTILE`, +==== `PERCENTILE_RANK`, +==== `SKEWNESS`, +==== `STDDEV_POP`, +==== `SUM_OF_SQUARES`, +==== `VAR_POP`, +++ b/docs/reference/sql/functions/conditional.asciidoc, +[[sql-functions-conditional-greatest]], +==== `GREATEST`, +, +.Synopsis:, +[source, sql], +----, +GREATEST(expression<1>, expression<2>, ...), +----, +, +*Input*:, +, +<1> 1st expression, +, +<2> 2nd expression, +, +..., +, +**N**th expression, +, +GREATEST can take an arbitrary number of arguments and, +all of them must be of the same data type., +, +*Output*: one of the expressions or `null`, +, +.Description, +, +Returns the argument that has the largest value which is not null., +If all arguments are null, then it returns `null`., +, +, +, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs/docs.csv-spec[greatestReturnNonNull], +----, +, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs/docs.csv-spec[greatestReturnNull], +----, +, +]