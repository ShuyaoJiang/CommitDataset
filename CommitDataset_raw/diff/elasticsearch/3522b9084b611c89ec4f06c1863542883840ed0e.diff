[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        } catch (AssertionError e) {, +    private String explain(SearchContext context, boolean rewritten) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        } catch (AssertionError e) {, +    private String explain(SearchContext context, boolean rewritten) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +, +    @Override, +    protected String getExecutor(ExplainRequest request, ShardId shardId) {, +        IndexService indexService = searchService.getIndicesService().indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        } catch (AssertionError e) {, +    private String explain(SearchContext context, boolean rewritten) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +, +    @Override, +    protected String getExecutor(ExplainRequest request, ShardId shardId) {, +        IndexService indexService = searchService.getIndicesService().indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +, +    @Override, +    protected String getExecutor(GetRequest request, ShardId shardId) {, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        } catch (AssertionError e) {, +    private String explain(SearchContext context, boolean rewritten) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +, +    @Override, +    protected String getExecutor(ExplainRequest request, ShardId shardId) {, +        IndexService indexService = searchService.getIndicesService().indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +, +    @Override, +    protected String getExecutor(GetRequest request, ShardId shardId) {, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/get/TransportShardMultiGetAction.java, +, +    @Override, +    protected String getExecutor(MultiGetShardRequest request, ShardId shardId) {, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        } catch (AssertionError e) {, +    private String explain(SearchContext context, boolean rewritten) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +, +    @Override, +    protected String getExecutor(ExplainRequest request, ShardId shardId) {, +        IndexService indexService = searchService.getIndicesService().indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +, +    @Override, +    protected String getExecutor(GetRequest request, ShardId shardId) {, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/get/TransportShardMultiGetAction.java, +, +    @Override, +    protected String getExecutor(MultiGetShardRequest request, ShardId shardId) {, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        return indexService.getIndexSettings().isSearchThrottled() ? ThreadPool.Names.SEARCH_THROTTLED : super.getExecutor(request,, +            shardId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/search/CanMatchPreFilterSearchPhase.java, +import org.elasticsearch.search.SearchService;, +final class CanMatchPreFilterSearchPhase extends AbstractSearchAsyncAction<SearchService.CanMatchResponse> {, +                                       SearchActionListener<SearchService.CanMatchResponse> listener) {, +    protected SearchPhase getNextPhase(SearchPhaseResults<SearchService.CanMatchResponse> results,, +        SearchPhaseResults<SearchService.CanMatchResponse> {, +        void consumeResult(SearchService.CanMatchResponse result) {, +        Stream<SearchService.CanMatchResponse> getSuccessfulResults() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        } catch (AssertionError e) {, +    private String explain(SearchContext context, boolean rewritten) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +]