[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/logical/BinaryLogic.java, +        // Cannot fold null due to 3vl, constant folding will do any possible folding., +        return false;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/logical/BinaryLogic.java, +        // Cannot fold null due to 3vl, constant folding will do any possible folding., +        return false;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +            Expression condition = filter.condition().transformUp(PruneFilters::foldBinaryLogic);, +, +            if (condition instanceof Literal) {, +                if (TRUE.equals(condition)) {, +                if (FALSE.equals(condition) || Expressions.isNull(condition)) {, +            if (!condition.equals(filter.condition())) {, +                return new Filter(filter.location(), filter.child(), condition);, +            }, +, +        private static Expression foldBinaryLogic(Expression expression) {, +            if (expression instanceof Or) {, +                Or or = (Or) expression;, +                boolean nullLeft = Expressions.isNull(or.left());, +                boolean nullRight = Expressions.isNull(or.right());, +                if (nullLeft && nullRight) {, +                    return Literal.NULL;, +                }, +                if (nullLeft) {, +                    return or.right();, +                }, +                if (nullRight) {, +                    return or.left();, +                }, +            }, +            if (expression instanceof And) {, +                And and = (And) expression;, +                if (Expressions.isNull(and.left()) || Expressions.isNull(and.right())) {, +                    return Literal.NULL;, +                }, +            }, +            return expression;, +        }, +            } else if (e instanceof In) {, +            } else if (e.nullable() && Expressions.anyMatch(e.children(), Expressions::isNull)) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/logical/BinaryLogic.java, +        // Cannot fold null due to 3vl, constant folding will do any possible folding., +        return false;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +            Expression condition = filter.condition().transformUp(PruneFilters::foldBinaryLogic);, +, +            if (condition instanceof Literal) {, +                if (TRUE.equals(condition)) {, +                if (FALSE.equals(condition) || Expressions.isNull(condition)) {, +            if (!condition.equals(filter.condition())) {, +                return new Filter(filter.location(), filter.child(), condition);, +            }, +, +        private static Expression foldBinaryLogic(Expression expression) {, +            if (expression instanceof Or) {, +                Or or = (Or) expression;, +                boolean nullLeft = Expressions.isNull(or.left());, +                boolean nullRight = Expressions.isNull(or.right());, +                if (nullLeft && nullRight) {, +                    return Literal.NULL;, +                }, +                if (nullLeft) {, +                    return or.right();, +                }, +                if (nullRight) {, +                    return or.left();, +                }, +            }, +            if (expression instanceof And) {, +                And and = (And) expression;, +                if (Expressions.isNull(and.left()) || Expressions.isNull(and.right())) {, +                    return Literal.NULL;, +                }, +            }, +            return expression;, +        }, +            } else if (e instanceof In) {, +            } else if (e.nullable() && Expressions.anyMatch(e.children(), Expressions::isNull)) {, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java, +    public void testFoldingToLocalExecBooleanAndNull_WhereClause2() {, +        PhysicalPlan p = plan("SELECT true OR null");, +    }, +    public void testFoldingToLocalExecBooleanAndNull_WhereClause() {, +        PhysicalPlan p = plan("SELECT keyword FROM test WHERE int > 10 AND null AND true");, +        assertEquals(LocalExec.class, p.getClass());, +        LocalExec le = (LocalExec) p;, +        assertEquals(EmptyExecutable.class, le.executable().getClass());, +        EmptyExecutable ee = (EmptyExecutable) le.executable();, +        assertEquals(1, ee.output().size());, +        assertThat(ee.output().get(0).toString(), startsWith("keyword{f}#"));, +    }, +, +    public void testFoldingToLocalExecBooleanAndNull_HavingClause() {, +        PhysicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) > 10 AND null");, +        assertEquals(LocalExec.class, p.getClass());, +        LocalExec le = (LocalExec) p;, +        assertEquals(EmptyExecutable.class, le.executable().getClass());, +        EmptyExecutable ee = (EmptyExecutable) le.executable();, +        assertEquals(2, ee.output().size());]