[+++ b/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java, +        } else if (unreleased.major == current.major) {, +            // need to remove one more of the last major's minor set, +            do {, +                unreleasedIndex--;, +            } while (unreleasedIndex > 0 && versions.get(unreleasedIndex).major == current.major);, +            if (unreleasedIndex > 0) {, +                // some of the test cases return very small lists, so its possible this is just the end of the list, if so, dont include it, +                Version earlierMajorsMinor = versions.remove(unreleasedIndex);, +                return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(earlierMajorsMinor, unreleased, current)));, +            }, +++ b/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java, +        } else if (unreleased.major == current.major) {, +            // need to remove one more of the last major's minor set, +            do {, +                unreleasedIndex--;, +            } while (unreleasedIndex > 0 && versions.get(unreleasedIndex).major == current.major);, +            if (unreleasedIndex > 0) {, +                // some of the test cases return very small lists, so its possible this is just the end of the list, if so, dont include it, +                Version earlierMajorsMinor = versions.remove(unreleasedIndex);, +                return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(earlierMajorsMinor, unreleased, current)));, +            }, +++ b/test/framework/src/test/java/org/elasticsearch/test/VersionUtilsTests.java, +            TestVersionBumpIn6x.V_5_6_2,, +            TestNewMinorBranchIn6x.V_5_6_2,]