[+++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +<5> Properties for the JDBC driver. Empty by default. Optional., +The driver recognized the following properties:, +[float], +==== Additional, +, +`validate.properties` (default true):: If disabled, it will ignore any misspellings or unrecognizable properties. When enabled, an exception, +will be thrown if the provided property cannot be recognized., +, +configuration properties in the URL rely on the `DriverManager`-style, +without having to worry about any other properties., +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +<5> Properties for the JDBC driver. Empty by default. Optional., +The driver recognized the following properties:, +[float], +==== Additional, +, +`validate.properties` (default true):: If disabled, it will ignore any misspellings or unrecognizable properties. When enabled, an exception, +will be thrown if the provided property cannot be recognized., +, +configuration properties in the URL rely on the `DriverManager`-style, +without having to worry about any other properties., +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfigurationTests.java, +import static org.elasticsearch.xpack.sql.client.ConnectionConfiguration.NETWORK_TIMEOUT;, +import static org.elasticsearch.xpack.sql.client.ConnectionConfiguration.PAGE_SIZE;, +import static org.elasticsearch.xpack.sql.client.ConnectionConfiguration.PROPERTIES_VALIDATION;, +import static org.elasticsearch.xpack.sql.client.ConnectionConfiguration.QUERY_TIMEOUT;, +    public void testValidatePropertiesDefault() {, +        Exception e = expectThrows(JdbcSQLException.class, () -> ci("jdbc:es://test:9200?pagee.size=12"));, +        assertEquals("Unknown parameter [pagee.size]; did you mean [page.size]", e.getMessage());, +        , +        e = expectThrows(JdbcSQLException.class, () -> ci("jdbc:es://test:9200?foo=bar"));, +        assertEquals("Unknown parameter [foo]; did you mean [ssl]", e.getMessage());, +    }, +    , +    public void testValidateProperties() {, +        Exception e = expectThrows(JdbcSQLException.class, () -> ci("jdbc:es://test:9200?pagee.size=12&validate.properties=true"));, +        assertEquals("Unknown parameter [pagee.size]; did you mean [page.size]", e.getMessage());, +        , +        e = expectThrows(JdbcSQLException.class, () -> ci("jdbc:es://test:9200?&validate.properties=true&something=some_value"));, +        assertEquals("Unknown parameter [something]; did you mean []", e.getMessage());, +        , +        Properties properties  = new Properties();, +        properties.setProperty(PROPERTIES_VALIDATION, "true");, +        e = expectThrows(JdbcSQLException.class, () -> JdbcConfiguration.create("jdbc:es://test:9200?something=some_value", properties, 0));, +        assertEquals("Unknown parameter [something]; did you mean []", e.getMessage());, +    }, +    , +    public void testNoPropertiesValidation() throws SQLException {, +        JdbcConfiguration ci = ci("jdbc:es://test:9200?pagee.size=12&validate.properties=false");, +        assertEquals(false, ci.validateProperties());, +        , +        // URL properties test, +        long queryTimeout = randomNonNegativeLong();, +        long connectTimeout = randomNonNegativeLong();, +        long networkTimeout = randomNonNegativeLong();, +        long pageTimeout = randomNonNegativeLong();, +        int pageSize = randomIntBetween(0, Integer.MAX_VALUE);, +        , +        ci = ci("jdbc:es://test:9200?validate.properties=false&something=some_value&query.timeout=" + queryTimeout + "&connect.timeout=", +                + connectTimeout + "&network.timeout=" + networkTimeout + "&page.timeout=" + pageTimeout + "&page.size=" + pageSize);, +        assertEquals(false, ci.validateProperties());, +        assertEquals(queryTimeout, ci.queryTimeout());, +        assertEquals(connectTimeout, ci.connectTimeout());, +        assertEquals(networkTimeout, ci.networkTimeout());, +        assertEquals(pageTimeout, ci.pageTimeout());, +        assertEquals(pageSize, ci.pageSize());, +        , +        // Properties test, +        Properties properties  = new Properties();, +        properties.setProperty(PROPERTIES_VALIDATION, "false");, +        properties.put(QUERY_TIMEOUT, Long.toString(queryTimeout));, +        properties.put(PAGE_TIMEOUT, Long.toString(pageTimeout));, +        properties.put(CONNECT_TIMEOUT, Long.toString(connectTimeout));, +        properties.put(NETWORK_TIMEOUT, Long.toString(networkTimeout));, +        properties.put(PAGE_SIZE, Integer.toString(pageSize));, +        , +        // also putting validate.properties in URL to be overriden by the properties value, +        ci = JdbcConfiguration.create("jdbc:es://test:9200?validate.properties=true&something=some_value", properties, 0);, +        assertEquals(false, ci.validateProperties());, +        assertEquals(queryTimeout, ci.queryTimeout());, +        assertEquals(connectTimeout, ci.connectTimeout());, +        assertEquals(networkTimeout, ci.networkTimeout());, +        assertEquals(pageTimeout, ci.pageTimeout());, +        assertEquals(pageSize, ci.pageSize());, +    }, +, +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +<5> Properties for the JDBC driver. Empty by default. Optional., +The driver recognized the following properties:, +[float], +==== Additional, +, +`validate.properties` (default true):: If disabled, it will ignore any misspellings or unrecognizable properties. When enabled, an exception, +will be thrown if the provided property cannot be recognized., +, +configuration properties in the URL rely on the `DriverManager`-style, +without having to worry about any other properties., +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfigurationTests.java, +import static org.elasticsearch.xpack.sql.client.ConnectionConfiguration.NETWORK_TIMEOUT;]