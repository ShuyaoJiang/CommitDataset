[+++ b/server/src/main/java/org/elasticsearch/common/time/CompoundDateTimeFormatter.java, +, +++ b/server/src/main/java/org/elasticsearch/common/time/CompoundDateTimeFormatter.java, +, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatters.java, +    private static final DateTimeFormatter TIME_ZONE_FORMATTER_NO_COLON = new DateTimeFormatterBuilder(), +        .appendOffset("+HHmm", "Z"), +        .appendZoneOrOffsetId(), +    /**, +     * Returns a generic ISO datetime parser where the date is mandatory and the time is optional., +     */, +        new CompoundDateTimeFormatter(STRICT_DATE_OPTIONAL_TIME_FORMATTER_1, STRICT_DATE_OPTIONAL_TIME_FORMATTER_2);, +    /////////////////////////////////////////, +    //, +    // BEGIN basic time formatters, +    //, +    // these formatters to not have any splitting characters between hours, minutes, seconds, milliseconds, +    // this means they have to be strict with the exception of the last element, +    //, +    /////////////////////////////////////////, +, +    private static final DateTimeFormatter BASIC_TIME_NO_MILLIS_BASE = new DateTimeFormatterBuilder(), +    /*, +     * Returns a basic formatter for a two digit hour of day, two digit minute, +     * of hour, two digit second of minute, and time zone offset (HHmmssZ)., +     */, +    private static final CompoundDateTimeFormatter BASIC_TIME_NO_MILLIS = new CompoundDateTimeFormatter(, +        new DateTimeFormatterBuilder().append(BASIC_TIME_NO_MILLIS_BASE).appendZoneOrOffsetId().toFormatter(Locale.ROOT),, +        new DateTimeFormatterBuilder().append(BASIC_TIME_NO_MILLIS_BASE).append(TIME_ZONE_FORMATTER_NO_COLON).toFormatter(Locale.ROOT), +    );, +    private static final DateTimeFormatter BASIC_TIME_PRINTER = new DateTimeFormatterBuilder(), +        .appendValue(HOUR_OF_DAY, 2, 2, SignStyle.NOT_NEGATIVE), +        .appendValue(MINUTE_OF_HOUR, 2, 2, SignStyle.NOT_NEGATIVE), +        .appendValue(SECOND_OF_MINUTE, 2, 2, SignStyle.NOT_NEGATIVE), +        .appendFraction(MILLI_OF_SECOND, 3, 3, true), +    /*, +     * Returns a basic formatter for a two digit hour of day, two digit minute, +     * of hour, two digit second of minute, three digit millis, and time zone, +     * offset (HHmmss.SSSZ)., +     */, +    private static final CompoundDateTimeFormatter BASIC_TIME = new CompoundDateTimeFormatter(, +        new DateTimeFormatterBuilder().append(BASIC_TIME_PRINTER).appendZoneOrOffsetId().toFormatter(Locale.ROOT),, +        new DateTimeFormatterBuilder().append(BASIC_TIME_FORMATTER).appendZoneOrOffsetId().toFormatter(Locale.ROOT),, +        new DateTimeFormatterBuilder().append(BASIC_TIME_FORMATTER).append(TIME_ZONE_FORMATTER_NO_COLON).toFormatter(Locale.ROOT), +    );, +    private static final DateTimeFormatter BASIC_T_TIME_PRINTER =, +        new DateTimeFormatterBuilder().appendLiteral("T").append(BASIC_TIME_PRINTER).toFormatter(Locale.ROOT);, +    private static final DateTimeFormatter BASIC_T_TIME_FORMATTER =, +        new DateTimeFormatterBuilder().appendLiteral("T").append(BASIC_TIME_FORMATTER).toFormatter(Locale.ROOT);, +, +    /*, +     * Returns a basic formatter for a two digit hour of day, two digit minute, +     * of hour, two digit second of minute, three digit millis, and time zone, +     * offset prefixed by 'T' ('T'HHmmss.SSSZ)., +     */, +    private static final CompoundDateTimeFormatter BASIC_T_TIME = new CompoundDateTimeFormatter(, +        new DateTimeFormatterBuilder().append(BASIC_T_TIME_PRINTER).appendZoneOrOffsetId().toFormatter(Locale.ROOT),, +        new DateTimeFormatterBuilder().append(BASIC_T_TIME_FORMATTER).appendZoneOrOffsetId().toFormatter(Locale.ROOT),, +        new DateTimeFormatterBuilder().append(BASIC_T_TIME_FORMATTER).append(TIME_ZONE_FORMATTER_NO_COLON).toFormatter(Locale.ROOT), +    );, +, +    /*, +     * Returns a basic formatter for a two digit hour of day, two digit minute, +     * of hour, two digit second of minute, and time zone offset prefixed by 'T', +     * ('T'HHmmssZ)., +     */, +    private static final CompoundDateTimeFormatter BASIC_T_TIME_NO_MILLIS = new CompoundDateTimeFormatter(, +        new DateTimeFormatterBuilder().appendLiteral("T").append(BASIC_TIME_NO_MILLIS_BASE), +            .appendZoneOrOffsetId().toFormatter(Locale.ROOT),, +        new DateTimeFormatterBuilder().appendLiteral("T").append(BASIC_TIME_NO_MILLIS_BASE), +            .append(TIME_ZONE_FORMATTER_NO_COLON).toFormatter(Locale.ROOT), +    );, +, +    private static final DateTimeFormatter BASIC_YEAR_MONTH_DAY_FORMATTER = new DateTimeFormatterBuilder(), +        .toFormatter(Locale.ROOT);, +, +    private static final DateTimeFormatter BASIC_DATE_TIME_FORMATTER = new DateTimeFormatterBuilder(), +        .append(BASIC_YEAR_MONTH_DAY_FORMATTER), +        .toFormatter(Locale.ROOT);, +    private static final DateTimeFormatter BASIC_DATE_TIME_PRINTER = new DateTimeFormatterBuilder(), +        .append(BASIC_YEAR_MONTH_DAY_FORMATTER), +        .append(BASIC_T_TIME_PRINTER), +        .toFormatter(Locale.ROOT);, +    /*, +     * Returns a basic formatter that combines a basic date and time, separated, +     * by a 'T' (yyyyMMdd'T'HHmmss.SSSZ)., +     */, +    private static final CompoundDateTimeFormatter BASIC_DATE_TIME = new CompoundDateTimeFormatter(, +        new DateTimeFormatterBuilder().append(BASIC_DATE_TIME_PRINTER).appendZoneOrOffsetId().toFormatter(Locale.ROOT),, +        new DateTimeFormatterBuilder().append(BASIC_DATE_TIME_FORMATTER).appendZoneOrOffsetId().toFormatter(Locale.ROOT),, +        new DateTimeFormatterBuilder().append(BASIC_DATE_TIME_FORMATTER).append(TIME_ZONE_FORMATTER_NO_COLON).toFormatter(Locale.ROOT), +    );, +, +    private static final DateTimeFormatter BASIC_DATE_T =, +        new DateTimeFormatterBuilder().append(BASIC_YEAR_MONTH_DAY_FORMATTER).appendLiteral("T").toFormatter(Locale.ROOT);, +, +    /*, +     * Returns a basic formatter that combines a basic date and time without millis,, +     * separated by a 'T' (yyyyMMdd'T'HHmmssZ)., +     */]