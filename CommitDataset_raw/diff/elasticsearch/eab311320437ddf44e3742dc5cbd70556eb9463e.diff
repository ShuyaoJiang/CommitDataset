[+++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java, +import org.elasticsearch.common.io.stream.Writeable;, +    public interface Operation extends Writeable {, +            Type(byte id) {, +        /**, +         * Reads the type and the operation from the given stream. The operatino must be written with, +         * {@link #writeType(Operation, StreamOutput)}, +         */, +        static Operation readType(StreamInput input) throws IOException {, +            Translog.Operation.Type type = Translog.Operation.Type.fromId(input.readByte());, +            switch (type) {, +                case CREATE:, +                    // the deserialization logic in Index was identical to that of Create when create was deprecated, +                    return new Index(input);, +                case DELETE:, +                    return new Translog.Delete(input);, +                case INDEX:, +                    return new Index(input);, +                default:, +                    throw new IOException("No type for [" + type + "]");, +            }, +        }, +, +        /**, +         * Writes the type and translog operation to the given stream, +         */, +        static void writeType(Translog.Operation operation, StreamOutput output) throws IOException {, +            output.writeByte(operation.opType().id());, +            operation.writeTo(output);, +        }, +, +        public static final int SERIALIZATION_FORMAT = 6; // since 2.0-beta1 and 1.1, +        private final String id;, +        private final String type;, +        private final long version;, +        private final VersionType versionType;, +        private final BytesReference source;, +        private final String routing;, +        private final String parent;, +        private final long timestamp;, +        private final long ttl;, +        public Index(StreamInput in) throws IOException {, +            final int format = in.readVInt(); // SERIALIZATION_FORMAT, +            assert format == SERIALIZATION_FORMAT : "format was: " + format;, +            id = in.readString();, +            type = in.readString();, +            source = in.readBytesReference();, +            routing = in.readOptionalString();, +            parent = in.readOptionalString();, +            this.version = in.readLong();, +            this.timestamp = in.readLong();, +            this.ttl = in.readLong();, +            this.versionType = VersionType.fromValue(in.readByte());, +            assert versionType.validateVersionForWrites(this.version);, +            version = Versions.MATCH_ANY;, +            versionType = VersionType.INTERNAL;, +            routing = null;, +            parent = null;, +            timestamp = 0;, +            ttl = 0;, +            out.writeOptionalString(routing);, +            out.writeOptionalString(parent);, +        public static final int SERIALIZATION_FORMAT = 2; // since 2.0-beta1 and 1.1, +        private final Term uid;, +        private final long version;, +        private final VersionType versionType;, +        public Delete(StreamInput in) throws IOException {, +            final int format = in.readVInt();// SERIALIZATION_FORMAT, +            assert format == SERIALIZATION_FORMAT : "format was: " + format;, +            uid = new Term(in.readString(), in.readString());, +            this.version = in.readLong();, +            this.versionType = VersionType.fromValue(in.readByte());, +            assert versionType.validateVersionForWrites(this.version);, +            this.uid = delete.uid();, +            this(uid, Versions.MATCH_ANY, VersionType.INTERNAL);, +        final Translog.Operation operation;, +            operation = Translog.Operation.readType(in);, +        Translog.Operation.writeType(op, out);]