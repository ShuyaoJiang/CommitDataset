[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/common/GroupedActionListener.java, +import java.util.Objects;, +                        -> e.value).filter(Objects::nonNull).collect(Collectors.toList());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/common/GroupedActionListener.java, +import java.util.Objects;, +                        -> e.value).filter(Objects::nonNull).collect(Collectors.toList());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/action/user/TransportGetUsersAction.java, +import org.elasticsearch.xpack.common.GroupedActionListener;, +import org.elasticsearch.xpack.monitoring.collector.Collector;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Objects;, +import java.util.stream.Collectors;, +        final List<String> realmLookup = new ArrayList<>();, +                    realmLookup.add(username);, +        }, +, +        final ActionListener<Collection<Collection<User>>> sendingListener = ActionListener.wrap((userLists) -> {, +                users.addAll(userLists.stream().flatMap(Collection::stream).filter(Objects::nonNull).collect(Collectors.toList()));, +                listener.onResponse(new GetUsersResponse(users));, +            }, listener::onFailure);, +        final GroupedActionListener<Collection<User>> groupListener =, +                new GroupedActionListener<>(sendingListener, 2, Collections.emptyList());, +        // We have two sources for the users object, the reservedRealm and the usersStore, we query both at the same time with a, +        // GroupedActionListener, +        if (realmLookup.isEmpty()) {, +            if (specificUsersRequested == false) {, +                // we get all users from the realm, +                reservedRealm.users(groupListener);, +                groupListener.onResponse(Collections.emptyList());// pass an empty list to inform the group listener, +                // - no real lookups necessary, +            // nested group listener action here - for each of the users we got and fetch it concurrently - once we are done we notify, +            // the "global" group listener., +            GroupedActionListener<User> realmGroupListener = new GroupedActionListener<>(groupListener, realmLookup.size(),, +                    Collections.emptyList());, +            for (String user : realmLookup) {, +                reservedRealm.lookupUser(user, realmGroupListener);, +        // user store lookups, +        if (specificUsersRequested && usersToSearchFor.isEmpty()) {, +            groupListener.onResponse(Collections.emptyList()); // no users requested notify, +        } else {, +            // go and get all users from the users store and pass it directly on to the group listener, +            usersStore.getUsers(usersToSearchFor.toArray(new String[usersToSearchFor.size()]), groupListener);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/common/GroupedActionListener.java, +import java.util.Objects;, +                        -> e.value).filter(Objects::nonNull).collect(Collectors.toList());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/action/user/TransportGetUsersAction.java, +import org.elasticsearch.xpack.common.GroupedActionListener;, +import org.elasticsearch.xpack.monitoring.collector.Collector;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Objects;, +import java.util.stream.Collectors;, +        final List<String> realmLookup = new ArrayList<>();, +                    realmLookup.add(username);, +        }, +, +        final ActionListener<Collection<Collection<User>>> sendingListener = ActionListener.wrap((userLists) -> {, +                users.addAll(userLists.stream().flatMap(Collection::stream).filter(Objects::nonNull).collect(Collectors.toList()));, +                listener.onResponse(new GetUsersResponse(users));, +            }, listener::onFailure);, +        final GroupedActionListener<Collection<User>> groupListener =, +                new GroupedActionListener<>(sendingListener, 2, Collections.emptyList());, +        // We have two sources for the users object, the reservedRealm and the usersStore, we query both at the same time with a, +        // GroupedActionListener, +        if (realmLookup.isEmpty()) {, +            if (specificUsersRequested == false) {, +                // we get all users from the realm, +                reservedRealm.users(groupListener);, +                groupListener.onResponse(Collections.emptyList());// pass an empty list to inform the group listener, +                // - no real lookups necessary, +            // nested group listener action here - for each of the users we got and fetch it concurrently - once we are done we notify, +            // the "global" group listener., +            GroupedActionListener<User> realmGroupListener = new GroupedActionListener<>(groupListener, realmLookup.size(),, +                    Collections.emptyList());, +            for (String user : realmLookup) {, +                reservedRealm.lookupUser(user, realmGroupListener);, +        // user store lookups, +        if (specificUsersRequested && usersToSearchFor.isEmpty()) {, +            groupListener.onResponse(Collections.emptyList()); // no users requested notify, +        } else {, +            // go and get all users from the users store and pass it directly on to the group listener, +            usersStore.getUsers(usersToSearchFor.toArray(new String[usersToSearchFor.size()]), groupListener);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authc/Realm.java, +import org.elasticsearch.action.ActionListener;, +    public void lookupUser(String username, ActionListener<User> listener) {, +        listener.onResponse(lookupUser(username));, +    }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/common/GroupedActionListener.java, +import java.util.Objects;, +                        -> e.value).filter(Objects::nonNull).collect(Collectors.toList());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/action/user/TransportGetUsersAction.java, +import org.elasticsearch.xpack.common.GroupedActionListener;, +import org.elasticsearch.xpack.monitoring.collector.Collector;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Objects;, +import java.util.stream.Collectors;, +        final List<String> realmLookup = new ArrayList<>();]