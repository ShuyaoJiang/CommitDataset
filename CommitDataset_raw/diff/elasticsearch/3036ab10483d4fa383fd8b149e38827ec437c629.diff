[+++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_REQUIRE_GROUP_SETTING, this::setClusterRequireFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING, this::setClusterExcludeFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING, this::setClusterIncludeFilters, (a, b) -> {});, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_REQUIRE_GROUP_SETTING, this::setClusterRequireFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING, this::setClusterExcludeFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING, this::setClusterIncludeFilters, (a, b) -> {});, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +                                                           BiConsumer<String, T> validator) {, +        addSettingsUpdater(setting.newAffixMapUpdater(consumer, logger, validator));, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_REQUIRE_GROUP_SETTING, this::setClusterRequireFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING, this::setClusterExcludeFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING, this::setClusterIncludeFilters, (a, b) -> {});, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +                                                           BiConsumer<String, T> validator) {, +        addSettingsUpdater(setting.newAffixMapUpdater(consumer, logger, validator));, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +                                                                                 BiConsumer<String, T> validator) {, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_REQUIRE_GROUP_SETTING, this::setClusterRequireFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING, this::setClusterExcludeFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING, this::setClusterIncludeFilters, (a, b) -> {});, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +                                                           BiConsumer<String, T> validator) {, +        addSettingsUpdater(setting.newAffixMapUpdater(consumer, logger, validator));, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +                                                                                 BiConsumer<String, T> validator) {, +++ b/server/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +        service.addAffixMapUpdateConsumer(listSetting, listConsumer, (s, k) -> {});, +        service.addAffixMapUpdateConsumer(intSetting, intConsumer, (s, k) -> {});, +        service.addAffixMapUpdateConsumer(prefixSetting, consumer, (s, k) -> {});, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_REQUIRE_GROUP_SETTING, this::setClusterRequireFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING, this::setClusterExcludeFilters, (a, b) -> {});, +        clusterSettings.addAffixMapUpdateConsumer(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING, this::setClusterIncludeFilters, (a, b) -> {});, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +                                                           BiConsumer<String, T> validator) {, +        addSettingsUpdater(setting.newAffixMapUpdater(consumer, logger, validator));, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +                                                                                 BiConsumer<String, T> validator) {, +++ b/server/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +        service.addAffixMapUpdateConsumer(listSetting, listConsumer, (s, k) -> {});, +        service.addAffixMapUpdateConsumer(intSetting, intConsumer, (s, k) -> {});, +        service.addAffixMapUpdateConsumer(prefixSetting, consumer, (s, k) -> {});, +++ b/server/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +import org.elasticsearch.common.settings.AbstractScopedSettings.SettingUpdater;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +    public void testAffixMapUpdateWithNullSettingValue() {, +        // GIVEN an affix setting changed from "prefix._foo"="bar" to "prefix._foo"=null, +        final Settings current = Settings.builder(), +            .put("prefix._foo", (String) null), +            .build();, +, +        final Settings previous = Settings.builder(), +            .put("prefix._foo", "bar"), +            .build();, +, +        final Setting.AffixSetting<String> affixSetting =, +            Setting.prefixKeySetting("prefix" + ".",, +                (key) -> Setting.simpleString(key, (value, map) -> {}, Property.Dynamic, Property.NodeScope));, +, +        final Consumer<Map<String, String>> consumer = (map) -> {};, +        final BiConsumer<String, String> validator = (s1, s2) -> {};, +, +        // WHEN creating an affix updater, +        final SettingUpdater<Map<String, String>> updater = affixSetting.newAffixMapUpdater(consumer, logger, validator);, +, +        // THEN affix updater is always expected to have changed (even when defaults are omitted), +        assertTrue(updater.hasChanged(current, previous));, +, +        // THEN changes are expected when defaults aren't omitted, +        final Map<String, String> updatedSettings = updater.getValue(current, previous);, +        assertNotNull(updatedSettings);, +        assertEquals(1, updatedSettings.size());, +, +        // THEN changes are reported when defaults aren't omitted, +        final String key = updatedSettings.keySet().iterator().next();, +        final String value = updatedSettings.get(key);, +        assertEquals("_foo", key);, +        assertEquals("", value);, +    }, +]