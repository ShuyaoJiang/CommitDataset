[+++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +        SearchInputFactory factory = new SearchInputFactory(Settings.EMPTY, WatcherClientProxy.of(client()), indicesQueryRegistry, null);, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +        SearchInputFactory factory = new SearchInputFactory(Settings.EMPTY, WatcherClientProxy.of(client()), indicesQueryRegistry, null);, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, + indicesQueryRegistry,, +                null);, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +        SearchInputFactory factory = new SearchInputFactory(Settings.EMPTY, WatcherClientProxy.of(client()), indicesQueryRegistry, null);, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, + indicesQueryRegistry,, +                null);, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authc/esnative/ESNativeUsersStore.java, +import java.util.Arrays;, +                    logger.debug("failed to retrieve user [{}]", t, username);, +, +                private SearchResponse lastResponse = null;, +, +                    lastResponse = resp;, +                        if (resp.getScrollId() != null) {, +                            clearScrollResponse(resp.getScrollId());, +                    // attempt to clear scroll response, +                    if (lastResponse != null && lastResponse.getScrollId() != null) {, +                        clearScrollResponse(lastResponse.getScrollId());, +                    }, +, +                        // We don't invoke the onFailure listener here, instead just pass an empty list, +                    } else {, +                        listener.onFailure(t);, +                    }, +, +            logger.error("unable to retrieve users {}", e, Arrays.toString(usernames));, +    private UserAndPassword getUserAndPassword(final String username) {, +                if (t instanceof IndexNotFoundException) {, +                    logger.trace("failed to retrieve user [{}] since security index does not exist", t, username);, +                } else {, +                    logger.error("failed to retrieve user [{}]", t, username);, +                }, +            logger.error("timed out retrieving user [{}]", username);, +    private void getUserAndPassword(final String user, final ActionListener<UserAndPassword> listener) {, +                        logger.trace("could not retrieve user [{}] because security index does not exist", t, user);, +                        logger.error("failed to retrieve user [{}]", t, user);, +            logger.trace("could not retrieve user [{}] because security index does not exist", user);, +            logger.error("unable to retrieve user [{}]", e, user);, +    private void clearScrollResponse(String scrollId) {, +        ClearScrollRequest clearScrollRequest = client.prepareClearScroll().addScrollId(scrollId).request();, +        client.clearScroll(clearScrollRequest, new ActionListener<ClearScrollResponse>() {, +            @Override, +            public void onResponse(ClearScrollResponse response) {, +                // cool, it cleared, we don't really care though..., +            }, +, +            @Override, +            public void onFailure(Throwable t) {, +                // Not really much to do here except for warn about it..., +                logger.warn("failed to clear scroll [{}]", t, scrollId);, +            }, +        });, +    }, +, +            logger.error("error in the format of data for user [{}]", e, username);, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +        SearchInputFactory factory = new SearchInputFactory(Settings.EMPTY, WatcherClientProxy.of(client()), indicesQueryRegistry, null);, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, + indicesQueryRegistry,, +                null);, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authc/esnative/ESNativeUsersStore.java, +import java.util.Arrays;, +                    logger.debug("failed to retrieve user [{}]", t, username);, +, +                private SearchResponse lastResponse = null;, +, +                    lastResponse = resp;, +                        if (resp.getScrollId() != null) {, +                            clearScrollResponse(resp.getScrollId());, +                    // attempt to clear scroll response, +                    if (lastResponse != null && lastResponse.getScrollId() != null) {, +                        clearScrollResponse(lastResponse.getScrollId());, +                    }, +, +                        // We don't invoke the onFailure listener here, instead just pass an empty list, +                    } else {, +                        listener.onFailure(t);, +                    }, +, +            logger.error("unable to retrieve users {}", e, Arrays.toString(usernames));, +    private UserAndPassword getUserAndPassword(final String username) {, +                if (t instanceof IndexNotFoundException) {, +                    logger.trace("failed to retrieve user [{}] since security index does not exist", t, username);, +                } else {, +                    logger.error("failed to retrieve user [{}]", t, username);, +                }, +            logger.error("timed out retrieving user [{}]", username);, +    private void getUserAndPassword(final String user, final ActionListener<UserAndPassword> listener) {, +                        logger.trace("could not retrieve user [{}] because security index does not exist", t, user);, +                        logger.error("failed to retrieve user [{}]", t, user);, +            logger.trace("could not retrieve user [{}] because security index does not exist", user);, +            logger.error("unable to retrieve user [{}]", e, user);, +    private void clearScrollResponse(String scrollId) {, +        ClearScrollRequest clearScrollRequest = client.prepareClearScroll().addScrollId(scrollId).request();]