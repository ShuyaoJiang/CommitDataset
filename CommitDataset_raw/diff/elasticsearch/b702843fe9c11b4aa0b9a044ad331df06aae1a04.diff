[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(DiscoverySettings.COMMIT_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(DiscoverySettings.COMMIT_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +    public boolean wasReadFromDiff() {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(DiscoverySettings.COMMIT_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +    public boolean wasReadFromDiff() {, +++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    logger.debug("publishing cluster state version [{}]", newClusterState.version());, +                    try {, +                    } catch (Throwable t) {, +                        logger.warn("failing [{}]: failed to publish cluster state version [{}]", t, source, newClusterState.version());, +                        updateTask.onFailure(source, t);, +                        return;, +                    }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(DiscoverySettings.COMMIT_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +    public boolean wasReadFromDiff() {, +++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    logger.debug("publishing cluster state version [{}]", newClusterState.version());, +                    try {, +                    } catch (Throwable t) {, +                        logger.warn("failing [{}]: failed to publish cluster state version [{}]", t, source, newClusterState.version());, +                        updateTask.onFailure(source, t);, +                        return;, +                    }, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +        this.commitTimeout = settings.getAsTime(COMMIT_TIMEOUT, publishTimeout);, +            TimeValue newCommitTimeout = settings.getAsTime(COMMIT_TIMEOUT, null);, +            if (newCommitTimeout != null) {, +                if (newCommitTimeout.millis() != commitTimeout.millis()) {, +                    logger.info("updating [{}] from [{}] to [{}]", COMMIT_TIMEOUT, commitTimeout, newCommitTimeout);, +                    commitTimeout = newCommitTimeout;, +                }, +            }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(DiscoverySettings.COMMIT_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +    public boolean wasReadFromDiff() {, +++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    logger.debug("publishing cluster state version [{}]", newClusterState.version());, +                    try {, +                    } catch (Throwable t) {, +                        logger.warn("failing [{}]: failed to publish cluster state version [{}]", t, source, newClusterState.version());, +                        updateTask.onFailure(source, t);, +                        return;, +                    }, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +        this.commitTimeout = settings.getAsTime(COMMIT_TIMEOUT, publishTimeout);, +            TimeValue newCommitTimeout = settings.getAsTime(COMMIT_TIMEOUT, null);, +            if (newCommitTimeout != null) {, +                if (newCommitTimeout.millis() != commitTimeout.millis()) {, +                    logger.info("updating [{}] from [{}] to [{}]", COMMIT_TIMEOUT, commitTimeout, newCommitTimeout);, +                    commitTimeout = newCommitTimeout;, +                }, +            }, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            // cluster service logs a WARN message, +            logger.debug("failed to publish cluster state version [{}] (not enough nodes acknowledged, min master nodes [{}])", clusterChangedEvent.state().version(), electMaster.minimumMasterNodes());, +        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState);, +    public static void validateStateIsFromCurrentMaster(ESLogger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(DiscoverySettings.COMMIT_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +    public boolean wasReadFromDiff() {, +++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    logger.debug("publishing cluster state version [{}]", newClusterState.version());, +                    try {, +                    } catch (Throwable t) {, +                        logger.warn("failing [{}]: failed to publish cluster state version [{}]", t, source, newClusterState.version());, +                        updateTask.onFailure(source, t);, +                        return;, +                    }, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +        this.commitTimeout = settings.getAsTime(COMMIT_TIMEOUT, publishTimeout);, +            TimeValue newCommitTimeout = settings.getAsTime(COMMIT_TIMEOUT, null);, +            if (newCommitTimeout != null) {, +                if (newCommitTimeout.millis() != commitTimeout.millis()) {, +                    logger.info("updating [{}] from [{}] to [{}]", COMMIT_TIMEOUT, commitTimeout, newCommitTimeout);, +                    commitTimeout = newCommitTimeout;, +                }, +            }, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            // cluster service logs a WARN message, +            logger.debug("failed to publish cluster state version [{}] (not enough nodes acknowledged, min master nodes [{}])", clusterChangedEvent.state().version(), electMaster.minimumMasterNodes());, +        validateStateIsFromCurrentMaster(logger, currentState.nodes(), newClusterState);, +    public static void validateStateIsFromCurrentMaster(ESLogger logger, DiscoveryNodes currentNodes, ClusterState newClusterState) {, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +        final DiscoveryNodes nodes = clusterChangedEvent.state().nodes();, +        Set<DiscoveryNode> nodesToPublishTo = new HashSet<>(nodes.size());, +        DiscoveryNode localNode = nodes.localNode();, +        final int totalMasterNodes = nodes.masterNodes().size();, +        for (final DiscoveryNode node : nodes) {, +, +        // we build these early as a best effort not to commit in the case of error.]