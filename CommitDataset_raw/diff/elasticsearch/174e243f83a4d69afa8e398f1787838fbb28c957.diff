[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/IndicesClientDocumentationIT.java, +            boolean exists = client.indices().exists(request);, +            // tag::indices-exists-execute-listener, +            ActionListener<Boolean> listener = new ActionListener<Boolean>() {, +            };, +            // end::indices-exists-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener<>(listener, latch);, +, +            // tag::indices-exists-async, +            client.indices().existsAsync(request, listener); // <1>, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +        listener = new LatchedActionListener<>(listener, latch);, +        listener = new LatchedActionListener<>(listener, latch);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/IndicesClientDocumentationIT.java, +            boolean exists = client.indices().exists(request);, +            // tag::indices-exists-execute-listener, +            ActionListener<Boolean> listener = new ActionListener<Boolean>() {, +            };, +            // end::indices-exists-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener<>(listener, latch);, +, +            // tag::indices-exists-async, +            client.indices().existsAsync(request, listener); // <1>, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +            listener = new LatchedActionListener<>(listener, latch);, +        listener = new LatchedActionListener<>(listener, latch);, +        listener = new LatchedActionListener<>(listener, latch);, +++ b/docs/java-rest/high-level/apis/indices_exists.asciidoc, +The asynchronous execution of an indices exists request requires both the, +`GetIndexRequest` instance and an `ActionListener` instance to be passed, +to the asynchronous method:, +<1> The `GetIndexRequest` to execute and the `ActionListener` to use when, +the execution completes, +, +The asynchronous method does not block and returns immediately. Once it is, +completed the `ActionListener` is called back using the `onResponse` method, +if the execution successfully completed or using the `onFailure` method if, +it failed., +, +A typical listener for the Indices Exists looks like:, +, +["source","java",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{doc-tests}/IndicesClientDocumentationIT.java[indices-exists-execute-listener], +--------------------------------------------------, +<1> Called when the execution is successfully completed. The response is, +provided as an argument]