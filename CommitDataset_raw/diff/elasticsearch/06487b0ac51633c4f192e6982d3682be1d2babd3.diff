[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    public CancelTasksRequest reason(String reason) {, +    public String reason() {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    public CancelTasksRequest reason(String reason) {, +    public String reason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +        if (request.taskId().isSet() == false) {, +            CancellableTask task = taskManager.getCancellableTask(request.taskId().getId());, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support this operation");, +                if (taskManager.getTask(request.taskId().getId()) != null) {, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support cancellation");, +                    throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.taskId());, +        Set<String> childNodes = taskManager.cancel(cancellableTask, request.reason(), banLock::onTaskFinished);, +                setBanOnNodes(request.reason(), cancellableTask, childNodes, banLock);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    public CancelTasksRequest reason(String reason) {, +    public String reason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +        if (request.taskId().isSet() == false) {, +            CancellableTask task = taskManager.getCancellableTask(request.taskId().getId());, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support this operation");, +                if (taskManager.getTask(request.taskId().getId()) != null) {, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support cancellation");, +                    throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.taskId());, +        Set<String> childNodes = taskManager.cancel(cancellableTask, request.reason(), banLock::onTaskFinished);, +                setBanOnNodes(request.reason(), cancellableTask, childNodes, banLock);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequest.java, +    public boolean detailed() {, +    public ListTasksRequest detailed(boolean detailed) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    public CancelTasksRequest reason(String reason) {, +    public String reason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +        if (request.taskId().isSet() == false) {, +            CancellableTask task = taskManager.getCancellableTask(request.taskId().getId());, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support this operation");, +                if (taskManager.getTask(request.taskId().getId()) != null) {, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support cancellation");, +                    throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.taskId());, +        Set<String> childNodes = taskManager.cancel(cancellableTask, request.reason(), banLock::onTaskFinished);, +                setBanOnNodes(request.reason(), cancellableTask, childNodes, banLock);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequest.java, +    public boolean detailed() {, +    public ListTasksRequest detailed(boolean detailed) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequestBuilder.java, +        request.detailed(detailed);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    public CancelTasksRequest reason(String reason) {, +    public String reason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +        if (request.taskId().isSet() == false) {, +            CancellableTask task = taskManager.getCancellableTask(request.taskId().getId());, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support this operation");, +                if (taskManager.getTask(request.taskId().getId()) != null) {, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support cancellation");, +                    throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.taskId());, +        Set<String> childNodes = taskManager.cancel(cancellableTask, request.reason(), banLock::onTaskFinished);, +                setBanOnNodes(request.reason(), cancellableTask, childNodes, banLock);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequest.java, +    public boolean detailed() {, +    public ListTasksRequest detailed(boolean detailed) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequestBuilder.java, +        request.detailed(detailed);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +import java.util.Collection;, +        return task.taskInfo(clusterService.localNode(), request.detailed());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    public CancelTasksRequest reason(String reason) {, +    public String reason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +        if (request.taskId().isSet() == false) {, +            CancellableTask task = taskManager.getCancellableTask(request.taskId().getId());, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support this operation");, +                if (taskManager.getTask(request.taskId().getId()) != null) {, +                    throw new IllegalArgumentException("task [" + request.taskId() + "] doesn't support cancellation");, +                    throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.taskId());, +        Set<String> childNodes = taskManager.cancel(cancellableTask, request.reason(), banLock::onTaskFinished);, +                setBanOnNodes(request.reason(), cancellableTask, childNodes, banLock);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequest.java, +    public boolean detailed() {, +    public ListTasksRequest detailed(boolean detailed) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequestBuilder.java, +        request.detailed(detailed);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +import java.util.Collection;, +        return task.taskInfo(clusterService.localNode(), request.detailed());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +        IndexService service = indicesService.indexService(shardRouting.getIndexName());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    public CancelTasksRequest reason(String reason) {, +    public String reason() {]