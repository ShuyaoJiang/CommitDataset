[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(, +                new AggregationSpec(RangeAggregationBuilder::new, new RangeParser(), RangeAggregationBuilder.AGGREGATION_NAME_FIELD), +                        .addResultReader(InternalRange::new));, +        registerAggregation(new AggregationSpec(DateRangeAggregationBuilder::new, new DateRangeParser(),, +                DateRangeAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalDateRange::new));, +        registerAggregation(new AggregationSpec(GeoDistanceAggregationBuilder::new, new GeoDistanceParser(),, +                GeoDistanceAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalGeoDistance::new));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(, +                new AggregationSpec(RangeAggregationBuilder::new, new RangeParser(), RangeAggregationBuilder.AGGREGATION_NAME_FIELD), +                        .addResultReader(InternalRange::new));, +        registerAggregation(new AggregationSpec(DateRangeAggregationBuilder::new, new DateRangeParser(),, +                DateRangeAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalDateRange::new));, +        registerAggregation(new AggregationSpec(GeoDistanceAggregationBuilder::new, new GeoDistanceParser(),, +                GeoDistanceAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalGeoDistance::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalRange.java, +            return RangeAggregationBuilder.TYPE;, +    /**, +     * Read from a stream., +     */, +    public InternalRange(StreamInput in) throws IOException {, +        super(in);, +        format = in.readNamedWriteable(DocValueFormat.class);, +        keyed = in.readBoolean();, +        int size = in.readVInt();, +        List<B> ranges = new ArrayList<>(size);, +        for (int i = 0; i < size; i++) {, +            String key = in.readOptionalString();, +            ranges.add(getFactory().createBucket(key, in.readDouble(), in.readDouble(), in.readVLong(),, +                    InternalAggregations.readAggregations(in), keyed, format));, +        }, +        this.ranges = ranges;, +    }, +, +    protected void doWriteTo(StreamOutput out) throws IOException {, +        out.writeNamedWriteable(format);, +        out.writeBoolean(keyed);, +        out.writeVInt(ranges.size());, +        for (B bucket : ranges) {, +            out.writeOptionalString(((Bucket) bucket).key);, +            out.writeDouble(((Bucket) bucket).from);, +            out.writeDouble(((Bucket) bucket).to);, +            out.writeVLong(((Bucket) bucket).docCount);, +            bucket.aggregations.writeTo(out);, +        }, +    }, +, +    @Override, +    public String getWriteableName() {, +        return RangeAggregationBuilder.NAME;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(, +                new AggregationSpec(RangeAggregationBuilder::new, new RangeParser(), RangeAggregationBuilder.AGGREGATION_NAME_FIELD), +                        .addResultReader(InternalRange::new));, +        registerAggregation(new AggregationSpec(DateRangeAggregationBuilder::new, new DateRangeParser(),, +                DateRangeAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalDateRange::new));, +        registerAggregation(new AggregationSpec(GeoDistanceAggregationBuilder::new, new GeoDistanceParser(),, +                GeoDistanceAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalGeoDistance::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalRange.java, +            return RangeAggregationBuilder.TYPE;, +    /**, +     * Read from a stream., +     */, +    public InternalRange(StreamInput in) throws IOException {, +        super(in);, +        format = in.readNamedWriteable(DocValueFormat.class);, +        keyed = in.readBoolean();, +        int size = in.readVInt();, +        List<B> ranges = new ArrayList<>(size);, +        for (int i = 0; i < size; i++) {, +            String key = in.readOptionalString();, +            ranges.add(getFactory().createBucket(key, in.readDouble(), in.readDouble(), in.readVLong(),, +                    InternalAggregations.readAggregations(in), keyed, format));, +        }, +        this.ranges = ranges;, +    }, +, +    protected void doWriteTo(StreamOutput out) throws IOException {, +        out.writeNamedWriteable(format);, +        out.writeBoolean(keyed);, +        out.writeVInt(ranges.size());, +        for (B bucket : ranges) {, +            out.writeOptionalString(((Bucket) bucket).key);, +            out.writeDouble(((Bucket) bucket).from);, +            out.writeDouble(((Bucket) bucket).to);, +            out.writeVLong(((Bucket) bucket).docCount);, +            bucket.aggregations.writeTo(out);, +        }, +    }, +, +    @Override, +    public String getWriteableName() {, +        return RangeAggregationBuilder.NAME;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregationBuilder.java, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;]