[+++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.xcontent.AbstractObjectParser;, +, +    /**, +     * Adds 'boost' and 'query_name' parsing to all query builder parsers passed in, +     */, +    protected static void declareStandardFields(AbstractObjectParser<? extends QueryBuilder, ? extends ParseFieldMatcherSupplier> parser) {, +        parser.declareFloat((builder, value) -> builder.boost(value), AbstractQueryBuilder.BOOST_FIELD);, +        parser.declareString((builder, value) -> builder.queryName(value), AbstractQueryBuilder.NAME_FIELD);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.xcontent.AbstractObjectParser;, +, +    /**, +     * Adds 'boost' and 'query_name' parsing to all query builder parsers passed in, +     */, +    protected static void declareStandardFields(AbstractObjectParser<? extends QueryBuilder, ? extends ParseFieldMatcherSupplier> parser) {, +        parser.declareFloat((builder, value) -> builder.boost(value), AbstractQueryBuilder.BOOST_FIELD);, +        parser.declareString((builder, value) -> builder.queryName(value), AbstractQueryBuilder.NAME_FIELD);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +, +    @SuppressWarnings("unchecked"), +    private static ConstructingObjectParser<IdsQueryBuilder, QueryParseContext> PARSER = new ConstructingObjectParser<>(NAME,, +            a -> new IdsQueryBuilder(((List<String>) a[0]).toArray(new String[0])));, +    static {, +        PARSER.declareStringArray(constructorArg(), IdsQueryBuilder.TYPE_FIELD);, +        PARSER.declareStringArray((builder, values) -> builder.addIds(values.toArray(new String[values.size()])),, +                IdsQueryBuilder.VALUES_FIELD);, +        declareStandardFields(PARSER);, +    public static Optional<IdsQueryBuilder> fromXContent(QueryParseContext context) {, +        try {, +            return Optional.of(PARSER.apply(context.parser(), context));, +        } catch (IllegalArgumentException e) {, +            throw new ParsingException(context.parser().getTokenLocation(), e.getMessage(), e);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.xcontent.AbstractObjectParser;, +, +    /**, +     * Adds 'boost' and 'query_name' parsing to all query builder parsers passed in, +     */, +    protected static void declareStandardFields(AbstractObjectParser<? extends QueryBuilder, ? extends ParseFieldMatcherSupplier> parser) {, +        parser.declareFloat((builder, value) -> builder.boost(value), AbstractQueryBuilder.BOOST_FIELD);, +        parser.declareString((builder, value) -> builder.queryName(value), AbstractQueryBuilder.NAME_FIELD);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +, +    @SuppressWarnings("unchecked"), +    private static ConstructingObjectParser<IdsQueryBuilder, QueryParseContext> PARSER = new ConstructingObjectParser<>(NAME,, +            a -> new IdsQueryBuilder(((List<String>) a[0]).toArray(new String[0])));, +    static {, +        PARSER.declareStringArray(constructorArg(), IdsQueryBuilder.TYPE_FIELD);, +        PARSER.declareStringArray((builder, values) -> builder.addIds(values.toArray(new String[values.size()])),, +                IdsQueryBuilder.VALUES_FIELD);, +        declareStandardFields(PARSER);, +    public static Optional<IdsQueryBuilder> fromXContent(QueryParseContext context) {, +        try {, +            return Optional.of(PARSER.apply(context.parser(), context));, +        } catch (IllegalArgumentException e) {, +            throw new ParsingException(context.parser().getTokenLocation(), e.getMessage(), e);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchAllQueryBuilder.java, +import org.elasticsearch.common.xcontent.ObjectParser;, +    protected void doWriteTo(StreamOutput out) {, +    private static ObjectParser<MatchAllQueryBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME, MatchAllQueryBuilder::new);, +    static {, +        declareStandardFields(PARSER);, +, +    public static Optional<MatchAllQueryBuilder> fromXContent(QueryParseContext context) {, +        try {, +            return Optional.of(PARSER.apply(context.parser(), context));, +        } catch (IllegalArgumentException e) {, +            throw new ParsingException(context.parser().getTokenLocation(), e.getMessage(), e);, +    protected Query doToQuery(QueryShardContext context) {, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.xcontent.AbstractObjectParser;, +, +    /**, +     * Adds 'boost' and 'query_name' parsing to all query builder parsers passed in, +     */, +    protected static void declareStandardFields(AbstractObjectParser<? extends QueryBuilder, ? extends ParseFieldMatcherSupplier> parser) {, +        parser.declareFloat((builder, value) -> builder.boost(value), AbstractQueryBuilder.BOOST_FIELD);, +        parser.declareString((builder, value) -> builder.queryName(value), AbstractQueryBuilder.NAME_FIELD);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +, +    @SuppressWarnings("unchecked"), +    private static ConstructingObjectParser<IdsQueryBuilder, QueryParseContext> PARSER = new ConstructingObjectParser<>(NAME,, +            a -> new IdsQueryBuilder(((List<String>) a[0]).toArray(new String[0])));]