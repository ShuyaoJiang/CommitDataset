[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/FieldExtractor.java, +import org.apache.lucene.index.PrefixCodedTerms.TermIterator;, +import org.apache.lucene.search.TermInSetQuery;, +        } else if (query instanceof TermInSetQuery) {, +            // TermInSetQuery#field is inaccessible, +            TermInSetQuery termInSetQuery = (TermInSetQuery) query;, +            TermIterator termIterator = termInSetQuery.getTermData().iterator();, +            // there should only be one field, +            if (termIterator.next() != null) {, +                fields.add(termIterator.field());, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/FieldExtractor.java, +import org.apache.lucene.index.PrefixCodedTerms.TermIterator;, +import org.apache.lucene.search.TermInSetQuery;, +        } else if (query instanceof TermInSetQuery) {, +            // TermInSetQuery#field is inaccessible, +            TermInSetQuery termInSetQuery = (TermInSetQuery) query;, +            TermIterator termIterator = termInSetQuery.getTermData().iterator();, +            // there should only be one field, +            if (termIterator.next() != null) {, +                fields.add(termIterator.field());, +            }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/authz/accesscontrol/FieldExtractorTests.java, +import org.apache.lucene.search.TermInSetQuery;, +import org.apache.lucene.util.BytesRef;, +    public void testTermInSet() {, +        Set<String> fields = new HashSet<>();, +        FieldExtractor.extractFields(new TermInSetQuery("foo", new BytesRef("baz"), new BytesRef("baz2")), fields);, +        assertEquals(asSet("foo"), fields);, +    }, +]