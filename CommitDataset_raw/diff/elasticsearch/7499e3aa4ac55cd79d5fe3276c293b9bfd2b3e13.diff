[+++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +++ b/docs/plugins/repository-s3.asciidoc, +`client_symmetric_key`::, +    Sets the keys to use to encrypt your snapshots. You can specify either a symmetric key or a public/private key pair., +    No encryption by default. This sets a Base64-encoded AES symmetric-key (128, 192 or 256 bits), +, +`client_public_key`::, +    Sets the a base64-encoded RSA public key, +, +`client_private_key`::, +    Sets the a base64-encoded RSA private key, +, +++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +++ b/docs/plugins/repository-s3.asciidoc, +`client_symmetric_key`::, +    Sets the keys to use to encrypt your snapshots. You can specify either a symmetric key or a public/private key pair., +    No encryption by default. This sets a Base64-encoded AES symmetric-key (128, 192 or 256 bits), +, +`client_public_key`::, +    Sets the a base64-encoded RSA public key, +, +`client_private_key`::, +    Sets the a base64-encoded RSA private key, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +import com.amazonaws.services.s3.model.EncryptionMaterials;, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, EncryptionMaterials clientSideEncryptionMaterials);, +++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +++ b/docs/plugins/repository-s3.asciidoc, +`client_symmetric_key`::, +    Sets the keys to use to encrypt your snapshots. You can specify either a symmetric key or a public/private key pair., +    No encryption by default. This sets a Base64-encoded AES symmetric-key (128, 192 or 256 bits), +, +`client_public_key`::, +    Sets the a base64-encoded RSA public key, +, +`client_private_key`::, +    Sets the a base64-encoded RSA private key, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +import com.amazonaws.services.s3.model.EncryptionMaterials;, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, EncryptionMaterials clientSideEncryptionMaterials);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/InternalAwsS3Service.java, +    private Map<Tuple<String, Tuple<String, EncryptionMaterials>>, AmazonS3Client> clients = new HashMap<>();, +        return client(endpoint, protocol, region, account, key, maxRetries, null);, +    }, +, +    @Override, +    public AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, EncryptionMaterials clientSideEncryptionMaterials) {, +    private synchronized AmazonS3 getClient(String endpoint, Protocol protocol, String account, String key, Integer maxRetries,, +                                            EncryptionMaterials clientSideEncryptionMaterials) {, +        Tuple<String, EncryptionMaterials> tempTuple = new Tuple<>(account, clientSideEncryptionMaterials);, +        Tuple<String, Tuple<String, EncryptionMaterials>> clientDescriptor = new Tuple<>(endpoint, tempTuple);, +++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +++ b/docs/plugins/repository-s3.asciidoc, +`client_symmetric_key`::, +    Sets the keys to use to encrypt your snapshots. You can specify either a symmetric key or a public/private key pair., +    No encryption by default. This sets a Base64-encoded AES symmetric-key (128, 192 or 256 bits), +, +`client_public_key`::, +    Sets the a base64-encoded RSA public key, +, +`client_private_key`::, +    Sets the a base64-encoded RSA private key, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +import com.amazonaws.services.s3.model.EncryptionMaterials;, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, EncryptionMaterials clientSideEncryptionMaterials);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/InternalAwsS3Service.java, +    private Map<Tuple<String, Tuple<String, EncryptionMaterials>>, AmazonS3Client> clients = new HashMap<>();, +        return client(endpoint, protocol, region, account, key, maxRetries, null);, +    }, +, +    @Override, +    public AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, EncryptionMaterials clientSideEncryptionMaterials) {, +    private synchronized AmazonS3 getClient(String endpoint, Protocol protocol, String account, String key, Integer maxRetries,, +                                            EncryptionMaterials clientSideEncryptionMaterials) {, +        Tuple<String, EncryptionMaterials> tempTuple = new Tuple<>(account, clientSideEncryptionMaterials);, +        Tuple<String, Tuple<String, EncryptionMaterials>> clientDescriptor = new Tuple<>(endpoint, tempTuple);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/DefaultS3OutputStream.java, +import com.amazonaws.services.s3.AmazonS3EncryptionClient;, +import com.amazonaws.services.s3.Headers;, +        PutObjectRequest putRequest = new PutObjectRequest(bucketName, blobName, is, md), +        blobStore.client().putObject(putRequest);, +++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +++ b/docs/plugins/repository-s3.asciidoc, +`client_symmetric_key`::, +    Sets the keys to use to encrypt your snapshots. You can specify either a symmetric key or a public/private key pair., +    No encryption by default. This sets a Base64-encoded AES symmetric-key (128, 192 or 256 bits), +, +`client_public_key`::, +    Sets the a base64-encoded RSA public key, +, +`client_private_key`::, +    Sets the a base64-encoded RSA private key, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +import com.amazonaws.services.s3.model.EncryptionMaterials;, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, EncryptionMaterials clientSideEncryptionMaterials);]