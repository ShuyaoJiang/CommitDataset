[+++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.network;, +, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +, +import java.io.IOException;, +import java.net.Inet6Address;, +import java.net.InetAddress;, +import java.net.InterfaceAddress;, +import java.net.NetworkInterface;, +import java.net.SocketException;, +import java.util.List;, +import java.util.Locale;, +, +/** , + * Simple class to log {@code ifconfig}-style output at DEBUG logging., + */, +final class IfConfig {, +, +    private static final ESLogger logger = Loggers.getLogger(IfConfig.class);    , +    private static final String INDENT = "        ";, +    , +    /** log interface configuration at debug level, if its enabled */, +    static void logIfNecessary() {, +        if (logger.isDebugEnabled()) {, +            try {, +                doLogging();, +            } catch (IOException | SecurityException e) {, +                logger.warn("unable to gather network information", e);, +            }, +        }, +    }, +    , +    /** perform actual logging: might throw exception if things go wrong */, +    private static void doLogging() throws IOException {, +        StringBuilder msg = new StringBuilder();, +        for (NetworkInterface nic : NetworkUtils.getInterfaces()) {, +            msg.append(System.lineSeparator());, +, +            // ordinary name, +            msg.append(nic.getName());, +            msg.append(System.lineSeparator());, +            , +            // display name (e.g. on windows), +            if (!nic.getName().equals(nic.getDisplayName())) {, +                msg.append(INDENT);, +                msg.append(nic.getDisplayName());, +                msg.append(System.lineSeparator());, +            }, +            , +            // addresses: v4 first, then v6, +            List<InterfaceAddress> addresses = nic.getInterfaceAddresses();, +            for (InterfaceAddress address : addresses) {, +                if (address.getAddress() instanceof Inet6Address == false) {, +                    msg.append(INDENT);, +                    msg.append(formatAddress(address));, +                    msg.append(System.lineSeparator());, +                }, +            }, +            , +            for (InterfaceAddress address : addresses) {, +                if (address.getAddress() instanceof Inet6Address) {, +                    msg.append(INDENT);, +                    msg.append(formatAddress(address));, +                    msg.append(System.lineSeparator());, +                }, +            }, +            , +            // hardware address, +            byte hardware[] = nic.getHardwareAddress();, +            if (hardware != null) {, +                msg.append(INDENT);, +                msg.append("hardware ");, +                for (int i = 0; i < hardware.length; i++) {, +                    if (i > 0) {, +                        msg.append(":");, +                    }, +                    msg.append(String.format(Locale.ROOT, "%02X", hardware[i]));, +                }, +                msg.append(System.lineSeparator());]