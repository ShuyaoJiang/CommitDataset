[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141),, +        NO_LONGER_PRIMARY_SHARD_EXCEPTION(ShardStateAction.NoLongerPrimaryShardException.class, ShardStateAction.NoLongerPrimaryShardException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141),, +        NO_LONGER_PRIMARY_SHARD_EXCEPTION(ShardStateAction.NoLongerPrimaryShardException.class, ShardStateAction.NoLongerPrimaryShardException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        private final IndexShardReference indexShardReference;, +                                TransportChannel channel, IndexShardReference indexShardReference) {, +                                    indexShardReference.routingEntry(),, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141),, +        NO_LONGER_PRIMARY_SHARD_EXCEPTION(ShardStateAction.NoLongerPrimaryShardException.class, ShardStateAction.NoLongerPrimaryShardException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        private final IndexShardReference indexShardReference;, +                                TransportChannel channel, IndexShardReference indexShardReference) {, +                                    indexShardReference.routingEntry(),, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +        public Throwable getFailure() {, +            assert !isSuccess();, +            return failure;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141),, +        NO_LONGER_PRIMARY_SHARD_EXCEPTION(ShardStateAction.NoLongerPrimaryShardException.class, ShardStateAction.NoLongerPrimaryShardException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        private final IndexShardReference indexShardReference;, +                                TransportChannel channel, IndexShardReference indexShardReference) {, +                                    indexShardReference.routingEntry(),, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +        public Throwable getFailure() {, +            assert !isSuccess();, +            return failure;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.cluster.routing.IndexRoutingTable;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.index.shard.ShardId;, +import java.util.Collections;, +    /**, +     * Send a shard failed request to the master node to update the, +     * cluster state., +     *, +     * @param shardRouting       the shard to fail, +     * @param sourceShardRouting the source shard requesting the failure (must be the shard itself, or the primary shard), +     * @param message            the reason for the failure, +     * @param failure            the underlying cause of the failure, +     * @param listener           callback upon completion of the request, +     */, +    public void shardFailed(final ShardRouting shardRouting, ShardRouting sourceShardRouting, final String message, @Nullable final Throwable failure, Listener listener) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, sourceShardRouting, message, failure);, +            Map<ValidationResult, List<ShardRoutingEntry>> partition =, +                tasks.stream().collect(Collectors.groupingBy(task -> validateTask(currentState, task)));, +            batchResultBuilder.successes(partition.getOrDefault(ValidationResult.SHARD_MISSING, Collections.emptyList()));, +            List<ShardRoutingEntry> tasksToFail = partition.getOrDefault(ValidationResult.VALID, Collections.emptyList());, +            partition, +                .getOrDefault(ValidationResult.SOURCE_INVALID, Collections.emptyList()), +                .forEach(task -> batchResultBuilder.failure(, +                    task,, +                    new NoLongerPrimaryShardException(, +                        task.getShardRouting().shardId(),, +                        "source shard [" + task.sourceShardRouting + "] is neither the local allocation nor the primary allocation"), +                ));, +, +        private enum ValidationResult {, +            VALID,, +            SOURCE_INVALID,, +            SHARD_MISSING, +        }, +, +        private ValidationResult validateTask(ClusterState currentState, ShardRoutingEntry task) {, +, +            // non-local requests, +            if (!task.shardRouting.isSameAllocation(task.sourceShardRouting)) {, +                IndexShardRoutingTable indexShard = currentState.getRoutingTable().shardRoutingTableOrNull(task.shardRouting.shardId());, +                if (indexShard == null) {, +                    return ValidationResult.SOURCE_INVALID;, +                }, +                ShardRouting primaryShard = indexShard.primaryShard();, +                if (primaryShard == null || !primaryShard.isSameAllocation(task.sourceShardRouting)) {, +                    return ValidationResult.SOURCE_INVALID;, +                }, +            }, +, +                        return ValidationResult.VALID;, +            return ValidationResult.SHARD_MISSING;, +    public void shardStarted(final ShardRouting shardRouting, final String message, Listener listener) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, shardRouting, message, null);, +        ShardRouting sourceShardRouting;, +        ShardRoutingEntry(ShardRouting shardRouting, ShardRouting sourceShardRouting, String message, @Nullable Throwable failure) {, +            this.sourceShardRouting = sourceShardRouting;, +            sourceShardRouting = readShardRoutingEntry(in);, +            sourceShardRouting.writeTo(out);]