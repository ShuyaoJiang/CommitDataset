[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Ascii;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.BitLength;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Char;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.CharLength;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.LCase;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.LTrim;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Length;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.RTrim;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Space;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.UCase;, +            // String, +            def(Ascii.class, Ascii::new),, +            def(Char.class, Char::new),, +            def(BitLength.class, BitLength::new),, +            def(CharLength.class, CharLength::new),, +            def(LCase.class, LCase::new),, +            def(Length.class, Length::new),, +            def(LTrim.class, LTrim::new),, +            def(RTrim.class, RTrim::new),, +            def(Space.class, Space::new),, +            def(UCase.class, UCase::new),, +    @SuppressWarnings("overloads"), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Ascii;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.BitLength;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Char;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.CharLength;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.LCase;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.LTrim;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Length;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.RTrim;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Space;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.UCase;, +            // String, +            def(Ascii.class, Ascii::new),, +            def(Char.class, Char::new),, +            def(BitLength.class, BitLength::new),, +            def(CharLength.class, CharLength::new),, +            def(LCase.class, LCase::new),, +            def(Length.class, Length::new),, +            def(LTrim.class, LTrim::new),, +            def(RTrim.class, RTrim::new),, +            def(Space.class, Space::new),, +            def(UCase.class, UCase::new),, +    @SuppressWarnings("overloads"), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Processors.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.StringProcessor;, +        // string, +        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Ascii;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.BitLength;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Char;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.CharLength;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.LCase;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.LTrim;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Length;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.RTrim;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Space;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.UCase;, +            // String, +            def(Ascii.class, Ascii::new),, +            def(Char.class, Char::new),, +            def(BitLength.class, BitLength::new),, +            def(CharLength.class, CharLength::new),, +            def(LCase.class, LCase::new),, +            def(Length.class, Length::new),, +            def(LTrim.class, LTrim::new),, +            def(RTrim.class, RTrim::new),, +            def(Space.class, Space::new),, +            def(UCase.class, UCase::new),, +    @SuppressWarnings("overloads"), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Processors.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.StringProcessor;, +        // string, +        entries.add(new Entry(Processor.class, StringProcessor.NAME, StringProcessor::new));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/ATan2.java, +    protected NodeInfo<ATan2> info() {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Ascii;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.BitLength;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Char;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.CharLength;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.LCase;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.LTrim;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Length;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.RTrim;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.Space;, +import org.elasticsearch.xpack.sql.expression.function.scalar.string.UCase;, +            // String, +            def(Ascii.class, Ascii::new),, +            def(Char.class, Char::new),, +            def(BitLength.class, BitLength::new),, +            def(CharLength.class, CharLength::new),, +            def(LCase.class, LCase::new),, +            def(Length.class, Length::new),, +            def(LTrim.class, LTrim::new),, +            def(RTrim.class, RTrim::new),, +            def(Space.class, Space::new),]