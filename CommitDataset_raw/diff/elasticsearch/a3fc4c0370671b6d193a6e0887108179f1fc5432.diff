[+++ b/core/src/main/java/org/elasticsearch/index/mapper/object/DynamicTemplate.java, +            public boolean matches(String pattern, String value) {, +                return Regex.simpleMatch(pattern, value);, +            }, +            @Override, +            public boolean matches(String pattern, String value) {, +                return value.matches(pattern);, +            }, +            @Override, +, +        /** Whether {@code value} matches {@code regex}. */, +        public abstract boolean matches(String regex, String value);, +        if (pathMatch != null && !matchType.matches(pathMatch, path.pathAsText(name))) {, +        if (match != null && !matchType.matches(match, name)) {, +        if (pathUnmatch != null && matchType.matches(pathUnmatch, path.pathAsText(name))) {, +        if (unmatch != null && matchType.matches(unmatch, name)) {, +            if (!matchType.matches(matchMappingType, dynamicType)) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/DynamicTemplate.java, +            public boolean matches(String pattern, String value) {, +                return Regex.simpleMatch(pattern, value);, +            }, +            @Override, +            public boolean matches(String pattern, String value) {, +                return value.matches(pattern);, +            }, +            @Override, +, +        /** Whether {@code value} matches {@code regex}. */, +        public abstract boolean matches(String regex, String value);, +        if (pathMatch != null && !matchType.matches(pathMatch, path.pathAsText(name))) {, +        if (match != null && !matchType.matches(match, name)) {, +        if (pathUnmatch != null && matchType.matches(pathUnmatch, path.pathAsText(name))) {, +        if (unmatch != null && matchType.matches(unmatch, name)) {, +            if (!matchType.matches(matchMappingType, dynamicType)) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/StringMappingUpgradeTests.java, +                            .field("format", format), +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/DynamicTemplate.java, +            public boolean matches(String pattern, String value) {, +                return Regex.simpleMatch(pattern, value);, +            }, +            @Override, +            public boolean matches(String pattern, String value) {, +                return value.matches(pattern);, +            }, +            @Override, +, +        /** Whether {@code value} matches {@code regex}. */, +        public abstract boolean matches(String regex, String value);, +        if (pathMatch != null && !matchType.matches(pathMatch, path.pathAsText(name))) {, +        if (match != null && !matchType.matches(match, name)) {, +        if (pathUnmatch != null && matchType.matches(pathUnmatch, path.pathAsText(name))) {, +        if (unmatch != null && matchType.matches(unmatch, name)) {, +            if (!matchType.matches(matchMappingType, dynamicType)) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/StringMappingUpgradeTests.java, +                            .field("format", format), +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/cat.aliases/10_basic.yaml, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/DynamicTemplate.java, +            public boolean matches(String pattern, String value) {, +                return Regex.simpleMatch(pattern, value);, +            }, +            @Override, +            public boolean matches(String pattern, String value) {, +                return value.matches(pattern);, +            }, +            @Override, +, +        /** Whether {@code value} matches {@code regex}. */, +        public abstract boolean matches(String regex, String value);, +        if (pathMatch != null && !matchType.matches(pathMatch, path.pathAsText(name))) {, +        if (match != null && !matchType.matches(match, name)) {, +        if (pathUnmatch != null && matchType.matches(pathUnmatch, path.pathAsText(name))) {, +        if (unmatch != null && matchType.matches(unmatch, name)) {, +            if (!matchType.matches(matchMappingType, dynamicType)) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/StringMappingUpgradeTests.java, +                            .field("format", format), +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/cat.aliases/10_basic.yaml, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/cat.aliases/30_yaml.yaml, +---, +"Simple alias with yaml body through format argument":, +, +  - skip:, +      features: yaml, +, +  - do:, +        indices.create:, +            index: test, +, +  - do:, +        indices.put_alias:, +            index: test, +            name:  test_alias, +, +  - do:, +      cat.aliases:, +        format: yaml, +, +  - match:, +      $body: |, +        /^---\n, +          -\s+alias:\s+"test_alias"\s+]