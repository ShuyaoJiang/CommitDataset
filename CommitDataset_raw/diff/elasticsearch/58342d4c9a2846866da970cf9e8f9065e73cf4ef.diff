[+++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalSpec.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +    public RankEvalSpec(Collection<RatedRequest> ratedRequests, RankedListQualityMetric metric, Script template) {, +        if (ratedRequests == null || ratedRequests.size() < 1) {, +            throw new IllegalStateException(, +                    "Cannot evaluate ranking if no search requests with rated results are provided. Seen: " + ratedRequests);, +        }, +        if (metric == null) {, +            throw new IllegalStateException(, +                    "Cannot evaluate ranking if no evaluation metric is provided.");, +        }, +        if (template == null) {, +            for (RatedRequest request : ratedRequests) {, +                if (request.getTestRequest() == null) {, +                    throw new IllegalStateException(, +                            "Cannot evaluate ranking if neither template nor test request is provided. Seen for request id: ", +                    + request.getId());, +                }, +            }, +        }, +        this.ratedRequests = ratedRequests;, +        this.metric = metric;, +        this.template = template;, +    public RankEvalSpec(Collection<RatedRequest> ratedRequests, RankedListQualityMetric metric) {, +        this(ratedRequests, metric, null);, +    public Collection<RatedRequest> getRatedRequests() {, +    @SuppressWarnings("unchecked"), +    private static final ConstructingObjectParser<RankEvalSpec, RankEvalContext> PARSER =, +            new ConstructingObjectParser<>("rank_eval",, +            a -> new RankEvalSpec((Collection<RatedRequest>) a[0], (RankedListQualityMetric) a[1], (Script) a[2]));, +        PARSER.declareObjectArray(ConstructingObjectParser.constructorArg(), (p, c) -> {, +        PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> {, +            try {, +                return RankedListQualityMetric.fromXContent(p, c);, +            } catch (IOException ex) {, +                throw new ParsingException(p.getTokenLocation(), "error parsing rank request", ex);, +            }, +        } , METRIC_FIELD);, +        PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), (p, c) -> {, +            try {, +                return Script.parse(p, c.getParseFieldMatcher(), "mustache");, +            } catch (IOException ex) {, +                throw new ParsingException(p.getTokenLocation(), "error parsing rank request", ex);, +            }, +        }, TEMPLATE_FIELD);, +    public static RankEvalSpec parse(XContentParser parser, RankEvalContext context) throws IOException {, +        return PARSER.apply(parser, context);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalSpec.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +    public RankEvalSpec(Collection<RatedRequest> ratedRequests, RankedListQualityMetric metric, Script template) {, +        if (ratedRequests == null || ratedRequests.size() < 1) {, +            throw new IllegalStateException(, +                    "Cannot evaluate ranking if no search requests with rated results are provided. Seen: " + ratedRequests);, +        }, +        if (metric == null) {, +            throw new IllegalStateException(, +                    "Cannot evaluate ranking if no evaluation metric is provided.");, +        }, +        if (template == null) {, +            for (RatedRequest request : ratedRequests) {, +                if (request.getTestRequest() == null) {, +                    throw new IllegalStateException(, +                            "Cannot evaluate ranking if neither template nor test request is provided. Seen for request id: ", +                    + request.getId());, +                }, +            }, +        }, +        this.ratedRequests = ratedRequests;, +        this.metric = metric;, +        this.template = template;, +    public RankEvalSpec(Collection<RatedRequest> ratedRequests, RankedListQualityMetric metric) {, +        this(ratedRequests, metric, null);, +    public Collection<RatedRequest> getRatedRequests() {, +    @SuppressWarnings("unchecked"), +    private static final ConstructingObjectParser<RankEvalSpec, RankEvalContext> PARSER =, +            new ConstructingObjectParser<>("rank_eval",, +            a -> new RankEvalSpec((Collection<RatedRequest>) a[0], (RankedListQualityMetric) a[1], (Script) a[2]));, +        PARSER.declareObjectArray(ConstructingObjectParser.constructorArg(), (p, c) -> {, +        PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> {, +            try {, +                return RankedListQualityMetric.fromXContent(p, c);, +            } catch (IOException ex) {, +                throw new ParsingException(p.getTokenLocation(), "error parsing rank request", ex);, +            }, +        } , METRIC_FIELD);, +        PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), (p, c) -> {, +            try {, +                return Script.parse(p, c.getParseFieldMatcher(), "mustache");, +            } catch (IOException ex) {, +                throw new ParsingException(p.getTokenLocation(), "error parsing rank request", ex);, +            }, +        }, TEMPLATE_FIELD);, +    public static RankEvalSpec parse(XContentParser parser, RankEvalContext context) throws IOException {, +        return PARSER.apply(parser, context);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedRequest.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +    private String id;, +    /** Search request to execute for this rated request, can be null, if template and corresponding params are supplied. */, +    @Nullable]