[+++ b/elasticsearch/license/licensor/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +import org.apache.commons.cli.CommandLine;, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.cli.CliTool;, +import org.elasticsearch.common.cli.CliToolConfig;, +import org.elasticsearch.common.cli.Terminal;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +, +import java.io.IOException;, +import java.security.NoSuchAlgorithmException;, +import static org.elasticsearch.common.cli.CliToolConfig.Builder.cmd;, +import static org.elasticsearch.common.cli.CliToolConfig.Builder.option;, +import static org.elasticsearch.common.cli.CliToolConfig.config;, +public class KeyPairGeneratorTool extends CliTool {, +    public static final String NAME = "key-pair-generator";, +    private static final CliToolConfig CONFIG = config("licensor", KeyPairGeneratorTool.class), +            .cmds(KeyGenerator.CMD), +            .build();, +        super(CONFIG);, +    protected Command parse(String s, CommandLine commandLine) throws Exception {, +        return KeyGenerator.parse(terminal, commandLine, env);, +    public static class KeyGenerator extends Command {, +, +        private static final CliToolConfig.Cmd CMD = cmd(NAME, KeyGenerator.class), +                .options(, +                        option("pub", "publicKeyPath").required(true).hasArg(true),, +                        option("pri", "privateKeyPath").required(true).hasArg(true), +                ).build();, +, +        public final Path publicKeyPath;, +        public final Path privateKeyPath;, +, +        protected KeyGenerator(Terminal terminal, Path publicKeyPath, Path privateKeyPath) {, +            super(terminal);, +            this.privateKeyPath = privateKeyPath;, +            this.publicKeyPath = publicKeyPath;, +        public static Command parse(Terminal terminal, CommandLine commandLine, Environment environment) {, +            Path publicKeyPath = environment.binFile().getParent().resolve(commandLine.getOptionValue("publicKeyPath"));, +            Path privateKeyPath = environment.binFile().getParent().resolve(commandLine.getOptionValue("privateKeyPath"));, +, +                return exitCmd(ExitStatus.USAGE, terminal, privateKeyPath + " already exists");, +                return exitCmd(ExitStatus.USAGE, terminal, publicKeyPath + " already exists");, +            }, +            return new KeyGenerator(terminal, publicKeyPath, privateKeyPath);, +        @Override, +        public ExitStatus execute(Settings settings, Environment env) throws Exception {, +            KeyPair keyPair = generateKeyPair(privateKeyPath, publicKeyPath);, +            terminal.println(Terminal.Verbosity.VERBOSE, "generating key pair [public key: " + publicKeyPath + ", private key: ", +                    + privateKeyPath + "]");, +            return (keyPair != null) ? ExitStatus.OK : ExitStatus.CANT_CREATE;, +        }, +, +        private static KeyPair generateKeyPair(Path privateKeyPath, Path publicKeyPath) throws IOException, NoSuchAlgorithmException {, +, +            saveKeyPairToFiles(keyPair, privateKeyPath, publicKeyPath);, +            return keyPair;, +        }, +    }, +, +    private static void saveKeyPairToFiles(KeyPair keyPair, Path privateKeyPath, Path publicKeyPath) throws IOException {, +    }, +    public static void main(String[] args) throws Exception {, +        ExitStatus exitStatus = new KeyPairGeneratorTool().execute(args);, +        exit(exitStatus.status());, +    }, +, +    @SuppressForbidden(reason = "Allowed to exit explicitly from #main()"), +    private static void exit(int status) {, +        System.exit(status);, +++ b/elasticsearch/license/licensor/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +import org.apache.commons.cli.CommandLine;, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.cli.CliTool;, +import org.elasticsearch.common.cli.CliToolConfig;, +import org.elasticsearch.common.cli.Terminal;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +, +import java.io.IOException;, +import java.security.NoSuchAlgorithmException;, +import static org.elasticsearch.common.cli.CliToolConfig.Builder.cmd;, +import static org.elasticsearch.common.cli.CliToolConfig.Builder.option;, +import static org.elasticsearch.common.cli.CliToolConfig.config;, +public class KeyPairGeneratorTool extends CliTool {, +    public static final String NAME = "key-pair-generator";, +    private static final CliToolConfig CONFIG = config("licensor", KeyPairGeneratorTool.class), +            .cmds(KeyGenerator.CMD), +            .build();, +        super(CONFIG);, +    protected Command parse(String s, CommandLine commandLine) throws Exception {, +        return KeyGenerator.parse(terminal, commandLine, env);, +    public static class KeyGenerator extends Command {, +, +        private static final CliToolConfig.Cmd CMD = cmd(NAME, KeyGenerator.class), +                .options(, +                        option("pub", "publicKeyPath").required(true).hasArg(true),, +                        option("pri", "privateKeyPath").required(true).hasArg(true), +                ).build();, +]