[+++ b/config/elasticsearch.yml, +# a full cluster restart (to reuse as much local data as possible when using shared, +# gateway)., +# are up (and recover_after_nodes is met), begin recovery process immediately, +# (without waiting for recover_after_time to expire):, +# for large clusters (>3 nodes):, +++ b/config/elasticsearch.yml, +# a full cluster restart (to reuse as much local data as possible when using shared, +# gateway)., +# are up (and recover_after_nodes is met), begin recovery process immediately, +# (without waiting for recover_after_time to expire):, +# for large clusters (>3 nodes):, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                        mdBuilder.put(indexMetaData, false);, +++ b/config/elasticsearch.yml, +# a full cluster restart (to reuse as much local data as possible when using shared, +# gateway)., +# are up (and recover_after_nodes is met), begin recovery process immediately, +# (without waiting for recover_after_time to expire):, +# for large clusters (>3 nodes):, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                        mdBuilder.put(indexMetaData, false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    private final long version;, +    private IndexMetaData(String index, long version, State state, Settings settings, ImmutableMap<String, MappingMetaData> mappings, ImmutableMap<String, AliasMetaData> aliases) {, +        this.version = version;, +    public long version() {, +        return this.version;, +    }, +, +    public long getVersion() {, +        return this.version;, +    }, +, +        private long version = 1;, +, +            this.version = indexMetaData.version;, +        public long version() {, +            return this.version;, +        }, +, +        public Builder version(long version) {, +            this.version = version;, +            return this;, +        }, +, +            return new IndexMetaData(index, version, state, tmpSettings, mappings.immutableMap(), tmpAliases.immutableMap());, +            builder.field("version", indexMetaData.version());, +            if (parser.currentToken() == XContentParser.Token.START_OBJECT) {, +                parser.nextToken();, +            }, +                    } else if ("version".equals(currentFieldName)) {, +                        builder.version(parser.longValue());, +            builder.version(in.readLong());, +            out.writeLong(indexMetaData.version());, +++ b/config/elasticsearch.yml, +# a full cluster restart (to reuse as much local data as possible when using shared, +# gateway)., +# are up (and recover_after_nodes is met), begin recovery process immediately, +# (without waiting for recover_after_time to expire):, +# for large clusters (>3 nodes):, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                        mdBuilder.put(indexMetaData, false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    private final long version;, +    private IndexMetaData(String index, long version, State state, Settings settings, ImmutableMap<String, MappingMetaData> mappings, ImmutableMap<String, AliasMetaData> aliases) {, +        this.version = version;, +    public long version() {, +        return this.version;, +    }, +, +    public long getVersion() {, +        return this.version;, +    }, +, +        private long version = 1;, +, +            this.version = indexMetaData.version;, +        public long version() {, +            return this.version;, +        }, +, +        public Builder version(long version) {, +            this.version = version;, +            return this;, +        }, +, +            return new IndexMetaData(index, version, state, tmpSettings, mappings.immutableMap(), tmpAliases.immutableMap());, +            builder.field("version", indexMetaData.version());, +            if (parser.currentToken() == XContentParser.Token.START_OBJECT) {, +                parser.nextToken();, +            }, +                    } else if ("version".equals(currentFieldName)) {, +                        builder.version(parser.longValue());, +            builder.version(in.readLong());, +            out.writeLong(indexMetaData.version());, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;]