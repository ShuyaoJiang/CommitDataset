[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/network/NetworkService.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.timer.TimerService;, +    private final TimerService timerService;, +, +    private final TimeValue refreshInterval;, +, +    private NetworkStats cachedStats;, +, +    @Inject public NetworkService(Settings settings, NetworkProbe probe, TimerService timerService) {, +        this.timerService = timerService;, +, +        this.refreshInterval = componentSettings.getAsTime("refresh_interval", TimeValue.timeValueSeconds(5));, +, +        logger.debug("Using probe [{}] with refresh_interval [{}]", probe, refreshInterval);, +        this.cachedStats = probe.networkStats();, +    public synchronized NetworkStats stats() {, +        if ((timerService.estimatedTimeInMillis() - cachedStats.timestamp()) > refreshInterval.millis()) {, +            cachedStats = probe.networkStats();, +        }, +        return cachedStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/network/NetworkService.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.timer.TimerService;, +    private final TimerService timerService;, +, +    private final TimeValue refreshInterval;, +, +    private NetworkStats cachedStats;, +, +    @Inject public NetworkService(Settings settings, NetworkProbe probe, TimerService timerService) {, +        this.timerService = timerService;, +, +        this.refreshInterval = componentSettings.getAsTime("refresh_interval", TimeValue.timeValueSeconds(5));, +, +        logger.debug("Using probe [{}] with refresh_interval [{}]", probe, refreshInterval);, +        this.cachedStats = probe.networkStats();, +    public synchronized NetworkStats stats() {, +        if ((timerService.estimatedTimeInMillis() - cachedStats.timestamp()) > refreshInterval.millis()) {, +            cachedStats = probe.networkStats();, +        }, +        return cachedStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/os/OsService.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.timer.TimerService;, +    private final TimerService timerService;, +, +    private final TimeValue refreshInterval;, +, +    private OsStats cachedStats;, +, +    @Inject public OsService(Settings settings, OsProbe probe, TimerService timerService) {, +        this.timerService = timerService;, +        this.refreshInterval = componentSettings.getAsTime("refresh_interval", TimeValue.timeValueSeconds(5));, +        this.cachedStats = probe.osStats();, +, +        logger.debug("Using probe [{}] with refresh_interval [{}]", probe, refreshInterval);, +    public synchronized OsStats stats() {, +        if ((timerService.estimatedTimeInMillis() - cachedStats.timestamp()) > refreshInterval.millis()) {, +            cachedStats = probe.osStats();, +        }, +        return cachedStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/network/NetworkService.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.timer.TimerService;, +    private final TimerService timerService;, +, +    private final TimeValue refreshInterval;, +, +    private NetworkStats cachedStats;, +, +    @Inject public NetworkService(Settings settings, NetworkProbe probe, TimerService timerService) {, +        this.timerService = timerService;, +, +        this.refreshInterval = componentSettings.getAsTime("refresh_interval", TimeValue.timeValueSeconds(5));, +, +        logger.debug("Using probe [{}] with refresh_interval [{}]", probe, refreshInterval);, +        this.cachedStats = probe.networkStats();, +    public synchronized NetworkStats stats() {, +        if ((timerService.estimatedTimeInMillis() - cachedStats.timestamp()) > refreshInterval.millis()) {, +            cachedStats = probe.networkStats();, +        }, +        return cachedStats;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/os/OsService.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.timer.TimerService;, +    private final TimerService timerService;, +, +    private final TimeValue refreshInterval;, +, +    private OsStats cachedStats;, +, +    @Inject public OsService(Settings settings, OsProbe probe, TimerService timerService) {, +        this.timerService = timerService;, +        this.refreshInterval = componentSettings.getAsTime("refresh_interval", TimeValue.timeValueSeconds(5));, +        this.cachedStats = probe.osStats();, +, +        logger.debug("Using probe [{}] with refresh_interval [{}]", probe, refreshInterval);, +    public synchronized OsStats stats() {, +        if ((timerService.estimatedTimeInMillis() - cachedStats.timestamp()) > refreshInterval.millis()) {]