[+++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +        public static final String IGNORE_MALFORMED = "ignore_malformed";, +        public static final String COERCE = "coerce";, +, +        public static final boolean IGNORE_MALFORMED = false;, +        public static final boolean COERCE = false;, +            final boolean indexCreatedBeforeV2_0 = parserContext.indexVersionCreated().before(Version.V_2_0_0);, +                } else if (fieldName.equals(Names.IGNORE_MALFORMED)) {, +                    if (builder.fieldType().coerce == false) {, +                        builder.fieldType().ignoreMalformed = XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("validate")) {, +                    if (builder.fieldType().ignoreMalformed == false) {, +                        builder.fieldType().ignoreMalformed = !XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("validate_lon")) {, +                    if (builder.fieldType().ignoreMalformed() == false) {, +                        builder.fieldType().ignoreMalformed = !XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("validate_lat")) {, +                    if (builder.fieldType().ignoreMalformed == false) {, +                        builder.fieldType().ignoreMalformed = !XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +                } else if (fieldName.equals(Names.COERCE)) {, +                    builder.fieldType().coerce = XContentMapValues.nodeBooleanValue(fieldNode);, +                    if (builder.fieldType().coerce == true) {, +                        builder.fieldType().ignoreMalformed = true;, +                    }, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("normalize")) {, +                    builder.fieldType().coerce = XContentMapValues.nodeBooleanValue(fieldNode);, +                    iterator.remove();, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("normalize_lat")) {, +                    builder.fieldType().coerce = XContentMapValues.nodeBooleanValue(fieldNode);, +                    iterator.remove();, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("normalize_lon")) {, +                    if (builder.fieldType().coerce == false) {, +                        builder.fieldType().coerce = XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +        private boolean ignoreMalformed = false;, +        private boolean coerce = false;, +            this.coerce = ref.coerce;, +            this.ignoreMalformed = ref.ignoreMalformed;, +                coerce == that.coerce &&, +                ignoreMalformed == that.ignoreMalformed &&, +            return java.util.Objects.hash(super.hashCode(), geohashFieldType, geohashPrecision, geohashPrefixEnabled, latFieldType,, +                    lonFieldType, coerce, ignoreMalformed);, +            if (isLatLonEnabled() && other.isLatLonEnabled() &&, +        public boolean coerce() {, +            return this.coerce;, +        public void setCoerce(boolean coerce) {, +            this.coerce = coerce;, +        public boolean ignoreMalformed() {, +            return this.ignoreMalformed;, +        public void setIgnoreMalformed(boolean ignoreMalformed) {, +            this.ignoreMalformed = ignoreMalformed;, +            ContentPath.Type pathType, DoubleFieldMapper latMapper, DoubleFieldMapper lonMapper, StringFieldMapper geohashMapper,, +            MultiFields multiFields) {, +        if (fieldType().ignoreMalformed == false) {, +        if (fieldType().coerce) {, +            // by setting coerce to false we are assuming all geopoints are already in a valid coordinate system, +            // thus this extra step can be skipped, +            // LUCENE WATCH: This will be folded back into Lucene's GeoPointField, +            GeoUtils.normalizePoint(point, true, true);, +        }, +, +        if (includeDefaults || fieldType().coerce != Defaults.COERCE) {, +            builder.field(Names.COERCE, fieldType().coerce);, +        if (includeDefaults || fieldType().ignoreMalformed != Defaults.IGNORE_MALFORMED) {, +            builder.field(Names.IGNORE_MALFORMED, fieldType().ignoreMalformed);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +        public static final String IGNORE_MALFORMED = "ignore_malformed";, +        public static final String COERCE = "coerce";, +, +        public static final boolean IGNORE_MALFORMED = false;, +        public static final boolean COERCE = false;, +            final boolean indexCreatedBeforeV2_0 = parserContext.indexVersionCreated().before(Version.V_2_0_0);, +                } else if (fieldName.equals(Names.IGNORE_MALFORMED)) {, +                    if (builder.fieldType().coerce == false) {, +                        builder.fieldType().ignoreMalformed = XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("validate")) {, +                    if (builder.fieldType().ignoreMalformed == false) {, +                        builder.fieldType().ignoreMalformed = !XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("validate_lon")) {, +                    if (builder.fieldType().ignoreMalformed() == false) {, +                        builder.fieldType().ignoreMalformed = !XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("validate_lat")) {, +                    if (builder.fieldType().ignoreMalformed == false) {, +                        builder.fieldType().ignoreMalformed = !XContentMapValues.nodeBooleanValue(fieldNode);, +                    }, +                } else if (fieldName.equals(Names.COERCE)) {, +                    builder.fieldType().coerce = XContentMapValues.nodeBooleanValue(fieldNode);, +                    if (builder.fieldType().coerce == true) {, +                        builder.fieldType().ignoreMalformed = true;, +                    }, +                } else if (indexCreatedBeforeV2_0 && fieldName.equals("normalize")) {, +                    builder.fieldType().coerce = XContentMapValues.nodeBooleanValue(fieldNode);, +                    iterator.remove();]