[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    public PluginInfo(String name, String description, String version, String classname) {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    public PluginInfo(String name, String description, String version, String classname) {, +++ b/core/src/test/java/org/elasticsearch/monitor/jvm/JvmInfoTests.java, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    public PluginInfo(String name, String description, String version, String classname) {, +++ b/core/src/test/java/org/elasticsearch/monitor/jvm/JvmInfoTests.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    public PluginInfo(String name, String description, String version, String classname) {, +++ b/core/src/test/java/org/elasticsearch/monitor/jvm/JvmInfoTests.java, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/nodesinfo/NodeInfoStreamingTests.java, +import org.elasticsearch.ingest.ProcessorInfo;, +import org.elasticsearch.plugins.PluginInfo;, +        try (BytesStreamOutput out = new BytesStreamOutput()) {, +            try (StreamInput in = out.bytes().streamInput()) {, +            }, +        }, +        int availableProcessors = randomIntBetween(1, 64);, +        int allocatedProcessors = randomIntBetween(1, availableProcessors);, +        long refreshInterval = randomBoolean() ? -1 : randomPositiveLong();, +        String name = randomAsciiOfLengthBetween(3, 10);, +        String arch = randomAsciiOfLengthBetween(3, 10);, +        String version = randomAsciiOfLengthBetween(3, 10);, +        OsInfo osInfo = new OsInfo(refreshInterval, availableProcessors, allocatedProcessors, name, arch, version);, +        int numThreadPools = randomIntBetween(1, 10);, +        List<ThreadPool.Info> threadPoolInfos = new ArrayList<>(numThreadPools);, +        for (int i = 0; i < numThreadPools; i++) {, +            threadPoolInfos.add(new ThreadPool.Info(randomAsciiOfLengthBetween(3, 10),, +                    randomFrom(ThreadPool.ThreadPoolType.values()), randomInt()));, +        }, +        HttpInfo httpInfo = new HttpInfo(dummyBoundTransportAddress, randomLong());, +        int numPlugins = randomIntBetween(0, 5);, +        List<PluginInfo> plugins = new ArrayList<>();, +        for (int i = 0; i < numPlugins; i++) {, +            plugins.add(new PluginInfo(randomAsciiOfLengthBetween(3, 10), randomAsciiOfLengthBetween(3, 10),, +                    randomAsciiOfLengthBetween(3, 10), randomAsciiOfLengthBetween(3, 10)));, +        }, +        int numModules = randomIntBetween(0, 5);, +        List<PluginInfo> modules = new ArrayList<>();, +        for (int i = 0; i < numModules; i++) {, +            modules.add(new PluginInfo(randomAsciiOfLengthBetween(3, 10), randomAsciiOfLengthBetween(3, 10),, +                    randomAsciiOfLengthBetween(3, 10), randomAsciiOfLengthBetween(3, 10)));, +        }, +        PluginsAndModules pluginsAndModules = new PluginsAndModules(plugins, modules);, +        int numProcessors = randomIntBetween(0, 5);, +        List<ProcessorInfo> processors = new ArrayList<>(numProcessors);, +        for (int i = 0; i < numProcessors; i++) {, +            processors.add(new ProcessorInfo(randomAsciiOfLengthBetween(3, 10)));, +        }, +        IngestInfo ingestInfo = new IngestInfo(processors);, +            threadPoolInfo, transport, httpInfo, pluginsAndModules, ingestInfo, indexingBuffer);]