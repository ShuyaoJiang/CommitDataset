[+++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.HttpHost;, +import org.apache.http.client.config.RequestConfig;, +import org.apache.http.impl.client.HttpClientBuilder;, +import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;, +    private RestClient(CloseableHttpClient client, ConnectionPool connectionPool, long maxRetryTimeout) {, +, +    /**, +     * Returns a new {@link Builder} to help with {@link RestClient} creation., +     */, +    public static Builder builder() {, +        return new Builder();, +    }, +, +    /**, +     * Rest client builder. Helps creating a new {@link RestClient}., +     */, +    public static final class Builder {, +        private static final int DEFAULT_MAX_RETRY_TIMEOUT = 10000;, +, +        private ConnectionPool connectionPool;, +        private CloseableHttpClient httpClient;, +        private int maxRetryTimeout = DEFAULT_MAX_RETRY_TIMEOUT;, +        private HttpHost[] hosts;, +, +        private Builder() {, +, +        }, +, +        /**, +         * Sets the connection pool. {@link StaticConnectionPool} will be used if not specified., +         * @see ConnectionPool, +         */, +        public Builder setConnectionPool(ConnectionPool connectionPool) {, +            this.connectionPool = connectionPool;, +            return this;, +        }, +, +        /**, +         * Sets the http client. A new default one will be created if not specified, by calling {@link #createDefaultHttpClient()}., +         * @see CloseableHttpClient, +         */, +        public Builder setHttpClient(CloseableHttpClient httpClient) {, +            this.httpClient = httpClient;, +            return this;, +        }, +, +        /**, +         * Sets the maximum timeout to honour in case of multiple retries of the same request., +         * {@link #DEFAULT_MAX_RETRY_TIMEOUT} if not specified., +         * @throws IllegalArgumentException if maxRetryTimeout is not greater than 0, +         */, +        public Builder setMaxRetryTimeout(int maxRetryTimeout) {, +            if (maxRetryTimeout <= 0) {, +                throw new IllegalArgumentException("maxRetryTimeout must be greater than 0");, +            }, +            this.maxRetryTimeout = maxRetryTimeout;, +            return this;, +        }, +, +        /**, +         * Sets the hosts that the client will send requests to. Mandatory if no connection pool is specified,, +         * as the provided hosts will be used to create the default static connection pool., +         */, +        public Builder setHosts(HttpHost... hosts) {, +            if (hosts == null || hosts.length == 0) {, +                throw new IllegalArgumentException("no hosts provided");, +            }, +            this.hosts = hosts;, +            return this;, +        }, +, +        /**, +         * Creates a new {@link RestClient} based on the provided configuration., +         */, +        public RestClient build() {, +            if (httpClient == null) {, +                httpClient = createDefaultHttpClient();, +            }, +            if (connectionPool == null) {, +                connectionPool = new StaticConnectionPool(hosts);, +            }, +            return new RestClient(httpClient, connectionPool, maxRetryTimeout);, +        }, +, +        /**, +         * Creates an http client with default settings, +         *, +         * @see CloseableHttpClient, +         */, +        public static CloseableHttpClient createDefaultHttpClient() {, +            PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();, +            //default settings may be too constraining, +            connectionManager.setDefaultMaxPerRoute(10);, +            connectionManager.setMaxTotal(30);, +, +            //default timeouts are all infinite, +            RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(500).setSocketTimeout(10000), +                    .setConnectionRequestTimeout(500).build();, +]