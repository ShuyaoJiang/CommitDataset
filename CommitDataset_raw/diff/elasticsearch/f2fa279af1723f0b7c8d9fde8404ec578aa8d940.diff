[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                builder.routingTable(routingTableBuilder);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                builder.routingTable(routingTableBuilder);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/GetFieldMappingsResponse.java, +import com.google.common.collect.ImmutableMap;, +, +    private Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappings = ImmutableMap.of();, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                builder.routingTable(routingTableBuilder);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/GetFieldMappingsResponse.java, +import com.google.common.collect.ImmutableMap;, +, +    private Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappings = ImmutableMap.of();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsAction.java, +import org.elasticsearch.common.collect.MapBuilder;, +        MapBuilder<String, Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>>> mergedResponses = MapBuilder.newMapBuilder();, +        return new GetFieldMappingsResponse(mergedResponses.immutableMap());, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    public NodeInfo(Version version, Build build, DiscoveryNode node, @Nullable ImmutableMap<String, String> serviceAttributes, @Nullable Settings settings,, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                builder.routingTable(routingTableBuilder);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/GetFieldMappingsResponse.java, +import com.google.common.collect.ImmutableMap;, +, +    private Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappings = ImmutableMap.of();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsAction.java, +import org.elasticsearch.common.collect.MapBuilder;, +        MapBuilder<String, Map<String, Map<String, GetFieldMappingsResponse.FieldMappingMetaData>>> mergedResponses = MapBuilder.newMapBuilder();, +        return new GetFieldMappingsResponse(mergedResponses.immutableMap());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import com.google.common.collect.ImmutableMap;, +]