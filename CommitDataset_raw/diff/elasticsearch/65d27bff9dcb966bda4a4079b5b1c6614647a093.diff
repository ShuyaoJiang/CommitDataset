[+++ b/src/test/java/org/elasticsearch/action/bench/BenchmarkIntegrationTest.java, +        final ActionFuture<BenchmarkResponse> future = client().bench(request);, +        client().prepareAbortBench(BENCHMARK_NAME).get();, +        // Confirm that there are no active benchmarks in the cluster, +        assertThat(client().prepareBenchStatus().execute().actionGet().totalActiveBenchmarks(), equalTo(0));, +, +        // Confirm that benchmark was indeed aborted, +        assertThat(future.get().state(), isOneOf(BenchmarkResponse.State.ABORTED, BenchmarkResponse.State.COMPLETE));, +        assertThat(benchmarkResponse.get().state(),isOneOf(BenchmarkResponse.State.ABORTED, BenchmarkResponse.State.COMPLETE));, +++ b/src/test/java/org/elasticsearch/action/bench/BenchmarkIntegrationTest.java, +        final ActionFuture<BenchmarkResponse> future = client().bench(request);, +        client().prepareAbortBench(BENCHMARK_NAME).get();, +        // Confirm that there are no active benchmarks in the cluster, +        assertThat(client().prepareBenchStatus().execute().actionGet().totalActiveBenchmarks(), equalTo(0));, +, +        // Confirm that benchmark was indeed aborted, +        assertThat(future.get().state(), isOneOf(BenchmarkResponse.State.ABORTED, BenchmarkResponse.State.COMPLETE));, +        assertThat(benchmarkResponse.get().state(),isOneOf(BenchmarkResponse.State.ABORTED, BenchmarkResponse.State.COMPLETE));, +++ b/src/test/java/org/elasticsearch/action/bench/BenchmarkTestUtil.java, +    public static final int MIN_LARGE_INTERVAL = 1;, +++ b/src/test/java/org/elasticsearch/action/bench/BenchmarkIntegrationTest.java, +        final ActionFuture<BenchmarkResponse> future = client().bench(request);, +        client().prepareAbortBench(BENCHMARK_NAME).get();, +        // Confirm that there are no active benchmarks in the cluster, +        assertThat(client().prepareBenchStatus().execute().actionGet().totalActiveBenchmarks(), equalTo(0));, +, +        // Confirm that benchmark was indeed aborted, +        assertThat(future.get().state(), isOneOf(BenchmarkResponse.State.ABORTED, BenchmarkResponse.State.COMPLETE));, +        assertThat(benchmarkResponse.get().state(),isOneOf(BenchmarkResponse.State.ABORTED, BenchmarkResponse.State.COMPLETE));, +++ b/src/test/java/org/elasticsearch/action/bench/BenchmarkTestUtil.java, +    public static final int MIN_LARGE_INTERVAL = 1;, +++ b/src/test/java/org/elasticsearch/test/ImmutableTestCluster.java, +import org.elasticsearch.action.bench.BenchmarkNodeMissingException;, +import org.elasticsearch.action.bench.BenchmarkStatusResponse;, +import static org.hamcrest.Matchers.empty;, +import static org.hamcrest.Matchers.is;, +        try {, +            final BenchmarkStatusResponse statusResponse = client().prepareBenchStatus().execute().actionGet();, +            assertThat(statusResponse.benchmarkResponses(), is(empty()));, +        } catch (BenchmarkNodeMissingException ex) {, +            // that's fine, +        }]