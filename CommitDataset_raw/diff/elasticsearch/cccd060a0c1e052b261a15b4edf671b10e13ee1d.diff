[+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                if (latestDiscoNodes.masterNode() == null) {, +                    logger.debug("no master node is set, despite of join request completing. retrying pings");, +                    retry = true;, +                    continue;, +                }, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                if (latestDiscoNodes.masterNode() == null) {, +                    logger.debug("no master node is set, despite of join request completing. retrying pings");, +                    retry = true;, +                    continue;, +                }, +, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithNetworkFailuresTests.java, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.transport.*;, +import java.io.IOException;, +        return startCluster(numberOfNodes, -1);, +    }, +, +    private List<String> startCluster(int numberOfNodes, int minimumMasterNode) throws ExecutionException, InterruptedException {, +            return startMulticastCluster(numberOfNodes, minimumMasterNode);, +            return startUnicastCluster(numberOfNodes, null, minimumMasterNode);, +, +    /** Test cluster join with issues in cluster state publishing * */, +    @Test, +    @TestLogging("discovery.zen:TRACE,action:TRACE"), +    public void testClusterJoinDespiteOfPublishingIssues() throws Exception {, +        List<String> nodes = startCluster(2, 1);, +, +        String masterNode = internalCluster().getMasterName();, +        String nonMasterNode;, +        if (masterNode.equals(nodes.get(0))) {, +            nonMasterNode = nodes.get(1);, +        } else {, +            nonMasterNode = nodes.get(0);, +        }, +, +        DiscoveryNodes discoveryNodes = internalCluster().getInstance(ClusterService.class, nonMasterNode).state().nodes();, +, +        logger.info("blocking requests from non master [{}] to master [{}]", nonMasterNode, masterNode);, +        MockTransportService nonMasterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, nonMasterNode);, +        nonMasterTransportService.addFailToSendNoConnectRule(discoveryNodes.masterNode());, +, +        assertNoMaster(nonMasterNode);, +, +        logger.info("blocking cluster state publishing from master [{}] to non master [{}]", masterNode, nonMasterNode);, +        MockTransportService masterTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, masterNode);, +        masterTransportService.addFailToSendNoConnectRule(discoveryNodes.localNode(), "discovery/zen/publish");, +, +        logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request", nonMasterNode, masterNode);, +        final CountDownLatch countDownLatch = new CountDownLatch(2);, +        nonMasterTransportService.addDelegate(discoveryNodes.masterNode(), new MockTransportService.DelegateTransport(nonMasterTransportService.original()) {, +            @Override, +            public void sendRequest(DiscoveryNode node, long requestId, String action, TransportRequest request, TransportRequestOptions options) throws IOException, TransportException {, +                if (action.equals("discovery/zen/join")) {, +                    countDownLatch.countDown();, +                }, +                super.sendRequest(node, requestId, action, request, options);, +            }, +        });, +, +        countDownLatch.await();, +, +        logger.info("waiting for cluster to reform");, +        masterTransportService.clearRule(discoveryNodes.localNode());, +        nonMasterTransportService.clearRule(discoveryNodes.masterNode());, +, +        ensureStableCluster(2);, +, +    }, +, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                if (latestDiscoNodes.masterNode() == null) {, +                    logger.debug("no master node is set, despite of join request completing. retrying pings");, +                    retry = true;, +                    continue;, +                }, +, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithNetworkFailuresTests.java, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.transport.*;, +import java.io.IOException;, +        return startCluster(numberOfNodes, -1);, +    }, +, +    private List<String> startCluster(int numberOfNodes, int minimumMasterNode) throws ExecutionException, InterruptedException {, +            return startMulticastCluster(numberOfNodes, minimumMasterNode);, +            return startUnicastCluster(numberOfNodes, null, minimumMasterNode);, +, +    /** Test cluster join with issues in cluster state publishing * */, +    @Test, +    @TestLogging("discovery.zen:TRACE,action:TRACE"), +    public void testClusterJoinDespiteOfPublishingIssues() throws Exception {]