[+++ b/docs/CHANGELOG.asciidoc, +Fix NPE when CumulativeSum agg encounters null value/empty bucket ({pull}29641[#29641]), +, +Fix NPE when CumulativeSum agg encounters null value/empty bucket ({pull}29641[#29641]), +++ b/docs/CHANGELOG.asciidoc, +Fix NPE when CumulativeSum agg encounters null value/empty bucket ({pull}29641[#29641]), +, +Fix NPE when CumulativeSum agg encounters null value/empty bucket ({pull}29641[#29641]), +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/cumulativesum/CumulativeSumPipelineAggregator.java, +, +            // Only increment the sum if it's a finite value, otherwise "increment by zero" is correct, +            if (thisBucketValue != null && thisBucketValue.isInfinite() == false && thisBucketValue.isNaN() == false) {, +            }, +, +            List<InternalAggregation> aggs = StreamSupport, +                .stream(bucket.getAggregations().spliterator(), false), +                .map((p) -> (InternalAggregation) p), +                .collect(Collectors.toList());, +            aggs.add(new InternalSimpleValue(name(), sum, formatter, new ArrayList<>(), metaData()));, +++ b/docs/CHANGELOG.asciidoc, +Fix NPE when CumulativeSum agg encounters null value/empty bucket ({pull}29641[#29641]), +, +Fix NPE when CumulativeSum agg encounters null value/empty bucket ({pull}29641[#29641]), +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/cumulativesum/CumulativeSumPipelineAggregator.java, +, +            // Only increment the sum if it's a finite value, otherwise "increment by zero" is correct, +            if (thisBucketValue != null && thisBucketValue.isInfinite() == false && thisBucketValue.isNaN() == false) {, +            }, +, +            List<InternalAggregation> aggs = StreamSupport, +                .stream(bucket.getAggregations().spliterator(), false), +                .map((p) -> (InternalAggregation) p), +                .collect(Collectors.toList());, +            aggs.add(new InternalSimpleValue(name(), sum, formatter, new ArrayList<>(), metaData()));, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/pipeline/CumulativeSumAggregatorTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations.pipeline;, +, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.NumericDocValuesField;, +import org.apache.lucene.document.SortedNumericDocValuesField;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.RandomIndexWriter;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.MatchAllDocsQuery;, +import org.apache.lucene.search.MatchNoDocsQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.store.Directory;, +import org.elasticsearch.common.CheckedConsumer;, +import org.elasticsearch.index.mapper.DateFieldMapper;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.NumberFieldMapper;, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +import org.elasticsearch.search.aggregations.AggregatorTestCase;, +import org.elasticsearch.search.aggregations.InternalAggregation;, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;, +import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;, +import org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.avg.AvgAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.avg.InternalAvg;, +import org.elasticsearch.search.aggregations.metrics.sum.Sum;, +import org.elasticsearch.search.aggregations.metrics.sum.SumAggregationBuilder;, +import org.elasticsearch.search.aggregations.pipeline.cumulativesum.CumulativeSumPipelineAggregationBuilder;, +import org.elasticsearch.search.aggregations.pipeline.derivative.DerivativePipelineAggregationBuilder;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.List;, +import java.util.function.Consumer;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.core.IsNull.notNullValue;, +, +public class CumulativeSumAggregatorTests extends AggregatorTestCase {, +, +    private static final String HISTO_FIELD = "histo";, +    private static final String VALUE_FIELD = "value_field";, +, +    private static final List<String> datasetTimes = Arrays.asList(, +        "2017-01-01T01:07:45",]