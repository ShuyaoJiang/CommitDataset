[+++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ /dev/null, +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ /dev/null, +++ /dev/null, +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/CustomFieldsVisitor.java, +import org.elasticsearch.common.regex.Regex;, +import java.util.Collections;, +import java.util.List;, + * A field visitor that allows to load a selection of the stored fields by exact name or by pattern., + * Supported pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy"., +    private final List<String> patterns;, +    public CustomFieldsVisitor(Set<String> fields, List<String> patterns, boolean loadSource) {, +        this.patterns = patterns;, +    }, +, +    public CustomFieldsVisitor(Set<String> fields, boolean loadSource) {, +        this(fields, Collections.emptyList(), loadSource);, +        if (fields.contains(fieldInfo.name)) {, +            return Status.YES;, +        }, +        for (String pattern : patterns) {, +            if (Regex.simpleMatch(pattern, fieldInfo.name)) {, +                return Status.YES;, +            }, +        }, +        return Status.NO;, +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/CustomFieldsVisitor.java, +import org.elasticsearch.common.regex.Regex;, +import java.util.Collections;, +import java.util.List;, + * A field visitor that allows to load a selection of the stored fields by exact name or by pattern., + * Supported pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".]