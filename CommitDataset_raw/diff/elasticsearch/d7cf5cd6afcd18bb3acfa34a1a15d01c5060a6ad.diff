[+++ b/core/src/test/java/org/elasticsearch/NamingConventionTests.java, +import org.elasticsearch.test.ESIntegTestCase;, +        final Set<Class> integTestsInDisguise = new HashSet<>();, +                                    if (ESIntegTestCase.class.isAssignableFrom(clazz)) {, +                                        integTestsInDisguise.add(clazz);, +                                    }, +                                } else if (clazz.getName().endsWith("IT")) {, +                                    if (isTestCase(clazz) == false) {, +                                        notImplementing.add(clazz);, +                                    }, +                                    // otherwise fine, +        assertTrue("Subclasses of ESIntegTestCase should end with IT as they are integration tests: " + integTestsInDisguise, integTestsInDisguise.isEmpty());, +++ b/core/src/test/java/org/elasticsearch/NamingConventionTests.java, +import org.elasticsearch.test.ESIntegTestCase;, +        final Set<Class> integTestsInDisguise = new HashSet<>();, +                                    if (ESIntegTestCase.class.isAssignableFrom(clazz)) {, +                                        integTestsInDisguise.add(clazz);, +                                    }, +                                } else if (clazz.getName().endsWith("IT")) {, +                                    if (isTestCase(clazz) == false) {, +                                        notImplementing.add(clazz);, +                                    }, +                                    // otherwise fine, +        assertTrue("Subclasses of ESIntegTestCase should end with IT as they are integration tests: " + integTestsInDisguise, integTestsInDisguise.isEmpty());, +++ b/core/src/test/java/org/elasticsearch/nodesinfo/SimpleNodesInfoIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.nodesinfo;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.plugins.PluginTestCase;, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +import org.junit.Test;, +, +import java.util.List;, +, +import static org.elasticsearch.client.Requests.nodesInfoRequest;, +import static org.elasticsearch.test.ESIntegTestCase.Scope;, +import static org.hamcrest.Matchers.*;, +, +/**, + *, + */, +@ClusterScope(scope= Scope.TEST, numDataNodes =0), +public class SimpleNodesInfoIT extends PluginTestCase {, +, +    static final class Fields {, +        static final String SITE_PLUGIN = "dummy";, +        static final String SITE_PLUGIN_DESCRIPTION = "This is a description for a dummy test site plugin.";, +        static final String SITE_PLUGIN_VERSION = "0.0.7-BOND-SITE";, +    }, +, +, +    @Test, +    public void testNodesInfos() throws Exception {, +        List<String> nodesIds = internalCluster().startNodesAsync(2).get();, +        final String node_1 = nodesIds.get(0);, +        final String node_2 = nodesIds.get(1);, +, +        ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").get();, +        logger.info("--> done cluster_health, status " + clusterHealth.getStatus());, +, +        String server1NodeId = internalCluster().getInstance(ClusterService.class, node_1).state().nodes().localNodeId();, +        String server2NodeId = internalCluster().getInstance(ClusterService.class, node_2).state().nodes().localNodeId();, +        logger.info("--> started nodes: " + server1NodeId + " and " + server2NodeId);, +, +        NodesInfoResponse response = client().admin().cluster().prepareNodesInfo().execute().actionGet();, +        assertThat(response.getNodes().length, is(2));, +        assertThat(response.getNodesMap().get(server1NodeId), notNullValue());, +        assertThat(response.getNodesMap().get(server2NodeId), notNullValue());, +, +        response = client().admin().cluster().nodesInfo(nodesInfoRequest()).actionGet();, +        assertThat(response.getNodes().length, is(2));, +        assertThat(response.getNodesMap().get(server1NodeId), notNullValue());, +        assertThat(response.getNodesMap().get(server2NodeId), notNullValue());, +, +        response = client().admin().cluster().nodesInfo(nodesInfoRequest(server1NodeId)).actionGet();, +        assertThat(response.getNodes().length, is(1));, +        assertThat(response.getNodesMap().get(server1NodeId), notNullValue());, +, +        response = client().admin().cluster().nodesInfo(nodesInfoRequest(server1NodeId)).actionGet();]