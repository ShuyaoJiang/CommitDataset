[+++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    class AsyncPrimaryAction extends AbstractRunnable {, +            final ShardId shardId = request.shardId();, +            final IndexShard indexShard = getIndexShard(shardId);, +            final ShardRouting shardRouting = indexShard.routingEntry();, +            // we may end up here if the cluster state used to route the primary is so stale that the underlying, +            // index shard was replaced with a replica. For example - in a two node cluster, if the primary fails, +            // the replica will take over and a replica will be assigned to the first node., +            if (shardRouting.primary() == false) {, +                throw new ReplicationOperation.RetryOnPrimaryException(shardId, "actual shard is not a primary " + shardRouting);, +            }, +            final String actualAllocationId = shardRouting.allocationId().getId();, +            if (actualAllocationId.equals(targetAllocationID) == false) {, +                throw new ShardNotFoundException(shardId, "expected allocation id [{}] but found [{}]", targetAllocationID,, +                    actualAllocationId);, +            }, +            final long actualTerm = indexShard.getPendingPrimaryTerm();, +            if (actualTerm != primaryTerm) {, +                throw new ShardNotFoundException(shardId, "expected allocation id [{}] with term [{}] but found [{}]", targetAllocationID,, +                    primaryTerm, actualTerm);, +            acquirePrimaryOperationPermit(indexShard, request, ActionListener.wrap(, +                releasable -> runWithPrimaryShardReference(new PrimaryShardReference(indexShard, releasable)),, +                this::onFailure, +            ));, +        }, +, +        void runWithPrimaryShardReference(final PrimaryShardReference primaryShardReference) {, +                throw new ShardNotFoundException(this.replica.shardId(), "expected allocation id [{}] but found [{}]", targetAllocationID,, +            acquireReplicaOperationPermit(replica, request, this, primaryTerm, globalCheckpoint, maxSeqNoOfUpdatesOrDeletes);, +    protected IndexShard getIndexShard(final ShardId shardId) {, +     * Executes the logic for acquiring one or more operation permit on a primary shard. The default is to acquire a single permit but this, +     * method can be overridden to acquire more., +    protected void acquirePrimaryOperationPermit(final IndexShard primary,, +                                                 final Request request,, +                                                 final ActionListener<Releasable> onAcquired) {, +        primary.acquirePrimaryOperationPermit(onAcquired, executor, request);, +    /**, +     * Executes the logic for acquiring one or more operation permit on a replica shard. The default is to acquire a single permit but this, +     * method can be overridden to acquire more., +     */, +    protected void acquireReplicaOperationPermit(final IndexShard replica,, +                                                 final ReplicaRequest request,, +                                                 final ActionListener<Releasable> onAcquired,, +                                                 final long primaryTerm,, +                                                 final long globalCheckpoint,, +                                                 final long maxSeqNoOfUpdatesOrDeletes) {, +        replica.acquireReplicaOperationPermit(primaryTerm, globalCheckpoint, maxSeqNoOfUpdatesOrDeletes, onAcquired, executor, request);, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    class AsyncPrimaryAction extends AbstractRunnable {, +            final ShardId shardId = request.shardId();, +            final IndexShard indexShard = getIndexShard(shardId);, +            final ShardRouting shardRouting = indexShard.routingEntry();, +            // we may end up here if the cluster state used to route the primary is so stale that the underlying, +            // index shard was replaced with a replica. For example - in a two node cluster, if the primary fails, +            // the replica will take over and a replica will be assigned to the first node., +            if (shardRouting.primary() == false) {, +                throw new ReplicationOperation.RetryOnPrimaryException(shardId, "actual shard is not a primary " + shardRouting);, +            }, +            final String actualAllocationId = shardRouting.allocationId().getId();, +            if (actualAllocationId.equals(targetAllocationID) == false) {, +                throw new ShardNotFoundException(shardId, "expected allocation id [{}] but found [{}]", targetAllocationID,, +                    actualAllocationId);, +            }, +            final long actualTerm = indexShard.getPendingPrimaryTerm();, +            if (actualTerm != primaryTerm) {, +                throw new ShardNotFoundException(shardId, "expected allocation id [{}] with term [{}] but found [{}]", targetAllocationID,, +                    primaryTerm, actualTerm);, +            acquirePrimaryOperationPermit(indexShard, request, ActionListener.wrap(, +                releasable -> runWithPrimaryShardReference(new PrimaryShardReference(indexShard, releasable)),, +                this::onFailure, +            ));, +        }, +, +        void runWithPrimaryShardReference(final PrimaryShardReference primaryShardReference) {, +                throw new ShardNotFoundException(this.replica.shardId(), "expected allocation id [{}] but found [{}]", targetAllocationID,, +            acquireReplicaOperationPermit(replica, request, this, primaryTerm, globalCheckpoint, maxSeqNoOfUpdatesOrDeletes);, +    protected IndexShard getIndexShard(final ShardId shardId) {, +     * Executes the logic for acquiring one or more operation permit on a primary shard. The default is to acquire a single permit but this, +     * method can be overridden to acquire more., +    protected void acquirePrimaryOperationPermit(final IndexShard primary,, +                                                 final Request request,, +                                                 final ActionListener<Releasable> onAcquired) {, +        primary.acquirePrimaryOperationPermit(onAcquired, executor, request);, +    /**, +     * Executes the logic for acquiring one or more operation permit on a replica shard. The default is to acquire a single permit but this, +     * method can be overridden to acquire more., +     */, +    protected void acquireReplicaOperationPermit(final IndexShard replica,, +                                                 final ReplicaRequest request,, +                                                 final ActionListener<Releasable> onAcquired,, +                                                 final long primaryTerm,, +                                                 final long globalCheckpoint,, +                                                 final long maxSeqNoOfUpdatesOrDeletes) {, +        replica.acquireReplicaOperationPermit(primaryTerm, globalCheckpoint, maxSeqNoOfUpdatesOrDeletes, onAcquired, executor, request);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    /**, +     * Acquire all primary operation permits. Once all permits are acquired, the provided ActionListener is called., +     * It is the responsibility of the caller to close the {@link Releasable}., +     */, +    public void acquireAllPrimaryOperationsPermits(final ActionListener<Releasable> onPermitAcquired, final TimeValue timeout) {]