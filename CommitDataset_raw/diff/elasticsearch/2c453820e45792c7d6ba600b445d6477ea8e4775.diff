[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +, +import java.nio.file.Path;, +    public XContentBuilder field(String name, Iterable<?> value) throws IOException {, +        if (value instanceof Path) {, +            //treat Paths as single value, +            field(name);, +            value(value);, +        } else {, +        }, +    public XContentBuilder field(XContentBuilderString name, Iterable<?> value) throws IOException {, +        if (value instanceof Path) {, +            //treat Paths as single value, +            field(name);, +            value(value);, +        } else {, +        }, +    public XContentBuilder value(Iterable<?> value) throws IOException {, +        if (value instanceof Path) {, +            //treat as single value, +            writeValue(value);, +        } else {, +        }, +        Class<?> type = value.getClass();, +        } else if (value instanceof Path) {, +            //Path implements Iterable<Path> and causes endless recursion and a StackOverFlow if treated as an Iterable here, +            generator.writeString(value.toString());, +            for (Object v : (Iterable<?>) value) {, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +, +import java.nio.file.Path;, +    public XContentBuilder field(String name, Iterable<?> value) throws IOException {, +        if (value instanceof Path) {, +            //treat Paths as single value, +            field(name);, +            value(value);, +        } else {, +        }, +    public XContentBuilder field(XContentBuilderString name, Iterable<?> value) throws IOException {, +        if (value instanceof Path) {, +            //treat Paths as single value, +            field(name);, +            value(value);, +        } else {, +        }, +    public XContentBuilder value(Iterable<?> value) throws IOException {, +        if (value instanceof Path) {, +            //treat as single value, +            writeValue(value);, +        } else {, +        }, +        Class<?> type = value.getClass();, +        } else if (value instanceof Path) {, +            //Path implements Iterable<Path> and causes endless recursion and a StackOverFlow if treated as an Iterable here, +            generator.writeString(value.toString());, +            for (Object v : (Iterable<?>) value) {, +++ b/core/src/test/java/org/elasticsearch/common/xcontent/builder/XContentBuilderTests.java, +, +import org.elasticsearch.common.io.PathUtils;, +import java.nio.file.Path;, +, +    @Test, +    public void testHandlingOfPath() throws IOException {, +        Path path = PathUtils.get("path");, +        checkPathSerialization(path);, +    }, +, +    @Test, +    public void testHandlingOfPath_relative() throws IOException {, +        Path path = PathUtils.get("..", "..", "path");, +        checkPathSerialization(path);, +    }, +, +    @Test, +    public void testHandlingOfPath_absolute() throws IOException {, +        Path path = createTempDir().toAbsolutePath();, +        checkPathSerialization(path);, +    }, +, +    private void checkPathSerialization(Path path) throws IOException {, +        XContentBuilder pathBuilder = XContentFactory.contentBuilder(XContentType.JSON);, +        pathBuilder.startObject().field("file", path).endObject();, +, +        XContentBuilder stringBuilder = XContentFactory.contentBuilder(XContentType.JSON);, +        stringBuilder.startObject().field("file", path.toString()).endObject();, +, +        assertThat(pathBuilder.string(), equalTo(stringBuilder.string()));, +    }, +, +    @Test, +    public void testHandlingOfPath_XContentBuilderStringName() throws IOException {, +        Path path = PathUtils.get("path");, +        XContentBuilderString name = new XContentBuilderString("file");, +, +        XContentBuilder pathBuilder = XContentFactory.contentBuilder(XContentType.JSON);, +        pathBuilder.startObject().field(name, path).endObject();, +, +        XContentBuilder stringBuilder = XContentFactory.contentBuilder(XContentType.JSON);, +        stringBuilder.startObject().field(name, path.toString()).endObject();, +]