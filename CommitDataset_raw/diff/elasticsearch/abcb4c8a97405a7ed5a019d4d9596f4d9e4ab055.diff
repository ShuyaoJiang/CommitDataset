[+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/upgrade/UpgradeIT.java, +import static org.elasticsearch.test.OldIndexUtils.assertNotUpgraded;, +import static org.elasticsearch.test.OldIndexUtils.assertUpgraded;, +import static org.elasticsearch.test.OldIndexUtils.getUpgradeStatus;, +import static org.elasticsearch.test.OldIndexUtils.isUpgraded;, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/upgrade/UpgradeIT.java, +import static org.elasticsearch.test.OldIndexUtils.assertNotUpgraded;, +import static org.elasticsearch.test.OldIndexUtils.assertUpgraded;, +import static org.elasticsearch.test.OldIndexUtils.getUpgradeStatus;, +import static org.elasticsearch.test.OldIndexUtils.isUpgraded;, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.test.OldIndexUtils;, +import static org.elasticsearch.test.OldIndexUtils.assertUpgradeWorks;, +        indexes = OldIndexUtils.loadIndexesList("index", getBwcIndicesPath());, +        unsupportedIndexes = OldIndexUtils.loadIndexesList("unsupported", getBwcIndicesPath());, +        return OldIndexUtils.getSettings();, +                .put(Environment.PATH_DATA_SETTING.getKey(), baseTempDir.resolve("multi-path1").toAbsolutePath() + "," + baseTempDir, +                        .resolve("multi-path2").toAbsolutePath()), +        OldIndexUtils.upgradeIndexFolder(internalCluster(), singleDataPathNodeName);, +        OldIndexUtils.upgradeIndexFolder(internalCluster(), multiDataPathNodeName);, +        Version version = OldIndexUtils.extractVersion(index);, +        Path[] paths;, +        if (randomBoolean()) {, +            logger.info("--> injecting index [{}] into single data path", index);, +            paths = new Path[]{singleDataPath};, +        } else {, +            logger.info("--> injecting index [{}] into multi data path", index);, +            paths = multiDataPath;, +        }, +, +        String indexName = index.replace(".zip", "").toLowerCase(Locale.ROOT).replace("unsupported-", "index-");, +        OldIndexUtils.loadIndex(indexName, index, createTempDir(), getBwcIndicesPath(), logger, paths);, +        assertUpgradeWorks(client(), indexName, version);, +        SearchResponse searchRsp = client().prepareSearch(indexName).addAggregation(AggregationBuilders.histogram("histo").field, +                ("long_sort").interval(10)).get();, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/upgrade/UpgradeIT.java, +import static org.elasticsearch.test.OldIndexUtils.assertNotUpgraded;, +import static org.elasticsearch.test.OldIndexUtils.assertUpgraded;, +import static org.elasticsearch.test.OldIndexUtils.getUpgradeStatus;, +import static org.elasticsearch.test.OldIndexUtils.isUpgraded;, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.test.OldIndexUtils;, +import static org.elasticsearch.test.OldIndexUtils.assertUpgradeWorks;, +        indexes = OldIndexUtils.loadIndexesList("index", getBwcIndicesPath());, +        unsupportedIndexes = OldIndexUtils.loadIndexesList("unsupported", getBwcIndicesPath());, +        return OldIndexUtils.getSettings();, +                .put(Environment.PATH_DATA_SETTING.getKey(), baseTempDir.resolve("multi-path1").toAbsolutePath() + "," + baseTempDir, +                        .resolve("multi-path2").toAbsolutePath()), +        OldIndexUtils.upgradeIndexFolder(internalCluster(), singleDataPathNodeName);, +        OldIndexUtils.upgradeIndexFolder(internalCluster(), multiDataPathNodeName);, +        Version version = OldIndexUtils.extractVersion(index);, +        Path[] paths;, +        if (randomBoolean()) {, +            logger.info("--> injecting index [{}] into single data path", index);, +            paths = new Path[]{singleDataPath};, +        } else {, +            logger.info("--> injecting index [{}] into multi data path", index);, +            paths = multiDataPath;, +        }, +, +        String indexName = index.replace(".zip", "").toLowerCase(Locale.ROOT).replace("unsupported-", "index-");, +        OldIndexUtils.loadIndex(indexName, index, createTempDir(), getBwcIndicesPath(), logger, paths);, +        assertUpgradeWorks(client(), indexName, version);, +        SearchResponse searchRsp = client().prepareSearch(indexName).addAggregation(AggregationBuilders.histogram("histo").field, +                ("long_sort").interval(10)).get();, +++ b/core/src/test/java/org/elasticsearch/common/util/IndexFolderUpgraderTests.java, +import org.elasticsearch.test.OldIndexUtils;, +            OldIndexUtils.copyIndex(logger, src, indexName, indicesPath);, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/upgrade/UpgradeIT.java, +import static org.elasticsearch.test.OldIndexUtils.assertNotUpgraded;, +import static org.elasticsearch.test.OldIndexUtils.assertUpgraded;, +import static org.elasticsearch.test.OldIndexUtils.getUpgradeStatus;, +import static org.elasticsearch.test.OldIndexUtils.isUpgraded;, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.test.OldIndexUtils;, +import static org.elasticsearch.test.OldIndexUtils.assertUpgradeWorks;, +        indexes = OldIndexUtils.loadIndexesList("index", getBwcIndicesPath());, +        unsupportedIndexes = OldIndexUtils.loadIndexesList("unsupported", getBwcIndicesPath());, +        return OldIndexUtils.getSettings();, +                .put(Environment.PATH_DATA_SETTING.getKey(), baseTempDir.resolve("multi-path1").toAbsolutePath() + "," + baseTempDir, +                        .resolve("multi-path2").toAbsolutePath()), +        OldIndexUtils.upgradeIndexFolder(internalCluster(), singleDataPathNodeName);, +        OldIndexUtils.upgradeIndexFolder(internalCluster(), multiDataPathNodeName);, +        Version version = OldIndexUtils.extractVersion(index);, +        Path[] paths;, +        if (randomBoolean()) {, +            logger.info("--> injecting index [{}] into single data path", index);, +            paths = new Path[]{singleDataPath};, +        } else {, +            logger.info("--> injecting index [{}] into multi data path", index);, +            paths = multiDataPath;, +        }, +, +        String indexName = index.replace(".zip", "").toLowerCase(Locale.ROOT).replace("unsupported-", "index-");, +        OldIndexUtils.loadIndex(indexName, index, createTempDir(), getBwcIndicesPath(), logger, paths);, +        assertUpgradeWorks(client(), indexName, version);, +        SearchResponse searchRsp = client().prepareSearch(indexName).addAggregation(AggregationBuilders.histogram("histo").field, +                ("long_sort").interval(10)).get();, +++ b/core/src/test/java/org/elasticsearch/common/util/IndexFolderUpgraderTests.java, +import org.elasticsearch.test.OldIndexUtils;]