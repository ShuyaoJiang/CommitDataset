[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/local/LocalGateway.java, +    private volatile boolean metaDataPersistedAtLeastOnce = false;, +, +        if (event.state().nodes().localNode().masterNode() && (event.metaDataChanged() || !metaDataPersistedAtLeastOnce)) {, +            metaDataPersistedAtLeastOnce = true;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/local/LocalGateway.java, +    private volatile boolean metaDataPersistedAtLeastOnce = false;, +, +        if (event.state().nodes().localNode().masterNode() && (event.metaDataChanged() || !metaDataPersistedAtLeastOnce)) {, +            metaDataPersistedAtLeastOnce = true;, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/gateway/local/SimpleRecoveryLocalGatewayTests.java, +import org.elasticsearch.index.query.QueryBuilders;, +, +    @Test public void testRecoveryDifferentNodeOrderStartup() throws Exception {, +        // we need different data paths so we make sure we start the second node fresh, +        buildNode("node1", settingsBuilder().put("gateway.type", "local").put("path.data", "data/data1").build());, +        buildNode("node2", settingsBuilder().put("gateway.type", "local").put("path.data", "data/data2").build());, +        cleanAndCloseNodes();, +, +        startNode("node1", settingsBuilder().put("gateway.type", "local").put("path.data", "data/data1").build());, +, +        client("node1").prepareIndex("test", "type1", "1").setSource("field", "value").execute().actionGet();, +, +        startNode("node2", settingsBuilder().put("gateway.type", "local").put("path.data", "data/data2").build());, +, +        ClusterHealthResponse health = client("node2").admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +        assertThat(health.timedOut(), equalTo(false));, +, +        closeNode("node1");, +        closeNode("node2");, +, +        startNode("node2", settingsBuilder().put("gateway.type", "local").put("path.data", "data/data2").build());, +, +        health = client("node2").admin().cluster().prepareHealth().setWaitForYellowStatus().execute().actionGet();, +        assertThat(health.timedOut(), equalTo(false));, +, +        assertThat(client("node2").admin().indices().prepareExists("test").execute().actionGet().exists(), equalTo(true));, +        assertThat(client("node2").prepareCount("test").setQuery(QueryBuilders.matchAllQuery()).execute().actionGet().count(), equalTo(1l));, +    }]