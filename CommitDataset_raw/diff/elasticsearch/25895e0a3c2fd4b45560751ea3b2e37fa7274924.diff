[+++ b/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/test/AbstractWatcherIntegrationTestCase.java, +            logger.info("waiting to start watcher, current states {}", currentStatesFromStatsRequest);, +, +            boolean isAllStateStarted = states.stream().allMatch(w -> w == WatcherState.STARTED);, +            if (isAllStateStarted) {, +                return;, +            boolean isAnyStopping = states.stream().anyMatch(w -> w == WatcherState.STOPPING);, +            if (isAnyStopping) {, +                throw new AssertionError("at least one node is in state stopping, waiting to be stopped");, +            }, +, +            boolean isAllStateStopped = states.stream().allMatch(w -> w == WatcherState.STOPPED);, +            if (isAllStateStopped) {, +                assertAcked(watcherClient().prepareWatchService().start().get());, +                throw new AssertionError("all nodes are stopped, restarting");, +            }, +, +            boolean isAnyStarting = states.stream().anyMatch(w -> w == WatcherState.STARTING);, +            if (isAnyStarting) {, +                throw new AssertionError("at least one node is in state starting, waiting to be stopped");, +            }, +, +            throw new AssertionError("unexpected state, retrying with next run");, +            logger.info("waiting to stop watcher, current states {}", currentStatesFromStatsRequest);, +, +            boolean isAllStateStarted = states.stream().allMatch(w -> w == WatcherState.STARTED);, +            if (isAllStateStarted) {, +                throw new AssertionError("all nodes are started, stopping");, +            boolean isAnyStopping = states.stream().anyMatch(w -> w == WatcherState.STOPPING);, +            if (isAnyStopping) {, +                throw new AssertionError("at least one node is in state stopping, waiting to be stopped");, +            }, +, +            boolean isAllStateStopped = states.stream().allMatch(w -> w == WatcherState.STOPPED);, +            if (isAllStateStopped) {, +                return;, +            }, +, +            boolean isAnyStarting = states.stream().anyMatch(w -> w == WatcherState.STARTING);, +            if (isAnyStarting) {, +                throw new AssertionError("at least one node is in state starting, waiting to be started before stopping");, +            }, +, +            throw new AssertionError("unexpected state, retrying with next run");]