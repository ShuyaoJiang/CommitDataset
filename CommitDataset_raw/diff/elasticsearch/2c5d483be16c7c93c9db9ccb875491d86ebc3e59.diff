[+++ b/src/main/java/org/elasticsearch/Version.java, +    public static final int V_0_90_7_ID = /*00*/900799;, +    public static final Version V_0_90_7 = new Version(V_0_90_7_ID, true, org.apache.lucene.util.Version.LUCENE_45);, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +        if (id != version.id) {, +            return false;, +        }, +++ b/src/main/java/org/elasticsearch/Version.java, +    public static final int V_0_90_7_ID = /*00*/900799;, +    public static final Version V_0_90_7 = new Version(V_0_90_7_ID, true, org.apache.lucene.util.Version.LUCENE_45);, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +        if (id != version.id) {, +            return false;, +        }, +++ b/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +import org.elasticsearch.Version;, +        stats.mem.heapMax = memUsage.getMax() < 0 ? 0 : memUsage.getMax();, +            if (mem.heapUsedPercent() >= 0) {, +                builder.field(Fields.HEAP_USED_PERCENT, mem.heapUsedPercent());, +            }, +            builder.byteSizeField(Fields.HEAP_MAX_IN_BYTES, Fields.HEAP_MAX, mem.heapMax);, +        static final XContentBuilderString HEAP_USED_PERCENT = new XContentBuilderString("heap_used_percent");, +        static final XContentBuilderString HEAP_MAX = new XContentBuilderString("heap_max");, +        static final XContentBuilderString HEAP_MAX_IN_BYTES = new XContentBuilderString("heap_max_in_bytes");, +        long heapMax;, +            if (in.getVersion().onOrAfter(Version.V_0_90_7)) {, +                heapMax = in.readVLong();, +            }, +, +            if (out.getVersion().onOrAfter(Version.V_0_90_7)) {, +                out.writeVLong(heapMax);, +            }, +, +        /**, +         * returns the maximum heap size. 0 bytes signals unknown., +         */, +        public ByteSizeValue heapMax() {, +            return new ByteSizeValue(heapMax);, +        }, +, +        /**, +         * returns the maximum heap size. 0 bytes signals unknown., +         */, +        public ByteSizeValue getHeapMax() {, +            return heapMax();, +        }, +, +        /**, +         * returns the heap usage in percent. -1 signals unknown., +         */, +        public short heapUsedPercent() {, +            if (heapMax == 0) {, +                return -1;, +            }, +            return (short) (heapUsed * 100 / heapMax);, +        }, +, +        /**, +         * returns the heap usage in percent. -1 signals unknown., +         */, +        public short getHeapUsedPrecent() {, +            return heapUsedPercent();, +        }, +]