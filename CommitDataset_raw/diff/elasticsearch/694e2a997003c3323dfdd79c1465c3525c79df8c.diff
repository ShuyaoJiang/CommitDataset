[+++ b/server/src/main/java/org/elasticsearch/client/Client.java, +, +    /**, +     * Returns a client to a remote cluster with the given cluster alias., +     *, +     * @throws IllegalArgumentException if the given clusterAlias doesn't exist, +     * @throws UnsupportedOperationException if this functionality is not available on this client., +     */, +    default Client getRemoteClusterClient(String clusterAlias) {, +        throw new UnsupportedOperationException("this client doesn't support remote cluster connections");, +    }, +++ b/server/src/main/java/org/elasticsearch/client/Client.java, +, +    /**, +     * Returns a client to a remote cluster with the given cluster alias., +     *, +     * @throws IllegalArgumentException if the given clusterAlias doesn't exist, +     * @throws UnsupportedOperationException if this functionality is not available on this client., +     */, +    default Client getRemoteClusterClient(String clusterAlias) {, +        throw new UnsupportedOperationException("this client doesn't support remote cluster connections");, +    }, +++ b/server/src/main/java/org/elasticsearch/client/FilterClient.java, +, +    @Override, +    public Client getRemoteClusterClient(String clusterAlias) {, +        return in.getRemoteClusterClient(clusterAlias);, +    }, +++ b/server/src/main/java/org/elasticsearch/client/Client.java, +, +    /**, +     * Returns a client to a remote cluster with the given cluster alias., +     *, +     * @throws IllegalArgumentException if the given clusterAlias doesn't exist, +     * @throws UnsupportedOperationException if this functionality is not available on this client., +     */, +    default Client getRemoteClusterClient(String clusterAlias) {, +        throw new UnsupportedOperationException("this client doesn't support remote cluster connections");, +    }, +++ b/server/src/main/java/org/elasticsearch/client/FilterClient.java, +, +    @Override, +    public Client getRemoteClusterClient(String clusterAlias) {, +        return in.getRemoteClusterClient(clusterAlias);, +    }, +++ b/server/src/main/java/org/elasticsearch/client/node/NodeClient.java, +import org.elasticsearch.transport.RemoteClusterService;, +    private RemoteClusterService remoteClusterService;, +    public void initialize(Map<GenericAction, TransportAction> actions, Supplier<String> localNodeId,, +                           RemoteClusterService remoteClusterService) {, +        this.remoteClusterService = remoteClusterService;, +, +    @Override, +    public Client getRemoteClusterClient(String clusterAlias) {, +        return remoteClusterService.getRemoteClusterClient(threadPool(), clusterAlias);, +    }, +++ b/server/src/main/java/org/elasticsearch/client/Client.java, +, +    /**, +     * Returns a client to a remote cluster with the given cluster alias., +     *, +     * @throws IllegalArgumentException if the given clusterAlias doesn't exist, +     * @throws UnsupportedOperationException if this functionality is not available on this client., +     */, +    default Client getRemoteClusterClient(String clusterAlias) {, +        throw new UnsupportedOperationException("this client doesn't support remote cluster connections");, +    }, +++ b/server/src/main/java/org/elasticsearch/client/FilterClient.java, +, +    @Override, +    public Client getRemoteClusterClient(String clusterAlias) {, +        return in.getRemoteClusterClient(clusterAlias);, +    }, +++ b/server/src/main/java/org/elasticsearch/client/node/NodeClient.java, +import org.elasticsearch.transport.RemoteClusterService;, +    private RemoteClusterService remoteClusterService;, +    public void initialize(Map<GenericAction, TransportAction> actions, Supplier<String> localNodeId,, +                           RemoteClusterService remoteClusterService) {, +        this.remoteClusterService = remoteClusterService;, +, +    @Override, +    public Client getRemoteClusterClient(String clusterAlias) {, +        return remoteClusterService.getRemoteClusterClient(threadPool(), clusterAlias);, +    }, +++ b/server/src/main/java/org/elasticsearch/node/Node.java, +                    () -> clusterService.localNode().getId(), transportService.getRemoteClusterService());, +++ b/server/src/main/java/org/elasticsearch/client/Client.java, +, +    /**, +     * Returns a client to a remote cluster with the given cluster alias., +     *, +     * @throws IllegalArgumentException if the given clusterAlias doesn't exist, +     * @throws UnsupportedOperationException if this functionality is not available on this client., +     */, +    default Client getRemoteClusterClient(String clusterAlias) {, +        throw new UnsupportedOperationException("this client doesn't support remote cluster connections");, +    }, +++ b/server/src/main/java/org/elasticsearch/client/FilterClient.java, +, +    @Override]