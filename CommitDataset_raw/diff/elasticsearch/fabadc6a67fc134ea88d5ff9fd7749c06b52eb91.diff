[+++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +import org.elasticsearch.client.AbstractClientHeadersTestCase;, +                AbstractClientHeadersTestCase.InternalException.class);, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +import org.elasticsearch.client.AbstractClientHeadersTestCase;, +                AbstractClientHeadersTestCase.InternalException.class);, +++ b/core/src/test/java/org/elasticsearch/NamingConventionTests.java, +        final Set<Class> notRunnable = new HashSet<>();, +        final Set<Class> innerClasses = new HashSet<>();, +                                if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers())) {, +                                    notRunnable.add(clazz);, +                                } else if (isTestCase(clazz) == false) {, +                                } else if (Modifier.isStatic(clazz.getModifiers())) {, +                                    innerClasses.add(clazz);, +                            } else if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false) {, +                                if (isTestCase(clazz)) {, +        assertTrue(notRunnable.remove(DummyAbstractTests.class));, +        assertTrue(notRunnable.remove(DummyInterfaceTests.class));, +        assertTrue(innerClasses.remove(InnerTests.class));, +                " match the naming convention. Concrete classes must end with [Test|Tests]:\n" + Joiner.on('\n').join(missingSuffix),, +        assertTrue("Classes ending with [Test|Tests] are abstract or interfaces:\n" + Joiner.on('\n').join(notRunnable),, +            notRunnable.isEmpty());, +        assertTrue("Found inner classes that are tests, which are excluded from the test runner:\n" + Joiner.on('\n').join(innerClasses),, +            innerClasses.isEmpty());, +        assertTrue("Pure Unit-Test found must subclass one of [" + classesToSubclass +"]:\n" + Joiner.on('\n').join(pureUnitTest),, +        assertTrue("Classes ending with Test|Tests] must subclass [" + classesToSubclass +"]:\n" + Joiner.on('\n').join(notImplementing),, +        assertTrue("Subclasses of ESIntegTestCase should end with IT as they are integration tests:\n" + Joiner.on('\n').join(integTestsInDisguise),, +            integTestsInDisguise.isEmpty());, +, +    public static abstract class DummyAbstractTests extends ESTestCase {}, +, +    public interface DummyInterfaceTests {}, +, +    public static final class InnerTests extends ESTestCase {}, +, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +import org.elasticsearch.client.AbstractClientHeadersTestCase;, +                AbstractClientHeadersTestCase.InternalException.class);, +++ b/core/src/test/java/org/elasticsearch/NamingConventionTests.java, +        final Set<Class> notRunnable = new HashSet<>();, +        final Set<Class> innerClasses = new HashSet<>();, +                                if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers())) {, +                                    notRunnable.add(clazz);, +                                } else if (isTestCase(clazz) == false) {, +                                } else if (Modifier.isStatic(clazz.getModifiers())) {, +                                    innerClasses.add(clazz);, +                            } else if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false) {, +                                if (isTestCase(clazz)) {, +        assertTrue(notRunnable.remove(DummyAbstractTests.class));, +        assertTrue(notRunnable.remove(DummyInterfaceTests.class));, +        assertTrue(innerClasses.remove(InnerTests.class));, +                " match the naming convention. Concrete classes must end with [Test|Tests]:\n" + Joiner.on('\n').join(missingSuffix),, +        assertTrue("Classes ending with [Test|Tests] are abstract or interfaces:\n" + Joiner.on('\n').join(notRunnable),, +            notRunnable.isEmpty());, +        assertTrue("Found inner classes that are tests, which are excluded from the test runner:\n" + Joiner.on('\n').join(innerClasses),, +            innerClasses.isEmpty());, +        assertTrue("Pure Unit-Test found must subclass one of [" + classesToSubclass +"]:\n" + Joiner.on('\n').join(pureUnitTest),, +        assertTrue("Classes ending with Test|Tests] must subclass [" + classesToSubclass +"]:\n" + Joiner.on('\n').join(notImplementing),, +        assertTrue("Subclasses of ESIntegTestCase should end with IT as they are integration tests:\n" + Joiner.on('\n').join(integTestsInDisguise),, +            integTestsInDisguise.isEmpty());, +, +    public static abstract class DummyAbstractTests extends ESTestCase {}, +, +    public interface DummyInterfaceTests {}, +, +    public static final class InnerTests extends ESTestCase {}, +, +++ b/core/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client;, +, +import com.google.common.base.Throwables;, +import com.google.common.collect.ImmutableMap;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.GenericAction;, +import org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteAction;, +import org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteResponse;, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotAction;, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse;, +import org.elasticsearch.action.admin.cluster.stats.ClusterStatsAction;, +import org.elasticsearch.action.admin.cluster.stats.ClusterStatsResponse;, +import org.elasticsearch.action.admin.indices.cache.clear.ClearIndicesCacheAction;]