[+++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.settings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())));, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.settings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())));, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.settings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())));, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.settings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())));, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.settings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())));, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.persistentSettings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).build());, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.settings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())));, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.settings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())));, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.persistentSettings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).build());, +++ b/src/main/java/org/elasticsearch/common/settings/loader/SettingsLoader.java, +import org.elasticsearch.common.Nullable;, +, +import java.util.List;, +import static com.google.common.collect.Lists.newArrayList;, +import static com.google.common.collect.Maps.newHashMap;, +, +    static class Helper {, +, +        public static Map<String, String> loadNestedFromMap(@Nullable Map map) {, +            Map<String, String> settings = newHashMap();, +            if (map == null) {, +                return settings;, +            }, +            StringBuilder sb = new StringBuilder();, +            List<String> path = newArrayList();, +            serializeMap(settings, sb, path, map);, +            return settings;, +        }, +, +        private static void serializeMap(Map<String, String> settings, StringBuilder sb, List<String> path, Map<Object, Object> map) {, +            for (Map.Entry<Object, Object> entry : map.entrySet()) {, +                if (entry.getValue() instanceof Map) {, +                    path.add((String) entry.getKey());, +                    serializeMap(settings, sb, path, (Map<Object, Object>) entry.getValue());, +                    path.remove(path.size() - 1);, +                } else if (entry.getValue() instanceof List) {, +                    path.add((String) entry.getKey());, +                    serializeList(settings, sb, path, (List) entry.getValue());, +                    path.remove(path.size() - 1);, +                } else {, +                    serializeValue(settings, sb, path, (String) entry.getKey(), entry.getValue());, +                }, +            }, +        }, +, +        private static void serializeList(Map<String, String> settings, StringBuilder sb, List<String> path, List list) {, +            int counter = 0;, +            for (Object listEle : list) {, +                if (listEle instanceof Map) {, +                    path.add(Integer.toString(counter));, +                    serializeMap(settings, sb, path, (Map<Object, Object>) listEle);, +                    path.remove(path.size() - 1);, +                } else if (listEle instanceof List) {, +                    path.add(Integer.toString(counter));, +                    serializeList(settings, sb, path, (List) listEle);, +                    path.remove(path.size() - 1);, +                } else {, +                    serializeValue(settings, sb, path, Integer.toString(counter), listEle);, +                }, +                counter++;, +            }, +        }, +, +        private static void serializeValue(Map<String, String> settings, StringBuilder sb, List<String> path, String name, Object value) {, +            if (value == null) {, +                return;, +            }, +            sb.setLength(0);, +            for (String pathEle : path) {, +                sb.append(pathEle).append('.');, +            }, +            sb.append(name);, +            settings.put(sb.toString(), value.toString());, +        }, +    }, +, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                        builder.settings(ImmutableSettings.settingsBuilder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())));, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +import org.elasticsearch.common.settings.loader.SettingsLoader;]