[+++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/resources/rest-api-spec/test/watcher_mustache/30_search_input_and_transform.yaml, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-3d" }, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-1d" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.1.term.value": "val_3" }, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/resources/rest-api-spec/test/watcher_mustache/30_search_input_and_transform.yaml, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-3d" }, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-1d" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.1.term.value": "val_3" }, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.security.transport.SecurityClientTransportService;, +import org.elasticsearch.xpack.security.transport.SecurityTransportModule;, +            modules.add(new SecurityTransportModule(settings));, +            modules.add(new SecurityTransportModule(settings));, +        modules.add(new SecurityTransportModule(settings));, +        return additionalSettings(settings);, +    static Settings additionalSettings(Settings settings) {, +    public List<Setting<?>> getSettings() {, +                module.registerTransportService(XPackPlugin.SECURITY, SecurityClientTransportService.class);, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/resources/rest-api-spec/test/watcher_mustache/30_search_input_and_transform.yaml, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-3d" }, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-1d" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.1.term.value": "val_3" }, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.security.transport.SecurityClientTransportService;, +import org.elasticsearch.xpack.security.transport.SecurityTransportModule;, +            modules.add(new SecurityTransportModule(settings));, +            modules.add(new SecurityTransportModule(settings));, +        modules.add(new SecurityTransportModule(settings));, +        return additionalSettings(settings);, +    static Settings additionalSettings(Settings settings) {, +    public List<Setting<?>> getSettings() {, +                module.registerTransportService(XPackPlugin.SECURITY, SecurityClientTransportService.class);, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/transport/ClientTransportFilter.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.security.transport;, +, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.xpack.security.authc.AuthenticationService;, +import org.elasticsearch.xpack.security.user.SystemUser;, +import org.elasticsearch.transport.TransportRequest;, +, +import java.io.IOException;, +, +/**, + * This interface allows clients, that connect to an elasticsearch cluster, to execute, + * additional logic before an operation is sent., + *, + * This interface only applies to outgoing messages, + */, +public interface ClientTransportFilter {, +, +    /**, +     * Called just before the given request is sent by the transport. Any exception, +     * thrown by this method will stop the request from being sent and the error will, +     * be sent back to the sender., +     */, +    void outbound(String action, TransportRequest request) throws IOException;, +, +    /**, +     * The client transport filter that should be used in transport clients, +     */, +    public static class TransportClient implements ClientTransportFilter {, +, +        @Override, +        public void outbound(String action, TransportRequest request) {, +        }, +    }, +, +    /**, +     * The client transport filter that should be used in nodes, +     */, +    public static class Node implements ClientTransportFilter {, +, +        private final AuthenticationService authcService;, +, +        @Inject, +        public Node(AuthenticationService authcService) {, +            this.authcService = authcService;, +        }, +, +        @Override, +        public void outbound(String action, TransportRequest request) throws IOException {, +            /**, +                this will check if there's a user associated with the request. If there isn't,, +                the system user will be attached. There cannot be a request outgoing from this, +                node that is not associated with a user., +             */, +            authcService.attachUserIfMissing(SystemUser.INSTANCE);, +        }, +    }]