[+++ b/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java, +    /**, +     * Resolves the request, by default, simply setting the concrete index (if its aliased one). If the resolve, +     * means a different execution, then return false here to indicate not to continue and execute this request., +     */, +    protected boolean resolveRequest(ClusterState state, Request request, ActionListener<Response> listener) {, +        request.index(state.metaData().concreteIndex(request.index()));, +        return true;, +    }, +, +                // check if we need to execute, and if not, return, +                if (!resolveRequest(clusterState, request, listener)) {, +                    return true;, +                }, +++ b/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java, +    /**, +     * Resolves the request, by default, simply setting the concrete index (if its aliased one). If the resolve, +     * means a different execution, then return false here to indicate not to continue and execute this request., +     */, +    protected boolean resolveRequest(ClusterState state, Request request, ActionListener<Response> listener) {, +        request.index(state.metaData().concreteIndex(request.index()));, +        return true;, +    }, +, +                // check if we need to execute, and if not, return, +                if (!resolveRequest(clusterState, request, listener)) {, +                    return true;, +                }, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +import org.elasticsearch.cluster.metadata.MetaData;, +    protected boolean resolveRequest(ClusterState state, UpdateRequest request, ActionListener<UpdateResponse> listener) {, +        MetaData metaData = clusterService.state().metaData();, +        String aliasOrIndex = request.index();, +        request.routing((metaData.resolveIndexRouting(request.routing(), aliasOrIndex)));, +        request.index(metaData.concreteIndex(request.index()));, +        return true;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java, +    /**, +     * Resolves the request, by default, simply setting the concrete index (if its aliased one). If the resolve, +     * means a different execution, then return false here to indicate not to continue and execute this request., +     */, +    protected boolean resolveRequest(ClusterState state, Request request, ActionListener<Response> listener) {, +        request.index(state.metaData().concreteIndex(request.index()));, +        return true;, +    }, +, +                // check if we need to execute, and if not, return, +                if (!resolveRequest(clusterState, request, listener)) {, +                    return true;, +                }, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +import org.elasticsearch.cluster.metadata.MetaData;, +    protected boolean resolveRequest(ClusterState state, UpdateRequest request, ActionListener<UpdateResponse> listener) {, +        MetaData metaData = clusterService.state().metaData();, +        String aliasOrIndex = request.index();, +        request.routing((metaData.resolveIndexRouting(request.routing(), aliasOrIndex)));, +        request.index(metaData.concreteIndex(request.index()));, +        return true;, +    }, +, +    @Override, +++ b/src/test/java/org/elasticsearch/test/integration/routing/AliasRoutingTests.java, +        logger.info("--> updating with id [1] and routing through alias");, +        client.prepareUpdate("alias0", "type1", "1"), +                .setUpsert(XContentFactory.jsonBuilder().startObject().field("field", 1).endObject()), +                .setScript("ctx._source.field = 'value2'"), +                .execute().actionGet();, +        for (int i = 0; i < 5; i++) {, +            assertThat(client.prepareGet("alias0", "type1", "1").execute().actionGet().exists(), equalTo(true));, +            assertThat(client.prepareGet("alias0", "type1", "1").execute().actionGet().sourceAsMap().get("field").toString(), equalTo("value2"));, +        }, +, +]