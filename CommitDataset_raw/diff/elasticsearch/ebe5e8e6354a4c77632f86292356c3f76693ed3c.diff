[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import java.net.URI;, +import java.net.URISyntaxException;, +                try {, +                    //encode each part (e.g. index, type and id) separately before merging them into the path, +                    //we prepend "/" to the path part to make this pate absolute, otherwise there can be issues with, +                    //paths that start with `-` or contain `:`, +                    URI uri = new URI(null, null, null, -1, "/" + part, null, null);, +                    //manually encode any slash that each part may contain, +                    joiner.add(uri.getRawPath().substring(1).replaceAll("/", "%2F"));, +                } catch (URISyntaxException e) {, +                    throw new IllegalArgumentException("Path part [" + part + "] couldn't be encoded", e);, +                }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import java.net.URI;, +import java.net.URISyntaxException;, +                try {, +                    //encode each part (e.g. index, type and id) separately before merging them into the path, +                    //we prepend "/" to the path part to make this pate absolute, otherwise there can be issues with, +                    //paths that start with `-` or contain `:`, +                    URI uri = new URI(null, null, null, -1, "/" + part, null, null);, +                    //manually encode any slash that each part may contain, +                    joiner.add(uri.getRawPath().substring(1).replaceAll("/", "%2F"));, +                } catch (URISyntaxException e) {, +                    throw new IllegalArgumentException("Path part [" + part + "] couldn't be encoded", e);, +                }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.elasticsearch.action.admin.indices.get.GetIndexRequest;, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +import org.joda.time.format.DateTimeFormat;, +    public void testBulkProcessorIntegration() throws IOException {, +, +    public void testUrlEncode() throws IOException {, +        String indexPattern = "<logstash-{now/M}>";, +        String expectedIndex = "logstash-" +, +                DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(DateTimeZone.UTC).monthOfYear().roundFloorCopy());, +        {, +            IndexRequest indexRequest = new IndexRequest(indexPattern, "type", "id#1");, +            indexRequest.source("field", "value");, +            IndexResponse indexResponse = highLevelClient().index(indexRequest);, +            assertEquals(expectedIndex, indexResponse.getIndex());, +            assertEquals("type", indexResponse.getType());, +            assertEquals("id#1", indexResponse.getId());, +        }, +        {, +            GetRequest getRequest = new GetRequest(indexPattern, "type", "id#1");, +            GetResponse getResponse = highLevelClient().get(getRequest);, +            assertTrue(getResponse.isExists());, +            assertEquals(expectedIndex, getResponse.getIndex());, +            assertEquals("type", getResponse.getType());, +            assertEquals("id#1", getResponse.getId());, +        }, +, +        String docId = "this/is/the/id/中文";, +        {, +            IndexRequest indexRequest = new IndexRequest("index", "type", docId);, +            indexRequest.source("field", "value");, +            IndexResponse indexResponse = highLevelClient().index(indexRequest);, +            assertEquals("index", indexResponse.getIndex());, +            assertEquals("type", indexResponse.getType());, +            assertEquals(docId, indexResponse.getId());, +        }, +        {, +            GetRequest getRequest = new GetRequest("index", "type", docId);, +            GetResponse getResponse = highLevelClient().get(getRequest);, +            assertTrue(getResponse.isExists());, +            assertEquals("index", getResponse.getIndex());, +            assertEquals("type", getResponse.getType());, +            assertEquals(docId, getResponse.getId());, +        }, +, +        assertTrue(highLevelClient().indices().exists(new GetIndexRequest().indices(indexPattern, "index")));, +    }, +, +    public void testParamsEncode() throws IOException {, +        //parameters are encoded by the low-level client but let's test that everything works the same when we use the high-level one, +        String routing = "routing/中文value#1?";, +        {, +            IndexRequest indexRequest = new IndexRequest("index", "type", "id");, +            indexRequest.source("field", "value");, +            indexRequest.routing(routing);, +            IndexResponse indexResponse = highLevelClient().index(indexRequest);, +            assertEquals("index", indexResponse.getIndex());, +            assertEquals("type", indexResponse.getType());, +            assertEquals("id", indexResponse.getId());, +        }, +        {, +            GetRequest getRequest = new GetRequest("index", "type", "id").routing(routing);, +            GetResponse getResponse = highLevelClient().get(getRequest);, +            assertTrue(getResponse.isExists());, +            assertEquals("index", getResponse.getIndex());, +            assertEquals("type", getResponse.getType());, +            assertEquals("id", getResponse.getId());, +            assertEquals(routing, getResponse.getField("_routing").getValue());, +        }, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import java.net.URI;, +import java.net.URISyntaxException;]