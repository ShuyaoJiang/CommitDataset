[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/geo/GeoDistanceDataComparator.java, +import org.elasticsearch.index.mapper.xcontent.GeoPointFieldMapper;, +        FieldMapper mapper = mapperService.smartNameFieldMapper(fieldName + GeoPointFieldMapper.Names.LAT_SUFFIX);, +        mapper = mapperService.smartNameFieldMapper(fieldName + GeoPointFieldMapper.Names.LON_SUFFIX);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/geo/GeoDistanceDataComparator.java, +import org.elasticsearch.index.mapper.xcontent.GeoPointFieldMapper;, +        FieldMapper mapper = mapperService.smartNameFieldMapper(fieldName + GeoPointFieldMapper.Names.LAT_SUFFIX);, +        mapper = mapperService.smartNameFieldMapper(fieldName + GeoPointFieldMapper.Names.LON_SUFFIX);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/AbstractFieldMapper.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.xcontent;, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.Fieldable;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.*;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.common.lucene.search.TermFilter;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.field.data.FieldDataType;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.index.mapper.FieldMapperListener;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.index.mapper.MergeMappingException;, +, +import java.io.IOException;, +, +/**, + * @author kimchy (shay.banon), + */, +public abstract class AbstractFieldMapper<T> implements FieldMapper<T>, XContentMapper {, +, +    public static class Defaults {, +        public static final Field.Index INDEX = Field.Index.ANALYZED;, +        public static final Field.Store STORE = Field.Store.NO;, +        public static final Field.TermVector TERM_VECTOR = Field.TermVector.NO;, +        public static final float BOOST = 1.0f;, +        public static final boolean OMIT_NORMS = false;, +        public static final boolean OMIT_TERM_FREQ_AND_POSITIONS = false;, +    }, +, +    public abstract static class OpenBuilder<T extends Builder, Y extends AbstractFieldMapper> extends AbstractFieldMapper.Builder<T, Y> {, +, +        protected OpenBuilder(String name) {, +            super(name);, +        }, +, +        @Override public T index(Field.Index index) {, +            return super.index(index);, +        }, +, +        @Override public T store(Field.Store store) {, +            return super.store(store);, +        }, +, +        @Override public T termVector(Field.TermVector termVector) {, +            return super.termVector(termVector);, +        }, +, +        @Override public T boost(float boost) {, +            return super.boost(boost);, +        }, +, +        @Override public T omitNorms(boolean omitNorms) {, +            return super.omitNorms(omitNorms);, +        }, +, +        @Override public T omitTermFreqAndPositions(boolean omitTermFreqAndPositions) {, +            return super.omitTermFreqAndPositions(omitTermFreqAndPositions);, +        }, +, +        @Override public T indexName(String indexName) {, +            return super.indexName(indexName);, +        }, +, +        @Override public T indexAnalyzer(NamedAnalyzer indexAnalyzer) {, +            return super.indexAnalyzer(indexAnalyzer);, +        }, +, +        @Override public T searchAnalyzer(NamedAnalyzer searchAnalyzer) {]