[+++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +|`analyzer` |The analyzer that will be used to analyze the `like text`., +Defaults to the analyzer associated with the first field in `fields`., +++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +|`analyzer` |The analyzer that will be used to analyze the `like text`., +Defaults to the analyzer associated with the first field in `fields`., +++ b/src/main/java/org/elasticsearch/action/termvector/MultiTermVectorsRequest.java, +import org.elasticsearch.action.get.MultiGetRequest;, +    public MultiTermVectorsRequest add(MultiGetRequest.Item item) {, +        requests.add(new TermVectorRequest(item));, +        return this;, +    }, +, +++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +|`analyzer` |The analyzer that will be used to analyze the `like text`., +Defaults to the analyzer associated with the first field in `fields`., +++ b/src/main/java/org/elasticsearch/action/termvector/MultiTermVectorsRequest.java, +import org.elasticsearch.action.get.MultiGetRequest;, +    public MultiTermVectorsRequest add(MultiGetRequest.Item item) {, +        requests.add(new TermVectorRequest(item));, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/termvector/TermVectorFields.java, +        long readOffset = fieldMap.lget();, +        return new TermVector(termVectors, readOffset);, +    }, +, +    @Override, +    public int size() {, +        return fieldMap.size();, +    }, +, +    private final class TermVector extends Terms {, +, +        private final BytesStreamInput perFieldTermVectorInput;, +        private final long readOffset;, +, +        private long numTerms;, +        private boolean hasPositions;, +        private boolean hasOffsets;, +        private boolean hasPayloads;, +        private long sumTotalTermFreq;, +        private long sumDocFreq;, +        private int docCount;, +, +        public TermVector(BytesReference termVectors, long readOffset) throws IOException {, +            this.perFieldTermVectorInput = new BytesStreamInput(termVectors);, +            this.readOffset = readOffset;, +            reset();, +        }, +, +        private void reset() throws IOException {, +            this.perFieldTermVectorInput.reset();, +            this.perFieldTermVectorInput.skip(readOffset);, +            this.numTerms = perFieldTermVectorInput.readVLong();, +            this.hasPositions = perFieldTermVectorInput.readBoolean();, +            this.hasOffsets = perFieldTermVectorInput.readBoolean();, +            this.hasPayloads = perFieldTermVectorInput.readBoolean();, +            this.sumTotalTermFreq = hasFieldStatistic ? readPotentiallyNegativeVLong(perFieldTermVectorInput) : -1;, +            this.sumDocFreq = hasFieldStatistic ? readPotentiallyNegativeVLong(perFieldTermVectorInput) : -1;, +            this.docCount = hasFieldStatistic ? readPotentiallyNegativeVInt(perFieldTermVectorInput) : -1;, +        }, +            // reset before asking for an iterator, +            reset();, +                    final TermVectorDocsAndPosEnum retVal = (reuse instanceof TermVectorDocsAndPosEnum ? (TermVectorDocsAndPosEnum) reuse, +                            : new TermVectorDocsAndPosEnum());, +    private final class TermVectorDocsAndPosEnum extends DocsAndPositionsEnum {, +++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +|`analyzer` |The analyzer that will be used to analyze the `like text`., +Defaults to the analyzer associated with the first field in `fields`., +++ b/src/main/java/org/elasticsearch/action/termvector/MultiTermVectorsRequest.java, +import org.elasticsearch.action.get.MultiGetRequest;, +    public MultiTermVectorsRequest add(MultiGetRequest.Item item) {, +        requests.add(new TermVectorRequest(item));, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/termvector/TermVectorFields.java, +        long readOffset = fieldMap.lget();, +        return new TermVector(termVectors, readOffset);, +    }, +, +    @Override, +    public int size() {, +        return fieldMap.size();, +    }, +, +    private final class TermVector extends Terms {, +, +        private final BytesStreamInput perFieldTermVectorInput;, +        private final long readOffset;, +, +        private long numTerms;, +        private boolean hasPositions;, +        private boolean hasOffsets;, +        private boolean hasPayloads;, +        private long sumTotalTermFreq;, +        private long sumDocFreq;, +        private int docCount;]