[+++ b/build.gradle, +    "org.elasticsearch.xpack.test:feature-aware:${version}": ':x-pack:test:feature-aware',, +    configurations.all { Configuration configuration ->, +      /*, +       * The featureAwarePlugin configuration has a dependency on x-pack:plugin:core and x-pack:plugin:core has a dependency on the, +       * featureAwarePlugin configuration. The below task ordering logic would force :x-pack:plugin:core:test, +       * :x-pack:test:feature-aware:test to depend on each other circularly. We break that cycle here., +       */, +      if (configuration.name == "featureAwarePlugin") {, +        return, +      }, +++ b/build.gradle, +    "org.elasticsearch.xpack.test:feature-aware:${version}": ':x-pack:test:feature-aware',, +    configurations.all { Configuration configuration ->, +      /*, +       * The featureAwarePlugin configuration has a dependency on x-pack:plugin:core and x-pack:plugin:core has a dependency on the, +       * featureAwarePlugin configuration. The below task ordering logic would force :x-pack:plugin:core:test, +       * :x-pack:test:feature-aware:test to depend on each other circularly. We break that cycle here., +       */, +      if (configuration.name == "featureAwarePlugin") {, +        return, +      }, +++ b/docs/reference/mapping/params/properties.asciidoc, +      "manager.name": "Alice White" , +            "field": "employees.age", , +++ b/build.gradle, +    "org.elasticsearch.xpack.test:feature-aware:${version}": ':x-pack:test:feature-aware',, +    configurations.all { Configuration configuration ->, +      /*, +       * The featureAwarePlugin configuration has a dependency on x-pack:plugin:core and x-pack:plugin:core has a dependency on the, +       * featureAwarePlugin configuration. The below task ordering logic would force :x-pack:plugin:core:test, +       * :x-pack:test:feature-aware:test to depend on each other circularly. We break that cycle here., +       */, +      if (configuration.name == "featureAwarePlugin") {, +        return, +      }, +++ b/docs/reference/mapping/params/properties.asciidoc, +      "manager.name": "Alice White" , +            "field": "employees.age", , +++ b/docs/reference/mapping/types/nested.asciidoc, +that allows arrays of objects to be indexed in a way that they can be queried , +independently of each other., +++ b/build.gradle, +    "org.elasticsearch.xpack.test:feature-aware:${version}": ':x-pack:test:feature-aware',, +    configurations.all { Configuration configuration ->, +      /*, +       * The featureAwarePlugin configuration has a dependency on x-pack:plugin:core and x-pack:plugin:core has a dependency on the, +       * featureAwarePlugin configuration. The below task ordering logic would force :x-pack:plugin:core:test, +       * :x-pack:test:feature-aware:test to depend on each other circularly. We break that cycle here., +       */, +      if (configuration.name == "featureAwarePlugin") {, +        return, +      }, +++ b/docs/reference/mapping/params/properties.asciidoc, +      "manager.name": "Alice White" , +            "field": "employees.age", , +++ b/docs/reference/mapping/types/nested.asciidoc, +that allows arrays of objects to be indexed in a way that they can be queried , +independently of each other., +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, +import org.apache.lucene.analysis.Analyzer;, +import org.elasticsearch.index.analysis.AnalyzerProvider;, +import org.elasticsearch.index.analysis.PreBuiltAnalyzerProviderFactory;, +import org.elasticsearch.indices.analysis.PreBuiltCacheFactory.CachingStrategy;, +    public Map<String, AnalysisProvider<AnalyzerProvider<? extends Analyzer>>> getAnalyzers() {, +        Map<String, AnalysisProvider<AnalyzerProvider<? extends Analyzer>>> analyzers = new TreeMap<>();, +        analyzers.put("fingerprint", FingerprintAnalyzerProvider::new);, +        analyzers.put("standard_html_strip", StandardHtmlStripAnalyzerProvider::new);, +        analyzers.put("pattern", PatternAnalyzerProvider::new);, +        return analyzers;, +    }, +, +    @Override, +    public List<PreBuiltAnalyzerProviderFactory> getPreBuiltAnalyzerProviderFactories() {, +        List<PreBuiltAnalyzerProviderFactory> analyzers = new ArrayList<>();, +        analyzers.add(new PreBuiltAnalyzerProviderFactory("standard_html_strip", CachingStrategy.LUCENE,, +            version -> new StandardHtmlStripAnalyzer(CharArraySet.EMPTY_SET)));, +        analyzers.add(new PreBuiltAnalyzerProviderFactory("pattern", CachingStrategy.ELASTICSEARCH, version ->, +            new PatternAnalyzer(Regex.compile("\\W+" /*PatternAnalyzer.NON_WORD_PATTERN*/, null), true, CharArraySet.EMPTY_SET)));, +        return analyzers;, +    }, +, +    @Override, +++ b/build.gradle, +    "org.elasticsearch.xpack.test:feature-aware:${version}": ':x-pack:test:feature-aware',, +    configurations.all { Configuration configuration ->, +      /*, +       * The featureAwarePlugin configuration has a dependency on x-pack:plugin:core and x-pack:plugin:core has a dependency on the, +       * featureAwarePlugin configuration. The below task ordering logic would force :x-pack:plugin:core:test, +       * :x-pack:test:feature-aware:test to depend on each other circularly. We break that cycle here., +       */, +      if (configuration.name == "featureAwarePlugin") {, +        return, +      }, +++ b/docs/reference/mapping/params/properties.asciidoc, +      "manager.name": "Alice White" , +            "field": "employees.age", , +++ b/docs/reference/mapping/types/nested.asciidoc, +that allows arrays of objects to be indexed in a way that they can be queried , +independently of each other.]