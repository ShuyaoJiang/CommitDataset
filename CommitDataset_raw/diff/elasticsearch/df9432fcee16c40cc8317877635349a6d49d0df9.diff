[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings, Collections.EMPTY_LIST);, +            SimilarityService similarityService = new SimilarityService(indexSettings, Collections.EMPTY_MAP);, +, +, +            try (AnalysisService analysisService = new FakeAnalysisService(indexSettings)) {, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(IndexSettings indexSettings) {, +            super(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings, Collections.EMPTY_LIST);, +            SimilarityService similarityService = new SimilarityService(indexSettings, Collections.EMPTY_MAP);, +, +, +            try (AnalysisService analysisService = new FakeAnalysisService(indexSettings)) {, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(IndexSettings indexSettings) {, +            super(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +    public InetAddress[] resolveBindHostAddress(String bindHost) throws IOException {, +        if (bindHost == null) {, +            bindHost = settings.get(GLOBAL_NETWORK_BINDHOST_SETTING, settings.get(GLOBAL_NETWORK_HOST_SETTING));, +        if (bindHost == null) {, +        if (bindHost == null) {, +            bindHost = DEFAULT_NETWORK_HOST;, +        InetAddress addresses[] = resolveInetAddress(bindHost);, +        if (addresses != null) {, +    public InetAddress resolvePublishHostAddress(String publishHost) throws IOException {, +        if (publishHost == null) {, +            publishHost = settings.get(GLOBAL_NETWORK_PUBLISHHOST_SETTING, settings.get(GLOBAL_NETWORK_HOST_SETTING));, +        if (publishHost == null) {, +        if (publishHost == null) {, +            publishHost = DEFAULT_NETWORK_HOST;, +        InetAddress address = resolveInetAddress(publishHost)[0];, +        // try to deal with some (mis)configuration, +        if (address != null) {, +            // wildcard address, probably set by network.host, +                InetAddress old = address;, +                address = NetworkUtils.getFirstNonLoopbackAddresses()[0];, +                logger.warn("publish address: {{}} is a wildcard address, falling back to first non-loopback: {{}}", , +                            NetworkAddress.format(old), NetworkAddress.format(address));, +        return address;, +    }, +    private InetAddress[] resolveInetAddress(String host) throws IOException {, +                case "non_loopback":, +                    return NetworkUtils.getFirstNonLoopbackAddresses();, +                case "non_loopback:ipv4":, +                    return NetworkUtils.filterIPV4(NetworkUtils.getFirstNonLoopbackAddresses());, +                case "non_loopback:ipv6":, +                    return NetworkUtils.filterIPV6(NetworkUtils.getFirstNonLoopbackAddresses());, +        return NetworkUtils.getAllByName(host);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings, Collections.EMPTY_LIST);, +            SimilarityService similarityService = new SimilarityService(indexSettings, Collections.EMPTY_MAP);, +, +, +            try (AnalysisService analysisService = new FakeAnalysisService(indexSettings)) {, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(IndexSettings indexSettings) {, +            super(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +    public InetAddress[] resolveBindHostAddress(String bindHost) throws IOException {, +        if (bindHost == null) {, +            bindHost = settings.get(GLOBAL_NETWORK_BINDHOST_SETTING, settings.get(GLOBAL_NETWORK_HOST_SETTING));, +        if (bindHost == null) {, +        if (bindHost == null) {, +            bindHost = DEFAULT_NETWORK_HOST;, +        InetAddress addresses[] = resolveInetAddress(bindHost);, +        if (addresses != null) {, +    public InetAddress resolvePublishHostAddress(String publishHost) throws IOException {, +        if (publishHost == null) {, +            publishHost = settings.get(GLOBAL_NETWORK_PUBLISHHOST_SETTING, settings.get(GLOBAL_NETWORK_HOST_SETTING));, +        if (publishHost == null) {, +        if (publishHost == null) {, +            publishHost = DEFAULT_NETWORK_HOST;, +        InetAddress address = resolveInetAddress(publishHost)[0];, +        // try to deal with some (mis)configuration, +        if (address != null) {, +            // wildcard address, probably set by network.host, +                InetAddress old = address;, +                address = NetworkUtils.getFirstNonLoopbackAddresses()[0];, +                logger.warn("publish address: {{}} is a wildcard address, falling back to first non-loopback: {{}}", , +                            NetworkAddress.format(old), NetworkAddress.format(address));, +        return address;, +    }, +    private InetAddress[] resolveInetAddress(String host) throws IOException {, +                case "non_loopback":, +                    return NetworkUtils.getFirstNonLoopbackAddresses();, +                case "non_loopback:ipv4":, +                    return NetworkUtils.filterIPV4(NetworkUtils.getFirstNonLoopbackAddresses());, +                case "non_loopback:ipv6":, +                    return NetworkUtils.filterIPV6(NetworkUtils.getFirstNonLoopbackAddresses());, +        return NetworkUtils.getAllByName(host);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java]