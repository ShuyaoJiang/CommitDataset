[+++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.common.Nullable;, +                    removeSnapshotFromClusterState(snapshot.snapshotId(), null, t, new CleanupAfterErrorListener(snapshot, true, userCreateSnapshotListener, t));, +            removeSnapshotFromClusterState(snapshot.snapshotId(), null, t, new CleanupAfterErrorListener(snapshot, snapshotCreated, userCreateSnapshotListener, t));, +        }, +    }, +, +    private class CleanupAfterErrorListener implements ActionListener<SnapshotInfo> {, +, +        private final SnapshotsInProgress.Entry snapshot;, +        private final boolean snapshotCreated;, +        private final CreateSnapshotListener userCreateSnapshotListener;, +        private final Throwable t;, +, +        public CleanupAfterErrorListener(SnapshotsInProgress.Entry snapshot, boolean snapshotCreated, CreateSnapshotListener userCreateSnapshotListener, Throwable t) {, +            this.snapshot = snapshot;, +            this.snapshotCreated = snapshotCreated;, +            this.userCreateSnapshotListener = userCreateSnapshotListener;, +            this.t = t;, +        }, +, +        @Override, +        public void onResponse(SnapshotInfo snapshotInfo) {, +            cleanupAfterError();, +        }, +, +        @Override, +        public void onFailure(Throwable e) {, +            cleanupAfterError();, +        }, +, +        private void cleanupAfterError() {, +                    repositoriesService.repository(snapshot.snapshotId().getRepository()).finalizeSnapshot(, +                        snapshot.snapshotId(), snapshot.indices(), snapshot.startTime(), ExceptionsHelper.detailedMessage(t), 0, Collections.<SnapshotShardFailure>emptyList());, +, +        removeSnapshotFromClusterState(snapshotId, snapshot, t, null);, +    }, +, +    /**, +     * Removes record of running snapshot from cluster state and notifies the listener when this action is complete, +     *, +     * @param snapshotId snapshot id, +     * @param snapshot   snapshot info if snapshot was successful, +     * @param t          exception if snapshot failed, +     * @param listener   listener to notify when snapshot information is removed from the cluster state, +     */, +    private void removeSnapshotFromClusterState(final SnapshotId snapshotId, final SnapshotInfo snapshot, final Throwable t,, +                                                @Nullable ActionListener<SnapshotInfo> listener) {, +                if (listener != null) {, +                    listener.onFailure(t);, +                }, +                if (listener != null) {, +                    listener.onResponse(snapshot);, +                }]