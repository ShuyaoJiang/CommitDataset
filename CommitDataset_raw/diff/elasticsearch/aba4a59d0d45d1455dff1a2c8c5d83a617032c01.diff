[+++ b/server/src/main/java/org/elasticsearch/index/search/NestedHelper.java, +import org.apache.lucene.index.PrefixCodedTerms;, +import org.apache.lucene.search.TermInSetQuery;, +            // We only handle term(s) queries and range queries, which should already, +        }  else if (query instanceof TermInSetQuery) {, +            PrefixCodedTerms terms = ((TermInSetQuery) query).getTermData();, +            if (terms.size() > 0) {, +                PrefixCodedTerms.TermIterator it = terms.iterator();, +                it.next();, +                return mightMatchNestedDocs(it.field());, +            } else {, +                return false;, +            }, +        } else if (query instanceof TermInSetQuery) {, +            PrefixCodedTerms terms = ((TermInSetQuery) query).getTermData();, +            if (terms.size() > 0) {, +                PrefixCodedTerms.TermIterator it = terms.iterator();, +                it.next();, +                return mightMatchNonNestedDocs(it.field(), nestedPath);, +            } else {, +                return false;, +            }, +++ b/server/src/main/java/org/elasticsearch/index/search/NestedHelper.java, +import org.apache.lucene.index.PrefixCodedTerms;, +import org.apache.lucene.search.TermInSetQuery;, +            // We only handle term(s) queries and range queries, which should already, +        }  else if (query instanceof TermInSetQuery) {, +            PrefixCodedTerms terms = ((TermInSetQuery) query).getTermData();, +            if (terms.size() > 0) {, +                PrefixCodedTerms.TermIterator it = terms.iterator();, +                it.next();, +                return mightMatchNestedDocs(it.field());, +            } else {, +                return false;, +            }, +        } else if (query instanceof TermInSetQuery) {, +            PrefixCodedTerms terms = ((TermInSetQuery) query).getTermData();, +            if (terms.size() > 0) {, +                PrefixCodedTerms.TermIterator it = terms.iterator();, +                it.next();, +                return mightMatchNonNestedDocs(it.field(), nestedPath);, +            } else {, +                return false;, +            }, +++ b/server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java, +import java.util.Collections;, +    public void testTermsQuery() {, +        Query termsQuery = mapperService.fullName("foo").termsQuery(Collections.singletonList("bar"), null);, +        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested1"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested2"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested3"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested_missing"));, +, +        termsQuery = mapperService.fullName("nested1.foo").termsQuery(Collections.singletonList("bar"), null);, +        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));, +        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested1"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested2"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested3"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested_missing"));, +, +        termsQuery = mapperService.fullName("nested2.foo").termsQuery(Collections.singletonList("bar"), null);, +        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested1"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested2"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested3"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested_missing"));, +, +        termsQuery = mapperService.fullName("nested3.foo").termsQuery(Collections.singletonList("bar"), null);, +        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested1"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested2"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested3"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, "nested_missing"));, +    }, +]