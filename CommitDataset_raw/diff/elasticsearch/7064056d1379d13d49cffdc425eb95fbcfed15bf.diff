[+++ b/rest-api-spec/test/indices.get_field_mapping/10_basic.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/10_basic.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/20_missing_field.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/10_basic.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/20_missing_field.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/30_missing_type.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/10_basic.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/20_missing_field.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/30_missing_type.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.mapping.get.*;, +        registerAction(GetFieldMappingsAction.INSTANCE, TransportGetFieldMappingsAction.class, TransportGetFieldMappingsIndexAction.class);, +++ b/rest-api-spec/test/indices.get_field_mapping/10_basic.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/20_missing_field.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/rest-api-spec/test/indices.get_field_mapping/30_missing_type.yaml, +  - do:, +         cluster.health:, +           wait_for_status: yellow, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.mapping.get.*;, +        registerAction(GetFieldMappingsAction.INSTANCE, TransportGetFieldMappingsAction.class, TransportGetFieldMappingsIndexAction.class);, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/GetFieldMappingsIndexRequest.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.indices.mapping.get;, +, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +, +class GetFieldMappingsIndexRequest extends SingleCustomOperationRequest<GetFieldMappingsIndexRequest> {, +, +    private String index;, +, +    private boolean probablySingleFieldRequest;, +    private boolean includeDefaults;, +    private String[] fields = Strings.EMPTY_ARRAY;, +    private String[] types = Strings.EMPTY_ARRAY;, +, +    GetFieldMappingsIndexRequest() {, +    }, +, +    GetFieldMappingsIndexRequest(GetFieldMappingsRequest other, String index, boolean probablySingleFieldRequest) {, +        this.preferLocal(other.local);, +        this.probablySingleFieldRequest = probablySingleFieldRequest;, +        this.includeDefaults = other.includeDefaults();]