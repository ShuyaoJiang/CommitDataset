[+++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +    public FieldDataType(String type, String format) {, +        this(type, format, ImmutableMap.<String, String>of());, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +    public FieldDataType(String type, String format) {, +        this(type, format, ImmutableMap.<String, String>of());, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newByteRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +    public FieldDataType(String type, String format) {, +        this(type, format, ImmutableMap.<String, String>of());, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newByteRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newLongRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +    public FieldDataType(String type, String format) {, +        this(type, format, ImmutableMap.<String, String>of());, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newByteRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newLongRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newDoubleRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +    public FieldDataType(String type, String format) {, +        this(type, format, ImmutableMap.<String, String>of());, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newByteRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newLongRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newDoubleRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newFloatRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +    public FieldDataType(String type, String format) {, +        this(type, format, ImmutableMap.<String, String>of());, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newByteRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newLongRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newDoubleRange((IndexNumericFieldData) fieldData.getForField(this),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context) {, +        return NumericRangeFieldDataFilter.newFloatRange((IndexNumericFieldData) fieldData.getForField(this),]