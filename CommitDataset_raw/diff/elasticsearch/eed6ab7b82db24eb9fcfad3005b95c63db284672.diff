[+++ b/core/src/main/java/org/elasticsearch/search/builder/NewSearchSourceBuilder.java, +/**, + *, + */, +public final class NewSearchSourceBuilder extends ToXContentToBytes implements Writeable<NewSearchSourceBuilder> {, +     * Sets the search query for this request., +     * Gets the query for this request, +     */, +    public QueryBuilder<?> query() {, +        return queryBuilder;, +    }, +, +    /**, +     * Gets the post filter for this request, +     */, +    public QueryBuilder<?> postFilter() {, +        return postQueryBuilder;, +    }, +, +    /**, +     * Gets the from index to start the search from., +     **/, +    public int from() {, +        return from;, +    }, +, +    /**, +     * Gets the number of search hits to return., +     */, +    public int size() {, +        return size;, +    }, +, +    /**, +     * Gets the minimum score below which docs will be filtered out., +     */, +    public float minScore() {, +        return minScore;, +    }, +, +    /**, +     * Indicates whether each search hit will be returned with an explanation of, +     * the hit (ranking), +     */, +    public Boolean explain() {, +        return explain;, +    }, +, +    /**, +     * Indicates whether the document's version will be included in the search, +     * hits., +     */, +    public Boolean version() {, +        return version;, +    }, +, +    /**, +     * Gets the timeout to control how long search is allowed to take., +    public long timeoutInMillis() {, +        return timeoutInMillis;, +     * Gets the number of documents to terminate after collecting., +     */, +    public int terminateAfter() {, +        return terminateAfter;, +    }, +, +    /**, +     * Gets the bytes representing the sort builders for this request., +     */, +    public List<BytesReference> sorts() {, +        return sorts;, +    }, +, +    /**, +     * Indicates whether scores will be tracked for this request., +     */, +    public boolean trackScores() {, +        return trackScores;, +    }, +, +    /**, +     * Add an aggregation to perform as part of the search., +     * Gets the bytes representing the aggregation builders for this request., +     */, +    public List<BytesReference> aggregations() {, +        return aggregations;, +    }, +, +    /**, +     * Get the rescore window size for rescores that don't specify their window., +     */, +    public int defaultRescoreWindowSize() {, +        return defaultRescoreWindowSize;, +    }, +, +    /**, +    /**, +     * Gets the bytes representing the hightlighter builder for this request., +     */, +    public BytesReference highlight() {]