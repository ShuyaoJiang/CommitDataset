[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +                // we use update doc and not addDoc since we might get duplicates when using transient translog, +                writer.updateDocument(create.uid(), create.doc(), create.analyzer());, +, +            if (flush.full()) {, +                } finally {, +                    rwl.writeLock().unlock();, +                }, +                rwl.readLock().lock();, +                try {, +                    if (indexWriter == null) {, +                        throw new EngineClosedException(shardId, failedEngine);, +                    }, +                    if (disableFlushCounter > 0) {, +                        throw new FlushNotAllowedEngineException(shardId, "Recovery is in progress, flush is not allowed");, +                    }, +, +                            translog.newTransientTranslog(translogId);, +                            translog.makeTransientCurrent();, +                    rwl.readLock().unlock();, +            }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +                // we use update doc and not addDoc since we might get duplicates when using transient translog, +                writer.updateDocument(create.uid(), create.doc(), create.analyzer());, +, +            if (flush.full()) {, +                } finally {, +                    rwl.writeLock().unlock();, +                }, +                rwl.readLock().lock();, +                try {, +                    if (indexWriter == null) {, +                        throw new EngineClosedException(shardId, failedEngine);, +                    }, +                    if (disableFlushCounter > 0) {, +                        throw new FlushNotAllowedEngineException(shardId, "Recovery is in progress, flush is not allowed");, +                    }, +, +                            translog.newTransientTranslog(translogId);, +                            translog.makeTransientCurrent();, +                    rwl.readLock().unlock();, +            }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +     *, +     * <p>Can only be called by one thread., +     * Creates a new transient translog, where added ops will be added to the current one, and to, +     * it., +     *, +     * <p>Can only be called by one thread., +     */, +    void newTransientTranslog(long id) throws TranslogException;, +, +    /**, +     * Swaps the transient translog to be the current one., +     *, +     * <p>Can only be called by one thread., +     */, +    void makeTransientCurrent();, +, +    /**, +     *, +     * <p>Can only be called by one thread., +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +                // we use update doc and not addDoc since we might get duplicates when using transient translog, +                writer.updateDocument(create.uid(), create.doc(), create.analyzer());, +, +            if (flush.full()) {, +                } finally {, +                    rwl.writeLock().unlock();, +                }, +                rwl.readLock().lock();, +                try {, +                    if (indexWriter == null) {, +                        throw new EngineClosedException(shardId, failedEngine);, +                    }, +                    if (disableFlushCounter > 0) {, +                        throw new FlushNotAllowedEngineException(shardId, "Recovery is in progress, flush is not allowed");, +                    }, +, +                            translog.newTransientTranslog(translogId);, +                            translog.makeTransientCurrent();, +                    rwl.readLock().unlock();, +            }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +     *, +     * <p>Can only be called by one thread., +     * Creates a new transient translog, where added ops will be added to the current one, and to, +     * it., +     *, +     * <p>Can only be called by one thread., +     */, +    void newTransientTranslog(long id) throws TranslogException;, +, +    /**, +     * Swaps the transient translog to be the current one., +     *, +     * <p>Can only be called by one thread.]