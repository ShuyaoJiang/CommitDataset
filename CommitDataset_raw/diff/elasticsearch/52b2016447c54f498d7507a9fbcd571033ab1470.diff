[+++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    String PARENT = "parent";, +    String FIELDDATA = "fielddata";, +    String REQUEST = "request";, +    String IN_FLIGHT_REQUESTS = "in_flight_requests";, +    enum Type {, +    void circuitBreak(String fieldName, long bytesNeeded);, +    double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    long addWithoutBreaking(long bytes);, +    long getUsed();, +    long getLimit();, +    double getOverhead();, +    long getTrippedCount();, +    String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    String PARENT = "parent";, +    String FIELDDATA = "fielddata";, +    String REQUEST = "request";, +    String IN_FLIGHT_REQUESTS = "in_flight_requests";, +    enum Type {, +    void circuitBreak(String fieldName, long bytesNeeded);, +    double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    long addWithoutBreaking(long bytes);, +    long getUsed();, +    long getLimit();, +    double getOverhead();, +    long getTrippedCount();, +    String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    String PARENT = "parent";, +    String FIELDDATA = "fielddata";, +    String REQUEST = "request";, +    String IN_FLIGHT_REQUESTS = "in_flight_requests";, +    enum Type {, +    void circuitBreak(String fieldName, long bytesNeeded);, +    double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    long addWithoutBreaking(long bytes);, +    long getUsed();, +    long getLimit();, +    double getOverhead();, +    long getTrippedCount();, +    String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/NoopCircuitBreaker.java, +    public static final int LIMIT = -1;, +        return LIMIT;, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    String PARENT = "parent";, +    String FIELDDATA = "fielddata";, +    String REQUEST = "request";, +    String IN_FLIGHT_REQUESTS = "in_flight_requests";, +    enum Type {, +    void circuitBreak(String fieldName, long bytesNeeded);, +    double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    long addWithoutBreaking(long bytes);, +    long getUsed();, +    long getLimit();, +    double getOverhead();, +    long getTrippedCount();, +    String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/NoopCircuitBreaker.java, +    public static final int LIMIT = -1;, +        return LIMIT;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING,, +                    HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_OVERHEAD_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    String PARENT = "parent";, +    String FIELDDATA = "fielddata";, +    String REQUEST = "request";, +    String IN_FLIGHT_REQUESTS = "in_flight_requests";, +    enum Type {, +    void circuitBreak(String fieldName, long bytesNeeded);, +    double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    long addWithoutBreaking(long bytes);, +    long getUsed();, +    long getLimit();, +    double getOverhead();, +    long getTrippedCount();, +    String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/NoopCircuitBreaker.java, +    public static final int LIMIT = -1;, +        return LIMIT;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING,, +                    HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_OVERHEAD_SETTING,, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +    private final ConcurrentMap<String, CircuitBreaker> breakers = new ConcurrentHashMap<>();, +    public static final Setting<ByteSizeValue> IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING =, +        Setting.byteSizeSetting("network.breaker.inflight_requests.limit", "100%", Property.Dynamic, Property.NodeScope);, +    public static final Setting<Double> IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_OVERHEAD_SETTING =, +        Setting.doubleSetting("network.breaker.inflight_requests.overhead", 1.0d, 0.0d, Property.Dynamic, Property.NodeScope);, +    public static final Setting<CircuitBreaker.Type> IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_TYPE_SETTING =]