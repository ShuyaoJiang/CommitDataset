[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDateUtils.java, +import java.time.LocalDate;, +    private JdbcDateUtils() {}, +    private static final LocalDate EPOCH = LocalDate.of(1970, 1, 1);, +        ZonedDateTime zdt = asDateTime(date);, +        return new Time(zdt.toLocalTime().atDate(EPOCH).atZone(zdt.getZone()).toInstant().toEpochMilli());, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDateUtils.java, +import java.time.LocalDate;, +    private JdbcDateUtils() {}, +    private static final LocalDate EPOCH = LocalDate.of(1970, 1, 1);, +        ZonedDateTime zdt = asDateTime(date);, +        return new Time(zdt.toLocalTime().atDate(EPOCH).atZone(zdt.getZone()).toInstant().toEpochMilli());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/JdbcTestUtils.java, +import java.sql.Date;, +import java.sql.Time;, +import java.time.LocalDate;, +final class JdbcTestUtils {, +    private JdbcTestUtils() {}, +    private static final int MAX_WIDTH = 20;, +    static final String SQL_TRACE = "org.elasticsearch.xpack.sql:TRACE";, +    static final String JDBC_TIMEZONE = "timezone";, +    static final LocalDate EPOCH = LocalDate.of(1970, 1, 1);, +    static void logResultSetMetadata(ResultSet rs, Logger logger) throws SQLException {, +    static void logResultSetData(ResultSet rs, Logger log) throws SQLException {, +            log.info(rowAsString(rs, columns));, +    static String resultSetCurrentData(ResultSet rs) throws SQLException {, +        return rowAsString(rs, metaData.getColumnCount());, +    }, +    private static String rowAsString(ResultSet rs, int columns) throws SQLException {, +        StringBuilder column = new StringBuilder();, +    static String of(long millis, String zoneId) {, +    static List<URL> classpathResources(String pattern) throws Exception {, +, +    static Date asDate(long millis, ZoneId zoneId) {, +        return new java.sql.Date(, +            ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), zoneId), +                .toLocalDate().atStartOfDay(zoneId).toInstant().toEpochMilli());, +    }, +, +    static Time asTime(long millis, ZoneId zoneId) {, +        return new Time(ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), zoneId), +                .toLocalTime().atDate(JdbcTestUtils.EPOCH).atZone(zoneId).toInstant().toEpochMilli());, +    }, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDateUtils.java, +import java.time.LocalDate;, +    private JdbcDateUtils() {}, +    private static final LocalDate EPOCH = LocalDate.of(1970, 1, 1);, +        ZonedDateTime zdt = asDateTime(date);, +        return new Time(zdt.toLocalTime().atDate(EPOCH).atZone(zdt.getZone()).toInstant().toEpochMilli());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/JdbcTestUtils.java, +import java.sql.Date;, +import java.sql.Time;, +import java.time.LocalDate;, +final class JdbcTestUtils {, +    private JdbcTestUtils() {}, +    private static final int MAX_WIDTH = 20;, +    static final String SQL_TRACE = "org.elasticsearch.xpack.sql:TRACE";, +    static final String JDBC_TIMEZONE = "timezone";, +    static final LocalDate EPOCH = LocalDate.of(1970, 1, 1);, +    static void logResultSetMetadata(ResultSet rs, Logger logger) throws SQLException {, +    static void logResultSetData(ResultSet rs, Logger log) throws SQLException {, +            log.info(rowAsString(rs, columns));, +    static String resultSetCurrentData(ResultSet rs) throws SQLException {, +        return rowAsString(rs, metaData.getColumnCount());, +    }, +    private static String rowAsString(ResultSet rs, int columns) throws SQLException {, +        StringBuilder column = new StringBuilder();, +    static String of(long millis, String zoneId) {, +    static List<URL> classpathResources(String pattern) throws Exception {, +, +    static Date asDate(long millis, ZoneId zoneId) {, +        return new java.sql.Date(, +            ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), zoneId), +                .toLocalDate().atStartOfDay(zoneId).toInstant().toEpochMilli());, +    }, +, +    static Time asTime(long millis, ZoneId zoneId) {, +        return new Time(ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), zoneId), +                .toLocalTime().atDate(JdbcTestUtils.EPOCH).atZone(zoneId).toInstant().toEpochMilli());, +    }, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java, +import static org.elasticsearch.xpack.sql.qa.jdbc.JdbcTestUtils.asDate;, +import static org.elasticsearch.xpack.sql.qa.jdbc.JdbcTestUtils.asTime;, +            java.sql.Date expectedDate = asDate(randomLongDate, getZoneFromOffset(randomLongDate));, +            java.sql.Time expectedTime = asTime(randomLongDate, getZoneFromOffset(randomLongDate));, +, +    private ZoneId getZoneFromOffset(Long randomLongDate) {, +        return ZoneId.of(ZoneId.of(timeZoneId).getRules().getOffset(Instant.ofEpochMilli(randomLongDate)).toString());, +    }]