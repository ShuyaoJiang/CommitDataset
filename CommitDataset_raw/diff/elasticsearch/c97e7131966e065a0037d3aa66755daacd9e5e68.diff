[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/core/src/main/java/org/elasticsearch/common/util/IndexFolderUpgrader.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("multiple nodes trying to upgrade [{}] in parallel, retry " +, +                "upgrading with single node", target), exception);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/core/src/main/java/org/elasticsearch/common/util/IndexFolderUpgrader.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("multiple nodes trying to upgrade [{}] in parallel, retry " +, +                "upgrading with single node", target), exception);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +                final Directory finalDirectory = directory;, +                logger.warn((Supplier<?>), +                    () -> new ParameterizedMessage("Tried to query fileLength but file is gone [{}] [{}]", finalDirectory, file), e);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/core/src/main/java/org/elasticsearch/common/util/IndexFolderUpgrader.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("multiple nodes trying to upgrade [{}] in parallel, retry " +, +                "upgrading with single node", target), exception);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +                final Directory finalDirectory = directory;, +                logger.warn((Supplier<?>), +                    () -> new ParameterizedMessage("Tried to query fileLength but file is gone [{}] [{}]", finalDirectory, file), e);, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +            logger.info((Supplier<?>) () -> new ParameterizedMessage("{}: failed to obtain shard lock", shardId), ex);, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("{} unable to acquire shard lock", shardId), ex);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/core/src/main/java/org/elasticsearch/common/util/IndexFolderUpgrader.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("multiple nodes trying to upgrade [{}] in parallel, retry " +, +                "upgrading with single node", target), exception);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +                final Directory finalDirectory = directory;, +                logger.warn((Supplier<?>), +                    () -> new ParameterizedMessage("Tried to query fileLength but file is gone [{}] [{}]", finalDirectory, file), e);, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +            logger.info((Supplier<?>) () -> new ParameterizedMessage("{}: failed to obtain shard lock", shardId), ex);, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("{} unable to acquire shard lock", shardId), ex);, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/core/src/main/java/org/elasticsearch/common/util/IndexFolderUpgrader.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("multiple nodes trying to upgrade [{}] in parallel, retry " +, +                "upgrading with single node", target), exception);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +                final Directory finalDirectory = directory;, +                logger.warn((Supplier<?>), +                    () -> new ParameterizedMessage("Tried to query fileLength but file is gone [{}] [{}]", finalDirectory, file), e);, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +            logger.info((Supplier<?>) () -> new ParameterizedMessage("{}: failed to obtain shard lock", shardId), ex);, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("{} unable to acquire shard lock", shardId), ex);, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +                            logger.warn((Supplier<?>) () -> new ParameterizedMessage("plugin {}, failed to invoke custom onModule method", plugin.v1().getName()), e);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/core/src/main/java/org/elasticsearch/common/util/IndexFolderUpgrader.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("multiple nodes trying to upgrade [{}] in parallel, retry " +, +                "upgrading with single node", target), exception);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +                final Directory finalDirectory = directory;, +                logger.warn((Supplier<?>), +                    () -> new ParameterizedMessage("Tried to query fileLength but file is gone [{}] [{}]", finalDirectory, file), e);, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +            logger.info((Supplier<?>) () -> new ParameterizedMessage("{}: failed to obtain shard lock", shardId), ex);, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("{} unable to acquire shard lock", shardId), ex);, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("ignore exception while checking if shard {} is inactive", shard.shardId()), e);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +                            logger.warn((Supplier<?>) () -> new ParameterizedMessage("plugin {}, failed to invoke custom onModule method", plugin.v1().getName()), e);, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            logger.warn((Supplier<?>) () -> new ParameterizedMessage("cannot read snapshot file [{}]", snapshotId), ex);, +            logger.warn((Supplier<?>) () -> new ParameterizedMessage("cannot read metadata for snapshot [{}]", snapshotId), ex);, +                    logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] [{}] failed to read metadata for index", snapshotId, index.getName()), ex);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/core/src/main/java/org/elasticsearch/common/util/IndexFolderUpgrader.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("multiple nodes trying to upgrade [{}] in parallel, retry " +, +                "upgrading with single node", target), exception);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +                final Directory finalDirectory = directory;, +                logger.warn((Supplier<?>)]