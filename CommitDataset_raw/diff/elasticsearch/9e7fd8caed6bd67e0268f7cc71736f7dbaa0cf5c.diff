[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +, +            sendValidateJoinRequest(stateForJoinValidation, joinRequest, joinCallback);, +        } else {, +            processJoinRequest(joinRequest, joinCallback);, +        }, +    }, +, +    // package private for tests, +    void sendValidateJoinRequest(ClusterState stateForJoinValidation, JoinRequest joinRequest,, +                                        JoinHelper.JoinCallback joinCallback) {, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +, +            sendValidateJoinRequest(stateForJoinValidation, joinRequest, joinCallback);, +        } else {, +            processJoinRequest(joinRequest, joinCallback);, +        }, +    }, +, +    // package private for tests, +    void sendValidateJoinRequest(ClusterState stateForJoinValidation, JoinRequest joinRequest,, +                                        JoinHelper.JoinCallback joinCallback) {, +, +++ b/server/src/test/java/org/elasticsearch/cluster/coordination/ZenDiscoveryIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.coordination;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;, +import org.elasticsearch.action.admin.indices.recovery.RecoveryResponse;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.Priority;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.discovery.Discovery;, +import org.elasticsearch.discovery.DiscoveryStats;, +import org.elasticsearch.discovery.zen.FaultDetection;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.TestCustomMetaData;, +import org.elasticsearch.test.junit.annotations.TestLogging;, +import org.elasticsearch.transport.RemoteTransportException;, +, +import java.io.IOException;, +import java.util.EnumSet;, +import java.util.Optional;, +import java.util.concurrent.CompletableFuture;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.either;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.notNullValue;, +, +@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0), +@TestLogging("_root:DEBUG"), +public class ZenDiscoveryIT extends ESIntegTestCase {, +, +    public void testNoShardRelocationsOccurWhenElectedMasterNodeFails() throws Exception {, +        Settings defaultSettings = Settings.builder(), +                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), "1s"), +                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), "1"), +                .build();, +, +        Settings masterNodeSettings = Settings.builder(), +                .put(Node.NODE_DATA_SETTING.getKey(), false), +                .put(defaultSettings), +                .build();]