[+++ b/docs/reference/docs/update.asciidoc, +By default if `doc` is specified then the document is always updated even, +if the merging process doesn't cause any changes.  Specifying `detect_noop`, +as `true` will cause Elasticsearch to check if there are changes and, if, +there aren't, turn the update request into a noop. For example:, +[source,js], +--------------------------------------------------, +curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{, +    "doc" : {, +        "name" : "new_name", +    },, +    "detect_noop": true, +}', +--------------------------------------------------, +, +If `name` was `new_name` before the request was sent then the entire update, +request is ignored., +, +++ b/docs/reference/docs/update.asciidoc, +By default if `doc` is specified then the document is always updated even, +if the merging process doesn't cause any changes.  Specifying `detect_noop`, +as `true` will cause Elasticsearch to check if there are changes and, if, +there aren't, turn the update request into a noop. For example:, +[source,js], +--------------------------------------------------, +curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{, +    "doc" : {, +        "name" : "new_name", +    },, +    "detect_noop": true, +}', +--------------------------------------------------, +, +If `name` was `new_name` before the request was sent then the entire update, +request is ignored., +, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.indexingService().noopUpdate(updateRequest.type());, +++ b/docs/reference/docs/update.asciidoc, +By default if `doc` is specified then the document is always updated even, +if the merging process doesn't cause any changes.  Specifying `detect_noop`, +as `true` will cause Elasticsearch to check if there are changes and, if, +there aren't, turn the update request into a noop. For example:, +[source,js], +--------------------------------------------------, +curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{, +    "doc" : {, +        "name" : "new_name", +    },, +    "detect_noop": true, +}', +--------------------------------------------------, +, +If `name` was `new_name` before the request was sent then the entire update, +request is ignored., +, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.indexingService().noopUpdate(updateRequest.type());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +import org.elasticsearch.indices.IndicesService;, +    private final IndicesService indicesService;, +                                 UpdateHelper updateHelper, ActionFilters actionFilters, IndicesService indicesService) {, +        this.indicesService = indicesService;, +                indicesService.indexService(request.index()).shard(request.shardId()).indexingService().noopUpdate(request.type());, +++ b/docs/reference/docs/update.asciidoc, +By default if `doc` is specified then the document is always updated even, +if the merging process doesn't cause any changes.  Specifying `detect_noop`, +as `true` will cause Elasticsearch to check if there are changes and, if, +there aren't, turn the update request into a noop. For example:, +[source,js], +--------------------------------------------------, +curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{, +    "doc" : {, +        "name" : "new_name", +    },, +    "detect_noop": true, +}', +--------------------------------------------------, +, +If `name` was `new_name` before the request was sent then the entire update, +request is ignored., +, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.indexingService().noopUpdate(updateRequest.type());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +import org.elasticsearch.indices.IndicesService;, +    private final IndicesService indicesService;, +                                 UpdateHelper updateHelper, ActionFilters actionFilters, IndicesService indicesService) {, +        this.indicesService = indicesService;, +                indicesService.indexService(request.index()).shard(request.shardId()).indexingService().noopUpdate(request.type());, +++ b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +            boolean noop = !XContentHelper.update(updatedSourceAsMap, indexRequest.sourceAsMap(), request.detectNoop());, +            // noop could still be true even if detectNoop isn't because update detects empty maps as noops.  BUT we can only, +            // actually turn the update into a noop if detectNoop is true to preserve backwards compatibility and to handle, +            // cases where users repopulating multi-fields or adding synonyms, etc., +            if (request.detectNoop() && noop) {, +                operation = "none";, +            }, +            update.setGetResult(extractGetResult(request, getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()));, +++ b/docs/reference/docs/update.asciidoc]