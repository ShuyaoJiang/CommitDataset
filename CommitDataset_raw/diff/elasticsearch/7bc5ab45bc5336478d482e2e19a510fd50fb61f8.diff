[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        protected FieldBased(IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            assert indexService != null;, +            final Key key = notification.getKey();, +            final AtomicFieldData value = notification.getValue();, +            assert sizeInBytes >= 0 || value != null : "Expected size [" + sizeInBytes + "] to be positive or value [" + value + "] to be non-null";, +                    final ShardId shardId = ShardUtils.extractShardId(context.reader());, +                        final IndexShard shard = indexService.shard(shardId.id());, +        public Resident(IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +        public Soft(IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        protected FieldBased(IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            assert indexService != null;, +            final Key key = notification.getKey();, +            final AtomicFieldData value = notification.getValue();, +            assert sizeInBytes >= 0 || value != null : "Expected size [" + sizeInBytes + "] to be positive or value [" + value + "] to be non-null";, +                    final ShardId shardId = ShardUtils.extractShardId(context.reader());, +                        final IndexShard shard = indexService.shard(shardId.id());, +        public Resident(IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +        public Soft(IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +++ b/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java, +    private final Cache<Key, AtomicFieldData> cache;, +        final String size = componentSettings.get("size", "-1");, +        final long sizeInBytes = componentSettings.getAsMemory("size", "-1").bytes();, +        final TimeValue expire = componentSettings.getAsTime("expire", null);, +    public IndexFieldDataCache buildIndexFieldDataCache(IndexService indexService, Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType) {, +        return new IndexFieldCache(cache, indicesFieldDataCacheListener, indexService, index, fieldNames, fieldDataType);, +        final Key key = notification.getKey();, +        final AtomicFieldData value = notification.getValue();, +        assert sizeInBytes >= 0 || value != null : "Expected size [" + sizeInBytes + "] to be positive or value [" + value + "] to be non-null";, +    static class IndexFieldCache implements IndexFieldDataCache, SegmentReader.CoreClosedListener {, +        private final Cache<Key, AtomicFieldData> cache;, +        private final IndicesFieldDataCacheListener indicesFieldDataCacheListener;, +        IndexFieldCache(final Cache<Key, AtomicFieldData> cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener, IndexService indexService, Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType) {, +            this.cache = cache;, +            this.indicesFieldDataCacheListener = indicesFieldDataCacheListener;, +            assert indexService != null;, +                    key.sizeInBytes = fieldData.getMemorySizeInBytes();, +                    final ShardId shardId = ShardUtils.extractShardId(context.reader());, +                        final IndexShard shard = indexService.shard(shardId.id());]