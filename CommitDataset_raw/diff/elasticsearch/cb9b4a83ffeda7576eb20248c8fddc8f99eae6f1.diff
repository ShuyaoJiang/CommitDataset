[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import java.util.Arrays;, +import java.util.stream.Collectors;, +        addIndices(path, searchRequest.indices());, +        addTypes(path, searchRequest.types());, +    private static void addIndices(StringBuilder path, String[] indices) {, +        if (indices == null || indices.length == 0) {, +, +        path.append(Arrays.stream(indices).map(RemoteRequestBuilders::encodeIndex).collect(Collectors.joining(","))).append('/');, +, +    private static String encodeIndex(String s) {, +        if (s.contains("%")) { // already encoded, pass-through to allow this in mixed version clusters, +            checkIndexOrType("Index", s);, +            return s;, +        }, +        try {, +            return URLEncoder.encode(s, "utf-8");, +        } catch (UnsupportedEncodingException e) {, +            throw new RuntimeException(e);, +        }, +    }, +, +    private static void addTypes(StringBuilder path, String[] types) {, +        if (types == null || types.length == 0) {, +            return;, +        }, +        for (String indexOrType : types) {, +            checkIndexOrType("Type", indexOrType);, +        }, +        path.append(Strings.arrayToCommaDelimitedString(types)).append('/');, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import java.util.Arrays;, +import java.util.stream.Collectors;, +        addIndices(path, searchRequest.indices());, +        addTypes(path, searchRequest.types());, +    private static void addIndices(StringBuilder path, String[] indices) {, +        if (indices == null || indices.length == 0) {, +, +        path.append(Arrays.stream(indices).map(RemoteRequestBuilders::encodeIndex).collect(Collectors.joining(","))).append('/');, +, +    private static String encodeIndex(String s) {, +        if (s.contains("%")) { // already encoded, pass-through to allow this in mixed version clusters, +            checkIndexOrType("Index", s);, +            return s;, +        }, +        try {, +            return URLEncoder.encode(s, "utf-8");, +        } catch (UnsupportedEncodingException e) {, +            throw new RuntimeException(e);, +        }, +    }, +, +    private static void addTypes(StringBuilder path, String[] types) {, +        if (types == null || types.length == 0) {, +            return;, +        }, +        for (String indexOrType : types) {, +            checkIndexOrType("Type", indexOrType);, +        }, +        path.append(Strings.arrayToCommaDelimitedString(types)).append('/');, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuildersTests.java, +        assertEquals("/cat%2C/c,d/_search", initialSearch(searchRequest, query, remoteVersion).getEndpoint());, +        assertEquals("/cat%2F/c,d/_search", initialSearch(searchRequest, query, remoteVersion).getEndpoint());, +        assertEquals("/cat%2F,dog/c,d/_search", initialSearch(searchRequest, query, remoteVersion).getEndpoint());, +        // test a specific date math + all characters that need escaping., +        searchRequest.indices("<cat{now/d}>", "<>/{}|+:,");, +        assertEquals("/%3Ccat%7Bnow%2Fd%7D%3E,%3C%3E%2F%7B%7D%7C%2B%3A%2C/c,d/_search",, +            initialSearch(searchRequest, query, remoteVersion).getEndpoint());, +, +        // pass-through if already escaped., +        searchRequest.indices("%2f", "%3a");, +        assertEquals("/%2f,%3a/c,d/_search", initialSearch(searchRequest, query, remoteVersion).getEndpoint());, +, +        // do not allow , and / if already escaped., +        searchRequest.indices("%2fcat,");, +        expectBadStartRequest(searchRequest, "Index", ",", "%2fcat,");, +        searchRequest.indices("%3ccat/");, +        expectBadStartRequest(searchRequest, "Index", "/", "%3ccat/");]