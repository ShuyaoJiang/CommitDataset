[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/ActionStatus.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client.watcher;, +, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +, +import java.io.IOException;, +import java.util.Locale;, +import java.util.Objects;, +, +public class ActionStatus {, +, +    private final AckStatus ackStatus;, +    @Nullable private final Execution lastExecution;, +    @Nullable private final Execution lastSuccessfulExecution;, +    @Nullable private final Throttle lastThrottle;, +, +    public ActionStatus(AckStatus ackStatus,, +                        @Nullable Execution lastExecution,, +                        @Nullable Execution lastSuccessfulExecution,, +                        @Nullable Throttle lastThrottle) {, +        this.ackStatus = ackStatus;, +        this.lastExecution = lastExecution;, +        this.lastSuccessfulExecution = lastSuccessfulExecution;, +        this.lastThrottle = lastThrottle;, +    }, +, +    public AckStatus ackStatus() {, +        return ackStatus;, +    }, +, +    public Execution lastExecution() {, +        return lastExecution;, +    }, +, +    public Execution lastSuccessfulExecution() {, +        return lastSuccessfulExecution;, +    }, +, +    public Throttle lastThrottle() {, +        return lastThrottle;, +    }, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        ActionStatus that = (ActionStatus) o;, +, +        return Objects.equals(ackStatus, that.ackStatus) &&, +                Objects.equals(lastExecution, that.lastExecution) &&, +                Objects.equals(lastSuccessfulExecution, that.lastSuccessfulExecution) &&, +                Objects.equals(lastThrottle, that.lastThrottle);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(ackStatus, lastExecution, lastSuccessfulExecution, lastThrottle);, +    }, +, +    public static ActionStatus parse(String actionId, XContentParser parser) throws IOException {, +        AckStatus ackStatus = null;, +        Execution lastExecution = null;, +        Execution lastSuccessfulExecution = null;, +        Throttle lastThrottle = null;, +, +        String currentFieldName = null;, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (Field.ACK_STATUS.match(currentFieldName, parser.getDeprecationHandler())) {, +                ackStatus = AckStatus.parse(actionId, parser);, +            } else if (Field.LAST_EXECUTION.match(currentFieldName, parser.getDeprecationHandler())) {, +                lastExecution = Execution.parse(actionId, parser);, +            } else if (Field.LAST_SUCCESSFUL_EXECUTION.match(currentFieldName, parser.getDeprecationHandler())) {]