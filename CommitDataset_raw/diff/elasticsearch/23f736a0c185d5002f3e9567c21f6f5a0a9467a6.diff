[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we are not shipping these jars, we act like dumb consumers of these things, +        if (project.path.startsWith(':test:fixtures')) {, +            return, +        }, +            if (configuration.name.endsWith('Fixture')) {, +                // just a self contained test-fixture configuration, likely transitive and hellacious, +                return, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we are not shipping these jars, we act like dumb consumers of these things, +        if (project.path.startsWith(':test:fixtures')) {, +            return, +        }, +            if (configuration.name.endsWith('Fixture')) {, +                // just a self contained test-fixture configuration, likely transitive and hellacious, +                return, +            }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.io.FilePermission;, +import java.io.IOException;, +        // Special handling for broken Hadoop code: "let me execute or my classes will not load", +        // yeah right, REMOVE THIS when hadoop is fixed, +        if (permission instanceof FilePermission && "<<ALL FILES>>".equals(permission.getName())) {, +            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {, +                if ("org.apache.hadoop.util.Shell".equals(element.getClassName()) &&, +                      "runCommand".equals(element.getMethodName())) {, +                    // we found the horrible method: the hack begins!, +                    // force the hadoop code to back down, by throwing an exception that it catches., +                    rethrow(new IOException("no hadoop, you cannot do this."));, +                }, +            }, +        }, +, +    /**, +     * Classy puzzler to rethrow any checked exception as an unchecked one., +     */, +    private static class Rethrower<T extends Throwable> {, +        private void rethrow(Throwable t) throws T {, +            throw (T) t;, +        }, +    }, +, +    /**, +     * Rethrows <code>t</code> (identical object)., +     */, +    private void rethrow(Throwable t) {, +        new Rethrower<Error>().rethrow(t);, +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we are not shipping these jars, we act like dumb consumers of these things, +        if (project.path.startsWith(':test:fixtures')) {, +            return, +        }, +            if (configuration.name.endsWith('Fixture')) {, +                // just a self contained test-fixture configuration, likely transitive and hellacious, +                return, +            }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.io.FilePermission;, +import java.io.IOException;, +        // Special handling for broken Hadoop code: "let me execute or my classes will not load", +        // yeah right, REMOVE THIS when hadoop is fixed, +        if (permission instanceof FilePermission && "<<ALL FILES>>".equals(permission.getName())) {, +            for (StackTraceElement element : Thread.currentThread().getStackTrace()) {, +                if ("org.apache.hadoop.util.Shell".equals(element.getClassName()) &&, +                      "runCommand".equals(element.getMethodName())) {, +                    // we found the horrible method: the hack begins!, +                    // force the hadoop code to back down, by throwing an exception that it catches., +                    rethrow(new IOException("no hadoop, you cannot do this."));, +                }, +            }, +        }, +, +    /**, +     * Classy puzzler to rethrow any checked exception as an unchecked one., +     */, +    private static class Rethrower<T extends Throwable> {, +        private void rethrow(Throwable t) throws T {, +            throw (T) t;, +        }, +    }, +, +    /**, +     * Rethrows <code>t</code> (identical object)., +     */, +    private void rethrow(Throwable t) {, +        new Rethrower<Error>().rethrow(t);, +    }, +, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we are not shipping these jars, we act like dumb consumers of these things, +        if (project.path.startsWith(':test:fixtures')) {, +            return, +        }, +            if (configuration.name.endsWith('Fixture')) {, +                // just a self contained test-fixture configuration, likely transitive and hellacious, +                return]