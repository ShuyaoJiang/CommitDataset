[+++ b/docs/reference/index-modules/translog.asciidoc, +`index.translog.sync_interval`::, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.translog.sync_interval`::, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +, +    /**, +     * read from a file channel into a byte buffer, starting at a certain position.  An EOFException will be thrown if you, +     * attempt to read beyond the end of file., +     *, +     * @param channel         channel to read from, +     * @param channelPosition position to read from, +     * @param dest            destination {@link java.nio.ByteBuffer} to put data in, +     */, +    public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {, +        int read = readFromFileChannel(channel, channelPosition, dest);, +        if (read < 0) {, +            throw new EOFException("read past EOF. pos [" + channelPosition + "] length: [" + dest.limit() + "] end: [" + channel.size() + "]");, +        }, +    }, +, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.translog.sync_interval`::, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +, +    /**, +     * read from a file channel into a byte buffer, starting at a certain position.  An EOFException will be thrown if you, +     * attempt to read beyond the end of file., +     *, +     * @param channel         channel to read from, +     * @param channelPosition position to read from, +     * @param dest            destination {@link java.nio.ByteBuffer} to put data in, +     */, +    public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {, +        int read = readFromFileChannel(channel, channelPosition, dest);, +        if (read < 0) {, +            throw new EOFException("read past EOF. pos [" + channelPosition + "] length: [" + dest.limit() + "] end: [" + channel.size() + "]");, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRefCounted.java, +, +    /** gets the name of this instance */, +    public String getName() {, +        return name;, +    }, +, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.translog.sync_interval`::, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +, +    /**, +     * read from a file channel into a byte buffer, starting at a certain position.  An EOFException will be thrown if you, +     * attempt to read beyond the end of file., +     *, +     * @param channel         channel to read from, +     * @param channelPosition position to read from, +     * @param dest            destination {@link java.nio.ByteBuffer} to put data in, +     */, +    public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {, +        int read = readFromFileChannel(channel, channelPosition, dest);, +        if (read < 0) {, +            throw new EOFException("read past EOF. pos [" + channelPosition + "] length: [" + dest.limit() + "] end: [" + channel.size() + "]");, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRefCounted.java, +, +    /** gets the name of this instance */, +    public String getName() {, +        return name;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ReleasableLock.java, +    /* a per thread boolean indicating the lock is held by it. only works when assertions are enabled */, +    private final ThreadLocal<Boolean> holdingThreads;, +, +        boolean useHoldingThreads = false;, +        assert (useHoldingThreads = true);, +        if (useHoldingThreads) {, +            holdingThreads = new ThreadLocal<>();, +        } else {, +            holdingThreads = null;, +        }, +        assert removeCurrentThread();, +, +        assert addCurrentThread();, +, +    private boolean addCurrentThread() {, +        holdingThreads.set(true);, +        return true;, +    }, +, +    private boolean removeCurrentThread() {, +        holdingThreads.remove();, +        return true;, +    }, +, +    public Boolean isHeldByCurrentThread() {, +        if (holdingThreads == null) {]