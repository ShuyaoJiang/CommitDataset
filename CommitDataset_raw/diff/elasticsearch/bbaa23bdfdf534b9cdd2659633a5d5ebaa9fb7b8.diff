[+++ b/test/framework/src/test/java/org/elasticsearch/test/rest/test/ObjectPathTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.test.rest.Stash;, +import java.io.IOException;, +, +    private static XContentBuilder randomXContentBuilder() throws IOException {, +        //only string based formats are supported, no cbor nor smile, +        XContentType xContentType = randomFrom(XContentType.JSON, XContentType.YAML);, +        return XContentBuilder.builder(XContentFactory.xContent(xContentType));, +    }, +, +        XContentBuilder xContentBuilder = randomXContentBuilder();, +        xContentBuilder.startObject();, +        xContentBuilder.startObject("field1");, +        xContentBuilder.field("field2.field3", "value2");, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        ObjectPath objectPath = ObjectPath.createFromXContent(xContentBuilder.string());, +        assertThat(object, equalTo("value2"));, +    public void testEvaluateObjectPathWithDots() throws Exception {, +        XContentBuilder xContentBuilder = randomXContentBuilder();, +        xContentBuilder.startObject();, +        xContentBuilder.startObject("field1");, +        xContentBuilder.field("field2", "value2");, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        ObjectPath objectPath = ObjectPath.createFromXContent(xContentBuilder.string());, +        assertThat(object, equalTo("value2"));, +        object = objectPath.evaluate("field1.field2.");, +        assertThat(object, equalTo("value2"));, +        object = objectPath.evaluate("field1.field2");, +        assertThat(object, equalTo("value2"));, +        XContentBuilder xContentBuilder = randomXContentBuilder();, +        xContentBuilder.startObject();, +        xContentBuilder.startObject("field1");, +        xContentBuilder.field("field2", 333);, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        ObjectPath objectPath = ObjectPath.createFromXContent(xContentBuilder.string());, +        assertThat(object, equalTo(333));, +        XContentBuilder xContentBuilder = randomXContentBuilder();, +        xContentBuilder.startObject();, +        xContentBuilder.startObject("field1");, +        xContentBuilder.field("field2", 3.55);, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        ObjectPath objectPath = ObjectPath.createFromXContent(xContentBuilder.string());, +        assertThat(object, equalTo(3.55));, +        XContentBuilder xContentBuilder = randomXContentBuilder();, +        xContentBuilder.startObject();, +        xContentBuilder.startObject("field1");, +        xContentBuilder.array("array1", "value1", "value2");, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        ObjectPath objectPath = ObjectPath.createFromXContent(xContentBuilder.string());, +        assertThat(list.get(0), equalTo("value1"));, +        assertThat(list.get(1), equalTo("value2"));, +        object = objectPath.evaluate("field1.array1.1");, +        assertThat(object, equalTo("value2"));, +    @SuppressWarnings("unchecked"), +        XContentBuilder xContentBuilder = randomXContentBuilder();, +        xContentBuilder.startObject();, +        xContentBuilder.startObject("field1");, +        xContentBuilder.startArray("array1");, +        xContentBuilder.startObject();, +        xContentBuilder.field("element", "value1");, +        xContentBuilder.endObject();, +        xContentBuilder.startObject();, +        xContentBuilder.field("element", "value2");, +        xContentBuilder.endObject();, +        xContentBuilder.endArray();, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        ObjectPath objectPath = ObjectPath.createFromXContent(xContentBuilder.string());, +        assertThat(object, equalTo("value2"));, +        object = objectPath.evaluate("");, +        assertThat(object, notNullValue());, +        assertThat(object, instanceOf(Map.class));, +        assertThat(((Map<String, Object>)object).containsKey("field1"), equalTo(true));, +        object = objectPath.evaluate("field1.array2.1.element");, +        XContentBuilder xContentBuilder = randomXContentBuilder();, +        xContentBuilder.startObject();, +        xContentBuilder.startObject("metadata");, +        xContentBuilder.startObject("templates");, +        xContentBuilder.startObject("template_1");, +        xContentBuilder.field("field", "value");, +        xContentBuilder.endObject();, +        xContentBuilder.startObject("template_2");, +        xContentBuilder.field("field", "value");, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        xContentBuilder.endObject();, +        ObjectPath objectPath = ObjectPath.createFromXContent(xContentBuilder.string());, +        XContentBuilder xContentBuilder = randomXContentBuilder();, +        xContentBuilder.startObject();, +        xContentBuilder.startObject("field1");, +        xContentBuilder.startObject("elements");]