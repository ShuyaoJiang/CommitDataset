[+++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.*, +            elasticsearchDistro "org.elasticsearch.distribution.${distro}:elasticsearch:${elasticsearchVersion}", +        /* project.configurations.elasticsearchDistro.singleFile will be an, +          external artifact if this is being run by a plugin not living in the, +          elasticsearch source tree. If this is a plugin built in the, +          elasticsearch source tree or this is a distro in the elasticsearch, +          source tree then this should be the version of elasticsearch built, +          by the source tree. If it isn't then Bad Things(TM) will happen. */, +            case 'rpm':, +                File rpmDatabase = new File(node.baseDir, 'rpm-database'), +                File rpmExtracted = new File(node.baseDir, 'rpm-extracted'), +                /* Delay reading the location of the rpm file until task execution */, +                Object rpm = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                extract = project.tasks.create(name: name, type: Exec, dependsOn: extractDependsOn) {, +                    commandLine 'rpm', '--badreloc', '--nodeps', '--noscripts', '--notriggers',, +                        '--dbpath', rpmDatabase,, +                        '--relocate', "/=${rpmExtracted}",, +                        '-i', rpm, +                    standardOutput = new ByteArrayOutputStream(), +                    errorOutput = standardOutput, +                    /* rpm complains about the database being corrupted and exits. But it gets far, +                      enough for us to use it as an extractor. This is kind of funky but it works, +                      and its how Elasticsearch's maven build used to do it. */, +                    ignoreExitValue true, +                    doLast {, +                        String out = standardOutput.toString(), +                        if (out.indexOf('DB_RUNRECOVERY') < 0) {, +                            throw new GradleException("Didn't detect the usual error message when exracting the rpm. Something went wrong? Output:\n${out}"), +                        }, +                    }, +                }, +                break;, +            case 'deb':, +                /* Delay reading the location of the deb file until task execution */, +                File debExtracted = new File(node.baseDir, 'deb-extracted'), +                Object deb = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                extract = project.tasks.create(name: name, type: Exec, dependsOn: extractDependsOn) {, +                    commandLine 'dpkg-deb', '-x', deb, debExtracted, +                }, +                break;, +            File configFile = new File(node.confDir, 'elasticsearch.yml'), +++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.*, +            elasticsearchDistro "org.elasticsearch.distribution.${distro}:elasticsearch:${elasticsearchVersion}", +        /* project.configurations.elasticsearchDistro.singleFile will be an, +          external artifact if this is being run by a plugin not living in the, +          elasticsearch source tree. If this is a plugin built in the, +          elasticsearch source tree or this is a distro in the elasticsearch, +          source tree then this should be the version of elasticsearch built, +          by the source tree. If it isn't then Bad Things(TM) will happen. */, +            case 'rpm':, +                File rpmDatabase = new File(node.baseDir, 'rpm-database'), +                File rpmExtracted = new File(node.baseDir, 'rpm-extracted'), +                /* Delay reading the location of the rpm file until task execution */, +                Object rpm = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                extract = project.tasks.create(name: name, type: Exec, dependsOn: extractDependsOn) {, +                    commandLine 'rpm', '--badreloc', '--nodeps', '--noscripts', '--notriggers',, +                        '--dbpath', rpmDatabase,, +                        '--relocate', "/=${rpmExtracted}",, +                        '-i', rpm, +                    standardOutput = new ByteArrayOutputStream(), +                    errorOutput = standardOutput, +                    /* rpm complains about the database being corrupted and exits. But it gets far, +                      enough for us to use it as an extractor. This is kind of funky but it works, +                      and its how Elasticsearch's maven build used to do it. */, +                    ignoreExitValue true, +                    doLast {, +                        String out = standardOutput.toString(), +                        if (out.indexOf('DB_RUNRECOVERY') < 0) {, +                            throw new GradleException("Didn't detect the usual error message when exracting the rpm. Something went wrong? Output:\n${out}"), +                        }, +                    }, +                }, +                break;, +            case 'deb':]