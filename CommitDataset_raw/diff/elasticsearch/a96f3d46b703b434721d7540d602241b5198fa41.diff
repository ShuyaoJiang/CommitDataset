[+++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;, +        GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings(indexName).get();, +        Version versionCreated = Version.fromId(Integer.parseInt(getSettingsResponse.getSetting(indexName, "index.version.created")));, +        if (versionCreated.onOrAfter(Version.V_2_4_0)) {, +            searchReq = client().prepareSearch(indexName).setQuery(QueryBuilders.existsQuery("field.with.dots"));, +            searchRsp = searchReq.get();, +            ElasticsearchAssertions.assertNoFailures(searchRsp);, +            assertEquals(numDocs, searchRsp.getHits().getTotalHits());, +        }, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;, +        GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings(indexName).get();, +        Version versionCreated = Version.fromId(Integer.parseInt(getSettingsResponse.getSetting(indexName, "index.version.created")));, +        if (versionCreated.onOrAfter(Version.V_2_4_0)) {, +            searchReq = client().prepareSearch(indexName).setQuery(QueryBuilders.existsQuery("field.with.dots"));, +            searchRsp = searchReq.get();, +            ElasticsearchAssertions.assertNoFailures(searchRsp);, +            assertEquals(numDocs, searchRsp.getHits().getTotalHits());, +        }, +++ b/core/src/test/resources/indices/bwc/index-2.4.0.zip, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;, +        GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings(indexName).get();, +        Version versionCreated = Version.fromId(Integer.parseInt(getSettingsResponse.getSetting(indexName, "index.version.created")));, +        if (versionCreated.onOrAfter(Version.V_2_4_0)) {, +            searchReq = client().prepareSearch(indexName).setQuery(QueryBuilders.existsQuery("field.with.dots"));, +            searchRsp = searchReq.get();, +            ElasticsearchAssertions.assertNoFailures(searchRsp);, +            assertEquals(numDocs, searchRsp.getHits().getTotalHits());, +        }, +++ b/core/src/test/resources/indices/bwc/index-2.4.0.zip, +++ b/core/src/test/resources/indices/bwc/repo-2.4.0.zip, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;, +        GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings(indexName).get();, +        Version versionCreated = Version.fromId(Integer.parseInt(getSettingsResponse.getSetting(indexName, "index.version.created")));, +        if (versionCreated.onOrAfter(Version.V_2_4_0)) {, +            searchReq = client().prepareSearch(indexName).setQuery(QueryBuilders.existsQuery("field.with.dots"));, +            searchRsp = searchReq.get();, +            ElasticsearchAssertions.assertNoFailures(searchRsp);, +            assertEquals(numDocs, searchRsp.getHits().getTotalHits());, +        }, +++ b/core/src/test/resources/indices/bwc/index-2.4.0.zip, +++ b/core/src/test/resources/indices/bwc/repo-2.4.0.zip, +++ b/dev-tools/create_bwc_index.py, +def index_documents(es, index_name, type, num_docs, supports_dots_in_field_names):, +  index(es, index_name, type, num_docs, supports_dots_in_field_names, True), +def index(es, index_name, type, num_docs, supports_dots_in_field_names, flush=False):, +    body = {'string': str(random.randint(0, 100)),, +            'bool' : random.choice([True, False])}, +    if supports_dots_in_field_names:, +      body['field.with.dots'] = str(random.randint(0, 100)), +, +    es.index(index=index_name, doc_type=type, id=id, body=body), +, +    if rarely():, +      es.indices.refresh(index=index_name), +    if rarely() and flush:, +      es.indices.flush(index=index_name, force=frequently()), +, +def reindex_docs(es, index_name, type, num_docs, supports_dots_in_field_names):, +  logging.info('Re-indexing %s docs' % num_docs), +  # reindex some docs after the flush such that we have something in the translog, +  index(es, index_name, type, num_docs, supports_dots_in_field_names), +  return subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,, +                          env=dict(os.environ, ES_JAVA_OPTS='-Dmapper.allow_dots_in_name=true')), +  mappings['doc'] = {'properties' : {}}, +  supports_dots_in_field_names = parse_version(version) >= parse_version("2.4.0"), +  if supports_dots_in_field_names:, +    mappings["doc"]['properties'].update({, +        'field.with.dots': {, +          'type': 'string',, +          'boost': 4, +        }, +      }), +, +    mappings['doc']['properties'].update({, +    }), +  index_documents(client, index_name, 'doc', num_docs, supports_dots_in_field_names), +  return num_docs, supports_dots_in_field_names, +    num_docs, supports_dots_in_field_names = generate_index(client, version, index_name), +    reindex_docs(client, index_name, 'doc', min(100, num_docs), supports_dots_in_field_names)]