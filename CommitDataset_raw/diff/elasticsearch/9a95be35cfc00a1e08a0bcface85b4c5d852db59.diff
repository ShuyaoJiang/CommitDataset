[+++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreContainerTests.java, +, +    protected BlobStore newBlobStore() {, +        return new GoogleCloudStorageBlobStore(Settings.EMPTY, bucket, MockStorage.newStorageClient(bucket, getTestName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreContainerTests.java, +, +    protected BlobStore newBlobStore() {, +        return new GoogleCloudStorageBlobStore(Settings.EMPTY, bucket, MockStorage.newStorageClient(bucket, getTestName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java, +        storage.set(MockStorage.newStorageClient(BUCKET, GoogleCloudStorageBlobStoreRepositoryTests.class.getName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreContainerTests.java, +, +    protected BlobStore newBlobStore() {, +        return new GoogleCloudStorageBlobStore(Settings.EMPTY, bucket, MockStorage.newStorageClient(bucket, getTestName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java, +        storage.set(MockStorage.newStorageClient(BUCKET, GoogleCloudStorageBlobStoreRepositoryTests.class.getName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreTests.java, +    protected BlobStore newBlobStore() {, +        return new GoogleCloudStorageBlobStore(Settings.EMPTY, bucket, MockStorage.newStorageClient(bucket, getTestName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreContainerTests.java, +, +    protected BlobStore newBlobStore() {, +        return new GoogleCloudStorageBlobStore(Settings.EMPTY, bucket, MockStorage.newStorageClient(bucket, getTestName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java, +        storage.set(MockStorage.newStorageClient(BUCKET, GoogleCloudStorageBlobStoreRepositoryTests.class.getName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreTests.java, +    protected BlobStore newBlobStore() {, +        return new GoogleCloudStorageBlobStore(Settings.EMPTY, bucket, MockStorage.newStorageClient(bucket, getTestName()));, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageTestServer.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.repositories.gcs;, +, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.io.Streams;, +import org.elasticsearch.common.path.PathTrie;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.rest.RestUtils;, +, +import java.io.BufferedInputStream;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.nio.charset.StandardCharsets;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonMap;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +, +/**, + * {@link GoogleCloudStorageTestServer} emulates a Google Cloud Storage service through a {@link #handle(String, String, byte[])} method, + * that provides appropriate responses for specific requests like the real Google Cloud platform would do. It is largely based on official, + * documentation available at https://cloud.google.com/storage/docs/json_api/v1/., + */, +public class GoogleCloudStorageTestServer {, +, +    private static byte[] EMPTY_BYTE = new byte[0];, +, +    /** List of the buckets stored on this test server **/, +    private final Map<String, Bucket> buckets = ConcurrentCollections.newConcurrentMap();, +, +    /** Request handlers for the requests made by the Google Cloud Storage client **/, +    private final PathTrie<RequestHandler> handlers;, +, +    /**, +     * Creates a {@link GoogleCloudStorageTestServer} with the default endpoint, +     */, +    GoogleCloudStorageTestServer() {, +        this("https://www.googleapis.com", true);, +    }, +, +    /**, +     * Creates a {@link GoogleCloudStorageTestServer} with a custom endpoint,, +     * potentially prefixing the URL patterns to match with the endpoint name., +     */, +    GoogleCloudStorageTestServer(final String endpoint, final boolean prefixWithEndpoint) {]