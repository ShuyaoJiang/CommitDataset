[+++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +import java.util.Collections;, +    /**, +     * Constructs a node with the given settings., +     *, +     * @param preparedSettings Base settings to configure the node with, +     * @param loadConfigSettings true if settings should also be loaded and merged from configuration files, +     */, +    public Node(Settings preparedSettings, boolean loadConfigSettings) {, +        this(preparedSettings, loadConfigSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, boolean loadConfigSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        this.pluginsService = new PluginsService(tuple.v1(), tuple.v2(), classpathPlugins);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +import java.util.Collections;, +    /**, +     * Constructs a node with the given settings., +     *, +     * @param preparedSettings Base settings to configure the node with, +     * @param loadConfigSettings true if settings should also be loaded and merged from configuration files, +     */, +    public Node(Settings preparedSettings, boolean loadConfigSettings) {, +        this(preparedSettings, loadConfigSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, boolean loadConfigSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        this.pluginsService = new PluginsService(tuple.v1(), tuple.v2(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +    private final List<Tuple<PluginInfo, Plugin>> plugins;, +    private final Map<Plugin, List<OnModuleReference>> onModuleReferences;, +     * @param classpathPlugins Plugins that exist in the classpath which should be loaded, +    public PluginsService(Settings settings, Environment environment, Collection<Class<? extends Plugin>> classpathPlugins) {, +        List<Tuple<PluginInfo, Plugin>> tupleBuilder = new ArrayList<>();, +        // first we load plugins that are on the classpath. this is for tests and transport clients, +        for (Class<? extends Plugin> pluginClass : classpathPlugins) {, +            Plugin plugin = loadPlugin(pluginClass, settings);, +            PluginInfo pluginInfo = new PluginInfo(plugin.name(), plugin.description(), false, "NA", true, pluginClass.getName(), false);, +                logger.trace("plugin loaded from classpath [{}]", pluginInfo);, +        plugins = Collections.unmodifiableList(tupleBuilder);, +                jvmPlugins.put(info.getName(), tuple.v2());, +        Map<Plugin, List<OnModuleReference>> onModuleReferences = new HashMap<>();, +        this.onModuleReferences = Collections.unmodifiableMap(onModuleReferences);, +    public List<Tuple<PluginInfo, Plugin>> plugins() {, +                    Class<? extends Plugin> pluginClass = loadPluginClass(pluginInfo.getClassname(), loader);, +                    plugin = loadPlugin(pluginClass, settings);, +    private Class<? extends Plugin> loadPluginClass(String className, ClassLoader loader) {, +            return loader.loadClass(className).asSubclass(Plugin.class);, +        } catch (ClassNotFoundException e) {, +            throw new ElasticsearchException("Could not find plugin class [" + className + "]", e);, +        }, +    }, +    private Plugin loadPlugin(Class<? extends Plugin> pluginClass, Settings settings) {]