[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +            percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +                        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +            percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +                        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/SinglePercolatorStressBenchmark.java, +            PercolateResponse percolate = client1.preparePercolate("test", "type1").setSource(source(Integer.toString(i), "value")), +        return jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +            percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +                        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/SinglePercolatorStressBenchmark.java, +            PercolateResponse percolate = client1.preparePercolate("test", "type1").setSource(source(Integer.toString(i), "value")), +        return jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    private String type;, +     * @param type  The document type, +    public PercolateRequest(String index, String type) {, +        this.type = type;, +    public PercolateRequest type(String type) {, +        this.type = type;, +        return this;, +    }, +, +    public String type() {, +        return this.type;, +    }, +, +        if (type == null) {, +            validationException = addValidationError("type is missing", validationException);, +        }, +        type = in.readUTF();, +        out.writeUTF(type);, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +            percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +                        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/SinglePercolatorStressBenchmark.java, +            PercolateResponse percolate = client1.preparePercolate("test", "type1").setSource(source(Integer.toString(i), "value")), +        return jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    private String type;, +     * @param type  The document type, +    public PercolateRequest(String index, String type) {, +        this.type = type;, +    public PercolateRequest type(String type) {, +        this.type = type;, +        return this;, +    }, +, +    public String type() {, +        return this.type;, +    }, +, +        if (type == null) {, +            validationException = addValidationError("type is missing", validationException);, +        }, +        type = in.readUTF();, +        out.writeUTF(type);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +        PercolatorExecutor.Response percolate = percolatorService.percolate(new PercolatorExecutor.SourceRequest(request.type(), request.source()));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +            percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +                        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/SinglePercolatorStressBenchmark.java, +            PercolateResponse percolate = client1.preparePercolate("test", "type1").setSource(source(Integer.toString(i), "value")), +        return jsonBuilder().startObject().startObject("doc"), +                .endObject().endObject();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    private String type;, +     * @param type  The document type, +    public PercolateRequest(String index, String type) {, +        this.type = type;, +    public PercolateRequest type(String type) {, +        this.type = type;, +        return this;, +    }, +, +    public String type() {, +        return this.type;, +    }, +]