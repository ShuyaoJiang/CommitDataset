[+++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/QuerySpec.java, +import java.util.Objects;, +    , +    @Override, +    public final boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        QuerySpec other = (QuerySpec) obj;, +        return Objects.equals(specId, other.specId) &&, +                Objects.equals(testRequest, other.testRequest) &&, +                Objects.equals(indices, other.indices) &&, +                Objects.equals(types, other.types) &&, +                Objects.equals(ratedDocs, other.ratedDocs);, +    }, +    , +    @Override, +    public final int hashCode() {, +        return Objects.hash(getClass(), specId, testRequest, indices.hashCode(), types.hashCode(), ratedDocs.hashCode());, +    }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/QuerySpec.java, +import java.util.Objects;, +    , +    @Override, +    public final boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        QuerySpec other = (QuerySpec) obj;, +        return Objects.equals(specId, other.specId) &&, +                Objects.equals(testRequest, other.testRequest) &&, +                Objects.equals(indices, other.indices) &&, +                Objects.equals(types, other.types) &&, +                Objects.equals(ratedDocs, other.ratedDocs);, +    }, +    , +    @Override, +    public final int hashCode() {, +        return Objects.hash(getClass(), specId, testRequest, indices.hashCode(), types.hashCode(), ratedDocs.hashCode());, +    }, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/QuerySpecTests.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import java.util.ArrayList;, +    public void testXContentRoundtrip() throws IOException {, +        String specId = randomAsciiOfLength(50);, +, +        SearchSourceBuilder testRequest = new SearchSourceBuilder();, +        testRequest.size(23);, +        testRequest.query(new MatchAllQueryBuilder());, +, +        List<String> indices = new ArrayList<>();, +        int size = randomIntBetween(0, 20);, +        for (int i = 0; i < size; i++) {, +            indices.add(randomAsciiOfLengthBetween(0, 50));, +        }, +, +        List<String> types = new ArrayList<>();, +        size = randomIntBetween(0, 20);, +        for (int i = 0; i < size; i++) {, +            types.add(randomAsciiOfLengthBetween(0, 50));, +        }, +, +        List<RatedDocument> ratedDocs = new ArrayList<>();, +        size = randomIntBetween(0, 20);, +        for (int i = 0; i < size; i++) {, +            ratedDocs.add(RatedDocumentTests.createTestItem());, +        }, +        , +, +        QuerySpec testItem = new QuerySpec(specId, testRequest, indices, types, ratedDocs);, +        , +        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()));, +        if (randomBoolean()) {, +            builder.prettyPrint();, +        }, +        testItem.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        XContentBuilder shuffled = shuffleXContent(builder);, +        XContentParser itemParser = XContentHelper.createParser(shuffled.bytes());, +        itemParser.nextToken(); // TODO this could be the reason why the metric roundtrip tests failed, +, +        QueryParseContext queryContext = new QueryParseContext(searchRequestParsers.queryParsers, itemParser, ParseFieldMatcher.STRICT);, +        RankEvalContext rankContext = new RankEvalContext(ParseFieldMatcher.STRICT, queryContext,, +                searchRequestParsers);, +, +        QuerySpec parsedItem = QuerySpec.fromXContent(itemParser, rankContext);, +        parsedItem.setIndices(indices); // IRL these come from URL parameters - see RestRankEvalAction, +        parsedItem.setTypes(types); // IRL these come from URL parameters - see RestRankEvalAction, +        assertNotSame(testItem, parsedItem);, +        assertEquals(testItem, parsedItem);]