[+++ b/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +                // NOTE, javadoc of getThreadInfo says: If a thread of the given ID is not alive or does not exist,, +                // null will be set in the corresponding element in the returned array. A thread is alive if it has, +                // been started and has not yet died., +                String threadName = null;, +                if (allInfos[0][t] == null) {, +                    for (ThreadInfo[] info : allInfos) {, +                        if (info != null && info[t] != null) {, +                            threadName = info[t].getThreadName();, +                            break;, +                        }, +                    }, +                    if (threadName == null) {, +                        continue; // thread is not alive yet or died before the first snapshot - ignore it!, +                    }, +                } else {, +                    threadName = allInfos[0][t].getThreadName();, +                }, +                sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName));, +                    if (allInfos[i][t] != null) {, +                        final StackTraceElement[] show = allInfos[i][t].getStackTrace();, +            }, +    private static final StackTraceElement[] EMPTY = new StackTraceElement[0];, +, +        StackTraceElement[] s1 = threadInfo == null ? EMPTY : threadInfo.getStackTrace();, +        StackTraceElement[] s2 = threadInfo0 == null ? EMPTY : threadInfo0.getStackTrace();, +++ b/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +                // NOTE, javadoc of getThreadInfo says: If a thread of the given ID is not alive or does not exist,, +                // null will be set in the corresponding element in the returned array. A thread is alive if it has, +                // been started and has not yet died., +                String threadName = null;, +                if (allInfos[0][t] == null) {, +                    for (ThreadInfo[] info : allInfos) {, +                        if (info != null && info[t] != null) {, +                            threadName = info[t].getThreadName();, +                            break;, +                        }, +                    }, +                    if (threadName == null) {, +                        continue; // thread is not alive yet or died before the first snapshot - ignore it!, +                    }, +                } else {, +                    threadName = allInfos[0][t].getThreadName();, +                }, +                sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName));, +                    if (allInfos[i][t] != null) {, +                        final StackTraceElement[] show = allInfos[i][t].getStackTrace();, +            }, +    private static final StackTraceElement[] EMPTY = new StackTraceElement[0];, +, +        StackTraceElement[] s1 = threadInfo == null ? EMPTY : threadInfo.getStackTrace();, +        StackTraceElement[] s2 = threadInfo0 == null ? EMPTY : threadInfo0.getStackTrace();, +++ b/src/test/java/org/elasticsearch/action/admin/HotThreadsTest.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.action.admin;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.cluster.node.hotthreads.NodeHotThreads;, +import org.elasticsearch.action.admin.cluster.node.hotthreads.NodesHotThreadsRequestBuilder;, +import org.elasticsearch.action.admin.cluster.node.hotthreads.NodesHotThreadsResponse;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Test;, +, +import java.util.Map;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +, +import static org.elasticsearch.index.query.FilterBuilders.andFilter;, +import static org.elasticsearch.index.query.FilterBuilders.notFilter;, +import static org.elasticsearch.index.query.FilterBuilders.queryFilter;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.CoreMatchers.notNullValue;, +, +/**, + */, +public class HotThreadsTest extends ElasticsearchIntegrationTest {, +, +    @Test, +    public void testHotThreadsDontFail() throws ExecutionException, InterruptedException {]