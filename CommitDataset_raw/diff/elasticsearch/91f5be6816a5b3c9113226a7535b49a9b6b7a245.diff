[+++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                        .put("chunk_size", randomIntBetween(100, 1000))));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                        .put("chunk_size", randomIntBetween(100, 1000))));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", location)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                                .put("random_control_io_exception_rate", 0.2)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                                .put("random_data_file_io_exception_rate", 0.1)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", repositoryLocation)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                                .put("random_data_file_io_exception_rate", 0.3)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", repositoryLocation)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                ));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", repositoryLocation)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                        .put("location", newTempDir(LifecycleScope.SUITE))));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                        .put("chunk_size", randomIntBetween(100, 1000))));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                        .put("location", newTempDir(LifecycleScope.SUITE))));, +        assertAcked(client.admin().indices().prepareClose("test-idx-closed"));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                        .put("location", newTempDir(LifecycleScope.SUITE))));, +        assertAcked(client.admin().indices().prepareClose("test-idx-1", "test-idx-2-copy"));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                                .put("wait_after_unblock", 200)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", repositoryLocation)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo-2"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", new File(repositoryLocation, "test"))));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", repositoryLocation)));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                        .put("chunk_size", randomIntBetween(100, 1000))));, +        assertAcked(client.admin().cluster().preparePutRepository("url-repo"), +                        .put("list_directories", randomBoolean())));, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                        .put("max_snapshot_bytes_per_sec", throttleSnapshot ? "2.5k" : "0")));]