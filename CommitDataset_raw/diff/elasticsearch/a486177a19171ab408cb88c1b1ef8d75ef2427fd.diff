[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.SHARDS);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.SHARDS);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "cluster");, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.SHARDS);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "cluster");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +Default value is `cluster`., +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.SHARDS);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "cluster");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +Default value is `cluster`., +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +, +==== Cluster Health API default to `cluster` level, +, +The Cluster Health API used to default to `shards` level to ease migration, +from transport client that doesn't support the `level` parameter and always, +returns information including indices and shards details. The level default, +value has been aligned with the Elasticsearch default level: `cluster`., +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.SHARDS);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "cluster");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +Default value is `cluster`., +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +, +==== Cluster Health API default to `cluster` level, +, +The Cluster Health API used to default to `shards` level to ease migration, +from transport client that doesn't support the `level` parameter and always, +returns information including indices and shards details. The level default, +value has been aligned with the Elasticsearch default level: `cluster`., +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +     * The default value is 'cluster'., +    private Level level = Level.CLUSTER;, +     * Only used by the high-level REST Client., +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.SHARDS);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "cluster");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +Default value is `cluster`., +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +, +==== Cluster Health API default to `cluster` level, +, +The Cluster Health API used to default to `shards` level to ease migration, +from transport client that doesn't support the `level` parameter and always, +returns information including indices and shards details. The level default, +value has been aligned with the Elasticsearch default level: `cluster`., +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +     * The default value is 'cluster'., +    private Level level = Level.CLUSTER;, +     * Only used by the high-level REST Client., +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        indexScopedSettings.validate(, +                normalizedSettings.filter(s -> Regex.isSimpleMatchPattern(s) == false), // don't validate wildcards, +                false, // don't validate dependencies here we check it below never allow to change the number of shards, +                true); // validate internal index settings, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.SHARDS);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "cluster");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +Default value is `cluster`., +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +, +==== Cluster Health API default to `cluster` level, +, +The Cluster Health API used to default to `shards` level to ease migration, +from transport client that doesn't support the `level` parameter and always, +returns information including indices and shards details. The level default, +value has been aligned with the Elasticsearch default level: `cluster`., +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +     * The default value is 'cluster'., +    private Level level = Level.CLUSTER;, +     * Only used by the high-level REST Client., +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        indexScopedSettings.validate(, +                normalizedSettings.filter(s -> Regex.isSimpleMatchPattern(s) == false), // don't validate wildcards, +                false, // don't validate dependencies here we check it below never allow to change the number of shards, +                true); // validate internal index settings, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * @param settings              the settings to validate, +     * @param validateDependencies  true if dependent settings should be validated, +     * @param validateInternalIndex true if internal index settings should be validated, +     * @see Setting#getSettingsDependencies(String), +     */, +    public final void validate(final Settings settings, final boolean validateDependencies, final boolean validateInternalIndex) {, +        validate(settings, validateDependencies, false, false, validateInternalIndex);, +    }, +]