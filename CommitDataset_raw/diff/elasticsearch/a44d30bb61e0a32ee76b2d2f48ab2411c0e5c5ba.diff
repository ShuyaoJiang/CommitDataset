[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.indices.IndicesService;, +    private final IndicesService indicesService;, +, +    @Inject public MetaDataCreateIndexService(Settings settings, Environment environment, TimerService timerService, ClusterService clusterService, IndicesService indicesService,, +                                              ShardsRoutingStrategy shardsRoutingStrategy, NodeIndexCreatedAction nodeIndexCreatedAction) {, +        this.indicesService = indicesService;, +                    // create the index here (on the master) to validate it can be created, as well as adding the mapping, +                    indicesService.createIndex(request.index, actualIndexSettings, clusterService.state().nodes().localNode().id());, +                    // now add the mappings, +                    IndexService indexService = indicesService.indexServiceSafe(request.index);, +                    MapperService mapperService = indexService.mapperService();, +                    for (Map.Entry<String, String> entry : mappings.entrySet()) {, +                        try {, +                            mapperService.add(entry.getKey(), entry.getValue());, +                        } catch (Exception e) {, +                            indicesService.deleteIndex(request.index);, +                            throw new MapperParsingException("mapping [" + entry.getKey() + "]", e);, +                        }, +                    }, +                    // now, update the mappings with the actual source, +                    mappings.clear();, +                    for (DocumentMapper mapper : mapperService) {, +                        mappings.put(mapper.type(), mapper.mappingSource());, +                    }, +, +, +                    final AtomicInteger counter = new AtomicInteger(currentState.nodes().size() - 1); // -1 since we added it on the master already, +                    if (counter.get() == 0) {, +                        // no nodes to add to, +                        listener.onResponse(new Response(true));, +                    } else {, +                    }]