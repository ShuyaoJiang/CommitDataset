[+++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptions.java, +                discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes, nodeSettings, Scope.TEST);, +                discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes, nodeSettings, unicastHostsOrdinals, Scope.TEST);, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptions.java, +                discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes, nodeSettings, Scope.TEST);, +                discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes, nodeSettings, unicastHostsOrdinals, Scope.TEST);, +++ b/src/test/java/org/elasticsearch/discovery/ZenUnicastDiscoveryTests.java, +        discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(currentNumNodes, unicastHostOrdinals, Scope.TEST);, +        discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(currentNumNodes, currentNumOfUnicastHosts, settings, Scope.TEST);, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptions.java, +                discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes, nodeSettings, Scope.TEST);, +                discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes, nodeSettings, unicastHostsOrdinals, Scope.TEST);, +++ b/src/test/java/org/elasticsearch/discovery/ZenUnicastDiscoveryTests.java, +        discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(currentNumNodes, unicastHostOrdinals, Scope.TEST);, +        discoveryConfig = new ClusterDiscoveryConfiguration.UnicastZen(currentNumNodes, currentNumOfUnicastHosts, settings, Scope.TEST);, +++ b/src/test/java/org/elasticsearch/test/discovery/ClusterDiscoveryConfiguration.java, +        private static final AtomicInteger portCounter = new AtomicInteger();, +        public UnicastZen(int numOfNodes, ElasticsearchIntegrationTest.Scope scope) {, +            this(numOfNodes, numOfNodes, scope);, +        public UnicastZen(int numOfNodes, Settings extraSettings, ElasticsearchIntegrationTest.Scope scope) {, +            this(numOfNodes, numOfNodes, extraSettings, scope);, +        public UnicastZen(int numOfNodes, int numOfUnicastHosts, ElasticsearchIntegrationTest.Scope scope) {, +            this(numOfNodes, numOfUnicastHosts, ImmutableSettings.EMPTY, scope);, +        public UnicastZen(int numOfNodes, int numOfUnicastHosts, Settings extraSettings, ElasticsearchIntegrationTest.Scope scope) {, +            this.basePort = calcBasePort(scope);, +        public UnicastZen(int numOfNodes, int[] unicastHostOrdinals, ElasticsearchIntegrationTest.Scope scope) {, +            this(numOfNodes, ImmutableSettings.EMPTY, unicastHostOrdinals, scope);, +        public UnicastZen(int numOfNodes, Settings extraSettings, int[] unicastHostOrdinals, ElasticsearchIntegrationTest.Scope scope) {, +            this.basePort = calcBasePort(scope);, +        private static int calcBasePort(ElasticsearchIntegrationTest.Scope scope) {, +                    1000 * (ElasticsearchIntegrationTest.CHILD_JVM_ID) + // up to 30 jvms, +                    //up to 100 nodes per cluster, +                    100 * scopeId(scope);, +        }, +, +        private static int scopeId(ElasticsearchIntegrationTest.Scope scope) {, +            switch(scope) {, +                case GLOBAL:, +                    //we reserve a special base port for global clusters, as they stick around, +                    //the assumption is that no counter is needed as there's only one global cluster per jvm, +                    return 0;, +                default:, +                    //ports can be reused as suite or test clusters are never run concurrently, +                    //we don't reuse the same port immediately though but leave some time to make sure ports are freed, +                    //reserve 0 to global cluster, prevent conflicts between jvms by never going above 9, +                    return 1 + portCounter.incrementAndGet() % 9;, +            }]