[+++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/shards/ShardsCollectorTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +        ensureGreen();, +        refresh();, +        final int[] nbShardsPerIndex = new int[nbIndices];, +        final int[] nbReplicasPerIndex = new int[nbIndices];, +        int totalShards = 0;, +            nbShardsPerIndex[i] = randomIntBetween(1, 3);, +            nbReplicasPerIndex[i] = randomIntBetween(0, Math.min(2, internalCluster().numDataNodes()));, +, +            assertAcked(prepareCreate(indexPrefix + String.valueOf(i)).setSettings(Settings.settingsBuilder(), +                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, nbShardsPerIndex[i]), +                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, nbReplicasPerIndex[i]), +                    .build()));, +, +            totalShards = totalShards + nbShardsPerIndex[i] + (nbShardsPerIndex[i] * nbReplicasPerIndex[i]);, +                client().prepareIndex(indexPrefix + String.valueOf(i), "test").setSource("num", i).get();, +        refresh();, +            assertHitCount(client().prepareSearch(indexPrefix + String.valueOf(i)).setSize(0).get(), nbDocsPerIndex[i]);, +            int total = getNumShards(indexPrefix + String.valueOf(i)).totalNumShards;, +            assertThat("expecting " + total + " shards marvel documents for index [" + indexPrefix + String.valueOf(i) + "]", shards[i], equalTo(total));, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/shards/ShardsCollectorTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +        ensureGreen();, +        refresh();, +        final int[] nbShardsPerIndex = new int[nbIndices];, +        final int[] nbReplicasPerIndex = new int[nbIndices];, +        int totalShards = 0;, +            nbShardsPerIndex[i] = randomIntBetween(1, 3);, +            nbReplicasPerIndex[i] = randomIntBetween(0, Math.min(2, internalCluster().numDataNodes()));, +, +            assertAcked(prepareCreate(indexPrefix + String.valueOf(i)).setSettings(Settings.settingsBuilder(), +                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, nbShardsPerIndex[i]), +                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, nbReplicasPerIndex[i]), +                    .build()));, +, +            totalShards = totalShards + nbShardsPerIndex[i] + (nbShardsPerIndex[i] * nbReplicasPerIndex[i]);, +                client().prepareIndex(indexPrefix + String.valueOf(i), "test").setSource("num", i).get();, +        refresh();, +            assertHitCount(client().prepareSearch(indexPrefix + String.valueOf(i)).setSize(0).get(), nbDocsPerIndex[i]);, +            int total = getNumShards(indexPrefix + String.valueOf(i)).totalNumShards;, +            assertThat("expecting " + total + " shards marvel documents for index [" + indexPrefix + String.valueOf(i) + "]", shards[i], equalTo(total));, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/exporter/local/LocalExporterTests.java, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/shards/ShardsCollectorTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +        ensureGreen();, +        refresh();, +        final int[] nbShardsPerIndex = new int[nbIndices];, +        final int[] nbReplicasPerIndex = new int[nbIndices];, +        int totalShards = 0;, +            nbShardsPerIndex[i] = randomIntBetween(1, 3);, +            nbReplicasPerIndex[i] = randomIntBetween(0, Math.min(2, internalCluster().numDataNodes()));, +, +            assertAcked(prepareCreate(indexPrefix + String.valueOf(i)).setSettings(Settings.settingsBuilder(), +                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, nbShardsPerIndex[i]), +                    .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, nbReplicasPerIndex[i]), +                    .build()));, +, +            totalShards = totalShards + nbShardsPerIndex[i] + (nbShardsPerIndex[i] * nbReplicasPerIndex[i]);, +                client().prepareIndex(indexPrefix + String.valueOf(i), "test").setSource("num", i).get();, +        refresh();, +            assertHitCount(client().prepareSearch(indexPrefix + String.valueOf(i)).setSize(0).get(), nbDocsPerIndex[i]);, +            int total = getNumShards(indexPrefix + String.valueOf(i)).totalNumShards;, +            assertThat("expecting " + total + " shards marvel documents for index [" + indexPrefix + String.valueOf(i) + "]", shards[i], equalTo(total));, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/exporter/local/LocalExporterTests.java, +++ b/marvel/src/test/java/org/elasticsearch/marvel/test/MarvelIntegTestCase.java, +import org.elasticsearch.index.IndexModule;, +                        .put(IndexModule.QUERY_CACHE_TYPE, ShieldPlugin.OPT_OUT_QUERY_CACHE);, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/shards/ShardsCollectorTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +        ensureGreen();, +        refresh();, +        final int[] nbShardsPerIndex = new int[nbIndices];, +        final int[] nbReplicasPerIndex = new int[nbIndices];, +        int totalShards = 0;, +            nbShardsPerIndex[i] = randomIntBetween(1, 3);, +            nbReplicasPerIndex[i] = randomIntBetween(0, Math.min(2, internalCluster().numDataNodes()));, +, +            assertAcked(prepareCreate(indexPrefix + String.valueOf(i)).setSettings(Settings.settingsBuilder(), +                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, nbShardsPerIndex[i])]