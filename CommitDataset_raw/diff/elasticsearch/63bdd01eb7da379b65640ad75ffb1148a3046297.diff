[+++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +import org.elasticsearch.index.analysis.WordDelimiterGraphTokenFilterFactory;, +        tokenFilters.register("word_delimiter_graph", WordDelimiterGraphTokenFilterFactory::new);, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +import org.elasticsearch.index.analysis.WordDelimiterGraphTokenFilterFactory;, +        tokenFilters.register("word_delimiter_graph", WordDelimiterGraphTokenFilterFactory::new);, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +import org.apache.lucene.analysis.miscellaneous.WordDelimiterGraphFilter;, +    WORD_DELIMITER_GRAPH(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new WordDelimiterGraphFilter(tokenStream,, +                WordDelimiterGraphFilter.GENERATE_WORD_PARTS |, +                    WordDelimiterGraphFilter.GENERATE_NUMBER_PARTS |, +                    WordDelimiterGraphFilter.SPLIT_ON_CASE_CHANGE |, +                    WordDelimiterGraphFilter.SPLIT_ON_NUMERICS |, +                    WordDelimiterGraphFilter.STEM_ENGLISH_POSSESSIVE, null);, +        }, +    },, +, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +import org.elasticsearch.index.analysis.WordDelimiterGraphTokenFilterFactory;, +        tokenFilters.register("word_delimiter_graph", WordDelimiterGraphTokenFilterFactory::new);, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +import org.apache.lucene.analysis.miscellaneous.WordDelimiterGraphFilter;, +    WORD_DELIMITER_GRAPH(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new WordDelimiterGraphFilter(tokenStream,, +                WordDelimiterGraphFilter.GENERATE_WORD_PARTS |, +                    WordDelimiterGraphFilter.GENERATE_NUMBER_PARTS |, +                    WordDelimiterGraphFilter.SPLIT_ON_CASE_CHANGE |, +                    WordDelimiterGraphFilter.SPLIT_ON_NUMERICS |, +                    WordDelimiterGraphFilter.STEM_ENGLISH_POSSESSIVE, null);, +        }, +    },, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +import org.elasticsearch.index.analysis.WordDelimiterGraphTokenFilterFactory;, +        tokenFilters.register("word_delimiter_graph", WordDelimiterGraphTokenFilterFactory::new);, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +import org.apache.lucene.analysis.miscellaneous.WordDelimiterGraphFilter;, +    WORD_DELIMITER_GRAPH(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new WordDelimiterGraphFilter(tokenStream,, +                WordDelimiterGraphFilter.GENERATE_WORD_PARTS |, +                    WordDelimiterGraphFilter.GENERATE_NUMBER_PARTS |, +                    WordDelimiterGraphFilter.SPLIT_ON_CASE_CHANGE |, +                    WordDelimiterGraphFilter.SPLIT_ON_NUMERICS |, +                    WordDelimiterGraphFilter.STEM_ENGLISH_POSSESSIVE, null);, +        }, +    },, +, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/index/analysis/BaseWordDelimiterTokenFilterFactoryTestCase.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.analysis;, +, +, +import org.apache.lucene.analysis.Tokenizer;, +import org.apache.lucene.analysis.core.WhitespaceTokenizer;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.ESTokenStreamTestCase;, +, +import java.io.IOException;, +import java.io.StringReader;, +, +/**, + * Base class to test {@link WordDelimiterTokenFilterFactory}  and {@link WordDelimiterGraphTokenFilterFactory}, + */, +public abstract class BaseWordDelimiterTokenFilterFactoryTestCase extends ESTokenStreamTestCase {, +    final String type;, +, +    public BaseWordDelimiterTokenFilterFactoryTestCase(String type) {, +        this.type = type;, +    }, +, +    public void testDefault() throws IOException {, +        ESTestCase.TestAnalysis analysis = AnalysisTestsHelper.createTestAnalysisFromSettings(Settings.builder()]