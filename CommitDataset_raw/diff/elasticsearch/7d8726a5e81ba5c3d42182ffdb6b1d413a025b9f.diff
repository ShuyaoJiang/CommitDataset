[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Received failed shard {}, reason [{}]", shardRouting, reason);, +                }, +                RoutingAllocation.Result routingResult = shardsAllocation.applyFailedShard(currentState, shardRouting);, +                if (!routingResult.changed()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Received failed shard {}, reason [{}]", shardRouting, reason);, +                }, +                RoutingAllocation.Result routingResult = shardsAllocation.applyFailedShard(currentState, shardRouting);, +                if (!routingResult.changed()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/FailedRerouteAllocation.java, +    private final ShardRouting failedShard;, +    public FailedRerouteAllocation(RoutingNodes routingNodes, DiscoveryNodes nodes, ShardRouting failedShard) {, +        this.failedShard = failedShard;, +    public ShardRouting failedShard() {, +        return failedShard;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Received failed shard {}, reason [{}]", shardRouting, reason);, +                }, +                RoutingAllocation.Result routingResult = shardsAllocation.applyFailedShard(currentState, shardRouting);, +                if (!routingResult.changed()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/FailedRerouteAllocation.java, +    private final ShardRouting failedShard;, +    public FailedRerouteAllocation(RoutingNodes routingNodes, DiscoveryNodes nodes, ShardRouting failedShard) {, +        this.failedShard = failedShard;, +    public ShardRouting failedShard() {, +        return failedShard;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +        // first, check if its in the ignored, if so, return NO, +        if (allocation.shouldIgnoreShardForNode(shardRouting.shardId(), node.nodeId())) {, +            return Decision.NO;, +        }, +        // now, go over the registered allocations, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Received failed shard {}, reason [{}]", shardRouting, reason);, +                }, +                RoutingAllocation.Result routingResult = shardsAllocation.applyFailedShard(currentState, shardRouting);, +                if (!routingResult.changed()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/FailedRerouteAllocation.java, +    private final ShardRouting failedShard;, +    public FailedRerouteAllocation(RoutingNodes routingNodes, DiscoveryNodes nodes, ShardRouting failedShard) {, +        this.failedShard = failedShard;, +    public ShardRouting failedShard() {, +        return failedShard;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +        // first, check if its in the ignored, if so, return NO, +        if (allocation.shouldIgnoreShardForNode(shardRouting.shardId(), node.nodeId())) {, +            return Decision.NO;, +        }, +        // now, go over the registered allocations, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/RoutingAllocation.java, +import org.elasticsearch.index.shard.ShardId;, +, +import java.util.HashMap;, +import java.util.Map;, +    private Map<ShardId, String> ignoredShardToNodes = null;, +, +, +    public void addIgnoreShardForNode(ShardId shardId, String nodeId) {, +        if (ignoredShardToNodes == null) {, +            ignoredShardToNodes = new HashMap<ShardId, String>();, +        }, +        ignoredShardToNodes.put(shardId, nodeId);, +    }, +, +    public boolean shouldIgnoreShardForNode(ShardId shardId, String nodeId) {, +        return ignoredShardToNodes != null && nodeId.equals(ignoredShardToNodes.get(shardId));, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Received failed shard {}, reason [{}]", shardRouting, reason);, +                }, +                RoutingAllocation.Result routingResult = shardsAllocation.applyFailedShard(currentState, shardRouting);, +                if (!routingResult.changed()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/FailedRerouteAllocation.java, +    private final ShardRouting failedShard;, +    public FailedRerouteAllocation(RoutingNodes routingNodes, DiscoveryNodes nodes, ShardRouting failedShard) {, +        this.failedShard = failedShard;, +    public ShardRouting failedShard() {, +        return failedShard;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +        // first, check if its in the ignored, if so, return NO, +        if (allocation.shouldIgnoreShardForNode(shardRouting.shardId(), node.nodeId())) {, +            return Decision.NO;, +        }, +        // now, go over the registered allocations, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/RoutingAllocation.java, +import org.elasticsearch.index.shard.ShardId;, +, +import java.util.HashMap;, +import java.util.Map;, +    private Map<ShardId, String> ignoredShardToNodes = null;, +, +, +    public void addIgnoreShardForNode(ShardId shardId, String nodeId) {, +        if (ignoredShardToNodes == null) {]