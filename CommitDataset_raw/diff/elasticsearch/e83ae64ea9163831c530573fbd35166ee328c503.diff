[+++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        this.settings = ImmutableMap.copyOf(new TreeMap<>(settings));, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        this.settings = ImmutableMap.copyOf(new TreeMap<>(settings));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.settings.Settings;, +        fieldDataType = new FieldDataType(typeName());, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        this.settings = ImmutableMap.copyOf(new TreeMap<>(settings));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.settings.Settings;, +        fieldDataType = new FieldDataType(typeName());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java, +    protected MetadataFieldMapper(String simpleName, MappedFieldType fieldType, MappedFieldType defaultFieldType, Settings indexSettings) {, +        super(simpleName, fieldType, defaultFieldType, indexSettings, MultiFields.empty(), null);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        this.settings = ImmutableMap.copyOf(new TreeMap<>(settings));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.settings.Settings;, +        fieldDataType = new FieldDataType(typeName());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java, +    protected MetadataFieldMapper(String simpleName, MappedFieldType fieldType, MappedFieldType defaultFieldType, Settings indexSettings) {, +        super(simpleName, fieldType, defaultFieldType, indexSettings, MultiFields.empty(), null);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        protected final MappedFieldType defaultFieldType;, +        protected boolean docValuesSet = false;, +            this.defaultFieldType = fieldType.clone();, +            this.fieldType.setHasDocValues(docValues);, +            this.docValuesSet = true;, +            if (fieldDataSettings != null) {, +                Settings settings = Settings.builder().put(fieldType.fieldDataType().getSettings()).put(fieldDataSettings).build();, +                fieldType.setFieldDataType(new FieldDataType(fieldType.fieldDataType().getType(), settings));, +            }, +            boolean defaultDocValues = false; // pre 2.0, +            if (context.indexCreatedVersion().onOrAfter(Version.V_2_0_0)) {, +                defaultDocValues = fieldType.tokenized() == false && fieldType.indexOptions() != IndexOptions.NONE;, +            }, +            // backcompat for "fielddata: format: docvalues" for now..., +            boolean fieldDataDocValues = fieldType.fieldDataType() != null, +                && FieldDataType.DOC_VALUES_FORMAT_VALUE.equals(fieldType.fieldDataType().getFormat(context.indexSettings()));, +            if (fieldDataDocValues && docValuesSet && fieldType.hasDocValues() == false) {, +                // this forces the doc_values setting to be written, so fielddata does not mask the original setting, +                defaultDocValues = true;, +            }, +            defaultFieldType.setHasDocValues(defaultDocValues);, +            if (docValuesSet == false) {, +                fieldType.setHasDocValues(defaultDocValues || fieldDataDocValues);, +            }, +        }, +    }, +    protected MappedFieldTypeReference fieldTypeRef;, +    protected final MappedFieldType defaultFieldType;, +    protected final MultiFields multiFields;, +    protected CopyTo copyTo;, +    protected final boolean indexCreatedBefore2x;, +, +    protected AbstractFieldMapper(String simpleName, MappedFieldType fieldType, MappedFieldType defaultFieldType, Settings indexSettings, MultiFields multiFields, CopyTo copyTo) {, +        super(simpleName);, +        assert indexSettings != null;, +        this.indexCreatedBefore2x = Version.indexCreated(indexSettings).before(Version.V_2_0_0);, +        this.fieldTypeRef = new MappedFieldTypeReference(fieldType);, +        this.defaultFieldType = defaultFieldType;, +        if (includeDefaults || hasCustomFieldDataSettings()) {, +            builder.field("fielddata", fieldType().fieldDataType().getSettings().getAsMap());, +        if (includeDefaults || defaultFieldType.hasDocValues() != fieldType().hasDocValues()) {, +        return fieldType().fieldDataType() != null && fieldType().fieldDataType().equals(defaultFieldType.fieldDataType()) == false;, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        this.settings = ImmutableMap.copyOf(new TreeMap<>(settings));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.settings.Settings;, +        fieldDataType = new FieldDataType(typeName());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java, +    protected MetadataFieldMapper(String simpleName, MappedFieldType fieldType, MappedFieldType defaultFieldType, Settings indexSettings) {, +        super(simpleName, fieldType, defaultFieldType, indexSettings, MultiFields.empty(), null);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        protected final MappedFieldType defaultFieldType;, +        protected boolean docValuesSet = false;, +            this.defaultFieldType = fieldType.clone();, +            this.fieldType.setHasDocValues(docValues);, +            this.docValuesSet = true;, +            if (fieldDataSettings != null) {, +                Settings settings = Settings.builder().put(fieldType.fieldDataType().getSettings()).put(fieldDataSettings).build();, +                fieldType.setFieldDataType(new FieldDataType(fieldType.fieldDataType().getType(), settings));, +            }, +            boolean defaultDocValues = false; // pre 2.0, +            if (context.indexCreatedVersion().onOrAfter(Version.V_2_0_0)) {, +                defaultDocValues = fieldType.tokenized() == false && fieldType.indexOptions() != IndexOptions.NONE;, +            }, +            // backcompat for "fielddata: format: docvalues" for now..., +            boolean fieldDataDocValues = fieldType.fieldDataType() != null, +                && FieldDataType.DOC_VALUES_FORMAT_VALUE.equals(fieldType.fieldDataType().getFormat(context.indexSettings()));, +            if (fieldDataDocValues && docValuesSet && fieldType.hasDocValues() == false) {, +                // this forces the doc_values setting to be written, so fielddata does not mask the original setting, +                defaultDocValues = true;, +            }, +            defaultFieldType.setHasDocValues(defaultDocValues);, +            if (docValuesSet == false) {, +                fieldType.setHasDocValues(defaultDocValues || fieldDataDocValues);, +            }, +        }]