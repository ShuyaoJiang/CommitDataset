[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +        Map<String, String> requireMap = settings.getByPrefix("index.routing.allocation.require.").getAsMap();, +        Map<String, String> includeMap = settings.getByPrefix("index.routing.allocation.include.").getAsMap();, +        Map<String, String> excludeMap = settings.getByPrefix("index.routing.allocation.exclude.").getAsMap();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +        Map<String, String> requireMap = settings.getByPrefix("index.routing.allocation.require.").getAsMap();, +        Map<String, String> includeMap = settings.getByPrefix("index.routing.allocation.include.").getAsMap();, +        Map<String, String> excludeMap = settings.getByPrefix("index.routing.allocation.exclude.").getAsMap();, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +import java.util.Map;, +, +        Map<String, String> requireMap = settings.getByPrefix(CLUSTER_ROUTING_REQUIRE_GROUP).getAsMap();, +        Map<String, String> includeMap = settings.getByPrefix(CLUSTER_ROUTING_INCLUDE_GROUP).getAsMap();, +        Map<String, String> excludeMap = settings.getByPrefix(CLUSTER_ROUTING_EXCLUDE_GROUP).getAsMap();, +            Map<String, String> requireMap = settings.getByPrefix(CLUSTER_ROUTING_REQUIRE_GROUP).getAsMap();, +            Map<String, String> includeMap = settings.getByPrefix(CLUSTER_ROUTING_INCLUDE_GROUP).getAsMap();, +            Map<String, String> excludeMap = settings.getByPrefix(CLUSTER_ROUTING_EXCLUDE_GROUP).getAsMap();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +        Map<String, String> requireMap = settings.getByPrefix("index.routing.allocation.require.").getAsMap();, +        Map<String, String> includeMap = settings.getByPrefix("index.routing.allocation.include.").getAsMap();, +        Map<String, String> excludeMap = settings.getByPrefix("index.routing.allocation.exclude.").getAsMap();, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +import java.util.Map;, +, +        Map<String, String> requireMap = settings.getByPrefix(CLUSTER_ROUTING_REQUIRE_GROUP).getAsMap();, +        Map<String, String> includeMap = settings.getByPrefix(CLUSTER_ROUTING_INCLUDE_GROUP).getAsMap();, +        Map<String, String> excludeMap = settings.getByPrefix(CLUSTER_ROUTING_EXCLUDE_GROUP).getAsMap();, +            Map<String, String> requireMap = settings.getByPrefix(CLUSTER_ROUTING_REQUIRE_GROUP).getAsMap();, +            Map<String, String> includeMap = settings.getByPrefix(CLUSTER_ROUTING_INCLUDE_GROUP).getAsMap();, +            Map<String, String> excludeMap = settings.getByPrefix(CLUSTER_ROUTING_EXCLUDE_GROUP).getAsMap();, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java, +/**, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements.  See the NOTICE file distributed with, + * this work for additional information regarding copyright ownership., + * The ASF licenses this file to You under the Apache License, Version 2.0, + * (the "License"); you may not use this file except in compliance with, + * the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.elasticsearch.common.geo;, +, +, +import java.util.ArrayList;, +import java.util.Collection;, +, +, +/**, + * Utilities for encoding and decoding geohashes. Based on, + * http://en.wikipedia.org/wiki/Geohash., + */, +// LUCENE MONITOR: monitor against spatial package, +// replaced with native DECODE_MAP, +public class GeoHashUtils {, +, +    private static final char[] BASE_32 = {'0', '1', '2', '3', '4', '5', '6',, +            '7', '8', '9', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n',, +            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};, +, +    public static final int PRECISION = 12;, +    private static final int[] BITS = {16, 8, 4, 2, 1};, +, +    private GeoHashUtils() {, +    }, +, +    public static String encode(double latitude, double longitude) {, +        return encode(latitude, longitude, PRECISION);, +    }, +, +    /**, +     * Encodes the given latitude and longitude into a geohash, +     *, +     * @param latitude  Latitude to encode, +     * @param longitude Longitude to encode, +     * @return Geohash encoding of the longitude and latitude, +     */, +    public static String encode(double latitude, double longitude, int precision) {]