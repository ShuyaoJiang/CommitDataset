[+++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RetryTests.java, +        // se NettyPlugin.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RetryTests.java, +        // se NettyPlugin.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +++ b/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/ESSmokeClientTestCase.java, +        // se NettyPlugin.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RetryTests.java, +        // se NettyPlugin.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +++ b/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/ESSmokeClientTestCase.java, +        // se NettyPlugin.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +++ b/qa/smoke-test-http/src/test/java/org/elasticsearch/http/HttpSmokeTestCase.java, +import org.elasticsearch.common.settings.Setting;, +import java.util.Collections;, +import java.util.List;, +            .put("netty.assert.buglevel", false), +        return pluginList(MockTcpTransportPlugin.class, NettyPlugin.class, BogusPlugin.class);, +        return pluginList(MockTcpTransportPlugin.class, NettyPlugin.class, BogusPlugin.class);, +            .put("netty.assert.buglevel", false), +, +, +    public static final class BogusPlugin extends Plugin {, +        // see NettyPlugin.... this runs without the permission from the netty module so it will fail since reindex can't set the property, +        // to make it still work we disable that check but need to register the setting first, +        private static final Setting<Boolean> ASSERT_NETTY_BUGLEVEL = Setting.boolSetting("netty.assert.buglevel", true,, +            Setting.Property.NodeScope);, +        @Override, +        public List<Setting<?>> getSettings() {, +            return Collections.singletonList(ASSERT_NETTY_BUGLEVEL);, +        }, +    }]