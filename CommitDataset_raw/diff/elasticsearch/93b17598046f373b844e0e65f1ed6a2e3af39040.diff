[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +        String currentFieldName = parser.currentName();, +        XContentParser.Token token = parser.currentToken();, +        if (token == XContentParser.Token.VALUE_NULL) {, +            // the object is null ("obj1" : null), simply bail, +            return;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +        String currentFieldName = parser.currentName();, +        XContentParser.Token token = parser.currentToken();, +        if (token == XContentParser.Token.VALUE_NULL) {, +            // the object is null ("obj1" : null), simply bail, +            return;, +        }, +, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/mapper/nested/NestedMappingTests.java, +    @Test public void emptyNested() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties"), +                .startObject("nested1").field("type", "nested").endObject(), +                .endObject().endObject().endObject().string();, +, +        DocumentMapper docMapper = MapperTests.newParser().parse(mapping);, +, +        ParsedDocument doc = docMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "value"), +                .nullField("nested1"), +                .endObject(), +                .copiedBytes());, +, +        assertThat(doc.docs().size(), equalTo(1));, +, +        doc = docMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "value"), +                .startArray("nested").endArray(), +                .endObject(), +                .copiedBytes());, +, +        assertThat(doc.docs().size(), equalTo(1));, +    }, +]