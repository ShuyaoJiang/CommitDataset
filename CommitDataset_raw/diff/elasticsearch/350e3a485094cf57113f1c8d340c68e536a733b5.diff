[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +import org.elasticsearch.search.aggregations.bucket.DateScriptMocks.DateScriptsMockPlugin;, +                DateScriptsMockPlugin.class);, +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +import org.elasticsearch.search.aggregations.bucket.DateScriptMocks.DateScriptsMockPlugin;, +                DateScriptsMockPlugin.class);, +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateRangeIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.aggregations.bucket;, +, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptService.ScriptType;, +import org.elasticsearch.search.aggregations.bucket.DateScriptMocks.DateScriptsMockPlugin;, +import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +import org.elasticsearch.search.aggregations.bucket.range.Range.Bucket;, +import org.elasticsearch.search.aggregations.bucket.range.date.DateRangeAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.sum.Sum;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.hamcrest.Matchers;, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.dateRange;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.core.IsNull.notNullValue;, +import static org.hamcrest.core.IsNull.nullValue;, +, +/**, + *, + */, +@ESIntegTestCase.SuiteScopeTestCase, +public class DateRangeIT extends ESIntegTestCase {, +, +    private static IndexRequestBuilder indexDoc(int month, int day, int value) throws Exception {]