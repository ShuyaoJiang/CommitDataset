[+++ b/core/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +    /**, +     * sets the timeout for a complete publishing cycle, including both sending and committing. the master, +     * will continute to process the next cluster state update after this time has elapsed, +     **/, +, +    /**, +     * sets the timeout for receiving enough acks for a specific cluster state and committing it. failing, +     * to receive responses within this window will cause the cluster state change to be rejected., +     */, +    public static final TimeValue DEFAULT_COMMIT_TIMEOUT = TimeValue.timeValueSeconds(30);, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +    /**, +     * sets the timeout for a complete publishing cycle, including both sending and committing. the master, +     * will continute to process the next cluster state update after this time has elapsed, +     **/, +, +    /**, +     * sets the timeout for receiving enough acks for a specific cluster state and committing it. failing, +     * to receive responses within this window will cause the cluster state change to be rejected., +     */, +    public static final TimeValue DEFAULT_COMMIT_TIMEOUT = TimeValue.timeValueSeconds(30);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +        final long publishingStartInNanos = System.nanoTime();, +, +            long timeLeftInNanos = Math.max(0, publishTimeout.nanos() - (System.nanoTime() - publishingStartInNanos));, +            sendingController.setPublishingTimedOut(!publishResponseHandler.awaitAllNodes(TimeValue.timeValueNanos(timeLeftInNanos)));, +            //nocommit: make sure we prevent publishing successfully!]