[+++ b/server/src/main/java/org/elasticsearch/index/query/IntervalBuilder.java, +        PositionIncrementAttribute posAtt = ts.addAttribute(PositionIncrementAttribute.class);, +            int precedingSpaces = posAtt.getPositionIncrement() - 1;, +            terms.add(extend(Intervals.term(BytesRef.deepCopyOf(term)), precedingSpaces));, +    public static IntervalsSource extend(IntervalsSource source, int precedingSpaces) {, +        if (precedingSpaces == 0) {, +            return source;, +        }, +        return Intervals.extend(source, precedingSpaces, 0);, +    }, +, +        int spaces = 0;, +            int posInc = posAtt.getPositionIncrement();, +            if (posInc > 0) {, +                    terms.add(extend(synonyms.get(0), spaces));, +                    terms.add(extend(Intervals.or(synonyms.toArray(new IntervalsSource[0])), spaces));, +                spaces = posInc - 1;, +            terms.add(extend(synonyms.get(0), spaces));, +            terms.add(extend(Intervals.or(synonyms.toArray(new IntervalsSource[0])), spaces));, +++ b/server/src/main/java/org/elasticsearch/index/query/IntervalBuilder.java, +        PositionIncrementAttribute posAtt = ts.addAttribute(PositionIncrementAttribute.class);, +            int precedingSpaces = posAtt.getPositionIncrement() - 1;, +            terms.add(extend(Intervals.term(BytesRef.deepCopyOf(term)), precedingSpaces));, +    public static IntervalsSource extend(IntervalsSource source, int precedingSpaces) {, +        if (precedingSpaces == 0) {, +            return source;, +        }, +        return Intervals.extend(source, precedingSpaces, 0);, +    }, +, +        int spaces = 0;, +            int posInc = posAtt.getPositionIncrement();, +            if (posInc > 0) {, +                    terms.add(extend(synonyms.get(0), spaces));, +                    terms.add(extend(Intervals.or(synonyms.toArray(new IntervalsSource[0])), spaces));, +                spaces = posInc - 1;, +            terms.add(extend(synonyms.get(0), spaces));, +            terms.add(extend(Intervals.or(synonyms.toArray(new IntervalsSource[0])), spaces));, +++ b/server/src/test/java/org/elasticsearch/index/query/IntervalBuilderTests.java, +    public void testPhraseWithStopword() throws IOException {, +, +        CannedTokenStream ts = new CannedTokenStream(, +            new Token("term1", 1, 1, 2),, +            new Token("term3", 2, 5, 6), +        );, +, +        IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), 0, true);, +        IntervalsSource expected = Intervals.phrase(, +            Intervals.term("term1"), Intervals.extend(Intervals.term("term3"), 1, 0), +        );, +, +        assertEquals(expected, source);, +, +    }, +, +    public void testSimpleSynonymsWithGap() throws IOException {, +        // term1 [] term2/term3/term4 term5, +        CannedTokenStream ts = new CannedTokenStream(, +            new Token("term1", 1, 2),, +            new Token("term2", 2, 3, 4),, +            new Token("term3", 0, 3, 4),, +            new Token("term4", 0, 3, 4),, +            new Token("term5", 5, 6), +        );, +, +        IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), -1, true);, +        IntervalsSource expected = Intervals.ordered(, +            Intervals.term("term1"),, +            Intervals.extend(Intervals.or(Intervals.term("term2"), Intervals.term("term3"), Intervals.term("term4")), 1, 0),, +            Intervals.term("term5"), +        );, +        assertEquals(expected, source);, +    }, +, +        // term1 term2:2/term3 term4 term5, +            new Token("term2", 1, 3, 4, 2),, +    public void testGraphSynonymsWithGaps() throws IOException {, +, +        // term1 [] term2:4/term3 [] [] term4 term5, +, +        CannedTokenStream ts = new CannedTokenStream(, +            new Token("term1", 1, 2),, +            new Token("term2", 2, 3, 4, 4),, +            new Token("term3", 0, 3, 4),, +            new Token("term4", 3, 5, 6),, +            new Token("term5", 6, 7), +        );, +, +        IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), -1, true);, +        IntervalsSource expected = Intervals.ordered(, +            Intervals.term("term1"),, +            Intervals.or(, +                Intervals.extend(Intervals.term("term2"), 1, 0),, +                Intervals.phrase(, +                    Intervals.extend(Intervals.term("term3"), 1, 0),, +                    Intervals.extend(Intervals.term("term4"), 2, 0))),, +            Intervals.term("term5"), +        );, +, +        assertEquals(expected, source);]