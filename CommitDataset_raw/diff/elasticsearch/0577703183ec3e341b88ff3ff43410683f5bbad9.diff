[+++ b/server/src/main/java/org/elasticsearch/ingest/CompoundProcessor.java, +        for (Processor processor : processors) {, +++ b/server/src/main/java/org/elasticsearch/ingest/CompoundProcessor.java, +        for (Processor processor : processors) {, +++ b/server/src/main/java/org/elasticsearch/ingest/ConditionalProcessor.java, +++ b/server/src/main/java/org/elasticsearch/ingest/CompoundProcessor.java, +        for (Processor processor : processors) {, +++ b/server/src/main/java/org/elasticsearch/ingest/ConditionalProcessor.java, +++ b/server/src/main/java/org/elasticsearch/ingest/IngestService.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.Set;, +import java.util.concurrent.TimeUnit;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +import java.util.stream.Collectors;, +, +        Map<String, IngestStats.Stats> statsPerPipeline =, +            pipelines.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, v -> v.getValue().getMetrics().createStats()));, +        return new IngestStats(totalMetrics.createStats(), statsPerPipeline);, +++ b/server/src/main/java/org/elasticsearch/ingest/CompoundProcessor.java, +        for (Processor processor : processors) {, +++ b/server/src/main/java/org/elasticsearch/ingest/ConditionalProcessor.java, +++ b/server/src/main/java/org/elasticsearch/ingest/IngestService.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.Set;, +import java.util.concurrent.TimeUnit;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +import java.util.stream.Collectors;, +, +        Map<String, IngestStats.Stats> statsPerPipeline =, +            pipelines.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, v -> v.getValue().getMetrics().createStats()));, +        return new IngestStats(totalMetrics.createStats(), statsPerPipeline);, +++ b/server/src/main/java/org/elasticsearch/ingest/IngestStats.java, +    private final Map<String, Stats> statsPerPipeline;, +    public IngestStats(Stats totalStats, Map<String, Stats> statsPerPipeline) {, +        this.statsPerPipeline = statsPerPipeline;, +        this.statsPerPipeline = new HashMap<>(size);, +            statsPerPipeline.put(in.readString(), new Stats(in));, +        out.writeVInt(statsPerPipeline.size());, +        for (Map.Entry<String, Stats> entry : statsPerPipeline.entrySet()) {, +            out.writeString(entry.getKey());, +            entry.getValue().writeTo(out);, +, +, +    /**, +     * @return The accumulated stats for all pipelines, +     */, +    public Stats getTotalStats() {, +        return totalStats;, +, +    /**, +     * @return The stats on a per pipeline basis, +     */, +    public Map<String, Stats> getStatsPerPipeline() {, +        return statsPerPipeline;, +        for (Map.Entry<String, Stats> entry : statsPerPipeline.entrySet()) {, +            builder.startObject(entry.getKey());, +            entry.getValue().toXContent(builder, params);, +         *, +++ b/server/src/main/java/org/elasticsearch/ingest/CompoundProcessor.java, +        for (Processor processor : processors) {, +++ b/server/src/main/java/org/elasticsearch/ingest/ConditionalProcessor.java, +++ b/server/src/main/java/org/elasticsearch/ingest/IngestService.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.Set;, +import java.util.concurrent.TimeUnit;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +import java.util.stream.Collectors;, +, +        Map<String, IngestStats.Stats> statsPerPipeline =, +            pipelines.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, v -> v.getValue().getMetrics().createStats()));, +        return new IngestStats(totalMetrics.createStats(), statsPerPipeline);, +++ b/server/src/main/java/org/elasticsearch/ingest/IngestStats.java, +    private final Map<String, Stats> statsPerPipeline;, +    public IngestStats(Stats totalStats, Map<String, Stats> statsPerPipeline) {, +        this.statsPerPipeline = statsPerPipeline;, +        this.statsPerPipeline = new HashMap<>(size);, +            statsPerPipeline.put(in.readString(), new Stats(in));, +        out.writeVInt(statsPerPipeline.size());, +        for (Map.Entry<String, Stats> entry : statsPerPipeline.entrySet()) {]