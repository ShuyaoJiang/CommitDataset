[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +                    preZone = parseZone(parser.text());, +                    preZone = parseZone(parser.text());, +                    postZone = parseZone(parser.text());, +                } else if ("time_zone".equals(currentFieldName) || "timeZone".equals(currentFieldName)) {, +                    preZone = DateTimeZone.forOffsetHours(parser.intValue());, +                } else if ("pre_zone".equals(currentFieldName) || "preZone".equals(currentFieldName)) {, +                    preZone = DateTimeZone.forOffsetHours(parser.intValue());, +                } else if ("post_zone".equals(currentFieldName) || "postZone".equals(currentFieldName)) {, +                    postZone = DateTimeZone.forOffsetHours(parser.intValue());, +    private DateTimeZone parseZone(String text) throws IOException {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +                    preZone = parseZone(parser.text());, +                    preZone = parseZone(parser.text());, +                    postZone = parseZone(parser.text());, +                } else if ("time_zone".equals(currentFieldName) || "timeZone".equals(currentFieldName)) {, +                    preZone = DateTimeZone.forOffsetHours(parser.intValue());, +                } else if ("pre_zone".equals(currentFieldName) || "preZone".equals(currentFieldName)) {, +                    preZone = DateTimeZone.forOffsetHours(parser.intValue());, +                } else if ("post_zone".equals(currentFieldName) || "postZone".equals(currentFieldName)) {, +                    postZone = DateTimeZone.forOffsetHours(parser.intValue());, +    private DateTimeZone parseZone(String text) throws IOException {, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;, +import java.io.IOException;, +    public void singleValuedField_WithPostTimeZone() throws Exception {, +        SearchResponse response;, +        if (randomBoolean()) {, +            response = client().prepareSearch("idx"), +                .addAggregation(dateHistogram("histo").field("date").interval(DateHistogram.Interval.DAY).postZone("-01:00")), +                .execute().actionGet();, +        } else {, +, +            // checking post_zone setting as an int, +, +            response = client().prepareSearch("idx"), +                .addAggregation(new AbstractAggregationBuilder("histo", "date_histogram") {, +                    @Override, +                    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +                        return builder.startObject(name), +                                .startObject(type), +                                    .field("field", "date"), +                                    .field("interval", "1d"), +                                    .field("post_zone", -1), +                                .endObject(), +                            .endObject();, +                    }, +                }), +                .execute().actionGet();, +        }, +, +        assertSearchResponse(response);, +, +, +        DateHistogram histo = response.getAggregations().get("histo");, +        assertThat(histo, notNullValue());, +        assertThat(histo.getName(), equalTo("histo"));, +        assertThat(histo.getBuckets().size(), equalTo(6));, +, +        long key = new DateTime(2012, 1, 2, 0, 0, DateTimeZone.forID("+01:00")).getMillis();, +        DateHistogram.Bucket bucket = histo.getBucketByKey(key);, +        assertThat(bucket, notNullValue());, +        assertThat(bucket.getKeyAsNumber().longValue(), equalTo(key));, +        assertThat(bucket.getDocCount(), equalTo(1l));, +, +        key = new DateTime(2012, 2, 2, 0, 0, DateTimeZone.forID("+01:00")).getMillis();, +        bucket = histo.getBucketByKey(key);, +        assertThat(bucket, notNullValue());, +        assertThat(bucket.getKeyAsNumber().longValue(), equalTo(key));, +        assertThat(bucket.getDocCount(), equalTo(1l));, +, +        key = new DateTime(2012, 2, 15, 0, 0, DateTimeZone.forID("+01:00")).getMillis();, +        bucket = histo.getBucketByKey(key);, +        assertThat(bucket, notNullValue());, +        assertThat(bucket.getKeyAsNumber().longValue(), equalTo(key));, +        assertThat(bucket.getDocCount(), equalTo(1l));, +, +        key = new DateTime(2012, 3, 2, 0, 0, DateTimeZone.forID("+01:00")).getMillis();, +        bucket = histo.getBucketByKey(key);, +        assertThat(bucket, notNullValue());, +        assertThat(bucket.getKeyAsNumber().longValue(), equalTo(key));, +        assertThat(bucket.getDocCount(), equalTo(1l));, +, +        key = new DateTime(2012, 3, 15, 0, 0, DateTimeZone.forID("+01:00")).getMillis();, +        bucket = histo.getBucketByKey(key);, +        assertThat(bucket, notNullValue());, +        assertThat(bucket.getKeyAsNumber().longValue(), equalTo(key));, +        assertThat(bucket.getDocCount(), equalTo(1l));, +, +        key = new DateTime(2012, 3, 23, 0, 0, DateTimeZone.forID("+01:00")).getMillis();, +        bucket = histo.getBucketByKey(key);, +        assertThat(bucket, notNullValue());, +        assertThat(bucket.getKeyAsNumber().longValue(), equalTo(key));, +        assertThat(bucket.getDocCount(), equalTo(1l));, +    }, +, +    @Test]