[+++ b/libs/nio/src/main/java/org/elasticsearch/nio/EventHandler.java, +     * This method is called when a task or listener attached to a channel is available to run., +     *, +     * @param task to handle, +     */, +    protected void handleTask(Runnable task) {, +        task.run();, +    }, +, +    /**, +            try {, +            } catch (IOException e) {, +                closeException(context, e);, +            }, +    protected void handleClose(ChannelContext<?> context) throws IOException {, +     * @param context that was being closed, +    protected void closeException(ChannelContext<?> context, Exception exception) {, +        context.handleException(exception);, +     * @param context that caused the exception, +    protected void genericChannelException(ChannelContext<?> context, Exception exception) {, +        context.handleException(exception);, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/EventHandler.java, +     * This method is called when a task or listener attached to a channel is available to run., +     *, +     * @param task to handle, +     */, +    protected void handleTask(Runnable task) {, +        task.run();, +    }, +, +    /**, +            try {, +            } catch (IOException e) {, +                closeException(context, e);, +            }, +    protected void handleClose(ChannelContext<?> context) throws IOException {, +     * @param context that was being closed, +    protected void closeException(ChannelContext<?> context, Exception exception) {, +        context.handleException(exception);, +     * @param context that caused the exception, +    protected void genericChannelException(ChannelContext<?> context, Exception exception) {, +        context.handleException(exception);, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/NioSelector.java, +            handleTask(task);, +        }, +    }, +, +    private void handleTask(Runnable task) {, +            eventHandler.handleTask(task);, +        handleTask(() -> listener.accept(value, null));, +        handleTask(() -> listener.accept(null, exception));, +            try {, +            } catch (Exception e) {, +                eventHandler.closeException(channelContext, e);, +            }, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/EventHandler.java, +     * This method is called when a task or listener attached to a channel is available to run., +     *, +     * @param task to handle, +     */, +    protected void handleTask(Runnable task) {, +        task.run();, +    }, +, +    /**, +            try {, +            } catch (IOException e) {, +                closeException(context, e);, +            }, +    protected void handleClose(ChannelContext<?> context) throws IOException {, +     * @param context that was being closed, +    protected void closeException(ChannelContext<?> context, Exception exception) {, +        context.handleException(exception);, +     * @param context that caused the exception, +    protected void genericChannelException(ChannelContext<?> context, Exception exception) {, +        context.handleException(exception);, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/NioSelector.java, +            handleTask(task);, +        }, +    }, +, +    private void handleTask(Runnable task) {, +            eventHandler.handleTask(task);, +        handleTask(() -> listener.accept(value, null));, +        handleTask(() -> listener.accept(null, exception));, +            try {, +            } catch (Exception e) {, +                eventHandler.closeException(channelContext, e);, +            }, +++ b/libs/nio/src/test/java/org/elasticsearch/nio/EventHandlerTests.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    public void testHandleTaskWillRunTask() throws Exception {, +        AtomicBoolean isRun = new AtomicBoolean(false);, +        handler.handleTask(() -> isRun.set(true));, +        assertTrue(isRun.get());, +    }, +, +    public void testTaskExceptionWillCallExceptionHandler() throws Exception {, +        RuntimeException exception = new RuntimeException();, +        handler.taskException(exception);]