[+++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +, +, +        private Tuple<String, String> getScriptNameExt(Path file) {, +            if (extIndex <= 0) {, +, +            String ext = scriptPath.toString().substring(extIndex + 1);, +            if (ext.isEmpty()) {, +                return null;, +            }, +, +            String scriptName = scriptPath.toString().substring(0, extIndex).replace(scriptPath.getFileSystem().getSeparator(), "_");, +            return new Tuple<>(scriptName, ext);, +            Tuple<String, String> scriptNameExt = getScriptNameExt(file);, +            if (scriptNameExt == null) {, +                logger.debug("Skipped script with invalid extension : [{}]", file);, +                return;, +            }, +, +                logger.warn("No script engine found for [{}]", scriptNameExt.v2());, +            Tuple<String, String> scriptNameExt = getScriptNameExt(file);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +, +, +        private Tuple<String, String> getScriptNameExt(Path file) {, +            if (extIndex <= 0) {, +, +            String ext = scriptPath.toString().substring(extIndex + 1);, +            if (ext.isEmpty()) {, +                return null;, +            }, +, +            String scriptName = scriptPath.toString().substring(0, extIndex).replace(scriptPath.getFileSystem().getSeparator(), "_");, +            return new Tuple<>(scriptName, ext);, +            Tuple<String, String> scriptNameExt = getScriptNameExt(file);, +            if (scriptNameExt == null) {, +                logger.debug("Skipped script with invalid extension : [{}]", file);, +                return;, +            }, +, +                logger.warn("No script engine found for [{}]", scriptNameExt.v2());, +            Tuple<String, String> scriptNameExt = getScriptNameExt(file);, +++ b/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java, +    public void testScriptCompiledOnceHiddenFileDetected() throws IOException {, +        buildScriptService(Settings.EMPTY);, +, +        Path testHiddenFile = scriptsFilePath.resolve(".hidden_file");, +        Streams.copy("test_hidden_file".getBytes("UTF-8"), Files.newOutputStream(testHiddenFile));, +, +        Path testFileScript = scriptsFilePath.resolve("file_script.tst");, +        Streams.copy("test_file_script".getBytes("UTF-8"), Files.newOutputStream(testFileScript));, +        resourceWatcherService.notifyNow();, +, +        CompiledScript compiledScript = scriptService.compile(new Script("file_script", ScriptType.FILE, "test", null),, +                ScriptContext.Standard.SEARCH, Collections.emptyMap());, +        assertThat(compiledScript.compiled(), equalTo((Object) "compiled_test_file_script"));, +, +        Files.delete(testHiddenFile);, +        Files.delete(testFileScript);, +        resourceWatcherService.notifyNow();, +    }, +]