[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        // sets up any extra config files that need to be copied over to the ES instance;, +        // its run after plugins have been installed, as the extra config files may belong to plugins, +        setup = configureExtraConfigFilesTask(taskName(task, node, 'extraConfig'), project, setup, node), +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        // sets up any extra config files that need to be copied over to the ES instance;, +        // its run after plugins have been installed, as the extra config files may belong to plugins, +        setup = configureExtraConfigFilesTask(taskName(task, node, 'extraConfig'), project, setup, node), +, +++ b/plugins/discovery-file/build.gradle, +import org.elasticsearch.gradle.test.ClusterConfiguration, +import org.elasticsearch.gradle.test.ClusterFormationTasks, +import org.elasticsearch.gradle.test.NodeInfo, +, +, +task setupSeedNodeAndUnicastHostsFile(type: DefaultTask) {, +    mustRunAfter(precommit), +}, +// setup the initial cluster with one node that will serve as the seed node, +// for unicast discovery, +ClusterConfiguration config = new ClusterConfiguration(project), +config.clusterName = 'discovery-file-test-cluster', +List<NodeInfo> nodes = ClusterFormationTasks.setup(project, setupSeedNodeAndUnicastHostsFile, config), +File srcUnicastHostsFile = file('build/cluster/unicast_hosts.txt'), +, +// write the unicast_hosts.txt file to a temporary location to be used by the second cluster, +setupSeedNodeAndUnicastHostsFile.doLast {, +    // write the unicast_hosts.txt file to a temp file in the build directory, +    srcUnicastHostsFile.setText(nodes.get(0).transportUri(), 'UTF-8'), +}, +, +// second cluster, which will connect to the first via the unicast_hosts.txt file, +integTest {, +    dependsOn(setupSeedNodeAndUnicastHostsFile), +    cluster {, +        clusterName = 'discovery-file-test-cluster', +        extraConfigFile 'discovery-file/unicast_hosts.txt', srcUnicastHostsFile, +    }, +    finalizedBy ':plugins:discovery-file:setupSeedNodeAndUnicastHostsFile#stop', +}, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        // sets up any extra config files that need to be copied over to the ES instance;, +        // its run after plugins have been installed, as the extra config files may belong to plugins, +        setup = configureExtraConfigFilesTask(taskName(task, node, 'extraConfig'), project, setup, node), +, +++ b/plugins/discovery-file/build.gradle, +import org.elasticsearch.gradle.test.ClusterConfiguration, +import org.elasticsearch.gradle.test.ClusterFormationTasks, +import org.elasticsearch.gradle.test.NodeInfo, +, +, +task setupSeedNodeAndUnicastHostsFile(type: DefaultTask) {, +    mustRunAfter(precommit), +}, +// setup the initial cluster with one node that will serve as the seed node, +// for unicast discovery, +ClusterConfiguration config = new ClusterConfiguration(project), +config.clusterName = 'discovery-file-test-cluster', +List<NodeInfo> nodes = ClusterFormationTasks.setup(project, setupSeedNodeAndUnicastHostsFile, config), +File srcUnicastHostsFile = file('build/cluster/unicast_hosts.txt'), +, +// write the unicast_hosts.txt file to a temporary location to be used by the second cluster, +setupSeedNodeAndUnicastHostsFile.doLast {, +    // write the unicast_hosts.txt file to a temp file in the build directory, +    srcUnicastHostsFile.setText(nodes.get(0).transportUri(), 'UTF-8'), +}, +, +// second cluster, which will connect to the first via the unicast_hosts.txt file, +integTest {, +    dependsOn(setupSeedNodeAndUnicastHostsFile), +    cluster {, +        clusterName = 'discovery-file-test-cluster', +        extraConfigFile 'discovery-file/unicast_hosts.txt', srcUnicastHostsFile, +    }, +    finalizedBy ':plugins:discovery-file:setupSeedNodeAndUnicastHostsFile#stop', +}, +++ b/plugins/discovery-file/src/test/resources/rest-api-spec/test/discovery_file/10_basic.yaml, +"Ensure cluster formed successfully with discovery file":, +    # make sure both nodes joined the cluster, +    - do:, +        cluster.health:, +            wait_for_nodes: 2, +, +    # make sure the cluster was formed with the correct name, +    - match: { cluster_name: 'discovery-file-test-cluster' } # correct cluster name, we formed the cluster we expected to]