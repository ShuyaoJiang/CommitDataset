[+++ b/server/src/test/java/org/elasticsearch/snapshots/SnapshotResiliencyTests.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotAction;, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction;, +import org.elasticsearch.action.admin.indices.delete.DeleteIndexAction;, +import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;, +import org.elasticsearch.action.admin.indices.delete.TransportDeleteIndexAction;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingAction;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;, +import org.elasticsearch.action.admin.indices.mapping.put.TransportPutMappingAction;, +import org.elasticsearch.action.bulk.BulkAction;, +import org.elasticsearch.action.bulk.BulkRequest;, +import org.elasticsearch.action.bulk.TransportBulkAction;, +import org.elasticsearch.action.bulk.TransportShardBulkAction;, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.search.SearchAction;, +import org.elasticsearch.action.search.SearchExecutionStatsCollector;, +import org.elasticsearch.action.search.SearchPhaseController;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchTransportService;, +import org.elasticsearch.action.search.TransportSearchAction;, +import org.elasticsearch.action.support.AutoCreateIndex;, +import org.elasticsearch.action.support.DestructiveOperations;, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.action.update.UpdateHelper;, +import org.elasticsearch.cluster.action.index.MappingUpdatedAction;, +import org.elasticsearch.cluster.metadata.MetaDataDeleteIndexService;, +import org.elasticsearch.cluster.metadata.MetaDataIndexUpgradeService;, +import org.elasticsearch.indices.IndicesModule;, +import org.elasticsearch.indices.analysis.AnalysisModule;, +import org.elasticsearch.ingest.IngestService;, +import org.elasticsearch.node.ResponseCollectorService;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.fetch.FetchPhase;, +import java.util.Objects;, +import java.util.concurrent.atomic.AtomicInteger;, +    public void testSuccessfulSnapshotAndRestore() {, +        final int documents = randomIntBetween(0, 100);, +        final AtomicBoolean snapshotRestored = new AtomicBoolean();, +        final AtomicBoolean documentCountVerified = new AtomicBoolean();, +                            () -> {, +                                final Runnable afterIndexing = () ->, +                                    masterNode.client.admin().cluster().prepareCreateSnapshot(repoName, snapshotName), +                                        .setWaitForCompletion(true).execute(assertNoFailureListener(() -> {, +                                        createdSnapshot.set(true);, +                                        masterNode.client.admin().indices().delete(, +                                            new DeleteIndexRequest(index),, +                                            assertNoFailureListener(() -> masterNode.client.admin().cluster().restoreSnapshot(, +                                                new RestoreSnapshotRequest(repoName, snapshotName).waitForCompletion(true),, +                                                assertNoFailureListener(restoreSnapshotResponse -> {, +                                                    snapshotRestored.set(true);, +                                                    assertEquals(shards, restoreSnapshotResponse.getRestoreInfo().totalShards());, +                                                    masterNode.client.search(, +                                                        new SearchRequest(index).source(, +                                                            new SearchSourceBuilder().size(0).trackTotalHits(true), +                                                        ),, +                                                        assertNoFailureListener(r -> {, +                                                            assertEquals(, +                                                                (long) documents,, +                                                                Objects.requireNonNull(r.getHits().getTotalHits()).value, +                                                            );, +                                                            documentCountVerified.set(true);, +                                                        }));, +                                                }), +                                            )));, +                                    }));, +                                final AtomicInteger countdown = new AtomicInteger(documents);, +                                masterNode.client.admin().indices().putMapping(, +                                    new PutMappingRequest(index).type("_doc").source("foo", "type=text"),, +                                    assertNoFailureListener(r -> {, +                                            for (int i = 0; i < documents; ++i) {, +                                                masterNode.client.bulk(, +                                                    new BulkRequest().add(new IndexRequest(index).source(, +                                                        Collections.singletonMap("foo", "bar" + i))), +                                                        .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE),, +                                                    assertNoFailureListener(, +                                                        bulkResponse -> {, +                                                            assertFalse(, +                                                                "Failures in bulkresponse: " + bulkResponse.buildFailureMessage(),, +                                                                bulkResponse.hasFailures());, +                                                            if (countdown.decrementAndGet() == 0) {, +                                                                afterIndexing.run();, +                                                            }, +                                                        }));, +                                            }, +                                            if (documents == 0) {, +                                                afterIndexing.run();, +                                            }, +                                        }, +                                    ));, +                            }))));, +        runUntil(documentCountVerified::get, TimeUnit.MINUTES.toMillis(5L));, +        assertTrue(snapshotRestored.get());, +        assertTrue(documentCountVerified.get());, +            final BigArrays bigArrays = new BigArrays(new PageCacheRecycler(settings), null, "test");, +            final MapperRegistry mapperRegistry = new IndicesModule(Collections.emptyList()).getMapperRegistry();, +                mapperRegistry,, +                bigArrays,, +            final MetaDataMappingService metaDataMappingService = new MetaDataMappingService(clusterService, indicesService);, +                new NodeMappingRefreshAction(transportService, metaDataMappingService),]