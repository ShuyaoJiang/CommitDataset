[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +                else {, +                    checkGroupingFunctionTarget(e, localFailures);, +                }, +            }, GroupingFunction.class));, +, +            a.groupings().forEach(g -> g.forEachDown(e -> {, +                checkGroupingFunctionTarget(e, localFailures);, +    private static void checkGroupingFunctionTarget(GroupingFunction f, Set<Failure> localFailures) {, +        f.field().forEachDown(e -> {, +            if (e instanceof GroupingFunction) {, +                localFailures.add(fail(f.field(), "Cannot embed grouping functions within each other, found [{}] in [{}]",, +                        Expressions.name(f.field()), Expressions.name(f)));, +            }, +        });, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +                else {, +                    checkGroupingFunctionTarget(e, localFailures);, +                }, +            }, GroupingFunction.class));, +, +            a.groupings().forEach(g -> g.forEachDown(e -> {, +                checkGroupingFunctionTarget(e, localFailures);, +    private static void checkGroupingFunctionTarget(GroupingFunction f, Set<Failure> localFailures) {, +        f.field().forEachDown(e -> {, +            if (e instanceof GroupingFunction) {, +                localFailures.add(fail(f.field(), "Cannot embed grouping functions within each other, found [{}] in [{}]",, +                        Expressions.name(f.field()), Expressions.name(f)));, +            }, +        });, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expression.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +                else {, +                    checkGroupingFunctionTarget(e, localFailures);, +                }, +            }, GroupingFunction.class));, +, +            a.groupings().forEach(g -> g.forEachDown(e -> {, +                checkGroupingFunctionTarget(e, localFailures);, +    private static void checkGroupingFunctionTarget(GroupingFunction f, Set<Failure> localFailures) {, +        f.field().forEachDown(e -> {, +            if (e instanceof GroupingFunction) {, +                localFailures.add(fail(f.field(), "Cannot embed grouping functions within each other, found [{}] in [{}]",, +                        Expressions.name(f.field()), Expressions.name(f)));, +            }, +        });, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expression.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +                new TypeResolution(format(null, "[{}]{} argument must be [{}], found value [{}] type [{}]",, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +                else {, +                    checkGroupingFunctionTarget(e, localFailures);, +                }, +            }, GroupingFunction.class));, +, +            a.groupings().forEach(g -> g.forEachDown(e -> {, +                checkGroupingFunctionTarget(e, localFailures);, +    private static void checkGroupingFunctionTarget(GroupingFunction f, Set<Failure> localFailures) {, +        f.field().forEachDown(e -> {, +            if (e instanceof GroupingFunction) {, +                localFailures.add(fail(f.field(), "Cannot embed grouping functions within each other, found [{}] in [{}]",, +                        Expressions.name(f.field()), Expressions.name(f)));, +            }, +        });, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expression.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +                new TypeResolution(format(null, "[{}]{} argument must be [{}], found value [{}] type [{}]",, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +        assertEquals("1:37: Cannot use an aggregate [MAX] for grouping",, +                error("SELECT MAX(date) FROM test GROUP BY MAX(int)"));, +    }, +, +    public void testGroupingsInHistogram() {, +        assertEquals(, +                "1:47: Cannot embed grouping functions within each other, found [HISTOGRAM(int, 1)] in [HISTOGRAM(HISTOGRAM(int, 1), 1)]",, +                error("SELECT MAX(date) FROM test GROUP BY HISTOGRAM(HISTOGRAM(int, 1), 1)"));, +    }, +, +    public void testCastInHistogram() {, +        accept("SELECT MAX(date) FROM test GROUP BY HISTOGRAM(CAST(int AS LONG), 1)");]