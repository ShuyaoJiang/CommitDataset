[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import java.util.concurrent.atomic.AtomicBoolean;, +                    ClusterState updatedState = newClusterStateBuilder().state(currentState).metaData(builder).build();, +, +                    // wait for responses from other nodes if needed, +                    int counter = 0;, +                    for (String index : request.indices) {, +                        IndexRoutingTable indexRoutingTable = updatedState.routingTable().index(index);, +                        if (indexRoutingTable != null) {, +                            counter += indexRoutingTable.numberOfNodesShardsAreAllocatedOn(updatedState.nodes().masterNodeId());, +                        }, +                    }, +, +                    if (counter == 0) {, +                        listener.onResponse(new Response(true));, +                        return updatedState;, +                    }, +                    mappingCreatedAction.add(new CountDownListener(counter, listener), request.timeout);, +                    return updatedState;, +, +    private class CountDownListener implements NodeMappingCreatedAction.Listener {, +, +        private final AtomicBoolean notified = new AtomicBoolean();, +        private final AtomicInteger countDown;, +        private final Listener listener;, +, +        public CountDownListener(int countDown, Listener listener) {, +            this.countDown = new AtomicInteger(countDown);, +            this.listener = listener;, +        }, +, +        @Override public void onNodeMappingCreated(NodeMappingCreatedAction.NodeMappingCreatedResponse response) {, +            if (countDown.decrementAndGet() == 0) {, +                mappingCreatedAction.remove(this);, +                if (notified.compareAndSet(false, true)) {, +                    listener.onResponse(new Response(true));, +                }, +            }, +        }, +, +        @Override public void onTimeout() {, +            mappingCreatedAction.remove(this);, +            if (notified.compareAndSet(false, true)) {, +                listener.onResponse(new Response(false));, +            }, +        }, +    }]