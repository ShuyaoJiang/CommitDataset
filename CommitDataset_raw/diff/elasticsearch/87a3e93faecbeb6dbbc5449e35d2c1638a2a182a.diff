[+++ b/sql/shared-client/src/main/java/org/elasticsearch/xpack/sql/client/shared/RemoteFailure.java, +     * there is a catastrophic error parsing the remote failure. The actual value, +     * was chosen because it is ten times larger then a "normal" elasticsearch, +     * failure but not so big that we'll consume a ton of memory on huge errors., +     * It <strong>will</strong> produce huge error messages but the user might, +     * want all that because it is <strong>probably</strong> being thrown by, +     * their proxy., +    static final int MAX_RAW_RESPONSE = 512 * 1024;, +            try {, +            } catch (IOException e) {, +                // So far as I know, this is always caused by the response being too large, +                throw new IOException("Response too large", e);, +            }, +++ b/sql/shared-client/src/main/java/org/elasticsearch/xpack/sql/client/shared/RemoteFailure.java, +     * there is a catastrophic error parsing the remote failure. The actual value, +     * was chosen because it is ten times larger then a "normal" elasticsearch, +     * failure but not so big that we'll consume a ton of memory on huge errors., +     * It <strong>will</strong> produce huge error messages but the user might, +     * want all that because it is <strong>probably</strong> being thrown by, +     * their proxy., +    static final int MAX_RAW_RESPONSE = 512 * 1024;, +            try {, +            } catch (IOException e) {, +                // So far as I know, this is always caused by the response being too large, +                throw new IOException("Response too large", e);, +            }, +++ b/sql/shared-client/src/test/java/org/elasticsearch/xpack/sql/client/shared/RemoteFailureTests.java, +import java.lang.StringBuilder;, +import java.util.Locale;, +    public void testTooBig() throws IOException {, +        StringBuilder tooBig = new StringBuilder(RemoteFailure.MAX_RAW_RESPONSE);, +        tooBig.append("{\n");, +        tooBig.append("\"error\" : {\n");, +        tooBig.append("  \"type\" : \"illegal_argument_exception\",\n");, +        tooBig.append("  \"reason\" : \"something\",\n");, +        tooBig.append("  \"header\" : {\n");, +        int i = 0;, +        while (tooBig.length() < RemoteFailure.MAX_RAW_RESPONSE) {, +            tooBig.append("    \"").append(String.format(Locale.ROOT, "%04d", i++)), +                .append("\" : \"lots and lots and lots and lots and lots of words\",\n");, +        }, +        tooBig.append("    \"end\" : \"lots and lots and lots and lots and lots of words\"\n");, +        tooBig.append("  }\n");, +        tooBig.append("}\n");, +        IOException e = expectThrows(IOException.class, () ->, +            RemoteFailure.parseFromResponse(new BytesArray(tooBig.toString()).streamInput()));, +        assertEquals(, +            "Can't parse error from Elasticearch [expected [stack_trace] cannot but didn't see it] ", +                + "at [line 7951 col 1]. Attempted to include response but failed because [Response too large].",, +            e.getMessage());, +    }, +]