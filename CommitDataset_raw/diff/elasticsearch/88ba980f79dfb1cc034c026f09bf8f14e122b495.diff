[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addFacetQuery(String name, XContentQueryBuilder query) {, +    public SearchRequestBuilder addFacetGlobalQuery(String name, XContentQueryBuilder query) {, +        facetsBuilder().queryFacetGlobal(name, query);, +    public SearchRequestBuilder addFacetTerms(String name, String fieldName, int size) {, +        facetsBuilder().termsFacet(name, fieldName, size);, +    public SearchRequestBuilder addFacetGlobalTerms(String name, String fieldName, int size) {, +        facetsBuilder().termsFacetGlobal(name, fieldName, size);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addFacetQuery(String name, XContentQueryBuilder query) {, +    public SearchRequestBuilder addFacetGlobalQuery(String name, XContentQueryBuilder query) {, +        facetsBuilder().queryFacetGlobal(name, query);, +    public SearchRequestBuilder addFacetTerms(String name, String fieldName, int size) {, +        facetsBuilder().termsFacet(name, fieldName, size);, +    public SearchRequestBuilder addFacetGlobalTerms(String name, String fieldName, int size) {, +        facetsBuilder().termsFacetGlobal(name, fieldName, size);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +import org.elasticsearch.search.facets.query.QueryFacetCollectorParser;, +import org.elasticsearch.search.facets.terms.TermFacetCollectorParser;, +    private List<TermsFacet> termsFacets;, +        if (queryFacets == null) {, +            queryFacets = newArrayListWithCapacity(2);, +        }, +        queryFacets.add(new QueryFacet(name, query, false));, +        return this;, +    public SearchSourceFacetsBuilder queryFacetGlobal(String name, XContentQueryBuilder query) {, +        queryFacets.add(new QueryFacet(name, query, true));, +    public SearchSourceFacetsBuilder termsFacet(String name, String fieldName, int size) {, +        if (termsFacets == null) {, +            termsFacets = newArrayListWithCapacity(2);, +        }, +        termsFacets.add(new TermsFacet(name, fieldName, size, false));, +        return this;, +    public SearchSourceFacetsBuilder termsFacetGlobal(String name, String fieldName, int size) {, +        if (termsFacets == null) {, +            termsFacets = newArrayListWithCapacity(2);, +        termsFacets.add(new TermsFacet(name, fieldName, size, true));, +        if (queryFacets == null && termsFacets == null) {, +        if (termsFacets != null) {, +            for (TermsFacet termsFacet : termsFacets) {, +                builder.startObject(termsFacet.name());, +                builder.field("field", termsFacet.fieldName());, +                builder.field("size", termsFacet.size());, +                if (termsFacet.global() != null) {, +                    builder.field("global", termsFacet.global());, +    private static class TermsFacet {, +        private TermsFacet(String name, String fieldName, int size, Boolean global) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addFacetQuery(String name, XContentQueryBuilder query) {, +    public SearchRequestBuilder addFacetGlobalQuery(String name, XContentQueryBuilder query) {, +        facetsBuilder().queryFacetGlobal(name, query);, +    public SearchRequestBuilder addFacetTerms(String name, String fieldName, int size) {, +        facetsBuilder().termsFacet(name, fieldName, size);, +    public SearchRequestBuilder addFacetGlobalTerms(String name, String fieldName, int size) {, +        facetsBuilder().termsFacetGlobal(name, fieldName, size);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +import org.elasticsearch.search.facets.query.QueryFacetCollectorParser;, +import org.elasticsearch.search.facets.terms.TermFacetCollectorParser;, +    private List<TermsFacet> termsFacets;, +        if (queryFacets == null) {, +            queryFacets = newArrayListWithCapacity(2);, +        }, +        queryFacets.add(new QueryFacet(name, query, false));, +        return this;, +    public SearchSourceFacetsBuilder queryFacetGlobal(String name, XContentQueryBuilder query) {, +        queryFacets.add(new QueryFacet(name, query, true));, +    public SearchSourceFacetsBuilder termsFacet(String name, String fieldName, int size) {, +        if (termsFacets == null) {, +            termsFacets = newArrayListWithCapacity(2);, +        }, +        termsFacets.add(new TermsFacet(name, fieldName, size, false));, +        return this;, +    public SearchSourceFacetsBuilder termsFacetGlobal(String name, String fieldName, int size) {, +        if (termsFacets == null) {, +            termsFacets = newArrayListWithCapacity(2);, +        termsFacets.add(new TermsFacet(name, fieldName, size, true));, +        if (queryFacets == null && termsFacets == null) {, +        if (termsFacets != null) {, +            for (TermsFacet termsFacet : termsFacets) {, +                builder.startObject(termsFacet.name());, +                builder.field("field", termsFacet.fieldName());, +                builder.field("size", termsFacet.size());, +                if (termsFacet.global() != null) {, +                    builder.field("global", termsFacet.global());, +    private static class TermsFacet {, +        private TermsFacet(String name, String fieldName, int size, Boolean global) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +import org.elasticsearch.search.facets.InternalFacet;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addFacetQuery(String name, XContentQueryBuilder query) {, +    public SearchRequestBuilder addFacetGlobalQuery(String name, XContentQueryBuilder query) {, +        facetsBuilder().queryFacetGlobal(name, query);, +    public SearchRequestBuilder addFacetTerms(String name, String fieldName, int size) {, +        facetsBuilder().termsFacet(name, fieldName, size);, +    public SearchRequestBuilder addFacetGlobalTerms(String name, String fieldName, int size) {, +        facetsBuilder().termsFacetGlobal(name, fieldName, size);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +import org.elasticsearch.search.facets.query.QueryFacetCollectorParser;, +import org.elasticsearch.search.facets.terms.TermFacetCollectorParser;, +    private List<TermsFacet> termsFacets;]