[+++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +    public abstract long frequency(BytesRef term) throws IOException;, +    public abstract Candidate createCandidate(BytesRef term, long frequency, double channelScore) throws IOException;, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +    public abstract long frequency(BytesRef term) throws IOException;, +    public abstract Candidate createCandidate(BytesRef term, long frequency, double channelScore) throws IOException;, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.index.TermsEnum;, +    private final TermsEnum termsEnum;, +    private final long dictSize;, +    private final long frequencyPlateau;, +    private final boolean useTotalTermFrequency;, +    private final CharsRef spare = new CharsRef();, +    private final BytesRef byteSpare = new BytesRef();, +        final long dictSize = terms.getSumTotalTermFreq();, +        this.useTotalTermFrequency = dictSize != -1;, +        this.dictSize =  dictSize == -1 ? reader.maxDoc() : dictSize;, +        this.frequencyPlateau = thresholdFrequency >= 1.0f ? (int) thresholdFrequency: (int)(dictSize * thresholdFrequency);, +        termsEnum = terms.iterator(null);, +    public long frequency(BytesRef term) throws IOException {, +        term = preFilter(term, spare, byteSpare);, +        return internalFrequency(term);, +    }, +, +, +    public long internalFrequency(BytesRef term) throws IOException {, +        if (termsEnum.seekExact(term, true)) {, +            return useTotalTermFrequency ? termsEnum.totalTermFreq() : termsEnum.docFreq(); , +        }, +        return 0;, +        final long frequency = original.frequency;, +        spellchecker.setThresholdFrequency(thresholdFrequency(frequency, dictSize));, +            postFilter(new Candidate(candidate, internalFrequency(candidate), suggestWord.score, score(suggestWord.freq, suggestWord.score, dictSize)), spare, byteSpare, candidates);, +                    , +                        BytesRef term = BytesRef.deepCopyOf(result);    , +                        long freq = frequency(term);, +                        candidates.add(new Candidate(BytesRef.deepCopyOf(term), freq, candidate.stringDistance, score(candidate.frequency, candidate.stringDistance, dictSize)));, +                        candidates.add(new Candidate(BytesRef.deepCopyOf(result), candidate.frequency, nonErrorLikelihood, score(candidate.frequency, candidate.stringDistance, dictSize)));, +    private double score(long frequency, double errorScore, long dictionarySize) {, +        return errorScore * (((double)frequency + 1) / ((double)dictionarySize +1));, +    protected long thresholdFrequency(long termFrequency, long dictionarySize) {, +            return (long) Math.round(termFrequency * (Math.log10(termFrequency - frequencyPlateau) * (1.0 / Math.log10(logBase))) + 1);, +        public final long frequency;, +        public Candidate(BytesRef term, long frequency, double stringDistance, double score) {, +    public Candidate createCandidate(BytesRef term, long frequency, double channelScore) throws IOException {, +        return new Candidate(term, frequency, channelScore, score(frequency, channelScore, dictSize));, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +    public abstract long frequency(BytesRef term) throws IOException;, +    public abstract Candidate createCandidate(BytesRef term, long frequency, double channelScore) throws IOException;, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.index.TermsEnum;, +    private final TermsEnum termsEnum;, +    private final long dictSize;, +    private final long frequencyPlateau;, +    private final boolean useTotalTermFrequency;, +    private final CharsRef spare = new CharsRef();, +    private final BytesRef byteSpare = new BytesRef();, +        final long dictSize = terms.getSumTotalTermFreq();, +        this.useTotalTermFrequency = dictSize != -1;, +        this.dictSize =  dictSize == -1 ? reader.maxDoc() : dictSize;, +        this.frequencyPlateau = thresholdFrequency >= 1.0f ? (int) thresholdFrequency: (int)(dictSize * thresholdFrequency);, +        termsEnum = terms.iterator(null);, +    public long frequency(BytesRef term) throws IOException {, +        term = preFilter(term, spare, byteSpare);, +        return internalFrequency(term);, +    }, +, +, +    public long internalFrequency(BytesRef term) throws IOException {, +        if (termsEnum.seekExact(term, true)) {, +            return useTotalTermFrequency ? termsEnum.totalTermFreq() : termsEnum.docFreq(); , +        }, +        return 0;, +        final long frequency = original.frequency;, +        spellchecker.setThresholdFrequency(thresholdFrequency(frequency, dictSize));, +            postFilter(new Candidate(candidate, internalFrequency(candidate), suggestWord.score, score(suggestWord.freq, suggestWord.score, dictSize)), spare, byteSpare, candidates);, +                    , +                        BytesRef term = BytesRef.deepCopyOf(result);    , +                        long freq = frequency(term);, +                        candidates.add(new Candidate(BytesRef.deepCopyOf(term), freq, candidate.stringDistance, score(candidate.frequency, candidate.stringDistance, dictSize)));, +                        candidates.add(new Candidate(BytesRef.deepCopyOf(result), candidate.frequency, nonErrorLikelihood, score(candidate.frequency, candidate.stringDistance, dictSize)));, +    private double score(long frequency, double errorScore, long dictionarySize) {, +        return errorScore * (((double)frequency + 1) / ((double)dictionarySize +1));, +    protected long thresholdFrequency(long termFrequency, long dictionarySize) {, +            return (long) Math.round(termFrequency * (Math.log10(termFrequency - frequencyPlateau) * (1.0 / Math.log10(logBase))) + 1);, +        public final long frequency;, +        public Candidate(BytesRef term, long frequency, double stringDistance, double score) {, +    public Candidate createCandidate(BytesRef term, long frequency, double channelScore) throws IOException {, +        return new Candidate(term, frequency, channelScore, score(frequency, channelScore, dictSize));, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/LaplaceScorer.java, +        return (alpha + frequency(spare)) / (alpha +  w_1.frequency + vocabluarySize);, +        long trigramCount = frequency(spare);, +        return (alpha + trigramCount) / (alpha  +  frequency(spare) + vocabluarySize);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +    public abstract long frequency(BytesRef term) throws IOException;, +    public abstract Candidate createCandidate(BytesRef term, long frequency, double channelScore) throws IOException;, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.index.TermsEnum;, +    private final TermsEnum termsEnum;, +    private final long dictSize;]