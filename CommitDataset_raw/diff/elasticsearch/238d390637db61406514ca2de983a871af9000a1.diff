[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import org.elasticsearch.common.Strings;, +        int seed = shuffler.nextSeed();, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards, seed)) {, +        for (ShardRouting shardRouting : shuffler.shuffle(allInitializingShards, seed)) {, +    public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String nodeAttributes, DiscoveryNodes discoveryNodes) {, +        return onlyNodeSelectorActiveInitializingShardsIt(new String[] {nodeAttributes}, discoveryNodes);, +    }, +, +    public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String[] nodeAttributes, DiscoveryNodes discoveryNodes) {, +        Set<String> selectedNodes = Sets.newHashSet(discoveryNodes.resolveNodesIds(nodeAttributes));, +        int seed = shuffler.nextSeed();, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards, seed)) {, +        for (ShardRouting shardRouting : shuffler.shuffle(allInitializingShards, seed)) {, +            throw new IllegalArgumentException("no data nodes with critera(s) " +, +                Strings.arrayToCommaDelimitedString(nodeAttributes) + "] found for shard:" + shardId());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import org.elasticsearch.common.Strings;, +        int seed = shuffler.nextSeed();, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards, seed)) {, +        for (ShardRouting shardRouting : shuffler.shuffle(allInitializingShards, seed)) {, +    public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String nodeAttributes, DiscoveryNodes discoveryNodes) {, +        return onlyNodeSelectorActiveInitializingShardsIt(new String[] {nodeAttributes}, discoveryNodes);, +    }, +, +    public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String[] nodeAttributes, DiscoveryNodes discoveryNodes) {, +        Set<String> selectedNodes = Sets.newHashSet(discoveryNodes.resolveNodesIds(nodeAttributes));, +        int seed = shuffler.nextSeed();, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards, seed)) {, +        for (ShardRouting shardRouting : shuffler.shuffle(allInitializingShards, seed)) {, +            throw new IllegalArgumentException("no data nodes with critera(s) " +, +                Strings.arrayToCommaDelimitedString(nodeAttributes) + "] found for shard:" + shardId());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +                    String nodeAttributes = preference.substring(Preference.ONLY_NODES.type().length() + 1);, +                    return indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttributes.split(","), nodes);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import org.elasticsearch.common.Strings;, +        int seed = shuffler.nextSeed();, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards, seed)) {, +        for (ShardRouting shardRouting : shuffler.shuffle(allInitializingShards, seed)) {, +    public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String nodeAttributes, DiscoveryNodes discoveryNodes) {, +        return onlyNodeSelectorActiveInitializingShardsIt(new String[] {nodeAttributes}, discoveryNodes);, +    }, +, +    public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String[] nodeAttributes, DiscoveryNodes discoveryNodes) {, +        Set<String> selectedNodes = Sets.newHashSet(discoveryNodes.resolveNodesIds(nodeAttributes));, +        int seed = shuffler.nextSeed();, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards, seed)) {, +        for (ShardRouting shardRouting : shuffler.shuffle(allInitializingShards, seed)) {, +            throw new IllegalArgumentException("no data nodes with critera(s) " +, +                Strings.arrayToCommaDelimitedString(nodeAttributes) + "] found for shard:" + shardId());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +                    String nodeAttributes = preference.substring(Preference.ONLY_NODES.type().length() + 1);, +                    return indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttributes.split(","), nodes);, +++ b/core/src/test/java/org/elasticsearch/cluster/structure/RoutingIteratorTests.java, +        shardsIterator = clusterState.routingTable().index("test").shard(0), +            .onlyNodeSelectorActiveInitializingShardsIt(new String[] {"disk:eph*","disk:ebs"},clusterState.nodes());, +        assertThat(shardsIterator.size(), equalTo(2));, +        assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));, +        assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));, +, +        shardsIterator = clusterState.routingTable().index("test").shard(0), +            .onlyNodeSelectorActiveInitializingShardsIt(new String[] {"disk:*", "invalid_name"},clusterState.nodes());, +        assertThat(shardsIterator.size(), equalTo(2));, +        assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));, +        assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));, +, +        shardsIterator = clusterState.routingTable().index("test").shard(0), +            .onlyNodeSelectorActiveInitializingShardsIt(new String[] {"disk:*", "disk:*"},clusterState.nodes());, +        assertThat(shardsIterator.size(), equalTo(2));, +        assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));, +        assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import org.elasticsearch.common.Strings;, +        int seed = shuffler.nextSeed();, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards, seed)) {, +        for (ShardRouting shardRouting : shuffler.shuffle(allInitializingShards, seed)) {, +    public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String nodeAttributes, DiscoveryNodes discoveryNodes) {, +        return onlyNodeSelectorActiveInitializingShardsIt(new String[] {nodeAttributes}, discoveryNodes);, +    }, +, +    public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String[] nodeAttributes, DiscoveryNodes discoveryNodes) {, +        Set<String> selectedNodes = Sets.newHashSet(discoveryNodes.resolveNodesIds(nodeAttributes));, +        int seed = shuffler.nextSeed();, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards, seed)) {, +        for (ShardRouting shardRouting : shuffler.shuffle(allInitializingShards, seed)) {, +            throw new IllegalArgumentException("no data nodes with critera(s) " +, +                Strings.arrayToCommaDelimitedString(nodeAttributes) + "] found for shard:" + shardId());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +                    String nodeAttributes = preference.substring(Preference.ONLY_NODES.type().length() + 1);, +                    return indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttributes.split(","), nodes);, +++ b/core/src/test/java/org/elasticsearch/cluster/structure/RoutingIteratorTests.java, +        shardsIterator = clusterState.routingTable().index("test").shard(0), +            .onlyNodeSelectorActiveInitializingShardsIt(new String[] {"disk:eph*","disk:ebs"},clusterState.nodes());, +        assertThat(shardsIterator.size(), equalTo(2));, +        assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));, +        assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));, +, +        shardsIterator = clusterState.routingTable().index("test").shard(0)]