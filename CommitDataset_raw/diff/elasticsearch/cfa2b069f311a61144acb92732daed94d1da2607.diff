[+++ b/server/src/main/java/org/elasticsearch/discovery/zen/NodesFaultDetection.java, +import java.util.function.Supplier;, +    private final Supplier<ClusterState> clusterStateSupplier;, +    public NodesFaultDetection(Settings settings, ThreadPool threadPool, TransportService transportService,, +                               Supplier<ClusterState> clusterStateSupplier, ClusterName clusterName) {, +        this.clusterStateSupplier = clusterStateSupplier;, +, +        private PingRequest newPingRequest() {, +            return new PingRequest(node, clusterName, localNode, clusterStateSupplier.get().version());, +        }, +, +            transportService.sendRequest(node, PING_ACTION_NAME, newPingRequest(), options, new TransportResponseHandler<PingResponse>() {, +                                transportService.sendRequest(node, PING_ACTION_NAME, newPingRequest(), options, this);, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/NodesFaultDetection.java, +import java.util.function.Supplier;, +    private final Supplier<ClusterState> clusterStateSupplier;, +    public NodesFaultDetection(Settings settings, ThreadPool threadPool, TransportService transportService,, +                               Supplier<ClusterState> clusterStateSupplier, ClusterName clusterName) {, +        this.clusterStateSupplier = clusterStateSupplier;, +, +        private PingRequest newPingRequest() {, +            return new PingRequest(node, clusterName, localNode, clusterStateSupplier.get().version());, +        }, +, +            transportService.sendRequest(node, PING_ACTION_NAME, newPingRequest(), options, new TransportResponseHandler<PingResponse>() {, +                                transportService.sendRequest(node, PING_ACTION_NAME, newPingRequest(), options, this);, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        this.nodesFD = new NodesFaultDetection(settings, threadPool, transportService, this::clusterState, clusterName);, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/NodesFaultDetection.java, +import java.util.function.Supplier;, +    private final Supplier<ClusterState> clusterStateSupplier;, +    public NodesFaultDetection(Settings settings, ThreadPool threadPool, TransportService transportService,, +                               Supplier<ClusterState> clusterStateSupplier, ClusterName clusterName) {, +        this.clusterStateSupplier = clusterStateSupplier;, +, +        private PingRequest newPingRequest() {, +            return new PingRequest(node, clusterName, localNode, clusterStateSupplier.get().version());, +        }, +, +            transportService.sendRequest(node, PING_ACTION_NAME, newPingRequest(), options, new TransportResponseHandler<PingResponse>() {, +                                transportService.sendRequest(node, PING_ACTION_NAME, newPingRequest(), options, this);, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        this.nodesFD = new NodesFaultDetection(settings, threadPool, transportService, this::clusterState, clusterName);, +++ b/server/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java, +        ClusterState clusterState = ClusterState.builder(new ClusterName("test")).version(randomNonNegativeLong()), +            .nodes(buildNodesForA(true)).build();, +            threadPool, serviceA, () -> clusterState, clusterState.getClusterName());, +            threadPool, serviceB, () -> clusterState, clusterState.getClusterName());, +                assertThat(pingRequest.clusterStateVersion(), equalTo(clusterState.version()));]