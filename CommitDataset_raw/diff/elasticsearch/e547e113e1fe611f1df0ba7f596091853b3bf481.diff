[+++ b/docs/reference/search/suggesters/context-suggest.asciidoc, +The mapping for a geo context accepts four settings, only of which `precision` is required:, +++ b/docs/reference/search/suggesters/context-suggest.asciidoc, +The mapping for a geo context accepts four settings, only of which `precision` is required:, +++ b/rest-api-spec/test/suggest/20_context.yaml, +                            "precision" : "5km", +      indices.get_mapping: {}, +, +  - do:, +        index: test, +++ b/docs/reference/search/suggesters/context-suggest.asciidoc, +The mapping for a geo context accepts four settings, only of which `precision` is required:, +++ b/rest-api-spec/test/suggest/20_context.yaml, +                            "precision" : "5km", +      indices.get_mapping: {}, +, +  - do:, +        index: test, +++ b/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestionBuilder.java, +++ b/docs/reference/search/suggesters/context-suggest.asciidoc, +The mapping for a geo context accepts four settings, only of which `precision` is required:, +++ b/rest-api-spec/test/suggest/20_context.yaml, +                            "precision" : "5km", +      indices.get_mapping: {}, +, +  - do:, +        index: test, +++ b/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestionBuilder.java, +++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +        if (!config.containsKey(FIELD_PRECISION)) {, +            throw new ElasticsearchParseException("field [precision] is missing");, +        }, +, +            if (precision == null || precision.length == 0) {, +                precision = this.precision;, +            }, +, +++ b/docs/reference/search/suggesters/context-suggest.asciidoc, +The mapping for a geo context accepts four settings, only of which `precision` is required:, +++ b/rest-api-spec/test/suggest/20_context.yaml, +                            "precision" : "5km", +      indices.get_mapping: {}, +, +  - do:, +        index: test, +++ b/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestionBuilder.java, +++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +        if (!config.containsKey(FIELD_PRECISION)) {, +            throw new ElasticsearchParseException("field [precision] is missing");, +        }, +, +            if (precision == null || precision.length == 0) {, +                precision = this.precision;, +            }, +, +++ b/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchTests.java, +import org.elasticsearch.common.xcontent.*;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.search.aggregations.support.format.ValueFormatter;, +                    .field("precision", "500m"), +                    .field("precision", "1m"), +                .field("precision", "5m"), +    @Test(expected = MapperParsingException.class), +    public void testThatPrecisionIsRequired() throws Exception {, +        XContentBuilder xContentBuilder = jsonBuilder().startObject(), +                .startObject("item").startObject("properties").startObject("suggest"), +                .field("type", "completion"), +                .startObject("context").startObject("location"), +                .field("type", "geo"), +                .field("path", "loc"), +                .endObject().endObject(), +                .endObject().endObject().endObject(), +                .endObject();, +, +        assertAcked(prepareCreate(INDEX).addMapping("item", xContentBuilder));, +    }, +, +    @Test, +    public void testThatLatLonParsingFromSourceWorks() throws Exception {, +        XContentBuilder xContentBuilder = jsonBuilder().startObject(), +                .startObject("mappings").startObject("test").startObject("properties").startObject("suggest_geo"), +                .field("type", "completion"), +                .startObject("context").startObject("location"), +                .field("type", "geo"), +                .field("precision", "1km"), +                .endObject().endObject(), +                .endObject().endObject().endObject(), +                .endObject().endObject();, +, +        assertAcked(prepareCreate("test").setSource(xContentBuilder.bytes()));, +, +        double latitude = 52.22;, +        double longitude = 4.53;, +        String geohash = GeoHashUtils.encode(latitude, longitude);, +, +        XContentBuilder doc1 = jsonBuilder().startObject().startObject("suggest_geo").field("input", "Hotel Marriot in Amsterdam").startObject("context").startObject("location").field("lat", latitude).field("lon", longitude).endObject().endObject().endObject().endObject();, +        index("test", "test", "1", doc1);, +        XContentBuilder doc2 = jsonBuilder().startObject().startObject("suggest_geo").field("input", "Hotel Marriot in Berlin").startObject("context").startObject("location").field("lat", 53.31).field("lon", 13.24).endObject().endObject().endObject().endObject();, +        index("test", "test", "2", doc2);, +        refresh();]