[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import org.elasticsearch.*;, +import java.nio.file.*;, +import java.util.*;, +        tryToDeletePath(terminal, tmp, pluginFile);, +        Path sourcePluginBinDirectory = extractLocation.resolve("bin");, +        Path destPluginBinDirectory = pluginHandle.binDir(environment);, +        boolean needToCopyBinDirectory = Files.exists(sourcePluginBinDirectory);, +        if (needToCopyBinDirectory) {, +            if (Files.exists(destPluginBinDirectory) && !Files.isDirectory(destPluginBinDirectory)) {, +                tryToDeletePath(terminal, extractLocation);, +                throw new IOException("plugin bin directory " + destPluginBinDirectory + " is not a directory");, +            }, +, +            try {, +                copyBinDirectory(sourcePluginBinDirectory, destPluginBinDirectory, pluginHandle.name, terminal);, +            } catch (IOException e) {, +                // rollback and remove potentially before installed leftovers, +                terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s", sourcePluginBinDirectory, pluginHandle.binDir(environment), e.getMessage());, +                tryToDeletePath(terminal, extractLocation, pluginHandle.binDir(environment));, +                throw e;, +            }, +, +        }, +, +        Path sourceConfigDirectory = extractLocation.resolve("config");, +        Path destConfigDirectory = pluginHandle.configDir(environment);, +        boolean needToCopyConfigDirectory = Files.exists(sourceConfigDirectory);, +        if (needToCopyConfigDirectory) {, +            if (Files.exists(destConfigDirectory) && !Files.isDirectory(destConfigDirectory)) {, +                tryToDeletePath(terminal, extractLocation, pluginHandle.binDir(environment));, +                throw new IOException("plugin config directory " + destConfigDirectory + " is not a directory");, +            }, +, +            try {, +                terminal.println(VERBOSE, "Found config, moving to %s", destConfigDirectory.toAbsolutePath());, +                moveFilesWithoutOverwriting(sourceConfigDirectory, destConfigDirectory, ".new");, +                terminal.println(VERBOSE, "Installed %s into %s", pluginHandle.name, destConfigDirectory.toAbsolutePath());, +            } catch (IOException e) {, +                terminal.printError("Error copying config directory [%s] to [%s], cleaning up, reason: %s", sourceConfigDirectory, pluginHandle.binDir(environment), e.getMessage());, +                tryToDeletePath(terminal, extractLocation, pluginHandle.binDir(environment), pluginHandle.configDir(environment));, +                throw e;, +            }, +        }, +    }, +, +    private void tryToDeletePath(Terminal terminal, Path ... paths) {, +        for (Path path : paths) {, +            try {, +                IOUtils.rm(path);, +            } catch (IOException e) {, +                terminal.printError(e);, +            }, +        }, +    }, +, +    private void copyBinDirectory(Path sourcePluginBinDirectory, Path destPluginBinDirectory, String pluginName, Terminal terminal) throws IOException {, +        boolean canCopyFromSource = Files.exists(sourcePluginBinDirectory) && Files.isReadable(sourcePluginBinDirectory) && Files.isDirectory(sourcePluginBinDirectory);, +        if (canCopyFromSource) {, +            terminal.println(VERBOSE, "Found bin, moving to %s", destPluginBinDirectory.toAbsolutePath());, +            if (Files.exists(destPluginBinDirectory)) {, +                IOUtils.rm(destPluginBinDirectory);, +                Files.createDirectories(destPluginBinDirectory.getParent());, +                FileSystemUtils.move(sourcePluginBinDirectory, destPluginBinDirectory);, +                throw new IOException("Could not move [" + sourcePluginBinDirectory + "] to [" + destPluginBinDirectory + "]", e);, +            if (Environment.getFileStore(destPluginBinDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) {, +                Files.walkFileTree(destPluginBinDirectory, new SimpleFileVisitor<Path>() {, +            terminal.println(VERBOSE, "Installed %s into %s", pluginName, destPluginBinDirectory.toAbsolutePath());, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import org.elasticsearch.*;, +import java.nio.file.*;, +import java.util.*;, +        tryToDeletePath(terminal, tmp, pluginFile);, +        Path sourcePluginBinDirectory = extractLocation.resolve("bin");, +        Path destPluginBinDirectory = pluginHandle.binDir(environment);, +        boolean needToCopyBinDirectory = Files.exists(sourcePluginBinDirectory);, +        if (needToCopyBinDirectory) {, +            if (Files.exists(destPluginBinDirectory) && !Files.isDirectory(destPluginBinDirectory)) {, +                tryToDeletePath(terminal, extractLocation);, +                throw new IOException("plugin bin directory " + destPluginBinDirectory + " is not a directory");, +            }, +, +            try {, +                copyBinDirectory(sourcePluginBinDirectory, destPluginBinDirectory, pluginHandle.name, terminal);, +            } catch (IOException e) {, +                // rollback and remove potentially before installed leftovers, +                terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s", sourcePluginBinDirectory, pluginHandle.binDir(environment), e.getMessage());, +                tryToDeletePath(terminal, extractLocation, pluginHandle.binDir(environment));, +                throw e;, +            }, +, +        }, +, +        Path sourceConfigDirectory = extractLocation.resolve("config");, +        Path destConfigDirectory = pluginHandle.configDir(environment);, +        boolean needToCopyConfigDirectory = Files.exists(sourceConfigDirectory);, +        if (needToCopyConfigDirectory) {, +            if (Files.exists(destConfigDirectory) && !Files.isDirectory(destConfigDirectory)) {, +                tryToDeletePath(terminal, extractLocation, pluginHandle.binDir(environment));, +                throw new IOException("plugin config directory " + destConfigDirectory + " is not a directory");]