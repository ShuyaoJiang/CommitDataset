[+++ b/TESTING.asciidoc, +vagrant up --provision trusty && vagrant halt trusty, +vagrant up --provision centos-7 && vagrant halt centos-7, +  vagrant up --provision $box, +vagrant up trusty && vagrant ssh trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant destroy -f trusty && vagrant up trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant up trusty && vagrant ssh trusty, +++ b/TESTING.asciidoc, +vagrant up --provision trusty && vagrant halt trusty, +vagrant up --provision centos-7 && vagrant halt centos-7, +  vagrant up --provision $box, +vagrant up trusty && vagrant ssh trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant destroy -f trusty && vagrant up trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant up trusty && vagrant ssh trusty, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/TESTING.asciidoc, +vagrant up --provision trusty && vagrant halt trusty, +vagrant up --provision centos-7 && vagrant halt centos-7, +  vagrant up --provision $box, +vagrant up trusty && vagrant ssh trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant destroy -f trusty && vagrant up trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant up trusty && vagrant ssh trusty, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/FieldQueryExtension.java, +import org.elasticsearch.index.query.QueryShardContext;, +    Query query(QueryShardContext context, String queryText);, +++ b/TESTING.asciidoc, +vagrant up --provision trusty && vagrant halt trusty, +vagrant up --provision centos-7 && vagrant halt centos-7, +  vagrant up --provision $box, +vagrant up trusty && vagrant ssh trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant destroy -f trusty && vagrant up trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant up trusty && vagrant ssh trusty, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/FieldQueryExtension.java, +import org.elasticsearch.index.query.QueryShardContext;, +    Query query(QueryShardContext context, String queryText);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.query.QueryShardContext;, +    private final QueryShardContext context;, +    public MapperQueryParser(QueryShardContext context) {, +        this.context = context;, +            return fieldQueryExtension.query(context, queryText);, +                    currentFieldType = context.fieldMapper(field + quoteFieldSuffix);, +                currentFieldType = context.fieldMapper(field);, +                        setAnalyzer(context.getSearchQuoteAnalyzer(currentFieldType));, +                        setAnalyzer(context.getSearchAnalyzer(currentFieldType));, +                            query = currentFieldType.termQuery(queryText, context);, +        currentFieldType = context.fieldMapper(field);, +        currentFieldType = context.fieldMapper(field);, +            currentFieldType = context.fieldMapper(field);, +                    setAnalyzer(context.getSearchAnalyzer(currentFieldType));, +                    query = currentFieldType.prefixQuery(termStr, multiTermRewriteMethod, context);, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +            currentFieldType = context.fieldMapper(field);, +                    setAnalyzer(context.getSearchAnalyzer(currentFieldType));, +            currentFieldType = context.fieldMapper(field);, +                    setAnalyzer(context.getSearchAnalyzer(currentFieldType));, +                    query = currentFieldType.regexpQuery(termStr, RegExp.ALL, maxDeterminizedStates, multiTermRewriteMethod, context);, +            fields = context.simpleMatchToIndexNames(field);, +++ b/TESTING.asciidoc, +vagrant up --provision trusty && vagrant halt trusty, +vagrant up --provision centos-7 && vagrant halt centos-7, +  vagrant up --provision $box, +vagrant up trusty && vagrant ssh trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant destroy -f trusty && vagrant up trusty, +vagrant up centos-7 && vagrant ssh centos-7, +vagrant up trusty && vagrant ssh trusty, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/FieldQueryExtension.java, +import org.elasticsearch.index.query.QueryShardContext;, +    Query query(QueryShardContext context, String queryText);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.query.QueryShardContext;, +    private final QueryShardContext context;]