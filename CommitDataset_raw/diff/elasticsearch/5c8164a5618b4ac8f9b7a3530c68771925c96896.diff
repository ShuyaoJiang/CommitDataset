[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +            settings(source.utf8ToString());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +            settings(source.utf8ToString());, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +        StreamInput header = headerRef.streamInput();, +            this.perFieldTermVectorInput = termVectors.streamInput();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +            settings(source.utf8ToString());, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +        StreamInput header = headerRef.streamInput();, +            this.perFieldTermVectorInput = termVectors.streamInput();, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +            this.doc = new BytesArray(other.doc().toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +            settings(source.utf8ToString());, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +        StreamInput header = headerRef.streamInput();, +            this.perFieldTermVectorInput = termVectors.streamInput();, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +            this.doc = new BytesArray(other.doc().toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +                headerRef = new BytesArray(headerRef.toBytesRef(), true);, +                termVectors = new BytesArray(termVectors.toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +            settings(source.utf8ToString());, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +        StreamInput header = headerRef.streamInput();, +            this.perFieldTermVectorInput = termVectors.streamInput();, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +            this.doc = new BytesArray(other.doc().toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +                headerRef = new BytesArray(headerRef.toBytesRef(), true);, +                termVectors = new BytesArray(termVectors.toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.common.bytes.BytesReference;, +            return BytesReference.toBytes(os.bytes());, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +            settings(source.utf8ToString());, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +        StreamInput header = headerRef.streamInput();, +            this.perFieldTermVectorInput = termVectors.streamInput();, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +            this.doc = new BytesArray(other.doc().toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +                headerRef = new BytesArray(headerRef.toBytesRef(), true);, +                termVectors = new BytesArray(termVectors.toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.common.bytes.BytesReference;, +            return BytesReference.toBytes(os.bytes());, +, +++ b/core/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +public final class BytesArray extends BytesReference {, +    private final byte[] bytes;, +    private final int offset;, +    private final int length;, +    public int offset() {, +    public long ramBytesUsed() {, +        return bytes.length;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +            settings(source.utf8ToString());, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +        StreamInput header = headerRef.streamInput();, +            this.perFieldTermVectorInput = termVectors.streamInput();, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +            this.doc = new BytesArray(other.doc().toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +                headerRef = new BytesArray(headerRef.toBytesRef(), true);, +                termVectors = new BytesArray(termVectors.toBytesRef(), true);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.common.bytes.BytesReference;, +            return BytesReference.toBytes(os.bytes());, +, +++ b/core/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +public final class BytesArray extends BytesReference {, +    private final byte[] bytes;, +    private final int offset;, +    private final int length;, +    public int offset() {, +    public long ramBytesUsed() {, +        return bytes.length;, +++ b/core/src/main/java/org/elasticsearch/common/bytes/BytesReference.java, +import org.apache.lucene.util.Accountable;, +import java.util.function.ToIntBiFunction;, +public abstract class BytesReference implements Accountable, Comparable<BytesReference> {, +    private Integer hash = null; // we cache the hash of this reference since it can be quite costly to re-calculated it, +    public abstract byte get(int index);, +    public abstract int length();, +    public abstract BytesReference slice(int from, int length);, +    public StreamInput streamInput() {, +        BytesRef ref = toBytesRef();, +        return StreamInput.wrap(ref.bytes, ref.offset, ref.length);, +    }, +    public void writeTo(OutputStream os) throws IOException {]