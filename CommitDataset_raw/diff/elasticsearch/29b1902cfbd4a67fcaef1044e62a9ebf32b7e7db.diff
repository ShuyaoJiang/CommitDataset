[+++ b/docs/reference/search/aggregations/bucket/significantterms-aggregation.asciidoc, +, +===== Percentage, +A simple calculation of the number of documents in the foreground sample with a term divided by the number of documents in the background with the term., +By default this produces a score greater than zero and less than one., +, +The benefit of this heuristic is that the scoring logic is simple to explain to anyone familiar with a "per capita" statistic. However, for fields with high cardinality there is a tendency for this heuristic to select the rarest terms such as typos that occur only once because they score 1/1 = 100%., +, +It would be hard for a seasoned boxer to win a championship if the prize was awarded purely on the basis of percentage of fights won - by these rules a newcomer with only one fight under his belt would be impossible to beat., +Multiple observations are typically required to reinforce a view so it is recommended in these cases to set both `min_doc_count` and `shard_min_doc_count` to a higher value such as 10 in order to filter out the low-frequency terms that otherwise take precedence., +	, +[source,js], +--------------------------------------------------, +, +	 "percentage": {, +	 }, +--------------------------------------------------, +, +, +++ b/docs/reference/search/aggregations/bucket/significantterms-aggregation.asciidoc, +, +===== Percentage, +A simple calculation of the number of documents in the foreground sample with a term divided by the number of documents in the background with the term., +By default this produces a score greater than zero and less than one., +, +The benefit of this heuristic is that the scoring logic is simple to explain to anyone familiar with a "per capita" statistic. However, for fields with high cardinality there is a tendency for this heuristic to select the rarest terms such as typos that occur only once because they score 1/1 = 100%., +, +It would be hard for a seasoned boxer to win a championship if the prize was awarded purely on the basis of percentage of fights won - by these rules a newcomer with only one fight under his belt would be impossible to beat., +Multiple observations are typically required to reinforce a view so it is recommended in these cases to set both `min_doc_count` and `shard_min_doc_count` to a higher value such as 10 in order to filter out the low-frequency terms that otherwise take precedence., +	, +[source,js], +--------------------------------------------------, +, +	 "percentage": {, +	 }, +--------------------------------------------------, +, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/PercentageScore.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +, +package org.elasticsearch.search.aggregations.bucket.significant.heuristics;, +, +, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.QueryParsingException;, +, +import java.io.IOException;, +, +public class PercentageScore extends SignificanceHeuristic {, +, +    public static final PercentageScore INSTANCE = new PercentageScore();, +, +    protected static final String[] NAMES = {"percentage"};, +, +    private PercentageScore() {};, +, +    public static final SignificanceHeuristicStreams.Stream STREAM = new SignificanceHeuristicStreams.Stream() {, +        @Override, +        public SignificanceHeuristic readResult(StreamInput in) throws IOException {, +            return readFrom(in);, +        }, +, +        @Override, +        public String getName() {, +            return NAMES[0];, +        }, +    };, +, +    public static SignificanceHeuristic readFrom(StreamInput in) throws IOException {, +        return INSTANCE;, +    }, +, +    /**, +     * Indicates the significance of a term in a sample by determining what percentage, +     * of all occurrences of a term are found in the sample. , +     */, +    @Override]