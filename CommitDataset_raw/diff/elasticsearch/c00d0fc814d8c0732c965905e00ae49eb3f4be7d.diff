[+++ b/buildSrc/build.gradle, +  compile 'com.avast.gradle:gradle-docker-compose-plugin:0.8.12', +++ b/buildSrc/build.gradle, +  compile 'com.avast.gradle:gradle-docker-compose-plugin:0.8.12', +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +import org.gradle.api.plugins.ExtraPropertiesExtension;, +import org.gradle.internal.os.OperatingSystem;, +import java.util.function.BiConsumer;, +            Task buildFixture = project.getTasks().create("buildFixture");, +            Task preProcessFixture = project.getTasks().create("preProcessFixture");, +            buildFixture.dependsOn(preProcessFixture);, +            Task postProcessFixture = project.getTasks().create("postProcessFixture");, +            buildFixture.dependsOn(postProcessFixture);, +, +                preProcessFixture.setEnabled(false);, +                postProcessFixture.setEnabled(false);, +                buildFixture.setEnabled(false);, +            buildFixture.dependsOn(tasks.getByName("composeUp"));, +            tasks.getByName("composeUp").mustRunAfter(preProcessFixture);, +            postProcessFixture.dependsOn("composeUp");, +, +            configureServiceInfoForTask(, +                postProcessFixture,, +                project,, +                (name, port) -> postProcessFixture.getExtensions(), +                    .getByType(ExtraPropertiesExtension.class).set(name, port), +            );, +            extension.fixtures.all(fixtureProject -> project.evaluationDependsOn(fixtureProject.getPath()));, +                    fixtureProject.getTasks().matching(it->it.getName().equals("buildFixture")).all(buildFixture ->, +                        task.dependsOn(buildFixture), +                    );, +                    fixtureProject.getTasks().matching(it->it.getName().equals("composeDown")).all(composeDown ->, +                        task.finalizedBy(composeDown), +                    );, +                    configureServiceInfoForTask(, +                        task,, +                        fixtureProject,, +                        (name, port) -> setSystemProperty(task, name, port), +                    );, +                }), +            );, +        }, +    }, +, +    private void configureServiceInfoForTask(Task task, Project fixtureProject, BiConsumer<String, Integer> consumer) {, +        task.doFirst(theTask ->, +                .forEach((service, infos) -> {, +                    theTask.getLogger().info(, +                        "Port maps for {}\nTCP:{}\nUDP:{}\nexposed to {}",, +                        fixtureProject.getPath(),, +                        infos.getTcpPorts(),, +                        infos.getUdpPorts(),, +                        theTask.getPath(), +                    );, +                    infos.getTcpPorts(), +                        .forEach((container, host) -> consumer.accept(, +                            "test.fixtures." + service + ".tcp." + container,, +                    infos.getUdpPorts(), +                        .forEach((container, host) -> consumer.accept(, +                            "test.fixtures." + service + ".udp." + container,, +                            host, +                        ));, +                }), +        );, +        if (OperatingSystem.current().isWindows()) {, +            return false;, +        }, +++ b/buildSrc/build.gradle, +  compile 'com.avast.gradle:gradle-docker-compose-plugin:0.8.12', +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +import org.gradle.api.plugins.ExtraPropertiesExtension;, +import org.gradle.internal.os.OperatingSystem;, +import java.util.function.BiConsumer;, +            Task buildFixture = project.getTasks().create("buildFixture");, +            Task preProcessFixture = project.getTasks().create("preProcessFixture");, +            buildFixture.dependsOn(preProcessFixture);, +            Task postProcessFixture = project.getTasks().create("postProcessFixture");, +            buildFixture.dependsOn(postProcessFixture);, +, +                preProcessFixture.setEnabled(false);, +                postProcessFixture.setEnabled(false);, +                buildFixture.setEnabled(false);, +            buildFixture.dependsOn(tasks.getByName("composeUp"));, +            tasks.getByName("composeUp").mustRunAfter(preProcessFixture);, +            postProcessFixture.dependsOn("composeUp");, +, +            configureServiceInfoForTask(, +                postProcessFixture,, +                project,, +                (name, port) -> postProcessFixture.getExtensions(), +                    .getByType(ExtraPropertiesExtension.class).set(name, port), +            );, +            extension.fixtures.all(fixtureProject -> project.evaluationDependsOn(fixtureProject.getPath()));, +                    fixtureProject.getTasks().matching(it->it.getName().equals("buildFixture")).all(buildFixture ->, +                        task.dependsOn(buildFixture), +                    );, +                    fixtureProject.getTasks().matching(it->it.getName().equals("composeDown")).all(composeDown ->, +                        task.finalizedBy(composeDown), +                    );, +                    configureServiceInfoForTask(]