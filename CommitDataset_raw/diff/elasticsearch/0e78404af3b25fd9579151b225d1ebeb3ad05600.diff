[+++ b/src/main/java/org/elasticsearch/monitor/fs/FsStats.java, +import java.util.HashSet;, +import java.util.Set;, +    public static class Info implements Streamable, ToXContent {, +        private long addLong(long current, long other) {, +            if (other == -1) {, +                return current;, +            }, +            if (current == -1) {, +                return other;, +            }, +            return current + other;, +        }, +, +        private double addDouble(double current, double other) {, +            if (other == -1) {, +                return current;, +            }, +            if (current == -1) {, +                return other;, +            }, +            return current + other;, +        }, +, +        public void add(Info info) {, +            total = addLong(total, info.total);, +            free = addLong(free, info.free);, +            available = addLong(available, info.available);, +            diskReads = addLong(diskReads, info.diskReads);, +            diskWrites = addLong(diskWrites, info.diskWrites);, +            diskReadBytes = addLong(diskReadBytes, info.diskReadBytes);, +            diskWriteBytes = addLong(diskWriteBytes, info.diskWriteBytes);, +            diskQueue = addDouble(diskQueue, info.diskQueue);, +            diskServiceTime = addDouble(diskServiceTime, info.diskServiceTime);, +        }, +, +        static final class Fields {, +            static final XContentBuilderString PATH = new XContentBuilderString("path");, +            static final XContentBuilderString MOUNT = new XContentBuilderString("mount");, +            static final XContentBuilderString DEV = new XContentBuilderString("dev");, +            static final XContentBuilderString TOTAL = new XContentBuilderString("total");, +            static final XContentBuilderString TOTAL_IN_BYTES = new XContentBuilderString("total_in_bytes");, +            static final XContentBuilderString FREE = new XContentBuilderString("free");, +            static final XContentBuilderString FREE_IN_BYTES = new XContentBuilderString("free_in_bytes");, +            static final XContentBuilderString AVAILABLE = new XContentBuilderString("available");, +            static final XContentBuilderString AVAILABLE_IN_BYTES = new XContentBuilderString("available_in_bytes");, +            static final XContentBuilderString DISK_READS = new XContentBuilderString("disk_reads");, +            static final XContentBuilderString DISK_WRITES = new XContentBuilderString("disk_writes");, +            static final XContentBuilderString DISK_IO_OP = new XContentBuilderString("disk_io_op");, +            static final XContentBuilderString DISK_READ_SIZE = new XContentBuilderString("disk_read_size");, +            static final XContentBuilderString DISK_READ_SIZE_IN_BYTES = new XContentBuilderString("disk_read_size_in_bytes");, +            static final XContentBuilderString DISK_WRITE_SIZE = new XContentBuilderString("disk_write_size");, +            static final XContentBuilderString DISK_WRITE_SIZE_IN_BYTES = new XContentBuilderString("disk_write_size_in_bytes");, +            static final XContentBuilderString DISK_IO_SIZE = new XContentBuilderString("disk_io_size");, +            static final XContentBuilderString DISK_IO_IN_BYTES = new XContentBuilderString("disk_io_size_in_bytes");, +            static final XContentBuilderString DISK_QUEUE = new XContentBuilderString("disk_queue");, +            static final XContentBuilderString DISK_SERVICE_TIME = new XContentBuilderString("disk_service_time");, +        }, +, +        @Override, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.startObject();, +            if (path != null) {, +                builder.field(Fields.PATH, path, XContentBuilder.FieldCaseConversion.NONE);, +            }, +            if (mount != null) {, +                builder.field(Fields.MOUNT, mount, XContentBuilder.FieldCaseConversion.NONE);, +            }, +            if (dev != null) {, +                builder.field(Fields.DEV, dev, XContentBuilder.FieldCaseConversion.NONE);, +            }, +, +            if (total != -1) {, +                builder.byteSizeField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, total);, +            }, +            if (free != -1) {, +                builder.byteSizeField(Fields.FREE_IN_BYTES, Fields.FREE, free);, +            }, +            if (available != -1) {, +                builder.byteSizeField(Fields.AVAILABLE_IN_BYTES, Fields.AVAILABLE, available);, +            }, +, +            long iop = -1;, +, +            if (diskReads != -1) {, +                iop = diskReads;, +                builder.field(Fields.DISK_READS, diskReads);, +            }, +            if (diskWrites != -1) {, +                if (iop != -1) {, +                    iop += diskWrites;, +                } else {, +                    iop = diskWrites;, +                }, +                builder.field(Fields.DISK_WRITES, diskWrites);, +            }, +, +            if (iop != -1) {, +                builder.field(Fields.DISK_IO_OP, iop);, +            }]