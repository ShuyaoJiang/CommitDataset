[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/common/hash/MessageDigests.java, +import org.elasticsearch.ElasticsearchException;, +, +public class MessageDigests {, +                throw new ElasticsearchException("unexpected exception creating MessageDigest instance for [" + digest + "]", e);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/common/hash/MessageDigests.java, +import org.elasticsearch.ElasticsearchException;, +, +public class MessageDigests {, +                throw new ElasticsearchException("unexpected exception creating MessageDigest instance for [" + digest + "]", e);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {, +            StringFieldMapper.Builder builder = stringField(name);, +                    throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            parseTextField(builder, name, node, parserContext);, +                        throw new MapperParsingException("Analyzer [" + propNode.toString() + "] not found for field [" + name + "]");, +                } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/common/hash/MessageDigests.java, +import org.elasticsearch.ElasticsearchException;, +, +public class MessageDigests {, +                throw new ElasticsearchException("unexpected exception creating MessageDigest instance for [" + digest + "]", e);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {, +            StringFieldMapper.Builder builder = stringField(name);, +                    throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            parseTextField(builder, name, node, parserContext);, +                        throw new MapperParsingException("Analyzer [" + propNode.toString() + "] not found for field [" + name + "]");, +                } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +                throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true] or [false]");, +                throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            throw new MapperParsingException("Unknown Similarity type [" + value + "] for [" + name + "]");, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/common/hash/MessageDigests.java, +import org.elasticsearch.ElasticsearchException;, +, +public class MessageDigests {, +                throw new ElasticsearchException("unexpected exception creating MessageDigest instance for [" + digest + "]", e);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {, +            StringFieldMapper.Builder builder = stringField(name);, +                    throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            parseTextField(builder, name, node, parserContext);, +                        throw new MapperParsingException("Analyzer [" + propNode.toString() + "] not found for field [" + name + "]");, +                } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +                throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true] or [false]");, +                throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            throw new MapperParsingException("Unknown Similarity type [" + value + "] for [" + name + "]");, +++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java, +    public static String readOptionalStringProperty(String processorType, String processorTag, Map<String, Object> configuration, String propertyName) {, +    public static String readStringProperty(String processorType, String processorTag, Map<String, Object> configuration, String propertyName) {, +    public static String readStringProperty(String processorType, String processorTag, Map<String, Object> configuration, String propertyName, String defaultValue) {, +        throw newConfigurationException(processorType, processorTag, propertyName, "property isn't a string, but of type [" + value.getClass().getName() + "]");, +    public static <T> List<T> readOptionalList(String processorType, String processorTag, Map<String, Object> configuration, String propertyName) {, +            throw newConfigurationException(processorType, processorTag, propertyName, "property isn't a list, but of type [" + value.getClass().getName() + "]");, +    public static <T> Map<String, T> readMap(String processorType, String processorTag, Map<String, Object> configuration, String propertyName) {, +    public static <T> Map<String, T> readOptionalMap(String processorType, String processorTag, Map<String, Object> configuration, String propertyName) {, +            throw newConfigurationException(processorType, processorTag, propertyName, "property isn't a map, but of type [" + value.getClass().getName() + "]");, +    public static ElasticsearchParseException newConfigurationException(String processorType, String processorTag, String propertyName, String reason) {, +    public static List<Processor> readProcessorConfigs(List<Map<String, Map<String, Object>>> processorConfigs, ProcessorsRegistry processorRegistry) throws Exception {, +            List<Map<String, Map<String, Object>>> onFailureProcessorConfigs = ConfigurationUtils.readOptionalList(null, null, config, Pipeline.ON_FAILURE_KEY);, +                throw new ElasticsearchParseException("processor [" + type + "] doesn't support one or more provided configuration parameters " + Arrays.toString(config.keySet().toArray()));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/common/hash/MessageDigests.java, +import org.elasticsearch.ElasticsearchException;, +, +public class MessageDigests {, +                throw new ElasticsearchException("unexpected exception creating MessageDigest instance for [" + digest + "]", e);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {, +            StringFieldMapper.Builder builder = stringField(name);, +                    throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            parseTextField(builder, name, node, parserContext);, +                        throw new MapperParsingException("Analyzer [" + propNode.toString() + "] not found for field [" + name + "]");, +                } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +                throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true] or [false]");, +                throw new IllegalArgumentException("Can't parse [index] value [" + index + "], expected [true], [false], [no], [not_analyzed] or [analyzed]");, +            throw new MapperParsingException("Unknown Similarity type [" + value + "] for [" + name + "]");, +++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java]