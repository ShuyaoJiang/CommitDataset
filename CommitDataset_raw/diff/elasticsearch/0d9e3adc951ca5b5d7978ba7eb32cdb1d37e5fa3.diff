[+++ b/server/src/main/java/org/elasticsearch/common/settings/SettingsFilter.java, +            builder.keys().removeIf(key -> Regex.simpleMatch(simpleMatchPatterns, key));, +++ b/server/src/main/java/org/elasticsearch/common/settings/SettingsFilter.java, +            builder.keys().removeIf(key -> Regex.simpleMatch(simpleMatchPatterns, key));, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +        possibleNodes.removeIf(node -> !node.isMasterNode());, +++ b/server/src/main/java/org/elasticsearch/common/settings/SettingsFilter.java, +            builder.keys().removeIf(key -> Regex.simpleMatch(simpleMatchPatterns, key));, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +        possibleNodes.removeIf(node -> !node.isMasterNode());, +++ b/server/src/main/java/org/elasticsearch/gateway/AsyncShardFetch.java, +        shardCache.keySet().removeIf(nodeId -> !nodes.nodeExists(nodeId));, +++ b/server/src/main/java/org/elasticsearch/common/settings/SettingsFilter.java, +            builder.keys().removeIf(key -> Regex.simpleMatch(simpleMatchPatterns, key));, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +        possibleNodes.removeIf(node -> !node.isMasterNode());, +++ b/server/src/main/java/org/elasticsearch/gateway/AsyncShardFetch.java, +        shardCache.keySet().removeIf(nodeId -> !nodes.nodeExists(nodeId));, +++ b/server/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +        folderNotFoundCache.removeIf(shardId -> !routingTable.hasIndex(shardId.getIndex()));, +++ b/server/src/main/java/org/elasticsearch/common/settings/SettingsFilter.java, +            builder.keys().removeIf(key -> Regex.simpleMatch(simpleMatchPatterns, key));, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +        possibleNodes.removeIf(node -> !node.isMasterNode());, +++ b/server/src/main/java/org/elasticsearch/gateway/AsyncShardFetch.java, +        shardCache.keySet().removeIf(nodeId -> !nodes.nodeExists(nodeId));, +++ b/server/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +        folderNotFoundCache.removeIf(shardId -> !routingTable.hasIndex(shardId.getIndex()));, +++ b/server/src/test/java/org/elasticsearch/index/translog/TranslogTests.java, +            writtenOperations.removeIf(next -> checkpoint.offset < (next.location.translogLocation + next.location.size));]