[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.common.logging.LogConfigurator;, +        LogConfigurator.registerErrorListener();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.common.logging.LogConfigurator;, +        LogConfigurator.registerErrorListener();, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +import org.apache.logging.log4j.status.StatusConsoleListener;, +import org.apache.logging.log4j.status.StatusData;, +import org.apache.logging.log4j.status.StatusListener;, +import org.apache.logging.log4j.status.StatusLogger;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.stream.StreamSupport;, +    /*, +     * We want to detect situations where we touch logging before the configuration is loaded. If we do this, Log4j will status log an error, +     * message at the error level. With this error listener, we can capture if this happens. More broadly, we can detect any error-level, +     * status log message which likely indicates that something is broken. The listener is installed immediately on startup, and then when, +     * we get around to configuring logging we check that no error-level log messages have been logged by the status logger. If they have we, +     * fail startup and any such messages can be seen on the console., +     */, +    private static final AtomicBoolean error = new AtomicBoolean();, +    private static final StatusListener ERROR_LISTENER = new StatusConsoleListener(Level.ERROR) {, +        @Override, +        public void log(StatusData data) {, +            error.set(true);, +            super.log(data);, +        }, +    };, +, +    /**, +     * Registers a listener for status logger errors. This listener should be registered as early as possible to ensure that no errors are, +     * logged by the status logger before logging is configured., +     */, +    public static void registerErrorListener() {, +        StatusLogger.getLogger().registerListener(ERROR_LISTENER);, +    }, +, +        try {, +            // we are about to configure logging, check that the status logger did not log any error-level messages, +            checkErrorListener();, +        } finally {, +            // whether or not the error listener check failed we can remove the listener now, +            StatusLogger.getLogger().removeListener(ERROR_LISTENER);, +        }, +    private static void checkErrorListener() {, +        assert errorListenerIsRegistered() : "expected error listener to be registered";, +        if (error.get()) {, +            throw new IllegalStateException("status logger logged an error before logging was configured");, +        }, +    }, +, +    private static boolean errorListenerIsRegistered() {, +        return StreamSupport.stream(StatusLogger.getLogger().getListeners().spliterator(), false).anyMatch(l -> l == ERROR_LISTENER);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.common.logging.LogConfigurator;, +        LogConfigurator.registerErrorListener();, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +import org.apache.logging.log4j.status.StatusConsoleListener;, +import org.apache.logging.log4j.status.StatusData;, +import org.apache.logging.log4j.status.StatusListener;, +import org.apache.logging.log4j.status.StatusLogger;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.stream.StreamSupport;, +    /*, +     * We want to detect situations where we touch logging before the configuration is loaded. If we do this, Log4j will status log an error, +     * message at the error level. With this error listener, we can capture if this happens. More broadly, we can detect any error-level, +     * status log message which likely indicates that something is broken. The listener is installed immediately on startup, and then when, +     * we get around to configuring logging we check that no error-level log messages have been logged by the status logger. If they have we, +     * fail startup and any such messages can be seen on the console., +     */, +    private static final AtomicBoolean error = new AtomicBoolean();, +    private static final StatusListener ERROR_LISTENER = new StatusConsoleListener(Level.ERROR) {, +        @Override, +        public void log(StatusData data) {, +            error.set(true);, +            super.log(data);, +        }, +    };, +, +    /**, +     * Registers a listener for status logger errors. This listener should be registered as early as possible to ensure that no errors are, +     * logged by the status logger before logging is configured., +     */, +    public static void registerErrorListener() {, +        StatusLogger.getLogger().registerListener(ERROR_LISTENER);, +    }, +, +        try {, +            // we are about to configure logging, check that the status logger did not log any error-level messages, +            checkErrorListener();, +        } finally {, +            // whether or not the error listener check failed we can remove the listener now, +            StatusLogger.getLogger().removeListener(ERROR_LISTENER);, +        }, +    private static void checkErrorListener() {]