[+++ b/core/src/main/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhase.java, +        SourceLookup source = context.lookup().source();, +        if (source.internalSourceRef() == null) {, +            return; // source disabled in the mapping, +        }, +            hitContext.hit().sourceRef(source.internalSourceRef());, +            XContentBuilder builder = new XContentBuilder(source.sourceContentType().xContent(), streamOutput);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhase.java, +        SourceLookup source = context.lookup().source();, +        if (source.internalSourceRef() == null) {, +            return; // source disabled in the mapping, +        }, +            hitContext.hit().sourceRef(source.internalSourceRef());, +            XContentBuilder builder = new XContentBuilder(source.sourceContentType().xContent(), streamOutput);, +++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhaseTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.fetch.subphase;, +, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.search.fetch.FetchSubPhase;, +import org.elasticsearch.search.internal.InternalSearchHit;, +import org.elasticsearch.search.internal.SearchContext;, +import org.elasticsearch.search.lookup.SearchLookup;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.TestSearchContext;, +, +import java.io.IOException;, +import java.util.Collections;, +, +public class FetchSourceSubPhaseTests extends ESTestCase {, +, +    static class FetchSourceSubPhaseTestSearchContext extends TestSearchContext {, +, +        FetchSourceContext context;, +        BytesReference source;, +, +        FetchSourceSubPhaseTestSearchContext(FetchSourceContext context, BytesReference source) {, +            super(null);, +            this.context = context;, +            this.source = source;, +        }, +, +        @Override, +        public boolean sourceRequested() {, +            return context != null && context.fetchSource();, +        }, +, +        @Override, +        public FetchSourceContext fetchSourceContext() {, +            return context;, +        }, +, +        @Override, +        public SearchLookup lookup() {, +            SearchLookup lookup = super.lookup();, +            lookup.source().setSource(source);, +            return lookup;, +        }, +    }, +, +    public void testFetchSource() throws IOException {, +        XContentBuilder source = XContentFactory.jsonBuilder().startObject(), +            .field("field", "value"), +            .endObject();, +        FetchSubPhase.HitContext hitContext = hitExecute(source, true, null, null);, +        assertEquals(Collections.singletonMap("field","value"), hitContext.hit().sourceAsMap());, +    }, +, +    public void testBasicFiltering() throws IOException {, +        XContentBuilder source = XContentFactory.jsonBuilder().startObject(), +            .field("field1", "value"), +            .field("field2", "value2"), +            .endObject();, +        FetchSubPhase.HitContext hitContext = hitExecute(source, false, null, null);, +        assertNull(hitContext.hit().sourceAsMap());, +, +        hitContext = hitExecute(source, true, "field1", null);, +        assertEquals(Collections.singletonMap("field1","value"), hitContext.hit().sourceAsMap());, +]