[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        Engine engine = getEngine();, +            return searcherWrapper == null ? engine.acquireSearcher(source) : searcherWrapper.wrap(engineConfig, engine.acquireSearcher(source));, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        Engine engine = getEngine();, +            return searcherWrapper == null ? engine.acquireSearcher(source) : searcherWrapper.wrap(engineConfig, engine.acquireSearcher(source));, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +, +        ShardRouting routing = new ShardRouting(shard.routingEntry());, +        shard.close("simon says", true);, +        IndexServicesProvider indexServices = indexService.getIndexServices();, +        IndexServicesProvider newProvider = new IndexServicesProvider(indexServices.getIndicesLifecycle(), indexServices.getThreadPool(), indexServices.getMapperService(), indexServices.getQueryParserService(), indexServices.getIndexCache(), indexServices.getIndicesQueryCache(), indexServices.getCodecService(), indexServices.getTermVectorsService(), indexServices.getIndexFieldDataService(), indexServices.getWarmer(), indexServices.getSimilarityService(), indexServices.getFactory(), indexServices.getBigArrays(), wrapper, indexServices.getIndexingMemoryController());, +        IndexShard newShard = new IndexShard(shard.shardId(), shard.indexSettings, shard.shardPath(), shard.store(), newProvider);, +            ShardRoutingHelper.reinit(routing);, +            newShard.updateRoutingEntry(routing, false);, +            DiscoveryNode localNode = new DiscoveryNode("foo", DummyTransportAddress.INSTANCE, Version.CURRENT);, +            assertTrue(newShard.recoverFromStore(routing, localNode));, +            routing = new ShardRouting(routing);, +            ShardRoutingHelper.moveToStarted(routing);, +            newShard.updateRoutingEntry(routing, true);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        Engine engine = getEngine();, +            return searcherWrapper == null ? engine.acquireSearcher(source) : searcherWrapper.wrap(engineConfig, engine.acquireSearcher(source));, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +, +        ShardRouting routing = new ShardRouting(shard.routingEntry());, +        shard.close("simon says", true);, +        IndexServicesProvider indexServices = indexService.getIndexServices();, +        IndexServicesProvider newProvider = new IndexServicesProvider(indexServices.getIndicesLifecycle(), indexServices.getThreadPool(), indexServices.getMapperService(), indexServices.getQueryParserService(), indexServices.getIndexCache(), indexServices.getIndicesQueryCache(), indexServices.getCodecService(), indexServices.getTermVectorsService(), indexServices.getIndexFieldDataService(), indexServices.getWarmer(), indexServices.getSimilarityService(), indexServices.getFactory(), indexServices.getBigArrays(), wrapper, indexServices.getIndexingMemoryController());, +        IndexShard newShard = new IndexShard(shard.shardId(), shard.indexSettings, shard.shardPath(), shard.store(), newProvider);, +            ShardRoutingHelper.reinit(routing);, +            newShard.updateRoutingEntry(routing, false);, +            DiscoveryNode localNode = new DiscoveryNode("foo", DummyTransportAddress.INSTANCE, Version.CURRENT);, +            assertTrue(newShard.recoverFromStore(routing, localNode));, +            routing = new ShardRouting(routing);, +            ShardRoutingHelper.moveToStarted(routing);, +            newShard.updateRoutingEntry(routing, true);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        Engine engine = getEngine();, +            return searcherWrapper == null ? engine.acquireSearcher(source) : searcherWrapper.wrap(engineConfig, engine.acquireSearcher(source));, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +, +        ShardRouting routing = new ShardRouting(shard.routingEntry());, +        shard.close("simon says", true);, +        IndexServicesProvider indexServices = indexService.getIndexServices();, +        IndexServicesProvider newProvider = new IndexServicesProvider(indexServices.getIndicesLifecycle(), indexServices.getThreadPool(), indexServices.getMapperService(), indexServices.getQueryParserService(), indexServices.getIndexCache(), indexServices.getIndicesQueryCache(), indexServices.getCodecService(), indexServices.getTermVectorsService(), indexServices.getIndexFieldDataService(), indexServices.getWarmer(), indexServices.getSimilarityService(), indexServices.getFactory(), indexServices.getBigArrays(), wrapper, indexServices.getIndexingMemoryController());, +        IndexShard newShard = new IndexShard(shard.shardId(), shard.indexSettings, shard.shardPath(), shard.store(), newProvider);, +            ShardRoutingHelper.reinit(routing);, +            newShard.updateRoutingEntry(routing, false);, +            DiscoveryNode localNode = new DiscoveryNode("foo", DummyTransportAddress.INSTANCE, Version.CURRENT);, +            assertTrue(newShard.recoverFromStore(routing, localNode));, +            routing = new ShardRouting(routing);, +            ShardRoutingHelper.moveToStarted(routing);, +            newShard.updateRoutingEntry(routing, true);, +++ /dev/null, +++ b/distribution/licenses/netty-3.10.5.Final.jar.sha1, +9ca7d55d246092bddd29b867706e2f6c7db701a0, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        Engine engine = getEngine();, +            return searcherWrapper == null ? engine.acquireSearcher(source) : searcherWrapper.wrap(engineConfig, engine.acquireSearcher(source));, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +, +        ShardRouting routing = new ShardRouting(shard.routingEntry());, +        shard.close("simon says", true);, +        IndexServicesProvider indexServices = indexService.getIndexServices();, +        IndexServicesProvider newProvider = new IndexServicesProvider(indexServices.getIndicesLifecycle(), indexServices.getThreadPool(), indexServices.getMapperService(), indexServices.getQueryParserService(), indexServices.getIndexCache(), indexServices.getIndicesQueryCache(), indexServices.getCodecService(), indexServices.getTermVectorsService(), indexServices.getIndexFieldDataService(), indexServices.getWarmer(), indexServices.getSimilarityService(), indexServices.getFactory(), indexServices.getBigArrays(), wrapper, indexServices.getIndexingMemoryController());, +        IndexShard newShard = new IndexShard(shard.shardId(), shard.indexSettings, shard.shardPath(), shard.store(), newProvider);, +            ShardRoutingHelper.reinit(routing);, +            newShard.updateRoutingEntry(routing, false);, +            DiscoveryNode localNode = new DiscoveryNode("foo", DummyTransportAddress.INSTANCE, Version.CURRENT);, +            assertTrue(newShard.recoverFromStore(routing, localNode));, +            routing = new ShardRouting(routing);, +            ShardRoutingHelper.moveToStarted(routing);, +            newShard.updateRoutingEntry(routing, true);, +++ /dev/null, +++ b/distribution/licenses/netty-3.10.5.Final.jar.sha1, +9ca7d55d246092bddd29b867706e2f6c7db701a0, +++ b/pom.xml, +                <version>3.10.5.Final</version>]