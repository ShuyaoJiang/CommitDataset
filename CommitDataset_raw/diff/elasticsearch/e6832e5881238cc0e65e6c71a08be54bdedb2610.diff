[+++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/node/MultiNodesStatsTests.java, +import org.elasticsearch.search.aggregations.Aggregation;, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +import org.elasticsearch.search.aggregations.bucket.terms.StringTerms;, +import org.elasticsearch.test.InternalTestCluster;, +import java.util.List;, +import static org.elasticsearch.common.settings.Settings.settingsBuilder;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +        int nodes = 0;, +        int n = randomIntBetween(1, 2);, +        logger.debug("--> starting {} master only nodes", n);, +        InternalTestCluster.Async<List<String>> masterNodes = internalCluster().startMasterOnlyNodesAsync(n);, +        masterNodes.get();, +        nodes += n;, +        n = randomIntBetween(2, 3);, +        logger.debug("--> starting {} data only nodes", n);, +        InternalTestCluster.Async<List<String>> dataNodes = internalCluster().startDataOnlyNodesAsync(n);, +        dataNodes.get();, +        nodes += n;, +        n = randomIntBetween(1, 2);, +        logger.debug("--> starting {} client only nodes", n);, +        InternalTestCluster.Async<List<String>> clientNodes = internalCluster().startNodesAsync(n, settingsBuilder().put("node.client", true).build());, +        clientNodes.get();, +        nodes += n;, +        n = randomIntBetween(1, 2);, +        logger.debug("--> starting {} extra nodes", n);, +        InternalTestCluster.Async<List<String>> extraNodes = internalCluster().startNodesAsync(n);, +        extraNodes.get();, +        nodes += n;, +, +        final int nbNodes = nodes;, +                assertThat(cluster().size(), equalTo(nbNodes));, +                SearchResponse response = client().prepareSearch(), +                        .setSize(0), +                        .addAggregation(AggregationBuilders.terms("nodes_ids").field("node_stats.node_id")), +, +                for (Aggregation aggregation : response.getAggregations()) {, +                    assertThat(aggregation, instanceOf(StringTerms.class));, +                    assertThat(((StringTerms) aggregation).getBuckets().size(), equalTo(nbNodes));, +, +                    for (String nodeName : internalCluster().getNodeNames()) {, +                        StringTerms.Bucket bucket = (StringTerms.Bucket) ((StringTerms) aggregation).getBucketByKey(internalCluster().clusterService(nodeName).localNode().getId());, +                        assertThat(bucket.getDocCount(), equalTo(1L));, +                    }]