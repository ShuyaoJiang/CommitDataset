[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.apache.lucene.queryParser;, +, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.MultiTermQuery;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.index.mapper.FieldMappers;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.query.xcontent.QueryParseContext;, +, +import java.util.List;, +, +import static org.elasticsearch.common.lucene.search.Queries.*;, +import static org.elasticsearch.index.query.support.QueryParsers.*;, +, +/**, + * A query parser that uses the {@link MapperService} in order to build smarter, + * queries based on the mapping information., + *, + * <p>Also breaks fields with [type].[name] into a boolean query that must include the type, + * as well as the query on the name., + *, + * @author kimchy (shay.banon), + */, +public class MapperQueryParser extends QueryParser {, +, +    private final QueryParseContext parseContext;, +, +    private FieldMapper currentMapper;, +, +    public MapperQueryParser(QueryParseContext parseContext) {, +        super(Lucene.QUERYPARSER_VERSION, null, null);, +        this.parseContext = parseContext;, +    }, +, +    public MapperQueryParser(QueryParserSettings settings, QueryParseContext parseContext) {, +        super(Lucene.QUERYPARSER_VERSION, settings.defaultField(), settings.analyzer());, +        this.parseContext = parseContext;, +        reset(settings);, +    }, +, +    public void reset(QueryParserSettings settings) {, +        this.field = settings.defaultField();, +        this.analyzer = settings.analyzer();, +        setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);, +        setEnablePositionIncrements(settings.enablePositionIncrements());, +        setAllowLeadingWildcard(settings.allowLeadingWildcard());, +        setLowercaseExpandedTerms(settings.lowercaseExpandedTerms());, +        setPhraseSlop(settings.phraseSlop());, +        setDefaultOperator(settings.defaultOperator());, +        setFuzzyMinSim(settings.fuzzyMinSim());, +        setFuzzyPrefixLength(settings.fuzzyPrefixLength());, +    }, +, +    @Override protected Query newTermQuery(Term term) {, +        if (currentMapper != null) {, +            Query termQuery = currentMapper.queryStringTermQuery(term);, +            if (termQuery != null) {, +                return termQuery;, +            }, +        }, +        return super.newTermQuery(term);, +    }, +, +    @Override public Query getFieldQuery(String field, String queryText) throws ParseException {, +        currentMapper = null;, +        if (parseContext.mapperService() != null) {, +            MapperService.SmartNameFieldMappers fieldMappers = parseContext.mapperService().smartName(field);, +            if (fieldMappers != null) {, +                currentMapper = fieldMappers.fieldMappers().mapper();, +                if (currentMapper != null) {, +                    Query query = null;, +                    if (currentMapper.useFieldQueryWithQueryString()) {, +                        query = currentMapper.fieldQuery(queryText);, +                    }, +                    if (query == null) {, +                        query = super.getFieldQuery(currentMapper.names().indexName(), queryText);, +                    }]