[+++ b/core/src/main/java/org/elasticsearch/search/DefaultSearchContext.java, +                throw new IllegalArgumentException(, +            throw new IllegalArgumentException(, +                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].");, +                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. ", +                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must ", +++ b/core/src/main/java/org/elasticsearch/search/DefaultSearchContext.java, +                throw new IllegalArgumentException(, +            throw new IllegalArgumentException(, +                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].");, +                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. ", +                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must ", +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +            throw new IllegalArgumentException(, +++ b/core/src/main/java/org/elasticsearch/search/DefaultSearchContext.java, +                throw new IllegalArgumentException(, +            throw new IllegalArgumentException(, +                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].");, +                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. ", +                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must ", +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +            throw new IllegalArgumentException(, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/adjacency/AdjacencyMatrixAggregationBuilder.java, +            throw new IllegalArgumentException(, +++ b/core/src/main/java/org/elasticsearch/search/DefaultSearchContext.java, +                throw new IllegalArgumentException(, +            throw new IllegalArgumentException(, +                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].");, +                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. ", +                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must ", +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +            throw new IllegalArgumentException(, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/adjacency/AdjacencyMatrixAggregationBuilder.java, +            throw new IllegalArgumentException(, +++ b/core/src/test/java/org/elasticsearch/search/DefaultSearchContextTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.RandomIndexWriter;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.QueryCachingPolicy;, +import org.apache.lucene.search.Sort;, +import org.apache.lucene.store.Directory;, +import org.elasticsearch.Version;, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.BigArrays;, +import org.elasticsearch.common.util.MockBigArrays;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.cache.IndexCache;, +import org.elasticsearch.index.cache.query.QueryCache;, +import org.elasticsearch.index.engine.Engine;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.query.AbstractQueryBuilder;, +import org.elasticsearch.index.query.ParsedQuery;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;, +import org.elasticsearch.search.internal.AliasFilter;, +import org.elasticsearch.search.internal.ScrollContext;, +import org.elasticsearch.search.internal.ShardSearchRequest;, +import org.elasticsearch.search.rescore.RescoreContext;, +import org.elasticsearch.search.slice.SliceBuilder;, +import org.elasticsearch.search.sort.SortAndFormats;, +import org.elasticsearch.test.ESTestCase;, +, +import java.util.UUID;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +, +public class DefaultSearchContextTests extends ESTestCase {]