[+++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/CloseIndexClusterStateUpdateRequest.java, +    private final long taskId;, +    public CloseIndexClusterStateUpdateRequest(final long taskId) {, +        this.taskId = taskId;, +    }, +, +    public long taskId() {, +        return taskId;, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/CloseIndexClusterStateUpdateRequest.java, +    private final long taskId;, +    public CloseIndexClusterStateUpdateRequest(final long taskId) {, +        this.taskId = taskId;, +    }, +, +    public long taskId() {, +        return taskId;, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +        throw new UnsupportedOperationException("The task parameter is required");, +    }, +, +    @Override, +    protected void masterOperation(final Task task, final CloseIndexRequest request, final ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) throws Exception {, +, +        final CloseIndexClusterStateUpdateRequest closeRequest = new CloseIndexClusterStateUpdateRequest(task.getId()), +            .ackTimeout(request.timeout()), +            .masterNodeTimeout(request.masterNodeTimeout()), +        indexStateService.closeIndices(closeRequest, new ActionListener<AcknowledgedResponse>() {, +            public void onResponse(final AcknowledgedResponse response) {, +                listener.onResponse(response);, +            public void onFailure(final Exception t) {, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/CloseIndexClusterStateUpdateRequest.java, +    private final long taskId;, +    public CloseIndexClusterStateUpdateRequest(final long taskId) {, +        this.taskId = taskId;, +    }, +, +    public long taskId() {, +        return taskId;, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +        throw new UnsupportedOperationException("The task parameter is required");, +    }, +, +    @Override, +    protected void masterOperation(final Task task, final CloseIndexRequest request, final ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) throws Exception {, +, +        final CloseIndexClusterStateUpdateRequest closeRequest = new CloseIndexClusterStateUpdateRequest(task.getId()), +            .ackTimeout(request.timeout()), +            .masterNodeTimeout(request.masterNodeTimeout()), +        indexStateService.closeIndices(closeRequest, new ActionListener<AcknowledgedResponse>() {, +            public void onResponse(final AcknowledgedResponse response) {, +                listener.onResponse(response);, +            public void onFailure(final Exception t) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.action.admin.indices.close;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.indices.flush.FlushRequest;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +import org.elasticsearch.action.support.replication.ReplicationResponse;, +import org.elasticsearch.action.support.replication.TransportReplicationAction;, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +import org.elasticsearch.cluster.block.ClusterBlock;]