[+++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +import org.elasticsearch.transport.nio.channel.TcpReadContext;, +import org.elasticsearch.transport.nio.channel.TcpWriteContext;, +    private final Consumer<NioSocketChannel> contextSetter;, +        contextSetter = (c) -> c.setContexts(new TcpReadContext(c, new TcpReadHandler(this)), new TcpWriteContext(c));, +                    profileToChannelFactory.putIfAbsent(profileSettings.profileName, new ChannelFactory(profileSettings, contextSetter));, +        ChannelFactory channelFactory = new ChannelFactory(new ProfileSettings(settings, "default"), contextSetter);, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +import org.elasticsearch.transport.nio.channel.TcpReadContext;, +import org.elasticsearch.transport.nio.channel.TcpWriteContext;, +    private final Consumer<NioSocketChannel> contextSetter;, +        contextSetter = (c) -> c.setContexts(new TcpReadContext(c, new TcpReadHandler(this)), new TcpWriteContext(c));, +                    profileToChannelFactory.putIfAbsent(profileSettings.profileName, new ChannelFactory(profileSettings, contextSetter));, +        ChannelFactory channelFactory = new ChannelFactory(new ProfileSettings(settings, "default"), contextSetter);, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/channel/ChannelFactory.java, +    private final Consumer<NioSocketChannel> contextSetter;, +    /**, +     * This will create a {@link ChannelFactory} using the profile settings and context setter passed to this, +     * constructor. The context setter must be a {@link Consumer} that calls, +     * {@link NioSocketChannel#setContexts(ReadContext, WriteContext)} with the appropriate read and write, +     * contexts. The read and write contexts handle the protocol specific encoding and decoding of messages., +     *, +     * @param profileSettings the profile settings channels opened by this factory, +     * @param contextSetter a consumer that takes a channel and sets the read and write contexts, +     */, +    public ChannelFactory(TcpTransport.ProfileSettings profileSettings, Consumer<NioSocketChannel> contextSetter) {, +        this(new RawChannelFactory(profileSettings.tcpNoDelay,, +                profileSettings.tcpKeepAlive,, +                profileSettings.reuseAddress,, +                Math.toIntExact(profileSettings.sendBufferSize.getBytes()),, +                Math.toIntExact(profileSettings.receiveBufferSize.getBytes())), contextSetter);, +    ChannelFactory(RawChannelFactory rawChannelFactory, Consumer<NioSocketChannel> contextSetter) {, +        this.contextSetter = contextSetter;, +        setContexts(channel);, +        setContexts(channel);, +    private void setContexts(NioSocketChannel channel) {, +        contextSetter.accept(channel);, +        assert channel.getReadContext() != null : "read context should have been set on channel";, +        assert channel.getWriteContext() != null : "write context should have been set on channel";, +    }, +, +        RawChannelFactory(boolean tcpNoDelay, boolean tcpKeepAlive, boolean tcpReusedAddress, int tcpSendBufferSize,, +                          int tcpReceiveBufferSize) {, +            this.tcpNoDelay = tcpNoDelay;, +            this.tcpKeepAlive = tcpKeepAlive;, +            this.tcpReusedAddress = tcpReusedAddress;, +            this.tcpSendBufferSize = tcpSendBufferSize;, +            this.tcpReceiveBufferSize = tcpReceiveBufferSize;, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +import org.elasticsearch.transport.nio.channel.TcpReadContext;, +import org.elasticsearch.transport.nio.channel.TcpWriteContext;, +    private final Consumer<NioSocketChannel> contextSetter;, +        contextSetter = (c) -> c.setContexts(new TcpReadContext(c, new TcpReadHandler(this)), new TcpWriteContext(c));, +                    profileToChannelFactory.putIfAbsent(profileSettings.profileName, new ChannelFactory(profileSettings, contextSetter));, +        ChannelFactory channelFactory = new ChannelFactory(new ProfileSettings(settings, "default"), contextSetter);, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/channel/ChannelFactory.java, +    private final Consumer<NioSocketChannel> contextSetter;, +    /**, +     * This will create a {@link ChannelFactory} using the profile settings and context setter passed to this, +     * constructor. The context setter must be a {@link Consumer} that calls, +     * {@link NioSocketChannel#setContexts(ReadContext, WriteContext)} with the appropriate read and write, +     * contexts. The read and write contexts handle the protocol specific encoding and decoding of messages., +     *, +     * @param profileSettings the profile settings channels opened by this factory, +     * @param contextSetter a consumer that takes a channel and sets the read and write contexts, +     */, +    public ChannelFactory(TcpTransport.ProfileSettings profileSettings, Consumer<NioSocketChannel> contextSetter) {, +        this(new RawChannelFactory(profileSettings.tcpNoDelay,, +                profileSettings.tcpKeepAlive,, +                profileSettings.reuseAddress,, +                Math.toIntExact(profileSettings.sendBufferSize.getBytes()),, +                Math.toIntExact(profileSettings.receiveBufferSize.getBytes())), contextSetter);, +    ChannelFactory(RawChannelFactory rawChannelFactory, Consumer<NioSocketChannel> contextSetter) {, +        this.contextSetter = contextSetter;, +        setContexts(channel);, +        setContexts(channel);, +    private void setContexts(NioSocketChannel channel) {, +        contextSetter.accept(channel);, +        assert channel.getReadContext() != null : "read context should have been set on channel";, +        assert channel.getWriteContext() != null : "write context should have been set on channel";, +    }, +, +        RawChannelFactory(boolean tcpNoDelay, boolean tcpKeepAlive, boolean tcpReusedAddress, int tcpSendBufferSize,, +                          int tcpReceiveBufferSize) {, +            this.tcpNoDelay = tcpNoDelay;, +            this.tcpKeepAlive = tcpKeepAlive;, +            this.tcpReusedAddress = tcpReusedAddress;, +            this.tcpSendBufferSize = tcpSendBufferSize;, +            this.tcpReceiveBufferSize = tcpReceiveBufferSize;, +++ b/test/framework/src/test/java/org/elasticsearch/transport/nio/channel/ChannelFactoryTests.java, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import static org.mockito.Mockito.doAnswer;, +        Consumer contextSetter = mock(Consumer.class);, +        channelFactory = new ChannelFactory(rawChannelFactory, contextSetter);, +, +        doAnswer(invocationOnMock -> {, +            NioSocketChannel channel = (NioSocketChannel) invocationOnMock.getArguments()[0];, +            channel.setContexts(mock(ReadContext.class), mock(WriteContext.class));, +            return null;]