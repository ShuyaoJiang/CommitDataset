[+++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        ClusterState newState = buildResult(oldState, allocation);, +, +        logClusterHealthStateChange(, +            new ClusterStateHealth(oldState),, +            new ClusterStateHealth(newState),, +            reason, +        );, +, +        return newState;, +    }, +, +    private ClusterState buildResult(ClusterState oldState, RoutingAllocation allocation) {, +        final RoutingTable oldRoutingTable = oldState.routingTable();, +        final RoutingNodes newRoutingNodes = allocation.routingNodes();, +        final MetaData newMetaData = allocation.updateMetaDataWithRoutingChanges(newRoutingTable);, +, +        return newStateBuilder.build();, +        RoutingNodes routingNodes = getMutableRoutingNodes(clusterState);, +        RoutingAllocation allocation = new RoutingAllocation(allocationDeciders, routingNodes, clusterState,, +        if (allocation.routingNodesChanged()) {, +            clusterState = buildResult(clusterState, allocation);, +        if (reroute) {, +            return reroute(clusterState, reason);, +        } else {, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        ClusterState newState = buildResult(oldState, allocation);, +, +        logClusterHealthStateChange(, +            new ClusterStateHealth(oldState),, +            new ClusterStateHealth(newState),, +            reason, +        );, +, +        return newState;, +    }, +, +    private ClusterState buildResult(ClusterState oldState, RoutingAllocation allocation) {, +        final RoutingTable oldRoutingTable = oldState.routingTable();, +        final RoutingNodes newRoutingNodes = allocation.routingNodes();, +        final MetaData newMetaData = allocation.updateMetaDataWithRoutingChanges(newRoutingTable);, +, +        return newStateBuilder.build();, +        RoutingNodes routingNodes = getMutableRoutingNodes(clusterState);, +        RoutingAllocation allocation = new RoutingAllocation(allocationDeciders, routingNodes, clusterState,, +        if (allocation.routingNodesChanged()) {, +            clusterState = buildResult(clusterState, allocation);, +        if (reroute) {, +            return reroute(clusterState, reason);, +        } else {, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/NodeJoinController.java, +    public static final DiscoveryNode BECOME_MASTER_TASK = new DiscoveryNode("_BECOME_MASTER_TASK_",, +    public static final DiscoveryNode FINISH_ELECTION_TASK = new DiscoveryNode("_FINISH_ELECTION_",, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        ClusterState newState = buildResult(oldState, allocation);, +, +        logClusterHealthStateChange(, +            new ClusterStateHealth(oldState),, +            new ClusterStateHealth(newState),, +            reason, +        );, +, +        return newState;, +    }, +, +    private ClusterState buildResult(ClusterState oldState, RoutingAllocation allocation) {, +        final RoutingTable oldRoutingTable = oldState.routingTable();, +        final RoutingNodes newRoutingNodes = allocation.routingNodes();, +        final MetaData newMetaData = allocation.updateMetaDataWithRoutingChanges(newRoutingTable);, +, +        return newStateBuilder.build();, +        RoutingNodes routingNodes = getMutableRoutingNodes(clusterState);, +        RoutingAllocation allocation = new RoutingAllocation(allocationDeciders, routingNodes, clusterState,, +        if (allocation.routingNodesChanged()) {, +            clusterState = buildResult(clusterState, allocation);, +        if (reroute) {, +            return reroute(clusterState, reason);, +        } else {, +++ b/server/src/main/java/org/elasticsearch/discovery/zen/NodeJoinController.java, +    public static final DiscoveryNode BECOME_MASTER_TASK = new DiscoveryNode("_BECOME_MASTER_TASK_",, +    public static final DiscoveryNode FINISH_ELECTION_TASK = new DiscoveryNode("_FINISH_ELECTION_",, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/AutoExpandReplicasTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.admin.cluster.reroute.ClusterRerouteRequest;, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;, +import org.elasticsearch.action.support.ActiveShardCount;, +import org.elasticsearch.action.support.replication.ClusterStateCreationUtils;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.common.util.set.Sets;, +import org.elasticsearch.indices.cluster.ClusterStateChanges;, +import org.elasticsearch.threadpool.TestThreadPool;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;]