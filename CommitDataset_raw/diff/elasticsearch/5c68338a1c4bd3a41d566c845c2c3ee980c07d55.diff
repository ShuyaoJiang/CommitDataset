[+++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +    private final ByteArray byteArray;, +    public PagedBytesReference(ByteArray byteArray, int length) {, +        this(byteArray, 0, length);, +    private PagedBytesReference(ByteArray byteArray, int from, int length) {, +        return new PagedBytesReference(byteArray, offset + from, length);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +    private final ByteArray byteArray;, +    public PagedBytesReference(ByteArray byteArray, int length) {, +        this(byteArray, 0, length);, +    private PagedBytesReference(ByteArray byteArray, int from, int length) {, +        return new PagedBytesReference(byteArray, offset + from, length);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/ReleasablePagedBytesReference.java, +    public ReleasablePagedBytesReference(ByteArray byteArray, int length, Releasable releasable) {, +        super(byteArray, length);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +    private final ByteArray byteArray;, +    public PagedBytesReference(ByteArray byteArray, int length) {, +        this(byteArray, 0, length);, +    private PagedBytesReference(ByteArray byteArray, int from, int length) {, +        return new PagedBytesReference(byteArray, offset + from, length);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/ReleasablePagedBytesReference.java, +    public ReleasablePagedBytesReference(ByteArray byteArray, int length, Releasable releasable) {, +        super(byteArray, length);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +        return new PagedBytesReference(bytes, count);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +    private final ByteArray byteArray;, +    public PagedBytesReference(ByteArray byteArray, int length) {, +        this(byteArray, 0, length);, +    private PagedBytesReference(ByteArray byteArray, int from, int length) {, +        return new PagedBytesReference(byteArray, offset + from, length);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/ReleasablePagedBytesReference.java, +    public ReleasablePagedBytesReference(ByteArray byteArray, int length, Releasable releasable) {, +        super(byteArray, length);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +        return new PagedBytesReference(bytes, count);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/ReleasableBytesStreamOutput.java, +        return new ReleasablePagedBytesReference(bytes, count, releasable);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +    private final ByteArray byteArray;, +    public PagedBytesReference(ByteArray byteArray, int length) {, +        this(byteArray, 0, length);, +    private PagedBytesReference(ByteArray byteArray, int from, int length) {, +        return new PagedBytesReference(byteArray, offset + from, length);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/ReleasablePagedBytesReference.java, +    public ReleasablePagedBytesReference(ByteArray byteArray, int length, Releasable releasable) {, +        super(byteArray, length);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +        return new PagedBytesReference(bytes, count);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/ReleasableBytesStreamOutput.java, +        return new ReleasablePagedBytesReference(bytes, count, releasable);, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        final Context context = new Context(snapshotId, indexId, shard.shardId(), snapshotShardId);, +        BlobPath path = basePath().add("indices").add(indexId.getId()).add(Integer.toString(snapshotShardId.getId()));, +        BlobContainer blobContainer = blobStore().blobContainer(path);, +        final RestoreContext snapshotContext = new RestoreContext(shard, snapshotId, recoveryState, blobContainer);, +            BlobStoreIndexShardSnapshot snapshot = context.loadSnapshot();, +            SnapshotFiles snapshotFiles = new SnapshotFiles(snapshot.snapshot(), snapshot.indexFiles());, +            snapshotContext.restore(snapshotFiles);, +    private class RestoreContext extends FileRestoreContext {, +        private final BlobContainer blobContainer;, +         * @param indexShard    shard to restore into, +         * @param blobContainer the blob container to read the files from, +        RestoreContext(IndexShard indexShard, SnapshotId snapshotId, RecoveryState recoveryState, BlobContainer blobContainer) {, +            super(metadata.name(), indexShard, snapshotId, recoveryState, BUFFER_SIZE);, +            this.blobContainer = blobContainer;, +        @Override, +        protected InputStream fileInputStream(BlobStoreIndexShardSnapshot.FileInfo fileInfo) {, +                return new PartSliceStream(blobContainer, fileInfo);, +                RateLimitingInputStream.Listener listener = restoreRateLimitingTimeInNanos::inc;, +                return new RateLimitingInputStream(new PartSliceStream(blobContainer, fileInfo), restoreRateLimiter, listener);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +    private final ByteArray byteArray;, +    public PagedBytesReference(ByteArray byteArray, int length) {, +        this(byteArray, 0, length);, +    private PagedBytesReference(ByteArray byteArray, int from, int length) {, +        return new PagedBytesReference(byteArray, offset + from, length);, +++ b/server/src/main/java/org/elasticsearch/common/bytes/ReleasablePagedBytesReference.java, +    public ReleasablePagedBytesReference(ByteArray byteArray, int length, Releasable releasable) {, +        super(byteArray, length);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +        return new PagedBytesReference(bytes, count);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/ReleasableBytesStreamOutput.java, +        return new ReleasablePagedBytesReference(bytes, count, releasable);, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        final Context context = new Context(snapshotId, indexId, shard.shardId(), snapshotShardId);, +        BlobPath path = basePath().add("indices").add(indexId.getId()).add(Integer.toString(snapshotShardId.getId()));, +        BlobContainer blobContainer = blobStore().blobContainer(path);, +        final RestoreContext snapshotContext = new RestoreContext(shard, snapshotId, recoveryState, blobContainer);, +            BlobStoreIndexShardSnapshot snapshot = context.loadSnapshot();, +            SnapshotFiles snapshotFiles = new SnapshotFiles(snapshot.snapshot(), snapshot.indexFiles());, +            snapshotContext.restore(snapshotFiles);, +    private class RestoreContext extends FileRestoreContext {, +        private final BlobContainer blobContainer;, +         * @param indexShard    shard to restore into, +         * @param blobContainer the blob container to read the files from, +        RestoreContext(IndexShard indexShard, SnapshotId snapshotId, RecoveryState recoveryState, BlobContainer blobContainer) {, +            super(metadata.name(), indexShard, snapshotId, recoveryState, BUFFER_SIZE);, +            this.blobContainer = blobContainer;]