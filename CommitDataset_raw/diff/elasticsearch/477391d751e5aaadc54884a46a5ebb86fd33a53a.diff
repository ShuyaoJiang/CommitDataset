[+++ b/test/framework/src/main/java/org/elasticsearch/test/CorruptionUtils.java, +                long maxPosition = raf.size();, +                if (fileToCorrupt.getFileName().toString().endsWith(".cfs") && maxPosition > 4) {, +                    // TODO: it is known that Lucene does not check the checksum of CFS file (CompoundFileS, like an archive), +                    // see note at https://github.com/elastic/elasticsearch/pull/33911, +                    // so far, don't corrupt crc32 part of checksum (last 4 bytes) of cfs file, +                    // checksum is 8 bytes: first 4 bytes have to be zeros, while crc32 value is not verified, +                    maxPosition -= 4;, +                final int position = random.nextInt((int) Math.min(Integer.MAX_VALUE, maxPosition));, +                corruptAt(fileToCorrupt, raf, position);, +            }, +, +    static void corruptAt(Path path, FileChannel channel, int position) throws IOException {, +        // read, +        channel.position(position);, +        long filePointer = channel.position();, +        ByteBuffer bb = ByteBuffer.wrap(new byte[1]);, +        channel.read(bb);, +        bb.flip();, +, +        // corrupt, +        byte oldValue = bb.get(0);, +        byte newValue = (byte) (oldValue + 1);, +        bb.put(0, newValue);, +, +        // rewrite, +        channel.position(filePointer);, +        channel.write(bb);, +        logger.info("Corrupting file --  flipping at position {} from {} to {} file: {}", filePointer,, +                Integer.toHexString(oldValue), Integer.toHexString(newValue), path.getFileName());, +    }, +, +++ b/test/framework/src/main/java/org/elasticsearch/test/CorruptionUtils.java, +                long maxPosition = raf.size();, +                if (fileToCorrupt.getFileName().toString().endsWith(".cfs") && maxPosition > 4) {, +                    // TODO: it is known that Lucene does not check the checksum of CFS file (CompoundFileS, like an archive), +                    // see note at https://github.com/elastic/elasticsearch/pull/33911, +                    // so far, don't corrupt crc32 part of checksum (last 4 bytes) of cfs file, +                    // checksum is 8 bytes: first 4 bytes have to be zeros, while crc32 value is not verified, +                    maxPosition -= 4;, +                final int position = random.nextInt((int) Math.min(Integer.MAX_VALUE, maxPosition));, +                corruptAt(fileToCorrupt, raf, position);, +            }, +, +    static void corruptAt(Path path, FileChannel channel, int position) throws IOException {, +        // read, +        channel.position(position);, +        long filePointer = channel.position();, +        ByteBuffer bb = ByteBuffer.wrap(new byte[1]);, +        channel.read(bb);, +        bb.flip();, +, +        // corrupt, +        byte oldValue = bb.get(0);, +        byte newValue = (byte) (oldValue + 1);, +        bb.put(0, newValue);, +, +        // rewrite, +        channel.position(filePointer);, +        channel.write(bb);, +        logger.info("Corrupting file --  flipping at position {} from {} to {} file: {}", filePointer,, +                Integer.toHexString(oldValue), Integer.toHexString(newValue), path.getFileName());, +    }, +, +++ b/test/framework/src/test/java/org/elasticsearch/test/CorruptionUtilsTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.test;, +, +import org.apache.lucene.index.CheckIndex;, +import org.apache.lucene.store.SimpleFSDirectory;, +import org.elasticsearch.action.admin.indices.flush.FlushRequest;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.IndexShardTestCase;, +import org.elasticsearch.index.shard.ShardPath;, +, +import java.nio.channels.FileChannel;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.StandardOpenOption;, +import java.util.stream.Stream;, +, +import static org.elasticsearch.test.CorruptionUtils.corruptAt;, +import static org.hamcrest.Matchers.equalTo;]