[+++ b/src/main/java/org/elasticsearch/script/ScoreAccessor.java, +public final class ScoreAccessor extends Number implements Comparable<Number> {, +, +    @Override, +    public int compareTo(Number o) {, +        return Float.compare(this.score(), o.floatValue());, +    }, +++ b/src/main/java/org/elasticsearch/script/ScoreAccessor.java, +public final class ScoreAccessor extends Number implements Comparable<Number> {, +, +    @Override, +    public int compareTo(Number o) {, +        return Float.compare(this.score(), o.floatValue());, +    }, +++ b/src/test/java/org/elasticsearch/script/GroovyScriptTests.java, +        SearchResponse resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchAllQuery()), +    , +    public void testScoreAccess() {, +        client().prepareIndex("test", "doc", "1").setSource("foo", "quick brow fox jumped over the lazy dog", "bar", 1).get();, +        client().prepareIndex("test", "doc", "2").setSource("foo", "fast jumping spiders", "bar", 2).get();, +        client().prepareIndex("test", "doc", "3").setSource("foo", "dog spiders that can eat a dog", "bar", 3).get();, +        refresh();, +, +        // _score can be accessed, +        SearchResponse resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchQuery("foo", "dog")), +            .add(scriptFunction("_score", "groovy")), +            .boostMode(CombineFunction.REPLACE)).get();, +        assertNoFailures(resp);, +        assertSearchHits(resp, "3", "1");, +, +        // _score is comparable, +        resp = client().prepareSearch("test").setQuery(functionScoreQuery(matchQuery("foo", "dog")), +            .add(scriptFunction("_score > 0 ? _score : 0", "groovy")), +            .boostMode(CombineFunction.REPLACE)).get();, +        assertNoFailures(resp);, +        assertSearchHits(resp, "3", "1");, +    }]