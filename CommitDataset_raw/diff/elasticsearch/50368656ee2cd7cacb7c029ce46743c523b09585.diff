[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/gradle.properties, +options.forkOptions.memoryMaximumSize=2g, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/gradle.properties, +options.forkOptions.memoryMaximumSize=2g, +++ b/plugins/analysis-icu/build.gradle, +  hasClientJar = true, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/gradle.properties, +options.forkOptions.memoryMaximumSize=2g, +++ b/plugins/analysis-icu/build.gradle, +  hasClientJar = true, +++ b/server/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java, +    protected int shardId = -1;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/gradle.properties, +options.forkOptions.memoryMaximumSize=2g, +++ b/plugins/analysis-icu/build.gradle, +  hasClientJar = true, +++ b/server/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java, +    protected int shardId = -1;, +++ b/server/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    ShardSearchFailure() {, +            index = shardTarget.getFullyQualifiedIndexName();, +            shardId = shardTarget.getShardId().getId();, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/gradle.properties, +options.forkOptions.memoryMaximumSize=2g, +++ b/plugins/analysis-icu/build.gradle, +  hasClientJar = true, +++ b/server/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java, +    protected int shardId = -1;, +++ b/server/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    ShardSearchFailure() {, +            index = shardTarget.getFullyQualifiedIndexName();, +            shardId = shardTarget.getShardId().getId();, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/ReplicationResponse.java, +                index = shardId.getIndexName();, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/gradle.properties, +options.forkOptions.memoryMaximumSize=2g, +++ b/plugins/analysis-icu/build.gradle, +  hasClientJar = true, +++ b/server/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java, +    protected int shardId = -1;, +++ b/server/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    ShardSearchFailure() {, +            index = shardTarget.getFullyQualifiedIndexName();, +            shardId = shardTarget.getShardId().getId();, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/ReplicationResponse.java, +                index = shardId.getIndexName();, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            sb.append(": v[").append(indexMetaData.getVersion()).append("], mv[").append(indexMetaData.getMappingVersion()).append("]\n");, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/gradle.properties, +options.forkOptions.memoryMaximumSize=2g, +++ b/plugins/analysis-icu/build.gradle, +  hasClientJar = true, +++ b/server/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java, +    protected int shardId = -1;, +++ b/server/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    ShardSearchFailure() {, +            index = shardTarget.getFullyQualifiedIndexName();, +            shardId = shardTarget.getShardId().getId();, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/ReplicationResponse.java, +                index = shardId.getIndexName();, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            sb.append(": v[").append(indexMetaData.getVersion()).append("], mv[").append(indexMetaData.getMappingVersion()).append("]\n");, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.Assertions;, +    static final String KEY_MAPPING_VERSION = "mapping_version";, +, +    private final long mappingVersion;, +, +    private IndexMetaData(Index index, long version, long mappingVersion, long[] primaryTerms, State state, int numberOfShards, int numberOfReplicas, Settings settings,, +        assert mappingVersion >= 0 : mappingVersion;, +        this.mappingVersion = mappingVersion;, +    public long getMappingVersion() {, +        return mappingVersion;, +    }, +        private final long mappingVersion;, +            mappingVersion = after.mappingVersion;, +            if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, +                mappingVersion = in.readVLong();, +            } else {, +                mappingVersion = 1;, +            }, +            if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +                out.writeVLong(mappingVersion);, +            }, +            builder.mappingVersion(mappingVersion);, +        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {, +            builder.mappingVersion(in.readVLong());, +        } else {, +            builder.mappingVersion(1);, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_5_0)) {, +            out.writeVLong(mappingVersion);]