[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    @Inject public MetaDataCreateIndexService(Settings settings, Environment environment, ClusterService clusterService, IndicesService indicesService,, +                                              ShardsAllocation shardsAllocation, @RiverIndexName String riverIndexName) {, +    public void createIndex(final Request request, final Listener listener) {, +        clusterService.submitStateUpdateTask("create-index [" + request.index + "], cause [" + request.cause + "]", new ProcessedClusterStateUpdateTask() {, +, +            @Override public void clusterStateProcessed(ClusterState clusterState) {, +                clusterService.submitStateUpdateTask("reroute after index [" + request.index + "] creation", new ProcessedClusterStateUpdateTask() {, +                    @Override public ClusterState execute(ClusterState currentState) {, +                        RoutingTable.Builder routingTableBuilder = new RoutingTable.Builder();, +                        for (IndexRoutingTable indexRoutingTable : currentState.routingTable().indicesRouting().values()) {, +                            routingTableBuilder.add(indexRoutingTable);, +                        }, +                        IndexRoutingTable.Builder indexRoutingBuilder = new IndexRoutingTable.Builder(request.index), +                                .initializeEmpty(currentState.metaData().index(request.index));, +                        routingTableBuilder.add(indexRoutingBuilder);, +                        RoutingAllocation.Result routingResult = shardsAllocation.reroute(newClusterStateBuilder().state(currentState).routingTable(routingTableBuilder).build());, +                        return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();, +                    }, +, +                    @Override public void clusterStateProcessed(ClusterState clusterState) {, +                        logger.info("[{}] created and added to cluster_state", request.index);, +                        listener.onResponse(new Response(true, clusterState.metaData().index(request.index)));, +                    }, +                });, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    @Inject public MetaDataCreateIndexService(Settings settings, Environment environment, ClusterService clusterService, IndicesService indicesService,, +                                              ShardsAllocation shardsAllocation, @RiverIndexName String riverIndexName) {, +    public void createIndex(final Request request, final Listener listener) {, +        clusterService.submitStateUpdateTask("create-index [" + request.index + "], cause [" + request.cause + "]", new ProcessedClusterStateUpdateTask() {, +, +            @Override public void clusterStateProcessed(ClusterState clusterState) {, +                clusterService.submitStateUpdateTask("reroute after index [" + request.index + "] creation", new ProcessedClusterStateUpdateTask() {, +                    @Override public ClusterState execute(ClusterState currentState) {, +                        RoutingTable.Builder routingTableBuilder = new RoutingTable.Builder();, +                        for (IndexRoutingTable indexRoutingTable : currentState.routingTable().indicesRouting().values()) {, +                            routingTableBuilder.add(indexRoutingTable);, +                        }, +                        IndexRoutingTable.Builder indexRoutingBuilder = new IndexRoutingTable.Builder(request.index), +                                .initializeEmpty(currentState.metaData().index(request.index));, +                        routingTableBuilder.add(indexRoutingBuilder);, +                        RoutingAllocation.Result routingResult = shardsAllocation.reroute(newClusterStateBuilder().state(currentState).routingTable(routingTableBuilder).build());, +                        return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();, +                    }, +, +                    @Override public void clusterStateProcessed(ClusterState clusterState) {, +                        logger.info("[{}] created and added to cluster_state", request.index);, +                        listener.onResponse(new Response(true, clusterState.metaData().index(request.index)));, +                    }, +                });, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataDeleteIndexService.java, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +    @Inject public MetaDataDeleteIndexService(Settings settings, ClusterService clusterService, ShardsAllocation shardsAllocation) {, +    public void deleteIndex(final Request request, final Listener listener) {, +        clusterService.submitStateUpdateTask("delete-index [" + request.index + "]", new ProcessedClusterStateUpdateTask() {, +, +            @Override public void clusterStateProcessed(ClusterState clusterState) {, +                listener.onResponse(new Response(true));, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    @Inject public MetaDataCreateIndexService(Settings settings, Environment environment, ClusterService clusterService, IndicesService indicesService,, +                                              ShardsAllocation shardsAllocation, @RiverIndexName String riverIndexName) {, +    public void createIndex(final Request request, final Listener listener) {, +        clusterService.submitStateUpdateTask("create-index [" + request.index + "], cause [" + request.cause + "]", new ProcessedClusterStateUpdateTask() {, +, +            @Override public void clusterStateProcessed(ClusterState clusterState) {, +                clusterService.submitStateUpdateTask("reroute after index [" + request.index + "] creation", new ProcessedClusterStateUpdateTask() {, +                    @Override public ClusterState execute(ClusterState currentState) {, +                        RoutingTable.Builder routingTableBuilder = new RoutingTable.Builder();, +                        for (IndexRoutingTable indexRoutingTable : currentState.routingTable().indicesRouting().values()) {, +                            routingTableBuilder.add(indexRoutingTable);, +                        }, +                        IndexRoutingTable.Builder indexRoutingBuilder = new IndexRoutingTable.Builder(request.index), +                                .initializeEmpty(currentState.metaData().index(request.index));, +                        routingTableBuilder.add(indexRoutingBuilder);, +                        RoutingAllocation.Result routingResult = shardsAllocation.reroute(newClusterStateBuilder().state(currentState).routingTable(routingTableBuilder).build());, +                        return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();, +                    }, +, +                    @Override public void clusterStateProcessed(ClusterState clusterState) {, +                        logger.info("[{}] created and added to cluster_state", request.index);, +                        listener.onResponse(new Response(true, clusterState.metaData().index(request.index)));, +                    }, +                });, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataDeleteIndexService.java, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +    @Inject public MetaDataDeleteIndexService(Settings settings, ClusterService clusterService, ShardsAllocation shardsAllocation) {, +    public void deleteIndex(final Request request, final Listener listener) {, +        clusterService.submitStateUpdateTask("delete-index [" + request.index + "]", new ProcessedClusterStateUpdateTask() {, +, +            @Override public void clusterStateProcessed(ClusterState clusterState) {, +                listener.onResponse(new Response(true));, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +    @Inject public MetaDataMappingService(Settings settings, ClusterService clusterService, IndicesService indicesService) {, +        clusterService.submitStateUpdateTask("remove-mapping [" + request.mappingType + "]", new ProcessedClusterStateUpdateTask() {]