[+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        logger.trace("writeBlob({}, stream, {})", buildKey(blobName), blobSize);, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize);, +        } catch (URISyntaxException|StorageException e) {, +            throw new IOException("Can not write blob " + blobName, e);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        logger.trace("writeBlob({}, stream, {})", buildKey(blobName), blobSize);, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize);, +        } catch (URISyntaxException|StorageException e) {, +            throw new IOException("Can not write blob " + blobName, e);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize) throws URISyntaxException, StorageException {, +        this.client.writeBlob(this.clientName, this.locMode, container, blobName, inputStream, blobSize);, +    }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        logger.trace("writeBlob({}, stream, {})", buildKey(blobName), blobSize);, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize);, +        } catch (URISyntaxException|StorageException e) {, +            throw new IOException("Can not write blob " + blobName, e);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize) throws URISyntaxException, StorageException {, +        this.client.writeBlob(this.clientName, this.locMode, container, blobName, inputStream, blobSize);, +    }, +++ /dev/null, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        logger.trace("writeBlob({}, stream, {})", buildKey(blobName), blobSize);, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize);, +        } catch (URISyntaxException|StorageException e) {, +            throw new IOException("Can not write blob " + blobName, e);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize) throws URISyntaxException, StorageException {, +        this.client.writeBlob(this.clientName, this.locMode, container, blobName, inputStream, blobSize);, +    }, +++ /dev/null, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java, +, +    void writeBlob(String account, LocationMode mode, String container, String blobName, InputStream inputStream, long blobSize) throws, +        URISyntaxException, StorageException;, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        logger.trace("writeBlob({}, stream, {})", buildKey(blobName), blobSize);, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize);, +        } catch (URISyntaxException|StorageException e) {, +            throw new IOException("Can not write blob " + blobName, e);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize) throws URISyntaxException, StorageException {, +        this.client.writeBlob(this.clientName, this.locMode, container, blobName, inputStream, blobSize);, +    }, +++ /dev/null, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java, +, +    void writeBlob(String account, LocationMode mode, String container, String blobName, InputStream inputStream, long blobSize) throws, +        URISyntaxException, StorageException;, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageServiceImpl.java, +, +    @Override, +    public void writeBlob(String account, LocationMode mode, String container, String blobName, InputStream inputStream, long blobSize), +        throws URISyntaxException, StorageException {, +        logger.trace("writeBlob({}, stream, {})", blobName, blobSize);, +        CloudBlobClient client = this.getSelectedClient(account, mode);, +        CloudBlobContainer blobContainer = client.getContainerReference(container);, +        CloudBlockBlob blob = blobContainer.getBlockBlobReference(blobName);, +        SocketAccess.doPrivilegedVoidException(() -> blob.upload(inputStream, blobSize, null, null, generateOperationContext(account)));, +        logger.trace("writeBlob({}, stream, {}) - done", blobName, blobSize);, +    }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        logger.trace("writeBlob({}, stream, {})", buildKey(blobName), blobSize);, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize);, +        } catch (URISyntaxException|StorageException e) {, +            throw new IOException("Can not write blob " + blobName, e);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize) throws URISyntaxException, StorageException {, +        this.client.writeBlob(this.clientName, this.locMode, container, blobName, inputStream, blobSize);, +    }, +++ /dev/null, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java, +, +    void writeBlob(String account, LocationMode mode, String container, String blobName, InputStream inputStream, long blobSize) throws, +        URISyntaxException, StorageException;, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageServiceImpl.java, +, +    @Override, +    public void writeBlob(String account, LocationMode mode, String container, String blobName, InputStream inputStream, long blobSize), +        throws URISyntaxException, StorageException {, +        logger.trace("writeBlob({}, stream, {})", blobName, blobSize);, +        CloudBlobClient client = this.getSelectedClient(account, mode);, +        CloudBlobContainer blobContainer = client.getContainerReference(container);, +        CloudBlockBlob blob = blobContainer.getBlockBlobReference(blobName);, +        SocketAccess.doPrivilegedVoidException(() -> blob.upload(inputStream, blobSize, null, null, generateOperationContext(account)));, +        logger.trace("writeBlob({}, stream, {}) - done", blobName, blobSize);, +    }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/SocketAccess.java, +import java.io.IOException;, +        void executeCouldThrow() throws StorageException, URISyntaxException, IOException;, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        logger.trace("writeBlob({}, stream, {})", buildKey(blobName), blobSize);]