[+++ b/core/src/main/java/org/elasticsearch/monitor/fs/FsInfo.java, +            free = FsProbe.adjustForHugeFilesystems(addLong(free, path.free));, +            available = FsProbe.adjustForHugeFilesystems(addLong(available, path.available));, +++ b/core/src/main/java/org/elasticsearch/monitor/fs/FsInfo.java, +            free = FsProbe.adjustForHugeFilesystems(addLong(free, path.free));, +            available = FsProbe.adjustForHugeFilesystems(addLong(available, path.available));, +++ b/core/src/test/java/org/elasticsearch/monitor/fs/FsProbeTests.java, +import java.util.function.Function;, +import java.util.function.Supplier;, +        final FsInfo.Path pathStats =, +                new FsInfo.Path(, +                        "/foo/bar",, +                        null,, +                        randomNonNegativeLong(),, +                        randomNonNegativeLong(),, +                        randomNonNegativeLong());, +        addUntilOverflow(, +                pathStats,, +                p -> p.total,, +                "total",, +                () -> new FsInfo.Path("/foo/baz", null, randomNonNegativeLong(), 0, 0));, +, +        addUntilOverflow(, +                pathStats,, +                p -> p.free,, +                "free",, +                () -> new FsInfo.Path("/foo/baz", null, 0, randomNonNegativeLong(), 0));, +, +        addUntilOverflow(, +                pathStats,, +                p -> p.available,, +                "available",, +                () -> new FsInfo.Path("/foo/baz", null, 0, 0, randomNonNegativeLong()));, +, +        // even after overflowing these should not be negative, +        assertThat(pathStats.total, greaterThan(0L));, +        assertThat(pathStats.free, greaterThan(0L));, +        assertThat(pathStats.available, greaterThan(0L));, +    private void addUntilOverflow(, +            final FsInfo.Path pathStats,, +            final Function<FsInfo.Path, Long> getter,, +            final String field,, +            final Supplier<FsInfo.Path> supplier) {, +        FsInfo.Path pathToAdd = supplier.get();, +        while ((getter.apply(pathStats) + getter.apply(pathToAdd)) > 0) {, +            // add a path to increase the total bytes until it overflows, +            logger.info(, +                    "--> adding {} bytes to {}, {} will be: {}",, +                    getter.apply(pathToAdd),, +                    getter.apply(pathStats),, +                    field,, +                    getter.apply(pathStats) + getter.apply(pathToAdd));, +            pathToAdd = supplier.get();, +        }, +        // this overflows, +        logger.info(, +                "--> adding {} bytes to {}, {} will be: {}",, +                getter.apply(pathToAdd),, +                getter.apply(pathStats),, +                field,, +                getter.apply(pathStats) + getter.apply(pathToAdd));, +        assertThat(getter.apply(pathStats) + getter.apply(pathToAdd), lessThan(0L));, +        pathStats.add(pathToAdd);]