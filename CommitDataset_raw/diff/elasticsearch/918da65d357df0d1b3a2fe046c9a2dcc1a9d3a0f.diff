[+++ b/TESTING.asciidoc, +* `tests.rest.blacklist`: comma separated globs that identify tests that are, +blacklisted and need to be skipped, +e.g. -Dtests.rest.blacklist=index/*/Index document,get/10_basic/*, +++ b/TESTING.asciidoc, +* `tests.rest.blacklist`: comma separated globs that identify tests that are, +blacklisted and need to be skipped, +e.g. -Dtests.rest.blacklist=index/*/Index document,get/10_basic/*, +++ b/pom.xml, +                                <tests.rest.blacklist>${tests.rest.blacklist}</tests.rest.blacklist>, +++ b/TESTING.asciidoc, +* `tests.rest.blacklist`: comma separated globs that identify tests that are, +blacklisted and need to be skipped, +e.g. -Dtests.rest.blacklist=index/*/Index document,get/10_basic/*, +++ b/pom.xml, +                                <tests.rest.blacklist>${tests.rest.blacklist}</tests.rest.blacklist>, +++ b/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java, +import static org.elasticsearch.test.rest.ElasticsearchRestTests.REST_TESTS_BLACKLIST;, +            return appendProperties(REST_TESTS_SUITE, REST_TESTS_SPEC, REST_TESTS_BLACKLIST);, +++ b/TESTING.asciidoc, +* `tests.rest.blacklist`: comma separated globs that identify tests that are, +blacklisted and need to be skipped, +e.g. -Dtests.rest.blacklist=index/*/Index document,get/10_basic/*, +++ b/pom.xml, +                                <tests.rest.blacklist>${tests.rest.blacklist}</tests.rest.blacklist>, +++ b/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java, +import static org.elasticsearch.test.rest.ElasticsearchRestTests.REST_TESTS_BLACKLIST;, +            return appendProperties(REST_TESTS_SUITE, REST_TESTS_SPEC, REST_TESTS_BLACKLIST);, +++ b/src/test/java/org/elasticsearch/test/rest/ElasticsearchRestTests.java, +import java.nio.file.FileSystems;, +import java.nio.file.PathMatcher;, +import java.nio.file.Paths;, +    /**, +     * Property that allows to control whether the REST tests need to be run (default) or not (false), +     */, +    /**, +     * Property that allows to control which REST tests get run. Supports comma separated list of tests, +     * or directories that contain tests e.g. -Dtests.rest.suite=index,get,create/10_with_id, +     */, +    /**, +     * Property that allows to blacklist some of the REST tests based on a comma separated list of globs, +     * e.g. -Dtests.rest.blacklist=get/10_basic/*, +     */, +    public static final String REST_TESTS_BLACKLIST = "tests.rest.blacklist";, +    /**, +     * Property that allows to control where the REST spec files need to be loaded from, +     */, +    private final PathMatcher[] blacklistPathMatchers;, +        String[] blacklist = resolvePathsProperty(REST_TESTS_BLACKLIST, null);, +        if (blacklist != null) {, +            blacklistPathMatchers = new PathMatcher[blacklist.length];, +            int i = 0;, +            for (String glob : blacklist) {, +                blacklistPathMatchers[i++] = FileSystems.getDefault().getPathMatcher("glob:" + glob);, +            }, +        } else {, +            blacklistPathMatchers = new PathMatcher[0];, +        }, +            return defaultValue == null ? null : new String[]{defaultValue};, +        //skip test if it matches one of the blacklist globs, +        for (PathMatcher blacklistedPathMatcher : blacklistPathMatchers) {, +            assumeFalse("[" + testCandidate.getTestPath() + "] skipped, reason: blacklisted", blacklistedPathMatcher.matches(Paths.get(testCandidate.getTestPath())));, +        }, +, +        //skip test if the whole suite (yaml file) is disabled, +        assumeFalse(buildSkipMessage(testCandidate.getSuitePath(), testCandidate.getSetupSection().getSkipSection()),, +        //skip test if test section is disabled, +        assumeFalse(buildSkipMessage(testCandidate.getTestPath(), testCandidate.getTestSection().getSkipSection()),, +            throw new IllegalArgumentException("No executable sections loaded for [" + testCandidate.getTestPath() + "]");, +            logger.info("start setup test [{}]", testCandidate.getTestPath());, +            logger.info("end setup test [{}]", testCandidate.getTestPath());, +++ b/TESTING.asciidoc, +* `tests.rest.blacklist`: comma separated globs that identify tests that are, +blacklisted and need to be skipped, +e.g. -Dtests.rest.blacklist=index/*/Index document,get/10_basic/*, +++ b/pom.xml, +                                <tests.rest.blacklist>${tests.rest.blacklist}</tests.rest.blacklist>, +++ b/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java, +import static org.elasticsearch.test.rest.ElasticsearchRestTests.REST_TESTS_BLACKLIST;, +            return appendProperties(REST_TESTS_SUITE, REST_TESTS_SPEC, REST_TESTS_BLACKLIST);, +++ b/src/test/java/org/elasticsearch/test/rest/ElasticsearchRestTests.java, +import java.nio.file.FileSystems;, +import java.nio.file.PathMatcher;, +import java.nio.file.Paths;, +    /**, +     * Property that allows to control whether the REST tests need to be run (default) or not (false), +     */, +    /**, +     * Property that allows to control which REST tests get run. Supports comma separated list of tests, +     * or directories that contain tests e.g. -Dtests.rest.suite=index,get,create/10_with_id, +     */, +    /**, +     * Property that allows to blacklist some of the REST tests based on a comma separated list of globs, +     * e.g. -Dtests.rest.blacklist=get/10_basic/*, +     */, +    public static final String REST_TESTS_BLACKLIST = "tests.rest.blacklist";, +    /**, +     * Property that allows to control where the REST spec files need to be loaded from, +     */, +    private final PathMatcher[] blacklistPathMatchers;]