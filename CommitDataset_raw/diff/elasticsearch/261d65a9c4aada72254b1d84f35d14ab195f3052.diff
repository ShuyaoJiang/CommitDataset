[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +, +            String[] indicesThatRequireAnUpdate = mappingRequiresUpdate(state, concreteIndices, logger);, +, +            if (indicesThatRequireAnUpdate.length > 0) {, +                    PutMappingRequest putMappingRequest = new PutMappingRequest(indicesThatRequireAnUpdate);, +                                            + Arrays.toString(indicesThatRequireAnUpdate) + " was not acknowledged"));, +                logger.trace("Mappings are uptodate.");, +, +    static String[] mappingRequiresUpdate(ClusterState state, String[] concreteIndices, Logger logger) {, +        List<String> indicesToUpdate = new ArrayList<>();, +, +        ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> currentMapping = state.metaData().findMappings(concreteIndices,, +                new String[] { ElasticsearchMappings.DOC_TYPE });, +, +        for (String index : concreteIndices) {, +            ImmutableOpenMap<String, MappingMetaData> innerMap = currentMapping.get(index);, +            if (innerMap != null) {, +                MappingMetaData metaData = innerMap.get(ElasticsearchMappings.DOC_TYPE);, +                try {, +                    Map<String, Object> meta = (Map<String, Object>) metaData.sourceAsMap().get("_meta");, +                    if (meta != null) {, +                        String versionString = (String) meta.get("version");, +                        if (versionString == null) {, +                            logger.info("Version of mappings for [{}] not found, recreating", index);, +                            indicesToUpdate.add(index);, +                            continue;, +                        }, +, +                        Version mappingVersion = Version.fromString(versionString);, +, +                        if (mappingVersion.equals(Version.CURRENT)) {, +                            continue;, +                        } else {, +                            logger.info("Mappings for [{}] are outdated [{}], updating it[{}].", index, mappingVersion, Version.CURRENT);, +                            indicesToUpdate.add(index);, +                            continue;, +                        }, +                    } else {, +                        logger.info("Version of mappings for [{}] not found, recreating", index);, +                        indicesToUpdate.add(index);, +                        continue;, +                    }, +                } catch (Exception e) {, +                    logger.error(new ParameterizedMessage("Failed to retrieve mapping version for [{}], recreating", index), e);, +                    indicesToUpdate.add(index);, +                    continue;, +                }, +            } else {, +                logger.info("No mappings found for [{}], recreating", index);, +                indicesToUpdate.add(index);, +            }, +        }, +        return indicesToUpdate.toArray(new String[indicesToUpdate.size()]);, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +, +            String[] indicesThatRequireAnUpdate = mappingRequiresUpdate(state, concreteIndices, logger);, +, +            if (indicesThatRequireAnUpdate.length > 0) {, +                    PutMappingRequest putMappingRequest = new PutMappingRequest(indicesThatRequireAnUpdate);, +                                            + Arrays.toString(indicesThatRequireAnUpdate) + " was not acknowledged"));, +                logger.trace("Mappings are uptodate.");, +, +    static String[] mappingRequiresUpdate(ClusterState state, String[] concreteIndices, Logger logger) {, +        List<String> indicesToUpdate = new ArrayList<>();, +, +        ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> currentMapping = state.metaData().findMappings(concreteIndices,, +                new String[] { ElasticsearchMappings.DOC_TYPE });, +, +        for (String index : concreteIndices) {, +            ImmutableOpenMap<String, MappingMetaData> innerMap = currentMapping.get(index);, +            if (innerMap != null) {, +                MappingMetaData metaData = innerMap.get(ElasticsearchMappings.DOC_TYPE);, +                try {, +                    Map<String, Object> meta = (Map<String, Object>) metaData.sourceAsMap().get("_meta");, +                    if (meta != null) {, +                        String versionString = (String) meta.get("version");, +                        if (versionString == null) {, +                            logger.info("Version of mappings for [{}] not found, recreating", index);, +                            indicesToUpdate.add(index);, +                            continue;, +                        }, +, +                        Version mappingVersion = Version.fromString(versionString);, +, +                        if (mappingVersion.equals(Version.CURRENT)) {, +                            continue;, +                        } else {, +                            logger.info("Mappings for [{}] are outdated [{}], updating it[{}].", index, mappingVersion, Version.CURRENT);, +                            indicesToUpdate.add(index);, +                            continue;, +                        }, +                    } else {]