[+++ b/rest-api-spec/test/get_watch/10_basic.yaml, +  - match: { _status.version: 1 }, +  - is_false: watch.status, +++ b/rest-api-spec/test/get_watch/10_basic.yaml, +  - match: { _status.version: 1 }, +  - is_false: watch.status, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestGetWatchAction.java, +import org.elasticsearch.watcher.support.xcontent.WatcherParams;, +import org.elasticsearch.watcher.watch.WatchStatus;, +    protected void handleRequest(final RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +                        .field("_id", response.getId());, +                            WatcherParams params = WatcherParams.builder(request), +                                    .put(WatchStatus.INCLUDE_VERSION_KEY, true), +                                    .build();, +                            builder.field("_status", response.getStatus(), params);, +                            builder.field("watch", response.getSource(), params);, +++ b/rest-api-spec/test/get_watch/10_basic.yaml, +  - match: { _status.version: 1 }, +  - is_false: watch.status, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestGetWatchAction.java, +import org.elasticsearch.watcher.support.xcontent.WatcherParams;, +import org.elasticsearch.watcher.watch.WatchStatus;, +    protected void handleRequest(final RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +                        .field("_id", response.getId());, +                            WatcherParams params = WatcherParams.builder(request), +                                    .put(WatchStatus.INCLUDE_VERSION_KEY, true), +                                    .build();, +                            builder.field("_status", response.getStatus(), params);, +                            builder.field("watch", response.getSource(), params);, +++ b/src/main/java/org/elasticsearch/watcher/support/xcontent/WatcherParams.java, +        public Builder put(String key, Object value) {, +            params.put(key, String.valueOf(value));, +            return this;, +        }, +, +++ b/rest-api-spec/test/get_watch/10_basic.yaml, +  - match: { _status.version: 1 }, +  - is_false: watch.status, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestGetWatchAction.java, +import org.elasticsearch.watcher.support.xcontent.WatcherParams;, +import org.elasticsearch.watcher.watch.WatchStatus;, +    protected void handleRequest(final RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +                        .field("_id", response.getId());, +                            WatcherParams params = WatcherParams.builder(request), +                                    .put(WatchStatus.INCLUDE_VERSION_KEY, true), +                                    .build();, +                            builder.field("_status", response.getStatus(), params);, +                            builder.field("watch", response.getSource(), params);, +++ b/src/main/java/org/elasticsearch/watcher/support/xcontent/WatcherParams.java, +        public Builder put(String key, Object value) {, +            params.put(key, String.valueOf(value));, +            return this;, +        }, +, +++ b/src/main/java/org/elasticsearch/watcher/transport/actions/get/GetWatchResponse.java, +import org.elasticsearch.watcher.watch.WatchStatus;, +    private WatchStatus status;, +    public GetWatchResponse(String id, WatchStatus status, BytesReference source, XContentType contentType) {, +        this.status = status;, +    public WatchStatus getStatus() {, +        return status;, +        if (found) {, +            status = WatchStatus.read(in);, +            source = XContentSource.readFrom(in);, +        }, +            status.writeTo(out);, +++ b/rest-api-spec/test/get_watch/10_basic.yaml, +  - match: { _status.version: 1 }, +  - is_false: watch.status, +++ b/src/main/java/org/elasticsearch/watcher/rest/action/RestGetWatchAction.java, +import org.elasticsearch.watcher.support.xcontent.WatcherParams;, +import org.elasticsearch.watcher.watch.WatchStatus;, +    protected void handleRequest(final RestRequest request, RestChannel channel, WatcherClient client) throws Exception {, +                        .field("_id", response.getId());, +                            WatcherParams params = WatcherParams.builder(request), +                                    .put(WatchStatus.INCLUDE_VERSION_KEY, true), +                                    .build();, +                            builder.field("_status", response.getStatus(), params);, +                            builder.field("watch", response.getSource(), params);, +++ b/src/main/java/org/elasticsearch/watcher/support/xcontent/WatcherParams.java, +        public Builder put(String key, Object value) {, +            params.put(key, String.valueOf(value));, +            return this;, +        }, +, +++ b/src/main/java/org/elasticsearch/watcher/transport/actions/get/GetWatchResponse.java, +import org.elasticsearch.watcher.watch.WatchStatus;, +    private WatchStatus status;, +    public GetWatchResponse(String id, WatchStatus status, BytesReference source, XContentType contentType) {, +        this.status = status;, +    public WatchStatus getStatus() {, +        return status;, +        if (found) {, +            status = WatchStatus.read(in);, +            source = XContentSource.readFrom(in);, +        }, +            status.writeTo(out);, +++ b/src/main/java/org/elasticsearch/watcher/transport/actions/get/TransportGetWatchAction.java, +                // When we return the watch via the get api, we want to return the watch as was specified in the put api,, +                // we don't include the status in the watch source itself, but as a separate top level field, so that]