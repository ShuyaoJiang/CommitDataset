[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/FlushJobAction.java, +                AutodetectProcessManager processManager) {, +                    FlushJobAction.Request::new, FlushJobAction.Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/FlushJobAction.java, +                AutodetectProcessManager processManager) {, +                    FlushJobAction.Request::new, FlushJobAction.Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PostDataAction.java, +                ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               AutodetectProcessManager processManager) {, +                    Request::new, Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task, ActionListener<Response> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/FlushJobAction.java, +                AutodetectProcessManager processManager) {, +                    FlushJobAction.Request::new, FlushJobAction.Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PostDataAction.java, +                ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               AutodetectProcessManager processManager) {, +                    Request::new, Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task, ActionListener<Response> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/TransportJobTaskAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.xpack.ml.job.metadata.MlMetadata;, +import org.elasticsearch.xpack.persistent.PersistentTasksInProgress;, +                           Supplier<Response> responseSupplier, String nodeExecutor, AutodetectProcessManager processManager) {, +        String jobId = request.getJobId();, +        // We need to check whether there is at least an assigned task here, otherwise we cannot redirect to the, +        // node running the job task., +        ClusterState state = clusterService.state();, +        JobManager.getJobOrThrowIfUnknown(state, jobId);, +        PersistentTasksInProgress tasks = clusterService.state().getMetaData().custom(PersistentTasksInProgress.TYPE);, +        PersistentTasksInProgress.PersistentTaskInProgress<?> jobTask = MlMetadata.getJobTask(jobId, tasks);, +        if (jobTask == null || jobTask.getExecutorNode() == null) {, +            listener.onFailure( new ElasticsearchStatusException("job [" + jobId + "] state is [" + JobState.CLOSED +, +            request.setNodes(jobTask.getExecutorNode());, +, +    @Override, +    protected final void taskOperation(Request request, OperationTask task, ActionListener<Response> listener) {, +        PersistentTasksInProgress tasks = clusterService.state().metaData().custom(PersistentTasksInProgress.TYPE);, +        JobState jobState = MlMetadata.getJobState(request.getJobId(), tasks);, +        if (jobState == JobState.OPENED) {, +            innerTaskOperation(request, task, listener);, +        } else {, +            listener.onFailure(new ElasticsearchStatusException("job [" + request.getJobId() + "] state is [" + jobState +, +                    "], but must be [" + JobState.OPENED + "] to perform requested action", RestStatus.CONFLICT));, +    protected abstract void innerTaskOperation(Request request, OperationTask task, ActionListener<Response> listener);, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/FlushJobAction.java, +                AutodetectProcessManager processManager) {, +                    FlushJobAction.Request::new, FlushJobAction.Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PostDataAction.java, +                ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               AutodetectProcessManager processManager) {, +                    Request::new, Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task, ActionListener<Response> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/TransportJobTaskAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.xpack.ml.job.metadata.MlMetadata;, +import org.elasticsearch.xpack.persistent.PersistentTasksInProgress;, +                           Supplier<Response> responseSupplier, String nodeExecutor, AutodetectProcessManager processManager) {, +        String jobId = request.getJobId();, +        // We need to check whether there is at least an assigned task here, otherwise we cannot redirect to the, +        // node running the job task., +        ClusterState state = clusterService.state();, +        JobManager.getJobOrThrowIfUnknown(state, jobId);, +        PersistentTasksInProgress tasks = clusterService.state().getMetaData().custom(PersistentTasksInProgress.TYPE);, +        PersistentTasksInProgress.PersistentTaskInProgress<?> jobTask = MlMetadata.getJobTask(jobId, tasks);, +        if (jobTask == null || jobTask.getExecutorNode() == null) {, +            listener.onFailure( new ElasticsearchStatusException("job [" + jobId + "] state is [" + JobState.CLOSED +, +            request.setNodes(jobTask.getExecutorNode());, +, +    @Override, +    protected final void taskOperation(Request request, OperationTask task, ActionListener<Response> listener) {, +        PersistentTasksInProgress tasks = clusterService.state().metaData().custom(PersistentTasksInProgress.TYPE);, +        JobState jobState = MlMetadata.getJobState(request.getJobId(), tasks);, +        if (jobState == JobState.OPENED) {, +            innerTaskOperation(request, task, listener);, +        } else {, +            listener.onFailure(new ElasticsearchStatusException("job [" + request.getJobId() + "] state is [" + jobState +, +                    "], but must be [" + JobState.OPENED + "] to perform requested action", RestStatus.CONFLICT));, +    protected abstract void innerTaskOperation(Request request, OperationTask task, ActionListener<Response> listener);, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateProcessAction.java, +                               AutodetectProcessManager processManager) {, +                    Request::new, Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task, ActionListener<Response> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/FlushJobAction.java, +                AutodetectProcessManager processManager) {, +                    FlushJobAction.Request::new, FlushJobAction.Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PostDataAction.java, +                ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               AutodetectProcessManager processManager) {, +                    Request::new, Response::new, MachineLearning.THREAD_POOL_NAME, processManager);, +        protected void innerTaskOperation(Request request, OpenJobAction.JobTask task, ActionListener<Response> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/TransportJobTaskAction.java, +import org.elasticsearch.cluster.ClusterState;]