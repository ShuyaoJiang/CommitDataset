[+++ b/build.gradle, +      javadoc.options.encoding='UTF8', +++ b/build.gradle, +      javadoc.options.encoding='UTF8', +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.FailedNodeException;, +import org.elasticsearch.action.IndicesRequest;, +import org.elasticsearch.action.NoShardAvailableActionException;, +import org.elasticsearch.action.ShardOperationFailedException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.DefaultShardOperationFailedException;, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.action.support.TransportActions;, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.NodeShouldNotConnectException;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequest;, +import org.elasticsearch.transport.TransportRequestHandler;, +import org.elasticsearch.transport.TransportResponse;, +import org.elasticsearch.transport.TransportService;, +                if (TransportActions.isShardNotAvailableException(t)) {, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[{}] failed to execute operation for shard [{}]", t, actionName, shardRouting.shortSummary());, +                    }, +                } else {, +                    if (logger.isDebugEnabled()) {, +                        logger.debug("[{}] failed to execute operation for shard [{}]", t, actionName, shardRouting.shortSummary());, +                    }, +                }, +++ b/build.gradle, +      javadoc.options.encoding='UTF8', +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.FailedNodeException;, +import org.elasticsearch.action.IndicesRequest;, +import org.elasticsearch.action.NoShardAvailableActionException;, +import org.elasticsearch.action.ShardOperationFailedException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.DefaultShardOperationFailedException;, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.action.support.TransportActions;, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.NodeShouldNotConnectException;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequest;, +import org.elasticsearch.transport.TransportRequestHandler;, +import org.elasticsearch.transport.TransportResponse;, +import org.elasticsearch.transport.TransportService;, +                if (TransportActions.isShardNotAvailableException(t)) {, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[{}] failed to execute operation for shard [{}]", t, actionName, shardRouting.shortSummary());, +                    }, +                } else {, +                    if (logger.isDebugEnabled()) {, +                        logger.debug("[{}] failed to execute operation for shard [{}]", t, actionName, shardRouting.shortSummary());, +                    }, +                }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                        // this will just throw exceptions in case of problems, +                        existingMapper.merge(newMapper.mapping(), true, request.updateAllTypes());, +++ b/build.gradle, +      javadoc.options.encoding='UTF8', +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.FailedNodeException;, +import org.elasticsearch.action.IndicesRequest;, +import org.elasticsearch.action.NoShardAvailableActionException;, +import org.elasticsearch.action.ShardOperationFailedException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.DefaultShardOperationFailedException;, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.action.support.TransportActions;, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.NodeShouldNotConnectException;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequest;, +import org.elasticsearch.transport.TransportRequestHandler;, +import org.elasticsearch.transport.TransportResponse;, +import org.elasticsearch.transport.TransportService;, +                if (TransportActions.isShardNotAvailableException(t)) {, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[{}] failed to execute operation for shard [{}]", t, actionName, shardRouting.shortSummary());, +                    }, +                } else {, +                    if (logger.isDebugEnabled()) {, +                        logger.debug("[{}] failed to execute operation for shard [{}]", t, actionName, shardRouting.shortSummary());, +                    }, +                }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                        // this will just throw exceptions in case of problems, +                        existingMapper.merge(newMapper.mapping(), true, request.updateAllTypes());, +++ /dev/null, +++ b/build.gradle]