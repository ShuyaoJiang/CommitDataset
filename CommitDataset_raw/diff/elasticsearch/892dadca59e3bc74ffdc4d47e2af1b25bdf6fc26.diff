[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.metadata.MetaDataIndexAliasesService;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicReference;, +, +    private final MetaDataIndexAliasesService indexAliasesService;, +                                                 ThreadPool threadPool, MetaDataIndexAliasesService indexAliasesService) {, +        this.indexAliasesService = indexAliasesService;, +        final AtomicReference<IndicesAliasesResponse> responseRef = new AtomicReference<IndicesAliasesResponse>();, +        final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();, +        final CountDownLatch latch = new CountDownLatch(1);, +        indexAliasesService.indicesAliases(new MetaDataIndexAliasesService.Request(request.aliasActions().toArray(new AliasAction[request.aliasActions().size()])), new MetaDataIndexAliasesService.Listener() {, +            @Override public void onResponse(MetaDataIndexAliasesService.Response response) {, +                responseRef.set(new IndicesAliasesResponse());, +                latch.countDown();, +            }, +, +            @Override public void onFailure(Throwable t) {, +                failureRef.set(t);, +                latch.countDown();, +            }, +        });, +, +        try {, +            latch.await();, +        } catch (InterruptedException e) {, +            failureRef.set(e);, +        }, +, +        if (failureRef.get() != null) {, +            if (failureRef.get() instanceof ElasticSearchException) {, +                throw (ElasticSearchException) failureRef.get();, +            } else {, +                throw new ElasticSearchException(failureRef.get().getMessage(), failureRef.get());, +            }, +        }, +, +        return responseRef.get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.metadata.MetaDataIndexAliasesService;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicReference;, +, +    private final MetaDataIndexAliasesService indexAliasesService;, +                                                 ThreadPool threadPool, MetaDataIndexAliasesService indexAliasesService) {, +        this.indexAliasesService = indexAliasesService;, +        final AtomicReference<IndicesAliasesResponse> responseRef = new AtomicReference<IndicesAliasesResponse>();, +        final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();, +        final CountDownLatch latch = new CountDownLatch(1);, +        indexAliasesService.indicesAliases(new MetaDataIndexAliasesService.Request(request.aliasActions().toArray(new AliasAction[request.aliasActions().size()])), new MetaDataIndexAliasesService.Listener() {, +            @Override public void onResponse(MetaDataIndexAliasesService.Response response) {, +                responseRef.set(new IndicesAliasesResponse());, +                latch.countDown();, +            }, +, +            @Override public void onFailure(Throwable t) {, +                failureRef.set(t);, +                latch.countDown();, +            }, +        });, +, +        try {, +            latch.await();, +        } catch (InterruptedException e) {, +            failureRef.set(e);, +        }, +, +        if (failureRef.get() != null) {, +            if (failureRef.get() instanceof ElasticSearchException) {, +                throw (ElasticSearchException) failureRef.get();, +            } else {, +                throw new ElasticSearchException(failureRef.get().getMessage(), failureRef.get());, +            }, +        }, +, +        return responseRef.get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicReference;, +, +    private final MetaDataCreateIndexService createIndexService;, +                                              ThreadPool threadPool, MetaDataCreateIndexService createIndexService) {, +        this.createIndexService = createIndexService;, +, +        final AtomicReference<CreateIndexResponse> responseRef = new AtomicReference<CreateIndexResponse>();, +        final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();, +        final CountDownLatch latch = new CountDownLatch(1);, +        createIndexService.createIndex(new MetaDataCreateIndexService.Request(cause, request.index()).settings(request.settings()).mappings(request.mappings()).timeout(request.timeout()), new MetaDataCreateIndexService.Listener() {, +            @Override public void onResponse(MetaDataCreateIndexService.Response response) {, +                responseRef.set(new CreateIndexResponse(response.acknowledged()));, +                latch.countDown();, +            }, +, +            @Override public void onFailure(Throwable t) {, +                failureRef.set(t);, +                latch.countDown();, +            }, +        });, +]