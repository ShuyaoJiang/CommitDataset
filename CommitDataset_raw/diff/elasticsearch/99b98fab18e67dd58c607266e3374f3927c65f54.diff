[+++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.xcontent.XContentParseException;, +            // ElasticsearchException knows how to guess its own root cause, +        if (ex instanceof XContentParseException) {, +            /*, +             * We'd like to unwrap parsing exceptions to the inner-most, +             * parsing exception because that is generally the most interesting, +             * exception to return to the user. If that exception is caused by, +             * an ElasticsearchException we'd like to keep unwrapping because, +             * ElasticserachExceptions tend to contain useful information for, +             * the user., +             */, +            Throwable cause = ex.getCause();, +            if (cause != null) {, +                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {, +                    return guessRootCauses(ex.getCause());, +                }, +            }, +        }, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.xcontent.XContentParseException;, +            // ElasticsearchException knows how to guess its own root cause, +        if (ex instanceof XContentParseException) {, +            /*, +             * We'd like to unwrap parsing exceptions to the inner-most, +             * parsing exception because that is generally the most interesting, +             * exception to return to the user. If that exception is caused by, +             * an ElasticsearchException we'd like to keep unwrapping because, +             * ElasticserachExceptions tend to contain useful information for, +             * the user., +             */, +            Throwable cause = ex.getCause();, +            if (cause != null) {, +                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {, +                    return guessRootCauses(ex.getCause());, +                }, +            }, +        }, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchWrapperException.java, +/**, + * An exception that is meant to be "unwrapped" when sent back to the user, + * as an error because its is {@link #getCause() cause}, if non-null is, + * <strong>always</strong> more useful to the user than the exception itself., + */, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.xcontent.XContentParseException;, +            // ElasticsearchException knows how to guess its own root cause, +        if (ex instanceof XContentParseException) {, +            /*, +             * We'd like to unwrap parsing exceptions to the inner-most, +             * parsing exception because that is generally the most interesting, +             * exception to return to the user. If that exception is caused by, +             * an ElasticsearchException we'd like to keep unwrapping because, +             * ElasticserachExceptions tend to contain useful information for, +             * the user., +             */, +            Throwable cause = ex.getCause();, +            if (cause != null) {, +                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {, +                    return guessRootCauses(ex.getCause());, +                }, +            }, +        }, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchWrapperException.java, +/**, + * An exception that is meant to be "unwrapped" when sent back to the user, + * as an error because its is {@link #getCause() cause}, if non-null is, + * <strong>always</strong> more useful to the user than the exception itself., + */, +++ b/server/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +import org.elasticsearch.common.xcontent.XContentParseException;, +import static org.hamcrest.Matchers.instanceOf;, +            assertEquals("parsing_exception", ElasticsearchException.getExceptionName(rootCauses[0]));, +            assertEquals("foobar", rootCauses[0].getMessage());, +            assertEquals("exception", ElasticsearchException.getExceptionName(rootCauses[0]));, +            assertEquals("foo", rootCauses[0].getMessage());, +            assertEquals(1, ((ParsingException) rootCauses[0]).getLineNumber());, +            assertEquals(2, ((ParsingException) rootCauses[0]).getColumnNumber());, +            assertEquals("query_shard_exception", ElasticsearchException.getExceptionName(rootCauses[1]));, +            assertEquals("foo1", rootCauses[1].getIndex().getName());, +            assertEquals("foobar", rootCauses[1].getMessage());, +            assertThat(foobars[0], instanceOf(ElasticsearchException.class));, +            assertEquals("foobar", foobars[0].getMessage());, +            assertEquals(IllegalArgumentException.class, foobars[0].getCause().getClass());, +            assertEquals("illegal_argument_exception", foobars[0].getExceptionName());, +        }, +, +        {, +            XContentParseException inner = new XContentParseException(null, "inner");, +            XContentParseException outer = new XContentParseException(null, "outer", inner);, +            final ElasticsearchException[] causes = ElasticsearchException.guessRootCauses(outer);, +            assertEquals(causes.length, 1);, +            assertThat(causes[0], instanceOf(ElasticsearchException.class));, +            assertEquals("inner", causes[0].getMessage());, +            assertEquals("x_content_parse_exception", causes[0].getExceptionName());, +        }, +, +        {, +            ElasticsearchException inner = new ElasticsearchException("inner");, +            XContentParseException outer = new XContentParseException(null, "outer", inner);]