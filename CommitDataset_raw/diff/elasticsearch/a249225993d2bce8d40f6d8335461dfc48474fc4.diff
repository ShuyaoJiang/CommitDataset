[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.maven', 'true' // TODO: rename this once we've switched to gradle!, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.maven', 'true' // TODO: rename this once we've switched to gradle!, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        copyConfig.into(new File(node.homeDir, 'config')) // copy must always have a general dest dir, even though we don't use it, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +                      .rename { destConfigFile.name }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.maven', 'true' // TODO: rename this once we've switched to gradle!, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        copyConfig.into(new File(node.homeDir, 'config')) // copy must always have a general dest dir, even though we don't use it, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +                      .rename { destConfigFile.name }, +++ b/buildSrc/version.properties, +jackson           = 2.7.1, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.maven', 'true' // TODO: rename this once we've switched to gradle!, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        copyConfig.into(new File(node.homeDir, 'config')) // copy must always have a general dest dir, even though we don't use it, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +                      .rename { destConfigFile.name }, +++ b/buildSrc/version.properties, +jackson           = 2.7.1, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, + * mvn test -Dtests.jvm.argline="-Djava.security.debug=access,failure" ..., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.maven', 'true' // TODO: rename this once we've switched to gradle!, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        copyConfig.into(new File(node.homeDir, 'config')) // copy must always have a general dest dir, even though we don't use it, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +                      .rename { destConfigFile.name }, +++ b/buildSrc/version.properties, +jackson           = 2.7.1, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, + * mvn test -Dtests.jvm.argline="-Djava.security.debug=access,failure" ..., +++ b/core/src/main/java/org/elasticsearch/index/analysis/SynonymTokenFilterFactory.java, +                sb.append(line).append(System.getProperty("line.separator"));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.maven', 'true' // TODO: rename this once we've switched to gradle!, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        copyConfig.into(new File(node.homeDir, 'config')) // copy must always have a general dest dir, even though we don't use it, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +                      .rename { destConfigFile.name }, +++ b/buildSrc/version.properties, +jackson           = 2.7.1, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, + * mvn test -Dtests.jvm.argline="-Djava.security.debug=access,failure" ..., +++ b/core/src/main/java/org/elasticsearch/index/analysis/SynonymTokenFilterFactory.java, +                sb.append(line).append(System.getProperty("line.separator"));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +class DocumentParser implements Closeable {, +        ParsedDocument doc = parsedDocument(source, context, update(context, mapping));, +            Mapper update = parseObject(context, mapping.root, true);, +            if (update != null) {, +                context.addDynamicMappingsUpdate(update);, +            }, +    private static Mapping update(ParseContext.InternalParseContext context, Mapping mapping) {, +        Mapper rootDynamicUpdate = context.dynamicMappingsUpdate();, +        return rootDynamicUpdate != null ? mapping.mappingUpdate(rootDynamicUpdate) : null;, +    }, +, +    static ObjectMapper parseObject(ParseContext context, ObjectMapper mapper, boolean atRoot) throws IOException {, +            return null;, +            return null;, +        update = innerParseObject(context, mapper, parser, currentFieldName, token, update);, +        return update;, +    private static ObjectMapper innerParseObject(ParseContext context, ObjectMapper mapper, XContentParser parser, String currentFieldName, XContentParser.Token token, ObjectMapper update) throws IOException {, +            ObjectMapper newUpdate = null;, +                newUpdate = parseObject(context, mapper, currentFieldName);, +                newUpdate = parseArray(context, mapper, currentFieldName);, +                newUpdate = parseValue(context, mapper, currentFieldName, token);, +            if (newUpdate != null) {, +                if (update == null) {, +                    update = newUpdate;, +                } else {, +                    update = update.merge(newUpdate, false);, +        }, +        return update;, +    }, +    private static Mapper parseObjectOrField(ParseContext context, Mapper mapper) throws IOException {, +            return parseObject(context, (ObjectMapper) mapper, false);, +            return update;, +        if (currentFieldName == null) {, +            throw new MapperParsingException("object mapping [" + mapper.name() + "] trying to serialize an object with no field associated with it, current value [" + context.parser().textOrNull() + "]");, +        }, +            final Mapper subUpdate = parseObjectOrField(context, objectMapper);, +            if (subUpdate != null) {]