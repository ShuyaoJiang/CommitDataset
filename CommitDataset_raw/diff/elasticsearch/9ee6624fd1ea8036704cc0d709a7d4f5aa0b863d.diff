[+++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +import java.util.Optional;, +        Optional<NetworkInterface> networkInterface = getInterfaces().stream().filter((netIf) -> name.equals(netIf.getName())).findFirst();, +, +        if (networkInterface.isPresent() == false) {, +        if (!networkInterface.get().isUp()) {, +        List<InetAddress> list = Collections.list(networkInterface.get().getInetAddresses());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +import java.util.Optional;, +        Optional<NetworkInterface> networkInterface = getInterfaces().stream().filter((netIf) -> name.equals(netIf.getName())).findFirst();, +, +        if (networkInterface.isPresent() == false) {, +        if (!networkInterface.get().isUp()) {, +        List<InetAddress> list = Collections.list(networkInterface.get().getInetAddresses());, +++ b/core/src/test/java/org/elasticsearch/common/network/NetworkUtilsTests.java, +import java.net.NetworkInterface;, +import java.util.Collections;, +, +import static org.hamcrest.Matchers.containsString;, +, +    /**, +     * Test that selecting by name is possible and properly matches the addresses on all interfaces and virtual, +     * interfaces., +     *, +     * Note that to avoid that this test fails when interfaces are down or they do not have addresses assigned to them,, +     * they are ignored., +     */, +    public void testAddressInterfaceLookup() throws Exception {, +        for (NetworkInterface netIf : NetworkUtils.getInterfaces()) {, +            if (!netIf.isUp() || Collections.list(netIf.getInetAddresses()).isEmpty()) {, +                continue;, +            }, +, +            String name = netIf.getName();, +            InetAddress[] expectedAddresses = Collections.list(netIf.getInetAddresses()).toArray(new InetAddress[0]);, +            InetAddress[] foundAddresses = NetworkUtils.getAddressesForInterface(name);, +            assertArrayEquals(expectedAddresses, foundAddresses);, +        }, +    }, +, +    public void testNonExistingInterface() throws Exception {, +        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,, +                () -> NetworkUtils.getAddressesForInterface("non-existing"));, +        assertThat(exception.getMessage(), containsString("No interface named 'non-existing' found"));, +    }]