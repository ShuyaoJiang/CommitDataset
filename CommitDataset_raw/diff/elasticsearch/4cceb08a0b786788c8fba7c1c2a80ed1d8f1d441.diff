[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/Build.java, +import org.elasticsearch.common.io.FastStringReader;, +import org.elasticsearch.common.io.Streams;, +        try {, +            String properties = Streams.copyToStringFromClasspath("/es-build.properties");, +            props.load(new FastStringReader(properties));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/Build.java, +import org.elasticsearch.common.io.FastStringReader;, +import org.elasticsearch.common.io.Streams;, +        try {, +            String properties = Streams.copyToStringFromClasspath("/es-build.properties");, +            props.load(new FastStringReader(properties));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/Build.java, +import org.elasticsearch.common.io.FastStringReader;, +import org.elasticsearch.common.io.Streams;, +        try {, +            String properties = Streams.copyToStringFromClasspath("/es-build.properties");, +            props.load(new FastStringReader(properties));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/common/io/Streams.java, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +    public static String copyToStringFromClasspath(ClassLoader classLoader, String path) throws IOException {, +        InputStream is = classLoader.getResourceAsStream(path);, +        if (is == null) {, +            throw new FileNotFoundException("Resource [" + path + "] not found in classpath with class loader [" + classLoader + "]");, +        }, +        return copyToString(new InputStreamReader(is, Charsets.UTF_8));, +    }, +, +    public static String copyToStringFromClasspath(String path) throws IOException {, +        InputStream is = Streams.class.getResourceAsStream(path);, +        if (is == null) {, +            throw new FileNotFoundException("Resource [" + path + "] not found in classpath");, +        }, +        return copyToString(new InputStreamReader(is, Charsets.UTF_8));, +    }, +, +    public static byte[] copyToBytesFromClasspath(String path) throws IOException {, +        try (InputStream is = Streams.class.getResourceAsStream(path)) {, +            if (is == null) {, +                throw new FileNotFoundException("Resource [" + path + "] not found in classpath");, +            }, +            try (BytesStreamOutput out = new BytesStreamOutput()) {, +                copy(is, out);, +                return out.bytes().toBytes();, +            }, +        }, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {]