[+++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +        hashMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectObjectOpenHashMap>() {, +            public void recycle(ObjectObjectOpenHashMap value) {, +        hashSet = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectOpenHashSet>() {, +            public void recycle(ObjectOpenHashSet value) {, +        doubleObjectMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<DoubleObjectOpenHashMap>() {, +            public void recycle(DoubleObjectOpenHashMap value) {, +        longObjectMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<LongObjectOpenHashMap>() {, +            public void recycle(LongObjectOpenHashMap value) {, +        longLongMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<LongLongOpenHashMap>() {, +            public void recycle(LongLongOpenHashMap value) {, +        intIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<IntIntOpenHashMap>() {, +            public void recycle(IntIntOpenHashMap value) {, +        floatIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<FloatIntOpenHashMap>() {, +            public void recycle(FloatIntOpenHashMap value) {, +        doubleIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<DoubleIntOpenHashMap>() {, +            public void recycle(DoubleIntOpenHashMap value) {, +        longIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<LongIntOpenHashMap>() {, +            public void recycle(LongIntOpenHashMap value) {, +, +            @Override, +            public void destroy(LongIntOpenHashMap value) {, +                // drop instance for GC, +            }, +        objectIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectIntOpenHashMap>() {, +            public void recycle(ObjectIntOpenHashMap value) {, +        intObjectMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<IntObjectOpenHashMap>() {, +            public void recycle(IntObjectOpenHashMap value) {, +        objectFloatMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectFloatOpenHashMap>() {, +            public void recycle(ObjectFloatOpenHashMap value) {, +++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +        hashMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectObjectOpenHashMap>() {, +            public void recycle(ObjectObjectOpenHashMap value) {, +        hashSet = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectOpenHashSet>() {, +            public void recycle(ObjectOpenHashSet value) {, +        doubleObjectMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<DoubleObjectOpenHashMap>() {, +            public void recycle(DoubleObjectOpenHashMap value) {, +        longObjectMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<LongObjectOpenHashMap>() {, +            public void recycle(LongObjectOpenHashMap value) {, +        longLongMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<LongLongOpenHashMap>() {, +            public void recycle(LongLongOpenHashMap value) {, +        intIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<IntIntOpenHashMap>() {, +            public void recycle(IntIntOpenHashMap value) {, +        floatIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<FloatIntOpenHashMap>() {, +            public void recycle(FloatIntOpenHashMap value) {, +        doubleIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<DoubleIntOpenHashMap>() {, +            public void recycle(DoubleIntOpenHashMap value) {, +        longIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<LongIntOpenHashMap>() {, +            public void recycle(LongIntOpenHashMap value) {, +, +            @Override, +            public void destroy(LongIntOpenHashMap value) {, +                // drop instance for GC, +            }, +        objectIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectIntOpenHashMap>() {, +            public void recycle(ObjectIntOpenHashMap value) {, +        intObjectMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<IntObjectOpenHashMap>() {, +            public void recycle(IntObjectOpenHashMap value) {, +        objectFloatMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectFloatOpenHashMap>() {, +            public void recycle(ObjectFloatOpenHashMap value) {, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +, +        bytePage = build(type, maxCount(limit, BigArrays.BYTE_PAGE_SIZE, bytesWeight, totalWeight), searchThreadPoolSize, availableProcessors, new AbstractRecyclerC<byte[]>() {, +            public void recycle(byte[] value) {, +                // nothing to do, +            }, +        intPage = build(type, maxCount(limit, BigArrays.INT_PAGE_SIZE, intsWeight, totalWeight), searchThreadPoolSize, availableProcessors, new AbstractRecyclerC<int[]>() {, +            public void recycle(int[] value) {, +                // nothing to do, +            }, +        longPage = build(type, maxCount(limit, BigArrays.LONG_PAGE_SIZE, longsWeight, totalWeight), searchThreadPoolSize, availableProcessors, new AbstractRecyclerC<long[]>() {, +            public void recycle(long[] value) {, +                // nothing to do               , +            }, +        doublePage = build(type, maxCount(limit, BigArrays.DOUBLE_PAGE_SIZE, doublesWeight, totalWeight), searchThreadPoolSize, availableProcessors, new AbstractRecyclerC<double[]>() {, +            public void recycle(double[] value) {, +                // nothing to do, +            }, +        objectPage = build(type, maxCount(limit, BigArrays.OBJECT_PAGE_SIZE, objectsWeight, totalWeight), searchThreadPoolSize, availableProcessors, new AbstractRecyclerC<Object[]>() {, +            public void recycle(Object[] value) {, +++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +        hashMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectObjectOpenHashMap>() {, +            public void recycle(ObjectObjectOpenHashMap value) {, +        hashSet = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<ObjectOpenHashSet>() {, +            public void recycle(ObjectOpenHashSet value) {, +        doubleObjectMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<DoubleObjectOpenHashMap>() {, +            public void recycle(DoubleObjectOpenHashMap value) {, +        longObjectMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<LongObjectOpenHashMap>() {, +            public void recycle(LongObjectOpenHashMap value) {, +        longLongMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<LongLongOpenHashMap>() {, +            public void recycle(LongLongOpenHashMap value) {, +        intIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<IntIntOpenHashMap>() {, +            public void recycle(IntIntOpenHashMap value) {, +        floatIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<FloatIntOpenHashMap>() {, +            public void recycle(FloatIntOpenHashMap value) {, +        doubleIntMap = build(type, limit, smartSize, availableProcessors, new AbstractRecyclerC<DoubleIntOpenHashMap>() {]