[+++ /dev/null, +++ /dev/null, +++ b/plugin/src/test/java/org/elasticsearch/xpack/watcher/transport/action/stats/WatchStatsTests.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +import org.elasticsearch.script.MockScriptPlugin;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptType;, +import org.hamcrest.Matchers;, +import java.util.Collections;, +import java.util.Locale;, +import java.util.Map;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.function.Function;, +    private static CountDownLatch scriptStartedLatch = new CountDownLatch(1);, +    private static CountDownLatch scriptCompletionLatch = new CountDownLatch(1);, +    private static Logger logger = ESLoggerFactory.getLogger(WatchStatsTests.class);, +, +    public static class LatchScriptPlugin extends MockScriptPlugin {, +, +        private static final String NAME = "latch";, +, +        protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {, +            return Collections.singletonMap(NAME, p -> {, +                scriptStartedLatch.countDown();, +                try {, +                    if (scriptCompletionLatch.await(10, TimeUnit.SECONDS) == false) {, +                        logger.error("Script completion latch was not counted down after 10 seconds");, +                    }, +                } catch (InterruptedException e) {, +                }, +                return true;, +            });, +        }, +    }, +, +    static Script latchScript() {, +        return new Script(ScriptType.INLINE, "mockscript", LatchScriptPlugin.NAME, Collections.emptyMap());, +    }, +, +    public void awaitScriptStartedExecution() throws InterruptedException {, +        if (scriptStartedLatch.await(10, TimeUnit.SECONDS) == false) {, +            throw new ElasticsearchException("Expected script to be called within 10 seconds, did not happen");, +        }, +    }, +, +        plugins.add(LatchScriptPlugin.class);, +        scriptStartedLatch = new CountDownLatch(1);, +        scriptCompletionLatch = new CountDownLatch(1);, +        scriptCompletionLatch.countDown();, +        boolean countedDown = scriptCompletionLatch.await(10, TimeUnit.SECONDS);, +        String msg = String.format(Locale.ROOT, "Script completion latch value is [%s], but should be 0", scriptCompletionLatch.getCount());, +        assertThat(msg, countedDown, Matchers.is(true));, +                .condition(new ScriptCondition(latchScript())), +        awaitScriptStartedExecution();, +                    .condition(new ScriptCondition(latchScript())), +        awaitScriptStartedExecution();]