[+++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +                indexShard.acquireSearcher("delete_by_query", IndexShard.Mode.WRITE), indexService, indexShard, scriptService, cacheRecycler));, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +                indexShard.acquireSearcher("delete_by_query", IndexShard.Mode.WRITE), indexService, indexShard, scriptService, cacheRecycler));, +++ b/src/main/java/org/elasticsearch/index/shard/service/IndexShard.java, +    Engine.Searcher acquireSearcher(String source, Mode mode);, +, +, +    public enum Mode {, +        READ,, +        WRITE, +    }, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +                indexShard.acquireSearcher("delete_by_query", IndexShard.Mode.WRITE), indexService, indexShard, scriptService, cacheRecycler));, +++ b/src/main/java/org/elasticsearch/index/shard/service/IndexShard.java, +    Engine.Searcher acquireSearcher(String source, Mode mode);, +, +, +    public enum Mode {, +        READ,, +        WRITE, +    }, +++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +        return acquireSearcher(source, Mode.READ);, +    }, +, +    @Override, +    public Engine.Searcher acquireSearcher(String source, Mode mode) {, +        readAllowed(mode);, +        readAllowed(Mode.READ);, +    }, +, +, +    public void readAllowed(Mode mode) throws IllegalIndexShardStateException {, +        switch (mode) {, +            case READ:, +                break;, +            case WRITE:, +                if (state != IndexShardState.STARTED && state != IndexShardState.RELOCATED && state != IndexShardState.RECOVERING && state != IndexShardState.POST_RECOVERY) {, +                    throw new IllegalIndexShardStateException(shardId, state, "operations only allowed when started/relocated");, +                }, +                break;, +        }, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +                indexShard.acquireSearcher("delete_by_query", IndexShard.Mode.WRITE), indexService, indexShard, scriptService, cacheRecycler));, +++ b/src/main/java/org/elasticsearch/index/shard/service/IndexShard.java, +    Engine.Searcher acquireSearcher(String source, Mode mode);, +, +, +    public enum Mode {, +        READ,, +        WRITE, +    }, +++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +        return acquireSearcher(source, Mode.READ);, +    }, +, +    @Override, +    public Engine.Searcher acquireSearcher(String source, Mode mode) {, +        readAllowed(mode);, +        readAllowed(Mode.READ);, +    }, +, +, +    public void readAllowed(Mode mode) throws IllegalIndexShardStateException {, +        switch (mode) {, +            case READ:, +                break;, +            case WRITE:, +                if (state != IndexShardState.STARTED && state != IndexShardState.RELOCATED && state != IndexShardState.RECOVERING && state != IndexShardState.POST_RECOVERY) {, +                    throw new IllegalIndexShardStateException(shardId, state, "operations only allowed when started/relocated");, +                }, +                break;, +        }, +++ b/src/test/java/org/elasticsearch/deleteByQuery/DeleteByQueryTests.java]