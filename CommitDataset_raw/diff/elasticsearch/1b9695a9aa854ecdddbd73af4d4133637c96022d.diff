[+++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/FunctionRefTests.java, +    public void testWrongArityNotEnough() {, +        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("List l = new ArrayList(); l.add(2); l.add(1); l.sort(String::isEmpty);");, +        });, +        assertTrue(expected.getMessage().contains("Unknown reference"));, +    }, +    , +    , +    public void testWrongArityNotEnoughDef() {, +        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("def l = new ArrayList(); l.add(2); l.add(1); l.sort(String::isEmpty);");, +        });, +        assertTrue(expected.getMessage().contains("Unknown reference"));, +    }, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/FunctionRefTests.java, +    public void testWrongArityNotEnough() {, +        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("List l = new ArrayList(); l.add(2); l.add(1); l.sort(String::isEmpty);");, +        });, +        assertTrue(expected.getMessage().contains("Unknown reference"));, +    }, +    , +    , +    public void testWrongArityNotEnoughDef() {, +        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("def l = new ArrayList(); l.add(2); l.add(1); l.sort(String::isEmpty);");, +        });, +        assertTrue(expected.getMessage().contains("Unknown reference"));, +    }, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/LambdaTests.java, +    public void testWrongArityNotEnough() {, +        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("List l = new ArrayList(); l.add(1); l.add(1); ", +               + "return l.stream().mapToInt(() -> 5).sum();");, +        });, +        assertTrue(expected.getMessage().contains("Incorrect number of parameters"));, +    }, +    , +    public void testWrongArityNotEnoughDef() {, +        IllegalArgumentException expected = expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("def l = new ArrayList(); l.add(1); l.add(1); ", +               + "return l.stream().mapToInt(() -> 5).sum();");, +        });, +        assertTrue(expected.getMessage().contains("Incorrect number of parameters"));, +    }, +    ]