[+++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +    final Set<TcpChannel> getAcceptedChannels() {, +        return Collections.unmodifiableSet(acceptedChannels);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +    final Set<TcpChannel> getAcceptedChannels() {, +        return Collections.unmodifiableSet(acceptedChannels);, +    }, +, +++ b/test/framework/src/main/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.settings.Setting;, +    protected ClusterSettings clusterSettingsA;, +    protected Set<Setting<?>> getSupportedSettings() {, +        return ClusterSettings.BUILT_IN_CLUSTER_SETTINGS;, +    }, +, +        clusterSettingsA = new ClusterSettings(Settings.EMPTY, getSupportedSettings());, +        serviceA = buildService("TS_A",  version0, clusterSettingsA, connectionSettings); // this one supports dynamic tracer updates, +    private MockTransportService buildService(final String name, final Version version, @Nullable ClusterSettings clusterSettings,, +        Settings updatedSettings = Settings.builder(), +            .build();, +        if (clusterSettings == null) {, +            clusterSettings = new ClusterSettings(updatedSettings, getSupportedSettings());, +        }, +        MockTransportService service = build(updatedSettings, version, clusterSettings, doHandshake);, +    protected MockTransportService buildService(final String name, final Version version, Settings settings) {, +        return buildService(name, version, null, settings);, +        try (MockTransportService serviceC = buildService("TS_C", CURRENT_VERSION, Settings.EMPTY)) {, +        try (MockTransportService serviceC = buildService("TS_C", CURRENT_VERSION,  Settings.EMPTY)) {, +                MockTransportService newService = buildService("TS_B_" + i, version1, Settings.EMPTY);, +        clusterSettingsA.applySettings(Settings.builder(), +        TransportService serviceC = buildService("TS_C", version0, Settings.EMPTY);, +        try (MockTransportService service = buildService("TS_C", version,  Settings.EMPTY)) {, +        try (MockTransportService service = buildService("TS_C", version,  Settings.EMPTY)) {, +        try (TransportService service = buildService("TS_TPC", Version.CURRENT, Settings.EMPTY)) {, +        try (TransportService service = buildService("TS_TPC", Version.CURRENT, Settings.EMPTY)) {, +        TransportService serviceC = buildService("TS_C", CURRENT_VERSION,  Settings.EMPTY);, +        MockTransportService serviceC = buildService("TS_C", version0,  Settings.EMPTY);, +        MockTransportService serviceC = buildService("TS_C", version0,  Settings.EMPTY);, +        MockTransportService serviceC = buildService("TS_C", version0,  Settings.EMPTY);, +        try (MockTransportService serviceC = buildService("TS_C", version0, Settings.builder(), +            .build())) {, +        try (MockTransportService service = buildService("TS_C", version0, Settings.EMPTY)) {, +, +    protected Set<TcpChannel> getAcceptedChannels(TcpTransport transport) {, +        return transport.getAcceptedChannels();, +    }, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +    final Set<TcpChannel> getAcceptedChannels() {, +        return Collections.unmodifiableSet(acceptedChannels);, +    }, +, +++ b/test/framework/src/main/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.settings.Setting;, +    protected ClusterSettings clusterSettingsA;, +    protected Set<Setting<?>> getSupportedSettings() {, +        return ClusterSettings.BUILT_IN_CLUSTER_SETTINGS;, +    }, +, +        clusterSettingsA = new ClusterSettings(Settings.EMPTY, getSupportedSettings());, +        serviceA = buildService("TS_A",  version0, clusterSettingsA, connectionSettings); // this one supports dynamic tracer updates, +    private MockTransportService buildService(final String name, final Version version, @Nullable ClusterSettings clusterSettings,, +        Settings updatedSettings = Settings.builder(), +            .build();, +        if (clusterSettings == null) {, +            clusterSettings = new ClusterSettings(updatedSettings, getSupportedSettings());, +        }, +        MockTransportService service = build(updatedSettings, version, clusterSettings, doHandshake);, +    protected MockTransportService buildService(final String name, final Version version, Settings settings) {, +        return buildService(name, version, null, settings);, +        try (MockTransportService serviceC = buildService("TS_C", CURRENT_VERSION, Settings.EMPTY)) {, +        try (MockTransportService serviceC = buildService("TS_C", CURRENT_VERSION,  Settings.EMPTY)) {, +                MockTransportService newService = buildService("TS_B_" + i, version1, Settings.EMPTY);, +        clusterSettingsA.applySettings(Settings.builder(), +        TransportService serviceC = buildService("TS_C", version0, Settings.EMPTY);, +        try (MockTransportService service = buildService("TS_C", version,  Settings.EMPTY)) {, +        try (MockTransportService service = buildService("TS_C", version,  Settings.EMPTY)) {, +        try (TransportService service = buildService("TS_TPC", Version.CURRENT, Settings.EMPTY)) {, +        try (TransportService service = buildService("TS_TPC", Version.CURRENT, Settings.EMPTY)) {, +        TransportService serviceC = buildService("TS_C", CURRENT_VERSION,  Settings.EMPTY);, +        MockTransportService serviceC = buildService("TS_C", version0,  Settings.EMPTY);, +        MockTransportService serviceC = buildService("TS_C", version0,  Settings.EMPTY);, +        MockTransportService serviceC = buildService("TS_C", version0,  Settings.EMPTY);, +        try (MockTransportService serviceC = buildService("TS_C", version0, Settings.builder(), +            .build())) {, +        try (MockTransportService service = buildService("TS_C", version0, Settings.EMPTY)) {, +, +    protected Set<TcpChannel> getAcceptedChannels(TcpTransport transport) {, +        return transport.getAcceptedChannels();, +    }, +++ b/test/framework/src/main/java/org/elasticsearch/transport/TestProfiles.java, +public final class TestProfiles {, +    public static final ConnectionProfile LIGHT_PROFILE;, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +    final Set<TcpChannel> getAcceptedChannels() {, +        return Collections.unmodifiableSet(acceptedChannels);, +    }]