[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +, +                    // do a quick test to see if its fits a dynamic template, if so, use it., +                    // we need to do it here so we can handle things like attachment templates, where calling, +                    // text (to see if its a date) causes the binary value to be cleared, +                    if (!resolved) {, +                        Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "string");, +                        if (builder != null) {, +                            mapper = builder.build(builderContext);, +                            resolved = true;, +                        }, +                    }, +, +                    if (!resolved && context.root().dateDetection()) {, +                        String text = context.parser().text();, +                        String text = context.parser().text();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +, +                    // do a quick test to see if its fits a dynamic template, if so, use it., +                    // we need to do it here so we can handle things like attachment templates, where calling, +                    // text (to see if its a date) causes the binary value to be cleared, +                    if (!resolved) {, +                        Mapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "string");, +                        if (builder != null) {, +                            mapper = builder.build(builderContext);, +                            resolved = true;, +                        }, +                    }, +, +                    if (!resolved && context.root().dateDetection()) {, +                        String text = context.parser().text();, +                        String text = context.parser().text();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/RootObjectMapper.java, +        return typeParser.parse(name, dynamicTemplate.mappingForName(name, dynamicType), parserContext);]