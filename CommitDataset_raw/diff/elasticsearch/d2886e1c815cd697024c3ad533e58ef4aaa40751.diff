[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.ExecuteWatchRequest;, +import org.elasticsearch.client.watcher.ExecuteWatchResponse;, +     * Execute a watch on the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException if there is a problem sending the request or parsing the response, +     */, +    public ExecuteWatchResponse executeWatch(ExecuteWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::executeWatch, options,, +            ExecuteWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously execute a watch on the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notifed upon request completion, +     */, +    public void executeWatchAsync(ExecuteWatchRequest request, RequestOptions options, ActionListener<ExecuteWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::executeWatch, options,, +            ExecuteWatchResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.ExecuteWatchRequest;, +import org.elasticsearch.client.watcher.ExecuteWatchResponse;, +     * Execute a watch on the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException if there is a problem sending the request or parsing the response, +     */, +    public ExecuteWatchResponse executeWatch(ExecuteWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::executeWatch, options,, +            ExecuteWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously execute a watch on the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notifed upon request completion, +     */, +    public void executeWatchAsync(ExecuteWatchRequest request, RequestOptions options, ActionListener<ExecuteWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::executeWatch, options,, +            ExecuteWatchResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +import org.elasticsearch.client.watcher.ActivateWatchRequest;, +import org.elasticsearch.client.watcher.DeactivateWatchRequest;, +import org.elasticsearch.client.watcher.ExecuteWatchRequest;, +import org.elasticsearch.common.xcontent.XContentType;, +, +import java.io.IOException;, +    static Request executeWatch(ExecuteWatchRequest executeWatchRequest) throws IOException {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_xpack", "watcher", "watch"), +            .addPathPart(executeWatchRequest.getId())       // will ignore if ID is null, +            .addPathPartAsIs("_execute").build();, +, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        if (executeWatchRequest.isDebug()) {, +            params.putParam("debug", "true");, +        }, +        if (executeWatchRequest.ignoreCondition()) {, +            params.putParam("ignore_condition", "true");, +        }, +        if (executeWatchRequest.recordExecution()) {, +            params.putParam("record_execution", "true");, +        }, +, +        request.setEntity(RequestConverters.createEntity(executeWatchRequest, XContentType.JSON));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.ExecuteWatchRequest;, +import org.elasticsearch.client.watcher.ExecuteWatchResponse;, +     * Execute a watch on the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException if there is a problem sending the request or parsing the response, +     */]