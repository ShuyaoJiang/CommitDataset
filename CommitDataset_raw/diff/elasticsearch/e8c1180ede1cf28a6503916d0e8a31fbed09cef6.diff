[+++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataStats.java, +    public static FieldDataStats readFieldDataStats(StreamInput in) throws IOException {, +        FieldDataStats stats = new FieldDataStats();, +        stats.readFrom(in);, +        return stats;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataStats.java, +    public static FieldDataStats readFieldDataStats(StreamInput in) throws IOException {, +        FieldDataStats stats = new FieldDataStats();, +        stats.readFrom(in);, +        return stats;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import com.google.common.cache.RemovalListener;, +import com.google.common.cache.RemovalNotification;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.mapper.FieldMapper;, +    interface Listener {, +, +        void onLoad(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, AtomicFieldData fieldData);, +, +        void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, @Nullable AtomicFieldData fieldData);, +    }, +, +    static abstract class FieldBased implements IndexFieldDataCache, SegmentReader.CoreClosedListener, RemovalListener<Object, AtomicFieldData> {, +        private final Index index;, +        private final FieldMapper.Names fieldNames;, +        private final FieldDataType fieldDataType;, +        private final Listener listener;, +        protected FieldBased(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, Listener listener, CacheBuilder cache) {, +            this.index = index;, +            this.fieldNames = fieldNames;, +            this.fieldDataType = fieldDataType;, +            this.listener = listener;, +            cache.removalListener(this);, +            this.cache = cache.build();, +        }, +, +        @Override, +        public void onRemoval(RemovalNotification<Object, AtomicFieldData> notification) {, +            listener.onUnload(index, fieldNames, fieldDataType, notification.getValue());, +                    AtomicFieldData fieldData = indexFieldData.loadDirect(context);, +                    listener.onLoad(index, fieldNames, fieldDataType, fieldData);, +                    return fieldData;, +        public Resident(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, Listener listener) {, +            super(index, fieldNames, fieldDataType, listener, CacheBuilder.newBuilder());, +        public Soft(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, Listener listener) {, +            super(index, fieldNames, fieldDataType, listener, CacheBuilder.newBuilder().softValues());, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataStats.java, +    public static FieldDataStats readFieldDataStats(StreamInput in) throws IOException {, +        FieldDataStats stats = new FieldDataStats();, +        stats.readFrom(in);, +        return stats;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import com.google.common.cache.RemovalListener;, +import com.google.common.cache.RemovalNotification;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.mapper.FieldMapper;, +    interface Listener {, +, +        void onLoad(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, AtomicFieldData fieldData);, +, +        void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, @Nullable AtomicFieldData fieldData);, +    }, +, +    static abstract class FieldBased implements IndexFieldDataCache, SegmentReader.CoreClosedListener, RemovalListener<Object, AtomicFieldData> {, +        private final Index index;, +        private final FieldMapper.Names fieldNames;, +        private final FieldDataType fieldDataType;, +        private final Listener listener;, +        protected FieldBased(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, Listener listener, CacheBuilder cache) {, +            this.index = index;, +            this.fieldNames = fieldNames;, +            this.fieldDataType = fieldDataType;, +            this.listener = listener;, +            cache.removalListener(this);, +            this.cache = cache.build();, +        }, +, +        @Override, +        public void onRemoval(RemovalNotification<Object, AtomicFieldData> notification) {, +            listener.onUnload(index, fieldNames, fieldDataType, notification.getValue());, +                    AtomicFieldData fieldData = indexFieldData.loadDirect(context);, +                    listener.onLoad(index, fieldNames, fieldDataType, fieldData);, +                    return fieldData;, +        public Resident(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, Listener listener) {, +            super(index, fieldNames, fieldDataType, listener, CacheBuilder.newBuilder());, +        public Soft(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, Listener listener) {, +            super(index, fieldNames, fieldDataType, listener, CacheBuilder.newBuilder().softValues());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.metrics.CounterMetric;, +public class IndexFieldDataService extends AbstractIndexComponent implements IndexFieldDataCache.Listener {, +    private final CounterMetric memoryUsedInBytes = new CounterMetric();, +, +    @Override]