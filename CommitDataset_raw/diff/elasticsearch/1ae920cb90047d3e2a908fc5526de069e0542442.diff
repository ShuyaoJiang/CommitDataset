[+++ b/docs/reference/modules/gateway.asciidoc, +, +=== Dangling indices, +, +When a node joins the cluster, any shards stored in its local data directory , +directory which do not already exist in the cluster will be imported into the , +cluster. This functionality is intended as a best effort to help users who , +lose all master nodes. If a new master node is started which is unaware of , +the other indices in the cluster, adding the old nodes will cause the old , +indices to be imported, instead of being deleted., +++ b/docs/reference/modules/gateway.asciidoc, +, +=== Dangling indices, +, +When a node joins the cluster, any shards stored in its local data directory , +directory which do not already exist in the cluster will be imported into the , +cluster. This functionality is intended as a best effort to help users who , +lose all master nodes. If a new master node is started which is unaware of , +the other indices in the cluster, adding the old nodes will cause the old , +indices to be imported, instead of being deleted., +++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/docs/reference/modules/gateway.asciidoc, +, +=== Dangling indices, +, +When a node joins the cluster, any shards stored in its local data directory , +directory which do not already exist in the cluster will be imported into the , +cluster. This functionality is intended as a best effort to help users who , +lose all master nodes. If a new master node is started which is unaware of , +the other indices in the cluster, adding the old nodes will cause the old , +indices to be imported, instead of being deleted., +++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/docs/reference/modules/gateway.asciidoc, +, +=== Dangling indices, +, +When a node joins the cluster, any shards stored in its local data directory , +directory which do not already exist in the cluster will be imported into the , +cluster. This functionality is intended as a best effort to help users who , +lose all master nodes. If a new master node is started which is unaware of , +the other indices in the cluster, adding the old nodes will cause the old , +indices to be imported, instead of being deleted., +++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {, +                    assert (index.version() == Versions.MATCH_ANY && index.versionType() == VersionType.INTERNAL), +                        : "version: " + index.version() + " type: " + index.versionType();, +            assert assertOriginPrimarySequenceNumber(seqNo);, +    protected boolean assertOriginPrimarySequenceNumber(final long seqNo) {, +    protected long doGenerateSeqNoForOperation(final Operation operation) {, +                final IndexingStrategy plan;, +, +                if (index.origin() == Operation.Origin.PRIMARY) {, +                    plan = planIndexingAsPrimary(index);, +                } else {, +                    // non-primary mode (i.e., replica or recovery), +                    plan = planIndexingAsNonPrimary(index);, +                }, +    private IndexingStrategy planIndexingAsNonPrimary(Index index) throws IOException {, +    private IndexingStrategy planIndexingAsPrimary(Index index) throws IOException {, +    private static final class IndexingStrategy {, +            final DeletionStrategy plan;, +            if (delete.origin() == Operation.Origin.PRIMARY) {, +                plan = planDeletionAsPrimary(delete);, +            } else {, +                plan = planDeletionAsNonPrimary(delete);, +            }, +    private DeletionStrategy planDeletionAsNonPrimary(Delete delete) throws IOException {, +        assert delete.origin() != Operation.Origin.PRIMARY : "planing as primary but got " + delete.origin();, +    private DeletionStrategy planDeletionAsPrimary(Delete delete) throws IOException {, +    private static final class DeletionStrategy {, +++ b/docs/reference/modules/gateway.asciidoc, +, +=== Dangling indices, +]