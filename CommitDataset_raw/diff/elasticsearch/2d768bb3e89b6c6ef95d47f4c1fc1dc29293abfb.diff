[+++ b/src/main/java/org/elasticsearch/index/translog/Translog.java, +     * Returns the translog filename for the given id., +    String getFilename(long translogId);, +++ b/src/main/java/org/elasticsearch/index/translog/Translog.java, +     * Returns the translog filename for the given id., +    String getFilename(long translogId);, +++ b/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +                newFile = type.create(shardId, id, new InternalChannelReference(location.resolve(getFilename(id)), StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW), bufferSize);, +            this.trans = type.create(shardId, id, new InternalChannelReference(location.resolve(getFilename(id)), StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW), transientBufferSize);, +    public String getFilename(long translogId) {, +        return TRANSLOG_FILE_PREFIX + translogId;, +        final String translogName = getFilename(translogId);, +            for (Path recoveryFiles : FileSystemUtils.files(translogLocation, translogName + "{.recovering,}")) {, +++ b/src/main/java/org/elasticsearch/index/translog/Translog.java, +     * Returns the translog filename for the given id., +    String getFilename(long translogId);, +++ b/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +                newFile = type.create(shardId, id, new InternalChannelReference(location.resolve(getFilename(id)), StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW), bufferSize);, +            this.trans = type.create(shardId, id, new InternalChannelReference(location.resolve(getFilename(id)), StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW), transientBufferSize);, +    public String getFilename(long translogId) {, +        return TRANSLOG_FILE_PREFIX + translogId;, +        final String translogName = getFilename(translogId);, +            for (Path recoveryFiles : FileSystemUtils.files(translogLocation, translogName + "{.recovering,}")) {, +++ b/src/test/java/org/elasticsearch/index/translog/AbstractSimpleTranslogTests.java, +            if (Files.exists(location.resolve(translog.getFilename(id)))) {, +        fail(translog.getFilename(id) + " is not present in any location: " + Arrays.toString(translog.locations()));, +            assertFalse(Files.exists(location.resolve(translog.getFilename(id))));]