[+++ b/src/main/java/org/elasticsearch/index/fielddata/plain/AbstractBytesIndexFieldData.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.fielddata.plain;, +, +import java.io.IOException;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +import org.apache.lucene.index.AtomicReader;, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.index.FilteredTermsEnum;, +import org.apache.lucene.index.Terms;, +import org.apache.lucene.index.TermsEnum;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.CharsRef;, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.fielddata.AbstractIndexFieldData;, +import org.elasticsearch.index.fielddata.AtomicFieldData;, +import org.elasticsearch.index.fielddata.FieldDataType;, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexFieldDataCache;, +import org.elasticsearch.index.fielddata.ScriptDocValues;, +import org.elasticsearch.index.fielddata.fieldcomparator.BytesRefFieldComparatorSource;, +import org.elasticsearch.index.fielddata.fieldcomparator.SortMode;, +import org.elasticsearch.index.mapper.FieldMapper.Names;, +, +public abstract class AbstractBytesIndexFieldData<FD extends AtomicFieldData.WithOrdinals<ScriptDocValues.Strings>> extends AbstractIndexFieldData<FD> implements IndexFieldData.WithOrdinals<FD> {, +, +    private Settings frequency;, +    private Settings regex;, +, +    protected AbstractBytesIndexFieldData(Index index, Settings indexSettings, Names fieldNames, FieldDataType fieldDataType,, +            IndexFieldDataCache cache) {, +        super(index, indexSettings, fieldNames, fieldDataType, cache);, +        frequency = getPrefixSettings(fieldDataType.getSettings(), "filter.frequency.");, +        regex = getPrefixSettings(fieldDataType.getSettings(), "filter.regex.");, +       , +    }, +    , +    private final Settings getPrefixSettings(Settings settings, String prefix) {, +        Settings byPrefix = settings.getByPrefix(prefix);, +        return byPrefix.getAsMap().isEmpty() ? null : byPrefix;, +    }, +, +    @Override, +    public final boolean valuesOrdered() {, +        return true;, +    }, +, +    @Override, +    public FD load(AtomicReaderContext context) {, +        try {, +            return cache.load(context, this);, +        } catch (Throwable e) {, +            if (e instanceof ElasticSearchException) {, +                throw (ElasticSearchException) e;, +            } else {, +                throw new ElasticSearchException(e.getMessage(), e);, +            }, +        }, +    }, +, +    @Override, +    public XFieldComparatorSource comparatorSource(@Nullable Object missingValue, SortMode sortMode) {, +        // TODO support "missingValue" for sortMissingValue options here..., +        return new BytesRefFieldComparatorSource(this, sortMode);, +    }, +    , +    protected TermsEnum filter(Terms terms, AtomicReader reader) throws IOException {, +        TermsEnum iterator = terms.iterator(null);, +        if (iterator == null) {, +            return null;, +        }, +        if (iterator != null && frequency != null) {, +            iterator = FrequencyFilter.filter(iterator, terms, reader, frequency);, +        }, +        , +        if (iterator != null && regex != null) {, +            iterator = RegexFilter.filter(iterator, terms, reader, regex);]