[+++ b/rest-api-spec/test/indices.recovery/10_basic.yaml, +  - gte:   { test_1.shards.0.verify_index.check_index_time_in_millis:     0                       }, +  - gte:   { test_1.shards.0.verify_index.total_time_in_millis:           0                       }, +++ b/rest-api-spec/test/indices.recovery/10_basic.yaml, +  - gte:   { test_1.shards.0.verify_index.check_index_time_in_millis:     0                       }, +  - gte:   { test_1.shards.0.verify_index.total_time_in_millis:           0                       }, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                if (translogId.v1() != null && skipInitialTranslogRecovery == false) {, +++ b/rest-api-spec/test/indices.recovery/10_basic.yaml, +  - gte:   { test_1.shards.0.verify_index.check_index_time_in_millis:     0                       }, +  - gte:   { test_1.shards.0.verify_index.total_time_in_millis:           0                       }, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                if (translogId.v1() != null && skipInitialTranslogRecovery == false) {, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                        sb.append("    verify_index    : took [").append(TimeValue.timeValueMillis(recoveryState.getVerifyIndex().time())).append("], check_index ["), +                                .append(timeValueMillis(recoveryState.getVerifyIndex().checkIndexTime())).append("]\n");, +++ b/rest-api-spec/test/indices.recovery/10_basic.yaml, +  - gte:   { test_1.shards.0.verify_index.check_index_time_in_millis:     0                       }, +  - gte:   { test_1.shards.0.verify_index.total_time_in_millis:           0                       }, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                if (translogId.v1() != null && skipInitialTranslogRecovery == false) {, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                        sb.append("    verify_index    : took [").append(TimeValue.timeValueMillis(recoveryState.getVerifyIndex().time())).append("], check_index ["), +                                .append(timeValueMillis(recoveryState.getVerifyIndex().checkIndexTime())).append("]\n");, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        recoveryState.setStage(RecoveryState.Stage.VERIFY_INDEX);, +, +        recoveryState.setStage(RecoveryState.Stage.TRANSLOG);, +        recoveryState.getVerifyIndex().checkIndexTime(Math.max(0, System.currentTimeMillis() - time));, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/rest-api-spec/test/indices.recovery/10_basic.yaml, +  - gte:   { test_1.shards.0.verify_index.check_index_time_in_millis:     0                       }, +  - gte:   { test_1.shards.0.verify_index.total_time_in_millis:           0                       }, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                if (translogId.v1() != null && skipInitialTranslogRecovery == false) {, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                        sb.append("    verify_index    : took [").append(TimeValue.timeValueMillis(recoveryState.getVerifyIndex().time())).append("], check_index ["), +                                .append(timeValueMillis(recoveryState.getVerifyIndex().checkIndexTime())).append("]\n");, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        recoveryState.setStage(RecoveryState.Stage.VERIFY_INDEX);, +, +        recoveryState.setStage(RecoveryState.Stage.TRANSLOG);, +        recoveryState.getVerifyIndex().checkIndexTime(Math.max(0, System.currentTimeMillis() - time));, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.MapperAnalyzer;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.Uid;, +++ b/rest-api-spec/test/indices.recovery/10_basic.yaml, +  - gte:   { test_1.shards.0.verify_index.check_index_time_in_millis:     0                       }, +  - gte:   { test_1.shards.0.verify_index.total_time_in_millis:           0                       }, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                if (translogId.v1() != null && skipInitialTranslogRecovery == false) {, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                        sb.append("    verify_index    : took [").append(TimeValue.timeValueMillis(recoveryState.getVerifyIndex().time())).append("], check_index ["), +                                .append(timeValueMillis(recoveryState.getVerifyIndex().checkIndexTime())).append("]\n");, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        recoveryState.setStage(RecoveryState.Stage.VERIFY_INDEX);, +, +        recoveryState.setStage(RecoveryState.Stage.TRANSLOG);, +        recoveryState.getVerifyIndex().checkIndexTime(Math.max(0, System.currentTimeMillis() - time));, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {, +++ b/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.MapperAnalyzer;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.Uid;, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +        /** potentially running check index */, +        VERIFY_INDEX((byte) 2),, +        /**  starting up the engine, replaying the translog */, +    private final VerifyIndex verifyIndex = new VerifyIndex();, +                getVerifyIndex().reset();, +            case VERIFY_INDEX:, +                getVerifyIndex().start();, +                validateAndSetStage(Stage.VERIFY_INDEX, stage);, +                getVerifyIndex().stop();, +    public VerifyIndex getVerifyIndex() {, +        return this.verifyIndex;, +        verifyIndex.readFrom(in);, +        verifyIndex.writeTo(out);, +        builder.startObject(Fields.VERIFY_INDEX);, +        verifyIndex.toXContent(builder, params);, +        static final XContentBuilderString VERIFY_INDEX = new XContentBuilderString("verify_index");, +    public static class VerifyIndex extends Timer implements ToXContent, Streamable {, +++ b/rest-api-spec/test/indices.recovery/10_basic.yaml, +  - gte:   { test_1.shards.0.verify_index.check_index_time_in_millis:     0                       }, +  - gte:   { test_1.shards.0.verify_index.total_time_in_millis:           0                       }, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                if (translogId.v1() != null && skipInitialTranslogRecovery == false) {, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                        sb.append("    verify_index    : took [").append(TimeValue.timeValueMillis(recoveryState.getVerifyIndex().time())).append("], check_index ["), +                                .append(timeValueMillis(recoveryState.getVerifyIndex().checkIndexTime())).append("]\n");, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        recoveryState.setStage(RecoveryState.Stage.VERIFY_INDEX);, +, +        recoveryState.setStage(RecoveryState.Stage.TRANSLOG);, +        recoveryState.getVerifyIndex().checkIndexTime(Math.max(0, System.currentTimeMillis() - time));, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(mapperService, mapperAnalyzer, queryParserService, indexAliasesService, indexCache) {]