[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.UUIDs;, +                networkModule.getTransportInterceptor(),, +                boundTransportAddress -> DiscoveryNode.createLocal(settings, new TransportAddress(TransportAddress.META_ADDRESS, 0),, +                    UUIDs.randomBase64UUID()), null);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.UUIDs;, +                networkModule.getTransportInterceptor(),, +                boundTransportAddress -> DiscoveryNode.createLocal(settings, new TransportAddress(TransportAddress.META_ADDRESS, 0),, +                    UUIDs.randomBase64UUID()), null);, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.UUIDs;, +                networkModule.getTransportInterceptor(),, +                boundTransportAddress -> DiscoveryNode.createLocal(settings, new TransportAddress(TransportAddress.META_ADDRESS, 0),, +                    UUIDs.randomBase64UUID()), null);, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +    private final Supplier<DiscoveryNode> localNodeSupplier;, +                          ClusterSettings clusterSettings, ThreadPool threadPool, Supplier<DiscoveryNode> localNodeSupplier) {, +        this.localNodeSupplier = localNodeSupplier;, +        DiscoveryNode localNode = localNodeSupplier.get();, +        assert localNode != null;, +        updateState(state -> {, +            assert state.nodes().getLocalNodeId() == null : "local node is already set";, +            DiscoveryNodes nodes = DiscoveryNodes.builder(state.nodes()).add(localNode).localNodeId(localNode.getId()).build();, +            return ClusterState.builder(state).nodes(nodes).blocks(initialBlocks).build();, +        });, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.UUIDs;, +                networkModule.getTransportInterceptor(),, +                boundTransportAddress -> DiscoveryNode.createLocal(settings, new TransportAddress(TransportAddress.META_ADDRESS, 0),, +                    UUIDs.randomBase64UUID()), null);, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +    private final Supplier<DiscoveryNode> localNodeSupplier;, +                          ClusterSettings clusterSettings, ThreadPool threadPool, Supplier<DiscoveryNode> localNodeSupplier) {, +        this.localNodeSupplier = localNodeSupplier;, +        DiscoveryNode localNode = localNodeSupplier.get();, +        assert localNode != null;, +        updateState(state -> {, +            assert state.nodes().getLocalNodeId() == null : "local node is already set";, +            DiscoveryNodes nodes = DiscoveryNodes.builder(state.nodes()).add(localNode).localNodeId(localNode.getId()).build();, +            return ClusterState.builder(state).nodes(nodes).blocks(initialBlocks).build();, +        });, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.apache.lucene.util.SetOnce;, +    private final LocalNodeFactory localNodeFactory;, +            localNodeFactory = new LocalNodeFactory(settings, nodeEnvironment.nodeId());, +, +            final ClusterService clusterService = new ClusterService(settings, settingsModule.getClusterSettings(), threadPool,, +                localNodeFactory::getNode);, +                networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings());, +                                                   TransportInterceptor interceptor,, +                                                   Function<BoundTransportAddress, DiscoveryNode> localNodeFactory,, +                                                   ClusterSettings clusterSettings) {, +        return new TransportService(settings, transport, threadPool, interceptor, localNodeFactory, clusterSettings);, +        assert localNodeFactory.getNode() != null;, +        assert transportService.getLocalNode().equals(localNodeFactory.getNode()), +            : "transportService has a different local node than the factory provided";, +        assert clusterService.localNode().equals(localNodeFactory.getNode()), +            : "clusterService has a different local node than the factory provided";, +, +    private static class LocalNodeFactory implements Function<BoundTransportAddress, DiscoveryNode> {, +        private final SetOnce<DiscoveryNode> localNode = new SetOnce<>();, +        private final String persistentNodeId;, +        private final Settings settings;, +, +        private LocalNodeFactory(Settings settings, String persistentNodeId) {, +            this.persistentNodeId = persistentNodeId;, +            this.settings = settings;, +        }, +, +        @Override, +        public DiscoveryNode apply(BoundTransportAddress boundTransportAddress) {, +            localNode.set(DiscoveryNode.createLocal(settings, boundTransportAddress.publishAddress(), persistentNodeId));, +            return localNode.get();, +        }, +, +        DiscoveryNode getNode() {, +            assert localNode.get() != null;, +            return localNode.get();, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.UUIDs;, +                networkModule.getTransportInterceptor(),, +                boundTransportAddress -> DiscoveryNode.createLocal(settings, new TransportAddress(TransportAddress.META_ADDRESS, 0),, +                    UUIDs.randomBase64UUID()), null);, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +    private final Supplier<DiscoveryNode> localNodeSupplier;, +                          ClusterSettings clusterSettings, ThreadPool threadPool, Supplier<DiscoveryNode> localNodeSupplier) {, +        this.localNodeSupplier = localNodeSupplier;, +        DiscoveryNode localNode = localNodeSupplier.get();, +        assert localNode != null;, +        updateState(state -> {, +            assert state.nodes().getLocalNodeId() == null : "local node is already set";, +            DiscoveryNodes nodes = DiscoveryNodes.builder(state.nodes()).add(localNode).localNodeId(localNode.getId()).build();, +            return ClusterState.builder(state).nodes(nodes).blocks(initialBlocks).build();]