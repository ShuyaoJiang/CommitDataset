[+++ b/.idea/modules/plugin-transport-thrift.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.elasticsearch/es-libthrift/jars/es-libthrift-0.6.1.jar!/" />, +++ b/.idea/modules/plugin-transport-thrift.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.elasticsearch/es-libthrift/jars/es-libthrift-0.6.1.jar!/" />, +++ b/plugins/transport/thrift/build.gradle, +    compile 'org.elasticsearch:es-libthrift:0.6.1', +    distLib("org.elasticsearch:es-libthrift:0.6.1") { transitive = false }, +++ b/.idea/modules/plugin-transport-thrift.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.elasticsearch/es-libthrift/jars/es-libthrift-0.6.1.jar!/" />, +++ b/plugins/transport/thrift/build.gradle, +    compile 'org.elasticsearch:es-libthrift:0.6.1', +    distLib("org.elasticsearch:es-libthrift:0.6.1") { transitive = false }, +++ b/plugins/transport/thrift/src/main/gen-java/org/elasticsearch/thrift/Method.java, +public enum Method implements org.apache.thrift.TEnum {, +++ b/.idea/modules/plugin-transport-thrift.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.elasticsearch/es-libthrift/jars/es-libthrift-0.6.1.jar!/" />, +++ b/plugins/transport/thrift/build.gradle, +    compile 'org.elasticsearch:es-libthrift:0.6.1', +    distLib("org.elasticsearch:es-libthrift:0.6.1") { transitive = false }, +++ b/plugins/transport/thrift/src/main/gen-java/org/elasticsearch/thrift/Method.java, +public enum Method implements org.apache.thrift.TEnum {, +++ b/plugins/transport/thrift/src/main/gen-java/org/elasticsearch/thrift/Rest.java, +import java.util.Collections;, +import java.util.EnumMap;, +import java.util.EnumSet;, +import java.util.HashMap;, +import java.util.Map;, +        public RestResponse execute(RestRequest request) throws org.apache.thrift.TException;, +        public void execute(RestRequest request, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.execute_call> resultHandler) throws org.apache.thrift.TException;, +    public static class Client implements org.apache.thrift.TServiceClient, Iface {, +        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {, +            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {, +            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {, +        public Client(org.apache.thrift.protocol.TProtocol prot) {, +        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {, +        protected org.apache.thrift.protocol.TProtocol iprot_;, +        protected org.apache.thrift.protocol.TProtocol oprot_;, +        public org.apache.thrift.protocol.TProtocol getInputProtocol() {, +        public org.apache.thrift.protocol.TProtocol getOutputProtocol() {, +        public RestResponse execute(RestRequest request) throws org.apache.thrift.TException {, +        public void send_execute(RestRequest request) throws org.apache.thrift.TException {, +            oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));, +        public RestResponse recv_execute() throws org.apache.thrift.TException {, +            org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();, +            if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {, +                org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);, +                throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "execute failed: out of sequence response");, +            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execute failed: unknown result");, +    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {, +        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {, +            private org.apache.thrift.async.TAsyncClientManager clientManager;, +            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;, +            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {, +            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {, +        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {, +        public void execute(RestRequest request, org.apache.thrift.async.AsyncMethodCallback<execute_call> resultHandler) throws org.apache.thrift.TException {, +            this.currentMethod = method_call;, +        public static class execute_call extends org.apache.thrift.async.TAsyncMethodCall {, +            public execute_call(RestRequest request, org.apache.thrift.async.AsyncMethodCallback<execute_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {, +            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {, +                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute", org.apache.thrift.protocol.TMessageType.CALL, 0));, +            public RestResponse getResult() throws org.apache.thrift.TException {, +                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {, +                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());, +                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);, +    public static class Processor implements org.apache.thrift.TProcessor {, +            public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException;, +        public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {, +            org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();, +                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);, +                org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '" + msg.name + "'");, +                oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));, +            public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {, +                } catch (org.apache.thrift.protocol.TProtocolException e) {, +                    org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());, +                    oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));, +                oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute", org.apache.thrift.protocol.TMessageType.REPLY, seqid));, +    public static class execute_args implements org.apache.thrift.TBase<execute_args, execute_args._Fields>, java.io.Serializable, Cloneable {, +        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execute_args");, +        private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short) 1);, +        public enum _Fields implements org.apache.thrift.TFieldIdEnum {, +        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;, +            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);, +            tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.REQUIRED,, +                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RestRequest.class)));, +            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execute_args.class, metaDataMap);, +         * Returns true if field request is set (has been assigned a value) and false otherwise, +         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise, +                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);, +        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {, +            org.apache.thrift.protocol.TField field;, +                if (field.type == org.apache.thrift.protocol.TType.STOP) {, +                        if (field.type == org.apache.thrift.protocol.TType.STRUCT) {, +                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);, +                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);, +        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {, +        public void validate() throws org.apache.thrift.TException {, +                throw new org.apache.thrift.protocol.TProtocolException("Required field 'request' was not present! Struct: " + toString());, +            }, +        }]