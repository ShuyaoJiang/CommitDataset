[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        this.extraSource = source;, +     * If set, will enable scrolling of the search request for the specified timeout., +     */, +    public SearchRequest scroll(TimeValue keepAlive) {, +        return scroll(new Scroll(keepAlive));, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        this.extraSource = source;, +     * If set, will enable scrolling of the search request for the specified timeout., +     */, +    public SearchRequest scroll(TimeValue keepAlive) {, +        return scroll(new Scroll(keepAlive));, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    @Override public String toString() {, +        return "Search Failure Shard " + shardTarget + ", reason [" + reason + "]";, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        this.extraSource = source;, +     * If set, will enable scrolling of the search request for the specified timeout., +     */, +    public SearchRequest scroll(TimeValue keepAlive) {, +        return scroll(new Scroll(keepAlive));, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    @Override public String toString() {, +        return "Search Failure Shard " + shardTarget + ", reason [" + reason + "]";, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +    public FieldMapper smartNameFieldMapper(String name) {, +        FieldMappers fieldMappers = smartName(name);, +        if (fieldMappers == null) {, +            return null;, +        }, +        return fieldMappers.mapper();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        this.extraSource = source;, +     * If set, will enable scrolling of the search request for the specified timeout., +     */, +    public SearchRequest scroll(TimeValue keepAlive) {, +        return scroll(new Scroll(keepAlive));, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    @Override public String toString() {, +        return "Search Failure Shard " + shardTarget + ", reason [" + reason + "]";, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +    public FieldMapper smartNameFieldMapper(String name) {, +        FieldMappers fieldMappers = smartName(name);, +        if (fieldMappers == null) {, +            return null;, +        }, +        return fieldMappers.mapper();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java, +        SearchRequest searchRequest = new SearchRequest(indices);, +        // get the content, and put it in the body, +        if (request.hasContent()) {, +            searchRequest.source(request.contentAsBytes());, +        }, +        // add extra source based on the request parameters, +        searchRequest.extraSource(parseSearchSource(request));, +        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +        if (queryString != null) {, +            searchSourceBuilder.query(queryBuilder);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        this.extraSource = source;, +     * If set, will enable scrolling of the search request for the specified timeout., +     */, +    public SearchRequest scroll(TimeValue keepAlive) {, +        return scroll(new Scroll(keepAlive));, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    @Override public String toString() {, +        return "Search Failure Shard " + shardTarget + ", reason [" + reason + "]";, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +    public FieldMapper smartNameFieldMapper(String name) {, +        FieldMappers fieldMappers = smartName(name);, +        if (fieldMappers == null) {, +            return null;]