[+++ b/docs/reference/sql/functions/aggs.asciidoc, +In case of `COUNT(*)` or `COUNT(<literal>)`, _all_ values are considered (including `null` or missing ones)., +, +In case of `COUNT(<field_name>)` `null` values are not considered., +, +, +, +[[sql-functions-aggs-count-all]], +===== `COUNT(ALL)`, +, +.Synopsis:, +[source, sql], +--------------------------------------------------, +COUNT(ALL field_name<1>), +--------------------------------------------------, +, +*Input*:, +, +<1> a field name, +, +*Output*: numeric value, +, +.Description:, +, +Returns the total number (count) of all _non-null_ input values. `COUNT(<field_name>)` and `COUNT(ALL <field_name>)` are equivalent., +, +["source","sql",subs="attributes,macros"], +--------------------------------------------------, +include-tagged::{sql-specs}/docs.csv-spec[aggCountAll], +--------------------------------------------------, +, +, +Returns the total number of _distinct non-null_ values in input values., +++ b/docs/reference/sql/functions/aggs.asciidoc, +In case of `COUNT(*)` or `COUNT(<literal>)`, _all_ values are considered (including `null` or missing ones)., +, +In case of `COUNT(<field_name>)` `null` values are not considered., +, +, +, +[[sql-functions-aggs-count-all]], +===== `COUNT(ALL)`, +, +.Synopsis:, +[source, sql], +--------------------------------------------------, +COUNT(ALL field_name<1>), +--------------------------------------------------, +, +*Input*:, +, +<1> a field name, +, +*Output*: numeric value, +, +.Description:, +, +Returns the total number (count) of all _non-null_ input values. `COUNT(<field_name>)` and `COUNT(ALL <field_name>)` are equivalent., +, +["source","sql",subs="attributes,macros"], +--------------------------------------------------, +include-tagged::{sql-specs}/docs.csv-spec[aggCountAll], +--------------------------------------------------, +, +, +Returns the total number of _distinct non-null_ values in input values., +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +, +countAll, +schema::all_names:l|c:l, +SELECT COUNT(ALL first_name) all_names, COUNT(*) c FROM test_emp;, +, +   all_names   |       c, +---------------+---------------, +90             |100, +;, +, +countAllCountTypesWithHaving, +schema::ln:l|dln:l|fn:l|dfn:l|ccc:l, +SELECT COUNT(last_name) ln, COUNT(distinct last_name) dln, COUNT(first_name) fn, COUNT(distinct first_name) dfn, COUNT(*) ccc FROM test_emp GROUP BY gender HAVING dln>5 AND ln>32 AND dfn>1 AND fn>1 AND ccc>5;, +, +      ln       |     dln     |      fn       |     dfn    |      ccc, +---------------+-------------+---------------+------------+-------------, +33             |32           |32             |32          |33, +57             |54           |48             |48          |57, +;, +, +aggCountEqualityFalse, +schema::areEqual:b|ln:l|dln:l, +SELECT COUNT(last_name)=COUNT(DISTINCT last_name) AS areEqual, COUNT(last_name) ln, COUNT(DISTINCT last_name) dln FROM test_emp;, +, +   areEqual    |      ln       |      dln, +---------------+---------------+---------------, +false          |100            |96, +;, +, +aggCountEqualityTrue, +schema::areEqual:b|fn:l|dfn:l, +SELECT COUNT(first_name)=COUNT(DISTINCT first_name) AS areEqual, COUNT(first_name) fn, COUNT(DISTINCT first_name) dfn FROM test_emp;, +]