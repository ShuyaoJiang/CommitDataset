[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +        if (deleteJobRequest.getForce() != null) {, +            params.putParam("force", Boolean.toString(deleteJobRequest.getForce()));, +        }, +        if (deleteJobRequest.getWaitForCompletion() != null) {, +            params.putParam("wait_for_completion", Boolean.toString(deleteJobRequest.getWaitForCompletion()));, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +        if (deleteJobRequest.getForce() != null) {, +            params.putParam("force", Boolean.toString(deleteJobRequest.getForce()));, +        }, +        if (deleteJobRequest.getWaitForCompletion() != null) {, +            params.putParam("wait_for_completion", Boolean.toString(deleteJobRequest.getWaitForCompletion()));, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.DeleteJobResponse;, +     * @return The action response which contains the acknowledgement or the task id depending on whether the action was set to wait for, +     * completion, +    public DeleteJobResponse deleteJob(DeleteJobRequest request, RequestOptions options) throws IOException {, +            DeleteJobResponse::fromXContent,, +    public void deleteJobAsync(DeleteJobRequest request, RequestOptions options, ActionListener<DeleteJobResponse> listener) {, +            DeleteJobResponse::fromXContent,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +        if (deleteJobRequest.getForce() != null) {, +            params.putParam("force", Boolean.toString(deleteJobRequest.getForce()));, +        }, +        if (deleteJobRequest.getWaitForCompletion() != null) {, +            params.putParam("wait_for_completion", Boolean.toString(deleteJobRequest.getWaitForCompletion()));, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.DeleteJobResponse;, +     * @return The action response which contains the acknowledgement or the task id depending on whether the action was set to wait for, +     * completion, +    public DeleteJobResponse deleteJob(DeleteJobRequest request, RequestOptions options) throws IOException {, +            DeleteJobResponse::fromXContent,, +    public void deleteJobAsync(DeleteJobRequest request, RequestOptions options, ActionListener<DeleteJobResponse> listener) {, +            DeleteJobResponse::fromXContent,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteJobRequest.java, +    private Boolean force;, +    private Boolean waitForCompletion;, +    public Boolean getForce() {, +    public void setForce(Boolean force) {, +    public Boolean getWaitForCompletion() {, +        return waitForCompletion;, +    }, +, +    /**, +     * Set whether this request should wait until the operation has completed before returning, +     * @param waitForCompletion When {@code true} the call will wait for the job deletion to complete., +     *                          Otherwise, the deletion will be executed asynchronously and the response, +     *                          will contain the task id., +     */, +    public void setWaitForCompletion(Boolean waitForCompletion) {, +        this.waitForCompletion = waitForCompletion;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +        if (deleteJobRequest.getForce() != null) {, +            params.putParam("force", Boolean.toString(deleteJobRequest.getForce()));, +        }, +        if (deleteJobRequest.getWaitForCompletion() != null) {, +            params.putParam("wait_for_completion", Boolean.toString(deleteJobRequest.getWaitForCompletion()));, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.DeleteJobResponse;, +     * @return The action response which contains the acknowledgement or the task id depending on whether the action was set to wait for, +     * completion, +    public DeleteJobResponse deleteJob(DeleteJobRequest request, RequestOptions options) throws IOException {, +            DeleteJobResponse::fromXContent,, +    public void deleteJobAsync(DeleteJobRequest request, RequestOptions options, ActionListener<DeleteJobResponse> listener) {, +            DeleteJobResponse::fromXContent,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteJobRequest.java, +    private Boolean force;, +    private Boolean waitForCompletion;, +    public Boolean getForce() {, +    public void setForce(Boolean force) {, +    public Boolean getWaitForCompletion() {, +        return waitForCompletion;, +    }, +, +    /**, +     * Set whether this request should wait until the operation has completed before returning, +     * @param waitForCompletion When {@code true} the call will wait for the job deletion to complete., +     *                          Otherwise, the deletion will be executed asynchronously and the response, +     *                          will contain the task id., +     */, +    public void setWaitForCompletion(Boolean waitForCompletion) {, +        this.waitForCompletion = waitForCompletion;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteJobResponse.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]