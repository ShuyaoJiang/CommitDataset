[+++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +            final Level level = ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.get(settings);, +            Loggers.setLevel(ESLoggerFactory.getRootLogger(), level);, +            Loggers.setLevel(ESLoggerFactory.getLogger(key.substring("logger.".length())), level);, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +            final Level level = ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.get(settings);, +            Loggers.setLevel(ESLoggerFactory.getRootLogger(), level);, +            Loggers.setLevel(ESLoggerFactory.getLogger(key.substring("logger.".length())), level);, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +import java.util.Collection;, +import static javax.security.auth.login.Configuration.getConfiguration;, +        if (!LogManager.ROOT_LOGGER_NAME.equals(logger.getName())) {, +            final LoggerContext ctx = LoggerContext.getContext(false);, +            final Configuration config = ctx.getConfiguration();, +            final LoggerConfig loggerConfig = config.getLoggerConfig(logger.getName());, +, +        // we have to descend the hierarchy, +        final LoggerContext ctx = LoggerContext.getContext(false);, +        for (final LoggerConfig loggerConfig : ctx.getConfiguration().getLoggers().values()) {, +            if (LogManager.ROOT_LOGGER_NAME.equals(logger.getName()) || loggerConfig.getName().startsWith(logger.getName() + ".")) {, +                Configurator.setLevel(loggerConfig.getName(), level);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +            final Level level = ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.get(settings);, +            Loggers.setLevel(ESLoggerFactory.getRootLogger(), level);, +            Loggers.setLevel(ESLoggerFactory.getLogger(key.substring("logger.".length())), level);, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +import java.util.Collection;, +import static javax.security.auth.login.Configuration.getConfiguration;, +        if (!LogManager.ROOT_LOGGER_NAME.equals(logger.getName())) {, +            final LoggerContext ctx = LoggerContext.getContext(false);, +            final Configuration config = ctx.getConfiguration();, +            final LoggerConfig loggerConfig = config.getLoggerConfig(logger.getName());, +, +        // we have to descend the hierarchy, +        final LoggerContext ctx = LoggerContext.getContext(false);, +        for (final LoggerConfig loggerConfig : ctx.getConfiguration().getLoggers().values()) {, +            if (LogManager.ROOT_LOGGER_NAME.equals(logger.getName()) || loggerConfig.getName().startsWith(logger.getName() + ".")) {, +                Configurator.setLevel(loggerConfig.getName(), level);, +            }, +        }, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerConfigurationTests.java, +        final String loggerName = "test";, +        final String loggerName = "test_resolve_order";, +    public void testHierarchy() throws Exception {, +        final Path configDir = getDataPath("hierarchy");, +        final Settings settings = Settings.builder(), +                .put(Environment.PATH_CONF_SETTING.getKey(), configDir.toAbsolutePath()), +                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()), +                .build();, +        final Environment environment = new Environment(settings);, +        LogConfigurator.configure(environment, true);, +, +        assertThat(ESLoggerFactory.getLogger("x").getLevel(), equalTo(Level.TRACE));, +        assertThat(ESLoggerFactory.getLogger("x.y").getLevel(), equalTo(Level.DEBUG));, +, +        final Level level = randomFrom(Level.TRACE, Level.DEBUG, Level.INFO, Level.WARN, Level.ERROR);, +        Loggers.setLevel(ESLoggerFactory.getLogger("x"), level);, +, +        assertThat(ESLoggerFactory.getLogger("x").getLevel(), equalTo(level));, +        assertThat(ESLoggerFactory.getLogger("x.y").getLevel(), equalTo(level));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +            final Level level = ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.get(settings);, +            Loggers.setLevel(ESLoggerFactory.getRootLogger(), level);, +            Loggers.setLevel(ESLoggerFactory.getLogger(key.substring("logger.".length())), level);, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +import java.util.Collection;, +import static javax.security.auth.login.Configuration.getConfiguration;, +        if (!LogManager.ROOT_LOGGER_NAME.equals(logger.getName())) {, +            final LoggerContext ctx = LoggerContext.getContext(false);, +            final Configuration config = ctx.getConfiguration();, +            final LoggerConfig loggerConfig = config.getLoggerConfig(logger.getName());, +, +        // we have to descend the hierarchy, +        final LoggerContext ctx = LoggerContext.getContext(false);, +        for (final LoggerConfig loggerConfig : ctx.getConfiguration().getLoggers().values()) {, +            if (LogManager.ROOT_LOGGER_NAME.equals(logger.getName()) || loggerConfig.getName().startsWith(logger.getName() + ".")) {, +                Configurator.setLevel(loggerConfig.getName(), level);, +            }, +        }, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerConfigurationTests.java, +        final String loggerName = "test";, +        final String loggerName = "test_resolve_order";, +    public void testHierarchy() throws Exception {, +        final Path configDir = getDataPath("hierarchy");, +        final Settings settings = Settings.builder(), +                .put(Environment.PATH_CONF_SETTING.getKey(), configDir.toAbsolutePath()), +                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()), +                .build();, +        final Environment environment = new Environment(settings);, +        LogConfigurator.configure(environment, true);, +, +        assertThat(ESLoggerFactory.getLogger("x").getLevel(), equalTo(Level.TRACE));, +        assertThat(ESLoggerFactory.getLogger("x.y").getLevel(), equalTo(Level.DEBUG));, +, +        final Level level = randomFrom(Level.TRACE, Level.DEBUG, Level.INFO, Level.WARN, Level.ERROR);, +        Loggers.setLevel(ESLoggerFactory.getLogger("x"), level);]