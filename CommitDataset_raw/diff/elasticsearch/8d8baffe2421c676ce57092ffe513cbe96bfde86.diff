[+++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +            components.addAll(security.createComponents(client, threadPool, clusterService, resourceWatcherService,, +        components.addAll(upgrade.createComponents(client, clusterService, threadPool, resourceWatcherService,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +            components.addAll(security.createComponents(client, threadPool, clusterService, resourceWatcherService,, +        components.addAll(upgrade.createComponents(client, clusterService, threadPool, resourceWatcherService,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/InternalClient.java, +import org.elasticsearch.xpack.security.user.User;, +    private final User user;, +        this(settings, threadPool, in, XPackUser.INSTANCE);, +    }, +, +    InternalClient(Settings settings, ThreadPool threadPool, Client in, User user) {, +        this.user = user;, +            Authentication authentication = new Authentication(user,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +            components.addAll(security.createComponents(client, threadPool, clusterService, resourceWatcherService,, +        components.addAll(upgrade.createComponents(client, clusterService, threadPool, resourceWatcherService,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/InternalClient.java, +import org.elasticsearch.xpack.security.user.User;, +    private final User user;, +        this(settings, threadPool, in, XPackUser.INSTANCE);, +    }, +, +    InternalClient(Settings settings, ThreadPool threadPool, Client in, User user) {, +        this.user = user;, +            Authentication authentication = new Authentication(user,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/InternalSecurityClient.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.security;, +, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.security.user.XPackSecurityUser;, +, +/**, + * A special filter client for internal usage by security to modify the security index., + *, + * The {@link XPackSecurityUser} user is added to the execution context before each action is executed., + */, +public class InternalSecurityClient extends InternalClient {, +, +    public InternalSecurityClient(Settings settings, ThreadPool threadPool, Client in) {, +        super(settings, threadPool, in, XPackSecurityUser.INSTANCE);, +    }, +}, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +            components.addAll(security.createComponents(client, threadPool, clusterService, resourceWatcherService,, +        components.addAll(upgrade.createComponents(client, clusterService, threadPool, resourceWatcherService,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/InternalClient.java, +import org.elasticsearch.xpack.security.user.User;, +    private final User user;, +        this(settings, threadPool, in, XPackUser.INSTANCE);, +    }, +, +    InternalClient(Settings settings, ThreadPool threadPool, Client in, User user) {, +        this.user = user;, +            Authentication authentication = new Authentication(user,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/InternalSecurityClient.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.security;, +, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.security.user.XPackSecurityUser;, +, +/**, + * A special filter client for internal usage by security to modify the security index., + *, + * The {@link XPackSecurityUser} user is added to the execution context before each action is executed., + */, +public class InternalSecurityClient extends InternalClient {, +, +    public InternalSecurityClient(Settings settings, ThreadPool threadPool, Client in) {, +        super(settings, threadPool, in, XPackSecurityUser.INSTANCE);, +    }, +}, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.client.Client;, +    public Collection<Object> createComponents(Client nodeClient, ThreadPool threadPool, ClusterService clusterService,, +        final InternalSecurityClient client = new InternalSecurityClient(settings, threadPool, nodeClient);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +            components.addAll(security.createComponents(client, threadPool, clusterService, resourceWatcherService,, +        components.addAll(upgrade.createComponents(client, clusterService, threadPool, resourceWatcherService,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/InternalClient.java, +import org.elasticsearch.xpack.security.user.User;, +    private final User user;, +        this(settings, threadPool, in, XPackUser.INSTANCE);, +    }, +]