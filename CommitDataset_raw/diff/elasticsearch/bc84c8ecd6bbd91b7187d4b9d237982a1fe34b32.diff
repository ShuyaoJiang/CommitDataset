[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +import java.lang.reflect.InvocationTargetException;, +            Constructor<?> constructor = compile(compiler, scriptName, scriptSource, params);, +            boolean needsScore;, +, +            try {, +                GenericElasticsearchScript newInstance = (GenericElasticsearchScript)constructor.newInstance();, +                needsScore = newInstance.needs_score();, +            } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {, +                throw new IllegalArgumentException("internal error");, +            }, +                    try {, +                        // a new instance is required for the class bindings model to work correctly, +                        GenericElasticsearchScript newInstance = (GenericElasticsearchScript)constructor.newInstance();, +                        return new ScriptImpl(newInstance, p, lookup, context);, +                    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {, +                        throw new IllegalArgumentException("internal error");, +                    }, +                    return needsScore;, +            Constructor<?> constructor = compile(compiler, scriptName, scriptSource, params);, +            ExecutableScript.Factory factory = new ExecutableScript.Factory() {, +                @Override, +                public ExecutableScript newInstance(Map<String, Object> params) {, +                    try {, +                        // a new instance is required for the class bindings model to work correctly, +                        GenericElasticsearchScript newInstance = (GenericElasticsearchScript)constructor.newInstance();, +                        return new ScriptImpl(newInstance, params, null, null);, +                    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {, +                        throw new IllegalArgumentException("internal error");, +                    }, +                }, +            };, +, +    Constructor<?> compile(Compiler compiler, String scriptName, String source, Map<String, String> params) {, +            return AccessController.doPrivileged(new PrivilegedAction<Constructor<?>>() {, +                public Constructor<?> run() {, +                        return constructor;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +import java.lang.reflect.InvocationTargetException;, +            Constructor<?> constructor = compile(compiler, scriptName, scriptSource, params);, +            boolean needsScore;, +, +            try {, +                GenericElasticsearchScript newInstance = (GenericElasticsearchScript)constructor.newInstance();, +                needsScore = newInstance.needs_score();, +            } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {, +                throw new IllegalArgumentException("internal error");, +            }, +                    try {, +                        // a new instance is required for the class bindings model to work correctly, +                        GenericElasticsearchScript newInstance = (GenericElasticsearchScript)constructor.newInstance();, +                        return new ScriptImpl(newInstance, p, lookup, context);, +                    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {, +                        throw new IllegalArgumentException("internal error");, +                    }, +                    return needsScore;, +            Constructor<?> constructor = compile(compiler, scriptName, scriptSource, params);, +            ExecutableScript.Factory factory = new ExecutableScript.Factory() {, +                @Override, +                public ExecutableScript newInstance(Map<String, Object> params) {, +                    try {, +                        // a new instance is required for the class bindings model to work correctly, +                        GenericElasticsearchScript newInstance = (GenericElasticsearchScript)constructor.newInstance();, +                        return new ScriptImpl(newInstance, params, null, null);, +                    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {, +                        throw new IllegalArgumentException("internal error");, +                    }, +                }, +            };, +, +    Constructor<?> compile(Compiler compiler, String scriptName, String source, Map<String, String> params) {, +            return AccessController.doPrivileged(new PrivilegedAction<Constructor<?>>() {, +                public Constructor<?> run() {, +                        return constructor;, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/BaseClassTests.java, +    public void testGets() throws Exception {, +        assertEquals(1, ((Gets)scriptEngine.compile(compiler, null, "testInt", emptyMap()).newInstance("s", -1, null)).execute());, +        assertEquals(Collections.emptyMap(),, +                ((Gets)scriptEngine.compile(compiler, null, "testMap", emptyMap()).newInstance("s", -1, null)).execute());, +        assertEquals(Collections.singletonMap("1", "1"), ((Gets)scriptEngine.compile(, +                compiler, null, "testMap", emptyMap()).newInstance("s", -1, Collections.singletonMap("1", "1"))).execute());, +        assertEquals("s", ((Gets)scriptEngine.compile(compiler, null, "testString", emptyMap()).newInstance("s", -1, null)).execute());, +        assertEquals(map, ((Gets)scriptEngine.compile(, +                compiler, null, "testMap.put(testString, testInt); testMap", emptyMap()).newInstance("s", -1, null)).execute());, +    public void testNoArgs() throws Exception {, +        assertEquals(1, ((NoArgs)scriptEngine.compile(compiler, null, "1", emptyMap()).newInstance()).execute());, +        assertEquals("foo", ((NoArgs)scriptEngine.compile(compiler, null, "'foo'", emptyMap()).newInstance()).execute());, +    public void testOneArg() throws Exception {, +        assertEquals(rando, ((OneArg)scriptEngine.compile(compiler, null, "arg", emptyMap()).newInstance()).execute(rando));, +        assertEquals(rando, ((OneArg)scriptEngine.compile(compiler, null, "arg", emptyMap()).newInstance()).execute(rando));, +    public void testArrayArg() throws Exception {, +        assertEquals(rando,, +                ((ArrayArg)scriptEngine.compile(compiler, null, "arg[0]", emptyMap()).newInstance()).execute(new String[] {rando, "foo"}));, +    public void testPrimitiveArrayArg() throws Exception {, +        assertEquals(rando, ((PrimitiveArrayArg)scriptEngine.compile(, +                compiler, null, "arg[0]", emptyMap()).newInstance()).execute(new int[] {rando, 10}));, +    public void testDefArrayArg()throws Exception {, +        assertEquals(rando,, +                ((DefArrayArg)scriptEngine.compile(compiler, null, "arg[0]", emptyMap()).newInstance()).execute(new Object[] {rando, 10}));, +        assertEquals(rando,]