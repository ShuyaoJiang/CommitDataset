[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateCalendarJobAction.java, +                                            JobProvider jobProvider, JobManager jobManager) {, +        jobProvider.updateCalendar(request.getCalendarId(), jobIdsToAdd, jobIdsToRemove,, +                    jobManager.updateProcessOnCalendarChanged(c.getJobIds());, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateCalendarJobAction.java, +                                            JobProvider jobProvider, JobManager jobManager) {, +        jobProvider.updateCalendar(request.getCalendarId(), jobIdsToAdd, jobIdsToRemove,, +                    jobManager.updateProcessOnCalendarChanged(c.getJobIds());, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import java.util.stream.Collectors;, +        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState);, +, +        List<String> existingJobsOrGroups =, +                calendarJobIds.stream().filter(mlMetadata::isGroupOrJob).collect(Collectors.toList());, +, +        existingJobsOrGroups.forEach(jobId -> expandedJobIds.addAll(expandJobIds(jobId, true, clusterState)));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateCalendarJobAction.java, +                                            JobProvider jobProvider, JobManager jobManager) {, +        jobProvider.updateCalendar(request.getCalendarId(), jobIdsToAdd, jobIdsToRemove,, +                    jobManager.updateProcessOnCalendarChanged(c.getJobIds());, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import java.util.stream.Collectors;, +        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState);, +, +        List<String> existingJobsOrGroups =, +                calendarJobIds.stream().filter(mlMetadata::isGroupOrJob).collect(Collectors.toList());, +, +        existingJobsOrGroups.forEach(jobId -> expandedJobIds.addAll(expandJobIds(jobId, true, clusterState)));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +    public void updateCalendar(String calendarId, Set<String> jobIdsToAdd, Set<String> jobIdsToRemove,, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateCalendarJobAction.java, +                                            JobProvider jobProvider, JobManager jobManager) {, +        jobProvider.updateCalendar(request.getCalendarId(), jobIdsToAdd, jobIdsToRemove,, +                    jobManager.updateProcessOnCalendarChanged(c.getJobIds());, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import java.util.stream.Collectors;, +        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState);, +, +        List<String> existingJobsOrGroups =, +                calendarJobIds.stream().filter(mlMetadata::isGroupOrJob).collect(Collectors.toList());, +, +        existingJobsOrGroups.forEach(jobId -> expandedJobIds.addAll(expandJobIds(jobId, true, clusterState)));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +    public void updateCalendar(String calendarId, Set<String> jobIdsToAdd, Set<String> jobIdsToRemove,, +++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/JobProviderIT.java, +        jobProvider.updateCalendar(calendarId, idsToAdd, idsToRemove,, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateCalendarJobAction.java, +                                            JobProvider jobProvider, JobManager jobManager) {, +        jobProvider.updateCalendar(request.getCalendarId(), jobIdsToAdd, jobIdsToRemove,, +                    jobManager.updateProcessOnCalendarChanged(c.getJobIds());, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import java.util.stream.Collectors;, +        MlMetadata mlMetadata = MlMetadata.getMlMetadata(clusterState);, +, +        List<String> existingJobsOrGroups =, +                calendarJobIds.stream().filter(mlMetadata::isGroupOrJob).collect(Collectors.toList());, +, +        existingJobsOrGroups.forEach(jobId -> expandedJobIds.addAll(expandJobIds(jobId, true, clusterState)));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +    public void updateCalendar(String calendarId, Set<String> jobIdsToAdd, Set<String> jobIdsToRemove,, +++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/JobProviderIT.java, +        jobProvider.updateCalendar(calendarId, idsToAdd, idsToRemove,, +++ b/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/calendar_crud.yml, +, +---, +"Test calendar actions with new job group":, +  - do:, +      xpack.ml.put_job:, +        job_id: calendar-job, +        body:  >, +          {, +            "analysis_config" : {, +                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}], +            },, +            "data_description" : {, +            }, +          }, +, +  - do:, +      xpack.ml.put_calendar:, +        calendar_id: "cal_with_new_job_group", +        body:  >, +          {, +            "job_ids": ["calendar-job", "new-job-group"], +          }, +, +  - do:, +      xpack.ml.get_calendars:, +        calendar_id: "cal_with_new_job_group", +  - match: { count: 1 }, +  - match:, +      calendars.0:, +        calendar_id: "cal_with_new_job_group", +        job_ids: ["calendar-job", "new-job-group"], +, +  - do:, +      xpack.ml.post_calendar_events:, +        calendar_id: "cal_with_new_job_group", +        body: >, +          {]