[+++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +import org.elasticsearch.common.io.stream.Writeable;, +import java.util.Locale;, +    static final ScriptSortBuilder PROTOTYPE = new ScriptSortBuilder(new Script("_na_"), ScriptSortType.STRING);, +    private ScriptSortType type;, +    public ScriptSortBuilder(Script script, ScriptSortType type) {, +    public ScriptSortType type() {, +        ScriptSortType type = null;, +                    type = ScriptSortType.fromString(parser.text());, +        type.writeTo(out);, +        ScriptSortBuilder builder = new ScriptSortBuilder(Script.readScript(in), ScriptSortType.PROTOTYPE.readFrom(in));, +, +    public enum ScriptSortType implements Writeable<ScriptSortType> {, +        /** script sort for a string value **/, +        STRING,, +        /** script sort for a numeric value **/, +        NUMBER;, +, +        static ScriptSortType PROTOTYPE = STRING;, +, +        @Override, +        public void writeTo(final StreamOutput out) throws IOException {, +            out.writeVInt(ordinal());, +        }, +, +        @Override, +        public ScriptSortType readFrom(final StreamInput in) throws IOException {, +            int ordinal = in.readVInt();, +            if (ordinal < 0 || ordinal >= values().length) {, +                throw new IOException("Unknown ScriptSortType ordinal [" + ordinal + "]");, +            }, +            return values()[ordinal];, +        }, +, +        public static ScriptSortType fromString(final String str) {, +            Objects.requireNonNull(str, "input string is null");, +            switch (str.toLowerCase(Locale.ROOT)) {, +                case ("string"):, +                    return ScriptSortType.STRING;, +                case ("number"):, +                    return ScriptSortType.NUMBER;, +                default:, +                    throw new IllegalArgumentException("Unknown ScriptSortType [" + str + "]");, +            }, +        }, +, +        @Override, +        public String toString() {, +            return name().toLowerCase(Locale.ROOT);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +import org.elasticsearch.common.io.stream.Writeable;, +import java.util.Locale;, +    static final ScriptSortBuilder PROTOTYPE = new ScriptSortBuilder(new Script("_na_"), ScriptSortType.STRING);, +    private ScriptSortType type;, +    public ScriptSortBuilder(Script script, ScriptSortType type) {, +    public ScriptSortType type() {, +        ScriptSortType type = null;, +                    type = ScriptSortType.fromString(parser.text());, +        type.writeTo(out);, +        ScriptSortBuilder builder = new ScriptSortBuilder(Script.readScript(in), ScriptSortType.PROTOTYPE.readFrom(in));, +, +    public enum ScriptSortType implements Writeable<ScriptSortType> {, +        /** script sort for a string value **/, +        STRING,, +        /** script sort for a numeric value **/, +        NUMBER;, +, +        static ScriptSortType PROTOTYPE = STRING;, +, +        @Override, +        public void writeTo(final StreamOutput out) throws IOException {, +            out.writeVInt(ordinal());, +        }, +, +        @Override, +        public ScriptSortType readFrom(final StreamInput in) throws IOException {, +            int ordinal = in.readVInt();, +            if (ordinal < 0 || ordinal >= values().length) {, +                throw new IOException("Unknown ScriptSortType ordinal [" + ordinal + "]");, +            }, +            return values()[ordinal];, +        }, +, +        public static ScriptSortType fromString(final String str) {, +            Objects.requireNonNull(str, "input string is null");, +            switch (str.toLowerCase(Locale.ROOT)) {, +                case ("string"):, +                    return ScriptSortType.STRING;, +                case ("number"):, +                    return ScriptSortType.NUMBER;, +                default:, +                    throw new IllegalArgumentException("Unknown ScriptSortType [" + str + "]");, +            }, +        }, +, +        @Override, +        public String toString() {, +            return name().toLowerCase(Locale.ROOT);]