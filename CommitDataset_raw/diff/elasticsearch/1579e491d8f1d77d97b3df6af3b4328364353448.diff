[+++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +            if (Version.indexCreated(indexSettings).onOrAfter(Version.V_2_0_0_beta1) && mapper.type().length() > 255) {, +                throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] is too long; limit is length 255 but was [" + mapper.type().length() + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +            if (Version.indexCreated(indexSettings).onOrAfter(Version.V_2_0_0_beta1) && mapper.type().length() > 255) {, +                throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] is too long; limit is length 255 but was [" + mapper.type().length() + "]");, +            }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import static org.elasticsearch.test.VersionUtils.getFirstVersion;, +import static org.elasticsearch.test.VersionUtils.getPreviousVersion;, +import static org.elasticsearch.test.VersionUtils.randomVersionBetween;, +import static org.hamcrest.CoreMatchers.is;, +, +    @Test, +    public void testThatLongTypeNameIsNotRejectedOnPreElasticsearchVersionTwo() {, +        String index = "text-index";, +        String field = "field";, +        String type = new String(new char[256]).replace("\0", "a");, +, +        CreateIndexResponse response =, +                client(), +                        .admin(), +                        .indices(), +                        .prepareCreate(index), +                        .setSettings(settings(randomVersionBetween(random(), getFirstVersion(), getPreviousVersion(Version.V_2_0_0_beta1)))), +                        .addMapping(type, field, "type=string"), +                        .execute(), +                        .actionGet();, +        assertNotNull(response);, +    }, +, +    @Test, +    public void testTypeNameTooLong() {, +        String index = "text-index";, +        String field = "field";, +        String type = new String(new char[256]).replace("\0", "a");, +, +        expectedException.expect(MapperParsingException.class);, +        expectedException.expect(hasToString(containsString("mapping type name [" + type + "] is too long; limit is length 255 but was [256]")));, +        client(), +                .admin(), +                .indices(), +                .prepareCreate(index), +                .addMapping(type, field, "type=string"), +                .execute(), +                .actionGet();, +    }]