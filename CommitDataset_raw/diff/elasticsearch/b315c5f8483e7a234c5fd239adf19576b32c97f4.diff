[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/FieldNameAnalyzer.java, +import org.apache.lucene.document.Fieldable;, +    @Override public int getOffsetGap(Fieldable field) {, +        return getAnalyzer(field.name()).getOffsetGap(field);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/FieldNameAnalyzer.java, +import org.apache.lucene.document.Fieldable;, +    @Override public int getOffsetGap(Fieldable field) {, +        return getAnalyzer(field.name()).getOffsetGap(field);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.document.Fieldable;, +    class SmartIndexNameSearchAnalyzer extends Analyzer {, +        SmartIndexNameSearchAnalyzer(Analyzer defaultAnalyzer) {, +        @Override public int getPositionIncrementGap(String fieldName) {, +            int dotIndex = fieldName.indexOf('.');, +            if (dotIndex != -1) {, +                String possibleType = fieldName.substring(0, dotIndex);, +                DocumentMapper possibleDocMapper = mappers.get(possibleType);, +                if (possibleDocMapper != null) {, +                    return possibleDocMapper.mappers().searchAnalyzer().getPositionIncrementGap(fieldName);, +                }, +            }, +            FieldMappers mappers = fullNameFieldMappers.get(fieldName);, +            if (mappers != null && mappers.mapper() != null && mappers.mapper().searchAnalyzer() != null) {, +                return mappers.mapper().searchAnalyzer().getPositionIncrementGap(fieldName);, +            }, +, +            mappers = indexNameFieldMappers.get(fieldName);, +            if (mappers != null && mappers.mapper() != null && mappers.mapper().searchAnalyzer() != null) {, +                return mappers.mapper().searchAnalyzer().getPositionIncrementGap(fieldName);, +            }, +            return defaultAnalyzer.getPositionIncrementGap(fieldName);, +        }, +, +        @Override public int getOffsetGap(Fieldable field) {, +            String fieldName = field.name();, +            int dotIndex = fieldName.indexOf('.');, +            if (dotIndex != -1) {, +                String possibleType = fieldName.substring(0, dotIndex);, +                DocumentMapper possibleDocMapper = mappers.get(possibleType);, +                if (possibleDocMapper != null) {, +                    return possibleDocMapper.mappers().searchAnalyzer().getOffsetGap(field);, +                }, +            }, +            FieldMappers mappers = fullNameFieldMappers.get(fieldName);, +            if (mappers != null && mappers.mapper() != null && mappers.mapper().searchAnalyzer() != null) {, +                return mappers.mapper().searchAnalyzer().getOffsetGap(field);, +            }, +, +            mappers = indexNameFieldMappers.get(fieldName);, +            if (mappers != null && mappers.mapper() != null && mappers.mapper().searchAnalyzer() != null) {, +                return mappers.mapper().searchAnalyzer().getOffsetGap(field);, +            }, +            return defaultAnalyzer.getOffsetGap(field);, +        }, +]