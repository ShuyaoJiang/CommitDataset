[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/AbstractFieldMapper.java, +            if (!customBoost()) {, +            }, +    /**, +     * Derived classes can override it to specify that boost value is set by derived classes., +     */, +    protected boolean customBoost() {, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/AbstractFieldMapper.java, +            if (!customBoost()) {, +            }, +    /**, +     * Derived classes can override it to specify that boost value is set by derived classes., +     */, +    protected boolean customBoost() {, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/StringFieldMapper.java, +    @Override protected boolean customBoost() {, +        return true;, +    }, +, +        String value = nullValue;, +        float boost = this.boost;, +        } else {, +            XContentParser parser = context.parser();, +            if (parser.currentToken() == XContentParser.Token.VALUE_NULL) {, +            } else if (parser.currentToken() == XContentParser.Token.START_OBJECT) {, +                XContentParser.Token token;, +                String currentFieldName = null;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentFieldName = parser.currentName();, +                    } else {, +                        if ("value".equals(currentFieldName) || "_value".equals(currentFieldName)) {, +                            value = parser.textOrNull();, +                        } else if ("boost".equals(currentFieldName) || "_boost".equals(currentFieldName)) {, +                            boost = parser.floatValue();, +                        }, +                    }, +                value = parser.textOrNull();, +        Field field = new Field(names.indexName(), false, value, store, index, termVector);, +        field.setBoost(boost);, +        return field;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/AbstractFieldMapper.java, +            if (!customBoost()) {, +            }, +    /**, +     * Derived classes can override it to specify that boost value is set by derived classes., +     */, +    protected boolean customBoost() {, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/StringFieldMapper.java, +    @Override protected boolean customBoost() {, +        return true;, +    }, +, +        String value = nullValue;, +        float boost = this.boost;, +        } else {, +            XContentParser parser = context.parser();, +            if (parser.currentToken() == XContentParser.Token.VALUE_NULL) {, +            } else if (parser.currentToken() == XContentParser.Token.START_OBJECT) {, +                XContentParser.Token token;, +                String currentFieldName = null;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentFieldName = parser.currentName();, +                    } else {, +                        if ("value".equals(currentFieldName) || "_value".equals(currentFieldName)) {, +                            value = parser.textOrNull();, +                        } else if ("boost".equals(currentFieldName) || "_boost".equals(currentFieldName)) {, +                            boost = parser.floatValue();, +                        }, +                    }, +                value = parser.textOrNull();, +        Field field = new Field(names.indexName(), false, value, store, index, termVector);, +        field.setBoost(boost);, +        return field;, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/mapper/xcontent/compound/CompoundTypesTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the]