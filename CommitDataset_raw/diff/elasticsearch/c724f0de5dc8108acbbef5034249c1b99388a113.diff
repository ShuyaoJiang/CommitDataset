[+++ b/docs/reference/modules/scripting.asciidoc, +=== Automatic Script Reloading, +, +added[0.90.6], +, +The `config/scripts` directory is scanned periodically for changes., +New and changed scripts are reloaded and deleted script are removed, +from preloaded scripts cache. The reload frequency can be specified, +using `watcher.interval` setting, which defaults to `60s`., +To disable script reloading completely set `script.auto_reload_enabled`, +to `false`., +, +[float], +++ b/docs/reference/modules/scripting.asciidoc, +=== Automatic Script Reloading, +, +added[0.90.6], +, +The `config/scripts` directory is scanned periodically for changes., +New and changed scripts are reloaded and deleted script are removed, +from preloaded scripts cache. The reload frequency can be specified, +using `watcher.interval` setting, which defaults to `60s`., +To disable script reloading completely set `script.auto_reload_enabled`, +to `false`., +, +[float], +++ b/src/main/java/org/elasticsearch/node/internal/InternalNode.java, +import org.elasticsearch.watcher.ResourceWatcherModule;, +import org.elasticsearch.watcher.ResourceWatcherService;, +        modules.add(new ResourceWatcherModule());, +        injector.getInstance(ResourceWatcherService.class).start();, +        injector.getInstance(ResourceWatcherService.class).stop();, +++ b/docs/reference/modules/scripting.asciidoc, +=== Automatic Script Reloading, +, +added[0.90.6], +, +The `config/scripts` directory is scanned periodically for changes., +New and changed scripts are reloaded and deleted script are removed, +from preloaded scripts cache. The reload frequency can be specified, +using `watcher.interval` setting, which defaults to `60s`., +To disable script reloading completely set `script.auto_reload_enabled`, +to `false`., +, +[float], +++ b/src/main/java/org/elasticsearch/node/internal/InternalNode.java, +import org.elasticsearch.watcher.ResourceWatcherModule;, +import org.elasticsearch.watcher.ResourceWatcherService;, +        modules.add(new ResourceWatcherModule());, +        injector.getInstance(ResourceWatcherService.class).start();, +        injector.getInstance(ResourceWatcherService.class).stop();, +++ b/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.watcher.FileChangesListener;, +import org.elasticsearch.watcher.FileWatcher;, +import org.elasticsearch.watcher.ResourceWatcherService;, +    private final File scriptsDirectory;, +    public ScriptService(Settings settings, Environment env, Set<ScriptEngineService> scriptEngines,, +                         ResourceWatcherService resourceWatcherService) {, +        // add file watcher for static scripts, +        scriptsDirectory = new File(env.configFile(), "scripts");, +        FileWatcher fileWatcher = new FileWatcher(scriptsDirectory);, +        fileWatcher.addListener(new ScriptChangesListener());, +        if (componentSettings.getAsBoolean("auto_reload_enabled", true)) {, +            // automatic reload is enabled - register scripts, +            resourceWatcherService.add(fileWatcher);, +            // automatic reload is disable just load scripts once, +            fileWatcher.init();, +    private class ScriptChangesListener extends FileChangesListener {, +, +        private Tuple<String, String> scriptNameExt(File file) {, +            String scriptPath = scriptsDirectory.toURI().relativize(file.toURI()).getPath();, +            int extIndex = scriptPath.lastIndexOf('.');, +            if (extIndex != -1) {, +                String ext = scriptPath.substring(extIndex + 1);, +                String scriptName = scriptPath.substring(0, extIndex).replace(File.separatorChar, '_');, +                return new Tuple<String, String>(scriptName, ext);, +            } else {, +                return null;, +            }, +        }, +, +        @Override, +        public void onFileInit(File file) {, +            Tuple<String, String> scriptNameExt = scriptNameExt(file);, +            if (scriptNameExt != null) {, +                boolean found = false;, +                for (ScriptEngineService engineService : scriptEngines.values()) {, +                    for (String s : engineService.extensions()) {, +                        if (s.equals(scriptNameExt.v2())) {, +                            found = true;, +                            try {, +                                logger.trace("compiling script file " + file.getAbsolutePath());, +                                String script = Streams.copyToString(new InputStreamReader(new FileInputStream(file), Charsets.UTF_8));, +                                staticCache.put(scriptNameExt.v1(), new CompiledScript(engineService.types()[0], engineService.compile(script)));, +                            } catch (Throwable e) {, +                                logger.warn("failed to load/compile script [{}]", e, scriptNameExt.v1());, +                            }, +                            break;, +                        }]