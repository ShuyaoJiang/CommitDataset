[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/CategorizationAnalyzerConfig.java, + * To summarize, the first option is to specify the name of an out-of-the-box analyzer:, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/CategorizationAnalyzerConfig.java, + * To summarize, the first option is to specify the name of an out-of-the-box analyzer:, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/Job.java, +        public AnalysisConfig getAnalysisConfig() {, +             return analysisConfig;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/CategorizationAnalyzerConfig.java, + * To summarize, the first option is to specify the name of an out-of-the-box analyzer:, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/Job.java, +        public AnalysisConfig getAnalysisConfig() {, +             return analysisConfig;, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.xpack.core.ml.job.config.CategorizationAnalyzerConfig;, +import org.elasticsearch.xpack.ml.job.categorization.CategorizationAnalyzer;, +     * Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)., +     * This validation has to be done server-side; it cannot be done in a client as that won't have loaded the, +     * appropriate analysis modules/plugins., +     * The overall structure can be validated at parse time, but the exact names need to be checked separately,, +     * as plugins that provide the functionality can be installed/uninstalled., +     */, +    static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment), +        throws IOException {, +        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig();, +        if (categorizationAnalyzerConfig != null) {, +            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),, +                analysisRegistry, environment);, +        }, +    }, +, +    /**, +        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/CategorizationAnalyzerConfig.java, + * To summarize, the first option is to specify the name of an out-of-the-box analyzer:, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/Job.java, +        public AnalysisConfig getAnalysisConfig() {, +             return analysisConfig;, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.xpack.core.ml.job.config.CategorizationAnalyzerConfig;, +import org.elasticsearch.xpack.ml.job.categorization.CategorizationAnalyzer;, +     * Validate the char filter/tokenizer/token filter names used in the categorization analyzer config (if any)., +     * This validation has to be done server-side; it cannot be done in a client as that won't have loaded the, +     * appropriate analysis modules/plugins., +     * The overall structure can be validated at parse time, but the exact names need to be checked separately,, +     * as plugins that provide the functionality can be installed/uninstalled., +     */, +    static void validateCategorizationAnalyzer(Job.Builder jobBuilder, AnalysisRegistry analysisRegistry, Environment environment), +        throws IOException {, +        CategorizationAnalyzerConfig categorizationAnalyzerConfig = jobBuilder.getAnalysisConfig().getCategorizationAnalyzerConfig();, +        if (categorizationAnalyzerConfig != null) {, +            CategorizationAnalyzer.verifyConfigBuilder(new CategorizationAnalyzerConfig.Builder(categorizationAnalyzerConfig),, +                analysisRegistry, environment);, +        }, +    }, +, +    /**, +        validateCategorizationAnalyzer(request.getJobBuilder(), analysisRegistry, environment);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/categorization/CategorizationAnalyzer.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.admin.indices.analyze.TransportAnalyzeAction;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.UUIDs;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.analysis.CharFilterFactory;, +import org.elasticsearch.index.analysis.CustomAnalyzer;, +import org.elasticsearch.index.analysis.CustomAnalyzerProvider;, +import org.elasticsearch.index.analysis.TokenFilterFactory;, +import org.elasticsearch.index.analysis.TokenizerFactory;, +import org.elasticsearch.indices.analysis.AnalysisModule;, + *, + * The code in {@link #makeAnalyzer} and the methods it calls is largely copied from {@link TransportAnalyzeAction}., + * Unfortunately there is no easy way to reuse a subset of the <code>_analyze</code> action implementation, as the, + * logic required here is not quite identical to that of {@link TransportAnalyzeAction}, and the required code is, + * hard to partially reuse., + * TODO: consider refactoring ES core to allow more reuse., +        Tuple<Analyzer, Boolean> tuple = makeAnalyzer(categorizationAnalyzerConfig, analysisRegistry, environment);, +, +    /**, +     * Verify that the config builder will build a valid config.  This is not done as part of the basic build, +     * because it verifies that the names of analyzers/tokenizers/filters referenced by the config are, +     * known, and the validity of these names could change over time.  Additionally, it has to be done, +     * server-side rather than client-side, as the client will not have loaded the appropriate analysis, +     * modules/plugins., +     */, +    public static void verifyConfigBuilder(CategorizationAnalyzerConfig.Builder configBuilder, AnalysisRegistry analysisRegistry,, +                                           Environment environment) throws IOException {, +        Tuple<Analyzer, Boolean> tuple = makeAnalyzer(configBuilder.build(), analysisRegistry, environment);, +        if (tuple.v2()) {, +            tuple.v1().close();, +        }, +    }, +, +    /**, +     * Convert a config to an {@link Analyzer}.  This may be a global analyzer or a newly created custom analyzer., +     * In the case of a global analyzer the caller must NOT close it when they have finished with it.  In the case of, +     * a newly created custom analyzer the caller is responsible for closing it., +     * @return The first tuple member is the {@link Analyzer}; the second indicates whether the caller is responsible, +     *         for closing it., +     */]