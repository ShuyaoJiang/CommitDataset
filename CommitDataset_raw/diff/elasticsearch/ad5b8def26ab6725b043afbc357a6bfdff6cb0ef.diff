[+++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteResponse.java, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.seqno.SequenceNumbersService;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +, +    private static final String FOUND = "found";, +, +        builder.field(FOUND, result == Result.DELETED);, +    private static final ConstructingObjectParser<DeleteResponse, Void> PARSER;, +    static {, +        PARSER = new ConstructingObjectParser<>(DeleteResponse.class.getName(),, +            args -> {, +                // index uuid and shard id are unknown and can't be parsed back for now., +                ShardId shardId = new ShardId(new Index((String) args[0], IndexMetaData.INDEX_UUID_NA_VALUE), -1);, +                String type = (String) args[1];, +                String id = (String) args[2];, +                long version = (long) args[3];, +                ShardInfo shardInfo = (ShardInfo) args[5];, +                long seqNo = (args[6] != null) ? (long) args[6] : SequenceNumbersService.UNASSIGNED_SEQ_NO;, +                boolean found = (boolean) args[7];, +                DeleteResponse deleteResponse = new DeleteResponse(shardId, type, id, seqNo, version, found);, +                deleteResponse.setShardInfo(shardInfo);, +                return deleteResponse;, +            });, +        DocWriteResponse.declareParserFields(PARSER);, +        PARSER.declareBoolean(constructorArg(), new ParseField(FOUND));, +    }, +, +    public static DeleteResponse fromXContent(XContentParser parser) throws IOException {, +        return PARSER.apply(parser, null);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteResponse.java, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.seqno.SequenceNumbersService;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +, +    private static final String FOUND = "found";, +, +        builder.field(FOUND, result == Result.DELETED);, +    private static final ConstructingObjectParser<DeleteResponse, Void> PARSER;, +    static {, +        PARSER = new ConstructingObjectParser<>(DeleteResponse.class.getName(),, +            args -> {, +                // index uuid and shard id are unknown and can't be parsed back for now., +                ShardId shardId = new ShardId(new Index((String) args[0], IndexMetaData.INDEX_UUID_NA_VALUE), -1);, +                String type = (String) args[1];, +                String id = (String) args[2];, +                long version = (long) args[3];, +                ShardInfo shardInfo = (ShardInfo) args[5];, +                long seqNo = (args[6] != null) ? (long) args[6] : SequenceNumbersService.UNASSIGNED_SEQ_NO;, +                boolean found = (boolean) args[7];, +                DeleteResponse deleteResponse = new DeleteResponse(shardId, type, id, seqNo, version, found);, +                deleteResponse.setShardInfo(shardInfo);, +                return deleteResponse;, +            });, +        DocWriteResponse.declareParserFields(PARSER);, +        PARSER.declareBoolean(constructorArg(), new ParseField(FOUND));, +    }, +, +    public static DeleteResponse fromXContent(XContentParser parser) throws IOException {, +        return PARSER.apply(parser, null);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/action/delete/DeleteResponseTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.delete;, +, +import org.elasticsearch.action.DocWriteResponse;, +import org.elasticsearch.action.support.replication.ReplicationResponse;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.bytes.BytesReference;]