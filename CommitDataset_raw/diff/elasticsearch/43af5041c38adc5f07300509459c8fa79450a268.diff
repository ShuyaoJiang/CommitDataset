[+++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.*;, +            for (RestPreProcessor preProcessor : restController.preProcessors()) {, +                if (!preProcessor.handleExternal()) {, +                    continue;, +                }, +                if (!preProcessor.process(request, channel)) {, +                    return;, +                }, +            }, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.*;, +            for (RestPreProcessor preProcessor : restController.preProcessors()) {, +                if (!preProcessor.handleExternal()) {, +                    continue;, +                }, +                if (!preProcessor.process(request, channel)) {, +                    return;, +                }, +            }, +++ b/src/main/java/org/elasticsearch/rest/RestController.java, +import java.util.Arrays;, +import java.util.Comparator;, +    // non volatile since the assumption is that pre processors are registered on startup, +    private RestPreProcessor[] preProcessors = new RestPreProcessor[0];, +, +    /**, +     * Registers a pre processor to be executed before the rest request is actually handled., +     */, +    public synchronized void registerPreProcessor(RestPreProcessor preProcessor) {, +        RestPreProcessor[] copy = new RestPreProcessor[preProcessors.length + 1];, +        System.arraycopy(preProcessors, 0, copy, 0, preProcessors.length);, +        copy[preProcessors.length] = preProcessor;, +        Arrays.sort(copy, new Comparator<RestPreProcessor>() {, +            @Override, +            public int compare(RestPreProcessor o1, RestPreProcessor o2) {, +                return o2.order() - o1.order();, +            }, +        });, +        preProcessors = copy;, +    }, +, +    /**, +     * Registers a rest handler to be execute when the provided method and path match the request., +     */, +    public RestPreProcessor[] preProcessors() {, +        return preProcessors;, +    }, +, +        try {, +            for (RestPreProcessor preProcessor : preProcessors) {, +                if (!preProcessor.process(request, channel)) {, +                    return true;, +                }, +            }, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.*;, +            for (RestPreProcessor preProcessor : restController.preProcessors()) {, +                if (!preProcessor.handleExternal()) {, +                    continue;, +                }, +                if (!preProcessor.process(request, channel)) {, +                    return;, +                }, +            }, +++ b/src/main/java/org/elasticsearch/rest/RestController.java, +import java.util.Arrays;, +import java.util.Comparator;, +    // non volatile since the assumption is that pre processors are registered on startup, +    private RestPreProcessor[] preProcessors = new RestPreProcessor[0];, +, +    /**, +     * Registers a pre processor to be executed before the rest request is actually handled., +     */, +    public synchronized void registerPreProcessor(RestPreProcessor preProcessor) {, +        RestPreProcessor[] copy = new RestPreProcessor[preProcessors.length + 1];, +        System.arraycopy(preProcessors, 0, copy, 0, preProcessors.length);, +        copy[preProcessors.length] = preProcessor;, +        Arrays.sort(copy, new Comparator<RestPreProcessor>() {, +            @Override, +            public int compare(RestPreProcessor o1, RestPreProcessor o2) {, +                return o2.order() - o1.order();, +            }, +        });, +        preProcessors = copy;, +    }, +, +    /**, +     * Registers a rest handler to be execute when the provided method and path match the request., +     */, +    public RestPreProcessor[] preProcessors() {, +        return preProcessors;, +    }, +, +        try {, +            for (RestPreProcessor preProcessor : preProcessors) {, +                if (!preProcessor.process(request, channel)) {, +                    return true;, +                }, +            }]