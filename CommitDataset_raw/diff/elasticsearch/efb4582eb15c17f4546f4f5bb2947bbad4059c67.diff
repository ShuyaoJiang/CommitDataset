[+++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        if (bindHosts == null || bindHosts.length == 0) {, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        if (bindHosts == null || bindHosts.length == 0) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.bootstrap.BootstrapSettings;, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +                    ESLoggerFactory.getRootLogger().setLevel(rootLevel == null ? ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.get(settings), +                            .name() : rootLevel);, +                    TransportClientNodesService.CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL, // TODO these transport client settings are kind, +                    // of odd here and should only be valid if we are a transport client, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_SIZE,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MIN,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MAX,, +                    NettyHttpServerTransport.SETTING_HTTP_WORKER_COUNT,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_NO_DELAY,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_KEEP_ALIVE,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_BLOCKING_SERVER,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_REUSE_ADDRESS,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_SEND_BUFFER_SIZE,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE,, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        if (bindHosts == null || bindHosts.length == 0) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.bootstrap.BootstrapSettings;, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +                    ESLoggerFactory.getRootLogger().setLevel(rootLevel == null ? ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.get(settings), +                            .name() : rootLevel);, +                    TransportClientNodesService.CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL, // TODO these transport client settings are kind, +                    // of odd here and should only be valid if we are a transport client, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_SIZE,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MIN,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MAX,, +                    NettyHttpServerTransport.SETTING_HTTP_WORKER_COUNT,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_NO_DELAY,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_KEEP_ALIVE,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_BLOCKING_SERVER,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_REUSE_ADDRESS,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_SEND_BUFFER_SIZE,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE,, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +import java.util.List;, +, +import static java.util.Collections.emptyList;, +import static org.elasticsearch.common.settings.Setting.listSetting;, +, +    public static final Setting<List<String>> SETTING_HTTP_HOST = listSetting("http.host", emptyList(), s -> s, false, Scope.CLUSTER);, +    public static final Setting<List<String>> SETTING_HTTP_PUBLISH_HOST = listSetting("http.publish_host", SETTING_HTTP_HOST, s -> s, false, Scope.CLUSTER);, +    public static final Setting<List<String>> SETTING_HTTP_BIND_HOST = listSetting("http.bind_host", SETTING_HTTP_HOST, s -> s, false, Scope.CLUSTER);, +, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +        if (bindHosts == null || bindHosts.length == 0) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.bootstrap.BootstrapSettings;, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +                    ESLoggerFactory.getRootLogger().setLevel(rootLevel == null ? ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.get(settings), +                            .name() : rootLevel);, +                    TransportClientNodesService.CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL, // TODO these transport client settings are kind, +                    // of odd here and should only be valid if we are a transport client, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_SIZE,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MIN,, +                    NettyHttpServerTransport.SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MAX,, +                    NettyHttpServerTransport.SETTING_HTTP_WORKER_COUNT,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_NO_DELAY,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_KEEP_ALIVE,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_BLOCKING_SERVER,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_REUSE_ADDRESS,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_SEND_BUFFER_SIZE,, +                    NettyHttpServerTransport.SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE,, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +import java.util.List;, +, +import static java.util.Collections.emptyList;, +import static org.elasticsearch.common.settings.Setting.listSetting;, +, +    public static final Setting<List<String>> SETTING_HTTP_HOST = listSetting("http.host", emptyList(), s -> s, false, Scope.CLUSTER);, +    public static final Setting<List<String>> SETTING_HTTP_PUBLISH_HOST = listSetting("http.publish_host", SETTING_HTTP_HOST, s -> s, false, Scope.CLUSTER);, +    public static final Setting<List<String>> SETTING_HTTP_BIND_HOST = listSetting("http.bind_host", SETTING_HTTP_HOST, s -> s, false, Scope.CLUSTER);, +, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.threadpool.ThreadPool;, +import static org.elasticsearch.common.settings.Setting.boolSetting;, +import static org.elasticsearch.common.settings.Setting.byteSizeSetting;, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_BIND_HOST;, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_PUBLISH_HOST;, +    public static Setting<ByteSizeValue> SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY =, +            Setting.byteSizeSetting("http.netty.max_cumulation_buffer_capacity", new ByteSizeValue(-1), false, Setting.Scope.CLUSTER);, +    public static Setting<Integer> SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS =, +            Setting.intSetting("http.netty.max_composite_buffer_components", -1, false, Setting.Scope.CLUSTER);, +, +    public static final Setting<Integer> SETTING_HTTP_WORKER_COUNT = new Setting<>("http.netty.worker_count",, +            (s) -> Integer.toString(EsExecutors.boundedNumberOfProcessors(s) * 2),, +            (s) -> Setting.parseInt(s, 1, "http.netty.worker_count"), false, Setting.Scope.CLUSTER);]