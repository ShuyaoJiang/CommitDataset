[+++ b/docs/reference/index-modules/store.asciidoc, +[[allow-mmapfs]], +You can restrict the use of the `mmapfs` store type via the setting, +`node.store.allow_mmapfs`. This is a boolean setting indicating whether or not, +`mmapfs` is allowed. The default is to allow `mmapfs`. This setting is useful,, +for example, if you are in an environment where you can not control the ability, +to create a lot of memory maps so you need disable the ability to use `mmapfs`., +, +++ b/docs/reference/index-modules/store.asciidoc, +[[allow-mmapfs]], +You can restrict the use of the `mmapfs` store type via the setting, +`node.store.allow_mmapfs`. This is a boolean setting indicating whether or not, +`mmapfs` is allowed. The default is to allow `mmapfs`. This setting is useful,, +for example, if you are in an environment where you can not control the ability, +to create a lot of memory maps so you need disable the ability to use `mmapfs`., +, +++ b/docs/reference/setup/bootstrap-checks.asciidoc, +Alternatively, the maximum map count check is only needed if you are using, +`mmapfs` as the <<index-modules-store,store type>> for your indices. If you, +<<allow-mmapfs,do not allow>> the use of `mmapfs` then this bootstrap check will, +not be enforced., +, +++ b/docs/reference/index-modules/store.asciidoc, +[[allow-mmapfs]], +You can restrict the use of the `mmapfs` store type via the setting, +`node.store.allow_mmapfs`. This is a boolean setting indicating whether or not, +`mmapfs` is allowed. The default is to allow `mmapfs`. This setting is useful,, +for example, if you are in an environment where you can not control the ability, +to create a lot of memory maps so you need disable the ability to use `mmapfs`., +, +++ b/docs/reference/setup/bootstrap-checks.asciidoc, +Alternatively, the maximum map count check is only needed if you are using, +`mmapfs` as the <<index-modules-store,store type>> for your indices. If you, +<<allow-mmapfs,do not allow>> the use of `mmapfs` then this bootstrap check will, +not be enforced., +, +++ b/server/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +import org.elasticsearch.index.IndexModule;, +        static final long LIMIT = 1 << 18;, +        public BootstrapCheckResult check(final BootstrapContext context) {, +            // we only enforce the check if mmapfs is an allowed store type, +            if (IndexModule.NODE_STORE_ALLOW_MMAPFS.get(context.settings)) {, +            } else {, +                return BootstrapCheckResult.success();, +            }, +++ b/docs/reference/index-modules/store.asciidoc, +[[allow-mmapfs]], +You can restrict the use of the `mmapfs` store type via the setting, +`node.store.allow_mmapfs`. This is a boolean setting indicating whether or not, +`mmapfs` is allowed. The default is to allow `mmapfs`. This setting is useful,, +for example, if you are in an environment where you can not control the ability, +to create a lot of memory maps so you need disable the ability to use `mmapfs`., +, +++ b/docs/reference/setup/bootstrap-checks.asciidoc, +Alternatively, the maximum map count check is only needed if you are using, +`mmapfs` as the <<index-modules-store,store type>> for your indices. If you, +<<allow-mmapfs,do not allow>> the use of `mmapfs` then this bootstrap check will, +not be enforced., +, +++ b/server/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +import org.elasticsearch.index.IndexModule;, +        static final long LIMIT = 1 << 18;, +        public BootstrapCheckResult check(final BootstrapContext context) {, +            // we only enforce the check if mmapfs is an allowed store type, +            if (IndexModule.NODE_STORE_ALLOW_MMAPFS.get(context.settings)) {, +            } else {, +                return BootstrapCheckResult.success();, +            }, +++ b/server/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.index.IndexModule;, +                    IndexModule.NODE_STORE_ALLOW_MMAPFS,, +++ b/docs/reference/index-modules/store.asciidoc, +[[allow-mmapfs]], +You can restrict the use of the `mmapfs` store type via the setting, +`node.store.allow_mmapfs`. This is a boolean setting indicating whether or not, +`mmapfs` is allowed. The default is to allow `mmapfs`. This setting is useful,, +for example, if you are in an environment where you can not control the ability, +to create a lot of memory maps so you need disable the ability to use `mmapfs`., +, +++ b/docs/reference/setup/bootstrap-checks.asciidoc, +Alternatively, the maximum map count check is only needed if you are using, +`mmapfs` as the <<index-modules-store,store type>> for your indices. If you, +<<allow-mmapfs,do not allow>> the use of `mmapfs` then this bootstrap check will, +not be enforced., +, +++ b/server/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +import org.elasticsearch.index.IndexModule;, +        static final long LIMIT = 1 << 18;, +        public BootstrapCheckResult check(final BootstrapContext context) {, +            // we only enforce the check if mmapfs is an allowed store type, +            if (IndexModule.NODE_STORE_ALLOW_MMAPFS.get(context.settings)) {, +            } else {, +                return BootstrapCheckResult.success();, +            }, +++ b/server/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.index.IndexModule;, +                    IndexModule.NODE_STORE_ALLOW_MMAPFS,, +++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.apache.lucene.store.MMapDirectory;, +import org.apache.lucene.util.Constants;]