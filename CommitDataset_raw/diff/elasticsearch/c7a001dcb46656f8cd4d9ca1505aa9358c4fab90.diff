[+++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.highlight.HighlightBuilder;, +import java.io.IOException;, +    private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchContextException {, +            HighlightBuilder highlightBuilder = source.highlighter();, +                context.highlight(highlightBuilder.build(context.indexShard().getQueryShardContext()));, +            } catch (IOException e) {, +                throw new SearchContextException(context, "failed to create SearchContextHighlighter", e);, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.highlight.HighlightBuilder;, +import java.io.IOException;, +    private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchContextException {, +            HighlightBuilder highlightBuilder = source.highlighter();, +                context.highlight(highlightBuilder.build(context.indexShard().getQueryShardContext()));, +            } catch (IOException e) {, +                throw new SearchContextException(context, "failed to create SearchContextHighlighter", e);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsBuilder.java, +    public HighlightBuilder highlighter() {, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.highlight.HighlightBuilder;, +import java.io.IOException;, +    private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchContextException {, +            HighlightBuilder highlightBuilder = source.highlighter();, +                context.highlight(highlightBuilder.build(context.indexShard().getQueryShardContext()));, +            } catch (IOException e) {, +                throw new SearchContextException(context, "failed to create SearchContextHighlighter", e);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsBuilder.java, +    public HighlightBuilder highlighter() {, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +    private HighlightBuilder highlightBuilder;, +        this.highlightBuilder = highlightBuilder;, +     * Gets the hightlighter builder for this request., +    public HighlightBuilder highlighter() {, +                    builder.highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context);, +            this.highlightBuilder.toXContent(builder, params);, +            builder.highlightBuilder = HighlightBuilder.PROTOTYPE.readFrom(in);, +            highlightBuilder.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.highlight.HighlightBuilder;, +import java.io.IOException;, +    private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchContextException {, +            HighlightBuilder highlightBuilder = source.highlighter();, +                context.highlight(highlightBuilder.build(context.indexShard().getQueryShardContext()));, +            } catch (IOException e) {, +                throw new SearchContextException(context, "failed to create SearchContextHighlighter", e);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsBuilder.java, +    public HighlightBuilder highlighter() {, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +    private HighlightBuilder highlightBuilder;, +        this.highlightBuilder = highlightBuilder;, +     * Gets the hightlighter builder for this request., +    public HighlightBuilder highlighter() {, +                    builder.highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context);, +            this.highlightBuilder.toXContent(builder, params);, +            builder.highlightBuilder = HighlightBuilder.PROTOTYPE.readFrom(in);, +            highlightBuilder.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsBuilder.java, +        public HighlightBuilder highlighter() {, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.highlight.HighlightBuilder;, +import java.io.IOException;, +    private void parseSource(SearchContext context, SearchSourceBuilder source) throws SearchContextException {, +            HighlightBuilder highlightBuilder = source.highlighter();, +                context.highlight(highlightBuilder.build(context.indexShard().getQueryShardContext()));, +            } catch (IOException e) {, +                throw new SearchContextException(context, "failed to create SearchContextHighlighter", e);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsBuilder.java, +    public HighlightBuilder highlighter() {, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +    private HighlightBuilder highlightBuilder;, +        this.highlightBuilder = highlightBuilder;, +     * Gets the hightlighter builder for this request., +    public HighlightBuilder highlighter() {, +                    builder.highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context);, +            this.highlightBuilder.toXContent(builder, params);, +            builder.highlightBuilder = HighlightBuilder.PROTOTYPE.readFrom(in);, +            highlightBuilder.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsBuilder.java, +        public HighlightBuilder highlighter() {, +++ b/core/src/main/java/org/elasticsearch/search/highlight/AbstractHighlighterBuilder.java, +import org.elasticsearch.search.highlight.HighlightBuilder.Order;, +, +    protected Order order;, +     * by score of the fragments, or <tt>none</TT>., +     */, +    public HB order(String order) {, +        return order(Order.fromString(order));, +    }, +, +    /**, +     * By default, fragments of a field are ordered by the order in the highlighted text., +     * If set to {@link Order#SCORE}, this changes order to score of the fragments., +    public HB order(Order scoreOrdered) {, +        this.order = scoreOrdered;, +     * @return the value set by {@link #order(Order)}, +    public Order order() {, +            builder.field(ORDER_FIELD.getPreferredName(), order.toString());, +                    highlightBuilder.order(Order.fromString(parser.text()));, +        if (in.readBoolean()) {, +            order(Order.PROTOTYPE.readFrom(in));]