[+++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<ReplicationRequest, ReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, ReplicationRequest::new, ReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, ReplicationRequest> shardOperationOnPrimary(MetaData metaData, ReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(ReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<ReplicationRequest, ReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, ReplicationRequest::new, ReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, ReplicationRequest> shardOperationOnPrimary(MetaData metaData, ReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(ReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +    private final ScheduledFuture scheduledFuture;, +        return add((ActionRequest) request);, +        return add((ActionRequest) request);, +    public BulkProcessor add(ActionRequest request) {, +    public BulkProcessor add(ActionRequest request, @Nullable Object payload) {, +    private synchronized void internalAdd(ActionRequest request, @Nullable Object payload) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<ReplicationRequest, ReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, ReplicationRequest::new, ReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, ReplicationRequest> shardOperationOnPrimary(MetaData metaData, ReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(ReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +    private final ScheduledFuture scheduledFuture;, +        return add((ActionRequest) request);, +        return add((ActionRequest) request);, +    public BulkProcessor add(ActionRequest request) {, +    public BulkProcessor add(ActionRequest request, @Nullable Object payload) {, +    private synchronized void internalAdd(ActionRequest request, @Nullable Object payload) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +    final List<ActionRequest> requests = new ArrayList<>();, +    public BulkRequest(ActionRequest request) {, +    public BulkRequest add(ActionRequest... requests) {, +        for (ActionRequest request : requests) {, +    public BulkRequest add(ActionRequest request) {, +    public BulkRequest add(ActionRequest request, @Nullable Object payload) {, +    public BulkRequest add(Iterable<ActionRequest> requests) {, +        for (ActionRequest request : requests) {, +    public List<ActionRequest> requests() {, +    @SuppressWarnings("unchecked"), +        for (ActionRequest request : requests) {, +        for (ActionRequest request : requests) {, +        for (ActionRequest request : requests) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<ReplicationRequest, ReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, ReplicationRequest::new, ReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, ReplicationRequest> shardOperationOnPrimary(MetaData metaData, ReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(ReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +    private final ScheduledFuture scheduledFuture;, +        return add((ActionRequest) request);, +        return add((ActionRequest) request);, +    public BulkProcessor add(ActionRequest request) {]