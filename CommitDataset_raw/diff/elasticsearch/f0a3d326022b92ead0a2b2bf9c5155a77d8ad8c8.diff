[+++ b/TESTING.asciidoc, +By default the tests run on multiple processes using all the available cores on all , +available CPUs. Not including hyper-threading., +If you want to explicitly specify the number of JVMs you can do so on the command, +++ b/TESTING.asciidoc, +By default the tests run on multiple processes using all the available cores on all , +available CPUs. Not including hyper-threading., +If you want to explicitly specify the number of JVMs you can do so on the command, +++ b/build.gradle, +import com.carrotsearch.gradle.junit4.RandomizedTestingTask, +, +import java.util.function.Predicate, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +, +allprojects {, +  task checkPart1, +  task checkPart2 , +  tasks.matching { it.name == "check" }.all { check ->, +    if (check.path.startsWith(":x-pack:")) {, +      checkPart2.dependsOn check, +    } else {, +      checkPart1.dependsOn check, +    }, +  } , +}, +, +, +, +, +++ b/TESTING.asciidoc, +By default the tests run on multiple processes using all the available cores on all , +available CPUs. Not including hyper-threading., +If you want to explicitly specify the number of JVMs you can do so on the command, +++ b/build.gradle, +import com.carrotsearch.gradle.junit4.RandomizedTestingTask, +, +import java.util.function.Predicate, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +, +allprojects {, +  task checkPart1, +  task checkPart2 , +  tasks.matching { it.name == "check" }.all { check ->, +    if (check.path.startsWith(":x-pack:")) {, +      checkPart2.dependsOn check, +    } else {, +      checkPart1.dependsOn check, +    }, +  } , +}, +, +, +, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        String defaultParallel = 'auto', +        // Count physical cores on any Linux distro ( don't count hyper-threading ), +        if (project.file("/proc/cpuinfo").exists()) {, +            Map<String, Integer> socketToCore = [:], +            String currentID = "", +            project.file("/proc/cpuinfo").readLines().forEach({ line ->, +                if (line.contains(":")) {, +                    List<String> parts = line.split(":", 2).collect({it.trim()}), +                    String name = parts[0], value = parts[1], +                    // the ID of the CPU socket, +                    if (name == "physical id") {, +                        currentID = value, +                    }, +                    // Number  of cores not including hyper-threading, +                    if (name == "cpu cores") {, +                        assert currentID.isEmpty() == false, +                        socketToCore[currentID] = Integer.valueOf(value), +                        currentID = "", +                    }, +                }, +            }), +            defaultParallel = socketToCore.values().sum().toString();, +        }, +            parallelism System.getProperty('tests.jvms', defaultParallel), +++ b/TESTING.asciidoc, +By default the tests run on multiple processes using all the available cores on all , +available CPUs. Not including hyper-threading., +If you want to explicitly specify the number of JVMs you can do so on the command, +++ b/build.gradle, +import com.carrotsearch.gradle.junit4.RandomizedTestingTask, +, +import java.util.function.Predicate, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +, +allprojects {, +  task checkPart1, +  task checkPart2 , +  tasks.matching { it.name == "check" }.all { check ->, +    if (check.path.startsWith(":x-pack:")) {, +      checkPart2.dependsOn check, +    } else {, +      checkPart1.dependsOn check]