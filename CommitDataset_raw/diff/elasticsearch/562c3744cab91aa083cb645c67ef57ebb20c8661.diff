[+++ b/core/src/main/java/org/apache/lucene/search/uhighlight/CustomUnifiedHighlighter.java, +++ b/core/src/main/java/org/apache/lucene/search/uhighlight/CustomUnifiedHighlighter.java, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +++ b/core/src/main/java/org/apache/lucene/search/uhighlight/CustomUnifiedHighlighter.java, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +++ b/core/src/main/java/org/apache/lucene/search/uhighlight/CustomUnifiedHighlighter.java, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +++ /dev/null, +++ b/core/src/main/java/org/apache/lucene/search/uhighlight/CustomUnifiedHighlighter.java, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +import org.apache.lucene.search.ScorerSupplier;, +import org.apache.lucene.util.Bits;, +import org.apache.lucene.search.TopDocsCollector;, +import org.apache.lucene.search.TopScoreDocCollector;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.lucene.Lucene;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, + * A query that allows for a pluggable boost function / filter. If it matches, + * the filter, it will be boosted by the formula., +    public static class FilterScoreFunction extends ScoreFunction {, +        public final Query filter;, +        public final ScoreFunction function;, +        public FilterScoreFunction(Query filter, ScoreFunction function) {, +            super(function.getDefaultScoreCombiner());, +            this.filter = filter;, +        }, +, +        @Override, +        public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) throws IOException {, +            return function.getLeafScoreFunction(ctx);, +        }, +, +        @Override, +        public boolean needsScores() {, +            return function.needsScores();, +        }, +, +        @Override, +        protected boolean doEquals(ScoreFunction other) {, +            if (getClass() != other.getClass()) {, +                return false;, +            }, +            FilterScoreFunction that = (FilterScoreFunction) other;, +            return Objects.equals(this.filter, that.filter) && Objects.equals(this.function, that.function);, +        }, +, +        @Override, +        protected int doHashCode() {, +            return Objects.hash(filter, function);, +        }, +, +        @Override, +        protected ScoreFunction rewrite(IndexReader reader) throws IOException {, +            Query newFilter = filter.rewrite(reader);, +            if (newFilter == filter) {, +                return this;, +            }, +            return new FilterScoreFunction(newFilter, function);, +        }, +, +        @Override, +        public float getWeight() {, +            return function.getWeight();, +        }, +    }, +, +    public enum ScoreMode implements Writeable {, +        FIRST, AVG, MAX, SUM, MIN, MULTIPLY;, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeEnum(this);, +        }, +, +        public static ScoreMode readFromStream(StreamInput in) throws IOException {, +            return in.readEnum(ScoreMode.class);, +        }, +, +        public static ScoreMode fromString(String scoreMode) {, +            return valueOf(scoreMode.toUpperCase(Locale.ROOT));, +        }, +    }, +, +    final Query subQuery;, +    final ScoreFunction[] functions;, +    final ScoreMode scoreMode;, +    final float maxBoost;, +    private final Float minScore;]