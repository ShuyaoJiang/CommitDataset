[+++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.format(address));, +            sb.append(NetworkAddress.format(address));, +            sb.append(" netmask:" + NetworkAddress.format(InetAddress.getByAddress(new byte[] {, +                sb.append(" broadcast:" + NetworkAddress.format(broadcast));, +++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.format(address));, +            sb.append(NetworkAddress.format(address));, +            sb.append(" netmask:" + NetworkAddress.format(InetAddress.getByAddress(new byte[] {, +                sb.append(" broadcast:" + NetworkAddress.format(broadcast));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkAddress.java, + * Note: the {@code %1} is the "scopeid"., + * <p>, +    public static String format(InetAddress address) {, +        return format(address, -1);, +     * This formats the address with {@link #format(InetAddress)}, +    public static String format(InetSocketAddress address) {, +        return format(address.getAddress(), address.getPort());, +    static String format(InetAddress address, int port) {, +++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.format(address));, +            sb.append(NetworkAddress.format(address));, +            sb.append(" netmask:" + NetworkAddress.format(InetAddress.getByAddress(new byte[] {, +                sb.append(" broadcast:" + NetworkAddress.format(broadcast));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkAddress.java, + * Note: the {@code %1} is the "scopeid"., + * <p>, +    public static String format(InetAddress address) {, +        return format(address, -1);, +     * This formats the address with {@link #format(InetAddress)}, +    public static String format(InetSocketAddress address) {, +        return format(address.getAddress(), address.getPort());, +    static String format(InetAddress address, int port) {, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +        return NetworkAddress.format(address.getAddress());, +++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.format(address));, +            sb.append(NetworkAddress.format(address));, +            sb.append(" netmask:" + NetworkAddress.format(InetAddress.getByAddress(new byte[] {, +                sb.append(" broadcast:" + NetworkAddress.format(broadcast));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkAddress.java, + * Note: the {@code %1} is the "scopeid"., + * <p>, +    public static String format(InetAddress address) {, +        return format(address, -1);, +     * This formats the address with {@link #format(InetAddress)}, +    public static String format(InetSocketAddress address) {, +        return format(address.getAddress(), address.getPort());, +    static String format(InetAddress address, int port) {, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +        return NetworkAddress.format(address.getAddress());, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n");, +++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.format(address));, +            sb.append(NetworkAddress.format(address));, +            sb.append(" netmask:" + NetworkAddress.format(InetAddress.getByAddress(new byte[] {, +                sb.append(" broadcast:" + NetworkAddress.format(broadcast));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkAddress.java, + * Note: the {@code %1} is the "scopeid"., + * <p>, +    public static String format(InetAddress address) {, +        return format(address, -1);, +     * This formats the address with {@link #format(InetAddress)}, +    public static String format(InetSocketAddress address) {, +        return format(address.getAddress(), address.getPort());, +    static String format(InetAddress address, int port) {, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +        return NetworkAddress.format(address.getAddress());, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n");, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +                    table.addCell(NetworkAddress.format(((InetSocketTransportAddress)transportAddress).address()));, +++ b/core/src/main/java/org/elasticsearch/common/network/IfConfig.java, +            sb.append(NetworkAddress.format(address));, +            sb.append(NetworkAddress.format(address));, +            sb.append(" netmask:" + NetworkAddress.format(InetAddress.getByAddress(new byte[] {, +                sb.append(" broadcast:" + NetworkAddress.format(broadcast));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkAddress.java, + * Note: the {@code %1} is the "scopeid"., + * <p>, +    public static String format(InetAddress address) {, +        return format(address, -1);, +     * This formats the address with {@link #format(InetAddress)}, +    public static String format(InetSocketAddress address) {, +        return format(address.getAddress(), address.getPort());, +    static String format(InetAddress address, int port) {, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +        return NetworkAddress.format(address.getAddress());, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                writer.write(NetworkAddress.format(new InetSocketAddress(inetAddress, address.getPort())) + "\n");, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +                    table.addCell(NetworkAddress.format(((InetSocketTransportAddress)transportAddress).address()));, +++ b/core/src/test/java/org/elasticsearch/common/network/NetworkAddressTests.java, +        assertEquals("127.0.0.1", NetworkAddress.format(forge("localhost", "127.0.0.1")));, +        assertEquals("::1", NetworkAddress.format(forge("localhost", "::1")));, +        assertEquals("127.0.0.1:1234", NetworkAddress.format(new InetSocketAddress(forge("localhost", "127.0.0.1"), 1234)));, +        assertEquals("[::1]:1234", NetworkAddress.format(new InetSocketAddress(forge("localhost", "::1"), 1234)));, +        assertEquals("::1", NetworkAddress.format(forgeScoped("localhost", "::1", 5)));, +        assertEquals("[::1]:1234", NetworkAddress.format(new InetSocketAddress(forgeScoped("localhost", "::1", 5), 1234)));]