[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;, +            startTime = System.currentTimeMillis();, +                    if (aliasOrIndex.isAlias() == false) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        if (excludeState != null && index.getIndex().getState() == excludeState) {, +                            continue;, +, +                        result.add(entry.getKey());, +                        result.remove(entry.getKey());, +                    }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;, +            startTime = System.currentTimeMillis();, +                    if (aliasOrIndex.isAlias() == false) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        if (excludeState != null && index.getIndex().getState() == excludeState) {, +                            continue;, +, +                        result.add(entry.getKey());, +                        result.remove(entry.getKey());, +                    }, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;, +            startTime = System.currentTimeMillis();, +                    if (aliasOrIndex.isAlias() == false) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        if (excludeState != null && index.getIndex().getState() == excludeState) {, +                            continue;, +, +                        result.add(entry.getKey());, +                        result.remove(entry.getKey());, +                    }, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onShardActive(IndexShard indexShard) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onShardActive(indexShard);, +            } catch (Throwable t) {, +                logger.warn("[{}] failed to invoke on shard active callback", t, indexShard.shardId().getId());, +                throw t;, +            }, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;, +            startTime = System.currentTimeMillis();, +                    if (aliasOrIndex.isAlias() == false) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        if (excludeState != null && index.getIndex().getState() == excludeState) {, +                            continue;, +, +                        result.add(entry.getKey());, +                        result.remove(entry.getKey());, +                    }, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onShardActive(IndexShard indexShard) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onShardActive(indexShard);, +            } catch (Throwable t) {, +                logger.warn("[{}] failed to invoke on shard active callback", t, indexShard.shardId().getId());, +                throw t;, +            }, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry) throws IOException {, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;]