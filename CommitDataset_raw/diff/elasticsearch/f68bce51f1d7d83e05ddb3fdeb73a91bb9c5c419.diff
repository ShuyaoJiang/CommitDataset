[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +done on UTC. It is possible to provide a time zone (both pre rounding, and post rounding) value, which will cause all, +computations to take the relevant zone into account. The time returned for each bucket/entry is milliseconds since the, +epoch of the provided time zone., +The parameters are `pre_zone` (pre rounding based on interval) and `post_zone` (post rounding based on interval). The, +`time_zone` parameter simply sets the `pre_zone` parameter. By default, those are set to `UTC`., +, +The zone value accepts either a numeric value for the hours offset, for example: `"time_zone" : -2`. It also accepts a, +format of hours and minutes, like `"time_zone" : "-02:30"`. Another option is to provide a time zone accepted as one of, +the values listed here., +, +Lets take an example. For `2012-04-01T04:15:30Z`, with a `pre_zone` of `-08:00`. For day interval, the actual time by, +`2012-03-31T00:00:00Z` (UTC). For hour interval, applying the time zone results in `2012-03-31T20:15:30`, rounding it, +results in `2012-03-31T20:00:00`, but, we want to return it in UTC (`post_zone` is not set), so we convert it back to, +UTC: `2012-04-01T04:00:00Z`. Note, we are consistent in the results, returning the rounded value in UTC., +, +`post_zone` simply takes the result, and adds the relevant offset., +, +Sometimes, we want to apply the same conversion to UTC we did above for hour also for day (and up) intervals. We can, +set `pre_zone_adjust_large_interval` to `true`, which will apply the same conversion done for hour interval in the, +example, to day and above intervals (it can be set regardless of the interval, but only kick in when using day and, +higher intervals)., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +done on UTC. It is possible to provide a time zone (both pre rounding, and post rounding) value, which will cause all, +computations to take the relevant zone into account. The time returned for each bucket/entry is milliseconds since the, +epoch of the provided time zone., +The parameters are `pre_zone` (pre rounding based on interval) and `post_zone` (post rounding based on interval). The, +`time_zone` parameter simply sets the `pre_zone` parameter. By default, those are set to `UTC`., +, +The zone value accepts either a numeric value for the hours offset, for example: `"time_zone" : -2`. It also accepts a, +format of hours and minutes, like `"time_zone" : "-02:30"`. Another option is to provide a time zone accepted as one of, +the values listed here., +, +Lets take an example. For `2012-04-01T04:15:30Z`, with a `pre_zone` of `-08:00`. For day interval, the actual time by, +`2012-03-31T00:00:00Z` (UTC). For hour interval, applying the time zone results in `2012-03-31T20:15:30`, rounding it, +results in `2012-03-31T20:00:00`, but, we want to return it in UTC (`post_zone` is not set), so we convert it back to, +UTC: `2012-04-01T04:00:00Z`. Note, we are consistent in the results, returning the rounded value in UTC., +, +`post_zone` simply takes the result, and adds the relevant offset., +, +Sometimes, we want to apply the same conversion to UTC we did above for hour also for day (and up) intervals. We can, +set `pre_zone_adjust_large_interval` to `true`, which will apply the same conversion done for hour interval in the, +example, to day and above intervals (it can be set regardless of the interval, but only kick in when using day and, +higher intervals)., +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +done on UTC. It is possible to provide a time zone (both pre rounding, and post rounding) value, which will cause all, +computations to take the relevant zone into account. The time returned for each bucket/entry is milliseconds since the, +epoch of the provided time zone., +The parameters are `pre_zone` (pre rounding based on interval) and `post_zone` (post rounding based on interval). The, +`time_zone` parameter simply sets the `pre_zone` parameter. By default, those are set to `UTC`., +, +The zone value accepts either a numeric value for the hours offset, for example: `"time_zone" : -2`. It also accepts a, +format of hours and minutes, like `"time_zone" : "-02:30"`. Another option is to provide a time zone accepted as one of, +the values listed here., +, +Lets take an example. For `2012-04-01T04:15:30Z`, with a `pre_zone` of `-08:00`. For day interval, the actual time by, +`2012-03-31T00:00:00Z` (UTC). For hour interval, applying the time zone results in `2012-03-31T20:15:30`, rounding it, +results in `2012-03-31T20:00:00`, but, we want to return it in UTC (`post_zone` is not set), so we convert it back to, +UTC: `2012-04-01T04:00:00Z`. Note, we are consistent in the results, returning the rounded value in UTC., +, +`post_zone` simply takes the result, and adds the relevant offset., +, +Sometimes, we want to apply the same conversion to UTC we did above for hour also for day (and up) intervals. We can, +set `pre_zone_adjust_large_interval` to `true`, which will apply the same conversion done for hour interval in the, +example, to day and above intervals (it can be set regardless of the interval, but only kick in when using day and, +higher intervals)., +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +, +, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +done on UTC. It is possible to provide a time zone (both pre rounding, and post rounding) value, which will cause all, +computations to take the relevant zone into account. The time returned for each bucket/entry is milliseconds since the, +epoch of the provided time zone., +The parameters are `pre_zone` (pre rounding based on interval) and `post_zone` (post rounding based on interval). The, +`time_zone` parameter simply sets the `pre_zone` parameter. By default, those are set to `UTC`., +, +The zone value accepts either a numeric value for the hours offset, for example: `"time_zone" : -2`. It also accepts a, +format of hours and minutes, like `"time_zone" : "-02:30"`. Another option is to provide a time zone accepted as one of, +the values listed here., +, +Lets take an example. For `2012-04-01T04:15:30Z`, with a `pre_zone` of `-08:00`. For day interval, the actual time by, +`2012-03-31T00:00:00Z` (UTC). For hour interval, applying the time zone results in `2012-03-31T20:15:30`, rounding it, +results in `2012-03-31T20:00:00`, but, we want to return it in UTC (`post_zone` is not set), so we convert it back to, +UTC: `2012-04-01T04:00:00Z`. Note, we are consistent in the results, returning the rounded value in UTC., +, +`post_zone` simply takes the result, and adds the relevant offset., +, +Sometimes, we want to apply the same conversion to UTC we did above for hour also for day (and up) intervals. We can, +set `pre_zone_adjust_large_interval` to `true`, which will apply the same conversion done for hour interval in the, +example, to day and above intervals (it can be set regardless of the interval, but only kick in when using day and, +higher intervals)., +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java]