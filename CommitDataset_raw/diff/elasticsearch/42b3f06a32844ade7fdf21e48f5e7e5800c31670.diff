[+++ b/src/main/java/org/elasticsearch/index/search/shape/ShapeFetchService.java, +                        parser.nextToken();, +++ b/src/main/java/org/elasticsearch/index/search/shape/ShapeFetchService.java, +                        parser.nextToken();, +++ b/src/test/java/org/elasticsearch/test/integration/search/geo/GeoShapeIntegrationTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import java.io.IOException;, +    @Test, +    public void testParsingMultipleShapes() throws IOException {, +        String mapping = XContentFactory.jsonBuilder(), +                .startObject(), +                    .startObject("type1"), +                        .startObject("properties"), +                            .startObject("location1"), +                                .field("type", "geo_shape"), +                            .endObject(), +                            .startObject("location2"), +                                .field("type", "geo_shape"), +                            .endObject(), +                        .endObject(), +                    .endObject(), +                .endObject(), +            .string();, +   , +        prepareCreate("test").addMapping("type1", mapping).execute().actionGet();, +        ensureYellow();, +, +        String p1 = "\"location1\" : {\"type\":\"polygon\", \"coordinates\":[[[-10,-10],[10,-10],[10,10],[-10,10],[-10,-10]]]}";, +        String p2 = "\"location2\" : {\"type\":\"polygon\", \"coordinates\":[[[-20,-20],[20,-20],[20,20],[-20,20],[-20,-20]]]}";, +        String o1 = "{" + p1 + ", " + p2 + "}";, +, +        client().prepareIndex("test", "type1", "1").setSource(o1).execute().actionGet();, +        client().admin().indices().prepareRefresh("test").execute().actionGet();, +, +        String filter = "{\"geo_shape\": {\"location2\": {\"indexed_shape\": {" , +                        + "\"id\": \"1\",", +                        + "\"type\": \"type1\",", +                        + "\"index\": \"test\",", +                        + "\"shape_field_name\": \"location2\"", +                        + "}}}}";, +, +        SearchResponse result = client().prepareSearch("test").setQuery(QueryBuilders.matchAllQuery()).setFilter(filter).execute().actionGet();, +        assertHitCount(result, 1);, +    }, +    ]