[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BackoffPolicy.java, + *     <li><code>#hasNext()</code> determines whether the progression has more elements. Return <code>true</code> for infinite progressions, + *     </li>, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BackoffPolicy.java, + *     <li><code>#hasNext()</code> determines whether the progression has more elements. Return <code>true</code> for infinite progressions, + *     </li>, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +     * If concurrent requests are enabled, waits for up to the specified timeout for all bulk requests to complete then returns {@code true}, +     * @return {@code true} if all bulk requests completed and {@code false} if the waiting time elapsed before all the bulk requests, +     * completed, +                                          @Nullable String defaultPipeline, @Nullable Object payload,, +                                          XContentType xContentType) throws Exception {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BackoffPolicy.java, + *     <li><code>#hasNext()</code> determines whether the progression has more elements. Return <code>true</code> for infinite progressions, + *     </li>, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +     * If concurrent requests are enabled, waits for up to the specified timeout for all bulk requests to complete then returns {@code true}, +     * @return {@code true} if all bulk requests completed and {@code false} if the waiting time elapsed before all the bulk requests, +     * completed, +                                          @Nullable String defaultPipeline, @Nullable Object payload,, +                                          XContentType xContentType) throws Exception {, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [", +                                    + currentFieldName + "]");, +                        } else if (token == XContentParser.Token.START_OBJECT && SOURCE.match(currentFieldName,, +                            parser.getDeprecationHandler())) {, +                            throw new IllegalArgumentException("Malformed action/metadata line [" + line, +                                + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.START_OBJECT + " or " + XContentParser.Token.END_OBJECT + " but found [" + token + "]");, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BackoffPolicy.java, + *     <li><code>#hasNext()</code> determines whether the progression has more elements. Return <code>true</code> for infinite progressions, + *     </li>, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +     * If concurrent requests are enabled, waits for up to the specified timeout for all bulk requests to complete then returns {@code true}, +     * @return {@code true} if all bulk requests completed and {@code false} if the waiting time elapsed before all the bulk requests, +     * completed, +                                          @Nullable String defaultPipeline, @Nullable Object payload,, +                                          XContentType xContentType) throws Exception {, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [", +                                    + currentFieldName + "]");, +                        } else if (token == XContentParser.Token.START_OBJECT && SOURCE.match(currentFieldName,, +                            parser.getDeprecationHandler())) {, +                            throw new IllegalArgumentException("Malformed action/metadata line [" + line, +                                + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.START_OBJECT + " or " + XContentParser.Token.END_OBJECT + " but found [" + token + "]");, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkResponse.java, +                        .append("]: index [").append(response.getIndex()).append("], type ["), +                        .append(response.getType()).append("], id [").append(response.getId()), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BackoffPolicy.java, + *     <li><code>#hasNext()</code> determines whether the progression has more elements. Return <code>true</code> for infinite progressions, + *     </li>, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +     * If concurrent requests are enabled, waits for up to the specified timeout for all bulk requests to complete then returns {@code true}, +     * @return {@code true} if all bulk requests completed and {@code false} if the waiting time elapsed before all the bulk requests, +     * completed, +                                          @Nullable String defaultPipeline, @Nullable Object payload,, +                                          XContentType xContentType) throws Exception {, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [", +                                    + currentFieldName + "]");, +                        } else if (token == XContentParser.Token.START_OBJECT && SOURCE.match(currentFieldName,, +                            parser.getDeprecationHandler())) {, +                            throw new IllegalArgumentException("Malformed action/metadata line [" + line, +                                + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected ", +                        + XContentParser.Token.START_OBJECT + " or " + XContentParser.Token.END_OBJECT + " but found [" + token + "]");, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkResponse.java, +                        .append("]: index [").append(response.getIndex()).append("], type ["), +                        .append(response.getType()).append("], id [").append(response.getId()), +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +    private boolean setResponseFailureIfIndexMatches(AtomicArray<BulkItemResponse> responses, int idx, DocWriteRequest<?> request,, +                                                     String index, Exception e) {, +            responses.set(idx, new BulkItemResponse(idx, request.opType(), new BulkItemResponse.Failure(request.index(), request.type(),, +                request.id(), e)));, +                            TransportUpdateAction.resolveAndValidateRouting(metaData, concreteIndex.getName(),, +                                (UpdateRequest) docWriteRequest);, +                            if (docWriteRequest.routing() == null && metaData.routingRequired(concreteIndex.getName(),, +                                docWriteRequest.type())) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(concreteIndex.getName(), docWriteRequest.type(),, +                        docWriteRequest.id(), e);, +                ShardId shardId = clusterService.operationRouting().indexShards(clusterState, concreteIndex, request.id(),, +                    request.routing()).shardId();, +                listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]),, +                    buildTookInMillis(startTimeNanos)));, +                        listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]),, +                            buildTookInMillis(startTimeNanos)));, +                    ActionListener<BulkResponse> actionListener = bulkRequestModifier.wrapActionListenerIfNeeded(ingestTookInMillis,, +                        listener);, +            BulkItemResponse.Failure failure = new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(),, +                indexRequest.id(), e);, +        IngestBulkResponseListener(long ingestTookInMillis, int[] originalSlots, List<BulkItemResponse> itemResponses,]