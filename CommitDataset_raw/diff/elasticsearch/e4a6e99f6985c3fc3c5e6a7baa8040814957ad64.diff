[+++ b/.idea/dictionaries/kimchy.xml, +      <w>persistency</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>persistency</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlock.java, +    private boolean disableStatePersistence = false;, +, +    ClusterBlock() {, +    public ClusterBlock(int id, String description, boolean retryable, boolean disableStatePersistence, ClusterBlockLevel... levels) {, +        this.disableStatePersistence = disableStatePersistence;, +    /**, +     * Should operations get into retry state if this block is present., +     */, +    /**, +     * Should global state persistence be disabled when this block is present. Note,, +     * only relevant for global blocks., +     */, +    public boolean disableStatePersistence() {, +        return this.disableStatePersistence;, +    }, +, +        if (disableStatePersistence) {, +            builder.field("disable_state_persistence", disableStatePersistence);, +        }, +        disableStatePersistence = in.readBoolean();, +        out.writeBoolean(disableStatePersistence);, +++ b/.idea/dictionaries/kimchy.xml, +      <w>persistency</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlock.java, +    private boolean disableStatePersistence = false;, +, +    ClusterBlock() {, +    public ClusterBlock(int id, String description, boolean retryable, boolean disableStatePersistence, ClusterBlockLevel... levels) {, +        this.disableStatePersistence = disableStatePersistence;, +    /**, +     * Should operations get into retry state if this block is present., +     */, +    /**, +     * Should global state persistence be disabled when this block is present. Note,, +     * only relevant for global blocks., +     */, +    public boolean disableStatePersistence() {, +        return this.disableStatePersistence;, +    }, +, +        if (disableStatePersistence) {, +            builder.field("disable_state_persistence", disableStatePersistence);, +        }, +        disableStatePersistence = in.readBoolean();, +        out.writeBoolean(disableStatePersistence);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    /**, +     * Returns <tt>true</tt> if one of the global blocks as its disable state persistence flag set., +     */, +    public boolean disableStatePersistence() {, +        for (ClusterBlock clusterBlock : global) {, +            if (clusterBlock.disableStatePersistence()) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>persistency</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlock.java, +    private boolean disableStatePersistence = false;, +, +    ClusterBlock() {, +    public ClusterBlock(int id, String description, boolean retryable, boolean disableStatePersistence, ClusterBlockLevel... levels) {, +        this.disableStatePersistence = disableStatePersistence;, +    /**, +     * Should operations get into retry state if this block is present., +     */, +    /**, +     * Should global state persistence be disabled when this block is present. Note,, +     * only relevant for global blocks., +     */, +    public boolean disableStatePersistence() {, +        return this.disableStatePersistence;, +    }, +, +        if (disableStatePersistence) {, +            builder.field("disable_state_persistence", disableStatePersistence);, +        }, +        disableStatePersistence = in.readBoolean();, +        out.writeBoolean(disableStatePersistence);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    /**, +     * Returns <tt>true</tt> if one of the global blocks as its disable state persistence flag set., +     */, +    public boolean disableStatePersistence() {, +        for (ClusterBlock clusterBlock : global) {, +            if (clusterBlock.disableStatePersistence()) {, +                return true;, +            }, +        }, +        return false;, +    }, +]