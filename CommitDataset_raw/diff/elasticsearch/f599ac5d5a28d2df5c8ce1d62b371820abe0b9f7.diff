[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/tasks/Task.java, +            this instanceof CancellableTask, parentTask);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/tasks/Task.java, +            this instanceof CancellableTask, parentTask);, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/CancellableTasksTests.java, +import org.elasticsearch.action.admin.cluster.node.tasks.list.TaskInfo;, +            // Verify that all cancelled tasks reported that they support cancellation, +            for(TaskInfo taskInfo : response.getTasks()) {, +                assertTrue(taskInfo.isCancellable());, +            }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/tasks/Task.java, +            this instanceof CancellableTask, parentTask);, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/CancellableTasksTests.java, +import org.elasticsearch.action.admin.cluster.node.tasks.list.TaskInfo;, +            // Verify that all cancelled tasks reported that they support cancellation, +            for(TaskInfo taskInfo : response.getTasks()) {, +                assertTrue(taskInfo.isCancellable());, +            }, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java, +        // Verify that tasks are marked as non-cancellable, +        for (TaskInfo taskInfo : listResponse.getTasks()) {, +            assertFalse(taskInfo.isCancellable());, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/tasks/Task.java, +            this instanceof CancellableTask, parentTask);]