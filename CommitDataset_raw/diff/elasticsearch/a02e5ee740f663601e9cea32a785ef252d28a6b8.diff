[+++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +protected abstract boolean isType(String name);, +TYPE: ID ( DOT ID )* { isType(getText()) }?;, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +protected abstract boolean isType(String name);, +TYPE: ID ( DOT ID )* { isType(getText()) }?;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +                 Class<?> interfaceType = method.arguments.get(i - 1 - replaced);, +                     MethodType nestedType = MethodType.methodType(interfaceType, captures);, +                                                              Definition.ClassToName(interfaceType));, +         Class<?> interfaceType = definition.getJavaClassFromPainlessType(interfaceClass);, +         Method interfaceMethod = definition.getPainlessStructFromJavaClass(interfaceType).functionalMethod;, +            Class<?> clazz, String type, String call, Class<?>... captures), +             Method interfaceMethod = definition.getPainlessStructFromJavaClass(clazz).functionalMethod;, +                                                    "to [" + Definition.ClassToName(clazz) + "], not a functional interface");, +                                                        "] in [" + clazz + "]");, +             ref = new FunctionRef(clazz, interfaceMethod, call, handle.type(), captures.length);, +             ref = new FunctionRef(definition, clazz, type, call, captures.length);, +         return callSite.dynamicInvoker().asType(MethodType.methodType(clazz, captures));, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +protected abstract boolean isType(String name);, +TYPE: ID ( DOT ID )* { isType(getText()) }?;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +                 Class<?> interfaceType = method.arguments.get(i - 1 - replaced);, +                     MethodType nestedType = MethodType.methodType(interfaceType, captures);, +                                                              Definition.ClassToName(interfaceType));, +         Class<?> interfaceType = definition.getJavaClassFromPainlessType(interfaceClass);, +         Method interfaceMethod = definition.getPainlessStructFromJavaClass(interfaceType).functionalMethod;, +            Class<?> clazz, String type, String call, Class<?>... captures), +             Method interfaceMethod = definition.getPainlessStructFromJavaClass(clazz).functionalMethod;, +                                                    "to [" + Definition.ClassToName(clazz) + "], not a functional interface");, +                                                        "] in [" + clazz + "]");, +             ref = new FunctionRef(clazz, interfaceMethod, call, handle.type(), captures.length);, +             ref = new FunctionRef(definition, clazz, type, call, captures.length);, +         return callSite.dynamicInvoker().asType(MethodType.methodType(clazz, captures));, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +package org.elasticsearch.painless;, +, +import org.elasticsearch.common.SuppressForbidden;, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +protected abstract boolean isType(String name);, +TYPE: ID ( DOT ID )* { isType(getText()) }?;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +                 Class<?> interfaceType = method.arguments.get(i - 1 - replaced);, +                     MethodType nestedType = MethodType.methodType(interfaceType, captures);, +                                                              Definition.ClassToName(interfaceType));, +         Class<?> interfaceType = definition.getJavaClassFromPainlessType(interfaceClass);, +         Method interfaceMethod = definition.getPainlessStructFromJavaClass(interfaceType).functionalMethod;, +            Class<?> clazz, String type, String call, Class<?>... captures), +             Method interfaceMethod = definition.getPainlessStructFromJavaClass(clazz).functionalMethod;, +                                                    "to [" + Definition.ClassToName(clazz) + "], not a functional interface");, +                                                        "] in [" + clazz + "]");, +             ref = new FunctionRef(clazz, interfaceMethod, call, handle.type(), captures.length);, +             ref = new FunctionRef(definition, clazz, type, call, captures.length);, +         return callSite.dynamicInvoker().asType(MethodType.methodType(clazz, captures));, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +package org.elasticsearch.painless;, +, +import org.elasticsearch.common.SuppressForbidden;, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefMath.java, +import java.lang.invoke.MethodType;, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +protected abstract boolean isType(String name);, +TYPE: ID ( DOT ID )* { isType(getText()) }?;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);, +                struct = definition.getPainlessStructFromJavaClass(iface);, +                 Class<?> interfaceType = method.arguments.get(i - 1 - replaced);, +                     MethodType nestedType = MethodType.methodType(interfaceType, captures);, +                                                              Definition.ClassToName(interfaceType));, +         Class<?> interfaceType = definition.getJavaClassFromPainlessType(interfaceClass);, +         Method interfaceMethod = definition.getPainlessStructFromJavaClass(interfaceType).functionalMethod;, +            Class<?> clazz, String type, String call, Class<?>... captures), +             Method interfaceMethod = definition.getPainlessStructFromJavaClass(clazz).functionalMethod;, +                                                    "to [" + Definition.ClassToName(clazz) + "], not a functional interface");, +                                                        "] in [" + clazz + "]");, +             ref = new FunctionRef(clazz, interfaceMethod, call, handle.type(), captures.length);, +             ref = new FunctionRef(definition, clazz, type, call, captures.length);, +         return callSite.dynamicInvoker().asType(MethodType.methodType(clazz, captures));, +            Struct struct = definition.getPainlessStructFromJavaClass(clazz);]