[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        headers.putAll(in.readMapOfLists());, +        out.writeMapOfLists(headers);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        headers.putAll(in.readMapOfLists());, +        out.writeMapOfLists(headers);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.util.Collections;, +    /**, +     * Read a map of strings to string lists., +     */, +    public Map<String, List<String>> readMapOfLists() throws IOException {, +        int size = readVInt();, +        if (size == 0) {, +            return Collections.emptyMap();, +        }, +        Map<String, List<String>> map = new HashMap<>(size);, +        for (int i = 0; i < size; ++i) {, +            map.put(readString(), readList(StreamInput::readString));, +        }, +        return map;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        headers.putAll(in.readMapOfLists());, +        out.writeMapOfLists(headers);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.util.Collections;, +    /**, +     * Read a map of strings to string lists., +     */, +    public Map<String, List<String>> readMapOfLists() throws IOException {, +        int size = readVInt();, +        if (size == 0) {, +            return Collections.emptyMap();, +        }, +        Map<String, List<String>> map = new HashMap<>(size);, +        for (int i = 0; i < size; ++i) {, +            map.put(readString(), readList(StreamInput::readString));, +        }, +        return map;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +    /**, +     * Writes a map of strings to string lists., +     */, +    public void writeMapOfLists(Map<String, List<String>> map) throws IOException {, +        writeVInt(map.size());, +, +        for (Map.Entry<String, List<String>> entry : map.entrySet()) {, +            writeString(entry.getKey());, +            writeVInt(entry.getValue().size());, +            for (String v : entry.getValue()) {, +                writeString(v);, +            }, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        headers.putAll(in.readMapOfLists());, +        out.writeMapOfLists(headers);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.util.Collections;, +    /**, +     * Read a map of strings to string lists., +     */, +    public Map<String, List<String>> readMapOfLists() throws IOException {, +        int size = readVInt();, +        if (size == 0) {, +            return Collections.emptyMap();, +        }, +        Map<String, List<String>> map = new HashMap<>(size);, +        for (int i = 0; i < size; ++i) {, +            map.put(readString(), readList(StreamInput::readString));, +        }, +        return map;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +    /**, +     * Writes a map of strings to string lists., +     */, +    public void writeMapOfLists(Map<String, List<String>> map) throws IOException {, +        writeVInt(map.size());, +, +        for (Map.Entry<String, List<String>> entry : map.entrySet()) {, +            writeString(entry.getKey());, +            writeVInt(entry.getValue().size());, +            for (String v : entry.getValue()) {, +                writeString(v);, +            }, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +, +import java.util.Iterator;, +import java.util.Set;]