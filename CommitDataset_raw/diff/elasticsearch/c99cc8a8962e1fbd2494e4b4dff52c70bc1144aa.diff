[+++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import java.util.function.BiFunction;, +    private final BiFunction<String, String, Transport.Connection> nodeIdToConnection;, +                                        BiFunction<String, String, Transport.Connection> nodeIdToConnection,, +                Transport.Connection connection = getConnection(null, searchShardTarget.getNodeId());, +    public final Transport.Connection getConnection(String clusterAlias, String nodeId) {, +        return nodeIdToConnection.apply(clusterAlias, nodeId);, +    public final ShardSearchTransportRequest buildShardSearchRequest(SearchShardIterator shardIt) {, +        AliasFilter filter = aliasFilter.get(shardIt.shardId().getIndex().getUUID());, +        float indexBoost = concreteIndexBoosts.getOrDefault(shardIt.shardId().getIndex().getUUID(), DEFAULT_INDEX_BOOST);, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import java.util.function.BiFunction;, +    private final BiFunction<String, String, Transport.Connection> nodeIdToConnection;, +                                        BiFunction<String, String, Transport.Connection> nodeIdToConnection,, +                Transport.Connection connection = getConnection(null, searchShardTarget.getNodeId());, +    public final Transport.Connection getConnection(String clusterAlias, String nodeId) {, +        return nodeIdToConnection.apply(clusterAlias, nodeId);, +    public final ShardSearchTransportRequest buildShardSearchRequest(SearchShardIterator shardIt) {, +        AliasFilter filter = aliasFilter.get(shardIt.shardId().getIndex().getUUID());, +        float indexBoost = concreteIndexBoosts.getOrDefault(shardIt.shardId().getIndex().getUUID(), DEFAULT_INDEX_BOOST);, +++ b/core/src/main/java/org/elasticsearch/action/search/DfsQueryPhase.java, +            Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId());, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import java.util.function.BiFunction;, +    private final BiFunction<String, String, Transport.Connection> nodeIdToConnection;, +                                        BiFunction<String, String, Transport.Connection> nodeIdToConnection,, +                Transport.Connection connection = getConnection(null, searchShardTarget.getNodeId());, +    public final Transport.Connection getConnection(String clusterAlias, String nodeId) {, +        return nodeIdToConnection.apply(clusterAlias, nodeId);, +    public final ShardSearchTransportRequest buildShardSearchRequest(SearchShardIterator shardIt) {, +        AliasFilter filter = aliasFilter.get(shardIt.shardId().getIndex().getUUID());, +        float indexBoost = concreteIndexBoosts.getOrDefault(shardIt.shardId().getIndex().getUUID(), DEFAULT_INDEX_BOOST);, +++ b/core/src/main/java/org/elasticsearch/action/search/DfsQueryPhase.java, +            Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId());, +++ b/core/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +                        Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(),, +                            searchShardTarget.getNodeId());, +                Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId());, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import java.util.function.BiFunction;, +    private final BiFunction<String, String, Transport.Connection> nodeIdToConnection;, +                                        BiFunction<String, String, Transport.Connection> nodeIdToConnection,, +                Transport.Connection connection = getConnection(null, searchShardTarget.getNodeId());, +    public final Transport.Connection getConnection(String clusterAlias, String nodeId) {, +        return nodeIdToConnection.apply(clusterAlias, nodeId);, +    public final ShardSearchTransportRequest buildShardSearchRequest(SearchShardIterator shardIt) {, +        AliasFilter filter = aliasFilter.get(shardIt.shardId().getIndex().getUUID());, +        float indexBoost = concreteIndexBoosts.getOrDefault(shardIt.shardId().getIndex().getUUID(), DEFAULT_INDEX_BOOST);, +++ b/core/src/main/java/org/elasticsearch/action/search/DfsQueryPhase.java, +            Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId());, +++ b/core/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +                        Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(),, +                            searchShardTarget.getNodeId());, +                Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId());, +++ b/core/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, +        SearchShardTarget shardTarget = new SearchShardTarget(nodeId, shardIt.shardId(), shardIt.getClusterAlias(),, +            shardIt.getOriginalIndices());, +                    shardIt.shardId(), shardIt.getClusterAlias(), shardIt.getOriginalIndices()), shardIndex) {, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import java.util.function.BiFunction;, +    private final BiFunction<String, String, Transport.Connection> nodeIdToConnection;, +                                        BiFunction<String, String, Transport.Connection> nodeIdToConnection,, +                Transport.Connection connection = getConnection(null, searchShardTarget.getNodeId());, +    public final Transport.Connection getConnection(String clusterAlias, String nodeId) {, +        return nodeIdToConnection.apply(clusterAlias, nodeId);, +    public final ShardSearchTransportRequest buildShardSearchRequest(SearchShardIterator shardIt) {, +        AliasFilter filter = aliasFilter.get(shardIt.shardId().getIndex().getUUID());, +        float indexBoost = concreteIndexBoosts.getOrDefault(shardIt.shardId().getIndex().getUUID(), DEFAULT_INDEX_BOOST);, +++ b/core/src/main/java/org/elasticsearch/action/search/DfsQueryPhase.java, +            Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId());, +++ b/core/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +                        Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(),, +                            searchShardTarget.getNodeId());, +                Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId());, +++ b/core/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, +        SearchShardTarget shardTarget = new SearchShardTarget(nodeId, shardIt.shardId(), shardIt.getClusterAlias(),, +            shardIt.getOriginalIndices());, +                    shardIt.shardId(), shardIt.getClusterAlias(), shardIt.getOriginalIndices()), shardIndex) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchDfsQueryThenFetchAsyncAction.java, +import java.util.function.BiFunction;, +    SearchDfsQueryThenFetchAsyncAction(final Logger logger, final SearchTransportService searchTransportService,, +            final BiFunction<String, String, Transport.Connection> nodeIdToConnection, final Map<String, AliasFilter> aliasFilter,, +            final Map<String, Float> concreteIndexBoosts, final SearchPhaseController searchPhaseController, final Executor executor,, +            final SearchRequest request, final ActionListener<SearchResponse> listener,, +            final GroupShardsIterator<SearchShardIterator> shardsIts, final TransportSearchAction.SearchTimeProvider timeProvider,, +            final long clusterStateVersion, final SearchTask task) {, +        super("dfs", logger, searchTransportService, nodeIdToConnection, aliasFilter, concreteIndexBoosts, executor, request, listener,, +                shardsIts, timeProvider, clusterStateVersion, task, new SearchPhaseResults<>(shardsIts.size()));, +    protected void executePhaseOnShard(final SearchShardIterator shardIt, final ShardRouting shard,, +        getSearchTransport().sendExecuteDfs(getConnection(shardIt.getClusterAlias(), shard.currentNodeId()),, +            buildShardSearchRequest(shardIt) , getTask(), listener);, +    protected SearchPhase getNextPhase(final SearchPhaseResults<DfsSearchResult> results, final SearchPhaseContext context) {, +        return new DfsQueryPhase(results.results, searchPhaseController, (queryResults) ->, +            new FetchSearchPhase(queryResults, searchPhaseController, context), context);, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import java.util.function.BiFunction;, +    private final BiFunction<String, String, Transport.Connection> nodeIdToConnection;, +                                        BiFunction<String, String, Transport.Connection> nodeIdToConnection,, +                Transport.Connection connection = getConnection(null, searchShardTarget.getNodeId());, +    public final Transport.Connection getConnection(String clusterAlias, String nodeId) {]