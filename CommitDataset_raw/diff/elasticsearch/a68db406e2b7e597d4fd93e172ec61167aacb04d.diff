[+++ b/src/main/java/org/elasticsearch/watcher/execution/AsyncTriggerListener.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.watcher.execution;, +, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.watcher.trigger.TriggerEngine;, +import org.elasticsearch.watcher.trigger.TriggerEvent;, +import org.elasticsearch.watcher.trigger.TriggerService;, +, +/**, + */, +public class AsyncTriggerListener implements TriggerEngine.Listener {, +, +    private final ExecutionService executionService;, +, +    @Inject, +    public AsyncTriggerListener(ExecutionService executionService, TriggerService triggerService) {, +        this.executionService = executionService;, +        triggerService.register(this);, +    }, +, +    @Override, +    public void triggered(Iterable<TriggerEvent> events) {, +        executionService.processEventsAsync(events);, +    }, +, +}, +++ b/src/main/java/org/elasticsearch/watcher/execution/AsyncTriggerListener.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.watcher.execution;, +, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.watcher.trigger.TriggerEngine;, +import org.elasticsearch.watcher.trigger.TriggerEvent;, +import org.elasticsearch.watcher.trigger.TriggerService;, +, +/**, + */, +public class AsyncTriggerListener implements TriggerEngine.Listener {, +, +    private final ExecutionService executionService;, +, +    @Inject, +    public AsyncTriggerListener(ExecutionService executionService, TriggerService triggerService) {, +        this.executionService = executionService;, +        triggerService.register(this);, +    }, +, +    @Override, +    public void triggered(Iterable<TriggerEvent> events) {, +        executionService.processEventsAsync(events);, +    }, +, +}, +++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionModule.java, +import org.elasticsearch.watcher.trigger.TriggerEngine;, +    private final Class<? extends TriggerEngine.Listener> triggerEngineListenerClass;, +        this(InternalWatchExecutor.class, AsyncTriggerListener.class);, +    protected ExecutionModule(Class<? extends WatchExecutor> executorClass, Class<? extends TriggerEngine.Listener> triggerEngineListenerClass) {, +        this.triggerEngineListenerClass = triggerEngineListenerClass;, +        bind(triggerEngineListenerClass).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/watcher/execution/AsyncTriggerListener.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.watcher.execution;, +, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.watcher.trigger.TriggerEngine;, +import org.elasticsearch.watcher.trigger.TriggerEvent;, +import org.elasticsearch.watcher.trigger.TriggerService;, +, +/**, + */, +public class AsyncTriggerListener implements TriggerEngine.Listener {, +, +    private final ExecutionService executionService;, +, +    @Inject, +    public AsyncTriggerListener(ExecutionService executionService, TriggerService triggerService) {, +        this.executionService = executionService;, +        triggerService.register(this);, +    }, +, +    @Override, +    public void triggered(Iterable<TriggerEvent> events) {, +        executionService.processEventsAsync(events);, +    }, +, +}]