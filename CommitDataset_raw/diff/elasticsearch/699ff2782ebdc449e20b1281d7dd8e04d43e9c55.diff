[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +    public <IFD extends IndexFieldData> IFD getForField(FieldMapper mapper) {, +        return getForField(mapper.names(), mapper.fieldDataType2());, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +    public <IFD extends IndexFieldData> IFD getForField(FieldMapper mapper) {, +        return getForField(mapper.names(), mapper.fieldDataType2());, +    }, +, +++ b/src/main/java/org/elasticsearch/search/facet/histogram/HistogramFacetProcessor.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +        FieldMapper keyMapper = context.smartNameFieldMapper(keyField);, +        if (keyMapper == null) {, +        IndexNumericFieldData keyIndexFieldData = context.fieldData().getForField(keyMapper);, +, +        IndexNumericFieldData valueIndexFieldData = null;, +        if (valueField != null) {, +            FieldMapper valueMapper = context.smartNameFieldMapper(valueField);, +            if (valueMapper == null) {, +                throw new FacetPhaseExecutionException(facetName, "No mapping found for value_field [" + valueField + "]");, +            }, +            valueIndexFieldData = context.fieldData().getForField(valueMapper);, +        }, +, +        if (sFrom != null && sTo != null && keyField != null) {, +            long from = ((Number) keyMapper.value(sFrom)).longValue();, +            long to = ((Number) keyMapper.value(sTo)).longValue();, +                return new BoundedValueHistogramFacetCollector(facetName, keyIndexFieldData, valueIndexFieldData, interval, from, to, comparatorType, context);, +                return new BoundedValueScriptHistogramFacetCollector(facetName, keyIndexFieldData, scriptLang, valueScript, params, interval, from, to, comparatorType, context);, +                return new BoundedCountHistogramFacetCollector(facetName, keyIndexFieldData, interval, from, to, comparatorType, context);, +            return new ValueScriptHistogramFacetCollector(facetName, keyIndexFieldData, scriptLang, valueScript, params, interval, comparatorType, context);, +            return new CountHistogramFacetCollector(facetName, keyIndexFieldData, interval, comparatorType, context);, +            return new FullHistogramFacetCollector(facetName, keyIndexFieldData, interval, comparatorType, context);, +            return new ValueHistogramFacetCollector(facetName, keyIndexFieldData, valueIndexFieldData, interval, comparatorType, context);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +    public <IFD extends IndexFieldData> IFD getForField(FieldMapper mapper) {, +        return getForField(mapper.names(), mapper.fieldDataType2());, +    }, +, +++ b/src/main/java/org/elasticsearch/search/facet/histogram/HistogramFacetProcessor.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +        FieldMapper keyMapper = context.smartNameFieldMapper(keyField);, +        if (keyMapper == null) {, +        IndexNumericFieldData keyIndexFieldData = context.fieldData().getForField(keyMapper);, +, +        IndexNumericFieldData valueIndexFieldData = null;, +        if (valueField != null) {, +            FieldMapper valueMapper = context.smartNameFieldMapper(valueField);, +            if (valueMapper == null) {, +                throw new FacetPhaseExecutionException(facetName, "No mapping found for value_field [" + valueField + "]");, +            }, +            valueIndexFieldData = context.fieldData().getForField(valueMapper);, +        }, +, +        if (sFrom != null && sTo != null && keyField != null) {, +            long from = ((Number) keyMapper.value(sFrom)).longValue();, +            long to = ((Number) keyMapper.value(sTo)).longValue();, +                return new BoundedValueHistogramFacetCollector(facetName, keyIndexFieldData, valueIndexFieldData, interval, from, to, comparatorType, context);, +                return new BoundedValueScriptHistogramFacetCollector(facetName, keyIndexFieldData, scriptLang, valueScript, params, interval, from, to, comparatorType, context);, +                return new BoundedCountHistogramFacetCollector(facetName, keyIndexFieldData, interval, from, to, comparatorType, context);, +            return new ValueScriptHistogramFacetCollector(facetName, keyIndexFieldData, scriptLang, valueScript, params, interval, comparatorType, context);, +            return new CountHistogramFacetCollector(facetName, keyIndexFieldData, interval, comparatorType, context);, +            return new FullHistogramFacetCollector(facetName, keyIndexFieldData, interval, comparatorType, context);, +            return new ValueHistogramFacetCollector(facetName, keyIndexFieldData, valueIndexFieldData, interval, comparatorType, context);, +++ b/src/main/java/org/elasticsearch/search/facet/histogram/bounded/BoundedCountHistogramFacetCollector.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.LongValues;, +    private final IndexNumericFieldData indexFieldData;, +    private LongValues values;, +    public BoundedCountHistogramFacetCollector(String facetName, IndexNumericFieldData indexFieldData, long interval, long from, long to, HistogramFacet.ComparatorType comparatorType, SearchContext context) {, +        this.indexFieldData = indexFieldData;, +        values.forEachValueInDoc(doc, histoProc);, +        values = indexFieldData.load(context).getLongValues();, +    public static class HistogramProc implements LongValues.ValueInDocProc {, +        public void onMissing(int docId) {, +        }, +, +        @Override, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +    public <IFD extends IndexFieldData> IFD getForField(FieldMapper mapper) {, +        return getForField(mapper.names(), mapper.fieldDataType2());, +    }, +, +++ b/src/main/java/org/elasticsearch/search/facet/histogram/HistogramFacetProcessor.java, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +        FieldMapper keyMapper = context.smartNameFieldMapper(keyField);, +        if (keyMapper == null) {, +        IndexNumericFieldData keyIndexFieldData = context.fieldData().getForField(keyMapper);, +, +        IndexNumericFieldData valueIndexFieldData = null;, +        if (valueField != null) {, +            FieldMapper valueMapper = context.smartNameFieldMapper(valueField);, +            if (valueMapper == null) {, +                throw new FacetPhaseExecutionException(facetName, "No mapping found for value_field [" + valueField + "]");, +            }, +            valueIndexFieldData = context.fieldData().getForField(valueMapper);, +        }, +, +        if (sFrom != null && sTo != null && keyField != null) {]