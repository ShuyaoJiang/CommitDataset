[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxAgeCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxAgeCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_STRING) {, +            return new MaxAgeCondition(TimeValue.parseTimeValue(parser.text(), NAME));, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxAgeCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxAgeCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_STRING) {, +            return new MaxAgeCondition(TimeValue.parseTimeValue(parser.text(), NAME));, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxDocsCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxDocsCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_NUMBER) {, +            return new MaxDocsCondition(parser.longValue());, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxAgeCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxAgeCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_STRING) {, +            return new MaxAgeCondition(TimeValue.parseTimeValue(parser.text(), NAME));, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxDocsCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxDocsCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_NUMBER) {, +            return new MaxDocsCondition(parser.longValue());, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxSizeCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxSizeCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_STRING) {, +            return new MaxSizeCondition(ByteSizeValue.parseBytesSizeValue(parser.text(), NAME));, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxAgeCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxAgeCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_STRING) {, +            return new MaxAgeCondition(TimeValue.parseTimeValue(parser.text(), NAME));, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxDocsCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxDocsCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_NUMBER) {, +            return new MaxDocsCondition(parser.longValue());, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxSizeCondition.java, +import org.elasticsearch.common.xcontent.XContentParser;, +, +    public static MaxSizeCondition fromXContent(XContentParser parser) throws IOException {, +        if (parser.nextToken() == XContentParser.Token.VALUE_STRING) {, +            return new MaxSizeCondition(ByteSizeValue.parseBytesSizeValue(parser.text(), NAME));, +        } else {, +            throw new IllegalArgumentException("invalid token: " + parser.currentToken());, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/RolloverInfo.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]