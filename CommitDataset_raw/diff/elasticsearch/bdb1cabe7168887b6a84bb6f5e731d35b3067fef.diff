[+++ b/core/src/main/java/org/elasticsearch/discovery/zen/MembershipAction.java, +            ensureIndexCompatibility(Version.CURRENT, request.state.getMetaData());, +     * Ensures that all indices are compatible with the given node version. This will ensure that all indices in the given metadata, +     * will not be created with a newer version of elasticsearch as well as that all indices are newer or equal to the minimum index, +     * compatibility version., +     * @see Version#minimumIndexCompatibilityVersion(), +    static void ensureIndexCompatibility(final Version nodeVersion, MetaData metaData) {, +        Version supportedIndexVersion = nodeVersion.minimumIndexCompatibilityVersion();, +            if (idxMetaData.getCreationVersion().after(nodeVersion)) {, +                throw new IllegalStateException("index " + idxMetaData.getIndex() + " version not supported: ", +                    + idxMetaData.getCreationVersion() + " the node version is: " + nodeVersion);, +            }, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/MembershipAction.java, +            ensureIndexCompatibility(Version.CURRENT, request.state.getMetaData());, +     * Ensures that all indices are compatible with the given node version. This will ensure that all indices in the given metadata, +     * will not be created with a newer version of elasticsearch as well as that all indices are newer or equal to the minimum index, +     * compatibility version., +     * @see Version#minimumIndexCompatibilityVersion(), +    static void ensureIndexCompatibility(final Version nodeVersion, MetaData metaData) {, +        Version supportedIndexVersion = nodeVersion.minimumIndexCompatibilityVersion();, +            if (idxMetaData.getCreationVersion().after(nodeVersion)) {, +                throw new IllegalStateException("index " + idxMetaData.getIndex() + " version not supported: ", +                    + idxMetaData.getCreationVersion() + " the node version is: " + nodeVersion);, +            }, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/NodeJoinController.java, +            MembershipAction.ensureIndexCompatibility(minNodeVersion, currentState.getMetaData());, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/MembershipAction.java, +            ensureIndexCompatibility(Version.CURRENT, request.state.getMetaData());, +     * Ensures that all indices are compatible with the given node version. This will ensure that all indices in the given metadata, +     * will not be created with a newer version of elasticsearch as well as that all indices are newer or equal to the minimum index, +     * compatibility version., +     * @see Version#minimumIndexCompatibilityVersion(), +    static void ensureIndexCompatibility(final Version nodeVersion, MetaData metaData) {, +        Version supportedIndexVersion = nodeVersion.minimumIndexCompatibilityVersion();, +            if (idxMetaData.getCreationVersion().after(nodeVersion)) {, +                throw new IllegalStateException("index " + idxMetaData.getIndex() + " version not supported: ", +                    + idxMetaData.getCreationVersion() + " the node version is: " + nodeVersion);, +            }, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/NodeJoinController.java, +            MembershipAction.ensureIndexCompatibility(minNodeVersion, currentState.getMetaData());, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            MembershipAction.ensureIndexCompatibility(node.getVersion(), state.getMetaData());, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/MembershipAction.java, +            ensureIndexCompatibility(Version.CURRENT, request.state.getMetaData());, +     * Ensures that all indices are compatible with the given node version. This will ensure that all indices in the given metadata, +     * will not be created with a newer version of elasticsearch as well as that all indices are newer or equal to the minimum index, +     * compatibility version., +     * @see Version#minimumIndexCompatibilityVersion(), +    static void ensureIndexCompatibility(final Version nodeVersion, MetaData metaData) {, +        Version supportedIndexVersion = nodeVersion.minimumIndexCompatibilityVersion();, +            if (idxMetaData.getCreationVersion().after(nodeVersion)) {, +                throw new IllegalStateException("index " + idxMetaData.getIndex() + " version not supported: ", +                    + idxMetaData.getCreationVersion() + " the node version is: " + nodeVersion);, +            }, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/NodeJoinController.java, +            MembershipAction.ensureIndexCompatibility(minNodeVersion, currentState.getMetaData());, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            MembershipAction.ensureIndexCompatibility(node.getVersion(), state.getMetaData());, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/MembershipActionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.discovery.zen;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.VersionUtils;, +, +public class MembershipActionTests extends ESTestCase {, +, +    public void testPreventJoinClusterWithNewerIndices() {, +        Settings.builder().build();, +        MetaData.Builder metaBuilder = MetaData.builder();, +        IndexMetaData indexMetaData = IndexMetaData.builder("test"), +            .settings(settings(Version.CURRENT)), +            .numberOfShards(1), +            .numberOfReplicas(1).build();, +        metaBuilder.put(indexMetaData, false);, +        MetaData metaData = metaBuilder.build();, +        MembershipAction.ensureIndexCompatibility(Version.CURRENT, metaData);, +, +        expectThrows(IllegalStateException.class, () ->]