[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleRequestConverters.java, +                .addCommaSeparatedPathParts(explainLifecycleRequest.getIndices()), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleRequestConverters.java, +                .addCommaSeparatedPathParts(explainLifecycleRequest.getIndices()), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/indexlifecycle/ExplainLifecycleRequest.java, +    private final String[] indices;, +    public ExplainLifecycleRequest(String... indices) {, +        if (indices.length == 0) {, +            throw new IllegalArgumentException("Must at least specify one index to explain");, +    public String[] getIndices() {, +        return Objects.hash(Arrays.hashCode(indices), indicesOptions);, +        return Objects.deepEquals(getIndices(), other.getIndices()) &&, +        return "ExplainLifecycleRequest [indices()=" + Arrays.toString(indices) + ", indicesOptions()=" + indicesOptions + "]";, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleRequestConverters.java, +                .addCommaSeparatedPathParts(explainLifecycleRequest.getIndices()), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/indexlifecycle/ExplainLifecycleRequest.java, +    private final String[] indices;, +    public ExplainLifecycleRequest(String... indices) {, +        if (indices.length == 0) {, +            throw new IllegalArgumentException("Must at least specify one index to explain");, +    public String[] getIndices() {, +        return Objects.hash(Arrays.hashCode(indices), indicesOptions);, +        return Objects.deepEquals(getIndices(), other.getIndices()) &&, +        return "ExplainLifecycleRequest [indices()=" + Arrays.toString(indices) + ", indicesOptions()=" + indicesOptions + "]";, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        ExplainLifecycleRequest req = new ExplainLifecycleRequest("foo-01", "baz-01", "squash");, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleRequestConverters.java, +                .addCommaSeparatedPathParts(explainLifecycleRequest.getIndices()), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/indexlifecycle/ExplainLifecycleRequest.java, +    private final String[] indices;, +    public ExplainLifecycleRequest(String... indices) {, +        if (indices.length == 0) {, +            throw new IllegalArgumentException("Must at least specify one index to explain");, +    public String[] getIndices() {, +        return Objects.hash(Arrays.hashCode(indices), indicesOptions);, +        return Objects.deepEquals(getIndices(), other.getIndices()) &&, +        return "ExplainLifecycleRequest [indices()=" + Arrays.toString(indices) + ", indicesOptions()=" + indicesOptions + "]";, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        ExplainLifecycleRequest req = new ExplainLifecycleRequest("foo-01", "baz-01", "squash");, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleRequestConvertersTests.java, +        ExplainLifecycleRequest req = new ExplainLifecycleRequest(randomIndicesNames(1, 10));, +        String idxString = Strings.arrayToCommaDelimitedString(req.getIndices());, +        assertThat(request.getEndpoint(), equalTo("/" + idxString + "/" + "_ilm/explain"));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleRequestConverters.java, +                .addCommaSeparatedPathParts(explainLifecycleRequest.getIndices()), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/indexlifecycle/ExplainLifecycleRequest.java, +    private final String[] indices;, +    public ExplainLifecycleRequest(String... indices) {, +        if (indices.length == 0) {, +            throw new IllegalArgumentException("Must at least specify one index to explain");, +    public String[] getIndices() {, +        return Objects.hash(Arrays.hashCode(indices), indicesOptions);, +        return Objects.deepEquals(getIndices(), other.getIndices()) &&, +        return "ExplainLifecycleRequest [indices()=" + Arrays.toString(indices) + ", indicesOptions()=" + indicesOptions + "]";, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        ExplainLifecycleRequest req = new ExplainLifecycleRequest("foo-01", "baz-01", "squash");, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleRequestConvertersTests.java, +        ExplainLifecycleRequest req = new ExplainLifecycleRequest(randomIndicesNames(1, 10));, +        String idxString = Strings.arrayToCommaDelimitedString(req.getIndices());, +        assertThat(request.getEndpoint(), equalTo("/" + idxString + "/" + "_ilm/explain"));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java, +                .explainLifecycle(new ExplainLifecycleRequest("my_index"), RequestOptions.DEFAULT), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleRequestConverters.java, +                .addCommaSeparatedPathParts(explainLifecycleRequest.getIndices()), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/indexlifecycle/ExplainLifecycleRequest.java, +    private final String[] indices;, +    public ExplainLifecycleRequest(String... indices) {, +        if (indices.length == 0) {, +            throw new IllegalArgumentException("Must at least specify one index to explain");, +    public String[] getIndices() {, +        return Objects.hash(Arrays.hashCode(indices), indicesOptions);, +        return Objects.deepEquals(getIndices(), other.getIndices()) &&, +        return "ExplainLifecycleRequest [indices()=" + Arrays.toString(indices) + ", indicesOptions()=" + indicesOptions + "]";, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        ExplainLifecycleRequest req = new ExplainLifecycleRequest("foo-01", "baz-01", "squash");, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleRequestConvertersTests.java, +        ExplainLifecycleRequest req = new ExplainLifecycleRequest(randomIndicesNames(1, 10));, +        String idxString = Strings.arrayToCommaDelimitedString(req.getIndices());, +        assertThat(request.getEndpoint(), equalTo("/" + idxString + "/" + "_ilm/explain"));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java, +                .explainLifecycle(new ExplainLifecycleRequest("my_index"), RequestOptions.DEFAULT), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/indexlifecycle/ExplainLifecycleRequestTests.java, +import static org.hamcrest.Matchers.equalTo;, +, +    public void testEmptyIndices() {, +        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, ExplainLifecycleRequest::new);, +        assertThat(exception.getMessage(), equalTo("Must at least specify one index to explain"));, +, +    private ExplainLifecycleRequest createTestInstance() {, +        ExplainLifecycleRequest request = new ExplainLifecycleRequest(generateRandomStringArray(20, 20, false, true));, +        String[] indices = instance.getIndices();, +            indices = randomValueOtherThanMany(i -> Arrays.equals(i, instance.getIndices()),, +        ExplainLifecycleRequest newRequest = new ExplainLifecycleRequest(indices);, +        ExplainLifecycleRequest copy = new ExplainLifecycleRequest(original.getIndices());]