[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import java.util.concurrent.TimeUnit;, +        try {, +            injector.getInstance(ThreadPool.class).awaitTermination(10, TimeUnit.SECONDS);, +        } catch (InterruptedException e) {, +            // ignore, +        }, +        try {, +            injector.getInstance(ThreadPool.class).shutdownNow();, +        } catch (Exception e) {, +            // ignore, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import java.util.concurrent.TimeUnit;, +        try {, +            injector.getInstance(ThreadPool.class).awaitTermination(10, TimeUnit.SECONDS);, +        } catch (InterruptedException e) {, +            // ignore, +        }, +        try {, +            injector.getInstance(ThreadPool.class).shutdownNow();, +        } catch (Exception e) {, +            // ignore, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +        logger.warn("sending failed shard for {}, reason [{}]", shardRouting, reason);, +            logger.debug("sending shard started for {}, reason [{}]", shardRouting, reason);, +        logger.warn("received shard failed for {}, reason [{}]", shardRouting, reason);, +            logger.debug("received shard started for {}, reason [{}]", shardRouting, reason);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import java.util.concurrent.TimeUnit;, +        try {, +            injector.getInstance(ThreadPool.class).awaitTermination(10, TimeUnit.SECONDS);, +        } catch (InterruptedException e) {, +            // ignore, +        }, +        try {, +            injector.getInstance(ThreadPool.class).shutdownNow();, +        } catch (Exception e) {, +            // ignore, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +        logger.warn("sending failed shard for {}, reason [{}]", shardRouting, reason);, +            logger.debug("sending shard started for {}, reason [{}]", shardRouting, reason);, +        logger.warn("received shard failed for {}, reason [{}]", shardRouting, reason);, +            logger.debug("received shard started for {}, reason [{}]", shardRouting, reason);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/AbstractFsBlobContainer.java, +        blobStore.executor().execute(new Runnable() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import java.util.concurrent.TimeUnit;, +        try {, +            injector.getInstance(ThreadPool.class).awaitTermination(10, TimeUnit.SECONDS);, +        } catch (InterruptedException e) {, +            // ignore, +        }, +        try {, +            injector.getInstance(ThreadPool.class).shutdownNow();, +        } catch (Exception e) {, +            // ignore, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +        logger.warn("sending failed shard for {}, reason [{}]", shardRouting, reason);, +            logger.debug("sending shard started for {}, reason [{}]", shardRouting, reason);, +        logger.warn("received shard failed for {}, reason [{}]", shardRouting, reason);, +            logger.debug("received shard started for {}, reason [{}]", shardRouting, reason);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/AbstractFsBlobContainer.java, +        blobStore.executor().execute(new Runnable() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsAppendableBlobContainer.java, +            blobStore.executor().execute(new Runnable() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import java.util.concurrent.TimeUnit;, +        try {, +            injector.getInstance(ThreadPool.class).awaitTermination(10, TimeUnit.SECONDS);, +        } catch (InterruptedException e) {, +            // ignore, +        }, +        try {, +            injector.getInstance(ThreadPool.class).shutdownNow();, +        } catch (Exception e) {, +            // ignore, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +        logger.warn("sending failed shard for {}, reason [{}]", shardRouting, reason);, +            logger.debug("sending shard started for {}, reason [{}]", shardRouting, reason);, +        logger.warn("received shard failed for {}, reason [{}]", shardRouting, reason);, +            logger.debug("received shard started for {}, reason [{}]", shardRouting, reason);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/AbstractFsBlobContainer.java, +        blobStore.executor().execute(new Runnable() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsAppendableBlobContainer.java, +            blobStore.executor().execute(new Runnable() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +import java.util.concurrent.Executor;, +    private final Executor executor;, +    private final File path;, +    public FsBlobStore(Settings settings, Executor executor, File path) {, +        this.executor = executor;, +    public Executor executor() {, +        return executor;, +        // nothing to do here..., +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java]