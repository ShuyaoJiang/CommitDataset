[+++ b/TESTING.asciidoc, +If you want to run a specific test on several boxes you can do:, +, +---------------------------------------, +mvn -Dtests.vagrant=all -pl qa/vagrant verify -DtestScripts=*tar*.bats, +---------------------------------------, +, +++ b/TESTING.asciidoc, +If you want to run a specific test on several boxes you can do:, +, +---------------------------------------, +mvn -Dtests.vagrant=all -pl qa/vagrant verify -DtestScripts=*tar*.bats, +---------------------------------------, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +    private static final Constructor<? extends ElasticsearchException>[] ID_TO_SUPPLIER;, +    private static final Map<Class<? extends ElasticsearchException>, Integer> CLASS_TO_ID;, +        Constructor<? extends ElasticsearchException> elasticsearchException = ID_TO_SUPPLIER[id];, +        try {, +            return elasticsearchException.newInstance(input);, +        } catch (InstantiationException|IllegalAccessException|InvocationTargetException e) {, +            throw new IOException("failed to read exception for id [" + id + "]", e);, +        }, +        return CLASS_TO_ID.containsKey(exception);, +        return CLASS_TO_ID.keySet();, +        return CLASS_TO_ID.get(exception).intValue();, +    static {, +        // each exception gets an ordinal assigned that must never change. While the exception name can, +        // NOTE: ONLY APPEND TO THE END and NEVER REMOVE EXCEPTIONS IN MINOR VERSIONS, +        final Map<Class<? extends ElasticsearchException>, Integer> exceptions = new HashMap<>();, +        exceptions.put(org.elasticsearch.index.snapshots.IndexShardSnapshotFailedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.search.dfs.DfsPhaseExecutionException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.common.util.CancellableThreads.ExecutionCancelledException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.discovery.MasterNotDiscoveredException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.ElasticsearchSecurityException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.snapshots.IndexShardRestoreException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.IndexClosedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.http.BindHttpException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.action.search.ReduceSearchPhaseException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.node.NodeClosedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.engine.SnapshotFailedEngineException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.shard.ShardNotFoundException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.transport.ConnectTransportException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.transport.NotSerializableTransportException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.transport.ResponseHandlerFailureTransportException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.IndexCreationException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.IndexNotFoundException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.cluster.routing.IllegalShardRoutingStateException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.action.support.broadcast.BroadcastShardOperationFailedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.ResourceNotFoundException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.transport.ActionTransportException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.ElasticsearchGenerationException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.engine.CreateFailedEngineException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.shard.IndexShardStartedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.search.SearchContextMissingException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.script.ScriptException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.shard.TranslogRecoveryPerformer.BatchOperationException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.snapshots.SnapshotCreationException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.engine.DeleteFailedEngineException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.engine.DocumentMissingException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.snapshots.SnapshotException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.InvalidAliasNameException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.InvalidIndexNameException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.IndexPrimaryShardNotAllocatedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.transport.TransportException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.ElasticsearchParseException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.search.SearchException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.mapper.MapperException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.InvalidTypeNameException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.snapshots.SnapshotRestoreException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.common.ParsingException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.shard.IndexShardClosedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.recovery.RecoverFilesRecoveryException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.translog.TruncatedTranslogException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.recovery.RecoveryFailedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.shard.IndexShardRelocatedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.transport.NodeShouldNotConnectException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.IndexTemplateAlreadyExistsException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.translog.TranslogCorruptedException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.cluster.block.ClusterBlockException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.search.fetch.FetchPhaseExecutionException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.IndexShardAlreadyExistsException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.engine.VersionConflictEngineException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.engine.EngineException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.action.NoSuchNodeException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.common.settings.SettingsException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.IndexTemplateMissingException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.transport.SendRequestTransportException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.common.util.concurrent.EsRejectedExecutionException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.common.lucene.Lucene.EarlyTerminationException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.cluster.routing.RoutingValidationException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper.class, exceptions.size());, +        exceptions.put(org.elasticsearch.indices.AliasFilterParsingException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.engine.DeleteByQueryFailedEngineException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.gateway.GatewayException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.index.shard.IndexShardNotRecoveringException.class, exceptions.size());, +        exceptions.put(org.elasticsearch.http.HttpException.class, exceptions.size());]