[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +            ClientTemplate transportClient = new ClientTemplate(injector, pluginLifecycleComponents, nodesService, proxy, namedWriteableRegistry);, +        private final NamedWriteableRegistry namedWriteableRegistry;, +        private ClientTemplate(Injector injector, List<LifecycleComponent> pluginLifecycleComponents,, +                TransportClientNodesService nodesService, TransportProxyClient proxy, NamedWriteableRegistry namedWriteableRegistry) {, +            this.namedWriteableRegistry = namedWriteableRegistry;, +    final NamedWriteableRegistry namedWriteableRegistry;, +        this.namedWriteableRegistry = template.namedWriteableRegistry;, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +            ClientTemplate transportClient = new ClientTemplate(injector, pluginLifecycleComponents, nodesService, proxy, namedWriteableRegistry);, +        private final NamedWriteableRegistry namedWriteableRegistry;, +        private ClientTemplate(Injector injector, List<LifecycleComponent> pluginLifecycleComponents,, +                TransportClientNodesService nodesService, TransportProxyClient proxy, NamedWriteableRegistry namedWriteableRegistry) {, +            this.namedWriteableRegistry = namedWriteableRegistry;, +    final NamedWriteableRegistry namedWriteableRegistry;, +        this.namedWriteableRegistry = template.namedWriteableRegistry;, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientIT.java, +, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream(), +                                         .flatMap(p -> p.getNamedWriteables().stream()), +                                         .collect(Collectors.toList()));, +            ClientTemplate transportClient = new ClientTemplate(injector, pluginLifecycleComponents, nodesService, proxy, namedWriteableRegistry);, +        private final NamedWriteableRegistry namedWriteableRegistry;, +        private ClientTemplate(Injector injector, List<LifecycleComponent> pluginLifecycleComponents,, +                TransportClientNodesService nodesService, TransportProxyClient proxy, NamedWriteableRegistry namedWriteableRegistry) {, +            this.namedWriteableRegistry = namedWriteableRegistry;, +    final NamedWriteableRegistry namedWriteableRegistry;, +        this.namedWriteableRegistry = template.namedWriteableRegistry;, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientIT.java, +, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientTests.java, +import org.elasticsearch.common.io.stream.NamedWriteable;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry.Entry;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.plugins.Plugin;, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.List;, +, +    /**, +     * test that when plugins are provided that want to register, +     * {@link NamedWriteable}, those are also made known to the, +     * {@link NamedWriteableRegistry} of the transport client, +     */, +    public void testPluginNamedWriteablesRegistered() {, +        Settings baseSettings = Settings.builder(), +                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +                .build();, +        try (TransportClient client = new MockTransportClient(baseSettings, Arrays.asList(MockPlugin.class))) {, +            assertNotNull(client.namedWriteableRegistry.getReader(MockPlugin.MockNamedWriteable.class, MockPlugin.MockNamedWriteable.NAME));, +        }, +    }, +, +    public static class MockPlugin extends Plugin {, +, +        @Override, +        public List<Entry> getNamedWriteables() {, +            return Arrays.asList(new Entry[]{ new Entry(MockNamedWriteable.class, MockNamedWriteable.NAME, MockNamedWriteable::new)});, +        }, +, +        public class MockNamedWriteable implements NamedWriteable {, +, +            static final String NAME = "mockNamedWritable";, +, +            MockNamedWriteable(StreamInput in) {, +            }, +, +            @Override, +            public void writeTo(StreamOutput out) throws IOException {, +            }, +, +            @Override, +            public String getWriteableName() {, +                return NAME;, +            }, +, +        }, +    }]