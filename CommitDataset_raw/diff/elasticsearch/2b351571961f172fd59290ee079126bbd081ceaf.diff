[+++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +==== Mapping, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value for fields with multiple values (true) or throw an exception., +, +[float], +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +==== Mapping, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value for fields with multiple values (true) or throw an exception., +, +[float], +++ b/docs/reference/sql/endpoints/rest.asciidoc, +|field_multi_value_leniency, +|false, +|Throw an exception when encountering multiple values for a field (default) or be lenient and return the first value from the list (without any guarantees of what that will be - typically the first in natural ascending order)., +, +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +==== Mapping, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value for fields with multiple values (true) or throw an exception., +, +[float], +++ b/docs/reference/sql/endpoints/rest.asciidoc, +|field_multi_value_leniency, +|false, +|Throw an exception when encountering multiple values for a field (default) or be lenient and return the first value from the list (without any guarantees of what that will be - typically the first in natural ascending order)., +, +++ b/docs/reference/sql/limitations.asciidoc, +When multiple values are returned for a field, by default, {es-sql} will throw an exception. However, it is possible to change this behavior through `field_multi_value_leniency` parameter in REST (disabled by default) or, +`field.multi.value.leniency` in drivers (enabled by default)., +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +==== Mapping, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value for fields with multiple values (true) or throw an exception., +, +[float], +++ b/docs/reference/sql/endpoints/rest.asciidoc, +|field_multi_value_leniency, +|false, +|Throw an exception when encountering multiple values for a field (default) or be lenient and return the first value from the list (without any guarantees of what that will be - typically the first in natural ascending order)., +, +++ b/docs/reference/sql/limitations.asciidoc, +When multiple values are returned for a field, by default, {es-sql} will throw an exception. However, it is possible to change this behavior through `field_multi_value_leniency` parameter in REST (disabled by default) or, +`field.multi.value.leniency` in drivers (enabled by default)., +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfiguration.java, +    static final String TIME_ZONE = "timezone";, +    static final String FIELD_MULTI_VALUE_LENIENCY = "field.multi.value.leniency";, +    static final String FIELD_MULTI_VALUE_LENIENCY_DEFAULT = "true";, +, +, +    private static final Set<String> OPTION_NAMES = new LinkedHashSet<>(, +            Arrays.asList(TIME_ZONE, FIELD_MULTI_VALUE_LENIENCY, DEBUG, DEBUG_OUTPUT));, +        // EsDriver/EsDataSource are not used and the impl. classes used directly, +    private boolean fieldMultiValueLeniency;, +        this.fieldMultiValueLeniency = parseValue(FIELD_MULTI_VALUE_LENIENCY,, +                props.getProperty(FIELD_MULTI_VALUE_LENIENCY, FIELD_MULTI_VALUE_LENIENCY_DEFAULT), Boolean::parseBoolean);, +    public boolean fieldMultiValueLeniency() {, +        return fieldMultiValueLeniency;, +    }, +, +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +==== Mapping, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value for fields with multiple values (true) or throw an exception., +, +[float], +++ b/docs/reference/sql/endpoints/rest.asciidoc, +|field_multi_value_leniency, +|false, +|Throw an exception when encountering multiple values for a field (default) or be lenient and return the first value from the list (without any guarantees of what that will be - typically the first in natural ascending order)., +, +++ b/docs/reference/sql/limitations.asciidoc, +When multiple values are returned for a field, by default, {es-sql} will throw an exception. However, it is possible to change this behavior through `field_multi_value_leniency` parameter in REST (disabled by default) or, +`field.multi.value.leniency` in drivers (enabled by default)., +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfiguration.java, +    static final String TIME_ZONE = "timezone";, +    static final String FIELD_MULTI_VALUE_LENIENCY = "field.multi.value.leniency";, +    static final String FIELD_MULTI_VALUE_LENIENCY_DEFAULT = "true";, +, +, +    private static final Set<String> OPTION_NAMES = new LinkedHashSet<>(, +            Arrays.asList(TIME_ZONE, FIELD_MULTI_VALUE_LENIENCY, DEBUG, DEBUG_OUTPUT));, +        // EsDriver/EsDataSource are not used and the impl. classes used directly, +    private boolean fieldMultiValueLeniency;, +        this.fieldMultiValueLeniency = parseValue(FIELD_MULTI_VALUE_LENIENCY,, +                props.getProperty(FIELD_MULTI_VALUE_LENIENCY, FIELD_MULTI_VALUE_LENIENCY_DEFAULT), Boolean::parseBoolean);, +    public boolean fieldMultiValueLeniency() {, +        return fieldMultiValueLeniency;, +    }, +, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcHttpClient.java, +        SqlQueryRequest sqlRequest = new SqlQueryRequest(sql, params, conCfg.zoneId(),, +                TimeValue.timeValueMillis(meta.timeoutInMs()),, +                TimeValue.timeValueMillis(meta.queryTimeoutInMs()),, +                null,, +                Boolean.FALSE,, +                null,, +                new RequestInfo(Mode.JDBC),, +                conCfg.fieldMultiValueLeniency());, +++ b/docs/reference/sql/endpoints/jdbc.asciidoc, +==== Mapping, +`field.multi.value.leniency` (default `true`):: Whether to be lenient and return the first value for fields with multiple values (true) or throw an exception., +, +[float]]