[+++ b/x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/integration/MonitoringIT.java, +            //final Request bulkRequest = new Request("POST", "/_xpack/monitoring/_bulk");, +            //<<add all parameters>, +            //bulkRequest.setJsonEntity(createBulkEntity());, +            //final Response bulkResponse = getRestClient().performRequest(request);, +++ b/x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/integration/MonitoringIT.java, +            //final Request bulkRequest = new Request("POST", "/_xpack/monitoring/_bulk");, +            //<<add all parameters>, +            //bulkRequest.setJsonEntity(createBulkEntity());, +            //final Response bulkResponse = getRestClient().performRequest(request);, +++ b/x-pack/qa/saml-idp-tests/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticationIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +        Request request = new Request("PUT", "/_xpack/security/user/kibana/_password");, +        request.setJsonEntity("{ \"password\" : \"" + KIBANA_PASSWORD + "\" }");, +        adminClient().performRequest(request);, +        Request request = new Request("PUT", "/_xpack/security/role_mapping/thor-kibana");, +        request.setJsonEntity(Strings.toString(XContentBuilder.builder(XContentType.JSON.xContent()), +                .endObject()));, +        adminClient().performRequest(request);, +        Request request = new Request("GET", "/_xpack/security/_authenticate");, +        RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader("Authorization", "Bearer " + accessToken);, +        request.setOptions(options);, +        final Map<String, Object> map = entityAsMap(client().performRequest(request));, +        Request request = new Request("POST", "/_xpack/security/oauth2/token");, +        request.setJsonEntity("{ \"grant_type\":\"refresh_token\", \"refresh_token\":\"" + refreshToken + "\" }");, +        kibanaAuth(request);, +        final Map<String, Object> result = entityAsMap(client().performRequest(request));, +        Request request = new Request("POST", "/_xpack/security/saml/prepare");, +        request.setJsonEntity("{}");, +        kibanaAuth(request);, +        final Map<String, Object> body = entityAsMap(client().performRequest(request));, +        Request request = new Request("POST", "/_xpack/security/saml/authenticate");, +        request.setJsonEntity("{ \"content\" : \"" + saml + "\", \"ids\": [\"" + id + "\"] }");, +        kibanaAuth(request);, +        return client().performRequest(request);, +    private static void kibanaAuth(Request request) {, +        RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader("Authorization",, +                UsernamePasswordToken.basicAuthHeaderValue("kibana", new SecureString(KIBANA_PASSWORD.toCharArray())));, +        request.setOptions(options);, +++ b/x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/integration/MonitoringIT.java, +            //final Request bulkRequest = new Request("POST", "/_xpack/monitoring/_bulk");, +            //<<add all parameters>, +            //bulkRequest.setJsonEntity(createBulkEntity());, +            //final Response bulkResponse = getRestClient().performRequest(request);, +++ b/x-pack/qa/saml-idp-tests/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticationIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +        Request request = new Request("PUT", "/_xpack/security/user/kibana/_password");, +        request.setJsonEntity("{ \"password\" : \"" + KIBANA_PASSWORD + "\" }");, +        adminClient().performRequest(request);, +        Request request = new Request("PUT", "/_xpack/security/role_mapping/thor-kibana");, +        request.setJsonEntity(Strings.toString(XContentBuilder.builder(XContentType.JSON.xContent()), +                .endObject()));, +        adminClient().performRequest(request);, +        Request request = new Request("GET", "/_xpack/security/_authenticate");, +        RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader("Authorization", "Bearer " + accessToken);, +        request.setOptions(options);, +        final Map<String, Object> map = entityAsMap(client().performRequest(request));, +        Request request = new Request("POST", "/_xpack/security/oauth2/token");, +        request.setJsonEntity("{ \"grant_type\":\"refresh_token\", \"refresh_token\":\"" + refreshToken + "\" }");, +        kibanaAuth(request);, +        final Map<String, Object> result = entityAsMap(client().performRequest(request));, +        Request request = new Request("POST", "/_xpack/security/saml/prepare");, +        request.setJsonEntity("{}");, +        kibanaAuth(request);, +        final Map<String, Object> body = entityAsMap(client().performRequest(request));, +        Request request = new Request("POST", "/_xpack/security/saml/authenticate");, +        request.setJsonEntity("{ \"content\" : \"" + saml + "\", \"ids\": [\"" + id + "\"] }");, +        kibanaAuth(request);, +        return client().performRequest(request);, +    private static void kibanaAuth(Request request) {, +        RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader("Authorization",, +                UsernamePasswordToken.basicAuthHeaderValue("kibana", new SecureString(KIBANA_PASSWORD.toCharArray())));, +        request.setOptions(options);, +++ b/x-pack/qa/security-setup-password-tests/src/test/java/org/elasticsearch/xpack/security/authc/esnative/tool/SetupPasswordToolIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +        Response nodesResponse = client().performRequest(new Request("GET", "/_nodes/http"));, +                Request request = new Request("GET", "/_xpack/security/_authenticate");, +                RequestOptions.Builder options = request.getOptions().toBuilder();, +                options.addHeader("Authorization", basicHeader);, +                request.setOptions(options);, +                Map<String, Object> userInfoMap = entityAsMap(client().performRequest(request));]