[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +, +                    project.testClusters.integTest.plugin(, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +, +                    project.testClusters.integTest.plugin(, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +                "$name" {, +            runner.useCluster project.testClusters."$name", +                ElasticsearchNode node = project.testClusters."${name}", +    public void runner(Closure configure) {, +        project.tasks.getByName("${name}Runner").configure(configure), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +, +                    project.testClusters.integTest.plugin(, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +                "$name" {, +            runner.useCluster project.testClusters."$name", +                ElasticsearchNode node = project.testClusters."${name}", +    public void runner(Closure configure) {, +        project.tasks.getByName("${name}Runner").configure(configure), +    }, +, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java, +import java.io.ByteArrayInputStream;, +import java.io.InputStream;, +import java.util.HashSet;, +import java.util.Set;, +import java.util.function.Supplier;, +    private final Map<String, Supplier<CharSequence>> settings = new LinkedHashMap<>();, +    private final Map<String, Supplier<CharSequence>> keystoreSettings = new LinkedHashMap<>();, +    private final Map<String, Supplier<CharSequence>> systemProperties = new LinkedHashMap<>();, +    private final Map<String, Supplier<CharSequence>> environment = new LinkedHashMap<>();, +    public void keystore(String key, String value) {, +        addSupplier("Keystore", keystoreSettings, key, value);, +    }, +, +    public void keystore(String key, Supplier<CharSequence> valueSupplier) {, +        addSupplier("Keystore", keystoreSettings, key, valueSupplier);, +    }, +, +    public void setting(String key, String value) {, +        addSupplier("Settings", settings, key, value);, +    }, +, +    public void setting(String key, Supplier<CharSequence> valueSupplier) {, +        addSupplier("Setting", settings, key, valueSupplier);, +    }, +, +    public void systemProperty(String key, String value) {, +        addSupplier("Java System property", systemProperties, key, value);, +    }, +, +    public void systemProperty(String key, Supplier<CharSequence> valueSupplier) {, +        addSupplier("Java System property", systemProperties, key, valueSupplier);, +    }, +, +    public void environment(String key, String value) {, +        addSupplier("Environment variable", environment, key, value);, +    }, +, +    public void environment(String key, Supplier<CharSequence> valueSupplier) {, +        addSupplier("Environment variable", environment, key, valueSupplier);, +    }, +, +    private void addSupplier(String name, Map<String, Supplier<CharSequence>> collector, String key, Supplier<CharSequence> valueSupplier) {, +        requireNonNull(key, name + " key was null when configuring test cluster `" + this + "`");, +        requireNonNull(valueSupplier, name + " value supplier was null when configuring test cluster `" + this + "`");, +        collector.put(key, valueSupplier);, +    }, +, +    private void addSupplier(String name, Map<String, Supplier<CharSequence>> collector, String key, String actualValue) {, +        requireNonNull(actualValue, name + " value was null when configuring test cluster `" + this + "`");, +        addSupplier(name, collector, key, () -> actualValue);, +    }, +, +    private void checkSuppliers(String name, Map<String, Supplier<CharSequence>> collector) {, +        collector.forEach((key, value) -> {, +            requireNonNull(value.get().toString(), name + " supplied value was null when configuring test cluster `" + this + "`");, +        });, +    }, +, +, +, +        if (keystoreSettings.isEmpty() == false) {, +            checkSuppliers("Keystore", keystoreSettings);, +            runElaticsearchBinScript("elasticsearch-keystore", "create");, +            keystoreSettings.forEach((key, value) -> {, +                runElaticsearchBinScriptWithInput(value.get().toString(), "elasticsearch-keystore", "add", "-x", key);, +            });, +        }, +, +    private void runElaticsearchBinScriptWithInput(String input, String tool, String... args) {, +        try (InputStream byteArrayInputStream = new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8))) {, +                spec.setStandardInput(byteArrayInputStream);, +, +        } catch (IOException e) {, +            throw new UncheckedIOException(e);]