[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.rest.RestStatus;, +import static java.util.Collections.singleton;, +, +    /**, +     * Get cluster health using the Cluster Health API., +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html"> Cluster Health API on elastic.co</a>, +     * <p>, +     * If timeout occurred, {@link ClusterHealthResponse} will have isTimedOut() == true and status() == RestStatus.REQUEST_TIMEOUT, +     * @param healthRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public ClusterHealthResponse health(ClusterHealthRequest healthRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(healthRequest, RequestConverters::clusterHealth, options,, +                ClusterHealthResponse::fromXContent, singleton(RestStatus.REQUEST_TIMEOUT.getStatus()));, +    }, +, +    /**, +     * Asynchronously get cluster health using the Cluster Health API., +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html"> Cluster Health API on elastic.co</a>, +     * If timeout occurred, {@link ClusterHealthResponse} will have isTimedOut() == true and status() == RestStatus.REQUEST_TIMEOUT, +     * @param healthRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void healthAsync(ClusterHealthRequest healthRequest, RequestOptions options, ActionListener<ClusterHealthResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(healthRequest, RequestConverters::clusterHealth, options,, +                ClusterHealthResponse::fromXContent, listener, singleton(RestStatus.REQUEST_TIMEOUT.getStatus()));, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.rest.RestStatus;, +import static java.util.Collections.singleton;, +, +    /**, +     * Get cluster health using the Cluster Health API., +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html"> Cluster Health API on elastic.co</a>, +     * <p>, +     * If timeout occurred, {@link ClusterHealthResponse} will have isTimedOut() == true and status() == RestStatus.REQUEST_TIMEOUT, +     * @param healthRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public ClusterHealthResponse health(ClusterHealthRequest healthRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(healthRequest, RequestConverters::clusterHealth, options,, +                ClusterHealthResponse::fromXContent, singleton(RestStatus.REQUEST_TIMEOUT.getStatus()));, +    }, +, +    /**, +     * Asynchronously get cluster health using the Cluster Health API., +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html"> Cluster Health API on elastic.co</a>, +     * If timeout occurred, {@link ClusterHealthResponse} will have isTimedOut() == true and status() == RestStatus.REQUEST_TIMEOUT, +     * @param healthRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void healthAsync(ClusterHealthRequest healthRequest, RequestOptions options, ActionListener<ClusterHealthResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(healthRequest, RequestConverters::clusterHealth, options,, +                ClusterHealthResponse::fromXContent, listener, singleton(RestStatus.REQUEST_TIMEOUT.getStatus()));, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.common.Priority;, +    static Request clusterHealth(ClusterHealthRequest healthRequest) {, +        String[] indices = healthRequest.indices() == null ? Strings.EMPTY_ARRAY : healthRequest.indices();, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_cluster/health"), +            .addCommaSeparatedPathParts(indices), +            .build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        new Params(request), +            .withWaitForStatus(healthRequest.waitForStatus()), +            .withWaitForNoRelocatingShards(healthRequest.waitForNoRelocatingShards()), +            .withWaitForNoInitializingShards(healthRequest.waitForNoInitializingShards()), +            .withWaitForActiveShards(healthRequest.waitForActiveShards()), +            .withWaitForNodes(healthRequest.waitForNodes()), +            .withWaitForEvents(healthRequest.waitForEvents()), +            .withTimeout(healthRequest.timeout()), +            .withMasterTimeout(healthRequest.masterNodeTimeout()), +            .withLocal(healthRequest.local()), +            .withLevel(healthRequest.level());, +        return request;, +    }, +, +, +        Params withWaitForStatus(ClusterHealthStatus status) {, +            if (status != null) {, +                return putParam("wait_for_status", status.name().toLowerCase(Locale.ROOT));]