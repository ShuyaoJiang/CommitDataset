[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.Locale;, +            final String message = String.format(, +                    Locale.ROOT,, +                    "no data nodes with %s [%s] found for shard: %s",, +                    nodeAttributes.length == 1 ? "criteria" : "criterion",, +                    String.join(",", nodeAttributes),, +                    shardId());, +            throw new IllegalArgumentException(message);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.Locale;, +            final String message = String.format(, +                    Locale.ROOT,, +                    "no data nodes with %s [%s] found for shard: %s",, +                    nodeAttributes.length == 1 ? "criteria" : "criterion",, +                    String.join(",", nodeAttributes),, +                    shardId());, +            throw new IllegalArgumentException(message);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.Locale;, +            final String message = String.format(, +                    Locale.ROOT,, +                    "no data nodes with %s [%s] found for shard: %s",, +                    nodeAttributes.length == 1 ? "criteria" : "criterion",, +                    String.join(",", nodeAttributes),, +                    shardId());, +            throw new IllegalArgumentException(message);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/Preference.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.Locale;, +            final String message = String.format(, +                    Locale.ROOT,, +                    "no data nodes with %s [%s] found for shard: %s",, +                    nodeAttributes.length == 1 ? "criteria" : "criterion",, +                    String.join(",", nodeAttributes),, +                    shardId());, +            throw new IllegalArgumentException(message);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/Preference.java, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/OperationRoutingTests.java, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.hamcrest.object.HasToString.hasToString;, +                    new OperationRouting(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)), +    public void testThatOnlyNodesSupportNodeIds() throws InterruptedException, IOException {, +        TestThreadPool threadPool = null;, +        ClusterService clusterService = null;, +        try {, +            threadPool = new TestThreadPool("testThatOnlyNodesSupportNodeIds");, +            clusterService = ClusterServiceUtils.createClusterService(threadPool);, +            final String indexName = "test";, +            ClusterServiceUtils.setState(clusterService, ClusterStateCreationUtils.stateWithActivePrimary(indexName, true, randomInt(8)));, +            final Index index = clusterService.state().metaData().index(indexName).getIndex();, +            final List<ShardRouting> shards = clusterService.state().getRoutingNodes().assignedShards(new ShardId(index, 0));, +            final int count = randomIntBetween(1, shards.size());, +            int position = 0;, +            final List<String> nodes = new ArrayList<>();, +            final List<ShardRouting> expected = new ArrayList<>();, +            for (int i = 0; i < count; i++) {, +                if (randomBoolean() && !shards.get(position).initializing()) {, +                    nodes.add(shards.get(position).currentNodeId());, +                    expected.add(shards.get(position));, +                    position++;, +                } else {, +                    nodes.add("missing_" + i);, +                }, +            }, +            if (expected.size() > 0) {, +                final ShardIterator it =, +                    new OperationRouting(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)), +                        .getShards(clusterService.state(), indexName, 0, "_only_nodes:" + String.join(",", nodes));, +                final List<ShardRouting> only = new ArrayList<>();, +                ShardRouting shard;, +                while ((shard = it.nextOrNull()) != null) {, +                    only.add(shard);, +                }, +                assertThat(new HashSet<>(only), equalTo(new HashSet<>(expected)));, +            } else {, +                final ClusterService cs = clusterService;, +                final IllegalArgumentException e = expectThrows(, +                    IllegalArgumentException.class,, +                    () -> new OperationRouting(, +                            Settings.EMPTY,, +                            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)), +                        .getShards(cs.state(), indexName, 0, "_only_nodes:" + String.join(",", nodes)));, +                if (nodes.size() == 1) {, +                    assertThat(, +                        e,, +                        hasToString(containsString(, +                            "no data nodes with criteria [" + String.join(",", nodes) + "] found for shard: [test][0]")));, +                } else {, +                    assertThat(, +                        e,, +                        hasToString(containsString(, +                            "no data nodes with criterion [" + String.join(",", nodes) + "] found for shard: [test][0]")));, +                }, +            }, +        } finally {, +            IOUtils.close(clusterService);]