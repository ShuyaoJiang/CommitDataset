[+++ b/core/src/main/java/org/elasticsearch/rest/RestController.java, +++ b/core/src/main/java/org/elasticsearch/rest/RestController.java, +++ b/core/src/test/java/org/elasticsearch/rest/RestControllerTests.java, +        // the rest controller relies on the caller to stash the context, so we should expect these values here as we didn't stash the, +        // context in this test, +        assertEquals("true", threadContext.getHeader("header.1"));, +        assertEquals("true", threadContext.getHeader("header.2"));, +        assertNull(threadContext.getHeader("header.3"));, +++ b/core/src/main/java/org/elasticsearch/rest/RestController.java, +++ b/core/src/test/java/org/elasticsearch/rest/RestControllerTests.java, +        // the rest controller relies on the caller to stash the context, so we should expect these values here as we didn't stash the, +        // context in this test, +        assertEquals("true", threadContext.getHeader("header.1"));, +        assertEquals("true", threadContext.getHeader("header.2"));, +        assertNull(threadContext.getHeader("header.3"));, +++ b/modules/transport-netty4/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-try", +++ b/core/src/main/java/org/elasticsearch/rest/RestController.java, +++ b/core/src/test/java/org/elasticsearch/rest/RestControllerTests.java, +        // the rest controller relies on the caller to stash the context, so we should expect these values here as we didn't stash the, +        // context in this test, +        assertEquals("true", threadContext.getHeader("header.1"));, +        assertEquals("true", threadContext.getHeader("header.2"));, +        assertNull(threadContext.getHeader("header.3"));, +++ b/modules/transport-netty4/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-try", +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        final ThreadContext threadContext = threadPool.getThreadContext();, +        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +            dispatcher.dispatchRequest(request, channel, threadContext);, +        }, +        final ThreadContext threadContext = threadPool.getThreadContext();, +        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +            dispatcher.dispatchBadRequest(request, channel, threadContext, cause);, +        }, +++ b/core/src/main/java/org/elasticsearch/rest/RestController.java, +++ b/core/src/test/java/org/elasticsearch/rest/RestControllerTests.java, +        // the rest controller relies on the caller to stash the context, so we should expect these values here as we didn't stash the, +        // context in this test, +        assertEquals("true", threadContext.getHeader("header.1"));, +        assertEquals("true", threadContext.getHeader("header.2"));, +        assertNull(threadContext.getHeader("header.3"));, +++ b/modules/transport-netty4/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-try", +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        final ThreadContext threadContext = threadPool.getThreadContext();, +        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +            dispatcher.dispatchRequest(request, channel, threadContext);, +        }, +        final ThreadContext threadContext = threadPool.getThreadContext();, +        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +            dispatcher.dispatchBadRequest(request, channel, threadContext, cause);, +        }, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java, +    public void testDispatchDoesNotModifyThreadContext() throws InterruptedException {, +        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {, +, +            @Override, +            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {, +                threadContext.putHeader("foo", "bar");, +                threadContext.putTransient("bar", "baz");, +            }, +, +            @Override, +            public void dispatchBadRequest(final RestRequest request,, +                                           final RestChannel channel,, +                                           final ThreadContext threadContext,, +                                           final Throwable cause) {, +                threadContext.putHeader("foo_bad", "bar");, +                threadContext.putTransient("bar_bad", "baz");, +            }, +, +        };, +, +        try (Netty4HttpServerTransport transport =, +                 new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {, +            transport.start();, +, +            transport.dispatchRequest(null, null);, +            assertNull(threadPool.getThreadContext().getHeader("foo"));, +            assertNull(threadPool.getThreadContext().getTransient("bar"));, +, +            transport.dispatchBadRequest(null, null, null);, +            assertNull(threadPool.getThreadContext().getHeader("foo_bad"));, +            assertNull(threadPool.getThreadContext().getTransient("bar_bad"));, +        }, +    }]