[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/histogram/HistogramFacetCollectorParser.java, +                } else if ("order".equals(fieldName) || "comparator".equals(fieldName)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/histogram/HistogramFacetCollectorParser.java, +                } else if ("order".equals(fieldName) || "comparator".equals(fieldName)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetBuilder.java, +import org.elasticsearch.common.collect.Maps;, +import java.util.Map;, +    private String script;, +    private Map<String, Object> params;, +    public TermsFacetBuilder script(String script) {, +        this.script = script;, +        return this;, +    }, +, +    public TermsFacetBuilder param(String name, Object value) {, +        if (params == null) {, +            params = Maps.newHashMap();, +        }, +        params.put(name, value);, +        return this;, +    }, +, +, +        if (script != null) {, +            builder.field("script", script);, +            if (this.params != null) {, +                builder.field("params");, +                builder.map(this.params);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/histogram/HistogramFacetCollectorParser.java, +                } else if ("order".equals(fieldName) || "comparator".equals(fieldName)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetBuilder.java, +import org.elasticsearch.common.collect.Maps;, +import java.util.Map;, +    private String script;, +    private Map<String, Object> params;, +    public TermsFacetBuilder script(String script) {, +        this.script = script;, +        return this;, +    }, +, +    public TermsFacetBuilder param(String name, Object value) {, +        if (params == null) {, +            params = Maps.newHashMap();, +        }, +        params.put(name, value);, +        return this;, +    }, +, +, +        if (script != null) {, +            builder.field("script", script);, +            if (this.params != null) {, +                builder.field("params");, +                builder.map(this.params);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetCollector.java, +import org.elasticsearch.common.collect.Maps;, +import org.elasticsearch.index.field.function.FieldsFunction;, +import org.elasticsearch.index.field.function.script.ScriptFieldsFunction;, +import org.elasticsearch.script.ScriptService;, +import java.util.Map;, +    private final FieldsFunction scriptFunction;, +, +    private final Map<String, Object> params;, +, +    public TermsFacetCollector(String facetName, String fieldName, int size, InternalTermsFacet.ComparatorType comparatorType, int numberOfShards, FieldDataCache fieldDataCache, MapperService mapperService, ScriptService scriptService,, +                               ImmutableSet<String> excluded, Pattern pattern, String script, Map<String, Object> params) {, +, +        if (script != null) {, +            scriptFunction = new ScriptFieldsFunction(script, scriptService, mapperService, fieldDataCache);, +            if (params == null) {, +                this.params = Maps.newHashMapWithExpectedSize(1);, +            } else {, +                this.params = params;, +            }, +        } else {, +            this.params = null;, +            scriptFunction = null;, +        }, +, +        if (excluded.isEmpty() && pattern == null && scriptFunction == null) {, +            aggregator = new AggregatorValueProc(popFacets(), excluded, pattern, scriptFunction, params);, +        if (scriptFunction != null) {, +            scriptFunction.setNextReader(reader);, +        }, +        private final FieldsFunction scriptFunction;, +, +        private final Map<String, Object> params;, +, +        public AggregatorValueProc(TObjectIntHashMap<String> facets, ImmutableSet<String> excluded, Pattern pattern,, +                                   FieldsFunction scriptFunction, Map<String, Object> params) {, +            this.scriptFunction = scriptFunction;, +            this.params = params;, +            if (scriptFunction != null) {, +                params.put("term", value);]