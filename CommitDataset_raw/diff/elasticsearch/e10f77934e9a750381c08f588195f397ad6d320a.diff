[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java, + * Only one background job can run simultaneously and {@link #onFinish} is called when the job, +     * running in the background. If there is no job running when this function is, +     * called, the state is directly set to {@link IndexerState#STOPPED}., +     * @return The new state for the indexer (STOPPED, STOPPING or ABORTING if the job was already aborted)., +                    onStart(now, ActionListener.wrap(r -> {, +                    }, e -> {, +                        finishAndSetState();, +                        onFailure(e);, +                    }));, +     * @param listener listener to call after done, +    protected abstract void onStart(long now, ActionListener<Void> listener);, +     * Called when a background job finishes before the internal state changes from {@link IndexerState#INDEXING} back to, +     * {@link IndexerState#STARTED}., +     *, +     * @param listener listener to call after done, +    protected abstract void onFinish(ActionListener<Void> listener);, +                // execute finishing tasks, +                onFinish(ActionListener.wrap(, +                        r -> doSaveState(finishAndSetState(), position.get(), () -> {}),, +                        e -> doSaveState(finishAndSetState(), position.get(), () -> {})));, +, +, +                // check if indexer has been asked to stop, state {@link IndexerState#STOPPING}, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java, + * Only one background job can run simultaneously and {@link #onFinish} is called when the job, +     * running in the background. If there is no job running when this function is, +     * called, the state is directly set to {@link IndexerState#STOPPED}., +     * @return The new state for the indexer (STOPPED, STOPPING or ABORTING if the job was already aborted)., +                    onStart(now, ActionListener.wrap(r -> {, +                    }, e -> {, +                        finishAndSetState();, +                        onFailure(e);, +                    }));, +     * @param listener listener to call after done, +    protected abstract void onStart(long now, ActionListener<Void> listener);, +     * Called when a background job finishes before the internal state changes from {@link IndexerState#INDEXING} back to, +     * {@link IndexerState#STARTED}., +     *, +     * @param listener listener to call after done, +    protected abstract void onFinish(ActionListener<Void> listener);, +                // execute finishing tasks, +                onFinish(ActionListener.wrap(, +                        r -> doSaveState(finishAndSetState(), position.get(), () -> {}),, +                        e -> doSaveState(finishAndSetState(), position.get(), () -> {})));, +, +, +                // check if indexer has been asked to stop, state {@link IndexerState#STOPPING}, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexerTests.java, +        protected void onStart(long now, ActionListener<Void> listener) {, +            listener.onResponse(null);, +            assertThat(step, equalTo(5));, +        protected void onFinish(ActionListener<Void> listener) {, +            assertThat(step, equalTo(4));, +            listener.onResponse(null);, +        protected void onStart(long now, ActionListener<Void> listener) {, +            listener.onResponse(null);, +            fail("should not be called");, +            assertThat(step, equalTo(2));, +        protected void onFinish(ActionListener<Void> listener) {, +            assertTrue(ESTestCase.awaitBusy(() -> isFinished.get(), 10000, TimeUnit.SECONDS));, +            assertThat(indexer.getStep(), equalTo(3));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java, + * Only one background job can run simultaneously and {@link #onFinish} is called when the job, +     * running in the background. If there is no job running when this function is, +     * called, the state is directly set to {@link IndexerState#STOPPED}., +     * @return The new state for the indexer (STOPPED, STOPPING or ABORTING if the job was already aborted)., +                    onStart(now, ActionListener.wrap(r -> {, +                    }, e -> {, +                        finishAndSetState();, +                        onFailure(e);, +                    }));, +     * @param listener listener to call after done, +    protected abstract void onStart(long now, ActionListener<Void> listener);, +     * Called when a background job finishes before the internal state changes from {@link IndexerState#INDEXING} back to, +     * {@link IndexerState#STARTED}., +     *, +     * @param listener listener to call after done, +    protected abstract void onFinish(ActionListener<Void> listener);, +                // execute finishing tasks, +                onFinish(ActionListener.wrap(, +                        r -> doSaveState(finishAndSetState(), position.get(), () -> {}),, +                        e -> doSaveState(finishAndSetState(), position.get(), () -> {})));, +, +, +                // check if indexer has been asked to stop, state {@link IndexerState#STOPPING}, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexerTests.java, +        protected void onStart(long now, ActionListener<Void> listener) {, +            listener.onResponse(null);, +            assertThat(step, equalTo(5));, +        protected void onFinish(ActionListener<Void> listener) {, +            assertThat(step, equalTo(4));, +            listener.onResponse(null);, +        protected void onStart(long now, ActionListener<Void> listener) {, +            listener.onResponse(null);, +            fail("should not be called");, +            assertThat(step, equalTo(2));, +        protected void onFinish(ActionListener<Void> listener) {, +            assertTrue(ESTestCase.awaitBusy(() -> isFinished.get(), 10000, TimeUnit.SECONDS));, +            assertThat(indexer.getStep(), equalTo(3));]