[+++ b/server/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +     * Standard deprecation logger for used to deprecate allowance of empty templates., +     */, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(ScriptMetaData.class));, +, +    /**, +     *     "<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",, +     *     "<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",, +, +                        if (source.getSource().isEmpty()) {, +                            if (source.getLang().equals(Script.DEFAULT_TEMPLATE_LANG)) {, +                                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used");, +                            } else {, +                                DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used");, +                            }, +                        }, +                    source = StoredScriptSource.fromXContent(parser, true);, +++ b/server/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +     * Standard deprecation logger for used to deprecate allowance of empty templates., +     */, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(ScriptMetaData.class));, +, +    /**, +     *     "<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",, +     *     "<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",, +, +                        if (source.getSource().isEmpty()) {, +                            if (source.getLang().equals(Script.DEFAULT_TEMPLATE_LANG)) {, +                                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used");, +                            } else {, +                                DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used");, +                            }, +                        }, +                    source = StoredScriptSource.fromXContent(parser, true);, +++ b/server/src/main/java/org/elasticsearch/script/StoredScriptSource.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +     * Standard deprecation logger for used to deprecate allowance of empty templates., +     */, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(StoredScriptSource.class));, +, +    /**, +         *, +         * @param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check., +         *                    This allow empty templates to be loaded for backwards compatibility., +         *                    This allow empty templates to be loaded for backwards compatibility., +        private StoredScriptSource build(boolean ignoreEmpty) {, +                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {, +                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {, +                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used");, +                    } else {, +                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used");, +                    }, +                } else {, +                }, +                if (ignoreEmpty || Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {, +                    if (Script.DEFAULT_TEMPLATE_LANG.equals(lang)) {, +                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used");, +                    } else {, +                        DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used");, +                    }, +                } else {, +            }, +                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used");, +, +                    return PARSER.apply(parser, null).build(false);, +                        String source = parser.text();, +, +                        if (source == null || source.isEmpty()) {, +                            DEPRECATION_LOGGER.deprecated("empty templates should no longer be used");, +                        }, +, +                        return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, source, Collections.emptyMap());, +                    String source = Strings.toString(builder);, +, +                    if (source == null || source.isEmpty()) {, +                        DEPRECATION_LOGGER.deprecated("empty templates should no longer be used");, +                    }, +, +                    return new StoredScriptSource(Script.DEFAULT_TEMPLATE_LANG, source, Collections.emptyMap());, +     *, +     * @param ignoreEmpty Specify as {@code true} to ignoreEmpty the empty source check., +     *                    This allows empty templates to be loaded for backwards compatibility., +    public static StoredScriptSource fromXContent(XContentParser parser, boolean ignoreEmpty) {, +        return PARSER.apply(parser, null).build(ignoreEmpty);, +++ b/server/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +     * Standard deprecation logger for used to deprecate allowance of empty templates., +     */, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(ScriptMetaData.class));, +, +    /**, +     *     "<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",, +     *     "<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",, +]