[+++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +    interface WithOrdinals<Script extends ScriptDocValues> extends AtomicFieldData<Script> {, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as bytes., +         */, +        BytesValues.WithOrdinals getBytesValues();, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as bytes., +         */, +        HashedBytesValues.WithOrdinals getHashedBytesValues();, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as strings., +         */, +        StringValues.WithOrdinals getStringValues();, +    }, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +    interface WithOrdinals<Script extends ScriptDocValues> extends AtomicFieldData<Script> {, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as bytes., +         */, +        BytesValues.WithOrdinals getBytesValues();, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as bytes., +         */, +        HashedBytesValues.WithOrdinals getHashedBytesValues();, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as strings., +         */, +        StringValues.WithOrdinals getStringValues();, +    }, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +    interface WithOrdinals<Script extends ScriptDocValues> extends AtomicFieldData<Script> {, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as bytes., +         */, +        BytesValues.WithOrdinals getBytesValues();, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as bytes., +         */, +        HashedBytesValues.WithOrdinals getHashedBytesValues();, +, +        /**, +         * Use a non thread safe (lightweight) view of the values as strings., +         */, +        StringValues.WithOrdinals getStringValues();, +    }, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +import org.elasticsearch.index.fielddata.ordinals.EmptyOrdinals;, +import org.elasticsearch.index.fielddata.ordinals.Ordinals;, +, +    /**, +     * Bytes values that are based on ordinals., +     */, +    static interface WithOrdinals extends BytesValues {, +, +        Ordinals.Docs ordinals();, +, +        BytesRef getValueByOrd(int ord);, +, +        /**, +         * Returns the bytes value for the docId, with the provided "ret" which will be filled with the, +         * result which will also be returned. If there is no value for this docId, the length will be 0., +         * Note, the bytes are not "safe"., +         */, +        BytesRef getValueScratchByOrd(int ord, BytesRef ret);, +, +        BytesRef getSafeValueByOrd(int ord);, +, +        public static class Empty extends BytesValues.Empty implements WithOrdinals {, +, +            private final Ordinals ordinals;, +, +            public Empty(EmptyOrdinals ordinals) {, +                this.ordinals = ordinals;, +            }, +, +            @Override, +            public Ordinals.Docs ordinals() {, +                return ordinals.ordinals();, +            }, +, +            @Override, +            public BytesRef getValueByOrd(int ord) {, +                return null;, +            }, +, +            @Override, +            public BytesRef getValueScratchByOrd(int ord, BytesRef ret) {, +                ret.length = 0;, +                return ret;]