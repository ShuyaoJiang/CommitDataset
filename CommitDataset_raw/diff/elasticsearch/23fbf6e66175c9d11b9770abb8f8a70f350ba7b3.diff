[+++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size,, +                                  List<CompletionSuggestion> reducedCompletionSuggestions) {, +        final boolean hasHits = (reducedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false;, +            if (reducedCompletionSuggestions.isEmpty() == false) {, +                for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {, +                for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {, +                    if (suggestion instanceof CompletionSuggestion) {, +                        CompletionSuggestion completionSuggestion = (CompletionSuggestion) suggestion;, +                        completionSuggestion.setShardIndex(result.getShardIndex());, +                    }, +        final Suggest reducedSuggest;, +        final List<CompletionSuggestion> reducedCompletionSuggestions;, +        if (groupedSuggestions.isEmpty()) {, +            reducedSuggest = null;, +            reducedCompletionSuggestions = Collections.emptyList();, +        } else {, +            reducedSuggest = new Suggest(Suggest.reduce(groupedSuggestions));, +            reducedCompletionSuggestions = reducedSuggest.filter(CompletionSuggestion.class);, +        }, +        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size,, +            reducedCompletionSuggestions);, +            topDocsStats.timedOut, topDocsStats.terminatedEarly, reducedSuggest, aggregations, shardResults, sortedTopDocs,, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size,, +                                  List<CompletionSuggestion> reducedCompletionSuggestions) {, +        final boolean hasHits = (reducedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false;, +            if (reducedCompletionSuggestions.isEmpty() == false) {, +                for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {, +                for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {, +                    if (suggestion instanceof CompletionSuggestion) {, +                        CompletionSuggestion completionSuggestion = (CompletionSuggestion) suggestion;, +                        completionSuggestion.setShardIndex(result.getShardIndex());, +                    }, +        final Suggest reducedSuggest;, +        final List<CompletionSuggestion> reducedCompletionSuggestions;, +        if (groupedSuggestions.isEmpty()) {, +            reducedSuggest = null;, +            reducedCompletionSuggestions = Collections.emptyList();, +        } else {, +            reducedSuggest = new Suggest(Suggest.reduce(groupedSuggestions));, +            reducedCompletionSuggestions = reducedSuggest.filter(CompletionSuggestion.class);, +        }, +        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size,, +            reducedCompletionSuggestions);, +            topDocsStats.timedOut, topDocsStats.terminatedEarly, reducedSuggest, aggregations, shardResults, sortedTopDocs,, +++ b/server/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +        for (Map.Entry<String, List<Suggestion>> unmergedResults : groupedSuggestions.entrySet()) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size,, +                                  List<CompletionSuggestion> reducedCompletionSuggestions) {, +        final boolean hasHits = (reducedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false;, +            if (reducedCompletionSuggestions.isEmpty() == false) {, +                for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {, +                for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {, +                    if (suggestion instanceof CompletionSuggestion) {, +                        CompletionSuggestion completionSuggestion = (CompletionSuggestion) suggestion;, +                        completionSuggestion.setShardIndex(result.getShardIndex());, +                    }, +        final Suggest reducedSuggest;, +        final List<CompletionSuggestion> reducedCompletionSuggestions;, +        if (groupedSuggestions.isEmpty()) {, +            reducedSuggest = null;, +            reducedCompletionSuggestions = Collections.emptyList();, +        } else {, +            reducedSuggest = new Suggest(Suggest.reduce(groupedSuggestions));, +            reducedCompletionSuggestions = reducedSuggest.filter(CompletionSuggestion.class);, +        }, +        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size,, +            reducedCompletionSuggestions);, +            topDocsStats.timedOut, topDocsStats.terminatedEarly, reducedSuggest, aggregations, shardResults, sortedTopDocs,, +++ b/server/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +        for (Map.Entry<String, List<Suggestion>> unmergedResults : groupedSuggestions.entrySet()) {, +++ b/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestion.java, +    @Override, +    public CompletionSuggestion reduce(List<Suggest.Suggestion<Entry>> toReduce) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size,, +                                  List<CompletionSuggestion> reducedCompletionSuggestions) {, +        final boolean hasHits = (reducedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false;, +            if (reducedCompletionSuggestions.isEmpty() == false) {, +                for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {, +                for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {, +                    if (suggestion instanceof CompletionSuggestion) {, +                        CompletionSuggestion completionSuggestion = (CompletionSuggestion) suggestion;, +                        completionSuggestion.setShardIndex(result.getShardIndex());, +                    }, +        final Suggest reducedSuggest;, +        final List<CompletionSuggestion> reducedCompletionSuggestions;, +        if (groupedSuggestions.isEmpty()) {, +            reducedSuggest = null;, +            reducedCompletionSuggestions = Collections.emptyList();, +        } else {, +            reducedSuggest = new Suggest(Suggest.reduce(groupedSuggestions));, +            reducedCompletionSuggestions = reducedSuggest.filter(CompletionSuggestion.class);, +        }, +        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size,, +            reducedCompletionSuggestions);, +            topDocsStats.timedOut, topDocsStats.terminatedEarly, reducedSuggest, aggregations, shardResults, sortedTopDocs,, +++ b/server/src/main/java/org/elasticsearch/search/suggest/Suggest.java]