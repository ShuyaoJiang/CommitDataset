[+++ b/docs/reference/mapping/types/percolator.asciidoc, +==== Limitations, +The percolator doesn't accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ b/docs/reference/mapping/types/percolator.asciidoc, +==== Limitations, +The percolator doesn't accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ b/docs/reference/migration/migrate_5_0/percolator.asciidoc, +==== Percolator queries containing range queries with now ranges, +, +The percolator no longer accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ b/docs/reference/mapping/types/percolator.asciidoc, +==== Limitations, +The percolator doesn't accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ b/docs/reference/migration/migrate_5_0/percolator.asciidoc, +==== Percolator queries containing range queries with now ranges, +, +The percolator no longer accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ /dev/null, +++ b/docs/reference/mapping/types/percolator.asciidoc, +==== Limitations, +The percolator doesn't accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ b/docs/reference/migration/migrate_5_0/percolator.asciidoc, +==== Percolator queries containing range queries with now ranges, +, +The percolator no longer accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ /dev/null, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/MultiPercolateAction.java, +@Deprecated, +++ b/docs/reference/mapping/types/percolator.asciidoc, +==== Limitations, +The percolator doesn't accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ b/docs/reference/migration/migrate_5_0/percolator.asciidoc, +==== Percolator queries containing range queries with now ranges, +, +The percolator no longer accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ /dev/null, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/MultiPercolateAction.java, +@Deprecated, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateAction.java, +@Deprecated, +++ b/docs/reference/mapping/types/percolator.asciidoc, +==== Limitations, +The percolator doesn't accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ b/docs/reference/migration/migrate_5_0/percolator.asciidoc, +==== Percolator queries containing range queries with now ranges, +, +The percolator no longer accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`)., +, +++ /dev/null, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/MultiPercolateAction.java, +@Deprecated, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateAction.java, +@Deprecated, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQuery.java, +final class PercolateQuery extends Query implements Accountable {, +    private final Query candidateMatchesQuery;, +    private final Query verifiedMatchesQuery;, +    PercolateQuery(String documentType, QueryStore queryStore, BytesReference documentSource,, +                          Query candidateMatchesQuery, IndexSearcher percolatorIndexSearcher, Query verifiedMatchesQuery) {, +        this.documentType = Objects.requireNonNull(documentType);, +        this.documentSource = Objects.requireNonNull(documentSource);, +        this.candidateMatchesQuery = Objects.requireNonNull(candidateMatchesQuery);, +        this.queryStore = Objects.requireNonNull(queryStore);, +        this.percolatorIndexSearcher = Objects.requireNonNull(percolatorIndexSearcher);, +        this.verifiedMatchesQuery = Objects.requireNonNull(verifiedMatchesQuery);, +        Query rewritten = candidateMatchesQuery.rewrite(reader);, +        if (rewritten != candidateMatchesQuery) {, +                    verifiedMatchesQuery);, +        final Weight verifiedMatchesWeight = verifiedMatchesQuery.createWeight(searcher, false);, +        final Weight candidateMatchesWeight = candidateMatchesQuery.createWeight(searcher, false);, +                return candidateMatchesWeight.getValueForNormalization();, +                candidateMatchesWeight.normalize(v, v1);, +                final Scorer approximation = candidateMatchesWeight.scorer(leafReaderContext);, +                    Scorer verifiedDocsScorer = verifiedMatchesWeight.scorer(leafReaderContext);, +                "},inner={" + candidateMatchesQuery.toString(s)  + "}}";, +++ b/docs/reference/mapping/types/percolator.asciidoc, +==== Limitations, +The percolator doesn't accepts percolator queries containing `range` queries with ranges that are based on current, +time (using `now`).]