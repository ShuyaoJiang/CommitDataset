[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +        this.query = request.query();, +    public QueryBuilder<?> query() {, +        return query;, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +        this.query = request.query();, +    public QueryBuilder<?> query() {, +        return query;, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +            searchContext.parsedQuery(queryParserService.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +        this.query = request.query();, +    public QueryBuilder<?> query() {, +        return query;, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +            searchContext.parsedQuery(queryParserService.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequest.java, +import org.elasticsearch.action.ValidateActions;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, + * The request requires the query to be set using {@link #query(QueryBuilder)}, +    private QueryBuilder<?> query = new MatchAllQueryBuilder();, +        if (query == null) {, +            validationException = ValidateActions.addValidationError("query cannot be null", validationException);, +        }, +     * The query to validate., +    public QueryBuilder<?> query() {, +        return query;, +    public ValidateQueryRequest query(QueryBuilder<?> query) {, +        this.query = query;, +        query = in.readQuery();, +        out.writeQuery(query);, +        return "[" + Arrays.toString(indices) + "]" + Arrays.toString(types) + ", query[" + query + "], explain:" + explain +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +        this.query = request.query();, +    public QueryBuilder<?> query() {, +        return query;, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +            searchContext.parsedQuery(queryParserService.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequest.java, +import org.elasticsearch.action.ValidateActions;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, + * The request requires the query to be set using {@link #query(QueryBuilder)}, +    private QueryBuilder<?> query = new MatchAllQueryBuilder();, +        if (query == null) {, +            validationException = ValidateActions.addValidationError("query cannot be null", validationException);, +        }, +     * The query to validate., +    public QueryBuilder<?> query() {, +        return query;, +    public ValidateQueryRequest query(QueryBuilder<?> query) {, +        this.query = query;, +        query = in.readQuery();, +        out.writeQuery(query);, +        return "[" + Arrays.toString(indices) + "]" + Arrays.toString(types) + ", query[" + query + "], explain:" + explain +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +     * The query to validate., +        request.query(queryBuilder);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +import org.elasticsearch.index.query.QueryBuilder;, +    private QueryBuilder<?> query;, +        this.query = request.query();, +    public QueryBuilder<?> query() {, +        return query;, +        query = in.readQuery();, +        out.writeQuery(query);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +            searchContext.parsedQuery(queryParserService.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequest.java, +import org.elasticsearch.action.ValidateActions;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, + * The request requires the query to be set using {@link #query(QueryBuilder)}, +    private QueryBuilder<?> query = new MatchAllQueryBuilder();, +        if (query == null) {, +            validationException = ValidateActions.addValidationError("query cannot be null", validationException);, +        }, +     * The query to validate., +    public QueryBuilder<?> query() {]