[+++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    /** The {@link List} of all the whitelisted static Painless methods. */, +    public final List<WhitelistMethod> whitelistImportedMethods;, +, +    /** The {@link List} of all the whitelisted Painless bindings. */, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses,, +            List<WhitelistMethod> whitelistImportedMethods, List<WhitelistBinding> whitelistBindings) {, +, +        this.whitelistImportedMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistImportedMethods));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    /** The {@link List} of all the whitelisted static Painless methods. */, +    public final List<WhitelistMethod> whitelistImportedMethods;, +, +    /** The {@link List} of all the whitelisted Painless bindings. */, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses,, +            List<WhitelistMethod> whitelistImportedMethods, List<WhitelistBinding> whitelistBindings) {, +, +        this.whitelistImportedMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistImportedMethods));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistLoader.java, +        List<WhitelistMethod> whitelistStatics = new ArrayList<>();, +                    } else if (line.startsWith("static_import ")) {, +                                    "invalid static import definition: failed to parse static import opening bracket [" + line + "]");, +                            throw new IllegalArgumentException("invalid definition: cannot embed static import definition [" + line + "]");, +                        parseType = "static_import";, +                    // Handle static import definition types., +                    // Expects the following format: ID ID '(' ( ID ( ',' ID )* )? ')' ( 'from_class' | 'bound_to' ) ID '\n', +                    } else if ("static_import".equals(parseType)) {, +                                    "illegal static import definition: start of method parameters not found [" + line + "]");, +                                    "illegal static import definition: end of method parameters not found [" + line + "]");, +                        // Parse the static import type and class., +                        String staticImportType;, +                            staticImportType = tokens[0];, +                            throw new IllegalArgumentException("invalid static import definition: unexpected format [" + line + "]");, +                        // Add a static import method or binding depending on the static import type., +                        if ("from_class".equals(staticImportType)) {, +                            whitelistStatics.add(new WhitelistMethod(origin, targetJavaClassName,, +                                    methodName, returnCanonicalTypeName, Arrays.asList(canonicalTypeNameParameters)));, +                        } else if ("bound_to".equals(staticImportType)) {, +                        } else {, +                            throw new IllegalArgumentException("invalid static import definition: " +, +                                    "unexpected static import type [" + staticImportType + "] [" + line + "]");, +                        }, +        return new Whitelist(loader, whitelistClasses, whitelistStatics, whitelistBindings);, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    /** The {@link List} of all the whitelisted static Painless methods. */, +    public final List<WhitelistMethod> whitelistImportedMethods;, +, +    /** The {@link List} of all the whitelisted Painless bindings. */, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses,, +            List<WhitelistMethod> whitelistImportedMethods, List<WhitelistBinding> whitelistBindings) {, +, +        this.whitelistImportedMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistImportedMethods));, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistLoader.java, +        List<WhitelistMethod> whitelistStatics = new ArrayList<>();, +                    } else if (line.startsWith("static_import ")) {, +                                    "invalid static import definition: failed to parse static import opening bracket [" + line + "]");, +                            throw new IllegalArgumentException("invalid definition: cannot embed static import definition [" + line + "]");, +                        parseType = "static_import";, +                    // Handle static import definition types., +                    // Expects the following format: ID ID '(' ( ID ( ',' ID )* )? ')' ( 'from_class' | 'bound_to' ) ID '\n', +                    } else if ("static_import".equals(parseType)) {, +                                    "illegal static import definition: start of method parameters not found [" + line + "]");, +                                    "illegal static import definition: end of method parameters not found [" + line + "]");, +                        // Parse the static import type and class., +                        String staticImportType;, +                            staticImportType = tokens[0];, +                            throw new IllegalArgumentException("invalid static import definition: unexpected format [" + line + "]");, +                        // Add a static import method or binding depending on the static import type., +                        if ("from_class".equals(staticImportType)) {, +                            whitelistStatics.add(new WhitelistMethod(origin, targetJavaClassName,, +                                    methodName, returnCanonicalTypeName, Arrays.asList(canonicalTypeNameParameters)));, +                        } else if ("bound_to".equals(staticImportType)) {, +                        } else {, +                            throw new IllegalArgumentException("invalid static import definition: " +, +                                    "unexpected static import type [" + staticImportType + "] [" + line + "]");, +                        }, +        return new Whitelist(loader, whitelistClasses, whitelistStatics, whitelistBindings);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FeatureTest.java, +    /** static method that returns true */, +    public static boolean overloadedStatic() {, +        return true;, +    }, +, +    /** static method that returns what you ask it */, +    public static boolean overloadedStatic(boolean whatToReturn) {, +        return whatToReturn;, +    }, +, +    /** static method only whitelisted as a static */, +    public static float staticAddFloatsTest(float x, float y) {, +        return x + y;, +    }, +, +    /** method to take in a list */, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +    /** The {@link List} of all the whitelisted static Painless methods. */, +    public final List<WhitelistMethod> whitelistImportedMethods;, +, +    /** The {@link List} of all the whitelisted Painless bindings. */, +    public Whitelist(ClassLoader classLoader, List<WhitelistClass> whitelistClasses,]