[+++ b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import java.util.Objects;, +     * Returns the master node, or {@code null} if there is no master node, +    @Nullable, +        if (masterNodeId != null) {, +        return null;, +    }, +        final List<DiscoveryNode> removed = new ArrayList<>();, +        final List<DiscoveryNode> added = new ArrayList<>();, +            if (this.nodeExists(node) == false) {, +            if (other.nodeExists(node) == false) {, +, +        return new Delta(other.getMasterNode(), getMasterNode(), localNodeId, Collections.unmodifiableList(removed),, +        @Nullable private final DiscoveryNode previousMasterNode;, +        @Nullable private final DiscoveryNode newMasterNode;, +            return Objects.equals(newMasterNode, previousMasterNode) == false;, +        @Nullable, +        @Nullable, +            final StringBuilder summary = new StringBuilder();, +                summary.append("master node changed {previous [");, +                    summary.append(previousMasterNode());, +                summary.append("], current [");, +                if (newMasterNode() != null) {, +                    summary.append(newMasterNode());, +                }, +                summary.append("]}");, +                if (summary.length() > 0) {, +                    summary.append(", ");, +                summary.append("removed {");, +                    summary.append(node).append(',');, +                summary.append("}");, +                    if (summary.length() > 0) {, +                        summary.append(", ");, +                    summary.append("added {");, +                            summary.append(node).append(',');, +                    summary.append("}");, +            return summary.toString();, +++ b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import java.util.Objects;, +     * Returns the master node, or {@code null} if there is no master node, +    @Nullable, +        if (masterNodeId != null) {, +        return null;, +    }, +        final List<DiscoveryNode> removed = new ArrayList<>();, +        final List<DiscoveryNode> added = new ArrayList<>();, +            if (this.nodeExists(node) == false) {, +            if (other.nodeExists(node) == false) {, +, +        return new Delta(other.getMasterNode(), getMasterNode(), localNodeId, Collections.unmodifiableList(removed),, +        @Nullable private final DiscoveryNode previousMasterNode;, +        @Nullable private final DiscoveryNode newMasterNode;, +            return Objects.equals(newMasterNode, previousMasterNode) == false;, +        @Nullable, +        @Nullable, +            final StringBuilder summary = new StringBuilder();, +                summary.append("master node changed {previous [");, +                    summary.append(previousMasterNode());, +                summary.append("], current [");, +                if (newMasterNode() != null) {, +                    summary.append(newMasterNode());, +                }, +                summary.append("]}");, +                if (summary.length() > 0) {, +                    summary.append(", ");, +                summary.append("removed {");, +                    summary.append(node).append(',');, +                summary.append("}");, +                    if (summary.length() > 0) {, +                        summary.append(", ");, +                    summary.append("added {");, +                            summary.append(node).append(',');, +                    summary.append("}");, +            return summary.toString();, +++ b/server/src/test/java/org/elasticsearch/cluster/node/DiscoveryNodesTests.java, +        if (Objects.equals(masterAId, masterBId)) {, +            assertThat(delta.newMasterNode() != null ? delta.newMasterNode().getId() : null, equalTo(masterBId));, +            assertThat(delta.previousMasterNode() != null ? delta.previousMasterNode().getId() : null, equalTo(masterAId));]