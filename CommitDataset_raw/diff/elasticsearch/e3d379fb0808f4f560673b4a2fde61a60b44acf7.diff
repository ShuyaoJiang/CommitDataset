[+++ b/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +                    removeSnapshotFromClusterState(snapshot.snapshotId(), null, t);, +                    try {, +                        repositoriesService.repository(snapshot.snapshotId().getRepository()).finalizeSnapshot(snapshot.snapshotId(), ExceptionsHelper.detailedMessage(t), 0, ImmutableList.<SnapshotShardFailure>of());, +                    } catch (Throwable t2) {, +                        logger.warn("[{}] failed to close snapshot in repository", snapshot.snapshotId());, +                    }, +            removeSnapshotFromClusterState(snapshot.snapshotId(), null, t);, +                        logger.warn("failed to notify listener [{}]", t, listener);, +                        public void onSnapshotCompletion(SnapshotId completedSnapshotId, SnapshotInfo snapshot) {, +                            if (completedSnapshotId.equals(snapshotId)) {, +                        }, +                        public void onSnapshotFailure(SnapshotId failedSnapshotId, Throwable t) {, +                            if (failedSnapshotId.equals(snapshotId)) {, +                        }, +                if (indexRoutingTable != null) {, +                } else {, +                    builder.put(shardId, new SnapshotMetaData.ShardSnapshotStatus(null, State.MISSING, "missing routing table"));, +                }, +++ b/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +                    removeSnapshotFromClusterState(snapshot.snapshotId(), null, t);, +                    try {, +                        repositoriesService.repository(snapshot.snapshotId().getRepository()).finalizeSnapshot(snapshot.snapshotId(), ExceptionsHelper.detailedMessage(t), 0, ImmutableList.<SnapshotShardFailure>of());, +                    } catch (Throwable t2) {, +                        logger.warn("[{}] failed to close snapshot in repository", snapshot.snapshotId());, +                    }, +            removeSnapshotFromClusterState(snapshot.snapshotId(), null, t);, +                        logger.warn("failed to notify listener [{}]", t, listener);, +                        public void onSnapshotCompletion(SnapshotId completedSnapshotId, SnapshotInfo snapshot) {, +                            if (completedSnapshotId.equals(snapshotId)) {, +                        }, +                        public void onSnapshotFailure(SnapshotId failedSnapshotId, Throwable t) {, +                            if (failedSnapshotId.equals(snapshotId)) {, +                        }, +                if (indexRoutingTable != null) {, +                } else {, +                    builder.put(shardId, new SnapshotMetaData.ShardSnapshotStatus(null, State.MISSING, "missing routing table"));, +                }, +++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +    public void snapshotSingleClosedIndexTest() throws Exception {, +        Client client = client();, +, +        logger.info("-->  creating repository");, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder(), +                        .put("location", newTempDir(LifecycleScope.SUITE))));, +, +        createIndex("test-idx");, +        ensureGreen();, +        logger.info("-->  closing index test-idx");, +        assertAcked(client.admin().indices().prepareClose("test-idx"));, +, +        logger.info("--> snapshot");, +        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1"), +                .setWaitForCompletion(true).setIndices("test-idx").get();, +        assertThat(createSnapshotResponse.getSnapshotInfo().indices().size(), equalTo(1));, +        assertThat(createSnapshotResponse.getSnapshotInfo().state(), equalTo(SnapshotState.FAILED));, +    }, +, +    @Test]