[+++ b/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.snapshots.RestoreService;, +import org.elasticsearch.snapshots.SnapshotsService;, +                ensureRepositoryNotInUse(currentState, request.name);, +                ensureRepositoryNotInUse(currentState, request.name);, +            if (newMetaData != null) {, +            }, +    private void ensureRepositoryNotInUse(ClusterState clusterState, String repository) {, +        if (SnapshotsService.isRepositoryInUse(clusterState, repository) || RestoreService.isRepositoryInUse(clusterState, repository)) {, +            throw new ElasticSearchIllegalStateException("trying to modify or unregister repository that is currently used ");, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.snapshots.RestoreService;, +import org.elasticsearch.snapshots.SnapshotsService;, +                ensureRepositoryNotInUse(currentState, request.name);, +                ensureRepositoryNotInUse(currentState, request.name);, +            if (newMetaData != null) {, +            }, +    private void ensureRepositoryNotInUse(ClusterState clusterState, String repository) {, +        if (SnapshotsService.isRepositoryInUse(clusterState, repository) || RestoreService.isRepositoryInUse(clusterState, repository)) {, +            throw new ElasticSearchIllegalStateException("trying to modify or unregister repository that is currently used ");, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +    /**, +     * Checks if a repository is currently in use by one of the snapshots, +     * @param clusterState cluster state, +     * @param repository repository id, +     * @return true if repository is currently in use by one of the running snapshots, +     */, +    public static boolean isRepositoryInUse(ClusterState clusterState, String repository) {, +        MetaData metaData = clusterState.metaData();, +        RestoreMetaData snapshots = metaData.custom(RestoreMetaData.TYPE);, +        if (snapshots != null) {, +            for(RestoreMetaData.Entry snapshot : snapshots.entries()) {, +                if(repository.equals(snapshot.snapshotId().getRepository())) {, +                    return true;, +                }, +            }, +        }, +        return false;, +    }, +++ b/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.snapshots.RestoreService;, +import org.elasticsearch.snapshots.SnapshotsService;, +                ensureRepositoryNotInUse(currentState, request.name);, +                ensureRepositoryNotInUse(currentState, request.name);, +            if (newMetaData != null) {, +            }, +    private void ensureRepositoryNotInUse(ClusterState clusterState, String repository) {, +        if (SnapshotsService.isRepositoryInUse(clusterState, repository) || RestoreService.isRepositoryInUse(clusterState, repository)) {, +            throw new ElasticSearchIllegalStateException("trying to modify or unregister repository that is currently used ");, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +    /**, +     * Checks if a repository is currently in use by one of the snapshots, +     * @param clusterState cluster state, +     * @param repository repository id, +     * @return true if repository is currently in use by one of the running snapshots, +     */, +    public static boolean isRepositoryInUse(ClusterState clusterState, String repository) {, +        MetaData metaData = clusterState.metaData();, +        RestoreMetaData snapshots = metaData.custom(RestoreMetaData.TYPE);, +        if (snapshots != null) {, +            for(RestoreMetaData.Entry snapshot : snapshots.entries()) {, +                if(repository.equals(snapshot.snapshotId().getRepository())) {, +                    return true;, +                }, +            }, +        }, +        return false;, +    }, +++ b/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +                    return ClusterState.builder(currentState).metaData(mdBuilder).build();, +     * Checks if a repository is currently in use by one of the snapshots, +     * @param clusterState cluster state, +     * @param repository repository id, +     * @return true if repository is currently in use by one of the running snapshots, +     */, +    public static boolean isRepositoryInUse(ClusterState clusterState, String repository) {, +        MetaData metaData = clusterState.metaData();, +        SnapshotMetaData snapshots = metaData.custom(SnapshotMetaData.TYPE);, +        if (snapshots != null) {, +            for(SnapshotMetaData.Entry snapshot : snapshots.entries()) {, +                if(repository.equals(snapshot.snapshotId().getRepository())) {, +                    return true;, +                }, +            }, +        }, +        return false;, +    }, +]