[+++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract NoOpResult noOp(final NoOp noOp);, +, +, +, +, +, +    }, +, +    static class NoOpResult extends Result {, +, +        NoOpResult(long seqNo) {, +            super(Operation.TYPE.NO_OP, 0, seqNo);, +        }, +, +        NoOpResult(long seqNo, Exception failure) {, +            super(Operation.TYPE.NO_OP, failure, 0, seqNo);, +        }, +, +            INDEX, DELETE, NO_OP;, +, +    }, +, +    public static class NoOp extends Operation {, +, +        private final String reason;, +, +        public String reason() {, +            return reason;, +        }, +, +        public NoOp(, +            final Term uid,, +            final long seqNo,, +            final long primaryTerm,, +            final long version,, +            final VersionType versionType,, +            final Origin origin,, +            final long startTime,, +            final String reason) {, +            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);, +            this.reason = reason;, +        }, +, +        @Override, +        public String type() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        String id() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        TYPE operationType() {, +            return TYPE.NO_OP;, +        }, +, +        @Override, +        public int estimatedSizeInBytes() {, +            return 2 * reason.length() + 2 * Long.BYTES;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract NoOpResult noOp(final NoOp noOp);, +, +, +, +, +, +    }, +, +    static class NoOpResult extends Result {, +, +        NoOpResult(long seqNo) {, +            super(Operation.TYPE.NO_OP, 0, seqNo);, +        }, +, +        NoOpResult(long seqNo, Exception failure) {, +            super(Operation.TYPE.NO_OP, failure, 0, seqNo);, +        }, +, +            INDEX, DELETE, NO_OP;, +, +    }, +, +    public static class NoOp extends Operation {, +, +        private final String reason;, +, +        public String reason() {, +            return reason;, +        }, +, +        public NoOp(, +            final Term uid,]