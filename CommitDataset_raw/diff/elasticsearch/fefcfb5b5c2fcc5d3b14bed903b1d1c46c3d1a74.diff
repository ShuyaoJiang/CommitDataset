[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +        rwl.writeLock().lock();, +        try {, +        } finally {, +            rwl.writeLock().unlock();, +        }, +        try {, +                logger.warn("shard is locked, releasing lock");, +                IndexWriter.unlock(store.directory());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +        rwl.writeLock().lock();, +        try {, +        } finally {, +            rwl.writeLock().unlock();, +        }, +        try {, +                logger.warn("shard is locked, releasing lock");, +                IndexWriter.unlock(store.directory());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public static interface RecoveryListener {, +        void onRecoveryDone();, +, +        void onIgnoreRecovery(String reason);, +, +        void onRecoveryFailed(IndexShardGatewayRecoveryException e);, +    }, +, +    public void recover(final RecoveryListener listener) throws IndexShardGatewayRecoveryException, IgnoreGatewayRecoveryException {, +            listener.onIgnoreRecovery("already recovered");, +            return;, +            listener.onIgnoreRecovery("shard closed");, +            return;, +            listener.onRecoveryFailed(new IndexShardGatewayRecoveryException(shardId, "Trying to recover when the shard is in backup state", null));, +            return;, +        threadPool.execute(new Runnable() {, +            @Override public void run() {, +, +                            listener.onIgnoreRecovery("Interrupted while waiting for recovery, but we should ignore ...");, +                            return;, +                        listener.onRecoveryFailed(new IndexShardGatewayRecoveryException(shardId, "Interrupted while waiting to recovery", e));, +                    listener.onRecoveryDone();, +                        listener.onIgnoreRecovery("shard closed");, +                        return;, +                    listener.onRecoveryFailed(e);, +                    listener.onIgnoreRecovery("shard closed");, +                    listener.onIgnoreRecovery("shard closed");, +                } catch (Exception e) {, +                    listener.onRecoveryFailed(new IndexShardGatewayRecoveryException(shardId, "failed recovery", e));, +        });, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +        rwl.writeLock().lock();, +        try {, +        } finally {, +            rwl.writeLock().unlock();, +        }, +        try {, +                logger.warn("shard is locked, releasing lock");, +                IndexWriter.unlock(store.directory());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public static interface RecoveryListener {, +        void onRecoveryDone();, +, +        void onIgnoreRecovery(String reason);, +, +        void onRecoveryFailed(IndexShardGatewayRecoveryException e);, +    }, +, +    public void recover(final RecoveryListener listener) throws IndexShardGatewayRecoveryException, IgnoreGatewayRecoveryException {, +            listener.onIgnoreRecovery("already recovered");, +            return;, +            listener.onIgnoreRecovery("shard closed");, +            return;, +            listener.onRecoveryFailed(new IndexShardGatewayRecoveryException(shardId, "Trying to recover when the shard is in backup state", null));, +            return;, +        threadPool.execute(new Runnable() {, +            @Override public void run() {, +, +                            listener.onIgnoreRecovery("Interrupted while waiting for recovery, but we should ignore ...");, +                            return;, +                        listener.onRecoveryFailed(new IndexShardGatewayRecoveryException(shardId, "Interrupted while waiting to recovery", e));, +                    listener.onRecoveryDone();, +                        listener.onIgnoreRecovery("shard closed");, +                        return;, +                    listener.onRecoveryFailed(e);, +                    listener.onIgnoreRecovery("shard closed");, +                    listener.onIgnoreRecovery("shard closed");, +                } catch (Exception e) {, +                    listener.onRecoveryFailed(new IndexShardGatewayRecoveryException(shardId, "failed recovery", e));, +        });, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +        rwl.writeLock().lock();, +        try {, +        } finally {, +            rwl.writeLock().unlock();, +        }, +        try {, +                logger.warn("shard is locked, releasing lock");]