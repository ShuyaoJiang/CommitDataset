[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java, +import org.elasticsearch.common.TriFunction;, +    static final TriFunction<Map<String, Object>, String, List<String>, QueryBuilder> lazyQueryParser =, +        (objectMap, id, warnings) -> {, +            return QUERY_TRANSFORMER.fromMap(objectMap, warnings);, +    static final TriFunction<Map<String, Object>, String, List<String>, AggregatorFactories.Builder> lazyAggParser =, +        (objectMap, id, warnings) -> {, +            return AGG_TRANSFORMER.fromMap(objectMap, warnings);, +        this.querySupplier = new CachedSupplier<>(() -> lazyQueryParser.apply(query, id, new ArrayList<>()));, +        this.aggSupplier = new CachedSupplier<>(() -> lazyAggParser.apply(aggregations, id, new ArrayList<>()));, +        this.querySupplier = new CachedSupplier<>(() -> lazyQueryParser.apply(query, id, new ArrayList<>()));, +        this.aggSupplier = new CachedSupplier<>(() -> lazyAggParser.apply(aggregations, id, new ArrayList<>()));, +    /**, +     * Calls the lazy parser and returns any gathered deprecations, +     * @return The deprecations from parsing the query, +     */, +    public List<String> getQueryDeprecations() {, +        return getQueryDeprecations(lazyQueryParser);, +    }, +, +    List<String> getQueryDeprecations(TriFunction<Map<String, Object>, String, List<String>, QueryBuilder> parser) {, +        List<String> deprecations = new ArrayList<>();, +        parser.apply(query, id, deprecations);, +        return deprecations;, +    }, +, +    /**, +     * Calls the lazy parser and returns any gathered deprecations, +     * @return The deprecations from parsing the aggregations, +     */, +    public List<String> getAggDeprecations() {, +        return getAggDeprecations(lazyAggParser);, +    }, +, +    List<String> getAggDeprecations(TriFunction<Map<String, Object>, String, List<String>, AggregatorFactories.Builder> parser) {, +        List<String> deprecations = new ArrayList<>();, +        parser.apply(aggregations, id, deprecations);, +        return deprecations;, +    }, +, +                    long histogramIntervalMillis =, +                        ExtractorUtils.getHistogramIntervalMillis(lazyAggParser.apply(aggregations, id, new ArrayList<>()));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java, +import org.elasticsearch.common.TriFunction;, +    static final TriFunction<Map<String, Object>, String, List<String>, QueryBuilder> lazyQueryParser =, +        (objectMap, id, warnings) -> {, +            return QUERY_TRANSFORMER.fromMap(objectMap, warnings);, +    static final TriFunction<Map<String, Object>, String, List<String>, AggregatorFactories.Builder> lazyAggParser =, +        (objectMap, id, warnings) -> {, +            return AGG_TRANSFORMER.fromMap(objectMap, warnings);, +        this.querySupplier = new CachedSupplier<>(() -> lazyQueryParser.apply(query, id, new ArrayList<>()));, +        this.aggSupplier = new CachedSupplier<>(() -> lazyAggParser.apply(aggregations, id, new ArrayList<>()));, +        this.querySupplier = new CachedSupplier<>(() -> lazyQueryParser.apply(query, id, new ArrayList<>()));, +        this.aggSupplier = new CachedSupplier<>(() -> lazyAggParser.apply(aggregations, id, new ArrayList<>()));, +    /**, +     * Calls the lazy parser and returns any gathered deprecations, +     * @return The deprecations from parsing the query, +     */, +    public List<String> getQueryDeprecations() {, +        return getQueryDeprecations(lazyQueryParser);, +    }, +, +    List<String> getQueryDeprecations(TriFunction<Map<String, Object>, String, List<String>, QueryBuilder> parser) {, +        List<String> deprecations = new ArrayList<>();, +        parser.apply(query, id, deprecations);, +        return deprecations;, +    }, +, +    /**, +     * Calls the lazy parser and returns any gathered deprecations, +     * @return The deprecations from parsing the aggregations, +     */, +    public List<String> getAggDeprecations() {, +        return getAggDeprecations(lazyAggParser);, +    }, +, +    List<String> getAggDeprecations(TriFunction<Map<String, Object>, String, List<String>, AggregatorFactories.Builder> parser) {, +        List<String> deprecations = new ArrayList<>();, +        parser.apply(aggregations, id, deprecations);, +        return deprecations;, +    }, +, +                    long histogramIntervalMillis =, +                        ExtractorUtils.getHistogramIntervalMillis(lazyAggParser.apply(aggregations, id, new ArrayList<>()));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/LoggingDeprecationAccumulationHandler.java, +            new Object[] {usedName, modernName}));, +            new Object[] {usedName, replacedWith}));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java, +import org.elasticsearch.common.TriFunction;, +    static final TriFunction<Map<String, Object>, String, List<String>, QueryBuilder> lazyQueryParser =, +        (objectMap, id, warnings) -> {, +            return QUERY_TRANSFORMER.fromMap(objectMap, warnings);, +    static final TriFunction<Map<String, Object>, String, List<String>, AggregatorFactories.Builder> lazyAggParser =, +        (objectMap, id, warnings) -> {, +            return AGG_TRANSFORMER.fromMap(objectMap, warnings);, +        this.querySupplier = new CachedSupplier<>(() -> lazyQueryParser.apply(query, id, new ArrayList<>()));, +        this.aggSupplier = new CachedSupplier<>(() -> lazyAggParser.apply(aggregations, id, new ArrayList<>()));, +        this.querySupplier = new CachedSupplier<>(() -> lazyQueryParser.apply(query, id, new ArrayList<>()));, +        this.aggSupplier = new CachedSupplier<>(() -> lazyAggParser.apply(aggregations, id, new ArrayList<>()));, +    /**]