[+++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/AbstractLdapSslSocketFactory.java, +        sslSocket.setEnabledProtocols(sslService.supportedProtocols());, +        sslSocket.setEnabledCipherSuites(sslService.ciphers());, +++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/AbstractLdapSslSocketFactory.java, +        sslSocket.setEnabledProtocols(sslService.supportedProtocols());, +        sslSocket.setEnabledCipherSuites(sslService.ciphers());, +++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/HostnameVerifyingLdapSslSocketFactory.java, +        super.configureSSLSocket(sslSocket);, +++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/AbstractLdapSslSocketFactory.java, +        sslSocket.setEnabledProtocols(sslService.supportedProtocols());, +        sslSocket.setEnabledCipherSuites(sslService.ciphers());, +++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/HostnameVerifyingLdapSslSocketFactory.java, +        super.configureSSLSocket(sslSocket);, +++ b/src/main/java/org/elasticsearch/shield/ssl/SSLService.java, +    static final String[] DEFAULT_SUPPORTED_PROTOCOLS = new String[] {"TLSv1", "TLSv1.1", "TLSv1.2"};, +    public String[] supportedProtocols() {, +        return componentSettings.getAsArray("supported_protocols", DEFAULT_SUPPORTED_PROTOCOLS);, +    }, +, +    public String[] ciphers() {, +        return componentSettings.getAsArray("ciphers", DEFAULT_CIPHERS);, +    }, +, +        String[] ciphers = settings.getAsArray("ciphers", ciphers());, +        String[] supportedProtocols = settings.getAsArray("supported_protocols", supportedProtocols());, +        return createSSLEngine(getSslContext(settings), ciphers, supportedProtocols, host, port);, +    private SSLEngine createSSLEngine(SSLContext sslContext, String[] ciphers, String[] supportedProtocols, String host, int port) {, +, +        try {, +            sslEngine.setEnabledProtocols(supportedProtocols);, +        } catch (IllegalArgumentException e) {, +            throw new ElasticsearchSSLException("failed setting supported protocols [" + Arrays.asList(supportedProtocols) + "]", e);, +        }, +++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/AbstractLdapSslSocketFactory.java, +        sslSocket.setEnabledProtocols(sslService.supportedProtocols());, +        sslSocket.setEnabledCipherSuites(sslService.ciphers());, +++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/HostnameVerifyingLdapSslSocketFactory.java, +        super.configureSSLSocket(sslSocket);, +++ b/src/main/java/org/elasticsearch/shield/ssl/SSLService.java, +    static final String[] DEFAULT_SUPPORTED_PROTOCOLS = new String[] {"TLSv1", "TLSv1.1", "TLSv1.2"};, +    public String[] supportedProtocols() {, +        return componentSettings.getAsArray("supported_protocols", DEFAULT_SUPPORTED_PROTOCOLS);, +    }, +, +    public String[] ciphers() {, +        return componentSettings.getAsArray("ciphers", DEFAULT_CIPHERS);, +    }, +, +        String[] ciphers = settings.getAsArray("ciphers", ciphers());, +        String[] supportedProtocols = settings.getAsArray("supported_protocols", supportedProtocols());, +        return createSSLEngine(getSslContext(settings), ciphers, supportedProtocols, host, port);, +    private SSLEngine createSSLEngine(SSLContext sslContext, String[] ciphers, String[] supportedProtocols, String host, int port) {, +, +        try {, +            sslEngine.setEnabledProtocols(supportedProtocols);, +        } catch (IllegalArgumentException e) {, +            throw new ElasticsearchSSLException("failed setting supported protocols [" + Arrays.asList(supportedProtocols) + "]", e);, +        }, +++ b/src/test/java/org/elasticsearch/shield/ssl/SSLServiceTests.java, +import java.util.Arrays;, +, +    @Test, +    public void testThatSSLv3IsNotEnabled() throws Exception {, +        SSLService sslService = new SSLService(settingsBuilder(), +                .put("shield.ssl.keystore.path", testnodeStore), +                .put("shield.ssl.keystore.password", "testnode"), +                .build());, +        SSLEngine engine = sslService.createSSLEngine();, +        assertThat(Arrays.asList(engine.getEnabledProtocols()), not(hasItem("SSLv3")));, +    }, +++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/AbstractLdapSslSocketFactory.java, +        sslSocket.setEnabledProtocols(sslService.supportedProtocols());, +        sslSocket.setEnabledCipherSuites(sslService.ciphers());, +++ b/src/main/java/org/elasticsearch/shield/authc/support/ldap/HostnameVerifyingLdapSslSocketFactory.java, +        super.configureSSLSocket(sslSocket);, +++ b/src/main/java/org/elasticsearch/shield/ssl/SSLService.java, +    static final String[] DEFAULT_SUPPORTED_PROTOCOLS = new String[] {"TLSv1", "TLSv1.1", "TLSv1.2"};, +    public String[] supportedProtocols() {, +        return componentSettings.getAsArray("supported_protocols", DEFAULT_SUPPORTED_PROTOCOLS);, +    }, +, +    public String[] ciphers() {, +        return componentSettings.getAsArray("ciphers", DEFAULT_CIPHERS);, +    }, +, +        String[] ciphers = settings.getAsArray("ciphers", ciphers());, +        String[] supportedProtocols = settings.getAsArray("supported_protocols", supportedProtocols());, +        return createSSLEngine(getSslContext(settings), ciphers, supportedProtocols, host, port);, +    private SSLEngine createSSLEngine(SSLContext sslContext, String[] ciphers, String[] supportedProtocols, String host, int port) {, +, +        try {, +            sslEngine.setEnabledProtocols(supportedProtocols);, +        } catch (IllegalArgumentException e) {, +            throw new ElasticsearchSSLException("failed setting supported protocols [" + Arrays.asList(supportedProtocols) + "]", e);, +        }, +++ b/src/test/java/org/elasticsearch/shield/ssl/SSLServiceTests.java, +import java.util.Arrays;, +, +    @Test, +    public void testThatSSLv3IsNotEnabled() throws Exception {]