[+++ b/.gitignore, +++ b/.gitignore, +++ b/build.gradle, +if (hasProperty('projectsPrefix') == false) {, +++ b/.gitignore, +++ b/build.gradle, +if (hasProperty('projectsPrefix') == false) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.processTestResources {, +            from buildProperties, +            from pluginMetadata, +++ b/.gitignore, +++ b/build.gradle, +if (hasProperty('projectsPrefix') == false) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.processTestResources {, +            from buildProperties, +            from pluginMetadata, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +import org.gradle.api.DefaultTask, +import org.gradle.api.tasks.OutputFile, +import org.gradle.api.tasks.TaskAction, + *, + * TODO: copy the example properties file to plugin documentation, +class PluginPropertiesTask extends DefaultTask {, +    Map<String, String> properties = new HashMap<>(), +            if (extension.jvm) {, +                dependsOn(project.classes) // so we can check for the classname, +            }, +            fillProperties(), +                inputs.properties(properties), +    @OutputFile, +    File propertiesFile = new File(project.buildDir, "plugin" + File.separator + "plugin-descriptor.properties"), +, +    void fillProperties() {, +        // TODO: need to copy the templated plugin-descriptor with a dependent task, since copy requires a file (not uri), +        properties = [, +            'elasticsearch.version': ElasticsearchProperties.version,, +            'site': extension.site as String, +        if (extension.jvm) {, +            properties['classname'] = extension.classname, +            properties['isolated'] = extension.isolated as String, +            properties['java.version'] = project.targetCompatibility as String, +        }, +    }, +, +    @TaskAction, +    void buildProperties() {, +        if (extension.jvm) {, +            File classesDir = project.sourceSets.main.output.classesDir, +            File classFile = new File(classesDir, extension.classname.replace('.', File.separator) + '.class'), +            if (classFile.exists() == false) {, +                throw new InvalidUserDataException('classname ' + extension.classname + ' does not exist'), +            }, +            if (extension.isolated == false) {, +                logger.warn('Disabling isolation is deprecated and will be removed in the future'), +            }, +        }, +, +        Properties props = new Properties(), +        for (Map.Entry<String, String> prop : properties) {, +            props.put(prop.getKey(), prop.getValue()), +        }, +        props.store(propertiesFile.newWriter(), null), +++ b/.gitignore, +++ b/build.gradle, +if (hasProperty('projectsPrefix') == false) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.processTestResources {, +            from buildProperties, +            from pluginMetadata, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +import org.gradle.api.DefaultTask, +import org.gradle.api.tasks.OutputFile, +import org.gradle.api.tasks.TaskAction, + *, + * TODO: copy the example properties file to plugin documentation, +class PluginPropertiesTask extends DefaultTask {, +    Map<String, String> properties = new HashMap<>(), +            if (extension.jvm) {, +                dependsOn(project.classes) // so we can check for the classname, +            }, +            fillProperties(), +                inputs.properties(properties), +    @OutputFile, +    File propertiesFile = new File(project.buildDir, "plugin" + File.separator + "plugin-descriptor.properties"), +, +    void fillProperties() {, +        // TODO: need to copy the templated plugin-descriptor with a dependent task, since copy requires a file (not uri), +        properties = [, +            'elasticsearch.version': ElasticsearchProperties.version,, +            'site': extension.site as String, +        if (extension.jvm) {, +            properties['classname'] = extension.classname, +            properties['isolated'] = extension.isolated as String, +            properties['java.version'] = project.targetCompatibility as String, +        }, +    }, +, +    @TaskAction]