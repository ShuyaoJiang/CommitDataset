[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/BinaryValuesSource.java, +import org.elasticsearch.index.mapper.KeywordFieldMapper;, +import org.elasticsearch.index.mapper.StringFieldType;, +import org.elasticsearch.index.mapper.TextFieldMapper;, +import org.elasticsearch.search.DocValueFormat;, +                       DocValueFormat format, Object missing, int size, int reverseMul) {, +        super(format, fieldType, missing, size, reverseMul);, +        if (value.getClass() == String.class) {, +            afterValue = format.parseBytesRef(value.toString());, +                fieldType instanceof StringFieldType == false ||, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/BinaryValuesSource.java, +import org.elasticsearch.index.mapper.KeywordFieldMapper;, +import org.elasticsearch.index.mapper.StringFieldType;, +import org.elasticsearch.index.mapper.TextFieldMapper;, +import org.elasticsearch.search.DocValueFormat;, +                       DocValueFormat format, Object missing, int size, int reverseMul) {, +        super(format, fieldType, missing, size, reverseMul);, +        if (value.getClass() == String.class) {, +            afterValue = format.parseBytesRef(value.toString());, +                fieldType instanceof StringFieldType == false ||, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregator.java, +                sources[i] = new GlobalOrdinalValuesSource(, +                    bigArrays,, +                    configs[i].fieldType(),, +                    vs::globalOrdinalsValues,, +                    configs[i].format(),, +                    configs[i].missing(),, +                    size,, +                    reverseMul, +                );, +, +                    sources[i] = new BinaryValuesSource(, +                        configs[i].fieldType(),, +                        vs::bytesValues,, +                        configs[i].format(),, +                        configs[i].missing(),, +                        size,, +                        reverseMul, +                    );, +                sources[i] = new BinaryValuesSource(, +                    configs[i].fieldType(),, +                    vs::bytesValues,, +                    configs[i].format(),, +                    configs[i].missing(),, +                    size,, +                    reverseMul, +                );, +, +                    sources[i] = new DoubleValuesSource(, +                        bigArrays,, +                        configs[i].fieldType(),, +                        vs::doubleValues,, +                        configs[i].format(),, +                        configs[i].missing(),, +                        size,, +                        reverseMul, +                    );, +, +                        sources[i] = new LongValuesSource(, +                            bigArrays,, +                            configs[i].fieldType(),, +                            vs::longValues,, +                            ((RoundingValuesSource) vs)::round,, +                            configs[i].format(),, +                            configs[i].missing(),, +                            size,, +                            reverseMul, +                        );, +, +                        sources[i] = new LongValuesSource(, +                            bigArrays,, +                            configs[i].fieldType(),, +                            vs::longValues,, +                            (value) -> value,, +                            configs[i].format(),, +                            configs[i].missing(),, +                            size,, +                            reverseMul, +                        );, +, +            } else {, +                throw new IllegalArgumentException("Unknown value source: " + configs[i].valuesSource().getClass().getName() +, +                    " for field: " + sources[i].fieldType.name());, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/BinaryValuesSource.java, +import org.elasticsearch.index.mapper.KeywordFieldMapper;, +import org.elasticsearch.index.mapper.StringFieldType;, +import org.elasticsearch.index.mapper.TextFieldMapper;, +import org.elasticsearch.search.DocValueFormat;, +                       DocValueFormat format, Object missing, int size, int reverseMul) {, +        super(format, fieldType, missing, size, reverseMul);, +        if (value.getClass() == String.class) {, +            afterValue = format.parseBytesRef(value.toString());, +                fieldType instanceof StringFieldType == false ||, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregator.java, +                sources[i] = new GlobalOrdinalValuesSource(, +                    bigArrays,, +                    configs[i].fieldType(),, +                    vs::globalOrdinalsValues,, +                    configs[i].format(),, +                    configs[i].missing(),]