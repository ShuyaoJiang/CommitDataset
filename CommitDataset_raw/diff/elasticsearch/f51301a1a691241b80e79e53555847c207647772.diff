[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ccr;, +, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;, +import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.persistent.PersistentTasksCustomMetaData;, +import org.elasticsearch.xpack.CCRIntegTestCase;, +import org.elasticsearch.xpack.ccr.action.ShardFollowTask;, +import org.elasticsearch.xpack.core.ccr.AutoFollowStats;, +import org.elasticsearch.xpack.core.ccr.action.AutoFollowStatsAction;, +import org.elasticsearch.xpack.core.ccr.action.DeleteAutoFollowPatternAction;, +import org.elasticsearch.xpack.core.ccr.action.PutAutoFollowPatternAction;, +, +import java.util.Arrays;, +import java.util.Collections;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.notNullValue;, +, +public class AutoFollowIT extends CCRIntegTestCase {, +, +    @Override, +    protected boolean reuseClusters() {, +        return false;, +    }, +, +    public void testAutoFollow() throws Exception {, +        Settings leaderIndexSettings = Settings.builder(), +            .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true), +            .put(IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.getKey(), 1), +            .put(IndexMetaData.INDEX_NUMBER_OF_REPLICAS_SETTING.getKey(), 0), +            .build();, +, +        createLeaderIndex("logs-201812", leaderIndexSettings);, +, +        // Enabling auto following:, +        putAutoFollowPatterns("logs-*", "transactions-*");, +, +        createLeaderIndex("metrics-201901", leaderIndexSettings);, +, +        createLeaderIndex("logs-201901", leaderIndexSettings);, +        assertBusy(() -> {, +            IndicesExistsRequest request = new IndicesExistsRequest("copy-logs-201901");, +            assertTrue(followerClient().admin().indices().exists(request).actionGet().isExists());, +        });, +        createLeaderIndex("transactions-201901", leaderIndexSettings);, +        assertBusy(() -> {, +            AutoFollowStats autoFollowStats = getAutoFollowStats();, +            assertThat(autoFollowStats.getNumberOfSuccessfulFollowIndices(), equalTo(2L));, +, +            IndicesExistsRequest request = new IndicesExistsRequest("copy-transactions-201901");, +            assertTrue(followerClient().admin().indices().exists(request).actionGet().isExists());, +        });, +, +        IndicesExistsRequest request = new IndicesExistsRequest("copy-metrics-201901");, +        assertFalse(followerClient().admin().indices().exists(request).actionGet().isExists());, +        request = new IndicesExistsRequest("copy-logs-201812");, +        assertFalse(followerClient().admin().indices().exists(request).actionGet().isExists());, +    }, +, +    public void testAutoFollowManyIndices() throws Exception {, +        Settings leaderIndexSettings = Settings.builder(), +            .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true), +            .put(IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.getKey(), 1), +            .put(IndexMetaData.INDEX_NUMBER_OF_REPLICAS_SETTING.getKey(), 0), +            .build();, +, +        putAutoFollowPatterns("logs-*");, +        int numIndices = randomIntBetween(4, 32);, +        for (int i = 0; i < numIndices; i++) {, +            createLeaderIndex("logs-" + i, leaderIndexSettings);, +        }, +        int expectedVal1 = numIndices;, +        assertBusy(() -> {, +            AutoFollowStats autoFollowStats = getAutoFollowStats();, +            assertThat(autoFollowStats.getNumberOfSuccessfulFollowIndices(), equalTo((long) expectedVal1));, +        });, +, +        deleteAutoFollowPatternSetting();, +        createLeaderIndex("logs-does-not-count", leaderIndexSettings);, +, +        putAutoFollowPatterns("logs-*");, +        int i = numIndices;, +        numIndices = numIndices + randomIntBetween(4, 32);, +        for (; i < numIndices; i++) {, +            createLeaderIndex("logs-" + i, leaderIndexSettings);, +        }, +        int expectedVal2 = numIndices;]