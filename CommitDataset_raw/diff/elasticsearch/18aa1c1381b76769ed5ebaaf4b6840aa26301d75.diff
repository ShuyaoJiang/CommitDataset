[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.StartTrialRequest;, +import org.elasticsearch.client.license.StartTrialResponse;, +import static java.util.Collections.singleton;, +     * Starts a trial license on the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startTrial, options,, +            StartTrialResponse::fromXContent, singleton(403));, +    }, +, +    /**, +     * Asynchronously starts a trial license on the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void startTrialAsync(StartTrialRequest request,, +                                RequestOptions options,, +                                ActionListener<StartTrialResponse> listener) {, +, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startTrial, options,, +            StartTrialResponse::fromXContent, listener, singleton(403));, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.StartTrialRequest;, +import org.elasticsearch.client.license.StartTrialResponse;, +import static java.util.Collections.singleton;, +     * Starts a trial license on the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startTrial, options,, +            StartTrialResponse::fromXContent, singleton(403));, +    }, +, +    /**, +     * Asynchronously starts a trial license on the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void startTrialAsync(StartTrialRequest request,, +                                RequestOptions options,, +                                ActionListener<StartTrialResponse> listener) {, +, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startTrial, options,, +            StartTrialResponse::fromXContent, listener, singleton(403));, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseRequestConverters.java, +import org.elasticsearch.client.license.StartTrialRequest;, +        String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_xpack", "license").build();, +        String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_xpack", "license").build();, +        String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_xpack", "license").build();, +        Request request = new Request(HttpDelete.METHOD_NAME, endpoint);, +    static Request startTrial(StartTrialRequest startTrialRequest) {, +        final String endpoint = new RequestConverters.EndpointBuilder().addPathPartAsIs("_xpack", "license", "start_trial").build();, +        final Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        RequestConverters.Params parameters = new RequestConverters.Params(request);, +        parameters.putParam("acknowledge", Boolean.toString(startTrialRequest.isAcknowledge()));, +        if (startTrialRequest.getLicenseType() != null) {, +            parameters.putParam("type", startTrialRequest.getLicenseType());, +        }, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.StartTrialRequest;, +import org.elasticsearch.client.license.StartTrialResponse;, +import static java.util.Collections.singleton;, +     * Starts a trial license on the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public StartTrialResponse startTrial(StartTrialRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startTrial, options,, +            StartTrialResponse::fromXContent, singleton(403));, +    }, +, +    /**, +     * Asynchronously starts a trial license on the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void startTrialAsync(StartTrialRequest request,, +                                RequestOptions options,, +                                ActionListener<StartTrialResponse> listener) {, +, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startTrial, options,, +            StartTrialResponse::fromXContent, listener, singleton(403));, +    }]