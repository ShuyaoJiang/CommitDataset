[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ObjectMapper.java, +    public static class Builder<T extends Builder, Y extends ObjectMapper> extends XContentMapper.Builder<T, Y> {, +        protected boolean enabled = Defaults.ENABLED;, +        protected boolean dynamic = Defaults.DYNAMIC;, +        protected ContentPath.Type pathType = Defaults.PATH_TYPE;, +        protected List<FormatDateTimeFormatter> dateTimeFormatters = newArrayList();, +        protected Boolean includeInAll;, +        protected final List<XContentMapper.Builder> mappersBuilders = newArrayList();, +            this.builder = (T) this;, +        public T enabled(boolean enabled) {, +            return builder;, +        public T dynamic(boolean dynamic) {, +            return builder;, +        public T pathType(ContentPath.Type pathType) {, +            return builder;, +        public T noDateTimeFormatter() {, +            return builder;, +        public T includeInAll(boolean includeInAll) {, +            return builder;, +        public T dateTimeFormatter(Iterable<FormatDateTimeFormatter> dateTimeFormatters) {, +            return builder;, +        public T dateTimeFormatter(FormatDateTimeFormatter[] dateTimeFormatters) {, +            return builder;, +        public T dateTimeFormatter(FormatDateTimeFormatter dateTimeFormatter) {, +            return builder;, +        public T add(XContentMapper.Builder builder) {, +            return this.builder;, +        @Override public Y build(BuilderContext context) {, +            ObjectMapper objectMapper = createMapper(name, enabled, dynamic, pathType,, +                    dateTimeFormatters.toArray(new FormatDateTimeFormatter[dateTimeFormatters.size()]), mappers);, +            return (Y) objectMapper;, +        }, +, +        protected ObjectMapper createMapper(String name, boolean enabled, boolean dynamic, ContentPath.Type pathType,, +                                            FormatDateTimeFormatter[] dateTimeFormatters, Map<String, XContentMapper> mappers) {, +            return new ObjectMapper(name, enabled, dynamic, pathType, dateTimeFormatters, mappers);, +            ObjectMapper.Builder builder = createBuilder(name);, +                } else {, +                    processField(builder, fieldName, fieldNode);, +, +        protected Builder createBuilder(String name) {, +            return object(name);, +        }, +, +        protected void processField(Builder builder, String fieldName, Object fieldNode) {, +, +        }, +        this(name, enabled, dynamic, pathType, dateTimeFormatters, null);, +                 FormatDateTimeFormatter[] dateTimeFormatters, Map<String, XContentMapper> mappers) {, +                        XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "object");, +                            XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "date");, +                    XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "string");, +                        XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "long");, +                        XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "integer");, +                    XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "long");, +                        XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "double");, +                        XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "float");, +                    XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "double");, +                XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, "boolean");, +                XContentMapper.Builder builder = context.root().findTemplateBuilder(context, currentFieldName, null);, +, +        doMerge(mergeWithObject, mergeContext);, +, +    protected void doMerge(ObjectMapper mergeWith, MergeContext mergeContext) {, +, +    }, +, +, +        doXContent(builder, params);, +, +    protected void doXContent(XContentBuilder builder, Params params) throws IOException {, +, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ObjectMapper.java, +    public static class Builder<T extends Builder, Y extends ObjectMapper> extends XContentMapper.Builder<T, Y> {, +        protected boolean enabled = Defaults.ENABLED;, +        protected boolean dynamic = Defaults.DYNAMIC;, +        protected ContentPath.Type pathType = Defaults.PATH_TYPE;, +        protected List<FormatDateTimeFormatter> dateTimeFormatters = newArrayList();, +        protected Boolean includeInAll;, +        protected final List<XContentMapper.Builder> mappersBuilders = newArrayList();, +            this.builder = (T) this;, +        public T enabled(boolean enabled) {, +            return builder;, +        public T dynamic(boolean dynamic) {, +            return builder;, +        public T pathType(ContentPath.Type pathType) {, +            return builder;, +        public T noDateTimeFormatter() {, +            return builder;, +        public T includeInAll(boolean includeInAll) {, +            return builder;, +        public T dateTimeFormatter(Iterable<FormatDateTimeFormatter> dateTimeFormatters) {, +            return builder;, +        public T dateTimeFormatter(FormatDateTimeFormatter[] dateTimeFormatters) {, +            return builder;, +        public T dateTimeFormatter(FormatDateTimeFormatter dateTimeFormatter) {, +            return builder;, +        public T add(XContentMapper.Builder builder) {, +            return this.builder;]