[+++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +            // since we upgraded the index folders already, write index state in the upgraded index folder, +            metaStateService.writeIndex("upgrade", indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +            // since we upgraded the index folders already, write index state in the upgraded index folder, +            metaStateService.writeIndex("upgrade", indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/gateway/MetaStateService.java, +            IndexMetaData.FORMAT.write(indexMetaData, indexMetaData.getVersion(),, +                nodeEnv.indexPaths(indexMetaData.getIndex()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +            // since we upgraded the index folders already, write index state in the upgraded index folder, +            metaStateService.writeIndex("upgrade", indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/gateway/MetaStateService.java, +            IndexMetaData.FORMAT.write(indexMetaData, indexMetaData.getVersion(),, +                nodeEnv.indexPaths(indexMetaData.getIndex()));, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            final Engine.Warmer engineWarmer = (searcher) -> {, +                    warmer.warm(searcher, shard, IndexService.this.indexSettings);, +        public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {, +                    shard.fieldData().onCache(shardId, fieldName, ramUsage);, +        public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {, +                    shard.fieldData().onRemoval(shardId, fieldName, wasEvicted, sizeInBytes);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +            // since we upgraded the index folders already, write index state in the upgraded index folder, +            metaStateService.writeIndex("upgrade", indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/gateway/MetaStateService.java, +            IndexMetaData.FORMAT.write(indexMetaData, indexMetaData.getVersion(),, +                nodeEnv.indexPaths(indexMetaData.getIndex()));, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            final Engine.Warmer engineWarmer = (searcher) -> {, +                    warmer.warm(searcher, shard, IndexService.this.indexSettings);, +        public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {, +                    shard.fieldData().onCache(shardId, fieldName, ramUsage);, +        public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {, +                    shard.fieldData().onRemoval(shardId, fieldName, wasEvicted, sizeInBytes);, +++ b/core/src/main/java/org/elasticsearch/index/IndexWarmer.java, +import org.apache.lucene.index.DirectoryReader;, +    void warm(Engine.Searcher searcher, IndexShard shard, IndexSettings settings) {, +            terminationHandles.add(listener.warmReader(shard, searcher));, +        TerminationHandle warmReader(IndexShard indexShard, Engine.Searcher searcher);, +        public TerminationHandle warmReader(final IndexShard indexShard, final Engine.Searcher searcher) {, +                    final MappedFieldType fieldType = fieldMapper.fieldType();, +                    final String indexName = fieldType.name();, +                    if (fieldType.eagerGlobalOrdinals() == false) {, +                    warmUpGlobalOrdinals.put(indexName, fieldType);, +                        DirectoryReader reader = searcher.getDirectoryReader();, +                        IndexFieldData<?> global = ifd.loadGlobal(reader);, +                        if (reader.leaves().isEmpty() == false) {, +                            global.load(reader.leaves().get(0));, +                        }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();]