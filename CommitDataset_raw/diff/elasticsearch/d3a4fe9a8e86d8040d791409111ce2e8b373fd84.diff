[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/plugins/examples/script-expert-scoring/src/main/java/org/elasticsearch/example/expertscript/ExpertScriptPlugin.java, +import org.elasticsearch.script.ScoreScript.LeafFactory;, +import org.elasticsearch.search.lookup.SearchLookup;, +        public <T> T compile(String scriptName, String scriptSource,, +                ScriptContext<T> context, Map<String, String> params) {, +                throw new IllegalArgumentException(getType(), +                        + " scripts cannot be used for context [", +                        + context.name + "]");, +                ScoreScript.Factory factory = PureDfLeafFactory::new;, +                return context.factoryClazz.cast(factory);, +            throw new IllegalArgumentException("Unknown script name ", +                    + scriptSource);, +        public void close() {, +            // optionally close resources, +        }, +, +        private static class PureDfLeafFactory implements LeafFactory {, +            private final Map<String, Object> params;, +            private final SearchLookup lookup;, +            private final String field;, +            private final String term;, +, +            private PureDfLeafFactory(, +                        Map<String, Object> params, SearchLookup lookup) {, +                if (params.containsKey("field") == false) {, +                    throw new IllegalArgumentException(, +                            "Missing parameter [field]");, +                }, +                if (params.containsKey("term") == false) {, +                    throw new IllegalArgumentException(, +                            "Missing parameter [term]");, +                }, +                this.params = params;, +                this.lookup = lookup;, +                field = params.get("field").toString();, +                term = params.get("term").toString();, +            }, +, +            @Override, +            public boolean needs_score() {, +                return false;  // Return true if the script needs the score, +            }, +, +            @Override, +            public ScoreScript newInstance(LeafReaderContext context), +                    throws IOException {, +                PostingsEnum postings = context.reader().postings(, +                        new Term(field, term));, +                    /*, +                     * the field and/or term don't exist in this segment,, +                     * so always return 0, +                     */, +                    return new ScoreScript(params, lookup, context) {, +                return new ScoreScript(params, lookup, context) {, +                        /*, +                         * advance has undefined behavior calling with, +                         * a docid <= its current docid, +                         */, +                            /*, +                             * advance moved past the current doc, so this doc, +                             * has no occurrences of the term, +                             */]