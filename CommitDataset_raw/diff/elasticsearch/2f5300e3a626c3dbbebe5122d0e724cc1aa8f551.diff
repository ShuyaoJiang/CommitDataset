[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        String optionalType = getRequest.type();, +        String endpoint;, +        if (optionalType.equals(MapperService.SINGLE_MAPPING_NAME)) {, +            endpoint = endpoint(getRequest.index(), "_source", getRequest.id());, +        } else {, +            endpoint = endpoint(getRequest.index(), optionalType, getRequest.id(), "_source");, +        }, +        Request request = new Request(HttpHead.METHOD_NAME, endpoint);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        String optionalType = getRequest.type();, +        String endpoint;, +        if (optionalType.equals(MapperService.SINGLE_MAPPING_NAME)) {, +            endpoint = endpoint(getRequest.index(), "_source", getRequest.id());, +        } else {, +            endpoint = endpoint(getRequest.index(), optionalType, getRequest.id(), "_source");, +        }, +        Request request = new Request(HttpHead.METHOD_NAME, endpoint);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +import org.elasticsearch.index.mapper.MapperService;, +import java.util.function.BiFunction;, +    public void testSourceExists() throws IOException {, +        doTestSourceExists((index, id) -> new GetRequest(index, id));, +    }, +, +    public void testSourceExistsWithType() throws IOException {, +        String type = frequently() ? randomAlphaOfLengthBetween(3, 10) : MapperService.SINGLE_MAPPING_NAME;, +        doTestSourceExists((index, id) -> new GetRequest(index, type, id));, +    }, +, +    private static void doTestSourceExists(BiFunction<String, String, GetRequest> requestFunction) throws IOException {, +        String index = randomAlphaOfLengthBetween(3, 10);, +        String id = randomAlphaOfLengthBetween(3, 10);, +        final GetRequest getRequest = requestFunction.apply(index, id);, +, +        Map<String, String> expectedParams = new HashMap<>();, +        if (randomBoolean()) {, +            String preference = randomAlphaOfLengthBetween(3, 10);, +            getRequest.preference(preference);, +            expectedParams.put("preference", preference);, +        }, +        if (randomBoolean()) {, +            String routing = randomAlphaOfLengthBetween(3, 10);, +            getRequest.routing(routing);, +            expectedParams.put("routing", routing);, +        }, +        if (randomBoolean()) {, +            boolean realtime = randomBoolean();, +            getRequest.realtime(realtime);, +            if (realtime == false) {, +                expectedParams.put("realtime", "false");, +            }, +        }, +        if (randomBoolean()) {, +            boolean refresh = randomBoolean();, +            getRequest.refresh(refresh);, +            if (refresh) {, +                expectedParams.put("refresh", "true");, +            }, +        }, +        Request request = RequestConverters.sourceExists(getRequest);, +        assertEquals(HttpHead.METHOD_NAME, request.getMethod());, +        String type = getRequest.type();, +        if (type.equals(MapperService.SINGLE_MAPPING_NAME)) {, +            assertEquals("/" + index + "/_source/" + id, request.getEndpoint());, +        } else {, +            assertEquals("/" + index + "/" + type + "/" + id + "/_source", request.getEndpoint());, +        }, +, +        assertEquals(expectedParams, request.getParameters());, +        assertNull(request.getEntity());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        String optionalType = getRequest.type();, +        String endpoint;, +        if (optionalType.equals(MapperService.SINGLE_MAPPING_NAME)) {, +            endpoint = endpoint(getRequest.index(), "_source", getRequest.id());, +        } else {, +            endpoint = endpoint(getRequest.index(), optionalType, getRequest.id(), "_source");, +        }, +        Request request = new Request(HttpHead.METHOD_NAME, endpoint);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +import org.elasticsearch.index.mapper.MapperService;, +import java.util.function.BiFunction;, +    public void testSourceExists() throws IOException {, +        doTestSourceExists((index, id) -> new GetRequest(index, id));, +    }, +, +    public void testSourceExistsWithType() throws IOException {, +        String type = frequently() ? randomAlphaOfLengthBetween(3, 10) : MapperService.SINGLE_MAPPING_NAME;, +        doTestSourceExists((index, id) -> new GetRequest(index, type, id));, +    }, +, +    private static void doTestSourceExists(BiFunction<String, String, GetRequest> requestFunction) throws IOException {, +        String index = randomAlphaOfLengthBetween(3, 10);, +        String id = randomAlphaOfLengthBetween(3, 10);, +        final GetRequest getRequest = requestFunction.apply(index, id);, +, +        Map<String, String> expectedParams = new HashMap<>();]