[+++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestAllocationAction.java, +        final String[] nodes = Strings.splitStringByCommaToArray(request.param("nodes", "data:true"));, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestAllocationAction.java, +        final String[] nodes = Strings.splitStringByCommaToArray(request.param("nodes", "data:true"));, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestFielddataAction.java, +        final NodesStatsRequest nodesStatsRequest = new NodesStatsRequest("data:true");, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestAllocationAction.java, +        final String[] nodes = Strings.splitStringByCommaToArray(request.param("nodes", "data:true"));, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestFielddataAction.java, +        final NodesStatsRequest nodesStatsRequest = new NodesStatsRequest("data:true");, +++ b/docs/reference/cat/allocation.asciidoc, +`allocation` provides a snapshot of how many shards are allocated to each data node, +and how much disk space they are using., +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestAllocationAction.java, +        final String[] nodes = Strings.splitStringByCommaToArray(request.param("nodes", "data:true"));, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestFielddataAction.java, +        final NodesStatsRequest nodesStatsRequest = new NodesStatsRequest("data:true");, +++ b/docs/reference/cat/allocation.asciidoc, +`allocation` provides a snapshot of how many shards are allocated to each data node, +and how much disk space they are using., +++ b/docs/reference/cat/fielddata.asciidoc, +`fielddata` shows how much heap memory is currently being used by fielddata , +on every data node in the cluster., +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestAllocationAction.java, +        final String[] nodes = Strings.splitStringByCommaToArray(request.param("nodes", "data:true"));, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestFielddataAction.java, +        final NodesStatsRequest nodesStatsRequest = new NodesStatsRequest("data:true");, +++ b/docs/reference/cat/allocation.asciidoc, +`allocation` provides a snapshot of how many shards are allocated to each data node, +and how much disk space they are using., +++ b/docs/reference/cat/fielddata.asciidoc, +`fielddata` shows how much heap memory is currently being used by fielddata , +on every data node in the cluster., +++ b/rest-api-spec/test/cat.allocation/10_basic.yaml, +                (\d+(\.\d+)?[kmgt]b   \s+)  #always should return value since we filter out non data nodes by default, +                (\d+(\.\d+)?[kmgt]b   \s+)  #always should return value since we filter out non data nodes by default, +                (\d+                  \s+)  #always should return value since we filter out non data nodes by default, +, +"All Nodes":, +, +   - do:, +         cat.allocation:, +           node_id: "*", +           v: false, +, +   - match:, +       $body: |, +             /^, +               ( \s*                          #allow leading spaces to account for right-justified text, +                 \d+                    \s+, +                 \d+(\.\d+)?[kmgt]?b    \s+, +                 (\d+(\.\d+)?[kmgt]b   \s+)?  #no value from client nodes, +                 (\d+(\.\d+)?[kmgt]b   \s+)?  #no value from client nodes, +                 (\d+                  \s+)?  #no value from client nodes, +                 [-\w.]+                \s+, +                 \d+(\.\d+){3}          \s+, +                 \w.*, +                 \n, +               )+, +               (, +                 \s*                          #allow leading spaces to account for right-justified text, +                 \d+                    \s+, +                 UNASSIGNED             \s+, +                 \n, +               )?, +             $/, +, +---, +                (\d+(\.\d+)?[kmgt]b   \s+)  #always should return value since we filter out non data nodes by default, +                (\d+(\.\d+)?[kmgt]b   \s+)  #always should return value since we filter out non data nodes by default, +                (\d+                  \s+)  #always should return value since we filter out non data nodes by default, +                (\d+                 \s+)  #always should return value since we filter out non data nodes by default, +                (\d+                 \s+)  #always should return value since we filter out non data nodes by default, +                (\d+                 \s+)  #always should return value since we filter out non data nodes by default]