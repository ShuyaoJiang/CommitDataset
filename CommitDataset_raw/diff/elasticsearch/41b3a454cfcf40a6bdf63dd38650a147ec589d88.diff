[+++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public static final int DEFAULT_LIMIT = -1;, +        protected int limit = Defaults.DEFAULT_LIMIT;, +, +        public Builder limit(int limit) {, +            this.limit = limit;, +            return this;, +        }, +, +                    indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer, positionOffsetGap, limit);, +                } else if (propName.equals("limit")) {, +                    builder.limit(XContentMapValues.nodeIntegerValue(propNode, -1));, +    private int limit;, +, +        this(names, index, store, termVector, boost, omitNorms, omitTermFreqAndPositions, nullValue, indexAnalyzer,, +                searchAnalyzer, searchAnalyzer, Defaults.POSITION_OFFSET_GAP, Defaults.DEFAULT_LIMIT);, +                                String nullValue, NamedAnalyzer indexAnalyzer, NamedAnalyzer searchAnalyzer,, +                                NamedAnalyzer searchQuotedAnalyzer, int positionOffsetGap, int limit) {, +        this.limit = limit;, +        if (limit > 0 && value.length() > limit) {, +            return null;, +        }, +        if (limit != Defaults.DEFAULT_LIMIT) {, +            builder.field("limit", limit);, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public static final int DEFAULT_LIMIT = -1;, +        protected int limit = Defaults.DEFAULT_LIMIT;, +, +        public Builder limit(int limit) {, +            this.limit = limit;, +            return this;, +        }, +, +                    indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer, positionOffsetGap, limit);, +                } else if (propName.equals("limit")) {, +                    builder.limit(XContentMapValues.nodeIntegerValue(propNode, -1));, +    private int limit;, +, +        this(names, index, store, termVector, boost, omitNorms, omitTermFreqAndPositions, nullValue, indexAnalyzer,, +                searchAnalyzer, searchAnalyzer, Defaults.POSITION_OFFSET_GAP, Defaults.DEFAULT_LIMIT);, +                                String nullValue, NamedAnalyzer indexAnalyzer, NamedAnalyzer searchAnalyzer,, +                                NamedAnalyzer searchQuotedAnalyzer, int positionOffsetGap, int limit) {, +        this.limit = limit;, +        if (limit > 0 && value.length() > limit) {, +            return null;, +        }, +        if (limit != Defaults.DEFAULT_LIMIT) {, +            builder.field("limit", limit);, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/SimpleMapperTests.java, +, +    @Test, +    public void testLimit() throws Exception {, +        String mapping = copyToStringFromClasspath("/org/elasticsearch/test/unit/index/mapper/simple/test-mapping.json");, +        DocumentMapper docMapper = MapperTests.newParser().parse(mapping);, +        String builtMapping = docMapper.mappingSource().string();, +, +        // reparse it, +        DocumentMapper builtDocMapper = MapperTests.newParser().parse(builtMapping);, +        BytesReference json = new BytesArray(copyToBytesFromClasspath("/org/elasticsearch/test/unit/index/mapper/simple/test1.json"));, +        Document doc = builtDocMapper.parse(json).rootDoc();, +        assertThat(doc.get(docMapper.uidMapper().names().indexName()), equalTo(Uid.createUid("person", "1")));, +        assertThat(doc.getValues("cats").length, equalTo(1));, +        assertThat(doc.getValues("cats")[0], equalTo("felix"));, +    }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public static final int DEFAULT_LIMIT = -1;, +        protected int limit = Defaults.DEFAULT_LIMIT;, +, +        public Builder limit(int limit) {, +            this.limit = limit;, +            return this;, +        }, +, +                    indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer, positionOffsetGap, limit);, +                } else if (propName.equals("limit")) {, +                    builder.limit(XContentMapValues.nodeIntegerValue(propNode, -1));, +    private int limit;, +, +        this(names, index, store, termVector, boost, omitNorms, omitTermFreqAndPositions, nullValue, indexAnalyzer,, +                searchAnalyzer, searchAnalyzer, Defaults.POSITION_OFFSET_GAP, Defaults.DEFAULT_LIMIT);, +                                String nullValue, NamedAnalyzer indexAnalyzer, NamedAnalyzer searchAnalyzer,, +                                NamedAnalyzer searchQuotedAnalyzer, int positionOffsetGap, int limit) {, +        this.limit = limit;, +        if (limit > 0 && value.length() > limit) {, +            return null;, +        }, +        if (limit != Defaults.DEFAULT_LIMIT) {, +            builder.field("limit", limit);, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/SimpleMapperTests.java, +, +    @Test, +    public void testLimit() throws Exception {, +        String mapping = copyToStringFromClasspath("/org/elasticsearch/test/unit/index/mapper/simple/test-mapping.json");, +        DocumentMapper docMapper = MapperTests.newParser().parse(mapping);, +        String builtMapping = docMapper.mappingSource().string();, +, +        // reparse it]