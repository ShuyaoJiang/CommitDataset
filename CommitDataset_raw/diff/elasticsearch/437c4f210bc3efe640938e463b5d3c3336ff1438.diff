[+++ b/client-sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +import org.elasticsearch.client.Response;, +        try (Response response = restClient.performRequest("get", "/_nodes/http", sniffRequestParams, null)) {, +++ b/client-sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +import org.elasticsearch.client.Response;, +        try (Response response = restClient.performRequest("get", "/_nodes/http", sniffRequestParams, null)) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +import org.elasticsearch.client.Response;, +import org.elasticsearch.client.ResponseException;, +            } catch(ResponseException e) {, +                Response response = e.getResponse();, +++ b/client-sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +import org.elasticsearch.client.Response;, +        try (Response response = restClient.performRequest("get", "/_nodes/http", sniffRequestParams, null)) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +import org.elasticsearch.client.Response;, +import org.elasticsearch.client.ResponseException;, +            } catch(ResponseException e) {, +                Response response = e.getResponse();, +++ /dev/null, +++ b/client-sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +import org.elasticsearch.client.Response;, +        try (Response response = restClient.performRequest("get", "/_nodes/http", sniffRequestParams, null)) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +import org.elasticsearch.client.Response;, +import org.elasticsearch.client.ResponseException;, +            } catch(ResponseException e) {, +                Response response = e.getResponse();, +++ /dev/null, +++ /dev/null, +++ b/client-sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +import org.elasticsearch.client.Response;, +        try (Response response = restClient.performRequest("get", "/_nodes/http", sniffRequestParams, null)) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +import org.elasticsearch.client.Response;, +import org.elasticsearch.client.ResponseException;, +            } catch(ResponseException e) {, +                Response response = e.getResponse();, +++ /dev/null, +++ /dev/null, +++ b/client/src/main/java/org/elasticsearch/client/Response.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client;, +, +import org.apache.http.Header;, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpHost;, +import org.apache.http.RequestLine;, +import org.apache.http.StatusLine;, +import org.apache.http.client.methods.CloseableHttpResponse;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.Objects;, +, +/**, + * Holds an elasticsearch response. It wraps the {@link CloseableHttpResponse} response and associates it with, + * its corresponding {@link RequestLine} and {@link HttpHost}., + * It must be closed to free any resource held by it, as well as the corresponding connection in the connection pool., + */, +public class Response implements Closeable {, +, +    private final RequestLine requestLine;, +    private final HttpHost host;, +    private final CloseableHttpResponse response;, +, +    Response(RequestLine requestLine, HttpHost host, CloseableHttpResponse response) {, +        Objects.requireNonNull(requestLine, "requestLine cannot be null");, +        Objects.requireNonNull(host, "node cannot be null");, +        Objects.requireNonNull(response, "response cannot be null");, +        this.requestLine = requestLine;, +        this.host = host;, +        this.response = response;, +    }, +, +    /**, +     * Returns the request line that generated this response, +     */, +    public RequestLine getRequestLine() {, +        return requestLine;, +    }, +]