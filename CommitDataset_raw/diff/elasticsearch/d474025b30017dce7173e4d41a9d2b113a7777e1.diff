[+++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/cloud/aws/network/Ec2NameResolver.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.net.URL;, +	/**, +	 *  enum that can be added to over time with more meta-data types (such as ipv6 when this is available), +	 *  , +	 * @author Paul_Loy, +	 */, +		// some less verbose defaults, +	public Ec2NameResolver() {, +	 * @see CustomNameResolver#resolveIfPossible(String), +	public InetAddress resolve(Ec2HostnameType type) throws IOException {, +		URL url = new URL(EC2_METADATA_URL + type.ec2Name);, +		BufferedReader urlReader = new BufferedReader(new InputStreamReader(url.openStream()));, +, +		String metadataResult = urlReader.readLine();, +		if (metadataResult == null || metadataResult.length() == 0) {, +			throw new IOException("no ec2 metadata returned from :" + url);, +	/*, +	 * (non-Javadoc), +	 * @see org.elasticsearch.common.network.NetworkService.CustomNameResolver#resolveDefault(), +	 */, +	@Override, +	public InetAddress resolveDefault() throws IOException {, +		return resolve(Ec2HostnameType.DEFAULT);, +, +	/*, +	 * (non-Javadoc), +	 * @see org.elasticsearch.common.network.NetworkService.CustomNameResolver#resolveIfPossible(java.lang.String), +	 */, +	@Override, +	public InetAddress resolveIfPossible(String value) throws IOException {, +		for (Ec2HostnameType type : Ec2HostnameType.values()) {, +			if (type.configName.equals(value)) {, +				return resolve(type);, +			}, +		}, +		return null;]