[+++ b/core/src/main/java/org/elasticsearch/Version.java, +    // The logic for ID is: XXYYZZAA, where XX is major version, YY is minor version, ZZ is revision, and AA is alpha/beta/rc indicator, +    // AA values below 25 are fro alpha builder (since 5.0), and above 25 and below 50 are beta builds, and below 99 are RC builds, with 99 indicating a release, +            final int rawMajor = Integer.parseInt(parts[0]);, +            final int betaOffset = rawMajor < 5 ? 0 : 25;, +            final int major = rawMajor * 1000000;, +                if (buildStr.startsWith("alpha")) {, +                    assert rawMajor >= 5 : "major must be >= 5 but was " + major;, +                    build = Integer.parseInt(buildStr.substring(5));, +                    assert build < 25 : "expected a beta build but " + build + " >= 25";, +                } else if (buildStr.startsWith("Beta") || buildStr.startsWith("beta")) {, +                    build = betaOffset + Integer.parseInt(buildStr.substring(4));, +                    assert build < 50 : "expected a beta build but " + build + " >= 50";, +                } else if (buildStr.startsWith("RC") || buildStr.startsWith("rc")) {, +                } else {, +                    throw new IllegalArgumentException("unable to parse version " + version);, +        if (isAlpha()) {, +            sb.append("-alpha");, +            sb.append(build);, +        } else if (isBeta()) {, +            sb.append(major < 5 ? build : build-25);, +        return major < 5 ? build < 50 : build >= 25 && build < 50;, +    }, +, +    /**, +     * Returns true iff this version is an alpha version, +     * Note: This has been introduced in elasticsearch version 5. Previous versions will never, +     * have an alpha version., +     */, +    public boolean isAlpha() {, +        return major < 5 ? false :  build < 25;, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    // The logic for ID is: XXYYZZAA, where XX is major version, YY is minor version, ZZ is revision, and AA is alpha/beta/rc indicator, +    // AA values below 25 are fro alpha builder (since 5.0), and above 25 and below 50 are beta builds, and below 99 are RC builds, with 99 indicating a release, +            final int rawMajor = Integer.parseInt(parts[0]);, +            final int betaOffset = rawMajor < 5 ? 0 : 25;, +            final int major = rawMajor * 1000000;, +                if (buildStr.startsWith("alpha")) {, +                    assert rawMajor >= 5 : "major must be >= 5 but was " + major;, +                    build = Integer.parseInt(buildStr.substring(5));, +                    assert build < 25 : "expected a beta build but " + build + " >= 25";, +                } else if (buildStr.startsWith("Beta") || buildStr.startsWith("beta")) {, +                    build = betaOffset + Integer.parseInt(buildStr.substring(4));, +                    assert build < 50 : "expected a beta build but " + build + " >= 50";, +                } else if (buildStr.startsWith("RC") || buildStr.startsWith("rc")) {, +                } else {, +                    throw new IllegalArgumentException("unable to parse version " + version);, +        if (isAlpha()) {, +            sb.append("-alpha");, +            sb.append(build);, +        } else if (isBeta()) {, +            sb.append(major < 5 ? build : build-25);, +        return major < 5 ? build < 50 : build >= 25 && build < 50;, +    }, +, +    /**, +     * Returns true iff this version is an alpha version, +     * Note: This has been introduced in elasticsearch version 5. Previous versions will never, +     * have an alpha version., +     */, +    public boolean isAlpha() {, +        return major < 5 ? false :  build < 25;, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +, +        assertTrue(Version.fromString("5.0.0-alpha2").onOrAfter(Version.fromString("5.0.0-alpha1")));, +        assertTrue(Version.fromString("5.0.0").onOrAfter(Version.fromString("5.0.0-beta2")));, +        assertTrue(Version.fromString("5.0.0-rc1").onOrAfter(Version.fromString("5.0.0-beta24")));, +        assertTrue(Version.fromString("5.0.0-alpha24").before(Version.fromString("5.0.0-beta0")));, +, +        assertEquals("0.90.0.Beta1", Version.fromString("0.90.0.Beta1").toString());, +        assertEquals("1.0.0.Beta1", Version.fromString("1.0.0.Beta1").toString());, +        assertEquals("2.0.0-beta1", Version.fromString("2.0.0-beta1").toString());, +        assertEquals("5.0.0-beta1", Version.fromString("5.0.0-beta1").toString());, +        assertEquals("5.0.0-alpha1", Version.fromString("5.0.0-alpha1").toString());, +        assertTrue(Version.fromString("1.0.0.Beta1").isBeta());, +        assertTrue(Version.fromString("0.90.0.Beta1").isBeta());, +, +    public void testIsAlpha() {, +        assertTrue(new Version(5000001, org.apache.lucene.util.Version.LUCENE_6_0_0).isAlpha());, +        assertFalse(new Version(4000002, org.apache.lucene.util.Version.LUCENE_6_0_0).isAlpha());, +        assertTrue(new Version(4000002, org.apache.lucene.util.Version.LUCENE_6_0_0).isBeta());, +        assertTrue(Version.fromString("5.0.0-alpha14").isAlpha());, +        assertEquals(5000014, Version.fromString("5.0.0-alpha14").id);, +        assertTrue(Version.fromId(5000015).isAlpha());, +, +        for (int i = 0 ; i < 25; i++) {, +            assertEquals(Version.fromString("5.0.0-alpha" + i).id, Version.fromId(5000000 + i).id);, +            assertEquals("5.0.0-alpha" + i, Version.fromId(5000000 + i).toString());, +        }, +, +        for (int i = 0 ; i < 25; i++) {, +            assertEquals(Version.fromString("5.0.0-beta" + i).id, Version.fromId(5000000 + i + 25).id);, +            assertEquals("5.0.0-beta" + i, Version.fromId(5000000 + i + 25).toString());, +        }, +    }, +, +, +, +        expectThrows(IllegalArgumentException.class, () -> {, +            Version.fromString("5.0.0-alph2");]