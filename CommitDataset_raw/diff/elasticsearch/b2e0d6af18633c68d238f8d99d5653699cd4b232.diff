[+++ b/build.gradle, +++ b/build.gradle, +++ b/distribution/archives/build.gradle, +      final List<String> actualLines = Files.readAllLines(licensePath), +      assertLinesInFile(licensePath, actualLines, licenseLines), +      final List<String> actualLines = Files.readAllLines(noticePath), +      assertLinesInFile(noticePath, actualLines, noticeLines), +, +++ b/build.gradle, +++ b/distribution/archives/build.gradle, +      final List<String> actualLines = Files.readAllLines(licensePath), +      assertLinesInFile(licensePath, actualLines, licenseLines), +      final List<String> actualLines = Files.readAllLines(noticePath), +      assertLinesInFile(noticePath, actualLines, noticeLines), +, +++ b/distribution/build.gradle, +, +static void assertLinesInFile(final Path path, final List<String> actualLines, final List<String> expectedLines) {, +  int line = 0, +  for (final String expectedLine : expectedLines) {, +    final String actualLine = actualLines.get(line), +    if (expectedLine != actualLine) {, +      throw new GradleException("expected line [${line + 1}] in [${path}] to be [${expectedLine}] but was [${actualLine}]"), +    }, +    line++, +  }, +}, +++ b/build.gradle, +++ b/distribution/archives/build.gradle, +      final List<String> actualLines = Files.readAllLines(licensePath), +      assertLinesInFile(licensePath, actualLines, licenseLines), +      final List<String> actualLines = Files.readAllLines(noticePath), +      assertLinesInFile(noticePath, actualLines, noticeLines), +, +++ b/distribution/build.gradle, +, +static void assertLinesInFile(final Path path, final List<String> actualLines, final List<String> expectedLines) {, +  int line = 0, +  for (final String expectedLine : expectedLines) {, +    final String actualLine = actualLines.get(line), +    if (expectedLine != actualLine) {, +      throw new GradleException("expected line [${line + 1}] in [${path}] to be [${expectedLine}] but was [${actualLine}]"), +    }, +    line++, +  }, +}, +++ b/distribution/packages/build.gradle, +        final List<String> actualLines = Files.readAllLines(copyrightPath), +        assertLinesInFile(copyrightPath, actualLines, expectedLines), +        final List<String> actualLines = Files.readAllLines(licensePath), +        assertLinesInFile(licensePath, actualLines, licenseLines), +      final List<String> actualLines = Files.readAllLines(noticePath), +      assertLinesInFile(noticePath, actualLines, noticeLines), +++ b/build.gradle, +++ b/distribution/archives/build.gradle, +      final List<String> actualLines = Files.readAllLines(licensePath), +      assertLinesInFile(licensePath, actualLines, licenseLines), +      final List<String> actualLines = Files.readAllLines(noticePath), +      assertLinesInFile(noticePath, actualLines, noticeLines), +, +++ b/distribution/build.gradle, +, +static void assertLinesInFile(final Path path, final List<String> actualLines, final List<String> expectedLines) {, +  int line = 0, +  for (final String expectedLine : expectedLines) {, +    final String actualLine = actualLines.get(line), +    if (expectedLine != actualLine) {, +      throw new GradleException("expected line [${line + 1}] in [${path}] to be [${expectedLine}] but was [${actualLine}]"), +    }, +    line++, +  }, +}, +++ b/distribution/packages/build.gradle, +        final List<String> actualLines = Files.readAllLines(copyrightPath), +        assertLinesInFile(copyrightPath, actualLines, expectedLines), +        final List<String> actualLines = Files.readAllLines(licensePath), +        assertLinesInFile(licensePath, actualLines, licenseLines), +      final List<String> actualLines = Files.readAllLines(noticePath), +      assertLinesInFile(noticePath, actualLines, noticeLines), +++ b/docs/reference/modules/transport.asciidoc, +|`transport.tcp.compress` |Set to `true` to enable compression (LZF), +++ b/build.gradle, +++ b/distribution/archives/build.gradle, +      final List<String> actualLines = Files.readAllLines(licensePath), +      assertLinesInFile(licensePath, actualLines, licenseLines), +      final List<String> actualLines = Files.readAllLines(noticePath), +      assertLinesInFile(noticePath, actualLines, noticeLines), +, +++ b/distribution/build.gradle, +, +static void assertLinesInFile(final Path path, final List<String> actualLines, final List<String> expectedLines) {, +  int line = 0, +  for (final String expectedLine : expectedLines) {, +    final String actualLine = actualLines.get(line), +    if (expectedLine != actualLine) {, +      throw new GradleException("expected line [${line + 1}] in [${path}] to be [${expectedLine}] but was [${actualLine}]"), +    }, +    line++, +  }, +}]