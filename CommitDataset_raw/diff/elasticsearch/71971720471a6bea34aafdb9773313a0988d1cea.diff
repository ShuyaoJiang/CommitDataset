[+++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.action.support.replication.ReplicationTask;, +import org.elasticsearch.tasks.Task;, +        registerTaskStatus(ReplicationTask.Status.PROTOTYPE);, +    public void registerTaskStatus(Task.Status prototype) {, +        namedWriteableRegistry.registerPrototype(Task.Status.class, prototype);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.action.support.replication.ReplicationTask;, +import org.elasticsearch.tasks.Task;, +        registerTaskStatus(ReplicationTask.Status.PROTOTYPE);, +    public void registerTaskStatus(Task.Status prototype) {, +        namedWriteableRegistry.registerPrototype(Task.Status.class, prototype);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +        this(EMPTY_SETTINGS, transport, threadPool);, +    public TransportService(Settings settings, Transport transport, ThreadPool threadPool) {, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.action.support.replication.ReplicationTask;, +import org.elasticsearch.tasks.Task;, +        registerTaskStatus(ReplicationTask.Status.PROTOTYPE);, +    public void registerTaskStatus(Task.Status prototype) {, +        namedWriteableRegistry.registerPrototype(Task.Status.class, prototype);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +        this(EMPTY_SETTINGS, transport, threadPool);, +    public TransportService(Settings settings, Transport transport, ThreadPool threadPool) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TaskManagerTestCase.java, +                threadPool) {, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.action.support.replication.ReplicationTask;, +import org.elasticsearch.tasks.Task;, +        registerTaskStatus(ReplicationTask.Status.PROTOTYPE);, +    public void registerTaskStatus(Task.Status prototype) {, +        namedWriteableRegistry.registerPrototype(Task.Status.class, prototype);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +        this(EMPTY_SETTINGS, transport, threadPool);, +    public TransportService(Settings settings, Transport transport, ThreadPool threadPool) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TaskManagerTestCase.java, +                threadPool) {, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java, +        public InternalTransportService(Settings settings, Transport transport, ThreadPool threadPool) {, +            super(settings, transport, threadPool);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.action.support.replication.ReplicationTask;, +import org.elasticsearch.tasks.Task;, +        registerTaskStatus(ReplicationTask.Status.PROTOTYPE);, +    public void registerTaskStatus(Task.Status prototype) {, +        namedWriteableRegistry.registerPrototype(Task.Status.class, prototype);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +        this(EMPTY_SETTINGS, transport, threadPool);, +    public TransportService(Settings settings, Transport transport, ThreadPool threadPool) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TaskManagerTestCase.java, +                threadPool) {, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java, +        public InternalTransportService(Settings settings, Transport transport, ThreadPool threadPool) {, +            super(settings, transport, threadPool);, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java, +            transportService = new TransportService(Settings.EMPTY, transport, threadPool);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.action.support.replication.ReplicationTask;, +import org.elasticsearch.tasks.Task;, +        registerTaskStatus(ReplicationTask.Status.PROTOTYPE);, +    public void registerTaskStatus(Task.Status prototype) {, +        namedWriteableRegistry.registerPrototype(Task.Status.class, prototype);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +        this(EMPTY_SETTINGS, transport, threadPool);, +    public TransportService(Settings settings, Transport transport, ThreadPool threadPool) {, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TaskManagerTestCase.java, +                threadPool) {, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientHeadersTests.java, +        public InternalTransportService(Settings settings, Transport transport, ThreadPool threadPool) {, +            super(settings, transport, threadPool);, +++ b/core/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java, +            transportService = new TransportService(Settings.EMPTY, transport, threadPool);, +++ b/core/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java, +import org.elasticsearch.action.support.replication.ReplicationTask;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.ToXContent.Params;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.Task.Status;, +import java.io.IOException;, +, +import static org.hamcrest.Matchers.sameInstance;, +, +        NetworkModule module = new NetworkModule(new NetworkService(settings), settings, false, new NamedWriteableRegistry());, +        module = new NetworkModule(new NetworkService(settings), settings, true, new NamedWriteableRegistry());, +        NetworkModule module = new NetworkModule(new NetworkService(settings), settings, false, new NamedWriteableRegistry());]