[+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +    private static boolean containsDisabledObjectMapper(ObjectMapper objectMapper, String[] subfields) {, +        for (int i = 0; i < subfields.length - 1; ++i) {, +            Mapper mapper = objectMapper.getMapper(subfields[i]);, +            if (mapper instanceof ObjectMapper == false) {, +                break;, +            }, +            objectMapper = (ObjectMapper) mapper;, +            if (objectMapper.isEnabled() == false) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +        assert token == XContentParser.Token.FIELD_NAME || token == XContentParser.Token.END_OBJECT;, +        String[] paths = null;, +            if (token == XContentParser.Token.FIELD_NAME) {, +                paths = splitAndValidatePath(currentFieldName);, +                } else if (containsDisabledObjectMapper(mapper, paths)) {, +                    parser.nextToken();, +                    parser.skipChildren();, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                parseObject(context, mapper, currentFieldName, paths);, +            } else if (token == XContentParser.Token.START_ARRAY) {, +                parseArray(context, mapper, currentFieldName, paths);, +                parseNullValue(context, mapper, currentFieldName, paths);, +                parseValue(context, mapper, currentFieldName, token, paths);, +    private static void parseObject(final ParseContext context, ObjectMapper mapper, String currentFieldName,, +                                    String[] paths) throws IOException {, +    private static void parseArray(ParseContext context, ObjectMapper parentMapper, String lastFieldName,, +                                   String[] paths) throws IOException {, +                                             final String lastFieldName, String arrayFieldName) throws IOException {, +        final String[] paths = splitAndValidatePath(lastFieldName);, +                parseObject(context, mapper, lastFieldName, paths);, +                parseArray(context, mapper, lastFieldName, paths);, +                parseNullValue(context, mapper, lastFieldName, paths);, +                assert token.isValue();, +                parseValue(context, mapper, lastFieldName, token, paths);, +                                   String currentFieldName, XContentParser.Token token, String[] paths) throws IOException {, +    private static void parseNullValue(ParseContext context, ObjectMapper parentMapper, String lastFieldName,, +                                       String[] paths) throws IOException {, +        Mapper mapper = getMapper(parentMapper, lastFieldName, paths);, +++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +    private static boolean containsDisabledObjectMapper(ObjectMapper objectMapper, String[] subfields) {, +        for (int i = 0; i < subfields.length - 1; ++i) {, +            Mapper mapper = objectMapper.getMapper(subfields[i]);, +            if (mapper instanceof ObjectMapper == false) {, +                break;, +            }, +            objectMapper = (ObjectMapper) mapper;, +            if (objectMapper.isEnabled() == false) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +        assert token == XContentParser.Token.FIELD_NAME || token == XContentParser.Token.END_OBJECT;, +        String[] paths = null;, +            if (token == XContentParser.Token.FIELD_NAME) {, +                paths = splitAndValidatePath(currentFieldName);, +                } else if (containsDisabledObjectMapper(mapper, paths)) {, +                    parser.nextToken();, +                    parser.skipChildren();, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                parseObject(context, mapper, currentFieldName, paths);, +            } else if (token == XContentParser.Token.START_ARRAY) {, +                parseArray(context, mapper, currentFieldName, paths);, +                parseNullValue(context, mapper, currentFieldName, paths);, +                parseValue(context, mapper, currentFieldName, token, paths);, +    private static void parseObject(final ParseContext context, ObjectMapper mapper, String currentFieldName,, +                                    String[] paths) throws IOException {, +    private static void parseArray(ParseContext context, ObjectMapper parentMapper, String lastFieldName,, +                                   String[] paths) throws IOException {, +                                             final String lastFieldName, String arrayFieldName) throws IOException {, +        final String[] paths = splitAndValidatePath(lastFieldName);, +                parseObject(context, mapper, lastFieldName, paths);, +                parseArray(context, mapper, lastFieldName, paths);, +                parseNullValue(context, mapper, lastFieldName, paths);, +                assert token.isValue();, +                parseValue(context, mapper, lastFieldName, token, paths);, +                                   String currentFieldName, XContentParser.Token token, String[] paths) throws IOException {, +    private static void parseNullValue(ParseContext context, ObjectMapper parentMapper, String lastFieldName,, +                                       String[] paths) throws IOException {, +        Mapper mapper = getMapper(parentMapper, lastFieldName, paths);, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java, +    public void testDotsWithFieldDisabled() throws IOException {, +        DocumentMapperParser mapperParser = createIndex("test").mapperService().documentMapperParser();, +        String mapping = Strings.toString(jsonBuilder().startObject().startObject("type").startObject("properties"), +            .startObject("foo").field("enabled", false).endObject(), +            .endObject().endObject().endObject());, +        DocumentMapper mapper = mapperParser.parse("type", new CompressedXContent(mapping));, +        {, +            BytesReference bytes = BytesReference.bytes(jsonBuilder(), +                .startObject(), +                .field("foo.bar", 111), +                .endObject());, +            ParsedDocument doc = mapper.parse(new SourceToParse("test", "type", "1", bytes, XContentType.JSON));, +            assertNull(doc.rootDoc().getField("foo"));]