[+++ b/server/src/main/java/org/elasticsearch/common/time/DateUtils.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZonedDateTime;, +, +    /**, +     * Returns the current UTC date-time with milliseconds precision., +     * In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean, +     * that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8, +     * {@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}, +     * which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision., +     *, +     * @return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC, +     */, +    public static ZonedDateTime nowWithMillisResolution() {, +        Clock millisResolutionClock = Clock.tick(Clock.systemUTC(), Duration.ofMillis(1));, +        return ZonedDateTime.now(millisResolutionClock);, +    }, +++ b/server/src/main/java/org/elasticsearch/common/time/DateUtils.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZonedDateTime;, +, +    /**, +     * Returns the current UTC date-time with milliseconds precision., +     * In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean, +     * that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8, +     * {@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}, +     * which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision., +     *, +     * @return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC, +     */, +    public static ZonedDateTime nowWithMillisResolution() {, +        Clock millisResolutionClock = Clock.tick(Clock.systemUTC(), Duration.ofMillis(1));, +        return ZonedDateTime.now(millisResolutionClock);, +    }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/protocol/xpack/watcher/GetWatchResponseTests.java, +import org.elasticsearch.common.time.DateUtils;, +        WatchStatus.State state = new WatchStatus.State(randomBoolean(), DateUtils.nowWithMillisResolution());, +        ZonedDateTime lastChecked = rarely() ? null : DateUtils.nowWithMillisResolution();, +        ZonedDateTime lastMetCondition = rarely() ? null : DateUtils.nowWithMillisResolution();, +                DateUtils.nowWithMillisResolution(),, +        return new ActionStatus.Throttle(DateUtils.nowWithMillisResolution(), randomAlphaOfLengthBetween(10, 20));, +            return ActionStatus.Execution.failure(DateUtils.nowWithMillisResolution(), randomAlphaOfLengthBetween(10, 20));, +            return ActionStatus.Execution.successful(DateUtils.nowWithMillisResolution());, +++ b/server/src/main/java/org/elasticsearch/common/time/DateUtils.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZonedDateTime;, +, +    /**, +     * Returns the current UTC date-time with milliseconds precision., +     * In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean, +     * that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8, +     * {@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}, +     * which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision., +     *, +     * @return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC, +     */, +    public static ZonedDateTime nowWithMillisResolution() {, +        Clock millisResolutionClock = Clock.tick(Clock.systemUTC(), Duration.ofMillis(1));, +        return ZonedDateTime.now(millisResolutionClock);, +    }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/protocol/xpack/watcher/GetWatchResponseTests.java, +import org.elasticsearch.common.time.DateUtils;, +        WatchStatus.State state = new WatchStatus.State(randomBoolean(), DateUtils.nowWithMillisResolution());, +        ZonedDateTime lastChecked = rarely() ? null : DateUtils.nowWithMillisResolution();, +        ZonedDateTime lastMetCondition = rarely() ? null : DateUtils.nowWithMillisResolution();, +                DateUtils.nowWithMillisResolution(),, +        return new ActionStatus.Throttle(DateUtils.nowWithMillisResolution(), randomAlphaOfLengthBetween(10, 20));, +            return ActionStatus.Execution.failure(DateUtils.nowWithMillisResolution(), randomAlphaOfLengthBetween(10, 20));, +            return ActionStatus.Execution.successful(DateUtils.nowWithMillisResolution());, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/calendars/ScheduledEventTests.java, +import org.elasticsearch.common.time.DateUtils;, +        ZonedDateTime start = DateUtils.nowWithMillisResolution();, +++ b/server/src/main/java/org/elasticsearch/common/time/DateUtils.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZonedDateTime;, +, +    /**, +     * Returns the current UTC date-time with milliseconds precision., +     * In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean, +     * that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8, +     * {@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}, +     * which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision., +     *, +     * @return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC, +     */, +    public static ZonedDateTime nowWithMillisResolution() {, +        Clock millisResolutionClock = Clock.tick(Clock.systemUTC(), Duration.ofMillis(1));, +        return ZonedDateTime.now(millisResolutionClock);, +    }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/protocol/xpack/watcher/GetWatchResponseTests.java, +import org.elasticsearch.common.time.DateUtils;, +        WatchStatus.State state = new WatchStatus.State(randomBoolean(), DateUtils.nowWithMillisResolution());, +        ZonedDateTime lastChecked = rarely() ? null : DateUtils.nowWithMillisResolution();, +        ZonedDateTime lastMetCondition = rarely() ? null : DateUtils.nowWithMillisResolution();, +                DateUtils.nowWithMillisResolution(),, +        return new ActionStatus.Throttle(DateUtils.nowWithMillisResolution(), randomAlphaOfLengthBetween(10, 20));]