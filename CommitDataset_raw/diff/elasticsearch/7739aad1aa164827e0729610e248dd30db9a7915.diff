[+++ b/core/src/test/java/org/elasticsearch/index/translog/TruncateTranslogIT.java, +import org.elasticsearch.action.admin.indices.flush.FlushRequest;, +import org.elasticsearch.action.admin.indices.recovery.RecoveryResponse;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.indices.recovery.RecoveryState;, +import org.elasticsearch.test.InternalTestCluster;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +        internalCluster().startNodes(2, Settings.EMPTY);, +, +        final String replicaNode = internalCluster().getNodeNames()[1];, +            .put("index.number_of_replicas", 1), +            .put("index.routing.allocation.exclude._name", replicaNode), +        assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder(), +            .put("index.routing.allocation.exclude._name", (String)null), +        ));, +, +        logger.info("--> indexing more doc to be kept");, +        int numDocsToKeep = randomIntBetween(0, 100);, +        IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocsToKeep];, +        indexRandom(false, false, false, Arrays.asList(builders));, +        flush("test");, +        // having no extra docs is an interesting case for seq no based recoveries - test it more often, +        int numDocsToTruncate = randomBoolean() ? 0 : randomIntBetween(0, 100);, +        logger.info("--> indexing [{}] more doc to be truncated", numDocsToTruncate);, +        builders = new IndexRequestBuilder[numDocsToTruncate];, +        for (int i = 0; i < builders.length; i++) {, +            builders[i] = client().prepareIndex("test", "type").setSource("foo", "bar");, +        }, +        final boolean expectSeqNoRecovery;, +        if (randomBoolean() && numDocsToTruncate > 0) {, +            // flush the replica, so it will have more docs than what the primary will have, +            Index index = resolveIndex("test");, +            IndexShard replica = internalCluster().getInstance(IndicesService.class, replicaNode).getShardOrNull(new ShardId(index, 0));, +            replica.flush(new FlushRequest());, +            expectSeqNoRecovery = false;, +            logger.info("--> ops based recovery disabled by flushing replica");, +        } else {, +            expectSeqNoRecovery = true;, +        }, +, +        // shut down the replica node to be tested later, +        internalCluster().stopRandomNode(InternalTestCluster.nameFilter(replicaNode));, +, +        internalCluster().restartRandomDataNode();, +        assertHitCount(client().prepareSearch("test").setQuery(matchAllQuery()).get(), numDocsToKeep);, +, +        logger.info("--> starting the replica node to test recovery");, +        internalCluster().startNode();, +        ensureGreen("test");, +        assertHitCount(client().prepareSearch("test").setPreference("_replica").setQuery(matchAllQuery()).get(), numDocsToKeep);, +        final RecoveryResponse recoveryResponse = client().admin().indices().prepareRecoveries("test").setActiveOnly(false).get();, +        final RecoveryState replicaRecoveryState = recoveryResponse.shardRecoveryStates().get("test").stream(), +            .filter(recoveryState -> recoveryState.getPrimary() == false).findFirst().get();, +        assertThat(replicaRecoveryState.getIndex().toString(), replicaRecoveryState.getIndex().recoveredFileCount(),, +            expectSeqNoRecovery ? equalTo(0) : greaterThan(0));, +    }, +, +    public void testCorruptTranslogTruncationOfReplica() throws Exception {, +        internalCluster().startNodes(2, Settings.EMPTY);, +, +        final String primaryNode = internalCluster().getNodeNames()[0];, +        final String replicaNode = internalCluster().getNodeNames()[1];, +, +        assertAcked(prepareCreate("test").setSettings(Settings.builder(), +            .put("index.number_of_shards", 1), +            .put("index.number_of_replicas", 1), +            .put("index.refresh_interval", "-1"), +            .put(MockEngineSupport.DISABLE_FLUSH_ON_CLOSE.getKey(), true) // never flush - always recover from translog, +            .put("index.routing.allocation.exclude._name", replicaNode), +        ));, +        ensureYellow();, +, +        assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder(), +            .put("index.routing.allocation.exclude._name", (String)null), +        ));, +        ensureGreen();, +, +        // Index some documents, +        logger.info("--> indexing more doc to be kept");, +        int numDocsToKeep = randomIntBetween(0, 100);, +        IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocsToKeep];, +        for (int i = 0; i < builders.length; i++) {, +            builders[i] = client().prepareIndex("test", "type").setSource("foo", "bar");, +        }, +        indexRandom(false, false, false, Arrays.asList(builders));, +        flush("test");, +        disableTranslogFlush("test");, +        // having no extra docs is an interesting case for seq no based recoveries - test it more often, +        int numDocsToTruncate = randomBoolean() ? 0 : randomIntBetween(0, 100);, +        logger.info("--> indexing [{}] more doc to be truncated", numDocsToTruncate);, +        builders = new IndexRequestBuilder[numDocsToTruncate];, +        for (int i = 0; i < builders.length; i++) {, +            builders[i] = client().prepareIndex("test", "type").setSource("foo", "bar");, +        }, +        indexRandom(false, false, false, Arrays.asList(builders));, +        final int totalDocs = numDocsToKeep + numDocsToTruncate;]