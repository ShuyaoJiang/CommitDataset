[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +                fields.add(fieldMapper.names().indexName());, +    public Set<String> simpleMatchToFullName(String pattern) {, +        Set<String> fields = Sets.newHashSet();, +        for (FieldMapper fieldMapper : fieldMappers) {, +            if (Regex.simpleMatch(pattern, fieldMapper.names().fullName())) {, +                fields.add(fieldMapper.names().fullName());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().indexName())) {, +                fields.add(fieldMapper.names().fullName());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().name())) {, +                fields.add(fieldMapper.names().fullName());, +            }, +        }, +        return fields;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +                fields.add(fieldMapper.names().indexName());, +    public Set<String> simpleMatchToFullName(String pattern) {, +        Set<String> fields = Sets.newHashSet();, +        for (FieldMapper fieldMapper : fieldMappers) {, +            if (Regex.simpleMatch(pattern, fieldMapper.names().fullName())) {, +                fields.add(fieldMapper.names().fullName());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().indexName())) {, +                fields.add(fieldMapper.names().fullName());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().name())) {, +                fields.add(fieldMapper.names().fullName());, +            }, +        }, +        return fields;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +import org.elasticsearch.common.regex.Regex;, +, +            Set<String> fieldNamesToHighlight;, +            if (Regex.isSimpleMatchPattern(field.field())) {, +                fieldNamesToHighlight = documentMapper.mappers().simpleMatchToFullName(field.field());, +            } else {, +                fieldNamesToHighlight = ImmutableSet.of(field.field());, +            }, +, +            for (String fieldName : fieldNamesToHighlight) {, +, +                FieldMapper mapper = documentMapper.mappers().smartNameFieldMapper(fieldName);, +                    MapperService.SmartNameFieldMappers fullMapper = context.mapperService().smartName(fieldName);, +                        throw new ElasticSearchIllegalArgumentException("the field [" + fieldName + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");, +                    throw new ElasticSearchIllegalArgumentException("unknown highlighter type [" + field.highlighterType() + "] for the field [" + fieldName + "]");, +                            throw new ElasticSearchIllegalArgumentException("unknown fragmenter option [" + field.fragmenter() + "] for the field [" + fieldName + "]");, +                            throw new FetchPhaseExecutionException(context, "Failed to highlight field [" + fieldName + "]", e);, +                        throw new FetchPhaseExecutionException(context, "Failed to highlight field [" + fieldName + "]", e);, +                        HighlightField highlightField = new HighlightField(fieldName, StringText.convertFromStringArray(fragments));, +                            HighlightField highlightField = new HighlightField(fieldName, StringText.convertFromStringArray(fragments));, +                        throw new FetchPhaseExecutionException(context, "Failed to highlight field [" + fieldName + "]", e);, +                    }, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +                fields.add(fieldMapper.names().indexName());, +    public Set<String> simpleMatchToFullName(String pattern) {, +        Set<String> fields = Sets.newHashSet();, +        for (FieldMapper fieldMapper : fieldMappers) {, +            if (Regex.simpleMatch(pattern, fieldMapper.names().fullName())) {, +                fields.add(fieldMapper.names().fullName());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().indexName())) {, +                fields.add(fieldMapper.names().fullName());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().name())) {, +                fields.add(fieldMapper.names().fullName());, +            }, +        }, +        return fields;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +import org.elasticsearch.common.regex.Regex;, +, +            Set<String> fieldNamesToHighlight;, +            if (Regex.isSimpleMatchPattern(field.field())) {, +                fieldNamesToHighlight = documentMapper.mappers().simpleMatchToFullName(field.field());, +            } else {, +                fieldNamesToHighlight = ImmutableSet.of(field.field());, +            }, +, +            for (String fieldName : fieldNamesToHighlight) {, +, +                FieldMapper mapper = documentMapper.mappers().smartNameFieldMapper(fieldName);, +                    MapperService.SmartNameFieldMappers fullMapper = context.mapperService().smartName(fieldName);, +                        throw new ElasticSearchIllegalArgumentException("the field [" + fieldName + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");, +                    throw new ElasticSearchIllegalArgumentException("unknown highlighter type [" + field.highlighterType() + "] for the field [" + fieldName + "]");, +                            throw new ElasticSearchIllegalArgumentException("unknown fragmenter option [" + field.fragmenter() + "] for the field [" + fieldName + "]");, +                            throw new FetchPhaseExecutionException(context, "Failed to highlight field [" + fieldName + "]", e);, +                        throw new FetchPhaseExecutionException(context, "Failed to highlight field [" + fieldName + "]", e);, +                        HighlightField highlightField = new HighlightField(fieldName, StringText.convertFromStringArray(fragments));, +                            HighlightField highlightField = new HighlightField(fieldName, StringText.convertFromStringArray(fragments));, +                        throw new FetchPhaseExecutionException(context, "Failed to highlight field [" + fieldName + "]", e);, +                    }, +++ b/src/test/java/org/elasticsearch/test/integration/search/highlight/HighlighterSearchTests.java, +    public void testHighlightingOnWildcardFields() throws Exception {, +        client.admin().indices().prepareDelete().execute().actionGet();, +        client.admin().indices().prepareCreate("test").execute().actionGet();, +        client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().execute().actionGet();, +]