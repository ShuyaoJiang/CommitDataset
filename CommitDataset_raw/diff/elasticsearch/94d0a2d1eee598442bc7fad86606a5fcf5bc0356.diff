[+++ b/docs/en/sql/endpoints/sql-jdbc.asciidoc, +for Elasticsearch. You can connect to it using the two APIs offered, +by JDBC, namely `java.sql.Driver` and `DriverManager`:, +include-tagged::{jdbc-tests}/JdbcIntegrationTestCase.java[connect-dm], +or `javax.sql.DataSource` through , +["source","java",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{jdbc-tests}/JdbcIntegrationTestCase.java[connect-ds], +--------------------------------------------------, +<1> The server and port on which Elasticsearch is listening for, +HTTP traffic. The port is usually 9200., +<2> Properties for connecting to Elasticsearch. An empty `Properties`, +instance is fine for unsecured Elasticsearch., +, +Which one to use? Typically client applications that provide most, +configuration parameters in the URL rely on the `DriverManager`-style, +while `DataSource` is preferred when being _passed_ around since it can be, +configured in one place and the consumer only has to call `getConnection`, +without having to worry about any other parameters., +, +++ b/docs/en/sql/endpoints/sql-jdbc.asciidoc, +for Elasticsearch. You can connect to it using the two APIs offered, +by JDBC, namely `java.sql.Driver` and `DriverManager`:, +include-tagged::{jdbc-tests}/JdbcIntegrationTestCase.java[connect-dm], +or `javax.sql.DataSource` through , +["source","java",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{jdbc-tests}/JdbcIntegrationTestCase.java[connect-ds], +--------------------------------------------------, +<1> The server and port on which Elasticsearch is listening for, +HTTP traffic. The port is usually 9200., +<2> Properties for connecting to Elasticsearch. An empty `Properties`, +instance is fine for unsecured Elasticsearch., +, +Which one to use? Typically client applications that provide most, +configuration parameters in the URL rely on the `DriverManager`-style, +while `DataSource` is preferred when being _passed_ around since it can be, +configured in one place and the consumer only has to call `getConnection`, +without having to worry about any other parameters., +, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcCsvSpecIT.java, +        Properties sp = super.connectionProperties();, +        sp.putAll(JdbcSecurityIT.adminProperties());, +        return sp;, +++ b/docs/en/sql/endpoints/sql-jdbc.asciidoc, +for Elasticsearch. You can connect to it using the two APIs offered, +by JDBC, namely `java.sql.Driver` and `DriverManager`:, +include-tagged::{jdbc-tests}/JdbcIntegrationTestCase.java[connect-dm], +or `javax.sql.DataSource` through , +["source","java",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{jdbc-tests}/JdbcIntegrationTestCase.java[connect-ds], +--------------------------------------------------, +<1> The server and port on which Elasticsearch is listening for, +HTTP traffic. The port is usually 9200., +<2> Properties for connecting to Elasticsearch. An empty `Properties`, +instance is fine for unsecured Elasticsearch., +, +Which one to use? Typically client applications that provide most, +configuration parameters in the URL rely on the `DriverManager`-style, +while `DataSource` is preferred when being _passed_ around since it can be, +configured in one place and the consumer only has to call `getConnection`, +without having to worry about any other parameters., +, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcCsvSpecIT.java, +        Properties sp = super.connectionProperties();, +        sp.putAll(JdbcSecurityIT.adminProperties());, +        return sp;, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcSecurityIT.java, +        properties.put("password", "x-pack-test-password");, +        prop.put("password", "testpass");, +++ b/docs/en/sql/endpoints/sql-jdbc.asciidoc, +for Elasticsearch. You can connect to it using the two APIs offered, +by JDBC, namely `java.sql.Driver` and `DriverManager`:, +include-tagged::{jdbc-tests}/JdbcIntegrationTestCase.java[connect-dm], +or `javax.sql.DataSource` through , +["source","java",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{jdbc-tests}/JdbcIntegrationTestCase.java[connect-ds], +--------------------------------------------------, +<1> The server and port on which Elasticsearch is listening for, +HTTP traffic. The port is usually 9200., +<2> Properties for connecting to Elasticsearch. An empty `Properties`, +instance is fine for unsecured Elasticsearch., +, +Which one to use? Typically client applications that provide most, +configuration parameters in the URL rely on the `DriverManager`-style, +while `DataSource` is preferred when being _passed_ around since it can be, +configured in one place and the consumer only has to call `getConnection`, +without having to worry about any other parameters., +, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcCsvSpecIT.java, +        Properties sp = super.connectionProperties();, +        sp.putAll(JdbcSecurityIT.adminProperties());, +        return sp;, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcSecurityIT.java, +        properties.put("password", "x-pack-test-password");, +        prop.put("password", "testpass");, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcShowTablesIT.java, +        Properties sp = super.connectionProperties();]