[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        private Settings settings = Settings.EMPTY;, +            this.settings = settings;, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(NettyTransport.PING_SCHEDULE, "5s") // enable by default the transport schedule ping interval, +                    .put(settings), +                    .put("network.server", false), +                    .put("node.client", true), +                    .put(CLIENT_TYPE_SETTING, CLIENT_TYPE), +                    .build();, +, +            PluginsService pluginsService = new PluginsService(settings, null, null, pluginClasses);, +            this.settings = pluginsService.updatedSettings();, +                modules.add(new SettingsModule(this.settings, settingsFilter ));, +                modules.add(new NetworkModule(networkService, this.settings, true, namedWriteableRegistry));, +                modules.add(new ClusterNameModule(this.settings));, +                modules.add(new CircuitBreakerModule(this.settings));, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        private Settings settings = Settings.EMPTY;, +            this.settings = settings;, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(NettyTransport.PING_SCHEDULE, "5s") // enable by default the transport schedule ping interval, +                    .put(settings), +                    .put("network.server", false), +                    .put("node.client", true), +                    .put(CLIENT_TYPE_SETTING, CLIENT_TYPE), +                    .build();, +, +            PluginsService pluginsService = new PluginsService(settings, null, null, pluginClasses);, +            this.settings = pluginsService.updatedSettings();, +                modules.add(new SettingsModule(this.settings, settingsFilter ));, +                modules.add(new NetworkModule(networkService, this.settings, true, namedWriteableRegistry));, +                modules.add(new ClusterNameModule(this.settings));, +                modules.add(new CircuitBreakerModule(this.settings));, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().getId(), actionName, masterNode.getId(), shardRoutingEntry);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        private Settings settings = Settings.EMPTY;, +            this.settings = settings;, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(NettyTransport.PING_SCHEDULE, "5s") // enable by default the transport schedule ping interval, +                    .put(settings), +                    .put("network.server", false), +                    .put("node.client", true), +                    .put(CLIENT_TYPE_SETTING, CLIENT_TYPE), +                    .build();, +, +            PluginsService pluginsService = new PluginsService(settings, null, null, pluginClasses);, +            this.settings = pluginsService.updatedSettings();, +                modules.add(new SettingsModule(this.settings, settingsFilter ));, +                modules.add(new NetworkModule(networkService, this.settings, true, namedWriteableRegistry));, +                modules.add(new ClusterNameModule(this.settings));, +                modules.add(new CircuitBreakerModule(this.settings));, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().getId(), actionName, masterNode.getId(), shardRoutingEntry);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageServiceImpl.java, +            throw new IllegalArgumentException("Can not convert [" + azureStorageSettings.getTimeout() +, +                "]. It can not be longer than 2,147,483,647ms.");]