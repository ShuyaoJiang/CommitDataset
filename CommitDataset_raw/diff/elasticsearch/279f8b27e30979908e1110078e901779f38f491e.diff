[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            jvm = new JvmInfo(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            jvm = new JvmInfo(in);, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class JvmInfo implements Writeable, ToXContent {, +, +        long heapInit = memoryMXBean.getHeapMemoryUsage().getInit() < 0 ? 0 : memoryMXBean.getHeapMemoryUsage().getInit();, +        long heapMax = memoryMXBean.getHeapMemoryUsage().getMax() < 0 ? 0 : memoryMXBean.getHeapMemoryUsage().getMax();, +        long nonHeapInit = memoryMXBean.getNonHeapMemoryUsage().getInit() < 0 ? 0 : memoryMXBean.getNonHeapMemoryUsage().getInit();, +        long nonHeapMax = memoryMXBean.getNonHeapMemoryUsage().getMax() < 0 ? 0 : memoryMXBean.getNonHeapMemoryUsage().getMax();, +        long directMemoryMax = 0;, +            directMemoryMax = (Long) vmClass.getMethod("maxDirectMemory").invoke(null);, +        String[] inputArguments = runtimeMXBean.getInputArguments().toArray(new String[runtimeMXBean.getInputArguments().size()]);, +        Mem mem = new Mem(heapInit, heapMax, nonHeapInit, nonHeapMax, directMemoryMax);, +, +        String bootClassPath;, +            bootClassPath = runtimeMXBean.getBootClassPath();, +            bootClassPath = System.getProperty("sun.boot.class.path");, +            if (bootClassPath == null) {, +                bootClassPath = "<unknown>";, +        String classPath = runtimeMXBean.getClassPath();, +        Map<String, String> systemProperties = Collections.unmodifiableMap(runtimeMXBean.getSystemProperties());, +        String[] gcCollectors = new String[gcMxBeans.size()];, +            gcCollectors[i] = gcMxBean.getName();, +        String[] memoryPools = new String[memoryPoolMXBeans.size()];, +            memoryPools[i] = memoryPoolMXBean.getName();, +        String onError = null;, +        String onOutOfMemoryError = null;, +        String useCompressedOops = "unknown";, +        String useG1GC = "unknown";, +        long configuredInitialHeapSize = -1;, +        long configuredMaxHeapSize = -1;, +                Object onErrorObject = vmOptionMethod.invoke(hotSpotDiagnosticMXBean, "OnError");, +                onError = (String) valueMethod.invoke(onErrorObject);, +                Object onOutOfMemoryErrorObject = vmOptionMethod.invoke(hotSpotDiagnosticMXBean, "OnOutOfMemoryError");, +                onOutOfMemoryError = (String) valueMethod.invoke(onOutOfMemoryErrorObject);, +                Object useCompressedOopsVmOptionObject = vmOptionMethod.invoke(hotSpotDiagnosticMXBean, "UseCompressedOops");, +                useCompressedOops = (String) valueMethod.invoke(useCompressedOopsVmOptionObject);, +                Object useG1GCVmOptionObject = vmOptionMethod.invoke(hotSpotDiagnosticMXBean, "UseG1GC");, +                useG1GC = (String) valueMethod.invoke(useG1GCVmOptionObject);, +                Object initialHeapSizeVmOptionObject = vmOptionMethod.invoke(hotSpotDiagnosticMXBean, "InitialHeapSize");, +                configuredInitialHeapSize = Long.parseLong((String) valueMethod.invoke(initialHeapSizeVmOptionObject));, +                Object maxHeapSizeVmOptionObject = vmOptionMethod.invoke(hotSpotDiagnosticMXBean, "MaxHeapSize");, +                configuredMaxHeapSize = Long.parseLong((String) valueMethod.invoke(maxHeapSizeVmOptionObject));, +        INSTANCE = new JvmInfo(pid, System.getProperty("java.version"), runtimeMXBean.getVmName(), runtimeMXBean.getVmVersion(),, +                runtimeMXBean.getVmVendor(), runtimeMXBean.getStartTime(), configuredInitialHeapSize, configuredMaxHeapSize,, +                mem, inputArguments, bootClassPath, classPath, systemProperties, gcCollectors, memoryPools, onError, onOutOfMemoryError,, +                useCompressedOops, useG1GC);, +    private final long pid;, +    private final String version;, +    private final String vmName;, +    private final String vmVersion;, +    private final String vmVendor;, +    private final long startTime;, +    private final long configuredInitialHeapSize;, +    private final long configuredMaxHeapSize;, +    private final Mem mem;, +    private final String[] inputArguments;, +    private final String bootClassPath;, +    private final String classPath;, +    private final Map<String, String> systemProperties;, +    private final String[] gcCollectors;, +    private final String[] memoryPools;, +    private final String onError;, +    private final String onOutOfMemoryError;, +    private final String useCompressedOops;, +    private final String useG1GC;, +    private JvmInfo(long pid, String version, String vmName, String vmVersion, String vmVendor, long startTime,, +                   long configuredInitialHeapSize, long configuredMaxHeapSize, Mem mem, String[] inputArguments, String bootClassPath,, +                   String classPath, Map<String, String> systemProperties, String[] gcCollectors, String[] memoryPools, String onError,, +                   String onOutOfMemoryError, String useCompressedOops, String useG1GC) {, +        this.pid = pid;, +        this.version = version;, +        this.vmName = vmName;, +        this.vmVersion = vmVersion;, +        this.vmVendor = vmVendor;, +        this.startTime = startTime;, +        this.configuredInitialHeapSize = configuredInitialHeapSize;, +        this.configuredMaxHeapSize = configuredMaxHeapSize;, +        this.mem = mem;, +        this.inputArguments = inputArguments;, +        this.bootClassPath = bootClassPath;, +        this.classPath = classPath;, +        this.systemProperties = systemProperties;, +        this.gcCollectors = gcCollectors;, +        this.memoryPools = memoryPools;, +        this.onError = onError;, +        this.onOutOfMemoryError = onOutOfMemoryError;, +        this.useCompressedOops = useCompressedOops;, +        this.useG1GC = useG1GC;, +    }, +    public JvmInfo(StreamInput in) throws IOException {, +        pid = in.readLong();, +        version = in.readString();, +        vmName = in.readString();, +        vmVersion = in.readString();, +        vmVendor = in.readString();, +        startTime = in.readLong();]