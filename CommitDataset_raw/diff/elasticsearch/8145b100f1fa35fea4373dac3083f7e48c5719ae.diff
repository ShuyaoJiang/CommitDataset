[+++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +        messages.put(XPackPlugin.DEPRECATION, new String[] {, +            "Deprecation APIs are disabled", +        });, +, +    /**, +     * Deprecation APIs are always allowed as long as there is an active license, +     * @return {@code true} as long as there is a valid license, +     */, +    public boolean isDeprecationAllowed() {, +        return status.active;, +    }, +++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +        messages.put(XPackPlugin.DEPRECATION, new String[] {, +            "Deprecation APIs are disabled", +        });, +, +    /**, +     * Deprecation APIs are always allowed as long as there is an active license, +     * @return {@code true} as long as there is a valid license, +     */, +    public boolean isDeprecationAllowed() {, +        return status.active;, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.deprecation.Deprecation;, +    /** Name constant for the Deprecation API feature. */, +    public static final String DEPRECATION = "deprecation";, +, +    protected Deprecation deprecation;, +        this.deprecation = new Deprecation();, +        actions.addAll(deprecation.getActions());, +        handlers.addAll(deprecation.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter,, +            indexNameExpressionResolver, nodesInCluster));, +++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +        messages.put(XPackPlugin.DEPRECATION, new String[] {, +            "Deprecation APIs are disabled", +        });, +, +    /**, +     * Deprecation APIs are always allowed as long as there is an active license, +     * @return {@code true} as long as there is a valid license, +     */, +    public boolean isDeprecationAllowed() {, +        return status.active;, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.deprecation.Deprecation;, +    /** Name constant for the Deprecation API feature. */, +    public static final String DEPRECATION = "deprecation";, +, +    protected Deprecation deprecation;, +        this.deprecation = new Deprecation();, +        actions.addAll(deprecation.getActions());, +        handlers.addAll(deprecation.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter,, +            indexNameExpressionResolver, nodesInCluster));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/deprecation/Deprecation.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.deprecation;, +, +, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.plugins.ActionPlugin;, +import org.elasticsearch.rest.RestController;, +import org.elasticsearch.rest.RestHandler;, +, +import java.util.Collections;, +import java.util.List;, +import java.util.function.Supplier;, +, +/**, + * The plugin class for the Deprecation API, + */, +public class Deprecation implements ActionPlugin {, +    @Override, +    public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {, +        return Collections.singletonList(new ActionHandler<>(DeprecationInfoAction.INSTANCE, DeprecationInfoAction.TransportAction.class));, +    }, +, +    @Override, +    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,, +                                             IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter,, +                                             IndexNameExpressionResolver indexNameExpressionResolver,, +                                             Supplier<DiscoveryNodes> nodesInCluster) {, +, +, +        return Collections.singletonList(new RestDeprecationInfoAction(settings, restController));, +    }, +}]