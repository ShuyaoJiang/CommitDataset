[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +import org.elasticsearch.painless.PainlessParser.EmptyscopeContext;, +    private final AnalyzerStatement statement;, +    private final AnalyzerExpression expression;, +    private final AnalyzerExternal external;, +        final Definition definition = metadata.definition;, +        final AnalyzerUtility utility = new AnalyzerUtility();, +        final AnalyzerCaster caster = new AnalyzerCaster(definition);, +        final AnalyzerPromoter promoter = new AnalyzerPromoter(definition);, +, +        statement = new AnalyzerStatement(metadata, this, utility, caster);, +        expression = new AnalyzerExpression(metadata, this, caster, promoter);, +        external = new AnalyzerExternal(metadata, this, utility, caster, promoter);, +, +        utility.incrementScope();, +        utility.addVariable(null, "#this", definition.execType);, +        metadata.inputValueSlot = utility.addVariable(null, "input", definition.smapType).slot;, +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.floatType).slot;, +        metadata.loopCounterSlot = utility.addVariable(null, "#loop", definition.intType).slot;, +        utility.decrementScope();, +        statement.processSource(ctx);, +        statement.processIf(ctx);, +        statement.processWhile(ctx);, +        statement.processDo(ctx);, +        statement.processFor(ctx);, +        statement.processDecl(ctx);, +        statement.processContinue(ctx);, +        statement.processBreak(ctx);, +        statement.processReturn(ctx);, +        statement.processTry(ctx);, +        statement.processThrow(ctx);, +        statement.processExpr(ctx);, +        statement.processMultiple(ctx);, +        statement.processSingle(ctx);, +        throw new UnsupportedOperationException(AnalyzerUtility.error(ctx) + "Unexpected state.");, +    public Void visitEmptyscope(final EmptyscopeContext ctx) {, +        throw new UnsupportedOperationException(AnalyzerUtility.error(ctx) + "Unexpected state.");, +, +    @Override, +    public Void visitInitializer(final InitializerContext ctx) {, +        statement.processInitializer(ctx);, +    public Void visitAfterthought(final AfterthoughtContext ctx) {, +        statement.processAfterthought(ctx);, +        statement.processDeclaration(ctx);, +        statement.processDecltype(ctx);, +        statement.processDeclvar(ctx);, +        statement.processTrap(ctx);, +        throw new UnsupportedOperationException(AnalyzerUtility.error(ctx) + "Unexpected state.");, +        expression.processNumeric(ctx);, +        expression.processChar(ctx);, +        expression.processTrue(ctx);, +        expression.processFalse(ctx);, +        expression.processNull(ctx);, +        expression.processExternal(ctx);, +        expression.processPostinc(ctx);, +        expression.processPreinc(ctx);, +        expression.processUnary(ctx);, +        expression.processCast(ctx);, +        expression.processBinary(ctx);, +        expression.processComp(ctx);, +        expression.processBool(ctx);, +        expression.processConditional(ctx);, +        expression.processAssignment(ctx);, +        external.processExtstart(ctx);, +        external.processExtprec(ctx);, +        external.processExtcast(ctx);, +        external.processExtbrace(ctx);, +        external.processExtdot(ctx);, +        external.processExttype(ctx);, +        external.processExtcall(ctx);, +        external.processExtvar(ctx);, +        external.processExtfield(ctx);, +    public Void visitExtnew(final ExtnewContext ctx) {, +        external.processExtnew(ctx);, +        external.processExtstring(ctx);, +        throw new UnsupportedOperationException(AnalyzerUtility.error(ctx) + "Unexpected state.");, +    public Void visitIncrement(final IncrementContext ctx) {, +        expression.processIncrement(ctx);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +import org.elasticsearch.painless.PainlessParser.EmptyscopeContext;, +    private final AnalyzerStatement statement;, +    private final AnalyzerExpression expression;, +    private final AnalyzerExternal external;, +        final Definition definition = metadata.definition;, +        final AnalyzerUtility utility = new AnalyzerUtility();, +        final AnalyzerCaster caster = new AnalyzerCaster(definition);, +        final AnalyzerPromoter promoter = new AnalyzerPromoter(definition);, +, +        statement = new AnalyzerStatement(metadata, this, utility, caster);, +        expression = new AnalyzerExpression(metadata, this, caster, promoter);, +        external = new AnalyzerExternal(metadata, this, utility, caster, promoter);, +, +        utility.incrementScope();, +        utility.addVariable(null, "#this", definition.execType);, +        metadata.inputValueSlot = utility.addVariable(null, "input", definition.smapType).slot;, +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.floatType).slot;, +        metadata.loopCounterSlot = utility.addVariable(null, "#loop", definition.intType).slot;, +        utility.decrementScope();, +        statement.processSource(ctx);, +        statement.processIf(ctx);]