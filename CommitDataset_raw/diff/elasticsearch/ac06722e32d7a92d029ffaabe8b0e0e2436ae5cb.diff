[+++ b/src/main/java/org/elasticsearch/search/suggest/SuggestPhase.java, +, +                if (result != null) {, +            }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/SuggestPhase.java, +, +                if (result != null) {, +            }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/Suggester.java, + * Licensed to Elasticsearch (the "Author") under one, + * regarding copyright ownership. Author licenses this, +, +import java.io.IOException;, +public abstract class Suggester<T extends SuggestionSearchContext.SuggestionContext> {, +    protected abstract Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>, +        innerExecute(String name, T suggestion, IndexReader indexReader, CharsRef spare) throws IOException;, +    public abstract String[] names();, +, +    public abstract SuggestContextParser getContextParser();, +, +    public Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>, +        execute(String name, T suggestion, IndexReader indexReader, CharsRef spare) throws IOException {, +        // #3469 We want to ignore empty shards, +        if (indexReader.numDocs() == 0) {, +            return null;, +        }, +        return innerExecute(name, suggestion, indexReader, spare);, +    }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/SuggestPhase.java, +, +                if (result != null) {, +            }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/Suggester.java, + * Licensed to Elasticsearch (the "Author") under one, + * regarding copyright ownership. Author licenses this, +, +import java.io.IOException;, +public abstract class Suggester<T extends SuggestionSearchContext.SuggestionContext> {, +    protected abstract Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>, +        innerExecute(String name, T suggestion, IndexReader indexReader, CharsRef spare) throws IOException;, +    public abstract String[] names();, +, +    public abstract SuggestContextParser getContextParser();, +, +    public Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>, +        execute(String name, T suggestion, IndexReader indexReader, CharsRef spare) throws IOException {, +        // #3469 We want to ignore empty shards, +        if (indexReader.numDocs() == 0) {, +            return null;, +        }, +        return innerExecute(name, suggestion, indexReader, spare);, +    }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java, +import org.elasticsearch.search.suggest.*;, +public class CompletionSuggester extends Suggester<CompletionSuggestionContext> {, +    @Override, +    protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name,, +            CompletionSuggestionContext suggestionContext, IndexReader indexReader, CharsRef spare) throws IOException {, +++ b/src/main/java/org/elasticsearch/search/suggest/SuggestPhase.java, +, +                if (result != null) {, +            }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/Suggester.java, + * Licensed to Elasticsearch (the "Author") under one, + * regarding copyright ownership. Author licenses this, +, +import java.io.IOException;, +public abstract class Suggester<T extends SuggestionSearchContext.SuggestionContext> {, +    protected abstract Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>, +        innerExecute(String name, T suggestion, IndexReader indexReader, CharsRef spare) throws IOException;, +    public abstract String[] names();, +, +    public abstract SuggestContextParser getContextParser();, +, +    public Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>, +        execute(String name, T suggestion, IndexReader indexReader, CharsRef spare) throws IOException {, +        // #3469 We want to ignore empty shards, +        if (indexReader.numDocs() == 0) {, +            return null;, +        }, +        return innerExecute(name, suggestion, indexReader, spare);, +    }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java, +import org.elasticsearch.search.suggest.*;, +public class CompletionSuggester extends Suggester<CompletionSuggestionContext> {, +    @Override, +    protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name,, +            CompletionSuggestionContext suggestionContext, IndexReader indexReader, CharsRef spare) throws IOException {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +import java.io.IOException;, +import java.util.List;, +, +public final class PhraseSuggester extends Suggester<PhraseSuggestionContext> {]