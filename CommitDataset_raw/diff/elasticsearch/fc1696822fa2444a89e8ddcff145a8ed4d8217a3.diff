[+++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +            nodesIds = filterNodeIds(clusterState.nodes(), resolveNodes(request, clusterState));, +                this.nodes[i] = clusterState.nodes().get(nodesIds[i]);, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +            nodesIds = filterNodeIds(clusterState.nodes(), resolveNodes(request, clusterState));, +                this.nodes[i] = clusterState.nodes().get(nodesIds[i]);, +++ b/core/src/test/java/org/elasticsearch/action/support/nodes/TransportNodesActionTests.java, +    private TransportService transportService;, +        TransportNodesAction action = getTestTransportNodesAction();, +        TransportNodesAction action = getTestTransportNodesAction();, +        TransportNodesAction action = getTestTransportNodesAction();, +        TestTransportNodesAction action = getTestTransportNodesAction();, +    public void testFiltering() throws Exception {, +        TransportNodesAction action = getFilteringTestTransportNodesAction(transportService);, +        TestNodesRequest request = new TestNodesRequest();, +        PlainActionFuture<TestNodesResponse> listener = new PlainActionFuture<>();, +        action.new AsyncAction(null, request, listener).start();, +        Map<String, List<CapturingTransport.CapturedRequest>> capturedRequests = transport.getCapturedRequestsByTargetNodeAndClear();, +        // check requests were only sent to data nodes, +        for (String nodeTarget : capturedRequests.keySet()) {, +            assertTrue(clusterService.state().nodes().get(nodeTarget).isDataNode());, +        }, +        assertEquals(clusterService.state().nodes().getDataNodes().size(), capturedRequests.size());, +    }, +, +        transportService = new TransportService(transport, THREAD_POOL, clusterService.state().getClusterName());, +    }, +, +    @After, +    public void tearDown() throws Exception {, +        super.tearDown();, +        clusterService.close();, +        transport.close();, +    }, +, +    public TestTransportNodesAction getTestTransportNodesAction() {, +        return new TestTransportNodesAction(, +    public FilteringTestTransportNodesAction getFilteringTestTransportNodesAction(TransportService transportService) {, +        return new FilteringTestTransportNodesAction(, +            Settings.EMPTY,, +            THREAD_POOL,, +            clusterService,, +            transportService,, +            new ActionFilters(Collections.emptySet()),, +            TestNodesRequest::new,, +            TestNodeRequest::new,, +            ThreadPool.Names.SAME, +        );, +    private static class FilteringTestTransportNodesAction, +        extends TestTransportNodesAction {, +, +        FilteringTestTransportNodesAction(Settings settings, ThreadPool threadPool, ClusterService clusterService, TransportService, +            transportService, ActionFilters actionFilters, Supplier<TestNodesRequest> request,, +                                          Supplier<TestNodeRequest> nodeRequest, String nodeExecutor) {, +            super(settings, threadPool, clusterService, transportService, actionFilters, request, nodeRequest, nodeExecutor);, +        }, +, +        @Override, +        protected String[] filterNodeIds(DiscoveryNodes nodes, String[] nodesIds) {, +            return nodes.getDataNodes().keys().toArray(String.class);, +        }, +    }, +]