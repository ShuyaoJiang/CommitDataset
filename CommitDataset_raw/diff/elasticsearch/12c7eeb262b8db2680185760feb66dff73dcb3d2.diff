[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Limits the maximum number of percolate query matches to be returned., +     */, +    public PercolateRequestBuilder setSize(int size) {, +        sourceBuilder().setSize(size);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Limits the maximum number of percolate query matches to be returned., +     */, +    public PercolateRequestBuilder setSize(int size) {, +        sourceBuilder().setSize(size);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.elasticsearch.percolator.PercolatorService;, +    // Request fields:, +    private boolean limit;, +    private int requestedSize;, +, +    public PercolateShardResponse(Text[] matches, long count, PercolatorService.PercolateContext context, String index, int shardId) {, +        this.count = count;, +        this.limit = context.limit;, +        this.requestedSize = context.size;, +    public PercolateShardResponse(long count, PercolatorService.PercolateContext context, String index, int shardId) {, +        this.limit = context.limit;, +        this.requestedSize = context.size;, +    }, +, +    public PercolateShardResponse(String index, int shardId) {, +        super(index, shardId);, +        this.matches = StringText.EMPTY_ARRAY;, +    public boolean limit() {, +        return limit;, +    }, +, +    public int requestedSize() {, +        return requestedSize;, +    }, +, +, +        limit = in.readBoolean();, +        requestedSize = in.readVInt();, +, +        out.writeBoolean(limit);, +        out.writeVLong(requestedSize);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Limits the maximum number of percolate query matches to be returned., +     */, +    public PercolateRequestBuilder setSize(int size) {, +        sourceBuilder().setSize(size);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.elasticsearch.percolator.PercolatorService;, +    // Request fields:, +    private boolean limit;, +    private int requestedSize;, +, +    public PercolateShardResponse(Text[] matches, long count, PercolatorService.PercolateContext context, String index, int shardId) {, +        this.count = count;, +        this.limit = context.limit;, +        this.requestedSize = context.size;, +    public PercolateShardResponse(long count, PercolatorService.PercolateContext context, String index, int shardId) {, +        this.limit = context.limit;, +        this.requestedSize = context.size;, +    }, +, +    public PercolateShardResponse(String index, int shardId) {, +        super(index, shardId);, +        this.matches = StringText.EMPTY_ARRAY;, +    public boolean limit() {, +        return limit;, +    }, +, +    public int requestedSize() {, +        return requestedSize;, +    }, +, +, +        limit = in.readBoolean();, +        requestedSize = in.readVInt();, +, +        out.writeBoolean(limit);, +        out.writeVLong(requestedSize);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import java.util.HashMap;, +    private Integer size;, +    private Boolean shortCircuit;, +    public PercolateSourceBuilder setDoc(DocBuilder docBuilder) {, +        return this;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder queryBuilder) {, +        return this;, +    public PercolateSourceBuilder setFilterBuilder(FilterBuilder filterBuilder) {]