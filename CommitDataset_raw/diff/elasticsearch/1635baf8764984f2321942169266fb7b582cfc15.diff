[+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Set;, +            Set<String> availableNodeIds = Sets.newHashSet(nodeIds);, +                if (availableNodeIds.isEmpty()) {, +                    break;, +                }, +                String nodeId = randomFrom(availableNodeIds);, +                availableNodeIds.remove(nodeId);, +                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,, +            Set<String> availableNodes = Sets.newHashSet(nodes);, +                availableNodes.remove(shardRouting.currentNodeId());, +                if (shardRouting.relocating()) {, +                    availableNodes.remove(shardRouting.relocatingNodeId());, +                }, +            }, +, +            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {, +                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes);, +                availableNodes.remove(updatedShardRouting.currentNodeId());, +                if (shardRouting.relocating()) {, +                    availableNodes.remove(updatedShardRouting.relocatingNodeId());, +                }, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Set;, +            Set<String> availableNodeIds = Sets.newHashSet(nodeIds);, +                if (availableNodeIds.isEmpty()) {, +                    break;, +                }, +                String nodeId = randomFrom(availableNodeIds);, +                availableNodeIds.remove(nodeId);, +                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,, +            Set<String> availableNodes = Sets.newHashSet(nodes);, +                availableNodes.remove(shardRouting.currentNodeId());, +                if (shardRouting.relocating()) {, +                    availableNodes.remove(shardRouting.relocatingNodeId());, +                }, +            }, +, +            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {, +                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes);, +                availableNodes.remove(updatedShardRouting.currentNodeId());, +                if (shardRouting.relocating()) {, +                    availableNodes.remove(updatedShardRouting.relocatingNodeId());, +                }, +++ b/core/src/test/java/org/elasticsearch/cluster/health/ClusterStateHealthTests.java, +        final Set<String> nodeIds = new HashSet<>();, +                        shardRouting.initialize(randomFrom(nodeIds), null, shardRouting.getExpectedShardSize()), +            final String primaryNodeId = shardRoutingTable.primaryShard().currentNodeId();, +            Set<String> allocatedNodes = new HashSet<>();, +            allocatedNodes.add(primaryNodeId);, +                    String replicaNodeId = randomFrom(Sets.difference(nodeIds, allocatedNodes));, +                    newIndexRoutingTable.addShard(shardRouting.initialize(replicaNodeId, null, shardRouting.getExpectedShardSize()));, +                    allocatedNodes.add(replicaNodeId);, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Set;, +            Set<String> availableNodeIds = Sets.newHashSet(nodeIds);, +                if (availableNodeIds.isEmpty()) {, +                    break;, +                }, +                String nodeId = randomFrom(availableNodeIds);, +                availableNodeIds.remove(nodeId);, +                        TestShardRouting.newShardRouting(index, i, nodeId, null, j == 0,, +            Set<String> availableNodes = Sets.newHashSet(nodes);, +                availableNodes.remove(shardRouting.currentNodeId());, +                if (shardRouting.relocating()) {, +                    availableNodes.remove(shardRouting.relocatingNodeId());, +                }, +            }, +, +            for (ShardRouting shardRouting : indexShardRoutingTable.value.shards()) {, +                final ShardRouting updatedShardRouting = randomChange(shardRouting, availableNodes);, +                availableNodes.remove(updatedShardRouting.currentNodeId());, +                if (shardRouting.relocating()) {, +                    availableNodes.remove(updatedShardRouting.relocatingNodeId());, +                }, +++ b/core/src/test/java/org/elasticsearch/cluster/health/ClusterStateHealthTests.java, +        final Set<String> nodeIds = new HashSet<>();, +                        shardRouting.initialize(randomFrom(nodeIds), null, shardRouting.getExpectedShardSize()), +            final String primaryNodeId = shardRoutingTable.primaryShard().currentNodeId();, +            Set<String> allocatedNodes = new HashSet<>();, +            allocatedNodes.add(primaryNodeId);, +                    String replicaNodeId = randomFrom(Sets.difference(nodeIds, allocatedNodes));, +                    newIndexRoutingTable.addShard(shardRouting.initialize(replicaNodeId, null, shardRouting.getExpectedShardSize()));, +                    allocatedNodes.add(replicaNodeId);, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/RandomShardRoutingMutator.java, +import java.util.Set;, +, +    public static ShardRouting randomChange(ShardRouting shardRouting, Set<String> nodes) {, +                if (shardRouting.unassigned() && nodes.isEmpty() == false) {, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Set;, +            Set<String> availableNodeIds = Sets.newHashSet(nodeIds);, +                if (availableNodeIds.isEmpty()) {, +                    break;, +                }, +                String nodeId = randomFrom(availableNodeIds);]