[+++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", new ClusterStateUpdateTask(request.waitForEvents()) {, +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", new ClusterStateUpdateTask(request.waitForEvents()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", new AckedClusterStateUpdateTask<ClusterRerouteResponse>(Priority.IMMEDIATE, request, listener) {, +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", new ClusterStateUpdateTask(request.waitForEvents()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", new AckedClusterStateUpdateTask<ClusterRerouteResponse>(Priority.IMMEDIATE, request, listener) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings",, +                new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(Priority.IMMEDIATE, request, listener) {, +                clusterService.submitStateUpdateTask("reroute_after_cluster_update_settings",, +                        new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(Priority.URGENT, request, listener) {, +++ b/TESTING.asciidoc, +By default the tests run on up to 4 JVMs based on the number of cores. If you, +want to explicitly specify the number of JVMs you can do so on the command, +line:, +Or in `~/.gradle/gradle.properties`:, +, +----------------------------, +systemProp.tests.jvms=8, +----------------------------, +, +Its difficult to pick the "right" number here. Hypercores don't count for CPU, +intensive tests and you should leave some slack for JVM-interal threads like, +the garbage collector. And you have to have enough RAM to handle each JVM., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", new ClusterStateUpdateTask(request.waitForEvents()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", new AckedClusterStateUpdateTask<ClusterRerouteResponse>(Priority.IMMEDIATE, request, listener) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings",, +                new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(Priority.IMMEDIATE, request, listener) {, +                clusterService.submitStateUpdateTask("reroute_after_cluster_update_settings",, +                        new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(Priority.URGENT, request, listener) {, +++ b/core/src/main/java/org/elasticsearch/cluster/AckedClusterStateTaskListener.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0]