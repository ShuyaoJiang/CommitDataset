[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.Version;, +        if (in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            in.readOptionalString(); // timestamp, +            in.readOptionalWriteable(TimeValue::new); // ttl, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            out.writeOptionalString(null);, +            out.writeOptionalWriteable(null);, +        }, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.Version;, +        if (in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            in.readOptionalString(); // timestamp, +            in.readOptionalWriteable(TimeValue::new); // ttl, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            out.writeOptionalString(null);, +            out.writeOptionalWriteable(null);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequestBuilder.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.Version;, +        if (in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            in.readOptionalString(); // timestamp, +            in.readOptionalWriteable(TimeValue::new); // ttl, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            out.writeOptionalString(null);, +            out.writeOptionalWriteable(null);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +                .routing(request.routing()).parent(request.parent());, +            .routing(request.routing()).parent(request.parent());, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.Version;, +        if (in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            in.readOptionalString(); // timestamp, +            in.readOptionalWriteable(TimeValue::new); // ttl, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            out.writeOptionalString(null);, +            out.writeOptionalWriteable(null);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +                .routing(request.routing()).parent(request.parent());, +            .routing(request.routing()).parent(request.parent());, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                            internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.Version;, +        if (in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            in.readOptionalString(); // timestamp, +            in.readOptionalWriteable(TimeValue::new); // ttl, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) {, +            out.writeOptionalString(null);, +            out.writeOptionalWriteable(null);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java]