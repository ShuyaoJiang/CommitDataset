[+++ b/x-pack/qa/ml-native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +import org.elasticsearch.client.Request;, +        // With security enabled GET _aliases throws an index_not_found_exception, +        // if no aliases have been created. In multi-node tests the alias may not, +        // appear immediately so wait here., +        assertBusy(() -> {, +            try {, +                Response aliasesResponse = client().performRequest("get", "_aliases");, +                assertEquals(200, aliasesResponse.getStatusLine().getStatusCode());, +                String responseAsString = responseEntityToString(aliasesResponse);, +            } catch (ResponseException e) {, +                throw new AssertionError(e);, +            }, +        });, +        Response indicesResponse = client().performRequest("get", "_cat/indices");, +        assertEquals(200, indicesResponse.getStatusLine().getStatusCode());, +        String responseAsString = responseEntityToString(indicesResponse);, +        assertThat(responseAsString,, +                containsString(AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-" + indexName));, +        // With security enabled cat aliases throws an index_not_found_exception, +        // if no aliases have been created. In multi-node tests the alias may not, +        // appear immediately so wait here., +        assertBusy(() -> {, +            try {, +                Response aliasesResponse = client().performRequest(new Request("get", "_cat/aliases"));, +                assertEquals(200, aliasesResponse.getStatusLine().getStatusCode());, +                String responseAsString = responseEntityToString(aliasesResponse);, +            } catch (ResponseException e) {, +                throw new AssertionError(e);, +            }, +        });, +        Response response = client().performRequest("delete", indexName + "/_alias/" + readAliasName);, +++ b/x-pack/qa/ml-native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +import org.elasticsearch.client.Request;, +        // With security enabled GET _aliases throws an index_not_found_exception, +        // if no aliases have been created. In multi-node tests the alias may not, +        // appear immediately so wait here., +        assertBusy(() -> {, +            try {, +                Response aliasesResponse = client().performRequest("get", "_aliases");, +                assertEquals(200, aliasesResponse.getStatusLine().getStatusCode());, +                String responseAsString = responseEntityToString(aliasesResponse);, +            } catch (ResponseException e) {, +                throw new AssertionError(e);, +            }, +        });, +        Response indicesResponse = client().performRequest("get", "_cat/indices");, +        assertEquals(200, indicesResponse.getStatusLine().getStatusCode());, +        String responseAsString = responseEntityToString(indicesResponse);, +        assertThat(responseAsString,, +                containsString(AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-" + indexName));, +        // With security enabled cat aliases throws an index_not_found_exception, +        // if no aliases have been created. In multi-node tests the alias may not, +        // appear immediately so wait here., +        assertBusy(() -> {, +            try {, +                Response aliasesResponse = client().performRequest(new Request("get", "_cat/aliases"));, +                assertEquals(200, aliasesResponse.getStatusLine().getStatusCode());, +                String responseAsString = responseEntityToString(aliasesResponse);, +            } catch (ResponseException e) {, +                throw new AssertionError(e);, +            }, +        });, +        Response response = client().performRequest("delete", indexName + "/_alias/" + readAliasName);, +++ b/x-pack/qa/ml-native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RestoreModelSnapshotIT.java, +        // In a multi-node cluster the replica may not be up to date, +        // so wait for the change, +        assertBusy(() -> {, +            assertThat(forecastStats.getRecordCount(), equalTo(3L));, +        });]