[+++ b/server/src/main/java/org/elasticsearch/index/VersionType.java, +            if (currentVersion == Versions.NOT_FOUND) {, +                return "document does not exist (expected version [" + expectedVersion + "])";, +            }, +            if (currentVersion == Versions.NOT_FOUND) {, +                return "document does not exist (expected version [" + expectedVersion + "])";, +            }, +            if (currentVersion == Versions.NOT_FOUND) {, +                return "document does not exist (expected version [" + expectedVersion + "])";, +            }, +            if (currentVersion == Versions.NOT_FOUND) {, +                return "document does not exist (expected version [" + expectedVersion + "])";, +            }, +++ b/server/src/main/java/org/elasticsearch/index/VersionType.java, +            if (currentVersion == Versions.NOT_FOUND) {, +                return "document does not exist (expected version [" + expectedVersion + "])";, +            }, +            if (currentVersion == Versions.NOT_FOUND) {, +                return "document does not exist (expected version [" + expectedVersion + "])";, +            }, +            if (currentVersion == Versions.NOT_FOUND) {, +                return "document does not exist (expected version [" + expectedVersion + "])";, +            }, +            if (currentVersion == Versions.NOT_FOUND) {, +                return "document does not exist (expected version [" + expectedVersion + "])";, +            }, +++ b/server/src/test/java/org/elasticsearch/index/VersionTypeTests.java, +        assertEquals("current version [1] is different than the one provided [2]",, +            VersionType.INTERNAL.explainConflictForReads(1, 2));, +        assertEquals("document does not exist (expected version [2])",, +            VersionType.INTERNAL.explainConflictForReads(Versions.NOT_FOUND, 2));, +, +        assertEquals("current version [1] is different than the one provided [2]",, +            VersionType.EXTERNAL.explainConflictForReads(1, 2));, +        assertEquals("document does not exist (expected version [2])",, +            VersionType.EXTERNAL.explainConflictForReads(Versions.NOT_FOUND, 2));, +, +        assertEquals("current version [1] is different than the one provided [2]",, +            VersionType.EXTERNAL_GTE.explainConflictForReads(1, 2));, +        assertEquals("document does not exist (expected version [2])",, +            VersionType.EXTERNAL_GTE.explainConflictForReads(Versions.NOT_FOUND, 2));, +]