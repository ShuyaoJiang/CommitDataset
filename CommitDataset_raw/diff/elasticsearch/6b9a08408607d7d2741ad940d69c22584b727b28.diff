[+++ b/client/transport/build.gradle, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString("transport.type.default", Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString("http.type.default", Property.NodeScope);, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString("transport.type.default", Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString("http.type.default", Property.NodeScope);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +        proxy.failShard(replica, randomIntBetween(1, 10), "test", new ElasticsearchException("simulated"),, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString("transport.type.default", Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString("http.type.default", Property.NodeScope);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +        proxy.failShard(replica, randomIntBetween(1, 10), "test", new ElasticsearchException("simulated"),, +++ b/docs/reference/aggregations/metrics/cardinality-aggregation.asciidoc, +{plugins}/mapper-murmur3.html[`mapper-murmur3`] plugin., +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString("transport.type.default", Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString("http.type.default", Property.NodeScope);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +        proxy.failShard(replica, randomIntBetween(1, 10), "test", new ElasticsearchException("simulated"),, +++ b/docs/reference/aggregations/metrics/cardinality-aggregation.asciidoc, +{plugins}/mapper-murmur3.html[`mapper-murmur3`] plugin., +++ b/docs/reference/release-notes/5.0.0-alpha5.asciidoc, +CAT API::, +* Improve cat thread pool API {pull}19721[#19721] (issue: {issue}19590[#19590]), +, +Index APIs::, +* Removes write consistency level across replication action APIs in favor of wait_for_active_shards {pull}19454[#19454] (issue: {issue}18985[#18985]), +, +[[breaking-java-5.0.0-alpha5]], +CRUD::, +* Removing isCreated and isFound from the Java API {pull}19645[#19645] (issues: {issue}19566[#19566], {issue}19631[#19631]), +, +Snapshot/Restore::, +* Removes extra writeBlob method in BlobContainer {pull}19727[#19727] (issue: {issue}18528[#18528]), +, +Aggregations::, +* Split regular histograms from date histograms. {pull}19551[#19551] (issues: {issue}4847[#4847], {issue}8082[#8082]), +]