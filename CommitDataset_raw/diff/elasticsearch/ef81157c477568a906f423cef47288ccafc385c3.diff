[+++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/AgentService.java, +/**, + * The {@code AgentService} is a service that does the work of publishing the details to the monitoring cluster., + * <p>, + * If this service is stopped, then the attached, monitored node is not going to publish its details to the monitoring cluster. Given, + * service life cycles, the intended way to temporarily stop the publishing is using the start and stop collection methods., + *, + * @see #stopCollection(), + * @see #startCollection(), + */, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/AgentService.java, +/**, + * The {@code AgentService} is a service that does the work of publishing the details to the monitoring cluster., + * <p>, + * If this service is stopped, then the attached, monitored node is not going to publish its details to the monitoring cluster. Given, + * service life cycles, the intended way to temporarily stop the publishing is using the start and stop collection methods., + *, + * @see #stopCollection(), + * @see #startCollection(), + */, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/renderer/Renderer.java, + * {@code Renderer}s are used to render documents using a given OutputStream., + * <p>, + * Each {@code Renderer} can be thought of as a generator of a unique document <em>type</em> within the resulting ES index. For example,, + * there will be details about shards, which requires a unique document type and there will also be details about indices, which requires, + * their own unique documents., + *, + * @see AbstractRenderer, +    /**, +     * Convert the given {@code document} type into something that can be sent to the monitoring cluster., +     *, +     * @param document The arbitrary document (e.g., details about a shard), +     * @param xContentType The rendered content type (e.g., JSON), +     * @param os The buffer, +     * @throws IOException if any unexpected error occurs, +     */, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/AgentService.java, +/**, + * The {@code AgentService} is a service that does the work of publishing the details to the monitoring cluster., + * <p>, + * If this service is stopped, then the attached, monitored node is not going to publish its details to the monitoring cluster. Given, + * service life cycles, the intended way to temporarily stop the publishing is using the start and stop collection methods., + *, + * @see #stopCollection(), + * @see #startCollection(), + */, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/renderer/Renderer.java, + * {@code Renderer}s are used to render documents using a given OutputStream., + * <p>, + * Each {@code Renderer} can be thought of as a generator of a unique document <em>type</em> within the resulting ES index. For example,, + * there will be details about shards, which requires a unique document type and there will also be details about indices, which requires, + * their own unique documents., + *, + * @see AbstractRenderer, +    /**, +     * Convert the given {@code document} type into something that can be sent to the monitoring cluster., +     *, +     * @param document The arbitrary document (e.g., details about a shard), +     * @param xContentType The rendered content type (e.g., JSON), +     * @param os The buffer, +     * @throws IOException if any unexpected error occurs, +     */, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/license/MarvelLicensee.java, +/**, + * {@code MarvelLicensee} determines whether certain features of Monitoring are enabled or disabled., + * <p>, + * Once the license expires, the agent will stop:, + * <ul>, + * <li>Collecting and publishing new metrics.</li>, + * <li>Cleaning up (deleting) older indices.</li>, + * </ul>, + */, +    /**, +     * {@inheritDoc}, +     *, +     * @see #collectionEnabled(), +     * @see #cleaningEnabled(), +     */, +                "The agent will stop automatically cleaning indices older than [xpack.monitoring.history.duration]",, +    /**, +     * Determine if the index cleaning service is enabled., +     * <p>, +     * Collection is only disabled <em>automatically</em> when the license expires/becomes invalid. Collection <em>can</em> be disabled, +     * explicitly by the user, although that's generally a temporary solution to unrelated issues (e.g., initial setup when the monitoring, +     * cluster doesn't actually exist)., +     *, +     * @return {@code true} as long as the license is valid. Otherwise {@code false}., +     */, +        // note: status is volatile, so don't do multiple checks without a local ref, +        return status.getMode() != License.OperationMode.NONE && status.getLicenseState() != LicenseState.DISABLED;, +    /**, +     * Determine if the index cleaning service is enabled., +     * <p>, +     * Index cleaning is only disabled when the license expires/becomes invalid., +     *, +     * @return {@code true} as long as the license is valid. Otherwise {@code false}., +     */, +        // note: status is volatile, so don't do multiple checks without a local ref, +        return status.getMode() != License.OperationMode.NONE && status.getLicenseState() != LicenseState.DISABLED;, +    /**]