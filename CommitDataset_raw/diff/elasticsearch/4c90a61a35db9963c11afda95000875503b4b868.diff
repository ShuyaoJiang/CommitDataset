[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/pagerduty/ExecutablePagerDutyAction.java, +        SentEvent sentEvent = account.send(event, payload, ctx.id().watchId());, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/pagerduty/ExecutablePagerDutyAction.java, +        SentEvent sentEvent = account.send(event, payload, ctx.id().watchId());, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/pagerduty/IncidentEvent.java, +import java.util.Collections;, +import java.util.stream.Collectors;, + * https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2, +    static final String PATH = "/v2/enqueue";, +    static final String ACCEPT_HEADER = "application/vnd.pagerduty+json;version=2";, +    HttpRequest createRequest(final String serviceKey, final Payload payload, final String watchId) throws IOException {, +                .setHeader("Accept", ACCEPT_HEADER), +                .jsonBody((b, p) -> buildAPIXContent(b, p, serviceKey, payload, watchId)), +                .build();, +, +    XContentBuilder buildAPIXContent(XContentBuilder builder, Params params, String serviceKey,, +                                            Payload payload, String watchId) throws IOException {, +        builder.field(Fields.ROUTING_KEY.getPreferredName(), serviceKey);, +        builder.field(Fields.EVENT_ACTION.getPreferredName(), eventType);, +        if (incidentKey != null) {, +            builder.field(Fields.DEDUP_KEY.getPreferredName(), incidentKey);, +        }, +, +        builder.startObject(Fields.PAYLOAD.getPreferredName());, +        {, +            builder.field(Fields.SUMMARY.getPreferredName(), description);, +, +            if (attachPayload && payload != null) {, +                builder.startObject(Fields.CUSTOM_DETAILS.getPreferredName());, +                {, +                    builder.field(Fields.PAYLOAD.getPreferredName(), payload, params);, +                }, +                builder.endObject();, +            }, +, +            if (watchId != null) {, +                builder.field(Fields.SOURCE.getPreferredName(), watchId);, +            } else {, +                builder.field(Fields.SOURCE.getPreferredName(), "watcher");, +            }, +            // TODO externalize this into something user editable, +            builder.field(Fields.SEVERITY.getPreferredName(), "critical");, +        }, +        builder.endObject();, +, +, +            toXContentV2Contexts(builder, params, contexts);, +, +, +    /**, +     * Turns the V1 API contexts into 2 distinct lists, images and links. The V2 API has separated these out into 2 top level fields., +     */, +    private void toXContentV2Contexts(XContentBuilder builder, ToXContent.Params params,, +                                      IncidentEventContext[] contexts) throws IOException {, +        // contexts can be either links or images, and the v2 api needs them separate, +        Map<IncidentEventContext.Type, List<IncidentEventContext>> groups = Arrays.stream(contexts), +            .collect(Collectors.groupingBy(iec -> iec.type));, +, +        List<IncidentEventContext> links = groups.getOrDefault(IncidentEventContext.Type.LINK, Collections.emptyList());, +        if (links.isEmpty() == false) {, +            builder.array(Fields.LINKS.getPreferredName(), links.toArray());, +        }, +, +        List<IncidentEventContext> images = groups.getOrDefault(IncidentEventContext.Type.IMAGE, Collections.emptyList());, +        if (images.isEmpty() == false) {, +            builder.array(Fields.IMAGES.getPreferredName(), images.toArray());, +        }, +        ParseField ROUTING_KEY = new ParseField("routing_key");, +        ParseField EVENT_ACTION = new ParseField("event_action");, +        ParseField DEDUP_KEY = new ParseField("dedup_key");, +        ParseField SUMMARY = new ParseField("summary");, +        ParseField SOURCE = new ParseField("source");, +        ParseField SEVERITY = new ParseField("severity");, +        ParseField LINKS = new ParseField("links");, +        ParseField IMAGES = new ParseField("images");, +        ParseField CUSTOM_DETAILS = new ParseField("custom_details");, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/pagerduty/ExecutablePagerDutyAction.java, +        SentEvent sentEvent = account.send(event, payload, ctx.id().watchId());, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/pagerduty/IncidentEvent.java, +import java.util.Collections;, +import java.util.stream.Collectors;, + * https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2, +    static final String PATH = "/v2/enqueue";, +    static final String ACCEPT_HEADER = "application/vnd.pagerduty+json;version=2";, +    HttpRequest createRequest(final String serviceKey, final Payload payload, final String watchId) throws IOException {, +                .setHeader("Accept", ACCEPT_HEADER), +                .jsonBody((b, p) -> buildAPIXContent(b, p, serviceKey, payload, watchId)), +                .build();, +, +    XContentBuilder buildAPIXContent(XContentBuilder builder, Params params, String serviceKey,, +                                            Payload payload, String watchId) throws IOException {, +        builder.field(Fields.ROUTING_KEY.getPreferredName(), serviceKey);, +        builder.field(Fields.EVENT_ACTION.getPreferredName(), eventType);, +        if (incidentKey != null) {, +            builder.field(Fields.DEDUP_KEY.getPreferredName(), incidentKey);, +        }, +, +        builder.startObject(Fields.PAYLOAD.getPreferredName());, +        {, +            builder.field(Fields.SUMMARY.getPreferredName(), description);]