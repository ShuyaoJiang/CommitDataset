[+++ b/.gitignore, +build-idea/, +build-eclipse/, +eclipse-build, +++ b/.gitignore, +build-idea/, +build-eclipse/, +eclipse-build, +++ b/build.gradle, +    // for ide hacks..., +    isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea'), +  if (isIdea) {, +    project.buildDir = file('build-idea'), +  }, +      outputDir = file('build-idea/classes/main'), +      testOutputDir = file('build-idea/classes/test'), +    File eclipseBuild = project.file('build-eclipse'), +    eclipse.classpath.defaultOutputDir = eclipseBuild, +    if (isEclipse) {, +      // set this so generated dirs will be relative to eclipse build, +      project.buildDir = eclipseBuild, +    }, +        folder.output = "build-eclipse/" + i, +++ b/.gitignore, +build-idea/, +build-eclipse/, +eclipse-build, +++ b/build.gradle, +    // for ide hacks..., +    isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea'), +  if (isIdea) {, +    project.buildDir = file('build-idea'), +  }, +      outputDir = file('build-idea/classes/main'), +      testOutputDir = file('build-idea/classes/test'), +    File eclipseBuild = project.file('build-eclipse'), +    eclipse.classpath.defaultOutputDir = eclipseBuild, +    if (isEclipse) {, +      // set this so generated dirs will be relative to eclipse build, +      project.buildDir = eclipseBuild, +    }, +        folder.output = "build-eclipse/" + i, +++ b/buildSrc/build.gradle, +    defaultOutputDir = file('build-eclipse'), +++ b/.gitignore, +build-idea/, +build-eclipse/, +eclipse-build, +++ b/build.gradle, +    // for ide hacks..., +    isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea'), +  if (isIdea) {, +    project.buildDir = file('build-idea'), +  }, +      outputDir = file('build-idea/classes/main'), +      testOutputDir = file('build-idea/classes/test'), +    File eclipseBuild = project.file('build-eclipse'), +    eclipse.classpath.defaultOutputDir = eclipseBuild, +    if (isEclipse) {, +      // set this so generated dirs will be relative to eclipse build, +      project.buildDir = eclipseBuild, +    }, +        folder.output = "build-eclipse/" + i, +++ b/buildSrc/build.gradle, +    defaultOutputDir = file('build-eclipse'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +    File generatedResourcesDir = new File(project.buildDir, 'generated-resources'), +++ b/.gitignore, +build-idea/, +build-eclipse/, +eclipse-build, +++ b/build.gradle, +    // for ide hacks..., +    isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea'), +  if (isIdea) {, +    project.buildDir = file('build-idea'), +  }, +      outputDir = file('build-idea/classes/main'), +      testOutputDir = file('build-idea/classes/test'), +    File eclipseBuild = project.file('build-eclipse'), +    eclipse.classpath.defaultOutputDir = eclipseBuild, +    if (isEclipse) {, +      // set this so generated dirs will be relative to eclipse build, +      project.buildDir = eclipseBuild, +    }, +        folder.output = "build-eclipse/" + i, +++ b/buildSrc/build.gradle, +    defaultOutputDir = file('build-eclipse'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +    File generatedResourcesDir = new File(project.buildDir, 'generated-resources'), +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestBuilder.SuggestionBuilder suggestionBuilder) {, +++ b/.gitignore, +build-idea/, +build-eclipse/, +eclipse-build, +++ b/build.gradle, +    // for ide hacks..., +    isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea')]