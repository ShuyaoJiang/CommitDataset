[+++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobContainer.java, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobContainer.java, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStore.java, +import com.google.cloud.storage.StorageException;, +import java.nio.file.FileAlreadyExistsException;, +import static java.net.HttpURLConnection.HTTP_PRECON_FAILED;, +, +        try {, +            final WriteChannel writeChannel = SocketAccess.doPrivilegedIOException(, +                () -> storage.writer(blobInfo, Storage.BlobWriteOption.doesNotExist()));, +        } catch (StorageException se) {, +            if (se.getCode() == HTTP_PRECON_FAILED) {, +                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage());, +            }, +            throw se;, +        }, +        SocketAccess.doPrivilegedVoidIOException(, +            () -> {, +                try {, +                    storage.create(blobInfo, baos.toByteArray(), Storage.BlobTargetOption.doesNotExist());, +                } catch (StorageException se) {, +                    if (se.getCode() == HTTP_PRECON_FAILED) {, +                        throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage());, +                    }, +                    throw se;, +                }, +            });, +     * @param sourceBlobName name of the blob to move, +     * @param targetBlobName new name of the blob in the same bucket, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobContainer.java, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStore.java, +import com.google.cloud.storage.StorageException;, +import java.nio.file.FileAlreadyExistsException;, +import static java.net.HttpURLConnection.HTTP_PRECON_FAILED;, +, +        try {, +            final WriteChannel writeChannel = SocketAccess.doPrivilegedIOException(, +                () -> storage.writer(blobInfo, Storage.BlobWriteOption.doesNotExist()));, +        } catch (StorageException se) {, +            if (se.getCode() == HTTP_PRECON_FAILED) {, +                throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage());, +            }, +            throw se;, +        }, +        SocketAccess.doPrivilegedVoidIOException(, +            () -> {, +                try {, +                    storage.create(blobInfo, baos.toByteArray(), Storage.BlobTargetOption.doesNotExist());, +                } catch (StorageException se) {, +                    if (se.getCode() == HTTP_PRECON_FAILED) {, +                        throw new FileAlreadyExistsException(blobInfo.getBlobId().getName(), null, se.getMessage());, +                    }, +                    throw se;, +                }, +            });, +     * @param sourceBlobName name of the blob to move, +     * @param targetBlobName new name of the blob in the same bucket, +++ b/plugins/repository-gcs/src/test/java/org/elasticsearch/repositories/gcs/MockStorage.java, +import java.util.stream.Stream;, +        if (Stream.of(options).anyMatch(option -> option.equals(BlobTargetOption.doesNotExist()))) {, +            byte[] existingBytes = blobs.putIfAbsent(blobInfo.getName(), content);, +            if (existingBytes != null) {, +                throw new StorageException(412, "Blob already exists");, +            }, +        } else {, +        }, +                public void close() {, +                    if (Stream.of(options).anyMatch(option -> option.equals(BlobWriteOption.doesNotExist()))) {, +                        byte[] existingBytes = blobs.putIfAbsent(blobInfo.getName(), output.toByteArray());, +                        if (existingBytes != null) {, +                            throw new StorageException(412, "Blob already exists");, +                        }, +                    } else {, +                }]