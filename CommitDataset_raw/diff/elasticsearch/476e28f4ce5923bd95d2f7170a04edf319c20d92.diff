[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkRequest.java, +import org.elasticsearch.common.Strings;, +, +    private String[] benchmarkNames = Strings.EMPTY_ARRAY;, +    public AbortBenchmarkRequest(String... benchmarkNames) {, +        this.benchmarkNames = benchmarkNames;, +    public void benchmarkNames(String... benchmarkNames) {, +        this.benchmarkNames = benchmarkNames;, +    public String[] benchmarkNames() {, +        return benchmarkNames;, +, +        if (benchmarkNames == null || benchmarkNames.length == 0) {, +            return ValidateActions.addValidationError("benchmarkNames must not be null or empty", null);, +        benchmarkNames = in.readStringArray();, +        out.writeStringArray(benchmarkNames);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkRequest.java, +import org.elasticsearch.common.Strings;, +, +    private String[] benchmarkNames = Strings.EMPTY_ARRAY;, +    public AbortBenchmarkRequest(String... benchmarkNames) {, +        this.benchmarkNames = benchmarkNames;, +    public void benchmarkNames(String... benchmarkNames) {, +        this.benchmarkNames = benchmarkNames;, +    public String[] benchmarkNames() {, +        return benchmarkNames;, +, +        if (benchmarkNames == null || benchmarkNames.length == 0) {, +            return ValidateActions.addValidationError("benchmarkNames must not be null or empty", null);, +        benchmarkNames = in.readStringArray();, +        out.writeStringArray(benchmarkNames);, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkRequestBuilder.java, +    public AbortBenchmarkRequestBuilder setBenchmarkNames(String... benchmarkNames) {, +        request.benchmarkNames(benchmarkNames);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkRequest.java, +import org.elasticsearch.common.Strings;, +, +    private String[] benchmarkNames = Strings.EMPTY_ARRAY;, +    public AbortBenchmarkRequest(String... benchmarkNames) {, +        this.benchmarkNames = benchmarkNames;, +    public void benchmarkNames(String... benchmarkNames) {, +        this.benchmarkNames = benchmarkNames;, +    public String[] benchmarkNames() {, +        return benchmarkNames;, +, +        if (benchmarkNames == null || benchmarkNames.length == 0) {, +            return ValidateActions.addValidationError("benchmarkNames must not be null or empty", null);, +        benchmarkNames = in.readStringArray();, +        out.writeStringArray(benchmarkNames);, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkRequestBuilder.java, +    public AbortBenchmarkRequestBuilder setBenchmarkNames(String... benchmarkNames) {, +        request.benchmarkNames(benchmarkNames);, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkResponse.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +public class AbortBenchmarkResponse extends AcknowledgedResponse {, +    public AbortBenchmarkResponse() {, +    public AbortBenchmarkResponse(boolean acknowledged) {, +        super(acknowledged);, +        readAcknowledged(in);, +        writeAcknowledged(out);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkRequest.java, +import org.elasticsearch.common.Strings;, +, +    private String[] benchmarkNames = Strings.EMPTY_ARRAY;, +    public AbortBenchmarkRequest(String... benchmarkNames) {, +        this.benchmarkNames = benchmarkNames;, +    public void benchmarkNames(String... benchmarkNames) {, +        this.benchmarkNames = benchmarkNames;, +    public String[] benchmarkNames() {, +        return benchmarkNames;, +, +        if (benchmarkNames == null || benchmarkNames.length == 0) {, +            return ValidateActions.addValidationError("benchmarkNames must not be null or empty", null);, +        benchmarkNames = in.readStringArray();, +        out.writeStringArray(benchmarkNames);, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkRequestBuilder.java, +    public AbortBenchmarkRequestBuilder setBenchmarkNames(String... benchmarkNames) {, +        request.benchmarkNames(benchmarkNames);, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkResponse.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +public class AbortBenchmarkResponse extends AcknowledgedResponse {, +    public AbortBenchmarkResponse() {, +    public AbortBenchmarkResponse(boolean acknowledged) {, +        super(acknowledged);, +        readAcknowledged(in);, +        writeAcknowledged(out);, +++ b/src/main/java/org/elasticsearch/action/bench/BenchmarkExecutor.java, +import com.google.common.collect.UnmodifiableIterator;, +, +    private final Object activeStateLock = new Object();, +     * Aborts benchmark(s) matching the given wildcard patterns, +     * @param names the benchmark names to abort, +    public AbortBenchmarkResponse abortBenchmark(String[] names) {, +        synchronized (activeStateLock) {, +            for (String name : names) {, +                try {]