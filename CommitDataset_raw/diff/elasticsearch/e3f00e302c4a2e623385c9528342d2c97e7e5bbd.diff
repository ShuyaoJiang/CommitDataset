[+++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java, +    /**, +     * Adds the given listener to the provided directory reader. The reader must contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     * otherwise we can't safely install the listener., +     *, +     * @throws IllegalArgumentException if the reader doesn't contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     */, +        throw new IllegalArgumentException("Can't install close listener reader is not an ElasticsearchDirectoryReader/ElasticsearchLeafReader");, +    /**, +     * Tries to unwrap the given reader until the first {@link ElasticsearchDirectoryReader} instance is found or <code>null</code> if no instance is found;, +     */, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java, +    /**, +     * Adds the given listener to the provided directory reader. The reader must contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     * otherwise we can't safely install the listener., +     *, +     * @throws IllegalArgumentException if the reader doesn't contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     */, +        throw new IllegalArgumentException("Can't install close listener reader is not an ElasticsearchDirectoryReader/ElasticsearchLeafReader");, +    /**, +     * Tries to unwrap the given reader until the first {@link ElasticsearchDirectoryReader} instance is found or <code>null</code> if no instance is found;, +     */, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java, +import org.apache.lucene.index.*;, +    public ElasticsearchLeafReader(LeafReader in, ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java, +    /**, +     * Adds the given listener to the provided directory reader. The reader must contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     * otherwise we can't safely install the listener., +     *, +     * @throws IllegalArgumentException if the reader doesn't contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     */, +        throw new IllegalArgumentException("Can't install close listener reader is not an ElasticsearchDirectoryReader/ElasticsearchLeafReader");, +    /**, +     * Tries to unwrap the given reader until the first {@link ElasticsearchDirectoryReader} instance is found or <code>null</code> if no instance is found;, +     */, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java, +import org.apache.lucene.index.*;, +    public ElasticsearchLeafReader(LeafReader in, ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.common.lucene.index.ElasticsearchLeafReader;, +                        LeafReader esLeafReader = new ElasticsearchLeafReader(reader, shardId);, +                        assert isMergedSegment(esLeafReader);, +                            final Engine.Searcher searcher = new Searcher("warmer", searcherFactory.newSearcher(esLeafReader, null));, +            if (reader instanceof LeafReader && isMergedSegment((LeafReader)reader)) {, +                return searcher;, +            }, +                        IndicesWarmer.WarmerContext context = new IndicesWarmer.WarmerContext(shardId, new Searcher("new_reader_warming", newSearcher));, +                    assert searcher.getIndexReader() instanceof ElasticsearchDirectoryReader : "this class needs an ElasticsearchDirectoryReader but got: " + searcher.getIndexReader().getClass();, +                    warmer.warmTopReader(new IndicesWarmer.WarmerContext(shardId, new Searcher("top_reader_warming", searcher)));, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java, +    /**, +     * Adds the given listener to the provided directory reader. The reader must contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     * otherwise we can't safely install the listener., +     *, +     * @throws IllegalArgumentException if the reader doesn't contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     */, +        throw new IllegalArgumentException("Can't install close listener reader is not an ElasticsearchDirectoryReader/ElasticsearchLeafReader");, +    /**, +     * Tries to unwrap the given reader until the first {@link ElasticsearchDirectoryReader} instance is found or <code>null</code> if no instance is found;, +     */, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java, +import org.apache.lucene.index.*;, +    public ElasticsearchLeafReader(LeafReader in, ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.common.lucene.index.ElasticsearchLeafReader;, +                        LeafReader esLeafReader = new ElasticsearchLeafReader(reader, shardId);, +                        assert isMergedSegment(esLeafReader);, +                            final Engine.Searcher searcher = new Searcher("warmer", searcherFactory.newSearcher(esLeafReader, null));, +            if (reader instanceof LeafReader && isMergedSegment((LeafReader)reader)) {, +                return searcher;, +            }, +                        IndicesWarmer.WarmerContext context = new IndicesWarmer.WarmerContext(shardId, new Searcher("new_reader_warming", newSearcher));, +                    assert searcher.getIndexReader() instanceof ElasticsearchDirectoryReader : "this class needs an ElasticsearchDirectoryReader but got: " + searcher.getIndexReader().getClass();, +                    warmer.warmTopReader(new IndicesWarmer.WarmerContext(shardId, new Searcher("top_reader_warming", searcher)));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +            if (reader instanceof DirectoryReader) {, +            } else {, +                if (reader.leaves().isEmpty() && reader.numDocs() == 0) {, +                    // asserting reader passes down a MultiReader during rewrite which makes this, +                    // blow up since for this query to work we have to have a DirectoryReader otherwise, +                    // we can't load global ordinals - for this to work we simply check if the reader has no leaves, +                    // and rewrite to match nothing, +                    return new MatchNoDocsQuery();, +                }, +                throw new IllegalStateException("can't load global ordinals for reader of type: " + reader.getClass() + " must be a DirectoryReader");, +            }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchDirectoryReader.java, +    /**, +     * Adds the given listener to the provided directory reader. The reader must contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     * otherwise we can't safely install the listener., +     *, +     * @throws IllegalArgumentException if the reader doesn't contain an {@link ElasticsearchDirectoryReader} in it's hierarchy, +     */, +        throw new IllegalArgumentException("Can't install close listener reader is not an ElasticsearchDirectoryReader/ElasticsearchLeafReader");, +    /**, +     * Tries to unwrap the given reader until the first {@link ElasticsearchDirectoryReader} instance is found or <code>null</code> if no instance is found;, +     */, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java]