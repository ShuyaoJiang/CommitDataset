[+++ b/sql/shared-client/src/main/java/org/elasticsearch/xpack/sql/client/shared/RemoteFailure.java, +import com.fasterxml.jackson.core.JsonParseException;, +import java.io.BufferedInputStream;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.nio.charset.StandardCharsets;, +    /**, +     * The maximum number of bytes before we no longer include the raw response if, +     * there is a catastrophic error parsing the remote failure., +     */, +    private static final int MAX_RAW_RESPONSE = 50*1024;, +, +        // Don't close the stream because we might need to reset and reply it if there is an error. The caller closes the stream., +        JSON_FACTORY.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, false);, +, +    /**, +     * Parse a failure from the response. The stream is not closed when the parsing is complete., +     * The caller must close it., +     * @throws IOException if there is a catastrophic failure parsing the remote failure, +     */, +        // Mark so we can rewind to get the entire response in case we have to render an error., +        stream = new BufferedInputStream(stream);, +        stream.mark(MAX_RAW_RESPONSE);, +        JsonParser parser = null;, +            parser = JSON_FACTORY.createParser(stream);, +        } catch (JsonParseException e) {, +            throw new IOException(parseErrorMessage(e.getOriginalMessage(), stream, parser), e);, +            throw new IOException(parseErrorMessage(e.getMessage(), stream, parser), e);, +        } finally {, +            if (parser != null) {, +                parser.close();, +, +    /**, +     * Build an error message from a parse failure., +     */, +    private static String parseErrorMessage(String message, InputStream stream, JsonParser parser) {, +        String responseMessage;, +        try {, +            stream.reset();, +            try (Reader reader = new InputStreamReader(stream, StandardCharsets.UTF_8)) {, +                StringBuilder builder = new StringBuilder();, +                builder.append("Response:\n");, +                char[] buf = new char[512];, +                int read;, +                while ((read = reader.read(buf)) != -1) {, +                    builder.append(buf, 0, read);, +                }, +                responseMessage = builder.toString();, +            }, +        } catch (IOException replayException) {, +            // NOCOMMIT check for failed reset and return different error, +            responseMessage = "Attempted to include response but failed because [" + replayException.getMessage() + "].";, +        }, +        String parserLocation = "";, +        if (parser != null) {, +            parserLocation = " at [line " + parser.getTokenLocation().getLineNr(), +                    + " col " + parser.getTokenLocation().getColumnNr() + "]";, +        }, +        return "Can't parse error from Elasticearch [" + message + "]" + parserLocation + ". "  + responseMessage;, +    }, +++ b/sql/shared-client/src/main/java/org/elasticsearch/xpack/sql/client/shared/RemoteFailure.java, +import com.fasterxml.jackson.core.JsonParseException;, +import java.io.BufferedInputStream;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.nio.charset.StandardCharsets;, +    /**, +     * The maximum number of bytes before we no longer include the raw response if, +     * there is a catastrophic error parsing the remote failure., +     */, +    private static final int MAX_RAW_RESPONSE = 50*1024;, +, +        // Don't close the stream because we might need to reset and reply it if there is an error. The caller closes the stream., +        JSON_FACTORY.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, false);, +, +    /**, +     * Parse a failure from the response. The stream is not closed when the parsing is complete., +     * The caller must close it., +     * @throws IOException if there is a catastrophic failure parsing the remote failure, +     */, +        // Mark so we can rewind to get the entire response in case we have to render an error., +        stream = new BufferedInputStream(stream);, +        stream.mark(MAX_RAW_RESPONSE);, +        JsonParser parser = null;, +            parser = JSON_FACTORY.createParser(stream);, +        } catch (JsonParseException e) {, +            throw new IOException(parseErrorMessage(e.getOriginalMessage(), stream, parser), e);, +            throw new IOException(parseErrorMessage(e.getMessage(), stream, parser), e);, +        } finally {, +            if (parser != null) {, +                parser.close();, +, +    /**, +     * Build an error message from a parse failure., +     */, +    private static String parseErrorMessage(String message, InputStream stream, JsonParser parser) {, +        String responseMessage;, +        try {, +            stream.reset();, +            try (Reader reader = new InputStreamReader(stream, StandardCharsets.UTF_8)) {]