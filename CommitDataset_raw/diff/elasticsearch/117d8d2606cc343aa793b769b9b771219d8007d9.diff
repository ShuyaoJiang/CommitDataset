[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.nio.file.Path;, +    public static void initializeNatives(Path tmpFile, boolean mlockAll, boolean seccomp, boolean ctrlHandler) {, +            Natives.trySeccomp(tmpFile);, +        initializeNatives(environment.tmpFile(),, +                          settings.getAsBoolean("bootstrap.mlockall", false),, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.nio.file.Path;, +    public static void initializeNatives(Path tmpFile, boolean mlockAll, boolean seccomp, boolean ctrlHandler) {, +            Natives.trySeccomp(tmpFile);, +        initializeNatives(environment.tmpFile(),, +                          settings.getAsBoolean("bootstrap.mlockall", false),, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +, +import java.nio.file.Path;, +, +    static void trySeccomp(Path tmpFile) {, +            Seccomp.init(tmpFile);, +        } catch (Throwable t) {, +                logger.debug("unable to install syscall filter", t);, +            logger.warn("unable to install syscall filter: " + t.getMessage());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.nio.file.Path;, +    public static void initializeNatives(Path tmpFile, boolean mlockAll, boolean seccomp, boolean ctrlHandler) {, +            Natives.trySeccomp(tmpFile);, +        initializeNatives(environment.tmpFile(),, +                          settings.getAsBoolean("bootstrap.mlockall", false),, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +, +import java.nio.file.Path;, +, +    static void trySeccomp(Path tmpFile) {, +            Seccomp.init(tmpFile);, +        } catch (Throwable t) {, +                logger.debug("unable to install syscall filter", t);, +            logger.warn("unable to install syscall filter: " + t.getMessage());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Natives.java, +import java.nio.file.Path;, +, +    static void trySeccomp(Path tmpFile) {, +            logger.warn("cannot install syscall filters because JNA is not available");, +        JNANatives.trySeccomp(tmpFile);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.nio.file.Path;, +    public static void initializeNatives(Path tmpFile, boolean mlockAll, boolean seccomp, boolean ctrlHandler) {, +            Natives.trySeccomp(tmpFile);, +        initializeNatives(environment.tmpFile(),, +                          settings.getAsBoolean("bootstrap.mlockall", false),, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +, +import java.nio.file.Path;, +, +    static void trySeccomp(Path tmpFile) {, +            Seccomp.init(tmpFile);, +        } catch (Throwable t) {, +                logger.debug("unable to install syscall filter", t);, +            logger.warn("unable to install syscall filter: " + t.getMessage());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Natives.java, +import java.nio.file.Path;, +, +    static void trySeccomp(Path tmpFile) {, +            logger.warn("cannot install syscall filters because JNA is not available");, +        JNANatives.trySeccomp(tmpFile);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Seccomp.java, +import com.sun.jna.ptr.PointerByReference;, +import org.apache.lucene.util.IOUtils;, +import java.io.IOException;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.util.Collections;, + * Installs a limited form of secure computing mode,, + * to filters system calls to block process execution., + * This is only supported on the Linux and Mac OS X operating systems., + * <p>, + * On Linux it currently supports on the amd64 architecture, on Linux kernels 3.5 or above, and requires, + * On Linux BPF Filters are installed using either {@code seccomp(2)} (3.17+) or {@code prctl(2)} (3.5+). {@code seccomp(2)}, + * Linux BPF filters will return {@code EACCES} (Access Denied) for the following system calls:, + *   <li>{@code execveat}</li>, + * </ul>, + * <p>, + * On Mac OS X Leopard or above, a custom {@code sandbox(7)} ("Seatbelt") profile is installed that, + * denies the following rules:, + * <ul>, + *   <li>{@code process-fork}</li>, + *   <li>{@code process-exec}</li>, + * @see <a href="https://reverse.put.as/wp-content/uploads/2011/06/The-Apple-Sandbox-BHDC2011-Paper.pdf">, + *      https://reverse.put.as/wp-content/uploads/2011/06/The-Apple-Sandbox-BHDC2011-Paper.pdf</a>, +    // Linux implementation, based on seccomp(2) or prctl(2) with bpf filtering, +, +    /** Access to non-standard Linux libc methods */, +    // null if unavailable or something goes wrong., +    static final LinuxLibrary linux_libc;, +        if (Constants.LINUX) {, +        }, +        linux_libc = lib;, +    // currently these ranges are blocked (inclusive):, +    // 322: execveat, +    // ..., +    static final int NR_SYSCALL_FORK     = 57;, +    static final int NR_SYSCALL_EXECVE   = 59;]