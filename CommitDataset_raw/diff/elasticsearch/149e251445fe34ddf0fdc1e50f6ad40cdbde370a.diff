[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/rest/RestRequestFilter.java, +import org.elasticsearch.common.Nullable;, +import java.net.SocketAddress;, +                @Nullable, +                @Override, +                public SocketAddress getRemoteAddress() {, +                    return restRequest.getRemoteAddress();, +                }, +, +                @Nullable, +                @Override, +                public SocketAddress getLocalAddress() {, +                    return restRequest.getLocalAddress();, +                }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/rest/RestRequestFilter.java, +import org.elasticsearch.common.Nullable;, +import java.net.SocketAddress;, +                @Nullable, +                @Override, +                public SocketAddress getRemoteAddress() {, +                    return restRequest.getRemoteAddress();, +                }, +, +                @Nullable, +                @Override, +                public SocketAddress getLocalAddress() {, +                    return restRequest.getLocalAddress();, +                }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/rest/RestRequestFilterTests.java, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +, +    public void testRemoteAddressWorks() throws IOException {, +        BytesReference content = new BytesArray("{\"root\": {\"second\": {\"third\": \"password\", \"foo\": \"bar\"}}}");, +        RestRequestFilter filter = () -> Collections.singleton("*.third");, +        InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 32768);, +        FakeRestRequest restRequest =, +                new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY).withContent(content, XContentType.JSON), +                        .withRemoteAddress(address).build();, +        RestRequest filtered = filter.getFilteredRequest(restRequest);, +        assertEquals(address, filtered.getRemoteAddress());, +    }]