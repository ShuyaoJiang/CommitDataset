[+++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/index.asciidoc, +:client: http://www.elastic.co/guide/en/elasticsearch/client, +++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/index.asciidoc, +:client: http://www.elastic.co/guide/en/elasticsearch/client, +++ b/docs/groovy-api/index.asciidoc, +:ref:  http://www.elastic.co/guide/en/elasticsearch/reference/current, +:java: http://www.elastic.co/guide/en/elasticsearch/client/java-api/current, +++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/index.asciidoc, +:client: http://www.elastic.co/guide/en/elasticsearch/client, +++ b/docs/groovy-api/index.asciidoc, +:ref:  http://www.elastic.co/guide/en/elasticsearch/reference/current, +:java: http://www.elastic.co/guide/en/elasticsearch/client/java-api/current, +++ b/docs/java-api/index.asciidoc, +:ref: http://www.elastic.co/guide/en/elasticsearch/reference/current, +++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/index.asciidoc, +:client: http://www.elastic.co/guide/en/elasticsearch/client, +++ b/docs/groovy-api/index.asciidoc, +:ref:  http://www.elastic.co/guide/en/elasticsearch/reference/current, +:java: http://www.elastic.co/guide/en/elasticsearch/client/java-api/current, +++ b/docs/java-api/index.asciidoc, +:ref: http://www.elastic.co/guide/en/elasticsearch/reference/current, +++ /dev/null, +++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/index.asciidoc, +:client: http://www.elastic.co/guide/en/elasticsearch/client, +++ b/docs/groovy-api/index.asciidoc, +:ref:  http://www.elastic.co/guide/en/elasticsearch/reference/current, +:java: http://www.elastic.co/guide/en/elasticsearch/client/java-api/current, +++ b/docs/java-api/index.asciidoc, +:ref: http://www.elastic.co/guide/en/elasticsearch/reference/current, +++ /dev/null, +++ b/docs/reference/getting-started.asciidoc, +Once we have Java set up, we can then download and run Elasticsearch. The binaries are available from http://www.elastic.co/downloads[`www.elastic.co/downloads`] along with all the releases that have been made in the past. For each release, you have a choice among a `zip` or `tar` archive, or a `DEB` or `RPM` package. For simplicity, let's use the tar file., +curl -L -O https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-{version}.tar.gz, +* Filters can be http://www.elastic.co/blog/all-about-elasticsearch-filter-bitsets/[cached in memory] allowing repeated search executions to be significantly faster than queries, +++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/index.asciidoc, +:client: http://www.elastic.co/guide/en/elasticsearch/client, +++ b/docs/groovy-api/index.asciidoc, +:ref:  http://www.elastic.co/guide/en/elasticsearch/reference/current, +:java: http://www.elastic.co/guide/en/elasticsearch/client/java-api/current, +++ b/docs/java-api/index.asciidoc, +:ref: http://www.elastic.co/guide/en/elasticsearch/reference/current, +++ /dev/null, +++ b/docs/reference/getting-started.asciidoc, +Once we have Java set up, we can then download and run Elasticsearch. The binaries are available from http://www.elastic.co/downloads[`www.elastic.co/downloads`] along with all the releases that have been made in the past. For each release, you have a choice among a `zip` or `tar` archive, or a `DEB` or `RPM` package. For simplicity, let's use the tar file., +curl -L -O https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-{version}.tar.gz, +* Filters can be http://www.elastic.co/blog/all-about-elasticsearch-filter-bitsets/[cached in memory] allowing repeated search executions to be significantly faster than queries, +++ b/docs/reference/migration/migrate_1_0.asciidoc, +but instead the percolator works with a dedicated `.percolator` type. Read the http://www.elastic.co/blog/percolator-redesign-blog-post[redesigned percolator], +++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/index.asciidoc, +:client: http://www.elastic.co/guide/en/elasticsearch/client, +++ b/docs/groovy-api/index.asciidoc, +:ref:  http://www.elastic.co/guide/en/elasticsearch/reference/current, +:java: http://www.elastic.co/guide/en/elasticsearch/client/java-api/current, +++ b/docs/java-api/index.asciidoc, +:ref: http://www.elastic.co/guide/en/elasticsearch/reference/current, +++ /dev/null, +++ b/docs/reference/getting-started.asciidoc, +Once we have Java set up, we can then download and run Elasticsearch. The binaries are available from http://www.elastic.co/downloads[`www.elastic.co/downloads`] along with all the releases that have been made in the past. For each release, you have a choice among a `zip` or `tar` archive, or a `DEB` or `RPM` package. For simplicity, let's use the tar file., +curl -L -O https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-{version}.tar.gz, +* Filters can be http://www.elastic.co/blog/all-about-elasticsearch-filter-bitsets/[cached in memory] allowing repeated search executions to be significantly faster than queries, +++ b/docs/reference/migration/migrate_1_0.asciidoc, +but instead the percolator works with a dedicated `.percolator` type. Read the http://www.elastic.co/blog/percolator-redesign-blog-post[redesigned percolator], +++ b/docs/reference/modules/plugins.asciidoc, +automatically downloaded in this case from `download.elastic.co`,, +++ b/docs/community/clients.asciidoc, +* There is of course the {client}/java-api/current/index.html[native ES Java client], +++ b/docs/community/index.asciidoc, +:client: http://www.elastic.co/guide/en/elasticsearch/client, +++ b/docs/groovy-api/index.asciidoc, +:ref:  http://www.elastic.co/guide/en/elasticsearch/reference/current, +:java: http://www.elastic.co/guide/en/elasticsearch/client/java-api/current, +++ b/docs/java-api/index.asciidoc, +:ref: http://www.elastic.co/guide/en/elasticsearch/reference/current, +++ /dev/null, +++ b/docs/reference/getting-started.asciidoc, +Once we have Java set up, we can then download and run Elasticsearch. The binaries are available from http://www.elastic.co/downloads[`www.elastic.co/downloads`] along with all the releases that have been made in the past. For each release, you have a choice among a `zip` or `tar` archive, or a `DEB` or `RPM` package. For simplicity, let's use the tar file., +curl -L -O https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-{version}.tar.gz, +* Filters can be http://www.elastic.co/blog/all-about-elasticsearch-filter-bitsets/[cached in memory] allowing repeated search executions to be significantly faster than queries, +++ b/docs/reference/migration/migrate_1_0.asciidoc, +but instead the percolator works with a dedicated `.percolator` type. Read the http://www.elastic.co/blog/percolator-redesign-blog-post[redesigned percolator], +++ b/docs/reference/modules/plugins.asciidoc, +automatically downloaded in this case from `download.elastic.co`,, +++ b/docs/reference/setup.asciidoc, +get it running. If you haven't already, http://www.elastic.co/downloads[download] it, and]