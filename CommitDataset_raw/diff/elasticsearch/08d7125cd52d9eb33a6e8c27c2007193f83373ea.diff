[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +    public static String nodeStringValue(Object node, String defaultValue) {, +        if (node == null) {, +            return defaultValue;, +        }, +        return node.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +    public static String nodeStringValue(Object node, String defaultValue) {, +        if (node == null) {, +            return defaultValue;, +        }, +        return node.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +    protected ConcurrentMap<String, FieldData> buildFilterMap() {, +        return ConcurrentCollections.newConcurrentMap();, +    }, +, +                    fieldDataCache = buildFilterMap();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +    public static String nodeStringValue(Object node, String defaultValue) {, +        if (node == null) {, +            return defaultValue;, +        }, +        return node.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +    protected ConcurrentMap<String, FieldData> buildFilterMap() {, +        return ConcurrentCollections.newConcurrentMap();, +    }, +, +                    fieldDataCache = buildFilterMap();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/AbstractIndexerComponent.java, +, +import java.util.Map;, +    protected final Settings settings;, +    protected final Map<String, Object> indexerSettings;, +    protected AbstractIndexerComponent(IndexerName indexerName, Settings settings, @IndexerSettings Map<String, Object> indexerSettings) {, +        this.settings = settings;, +        this.indexerSettings = indexerSettings;, +        this.logger = Loggers.getLogger(getClass(), settings, indexerName);, +        return settings.get("name", "");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +    public static String nodeStringValue(Object node, String defaultValue) {, +        if (node == null) {, +            return defaultValue;, +        }, +        return node.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +    protected ConcurrentMap<String, FieldData> buildFilterMap() {, +        return ConcurrentCollections.newConcurrentMap();, +    }, +, +                    fieldDataCache = buildFilterMap();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/AbstractIndexerComponent.java, +, +import java.util.Map;, +    protected final Settings settings;, +    protected final Map<String, Object> indexerSettings;, +    protected AbstractIndexerComponent(IndexerName indexerName, Settings settings, @IndexerSettings Map<String, Object> indexerSettings) {, +        this.settings = settings;, +        this.indexerSettings = indexerSettings;, +        this.logger = Loggers.getLogger(getClass(), settings, indexerName);, +        return settings.get("name", "");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/IndexerIndexName.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.indexer;, +, +import org.elasticsearch.common.inject.BindingAnnotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.*;, +import static java.lang.annotation.RetentionPolicy.*;]