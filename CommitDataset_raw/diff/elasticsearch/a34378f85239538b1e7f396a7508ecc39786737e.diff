[+++ b/src/main/java/org/elasticsearch/search/action/SearchServiceTransportAction.java, +import java.util.concurrent.Callable;, +    private static <T> void execute(Callable<? extends T> callable, SearchServiceListener<T> listener) {, +        // Listeners typically do counting on errors and successes, and the decision to move to second phase, etc. is based on, +        // these counts so we need to be careful here to never propagate exceptions thrown by onResult to onFailure, +        T result = null;, +        Throwable error = null;, +        try {, +            result = callable.call();, +        } catch (Throwable t) {, +            error = t;, +        } finally {, +            if (result == null) {, +                assert error != null;, +                listener.onFailure(error);, +            } else {, +                assert error == null : error;, +                listener.onResult(result);, +            }, +        }, +    }, +, +            execute(new Callable<DfsSearchResult>() {, +                @Override, +                public DfsSearchResult call() throws Exception {, +                    return searchService.executeDfsPhase(request);, +            }, listener);, +            execute(new Callable<QuerySearchResult>() {, +                @Override, +                public QuerySearchResult call() throws Exception {, +                    return searchService.executeQueryPhase(request);, +            }, listener);, +            execute(new Callable<QuerySearchResult>() {, +                @Override, +                public QuerySearchResult call() throws Exception {, +                    return searchService.executeQueryPhase(request);, +            }, listener);, +            execute(new Callable<QuerySearchResult>() {, +                @Override, +                public QuerySearchResult call() throws Exception {, +                    return searchService.executeQueryPhase(request).queryResult();, +            }, listener);, +            execute(new Callable<QueryFetchSearchResult>() {, +                @Override, +                public QueryFetchSearchResult call() throws Exception {, +                    return searchService.executeFetchPhase(request);, +            }, listener);, +            execute(new Callable<QueryFetchSearchResult>() {, +                @Override, +                public QueryFetchSearchResult call() throws Exception {, +                    return searchService.executeFetchPhase(request);, +            }, listener);, +            execute(new Callable<QueryFetchSearchResult>() {, +                @Override, +                public QueryFetchSearchResult call() throws Exception {, +                    return searchService.executeFetchPhase(request).result();, +            }, listener);, +            execute(new Callable<FetchSearchResult>() {, +                @Override, +                public FetchSearchResult call() throws Exception {, +                    return searchService.executeFetchPhase(request);, +            }, listener);, +            execute(new Callable<QuerySearchResult>() {, +                @Override, +                public QuerySearchResult call() throws Exception {, +                    return searchService.executeScan(request);, +            }, listener);, +            execute(new Callable<QueryFetchSearchResult>() {, +                @Override, +                public QueryFetchSearchResult call() throws Exception {, +                    return searchService.executeScan(request).result();, +            }, listener);]