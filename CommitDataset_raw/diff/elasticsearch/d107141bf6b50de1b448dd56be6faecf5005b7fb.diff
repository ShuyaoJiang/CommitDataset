[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            pom.withXml(removeTransitiveDependencies(project)), +    /** Returns a closure which can be used with a MavenPom for removing transitive dependencies. */, +    private static Closure removeTransitiveDependencies(Project project) {, +        // TODO: remove this when enforcing gradle 2.13+, it now properly handles exclusions, +                // we now know we have something to exclude, so add the exclusion elements, +                Node exclusions = depNode.appendNode('exclusions'), +                for (ResolvedArtifact transitiveArtifact : artifacts) {, +                    ModuleVersionIdentifier transitiveDep = transitiveArtifact.moduleVersion.id, +                    if (transitiveDep.group == groupId && transitiveDep.name == artifactId) {, +                        continue; // don't exclude the dependency itself!, +                    }, +                    Node exclusion = exclusions.appendNode('exclusion'), +                    exclusion.appendNode('groupId', transitiveDep.group), +                    exclusion.appendNode('artifactId', transitiveDep.name), +                }, +                        publication.pom.withXml(removeTransitiveDependencies(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            pom.withXml(removeTransitiveDependencies(project)), +    /** Returns a closure which can be used with a MavenPom for removing transitive dependencies. */, +    private static Closure removeTransitiveDependencies(Project project) {, +        // TODO: remove this when enforcing gradle 2.13+, it now properly handles exclusions, +                // we now know we have something to exclude, so add the exclusion elements, +                Node exclusions = depNode.appendNode('exclusions'), +                for (ResolvedArtifact transitiveArtifact : artifacts) {, +                    ModuleVersionIdentifier transitiveDep = transitiveArtifact.moduleVersion.id, +                    if (transitiveDep.group == groupId && transitiveDep.name == artifactId) {, +                        continue; // don't exclude the dependency itself!, +                    }, +                    Node exclusion = exclusions.appendNode('exclusion'), +                    exclusion.appendNode('groupId', transitiveDep.group), +                    exclusion.appendNode('artifactId', transitiveDep.name), +                }, +                        publication.pom.withXml(removeTransitiveDependencies(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            pom.withXml(removeTransitiveDependencies(project)), +    /** Returns a closure which can be used with a MavenPom for removing transitive dependencies. */, +    private static Closure removeTransitiveDependencies(Project project) {, +        // TODO: remove this when enforcing gradle 2.13+, it now properly handles exclusions, +                // we now know we have something to exclude, so add the exclusion elements, +                Node exclusions = depNode.appendNode('exclusions'), +                for (ResolvedArtifact transitiveArtifact : artifacts) {, +                    ModuleVersionIdentifier transitiveDep = transitiveArtifact.moduleVersion.id, +                    if (transitiveDep.group == groupId && transitiveDep.name == artifactId) {, +                        continue; // don't exclude the dependency itself!, +                    }, +                    Node exclusion = exclusions.appendNode('exclusion'), +                    exclusion.appendNode('groupId', transitiveDep.group), +                    exclusion.appendNode('artifactId', transitiveDep.name), +                }, +                        publication.pom.withXml(removeTransitiveDependencies(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java, +                        new Text(suggestDoc.key.toString()), suggestDoc.score, contexts);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            pom.withXml(removeTransitiveDependencies(project)), +    /** Returns a closure which can be used with a MavenPom for removing transitive dependencies. */, +    private static Closure removeTransitiveDependencies(Project project) {, +        // TODO: remove this when enforcing gradle 2.13+, it now properly handles exclusions, +                // we now know we have something to exclude, so add the exclusion elements, +                Node exclusions = depNode.appendNode('exclusions'), +                for (ResolvedArtifact transitiveArtifact : artifacts) {, +                    ModuleVersionIdentifier transitiveDep = transitiveArtifact.moduleVersion.id, +                    if (transitiveDep.group == groupId && transitiveDep.name == artifactId) {, +                        continue; // don't exclude the dependency itself!, +                    }, +                    Node exclusion = exclusions.appendNode('exclusion'), +                    exclusion.appendNode('groupId', transitiveDep.group), +                    exclusion.appendNode('artifactId', transitiveDep.name), +                }, +                        publication.pom.withXml(removeTransitiveDependencies(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java, +                        new Text(suggestDoc.key.toString()), suggestDoc.score, contexts);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestion.java, +            public Option(int docID, Text text, float score, Map<String, Set<CharSequence>> contexts) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            pom.withXml(removeTransitiveDependencies(project)), +    /** Returns a closure which can be used with a MavenPom for removing transitive dependencies. */, +    private static Closure removeTransitiveDependencies(Project project) {, +        // TODO: remove this when enforcing gradle 2.13+, it now properly handles exclusions, +                // we now know we have something to exclude, so add the exclusion elements, +                Node exclusions = depNode.appendNode('exclusions'), +                for (ResolvedArtifact transitiveArtifact : artifacts) {, +                    ModuleVersionIdentifier transitiveDep = transitiveArtifact.moduleVersion.id, +                    if (transitiveDep.group == groupId && transitiveDep.name == artifactId) {, +                        continue; // don't exclude the dependency itself!, +                    }, +                    Node exclusion = exclusions.appendNode('exclusion'), +                    exclusion.appendNode('groupId', transitiveDep.group), +                    exclusion.appendNode('artifactId', transitiveDep.name), +                }, +                        publication.pom.withXml(removeTransitiveDependencies(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java, +                        new Text(suggestDoc.key.toString()), suggestDoc.score, contexts);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestion.java, +            public Option(int docID, Text text, float score, Map<String, Set<CharSequence>> contexts) {, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestionBuilder.java]