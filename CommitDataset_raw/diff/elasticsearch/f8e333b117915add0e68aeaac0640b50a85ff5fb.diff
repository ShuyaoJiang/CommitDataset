[+++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/CliFormatter.java, +import org.elasticsearch.xpack.sql.proto.DateUtils;, +import java.time.ZonedDateTime;, +                width[i] = Math.max(width[i], toString(row.get(i)).length());, +                String string = toString(row.get(i));, +, +    private static String toString(Object object) {, +        if (object instanceof ZonedDateTime) {, +            return DateUtils.toString((ZonedDateTime) object);, +        } else {, +            return Objects.toString(object);, +        }, +    }, +, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/CliFormatter.java, +import org.elasticsearch.xpack.sql.proto.DateUtils;, +import java.time.ZonedDateTime;, +                width[i] = Math.max(width[i], toString(row.get(i)).length());, +                String string = toString(row.get(i));, +, +    private static String toString(Object object) {, +        if (object instanceof ZonedDateTime) {, +            return DateUtils.toString((ZonedDateTime) object);, +        } else {, +            return Objects.toString(object);, +        }, +    }, +, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/SqlQueryResponse.java, +import org.elasticsearch.xpack.sql.proto.DateUtils;, +import java.time.ZonedDateTime;, +        if (value instanceof ZonedDateTime) {, +            ZonedDateTime zdt = (ZonedDateTime) value;, +            if (Mode.isDriver(mode)) {, +                // JDBC cannot parse dates in string format and ODBC can have issues with it, +                // so instead, use the millis since epoch (in UTC), +                builder.value(zdt.toInstant().toEpochMilli());, +            }, +            // otherwise use the ISO format, +            else {, +                builder.value(DateUtils.toString(zdt));, +            }, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/CliFormatter.java, +import org.elasticsearch.xpack.sql.proto.DateUtils;, +import java.time.ZonedDateTime;, +                width[i] = Math.max(width[i], toString(row.get(i)).length());, +                String string = toString(row.get(i));, +, +    private static String toString(Object object) {, +        if (object instanceof ZonedDateTime) {, +            return DateUtils.toString((ZonedDateTime) object);, +        } else {, +            return Objects.toString(object);, +        }, +    }, +, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/SqlQueryResponse.java, +import org.elasticsearch.xpack.sql.proto.DateUtils;, +import java.time.ZonedDateTime;, +        if (value instanceof ZonedDateTime) {, +            ZonedDateTime zdt = (ZonedDateTime) value;, +            if (Mode.isDriver(mode)) {, +                // JDBC cannot parse dates in string format and ODBC can have issues with it, +                // so instead, use the millis since epoch (in UTC), +                builder.value(zdt.toInstant().toEpochMilli());, +            }, +            // otherwise use the ISO format, +            else {, +                builder.value(DateUtils.toString(zdt));, +            }, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/DateUtils.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.sql.proto;, +, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeFormatter;, +import java.time.format.DateTimeFormatterBuilder;]