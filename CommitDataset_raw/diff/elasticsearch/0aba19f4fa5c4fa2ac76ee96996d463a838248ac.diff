[+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.update.TransportUpdateAction;, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +            //the request can only be null because we set it to null in the previous step, so it gets ignored, +            if (request == null) {, +            DocumentRequest documentRequest = (DocumentRequest) request;, +            if (addFailureIfIndexIsUnavailable(documentRequest, bulkRequest, responses, i, concreteIndices, metaData)) {, +                continue;, +            }, +            String concreteIndex = concreteIndices.resolveIfAbsent(documentRequest);, +            } else if (request instanceof DeleteRequest) {, +                try {, +                    TransportDeleteAction.resolveAndValidateRouting(metaData, concreteIndex, (DeleteRequest)request);, +                } catch(RoutingMissingException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(concreteIndex, documentRequest.type(), documentRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "delete", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);, +, +            } else if (request instanceof UpdateRequest) {, +                try {, +                    TransportUpdateAction.resolveAndValidateRouting(metaData, concreteIndex, (UpdateRequest)request);, +                } catch(RoutingMissingException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(concreteIndex, documentRequest.type(), documentRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "update", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);, +                }, +            } else {, +                throw new AssertionError("request type not supported: [" + request.getClass().getName() + "]");, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.update.TransportUpdateAction;, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +            //the request can only be null because we set it to null in the previous step, so it gets ignored, +            if (request == null) {, +            DocumentRequest documentRequest = (DocumentRequest) request;, +            if (addFailureIfIndexIsUnavailable(documentRequest, bulkRequest, responses, i, concreteIndices, metaData)) {, +                continue;, +            }, +            String concreteIndex = concreteIndices.resolveIfAbsent(documentRequest);, +            } else if (request instanceof DeleteRequest) {, +                try {, +                    TransportDeleteAction.resolveAndValidateRouting(metaData, concreteIndex, (DeleteRequest)request);, +                } catch(RoutingMissingException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(concreteIndex, documentRequest.type(), documentRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "delete", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);, +, +            } else if (request instanceof UpdateRequest) {, +                try {, +                    TransportUpdateAction.resolveAndValidateRouting(metaData, concreteIndex, (UpdateRequest)request);, +                } catch(RoutingMissingException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(concreteIndex, documentRequest.type(), documentRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "update", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);, +                }, +            } else {, +                throw new AssertionError("request type not supported: [" + request.getClass().getName() + "]");, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        resolveAndValidateRouting(metaData, concreteIndex, request);, +        ShardId shardId = clusterService.operationRouting().shardId(clusterService.state(), concreteIndex, request.id(), request.routing());, +        request.setShardId(shardId);, +    }, +, +    public static void resolveAndValidateRouting(final MetaData metaData, String concreteIndex, DeleteRequest request) {, +            // check if routing is required, if so, throw error if routing wasn't specified, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.update.TransportUpdateAction;, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +            //the request can only be null because we set it to null in the previous step, so it gets ignored, +            if (request == null) {, +            DocumentRequest documentRequest = (DocumentRequest) request;, +            if (addFailureIfIndexIsUnavailable(documentRequest, bulkRequest, responses, i, concreteIndices, metaData)) {, +                continue;, +            }, +            String concreteIndex = concreteIndices.resolveIfAbsent(documentRequest);, +            } else if (request instanceof DeleteRequest) {, +                try {, +                    TransportDeleteAction.resolveAndValidateRouting(metaData, concreteIndex, (DeleteRequest)request);, +                } catch(RoutingMissingException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(concreteIndex, documentRequest.type(), documentRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "delete", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);, +, +            } else if (request instanceof UpdateRequest) {, +                try {]