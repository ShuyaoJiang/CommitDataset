[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/resident/ResidentFilterCache.java, +import org.elasticsearch.common.base.Objects;, +import org.elasticsearch.index.settings.IndexSettingsService;, + * A resident reference based filter cache that has weak keys on the <tt>IndexReader</tt>., +    private final IndexSettingsService indexSettingsService;, +    private volatile int maxSize;, +    private volatile TimeValue expire;, +    private final ApplySettings applySettings = new ApplySettings();, +, +    @Inject public ResidentFilterCache(Index index, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService) {, +        this.indexSettingsService = indexSettingsService;, +, +        indexSettingsService.addListener(applySettings);, +    }, +, +    @Override public void close() {, +        indexSettingsService.removeListener(applySettings);, +        super.close();, +        return "resident";, +, +    class ApplySettings implements IndexSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            int maxSize = settings.getAsInt("index.cache.filter.max_size", ResidentFilterCache.this.maxSize);, +            TimeValue expire = settings.getAsTime("index.cache.filter.expire", ResidentFilterCache.this.expire);, +            boolean changed = false;, +            if (maxSize != ResidentFilterCache.this.maxSize) {, +                logger.info("updating index.cache.filter.max_size from [{}] to [{}]", ResidentFilterCache.this.maxSize, maxSize);, +                changed = true;, +                ResidentFilterCache.this.maxSize = maxSize;, +            }, +            if (!Objects.equal(expire, ResidentFilterCache.this.expire)) {, +                logger.info("updating index.cache.filter.expire from [{}] to [{}]", ResidentFilterCache.this.expire, expire);, +                changed = true;, +                ResidentFilterCache.this.expire = expire;, +            }, +            if (changed) {, +                clear();, +            }, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/resident/ResidentFilterCache.java, +import org.elasticsearch.common.base.Objects;, +import org.elasticsearch.index.settings.IndexSettingsService;, + * A resident reference based filter cache that has weak keys on the <tt>IndexReader</tt>., +    private final IndexSettingsService indexSettingsService;, +    private volatile int maxSize;, +    private volatile TimeValue expire;, +    private final ApplySettings applySettings = new ApplySettings();, +, +    @Inject public ResidentFilterCache(Index index, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService) {, +        this.indexSettingsService = indexSettingsService;, +, +        indexSettingsService.addListener(applySettings);, +    }, +, +    @Override public void close() {, +        indexSettingsService.removeListener(applySettings);, +        super.close();, +        return "resident";, +, +    class ApplySettings implements IndexSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            int maxSize = settings.getAsInt("index.cache.filter.max_size", ResidentFilterCache.this.maxSize);, +            TimeValue expire = settings.getAsTime("index.cache.filter.expire", ResidentFilterCache.this.expire);, +            boolean changed = false;, +            if (maxSize != ResidentFilterCache.this.maxSize) {, +                logger.info("updating index.cache.filter.max_size from [{}] to [{}]", ResidentFilterCache.this.maxSize, maxSize);, +                changed = true;, +                ResidentFilterCache.this.maxSize = maxSize;, +            }, +            if (!Objects.equal(expire, ResidentFilterCache.this.expire)) {, +                logger.info("updating index.cache.filter.expire from [{}] to [{}]", ResidentFilterCache.this.expire, expire);, +                changed = true;, +                ResidentFilterCache.this.expire = expire;, +            }, +            if (changed) {, +                clear();, +            }, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/soft/SoftFilterCache.java, +import org.elasticsearch.common.base.Objects;, +import org.elasticsearch.index.settings.IndexSettingsService;, +    private final IndexSettingsService indexSettingsService;, +    private volatile int maxSize;, +    private volatile TimeValue expire;, +    private final ApplySettings applySettings = new ApplySettings();, +, +    @Inject public SoftFilterCache(Index index, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService) {, +        this.indexSettingsService = indexSettingsService;, +, +        indexSettingsService.addListener(applySettings);, +    }, +, +    @Override public void close() {, +        indexSettingsService.removeListener(applySettings);, +        super.close();, +        if (expire != null && expire.nanos() > 0) {, +, +    class ApplySettings implements IndexSettingsService.Listener {]