[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +import org.elasticsearch.common.xcontent.ObjectParser.NamedObjectParser;, +import java.util.function.Consumer;, +    /**, +     * Declares named objects in the style of aggregations. These are named, +     * inside and object like this:, +     * , +     * <pre>, +     * <code>, +     * {, +     *   "aggregations": {, +     *     "name_1": { "aggregation_type": {} },, +     *     "name_2": { "aggregation_type": {} },, +     *     "name_3": { "aggregation_type": {} }, +     *     }, +     *   }, +     * }, +     * </code>, +     * </pre>, +     * , +     * Unlike the other version of this method, "ordered" mode (arrays of, +     * objects) is not supported., +     *, +     * See NamedObjectHolder in ObjectParserTests for examples of how to invoke, +     * this., +     *, +     * @param consumer, +     *            sets the values once they have been parsed, +     * @param namedObjectParser, +     *            parses each named object, +     * @param parseField, +     *            the field to parse, +     */, +    public abstract <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,, +            ParseField parseField);, +, +    /**, +     * Declares named objects in the style of highlighting's field element., +     * These are usually named inside and object like this:, +     * , +     * <pre>, +     * <code>, +     * {, +     *   "highlight": {, +     *     "fields": {        &lt;------ this one, +     *       "title": {},, +     *       "body": {},, +     *       "category": {}, +     *     }, +     *   }, +     * }, +     * </code>, +     * </pre>, +     * , +     * but, when order is important, some may be written this way:, +     * , +     * <pre>, +     * <code>, +     * {, +     *   "highlight": {, +     *     "fields": [        &lt;------ this one, +     *       {"title": {}},, +     *       {"body": {}},, +     *       {"category": {}}, +     *     ], +     *   }, +     * }, +     * </code>, +     * </pre>, +     * , +     * This is because json doesn't enforce ordering. Elasticsearch reads it in, +     * the order sent but tools that generate json are free to put object, +     * members in an unordered Map, jumbling them. Thus, if you care about order, +     * you can send the object in the second way., +     *, +     * See NamedObjectHolder in ObjectParserTests for examples of how to invoke, +     * this., +     *, +     * @param consumer, +     *            sets the values once they have been parsed, +     * @param namedObjectParser, +     *            parses each named object, +     * @param orderedModeCallback, +     *            called when the named object is parsed using the "ordered", +     *            mode (the array of objects), +     * @param parseField, +     *            the field to parse, +     */, +    public abstract <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,, +            Consumer<Value> orderedModeCallback, ParseField parseField);, +, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +import org.elasticsearch.common.xcontent.ObjectParser.NamedObjectParser;, +import java.util.function.Consumer;, +    /**, +     * Declares named objects in the style of aggregations. These are named, +     * inside and object like this:, +     * , +     * <pre>, +     * <code>]