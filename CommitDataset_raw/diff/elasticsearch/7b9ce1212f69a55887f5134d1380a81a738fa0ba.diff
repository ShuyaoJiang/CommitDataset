[+++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        NOT_MASTER_EXCEPTION(org.elasticsearch.cluster.NotMasterException.class, org.elasticsearch.cluster.NotMasterException::new, 144),, +        STATUS_EXCEPTION(org.elasticsearch.ElasticsearchStatusException.class, org.elasticsearch.ElasticsearchStatusException::new, 145);, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        NOT_MASTER_EXCEPTION(org.elasticsearch.cluster.NotMasterException.class, org.elasticsearch.cluster.NotMasterException::new, 144),, +        STATUS_EXCEPTION(org.elasticsearch.ElasticsearchStatusException.class, org.elasticsearch.ElasticsearchStatusException::new, 145);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +public class ElasticsearchSecurityException extends ElasticsearchStatusException {, +    /**, +     * Build the exception with a specific status and cause., +     */, +        super(msg, status, cause, args);, +    /**, +     * Build the exception with the status derived from the cause., +     */, +    /**, +     * Build the exception with a status of {@link RestStatus#INTERNAL_SERVER_ERROR} without a cause., +     */, +        this(msg, RestStatus.INTERNAL_SERVER_ERROR, args);, +    /**, +     * Build the exception without a cause., +     */, +        super(msg, status, args);, +    /**, +     * Read from a stream., +     */, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        NOT_MASTER_EXCEPTION(org.elasticsearch.cluster.NotMasterException.class, org.elasticsearch.cluster.NotMasterException::new, 144),, +        STATUS_EXCEPTION(org.elasticsearch.ElasticsearchStatusException.class, org.elasticsearch.ElasticsearchStatusException::new, 145);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +public class ElasticsearchSecurityException extends ElasticsearchStatusException {, +    /**, +     * Build the exception with a specific status and cause., +     */]