[+++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +import com.google.common.collect.Lists;, +import gnu.trove.impl.Constants;, +import gnu.trove.map.hash.TObjectFloatHashMap;, +    private TObjectFloatHashMap<String> fieldsBoosts;, +        this.fields = Lists.newArrayList();, +        this.fields.addAll(Arrays.asList(fields));, +     * Adds a field to run the multi match against., +     */, +    public MultiMatchQueryBuilder field(String field) {, +        fields.add(field);, +        return this;, +    }, +, +    /**, +     * Adds a field to run the multi match against with a specific boost., +     */, +    public MultiMatchQueryBuilder field(String field, float boost) {, +        fields.add(field);, +        if (fieldsBoosts == null) {, +            fieldsBoosts = new TObjectFloatHashMap<String>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR, -1);, +        }, +        fieldsBoosts.put(field, boost);, +        return this;, +    }, +, +    /**, +        builder.startArray("fields");, +        for (String field : fields) {, +            float boost = -1;, +            if (fieldsBoosts != null) {, +                boost = fieldsBoosts.get(field);, +            }, +            if (boost != -1) {, +                field += "^" + boost;, +            }, +            builder.value(field);, +        }, +        builder.endArray();, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +import com.google.common.collect.Lists;, +import gnu.trove.impl.Constants;, +import gnu.trove.map.hash.TObjectFloatHashMap;, +    private TObjectFloatHashMap<String> fieldsBoosts;, +        this.fields = Lists.newArrayList();, +        this.fields.addAll(Arrays.asList(fields));, +     * Adds a field to run the multi match against., +     */, +    public MultiMatchQueryBuilder field(String field) {, +        fields.add(field);, +        return this;, +    }, +, +    /**, +     * Adds a field to run the multi match against with a specific boost., +     */, +    public MultiMatchQueryBuilder field(String field, float boost) {, +        fields.add(field);, +        if (fieldsBoosts == null) {, +            fieldsBoosts = new TObjectFloatHashMap<String>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR, -1);, +        }, +        fieldsBoosts.put(field, boost);, +        return this;, +    }, +, +    /**, +        builder.startArray("fields");, +        for (String field : fields) {, +            float boost = -1;, +            if (fieldsBoosts != null) {, +                boost = fieldsBoosts.get(field);, +            }, +            if (boost != -1) {, +                field += "^" + boost;, +            }, +            builder.value(field);, +        }, +        builder.endArray();, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +        client.admin().indices().prepareRefresh("test").execute().actionGet();, +        builder = QueryBuilders.multiMatchQuery("value1").field("field1").field("field3", 1.5f), +                .operator(MatchQueryBuilder.Operator.AND); // Operator only applies on terms inside a field! Fields are always OR-ed together., +        searchResponse = client.prepareSearch(), +                .setQuery(builder), +                .execute().actionGet();, +        assertThat(searchResponse.hits().totalHits(), equalTo(2l));, +        assertThat("3", equalTo(searchResponse.hits().getAt(0).id()));, +        assertThat("1", equalTo(searchResponse.hits().getAt(1).id()));, +]