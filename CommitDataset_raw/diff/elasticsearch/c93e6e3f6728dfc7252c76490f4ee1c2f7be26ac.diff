[+++ b/src/test/java/org/elasticsearch/search/functionscore/RandomScoreFunctionTests.java, +import org.apache.lucene.util.ArrayUtil;, +import java.util.Comparator;, +            SearchHit[] hits = null;, +                        .setSize(docCount) // get all docs otherwise we are prone to tie-breaking, +                final int hitCount = searchResponse.getHits().getHits().length;, +                final SearchHit[] currentHits = searchResponse.getHits().getHits();, +                ArrayUtil.timSort(currentHits, new Comparator<SearchHit>() {, +                    @Override, +                    public int compare(SearchHit o1, SearchHit o2) {, +                        // for tie-breaking we have to resort here since if the score is, +                        // identical we rely on collection order which might change., +                        int cmp = Float.compare(o1.getScore(), o2.getScore());, +                        return cmp == 0 ? o1.getId().compareTo(o2.getId()) : cmp;, +                    }, +                });, +                    hits = currentHits;, +                    assertThat(hits.length, equalTo(searchResponse.getHits().getHits().length));, +                        assertThat("" + j, currentHits[j].score(), equalTo(hits[j].score()));, +                        assertThat("" + j, currentHits[j].id(), equalTo(hits[j].id()));, +                    int doc = randomInt(docCount-1);// watch out this is inclusive the max values!]