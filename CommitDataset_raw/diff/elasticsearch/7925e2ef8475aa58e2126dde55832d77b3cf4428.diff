[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.IndexModule;, +        IndexModule.INDEX_STORE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.IndexModule;, +        IndexModule.INDEX_STORE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.common.Strings;, +import java.util.function.Function;, +    public static final Setting<String> INDEX_STORE_TYPE_SETTING = new Setting<>("index.store.type", "", Function.identity(), false, Setting.Scope.INDEX);, +    public static final Setting<String> INDEX_QUERY_CACHE_TYPE_SETTING = new Setting<>("index.queries.cache.type", INDEX_QUERY_CACHE, (s) -> {, +        switch (s) {, +            case NONE_QUERY_CACHE:, +            case INDEX_QUERY_CACHE:, +                return s;, +            default:, +                throw new IllegalArgumentException("Unknown value for [index.queries.cache.type]: " + s);, +, +        }, +    }, false, Setting.Scope.INDEX);, +    public static final Setting<Boolean> INDEX_QUERY_CACHE_EVERYTHING_SETTING = Setting.boolSetting("index.queries.cache.everything", false, false, Setting.Scope.INDEX);, +        final String storeType = indexSettings.getValue(INDEX_STORE_TYPE_SETTING);, +        if (Strings.isEmpty(storeType) || isBuiltinType(storeType)) {, +        final String queryCacheType = indexSettings.getValue(INDEX_QUERY_CACHE_TYPE_SETTING);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.IndexModule;, +        IndexModule.INDEX_STORE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.common.Strings;, +import java.util.function.Function;, +    public static final Setting<String> INDEX_STORE_TYPE_SETTING = new Setting<>("index.store.type", "", Function.identity(), false, Setting.Scope.INDEX);, +    public static final Setting<String> INDEX_QUERY_CACHE_TYPE_SETTING = new Setting<>("index.queries.cache.type", INDEX_QUERY_CACHE, (s) -> {, +        switch (s) {, +            case NONE_QUERY_CACHE:, +            case INDEX_QUERY_CACHE:, +                return s;, +            default:, +                throw new IllegalArgumentException("Unknown value for [index.queries.cache.type]: " + s);, +, +        }, +    }, false, Setting.Scope.INDEX);, +    public static final Setting<Boolean> INDEX_QUERY_CACHE_EVERYTHING_SETTING = Setting.boolSetting("index.queries.cache.everything", false, false, Setting.Scope.INDEX);, +        final String storeType = indexSettings.getValue(INDEX_STORE_TYPE_SETTING);, +        if (Strings.isEmpty(storeType) || isBuiltinType(storeType)) {, +        final String queryCacheType = indexSettings.getValue(INDEX_QUERY_CACHE_TYPE_SETTING);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        if (IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.get(settings)) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.IndexModule;, +        IndexModule.INDEX_STORE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.common.Strings;, +import java.util.function.Function;, +    public static final Setting<String> INDEX_STORE_TYPE_SETTING = new Setting<>("index.store.type", "", Function.identity(), false, Setting.Scope.INDEX);, +    public static final Setting<String> INDEX_QUERY_CACHE_TYPE_SETTING = new Setting<>("index.queries.cache.type", INDEX_QUERY_CACHE, (s) -> {, +        switch (s) {, +            case NONE_QUERY_CACHE:, +            case INDEX_QUERY_CACHE:, +                return s;, +            default:, +                throw new IllegalArgumentException("Unknown value for [index.queries.cache.type]: " + s);, +, +        }, +    }, false, Setting.Scope.INDEX);, +    public static final Setting<Boolean> INDEX_QUERY_CACHE_EVERYTHING_SETTING = Setting.boolSetting("index.queries.cache.everything", false, false, Setting.Scope.INDEX);, +        final String storeType = indexSettings.getValue(INDEX_STORE_TYPE_SETTING);, +        if (Strings.isEmpty(storeType) || isBuiltinType(storeType)) {, +        final String queryCacheType = indexSettings.getValue(INDEX_QUERY_CACHE_TYPE_SETTING);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        if (IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.get(settings)) {, +++ b/core/src/main/java/org/elasticsearch/index/store/FsDirectoryService.java, +        final String storeType = indexSettings.getSettings().get(IndexModule.INDEX_STORE_TYPE_SETTING.getKey(), IndexModule.Type.DEFAULT.getSettingsKey());, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.IndexModule;, +        IndexModule.INDEX_STORE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_TYPE_SETTING,, +        IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.common.Strings;, +import java.util.function.Function;, +    public static final Setting<String> INDEX_STORE_TYPE_SETTING = new Setting<>("index.store.type", "", Function.identity(), false, Setting.Scope.INDEX);, +    public static final Setting<String> INDEX_QUERY_CACHE_TYPE_SETTING = new Setting<>("index.queries.cache.type", INDEX_QUERY_CACHE, (s) -> {, +        switch (s) {, +            case NONE_QUERY_CACHE:, +            case INDEX_QUERY_CACHE:, +                return s;, +            default:, +                throw new IllegalArgumentException("Unknown value for [index.queries.cache.type]: " + s);, +, +        }, +    }, false, Setting.Scope.INDEX);, +    public static final Setting<Boolean> INDEX_QUERY_CACHE_EVERYTHING_SETTING = Setting.boolSetting("index.queries.cache.everything", false, false, Setting.Scope.INDEX);]