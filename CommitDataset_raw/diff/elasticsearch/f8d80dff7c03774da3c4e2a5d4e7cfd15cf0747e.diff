[+++ b/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestion.java, +import org.apache.lucene.util.PriorityQueue;, +import java.util.Iterator;, +    private static final class OptionPriorityQueue extends PriorityQueue<ShardOptions> {, +        OptionPriorityQueue(int maxSize) {, +        protected boolean lessThan(ShardOptions a, ShardOptions b) {, +            return COMPARATOR.compare(a.current, b.current) < 0;, +    private static class ShardOptions {, +        final Iterator<Entry.Option> optionsIterator;, +        Entry.Option current;, +, +        private ShardOptions(Iterator<Entry.Option> optionsIterator) {, +            assert optionsIterator.hasNext();, +            this.optionsIterator = optionsIterator;, +            this.current = optionsIterator.next();, +, +        boolean advanceToNextOption() {, +            if (optionsIterator.hasNext()) {, +                current = optionsIterator.next();, +                return true;, +            } else {, +                return false;, +            }, +            int size = leader.getSize();, +                OptionPriorityQueue pq = new OptionPriorityQueue(toReduce.size());, +                    Iterator<Entry.Option> it = ((CompletionSuggestion) suggestion).getOptions().iterator();, +                    if (it.hasNext()) {, +                        pq.add(new ShardOptions(it));, +                // Dedup duplicate suggestions (based on the surface form) if skip duplicates is activated, +                final CharArraySet seenSurfaceForms = leader.skipDuplicates ? new CharArraySet(leader.getSize(), false) : null;, +                final Entry entry = new Entry(leaderEntry.getText(), leaderEntry.getOffset(), leaderEntry.getLength());, +                final List<Entry.Option> options = entry.getOptions();, +                while (pq.size() > 0) {, +                    ShardOptions top = pq.top();, +                    Entry.Option current = top.current;, +                    if (top.advanceToNextOption()) {, +                        pq.updateTop();, +                    } else {, +                        //options exhausted for this shard, +                        pq.pop();, +                    }, +                    if (leader.skipDuplicates == false ||, +                            seenSurfaceForms.add(current.getText().toString())) {, +                        options.add(current);, +                        if (options.size() >= size) {, +++ b/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestion.java, +import org.apache.lucene.util.PriorityQueue;, +import java.util.Iterator;, +    private static final class OptionPriorityQueue extends PriorityQueue<ShardOptions> {, +        OptionPriorityQueue(int maxSize) {, +        protected boolean lessThan(ShardOptions a, ShardOptions b) {, +            return COMPARATOR.compare(a.current, b.current) < 0;, +    private static class ShardOptions {, +        final Iterator<Entry.Option> optionsIterator;, +        Entry.Option current;, +, +        private ShardOptions(Iterator<Entry.Option> optionsIterator) {, +            assert optionsIterator.hasNext();, +            this.optionsIterator = optionsIterator;, +            this.current = optionsIterator.next();, +, +        boolean advanceToNextOption() {, +            if (optionsIterator.hasNext()) {, +                current = optionsIterator.next();, +                return true;, +            } else {, +                return false;, +            }, +            int size = leader.getSize();, +                OptionPriorityQueue pq = new OptionPriorityQueue(toReduce.size());, +                    Iterator<Entry.Option> it = ((CompletionSuggestion) suggestion).getOptions().iterator();, +                    if (it.hasNext()) {, +                        pq.add(new ShardOptions(it));, +                // Dedup duplicate suggestions (based on the surface form) if skip duplicates is activated, +                final CharArraySet seenSurfaceForms = leader.skipDuplicates ? new CharArraySet(leader.getSize(), false) : null;, +                final Entry entry = new Entry(leaderEntry.getText(), leaderEntry.getOffset(), leaderEntry.getLength());, +                final List<Entry.Option> options = entry.getOptions();, +                while (pq.size() > 0) {, +                    ShardOptions top = pq.top();, +                    Entry.Option current = top.current;, +                    if (top.advanceToNextOption()) {, +                        pq.updateTop();, +                    } else {, +                        //options exhausted for this shard, +                        pq.pop();, +                    }, +                    if (leader.skipDuplicates == false ||, +                            seenSurfaceForms.add(current.getText().toString())) {, +                        options.add(current);, +                        if (options.size() >= size) {, +++ b/server/src/main/java/org/elasticsearch/search/suggest/completion/TopSuggestGroupDocsCollector.java, + * Extension of the {@link TopSuggestDocsCollector} that returns top documents from the completion suggester., + *, +        super(num, skipDuplicates);, +    List<CharSequence> getContexts(int doc) {, +        boolean isNewDoc = docContexts.containsKey(globalDoc) == false;, +        if (isNewDoc) {, +            super.collect(docID, key, context, score);, +++ b/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestion.java, +import org.apache.lucene.util.PriorityQueue;]