[+++ b/core/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +    public int countMasterNodes(Iterable<DiscoveryNode> nodes) {, +        return count;, +    public boolean hasEnoughMasterNodes(Iterable<DiscoveryNode> nodes) {, +        return minimumMasterNodes < 1 || countMasterNodes(nodes) >= minimumMasterNodes;, +    }, +, +        final int count = countMasterNodes(nodes);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +    public int countMasterNodes(Iterable<DiscoveryNode> nodes) {, +        return count;, +    public boolean hasEnoughMasterNodes(Iterable<DiscoveryNode> nodes) {, +        return minimumMasterNodes < 1 || countMasterNodes(nodes) >= minimumMasterNodes;, +    }, +, +        final int count = countMasterNodes(nodes);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +            if (electMasterService.hasEnoughMasterNodes(remainingNodesClusterState.nodes()) == false) {, +                final int masterNodes = electMasterService.countMasterNodes(remainingNodesClusterState.nodes());, +                rejoin.accept(LoggerMessageFormat.format("not enough master nodes (has [{}], but needed [{}])",, +                                                         masterNodes, electMasterService.minimumMasterNodes()));, +                logger.warn("not enough master nodes discovered during pinging (found [{}], but needed [{}]), pinging again",, +                            masterCandidates, electMaster.minimumMasterNodes());, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +    public int countMasterNodes(Iterable<DiscoveryNode> nodes) {, +        return count;, +    public boolean hasEnoughMasterNodes(Iterable<DiscoveryNode> nodes) {, +        return minimumMasterNodes < 1 || countMasterNodes(nodes) >= minimumMasterNodes;, +    }, +, +        final int count = countMasterNodes(nodes);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +            if (electMasterService.hasEnoughMasterNodes(remainingNodesClusterState.nodes()) == false) {, +                final int masterNodes = electMasterService.countMasterNodes(remainingNodesClusterState.nodes());, +                rejoin.accept(LoggerMessageFormat.format("not enough master nodes (has [{}], but needed [{}])",, +                                                         masterNodes, electMasterService.minimumMasterNodes()));, +                logger.warn("not enough master nodes discovered during pinging (found [{}], but needed [{}]), pinging again",, +                            masterCandidates, electMaster.minimumMasterNodes());, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ElectMasterServiceTests.java, +, +    public void testCountMasterNodes() {, +        List<DiscoveryNode> nodes = generateRandomNodes();, +        ElectMasterService service = electMasterService();, +, +        int masterNodes = 0;, +, +        for (DiscoveryNode node : nodes) {, +            if (node.isMasterNode()) {, +                masterNodes++;, +            }, +        }, +, +        assertEquals(masterNodes, service.countMasterNodes(nodes));, +    }, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +    public int countMasterNodes(Iterable<DiscoveryNode> nodes) {, +        return count;, +    public boolean hasEnoughMasterNodes(Iterable<DiscoveryNode> nodes) {, +        return minimumMasterNodes < 1 || countMasterNodes(nodes) >= minimumMasterNodes;, +    }, +, +        final int count = countMasterNodes(nodes);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +            if (electMasterService.hasEnoughMasterNodes(remainingNodesClusterState.nodes()) == false) {, +                final int masterNodes = electMasterService.countMasterNodes(remainingNodesClusterState.nodes());, +                rejoin.accept(LoggerMessageFormat.format("not enough master nodes (has [{}], but needed [{}])",, +                                                         masterNodes, electMasterService.minimumMasterNodes()));, +                logger.warn("not enough master nodes discovered during pinging (found [{}], but needed [{}]), pinging again",, +                            masterCandidates, electMaster.minimumMasterNodes());, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ElectMasterServiceTests.java, +, +    public void testCountMasterNodes() {, +        List<DiscoveryNode> nodes = generateRandomNodes();, +        ElectMasterService service = electMasterService();, +, +        int masterNodes = 0;, +, +        for (DiscoveryNode node : nodes) {, +            if (node.isMasterNode()) {, +                masterNodes++;, +            }, +        }, +, +        assertEquals(masterNodes, service.countMasterNodes(nodes));, +    }, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/NodeRemovalClusterStateTaskExecutorTests.java, +        verify(electMasterService).countMasterNodes(eq(remainingNodesClusterState.get().nodes()));, +        verify(electMasterService).minimumMasterNodes();]