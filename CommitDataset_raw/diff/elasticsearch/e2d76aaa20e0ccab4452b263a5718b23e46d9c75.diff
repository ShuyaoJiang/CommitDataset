[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        if (System.getProperty(prop) != null) {, +                            throw new IllegalStateException("property: " + prop + " is unexpectedly set");, +                        }, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        if (System.getProperty(prop) != null) {, +                            throw new IllegalStateException("property: " + prop + " is unexpectedly set");, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        if (System.getProperty(prop) != null) {, +                            throw new IllegalStateException("property: " + prop + " is unexpectedly set");, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +    static final String PLUGIN_LIB_PATTERN = "glob:**.{jar,zip}";, +        try {, +            loadPluginsIntoClassLoader();, +        } catch (IOException ex) {, +            throw new IllegalStateException("Can't load plugins into classloader", ex);, +        }, +    private void loadPluginsIntoClassLoader() throws IOException {, +        Path pluginsDirectory = environment.pluginsFile();, +        if (!isAccessibleDirectory(pluginsDirectory, logger)) {, +            return;, +        }, +        ClassLoader classLoader = settings.getClassLoader();, +        Class classLoaderClass = classLoader.getClass();, +        Method addURL = null;, +        while (!classLoaderClass.equals(Object.class)) {, +            try {, +                addURL = classLoaderClass.getDeclaredMethod("addURL", URL.class);, +                addURL.setAccessible(true);, +                break;, +            } catch (NoSuchMethodException e) {, +                // no method, try the parent, +                classLoaderClass = classLoaderClass.getSuperclass();, +            }, +        }, +        if (addURL == null) {, +            logger.debug("failed to find addURL method on classLoader [" + classLoader + "] to add methods");, +            return;, +        }, +        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory)) {, +, +            for (Path plugin : stream) {, +                // We check that subdirs are directories and readable, +                if (!isAccessibleDirectory(plugin, logger)) {, +                    continue;, +                }, +, +                logger.trace("--- adding plugin [{}]", plugin.toAbsolutePath());, +, +                try {, +                    // add the root, +                    addURL.invoke(classLoader, plugin.toUri().toURL());, +                    // gather files to add, +                    List<Path> libFiles = Lists.newArrayList();, +                    libFiles.addAll(Arrays.asList(files(plugin)));, +                    Path libLocation = plugin.resolve("lib");, +                    if (Files.isDirectory(libLocation)) {, +                        libFiles.addAll(Arrays.asList(files(libLocation)));, +                    }, +, +                    PathMatcher matcher = PathUtils.getDefaultFileSystem().getPathMatcher(PLUGIN_LIB_PATTERN);, +, +                    // if there are jars in it, add it as well, +                    for (Path libFile : libFiles) {, +                        if (!matcher.matches(libFile)) {, +                            continue;, +                        }, +                        addURL.invoke(classLoader, libFile.toUri().toURL());, +                    }, +                } catch (Throwable e) {, +                    logger.warn("failed to add plugin [" + plugin + "]", e);, +                }]