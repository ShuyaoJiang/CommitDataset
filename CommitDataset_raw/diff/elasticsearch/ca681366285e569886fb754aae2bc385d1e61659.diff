[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenParser.java, +        ValuesSourceConfig<ValuesSource.Bytes.WithOrdinals.ParentChild> config = new ValuesSourceConfig<>(ValuesSource.Bytes.WithOrdinals.ParentChild.class);, +, +        String parentType = null;, +        Filter parentFilter = null;, +        Filter childFilter = null;, +        if (childDocMapper != null) {, +            parentType = parentFieldMapper.type();, +            if (parentDocMapper != null) {, +                parentFilter = context.filterCache().cache(parentDocMapper.typeFilter(), null, context.queryParserService().autoFilterCachePolicy());, +                childFilter = context.filterCache().cache(childDocMapper.typeFilter(), null, context.queryParserService().autoFilterCachePolicy());, +            } else {, +                config.unmapped(true);, +            }, +        } else {, +            config.unmapped(true);, +        }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenParser.java, +        ValuesSourceConfig<ValuesSource.Bytes.WithOrdinals.ParentChild> config = new ValuesSourceConfig<>(ValuesSource.Bytes.WithOrdinals.ParentChild.class);, +, +        String parentType = null;, +        Filter parentFilter = null;, +        Filter childFilter = null;, +        if (childDocMapper != null) {, +            parentType = parentFieldMapper.type();, +            if (parentDocMapper != null) {, +                parentFilter = context.filterCache().cache(parentDocMapper.typeFilter(), null, context.queryParserService().autoFilterCachePolicy());, +                childFilter = context.filterCache().cache(childDocMapper.typeFilter(), null, context.queryParserService().autoFilterCachePolicy());, +            } else {, +                config.unmapped(true);, +            }, +        } else {, +            config.unmapped(true);, +        }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ParentToChildrenAggregator.java, +import org.elasticsearch.search.aggregations.NonCollectingAggregator;, +            return new NonCollectingAggregator(name, aggregationContext, parent, metaData) {, +, +                @Override, +                public InternalAggregation buildEmptyAggregation() {, +                    return new InternalChildren(name, 0, buildEmptySubAggregations(), getMetaData());, +                }, +, +            };, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenParser.java, +        ValuesSourceConfig<ValuesSource.Bytes.WithOrdinals.ParentChild> config = new ValuesSourceConfig<>(ValuesSource.Bytes.WithOrdinals.ParentChild.class);, +, +        String parentType = null;, +        Filter parentFilter = null;, +        Filter childFilter = null;, +        if (childDocMapper != null) {, +            parentType = parentFieldMapper.type();, +            if (parentDocMapper != null) {, +                parentFilter = context.filterCache().cache(parentDocMapper.typeFilter(), null, context.queryParserService().autoFilterCachePolicy());, +                childFilter = context.filterCache().cache(childDocMapper.typeFilter(), null, context.queryParserService().autoFilterCachePolicy());, +            } else {, +                config.unmapped(true);, +            }, +        } else {, +            config.unmapped(true);, +        }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ParentToChildrenAggregator.java, +import org.elasticsearch.search.aggregations.NonCollectingAggregator;, +            return new NonCollectingAggregator(name, aggregationContext, parent, metaData) {, +, +                @Override, +                public InternalAggregation buildEmptyAggregation() {, +                    return new InternalChildren(name, 0, buildEmptySubAggregations(), getMetaData());, +                }, +, +            };, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +import org.elasticsearch.search.aggregations.*;, +    public NestedAggregator(String name, AggregatorFactories factories, ObjectMapper objectMapper, AggregationContext aggregationContext, Aggregator parentAggregator, Map<String, Object> metaData, FilterCachingPolicy filterCachingPolicy) {, +            MapperService.SmartNameObjectMapper mapper = context.searchContext().smartNameObjectMapper(path);, +            if (mapper == null) {, +                return new Unmapped(name, context, parent, metaData);, +            }, +            ObjectMapper objectMapper = mapper.mapper();, +            if (objectMapper == null) {, +                return new Unmapped(name, context, parent, metaData);, +            }, +            if (!objectMapper.nested().isNested()) {, +                throw new AggregationExecutionException("[nested] nested path [" + path + "] is not nested");, +            }, +            return new NestedAggregator(name, factories, objectMapper, context, parent, metaData, filterCachingPolicy);, +        }, +, +        private final static class Unmapped extends NonCollectingAggregator {, +, +            public Unmapped(String name, AggregationContext context, Aggregator parent, Map<String, Object> metaData) {, +                super(name, context, parent, metaData);, +            }, +, +            @Override, +            public InternalAggregation buildEmptyAggregation() {, +                return new InternalNested(name, 0, buildEmptySubAggregations(), getMetaData());, +, +, +}]