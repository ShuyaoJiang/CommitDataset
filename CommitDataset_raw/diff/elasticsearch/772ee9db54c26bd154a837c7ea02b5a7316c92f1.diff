[+++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 1;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 1;, +++ b/src/main/java/org/elasticsearch/search/facet/terms/InternalTermsFacet.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 1;, +++ b/src/main/java/org/elasticsearch/search/facet/terms/InternalTermsFacet.java, +++ b/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.IndexOrdinalFieldData;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.search.facet.FacetPhaseExecutionException;, +, +        SearchScript searchScript = null;, +        if (script != null) {, +            searchScript = context.scriptService().search(context.lookup(), scriptLang, script, params);, +        }, +, +            return new FieldsTermsStringFacetCollector(facetName, fieldsNames, size, comparatorType, allTerms, context, excluded, pattern, searchScript);, +        if (fieldMapper == null) {, +            throw new FacetPhaseExecutionException(facetName, "failed to find mapping for [" + field + "]");, +        }, +, +        IndexFieldData indexFieldData = context.fieldData().getForField(fieldMapper);, +        if (indexFieldData instanceof IndexNumericFieldData) {, +            IndexNumericFieldData indexNumericFieldData = (IndexNumericFieldData) indexFieldData;, +            if (indexNumericFieldData.getNumericType().isFloatingPoint()) {, +                return new TermsDoubleFacetCollector(facetName, indexNumericFieldData, size, comparatorType, allTerms, context, excluded, searchScript);, +            } else {, +                return new TermsLongFacetCollector(facetName, indexNumericFieldData, size, comparatorType, allTerms, context, excluded, searchScript);, +            }, +        } else {, +                return new TermsStringFacetCollector(facetName, indexFieldData, size, comparatorType, allTerms, context, excluded, pattern, searchScript);, +            } else if (indexFieldData instanceof IndexOrdinalFieldData) {, +                return new TermsStringOrdinalsFacetCollector(facetName, (IndexOrdinalFieldData) indexFieldData, size, comparatorType, allTerms, context, excluded, pattern);, +                return new TermsStringFacetCollector(facetName, indexFieldData, size, comparatorType, allTerms, context, excluded, pattern, searchScript);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 1;, +++ b/src/main/java/org/elasticsearch/search/facet/terms/InternalTermsFacet.java, +++ b/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.IndexOrdinalFieldData;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.search.facet.FacetPhaseExecutionException;, +, +        SearchScript searchScript = null;, +        if (script != null) {, +            searchScript = context.scriptService().search(context.lookup(), scriptLang, script, params);, +        }, +, +            return new FieldsTermsStringFacetCollector(facetName, fieldsNames, size, comparatorType, allTerms, context, excluded, pattern, searchScript);, +        if (fieldMapper == null) {, +            throw new FacetPhaseExecutionException(facetName, "failed to find mapping for [" + field + "]");, +        }, +, +        IndexFieldData indexFieldData = context.fieldData().getForField(fieldMapper);, +        if (indexFieldData instanceof IndexNumericFieldData) {, +            IndexNumericFieldData indexNumericFieldData = (IndexNumericFieldData) indexFieldData;, +            if (indexNumericFieldData.getNumericType().isFloatingPoint()) {, +                return new TermsDoubleFacetCollector(facetName, indexNumericFieldData, size, comparatorType, allTerms, context, excluded, searchScript);, +            } else {, +                return new TermsLongFacetCollector(facetName, indexNumericFieldData, size, comparatorType, allTerms, context, excluded, searchScript);, +            }, +        } else {, +                return new TermsStringFacetCollector(facetName, indexFieldData, size, comparatorType, allTerms, context, excluded, pattern, searchScript);, +            } else if (indexFieldData instanceof IndexOrdinalFieldData) {, +                return new TermsStringOrdinalsFacetCollector(facetName, (IndexOrdinalFieldData) indexFieldData, size, comparatorType, allTerms, context, excluded, pattern);, +                return new TermsStringFacetCollector(facetName, indexFieldData, size, comparatorType, allTerms, context, excluded, pattern, searchScript);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 1;, +++ b/src/main/java/org/elasticsearch/search/facet/terms/InternalTermsFacet.java, +++ b/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.IndexOrdinalFieldData;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.search.facet.FacetPhaseExecutionException;, +, +        SearchScript searchScript = null;, +        if (script != null) {, +            searchScript = context.scriptService().search(context.lookup(), scriptLang, script, params);, +        }, +, +            return new FieldsTermsStringFacetCollector(facetName, fieldsNames, size, comparatorType, allTerms, context, excluded, pattern, searchScript);, +        if (fieldMapper == null) {, +            throw new FacetPhaseExecutionException(facetName, "failed to find mapping for [" + field + "]");, +        }, +, +        IndexFieldData indexFieldData = context.fieldData().getForField(fieldMapper);, +        if (indexFieldData instanceof IndexNumericFieldData) {, +            IndexNumericFieldData indexNumericFieldData = (IndexNumericFieldData) indexFieldData;, +            if (indexNumericFieldData.getNumericType().isFloatingPoint()) {, +                return new TermsDoubleFacetCollector(facetName, indexNumericFieldData, size, comparatorType, allTerms, context, excluded, searchScript);, +            } else {, +                return new TermsLongFacetCollector(facetName, indexNumericFieldData, size, comparatorType, allTerms, context, excluded, searchScript);, +            }]