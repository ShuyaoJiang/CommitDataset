[+++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +    /**, +     * Check if a setting has already been registered, +     */, +    public boolean exists(Setting<?> setting) {, +        switch (setting.getScope()) {, +            case CLUSTER:, +                return clusterSettings.containsKey(setting.getKey());, +            case INDEX:, +                return indexSettings.containsKey(setting.getKey());, +        }, +        throw new IllegalArgumentException("setting scope is unknown. This should never happen!");, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +    /**, +     * Check if a setting has already been registered, +     */, +    public boolean exists(Setting<?> setting) {, +        switch (setting.getScope()) {, +            case CLUSTER:, +                return clusterSettings.containsKey(setting.getKey());, +            case INDEX:, +                return indexSettings.containsKey(setting.getKey());, +        }, +        throw new IllegalArgumentException("setting scope is unknown. This should never happen!");, +    }, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +import com.amazonaws.Protocol;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.function.Function;, +public interface AwsEc2Service {, +    Setting<Boolean> AUTO_ATTRIBUTE_SETTING = Setting.boolSetting("cloud.node.auto_attributes", false, false, Setting.Scope.CLUSTER);, +, +    // Global AWS settings (shared between discovery-ec2 and repository-s3), +    // Each setting starting with `cloud.aws` also exists in repository-s3 project. Don't forget to update, +    // the code there if you change anything here., +    /**, +     * cloud.aws.access_key: AWS Access key. Shared with repository-s3 plugin, +     */, +    Setting<String> KEY_SETTING = Setting.simpleString("cloud.aws.access_key", false, Setting.Scope.CLUSTER);, +    /**, +     * cloud.aws.secret_key: AWS Secret key. Shared with repository-s3 plugin, +     */, +    Setting<String> SECRET_SETTING = Setting.simpleString("cloud.aws.secret_key", false, Setting.Scope.CLUSTER);, +    /**, +     * cloud.aws.protocol: Protocol for AWS API: http or https. Defaults to https. Shared with repository-s3 plugin, +     */, +    Setting<Protocol> PROTOCOL_SETTING = new Setting<>("cloud.aws.protocol", "https", s -> Protocol.valueOf(s.toUpperCase(Locale.ROOT)),, +        false, Setting.Scope.CLUSTER);, +    /**, +     * cloud.aws.proxy.host: In case of proxy, define its hostname/IP. Shared with repository-s3 plugin, +     */, +    Setting<String> PROXY_HOST_SETTING = Setting.simpleString("cloud.aws.proxy.host", false, Setting.Scope.CLUSTER);, +    /**, +     * cloud.aws.proxy.port: In case of proxy, define its port. Defaults to 80. Shared with repository-s3 plugin, +     */, +    Setting<Integer> PROXY_PORT_SETTING = Setting.intSetting("cloud.aws.proxy.port", 80, 0, 1<<16, false, Setting.Scope.CLUSTER);, +    /**, +     * cloud.aws.proxy.username: In case of proxy with auth, define the username. Shared with repository-s3 plugin, +     */, +    Setting<String> PROXY_USERNAME_SETTING = Setting.simpleString("cloud.aws.proxy.username", false, Setting.Scope.CLUSTER);, +    /**, +     * cloud.aws.proxy.password: In case of proxy with auth, define the password. Shared with repository-s3 plugin, +     */, +    Setting<String> PROXY_PASSWORD_SETTING = Setting.simpleString("cloud.aws.proxy.password", false, Setting.Scope.CLUSTER);, +    /**, +     * cloud.aws.signer: If you are using an old AWS API version, you can define a Signer. Shared with repository-s3 plugin, +     */, +    Setting<String> SIGNER_SETTING = Setting.simpleString("cloud.aws.signer", false, Setting.Scope.CLUSTER);, +    /**, +     * cloud.aws.region: Region. Shared with repository-s3 plugin, +     */, +    Setting<String> REGION_SETTING = new Setting<>("cloud.aws.region", "", s -> s.toLowerCase(Locale.ROOT), false, Setting.Scope.CLUSTER);, +, +    /**, +     * Defines specific ec2 settings starting with cloud.aws.ec2., +     */, +    interface CLOUD_EC2 {, +        /**, +         * cloud.aws.ec2.access_key: AWS Access key specific for EC2 API calls. Defaults to cloud.aws.access_key., +         * @see AwsEc2Service#KEY_SETTING, +         */, +        Setting<String> KEY_SETTING = new Setting<>("cloud.aws.ec2.access_key", AwsEc2Service.KEY_SETTING, Function.identity(), false,, +            Setting.Scope.CLUSTER);, +        /**, +         * cloud.aws.ec2.secret_key: AWS Secret key specific for EC2 API calls. Defaults to cloud.aws.secret_key., +         * @see AwsEc2Service#SECRET_SETTING, +         */, +        Setting<String> SECRET_SETTING = new Setting<>("cloud.aws.ec2.secret_key", AwsEc2Service.SECRET_SETTING, Function.identity(), false,, +            Setting.Scope.CLUSTER);, +        /**, +         * cloud.aws.ec2.protocol: Protocol for AWS API specific for EC2 API calls: http or https.  Defaults to cloud.aws.protocol., +         * @see AwsEc2Service#PROTOCOL_SETTING, +         */]