[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceAggregatorBuilder.java, +            ranges.add(new Range(in));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceAggregatorBuilder.java, +            ranges.add(new Range(in));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceParser.java, +        /**, +         * Read from a stream., +         */, +        public Range(StreamInput in) throws IOException {, +            super(in.readOptionalString(), in.readDouble(), in.readDouble());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(key);, +            out.writeDouble(from);, +            out.writeDouble(to);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceAggregatorBuilder.java, +            ranges.add(new Range(in));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceParser.java, +        /**, +         * Read from a stream., +         */, +        public Range(StreamInput in) throws IOException {, +            super(in.readOptionalString(), in.readDouble(), in.readDouble());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(key);, +            out.writeDouble(from);, +            out.writeDouble(to);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorBuilder.java, +        bucketCountThresholds = new BucketCountThresholds(in);, +        filterBuilder = in.readOptionalNamedWriteable(QueryBuilder.class);, +        includeExclude = in.readOptionalWriteable(IncludeExclude::new);, +        out.writeOptionalNamedWriteable(filterBuilder);, +        out.writeOptionalWriteable(includeExclude);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceAggregatorBuilder.java, +            ranges.add(new Range(in));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceParser.java, +        /**, +         * Read from a stream., +         */, +        public Range(StreamInput in) throws IOException {, +            super(in.readOptionalString(), in.readDouble(), in.readDouble());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(key);, +            out.writeDouble(from);, +            out.writeDouble(to);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorBuilder.java, +        bucketCountThresholds = new BucketCountThresholds(in);, +        filterBuilder = in.readOptionalNamedWriteable(QueryBuilder.class);, +        includeExclude = in.readOptionalWriteable(IncludeExclude::new);, +        out.writeOptionalNamedWriteable(filterBuilder);, +        out.writeOptionalWriteable(includeExclude);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregator.java, +        /**, +         * Read from a stream., +         */, +        public BucketCountThresholds(StreamInput in) throws IOException {, +            requiredSize = in.readInt();, +            shardSize = in.readInt();, +            minDocCount = in.readLong();, +            shardMinDocCount = in.readLong();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeInt(requiredSize);, +            out.writeInt(shardSize);, +            out.writeLong(minDocCount);, +            out.writeLong(shardMinDocCount);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceAggregatorBuilder.java, +            ranges.add(new Range(in));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/geodistance/GeoDistanceParser.java, +        /**, +         * Read from a stream., +         */, +        public Range(StreamInput in) throws IOException {, +            super(in.readOptionalString(), in.readDouble(), in.readDouble());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(key);, +            out.writeDouble(from);, +            out.writeDouble(to);, +        }]