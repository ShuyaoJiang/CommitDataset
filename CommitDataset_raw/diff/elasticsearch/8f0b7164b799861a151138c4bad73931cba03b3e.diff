[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        final Map<String,URL> clazzes = new HashMap<>(32768);, +        Set<String> seenJars = new HashSet<>();, +            String path = PathUtils.get(url.toURI()).toString();, +                try (JarFile file = new JarFile(path)) {, +                            checkClass(clazzes, entry, url);, +                            checkClass(clazzes, entry, url);, +    @SuppressForbidden(reason = "proper use of URL to reduce noise"), +    static void checkClass(Map<String,URL> clazzes, String clazz, URL url) {, +        URL previous = clazzes.put(clazz, url);, +            if (previous.equals(url)) {, +                        "exists multiple times in jar: " + url.getPath() + " !!!!!!!!!");, +                        "jar1: " + previous.getPath() + System.lineSeparator() +, +                        "jar2: " + url.getPath());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        final Map<String,URL> clazzes = new HashMap<>(32768);, +        Set<String> seenJars = new HashSet<>();, +            String path = PathUtils.get(url.toURI()).toString();, +                try (JarFile file = new JarFile(path)) {, +                            checkClass(clazzes, entry, url);, +                            checkClass(clazzes, entry, url);, +    @SuppressForbidden(reason = "proper use of URL to reduce noise"), +    static void checkClass(Map<String,URL> clazzes, String clazz, URL url) {, +        URL previous = clazzes.put(clazz, url);, +            if (previous.equals(url)) {, +                        "exists multiple times in jar: " + url.getPath() + " !!!!!!!!!");, +                        "jar1: " + previous.getPath() + System.lineSeparator() +, +                        "jar2: " + url.getPath());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +    public FieldMapper(String simpleName) {, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +     * */, +    public abstract boolean isGenerated();, +, +    /**, +     * Parse using the provided {@link ParseContext} and return a mapping, +     * update if dynamic mappings modified the mappings, or {@code null} if, +     * mappings were not modified., +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        final Map<String,URL> clazzes = new HashMap<>(32768);, +        Set<String> seenJars = new HashSet<>();, +            String path = PathUtils.get(url.toURI()).toString();, +                try (JarFile file = new JarFile(path)) {, +                            checkClass(clazzes, entry, url);, +                            checkClass(clazzes, entry, url);, +    @SuppressForbidden(reason = "proper use of URL to reduce noise"), +    static void checkClass(Map<String,URL> clazzes, String clazz, URL url) {, +        URL previous = clazzes.put(clazz, url);, +            if (previous.equals(url)) {, +                        "exists multiple times in jar: " + url.getPath() + " !!!!!!!!!");, +                        "jar1: " + previous.getPath() + System.lineSeparator() +, +                        "jar2: " + url.getPath());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +    public FieldMapper(String simpleName) {, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +     * */, +    public abstract boolean isGenerated();, +, +    /**, +     * Parse using the provided {@link ParseContext} and return a mapping, +     * update if dynamic mappings modified the mappings, or {@code null} if, +     * mappings were not modified., +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +     * TODO: make this protected once Mapper, FieldMapper and AbstractFieldMapper are merged together */, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        final Map<String,URL> clazzes = new HashMap<>(32768);, +        Set<String> seenJars = new HashSet<>();, +            String path = PathUtils.get(url.toURI()).toString();, +                try (JarFile file = new JarFile(path)) {, +                            checkClass(clazzes, entry, url);, +                            checkClass(clazzes, entry, url);, +    @SuppressForbidden(reason = "proper use of URL to reduce noise"), +    static void checkClass(Map<String,URL> clazzes, String clazz, URL url) {, +        URL previous = clazzes.put(clazz, url);, +            if (previous.equals(url)) {, +                        "exists multiple times in jar: " + url.getPath() + " !!!!!!!!!");, +                        "jar1: " + previous.getPath() + System.lineSeparator() +, +                        "jar2: " + url.getPath());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +    public FieldMapper(String simpleName) {, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +     * */, +    public abstract boolean isGenerated();, +, +    /**, +     * Parse using the provided {@link ParseContext} and return a mapping]