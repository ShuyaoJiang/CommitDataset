[+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import org.elasticsearch.common.time.DateMathParser;, +import org.elasticsearch.common.time.DateUtils;, +                                DateMathParser dateMathParser = formatter.toDateMathParser();, +                                long millis = dateMathParser.parse(mathExpression, context::getStartTime, false,, +                                    DateUtils.dateTimeZoneToZoneId(timeZone));, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import org.elasticsearch.common.time.DateMathParser;, +import org.elasticsearch.common.time.DateUtils;, +                                DateMathParser dateMathParser = formatter.toDateMathParser();, +                                long millis = dateMathParser.parse(mathExpression, context::getStartTime, false,, +                                    DateUtils.dateTimeZoneToZoneId(timeZone));, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import org.elasticsearch.common.time.DateMathParser;, +import org.elasticsearch.common.time.DateUtils;, +                                DateMathParser dateMathParser = formatter.toDateMathParser();, +                                long millis = dateMathParser.parse(mathExpression, context::getStartTime, false,, +                                    DateUtils.dateTimeZoneToZoneId(timeZone));, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/common/joda/FormatDateTimeFormatter.java, +import org.elasticsearch.common.time.DateMathParser;, +, +    public DateMathParser toDateMathParser() {, +        return new JodaDateMathParser(this);, +    }, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import org.elasticsearch.common.time.DateMathParser;, +import org.elasticsearch.common.time.DateUtils;, +                                DateMathParser dateMathParser = formatter.toDateMathParser();, +                                long millis = dateMathParser.parse(mathExpression, context::getStartTime, false,, +                                    DateUtils.dateTimeZoneToZoneId(timeZone));, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/common/joda/FormatDateTimeFormatter.java, +import org.elasticsearch.common.time.DateMathParser;, +, +    public DateMathParser toDateMathParser() {, +        return new JodaDateMathParser(this);, +    }, +++ b/server/src/main/java/org/elasticsearch/common/joda/JodaDateMathParser.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.joda;, +, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.time.DateMathParser;, +import org.elasticsearch.common.time.DateUtils;, +import org.joda.time.DateTimeZone;, +import org.joda.time.MutableDateTime;, +import org.joda.time.format.DateTimeFormatter;, +, +import java.time.ZoneId;, +import java.util.Objects;, +import java.util.function.LongSupplier;, +, +/**, + * A parser for date/time formatted text with optional date math., + *, + * The format of the datetime is configurable, and unix timestamps can also be used. Datemath, + * is appended to a datetime with the following syntax:, + * <code>||[+-/](\d+)?[yMwdhHms]</code>., + */, +public class JodaDateMathParser implements DateMathParser {, +, +    private final FormatDateTimeFormatter dateTimeFormatter;, +, +    public JodaDateMathParser(FormatDateTimeFormatter dateTimeFormatter) {, +        Objects.requireNonNull(dateTimeFormatter);, +        this.dateTimeFormatter = dateTimeFormatter;, +    }, +, +    // Note: we take a callable here for the timestamp in order to be able to figure out, +    // if it has been used. For instance, the request cache does not cache requests that make, +    // use of `now`., +    @Override, +    public long parse(String text, LongSupplier now, boolean roundUp, ZoneId tz) {, +        final DateTimeZone timeZone = tz == null ? null : DateUtils.zoneIdToDateTimeZone(tz);, +        long time;, +        String mathString;, +        if (text.startsWith("now")) {, +            try {, +                time = now.getAsLong();, +            } catch (Exception e) {]