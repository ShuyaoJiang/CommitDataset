[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/storedscripts/GetStoredScriptResponse.java, +                out.writeString(source.getSource());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/storedscripts/GetStoredScriptResponse.java, +                out.writeString(source.getSource());, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestGetStoredScriptAction.java, +                        builder.field(StoredScriptSource.SOURCE_PARSE_FIELD.getPreferredName(), source.getSource());, +                        builder.field(StoredScriptSource.SCRIPT_PARSE_FIELD.getPreferredName(), source.getSource());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/storedscripts/GetStoredScriptResponse.java, +                out.writeString(source.getSource());, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestGetStoredScriptAction.java, +                        builder.field(StoredScriptSource.SOURCE_PARSE_FIELD.getPreferredName(), source.getSource());, +                        builder.field(StoredScriptSource.SCRIPT_PARSE_FIELD.getPreferredName(), source.getSource());, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +     * Standard {@link ParseField} for source on the inner level., +     */, +    public static final ParseField SOURCE_PARSE_FIELD = new ParseField("source");, +, +    /**, +                throw new IllegalArgumentException("must specify either [source] for an inline script or [id] for a stored script");, +     *     // Exactly one of "id" or "source" must be specified, +     *     "id" : "<id>",, +     *     // OR, +     *     "source": "<source>",, +     *     "source" : "return Math.log(doc.popularity) * params.multiplier",, +     *     "source" : { "query" : ... },, +     *     "<(id, source)>" : "<idOrCode>",, +     *     "source" : "return Math.log(doc.popularity) * params.multiplier;",, +     *     "source" : { "query" : ... },, +        if (type == ScriptType.INLINE) {, +            if (contentType != null && builder.contentType().mediaType().equals(contentType)) {, +                builder.rawField(SOURCE_PARSE_FIELD.getPreferredName(), new BytesArray(idOrCode));, +                builder.field(SOURCE_PARSE_FIELD.getPreferredName(), idOrCode);, +            }, +        } else {, +            builder.field("id", idOrCode);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/storedscripts/GetStoredScriptResponse.java, +                out.writeString(source.getSource());, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestGetStoredScriptAction.java, +                        builder.field(StoredScriptSource.SOURCE_PARSE_FIELD.getPreferredName(), source.getSource());, +                        builder.field(StoredScriptSource.SCRIPT_PARSE_FIELD.getPreferredName(), source.getSource());, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +     * Standard {@link ParseField} for source on the inner level., +     */, +    public static final ParseField SOURCE_PARSE_FIELD = new ParseField("source");, +, +    /**, +                throw new IllegalArgumentException("must specify either [source] for an inline script or [id] for a stored script");, +     *     // Exactly one of "id" or "source" must be specified, +     *     "id" : "<id>",, +     *     // OR, +     *     "source": "<source>",, +     *     "source" : "return Math.log(doc.popularity) * params.multiplier",, +     *     "source" : { "query" : ... },, +     *     "<(id, source)>" : "<idOrCode>",, +     *     "source" : "return Math.log(doc.popularity) * params.multiplier;",, +     *     "source" : { "query" : ... },, +        if (type == ScriptType.INLINE) {, +            if (contentType != null && builder.contentType().mediaType().equals(contentType)) {, +                builder.rawField(SOURCE_PARSE_FIELD.getPreferredName(), new BytesArray(idOrCode));, +                builder.field(SOURCE_PARSE_FIELD.getPreferredName(), idOrCode);, +            }, +        } else {, +            builder.field("id", idOrCode);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +                    source = new StoredScriptSource(id.substring(0, split), source.getSource(), Collections.emptyMap());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/storedscripts/GetStoredScriptResponse.java, +                out.writeString(source.getSource());, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestGetStoredScriptAction.java, +                        builder.field(StoredScriptSource.SOURCE_PARSE_FIELD.getPreferredName(), source.getSource());, +                        builder.field(StoredScriptSource.SCRIPT_PARSE_FIELD.getPreferredName(), source.getSource());, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +     * Standard {@link ParseField} for source on the inner level., +     */, +    public static final ParseField SOURCE_PARSE_FIELD = new ParseField("source");, +, +    /**, +                throw new IllegalArgumentException("must specify either [source] for an inline script or [id] for a stored script");, +     *     // Exactly one of "id" or "source" must be specified, +     *     "id" : "<id>",, +     *     // OR, +     *     "source": "<source>",, +     *     "source" : "return Math.log(doc.popularity) * params.multiplier",, +     *     "source" : { "query" : ... },, +     *     "<(id, source)>" : "<idOrCode>",, +     *     "source" : "return Math.log(doc.popularity) * params.multiplier;",, +     *     "source" : { "query" : ... },, +        if (type == ScriptType.INLINE) {, +            if (contentType != null && builder.contentType().mediaType().equals(contentType)) {, +                builder.rawField(SOURCE_PARSE_FIELD.getPreferredName(), new BytesArray(idOrCode));, +                builder.field(SOURCE_PARSE_FIELD.getPreferredName(), idOrCode);, +            }, +        } else {, +            builder.field("id", idOrCode);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +                    source = new StoredScriptSource(id.substring(0, split), source.getSource(), Collections.emptyMap());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +            idOrCode = source.getSource();, +                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/storedscripts/GetStoredScriptResponse.java, +                out.writeString(source.getSource());]