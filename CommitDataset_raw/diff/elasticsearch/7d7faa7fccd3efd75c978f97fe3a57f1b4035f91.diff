[+++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String key, String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(key);, +        Objects.requireNonNull(value, "value can not be null for [" + key + "]");, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String key, String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(key);, +        Objects.requireNonNull(value, "value can not be null for [" + key + "]");, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                String value = propertyPlaceholder.replacePlaceholders(entry.getKey(), entry.getValue(), placeholderResolver);, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String key, String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(key);, +        Objects.requireNonNull(value, "value can not be null for [" + key + "]");, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                String value = propertyPlaceholder.replacePlaceholders(entry.getKey(), entry.getValue(), placeholderResolver);, +++ b/core/src/test/java/org/elasticsearch/common/property/PropertyPlaceholderTests.java, +import static org.hamcrest.Matchers.hasToString;, +        assertEquals("bar1", propertyPlaceholder.replacePlaceholders("key", "{foo1}", placeholderResolver));, +        assertEquals("a bar1b", propertyPlaceholder.replacePlaceholders("key", "a {foo1}b", placeholderResolver));, +        assertEquals("bar1bar2", propertyPlaceholder.replacePlaceholders("key", "{foo1}{foo2}", placeholderResolver));, +        assertEquals("a bar1 b bar2 c", propertyPlaceholder.replacePlaceholders("key", "a {foo1} b {foo2} c", placeholderResolver));, +        assertEquals("bar", ppEqualsPrefix.replacePlaceholders("key", "{foo}", placeholderResolver));, +        assertEquals("bar", ppLongerPrefix.replacePlaceholders("key", "${foo}", placeholderResolver));, +        assertEquals("bar", ppShorterPrefix.replacePlaceholders("key", "{foo}}", placeholderResolver));, +        assertEquals("bar", propertyPlaceholder.replacePlaceholders("key", "${foo:bar}", placeholderResolver));, +        assertEquals("", propertyPlaceholder.replacePlaceholders("key", "${foo:}", placeholderResolver));, +        assertEquals("${foo}", propertyPlaceholder.replacePlaceholders("key", "${foo}", placeholderResolver));, +            propertyPlaceholder.replacePlaceholders("key", "${foo}", placeholderResolver);, +        assertEquals("bar", propertyPlaceholder.replacePlaceholders("key", "bar${foo}", placeholderResolver));, +        assertEquals("bar", propertyPlaceholder.replacePlaceholders("key", "${foo}", placeholderResolver));, +        assertEquals("abarb", propertyPlaceholder.replacePlaceholders("key", "a${foo}b", placeholderResolver));, +        assertEquals("baz", propertyPlaceholder.replacePlaceholders("key", "${bar${foo}}", placeholderResolver));, +        assertEquals("baz", propertyPlaceholder.replacePlaceholders("key", "{bar{foo}}", placeholderResolver));, +        assertEquals("baz", propertyPlaceholder.replacePlaceholders("key", "{bar{foo}}}}", placeholderResolver));, +            propertyPlaceholder.replacePlaceholders("key", "${foo}", placeholderResolver);, +        assertEquals("bar${foo}", propertyPlaceholder.replacePlaceholders("key", "bar${foo}", placeholderResolver));, +    }, +, +    public void testNullKey() {, +        final PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);, +        final Map<String, String> map = new LinkedHashMap<>();, +        final PropertyPlaceholder.PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver(map, true, false);, +        expectThrows(NullPointerException.class, () -> propertyPlaceholder.replacePlaceholders(null, "value", placeholderResolver));, +    }, +, +    public void testNullValue() {, +        final PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("${", "}", false);, +        final Map<String, String> map = new LinkedHashMap<>();, +        final PropertyPlaceholder.PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver(map, true, false);, +        final String key = randomAsciiOfLength(10);, +        NullPointerException e =, +                expectThrows(NullPointerException.class, () -> propertyPlaceholder.replacePlaceholders(key, null, placeholderResolver));, +        assertThat(e, hasToString("java.lang.NullPointerException: value can not be null for [" + key + "]"));]