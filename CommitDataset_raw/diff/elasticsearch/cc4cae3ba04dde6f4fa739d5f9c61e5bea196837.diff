[+++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +    public static final String TRANSPORT_SERVICE_TYPE_KEY = "transport.service.type";, +        Class<? extends TransportService> transportService = settings.getAsClass(TRANSPORT_SERVICE_TYPE_KEY, TransportService.class, "org.elasticsearch.transport.", "TransportService");, +        if (!TransportService.class.equals(transportService)) {, +            bind(TransportService.class).to(transportService).asEagerSingleton();, +        } else {, +}, +++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +    public static final String TRANSPORT_SERVICE_TYPE_KEY = "transport.service.type";, +        Class<? extends TransportService> transportService = settings.getAsClass(TRANSPORT_SERVICE_TYPE_KEY, TransportService.class, "org.elasticsearch.transport.", "TransportService");, +        if (!TransportService.class.equals(transportService)) {, +            bind(TransportService.class).to(transportService).asEagerSingleton();, +        } else {, +}, +++ b/src/main/java/org/elasticsearch/transport/TransportService.java, +    protected final Transport transport;, +    protected final ThreadPool threadPool;, +++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +    public static final String TRANSPORT_SERVICE_TYPE_KEY = "transport.service.type";, +        Class<? extends TransportService> transportService = settings.getAsClass(TRANSPORT_SERVICE_TYPE_KEY, TransportService.class, "org.elasticsearch.transport.", "TransportService");, +        if (!TransportService.class.equals(transportService)) {, +            bind(TransportService.class).to(transportService).asEagerSingleton();, +        } else {, +}, +++ b/src/main/java/org/elasticsearch/transport/TransportService.java, +    protected final Transport transport;, +    protected final ThreadPool threadPool;, +++ b/src/test/java/org/elasticsearch/test/TestCluster.java, +import org.elasticsearch.test.transport.MockTransportService;, +            builder.put(TransportModule.TRANSPORT_SERVICE_TYPE_KEY, MockTransportService.class.getName());, +        // clear all rules for mock transport services, +        for (NodeAndClient nodeAndClient : nodes.values()) {, +            TransportService transportService = nodeAndClient.node.injector().getInstance(TransportService.class);, +            if (transportService instanceof MockTransportService) {, +                ((MockTransportService) transportService).clearAllRules();, +            }, +        }, +++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +    public static final String TRANSPORT_SERVICE_TYPE_KEY = "transport.service.type";, +        Class<? extends TransportService> transportService = settings.getAsClass(TRANSPORT_SERVICE_TYPE_KEY, TransportService.class, "org.elasticsearch.transport.", "TransportService");, +        if (!TransportService.class.equals(transportService)) {, +            bind(TransportService.class).to(transportService).asEagerSingleton();, +        } else {, +}, +++ b/src/main/java/org/elasticsearch/transport/TransportService.java, +    protected final Transport transport;, +    protected final ThreadPool threadPool;, +++ b/src/test/java/org/elasticsearch/test/TestCluster.java, +import org.elasticsearch.test.transport.MockTransportService;, +            builder.put(TransportModule.TRANSPORT_SERVICE_TYPE_KEY, MockTransportService.class.getName());, +        // clear all rules for mock transport services, +        for (NodeAndClient nodeAndClient : nodes.values()) {, +            TransportService transportService = nodeAndClient.node.injector().getInstance(TransportService.class);, +            if (transportService instanceof MockTransportService) {, +                ((MockTransportService) transportService).clearAllRules();, +            }, +        }, +++ b/src/test/java/org/elasticsearch/test/transport/MockTransportService.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.transport;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.component.Lifecycle;, +import org.elasticsearch.common.component.LifecycleListener;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.BoundTransportAddress;, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.*;, +, +import java.io.IOException;, +import java.util.concurrent.ConcurrentMap;, +, +/**, + * A mock transport service that allows to simulate different network topology failures., + */, +public class MockTransportService extends TransportService {, +, +    @Inject]