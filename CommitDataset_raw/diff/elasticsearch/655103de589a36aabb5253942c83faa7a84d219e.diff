[+++ b/server/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java, +import org.elasticsearch.common.lease.Releasable;, +import java.util.concurrent.TimeUnit;, +        AtomicBoolean stopped = new AtomicBoolean();, +        List<Thread> threads = new ArrayList<>();, +        Runnable stopIndexing = () -> {, +            try {, +                stopped.set(true);, +                for (Thread thread : threads) {, +                    thread.join();, +                }, +            } catch (Exception e) {, +                throw new AssertionError(e);, +            }, +        };, +        try (ReplicationGroup shards = createGroup(between(0, 1));, +             Releasable ignored = stopIndexing::run) {, +            int numThreads = between(1, 3);, +            for (int i = 0; i < numThreads; i++) {, +                Thread thread = new Thread(() -> {, +                    while (stopped.get() == false) {, +                            int nextId = docId.incrementAndGet();, +                                String id = randomBoolean() ? Integer.toString(nextId) : null;, +                                String id = Integer.toString(frequently() ? nextId : between(0, nextId));, +                                String id = Integer.toString(between(0, nextId));, +                threads.add(thread);, +                thread.start();, +            assertBusy(() -> assertThat(docId.get(), greaterThanOrEqualTo(50)), 60, TimeUnit.SECONDS); // we flush quite often, +            assertBusy(() -> assertThat(docId.get(), greaterThanOrEqualTo(100)), 60, TimeUnit.SECONDS); // we flush quite often, +            stopIndexing.run();]