[+++ b/src/test/java/org/elasticsearch/shield/authc/activedirectory/ActiveDirectoryRealmTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.shield.authc.activedirectory;, +, +import com.unboundid.ldap.listener.InMemoryDirectoryServer;, +import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;, +import com.unboundid.ldap.sdk.Attribute;, +import com.unboundid.ldap.sdk.LDAPException;, +import com.unboundid.ldap.sdk.LDAPURL;, +import com.unboundid.ldap.sdk.schema.Schema;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.rest.RestController;, +import org.elasticsearch.shield.User;, +import org.elasticsearch.shield.authc.RealmConfig;, +import org.elasticsearch.shield.authc.ldap.support.LdapRoleMapper;, +import org.elasticsearch.shield.authc.support.CachingUsernamePasswordRealm;, +import org.elasticsearch.shield.authc.support.SecuredString;, +import org.elasticsearch.shield.authc.support.SecuredStringTests;, +import org.elasticsearch.shield.authc.support.UsernamePasswordToken;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.watcher.ResourceWatcherService;, +import org.junit.*;, +, +import java.io.File;, +import java.nio.file.Paths;, +, +import static org.elasticsearch.shield.authc.ldap.support.SessionFactory.HOSTNAME_VERIFICATION_SETTING;, +import static org.elasticsearch.shield.authc.ldap.support.SessionFactory.URLS_SETTING;, +import static org.hamcrest.Matchers.*;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.*;, +, +/**, + * Active Directory Realm tests that use the UnboundID In Memory Directory Server, + *, + * AD is not LDAPv3 compliant so a workaround is needed, + * AD realm binds with userPrincipalName but this is not a valid DN, so we have to add a second userPrincipalName to the, + * users in the ldif in the form of CN=user@domain.com or a set the sAMAccountName to CN=user when testing authentication, + * with the sAMAccountName field., + *, + * The username used to authenticate then has to be in the form of CN=user. Finally the username needs to be added as an, + * additional bind DN with a password in the test setup since it really is not a DN in the ldif file, + */, +public class ActiveDirectoryRealmTests extends ElasticsearchTestCase {, +, +    private static final String PASSWORD = "password";, +, +    private static InMemoryDirectoryServer directoryServer;, +, +    private ResourceWatcherService resourceWatcherService;, +    private ThreadPool threadPool;, +, +    @BeforeClass, +    public static void setupLdapServer() throws Exception {, +        InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=ad,dc=test,dc=elasticsearch,dc=com");, +        // Get the default schema and overlay with the AD changes, +        config.setSchema(Schema.mergeSchemas(Schema.getDefaultStandardSchema(), Schema.getSchema(new File(ActiveDirectoryRealmTests.class.getResource("ad-schema.ldif").toURI()))));, +, +        // Add the bind users here since AD is not LDAPv3 compliant, +        config.addAdditionalBindCredentials("CN=ironman@ad.test.elasticsearch.com", PASSWORD);, +        config.addAdditionalBindCredentials("CN=Thor@ad.test.elasticsearch.com", PASSWORD);, +, +        directoryServer = new InMemoryDirectoryServer(config);, +        directoryServer.add("dc=ad,dc=test,dc=elasticsearch,dc=com", new Attribute("dc", "UnboundID"), new Attribute("objectClass", "top", "domain", "extensibleObject"));, +        directoryServer.importFromLDIF(false, Paths.get(ActiveDirectoryRealmTests.class.getResource("ad.ldif").toURI()).toAbsolutePath().toString());, +        directoryServer.startListening();, +    }, +, +    @Before, +    public void startResourceWatcher() throws Exception {, +        threadPool = new ThreadPool("active directory realm tests");, +        resourceWatcherService = new ResourceWatcherService(ImmutableSettings.EMPTY, threadPool);, +    }, +, +    @After, +    public void stopResourceWatcher() throws InterruptedException {, +        resourceWatcherService.stop();, +        terminate(threadPool);, +    }, +, +    @AfterClass, +    public static void shutdownLdapServer() throws Exception {, +        directoryServer.shutDown(true);, +        directoryServer = null;, +    }, +, +    @Test, +    public void testAuthenticateUserPrincipleName() throws Exception {, +        Settings settings = settings();, +        RealmConfig config = new RealmConfig("testAuthenticateUserPrincipleName", settings);, +        ActiveDirectorySessionFactory sessionFactory = new ActiveDirectorySessionFactory(config, null);, +        LdapRoleMapper roleMapper = new LdapRoleMapper(ActiveDirectoryRealm.TYPE, config, resourceWatcherService, null);, +        ActiveDirectoryRealm realm = new ActiveDirectoryRealm(config, sessionFactory, roleMapper);]