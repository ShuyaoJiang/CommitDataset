[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +    public AllocationService getAllocationService() {, +        return this.allocationService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +    public AllocationService getAllocationService() {, +        return this.allocationService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    void setRoutingService(RoutingService routingService);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +    public AllocationService getAllocationService() {, +        return this.allocationService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    void setRoutingService(RoutingService routingService);, +++ b/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    private RoutingService routingService;, +    public void setRoutingService(RoutingService routingService) {, +        this.routingService = routingService;, +                        return ClusterState.builder(currentState).nodes(nodesBuilder).build();, +                        // we reroute not in the same cluster state update since in certain areas we rely on, +                        // the node to be in the cluster state (sampled from ClusterService#state) to be there, also, +                        // shard transitions need to better be handled in such cases, +                        master.routingService.reroute("post_node_add");, +                        RoutingAllocation.Result routingResult = master.routingService.getAllocationService().reroute(ClusterState.builder(updatedState).build());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +    public AllocationService getAllocationService() {, +        return this.allocationService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    void setRoutingService(RoutingService routingService);, +++ b/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    private RoutingService routingService;, +    public void setRoutingService(RoutingService routingService) {, +        this.routingService = routingService;, +                        return ClusterState.builder(currentState).nodes(nodesBuilder).build();, +                        // we reroute not in the same cluster state update since in certain areas we rely on, +                        // the node to be in the cluster state (sampled from ClusterService#state) to be there, also, +                        // shard transitions need to better be handled in such cases, +                        master.routingService.reroute("post_node_add");, +                        RoutingAllocation.Result routingResult = master.routingService.getAllocationService().reroute(ClusterState.builder(updatedState).build());, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    private RoutingService routingService;, +    public void setRoutingService(RoutingService routingService) {, +        this.routingService = routingService;, +                    RoutingAllocation.Result result = routingService.getAllocationService().reroute(currentState);, +                    RoutingAllocation.Result routingResult = routingService.getAllocationService().reroute(ClusterState.builder(currentState).build());, +                RoutingAllocation.Result routingResult = routingService.getAllocationService().reroute(ClusterState.builder(currentState).build());, +                private boolean nodeAdded = false;, +                            nodeAdded = true;, +                    if (nodeAdded) {, +                    RoutingAllocation.Result result = routingService.getAllocationService().reroute(currentState);, +                    if (nodeAdded) {, +                        // we reroute not in the same cluster state update since in certain areas we rely on, +                        // the node to be in the cluster state (sampled from ClusterService#state) to be there, also, +                        // shard transitions need to better be handled in such cases, +                        routingService.reroute("post_node_add");, +                    }, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +    public AllocationService getAllocationService() {, +        return this.allocationService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    void setRoutingService(RoutingService routingService);, +++ b/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    private RoutingService routingService;, +    public void setRoutingService(RoutingService routingService) {, +        this.routingService = routingService;, +                        return ClusterState.builder(currentState).nodes(nodesBuilder).build();, +                        // we reroute not in the same cluster state update since in certain areas we rely on, +                        // the node to be in the cluster state (sampled from ClusterService#state) to be there, also, +                        // shard transitions need to better be handled in such cases, +                        master.routingService.reroute("post_node_add");, +                        RoutingAllocation.Result routingResult = master.routingService.getAllocationService().reroute(ClusterState.builder(updatedState).build());, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.cluster.routing.RoutingService;, +    private RoutingService routingService;, +    public void setRoutingService(RoutingService routingService) {, +        this.routingService = routingService;, +                    RoutingAllocation.Result result = routingService.getAllocationService().reroute(currentState);, +                    RoutingAllocation.Result routingResult = routingService.getAllocationService().reroute(ClusterState.builder(currentState).build());, +                RoutingAllocation.Result routingResult = routingService.getAllocationService().reroute(ClusterState.builder(currentState).build());, +                private boolean nodeAdded = false;, +                            nodeAdded = true;, +                    if (nodeAdded) {, +                    RoutingAllocation.Result result = routingService.getAllocationService().reroute(currentState);]