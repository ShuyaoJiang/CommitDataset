[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +    /**, +     * Converts a list of indices or aliases wildcards, and special +/- signs, into their respective full matches. It, +     * won't convert only to indices, but also to aliases. For example, alias_* will expand to alias_1 and alias_2, not, +     * to the respective indices those aliases point to., +     */, +        if (aliasesOrIndices == null) {, +            return null;, +        }, +        // expand the aliases wildcard, +        indicesOrAliases = convertFromWildcards(indicesOrAliases, true, IgnoreIndices.MISSING);, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +    /**, +     * Converts a list of indices or aliases wildcards, and special +/- signs, into their respective full matches. It, +     * won't convert only to indices, but also to aliases. For example, alias_* will expand to alias_1 and alias_2, not, +     * to the respective indices those aliases point to., +     */, +        if (aliasesOrIndices == null) {, +            return null;, +        }, +        // expand the aliases wildcard, +        indicesOrAliases = convertFromWildcards(indicesOrAliases, true, IgnoreIndices.MISSING);, +, +++ b/src/test/java/org/elasticsearch/aliases/IndexAliasesTests.java, +import org.elasticsearch.AbstractSharedClusterTest;, +        logger.info("--> checking single filtering alias wildcard search");, +        searchResponse = client().prepareSearch("fo*").setQuery(QueryBuilders.matchAllQuery()).execute().actionGet();, +        assertHits(searchResponse.getHits(), "1");, +, +, +        logger.info("--> checking index and alias wildcard search");, +        searchResponse = client().prepareSearch("te*", "fo*").setQuery(QueryBuilders.matchAllQuery()).execute().actionGet();, +        assertHits(searchResponse.getHits(), "1", "2", "3", "4");]