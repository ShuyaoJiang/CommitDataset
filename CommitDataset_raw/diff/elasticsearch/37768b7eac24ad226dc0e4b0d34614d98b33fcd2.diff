[+++ b/buildSrc/build.gradle, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +++ /dev/null, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +++ /dev/null, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java, +import org.gradle.api.tasks.SourceSet;, +import org.gradle.api.tasks.SourceSetContainer;, +    @Input, +    public Set<String> getMainClassNamedLikeTests() {, +        SourceSetContainer javaSourceSets = Boilerplate.getJavaSourceSets(getProject());, +        if (javaSourceSets.findByName(SourceSet.MAIN_SOURCE_SET_NAME) == null) {, +            // some test projects don't have a main source set, +            return Collections.emptySet();, +        }, +        return javaSourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME), +            .getOutput().getClassesDirs().getAsFileTree(), +            .getFiles().stream(), +            .filter(file -> file.getName().endsWith(".class")), +            .map(File::getName), +            .map(name -> name.substring(0, name.length() - 6)), +            .filter(this::implementsNamingConvention), +            .collect(Collectors.toSet());, +    }, +, +                ),, +                checkNoneExists(, +                    "Classes matching the test naming convention should be in test not main",, +                    getMainClassNamedLikeTests(), +                ), +    private String checkNoneExists(String message, Set<? extends String> candidates) {, +        String problem = candidates.stream(), +            .map(each -> "  * " + each), +            .sorted(), +            .collect(Collectors.joining("\n"));, +        if (problem.isEmpty() == false) {, +            return message + ":\n" + problem;, +        } else {, +            return "";, +        }, +    }, +, +        return implementsNamingConvention(clazz.getName());, +    }, +, +    private boolean implementsNamingConvention(String className) {, +            .anyMatch(suffix -> className.endsWith(suffix))) {, +            getLogger().debug("{} is a test because it matches the naming convention", className);, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +++ /dev/null, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java, +import org.gradle.api.tasks.SourceSet;, +import org.gradle.api.tasks.SourceSetContainer;, +    @Input, +    public Set<String> getMainClassNamedLikeTests() {, +        SourceSetContainer javaSourceSets = Boilerplate.getJavaSourceSets(getProject());, +        if (javaSourceSets.findByName(SourceSet.MAIN_SOURCE_SET_NAME) == null) {, +            // some test projects don't have a main source set, +            return Collections.emptySet();, +        }, +        return javaSourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME), +            .getOutput().getClassesDirs().getAsFileTree(), +            .getFiles().stream(), +            .filter(file -> file.getName().endsWith(".class")), +            .map(File::getName), +            .map(name -> name.substring(0, name.length() - 6)), +            .filter(this::implementsNamingConvention), +            .collect(Collectors.toSet());, +    }, +, +                ),, +                checkNoneExists(, +                    "Classes matching the test naming convention should be in test not main",, +                    getMainClassNamedLikeTests(), +                ), +    private String checkNoneExists(String message, Set<? extends String> candidates) {, +        String problem = candidates.stream(), +            .map(each -> "  * " + each), +            .sorted(), +            .collect(Collectors.joining("\n"));, +        if (problem.isEmpty() == false) {, +            return message + ":\n" + problem;, +        } else {, +            return "";, +        }, +    }, +, +        return implementsNamingConvention(clazz.getName());, +    }]