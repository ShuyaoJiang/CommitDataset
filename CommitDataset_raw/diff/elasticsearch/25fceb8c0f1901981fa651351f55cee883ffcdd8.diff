[+++ b/build.gradle, +int prevMajor = Integer.parseInt(VersionProperties.elasticsearch.split('\\.')[0]) - 1, +String prevSnapshot = VersionProperties.elasticsearch.contains('alpha') ? '-SNAPSHOT' : '', +int prevMinor = 0, +  Matcher match = line =~ /\W+public static final Version V_${prevMajor}_(\d+)_.*/, +    prevMinor = Math.max(Integer.parseInt(match.group(1)), prevMinor), +    bwcVersion = "${prevMajor}.${prevMinor}.0${prevSnapshot}", +    "org.elasticsearch.distribution.zip:elasticsearch:${bwcVersion}": ':distribution:bwc-zip',, +++ b/build.gradle, +int prevMajor = Integer.parseInt(VersionProperties.elasticsearch.split('\\.')[0]) - 1, +String prevSnapshot = VersionProperties.elasticsearch.contains('alpha') ? '-SNAPSHOT' : '', +int prevMinor = 0, +  Matcher match = line =~ /\W+public static final Version V_${prevMajor}_(\d+)_.*/, +    prevMinor = Math.max(Integer.parseInt(match.group(1)), prevMinor), +    bwcVersion = "${prevMajor}.${prevMinor}.0${prevSnapshot}", +    "org.elasticsearch.distribution.zip:elasticsearch:${bwcVersion}": ':distribution:bwc-zip',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                String setup = setups[test.setup], +++ b/build.gradle, +int prevMajor = Integer.parseInt(VersionProperties.elasticsearch.split('\\.')[0]) - 1, +String prevSnapshot = VersionProperties.elasticsearch.contains('alpha') ? '-SNAPSHOT' : '', +int prevMinor = 0, +  Matcher match = line =~ /\W+public static final Version V_${prevMajor}_(\d+)_.*/, +    prevMinor = Math.max(Integer.parseInt(match.group(1)), prevMinor), +    bwcVersion = "${prevMajor}.${prevMinor}.0${prevSnapshot}", +    "org.elasticsearch.distribution.zip:elasticsearch:${bwcVersion}": ':distribution:bwc-zip',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                String setup = setups[test.setup], +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/build.gradle, +int prevMajor = Integer.parseInt(VersionProperties.elasticsearch.split('\\.')[0]) - 1, +String prevSnapshot = VersionProperties.elasticsearch.contains('alpha') ? '-SNAPSHOT' : '', +int prevMinor = 0, +  Matcher match = line =~ /\W+public static final Version V_${prevMajor}_(\d+)_.*/, +    prevMinor = Math.max(Integer.parseInt(match.group(1)), prevMinor), +    bwcVersion = "${prevMajor}.${prevMinor}.0${prevSnapshot}", +    "org.elasticsearch.distribution.zip:elasticsearch:${bwcVersion}": ':distribution:bwc-zip',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                String setup = setups[test.setup], +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                ScriptType.FILE,                                     // <1>, +++ b/build.gradle, +int prevMajor = Integer.parseInt(VersionProperties.elasticsearch.split('\\.')[0]) - 1, +String prevSnapshot = VersionProperties.elasticsearch.contains('alpha') ? '-SNAPSHOT' : '', +int prevMinor = 0, +  Matcher match = line =~ /\W+public static final Version V_${prevMajor}_(\d+)_.*/, +    prevMinor = Math.max(Integer.parseInt(match.group(1)), prevMinor), +    bwcVersion = "${prevMajor}.${prevMinor}.0${prevSnapshot}", +    "org.elasticsearch.distribution.zip:elasticsearch:${bwcVersion}": ':distribution:bwc-zip',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                String setup = setups[test.setup], +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                ScriptType.FILE,                                     // <1>, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +import java.util.ArrayList;, +import java.util.List;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownField;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownToken;, +, +    private static final ParseField SCROLL_ID = new ParseField("_scroll_id");, +    private static final ParseField TOOK = new ParseField("took");, +    private static final ParseField TIMED_OUT = new ParseField("timed_out");, +    private static final ParseField TERMINATED_EARLY = new ParseField("terminated_early");, +    private static final ParseField NUM_REDUCE_PHASES = new ParseField("num_reduce_phases");, +, +    private SearchResponseSections internalResponse;, +    public SearchResponse(SearchResponseSections internalResponse, String scrollId, int totalShards, int successfulShards,, +    @Nullable, +    public Map<String, ProfileShardResult> getProfileResults() {, +            builder.field(SCROLL_ID.getPreferredName(), scrollId);, +        builder.field(TOOK.getPreferredName(), tookInMillis);, +        builder.field(TIMED_OUT.getPreferredName(), isTimedOut());, +            builder.field(TERMINATED_EARLY.getPreferredName(), isTerminatedEarly());, +            builder.field(NUM_REDUCE_PHASES.getPreferredName(), getNumReducePhases());, +    public static SearchResponse fromXContent(XContentParser parser) throws IOException {, +        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation);, +        XContentParser.Token token;, +        String currentFieldName = null;, +        SearchHits hits = null;, +        Aggregations aggs = null;, +        Suggest suggest = null;, +        SearchProfileShardResults profile = null;, +        boolean timedOut = false;, +        Boolean terminatedEarly = null;, +        int numReducePhases = 1;, +        long tookInMillis = -1;, +        int successfulShards = -1;, +        int totalShards = -1;, +        String scrollId = null;, +        List<ShardSearchFailure> failures = new ArrayList<>();, +        while((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {]