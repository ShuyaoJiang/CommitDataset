[+++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        return setting.get(this.lastSettingsApplied, settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        return setting.get(this.lastSettingsApplied, settings);, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexModule;, +, +    public void testGetSetting() {, +        IndexScopeSettings settings = new IndexScopeSettings(, +           Settings.EMPTY,, +            IndexScopeSettings.BUILT_IN_INDEX_SETTINGS);, +        IndexScopeSettings copy = settings.copy(Settings.builder().put("index.store.type", "boom").build(), newIndexMeta("foo", Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 3).build()));, +        assertEquals(3, copy.get(IndexMetaData.INDEX_NUMBER_OF_REPLICAS_SETTING).intValue());, +        assertEquals(1, copy.get(IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING).intValue());, +        assertEquals("boom", copy.get(IndexModule.INDEX_STORE_TYPE_SETTING)); // test fallback to node settings, +    }, +, +, +    public static IndexMetaData newIndexMeta(String name, Settings indexSettings) {, +        Settings build = Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT), +            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +            .put(indexSettings), +            .build();, +        IndexMetaData metaData = IndexMetaData.builder(name).settings(build).build();, +        return metaData;, +    }, +]