[+++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +                            return new RecoveryResponse(in);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +                            return new RecoveryResponse(in);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryResponse.java, +final class RecoveryResponse extends TransportResponse {, +    final List<String> phase1FileNames;, +    final List<Long> phase1FileSizes;, +    final List<String> phase1ExistingFileNames;, +    final List<Long> phase1ExistingFileSizes;, +    final long phase1TotalSize;, +    final long phase1ExistingTotalSize;, +    final long phase1Time;, +    final long phase1ThrottlingWaitTime;, +    final long startTime;, +    final int phase2Operations;, +    final long phase2Time;, +    RecoveryResponse(List<String> phase1FileNames, List<Long> phase1FileSizes, List<String> phase1ExistingFileNames,, +                     List<Long> phase1ExistingFileSizes, long phase1TotalSize, long phase1ExistingTotalSize,, +                     long phase1Time, long phase1ThrottlingWaitTime, long startTime, int phase2Operations, long phase2Time) {, +        this.phase1FileNames = phase1FileNames;, +        this.phase1FileSizes = phase1FileSizes;, +        this.phase1ExistingFileNames = phase1ExistingFileNames;, +        this.phase1ExistingFileSizes = phase1ExistingFileSizes;, +        this.phase1TotalSize = phase1TotalSize;, +        this.phase1ExistingTotalSize = phase1ExistingTotalSize;, +        this.phase1Time = phase1Time;, +        this.phase1ThrottlingWaitTime = phase1ThrottlingWaitTime;, +        this.startTime = startTime;, +        this.phase2Operations = phase2Operations;, +        this.phase2Time = phase2Time;, +    RecoveryResponse(StreamInput in) throws IOException {, +        super(in);, +        phase1FileNames = in.readList(StreamInput::readString);, +        phase1FileSizes = in.readList(StreamInput::readVLong);, +        phase1ExistingFileNames = in.readList(StreamInput::readString);, +        phase1ExistingFileSizes = in.readList(StreamInput::readVLong);, +        out.writeStringList(phase1FileNames);, +        out.writeCollection(phase1FileSizes, StreamOutput::writeVLong);, +        out.writeStringList(phase1ExistingFileNames);, +        out.writeCollection(phase1ExistingFileSizes, StreamOutput::writeVLong);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +                            return new RecoveryResponse(in);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryResponse.java, +final class RecoveryResponse extends TransportResponse {, +    final List<String> phase1FileNames;, +    final List<Long> phase1FileSizes;, +    final List<String> phase1ExistingFileNames;, +    final List<Long> phase1ExistingFileSizes;, +    final long phase1TotalSize;, +    final long phase1ExistingTotalSize;, +    final long phase1Time;, +    final long phase1ThrottlingWaitTime;, +    final long startTime;, +    final int phase2Operations;, +    final long phase2Time;, +    RecoveryResponse(List<String> phase1FileNames, List<Long> phase1FileSizes, List<String> phase1ExistingFileNames,, +                     List<Long> phase1ExistingFileSizes, long phase1TotalSize, long phase1ExistingTotalSize,, +                     long phase1Time, long phase1ThrottlingWaitTime, long startTime, int phase2Operations, long phase2Time) {, +        this.phase1FileNames = phase1FileNames;, +        this.phase1FileSizes = phase1FileSizes;, +        this.phase1ExistingFileNames = phase1ExistingFileNames;, +        this.phase1ExistingFileSizes = phase1ExistingFileSizes;, +        this.phase1TotalSize = phase1TotalSize;, +        this.phase1ExistingTotalSize = phase1ExistingTotalSize;, +        this.phase1Time = phase1Time;, +        this.phase1ThrottlingWaitTime = phase1ThrottlingWaitTime;, +        this.startTime = startTime;, +        this.phase2Operations = phase2Operations;, +        this.phase2Time = phase2Time;, +    RecoveryResponse(StreamInput in) throws IOException {, +        super(in);, +        phase1FileNames = in.readList(StreamInput::readString);, +        phase1FileSizes = in.readList(StreamInput::readVLong);, +        phase1ExistingFileNames = in.readList(StreamInput::readString);, +        phase1ExistingFileSizes = in.readList(StreamInput::readVLong);, +        out.writeStringList(phase1FileNames);, +        out.writeCollection(phase1FileSizes, StreamOutput::writeVLong);, +        out.writeStringList(phase1ExistingFileNames);, +        out.writeCollection(phase1ExistingFileSizes, StreamOutput::writeVLong);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.Collections;, +            final SendFileResult sendFileResult;, +                sendFileResult = SendFileResult.EMPTY;, +                    sendFileResult = phase1(phase1Snapshot.getIndexCommit(), () -> estimateNumOps);, +            final TimeValue prepareEngineTime;, +                prepareEngineTime = prepareTargetForTranslog(isSequenceNumberBasedRecovery == false,, +            final SendSnapshotResult sendSnapshotResult;, +                sendSnapshotResult = phase2(startingSeqNo, requiredSeqNoRangeStart, endingSeqNo, snapshot,, +            finalizeRecovery(sendSnapshotResult.targetLocalCheckpoint);, +            final long phase1ThrottlingWaitTime = 0L; // TODO: return the actual throttle time, +            return new RecoveryResponse(sendFileResult.phase1FileNames, sendFileResult.phase1FileSizes,, +                sendFileResult.phase1ExistingFileNames, sendFileResult.phase1ExistingFileSizes, sendFileResult.totalSize,, +                sendFileResult.existingTotalSize, sendFileResult.took.millis(), phase1ThrottlingWaitTime, prepareEngineTime.millis(),, +                sendSnapshotResult.totalOperations, sendSnapshotResult.tookTime.millis());, +    static final class SendFileResult {, +        final List<String> phase1FileNames;, +        final List<Long> phase1FileSizes;, +        final long totalSize;]