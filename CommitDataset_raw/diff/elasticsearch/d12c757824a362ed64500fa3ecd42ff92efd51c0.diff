[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            firstFileToRecover = fileToRecover.name() + ".part0";, +                String partName = fileToRecover.name() + ".part" + part;, +                    return;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            firstFileToRecover = fileToRecover.name() + ".part0";, +                String partName = fileToRecover.name() + ".part" + part;, +                    return;, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/gateway/AbstractSimpleIndexGatewayTests.java, +import org.elasticsearch.common.io.FileSystemUtils;, +import org.elasticsearch.env.Environment;, +        // get the environment, so we can clear the work dir when needed, +        Environment environment = ((InternalNode) node("server1")).injector().getInstance(Environment.class);, +, +        logger.info("Starting the server, should recover from the gateway (both index and translog) and reuse work dir");, +        logger.info("Closing the server");, +        closeNode("server1");, +        logger.info("Clearing cluster work dir, so there will be a full recovery from the gateway");, +        FileSystemUtils.deleteRecursively(environment.workWithClusterFile());, +        logger.info("Starting the server, should recover from the gateway (both index and translog) without reusing work dir");, +        startNode("server1");, +, +        logger.info("Running Cluster Health (wait for the shards to startup)");, +        clusterHealth = client("server1").admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        logger.info("Done Cluster Health, status " + clusterHealth.status());, +        assertThat(clusterHealth.timedOut(), equalTo(false));, +        assertThat(clusterHealth.status(), equalTo(ClusterHealthStatus.YELLOW));, +, +        logger.info("Getting #1, should not exists");, +        getResponse = client("server1").get(getRequest("test").type("type1").id("1")).actionGet();, +        assertThat(getResponse.exists(), equalTo(false));, +        logger.info("Getting #2 (not from the translog, but from the index)");, +        getResponse = client("server1").get(getRequest("test").type("type1").id("2")).actionGet();, +        assertThat(getResponse.sourceAsString(), equalTo(source("2", "test")));, +        logger.info("Getting #3 (from the translog)");, +        getResponse = client("server1").get(getRequest("test").type("type1").id("3")).actionGet();, +        assertThat(getResponse.sourceAsString(), equalTo(source("3", "test")));, +, +]