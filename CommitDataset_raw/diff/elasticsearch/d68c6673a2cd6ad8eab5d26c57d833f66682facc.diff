[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configurePrecommit(project), +, +    private static configurePrecommit(Project project) {, +        Task precommit = PrecommitTasks.create(project, true), +        project.check.dependsOn(precommit), +        project.test.mustRunAfter(precommit), +        project.dependencyLicenses.dependencies = project.configurations.runtime - project.configurations.provided, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configurePrecommit(project), +, +    private static configurePrecommit(Project project) {, +        Task precommit = PrecommitTasks.create(project, true), +        project.check.dependsOn(precommit), +        project.test.mustRunAfter(precommit), +        project.dependencyLicenses.dependencies = project.configurations.runtime - project.configurations.provided, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +import org.gradle.api.*, +/**, + * A task to check licenses for dependencies., + *, + * There are two parts to the check:, + * <ul>, + *   <li>LICENSE and NOTICE files</li>, + *   <li>SHA checksums for each dependency jar</li>, + * </ul>, + *, + * The directory to find the license and sha files in defaults to the dir @{code licenses}, + * in the project directory for this task. You can override this directory:, + * <pre>, + *   dependencyLicenses {, + *     licensesDir = project.file('mybetterlicensedir'), + *   }, + * </pre>, + *, + * The jar files to check default to the dependencies from the default configuration. You, + * can override this, for example, to only check compile dependencies:, + * <pre>, + *   dependencyLicenses {, + *     dependencies = project.configurations.compile, + *   }, + * </pre>, + *, + * Every jar must have a {@code .sha1} file in the licenses dir. These can be managed, + * automatically using the {@code updateShas} helper task that is created along, + * with this task. It will add {@code .sha1} files for new jars that are in dependencies, + * and remove old {@code .sha1} files that are no longer needed., + *, + * Every jar must also have a LICENSE and NOTICE file. However, multiple jars can share, + * LICENSE and NOTICE files by mapping a pattern to the same name., + * <pre>, + *   dependencyLicenses {, + *     mapping from: &#47;lucene-.*&#47;, to: 'lucene', + *   }, + * </pre>, + */, +public class DependencyLicensesTask extends DefaultTask {, +    private static final String SHA_EXTENSION = '.sha1', +    // TODO: we should be able to default this to eg compile deps, but we need to move the licenses, +    // check from distribution to core (ie this should only be run on java projects), +    /** A collection of jar files that should be checked. */, +    public FileCollection dependencies, +    /** The directory to find the license and sha files in. */, +    public File licensesDir = new File(project.projectDir, 'licenses'), +    /** A map of patterns to prefix, used to find the LICENSE and NOTICE file. */, +    private LinkedHashMap<String, String> mappings = new LinkedHashMap<>(), +    /**, +     * Add a mapping from a regex pattern for the jar name, to a prefix to find, +     * the LICENSE and NOTICE file for that jar., +     */, +    public void mapping(Map<String, String> props) {, +        String from = props.remove('from'), +        String to = props.remove('to'), +        if (props.isEmpty() == false) {, +            throw new InvalidUserDataException("Unknown properties for mapping on dependencyLicenses: ${props.keySet()}"), +        }, +    public void checkDependencies() {, +        if (licensesDir.exists() && dependencies.isEmpty()) {, +            throw new GradleException("Licenses dir ${licensesDir} exists, but there are no dependencies"), +        }, +    private void checkSha(File jar, String jarName, Set<File> shaFiles) {, +    private void checkFile(String name, String jarName, Map<String, Integer> counters, String type) {, +    /** A helper task to update the sha files in the license dir. */, +    public static class UpdateShasTask extends DefaultTask {, +        private DependencyLicensesTask parentTask, +, +        public void updateShas() {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configurePrecommit(project), +, +    private static configurePrecommit(Project project) {, +        Task precommit = PrecommitTasks.create(project, true), +        project.check.dependsOn(precommit), +        project.test.mustRunAfter(precommit), +        project.dependencyLicenses.dependencies = project.configurations.runtime - project.configurations.provided, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +import org.gradle.api.*]