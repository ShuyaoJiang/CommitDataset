[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EAssignment.java, +, +            if (rhs.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Right-hand side cannot be a [void] type for assignment."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EAssignment.java, +, +            if (rhs.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Right-hand side cannot be a [void] type for assignment."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PSubDefCall.java, +import java.util.Collections;, +            if (expression.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Argument(s) cannot be of [void] type when calling method [" + name + "]."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EAssignment.java, +, +            if (rhs.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Right-hand side cannot be a [void] type for assignment."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PSubDefCall.java, +import java.util.Collections;, +            if (expression.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Argument(s) cannot be of [void] type when calling method [" + name + "]."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PSubDefField.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EAssignment.java, +, +            if (rhs.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Right-hand side cannot be a [void] type for assignment."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PSubDefCall.java, +import java.util.Collections;, +            if (expression.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Argument(s) cannot be of [void] type when calling method [" + name + "]."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PSubDefField.java, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/AdditionTests.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EAssignment.java, +, +            if (rhs.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Right-hand side cannot be a [void] type for assignment."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PSubDefCall.java, +import java.util.Collections;, +            if (expression.actual.clazz == void.class) {, +                throw createError(new IllegalArgumentException("Argument(s) cannot be of [void] type when calling method [" + name + "]."));, +            }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PSubDefField.java, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/AdditionTests.java, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/CastTests.java, +, +    public void testIllegalVoidCasts() {, +        expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("def map = ['a': 1,'b': 2,'c': 3]; map.c = Collections.sort(new ArrayList(map.keySet()));");, +        });, +        expectScriptThrows(IllegalArgumentException.class, () -> {, +            exec("Map map = ['a': 1,'b': 2,'c': 3]; def x = new HashMap(); x.put(1, map.clear());");, +        });, +    }]