[+++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpRequestSizeLimitIT.java, + * This test checks that in-flight requests are limited on HTTP level and that requests that are excluded from limiting can pass., + * As the same setting is also used to limit in-flight requests on transport level, we avoid transport messages by forcing, + * a single node "cluster"., +@ClusterScope(scope = Scope.TEST, supportsDedicatedMasters = false, numClientNodes = 0, numDataNodes = 1), +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpRequestSizeLimitIT.java, + * This test checks that in-flight requests are limited on HTTP level and that requests that are excluded from limiting can pass., + * As the same setting is also used to limit in-flight requests on transport level, we avoid transport messages by forcing, + * a single node "cluster"., +@ClusterScope(scope = Scope.TEST, supportsDedicatedMasters = false, numClientNodes = 0, numDataNodes = 1), +++ b/docs/java-api/client.asciidoc, +TransportClient client = TransportClient.builder().build(), +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpRequestSizeLimitIT.java, + * This test checks that in-flight requests are limited on HTTP level and that requests that are excluded from limiting can pass., + * As the same setting is also used to limit in-flight requests on transport level, we avoid transport messages by forcing, + * a single node "cluster"., +@ClusterScope(scope = Scope.TEST, supportsDedicatedMasters = false, numClientNodes = 0, numDataNodes = 1), +++ b/docs/java-api/client.asciidoc, +TransportClient client = TransportClient.builder().build(), +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        samMethodType = impl.getMethodType().dropParameterTypes(0, captures.length);, +        samMethodType = impl.type().dropParameterTypes(0, captures.length);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpRequestSizeLimitIT.java, + * This test checks that in-flight requests are limited on HTTP level and that requests that are excluded from limiting can pass., + * As the same setting is also used to limit in-flight requests on transport level, we avoid transport messages by forcing, + * a single node "cluster"., +@ClusterScope(scope = Scope.TEST, supportsDedicatedMasters = false, numClientNodes = 0, numDataNodes = 1), +++ b/docs/java-api/client.asciidoc, +TransportClient client = TransportClient.builder().build(), +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        samMethodType = impl.getMethodType().dropParameterTypes(0, captures.length);, +        samMethodType = impl.type().dropParameterTypes(0, captures.length);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java, +import org.elasticsearch.painless.node.ELambda;, +                paramTypes.add(null);, +        return new ELambda((FunctionReserved)reserved.pop(), location(ctx), paramTypes, paramNames, statements);, +            String name = "lambda$" + synthetic.size();, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpRequestSizeLimitIT.java, + * This test checks that in-flight requests are limited on HTTP level and that requests that are excluded from limiting can pass., + * As the same setting is also used to limit in-flight requests on transport level, we avoid transport messages by forcing, + * a single node "cluster"., +@ClusterScope(scope = Scope.TEST, supportsDedicatedMasters = false, numClientNodes = 0, numDataNodes = 1), +++ b/docs/java-api/client.asciidoc, +TransportClient client = TransportClient.builder().build(), +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        samMethodType = impl.getMethodType().dropParameterTypes(0, captures.length);, +        samMethodType = impl.type().dropParameterTypes(0, captures.length);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java, +import org.elasticsearch.painless.node.ELambda;, +                paramTypes.add(null);, +        return new ELambda((FunctionReserved)reserved.pop(), location(ctx), paramTypes, paramNames, statements);, +            String name = "lambda$" + synthetic.size();, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/BasicStatementTests.java, +    public void testLambdas() {, +        Exception exception = expectThrows(Exception.class, () -> {, +            exec("Math.max(2, p -> {p.doSomething();})");, +        });, +        assertTrue(exception.getCause().getMessage().contains("Lambda functions are not supported."));, +    }, +, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpRequestSizeLimitIT.java, + * This test checks that in-flight requests are limited on HTTP level and that requests that are excluded from limiting can pass., + * As the same setting is also used to limit in-flight requests on transport level, we avoid transport messages by forcing, + * a single node "cluster"., +@ClusterScope(scope = Scope.TEST, supportsDedicatedMasters = false, numClientNodes = 0, numDataNodes = 1), +++ b/docs/java-api/client.asciidoc, +TransportClient client = TransportClient.builder().build(), +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        samMethodType = impl.getMethodType().dropParameterTypes(0, captures.length);, +        samMethodType = impl.type().dropParameterTypes(0, captures.length);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java, +import org.elasticsearch.painless.node.ELambda;, +                paramTypes.add(null);, +        return new ELambda((FunctionReserved)reserved.pop(), location(ctx), paramTypes, paramNames, statements);, +            String name = "lambda$" + synthetic.size();, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/BasicStatementTests.java, +    public void testLambdas() {, +        Exception exception = expectThrows(Exception.class, () -> {, +            exec("Math.max(2, p -> {p.doSomething();})");, +        });, +        assertTrue(exception.getCause().getMessage().contains("Lambda functions are not supported."));, +    }, +, +++ /dev/null]