[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JNANatives.trySetMaxNumberOfThreads();, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JNANatives.trySetMaxNumberOfThreads();, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        if (Constants.LINUX) {, +            checks.add(new MaxNumberOfThreadsCheck());, +        }, +    static class MaxNumberOfThreadsCheck implements Check {, +, +        private final long maxNumberOfThreadsThreshold = 1 << 15;, +, +        @Override, +        public boolean check() {, +            return getMaxNumberOfThreads() != -1 && getMaxNumberOfThreads() < maxNumberOfThreadsThreshold;, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                Locale.ROOT,, +                "max number of threads [%d] for user [%s] likely too low, increase to at least [%d]",, +                getMaxNumberOfThreads(),, +                BootstrapInfo.getSystemProperties().get("user.name"),, +                maxNumberOfThreadsThreshold);, +        }, +, +        // visible for testing, +        long getMaxNumberOfThreads() {, +            return JNANatives.MAX_NUMBER_OF_THREADS;, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JNANatives.trySetMaxNumberOfThreads();, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        if (Constants.LINUX) {, +            checks.add(new MaxNumberOfThreadsCheck());, +        }, +    static class MaxNumberOfThreadsCheck implements Check {, +, +        private final long maxNumberOfThreadsThreshold = 1 << 15;, +, +        @Override, +        public boolean check() {, +            return getMaxNumberOfThreads() != -1 && getMaxNumberOfThreads() < maxNumberOfThreadsThreshold;, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                Locale.ROOT,, +                "max number of threads [%d] for user [%s] likely too low, increase to at least [%d]",, +                getMaxNumberOfThreads(),, +                BootstrapInfo.getSystemProperties().get("user.name"),, +                maxNumberOfThreadsThreshold);, +        }, +, +        // visible for testing, +        long getMaxNumberOfThreads() {, +            return JNANatives.MAX_NUMBER_OF_THREADS;, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +    // set to the maximum number of threads that can be created for, +    // the user ID that owns the running Elasticsearch process, +    static long MAX_NUMBER_OF_THREADS = -1;, +    static void trySetMaxNumberOfThreads() {, +        if (Constants.LINUX) {, +            // this is only valid on Linux and the value *is* different on OS X, +            // see /usr/include/sys/resource.h on OS X, +            // on Linux the resource RLIMIT_NPROC means *the number of threads*, +            // this is in opposition to BSD-derived OSes, +            final int rlimit_nproc = 6;, +, +            final JNACLibrary.Rlimit rlimit = new JNACLibrary.Rlimit();, +            if (JNACLibrary.getrlimit(rlimit_nproc, rlimit) == 0) {, +                MAX_NUMBER_OF_THREADS = rlimit.rlim_cur.longValue();, +            } else {, +                logger.warn("unable to retrieve max number of threads [" + JNACLibrary.strerror(Native.getLastError()) + "]");, +            }, +        }, +    }, +, +            return Long.toUnsignedString(value);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JNANatives.trySetMaxNumberOfThreads();, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        if (Constants.LINUX) {, +            checks.add(new MaxNumberOfThreadsCheck());, +        }, +    static class MaxNumberOfThreadsCheck implements Check {, +]