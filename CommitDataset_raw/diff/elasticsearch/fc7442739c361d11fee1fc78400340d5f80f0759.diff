[+++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +import java.util.stream.Collectors;, +        final List<String> errors =, +                checks.stream(), +                        .filter(BootstrapCheck.Check::check), +                        .map(BootstrapCheck.Check::errorMessage), +                        .collect(Collectors.toList());, +, +        if (!errors.isEmpty()) {, +            final List<String> messages = new ArrayList<>(1 + errors.size());, +            messages.add("bootstrap checks failed");, +            messages.addAll(errors);, +                final RuntimeException re = new RuntimeException(String.join("\n", messages));, +                errors.stream().map(IllegalStateException::new).forEach(re::addSuppressed);, +                throw re;, +                messages.forEach(message -> logger.warn(message));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +import java.util.stream.Collectors;, +        final List<String> errors =, +                checks.stream(), +                        .filter(BootstrapCheck.Check::check), +                        .map(BootstrapCheck.Check::errorMessage), +                        .collect(Collectors.toList());, +, +        if (!errors.isEmpty()) {, +            final List<String> messages = new ArrayList<>(1 + errors.size());, +            messages.add("bootstrap checks failed");, +            messages.addAll(errors);, +                final RuntimeException re = new RuntimeException(String.join("\n", messages));, +                errors.stream().map(IllegalStateException::new).forEach(re::addSuppressed);, +                throw re;, +                messages.forEach(message -> logger.warn(message));, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapCheckTests.java, +import java.util.Arrays;, +import static org.hamcrest.CoreMatchers.allOf;, +import static org.hamcrest.CoreMatchers.instanceOf;, +import static org.hamcrest.Matchers.hasToString;, +    public void testExceptionAggregation() {, +        final List<BootstrapCheck.Check> checks = Arrays.asList(, +                new BootstrapCheck.Check() {, +                    @Override, +                    public boolean check() {, +                        return true;, +                    }, +, +                    @Override, +                    public String errorMessage() {, +                        return "first";, +                    }, +                },, +                new BootstrapCheck.Check() {, +                    @Override, +                    public boolean check() {, +                        return true;, +                    }, +, +                    @Override, +                    public String errorMessage() {, +                        return "second";, +                    }, +                }, +        );, +        final RuntimeException e =, +                expectThrows(RuntimeException.class, () -> BootstrapCheck.check(true, checks, "testExceptionAggregation"));, +        assertThat(e, hasToString(allOf(containsString("bootstrap checks failed"), containsString("first"), containsString("second"))));, +        final Throwable[] suppressed = e.getSuppressed();, +        assertThat(suppressed.length, equalTo(2));, +        assertThat(suppressed[0], instanceOf(IllegalStateException.class));, +        assertThat(suppressed[0], hasToString(containsString("first")));, +        assertThat(suppressed[1], instanceOf(IllegalStateException.class));, +        assertThat(suppressed[1], hasToString(containsString("second")));, +    }, +]