[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.concurrent.ConcurrentHashMap;, +            try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId(), request)) {, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId, request);, +, +    static ConcurrentMap<IndexShardReference, String> openShardReferences;, +, +    static boolean setupShardReferenceAssertions() {, +        openShardReferences = new ConcurrentHashMap<>();, +        return true;, +    }, +, +    static boolean addShardReference(IndexShardReference ref, String desc) {, +        String prev = openShardReferences.put(ref, desc);, +        if (prev != null) {, +            throw new AssertionError("shard ref " + ref + " is added twice. current [" + desc + "] prev [" + prev + "]");, +        }, +        return true;, +    }, +, +    static boolean removeShardReference(IndexShardReference ref) {, +        assert openShardReferences.remove(ref) != null : "failed to find ref [" + ref + "]";, +        return true;, +    }, +, +    static {, +        assert setupShardReferenceAssertions();, +    }, +, +    static public void assertAllShardReferencesAreCleaned() {, +        if (openShardReferences == null || openShardReferences.isEmpty()) {, +            return;, +        }, +        StringBuilder sb = new StringBuilder();, +        for (String desc : openShardReferences.values()) {, +            sb.append(desc).append("\n");, +        }, +        assert sb.length() == 0 : "Found unclosed shard references:\n" + sb;, +    }, +, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId, Request request) {, +        IndexShardReference ref = new IndexShardReferenceImpl(indexShard, true);, +        assert addShardReference(ref, "primary: " + request.toString());, +        return ref;, +    protected IndexShardReference getIndexShardReferenceOnReplica(ShardId shardId, ReplicaRequest request) {, +        IndexShardReference ref = new IndexShardReferenceImpl(indexShard, false);, +        assert addShardReference(ref, "replica: " + request.toString());, +        return ref;, +            assert removeShardReference(this);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.concurrent.ConcurrentHashMap;, +            try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId(), request)) {, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId, request);, +, +    static ConcurrentMap<IndexShardReference, String> openShardReferences;, +, +    static boolean setupShardReferenceAssertions() {, +        openShardReferences = new ConcurrentHashMap<>();, +        return true;, +    }, +, +    static boolean addShardReference(IndexShardReference ref, String desc) {, +        String prev = openShardReferences.put(ref, desc);, +        if (prev != null) {, +            throw new AssertionError("shard ref " + ref + " is added twice. current [" + desc + "] prev [" + prev + "]");, +        }, +        return true;, +    }, +, +    static boolean removeShardReference(IndexShardReference ref) {, +        assert openShardReferences.remove(ref) != null : "failed to find ref [" + ref + "]";, +        return true;, +    }, +, +    static {, +        assert setupShardReferenceAssertions();, +    }, +, +    static public void assertAllShardReferencesAreCleaned() {, +        if (openShardReferences == null || openShardReferences.isEmpty()) {, +            return;, +        }, +        StringBuilder sb = new StringBuilder();, +        for (String desc : openShardReferences.values()) {, +            sb.append(desc).append("\n");, +        }, +        assert sb.length() == 0 : "Found unclosed shard references:\n" + sb;, +    }, +, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId, Request request) {, +        IndexShardReference ref = new IndexShardReferenceImpl(indexShard, true);, +        assert addShardReference(ref, "primary: " + request.toString());, +        return ref;, +    protected IndexShardReference getIndexShardReferenceOnReplica(ShardId shardId, ReplicaRequest request) {, +        IndexShardReference ref = new IndexShardReferenceImpl(indexShard, false);, +        assert addShardReference(ref, "replica: " + request.toString());, +        return ref;, +            assert removeShardReference(this);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +        protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId, Request request) {]