[+++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.threadpool.ThreadPool;, +        this.workerCount = componentSettings.getAsInt("worker_count", ThreadPool.boundedNumberOfProcessors() * 2);, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.threadpool.ThreadPool;, +        this.workerCount = componentSettings.getAsInt("worker_count", ThreadPool.boundedNumberOfProcessors() * 2);, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        int availableProcessors = boundedNumberOfProcessors();, +            int defaultSize = defaultSettings.getAsInt("size", boundedNumberOfProcessors() * 5);, +            int defaultSize = defaultSettings.getAsInt("size", boundedNumberOfProcessors() * 5);, +            int defaultSize = defaultSettings.getAsInt("size", boundedNumberOfProcessors() * 5);, +    /**, +     * Returns the number of processors available but at most <tt>24</tt>., +     */, +    public static int boundedNumberOfProcessors() {, +        /* This relates to issues where machines with large number of cores, +         * ie. >= 48 create too many threads and run into OOM see #3478 , +         * We just use an 24 core upper-bound here to not stress the system, +         * too much with too many created threads */, +        return Math.min(24, Runtime.getRuntime().availableProcessors());, +    }, +, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.threadpool.ThreadPool;, +        this.workerCount = componentSettings.getAsInt("worker_count", ThreadPool.boundedNumberOfProcessors() * 2);, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        int availableProcessors = boundedNumberOfProcessors();, +            int defaultSize = defaultSettings.getAsInt("size", boundedNumberOfProcessors() * 5);, +            int defaultSize = defaultSettings.getAsInt("size", boundedNumberOfProcessors() * 5);, +            int defaultSize = defaultSettings.getAsInt("size", boundedNumberOfProcessors() * 5);, +    /**, +     * Returns the number of processors available but at most <tt>24</tt>., +     */, +    public static int boundedNumberOfProcessors() {, +        /* This relates to issues where machines with large number of cores, +         * ie. >= 48 create too many threads and run into OOM see #3478 , +         * We just use an 24 core upper-bound here to not stress the system, +         * too much with too many created threads */, +        return Math.min(24, Runtime.getRuntime().availableProcessors());, +    }, +, +++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +        this.workerCount = componentSettings.getAsInt("worker_count", ThreadPool.boundedNumberOfProcessors() * 2);]