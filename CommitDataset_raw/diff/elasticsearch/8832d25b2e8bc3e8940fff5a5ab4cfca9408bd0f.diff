[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +                if (Integer.valueOf(0).equals((limit.limit().fold()))) {, +            Holder<LocalRelation> optimizedPlan = new Holder<>();, +            plan.forEachDown(p -> {, +                    optimizedPlan.set(new LocalRelation(p.source(), new SingletonExecutable(p.output(), values.toArray())));, +            }, Project.class);, +, +            if (optimizedPlan.get() != null) {, +                return optimizedPlan.get();, +, +            plan.forEachDown(a -> {, +                    optimizedPlan.set(new LocalRelation(a.source(), new SingletonExecutable(a.output(), values.toArray())));, +            }, Aggregate.class);, +, +            if (optimizedPlan.get() != null) {, +                return optimizedPlan.get();, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +                if (Integer.valueOf(0).equals((limit.limit().fold()))) {, +            Holder<LocalRelation> optimizedPlan = new Holder<>();, +            plan.forEachDown(p -> {, +                    optimizedPlan.set(new LocalRelation(p.source(), new SingletonExecutable(p.output(), values.toArray())));, +            }, Project.class);, +, +            if (optimizedPlan.get() != null) {, +                return optimizedPlan.get();, +, +            plan.forEachDown(a -> {, +                    optimizedPlan.set(new LocalRelation(a.source(), new SingletonExecutable(a.output(), values.toArray())));, +            }, Aggregate.class);, +, +            if (optimizedPlan.get() != null) {, +                return optimizedPlan.get();, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/optimizer/OptimizerTests.java, +        assertEquals(min2, order.get(1).child());, +        assertEquals(max2, order.get(1).child());, +        assertEquals(firstField, groupings.get(0));, +        assertEquals(secondField, groupings.get(1));, +        assertEquals(firstAlias, groupings.get(0));, +        assertEquals(secondAlias, groupings.get(1));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +                if (Integer.valueOf(0).equals((limit.limit().fold()))) {, +            Holder<LocalRelation> optimizedPlan = new Holder<>();, +            plan.forEachDown(p -> {, +                    optimizedPlan.set(new LocalRelation(p.source(), new SingletonExecutable(p.output(), values.toArray())));, +            }, Project.class);, +, +            if (optimizedPlan.get() != null) {, +                return optimizedPlan.get();, +, +            plan.forEachDown(a -> {, +                    optimizedPlan.set(new LocalRelation(a.source(), new SingletonExecutable(a.output(), values.toArray())));, +            }, Aggregate.class);, +, +            if (optimizedPlan.get() != null) {, +                return optimizedPlan.get();, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/optimizer/OptimizerTests.java, +        assertEquals(min2, order.get(1).child());, +        assertEquals(max2, order.get(1).child());, +        assertEquals(firstField, groupings.get(0));, +        assertEquals(secondField, groupings.get(1));, +        assertEquals(firstAlias, groupings.get(0));, +        assertEquals(secondAlias, groupings.get(1));, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java, +    public void testFoldingToLocalExecWithProjectAndLimit() {, +        PhysicalPlan p = plan("SELECT keyword FROM test WHERE 1 = 2 LIMIT 10");, +        assertEquals(LocalExec.class, p.getClass());, +        LocalExec le = (LocalExec) p;, +        assertEquals(EmptyExecutable.class, le.executable().getClass());, +        EmptyExecutable ee = (EmptyExecutable) le.executable();, +        assertEquals(1, ee.output().size());, +        assertThat(ee.output().get(0).toString(), startsWith("keyword{f}#"));, +    }, +, +    public void testFoldingToLocalExecWithProjectAndOrderBy() {, +        PhysicalPlan p = plan("SELECT keyword FROM test WHERE 1 = 2 ORDER BY 1");, +        assertEquals(LocalExec.class, p.getClass());, +        LocalExec le = (LocalExec) p;, +        assertEquals(EmptyExecutable.class, le.executable().getClass());, +        EmptyExecutable ee = (EmptyExecutable) le.executable();, +        assertEquals(1, ee.output().size());, +        assertThat(ee.output().get(0).toString(), startsWith("keyword{f}#"));, +    }, +, +    public void testFoldingToLocalExecWithProjectAndOrderByAndLimit() {, +        PhysicalPlan p = plan("SELECT keyword FROM test WHERE 1 = 2 ORDER BY 1 LIMIT 10");, +        assertEquals(LocalExec.class, p.getClass());, +        LocalExec le = (LocalExec) p;, +        assertEquals(EmptyExecutable.class, le.executable().getClass());, +        EmptyExecutable ee = (EmptyExecutable) le.executable();, +        assertEquals(1, ee.output().size());, +        assertThat(ee.output().get(0).toString(), startsWith("keyword{f}#"));, +    }, +, +    public void testFoldingToLocalExecWithAggregationAndLimit() {, +        PhysicalPlan p = plan("SELECT 'foo' FROM test GROUP BY 1 LIMIT 10");, +        assertEquals(LocalExec.class, p.getClass());, +        LocalExec le = (LocalExec) p;]