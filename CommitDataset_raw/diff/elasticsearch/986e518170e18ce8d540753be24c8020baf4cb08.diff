[+++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.document.FieldType;, +            PrefixFieldMapper prefixMapper = null;, +            if (prefixFieldType != null) {, +                if (fieldType().isSearchable() == false) {, +                if (fieldType.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {, +                    prefixFieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);, +                }, +                if (fieldType.storeTermVectorOffsets()) {, +                    prefixFieldType.setStoreTermVectorOffsets(true);, +                }, +                prefixFieldType.setAnalyzer(fieldType.indexAnalyzer());, +                prefixMapper = new PrefixFieldMapper(prefixFieldType, context.indexSettings());, +            }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.document.FieldType;, +            PrefixFieldMapper prefixMapper = null;, +            if (prefixFieldType != null) {, +                if (fieldType().isSearchable() == false) {, +                if (fieldType.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {, +                    prefixFieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);, +                }, +                if (fieldType.storeTermVectorOffsets()) {, +                    prefixFieldType.setStoreTermVectorOffsets(true);, +                }, +                prefixFieldType.setAnalyzer(fieldType.indexAnalyzer());, +                prefixMapper = new PrefixFieldMapper(prefixFieldType, context.indexSettings());, +            }, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java, +import org.apache.lucene.document.FieldType;, +    public void testIndexPrefixIndexTypes() throws IOException {, +        QueryShardContext queryShardContext = indexService.newQueryShardContext(, +            randomInt(20), null, () -> {, +                throw new UnsupportedOperationException();, +            }, null);, +, +        {, +            String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field"), +                .field("type", "text"), +                .field("analyzer", "english"), +                .startObject("index_prefix").endObject(), +                .field("index_options", "offsets"), +                .endObject().endObject().endObject().endObject().string();, +, +            DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping));, +, +            FieldMapper prefix = mapper.mappers().getMapper("field._index_prefix");, +            FieldType ft = prefix.fieldType;, +            assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, ft.indexOptions());, +        }, +, +        {, +            String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field"), +                .field("type", "text"), +                .field("analyzer", "english"), +                .startObject("index_prefix").endObject(), +                .field("index_options", "positions"), +                .endObject().endObject().endObject().endObject().string();, +, +            DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping));, +, +            FieldMapper prefix = mapper.mappers().getMapper("field._index_prefix");, +            FieldType ft = prefix.fieldType;, +            assertEquals(IndexOptions.DOCS, ft.indexOptions());, +            assertFalse(ft.storeTermVectors());, +        }, +, +        {, +            String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field"), +                .field("type", "text"), +                .field("analyzer", "english"), +                .startObject("index_prefix").endObject(), +                .field("term_vector", "with_positions_offsets"), +                .endObject().endObject().endObject().endObject().string();, +, +            DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping));, +, +            FieldMapper prefix = mapper.mappers().getMapper("field._index_prefix");, +            FieldType ft = prefix.fieldType;, +            assertEquals(IndexOptions.DOCS, ft.indexOptions());, +            assertTrue(ft.storeTermVectorOffsets());, +        }, +, +        {, +            String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field"), +                .field("type", "text"), +                .field("analyzer", "english"), +                .startObject("index_prefix").endObject(), +                .field("term_vector", "with_positions"), +                .endObject().endObject().endObject().endObject().string();, +, +            DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping));, +, +            FieldMapper prefix = mapper.mappers().getMapper("field._index_prefix");, +            FieldType ft = prefix.fieldType;, +            assertEquals(IndexOptions.DOCS, ft.indexOptions());]