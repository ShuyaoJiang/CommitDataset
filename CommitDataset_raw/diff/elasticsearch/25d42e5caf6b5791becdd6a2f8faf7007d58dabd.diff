[+++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +    private final ConcurrentMap<ShardId, FailedShard> failedShards = ConcurrentCollections.newConcurrentMap();, +, +    static class FailedShard {, +        public final long version;, +        public final long timestamp;, +, +        FailedShard(long version) {, +            this.version = version;, +            this.timestamp = System.currentTimeMillis();, +        }, +    }, +            cleanFailedShards(event);, +                if (!failedShards.containsKey(shardRouting.shardId())) {, +                    failedShards.put(shardRouting.shardId(), new FailedShard(shardRouting.version()));, +                }, +    private void cleanFailedShards(final ClusterChangedEvent event) {, +        RoutingTable routingTable = event.state().routingTable();, +        RoutingNode routingNodes = event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());, +        if (routingNodes == null) {, +            failedShards.clear();, +            return;, +        }, +, +        DiscoveryNodes nodes = event.state().nodes();, +        long now = System.currentTimeMillis();, +        Iterator<Map.Entry<ShardId, FailedShard>> iterator = failedShards.entrySet().iterator();, +            Map.Entry<ShardId, FailedShard> entry = iterator.next();, +            FailedShard failedShard = entry.getValue();, +                            // we have a timeout here just to make sure we don't have dangled failed shards for some reason, +                            // its just another safely layer, +                            if (shardRouting.version() == failedShard.version && ((now - failedShard.timestamp) < TimeValue.timeValueMinutes(60).millis())) {, +                                // It's the same failed shard - keep it if it hasn't timed out, +                                // Different version or expired, remove it, +                failedShards.put(shardRouting.shardId(), new FailedShard(shardRouting.version()));, +                    failedShards.put(shardRouting.shardId(), new FailedShard(shardRouting.version()));, +                            failedShards.put(fShardRouting.shardId(), new FailedShard(fShardRouting.version()));]