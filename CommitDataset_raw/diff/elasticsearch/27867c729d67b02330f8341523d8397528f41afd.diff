[+++ b/README.textile, +** Read / Search operations performed on either one of the replica shard., +++ b/README.textile, +** Read / Search operations performed on either one of the replica shard., +++ b/buildSrc/build.gradle, +++ b/README.textile, +** Read / Search operations performed on either one of the replica shard., +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.InputFile, +    public File successMarker = new File(project.buildDir, 'markers/jarHell'), +, +    /** The classpath to run jarhell check on, defaults to the test runtime classpath */, +    @InputFile, +    public FileCollection classpath = project.sourceSets.test.runtimeClasspath, +++ b/README.textile, +** Read / Search operations performed on either one of the replica shard., +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.InputFile, +    public File successMarker = new File(project.buildDir, 'markers/jarHell'), +, +    /** The classpath to run jarhell check on, defaults to the test runtime classpath */, +    @InputFile, +    public FileCollection classpath = project.sourceSets.test.runtimeClasspath, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +        // create a file for the log to go to under reports/, +        File reportDir = new File(project.buildDir, "reports/licenseHeaders"), +        reportDir.mkdirs(), +        File reportFile = new File(reportDir, "rat.log"), +               // checks all the java sources (allJava), +               for (SourceSet set : project.sourceSets) {, +                   for (File dir : set.allJava.srcDirs) {, +++ b/README.textile, +** Read / Search operations performed on either one of the replica shard., +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.InputFile, +    public File successMarker = new File(project.buildDir, 'markers/jarHell'), +, +    /** The classpath to run jarhell check on, defaults to the test runtime classpath */, +    @InputFile, +    public FileCollection classpath = project.sourceSets.test.runtimeClasspath, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +        // create a file for the log to go to under reports/, +        File reportDir = new File(project.buildDir, "reports/licenseHeaders"), +        reportDir.mkdirs(), +        File reportFile = new File(reportDir, "rat.log"), +               // checks all the java sources (allJava), +               for (SourceSet set : project.sourceSets) {, +                   for (File dir : set.allJava.srcDirs) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +    private String[] excludes = new String[0];, +        excludes = classes;, +    public String[] getExcludes() {, +        Configuration configuration = project.configurations.findByName('runtime');, +        if (configuration == null) {, +            // some projects apparently do not have 'runtime'? what a nice inconsistency,, +            // basically only serves to waste time in build logic!, +            configuration = project.configurations.findByName('testCompile');, +        }, +        assert configuration != null;, +        // we only want third party dependencies., +        FileCollection jars = configuration.fileCollection({ dependency ->, +            dependency.group.startsWith("org.elasticsearch") == false, +        });, +, +        // we don't want provided dependencies, which we have already scanned. e.g. don't, +        // scan ES core's dependencies for every single plugin, +        Configuration provided = project.configurations.findByName('provided');, +        if (provided != null) {, +            jars -= provided;, +        }, +, +        // no dependencies matched, we are done, +        if (jars.isEmpty()) {, +            return;, +        }, +, +        String[] excludedFiles = new String[excludes.length];, +        for (int i = 0; i < excludes.length; i++) {, +            excludedFiles[i] = excludes[i].replace('.', '/') + ".class";, +        }, +        Set<String> excludedSet = new TreeSet<>(Arrays.asList(excludedFiles));, +                            classpath: configuration.asPath) {, +++ b/README.textile, +** Read / Search operations performed on either one of the replica shard., +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.InputFile, +    public File successMarker = new File(project.buildDir, 'markers/jarHell'), +, +    /** The classpath to run jarhell check on, defaults to the test runtime classpath */, +    @InputFile, +    public FileCollection classpath = project.sourceSets.test.runtimeClasspath, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +        // create a file for the log to go to under reports/, +        File reportDir = new File(project.buildDir, "reports/licenseHeaders"), +        reportDir.mkdirs(), +        File reportFile = new File(reportDir, "rat.log")]