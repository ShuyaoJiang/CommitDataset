[+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomMustacheFactory.java, +import com.github.mustachejava.codes.DefaultMustache;, +import org.elasticsearch.common.Strings;, +import java.net.URLEncoder;, +import java.nio.charset.StandardCharsets;, +import java.util.HashMap;, +import java.util.function.Supplier;, +    static final String CONTENT_TYPE_PARAM = "content_type";, +    static final String JSON_MIME_TYPE = "application/json";, +    static final String PLAIN_TEXT_MIME_TYPE = "text/plain";, +    static final String X_WWW_FORM_URLENCODED_MIME_TYPE = "application/x-www-form-urlencoded";, +, +    private static final String DEFAULT_MIME_TYPE = JSON_MIME_TYPE;, +, +    private static final Map<String, Supplier<Encoder>> ENCODERS;, +    static {, +        Map<String, Supplier<Encoder>> encoders = new HashMap<>();, +        encoders.put(JSON_MIME_TYPE, JsonEscapeEncoder::new);, +        encoders.put(PLAIN_TEXT_MIME_TYPE, DefaultEncoder::new);, +        encoders.put(X_WWW_FORM_URLENCODED_MIME_TYPE, UrlEncoder::new);, +        ENCODERS = Collections.unmodifiableMap(encoders);, +    }, +, +    private final Encoder encoder;, +, +    public CustomMustacheFactory(String mimeType) {, +        this.encoder = createEncoder(mimeType);, +, +    public CustomMustacheFactory() {, +        this(DEFAULT_MIME_TYPE);, +        try {, +            encoder.encode(value, writer);, +        } catch (IOException e) {, +            throw new MustacheException("Unable to encode value", e);, +        }, +    }, +, +    static Encoder createEncoder(String mimeType) {, +        Supplier<Encoder> supplier = ENCODERS.get(mimeType);, +        if (supplier == null) {, +            throw new IllegalArgumentException("No encoder found for MIME type [" + mimeType + "]");, +        }, +        return supplier.get();, +            } else if (UrlEncoderCode.match(variable)) {, +                list.add(new UrlEncoderCode(templateContext, df, mustache, variable));, +    /**, +     * This function encodes a string using the {@link URLEncoder#encode(String, String)} method, +     * with the UTF-8 charset., +     */, +    static class UrlEncoderCode extends DefaultMustache {, +, +        private static final String CODE = "url";, +        private final Encoder encoder;, +, +        public UrlEncoderCode(TemplateContext tc, DefaultMustacheFactory df, Mustache mustache, String variable) {, +            super(tc, df, mustache.getCodes(), variable);, +            this.encoder = new UrlEncoder();, +        }, +        public Writer run(Writer writer, List<Object> scopes) {, +            if (getCodes() != null) {, +                for (Code code : getCodes()) {, +                    try (StringWriter capture = new StringWriter()) {, +                        code.execute(capture, scopes);, +, +                        String s = capture.toString();, +                        if (s != null) {, +                            encoder.encode(s, writer);, +                        }, +                    } catch (IOException e) {, +                        throw new MustacheException("Exception while parsing mustache function at line " + tc.line(), e);, +                    }, +                }, +            }, +            return writer;, +        }, +, +        static boolean match(String variable) {, +            return CODE.equalsIgnoreCase(variable);, +        }, +    }, +, +    @FunctionalInterface, +    interface Encoder {, +        /**, +         * Encodes the {@code s} string and writes it to the {@code writer} {@link Writer}., +         *, +         * @param s      The string to encode, +         * @param writer The {@link Writer} to which the encoded string will be written to, +         */, +        void encode(final String s, final Writer writer) throws IOException;, +    }, +, +    /**, +     * Encoder that simply writes the string to the writer without encoding., +     */, +    static class DefaultEncoder implements Encoder {, +, +        @Override, +        public void encode(String s, Writer writer) throws IOException {, +    /**]