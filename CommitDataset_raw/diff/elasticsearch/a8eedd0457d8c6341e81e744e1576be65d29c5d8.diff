[+++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.percolator.PercolatorQueriesRegistry;, +import org.elasticsearch.index.store.Store;, +        Store.INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING,, +        PercolatorQueriesRegistry.INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING,, +        MapperService.INDEX_MAPPER_DYNAMIC_SETTING,, +        BitsetFilterCache.INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING,, +        PrimaryShardAllocator.INDEX_RECOVERY_INITIAL_SHARDS_SETTING,, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.percolator.PercolatorQueriesRegistry;, +import org.elasticsearch.index.store.Store;, +        Store.INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING,, +        PercolatorQueriesRegistry.INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING,, +        MapperService.INDEX_MAPPER_DYNAMIC_SETTING,, +        BitsetFilterCache.INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING,, +        PrimaryShardAllocator.INDEX_RECOVERY_INITIAL_SHARDS_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    public static final Setting<TimeValue> INDEX_GC_DELETES_SETTING = Setting.timeSetting("index.gc_deletes", DEFAULT_GC_DELETES, new TimeValue(-1, TimeUnit.MILLISECONDS), true, Setting.Scope.INDEX);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.percolator.PercolatorQueriesRegistry;, +import org.elasticsearch.index.store.Store;, +        Store.INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING,, +        PercolatorQueriesRegistry.INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING,, +        MapperService.INDEX_MAPPER_DYNAMIC_SETTING,, +        BitsetFilterCache.INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING,, +        PrimaryShardAllocator.INDEX_RECOVERY_INITIAL_SHARDS_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    public static final Setting<TimeValue> INDEX_GC_DELETES_SETTING = Setting.timeSetting("index.gc_deletes", DEFAULT_GC_DELETES, new TimeValue(-1, TimeUnit.MILLISECONDS), true, Setting.Scope.INDEX);, +++ b/core/src/main/java/org/elasticsearch/index/MergePolicyConfig.java, +    public static final String INDEX_MERGE_ENABLED = "index.merge.enabled"; // don't convert to Setting<> and register... we only set this in tests and register via a plugin, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.percolator.PercolatorQueriesRegistry;, +import org.elasticsearch.index.store.Store;, +        Store.INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING,, +        PercolatorQueriesRegistry.INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING,, +        MapperService.INDEX_MAPPER_DYNAMIC_SETTING,, +        BitsetFilterCache.INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING,, +        PrimaryShardAllocator.INDEX_RECOVERY_INITIAL_SHARDS_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    public static final Setting<TimeValue> INDEX_GC_DELETES_SETTING = Setting.timeSetting("index.gc_deletes", DEFAULT_GC_DELETES, new TimeValue(-1, TimeUnit.MILLISECONDS), true, Setting.Scope.INDEX);, +++ b/core/src/main/java/org/elasticsearch/index/MergePolicyConfig.java, +    public static final String INDEX_MERGE_ENABLED = "index.merge.enabled"; // don't convert to Setting<> and register... we only set this in tests and register via a plugin, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING = Setting.boolSetting("index.load_fixed_bitset_filters_eagerly", true, false, Setting.Scope.INDEX);, +        this.loadRandomAccessFiltersEagerly = this.indexSettings.getValue(INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.percolator.PercolatorQueriesRegistry;, +import org.elasticsearch.index.store.Store;, +        Store.INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING,, +        PercolatorQueriesRegistry.INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING,, +        MapperService.INDEX_MAPPER_DYNAMIC_SETTING,, +        BitsetFilterCache.INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING,, +        PrimaryShardAllocator.INDEX_RECOVERY_INITIAL_SHARDS_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    public static final Setting<TimeValue> INDEX_GC_DELETES_SETTING = Setting.timeSetting("index.gc_deletes", DEFAULT_GC_DELETES, new TimeValue(-1, TimeUnit.MILLISECONDS), true, Setting.Scope.INDEX);, +++ b/core/src/main/java/org/elasticsearch/index/MergePolicyConfig.java, +    public static final String INDEX_MERGE_ENABLED = "index.merge.enabled"; // don't convert to Setting<> and register... we only set this in tests and register via a plugin, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING = Setting.boolSetting("index.load_fixed_bitset_filters_eagerly", true, false, Setting.Scope.INDEX);, +        this.loadRandomAccessFiltersEagerly = this.indexSettings.getValue(INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> INDEX_MAPPER_DYNAMIC_SETTING = Setting.boolSetting("index.mapper.dynamic", INDEX_MAPPER_DYNAMIC_DEFAULT, false, Setting.Scope.INDEX);, +        this.dynamic = this.indexSettings.getValue(INDEX_MAPPER_DYNAMIC_SETTING);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.percolator.PercolatorQueriesRegistry;, +import org.elasticsearch.index.store.Store;, +        Store.INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING,, +        PercolatorQueriesRegistry.INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING,, +        MapperService.INDEX_MAPPER_DYNAMIC_SETTING,, +        BitsetFilterCache.INDEX_LOAD_RANDOM_ACCESS_FILTERS_EAGERLY_SETTING,, +        PrimaryShardAllocator.INDEX_RECOVERY_INITIAL_SHARDS_SETTING,]