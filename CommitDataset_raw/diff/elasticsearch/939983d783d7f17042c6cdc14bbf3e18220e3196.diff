[+++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/ManyDocumentsIT.java, +import org.elasticsearch.client.Request;, +        Request request = new Request("POST", "/test/test/_bulk");, +        request.addParameter("refresh", "true");, +        request.setJsonEntity(bulk.toString());, +        client().performRequest(request);, +        Request request = new Request("POST", "/_reindex");, +        request.setJsonEntity(, +                "{\n" +, +                "  \"source\":{\n" +, +                "    \"index\":\"test\"\n" +, +                "  },\n" +, +                "  \"dest\":{\n" +, +                "    \"index\":\"des\"\n" +, +                "  }\n" +, +                "}");, +        Map<String, Object> response = entityAsMap(client().performRequest(request));, +        Map<?, ?> nodesInfo = entityAsMap(client().performRequest(new Request("GET", "/_nodes/http")));, +        Request request = new Request("POST", "/_reindex");, +        request.setJsonEntity(, +                "{\n" +, +                "  \"source\":{\n" +, +                "    \"index\":\"test\",\n" +, +                "    \"remote\":{\n" +, +                "      \"host\":\"" + remote + "\"\n" +, +                "    }\n" +, +                "  }\n," +, +                "  \"dest\":{\n" +, +                "    \"index\":\"des\"\n" +, +                "  }\n" +, +                "}");, +        Map<String, Object> response = entityAsMap(client().performRequest(request));, +        Map<String, Object> response = entityAsMap(client().performRequest(new Request("POST", "/test/_update_by_query")));, +        Request request = new Request("POST", "/test/_delete_by_query");, +        request.setJsonEntity(, +                "{\n" +, +                "  \"query\":{\n" +, +                "    \"match_all\": {}\n" +, +                "  }\n" +, +                "}");, +        Map<String, Object> response = entityAsMap(client().performRequest(request));, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/ManyDocumentsIT.java, +import org.elasticsearch.client.Request;, +        Request request = new Request("POST", "/test/test/_bulk");, +        request.addParameter("refresh", "true");, +        request.setJsonEntity(bulk.toString());, +        client().performRequest(request);, +        Request request = new Request("POST", "/_reindex");, +        request.setJsonEntity(, +                "{\n" +, +                "  \"source\":{\n" +, +                "    \"index\":\"test\"\n" +, +                "  },\n" +, +                "  \"dest\":{\n" +, +                "    \"index\":\"des\"\n" +, +                "  }\n" +, +                "}");, +        Map<String, Object> response = entityAsMap(client().performRequest(request));, +        Map<?, ?> nodesInfo = entityAsMap(client().performRequest(new Request("GET", "/_nodes/http")));, +        Request request = new Request("POST", "/_reindex");, +        request.setJsonEntity(, +                "{\n" +, +                "  \"source\":{\n" +, +                "    \"index\":\"test\",\n" +, +                "    \"remote\":{\n" +, +                "      \"host\":\"" + remote + "\"\n" +, +                "    }\n" +, +                "  }\n," +, +                "  \"dest\":{\n" +, +                "    \"index\":\"des\"\n" +, +                "  }\n" +, +                "}");, +        Map<String, Object> response = entityAsMap(client().performRequest(request));, +        Map<String, Object> response = entityAsMap(client().performRequest(new Request("POST", "/test/_update_by_query")));, +        Request request = new Request("POST", "/test/_delete_by_query");, +        request.setJsonEntity(, +                "{\n" +, +                "  \"query\":{\n" +, +                "    \"match_all\": {}\n" +, +                "  }\n" +, +                "}");, +        Map<String, Object> response = entityAsMap(client().performRequest(request));, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/remote/ReindexFromOldRemoteIT.java, +import org.elasticsearch.client.Request;, +    /**, +     * Number of documents to test when reindexing from an old version., +     */, +    private static final int DOCS = 5;, +, +                Request createIndex = new Request("PUT", "/test");, +                createIndex.setJsonEntity("{\"settings\":{\"number_of_shards\": 1}}");, +                oldEs.performRequest(createIndex);, +                for (int i = 0; i < DOCS; i++) {, +                    Request doc = new Request("PUT", "/test/doc/testdoc" + i);, +                    doc.addParameter("refresh", "true");, +                    doc.setJsonEntity("{\"test\":\"test\"}");, +                    oldEs.performRequest(doc);, +                }, +                Request reindex = new Request("POST", "/_reindex");, +                reindex.setJsonEntity(]