[+++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java, +            assertThat(query, instanceOf(BooleanQuery.class));, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            assertThat(booleanQuery.clauses().size(), equalTo(0));, +++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java, +            assertThat(query, instanceOf(BooleanQuery.class));, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            assertThat(booleanQuery.clauses().size(), equalTo(0));, +++ b/core/src/test/java/org/elasticsearch/threadpool/ESThreadPoolTestCase.java, +        throw new IllegalArgumentException(name);, +++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java, +            assertThat(query, instanceOf(BooleanQuery.class));, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            assertThat(booleanQuery.clauses().size(), equalTo(0));, +++ b/core/src/test/java/org/elasticsearch/threadpool/ESThreadPoolTestCase.java, +        throw new IllegalArgumentException(name);, +++ b/plugins/discovery-azure/build.gradle, +++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java, +            assertThat(query, instanceOf(BooleanQuery.class));, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            assertThat(booleanQuery.clauses().size(), equalTo(0));, +++ b/core/src/test/java/org/elasticsearch/threadpool/ESThreadPoolTestCase.java, +        throw new IllegalArgumentException(name);, +++ b/plugins/discovery-azure/build.gradle, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeService.java, +, +, +        public static final String ENDPOINT_NAME = "discovery.azure.endpoint.name";, +        public static final String DEPLOYMENT_NAME = "discovery.azure.deployment.name";, +        public static final String DEPLOYMENT_SLOT = "discovery.azure.deployment.slot";, +++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java, +            assertThat(query, instanceOf(BooleanQuery.class));, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            assertThat(booleanQuery.clauses().size(), equalTo(0));, +++ b/core/src/test/java/org/elasticsearch/threadpool/ESThreadPoolTestCase.java, +        throw new IllegalArgumentException(name);, +++ b/plugins/discovery-azure/build.gradle, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeService.java, +, +, +        public static final String ENDPOINT_NAME = "discovery.azure.endpoint.name";, +        public static final String DEPLOYMENT_NAME = "discovery.azure.deployment.name";, +        public static final String DEPLOYMENT_SLOT = "discovery.azure.deployment.slot";, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeServiceImpl.java, +import java.net.URI;, +import java.net.URISyntaxException;, +    static final class Azure {, +        private static final String ENDPOINT = "https://management.core.windows.net/";, +    }, +, +        Configuration configuration;, +        try {, +            configuration = ManagementConfiguration.configure(new URI(Azure.ENDPOINT),, +        } catch (IOException|URISyntaxException e) {, +            computeManagementClient = null;, +            return;, +        logger.trace("creating new Azure client for [{}], [{}]", subscriptionId, serviceName);, +        computeManagementClient = ComputeManagementService.create(configuration);, +++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java, +            assertThat(query, instanceOf(BooleanQuery.class));, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            assertThat(booleanQuery.clauses().size(), equalTo(0));, +++ b/core/src/test/java/org/elasticsearch/threadpool/ESThreadPoolTestCase.java, +        throw new IllegalArgumentException(name);, +++ b/plugins/discovery-azure/build.gradle, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeService.java, +, +, +        public static final String ENDPOINT_NAME = "discovery.azure.endpoint.name";, +        public static final String DEPLOYMENT_NAME = "discovery.azure.deployment.name";, +        public static final String DEPLOYMENT_SLOT = "discovery.azure.deployment.slot";, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/cloud/azure/management/AzureComputeServiceImpl.java, +import java.net.URI;, +import java.net.URISyntaxException;, +    static final class Azure {, +        private static final String ENDPOINT = "https://management.core.windows.net/";, +    }, +, +        Configuration configuration;, +        try {, +            configuration = ManagementConfiguration.configure(new URI(Azure.ENDPOINT),, +        } catch (IOException|URISyntaxException e) {, +            computeManagementClient = null;, +            return;, +        logger.trace("creating new Azure client for [{}], [{}]", subscriptionId, serviceName);, +        computeManagementClient = ComputeManagementService.create(configuration);, +++ b/plugins/discovery-azure/src/main/java/org/elasticsearch/discovery/azure/AzureUnicastHostsProvider.java, +            return null;, +        this.publicEndpointName = settings.get(Discovery.ENDPOINT_NAME, "elasticsearch");, +        this.deploymentName = settings.get(Discovery.DEPLOYMENT_NAME);, +        String strDeployment = settings.get(Discovery.DEPLOYMENT_SLOT, Deployment.PRODUCTION.deployment);, +        Deployment tmpDeployment = Deployment.fromString(strDeployment);, +        if (tmpDeployment == null) {, +            logger.warn("wrong value for [{}]: [{}]. falling back to [{}]...", Discovery.DEPLOYMENT_SLOT, strDeployment,, +                    Deployment.PRODUCTION.deployment);, +            tmpDeployment = Deployment.PRODUCTION;, +        }, +        this.deploymentSlot = tmpDeployment.slot;, +            if (deploymentName != null && !deploymentName.equals(deployment.getName())) {, +                            networkAddress = NetworkAddress.format(privateIp);]