[+++ b/README.textile, +The above will index information into the @kimchy@ index, with two types, @info@ and @tweet@. Each user will get their own special index., +++ b/README.textile, +The above will index information into the @kimchy@ index, with two types, @info@ and @tweet@. Each user will get their own special index., +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/README.textile, +The above will index information into the @kimchy@ index, with two types, @info@ and @tweet@. Each user will get their own special index., +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +++ b/README.textile, +The above will index information into the @kimchy@ index, with two types, @info@ and @tweet@. Each user will get their own special index., +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/JsonSettingsLoader.java, +    public JsonSettingsLoader(boolean allowNullValues) {, +        super(allowNullValues);, +    }, +, +++ b/README.textile, +The above will index information into the @kimchy@ index, with two types, @info@ and @tweet@. Each user will get their own special index., +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/JsonSettingsLoader.java, +    public JsonSettingsLoader(boolean allowNullValues) {, +        super(allowNullValues);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/PropertiesSettingsLoader.java, +import java.io.Closeable;, +import java.util.function.Supplier;, +        return load(() -> new FastStringReader(source), (reader, props) -> props.load(reader));, +        return load(() -> StreamInput.wrap(source), (inStream, props) -> props.load(inStream));, +    }, +, +    private final <T extends Closeable> Map<String, String> load(, +            Supplier<T> supplier,, +            IOExceptionThrowingBiConsumer<T, Properties> properties, +    ) throws IOException {, +        T t = null;, +            t = supplier.get();, +            final Properties props = new NoDuplicatesProperties();, +            properties.accept(t, props);, +            final Map<String, String> result = new HashMap<>();, +            IOUtils.closeWhileHandlingException(t);, +    @FunctionalInterface, +    private interface IOExceptionThrowingBiConsumer<T, U> {, +        void accept(T t, U u) throws IOException;, +    }, +, +            final Object previousValue = super.put(key, value);, +                throw new ElasticsearchParseException(, +                        "duplicate settings key [{}] found, previous value [{}], current value [{}]",, +                        key,, +                        previousValue,, +                        value, +                );, +++ b/README.textile, +The above will index information into the @kimchy@ index, with two types, @info@ and @tweet@. Each user will get their own special index., +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/JsonSettingsLoader.java, +    public JsonSettingsLoader(boolean allowNullValues) {, +        super(allowNullValues);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/PropertiesSettingsLoader.java, +import java.io.Closeable;, +import java.util.function.Supplier;, +        return load(() -> new FastStringReader(source), (reader, props) -> props.load(reader));, +        return load(() -> StreamInput.wrap(source), (inStream, props) -> props.load(inStream));, +    }, +, +    private final <T extends Closeable> Map<String, String> load(, +            Supplier<T> supplier,, +            IOExceptionThrowingBiConsumer<T, Properties> properties, +    ) throws IOException {, +        T t = null;, +            t = supplier.get();, +            final Properties props = new NoDuplicatesProperties();, +            properties.accept(t, props);, +            final Map<String, String> result = new HashMap<>();, +            IOUtils.closeWhileHandlingException(t);, +    @FunctionalInterface, +    private interface IOExceptionThrowingBiConsumer<T, U> {, +        void accept(T t, U u) throws IOException;, +    }, +, +            final Object previousValue = super.put(key, value);, +                throw new ElasticsearchParseException(, +                        "duplicate settings key [{}] found, previous value [{}], current value [{}]",, +                        key,, +                        previousValue,, +                        value, +                );, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/SettingsLoaderFactory.java, + * A class holding factory methods for settings loaders that attempts, + * to infer the type of the underlying settings content., +     * Returns a {@link SettingsLoader} based on the source resource, +     * name. This factory method assumes that if the resource name ends, +     * with ".json" then the content should be parsed as JSON, else if]