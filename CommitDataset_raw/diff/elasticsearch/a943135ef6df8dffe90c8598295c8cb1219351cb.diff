[+++ b/src/test/java/org/elasticsearch/test/integration/recovery/RecoveryWhileUnderLoadTests.java, +import com.google.common.base.Predicate;, +import org.elasticsearch.action.count.CountResponse;, +import java.util.concurrent.TimeUnit;, +import static org.hamcrest.Matchers.greaterThan;, +                    } catch (Throwable e) {, +        waitForDocs(2000);, +        waitForDocs(4000);, +        waitForDocs(15000);, +            CountResponse actionGet = client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();, +            assertNoFailures(actionGet);, +            assertThat("iteration: " + i + " failed", actionGet.getCount(), equalTo(indexCounter.get()));, +                    } catch (Throwable e) {, +        waitForDocs(2000);, +        waitForDocs(4000);, +        waitForDocs(15000);, +            CountResponse actionGet = client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();, +            assertNoFailures(actionGet);, +            assertThat("iteration: " + i + " failed", actionGet.getCount(), equalTo(indexCounter.get()));, +                    } catch (Throwable e) {, +        waitForDocs(2000);, +        waitForDocs(4000);, +        waitForDocs(15000);, +            CountResponse actionGet = client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();, +            assertNoFailures(actionGet);, +            assertThat("iteration: " + i + " failed", actionGet.getCount(), equalTo(indexCounter.get()));, +    , +    private void waitForDocs(final long numDocs) throws InterruptedException {, +        awaitBusy(new Predicate<Object>() {, +            public boolean apply(Object o) {, +                return client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount() > numDocs;, +            }, +        }, 5, TimeUnit.MINUTES); // not really relevant here we just have to wait some time, +        assertThat(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(), greaterThan(numDocs));, +    }]