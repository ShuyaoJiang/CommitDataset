[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +import javax.net.ssl.SSLSession;, +     * Invalidates the sessions in the provided {@link SSLSessionContext}, +     */, +    static void invalidateSessions(SSLSessionContext sslSessionContext) {, +        Enumeration<byte[]> sessionIds = sslSessionContext.getIds();, +        while (sessionIds.hasMoreElements()) {, +            byte[] sessionId = sessionIds.nextElement();, +            SSLSession session = sslSessionContext.getSession(sessionId);, +            // a SSLSession could be null as there is no lock while iterating, the session cache, +            // could have evicted a value, the session could be timed out, or the session could, +            // have already been invalidated, which removes the value from the session cache in the, +            // sun implementation, +            if (session != null) {, +                session.invalidate();, +            }, +        }, +    }, +, +    /**, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +import javax.net.ssl.SSLSession;, +     * Invalidates the sessions in the provided {@link SSLSessionContext}, +     */, +    static void invalidateSessions(SSLSessionContext sslSessionContext) {, +        Enumeration<byte[]> sessionIds = sslSessionContext.getIds();, +        while (sessionIds.hasMoreElements()) {, +            byte[] sessionId = sessionIds.nextElement();, +            SSLSession session = sslSessionContext.getSession(sessionId);, +            // a SSLSession could be null as there is no lock while iterating, the session cache, +            // could have evicted a value, the session could be timed out, or the session could, +            // have already been invalidated, which removes the value from the session cache in the, +            // sun implementation, +            if (session != null) {, +                session.invalidate();, +            }, +        }, +    }, +, +    /**, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ssl/SSLServiceTests.java, +import org.elasticsearch.common.SuppressForbidden;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import javax.net.ssl.SSLSession;, +import javax.net.ssl.SSLSessionContext;, +import javax.security.cert.X509Certificate;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.util.Enumeration;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +    public void testSSLSessionInvalidationHandlesNullSessions() {, +        final int numEntries = randomIntBetween(1, 32);, +        final AtomicInteger invalidationCounter = new AtomicInteger();, +        int numNull = 0;, +        final Map<byte[], SSLSession> sessionMap = new HashMap<>();, +        for (int i = 0; i < numEntries; i++) {, +            final byte[] id = randomByteArrayOfLength(2);, +            final SSLSession sslSession;, +            if (rarely()) {, +                sslSession = null;, +                numNull++;, +            } else {, +                sslSession = new MockSSLSession(id, invalidationCounter::incrementAndGet);, +            }, +            sessionMap.put(id, sslSession);, +        }, +, +        SSLSessionContext sslSessionContext = new SSLSessionContext() {, +            @Override, +            public SSLSession getSession(byte[] sessionId) {, +                return sessionMap.get(sessionId);, +            }, +, +            @Override, +            public Enumeration<byte[]> getIds() {, +                return Collections.enumeration(sessionMap.keySet());, +            }, +, +            @Override, +            public void setSessionTimeout(int seconds) throws IllegalArgumentException {, +            }, +, +            @Override, +            public int getSessionTimeout() {, +                return 0;, +            }, +, +            @Override, +            public void setSessionCacheSize(int size) throws IllegalArgumentException {, +            }, +, +            @Override, +            public int getSessionCacheSize() {, +                return 0;, +            }, +        };, +, +        SSLService.invalidateSessions(sslSessionContext);]