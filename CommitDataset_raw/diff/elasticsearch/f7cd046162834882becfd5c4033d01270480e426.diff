[+++ b/x-pack/plugin/data-frame/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/dataframe/integration/DataFramePivotRestIT.java, +    public void testPivotWithScriptedMetricAgg() throws Exception {, +        String transformId = "scriptedMetricPivot";, +        String dataFrameIndex = "scripted_metric_pivot_reviews";, +        setupDataAccessRole(DATA_ACCESS_ROLE, REVIEWS_INDEX_NAME, dataFrameIndex);, +, +        final Request createDataframeTransformRequest = createRequestWithAuth("PUT", DATAFRAME_ENDPOINT + transformId,, +            BASIC_AUTH_VALUE_DATA_FRAME_ADMIN_WITH_SOME_DATA_ACCESS);, +, +        String config = "{", +            + " \"source\": {\"index\":\"" + REVIEWS_INDEX_NAME + "\"},", +            + " \"dest\": {\"index\":\"" + dataFrameIndex + "\"},";, +, +        config += " \"pivot\": {", +            + "   \"group_by\": {", +            + "     \"reviewer\": {", +            + "       \"terms\": {", +            + "         \"field\": \"user_id\"", +            + " } } },", +            + "   \"aggregations\": {", +            + "     \"avg_rating\": {", +            + "       \"avg\": {", +            + "         \"field\": \"stars\"", +            + " } },", +            + "     \"squared_sum\": {", +            + "       \"scripted_metric\": {", +            + "         \"init_script\": \"state.reviews_sqrd = []\",", +            + "         \"map_script\": \"state.reviews_sqrd.add(doc.stars.value * doc.stars.value)\",", +            + "         \"combine_script\": \"state.reviews_sqrd\",", +            + "         \"reduce_script\": \"def sum = 0.0; for(l in states){ for(a in l) { sum += a}} return sum\"", +            + " } }", +            + " } }", +            + "}";, +, +        createDataframeTransformRequest.setJsonEntity(config);, +        Map<String, Object> createDataframeTransformResponse = entityAsMap(client().performRequest(createDataframeTransformRequest));, +        assertThat(createDataframeTransformResponse.get("acknowledged"), equalTo(Boolean.TRUE));, +        assertTrue(indexExists(dataFrameIndex));, +, +        startAndWaitForTransform(transformId, dataFrameIndex, BASIC_AUTH_VALUE_DATA_FRAME_ADMIN_WITH_SOME_DATA_ACCESS);, +, +        // we expect 27 documents as there shall be 27 user_id's, +        Map<String, Object> indexStats = getAsMap(dataFrameIndex + "/_stats");, +        assertEquals(27, XContentMapValues.extractValue("_all.total.docs.count", indexStats));, +, +        // get and check some users, +        Map<String, Object> searchResult = getAsMap(dataFrameIndex + "/_search?q=reviewer:user_4");, +        assertEquals(1, XContentMapValues.extractValue("hits.total.value", searchResult));, +        Number actual = (Number) ((List<?>) XContentMapValues.extractValue("hits.hits._source.avg_rating", searchResult)).get(0);, +        assertEquals(3.878048780, actual.doubleValue(), 0.000001);, +        actual = (Number) ((List<?>) XContentMapValues.extractValue("hits.hits._source.squared_sum", searchResult)).get(0);, +        assertEquals(711.0, actual.doubleValue(), 0.000001);, +    }, +, +++ b/x-pack/plugin/data-frame/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/dataframe/integration/DataFramePivotRestIT.java, +    public void testPivotWithScriptedMetricAgg() throws Exception {, +        String transformId = "scriptedMetricPivot";, +        String dataFrameIndex = "scripted_metric_pivot_reviews";, +        setupDataAccessRole(DATA_ACCESS_ROLE, REVIEWS_INDEX_NAME, dataFrameIndex);, +, +        final Request createDataframeTransformRequest = createRequestWithAuth("PUT", DATAFRAME_ENDPOINT + transformId,, +            BASIC_AUTH_VALUE_DATA_FRAME_ADMIN_WITH_SOME_DATA_ACCESS);, +, +        String config = "{", +            + " \"source\": {\"index\":\"" + REVIEWS_INDEX_NAME + "\"},", +            + " \"dest\": {\"index\":\"" + dataFrameIndex + "\"},";, +, +        config += " \"pivot\": {", +            + "   \"group_by\": {", +            + "     \"reviewer\": {", +            + "       \"terms\": {", +            + "         \"field\": \"user_id\"", +            + " } } },", +            + "   \"aggregations\": {", +            + "     \"avg_rating\": {", +            + "       \"avg\": {", +            + "         \"field\": \"stars\"", +            + " } },", +            + "     \"squared_sum\": {", +            + "       \"scripted_metric\": {", +            + "         \"init_script\": \"state.reviews_sqrd = []\",", +            + "         \"map_script\": \"state.reviews_sqrd.add(doc.stars.value * doc.stars.value)\",", +            + "         \"combine_script\": \"state.reviews_sqrd\",", +            + "         \"reduce_script\": \"def sum = 0.0; for(l in states){ for(a in l) { sum += a}} return sum\"", +            + " } }", +            + " } }", +            + "}";, +, +        createDataframeTransformRequest.setJsonEntity(config);, +        Map<String, Object> createDataframeTransformResponse = entityAsMap(client().performRequest(createDataframeTransformRequest));, +        assertThat(createDataframeTransformResponse.get("acknowledged"), equalTo(Boolean.TRUE));, +        assertTrue(indexExists(dataFrameIndex));, +, +        startAndWaitForTransform(transformId, dataFrameIndex, BASIC_AUTH_VALUE_DATA_FRAME_ADMIN_WITH_SOME_DATA_ACCESS);, +, +        // we expect 27 documents as there shall be 27 user_id's, +        Map<String, Object> indexStats = getAsMap(dataFrameIndex + "/_stats");, +        assertEquals(27, XContentMapValues.extractValue("_all.total.docs.count", indexStats));, +, +        // get and check some users]