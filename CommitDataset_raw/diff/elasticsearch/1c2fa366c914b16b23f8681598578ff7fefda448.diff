[+++ b/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +        List<MemoryPoolMXBean> memoryPoolMXBeans = ManagementFactory.getMemoryPoolMXBeans();, +        stats.mem.pools = new MemoryPool[memoryPoolMXBeans.size()];, +        for (int i = 0; i < memoryPoolMXBeans.size(); i++) {, +            MemoryPoolMXBean memoryPoolMXBean = memoryPoolMXBeans.get(i);, +            MemoryUsage usage = memoryPoolMXBean.getUsage();, +            MemoryUsage peakUsage = memoryPoolMXBean.getPeakUsage();, +            stats.mem.pools[i] = new MemoryPool(memoryPoolMXBean.getName(),, +                    usage.getUsed() < 0 ? 0 : usage.getUsed(),, +                    usage.getMax() < 0 ? 0 : usage.getMax(),, +                    peakUsage.getUsed() < 0 ? 0 : peakUsage.getUsed(),, +                    peakUsage.getMax() < 0 ? 0 : peakUsage.getMax(), +            );, +        }, +, +            builder.field("non_heap_used_in_bytes", mem.nonHeapUsed);, +            builder.field("non_heap_committed_in_bytes", mem.nonHeapCommitted);, +, +            builder.startObject("pools");, +            for (MemoryPool pool : mem) {, +                builder.startObject(pool.name());, +                builder.field("used", pool.used().toString());, +                builder.field("used_in_bytes", pool.used);, +                builder.field("max", pool.max().toString());, +                builder.field("max_in_bytes", pool.max);, +, +                builder.field("peak_used", pool.peakUsed().toString());, +                builder.field("peak_used_in_bytes", pool.peakUsed);, +                builder.field("peak_max", pool.peakMax().toString());, +                builder.field("peak_max_in_bytes", pool.peakMax);, +, +                builder.endObject();, +            }, +            builder.endObject();, +, +        GarbageCollector[] collectors;, +        public Iterator<GarbageCollector> iterator() {, +    public static class MemoryPool implements Streamable, Serializable {, +, +        String name;, +        long used;, +        long max;, +, +        long peakUsed;, +        long peakMax;, +, +        MemoryPool() {, +, +        }, +, +        public MemoryPool(String name, long used, long max, long peakUsed, long peakMax) {, +            this.name = name;, +            this.used = used;, +            this.max = max;, +            this.peakUsed = peakUsed;, +            this.peakMax = peakMax;, +        }, +, +        public static MemoryPool readMemoryPool(StreamInput in) throws IOException {, +            MemoryPool pool = new MemoryPool();, +            pool.readFrom(in);, +            return pool;, +        }, +, +        public String name() {, +            return this.name;, +        }, +, +        public String getName() {, +            return this.name;, +        }, +, +        public ByteSizeValue used() {, +            return new ByteSizeValue(used);, +        }, +, +        public ByteSizeValue getUsed() {, +            return used();, +        }, +, +        public ByteSizeValue max() {, +            return new ByteSizeValue(max);, +        }, +, +        public ByteSizeValue getMax() {, +            return max();, +        }, +, +        public ByteSizeValue peakUsed() {, +            return new ByteSizeValue(peakUsed);, +        }, +, +        public ByteSizeValue getPeakUsed() {, +            return peakUsed();, +        }, +, +        public ByteSizeValue peakMax() {, +            return new ByteSizeValue(peakMax);, +        }, +]