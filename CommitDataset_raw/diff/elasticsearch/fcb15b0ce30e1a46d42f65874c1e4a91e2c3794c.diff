[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/GetJobsStatsAction.java, +            return OpenJobAction.JobTaskMatcher.match(task, jobId);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/GetJobsStatsAction.java, +            return OpenJobAction.JobTaskMatcher.match(task, jobId);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/OpenJobAction.java, +import org.elasticsearch.cluster.metadata.MetaData;, +            if (task instanceof JobTaskMatcher) {, +                if (MetaData.ALL.equals(expectedJobId)) {, +                    return true;, +                }, +                return expectedDescription.equals(task.getDescription());, +            }, +            return false;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/GetJobsStatsAction.java, +            return OpenJobAction.JobTaskMatcher.match(task, jobId);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/OpenJobAction.java, +import org.elasticsearch.cluster.metadata.MetaData;, +            if (task instanceof JobTaskMatcher) {, +                if (MetaData.ALL.equals(expectedJobId)) {, +                    return true;, +                }, +                return expectedDescription.equals(task.getDescription());, +            }, +            return false;, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetJobStatsActionRequestTests.java, +import org.elasticsearch.tasks.Task;, +import static org.hamcrest.Matchers.is;, +import static org.mockito.Mockito.mock;, +, +    public void testMatch_GivenAll_FailsForNonJobTasks() {, +        Task nonJobTask = mock(Task.class);, +, +        assertThat(new Request("_all").match(nonJobTask), is(false));, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/GetJobsStatsAction.java, +            return OpenJobAction.JobTaskMatcher.match(task, jobId);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/OpenJobAction.java, +import org.elasticsearch.cluster.metadata.MetaData;, +            if (task instanceof JobTaskMatcher) {, +                if (MetaData.ALL.equals(expectedJobId)) {, +                    return true;, +                }, +                return expectedDescription.equals(task.getDescription());, +            }, +            return false;, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetJobStatsActionRequestTests.java, +import org.elasticsearch.tasks.Task;, +import static org.hamcrest.Matchers.is;, +import static org.mockito.Mockito.mock;, +, +    public void testMatch_GivenAll_FailsForNonJobTasks() {, +        Task nonJobTask = mock(Task.class);, +, +        assertThat(new Request("_all").match(nonJobTask), is(false));, +    }, +++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportOpenJobActionTests.java, +import org.elasticsearch.tasks.Task;, +import static org.hamcrest.Matchers.is;, +    public void testJobTaskMatcherMatch() {, +        Task nonJobTask1 = mock(Task.class);, +        Task nonJobTask2 = mock(Task.class);, +        TransportOpenJobAction.JobTask jobTask1 = new TransportOpenJobAction.JobTask("ml-1",, +                0, "persistent", "", null, null);, +        TransportOpenJobAction.JobTask jobTask2 = new TransportOpenJobAction.JobTask("ml-2",, +                1, "persistent", "", null, null);, +, +        assertThat(OpenJobAction.JobTaskMatcher.match(nonJobTask1, "_all"), is(false));, +        assertThat(OpenJobAction.JobTaskMatcher.match(nonJobTask2, "_all"), is(false));, +        assertThat(OpenJobAction.JobTaskMatcher.match(jobTask1, "_all"), is(true));, +        assertThat(OpenJobAction.JobTaskMatcher.match(jobTask2, "_all"), is(true));, +        assertThat(OpenJobAction.JobTaskMatcher.match(jobTask1, "ml-1"), is(true));, +        assertThat(OpenJobAction.JobTaskMatcher.match(jobTask2, "ml-1"), is(false));, +        assertThat(OpenJobAction.JobTaskMatcher.match(jobTask1, "ml-2"), is(false));, +        assertThat(OpenJobAction.JobTaskMatcher.match(jobTask2, "ml-2"), is(true));, +    }, +]