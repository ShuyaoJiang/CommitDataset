[+++ b/build.gradle, +  ext.bwc_tests_enabled = false, +++ b/build.gradle, +  ext.bwc_tests_enabled = false, +++ b/core/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +            final long pre60NodeCheckpoint = SequenceNumbersService.PRE_60_NODE_CHECKPOINT;, +            listener.onResponse(new ReplicaResponse(pre60NodeCheckpoint, pre60NodeCheckpoint));, +++ b/build.gradle, +  ext.bwc_tests_enabled = false, +++ b/core/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +            final long pre60NodeCheckpoint = SequenceNumbersService.PRE_60_NODE_CHECKPOINT;, +            listener.onResponse(new ReplicaResponse(pre60NodeCheckpoint, pre60NodeCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +import org.elasticsearch.index.seqno.SequenceNumbersService;, +                    primary.updateGlobalCheckpointForShard(shard.allocationId().getId(), response.globalCheckpoint());, +         * Update the local knowledge of the global checkpoint for the specified allocation ID., +         *, +         * @param allocationId     the allocation ID to update the global checkpoint for, +         * @param globalCheckpoint the global checkpoint, +         */, +        void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint);, +, +        /**, +     * An interface to encapsulate the metadata needed from replica shards when they respond to operations performed on them., +        /**, +         * The local checkpoint for the shard. See {@link SequenceNumbersService#getLocalCheckpoint()}., +         *, +         * @return the local checkpoint, +         **/, +, +        /**, +         * The global checkpoint for the shard. See {@link SequenceNumbersService#getGlobalCheckpoint()}., +         *, +         * @return the global checkpoint, +         **/, +        long globalCheckpoint();, +, +++ b/build.gradle, +  ext.bwc_tests_enabled = false, +++ b/core/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +            final long pre60NodeCheckpoint = SequenceNumbersService.PRE_60_NODE_CHECKPOINT;, +            listener.onResponse(new ReplicaResponse(pre60NodeCheckpoint, pre60NodeCheckpoint));, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +import org.elasticsearch.index.seqno.SequenceNumbersService;, +                    primary.updateGlobalCheckpointForShard(shard.allocationId().getId(), response.globalCheckpoint());, +         * Update the local knowledge of the global checkpoint for the specified allocation ID., +         *, +         * @param allocationId     the allocation ID to update the global checkpoint for, +         * @param globalCheckpoint the global checkpoint, +         */, +        void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint);, +, +        /**, +     * An interface to encapsulate the metadata needed from replica shards when they respond to operations performed on them., +        /**, +         * The local checkpoint for the shard. See {@link SequenceNumbersService#getLocalCheckpoint()}., +         *, +         * @return the local checkpoint, +         **/, +, +        /**, +         * The global checkpoint for the shard. See {@link SequenceNumbersService#getGlobalCheckpoint()}., +         *, +         * @return the global checkpoint, +         **/, +        long globalCheckpoint();, +, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                final TransportReplicationAction.ReplicaResponse response =, +                        new ReplicaResponse(replica.getLocalCheckpoint(), replica.getGlobalCheckpoint());, +        public void updateGlobalCheckpointForShard(final String allocationId, final long globalCheckpoint) {, +            indexShard.updateGlobalCheckpointForShard(allocationId, globalCheckpoint);, +        }, +, +        @Override, +        private long globalCheckpoint;, +        public ReplicaResponse(long localCheckpoint, long globalCheckpoint) {, +             * A replica should always know its own local checkpoints so this should always be a valid sequence number or the pre-6.0, +            this.globalCheckpoint = globalCheckpoint;, +            if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {, +                localCheckpoint = SequenceNumbersService.PRE_60_NODE_CHECKPOINT;, +            }, +            if (in.getVersion().onOrAfter(Version.V_6_0_0_rc1)) {, +                globalCheckpoint = in.readZLong();, +            } else {, +                globalCheckpoint = SequenceNumbersService.PRE_60_NODE_CHECKPOINT;, +            if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {, +            }, +            if (out.getVersion().onOrAfter(Version.V_6_0_0_rc1)) {, +                out.writeZLong(globalCheckpoint);, +, +        @Override, +        public long globalCheckpoint() {, +            return globalCheckpoint;, +        }, +, +++ b/build.gradle, +  ext.bwc_tests_enabled = false, +++ b/core/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +            final long pre60NodeCheckpoint = SequenceNumbersService.PRE_60_NODE_CHECKPOINT;]