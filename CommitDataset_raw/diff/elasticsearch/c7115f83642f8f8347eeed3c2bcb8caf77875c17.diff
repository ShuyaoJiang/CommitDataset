[+++ b/docs/reference/mapping/types/core-types.asciidoc, +|`numeric_resolution` |The unit to use when passed in a numeric values. Possible, +values include `seconds` and  `milliseconds` (default)., +, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`numeric_resolution` |The unit to use when passed in a numeric values. Possible, +values include `seconds` and  `milliseconds` (default)., +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +            final long timestamp = timeUnit.toMillis(value);, +                CustomLongNumericField field = new CustomLongNumericField(this, timestamp, fieldType);, +                addDocValue(context, fields, timestamp);, +                return Long.parseLong(value);, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`numeric_resolution` |The unit to use when passed in a numeric values. Possible, +values include `seconds` and  `milliseconds` (default)., +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +            final long timestamp = timeUnit.toMillis(value);, +                CustomLongNumericField field = new CustomLongNumericField(this, timestamp, fieldType);, +                addDocValue(context, fields, timestamp);, +                return Long.parseLong(value);, +++ b/src/test/java/org/elasticsearch/index/mapper/date/SimpleDateMappingTests.java, +import org.apache.lucene.index.IndexableField;, +import org.elasticsearch.index.mapper.ParseContext.Document;, +import org.elasticsearch.search.aggregations.support.ValuesSource.Numeric;, +import static org.elasticsearch.index.mapper.string.SimpleStringMappingTests.docValuesType;, +, +    private static long getDateAsMillis(Document doc, String field) {, +        for (IndexableField f : doc.getFields(field)) {, +            if (f.numericValue() != null) {, +                return f.numericValue().longValue();, +            }, +        }, +        throw new AssertionError("missing");, +    }, +, +    public void testNumericResolution() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("date_field").field("type", "date").field("format", "date_time").field("numeric_resolution", "seconds").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = mapper(mapping);, +, +        // provided as an int, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("date_field", 42), +                .endObject(), +                .bytes());, +        assertThat(getDateAsMillis(doc.rootDoc(), "date_field"), equalTo(42000L));, +, +        // provided as a string, +        doc = defaultMapper.parse("type", "2", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("date_field", "43"), +                .endObject(), +                .bytes());, +        assertThat(getDateAsMillis(doc.rootDoc(), "date_field"), equalTo(43000L));, +    }]