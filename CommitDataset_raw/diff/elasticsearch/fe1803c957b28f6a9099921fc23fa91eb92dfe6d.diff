[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.index.analysis.IndexAnalyzers;, +            return analyze(request, field, analyzer, indexService != null ? indexService.getIndexAnalyzers() : null, analysisRegistry, environment);, +    public static AnalyzeResponse analyze(AnalyzeRequest request, String field, Analyzer analyzer, IndexAnalyzers indexAnalyzers, AnalysisRegistry analysisRegistry, Environment environment) throws IOException {, +            if (indexAnalyzers == null) {, +                analyzer = indexAnalyzers.get(request.analyzer());, +            final IndexSettings indexSettings = indexAnalyzers == null ? null : indexAnalyzers.getIndexSettings();, +            TokenizerFactory tokenizerFactory = parseTokenizerFactory(request, indexAnalyzers, analysisRegistry, environment);, +            tokenFilterFactories = getTokenFilterFactories(request, indexSettings, analysisRegistry, environment, tokenFilterFactories);, +            charFilterFactories = getCharFilterFactories(request, indexSettings, analysisRegistry, environment, charFilterFactories);, +            if (indexAnalyzers == null) {, +                analyzer = indexAnalyzers.getDefaultIndexAnalyzer();, +    private static CharFilterFactory[] getCharFilterFactories(AnalyzeRequest request, IndexSettings indexSettings, AnalysisRegistry analysisRegistry,, +                    if (indexSettings == null) {, +                        charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name, indexSettings);, +                        charFilterFactories[i] = charFilterFactoryFactory.get(indexSettings, environment, charFilter.name,, +                            AnalysisRegistry.getSettingsFromIndexSettings(indexSettings,, +    private static TokenFilterFactory[] getTokenFilterFactories(AnalyzeRequest request, IndexSettings indexSettings, AnalysisRegistry analysisRegistry,, +                    if (indexSettings == null) {, +                        tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name, indexSettings);, +                        tokenFilterFactories[i] = tokenFilterFactoryFactory.get(indexSettings, environment, tokenFilter.name,, +                            AnalysisRegistry.getSettingsFromIndexSettings(indexSettings,, +    private static TokenizerFactory parseTokenizerFactory(AnalyzeRequest request, IndexAnalyzers indexAnalzyers,, +            if (indexAnalzyers == null) {, +                tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name, indexAnalzyers.getIndexSettings());, +                tokenizerFactory = tokenizerFactoryFactory.get(indexAnalzyers.getIndexSettings(), environment, tokenizer.name,, +                    AnalysisRegistry.getSettingsFromIndexSettings(indexAnalzyers.getIndexSettings(),, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.index.analysis.IndexAnalyzers;, +            return analyze(request, field, analyzer, indexService != null ? indexService.getIndexAnalyzers() : null, analysisRegistry, environment);, +    public static AnalyzeResponse analyze(AnalyzeRequest request, String field, Analyzer analyzer, IndexAnalyzers indexAnalyzers, AnalysisRegistry analysisRegistry, Environment environment) throws IOException {, +            if (indexAnalyzers == null) {, +                analyzer = indexAnalyzers.get(request.analyzer());, +            final IndexSettings indexSettings = indexAnalyzers == null ? null : indexAnalyzers.getIndexSettings();, +            TokenizerFactory tokenizerFactory = parseTokenizerFactory(request, indexAnalyzers, analysisRegistry, environment);, +            tokenFilterFactories = getTokenFilterFactories(request, indexSettings, analysisRegistry, environment, tokenFilterFactories);, +            charFilterFactories = getCharFilterFactories(request, indexSettings, analysisRegistry, environment, charFilterFactories);, +            if (indexAnalyzers == null) {, +                analyzer = indexAnalyzers.getDefaultIndexAnalyzer();, +    private static CharFilterFactory[] getCharFilterFactories(AnalyzeRequest request, IndexSettings indexSettings, AnalysisRegistry analysisRegistry,, +                    if (indexSettings == null) {, +                        charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name, indexSettings);, +                        charFilterFactories[i] = charFilterFactoryFactory.get(indexSettings, environment, charFilter.name,, +                            AnalysisRegistry.getSettingsFromIndexSettings(indexSettings,, +    private static TokenFilterFactory[] getTokenFilterFactories(AnalyzeRequest request, IndexSettings indexSettings, AnalysisRegistry analysisRegistry,, +                    if (indexSettings == null) {, +                        tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name, indexSettings);, +                        tokenFilterFactories[i] = tokenFilterFactoryFactory.get(indexSettings, environment, tokenFilter.name,, +                            AnalysisRegistry.getSettingsFromIndexSettings(indexSettings,, +    private static TokenizerFactory parseTokenizerFactory(AnalyzeRequest request, IndexAnalyzers indexAnalzyers,, +            if (indexAnalzyers == null) {, +                tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name, indexAnalzyers.getIndexSettings());, +                tokenizerFactory = tokenizerFactoryFactory.get(indexAnalzyers.getIndexSettings(), environment, tokenizer.name,, +                    AnalysisRegistry.getSettingsFromIndexSettings(indexAnalzyers.getIndexSettings(),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.analysis.IndexAnalyzers;, +import java.util.AbstractMap;, +import java.util.Map;, +import java.util.Set;, +            final NamedAnalyzer fakeDefault = new NamedAnalyzer("fake_default", new Analyzer() {, +                @Override, +                protected TokenStreamComponents createComponents(String fieldName) {, +                    throw new UnsupportedOperationException("shouldn't be here");, +                }, +            });, +            // this is just a fake map that always returns the same value for any possible string key, +            // also the entrySet impl isn't fully correct but we implement it since internally, +            // IndexAnalyzers will iterate over all analyzers to close them., +            final Map<String, NamedAnalyzer> analyzerMap = new AbstractMap<String, NamedAnalyzer>() {, +                @Override, +                public NamedAnalyzer get(Object key) {, +                    assert key instanceof String : "key must be a string but was: " + key.getClass();, +                    return new NamedAnalyzer((String)key, fakeDefault.analyzer());, +                }, +                @Override, +                public Set<Entry<String, NamedAnalyzer>> entrySet() {, +                    // just to ensure we can iterate over this single analzyer, +                    return Collections.singletonMap(fakeDefault.name(), fakeDefault).entrySet();, +                }, +            };, +            try (IndexAnalyzers fakeIndexAnalzyers = new IndexAnalyzers(indexSettings, fakeDefault, fakeDefault, fakeDefault, analyzerMap)) {, +                MapperService mapperService = new MapperService(indexSettings, fakeIndexAnalzyers, similarityService, mapperRegistry, () -> null);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.index.analysis.IndexAnalyzers;, +            return analyze(request, field, analyzer, indexService != null ? indexService.getIndexAnalyzers() : null, analysisRegistry, environment);, +    public static AnalyzeResponse analyze(AnalyzeRequest request, String field, Analyzer analyzer, IndexAnalyzers indexAnalyzers, AnalysisRegistry analysisRegistry, Environment environment) throws IOException {, +            if (indexAnalyzers == null) {, +                analyzer = indexAnalyzers.get(request.analyzer());, +            final IndexSettings indexSettings = indexAnalyzers == null ? null : indexAnalyzers.getIndexSettings();, +            TokenizerFactory tokenizerFactory = parseTokenizerFactory(request, indexAnalyzers, analysisRegistry, environment);, +            tokenFilterFactories = getTokenFilterFactories(request, indexSettings, analysisRegistry, environment, tokenFilterFactories);, +            charFilterFactories = getCharFilterFactories(request, indexSettings, analysisRegistry, environment, charFilterFactories);, +            if (indexAnalyzers == null) {, +                analyzer = indexAnalyzers.getDefaultIndexAnalyzer();, +    private static CharFilterFactory[] getCharFilterFactories(AnalyzeRequest request, IndexSettings indexSettings, AnalysisRegistry analysisRegistry,, +                    if (indexSettings == null) {]