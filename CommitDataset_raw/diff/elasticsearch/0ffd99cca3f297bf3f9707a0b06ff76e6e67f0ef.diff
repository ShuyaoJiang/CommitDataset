[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/assemblies/common-bin.xml, +++ b/core/pom.xml, +++ b/core/src/main/assemblies/common-bin.xml, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +++ b/core/pom.xml, +++ b/core/src/main/assemblies/common-bin.xml, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +++ b/core/src/main/java/org/elasticsearch/common/collect/CopyOnWriteHashMap.java, +import java.lang.reflect.Array;, +            for (int i = 0; i < keys.length; i++) {, +                if (key.equals(keys[i])) {, +                    return values[i];, +            return null;, +, +        }, +            int slot = -1;, +            for (int i = 0; i < keys.length; i++) {, +                if (key.equals(keys[i])) {, +                    slot = i;, +                    break;, +                }, +            }, +                keys2 = appendElement(keys, key);, +                values2 = appendElement(values, value);, +            int slot = -1;, +            for (int i = 0; i < keys.length; i++) {, +                if (key.equals(keys[i])) {, +                    slot = i;, +                    break;, +                }, +            }, +            final K[] keys2 = removeArrayElement(keys, slot);, +            final V[] values2 = removeArrayElement(values, slot);, +    private static <T> T[] removeArrayElement(T[] array, int index) {, +        final Object result = Array.newInstance(array.getClass().getComponentType(), array.length - 1);, +        System.arraycopy(array, 0, result, 0, index);, +        if (index < array.length - 1) {, +            System.arraycopy(array, index + 1, result, index, array.length - index - 1);, +        }, +, +        return (T[]) result;, +    }, +, +    public static <T> T[] appendElement(final T[] array, final T element) {, +        final T[] newArray = Arrays.copyOf(array, array.length + 1);, +        newArray[newArray.length - 1] = element;, +        return newArray;, +    }, +, +    public static <T> T[] insertElement(final T[] array, final T element, final int index) {, +        final T[] result = Arrays.copyOf(array, array.length + 1);, +        System.arraycopy(array, 0, result, 0, index);, +        result[index] = element;, +        if (index < array.length) {, +            System.arraycopy(array, index, result, index + 1, array.length - index);, +        }, +        return result;, +    }, +, +, +            final K[] keys2 = insertElement(keys, key, slot);, +            final Object[] subNodes2 = insertElement(subNodes, value, slot);, +            final K[] keys2 = removeArrayElement(keys, slot);, +            final Object[] subNodes2 = removeArrayElement(subNodes, slot);, +++ b/core/pom.xml, +++ b/core/src/main/assemblies/common-bin.xml, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +++ b/core/src/main/java/org/elasticsearch/common/collect/CopyOnWriteHashMap.java, +import java.lang.reflect.Array;, +            for (int i = 0; i < keys.length; i++) {, +                if (key.equals(keys[i])) {, +                    return values[i];, +            return null;, +, +        }, +            int slot = -1;, +            for (int i = 0; i < keys.length; i++) {, +                if (key.equals(keys[i])) {, +                    slot = i;, +                    break;, +                }, +            }, +                keys2 = appendElement(keys, key);, +                values2 = appendElement(values, value);, +            int slot = -1;, +            for (int i = 0; i < keys.length; i++) {, +                if (key.equals(keys[i])) {, +                    slot = i;, +                    break;, +                }, +            }, +            final K[] keys2 = removeArrayElement(keys, slot);, +            final V[] values2 = removeArrayElement(values, slot);, +    private static <T> T[] removeArrayElement(T[] array, int index) {, +        final Object result = Array.newInstance(array.getClass().getComponentType(), array.length - 1);, +        System.arraycopy(array, 0, result, 0, index);, +        if (index < array.length - 1) {, +            System.arraycopy(array, index + 1, result, index, array.length - index - 1);]