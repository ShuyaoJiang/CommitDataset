[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/datehistogram/DateHistogramFacetProcessor.java, +                .put("week", new DateFieldParser.WeekOfWeekyear()), +                .put("1w", new DateFieldParser.WeekOfWeekyear()), +        static class WeekOfWeekyear implements DateFieldParser {, +            @Override public DateTimeField parse(Chronology chronology) {, +                return chronology.weekOfWeekyear();, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/datehistogram/DateHistogramFacetProcessor.java, +                .put("week", new DateFieldParser.WeekOfWeekyear()), +                .put("1w", new DateFieldParser.WeekOfWeekyear()), +        static class WeekOfWeekyear implements DateFieldParser {, +            @Override public DateTimeField parse(Chronology chronology) {, +                return chronology.weekOfWeekyear();, +            }, +        }, +, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java, +, +        time = new MutableDateTime(DateTimeZone.UTC);, +        time.setRounding(time.getChronology().weekOfWeekyear(), MutableDateTime.ROUND_FLOOR);, +        time.setMillis(utcTimeInMillis("2011-05-05T01:01:01"));, +        assertThat(time.toString(), equalTo("2011-05-02T00:00:00.000Z"));, +        assertThat(time.getMillis(), equalTo(utcTimeInMillis("2011-05-02T00:00:00.000Z")));]