[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +            if (aliasAction.aliases.length == 0) {, +                        + "]: aliases may not be empty", validationException);, +            }, +                            + "]: [alias] may not be empty string", validationException);, +                        + "]: Property [index] was either missing or null", validationException);, +                                + "]: [index] may not be empty string", validationException);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +            if (aliasAction.aliases.length == 0) {, +                        + "]: aliases may not be empty", validationException);, +            }, +                            + "]: [alias] may not be empty string", validationException);, +                        + "]: Property [index] was either missing or null", validationException);, +                                + "]: [index] may not be empty string", validationException);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +            if (aliasAction.aliases.length == 0) {, +                        + "]: aliases may not be empty", validationException);, +            }, +                            + "]: [alias] may not be empty string", validationException);, +                        + "]: Property [index] was either missing or null", validationException);, +                                + "]: [index] may not be empty string", validationException);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +            if (aliasAction.aliases.length == 0) {, +                        + "]: aliases may not be empty", validationException);, +            }, +                            + "]: [alias] may not be empty string", validationException);, +                        + "]: Property [index] was either missing or null", validationException);, +                                + "]: [index] may not be empty string", validationException);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/common/hash/MessageDigests.java, +import org.elasticsearch.ElasticsearchException;, +, +public class MessageDigests {, +                throw new ElasticsearchException("unexpected exception creating MessageDigest instance for [" + digest + "]", e);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]ingest[/\\]core[/\\]ConfigurationUtils.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/IndicesAliasesRequest.java, +            if (aliasAction.aliases.length == 0) {, +                        + "]: aliases may not be empty", validationException);, +            }, +                            + "]: [alias] may not be empty string", validationException);, +                        + "]: Property [index] was either missing or null", validationException);, +                                + "]: [index] may not be empty string", validationException);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/common/hash/MessageDigests.java, +import org.elasticsearch.ElasticsearchException;, +, +public class MessageDigests {, +                throw new ElasticsearchException("unexpected exception creating MessageDigest instance for [" + digest + "]", e);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.SmoothingModel;, +    protected StreamInput() { }, +    public Float readOptionalFloat() throws IOException {, +        if (readBoolean()) {, +            return readFloat();, +        }, +        return null;, +    }]