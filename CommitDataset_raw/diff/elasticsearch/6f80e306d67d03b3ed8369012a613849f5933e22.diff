[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCacheModule.java, +import org.elasticsearch.index.cache.field.data.resident.ResidentFieldDataCache;, +                .to(settings.getAsClass(FieldDataCacheSettings.FIELD_DATA_CACHE_TYPE, ResidentFieldDataCache.class, "org.elasticsearch.index.cache.field.data.", "FieldDataCache")), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCacheModule.java, +import org.elasticsearch.index.cache.field.data.resident.ResidentFieldDataCache;, +                .to(settings.getAsClass(FieldDataCacheSettings.FIELD_DATA_CACHE_TYPE, ResidentFieldDataCache.class, "org.elasticsearch.index.cache.field.data.", "FieldDataCache")), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/resident/ResidentFieldDataCache.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.base.Objects;, +import org.elasticsearch.common.collect.MapEvictionListener;, +import org.elasticsearch.common.collect.MapMaker;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.settings.IndexSettingsService;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicLong;, +public class ResidentFieldDataCache extends AbstractConcurrentMapFieldDataCache implements MapEvictionListener<String, FieldData> {, +    private final IndexSettingsService indexSettingsService;, +, +    private volatile int maxSize;, +    private volatile TimeValue expire;, +, +    private final AtomicLong evictions = new AtomicLong();, +, +    private final ApplySettings applySettings = new ApplySettings();, +, +    @Inject public ResidentFieldDataCache(Index index, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService) {, +        this.indexSettingsService = indexSettingsService;, +, +        this.maxSize = indexSettings.getAsInt("index.cache.field.max_size", componentSettings.getAsInt("max_size", -1));, +        this.expire = indexSettings.getAsTime("index.cache.field.expire", componentSettings.getAsTime("expire", null));, +        logger.debug("using [resident] field cache with max_size [{}], expire [{}]", maxSize, expire);, +, +        indexSettingsService.addListener(applySettings);, +    }, +, +    @Override public void close() throws ElasticSearchException {, +        indexSettingsService.removeListener(applySettings);, +        super.close();, +        MapMaker mapMaker = new MapMaker();, +        if (maxSize != -1) {, +            mapMaker.maximumSize(maxSize);, +        }, +        if (expire != null) {, +            mapMaker.expireAfterAccess(expire.nanos(), TimeUnit.NANOSECONDS);, +        }, +        mapMaker.evictionListener(this);, +        return mapMaker.makeMap();, +        return evictions.get();, +    }, +, +    @Override public void onEviction(@Nullable String s, @Nullable FieldData fieldData) {, +        evictions.incrementAndGet();, +    }, +, +    class ApplySettings implements IndexSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            int maxSize = settings.getAsInt("index.cache.field.max_size", ResidentFieldDataCache.this.maxSize);, +            TimeValue expire = settings.getAsTime("index.cache.field.expire", ResidentFieldDataCache.this.expire);, +            boolean changed = false;, +            if (maxSize != ResidentFieldDataCache.this.maxSize) {, +                logger.info("updating index.cache.field.max_size from [{}] to [{}]", ResidentFieldDataCache.this.maxSize, maxSize);, +                changed = true;, +                ResidentFieldDataCache.this.maxSize = maxSize;, +            }, +            if (!Objects.equal(expire, ResidentFieldDataCache.this.expire)) {, +                logger.info("updating index.cache.field.expire from [{}] to [{}]", ResidentFieldDataCache.this.expire, expire);, +                changed = true;, +                ResidentFieldDataCache.this.expire = expire;, +            }, +            if (changed) {, +                clear();, +            }, +        }]