[+++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \"track_total_hits\" : 2147483647"));, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \"track_total_hits\" : 2147483647"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +        if (query.shouldTrackHits()) {, +            builder.trackTotalHits(true);, +        }, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \"track_total_hits\" : 2147483647"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +        if (query.shouldTrackHits()) {, +            builder.trackTotalHits(true);, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java, +                        queryC.limit(),, +                        queryC.shouldTrackHits());, +                        qContainer.limit(),, +                        qContainer.shouldTrackHits());, +                if (c.field().foldable()) {, +                    AggRef ref = null;, +, +                    if (groupingAgg == null) {, +                        ref = GlobalCountRef.INSTANCE;, +                        // if the count points to the total track hits, enable accurate count retrieval, +                        queryC = queryC.withTrackHits();, +                    } else {, +                        ref = new GroupByRef(groupingAgg.id(), Property.COUNT, null);, +                    }, +                // the only variant left - COUNT(DISTINCT) - will be covered by the else branch below as it maps to an aggregation, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \"track_total_hits\" : 2147483647"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +        if (query.shouldTrackHits()) {, +            builder.trackTotalHits(true);, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java, +                        queryC.limit(),, +                        queryC.shouldTrackHits());, +                        qContainer.limit(),, +                        qContainer.shouldTrackHits());, +                if (c.field().foldable()) {, +                    AggRef ref = null;, +, +                    if (groupingAgg == null) {, +                        ref = GlobalCountRef.INSTANCE;, +                        // if the count points to the total track hits, enable accurate count retrieval, +                        queryC = queryC.withTrackHits();, +                    } else {, +                        ref = new GroupByRef(groupingAgg.id(), Property.COUNT, null);, +                    }, +                // the only variant left - COUNT(DISTINCT) - will be covered by the else branch below as it maps to an aggregation, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java, +    private final boolean trackHits;, +        this(null, null, null, null, null, null, null, -1, false);, +            List<Tuple<FieldExtraction, , +            ExpressionId>> fields, , +            int limit, , +            boolean trackHits) {, +        this.trackHits = trackHits;, +    public boolean shouldTrackHits() {, +        return trackHits;, +    }, +, +        return new QueryContainer(q, aggs, fields, aliases, pseudoFunctions, scalarFunctions, sort, limit, trackHits);, +        return new QueryContainer(query, aggs, fields, a, pseudoFunctions, scalarFunctions, sort, limit, trackHits);, +        return new QueryContainer(query, aggs, fields, aliases, p, scalarFunctions, sort, limit, trackHits);, +        return new QueryContainer(query, a, fields, aliases, pseudoFunctions, scalarFunctions, sort, limit, trackHits);, +        return l == limit ? this : new QueryContainer(query, aggs, fields, aliases, pseudoFunctions, scalarFunctions, sort, l, trackHits);, +    }, +, +    public QueryContainer withTrackHits() {, +        return trackHits ? this : new QueryContainer(query, aggs, fields, aliases, pseudoFunctions, scalarFunctions, sort, limit, true);, +        return new QueryContainer(query, aggs, fields, aliases, pseudoFunctions, procs, sort, limit, trackHits);, +        return new QueryContainer(query, aggs, fields, aliases, pseudoFunctions, scalarFunctions, sort, limit, trackHits);, +        return new Tuple<>(new QueryContainer(q, aggs, fields, aliases, pseudoFunctions, scalarFunctions, sort, limit, trackHits),, +                sort, limit, trackHits);, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \"track_total_hits\" : 2147483647"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +        if (query.shouldTrackHits()) {, +            builder.trackTotalHits(true);, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java, +                        queryC.limit(),, +                        queryC.shouldTrackHits());, +                        qContainer.limit(),, +                        qContainer.shouldTrackHits());, +                if (c.field().foldable()) {, +                    AggRef ref = null;, +, +                    if (groupingAgg == null) {, +                        ref = GlobalCountRef.INSTANCE;, +                        // if the count points to the total track hits, enable accurate count retrieval, +                        queryC = queryC.withTrackHits();, +                    } else {, +                        ref = new GroupByRef(groupingAgg.id(), Property.COUNT, null);, +                    }, +                // the only variant left - COUNT(DISTINCT) - will be covered by the else branch below as it maps to an aggregation, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java]