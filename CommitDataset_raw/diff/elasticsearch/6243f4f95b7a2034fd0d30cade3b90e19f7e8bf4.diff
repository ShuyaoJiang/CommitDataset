[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetField.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.get;, +, +import org.elasticsearch.util.io.Streamable;, +, +import java.io.DataInput;, +import java.io.DataOutput;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +, +/**, + * @author kimchy (shay.banon), + */, +public class GetField implements Streamable, Iterable<Object> {, +, +    private String name;, +, +    private List<Object> values;, +, +    private GetField() {, +, +    }, +, +    public GetField(String name, List<Object> values) {, +        this.name = name;, +        this.values = values;, +    }, +, +    public String name() {, +        return name;, +    }, +, +    public List<Object> values() {, +        return values;, +    }, +, +    @Override public Iterator<Object> iterator() {, +        return values.iterator();, +    }, +, +    public static GetField readGetField(DataInput in) throws IOException, ClassNotFoundException {, +        GetField result = new GetField();, +        result.readFrom(in);, +        return result;, +    }, +, +    @Override public void readFrom(DataInput in) throws IOException, ClassNotFoundException {, +        name = in.readUTF();, +        int size = in.readInt();, +        values = new ArrayList<Object>(size);, +        for (int i = 0; i < size; i++) {, +            Object value;, +            byte type = in.readByte();, +            if (type == 0) {, +                value = in.readUTF();, +            } else if (type == 1) {, +                value = in.readInt();, +            } else if (type == 2) {, +                value = in.readLong();, +            } else if (type == 3) {, +                value = in.readFloat();, +            } else if (type == 4) {, +                value = in.readDouble();, +            } else if (type == 5) {, +                value = in.readBoolean();, +            } else if (type == 6) {, +                int bytesSize = in.readInt();, +                value = new byte[bytesSize];, +                in.readFully(((byte[]) value));, +            } else {, +                throw new IOException("Can't read unknown type [" + type + "]");, +            }, +            values.add(value);, +        }, +    }, +, +    @Override public void writeTo(DataOutput out) throws IOException {, +        out.writeUTF(name);, +        out.writeInt(values.size());]