[+++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchHelper.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchHelper.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchHelper.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +import jsr166y.LinkedTransferQueue;, +        private volatile LinkedTransferQueue<ShardSearchFailure> shardFailures;, +        protected final ShardSearchFailure[] buildShardFailures() {, +            LinkedTransferQueue<ShardSearchFailure> localFailures = shardFailures;, +            if (localFailures == null) {, +                return ShardSearchFailure.EMPTY_ARRAY;, +            }, +            return localFailures.toArray(ShardSearchFailure.EMPTY_ARRAY);, +        }, +, +        // we do our best to return the shard failures, but its ok if its not fully concurrently safe, +        // we simply try and return as much as possible, +        protected final void addShardFailure(ShardSearchFailure failure) {, +            if (shardFailures == null) {, +                shardFailures = new LinkedTransferQueue<ShardSearchFailure>();, +            }, +            shardFailures.add(failure);, +        }, +, +                    addShardFailure(new ShardSearchFailure(t));, +                listener.onFailure(new ReduceSearchPhaseException("fetch", "", e, buildShardFailures()));, +                    System.currentTimeMillis() - startTime, buildShardFailures()));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchCache.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchHelper.java, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +                    AsyncAction.this.addShardFailure(new ShardSearchFailure(t));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +import jsr166y.LinkedTransferQueue;, +        private volatile LinkedTransferQueue<ShardSearchFailure> shardFailures;, +        protected final ShardSearchFailure[] buildShardFailures() {, +            LinkedTransferQueue<ShardSearchFailure> localFailures = shardFailures;, +            if (localFailures == null) {, +                return ShardSearchFailure.EMPTY_ARRAY;, +            }, +            return localFailures.toArray(ShardSearchFailure.EMPTY_ARRAY);, +        }, +, +        // we do our best to return the shard failures, but its ok if its not fully concurrently safe, +        // we simply try and return as much as possible, +        protected final void addShardFailure(ShardSearchFailure failure) {, +            if (shardFailures == null) {, +                shardFailures = new LinkedTransferQueue<ShardSearchFailure>();, +            }, +            shardFailures.add(failure);, +        }, +, +                    addShardFailure(new ShardSearchFailure(t));, +                listener.onFailure(new ReduceSearchPhaseException("fetch", "", e, buildShardFailures()));, +                    System.currentTimeMillis() - startTime, buildShardFailures()));, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +import jsr166y.LinkedTransferQueue;, +        protected volatile LinkedTransferQueue<ShardSearchFailure> shardFailures;, +        protected final ShardSearchFailure[] buildShardFailures() {, +            LinkedTransferQueue<ShardSearchFailure> localFailures = shardFailures;, +            if (localFailures == null) {, +                return ShardSearchFailure.EMPTY_ARRAY;, +            }, +            return localFailures.toArray(ShardSearchFailure.EMPTY_ARRAY);, +        }]