[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +    private static final SimpleBoundaryScanner DEFAULT_BOUNDARY_SCANNER = new SimpleBoundaryScanner();, +, +                BoundaryScanner boundaryScanner = DEFAULT_BOUNDARY_SCANNER;, +                if (field.boundaryMaxScan() != SimpleBoundaryScanner.DEFAULT_MAX_SCAN || field.boundaryChars() != SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS) {, +                    boundaryScanner = new SimpleBoundaryScanner(field.boundaryMaxScan(), field.boundaryChars());, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +    private static final SimpleBoundaryScanner DEFAULT_BOUNDARY_SCANNER = new SimpleBoundaryScanner();, +, +                BoundaryScanner boundaryScanner = DEFAULT_BOUNDARY_SCANNER;, +                if (field.boundaryMaxScan() != SimpleBoundaryScanner.DEFAULT_MAX_SCAN || field.boundaryChars() != SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS) {, +                    boundaryScanner = new SimpleBoundaryScanner(field.boundaryMaxScan(), field.boundaryChars());, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlighterParseElement.java, +import org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner;, +        int globalBoundaryMaxScan = SimpleBoundaryScanner.DEFAULT_MAX_SCAN;, +        Character[] globalBoundaryChars = SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS;, +                    char[] charsArr = parser.text().toCharArray();, +                    globalBoundaryChars = new Character[charsArr.length];, +                    for (int i = 0; i < charsArr.length; i++) {, +                        globalBoundaryChars[i] = charsArr[i];, +                    }, +                                        char[] charsArr = parser.text().toCharArray();, +                                        Character[] boundaryChars = new Character[charsArr.length];, +                                        for (int i = 0; i < charsArr.length; i++) {, +                                            boundaryChars[i] = charsArr[i];, +                                        }, +                                        field.boundaryChars(boundaryChars);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +    private static final SimpleBoundaryScanner DEFAULT_BOUNDARY_SCANNER = new SimpleBoundaryScanner();, +, +                BoundaryScanner boundaryScanner = DEFAULT_BOUNDARY_SCANNER;, +                if (field.boundaryMaxScan() != SimpleBoundaryScanner.DEFAULT_MAX_SCAN || field.boundaryChars() != SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS) {, +                    boundaryScanner = new SimpleBoundaryScanner(field.boundaryMaxScan(), field.boundaryChars());, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlighterParseElement.java, +import org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner;, +        int globalBoundaryMaxScan = SimpleBoundaryScanner.DEFAULT_MAX_SCAN;, +        Character[] globalBoundaryChars = SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS;, +                    char[] charsArr = parser.text().toCharArray();, +                    globalBoundaryChars = new Character[charsArr.length];, +                    for (int i = 0; i < charsArr.length; i++) {, +                        globalBoundaryChars[i] = charsArr[i];, +                    }, +                                        char[] charsArr = parser.text().toCharArray();, +                                        Character[] boundaryChars = new Character[charsArr.length];, +                                        for (int i = 0; i < charsArr.length; i++) {, +                                            boundaryChars[i] = charsArr[i];, +                                        }, +                                        field.boundaryChars(boundaryChars);, +++ b/src/main/java/org/elasticsearch/search/highlight/SearchContextHighlight.java, +        private Character[] boundaryChars = null;, +        public Character[] boundaryChars() {, +        public void boundaryChars(Character[] boundaryChars) {]