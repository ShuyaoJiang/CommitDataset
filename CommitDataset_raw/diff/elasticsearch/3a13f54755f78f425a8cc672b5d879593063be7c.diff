[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            return getFuzzyQuery(qfield, termImage, Float.toString(settings.fuzziness().asDistance(termImage)));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            return getFuzzyQuery(qfield, termImage, Float.toString(settings.fuzziness().asDistance(termImage)));, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +import org.apache.lucene.search.FuzzyQuery;, +import org.apache.lucene.search.MultiTermQuery;, +import org.apache.lucene.search.PrefixQuery;, +import org.apache.lucene.search.TermQuery;, +    public void testToQueryFuzzyQueryAutoFuziness() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +, +        int length = randomIntBetween(1, 10);, +        StringBuilder queryString = new StringBuilder();, +        for (int i = 0; i < length; i++) {, +            queryString.append("a");, +        }, +        queryString.append("~");, +, +        int expectedEdits;, +        if (length <= 2) {, +            expectedEdits = 0;, +        } else if (3 <= length && length <= 5) {, +            expectedEdits = 1;, +        } else {, +            expectedEdits = 2;, +        }, +, +        Query query = queryStringQuery(queryString.toString()).defaultField(STRING_FIELD_NAME).fuzziness(Fuzziness.AUTO), +            .toQuery(createShardContext());, +        assertThat(query, instanceOf(FuzzyQuery.class));, +        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;, +        assertEquals(expectedEdits, fuzzyQuery.getMaxEdits());, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            return getFuzzyQuery(qfield, termImage, Float.toString(settings.fuzziness().asDistance(termImage)));, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +import org.apache.lucene.search.FuzzyQuery;, +import org.apache.lucene.search.MultiTermQuery;, +import org.apache.lucene.search.PrefixQuery;, +import org.apache.lucene.search.TermQuery;, +    public void testToQueryFuzzyQueryAutoFuziness() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +, +        int length = randomIntBetween(1, 10);, +        StringBuilder queryString = new StringBuilder();, +        for (int i = 0; i < length; i++) {, +            queryString.append("a");, +        }, +        queryString.append("~");, +, +        int expectedEdits;, +        if (length <= 2) {, +            expectedEdits = 0;, +        } else if (3 <= length && length <= 5) {, +            expectedEdits = 1;, +        } else {, +            expectedEdits = 2;, +        }, +, +        Query query = queryStringQuery(queryString.toString()).defaultField(STRING_FIELD_NAME).fuzziness(Fuzziness.AUTO), +            .toQuery(createShardContext());, +        assertThat(query, instanceOf(FuzzyQuery.class));, +        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;, +        assertEquals(expectedEdits, fuzzyQuery.getMaxEdits());, +    }, +, +++ b/docs/reference/how-to/indexing-speed.asciidoc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            return getFuzzyQuery(qfield, termImage, Float.toString(settings.fuzziness().asDistance(termImage)));, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +import org.apache.lucene.search.FuzzyQuery;, +import org.apache.lucene.search.MultiTermQuery;, +import org.apache.lucene.search.PrefixQuery;, +import org.apache.lucene.search.TermQuery;, +    public void testToQueryFuzzyQueryAutoFuziness() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +, +        int length = randomIntBetween(1, 10);, +        StringBuilder queryString = new StringBuilder();, +        for (int i = 0; i < length; i++) {, +            queryString.append("a");, +        }, +        queryString.append("~");, +, +        int expectedEdits;, +        if (length <= 2) {, +            expectedEdits = 0;, +        } else if (3 <= length && length <= 5) {, +            expectedEdits = 1;, +        } else {, +            expectedEdits = 2;, +        }, +, +        Query query = queryStringQuery(queryString.toString()).defaultField(STRING_FIELD_NAME).fuzziness(Fuzziness.AUTO), +            .toQuery(createShardContext());, +        assertThat(query, instanceOf(FuzzyQuery.class));, +        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;, +        assertEquals(expectedEdits, fuzzyQuery.getMaxEdits());]