[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        public final Class<?> augmentation;, +        public Method(String name, Struct owner, Class<?> augmentation, Type rtn, List<Type> arguments,, +            if (augmentation != null) {, +                params[0] = augmentation;, +            if (augmentation != null) {, +                type = org.objectweb.asm.Type.getType(augmentation);, +        final Method constructor = new Method(name, owner, null, returnType, Arrays.asList(args), asm, reflect.getModifiers(), handle);, +                int index = methodName.lastIndexOf(".");, +, +                if (index >= 0) {, +                    String augmentation = methodName.substring(0, index);, +                    methodName = methodName.substring(index + 1);, +                    addMethodInternal(className, methodName, augmentation, rtn, args);, +                    addMethodInternal(className, methodName, null, rtn, args);, +    private void addMethodInternal(String struct, String name, String augmentation, Type rtn, Type[] args) {, +        if (augmentation == null) {, +            try {, +                implClass = Class.forName(augmentation);, +            } catch (ClassNotFoundException cnfe) {, +                throw new IllegalArgumentException("Augmentation class [" + augmentation + "]" +, +                    " not found for struct [" + struct + "] using method name [" + name + "].", cnfe);, +            }, +, +        final Method method =, +            new Method(name, owner, augmentation == null ? null : implClass, rtn, Arrays.asList(args), asm, modifiers, handle);, +        if (augmentation == null && java.lang.reflect.Modifier.isStatic(modifiers)) {, +                            if (method.augmentation != null) {, +                                impl = method.augmentation;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        public final Class<?> augmentation;, +        public Method(String name, Struct owner, Class<?> augmentation, Type rtn, List<Type> arguments,, +            if (augmentation != null) {, +                params[0] = augmentation;, +            if (augmentation != null) {, +                type = org.objectweb.asm.Type.getType(augmentation);, +        final Method constructor = new Method(name, owner, null, returnType, Arrays.asList(args), asm, reflect.getModifiers(), handle);, +                int index = methodName.lastIndexOf(".");, +, +                if (index >= 0) {, +                    String augmentation = methodName.substring(0, index);, +                    methodName = methodName.substring(index + 1);, +                    addMethodInternal(className, methodName, augmentation, rtn, args);, +                    addMethodInternal(className, methodName, null, rtn, args);, +    private void addMethodInternal(String struct, String name, String augmentation, Type rtn, Type[] args) {, +        if (augmentation == null) {, +            try {, +                implClass = Class.forName(augmentation);, +            } catch (ClassNotFoundException cnfe) {, +                throw new IllegalArgumentException("Augmentation class [" + augmentation + "]" +, +                    " not found for struct [" + struct + "] using method name [" + name + "].", cnfe);, +            }, +, +        final Method method =, +            new Method(name, owner, augmentation == null ? null : implClass, rtn, Arrays.asList(args), asm, modifiers, handle);, +        if (augmentation == null && java.lang.reflect.Modifier.isStatic(modifiers)) {, +                            if (method.augmentation != null) {, +                                impl = method.augmentation;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FeatureTestAugmentation.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.painless;, +, +public class FeatureTestAugmentation {, +    public static int getTotal(FeatureTest ft) {, +        return ft.getX() + ft.getY();, +    }, +, +    public static int addToTotal(FeatureTest ft, int add) {, +        return getTotal(ft) + add;, +    }, +, +    private FeatureTestAugmentation() {}, +}, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        public final Class<?> augmentation;, +        public Method(String name, Struct owner, Class<?> augmentation, Type rtn, List<Type> arguments,, +            if (augmentation != null) {, +                params[0] = augmentation;, +            if (augmentation != null) {, +                type = org.objectweb.asm.Type.getType(augmentation);, +        final Method constructor = new Method(name, owner, null, returnType, Arrays.asList(args), asm, reflect.getModifiers(), handle);, +                int index = methodName.lastIndexOf(".");]