[+++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +        public synchronized void readFrom(StreamInput in) throws IOException {, +        public synchronized void writeTo(StreamOutput out) throws IOException {, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +        public synchronized void readFrom(StreamInput in) throws IOException {, +        public synchronized void writeTo(StreamOutput out) throws IOException {, +++ b/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTest.java, +import org.junit.Test;, +, +    @Test, +    public void testConcurrentModificationIndexFileDetailsMap() throws InterruptedException {, +        final Index index = new Index();, +        final AtomicBoolean stop = new AtomicBoolean(false);, +        Streamer<Index> readWriteIndex = new Streamer<Index>(stop, index) {, +            @Override, +            Index createObj() {, +                return new Index();, +            }, +        };, +        Thread modifyThread = new Thread() {, +            public void run() {, +                for (int i = 0; i < 1000; i++) {, +                    index.addFileDetail(randomAsciiOfLength(10), 100, true);, +                }, +                stop.set(true);, +            }, +        };, +        readWriteIndex.start();, +        modifyThread.start();, +        modifyThread.join();, +        readWriteIndex.join();, +        assertThat(readWriteIndex.error.get(), equalTo(null));, +    }]