[+++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.unit.TimeValue;, +    /**, +     * Return a new executor that will automatically adjust the queue size based on queue throughput., +     *, +     * @param size number of fixed threads to use for executing tasks, +     * @param initialQueueCapacity initial size of the executor queue, +     * @param minQueueSize minimum queue size that the queue can be adjusted to, +     * @param maxQueueSize maximum queue size that the queue can be adjusted to, +     * @param frameSize number of tasks during which stats are collected before adjusting queue size, +     */, +    public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,, +                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,, +                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {, +        if (initialQueueCapacity == minQueueSize && initialQueueCapacity == maxQueueSize) {, +            return newFixed(name, size, initialQueueCapacity, threadFactory, contextHolder);, +        }, +, +        if (initialQueueCapacity <= 0) {, +            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +, +                            initialQueueCapacity);, +        }, +        ResizableBlockingQueue<Runnable> queue =, +                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity);, +        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,, +                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,, +                new EsAbortPolicy(), contextHolder);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.unit.TimeValue;, +    /**, +     * Return a new executor that will automatically adjust the queue size based on queue throughput., +     *, +     * @param size number of fixed threads to use for executing tasks, +     * @param initialQueueCapacity initial size of the executor queue, +     * @param minQueueSize minimum queue size that the queue can be adjusted to, +     * @param maxQueueSize maximum queue size that the queue can be adjusted to, +     * @param frameSize number of tasks during which stats are collected before adjusting queue size, +     */, +    public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,, +                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,, +                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {, +        if (initialQueueCapacity == minQueueSize && initialQueueCapacity == maxQueueSize) {, +            return newFixed(name, size, initialQueueCapacity, threadFactory, contextHolder);, +        }, +, +        if (initialQueueCapacity <= 0) {, +            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +, +                            initialQueueCapacity);, +        }, +        ResizableBlockingQueue<Runnable> queue =, +                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity);, +        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,, +                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,, +                new EsAbortPolicy(), contextHolder);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +    protected final String name;, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.unit.TimeValue;, +    /**, +     * Return a new executor that will automatically adjust the queue size based on queue throughput., +     *, +     * @param size number of fixed threads to use for executing tasks, +     * @param initialQueueCapacity initial size of the executor queue, +     * @param minQueueSize minimum queue size that the queue can be adjusted to, +     * @param maxQueueSize maximum queue size that the queue can be adjusted to, +     * @param frameSize number of tasks during which stats are collected before adjusting queue size, +     */, +    public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,, +                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,, +                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {, +        if (initialQueueCapacity == minQueueSize && initialQueueCapacity == maxQueueSize) {, +            return newFixed(name, size, initialQueueCapacity, threadFactory, contextHolder);, +        }, +, +        if (initialQueueCapacity <= 0) {, +            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +, +                            initialQueueCapacity);, +        }, +        ResizableBlockingQueue<Runnable> queue =, +                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity);, +        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,, +                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,, +                new EsAbortPolicy(), contextHolder);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +    protected final String name;, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/QueueResizingEsThreadPoolExecutor.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at]