[+++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query;, +, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +import java.io.IOException;, +import java.util.Locale;, +, +/**, + * Match query is a query that analyzes the text and constructs a query as the result of the analysis. It, + * can construct different queries based on the type provided., + */, +public class MatchQueryBuilder extends BaseQueryBuilder implements BoostableQueryBuilder<MatchQueryBuilder> {, +, +    public static enum Operator {, +        OR,, +        AND, +    }, +, +    public static enum Type {, +        /**, +         * The text is analyzed and terms are added to a boolean query., +         */, +        BOOLEAN,, +        /**, +         * The text is analyzed and used as a phrase query., +         */, +        PHRASE,, +        /**, +         * The text is analyzed and used in a phrase query, with the last term acting as a prefix., +         */, +        PHRASE_PREFIX, +    }, +, +    private final String name;, +, +    private final Object text;, +, +    private Type type;, +, +    private Operator operator;, +, +    private String analyzer;, +, +    private Float boost;, +, +    private Integer slop;, +, +    private String fuzziness;, +, +    private Integer prefixLength;, +, +    private Integer maxExpansions;, +, +    private String minimumShouldMatch;, +, +    private String rewrite = null;, +    private String fuzzyRewrite = null;, +, +    /**, +     * Constructs a new text query., +     */, +    public MatchQueryBuilder(String name, Object text) {, +        this.name = name;, +        this.text = text;, +    }, +, +    /**, +     * Sets the type of the text query., +     */, +    public MatchQueryBuilder type(Type type) {, +        this.type = type;, +        return this;, +    }, +, +    /**, +     * Sets the operator to use when using a boolean query. Defaults to <tt>OR</tt>., +     */, +    public MatchQueryBuilder operator(Operator operator) {, +        this.operator = operator;, +        return this;]