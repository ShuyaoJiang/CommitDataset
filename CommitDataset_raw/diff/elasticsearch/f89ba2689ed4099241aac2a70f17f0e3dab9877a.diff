[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +java.security.MessageDigest#clone() @ use org.elasticsearch.common.hash.MessageDigests, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +java.security.MessageDigest#clone() @ use org.elasticsearch.common.hash.MessageDigests, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' in a folder named `elasticsearch`, +# inside all plugins., +#|____elasticsearch/, +#| |____   <arbitrary name1>.jar <-- classes, resources, dependencies, +#| |____   <arbitrary nameN>.jar <-- any number of jars, +#| |____   plugin-descriptor.properties <-- example contents below:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +java.security.MessageDigest#clone() @ use org.elasticsearch.common.hash.MessageDigests, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' in a folder named `elasticsearch`, +# inside all plugins., +#|____elasticsearch/, +#| |____   <arbitrary name1>.jar <-- classes, resources, dependencies, +#| |____   <arbitrary nameN>.jar <-- any number of jars, +#| |____   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Returns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or multiple if different shards caused different exceptions, +     * Returns the root cause of this exception or multiple if different shards caused different exceptions., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +java.security.MessageDigest#clone() @ use org.elasticsearch.common.hash.MessageDigests, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' in a folder named `elasticsearch`, +# inside all plugins., +#|____elasticsearch/, +#| |____   <arbitrary name1>.jar <-- classes, resources, dependencies, +#| |____   <arbitrary nameN>.jar <-- any number of jars, +#| |____   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Returns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or multiple if different shards caused different exceptions, +     * Returns the root cause of this exception or multiple if different shards caused different exceptions., +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.CancelTasksAction;, +import org.elasticsearch.action.admin.cluster.node.tasks.cancel.TransportCancelTasksAction;, +        registerAction(CancelTasksAction.INSTANCE, TransportCancelTasksAction.class);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }]