[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +                        // Verifies that the current index settings can be updated with the updated dynamic settings., +                        // Now check that we can create the index with the updated settings (dynamic and non-dynamic)., +                        // This step is mandatory since we allow to update non-dynamic settings on closed indices., +                        indicesService.verifyIndexMetadata(updatedMetaData, updatedMetaData);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +                        // Verifies that the current index settings can be updated with the updated dynamic settings., +                        // Now check that we can create the index with the updated settings (dynamic and non-dynamic)., +                        // This step is mandatory since we allow to update non-dynamic settings on closed indices., +                        indicesService.verifyIndexMetadata(updatedMetaData, updatedMetaData);, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java, +    public void testInvalidUpdateOnClosedIndex() {, +        createIndex("test");, +        assertAcked(client().admin().indices().prepareClose("test").get());, +        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () ->, +            client(), +                .admin(), +                .indices(), +                .prepareUpdateSettings("test"), +                .setSettings(Settings.builder().put("index.analysis.char_filter.invalid_char.type", "invalid")), +                .get());, +        assertEquals(exception.getMessage(), "Unknown char_filter type [invalid] for [invalid_char]");, +    }]