[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +import java.lang.reflect.Method;, +import java.util.Collections;, +import java.util.HashMap;, +            Class<?> found = additionalClasses.get(name);, +            if (found != null) {, +                return found;, +            found = painlessLookup.canonicalTypeNameToType(name.replace('$', '.'));, +     * Classes that do not exist in the lookup, but are needed by the script factories., +     */, +    private final Map<String, Class<?>> additionalClasses;, +, +    /**, +        Map<String, Class<?>> additionalClasses = new HashMap<>();, +        additionalClasses.put(scriptClass.getName(), scriptClass);, +        addFactoryMethod(additionalClasses, factoryClass, "newInstance");, +        addFactoryMethod(additionalClasses, statefulFactoryClass, "newFactory");, +        addFactoryMethod(additionalClasses, statefulFactoryClass, "newInstance");, +        this.additionalClasses = Collections.unmodifiableMap(additionalClasses);, +    }, +, +    private static void addFactoryMethod(Map<String, Class<?>> additionalClasses, Class<?> factoryClass, String methodName) {, +        if (factoryClass == null) {, +            return;, +        }, +, +        Method factoryMethod = null;, +        for (Method method : factoryClass.getMethods()) {, +            if (methodName.equals(method.getName())) {, +                factoryMethod = method;, +                break;, +            }, +        }, +        if (factoryMethod == null) {, +            return;, +        }, +, +        additionalClasses.put(factoryClass.getName(), factoryClass);, +        for (int i = 0; i < factoryMethod.getParameterTypes().length; ++i) {, +            Class<?> parameterClazz = factoryMethod.getParameterTypes()[i];, +            additionalClasses.put(parameterClazz.getName(), parameterClazz);, +        }]