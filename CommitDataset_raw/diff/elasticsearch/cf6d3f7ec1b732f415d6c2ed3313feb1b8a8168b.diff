[+++ b/client/rest/src/main/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumer.java, +    private final int bufferLimitBytes;, +        this.bufferLimitBytes = DEFAULT_BUFFER_LIMIT;, +        this.bufferLimitBytes = bufferLimit;, +    }, +, +    /**, +     * Get the limit of the buffer., +     */, +    public int getBufferLimit() {, +        return bufferLimitBytes;, +        if (len > bufferLimitBytes) {, +                    "] for the configured buffer limit [" + bufferLimitBytes + "]");, +++ b/client/rest/src/main/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumer.java, +    private final int bufferLimitBytes;, +        this.bufferLimitBytes = DEFAULT_BUFFER_LIMIT;, +        this.bufferLimitBytes = bufferLimit;, +    }, +, +    /**, +     * Get the limit of the buffer., +     */, +    public int getBufferLimit() {, +        return bufferLimitBytes;, +        if (len > bufferLimitBytes) {, +                    "] for the configured buffer limit [" + bufferLimitBytes + "]");, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +                org.elasticsearch.index.engine.DeleteFailedEngineException::new, 28),, +                org.elasticsearch.index.engine.IndexFailedEngineException::new, 80),, +++ b/client/rest/src/main/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumer.java, +    private final int bufferLimitBytes;, +        this.bufferLimitBytes = DEFAULT_BUFFER_LIMIT;, +        this.bufferLimitBytes = bufferLimit;, +    }, +, +    /**, +     * Get the limit of the buffer., +     */, +    public int getBufferLimit() {, +        return bufferLimitBytes;, +        if (len > bufferLimitBytes) {, +                    "] for the configured buffer limit [" + bufferLimitBytes + "]");, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +                org.elasticsearch.index.engine.DeleteFailedEngineException::new, 28),, +                org.elasticsearch.index.engine.IndexFailedEngineException::new, 80),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_ID = 5000099;, +    public static final Version V_5_0_0 = new Version(V_5_0_0_ID, org.apache.lucene.util.Version.LUCENE_6_2_0);, +            case V_5_0_0_ID:, +                return V_5_0_0;, +++ b/client/rest/src/main/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumer.java, +    private final int bufferLimitBytes;, +        this.bufferLimitBytes = DEFAULT_BUFFER_LIMIT;, +        this.bufferLimitBytes = bufferLimit;, +    }, +, +    /**, +     * Get the limit of the buffer., +     */, +    public int getBufferLimit() {, +        return bufferLimitBytes;, +        if (len > bufferLimitBytes) {, +                    "] for the configured buffer limit [" + bufferLimitBytes + "]");, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +                org.elasticsearch.index.engine.DeleteFailedEngineException::new, 28),, +                org.elasticsearch.index.engine.IndexFailedEngineException::new, 80),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_ID = 5000099;, +    public static final Version V_5_0_0 = new Version(V_5_0_0_ID, org.apache.lucene.util.Version.LUCENE_6_2_0);, +            case V_5_0_0_ID:, +                return V_5_0_0;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.index.TransportIndexAction;, +import org.elasticsearch.index.translog.Translog.Location;, +public class TransportShardBulkAction extends TransportWriteAction<BulkShardRequest, BulkShardResponse> {, +                indexNameExpressionResolver, BulkShardRequest::new, ThreadPool.Names.BULK);, +    protected WriteResult<BulkShardResponse> onPrimaryShard(BulkShardRequest request, IndexShard primary) throws Exception {, +        return new WriteResult<>(response, location);, +    private Translog.Location executeBulkItemRequest(IndexMetaData metaData, IndexShard indexShard,, +                                                     Translog.Location location, int requestIndex) {, +        preVersions[requestIndex] = request.items()[requestIndex].request().version();, +        preVersionTypes[requestIndex] = request.items()[requestIndex].request().versionType();, +        DocWriteRequest.OpType opType = request.items()[requestIndex].request().opType();, +            WriteResult<? extends DocWriteResponse> writeResult = innerExecuteBulkItemRequest(metaData, indexShard,, +                request, requestIndex);, +            if (writeResult.getLocation() != null) {, +                location = locationToSync(location, writeResult.getLocation());, +            } else {, +                assert writeResult.getResponse().getResult() == DocWriteResponse.Result.NOOP, +                        : "only noop operation can have null next operation";, +            BulkItemRequest item = request.items()[requestIndex];, +            // add the response, +            setResponse(item, new BulkItemResponse(item.id(), opType, writeResult.getResponse()));, +                throw (ElasticsearchException) e;]