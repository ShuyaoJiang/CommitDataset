[+++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/build.gradle, +// we must use buildscript + apply so that an external plugin, +// can apply this file, since the plugins directive is not, +// supported through file includes, +buildscript {, +  repositories {, +    jcenter(), +  dependencies {, +    classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1', +  }, +}, +apply plugin: 'groovy', +apply plugin: 'com.bmuschko.nexus', +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/build.gradle, +// we must use buildscript + apply so that an external plugin, +// can apply this file, since the plugins directive is not, +// supported through file includes, +buildscript {, +  repositories {, +    jcenter(), +  dependencies {, +    classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1', +  }, +}, +apply plugin: 'groovy', +apply plugin: 'com.bmuschko.nexus', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    int baseHttpPort = 9400, +    int baseTransportPort = 9500, +    /**, +     * A closure to call before the cluster is considered ready. The closure is passed the node info,, +     * as well as a groovy AntBuilder, to enable running ant condition checks. The default wait, +     * condition is for http on the http port., +     */, +    @Input, +    Closure waitCondition = { NodeInfo node, AntBuilder ant ->, +        File tmpFile = new File(node.cwd, 'wait.success'), +        ant.get(src: "http://localhost:${node.httpPort()}",, +                dest: tmpFile.toString(),, +                ignoreerrors: true, // do not fail on error, so logging buffers can be flushed by the wait task, +                retries: 10), +        return tmpFile.exists(), +    }, +, +    Map<String, String> settings = new HashMap<>(), +, +    void systemProperty(String property, String value) {, +        systemProperties.put(property, value), +    void setting(String name, String value) {, +        settings.put(name, value), +    }, +, +    @Input, +    void plugin(String name, FileCollection file) {, +        plugins.put(name, file), +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/build.gradle, +// we must use buildscript + apply so that an external plugin, +// can apply this file, since the plugins directive is not, +// supported through file includes, +buildscript {, +  repositories {, +    jcenter(), +  dependencies {, +    classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1', +  }, +}, +apply plugin: 'groovy', +apply plugin: 'com.bmuschko.nexus', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    int baseHttpPort = 9400, +    int baseTransportPort = 9500, +    /**, +     * A closure to call before the cluster is considered ready. The closure is passed the node info,, +     * as well as a groovy AntBuilder, to enable running ant condition checks. The default wait, +     * condition is for http on the http port., +     */, +    @Input, +    Closure waitCondition = { NodeInfo node, AntBuilder ant ->, +        File tmpFile = new File(node.cwd, 'wait.success'), +        ant.get(src: "http://localhost:${node.httpPort()}",]