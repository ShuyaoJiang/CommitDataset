[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    protected final Function<String, DiscoveryNode> nodeIdToDiscoveryNode;, +                                        Function<String, DiscoveryNode> nodeIdToDiscoveryNode,, +        this.nodeIdToDiscoveryNode = nodeIdToDiscoveryNode;, +            final DiscoveryNode node = nodeIdToDiscoveryNode.apply(shard.currentNodeId());, +            if (node == null) {, +                sendExecuteFirstPhase(node, transportRequest , new ActionListener<FirstResult>() {, +                            onFirstPhaseResult(shardIndex, shard, node.getId(), shardIt, t);, +                DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.shardTarget().nodeId());, +                sendReleaseSearchContext(entry.value.id(), node);, +                        DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.queryResult().shardTarget().nodeId());, +                        sendReleaseSearchContext(entry.value.queryResult().id(), node);, +    protected void sendReleaseSearchContext(long contextId, DiscoveryNode node) {, +        if (node != null) {, +            searchTransportService.sendFreeContext(node, contextId, request);, +    protected abstract void sendExecuteFirstPhase(DiscoveryNode node, ShardSearchTransportRequest request,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    protected final Function<String, DiscoveryNode> nodeIdToDiscoveryNode;, +                                        Function<String, DiscoveryNode> nodeIdToDiscoveryNode,, +        this.nodeIdToDiscoveryNode = nodeIdToDiscoveryNode;, +            final DiscoveryNode node = nodeIdToDiscoveryNode.apply(shard.currentNodeId());, +            if (node == null) {, +                sendExecuteFirstPhase(node, transportRequest , new ActionListener<FirstResult>() {, +                            onFirstPhaseResult(shardIndex, shard, node.getId(), shardIt, t);, +                DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.shardTarget().nodeId());, +                sendReleaseSearchContext(entry.value.id(), node);, +                        DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.queryResult().shardTarget().nodeId());, +                        sendReleaseSearchContext(entry.value.queryResult().id(), node);, +    protected void sendReleaseSearchContext(long contextId, DiscoveryNode node) {, +        if (node != null) {, +            searchTransportService.sendFreeContext(node, contextId, request);, +    protected abstract void sendExecuteFirstPhase(DiscoveryNode node, ShardSearchTransportRequest request,, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    protected final Function<String, DiscoveryNode> nodeIdToDiscoveryNode;, +                                        Function<String, DiscoveryNode> nodeIdToDiscoveryNode,, +        this.nodeIdToDiscoveryNode = nodeIdToDiscoveryNode;, +            final DiscoveryNode node = nodeIdToDiscoveryNode.apply(shard.currentNodeId());, +            if (node == null) {, +                sendExecuteFirstPhase(node, transportRequest , new ActionListener<FirstResult>() {, +                            onFirstPhaseResult(shardIndex, shard, node.getId(), shardIt, t);, +                DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.shardTarget().nodeId());, +                sendReleaseSearchContext(entry.value.id(), node);, +                        DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.queryResult().shardTarget().nodeId());, +                        sendReleaseSearchContext(entry.value.queryResult().id(), node);, +    protected void sendReleaseSearchContext(long contextId, DiscoveryNode node) {, +        if (node != null) {, +            searchTransportService.sendFreeContext(node, contextId, request);, +    protected abstract void sendExecuteFirstPhase(DiscoveryNode node, ShardSearchTransportRequest request,, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchDfsQueryAndFetchAsyncAction.java, +                                      Function<String, DiscoveryNode> nodeIdToDiscoveryNode,, +        super(logger, searchTransportService, nodeIdToDiscoveryNode, aliasFilter, concreteIndexBoosts, executor,, +    protected void sendExecuteFirstPhase(DiscoveryNode node, ShardSearchTransportRequest request,, +        searchTransportService.sendExecuteDfs(node, request, task, listener);, +            DiscoveryNode node = nodeIdToDiscoveryNode.apply(dfsResult.shardTarget().nodeId());, +            executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +                            final DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +        searchTransportService.sendExecuteFetch(node, querySearchRequest, task, new ActionListener<QueryFetchSearchResult>() {, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    protected final Function<String, DiscoveryNode> nodeIdToDiscoveryNode;, +                                        Function<String, DiscoveryNode> nodeIdToDiscoveryNode,, +        this.nodeIdToDiscoveryNode = nodeIdToDiscoveryNode;, +            final DiscoveryNode node = nodeIdToDiscoveryNode.apply(shard.currentNodeId());, +            if (node == null) {, +                sendExecuteFirstPhase(node, transportRequest , new ActionListener<FirstResult>() {, +                            onFirstPhaseResult(shardIndex, shard, node.getId(), shardIt, t);, +                DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.shardTarget().nodeId());, +                sendReleaseSearchContext(entry.value.id(), node);, +                        DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.queryResult().shardTarget().nodeId());, +                        sendReleaseSearchContext(entry.value.queryResult().id(), node);, +    protected void sendReleaseSearchContext(long contextId, DiscoveryNode node) {, +        if (node != null) {, +            searchTransportService.sendFreeContext(node, contextId, request);, +    protected abstract void sendExecuteFirstPhase(DiscoveryNode node, ShardSearchTransportRequest request,, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchDfsQueryAndFetchAsyncAction.java, +                                      Function<String, DiscoveryNode> nodeIdToDiscoveryNode,, +        super(logger, searchTransportService, nodeIdToDiscoveryNode, aliasFilter, concreteIndexBoosts, executor,, +    protected void sendExecuteFirstPhase(DiscoveryNode node, ShardSearchTransportRequest request,, +        searchTransportService.sendExecuteDfs(node, request, task, listener);, +            DiscoveryNode node = nodeIdToDiscoveryNode.apply(dfsResult.shardTarget().nodeId());, +            executeSecondPhase(entry.index, dfsResult, counter, node, querySearchRequest);, +                            final DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +        searchTransportService.sendExecuteFetch(node, querySearchRequest, task, new ActionListener<QueryFetchSearchResult>() {, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchDfsQueryThenFetchAsyncAction.java, +                                       Function<String, DiscoveryNode> nodeIdToDiscoveryNode,, +        super(logger, searchTransportService, nodeIdToDiscoveryNode, aliasFilter, concreteIndexBoosts, executor,, +    protected void sendExecuteFirstPhase(DiscoveryNode node, ShardSearchTransportRequest request,, +        searchTransportService.sendExecuteDfs(node, request, task, listener);, +            DiscoveryNode node = nodeIdToDiscoveryNode.apply(dfsResult.shardTarget().nodeId());, +            executeQuery(entry.index, dfsResult, counter, querySearchRequest, node);, +                      final QuerySearchRequest querySearchRequest, final DiscoveryNode node) {]