[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsRequest.java, +    public Settings settings() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsRequest.java, +    public Settings settings() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsResponse.java, +    public UpdateSettingsResponse(boolean acknowledged) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsRequest.java, +    public Settings settings() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsResponse.java, +    public UpdateSettingsResponse(boolean acknowledged) {, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsRequest.java, +    public Settings settings() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsResponse.java, +    public UpdateSettingsResponse(boolean acknowledged) {, +++ /dev/null, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/SetSingleNodeAllocateStepTests.java, +import java.io.IOException;, +import java.util.stream.Collectors;, +, +import static org.hamcrest.Matchers.anyOf;, +import static org.hamcrest.Matchers.equalTo;, +    public static void assertSettingsRequestContainsValueFrom(UpdateSettingsRequest request, String settingsKey,, +                                                              Set<String> acceptableValues, boolean assertOnlyKeyInSettings,, +                                                              String... expectedIndices) {, +        assertNotNull(request);, +        assertArrayEquals(expectedIndices, request.indices());, +        assertThat(request.settings().get(settingsKey), anyOf(acceptableValues.stream().map(e -> equalTo(e)).collect(Collectors.toList())));, +        if (assertOnlyKeyInSettings) {, +            assertEquals(1, request.settings().size());, +        }, +    }, +, +    public void testPerformActionNoAttrs() throws IOException {, +    public void testPerformActionAttrsAllNodesValid() throws IOException {, +    public void testPerformActionAttrsSomeNodesValid() throws IOException {, +                assertSettingsRequestContainsValueFrom(request,, +    private void assertNodeSelected(IndexMetaData indexMetaData, Index index,, +                                    Set<String> validNodeNames, DiscoveryNodes.Builder nodes) throws IOException {, +, +                assertSettingsRequestContainsValueFrom(request,, +                listener.onResponse(new UpdateSettingsResponse(true));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsRequest.java, +    public Settings settings() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/settings/put/UpdateSettingsResponse.java, +    public UpdateSettingsResponse(boolean acknowledged) {, +++ /dev/null, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/SetSingleNodeAllocateStepTests.java, +import java.io.IOException;, +import java.util.stream.Collectors;, +, +import static org.hamcrest.Matchers.anyOf;, +import static org.hamcrest.Matchers.equalTo;, +    public static void assertSettingsRequestContainsValueFrom(UpdateSettingsRequest request, String settingsKey,, +                                                              Set<String> acceptableValues, boolean assertOnlyKeyInSettings,, +                                                              String... expectedIndices) {, +        assertNotNull(request);, +        assertArrayEquals(expectedIndices, request.indices());, +        assertThat(request.settings().get(settingsKey), anyOf(acceptableValues.stream().map(e -> equalTo(e)).collect(Collectors.toList())));, +        if (assertOnlyKeyInSettings) {, +            assertEquals(1, request.settings().size());, +        }, +    }, +, +    public void testPerformActionNoAttrs() throws IOException {, +    public void testPerformActionAttrsAllNodesValid() throws IOException {, +    public void testPerformActionAttrsSomeNodesValid() throws IOException {, +                assertSettingsRequestContainsValueFrom(request,, +    private void assertNodeSelected(IndexMetaData indexMetaData, Index index,, +                                    Set<String> validNodeNames, DiscoveryNodes.Builder nodes) throws IOException {, +, +                assertSettingsRequestContainsValueFrom(request,, +                listener.onResponse(new UpdateSettingsResponse(true));, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/UpdateSettingsStepTests.java, +import static org.hamcrest.Matchers.equalTo;, +, +    public void testPerformAction() throws Exception {, +, +                assertThat(request.settings(), equalTo(step.getSettings()));, +                assertThat(request.indices(), equalTo(new String[] {indexMetaData.getIndex().getName()}));, +                listener.onResponse(new UpdateSettingsResponse(true));, +                assertThat(request.settings(), equalTo(step.getSettings()));, +                assertThat(request.indices(), equalTo(new String[] {indexMetaData.getIndex().getName()}));]