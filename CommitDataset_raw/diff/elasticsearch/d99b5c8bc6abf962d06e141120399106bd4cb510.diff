[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import org.apache.lucene.search.MatchAllDocsQuery;, +import org.apache.lucene.search.MatchNoDocsQuery;, +import org.apache.lucene.search.Query;, +    private volatile ScheduledFuture<?> refreshScheduledFuture;, +    private volatile ScheduledFuture<?> mergeScheduleFuture;, +            assert Version.CURRENT.luceneVersion == org.apache.lucene.util.Version.LUCENE_5_2_1;, +            // TODO: remove this hack in Lucene 5.4, use UsageTrackingQueryCachingPolicy directly, +            // See https://issues.apache.org/jira/browse/LUCENE-6748, +            // cachingPolicy = new UsageTrackingQueryCachingPolicy();, +, +            final QueryCachingPolicy wrapped = new UsageTrackingQueryCachingPolicy();, +            cachingPolicy = new QueryCachingPolicy() {, +, +                @Override, +                public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {, +                    if (query instanceof MatchAllDocsQuery, +                            // MatchNoDocsQuery currently rewrites to a BooleanQuery,, +                            // but who knows, it might get its own Weight one day, +                            || query instanceof MatchNoDocsQuery) {, +                        return false;, +                    }, +                    if (query instanceof BooleanQuery) {, +                        BooleanQuery bq = (BooleanQuery) query;, +                        if (bq.clauses().isEmpty()) {, +                            return false;, +                        }, +                    }, +                    if (query instanceof DisjunctionMaxQuery) {, +                        DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;, +                        if (dmq.getDisjuncts().isEmpty()) {, +                            return false;, +                        }, +                    }, +                    return wrapped.shouldCache(query, context);, +                }, +, +                @Override, +                public void onUse(Query query) {, +                    wrapped.onUse(query);, +                }, +            };]