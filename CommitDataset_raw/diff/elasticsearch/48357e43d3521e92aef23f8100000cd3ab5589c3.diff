[+++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                    .timeout(request.timeout()), +                    .timeout(request.timeout()), +                    .timeout(request.timeout()), +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                    .timeout(request.timeout()), +                    .timeout(request.timeout()), +                    .timeout(request.timeout()), +++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.junit.Before;, +import static java.util.Collections.emptyList;, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonList;, +import static org.elasticsearch.script.MockScriptEngine.mockInlineScript;, +    private UpdateHelper updateHelper;, +, +    @Before, +    public void setUp() throws Exception {, +        super.setUp();, +        final Path genericConfigFolder = createTempDir();, +        final Settings baseSettings = Settings.builder(), +                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()), +                .put(Environment.PATH_CONF_SETTING.getKey(), genericConfigFolder), +                .build();, +        final Environment environment = new Environment(baseSettings);, +        final Map<String, Function<Map<String, Object>, Object>> scripts =  new HashMap<>();, +        scripts.put(, +                "ctx._source.update_timestamp = ctx._now",, +                vars -> {, +                    @SuppressWarnings("unchecked"), +                    final Map<String, Object> ctx = (Map<String, Object>) vars.get("ctx");, +                    @SuppressWarnings("unchecked"), +                    final Map<String, Object> source = (Map<String, Object>) ctx.get("_source");, +                    source.put("update_timestamp", ctx.get("_now"));, +                    return null;, +                });, +        scripts.put(, +                "ctx._timestamp = ctx._now",, +                vars -> {, +                    @SuppressWarnings("unchecked"), +                    final Map<String, Object> ctx = (Map<String, Object>) vars.get("ctx");, +                    ctx.put("_timestamp", ctx.get("_now"));, +                    return null;, +                });, +        scripts.put(, +                "ctx.op = delete",, +                vars -> {, +                    @SuppressWarnings("unchecked"), +                    final Map<String, Object> ctx = (Map<String, Object>) vars.get("ctx");, +                    ctx.put("op", "delete");, +                    return null;, +                });, +        scripts.put("return", vars -> null);, +        final ScriptContextRegistry scriptContextRegistry = new ScriptContextRegistry(emptyList());, +        final MockScriptEngine engine = new MockScriptEngine("mock", scripts);, +        final ScriptEngineRegistry scriptEngineRegistry =, +                new ScriptEngineRegistry(singletonList(engine));, +, +        final ScriptSettings scriptSettings =, +                new ScriptSettings(scriptEngineRegistry, scriptContextRegistry);, +        final ResourceWatcherService watcherService =, +                new ResourceWatcherService(baseSettings, null);, +        ScriptService scriptService = new ScriptService(, +                baseSettings,, +                environment,, +                watcherService,, +                scriptEngineRegistry,, +                scriptContextRegistry,, +                scriptSettings);, +        final Settings settings = settings(Version.CURRENT).build();, +, +        updateHelper = new UpdateHelper(settings, scriptService);, +    }, +, +        assertThat(params, equalTo(emptyMap()));, +        assertThat(params, equalTo(emptyMap()));, +                .script(mockInlineScript("ctx._source.update_timestamp = ctx._now")), +            assertEquals(nowInMillis, indexAction.sourceAsMap().get("update_timestamp"));, +                .script(mockInlineScript("ctx._timestamp = ctx._now")), +    public void testIndexTimeout() {, +        final GetResult getResult =, +                new GetResult("test", "type", "1", 0, true, new BytesArray("{\"f\":\"v\"}"), null);, +        final UpdateRequest updateRequest =, +                new UpdateRequest("test", "type", "1"), +                        .script(mockInlineScript("return")), +                        .timeout(randomTimeValue());, +        runTimeoutTest(getResult, updateRequest);, +    }, +, +    public void testDeleteTimeout() {, +        final GetResult getResult =, +                new GetResult("test", "type", "1", 0, true, new BytesArray("{\"f\":\"v\"}"), null);, +        final UpdateRequest updateRequest =, +                new UpdateRequest("test", "type", "1"), +                        .script(mockInlineScript("ctx.op = delete")), +                        .timeout(randomTimeValue());, +        runTimeoutTest(getResult, updateRequest);, +    }]