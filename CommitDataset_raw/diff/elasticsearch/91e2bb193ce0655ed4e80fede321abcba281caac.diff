[+++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +        RetryListener<Response> retryListener = new RetryListener<>(callback, listener, nodes, index, threadPool, logger);, +        private final ESLogger logger;, +        private ThreadPool threadPool;, +        public RetryListener(NodeListenerCallback<Response> callback, ActionListener<Response> listener, ImmutableList<DiscoveryNode> nodes,, +                             int index, ThreadPool threadPool, ESLogger logger) {, +            this.threadPool = threadPool;, +            this.logger = logger;, +                    runFailureInListenerThreadPool(new NoNodeAvailableException("None of the configured nodes were available: " + nodes, e));, +                    } catch(final Throwable t) {, +                        runFailureInListenerThreadPool(t);, +                runFailureInListenerThreadPool(e);, +, +        // need to ensure to not block the netty I/O thread, in case of retry due to the node sampling, +        private void runFailureInListenerThreadPool(final Throwable t) {, +            threadPool.executor(ThreadPool.Names.LISTENER).execute(new AbstractRunnable() {, +                @Override, +                protected void doRun() throws Exception {, +                    listener.onFailure(t);, +                }, +, +                @Override, +                public void onFailure(Throwable t) {, +                    if (logger.isDebugEnabled()) {, +                        logger.debug("Could not execute failure listener: [{}]", t, t.getMessage());, +                    } else {, +                        logger.error("Could not execute failure listener: [{}]", t.getMessage());, +                    }, +                }, +            });, +        }]