[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/input/search/ExecutableSearchInput.java, +import java.util.Collections;, +    private static final Params EMPTY_PARAMS = new MapParams(Collections.emptyMap());, +, +            Params params;, +            if (request.isRestTotalHitsAsint()) {, +                params = new MapParams(Collections.singletonMap("rest_total_hits_a_int", "true"));, +            } else {, +                params = EMPTY_PARAMS;, +            }, +            BytesReference bytes = XContentHelper.toXContent(response, XContentType.JSON, params, false);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/input/search/ExecutableSearchInput.java, +import java.util.Collections;, +    private static final Params EMPTY_PARAMS = new MapParams(Collections.emptyMap());, +, +            Params params;, +            if (request.isRestTotalHitsAsint()) {, +                params = new MapParams(Collections.singletonMap("rest_total_hits_a_int", "true"));, +            } else {, +                params = EMPTY_PARAMS;, +            }, +            BytesReference bytes = XContentHelper.toXContent(response, XContentType.JSON, params, false);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/support/search/WatcherSearchTemplateRequest.java, +    private boolean restTotalHitsAsInt;, +        this.restTotalHitsAsInt = original.restTotalHitsAsInt;, +    public boolean isRestTotalHitsAsint() {, +        return restTotalHitsAsInt;, +    }, +, +    /**, +     * Indicates whether the total hits in the response should be, +     * serialized as number (<code>true</code>) or as an object (<code>false</code>)., +     * Defaults to false., +     */, +    public void setRestTotalHitsAsInt(boolean value) {, +        this.restTotalHitsAsInt = restTotalHitsAsInt;, +    }, +, +        if (restTotalHitsAsInt) {, +            builder.field(REST_TOTAL_HITS_AS_INT_FIELD.getPreferredName(), restTotalHitsAsInt);, +        }, +        boolean totalHitsAsInt = false;, +                } else if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {, +                    totalHitsAsInt = parser.booleanValue();, +            } else if (token == XContentParser.Token.VALUE_BOOLEAN) {, +                if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {, +                    totalHitsAsInt = parser.booleanValue();, +                } else {, +                    throw new ElasticsearchParseException("could not read search request. unexpected boolean field [" +, +                        currentFieldName + "]");, +                }, +        WatcherSearchTemplateRequest request = new WatcherSearchTemplateRequest(indices.toArray(new String[0]),, +            types.toArray(new String[0]), searchType, indicesOptions, searchSource, template);, +        request.setRestTotalHitsAsInt(totalHitsAsInt);, +        return request;, +                Objects.equals(template, other.template) &&, +                Objects.equals(restTotalHitsAsInt, other.restTotalHitsAsInt);, +        return Objects.hash(indices, types, searchType, indicesOptions, searchSource, template, restTotalHitsAsInt);, +    private static final ParseField REST_TOTAL_HITS_AS_INT_FIELD = new ParseField("rest_total_hits_as_int");, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/input/search/ExecutableSearchInput.java, +import java.util.Collections;, +    private static final Params EMPTY_PARAMS = new MapParams(Collections.emptyMap());, +, +            Params params;, +            if (request.isRestTotalHitsAsint()) {, +                params = new MapParams(Collections.singletonMap("rest_total_hits_a_int", "true"));, +            } else {, +                params = EMPTY_PARAMS;, +            }, +            BytesReference bytes = XContentHelper.toXContent(response, XContentType.JSON, params, false);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/support/search/WatcherSearchTemplateRequest.java, +    private boolean restTotalHitsAsInt;, +        this.restTotalHitsAsInt = original.restTotalHitsAsInt;, +    public boolean isRestTotalHitsAsint() {, +        return restTotalHitsAsInt;, +    }, +, +    /**, +     * Indicates whether the total hits in the response should be, +     * serialized as number (<code>true</code>) or as an object (<code>false</code>)., +     * Defaults to false., +     */, +    public void setRestTotalHitsAsInt(boolean value) {, +        this.restTotalHitsAsInt = restTotalHitsAsInt;, +    }, +, +        if (restTotalHitsAsInt) {, +            builder.field(REST_TOTAL_HITS_AS_INT_FIELD.getPreferredName(), restTotalHitsAsInt);, +        }, +        boolean totalHitsAsInt = false;, +                } else if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {, +                    totalHitsAsInt = parser.booleanValue();, +            } else if (token == XContentParser.Token.VALUE_BOOLEAN) {, +                if (REST_TOTAL_HITS_AS_INT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {, +                    totalHitsAsInt = parser.booleanValue();, +                } else {, +                    throw new ElasticsearchParseException("could not read search request. unexpected boolean field [" +, +                        currentFieldName + "]");, +                }, +        WatcherSearchTemplateRequest request = new WatcherSearchTemplateRequest(indices.toArray(new String[0]),]