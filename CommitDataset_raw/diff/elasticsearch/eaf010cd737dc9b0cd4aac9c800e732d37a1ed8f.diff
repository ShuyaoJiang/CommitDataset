[+++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/JdbcCsvSpecIT.java, +, +    @Override, +    protected int fetchSize() {, +        // using a smaller fetchSize for nested documents' tests to uncover bugs, +        // similar with https://github.com/elastic/elasticsearch/issues/35176 quicker, +        return fileName.startsWith("nested") && randomBoolean() ? randomIntBetween(1,5) : super.fetchSize();, +    }, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/JdbcCsvSpecIT.java, +, +    @Override, +    protected int fetchSize() {, +        // using a smaller fetchSize for nested documents' tests to uncover bugs, +        // similar with https://github.com/elastic/elasticsearch/issues/35176 quicker, +        return fileName.startsWith("nested") && randomBoolean() ? randomIntBetween(1,5) : super.fetchSize();, +    }, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/FetchSizeTestCase.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +        Request request = new Request("PUT", "/test");, +        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();, +        createIndex.startObject("mappings");, +        {, +            createIndex.startObject("doc");, +            {, +                createIndex.startObject("properties");, +                {, +                    createIndex.startObject("nested").field("type", "nested");, +                    createIndex.startObject("properties");, +                    createIndex.startObject("inner_field").field("type", "integer").endObject();, +                    createIndex.endObject();, +                    createIndex.endObject();, +                }, +                createIndex.endObject();, +            }, +            createIndex.endObject();, +        }, +        createIndex.endObject().endObject();, +        request.setJsonEntity(Strings.toString(createIndex));, +        client().performRequest(request);, +        , +        request = new Request("PUT", "/test/doc/_bulk");, +        StringBuilder bulkLine;, +            bulkLine = new StringBuilder("{\"test_field\":" + i);, +            bulkLine.append(", \"nested\":[");, +            // each document will have a nested field with 1 - 5 values, +            for (int j = 0; j <= i % 5; j++) {, +                bulkLine.append("{\"inner_field\":" + j + "}" + ((j == i % 5) ? "" : ","));, +            }, +            bulkLine.append("]");, +            bulk.append(bulkLine).append("}\n");, +    , +    /**, +     * Test for nested documents., +     */, +    public void testNestedDocuments() throws Exception {, +        try (Connection c = esJdbc();, +                Statement s = c.createStatement()) {, +            s.setFetchSize(5);, +            try (ResultSet rs = s.executeQuery("SELECT test_field, nested.* FROM test ORDER BY test_field ASC")) {, +                assertTrue("Empty result set!", rs.next());, +                for (int i = 0; i < 20; i++) {, +                    assertEquals(15, rs.getFetchSize());, +                    assertNestedDocuments(rs, i);, +                }, +                assertFalse(rs.next());, +            }, +        }, +        assertNoSearchContexts();, +    }, +, +    private void assertNestedDocuments(ResultSet rs, int i) throws SQLException {, +        for (int j = 0; j <= i % 5; j++) {, +            assertEquals(i, rs.getInt(1));, +            assertEquals(j, rs.getInt(2));, +            // don't check the very last row in the result set, +            assertTrue("No more entries left after row " + rs.getRow(), (i+j == 23 || rs.next()));, +        }, +    }, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/JdbcCsvSpecIT.java, +, +    @Override, +    protected int fetchSize() {, +        // using a smaller fetchSize for nested documents' tests to uncover bugs, +        // similar with https://github.com/elastic/elasticsearch/issues/35176 quicker, +        return fileName.startsWith("nested") && randomBoolean() ? randomIntBetween(1,5) : super.fetchSize();, +    }, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/FetchSizeTestCase.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +        Request request = new Request("PUT", "/test");, +        XContentBuilder createIndex = JsonXContent.contentBuilder().startObject();, +        createIndex.startObject("mappings");, +        {, +            createIndex.startObject("doc");, +            {, +                createIndex.startObject("properties");, +                {]