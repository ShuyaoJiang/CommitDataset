[+++ b/build.gradle, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/client/transport/build.gradle, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +, + * This class pre-installs the {@link Netty3Plugin}, {@link ReindexPlugin}, {@link PercolatorPlugin}, and {@link MustachePlugin}, +    private static final Collection<Class<? extends Plugin>> PRE_INSTALLED_PLUGINS = Collections.unmodifiableList(Arrays.asList(, +        TransportPlugin.class, ReindexPlugin.class, PercolatorPlugin.class, MustachePlugin.class));, +    /**, +     * The default transport implementation for the transport client., +     */, +    public static final class TransportPlugin extends Netty3Plugin {, +        // disable assertions for permissions since we might not have the permissions here, +        // compared to if we are loaded as a real module to the es server, +        public TransportPlugin(Settings settings) {, +            super(Settings.builder().put("netty.assert.buglevel", false).put(settings).build());, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +, + * This class pre-installs the {@link Netty3Plugin}, {@link ReindexPlugin}, {@link PercolatorPlugin}, and {@link MustachePlugin}, +    private static final Collection<Class<? extends Plugin>> PRE_INSTALLED_PLUGINS = Collections.unmodifiableList(Arrays.asList(, +        TransportPlugin.class, ReindexPlugin.class, PercolatorPlugin.class, MustachePlugin.class));, +    /**, +     * The default transport implementation for the transport client., +     */, +    public static final class TransportPlugin extends Netty3Plugin {, +        // disable assertions for permissions since we might not have the permissions here, +        // compared to if we are loaded as a real module to the es server, +        public TransportPlugin(Settings settings) {, +            super(Settings.builder().put("netty.assert.buglevel", false).put(settings).build());, +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +, + * This class pre-installs the {@link Netty3Plugin}, {@link ReindexPlugin}, {@link PercolatorPlugin}, and {@link MustachePlugin}, +    private static final Collection<Class<? extends Plugin>> PRE_INSTALLED_PLUGINS = Collections.unmodifiableList(Arrays.asList(, +        TransportPlugin.class, ReindexPlugin.class, PercolatorPlugin.class, MustachePlugin.class));, +    /**, +     * The default transport implementation for the transport client., +     */, +    public static final class TransportPlugin extends Netty3Plugin {, +        // disable assertions for permissions since we might not have the permissions here, +        // compared to if we are loaded as a real module to the es server, +        public TransportPlugin(Settings settings) {, +            super(Settings.builder().put("netty.assert.buglevel", false).put(settings).build());, +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +import org.elasticsearch.common.io.stream.StreamInput;, +    protected final ByteArray bytearray;, +    public PagedBytesReference(BigArrays bigarrays, ByteArray bytearray, int length) {, +        this(bigarrays, bytearray, 0, length);, +    public PagedBytesReference(BigArrays bigarrays, ByteArray bytearray, int from, int length) {, +        this.bytearray = bytearray;, +        return bytearray.get(offset + index);, +        return new PagedBytesReference(bigarrays, bytearray, offset + from, length);, +        bytearray.get(offset, length, bref);, +                    final boolean materialized = bytearray.get(offset + position, nextFragmentSize, slice);, +        return bytearray.ramBytesUsed();, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +, + * This class pre-installs the {@link Netty3Plugin}, {@link ReindexPlugin}, {@link PercolatorPlugin}, and {@link MustachePlugin}, +    private static final Collection<Class<? extends Plugin>> PRE_INSTALLED_PLUGINS = Collections.unmodifiableList(Arrays.asList(, +        TransportPlugin.class, ReindexPlugin.class, PercolatorPlugin.class, MustachePlugin.class));, +    /**, +     * The default transport implementation for the transport client., +     */, +    public static final class TransportPlugin extends Netty3Plugin {, +        // disable assertions for permissions since we might not have the permissions here, +        // compared to if we are loaded as a real module to the es server, +        public TransportPlugin(Settings settings) {, +            super(Settings.builder().put("netty.assert.buglevel", false).put(settings).build());, +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +import org.elasticsearch.common.io.stream.StreamInput;, +    protected final ByteArray bytearray;, +    public PagedBytesReference(BigArrays bigarrays, ByteArray bytearray, int length) {, +        this(bigarrays, bytearray, 0, length);, +    public PagedBytesReference(BigArrays bigarrays, ByteArray bytearray, int from, int length) {, +        this.bytearray = bytearray;, +        return bytearray.get(offset + index);, +        return new PagedBytesReference(bigarrays, bytearray, offset + from, length);, +        bytearray.get(offset, length, bref);, +                    final boolean materialized = bytearray.get(offset + position, nextFragmentSize, slice);, +        return bytearray.ramBytesUsed();, +++ b/core/src/main/java/org/elasticsearch/common/bytes/ReleasablePagedBytesReference.java, +    public ReleasablePagedBytesReference(BigArrays bigarrays, ByteArray bytearray, int length) {, +        super(bigarrays, bytearray, length);]