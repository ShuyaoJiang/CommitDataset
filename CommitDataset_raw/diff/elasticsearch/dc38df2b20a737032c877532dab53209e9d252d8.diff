[+++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.common.Strings;, +                                indexMdBuilder.settings(ImmutableSettings.settingsBuilder().put(snapshotIndexMetaData.settings()).put(IndexMetaData.SETTING_UUID, Strings.randomBase64UUID()));, +                                indexMdBuilder.settings(ImmutableSettings.settingsBuilder().put(snapshotIndexMetaData.settings()).put(IndexMetaData.SETTING_UUID, currentIndexMetaData.uuid()));, +++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.common.Strings;, +                                indexMdBuilder.settings(ImmutableSettings.settingsBuilder().put(snapshotIndexMetaData.settings()).put(IndexMetaData.SETTING_UUID, Strings.randomBase64UUID()));, +                                indexMdBuilder.settings(ImmutableSettings.settingsBuilder().put(snapshotIndexMetaData.settings()).put(IndexMetaData.SETTING_UUID, currentIndexMetaData.uuid()));, +++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +    public void testFreshIndexUUID() {, +        Client client = client();, +, +        logger.info("-->  creating repository");, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder(), +                        .put("location", newTempDirPath()), +                        .put("compress", randomBoolean()), +                        .put("chunk_size", randomIntBetween(100, 1000))));, +, +        createIndex("test");, +        String originalIndexUUID = client().admin().indices().prepareGetSettings("test").get().getSetting("test", IndexMetaData.SETTING_UUID);, +        assertTrue(originalIndexUUID, originalIndexUUID != null);, +        assertFalse(originalIndexUUID, originalIndexUUID.equals(IndexMetaData.INDEX_UUID_NA_VALUE));, +        ensureGreen();, +        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test").get();, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));, +        NumShards numShards = getNumShards("test");, +, +        cluster().wipeIndices("test");, +        assertAcked(prepareCreate("test", 2, ImmutableSettings.builder(), +                .put(SETTING_NUMBER_OF_SHARDS, numShards.numPrimaries)));, +        ensureGreen();, +        String newIndexUUID = client().admin().indices().prepareGetSettings("test").get().getSetting("test", IndexMetaData.SETTING_UUID);, +        assertTrue(newIndexUUID, newIndexUUID != null);, +        assertFalse(newIndexUUID, newIndexUUID.equals(IndexMetaData.INDEX_UUID_NA_VALUE));, +        assertFalse(newIndexUUID, newIndexUUID.equals(originalIndexUUID));, +        logger.info("--> close index");, +        client.admin().indices().prepareClose("test").get();, +, +        logger.info("--> restore all indices from the snapshot");, +        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet();, +        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));, +, +        ensureGreen();, +        String newAfterRestoreIndexUUID = client().admin().indices().prepareGetSettings("test").get().getSetting("test", IndexMetaData.SETTING_UUID);, +        assertTrue("UUID has changed after restore: " + newIndexUUID + " vs. " + newAfterRestoreIndexUUID, newIndexUUID.equals(newAfterRestoreIndexUUID));, +, +        logger.info("--> restore indices with different names");, +        restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap"), +                .setRenamePattern("(.+)").setRenameReplacement("$1-copy").setWaitForCompletion(true).execute().actionGet();, +        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));, +, +        String copyRestoreUUID = client().admin().indices().prepareGetSettings("test-copy").get().getSetting("test-copy", IndexMetaData.SETTING_UUID);, +        assertFalse("UUID has been reused on restore: " + copyRestoreUUID + " vs. " + originalIndexUUID, copyRestoreUUID.equals(originalIndexUUID));, +    }, +, +    @Test]