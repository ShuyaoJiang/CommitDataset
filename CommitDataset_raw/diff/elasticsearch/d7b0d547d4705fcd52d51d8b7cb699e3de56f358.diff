[+++ b/docs/reference/index-modules/allocation.asciidoc, +Allows to control the allocation of indices on nodes based on include/exclude, +++ b/docs/reference/index-modules/allocation.asciidoc, +Allows to control the allocation of indices on nodes based on include/exclude, +++ b/docs/reference/index-modules/analysis.asciidoc, +that can be used in order to break down indexed (analyzed) fields when a, +document is indexed as well as to process query strings. It maps to the Lucene, +++ b/docs/reference/index-modules/allocation.asciidoc, +Allows to control the allocation of indices on nodes based on include/exclude, +++ b/docs/reference/index-modules/analysis.asciidoc, +that can be used in order to break down indexed (analyzed) fields when a, +document is indexed as well as to process query strings. It maps to the Lucene, +++ b/docs/reference/index-modules/codec.asciidoc, +postings format is the part of the codec that is responsible for reading, +and writing the term dictionary, postings lists and positions, as well as the payloads, +A custom postings format can be defined in the index settings in the, +Then when defining your mapping you can use the `my_format` name in the, +++ b/docs/reference/index-modules/allocation.asciidoc, +Allows to control the allocation of indices on nodes based on include/exclude, +++ b/docs/reference/index-modules/analysis.asciidoc, +that can be used in order to break down indexed (analyzed) fields when a, +document is indexed as well as to process query strings. It maps to the Lucene, +++ b/docs/reference/index-modules/codec.asciidoc, +postings format is the part of the codec that is responsible for reading, +and writing the term dictionary, postings lists and positions, as well as the payloads, +A custom postings format can be defined in the index settings in the, +Then when defining your mapping you can use the `my_format` name in the, +++ b/docs/reference/index-modules/mapper.asciidoc, +=== Dynamic Mappings, +New types and new fields within types can be added dynamically just, +by indexing a document.  When Elasticsearch encounters a new type,, +it creates the type using the `_default_` mapping (see below)., +When it encounters a new field within a type, it autodetects the, +datatype that the field contains and adds it to the type mapping, +automatically., +, +See <<mapping-dynamic-mapping>> for details of how to control and, +configure dynamic mapping., +, +[float], +=== Default Mapping, +, +When a new type is created (at <<indices-create-index,index creation>> time,, +using the  <<indices-put-mapping,`put-mapping` API>> or just by indexing a, +document into it), the type uses the `_default_` mapping as its basis.  Any, +mapping specified in the  <<indices-create-index,`create-index`>> or, +<<indices-put-mapping,`put-mapping`>> request override values set in the, +`_default_` mapping., +, +The default mapping definition is a plain mapping definition that is, +embedded within ElasticSearch:, +Pretty short, isn't it? Basically, everything is `_default_`ed, including the, +dynamic nature of the root object mapping which allows new fields to be added, +automatically., +, +The built-in default mapping definition can be overridden in several ways. A, +`_default_` mapping can be specified when creating a new index, or the global, +`_default_` mapping (for all indices) can be configured by creating a file, +called `config/default-mapping.json`. (This location can be changed with, +the `index.mapper.default_mapping_location` setting.), +++ b/docs/reference/index-modules/allocation.asciidoc, +Allows to control the allocation of indices on nodes based on include/exclude, +++ b/docs/reference/index-modules/analysis.asciidoc, +that can be used in order to break down indexed (analyzed) fields when a, +document is indexed as well as to process query strings. It maps to the Lucene, +++ b/docs/reference/index-modules/codec.asciidoc, +postings format is the part of the codec that is responsible for reading, +and writing the term dictionary, postings lists and positions, as well as the payloads, +A custom postings format can be defined in the index settings in the, +Then when defining your mapping you can use the `my_format` name in the, +++ b/docs/reference/index-modules/mapper.asciidoc, +=== Dynamic Mappings, +New types and new fields within types can be added dynamically just, +by indexing a document.  When Elasticsearch encounters a new type,, +it creates the type using the `_default_` mapping (see below)., +When it encounters a new field within a type, it autodetects the, +datatype that the field contains and adds it to the type mapping, +automatically., +, +See <<mapping-dynamic-mapping>> for details of how to control and, +configure dynamic mapping., +, +[float], +=== Default Mapping, +, +When a new type is created (at <<indices-create-index,index creation>> time,, +using the  <<indices-put-mapping,`put-mapping` API>> or just by indexing a, +document into it), the type uses the `_default_` mapping as its basis.  Any, +mapping specified in the  <<indices-create-index,`create-index`>> or, +<<indices-put-mapping,`put-mapping`>> request override values set in the, +`_default_` mapping., +, +The default mapping definition is a plain mapping definition that is, +embedded within ElasticSearch:, +Pretty short, isn't it? Basically, everything is `_default_`ed, including the, +dynamic nature of the root object mapping which allows new fields to be added, +automatically., +, +The built-in default mapping definition can be overridden in several ways. A, +`_default_` mapping can be specified when creating a new index, or the global]