[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalAggregatorTests.java, +        try (GlobalAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalAggregatorTests.java, +        try (GlobalAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java, +        try (MaxAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalAggregatorTests.java, +        try (GlobalAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java, +        try (MaxAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/docs/reference/mapping/params/doc-values.asciidoc, +TIP: The `doc_values` setting is allowed to have different settings for fields, +of the same name in the same index.  It can be disabled (set to `false`) on, +existing fields using the <<indices-put-mapping,PUT mapping API>>., +, +, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalAggregatorTests.java, +        try (GlobalAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java, +        try (MaxAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/docs/reference/mapping/params/doc-values.asciidoc, +TIP: The `doc_values` setting is allowed to have different settings for fields, +of the same name in the same index.  It can be disabled (set to `false`) on, +existing fields using the <<indices-put-mapping,PUT mapping API>>., +, +, +++ b/modules/lang-painless/ant.xml, +        <fileset refid="grammar.fileset"/>, +      </replaceregexp>, +      <!-- make the lexer abstract -->, +      <replaceregexp match="(class \Q@{grammar}\ELexer)" replace="abstract \1" encoding="UTF-8">, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalAggregatorTests.java, +        try (GlobalAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java, +        try (MaxAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/docs/reference/mapping/params/doc-values.asciidoc, +TIP: The `doc_values` setting is allowed to have different settings for fields, +of the same name in the same index.  It can be disabled (set to `false`) on, +existing fields using the <<indices-put-mapping,PUT mapping API>>., +, +, +++ b/modules/lang-painless/ant.xml, +        <fileset refid="grammar.fileset"/>, +      </replaceregexp>, +      <!-- make the lexer abstract -->, +      <replaceregexp match="(class \Q@{grammar}\ELexer)" replace="abstract \1" encoding="UTF-8">, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +}, +, +@members{, +/**, + * Check against the current whitelist to determine whether a token is a type, + * or not. Called by the {@code TYPE} token defined in {@code PainlessLexer.g4}., + * See also, + * <a href="https://en.wikipedia.org/wiki/The_lexer_hack">The lexer hack</a>., + */, +protected abstract boolean isSimpleType(String name);, +, +/**, + * Is the preceding {@code /} a the beginning of a regex (true) or a division, + * (false)., + */, +protected abstract boolean slashIsRegex();, +DIV:     '/' { false == slashIsRegex() }?;, +REGEX: '/' ( ~('/' | '\n') | '\\' ~'\n' )+ '/' [cilmsUux]* { slashIsRegex() }?;, +TYPE: ID ( DOT ID )* { isSimpleType(getText()) }?;, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GlobalAggregatorTests.java, +        try (GlobalAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java, +        try (MaxAggregator aggregator = createAggregator(aggregationBuilder, fieldType, indexSearcher)) {, +++ b/docs/reference/mapping/params/doc-values.asciidoc, +TIP: The `doc_values` setting is allowed to have different settings for fields, +of the same name in the same index.  It can be disabled (set to `false`) on, +existing fields using the <<indices-put-mapping,PUT mapping API>>., +, +, +++ b/modules/lang-painless/ant.xml, +        <fileset refid="grammar.fileset"/>, +      </replaceregexp>, +      <!-- make the lexer abstract -->, +      <replaceregexp match="(class \Q@{grammar}\ELexer)" replace="abstract \1" encoding="UTF-8">, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +}, +, +@members{, +/**, + * Check against the current whitelist to determine whether a token is a type, + * or not. Called by the {@code TYPE} token defined in {@code PainlessLexer.g4}., + * See also, + * <a href="https://en.wikipedia.org/wiki/The_lexer_hack">The lexer hack</a>., + */, +protected abstract boolean isSimpleType(String name);, +, +/**, + * Is the preceding {@code /} a the beginning of a regex (true) or a division, + * (false)., + */, +protected abstract boolean slashIsRegex();, +DIV:     '/' { false == slashIsRegex() }?;, +REGEX: '/' ( ~('/' | '\n') | '\\' ~'\n' )+ '/' [cilmsUux]* { slashIsRegex() }?;]