[+++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +import org.elasticsearch.index.shard.IndexShardException;, +        MetaData metaData = null;, +        try {, +            metaData = readSnapshotMetaData(snapshotId, snapshot.indices(), true);, +        } catch (SnapshotException ex) {, +            logger.warn("cannot read metadata for snapshot [{}]", ex, snapshotId);, +        }, +                if (metaData != null) {, +                            ShardId shardId = new ShardId(index, i);, +                            try {, +                                indexShardRepository.delete(snapshotId, shardId);, +                            } catch (IndexShardException | SnapshotException ex) {, +                                logger.warn("[{}] failed to delete shard data for shard [{}]", ex, snapshotId, shardId);, +                            }, +                        }, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +import org.elasticsearch.index.shard.IndexShardException;, +        MetaData metaData = null;, +        try {, +            metaData = readSnapshotMetaData(snapshotId, snapshot.indices(), true);, +        } catch (SnapshotException ex) {, +            logger.warn("cannot read metadata for snapshot [{}]", ex, snapshotId);, +        }, +                if (metaData != null) {, +                            ShardId shardId = new ShardId(index, i);, +                            try {, +                                indexShardRepository.delete(snapshotId, shardId);, +                            } catch (IndexShardException | SnapshotException ex) {, +                                logger.warn("[{}] failed to delete shard data for shard [{}]", ex, snapshotId, shardId);, +                            }, +                        }, +++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +    public void deleteSnapshotWithMissingMetadataTest() throws Exception {, +        Client client = client();, +, +        File repo = newTempDir(LifecycleScope.SUITE);, +        logger.info("-->  creating repository at " + repo.getAbsolutePath());, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder(), +                        .put("location", repo), +                        .put("compress", false), +                        .put("chunk_size", randomIntBetween(100, 1000))));, +, +        createIndex("test-idx-1", "test-idx-2");, +        ensureYellow();, +        logger.info("--> indexing some data");, +        indexRandom(true,, +                client().prepareIndex("test-idx-1", "doc").setSource("foo", "bar"),, +                client().prepareIndex("test-idx-2", "doc").setSource("foo", "bar"));, +, +        logger.info("--> creating snapshot");, +        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get();, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));, +, +        logger.info("--> delete index metadata and shard metadata");, +        File metadata = new File(repo, "metadata-test-snap-1");, +        assertThat(metadata.delete(), equalTo(true));, +, +        logger.info("--> delete snapshot");, +        client.admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap-1").get();, +, +        logger.info("--> make sure snapshot doesn't exist");, +        assertThrows(client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap-1"), SnapshotMissingException.class);, +    }, +, +    @Test]