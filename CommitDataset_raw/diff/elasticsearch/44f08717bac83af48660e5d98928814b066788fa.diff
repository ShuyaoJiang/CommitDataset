[+++ b/docs/reference/modules/scripting/using.asciidoc, +NOTE: The size of scripts is limited to 65,535 bytes. This can be, +++ b/docs/reference/modules/scripting/using.asciidoc, +NOTE: The size of scripts is limited to 65,535 bytes. This can be, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +++ b/docs/reference/modules/scripting/using.asciidoc, +NOTE: The size of scripts is limited to 65,535 bytes. This can be, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/WhenThingsGoWrongTests.java, +++ b/docs/reference/modules/scripting/using.asciidoc, +NOTE: The size of scripts is limited to 65,535 bytes. This can be, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/WhenThingsGoWrongTests.java, +++ b/server/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +    }, +, +    /**, +     * Returns the map of stored scripts., +     */, +    Map<String, StoredScriptSource> getStoredScripts() {, +        return scripts;, +++ b/docs/reference/modules/scripting/using.asciidoc, +NOTE: The size of scripts is limited to 65,535 bytes. This can be, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/WhenThingsGoWrongTests.java, +++ b/server/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +    }, +, +    /**, +     * Returns the map of stored scripts., +     */, +    Map<String, StoredScriptSource> getStoredScripts() {, +        return scripts;, +++ b/server/src/main/java/org/elasticsearch/script/ScriptService.java, +import java.nio.charset.StandardCharsets;, +        Setting.intSetting("script.max_size_in_bytes", 65535, 0, Property.Dynamic, Property.NodeScope);, +    private int maxSizeInBytes;, +, +        this.setMaxSizeInBytes(SCRIPT_MAX_SIZE_IN_BYTES.get(settings));, +        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);, +     * Changes the maximum number of bytes a script's source is allowed to have., +     * @param newMaxSizeInBytes The new maximum number of bytes., +     */, +    void setMaxSizeInBytes(int newMaxSizeInBytes) {, +        for (Map.Entry<String, StoredScriptSource> source : getScriptsFromClusterState().entrySet()) {, +            if (source.getValue().getSource().getBytes(StandardCharsets.UTF_8).length > newMaxSizeInBytes) {, +                throw new IllegalArgumentException("script.max_size_in_bytes cannot be set to [" + newMaxSizeInBytes + "], " +, +                        "stored script [" + source.getKey() + "] exceeds the new value with a size of " +, +                        "[" + source.getValue().getSource().getBytes(StandardCharsets.UTF_8).length + "]");, +            }, +        }, +, +        maxSizeInBytes = newMaxSizeInBytes;, +    }, +, +    /**, +        if (type == ScriptType.INLINE) {, +            if (idOrCode.getBytes(StandardCharsets.UTF_8).length > maxSizeInBytes) {, +                throw new IllegalArgumentException("exceeded max allowed inline script size in bytes [" + maxSizeInBytes + "] " +, +                        "with size [" + idOrCode.getBytes(StandardCharsets.UTF_8).length + "] for script [" + idOrCode + "]");, +            }, +        }, +, +    Map<String, StoredScriptSource> getScriptsFromClusterState() {, +        if (clusterState == null) {, +            return Collections.emptyMap();, +        }, +, +        ScriptMetaData scriptMetadata = clusterState.metaData().custom(ScriptMetaData.TYPE);, +, +        if (scriptMetadata == null) {, +            return Collections.emptyMap();, +        }, +, +        return scriptMetadata.getStoredScripts();, +    }, +, +        if (request.content().length() > maxSizeInBytes) {, +            throw new IllegalArgumentException("exceeded max allowed stored script size in bytes [" + maxSizeInBytes + "] with size [" +, +++ b/docs/reference/modules/scripting/using.asciidoc, +NOTE: The size of scripts is limited to 65,535 bytes. This can be, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/WhenThingsGoWrongTests.java, +++ b/server/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +    }, +, +    /**, +     * Returns the map of stored scripts., +     */, +    Map<String, StoredScriptSource> getStoredScripts() {, +        return scripts;, +++ b/server/src/main/java/org/elasticsearch/script/ScriptService.java, +import java.nio.charset.StandardCharsets;, +        Setting.intSetting("script.max_size_in_bytes", 65535, 0, Property.Dynamic, Property.NodeScope);, +    private int maxSizeInBytes;, +, +        this.setMaxSizeInBytes(SCRIPT_MAX_SIZE_IN_BYTES.get(settings));, +        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_SIZE_IN_BYTES, this::setMaxSizeInBytes);, +     * Changes the maximum number of bytes a script's source is allowed to have., +     * @param newMaxSizeInBytes The new maximum number of bytes.]