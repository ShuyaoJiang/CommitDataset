[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +import org.gradle.api.tasks.Input;, +        if (project.file(DOCKER_COMPOSE_YML).exists()) {, +            // convenience boilerplate with build plugin, +            // Can't reference tasks that are implemented in Groovy, use reflection  instead, +            disableTaskByType(tasks, getTaskClass("org.elasticsearch.gradle.precommit.LicenseHeadersTask"));, +            disableTaskByType(tasks, getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"));, +            disableTaskByType(tasks, ThirdPartyAuditTask.class);, +            disableTaskByType(tasks, JarHellTask.class);, +, +            if (dockerComposeSupported(project) == false) {, +            if (dockerComposeSupported(project) == false) {, +                project.getLogger().warn(, +                    "Tests for {} require docker-compose at /usr/local/bin/docker-compose or /usr/bin/docker-compose " +, +                        "but none could not be found so these will be skipped", project.getPath(), +                );, +                tasks.withType(getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"), task ->, +                    task.setEnabled(false), +                );, +                return;, +            }, +    @Input, +    public boolean dockerComposeSupported(Project project) {, +        // Don't look for docker-compose on the PATH yet that would pick up on Windows as well, +        return, +            project.file("/usr/local/bin/docker-compose").exists() == false &&, +            project.file("/usr/bin/docker-compose").exists() == false &&, +            Boolean.parseBoolean(System.getProperty("tests.fixture.enabled", "true")) == false;, +    }, +, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +import org.gradle.api.tasks.Input;, +        if (project.file(DOCKER_COMPOSE_YML).exists()) {, +            // convenience boilerplate with build plugin, +            // Can't reference tasks that are implemented in Groovy, use reflection  instead, +            disableTaskByType(tasks, getTaskClass("org.elasticsearch.gradle.precommit.LicenseHeadersTask"));, +            disableTaskByType(tasks, getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"));, +            disableTaskByType(tasks, ThirdPartyAuditTask.class);, +            disableTaskByType(tasks, JarHellTask.class);, +, +            if (dockerComposeSupported(project) == false) {, +            if (dockerComposeSupported(project) == false) {, +                project.getLogger().warn(, +                    "Tests for {} require docker-compose at /usr/local/bin/docker-compose or /usr/bin/docker-compose " +, +                        "but none could not be found so these will be skipped", project.getPath(), +                );, +                tasks.withType(getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"), task ->, +                    task.setEnabled(false), +                );, +                return;, +            }, +    @Input, +    public boolean dockerComposeSupported(Project project) {, +        // Don't look for docker-compose on the PATH yet that would pick up on Windows as well, +        return, +            project.file("/usr/local/bin/docker-compose").exists() == false &&, +            project.file("/usr/bin/docker-compose").exists() == false &&, +            Boolean.parseBoolean(System.getProperty("tests.fixture.enabled", "true")) == false;, +    }, +, +++ b/x-pack/test/smb-fixture/build.gradle]