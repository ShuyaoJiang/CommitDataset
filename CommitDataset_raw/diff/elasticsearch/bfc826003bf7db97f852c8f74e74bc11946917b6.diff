[+++ b/CONTRIBUTING.md, +IntelliJ users can automatically configure their IDE: `gradle idea`, +++ b/CONTRIBUTING.md, +IntelliJ users can automatically configure their IDE: `gradle idea`, +++ b/build.gradle, +  description = "Elasticsearch subproject ${project.path}", +, +            Node developer = node.appendNode('developers').appendNode('developer'), +            developer.appendNode('name', 'Elastic'), +            developer.appendNode('url', 'http://www.elastic.co'), +++ b/CONTRIBUTING.md, +IntelliJ users can automatically configure their IDE: `gradle idea`, +++ b/build.gradle, +  description = "Elasticsearch subproject ${project.path}", +, +            Node developer = node.appendNode('developers').appendNode('developer'), +            developer.appendNode('name', 'Elastic'), +            developer.appendNode('url', 'http://www.elastic.co'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +    public static void configurePomGeneration(Project project) {, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/CONTRIBUTING.md, +IntelliJ users can automatically configure their IDE: `gradle idea`, +++ b/build.gradle, +  description = "Elasticsearch subproject ${project.path}", +, +            Node developer = node.appendNode('developers').appendNode('developer'), +            developer.appendNode('name', 'Elastic'), +            developer.appendNode('url', 'http://www.elastic.co'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +    public static void configurePomGeneration(Project project) {, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +                addPomGeneration(project), +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +++ b/CONTRIBUTING.md, +IntelliJ users can automatically configure their IDE: `gradle idea`, +++ b/build.gradle, +  description = "Elasticsearch subproject ${project.path}", +, +            Node developer = node.appendNode('developers').appendNode('developer'), +            developer.appendNode('name', 'Elastic'), +            developer.appendNode('url', 'http://www.elastic.co'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +    public static void configurePomGeneration(Project project) {, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +                addPomGeneration(project), +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/CONTRIBUTING.md, +IntelliJ users can automatically configure their IDE: `gradle idea`, +++ b/build.gradle, +  description = "Elasticsearch subproject ${project.path}", +, +            Node developer = node.appendNode('developers').appendNode('developer'), +            developer.appendNode('name', 'Elastic'), +            developer.appendNode('url', 'http://www.elastic.co'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +    public static void configurePomGeneration(Project project) {, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +                addPomGeneration(project), +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                    + " This index should be opened using a version before " + Version.CURRENT.minimumCompatibilityVersion(), +++ b/CONTRIBUTING.md, +IntelliJ users can automatically configure their IDE: `gradle idea`, +++ b/build.gradle, +  description = "Elasticsearch subproject ${project.path}", +, +            Node developer = node.appendNode('developers').appendNode('developer'), +            developer.appendNode('name', 'Elastic'), +            developer.appendNode('url', 'http://www.elastic.co'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +    public static void configurePomGeneration(Project project) {, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +                addPomGeneration(project), +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                    + " This index should be opened using a version before " + Version.CURRENT.minimumCompatibilityVersion(), +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/CONTRIBUTING.md]