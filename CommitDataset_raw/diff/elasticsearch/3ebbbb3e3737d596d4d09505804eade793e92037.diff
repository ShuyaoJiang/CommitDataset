[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +                taskManager.waitForTaskCompletion(task, timeoutNanos);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +                taskManager.waitForTaskCompletion(task, timeoutNanos);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.rest.RestStatus;, +                builder.field(Fields.STATUS, ExceptionsHelper.status(item.getFailure()).getStatus());, +                builder.field(Fields.STATUS, item.getResponse().status().getStatus());, +        static final String STATUS = "status";, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +                taskManager.waitForTaskCompletion(task, timeoutNanos);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.rest.RestStatus;, +                builder.field(Fields.STATUS, ExceptionsHelper.status(item.getFailure()).getStatus());, +                builder.field(Fields.STATUS, item.getResponse().status().getStatus());, +        static final String STATUS = "status";, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +                modules.add(b -> b.bind(ThreadPool.class).toInstance(threadPool));, +                final List<Setting<?>> additionalSettings = new ArrayList<>();, +                final List<String> additionalSettingsFilter = new ArrayList<>();, +                additionalSettings.addAll(pluginsService.getPluginSettings());, +                additionalSettingsFilter.addAll(pluginsService.getPluginSettingsFilter());, +                for (final ExecutorBuilder<?> builder : threadPool.builders()) {, +                    additionalSettings.addAll(builder.getRegisteredSettings());, +                }, +                SettingsModule settingsModule = new SettingsModule(settings, additionalSettings, additionalSettingsFilter);, +                CircuitBreakerService circuitBreakerService = Node.createCircuitBreakerService(settingsModule.getSettings(),, +                    settingsModule.getClusterSettings());, +                modules.add(settingsModule);, +                modules.add((b -> b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +                taskManager.waitForTaskCompletion(task, timeoutNanos);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.rest.RestStatus;, +                builder.field(Fields.STATUS, ExceptionsHelper.status(item.getFailure()).getStatus());, +                builder.field(Fields.STATUS, item.getResponse().status().getStatus());, +        static final String STATUS = "status";, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +                modules.add(b -> b.bind(ThreadPool.class).toInstance(threadPool));, +                final List<Setting<?>> additionalSettings = new ArrayList<>();, +                final List<String> additionalSettingsFilter = new ArrayList<>();, +                additionalSettings.addAll(pluginsService.getPluginSettings());, +                additionalSettingsFilter.addAll(pluginsService.getPluginSettingsFilter());, +                for (final ExecutorBuilder<?> builder : threadPool.builders()) {, +                    additionalSettings.addAll(builder.getRegisteredSettings());, +                }, +                SettingsModule settingsModule = new SettingsModule(settings, additionalSettings, additionalSettingsFilter);, +                CircuitBreakerService circuitBreakerService = Node.createCircuitBreakerService(settingsModule.getSettings(),, +                    settingsModule.getClusterSettings());, +                modules.add(settingsModule);, +                modules.add((b -> b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING,, +                    Node.BREAKER_TYPE_KEY, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +                        taskManager.waitForTaskCompletion(runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +                taskManager.waitForTaskCompletion(task, timeoutNanos);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.rest.RestStatus;, +                builder.field(Fields.STATUS, ExceptionsHelper.status(item.getFailure()).getStatus());, +                builder.field(Fields.STATUS, item.getResponse().status().getStatus());, +        static final String STATUS = "status";, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.settings.Setting;]