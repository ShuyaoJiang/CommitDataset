[+++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.action.admin.indices.refresh.RefreshAction;, +import org.elasticsearch.action.admin.indices.refresh.TransportRefreshAction;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.common.inject.multibindings.Multibinder;, +import java.util.List;, +    private final List<Class<? extends ActionFilter>> actionFilters = Lists.newArrayList();, +    public ActionModule registerFilter(Class<? extends ActionFilter> actionFilter) {, +        actionFilters.add(actionFilter);, +        return this;, +    }, +, +        Multibinder<ActionFilter> actionFilterMultibinder = Multibinder.newSetBinder(binder(), ActionFilter.class);, +        for (Class<? extends ActionFilter> actionFilter : actionFilters) {, +            actionFilterMultibinder.addBinding().to(actionFilter);, +        }, +        bind(ActionFilters.class).asEagerSingleton();, +, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.action.admin.indices.refresh.RefreshAction;, +import org.elasticsearch.action.admin.indices.refresh.TransportRefreshAction;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.common.inject.multibindings.Multibinder;, +import java.util.List;, +    private final List<Class<? extends ActionFilter>> actionFilters = Lists.newArrayList();, +    public ActionModule registerFilter(Class<? extends ActionFilter> actionFilter) {, +        actionFilters.add(actionFilter);, +        return this;, +    }, +, +        Multibinder<ActionFilter> actionFilterMultibinder = Multibinder.newSetBinder(binder(), ActionFilter.class);, +        for (Class<? extends ActionFilter> actionFilter : actionFilters) {, +            actionFilterMultibinder.addBinding().to(actionFilter);, +        }, +        bind(ActionFilters.class).asEagerSingleton();, +, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.action.support.ActionFilters;, +                                        ClusterName clusterName, ActionFilters actionFilters) {, +        super(settings, ClusterHealthAction.NAME, transportService, clusterService, threadPool, actionFilters);, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.action.admin.indices.refresh.RefreshAction;, +import org.elasticsearch.action.admin.indices.refresh.TransportRefreshAction;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.common.inject.multibindings.Multibinder;, +import java.util.List;, +    private final List<Class<? extends ActionFilter>> actionFilters = Lists.newArrayList();, +    public ActionModule registerFilter(Class<? extends ActionFilter> actionFilter) {, +        actionFilters.add(actionFilter);, +        return this;, +    }, +, +        Multibinder<ActionFilter> actionFilterMultibinder = Multibinder.newSetBinder(binder(), ActionFilter.class);, +        for (Class<? extends ActionFilter> actionFilter : actionFilters) {, +            actionFilterMultibinder.addBinding().to(actionFilter);, +        }, +        bind(ActionFilters.class).asEagerSingleton();, +, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.action.support.ActionFilters;, +                                        ClusterName clusterName, ActionFilters actionFilters) {, +        super(settings, ClusterHealthAction.NAME, transportService, clusterService, threadPool, actionFilters);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +import org.elasticsearch.action.support.ActionFilters;, +                                          ClusterService clusterService, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NodesHotThreadsAction.NAME, clusterName, threadPool, clusterService, transportService, actionFilters);, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.action.admin.indices.refresh.RefreshAction;, +import org.elasticsearch.action.admin.indices.refresh.TransportRefreshAction;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.common.inject.multibindings.Multibinder;, +import java.util.List;, +    private final List<Class<? extends ActionFilter>> actionFilters = Lists.newArrayList();, +    public ActionModule registerFilter(Class<? extends ActionFilter> actionFilter) {, +        actionFilters.add(actionFilter);, +        return this;, +    }, +, +        Multibinder<ActionFilter> actionFilterMultibinder = Multibinder.newSetBinder(binder(), ActionFilter.class);, +        for (Class<? extends ActionFilter> actionFilter : actionFilters) {, +            actionFilterMultibinder.addBinding().to(actionFilter);, +        }, +        bind(ActionFilters.class).asEagerSingleton();, +, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.action.support.ActionFilters;, +                                        ClusterName clusterName, ActionFilters actionFilters) {, +        super(settings, ClusterHealthAction.NAME, transportService, clusterService, threadPool, actionFilters);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +import org.elasticsearch.action.support.ActionFilters;, +                                          ClusterService clusterService, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NodesHotThreadsAction.NAME, clusterName, threadPool, clusterService, transportService, actionFilters);]