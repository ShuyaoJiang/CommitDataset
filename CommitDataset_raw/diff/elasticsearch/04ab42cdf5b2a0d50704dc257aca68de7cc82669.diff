[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +    static <T extends Throwable> void rethrow(Throwable t) throws T {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +    static <T extends Throwable> void rethrow(Throwable t) throws T {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +                        // it's too stupid that we cannot throw checked exceptions... (use rethrow puzzler):, +                        } catch (Throwable t) {, +                            Def.rethrow(t);, +                            throw new AssertionError();, +        private MethodHandle lookup(int flavor, String name, Object[] args) throws Throwable {, +                        return DefMath.lookupGeneric(name); // can handle nulls, if supported, +                MethodHandle generic = DefMath.lookupGeneric(name);, +            final MethodHandle target = lookup(flavor, name, args).asType(type);, +                MethodHandle handler = MethodHandles.dropArguments(DefMath.lookupGeneric(name).asType(type()), , +        , +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +    static <T extends Throwable> void rethrow(Throwable t) throws T {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +                        // it's too stupid that we cannot throw checked exceptions... (use rethrow puzzler):, +                        } catch (Throwable t) {, +                            Def.rethrow(t);, +                            throw new AssertionError();, +        private MethodHandle lookup(int flavor, String name, Object[] args) throws Throwable {, +                        return DefMath.lookupGeneric(name); // can handle nulls, if supported, +                MethodHandle generic = DefMath.lookupGeneric(name);, +            final MethodHandle target = lookup(flavor, name, args).asType(type);, +                MethodHandle handler = MethodHandles.dropArguments(DefMath.lookupGeneric(name).asType(type()), , +        , +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    public void writeDynamicBinaryInstruction(Location location, Type returnType, Type lhs, Type rhs, Operation operation) {, +                invokeDynamic("mul", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("div", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("rem", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                int flags = hasPrimitiveArg ? 0 : DefBootstrap.OPERATOR_ALLOWS_NULL;, +                invokeDynamic("sub", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("lsh", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("ush", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("rsh", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("and", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +                invokeDynamic("xor", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +                invokeDynamic("or", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +    static <T extends Throwable> void rethrow(Throwable t) throws T {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +                        // it's too stupid that we cannot throw checked exceptions... (use rethrow puzzler):, +                        } catch (Throwable t) {, +                            Def.rethrow(t);, +                            throw new AssertionError();, +        private MethodHandle lookup(int flavor, String name, Object[] args) throws Throwable {, +                        return DefMath.lookupGeneric(name); // can handle nulls, if supported, +                MethodHandle generic = DefMath.lookupGeneric(name);, +            final MethodHandle target = lookup(flavor, name, args).asType(type);, +                MethodHandle handler = MethodHandles.dropArguments(DefMath.lookupGeneric(name).asType(type()), , +        , +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    public void writeDynamicBinaryInstruction(Location location, Type returnType, Type lhs, Type rhs, Operation operation) {, +                invokeDynamic("mul", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("div", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("rem", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                int flags = hasPrimitiveArg ? 0 : DefBootstrap.OPERATOR_ALLOWS_NULL;, +                invokeDynamic("sub", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("lsh", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("ush", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("rsh", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("and", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +                invokeDynamic("xor", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +                invokeDynamic("or", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBinary.java, +                writer.writeDynamicBinaryInstruction(location, actual, left.actual, right.actual, operation);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +    static <T extends Throwable> void rethrow(Throwable t) throws T {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +                        // it's too stupid that we cannot throw checked exceptions... (use rethrow puzzler):, +                        } catch (Throwable t) {, +                            Def.rethrow(t);, +                            throw new AssertionError();, +        private MethodHandle lookup(int flavor, String name, Object[] args) throws Throwable {, +                        return DefMath.lookupGeneric(name); // can handle nulls, if supported, +                MethodHandle generic = DefMath.lookupGeneric(name);, +            final MethodHandle target = lookup(flavor, name, args).asType(type);, +                MethodHandle handler = MethodHandles.dropArguments(DefMath.lookupGeneric(name).asType(type()), , +        , +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    public void writeDynamicBinaryInstruction(Location location, Type returnType, Type lhs, Type rhs, Operation operation) {, +                invokeDynamic("mul", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("div", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("rem", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                int flags = hasPrimitiveArg ? 0 : DefBootstrap.OPERATOR_ALLOWS_NULL;, +                invokeDynamic("sub", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0); , +                invokeDynamic("lsh", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("ush", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("rsh", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.SHIFT_OPERATOR, 0); , +                invokeDynamic("and", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +                invokeDynamic("xor", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +                invokeDynamic("or", descriptor, DEF_BOOTSTRAP_HANDLE, DefBootstrap.BINARY_OPERATOR, 0);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EBinary.java, +                writer.writeDynamicBinaryInstruction(location, actual, left.actual, right.actual, operation);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EChain.java, +                            Definition.DEF_TYPE, Definition.DEF_TYPE, operation);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java]