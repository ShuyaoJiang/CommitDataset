[+++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.elasticsearch.index.cache.fixedbitset.FixedBitSetFilterCache;, +    private final FixedBitSetFilterCache fixedBitSetFilterCache;, +    public IndexCache(Index index, @IndexSettings Settings indexSettings, FilterCache filterCache, QueryParserCache queryParserCache, DocSetCache docSetCache, FixedBitSetFilterCache fixedBitSetFilterCache) {, +        this.fixedBitSetFilterCache = fixedBitSetFilterCache;, +        fixedBitSetFilterCache.clear("close");, +        fixedBitSetFilterCache.clear(reason);, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.elasticsearch.index.cache.fixedbitset.FixedBitSetFilterCache;, +    private final FixedBitSetFilterCache fixedBitSetFilterCache;, +    public IndexCache(Index index, @IndexSettings Settings indexSettings, FilterCache filterCache, QueryParserCache queryParserCache, DocSetCache docSetCache, FixedBitSetFilterCache fixedBitSetFilterCache) {, +        this.fixedBitSetFilterCache = fixedBitSetFilterCache;, +        fixedBitSetFilterCache.clear("close");, +        fixedBitSetFilterCache.clear(reason);, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java, +import org.elasticsearch.index.cache.fixedbitset.FixedBitSetFilterCacheModule;, +        new FixedBitSetFilterCacheModule(settings).configure(binder());, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.elasticsearch.index.cache.fixedbitset.FixedBitSetFilterCache;, +    private final FixedBitSetFilterCache fixedBitSetFilterCache;, +    public IndexCache(Index index, @IndexSettings Settings indexSettings, FilterCache filterCache, QueryParserCache queryParserCache, DocSetCache docSetCache, FixedBitSetFilterCache fixedBitSetFilterCache) {, +        this.fixedBitSetFilterCache = fixedBitSetFilterCache;, +        fixedBitSetFilterCache.clear("close");, +        fixedBitSetFilterCache.clear(reason);, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java, +import org.elasticsearch.index.cache.fixedbitset.FixedBitSetFilterCacheModule;, +        new FixedBitSetFilterCacheModule(settings).configure(binder());, +++ b/src/main/java/org/elasticsearch/index/cache/fixedbitset/FixedBitSetFilter.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.cache.fixedbitset;, +, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.util.Bits;, +import org.apache.lucene.util.FixedBitSet;, +, +import java.io.IOException;, +, +/**, + * A filter that always returns a {@link FixedBitSet}., + */, +public abstract class FixedBitSetFilter extends Filter {, +, +    @Override, +    public abstract FixedBitSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException;, +, +}, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.elasticsearch.index.cache.fixedbitset.FixedBitSetFilterCache;, +    private final FixedBitSetFilterCache fixedBitSetFilterCache;, +    public IndexCache(Index index, @IndexSettings Settings indexSettings, FilterCache filterCache, QueryParserCache queryParserCache, DocSetCache docSetCache, FixedBitSetFilterCache fixedBitSetFilterCache) {, +        this.fixedBitSetFilterCache = fixedBitSetFilterCache;, +        fixedBitSetFilterCache.clear("close");, +        fixedBitSetFilterCache.clear(reason);, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java, +import org.elasticsearch.index.cache.fixedbitset.FixedBitSetFilterCacheModule;, +        new FixedBitSetFilterCacheModule(settings).configure(binder());, +++ b/src/main/java/org/elasticsearch/index/cache/fixedbitset/FixedBitSetFilter.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.cache.fixedbitset;, +, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.util.Bits;]