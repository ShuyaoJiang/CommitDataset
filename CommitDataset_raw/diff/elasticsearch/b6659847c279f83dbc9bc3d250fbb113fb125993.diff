[+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java, +        assertEquals("line 1:8: Cannot determine columns for [*]" + END, readLine());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java, +        assertEquals("line 1:8: Cannot determine columns for [*]" + END, readLine());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java, +            assertEquals("Found 1 problem(s)\nline 1:8: Cannot determine columns for [*]", e.getMessage());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java, +        assertEquals("line 1:8: Cannot determine columns for [*]" + END, readLine());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java, +            assertEquals("Found 1 problem(s)\nline 1:8: Cannot determine columns for [*]", e.getMessage());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql(mode, "SELECT * FRO"), containsString("1:8: Cannot determine columns for [*]"));, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java, +        assertEquals("line 1:8: Cannot determine columns for [*]" + END, readLine());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java, +            assertEquals("Found 1 problem(s)\nline 1:8: Cannot determine columns for [*]", e.getMessage());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql(mode, "SELECT * FRO"), containsString("1:8: Cannot determine columns for [*]"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +                    List<NamedExpression> expanded = expandStar((UnresolvedStar) ne, output);, +                    // the field exists, but cannot be expanded (no sub-fields), +                    if (expanded.isEmpty()) {, +                        result.add(ne);, +                    } else {, +                        result.addAll(expanded);, +                    }, +                // the wildcard couldn't be expanded because the field doesn't exist at all, +                // so, add to the list of expanded attributes its qualifier (the field without the wildcard), +                // the qualifier will be unresolved and later used in the error message presented to the user, +                if (q == null) {, +                    expanded.add(us.qualifier());, +                    return expanded;, +                }, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java, +        assertEquals("line 1:8: Cannot determine columns for [*]" + END, readLine());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java, +            assertEquals("Found 1 problem(s)\nline 1:8: Cannot determine columns for [*]", e.getMessage());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql(mode, "SELECT * FRO"), containsString("1:8: Cannot determine columns for [*]"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +                    List<NamedExpression> expanded = expandStar((UnresolvedStar) ne, output);, +                    // the field exists, but cannot be expanded (no sub-fields), +                    if (expanded.isEmpty()) {, +                        result.add(ne);, +                    } else {, +                        result.addAll(expanded);, +                    }, +                // the wildcard couldn't be expanded because the field doesn't exist at all, +                // so, add to the list of expanded attributes its qualifier (the field without the wildcard), +                // the qualifier will be unresolved and later used in the error message presented to the user, +                if (q == null) {, +                    expanded.add(us.qualifier());, +                    return expanded;, +                }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedStar.java, +        return (qualifier() != null ? qualifier().qualifiedName() + "." : "") + "*";, +        return "Cannot determine columns for [" + message() + "]";, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java, +        assertEquals("line 1:8: Cannot determine columns for [*]" + END, readLine());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java, +            assertEquals("Found 1 problem(s)\nline 1:8: Cannot determine columns for [*]", e.getMessage());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql(mode, "SELECT * FRO"), containsString("1:8: Cannot determine columns for [*]"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +                    List<NamedExpression> expanded = expandStar((UnresolvedStar) ne, output);, +                    // the field exists, but cannot be expanded (no sub-fields), +                    if (expanded.isEmpty()) {, +                        result.add(ne);, +                    } else {, +                        result.addAll(expanded);, +                    }, +                // the wildcard couldn't be expanded because the field doesn't exist at all, +                // so, add to the list of expanded attributes its qualifier (the field without the wildcard), +                // the qualifier will be unresolved and later used in the error message presented to the user, +                if (q == null) {, +                    expanded.add(us.qualifier());, +                    return expanded;, +                }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedStar.java, +        return (qualifier() != null ? qualifier().qualifiedName() + "." : "") + "*";, +        return "Cannot determine columns for [" + message() + "]";, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +    , +    public void testMissingColumnWithWildcard() {, +        assertEquals("1:8: Unknown column [xxx]", verify("SELECT xxx.* FROM test"));, +    }, +    , +    public void testMisspelledColumnWithWildcard() {, +        assertEquals("1:8: Unknown column [tex], did you mean [text]?", verify("SELECT tex.* FROM test"));, +    }, +    , +    public void testColumnWithNoSubFields() {, +        assertEquals("1:8: Cannot determine columns for [text.*]", verify("SELECT text.* FROM test"));, +    }, +    , +    public void testMultipleColumnsWithWildcard1() {, +        assertEquals("1:14: Unknown column [a]\n" + , +                "line 1:17: Unknown column [b]\n" + , +                "line 1:22: Unknown column [c]\n" + , +                "line 1:25: Unknown column [tex], did you mean [text]?", verify("SELECT bool, a, b.*, c, tex.* FROM test"));]