[+++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        private static final Pattern MILLI_SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,13}$");, +        private static final Pattern SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,10}$");, +, +        private final Pattern pattern;, +            this.pattern = hasMilliSecondPrecision ? MILLI_SECOND_PRECISION_PATTERN : SECOND_PRECISION_PATTERN;, +            return hasMilliSecondPrecision ? 13 : 10;, +                bucket.getZone() != DateTimeZone.UTC ||, +                pattern.matcher(text).matches() == false) {, +            return hasMilliSecondPrecision ? 13 : 10;, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        private static final Pattern MILLI_SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,13}$");, +        private static final Pattern SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,10}$");, +, +        private final Pattern pattern;, +            this.pattern = hasMilliSecondPrecision ? MILLI_SECOND_PRECISION_PATTERN : SECOND_PRECISION_PATTERN;, +            return hasMilliSecondPrecision ? 13 : 10;, +                bucket.getZone() != DateTimeZone.UTC ||, +                pattern.matcher(text).matches() == false) {, +            return hasMilliSecondPrecision ? 13 : 10;, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.elasticsearch.common.lucene.search.MatchNoDocsQuery;, +     * @param unknownQueryField     The field used to mark a document that not all query terms could be extracted., +     *                              For example the query contained an unsupported query (e.g. WildcardQuery)., +        if (query instanceof MatchNoDocsQuery) {, +            // no terms to extract as this query matches no docs, +            return Collections.emptySet();, +        } else if (query instanceof TermQuery) {, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        private static final Pattern MILLI_SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,13}$");, +        private static final Pattern SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,10}$");, +, +        private final Pattern pattern;, +            this.pattern = hasMilliSecondPrecision ? MILLI_SECOND_PRECISION_PATTERN : SECOND_PRECISION_PATTERN;, +            return hasMilliSecondPrecision ? 13 : 10;, +                bucket.getZone() != DateTimeZone.UTC ||, +                pattern.matcher(text).matches() == false) {, +            return hasMilliSecondPrecision ? 13 : 10;, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.elasticsearch.common.lucene.search.MatchNoDocsQuery;, +     * @param unknownQueryField     The field used to mark a document that not all query terms could be extracted., +     *                              For example the query contained an unsupported query (e.g. WildcardQuery)., +        if (query instanceof MatchNoDocsQuery) {, +            // no terms to extract as this query matches no docs, +            return Collections.emptySet();, +        } else if (query instanceof TermQuery) {, +++ b/core/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        private static final Pattern MILLI_SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,13}$");, +        private static final Pattern SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,10}$");, +, +        private final Pattern pattern;, +            this.pattern = hasMilliSecondPrecision ? MILLI_SECOND_PRECISION_PATTERN : SECOND_PRECISION_PATTERN;, +            return hasMilliSecondPrecision ? 13 : 10;, +                bucket.getZone() != DateTimeZone.UTC ||, +                pattern.matcher(text).matches() == false) {, +            return hasMilliSecondPrecision ? 13 : 10;, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.elasticsearch.common.lucene.search.MatchNoDocsQuery;, +     * @param unknownQueryField     The field used to mark a document that not all query terms could be extracted., +     *                              For example the query contained an unsupported query (e.g. WildcardQuery)., +        if (query instanceof MatchNoDocsQuery) {, +            // no terms to extract as this query matches no docs, +            return Collections.emptySet();, +        } else if (query instanceof TermQuery) {, +++ b/core/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java, +++ b/core/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java, +            formatter.parser().parseDateTime(randomFrom("invalid date", "12345678901", "12345678901234"));, +            formatter.parser().parseDateTime(randomFrom("invalid date", "12345678901234"));, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        private static final Pattern MILLI_SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,13}$");, +        private static final Pattern SECOND_PRECISION_PATTERN = Pattern.compile("^-?\\d{1,10}$");, +, +        private final Pattern pattern;, +            this.pattern = hasMilliSecondPrecision ? MILLI_SECOND_PRECISION_PATTERN : SECOND_PRECISION_PATTERN;, +            return hasMilliSecondPrecision ? 13 : 10;, +                bucket.getZone() != DateTimeZone.UTC ||, +                pattern.matcher(text).matches() == false) {, +            return hasMilliSecondPrecision ? 13 : 10;, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.elasticsearch.common.lucene.search.MatchNoDocsQuery;, +     * @param unknownQueryField     The field used to mark a document that not all query terms could be extracted., +     *                              For example the query contained an unsupported query (e.g. WildcardQuery)., +        if (query instanceof MatchNoDocsQuery) {, +            // no terms to extract as this query matches no docs, +            return Collections.emptySet();, +        } else if (query instanceof TermQuery) {, +++ b/core/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java, +++ b/core/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java, +            formatter.parser().parseDateTime(randomFrom("invalid date", "12345678901", "12345678901234"));, +            formatter.parser().parseDateTime(randomFrom("invalid date", "12345678901234"));, +++ b/core/src/test/java/org/elasticsearch/index/percolator/ExtractQueryTermsServiceTests.java, +import org.elasticsearch.common.lucene.search.MatchNoDocsQuery;, +    public void testExtractQueryMetadata_matchNoDocsQuery() {, +        Set<Term> terms = ExtractQueryTermsService.extractQueryTerms(new MatchNoDocsQuery("sometimes there is no reason at all"));, +        assertEquals(0, terms.size());, +, +        BooleanQuery.Builder bq = new BooleanQuery.Builder();, +        bq.add(new TermQuery(new Term("field", "value")), BooleanClause.Occur.MUST);, +        bq.add(new MatchNoDocsQuery("sometimes there is no reason at all"), BooleanClause.Occur.MUST);]