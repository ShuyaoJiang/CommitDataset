[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    public Float getMinScore() {, +        return minScore;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    public Float getMinScore() {, +        return minScore;, +    }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/ExtractQueryTermsService.java, +import org.elasticsearch.common.lucene.search.function.FunctionScoreQuery;, +        Map<Class<? extends Query>, Function<Query, Result>> map = new HashMap<>(17);, +        map.put(FunctionScoreQuery.class, functionScoreQuery());, +    static Function<Query, Result> functionScoreQuery() {, +        return query -> {, +            FunctionScoreQuery functionScoreQuery = (FunctionScoreQuery) query;, +            Result result = extractQueryTerms(functionScoreQuery.getSubQuery());, +            // If min_score is specified we can't guarantee upfront that this percolator query matches,, +            // so in that case we set verified to false., +            // (if it matches with the percolator document matches with the extracted terms., +            // Min score filters out docs, which is different than the functions, which just influences the score.), +            boolean verified = functionScoreQuery.getMinScore() == null;, +            return new Result(verified, result.terms);, +        };, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    public Float getMinScore() {, +        return minScore;, +    }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/ExtractQueryTermsService.java, +import org.elasticsearch.common.lucene.search.function.FunctionScoreQuery;, +        Map<Class<? extends Query>, Function<Query, Result>> map = new HashMap<>(17);, +        map.put(FunctionScoreQuery.class, functionScoreQuery());, +    static Function<Query, Result> functionScoreQuery() {, +        return query -> {, +            FunctionScoreQuery functionScoreQuery = (FunctionScoreQuery) query;, +            Result result = extractQueryTerms(functionScoreQuery.getSubQuery());, +            // If min_score is specified we can't guarantee upfront that this percolator query matches,, +            // so in that case we set verified to false., +            // (if it matches with the percolator document matches with the extracted terms., +            // Min score filters out docs, which is different than the functions, which just influences the score.), +            boolean verified = functionScoreQuery.getMinScore() == null;, +            return new Result(verified, result.terms);, +        };, +    }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorHighlightSubFetchPhase.java, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import org.elasticsearch.common.lucene.search.function.FunctionScoreQuery;, +        } else if (query instanceof DisjunctionMaxQuery) {, +            for (Query disjunct : ((DisjunctionMaxQuery) query).getDisjuncts()) {, +                PercolateQuery result = locatePercolatorQuery(disjunct);, +                if (result != null) {, +                    return result;, +                }, +            }, +        } else if (query instanceof FunctionScoreQuery) {, +            return locatePercolatorQuery(((FunctionScoreQuery) query).getSubQuery());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    public Float getMinScore() {, +        return minScore;, +    }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/ExtractQueryTermsService.java, +import org.elasticsearch.common.lucene.search.function.FunctionScoreQuery;, +        Map<Class<? extends Query>, Function<Query, Result>> map = new HashMap<>(17);, +        map.put(FunctionScoreQuery.class, functionScoreQuery());, +    static Function<Query, Result> functionScoreQuery() {, +        return query -> {, +            FunctionScoreQuery functionScoreQuery = (FunctionScoreQuery) query;, +            Result result = extractQueryTerms(functionScoreQuery.getSubQuery());, +            // If min_score is specified we can't guarantee upfront that this percolator query matches,, +            // so in that case we set verified to false., +            // (if it matches with the percolator document matches with the extracted terms., +            // Min score filters out docs, which is different than the functions, which just influences the score.), +            boolean verified = functionScoreQuery.getMinScore() == null;, +            return new Result(verified, result.terms);, +        };, +    }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolatorHighlightSubFetchPhase.java, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import org.elasticsearch.common.lucene.search.function.FunctionScoreQuery;, +        } else if (query instanceof DisjunctionMaxQuery) {, +            for (Query disjunct : ((DisjunctionMaxQuery) query).getDisjuncts()) {, +                PercolateQuery result = locatePercolatorQuery(disjunct);, +                if (result != null) {, +                    return result;, +                }, +            }, +        } else if (query instanceof FunctionScoreQuery) {, +            return locatePercolatorQuery(((FunctionScoreQuery) query).getSubQuery());, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/ExtractQueryTermsServiceTests.java, +import org.elasticsearch.common.lucene.search.function.FunctionScoreQuery;, +import org.elasticsearch.common.lucene.search.function.RandomScoreFunction;, +    public void testFunctionScoreQuery() {, +        TermQuery termQuery = new TermQuery(new Term("_field", "_value"));]