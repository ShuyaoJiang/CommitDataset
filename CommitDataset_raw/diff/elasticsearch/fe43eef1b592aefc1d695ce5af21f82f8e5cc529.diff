[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        if (in.readBoolean()) {, +            node = DiscoveryNode.readNode(in);, +        } else {, +            node = null;, +        }, +        out.writeOptionalStreamable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        if (in.readBoolean()) {, +            node = DiscoveryNode.readNode(in);, +        } else {, +            node = null;, +        }, +        out.writeOptionalStreamable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        node = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        if (in.readBoolean()) {, +            node = DiscoveryNode.readNode(in);, +        } else {, +            node = null;, +        }, +        out.writeOptionalStreamable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        node = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java, +            nodes[i] = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        if (in.readBoolean()) {, +            node = DiscoveryNode.readNode(in);, +        } else {, +            node = null;, +        }, +        out.writeOptionalStreamable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        node = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java, +            nodes[i] = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +            nodes[i] = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        if (in.readBoolean()) {, +            node = DiscoveryNode.readNode(in);, +        } else {, +            node = null;, +        }, +        out.writeOptionalStreamable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        node = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java, +            nodes[i] = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +            nodes[i] = DiscoveryNode.readNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +public class ClusterStatsNodes implements ToXContent, Streamable {, +    private Counts counts;, +    private Set<Version> versions;, +    private OsStats os;, +    private ProcessStats process;, +    private JvmStats jvm;, +    private FsInfo.Path fs;, +    private Set<PluginInfo> plugins;, +    private ClusterStatsNodes() {, +    public ClusterStatsNodes(ClusterStatsNodeResponse[] nodeResponses) {, +        this.counts = new Counts();, +        this.os = new OsStats();, +        this.jvm = new JvmStats();, +        this.process = new ProcessStats();, +, +, +            counts.addNodeInfo(nodeResponse.nodeInfo());, +            versions.add(nodeResponse.nodeInfo().getVersion());, +            process.addNodeStats(nodeResponse.nodeStats());, +            jvm.addNodeInfoStats(nodeResponse.nodeInfo(), nodeResponse.nodeStats());, +            plugins.addAll(nodeResponse.nodeInfo().getPlugins().getPluginInfos());, +, +, +            os.addNodeInfo(nodeResponse.nodeInfo());, +                fs.add(nodeResponse.nodeStats().getFs().total());, +, +    public void readFrom(StreamInput in) throws IOException {, +        counts = Counts.readCounts(in);, +, +        int size = in.readVInt();, +        versions = new HashSet<>(size);, +        for (; size > 0; size--) {, +            versions.add(Version.readVersion(in));, +        }, +, +        os = OsStats.readOsStats(in);, +        process = ProcessStats.readStats(in);, +        jvm = JvmStats.readJvmStats(in);, +        fs = FsInfo.Path.readInfoFrom(in);, +, +        size = in.readVInt();, +        plugins = new HashSet<>(size);, +        for (; size > 0; size--) {, +            plugins.add(PluginInfo.readFromStream(in));, +        }, +    public static ClusterStatsNodes readNodeStats(StreamInput in) throws IOException {]