[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +        addHeaders(req, headers);, +        addHeaders(req, headers);, +    private static void addHeaders(Request request, Header... headers) {, +        Objects.requireNonNull(headers, "headers cannot be null");, +        for (Header header : headers) {, +            request.addHeader(header.getName(), header.getValue());, +        }, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +        addHeaders(req, headers);, +        addHeaders(req, headers);, +    private static void addHeaders(Request request, Header... headers) {, +        Objects.requireNonNull(headers, "headers cannot be null");, +        for (Header header : headers) {, +            request.addHeader(header.getName(), header.getValue());, +        }, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CustomRestHighLevelClientTests.java, +            doAnswer(inv -> mockPerformRequest(((Request) inv.getArguments()[0]).getHeaders().iterator().next())), +                        ((Request) inv.getArguments()[0]).getHeaders().iterator().next(),, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +        addHeaders(req, headers);, +        addHeaders(req, headers);, +    private static void addHeaders(Request request, Header... headers) {, +        Objects.requireNonNull(headers, "headers cannot be null");, +        for (Header header : headers) {, +            request.addHeader(header.getName(), header.getValue());, +        }, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CustomRestHighLevelClientTests.java, +            doAnswer(inv -> mockPerformRequest(((Request) inv.getArguments()[0]).getHeaders().iterator().next())), +                        ((Request) inv.getArguments()[0]).getHeaders().iterator().next(),, +++ b/client/rest/src/main/java/org/elasticsearch/client/Request.java, +import org.apache.http.entity.ContentType;, +import org.apache.http.message.BasicHeader;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +    private final List<Header> headers = new ArrayList<>();, +     * Add the provided header to the request., +    public void addHeader(String name, String value) {, +        Objects.requireNonNull(name, "header name cannot be null");, +        Objects.requireNonNull(value, "header value cannot be null");, +        this.headers.add(new ReqHeader(name, value));, +    List<Header> getHeaders() {, +        return Collections.unmodifiableList(headers);, +        if (headers.size() > 0) {, +            for (int h = 0; h < headers.size(); h++) {, +                b.append(headers.get(h).toString());, +                && headers.equals(other.headers), +        return Objects.hash(method, endpoint, parameters, entity, headers.hashCode(), httpAsyncResponseConsumerFactory);, +    }, +, +    /**, +     * Custom implementation of {@link BasicHeader} that overrides equals and hashCode., +     */, +    static final class ReqHeader extends BasicHeader {, +, +        ReqHeader(String name, String value) {, +            super(name, value);, +        }, +, +        @Override, +        public boolean equals(Object other) {, +            if (this == other) {, +                return true;, +            }, +            if (other instanceof ReqHeader) {, +                Header otherHeader = (Header) other;, +                return Objects.equals(getName(), otherHeader.getName()) &&, +                        Objects.equals(getValue(), otherHeader.getValue());, +            }, +            return false;, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(getName(), getValue());, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +        addHeaders(req, headers);, +        addHeaders(req, headers);, +    private static void addHeaders(Request request, Header... headers) {, +        Objects.requireNonNull(headers, "headers cannot be null");, +        for (Header header : headers) {, +            request.addHeader(header.getName(), header.getValue());, +        }, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CustomRestHighLevelClientTests.java, +            doAnswer(inv -> mockPerformRequest(((Request) inv.getArguments()[0]).getHeaders().iterator().next())), +                        ((Request) inv.getArguments()[0]).getHeaders().iterator().next(),, +++ b/client/rest/src/main/java/org/elasticsearch/client/Request.java, +import org.apache.http.entity.ContentType;, +import org.apache.http.message.BasicHeader;, +import java.util.ArrayList;]