[+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/TemplateUpgradeService.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    final AtomicInteger upgradesInProgress = new AtomicInteger();, +        if (upgradesInProgress.get() > 0) {, +            // we are already running some upgrades - skip this cluster state update, +            if (upgradesInProgress.compareAndSet(0, changes.get().v1().size() + changes.get().v2().size() + 1)) {, +                    threadPool.generic().execute(() -> upgradeTemplates(changes.get().v1(), changes.get().v2()));, +    void upgradeTemplates(Map<String, BytesReference> changes, Set<String> deletions) {, +        final AtomicBoolean anyUpgradeFailed = new AtomicBoolean(false);, +                        anyUpgradeFailed.set(true);, +                    tryFinishUpgrade(anyUpgradeFailed);, +                    anyUpgradeFailed.set(true);, +                    tryFinishUpgrade(anyUpgradeFailed);, +                        anyUpgradeFailed.set(true);, +                    tryFinishUpgrade(anyUpgradeFailed);, +                    anyUpgradeFailed.set(true);, +                    tryFinishUpgrade(anyUpgradeFailed);, +    void tryFinishUpgrade(AtomicBoolean anyUpgradeFailed) {, +        assert upgradesInProgress.get() > 0;, +        if (upgradesInProgress.decrementAndGet() == 1) {, +            try {, +                // this is the last upgrade, the templates should now be in the desired state, +                if (anyUpgradeFailed.get()) {, +                    logger.info("Templates were partially upgraded to version {}", Version.CURRENT);, +                } else {, +                    logger.info("Templates were upgraded successfuly to version {}", Version.CURRENT);, +                }, +                // Check upgraders are satisfied after the update completed. If they still, +                // report that changes are required, this might indicate a bug or that something, +                // else tinkering with the templates during the upgrade., +                final ImmutableOpenMap<String, IndexTemplateMetaData> upgradedTemplates =, +                        clusterService.state().getMetaData().getTemplates();, +                final boolean changesRequired = calculateTemplateChanges(upgradedTemplates).isPresent();, +                if (changesRequired) {, +                    logger.warn("Templates are still reported as out of date after the upgrade. The template upgrade will be retried.");, +                }, +            } finally {, +                final int noMoreUpgrades = upgradesInProgress.decrementAndGet();, +                assert noMoreUpgrades == 0;, +            }, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/TemplateUpgradeService.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    final AtomicInteger upgradesInProgress = new AtomicInteger();, +        if (upgradesInProgress.get() > 0) {, +            // we are already running some upgrades - skip this cluster state update, +            if (upgradesInProgress.compareAndSet(0, changes.get().v1().size() + changes.get().v2().size() + 1)) {, +                    threadPool.generic().execute(() -> upgradeTemplates(changes.get().v1(), changes.get().v2()));, +    void upgradeTemplates(Map<String, BytesReference> changes, Set<String> deletions) {, +        final AtomicBoolean anyUpgradeFailed = new AtomicBoolean(false);, +                        anyUpgradeFailed.set(true);, +                    tryFinishUpgrade(anyUpgradeFailed);, +                    anyUpgradeFailed.set(true);, +                    tryFinishUpgrade(anyUpgradeFailed);, +                        anyUpgradeFailed.set(true);, +                    tryFinishUpgrade(anyUpgradeFailed);, +                    anyUpgradeFailed.set(true);, +                    tryFinishUpgrade(anyUpgradeFailed);, +    void tryFinishUpgrade(AtomicBoolean anyUpgradeFailed) {, +        assert upgradesInProgress.get() > 0;, +        if (upgradesInProgress.decrementAndGet() == 1) {, +            try {, +                // this is the last upgrade, the templates should now be in the desired state, +                if (anyUpgradeFailed.get()) {, +                    logger.info("Templates were partially upgraded to version {}", Version.CURRENT);, +                } else {, +                    logger.info("Templates were upgraded successfuly to version {}", Version.CURRENT);, +                }, +                // Check upgraders are satisfied after the update completed. If they still, +                // report that changes are required, this might indicate a bug or that something, +                // else tinkering with the templates during the upgrade., +                final ImmutableOpenMap<String, IndexTemplateMetaData> upgradedTemplates =, +                        clusterService.state().getMetaData().getTemplates();, +                final boolean changesRequired = calculateTemplateChanges(upgradedTemplates).isPresent();, +                if (changesRequired) {, +                    logger.warn("Templates are still reported as out of date after the upgrade. The template upgrade will be retried.");, +                }, +            } finally {, +                final int noMoreUpgrades = upgradesInProgress.decrementAndGet();, +                assert noMoreUpgrades == 0;, +            }, +        }, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/TemplateUpgradeServiceTests.java, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import org.elasticsearch.test.ClusterServiceUtils;, +import org.elasticsearch.threadpool.TestThreadPool;, +import org.junit.After;, +import org.junit.Before;, +import java.util.concurrent.Semaphore;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.elasticsearch.test.ClusterServiceUtils.createClusterService;, +import static org.elasticsearch.test.ClusterServiceUtils.setState;, +    private ThreadPool threadPool;, +    private ClusterService clusterService;, +, +    @Before, +    public void setUpTest() throws Exception {, +        threadPool = new TestThreadPool("TemplateUpgradeServiceTests");, +        clusterService = createClusterService(threadPool);]