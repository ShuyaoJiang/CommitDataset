[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Directories.java, +     * @param directory The directory to delete all the files from, +            } catch (FileNotFoundException e) {, +                // ignore, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Directories.java, +     * @param directory The directory to delete all the files from, +            } catch (FileNotFoundException e) {, +                // ignore, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +        try {, +            indexShard.recovering();, +        } catch (IllegalIndexShardStateException e) {, +            // that's fine, since we might be called concurrently, just ignore this, we are already recovering, +            listener.onIgnoreRecovery("already in recovering process, " + e.getMessage());, +            return;, +        }, +                    if (indexShard.state() == IndexShardState.CLOSED) {, +                        listener.onIgnoreRecovery("ignoring recovery while waiting on retry, closed");, +                        recoveryStatus = null;, +                        if (indexShard.state() == IndexShardState.CLOSED) {, +                            listener.onIgnoreRecovery("Interrupted while waiting for recovery, but we should ignore since closed");, +        if (indexShard.state() == IndexShardState.RECOVERING) {, +            // shard is recovering, don't snapshot, +            return;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Directories.java, +     * @param directory The directory to delete all the files from, +            } catch (FileNotFoundException e) {, +                // ignore, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +        try {, +            indexShard.recovering();, +        } catch (IllegalIndexShardStateException e) {, +            // that's fine, since we might be called concurrently, just ignore this, we are already recovering, +            listener.onIgnoreRecovery("already in recovering process, " + e.getMessage());, +            return;, +        }, +                    if (indexShard.state() == IndexShardState.CLOSED) {, +                        listener.onIgnoreRecovery("ignoring recovery while waiting on retry, closed");, +                        recoveryStatus = null;, +                        if (indexShard.state() == IndexShardState.CLOSED) {, +                            listener.onIgnoreRecovery("Interrupted while waiting for recovery, but we should ignore since closed");, +        if (indexShard.state() == IndexShardState.RECOVERING) {, +            // shard is recovering, don't snapshot, +            return;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +    /**, +     * Marks the shard as recovering, fails with exception is recovering is not allowed to be set., +     */]