[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgUnitTests.java, +            b += (vs[i + period] - vs[i]) / period;, +        int idx = window.size() - period + (0 % period);, +        double expected = (s + (1 * b)) * seasonal[idx];, +            b += (vs[i + period] - vs[i]) / period;, +        if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) {, +            Arrays.fill(seasonal, 0.0);, +        } else {, +            for (int i = 0; i < period; i++) {, +        }, +        for (int i = 1; i <= numPredictions; i++) {, +            int idx = window.size() - period + ((i - 1) % period);, +            expected[i-1] = (s + (i * b)) * seasonal[idx];, +            assertThat(Double.compare(expected[i-1], actual[i-1]), equalTo(0));, +            b += (vs[i + period] - vs[i]) / period;, +        if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) {, +            Arrays.fill(seasonal, 0.0);, +        } else {, +            for (int i = 0; i < period; i++) {, +        }, +            seasonal[i] = gamma * (vs[i] - (last_s - last_b )) + (1 - gamma) * seasonal[i - period];, +        int idx = window.size() - period + (0 % period);, +        double expected = s + (1 * b) + seasonal[idx];, +            b += (vs[i + period] - vs[i]) / period;, +        if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) {, +            Arrays.fill(seasonal, 0.0);, +        } else {, +            for (int i = 0; i < period; i++) {, +        }, +            seasonal[i] = gamma * (vs[i] - (last_s - last_b )) + (1 - gamma) * seasonal[i - period];, +        for (int i = 1; i <= numPredictions; i++) {, +            int idx = window.size() - period + ((i - 1) % period);, +            expected[i-1] = s + (i * b) + seasonal[idx];, +            assertThat(Double.compare(expected[i-1], actual[i-1]), equalTo(0));]