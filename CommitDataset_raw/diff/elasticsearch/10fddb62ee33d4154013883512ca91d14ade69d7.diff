[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    long successfulPingCount() {, +        return successfulPings.count();, +    }, +, +    long failedPingCount() {, +        return failedPings.count();, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    long successfulPingCount() {, +        return successfulPings.count();, +    }, +, +    long failedPingCount() {, +        return failedPings.count();, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java, +            assertThat(nettyA.successfulPingCount(), greaterThan(100L));, +            assertThat(nettyB.successfulPingCount(), greaterThan(100L));, +        assertThat(nettyA.failedPingCount(), equalTo(0L));, +        assertThat(nettyB.failedPingCount(), equalTo(0L));, +            (request, channel, task) -> {, +            assertThat(nettyA.successfulPingCount(), greaterThan(200L));, +            assertThat(nettyB.successfulPingCount(), greaterThan(200L));, +        assertThat(nettyA.failedPingCount(), equalTo(0L));, +        assertThat(nettyB.failedPingCount(), equalTo(0L));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    long successfulPingCount() {, +        return successfulPings.count();, +    }, +, +    long failedPingCount() {, +        return failedPings.count();, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java, +            assertThat(nettyA.successfulPingCount(), greaterThan(100L));, +            assertThat(nettyB.successfulPingCount(), greaterThan(100L));, +        assertThat(nettyA.failedPingCount(), equalTo(0L));, +        assertThat(nettyB.failedPingCount(), equalTo(0L));, +            (request, channel, task) -> {, +            assertThat(nettyA.successfulPingCount(), greaterThan(200L));, +            assertThat(nettyB.successfulPingCount(), greaterThan(200L));, +        assertThat(nettyA.failedPingCount(), equalTo(0L));, +        assertThat(nettyB.failedPingCount(), equalTo(0L));, +++ b/server/src/main/java/org/elasticsearch/cluster/NodeConnectionsService.java, +                    protected void doRun() {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    long successfulPingCount() {, +        return successfulPings.count();, +    }, +, +    long failedPingCount() {, +        return failedPings.count();, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java, +            assertThat(nettyA.successfulPingCount(), greaterThan(100L));, +            assertThat(nettyB.successfulPingCount(), greaterThan(100L));, +        assertThat(nettyA.failedPingCount(), equalTo(0L));, +        assertThat(nettyB.failedPingCount(), equalTo(0L));, +            (request, channel, task) -> {, +            assertThat(nettyA.successfulPingCount(), greaterThan(200L));, +            assertThat(nettyB.successfulPingCount(), greaterThan(200L));, +        assertThat(nettyA.failedPingCount(), equalTo(0L));, +        assertThat(nettyB.failedPingCount(), equalTo(0L));, +++ b/server/src/main/java/org/elasticsearch/cluster/NodeConnectionsService.java, +                    protected void doRun() {, +++ b/server/src/main/java/org/elasticsearch/transport/CloseableConnection.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.transport;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.common.concurrent.CompletableContext;, +, +, +/**, + * Abstract Transport.Connection that provides common close logic., + */, +public abstract class CloseableConnection implements Transport.Connection {, +, +    private final CompletableContext<Void> closeContext = new CompletableContext<>();, +, +    @Override, +    public void addCloseListener(ActionListener<Void> listener) {, +        closeContext.addListener(ActionListener.toBiConsumer(listener));, +    }, +]