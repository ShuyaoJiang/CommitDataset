[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +        } catch (QueryShardException|ParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +        } catch (QueryShardException|ParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/common/ParsingException.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentLocation;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.rest.RestStatus;, +, +import java.io.IOException;, +, +/**, + * Exception that can be used when parsing queries with a given {@link QueryParseContext}., + * Can contain information about location of the error., + */, +public class ParsingException extends ElasticsearchException {, +, +    protected static final int UNKNOWN_POSITION = -1;, +    private final int lineNumber;, +    private final int columnNumber;, +, +    public ParsingException(QueryParseContext parseContext, String msg, Object... args) {, +        this(parseContext, msg, null, args);, +    }, +, +    public ParsingException(QueryParseContext parseContext, String msg, Throwable cause, Object... args) {, +        this(parseContext.index(), parseContext.parser(), msg, cause, args);, +    }, +, +    public ParsingException(Index index, XContentParser parser, String msg, Throwable cause, Object... args) {, +        super(msg, cause, args);, +        setIndex(index);, +        int lineNumber = UNKNOWN_POSITION;, +        int columnNumber = UNKNOWN_POSITION;, +        if (parser != null) {, +            XContentLocation location = parser.getTokenLocation();, +            if (location != null) {, +                lineNumber = location.lineNumber;, +                columnNumber = location.columnNumber;, +            }, +        }, +        this.columnNumber = columnNumber;, +        this.lineNumber = lineNumber;, +    }, +, +    /**, +     * This constructor is provided for use in unit tests where a, +     * {@link QueryParseContext} may not be available, +     */, +    public ParsingException(Index index, int line, int col, String msg, Throwable cause) {, +        super(msg, cause);, +        setIndex(index);, +        this.lineNumber = line;, +        this.columnNumber = col;, +    }, +, +    public ParsingException(StreamInput in) throws IOException{, +        super(in);, +        lineNumber = in.readInt();, +        columnNumber = in.readInt();, +    }, +, +    /**, +     * Line number of the location of the error, +     *]