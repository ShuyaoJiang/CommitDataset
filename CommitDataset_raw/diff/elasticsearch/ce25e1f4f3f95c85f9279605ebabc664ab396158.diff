[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    void waitFlushToCompletion(String flushId) {, +                checkResultsProcessorIsAlive();, +    private void checkResultsProcessorIsAlive() {, +        if (autoDetectResultProcessor.isFailed()) {, +            ParameterizedMessage message =, +                    new ParameterizedMessage("[{}] Unexpected death of the result processor", job.getId());, +            LOGGER.error(message);, +            throw new ElasticsearchException(message.getFormattedMessage());, +        }, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    void waitFlushToCompletion(String flushId) {, +                checkResultsProcessorIsAlive();, +    private void checkResultsProcessorIsAlive() {, +        if (autoDetectResultProcessor.isFailed()) {, +            ParameterizedMessage message =, +                    new ParameterizedMessage("[{}] Unexpected death of the result processor", job.getId());, +            LOGGER.error(message);, +            throw new ElasticsearchException(message.getFormattedMessage());, +        }, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +            handler.accept(ExceptionsHelper.conflictStatusException(message));, +            return;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    void waitFlushToCompletion(String flushId) {, +                checkResultsProcessorIsAlive();, +    private void checkResultsProcessorIsAlive() {, +        if (autoDetectResultProcessor.isFailed()) {, +            ParameterizedMessage message =, +                    new ParameterizedMessage("[{}] Unexpected death of the result processor", job.getId());, +            LOGGER.error(message);, +            throw new ElasticsearchException(message.getFormattedMessage());, +        }, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +            handler.accept(ExceptionsHelper.conflictStatusException(message));, +            return;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java, +    private volatile boolean failed;, +            failed = true;, +, +        if (failed) {, +            return false;, +        }, +    /**, +     * If failed then there was an error parsing the results that cannot be recovered from, +     * @return true if failed, +     */, +    public boolean isFailed() {, +        return failed;, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    void waitFlushToCompletion(String flushId) {, +                checkResultsProcessorIsAlive();, +    private void checkResultsProcessorIsAlive() {, +        if (autoDetectResultProcessor.isFailed()) {, +            ParameterizedMessage message =, +                    new ParameterizedMessage("[{}] Unexpected death of the result processor", job.getId());, +            LOGGER.error(message);, +            throw new ElasticsearchException(message.getFormattedMessage());, +        }, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +            handler.accept(ExceptionsHelper.conflictStatusException(message));, +            return;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java, +    private volatile boolean failed;, +            failed = true;, +, +        if (failed) {, +            return false;, +        }, +    /**, +     * If failed then there was an error parsing the results that cannot be recovered from, +     * @return true if failed, +     */, +    public boolean isFailed() {, +        return failed;, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicatorTests.java, +    public void testWaitForFlushReturnsIfParserFails() throws IOException {, +        AutodetectProcess process = mockAutodetectProcessWithOutputStream();, +        when(process.isProcessAlive()).thenReturn(true);, +        AutoDetectResultProcessor processor = mock(AutoDetectResultProcessor.class);, +        when(processor.isFailed()).thenReturn(true);, +        when(processor.waitForFlushAcknowledgement(anyString(), any())).thenReturn(false);, +        AutodetectCommunicator communicator = createAutodetectCommunicator(process, processor);, +        expectThrows(ElasticsearchException.class, () -> communicator.waitFlushToCompletion("foo"));, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +    void waitFlushToCompletion(String flushId) {]