[+++ b/.idea/dictionaries/kimchy.xml, +      <w>catenate</w>, +      <w>numerics</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>catenate</w>, +      <w>numerics</w>, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.apache.lucene.analysis.miscellaneous;, +, +import org.apache.lucene.analysis.CharArraySet;, +import org.apache.lucene.analysis.TokenFilter;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;, +import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;, +import org.apache.lucene.analysis.tokenattributes.TypeAttribute;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.RamUsageEstimator;, +, +import java.io.IOException;, +, +/**, + * Splits words into subwords and performs optional transformations on subword groups., + * Words are split into subwords with the following rules:, + * - split on intra-word delimiters (by default, all non alpha-numeric characters)., + * - "Wi-Fi" -> "Wi", "Fi", + * - split on case transitions, + * - "PowerShot" -> "Power", "Shot", + * - split on letter-number transitions, + * - "SD500" -> "SD", "500", + * - leading and trailing intra-word delimiters on each subword are ignored, + * - "//hello---there, 'dude'" -> "hello", "there", "dude", + * - trailing "'s" are removed for each subword, + * - "O'Neil's" -> "O", "Neil", + * - Note: this step isn't performed in a separate filter because of possible subword combinations., + *, + * The <b>combinations</b> parameter affects how subwords are combined:, + * - combinations="0" causes no subword combinations., + * - "PowerShot" -> 0:"Power", 1:"Shot"  (0 and 1 are the token positions), + * - combinations="1" means that in addition to the subwords, maximum runs of non-numeric subwords are catenated and produced at the same position of the last subword in the run., + * - "PowerShot" -> 0:"Power", 1:"Shot" 1:"PowerShot", + * - "A's+B's&C's" -> 0:"A", 1:"B", 2:"C", 2:"ABC", + * - "Super-Duper-XL500-42-AutoCoder!" -> 0:"Super", 1:"Duper", 2:"XL", 2:"SuperDuperXL", 3:"500" 4:"42", 5:"Auto", 6:"Coder", 6:"AutoCoder", + *, + * One use for WordDelimiterFilter is to help match words with different subword delimiters., + * For example, if the source text contained "wi-fi" one may want "wifi" "WiFi" "wi-fi" "wi+fi" queries to all match., + * One way of doing so is to specify combinations="1" in the analyzer used for indexing, and combinations="0" (the default), + * in the analyzer used for querying.  Given that the current StandardTokenizer immediately removes many intra-word, + * delimiters, it is recommended that this filter be used after a tokenizer that does not do this (such as WhitespaceTokenizer)., + */, +// LUCENE MONITOR: Part of Lucene 4.0, once we upgrade, remove it, +public final class WordDelimiterFilter extends TokenFilter {, +, +    public static final int LOWER = 0x01;, +    public static final int UPPER = 0x02;, +    public static final int DIGIT = 0x04;, +    public static final int SUBWORD_DELIM = 0x08;, +, +    // combinations: for testing, not for setting bits, +    public static final int ALPHA = 0x03;, +    public static final int ALPHANUM = 0x07;, +, +    /**, +     * If true, causes parts of words to be generated:, +     * <p/>, +     * "PowerShot" => "Power" "Shot", +     */, +    final boolean generateWordParts;, +, +    /**, +     * If true, causes number subwords to be generated:, +     * <p/>, +     * "500-42" => "500" "42", +     */, +    final boolean generateNumberParts;, +, +    /**, +     * If true, causes maximum runs of word parts to be catenated:, +     * <p/>, +     * "wi-fi" => "wifi", +     */]