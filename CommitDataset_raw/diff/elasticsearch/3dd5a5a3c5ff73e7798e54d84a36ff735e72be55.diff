[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +            new CcrRepositoryManager(settings, clusterService, client),, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +            new CcrRepositoryManager(settings, clusterService, client),, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrRepositoryManager.java, +import org.elasticsearch.common.component.AbstractLifecycleComponent;, +import java.io.IOException;, +import java.util.Set;, +class CcrRepositoryManager extends AbstractLifecycleComponent {, +    private final RemoteSettingsUpdateListener updateListener;, +        updateListener = new RemoteSettingsUpdateListener(settings);, +        updateListener.listenForUpdates(clusterService.getClusterSettings());, +    protected void doStart() {, +        updateListener.init();, +    }, +, +    @Override, +    protected void doStop() {, +    }, +, +    @Override, +    protected void doClose() throws IOException {, +    }, +, +    private void putRepository(String repositoryName) {, +, +    private void deleteRepository(String repositoryName) {, +        DeleteInternalCcrRepositoryRequest request = new DeleteInternalCcrRepositoryRequest(repositoryName);, +        PlainActionFuture<DeleteInternalCcrRepositoryAction.DeleteInternalCcrRepositoryResponse> f = PlainActionFuture.newFuture();, +        client.execute(DeleteInternalCcrRepositoryAction.INSTANCE, request, f);, +        assert f.isDone() : "Should be completed as it is executed synchronously";, +    }, +, +    private class RemoteSettingsUpdateListener extends RemoteClusterAware {, +, +        private RemoteSettingsUpdateListener(Settings settings) {, +            super(settings);, +        }, +, +        void init() {, +            Set<String> clusterAliases = buildRemoteClustersDynamicConfig(settings).keySet();, +            for (String clusterAlias : clusterAliases) {, +                putRepository(CcrRepository.NAME_PREFIX + clusterAlias);, +            }, +        }, +, +        @Override, +        protected void updateRemoteCluster(String clusterAlias, List<String> addresses, String proxy) {, +            String repositoryName = CcrRepository.NAME_PREFIX + clusterAlias;, +            if (addresses.isEmpty()) {, +                deleteRepository(repositoryName);, +            } else {, +                putRepository(repositoryName);, +            }, +        }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +            new CcrRepositoryManager(settings, clusterService, client),, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrRepositoryManager.java, +import org.elasticsearch.common.component.AbstractLifecycleComponent;, +import java.io.IOException;, +import java.util.Set;, +class CcrRepositoryManager extends AbstractLifecycleComponent {, +    private final RemoteSettingsUpdateListener updateListener;, +        updateListener = new RemoteSettingsUpdateListener(settings);, +        updateListener.listenForUpdates(clusterService.getClusterSettings());, +    protected void doStart() {, +        updateListener.init();, +    }, +, +    @Override, +    protected void doStop() {, +    }, +, +    @Override, +    protected void doClose() throws IOException {, +    }, +, +    private void putRepository(String repositoryName) {, +, +    private void deleteRepository(String repositoryName) {, +        DeleteInternalCcrRepositoryRequest request = new DeleteInternalCcrRepositoryRequest(repositoryName);, +        PlainActionFuture<DeleteInternalCcrRepositoryAction.DeleteInternalCcrRepositoryResponse> f = PlainActionFuture.newFuture();, +        client.execute(DeleteInternalCcrRepositoryAction.INSTANCE, request, f);, +        assert f.isDone() : "Should be completed as it is executed synchronously";, +    }, +, +    private class RemoteSettingsUpdateListener extends RemoteClusterAware {, +, +        private RemoteSettingsUpdateListener(Settings settings) {, +            super(settings);, +        }, +, +        void init() {, +            Set<String> clusterAliases = buildRemoteClustersDynamicConfig(settings).keySet();, +            for (String clusterAlias : clusterAliases) {, +                putRepository(CcrRepository.NAME_PREFIX + clusterAlias);, +            }, +        }, +, +        @Override]