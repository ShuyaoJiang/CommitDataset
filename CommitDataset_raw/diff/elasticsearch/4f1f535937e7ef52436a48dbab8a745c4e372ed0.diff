[+++ b/watcher/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +            if (template.getParams() != null) {, +                watcherContextParams.putAll(template.getParams());, +            }, +            template = new Template(template.getScript(), template.getType(), template.getLang(), template.getContentType(),, +                    watcherContextParams);, +++ b/watcher/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +            if (template.getParams() != null) {, +                watcherContextParams.putAll(template.getParams());, +            }, +            template = new Template(template.getScript(), template.getType(), template.getLang(), template.getContentType(),, +                    watcherContextParams);, +++ b/watcher/src/test/java/org/elasticsearch/watcher/input/search/SearchInputTests.java, +import org.joda.time.chrono.ISOChronology;, +                + "\"type\":\"boolean\"}}},\"filter\":{\"range\":{\"_timestamp\":", +                + "{\"from\":\"{{ctx.trigger.scheduled_time}}||-{{seconds_param}}\",\"to\":\"{{ctx.trigger.scheduled_time}}\",", +                + "\"include_lower\":true,\"include_upper\":true}}}}}}";, +        triggerParams.put("triggered_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));, +        triggerParams.put("scheduled_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));, +        ctxParams.put("execution_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));, +++ b/watcher/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +            if (template.getParams() != null) {, +                watcherContextParams.putAll(template.getParams());, +            }, +            template = new Template(template.getScript(), template.getType(), template.getLang(), template.getContentType(),, +                    watcherContextParams);, +++ b/watcher/src/test/java/org/elasticsearch/watcher/input/search/SearchInputTests.java, +import org.joda.time.chrono.ISOChronology;, +                + "\"type\":\"boolean\"}}},\"filter\":{\"range\":{\"_timestamp\":", +                + "{\"from\":\"{{ctx.trigger.scheduled_time}}||-{{seconds_param}}\",\"to\":\"{{ctx.trigger.scheduled_time}}\",", +                + "\"include_lower\":true,\"include_upper\":true}}}}}}";, +        triggerParams.put("triggered_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));, +        triggerParams.put("scheduled_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));, +        ctxParams.put("execution_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));, +++ b/watcher/src/test/java/org/elasticsearch/watcher/transform/search/SearchTransformTests.java, +import org.joda.time.chrono.ISOChronology;, +        SearchSourceBuilder source = new SearchSourceBuilder().query(QueryBuilders.matchAllQuery());, +        triggerParams.put("triggered_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));, +        triggerParams.put("scheduled_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));, +        ctxParams.put("execution_time", new DateTime(1970, 01, 01, 00, 01, 00, 000, ISOChronology.getInstanceUTC()));]