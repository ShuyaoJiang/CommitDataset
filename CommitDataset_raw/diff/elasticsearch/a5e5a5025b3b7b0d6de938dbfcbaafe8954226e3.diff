[+++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.common.util.ExtensionPoint;, +import org.elasticsearch.index.cache.IndexCache;, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.cache.query.QueryCache;, +import org.elasticsearch.index.cache.query.index.IndexQueryCache;, +import org.elasticsearch.index.cache.query.none.NoneQueryCache;, +import org.elasticsearch.indices.IndicesWarmer;, +import org.elasticsearch.indices.cache.query.IndicesQueryCache;, +    public static final String INDEX_QUERY_CACHE = "index";, +    public static final String NONE_QUERY_CACHE = "none";, +    public static final String QUERY_CACHE_TYPE = "index.queries.cache.type";, +    // for test purposes only, +    public static final String QUERY_CACHE_EVERYTHING = "index.queries.cache.everything";, +    private final IndicesQueryCache indicesQueryCache;, +    private final Map<String, BiFunction<IndexSettings, IndicesQueryCache, QueryCache>> queryCaches = new HashMap<>();, +    private IndicesWarmer indicesWarmer;, +    public IndexModule(IndexSettings indexSettings, IndexStoreConfig indexStoreConfig, IndicesQueryCache indicesQueryCache, IndicesWarmer warmer) {, +        this.indicesQueryCache = indicesQueryCache;, +        this.indicesWarmer = warmer;, +        registerQueryCache(INDEX_QUERY_CACHE, IndexQueryCache::new);, +        registerQueryCache(NONE_QUERY_CACHE, (a, b) -> new NoneQueryCache(a));, +    /**, +     * Registers a {@link QueryCache} provider for a given name, +     * @param name the providers / caches name, +     * @param provider the provider instance, +     */, +    void registerQueryCache(String name, BiFunction<IndexSettings, IndicesQueryCache, QueryCache> provider) { // pkg private - no need to expose this, +        if (provider == null) {, +            throw new IllegalArgumentException("provider must not be null");, +        }, +        if (queryCaches.containsKey(name)) {, +            throw new IllegalArgumentException("provider for name [" + name + "] is already registered");, +        }, +        queryCaches.put(name, provider);, +    }, +, +        final String queryCacheType = settings.getSettings().get(IndexModule.QUERY_CACHE_TYPE, IndexModule.INDEX_QUERY_CACHE);, +        BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider = queryCaches.get(queryCacheType);, +        BitsetFilterCache bitsetFilterCache = new BitsetFilterCache(settings, indicesWarmer);, +        QueryCache queryCache = queryCacheProvider.apply(settings, indicesQueryCache);, +        IndexCache indexCache = new IndexCache(settings, queryCache, bitsetFilterCache);, +        bind(QueryCache.class).toInstance(queryCache);, +        bind(IndexCache.class).toInstance(indexCache);, +        bind(BitsetFilterCache.class).toInstance(bitsetFilterCache);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.common.util.ExtensionPoint;, +import org.elasticsearch.index.cache.IndexCache;, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.cache.query.QueryCache;, +import org.elasticsearch.index.cache.query.index.IndexQueryCache;, +import org.elasticsearch.index.cache.query.none.NoneQueryCache;, +import org.elasticsearch.indices.IndicesWarmer;, +import org.elasticsearch.indices.cache.query.IndicesQueryCache;, +    public static final String INDEX_QUERY_CACHE = "index";, +    public static final String NONE_QUERY_CACHE = "none";, +    public static final String QUERY_CACHE_TYPE = "index.queries.cache.type";, +    // for test purposes only, +    public static final String QUERY_CACHE_EVERYTHING = "index.queries.cache.everything";, +    private final IndicesQueryCache indicesQueryCache;, +    private final Map<String, BiFunction<IndexSettings, IndicesQueryCache, QueryCache>> queryCaches = new HashMap<>();, +    private IndicesWarmer indicesWarmer;, +    public IndexModule(IndexSettings indexSettings, IndexStoreConfig indexStoreConfig, IndicesQueryCache indicesQueryCache, IndicesWarmer warmer) {, +        this.indicesQueryCache = indicesQueryCache;, +        this.indicesWarmer = warmer;, +        registerQueryCache(INDEX_QUERY_CACHE, IndexQueryCache::new);, +        registerQueryCache(NONE_QUERY_CACHE, (a, b) -> new NoneQueryCache(a));, +    /**, +     * Registers a {@link QueryCache} provider for a given name, +     * @param name the providers / caches name, +     * @param provider the provider instance, +     */, +    void registerQueryCache(String name, BiFunction<IndexSettings, IndicesQueryCache, QueryCache> provider) { // pkg private - no need to expose this, +        if (provider == null) {, +            throw new IllegalArgumentException("provider must not be null");, +        }, +        if (queryCaches.containsKey(name)) {, +            throw new IllegalArgumentException("provider for name [" + name + "] is already registered");, +        }, +        queryCaches.put(name, provider);, +    }, +, +        final String queryCacheType = settings.getSettings().get(IndexModule.QUERY_CACHE_TYPE, IndexModule.INDEX_QUERY_CACHE);, +        BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider = queryCaches.get(queryCacheType);, +        BitsetFilterCache bitsetFilterCache = new BitsetFilterCache(settings, indicesWarmer);, +        QueryCache queryCache = queryCacheProvider.apply(settings, indicesQueryCache);, +        IndexCache indexCache = new IndexCache(settings, queryCache, bitsetFilterCache);, +        bind(QueryCache.class).toInstance(queryCache);, +        bind(IndexCache.class).toInstance(indexCache);, +        bind(BitsetFilterCache.class).toInstance(bitsetFilterCache);, +++ b/core/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.common.util.ExtensionPoint;, +import org.elasticsearch.index.cache.IndexCache;, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.cache.query.QueryCache;, +import org.elasticsearch.index.cache.query.index.IndexQueryCache;, +import org.elasticsearch.index.cache.query.none.NoneQueryCache;, +import org.elasticsearch.indices.IndicesWarmer;, +import org.elasticsearch.indices.cache.query.IndicesQueryCache;]