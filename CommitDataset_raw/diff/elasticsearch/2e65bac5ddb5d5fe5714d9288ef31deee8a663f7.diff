[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/GetRollupJobsAction.java, +            PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> RollupJobConfig.fromXContent(p, null), CONFIG);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/GetRollupJobsAction.java, +            PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> RollupJobConfig.fromXContent(p, null), CONFIG);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/PutRollupJobAction.java, +        public static Request fromXContent(final XContentParser parser, final String id) throws IOException {, +            return new Request(RollupJobConfig.fromXContent(parser, id));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/GetRollupJobsAction.java, +            PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> RollupJobConfig.fromXContent(p, null), CONFIG);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/PutRollupJobAction.java, +        public static Request fromXContent(final XContentParser parser, final String id) throws IOException {, +            return new Request(RollupJobConfig.fromXContent(parser, id));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/MetricConfig.java, +    static final String NAME = "metrics";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/GetRollupJobsAction.java, +            PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> RollupJobConfig.fromXContent(p, null), CONFIG);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/PutRollupJobAction.java, +        public static Request fromXContent(final XContentParser parser, final String id) throws IOException {, +            return new Request(RollupJobConfig.fromXContent(parser, id));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/MetricConfig.java, +    static final String NAME = "metrics";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/RollupJob.java, +        PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> RollupJobConfig.fromXContent(p, null), CONFIG);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/GetRollupJobsAction.java, +            PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> RollupJobConfig.fromXContent(p, null), CONFIG);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/PutRollupJobAction.java, +        public static Request fromXContent(final XContentParser parser, final String id) throws IOException {, +            return new Request(RollupJobConfig.fromXContent(parser, id));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/MetricConfig.java, +    static final String NAME = "metrics";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/RollupJob.java, +        PARSER.declareObject(ConstructingObjectParser.constructorArg(), (p, c) -> RollupJobConfig.fromXContent(p, null), CONFIG);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/RollupJobConfig.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +, +    private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(20);, +    private static final String ID = "id";, +    private static final String TIMEOUT = "timeout";, +    private static final String CRON = "cron";, +    private static final String PAGE_SIZE = "page_size";, +    private static final String INDEX_PATTERN = "index_pattern";, +    private static final String ROLLUP_INDEX = "rollup_index";, +    private final String id;, +    private final String indexPattern;, +    private final String rollupIndex;, +    private final GroupConfig groupConfig;, +    private final List<MetricConfig> metricsConfig;, +    private final TimeValue timeout;, +    private final String cron;, +    private final int pageSize;, +    private static final ConstructingObjectParser<RollupJobConfig, String> PARSER;, +        PARSER = new ConstructingObjectParser<>(NAME, false, (args, optionalId) -> {, +            String id = args[0] != null ? (String) args[0] : optionalId;, +            String indexPattern = (String) args[1];, +            String rollupIndex = (String) args[2];, +            GroupConfig groupConfig = (GroupConfig) args[3];, +            @SuppressWarnings("unchecked"), +            List<MetricConfig> metricsConfig = (List<MetricConfig>) args[4];, +            TimeValue timeout = (TimeValue) args[5];, +            String cron = (String) args[6];, +            int pageSize = (int) args[7];, +            return new RollupJobConfig(id, indexPattern, rollupIndex, cron, pageSize, groupConfig, metricsConfig, timeout);, +        });, +        PARSER.declareString(optionalConstructorArg(), new ParseField(ID));, +        PARSER.declareString(constructorArg(), new ParseField(INDEX_PATTERN));, +        PARSER.declareString(constructorArg(), new ParseField(ROLLUP_INDEX));, +        PARSER.declareObject(optionalConstructorArg(), (p, c) -> GroupConfig.fromXContent(p), new ParseField(GroupConfig.NAME));, +        PARSER.declareObjectArray(optionalConstructorArg(), (p, c) -> MetricConfig.fromXContent(p), new ParseField(MetricConfig.NAME));, +        PARSER.declareField(optionalConstructorArg(), (p, c) -> TimeValue.parseTimeValue(p.textOrNull(), TIMEOUT),, +            new ParseField(TIMEOUT), ObjectParser.ValueType.STRING_OR_NULL);, +        PARSER.declareString(constructorArg(), new ParseField(CRON));, +        PARSER.declareInt(constructorArg(), new ParseField(PAGE_SIZE));, +    public RollupJobConfig(final String id,, +                           final String indexPattern,, +                           final String rollupIndex,, +                           final String cron,, +                           final int pageSize,, +                           final GroupConfig groupConfig,, +                           final List<MetricConfig> metricsConfig,, +                           final @Nullable TimeValue timeout) {, +        if (id == null || id.isEmpty()) {, +            throw new IllegalArgumentException("Id must be a non-null, non-empty string");, +        }, +        if (indexPattern == null || indexPattern.isEmpty()) {, +            throw new IllegalArgumentException("Index pattern must be a non-null, non-empty string");, +        }, +        if (Regex.isMatchAllPattern(indexPattern)) {, +            throw new IllegalArgumentException("Index pattern must not match all indices (as it would match it's own rollup index");, +        }, +        if (Regex.isSimpleMatchPattern(indexPattern)) {, +            if (Regex.simpleMatch(indexPattern, rollupIndex)) {, +                throw new IllegalArgumentException("Index pattern would match rollup index name which is not allowed");, +            }, +        }, +        if (indexPattern.equals(rollupIndex)) {, +            throw new IllegalArgumentException("Rollup index may not be the same as the index pattern");]