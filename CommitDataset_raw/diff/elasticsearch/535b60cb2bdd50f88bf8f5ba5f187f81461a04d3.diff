[+++ b/core/src/main/java/org/elasticsearch/search/internal/DefaultSearchContext.java, +            if (scrollContext == null) {, +            throw new QueryPhaseExecutionException(this,, +                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow, +                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the [", +                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.");, +++ b/core/src/main/java/org/elasticsearch/search/internal/DefaultSearchContext.java, +            if (scrollContext == null) {, +            throw new QueryPhaseExecutionException(this,, +                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow, +                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the [", +                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.");, +++ b/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollIT.java, +import org.elasticsearch.index.IndexSettings;, + * Tests for scrolling., +    /**, +     * Tests that we use an optimization shrinking the batch to the size of the shard. Thus the Integer.MAX_VALUE window doesn't OOM us., +     */, +        /*, +         * Disable the max result window setting for this test because it'll reject the search's unreasonable batch size. We want, +         * unreasonable batch sizes to just OOM., +         */, +        client().admin().indices().prepareUpdateSettings("index"), +                .setSettings(Settings.builder().put(IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey(), Integer.MAX_VALUE)).get();, +++ b/core/src/main/java/org/elasticsearch/search/internal/DefaultSearchContext.java, +            if (scrollContext == null) {, +            throw new QueryPhaseExecutionException(this,, +                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow, +                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the [", +                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.");, +++ b/core/src/test/java/org/elasticsearch/search/scroll/SearchScrollIT.java, +import org.elasticsearch.index.IndexSettings;, + * Tests for scrolling., +    /**, +     * Tests that we use an optimization shrinking the batch to the size of the shard. Thus the Integer.MAX_VALUE window doesn't OOM us., +     */, +        /*, +         * Disable the max result window setting for this test because it'll reject the search's unreasonable batch size. We want, +         * unreasonable batch sizes to just OOM., +         */, +        client().admin().indices().prepareUpdateSettings("index"), +                .setSettings(Settings.builder().put(IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey(), Integer.MAX_VALUE)).get();, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/30_limits.yaml, +"Request window limits without scroll":, +      catch:      /Result window is too large, from \+ size must be less than or equal to[:] \[10000\] but was \[10010\]\. See the scroll api for a more efficient way to request large data sets\./, +"Request window limits with scroll":, +  - do:, +      catch:      /Batch size is too large, size must be less than or equal to[:] \[10000\] but was \[10010\]\. Scroll batch sizes cost as much memory as result windows so they are controlled by the \[index.max_result_window\] index level setting\./, +      search:, +        index: test_1, +        scroll: 5m, +        from: 10000, +, +---]