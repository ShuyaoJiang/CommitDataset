[+++ /dev/null, +++ /dev/null, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/GeneralCastTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.painless;, +, +/** Tests for explicit casts */, +public class GeneralCastTests extends ScriptTestCase {, +, +    /**, +     * Unary operator with explicit cast, +     */, +    public void testUnaryOperator() {, +        assertEquals((byte)5, exec("long x = 5L; return (byte) (+x);"));, +        assertEquals((short)5, exec("long x = 5L; return (short) (+x);"));, +        assertEquals((char)5, exec("long x = 5L; return (char) (+x);"));, +        assertEquals(5, exec("long x = 5L; return (int) (+x);"));, +        assertEquals(5F, exec("long x = 5L; return (float) (+x);"));, +        assertEquals(5L, exec("long x = 5L; return (long) (+x);"));, +        assertEquals(5D, exec("long x = 5L; return (double) (+x);"));, +    }, +, +    /**, +     * Binary operators with explicit cast, +     */, +    public void testBinaryOperator() {, +        assertEquals((byte)6, exec("long x = 5L; return (byte) (x + 1);"));, +        assertEquals((short)6, exec("long x = 5L; return (short) (x + 1);"));, +        assertEquals((char)6, exec("long x = 5L; return (char) (x + 1);"));, +        assertEquals(6, exec("long x = 5L; return (int) (x + 1);"));, +        assertEquals(6F, exec("long x = 5L; return (float) (x + 1);"));, +        assertEquals(6L, exec("long x = 5L; return (long) (x + 1);"));, +        assertEquals(6D, exec("long x = 5L; return (double) (x + 1);"));, +    }, +, +    /**, +     * Binary compound assignment with explicit cast, +     */, +    public void testBinaryCompoundAssignment() {, +        assertEquals((byte)6, exec("long x = 5L; return (byte) (x += 1);"));, +        assertEquals((short)6, exec("long x = 5L; return (short) (x += 1);"));, +        assertEquals((char)6, exec("long x = 5L; return (char) (x += 1);"));, +        assertEquals(6, exec("long x = 5L; return (int) (x += 1);"));, +        assertEquals(6F, exec("long x = 5L; return (float) (x += 1);"));, +        assertEquals(6L, exec("long x = 5L; return (long) (x += 1);"));, +        assertEquals(6D, exec("long x = 5L; return (double) (x += 1);"));, +    }, +, +    /**, +     * Binary compound prefix with explicit cast, +     */, +    public void testBinaryPrefix() {, +        assertEquals((byte)6, exec("long x = 5L; return (byte) (++x);"));, +        assertEquals((short)6, exec("long x = 5L; return (short) (++x);"));, +        assertEquals((char)6, exec("long x = 5L; return (char) (++x);"));, +        assertEquals(6, exec("long x = 5L; return (int) (++x);"));, +        assertEquals(6F, exec("long x = 5L; return (float) (++x);"));, +        assertEquals(6L, exec("long x = 5L; return (long) (++x);"));, +        assertEquals(6D, exec("long x = 5L; return (double) (++x);"));, +    }, +, +    /**, +     * Binary compound postifx with explicit cast, +     */, +    public void testBinaryPostfix() {, +        assertEquals((byte)5, exec("long x = 5L; return (byte) (x++);"));, +        assertEquals((short)5, exec("long x = 5L; return (short) (x++);"));, +        assertEquals((char)5, exec("long x = 5L; return (char) (x++);"));, +        assertEquals(5, exec("long x = 5L; return (int) (x++);"));, +        assertEquals(5F, exec("long x = 5L; return (float) (x++);"));, +        assertEquals(5L, exec("long x = 5L; return (long) (x++);"));, +        assertEquals(5D, exec("long x = 5L; return (double) (x++);"));, +    }, +, +    /**, +     * Shift operators with explicit cast, +     */, +    public void testShiftOperator() {, +        assertEquals((byte)10, exec("long x = 5L; return (byte) (x << 1);"));, +        assertEquals((short)10, exec("long x = 5L; return (short) (x << 1);"));, +        assertEquals((char)10, exec("long x = 5L; return (char) (x << 1);"));, +        assertEquals(10, exec("long x = 5L; return (int) (x << 1);"));]