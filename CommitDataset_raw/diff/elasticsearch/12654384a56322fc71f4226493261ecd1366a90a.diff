[+++ b/core/src/main/java/org/elasticsearch/action/search/ClearScrollResponse.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +    private static final ParseField SUCCEEDED = new ParseField("succeeded");, +    private static final ParseField NUMFREED = new ParseField("num_freed");, +, +    private static final ConstructingObjectParser<ClearScrollResponse, Void> PARSER = new ConstructingObjectParser<>("clear_scroll",, +            true, a -> new ClearScrollResponse((boolean)a[0], (int)a[1]));, +    static {, +        PARSER.declareField(constructorArg(), (parser, context) -> parser.booleanValue(), SUCCEEDED, ObjectParser.ValueType.BOOLEAN);, +        PARSER.declareField(constructorArg(), (parser, context) -> parser.intValue(), NUMFREED, ObjectParser.ValueType.INT);, +    }, +, +        builder.field(SUCCEEDED.getPreferredName(), succeeded);, +        builder.field(NUMFREED.getPreferredName(), numFreed);, +    /**, +     * Parse the clear scroll response body into a new {@link ClearScrollResponse} object, +     */, +    public static ClearScrollResponse fromXContent(XContentParser parser) throws IOException {, +        return PARSER.apply(parser, null);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/search/ClearScrollResponse.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +    private static final ParseField SUCCEEDED = new ParseField("succeeded");, +    private static final ParseField NUMFREED = new ParseField("num_freed");, +, +    private static final ConstructingObjectParser<ClearScrollResponse, Void> PARSER = new ConstructingObjectParser<>("clear_scroll",, +            true, a -> new ClearScrollResponse((boolean)a[0], (int)a[1]));, +    static {, +        PARSER.declareField(constructorArg(), (parser, context) -> parser.booleanValue(), SUCCEEDED, ObjectParser.ValueType.BOOLEAN);, +        PARSER.declareField(constructorArg(), (parser, context) -> parser.intValue(), NUMFREED, ObjectParser.ValueType.INT);, +    }, +, +        builder.field(SUCCEEDED.getPreferredName(), succeeded);, +        builder.field(NUMFREED.getPreferredName(), numFreed);, +    /**, +     * Parse the clear scroll response body into a new {@link ClearScrollResponse} object, +     */, +    public static ClearScrollResponse fromXContent(XContentParser parser) throws IOException {, +        return PARSER.apply(parser, null);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/ClearScrollResponseTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search;, +, +import org.elasticsearch.action.search.ClearScrollResponse;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.test.ESTestCase;, +, +import java.io.IOException;, +, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertToXContentEquivalent;, +, +public class ClearScrollResponseTests extends ESTestCase {, +, +    public void testToXContent() throws IOException {, +        ClearScrollResponse clearScrollResponse = new ClearScrollResponse(true, 10);, +        try (XContentBuilder builder = JsonXContent.contentBuilder()) {, +            clearScrollResponse.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        }, +        assertEquals(true, clearScrollResponse.isSucceeded());, +        assertEquals(10, clearScrollResponse.getNumFreed());, +    }, +, +    public void testToAndFromXContent() throws IOException {, +        XContentType xContentType = randomFrom(XContentType.values());, +        ClearScrollResponse originalResponse = createTestItem();]