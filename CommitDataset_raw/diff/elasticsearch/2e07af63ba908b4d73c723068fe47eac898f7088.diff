[+++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder setHighlighterOptions(Map<String, Object> options) {, +        highlightBuilder().options(options);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder setHighlighterOptions(Map<String, Object> options) {, +        highlightBuilder().options(options);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.highlight.HighlightModule;, +        return ImmutableList.of(new TransportSearchModule(), new FacetModule(), new HighlightModule());, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder setHighlighterOptions(Map<String, Object> options) {, +        highlightBuilder().options(options);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.highlight.HighlightModule;, +        return ImmutableList.of(new TransportSearchModule(), new FacetModule(), new HighlightModule());, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.highlight;, +, +import com.google.common.collect.Maps;, +import org.apache.lucene.search.highlight.DefaultEncoder;, +import org.apache.lucene.search.highlight.Encoder;, +import org.apache.lucene.search.highlight.SimpleHTMLEncoder;, +import org.apache.lucene.search.vectorhighlight.*;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.lucene.search.vectorhighlight.SimpleBoundaryScanner2;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.text.StringText;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.search.fetch.FetchPhaseExecutionException;, +import org.elasticsearch.search.fetch.FetchSubPhase;, +import org.elasticsearch.search.highlight.vectorhighlight.SourceScoreOrderFragmentsBuilder;, +import org.elasticsearch.search.highlight.vectorhighlight.SourceSimpleFragmentsBuilder;, +import org.elasticsearch.search.internal.SearchContext;, +, +import java.util.Map;, +, +/**, + *, + */, +public class FastVectorHighlighter implements Highlighter {, +, +    private static final String CACHE_KEY = "highlight-fsv";, +    private final Boolean termVectorMultiValue;, +, +    @Inject, +    public FastVectorHighlighter(Settings settings) {, +        this.termVectorMultiValue = settings.getAsBoolean("search.highlight.term_vector_multi_value", true);, +    }, +, +    @Override, +    public String[] names() {, +        return new String[] { "fvh", "fast-vector-highlighter" };, +    }, +, +    @Override, +    public HighlightField highlight(HighlighterContext highlighterContext) {, +        SearchContextHighlight.Field field = highlighterContext.field;, +        SearchContext context = highlighterContext.context;, +        FetchSubPhase.HitContext hitContext = highlighterContext.hitContext;, +        FieldMapper<?> mapper = highlighterContext.mapper;, +, +        if (!(mapper.fieldType().storeTermVectors() && mapper.fieldType().storeTermVectorOffsets() && mapper.fieldType().storeTermVectorPositions())) {, +            throw new ElasticSearchIllegalArgumentException("the field [" + field.field() + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");, +        }, +, +        Encoder encoder = field.encoder().equals("html") ? Encoders.HTML : Encoders.DEFAULT;, +, +        if (!hitContext.cache().containsKey(CACHE_KEY)) {, +            hitContext.cache().put(CACHE_KEY, new HighlighterEntry());, +        }, +        HighlighterEntry cache = (HighlighterEntry) hitContext.cache().get(CACHE_KEY);, +]