[+++ b/x-pack/plugin/rollup/build.gradle, +++ b/x-pack/plugin/rollup/build.gradle, +++ /dev/null, +++ b/x-pack/plugin/rollup/build.gradle, +++ /dev/null, +++ b/x-pack/qa/multi-node/src/test/java/org/elasticsearch/multi_node/RollupIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.multi_node;, +, +import org.apache.http.HttpStatus;, +import org.apache.http.util.EntityUtils;, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.rest.ESRestTestCase;, +import org.elasticsearch.xpack.core.rollup.job.RollupJob;, +import org.elasticsearch.xpack.core.watcher.support.xcontent.ObjectPath;, +import org.junit.After;, +, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.nio.charset.StandardCharsets;, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeFormatter;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.TimeUnit;, +import java.util.stream.Collectors;, +, +import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.isOneOf;, +, +public class RollupIT extends ESRestTestCase {, +, +    @Override, +    protected Settings restClientSettings() {, +        return getClientSettings("super-user", "x-pack-super-password");, +    }, +, +    @Override, +    protected Settings restAdminSettings() {, +        return getClientSettings("super-user", "x-pack-super-password");, +    }, +, +    private Settings getClientSettings(final String username, final String password) {, +        final String token = basicAuthHeaderValue(username, new SecureString(password.toCharArray()));, +        return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", token).build();, +    }, +, +    static Map<String, Object> toMap(Response response) throws IOException {, +        return toMap(EntityUtils.toString(response.getEntity()));, +    }, +, +    static Map<String, Object> toMap(String response) throws IOException {, +        return XContentHelper.convertToMap(JsonXContent.jsonXContent, response, false);, +    }, +, +    @After, +    public void clearRollupMetadata() throws Exception {, +        deleteAllJobs();, +        waitForPendingTasks();, +        // indices will be deleted by the ESRestTestCase class, +    }, +, +    public void testBigRollup() throws Exception {, +        final int numDocs = 200;, +, +        // index documents for the rollup job, +        final StringBuilder bulk = new StringBuilder();, +        for (int i = 0; i < numDocs; i++) {, +            bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"_doc\"}}\n");, +            ZonedDateTime zdt = ZonedDateTime.ofInstant(Instant.ofEpochSecond(1531221196 + (60*i)), ZoneId.of("UTC"));, +            String date = zdt.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);, +            bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n");, +        }, +        bulk.append("\r\n");, +, +        final Request bulkRequest = new Request("POST", "/_bulk");, +        bulkRequest.addParameter("refresh", "true");, +        bulkRequest.setJsonEntity(bulk.toString());, +        client().performRequest(bulkRequest);, +        // create the rollup job, +        final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test");, +        createRollupJobRequest.setJsonEntity("{", +            + "\"index_pattern\":\"rollup-*\","]