[+++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        ingestService.executeBulkRequest(() -> bulkRequestModifier, (indexRequest, exception) -> {, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        ingestService.executeBulkRequest(() -> bulkRequestModifier, (indexRequest, exception) -> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/DeletePipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +    private final IngestService ingestService;, +    public DeletePipelineTransportAction(Settings settings, ThreadPool threadPool, IngestService ingestService,, +                                         IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, DeletePipelineAction.NAME, transportService, ingestService.getClusterService(),, +            threadPool, actionFilters, indexNameExpressionResolver, DeletePipelineRequest::new);, +        this.ingestService = ingestService;, +    protected void masterOperation(DeletePipelineRequest request, ClusterState state,, +        ActionListener<AcknowledgedResponse> listener) throws Exception {, +        ingestService.delete(request, listener);, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        ingestService.executeBulkRequest(() -> bulkRequestModifier, (indexRequest, exception) -> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/DeletePipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +    private final IngestService ingestService;, +    public DeletePipelineTransportAction(Settings settings, ThreadPool threadPool, IngestService ingestService,, +                                         IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, DeletePipelineAction.NAME, transportService, ingestService.getClusterService(),, +            threadPool, actionFilters, indexNameExpressionResolver, DeletePipelineRequest::new);, +        this.ingestService = ingestService;, +    protected void masterOperation(DeletePipelineRequest request, ClusterState state,, +        ActionListener<AcknowledgedResponse> listener) throws Exception {, +        ingestService.delete(request, listener);, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        listener.onResponse(new GetPipelineResponse(IngestService.getPipelines(state, request.getIds())));, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        ingestService.executeBulkRequest(() -> bulkRequestModifier, (indexRequest, exception) -> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/DeletePipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +    private final IngestService ingestService;, +    public DeletePipelineTransportAction(Settings settings, ThreadPool threadPool, IngestService ingestService,, +                                         IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, DeletePipelineAction.NAME, transportService, ingestService.getClusterService(),, +            threadPool, actionFilters, indexNameExpressionResolver, DeletePipelineRequest::new);, +        this.ingestService = ingestService;, +    protected void masterOperation(DeletePipelineRequest request, ClusterState state,, +        ActionListener<AcknowledgedResponse> listener) throws Exception {, +        ingestService.delete(request, listener);, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        listener.onResponse(new GetPipelineResponse(IngestService.getPipelines(state, request.getIds())));, +++ b/server/src/main/java/org/elasticsearch/action/ingest/PutPipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +    private final IngestService ingestService;, +    public PutPipelineTransportAction(Settings settings, ThreadPool threadPool, TransportService transportService,, +        ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +        IngestService ingestService, NodeClient client) {, +        super(, +            settings, PutPipelineAction.NAME, transportService, ingestService.getClusterService(),, +            threadPool, actionFilters, indexNameExpressionResolver, PutPipelineRequest::new, +        );, +        this.ingestService = ingestService;, +                    ingestService.putPipeline(ingestInfos, request, listener);, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        ingestService.executeBulkRequest(() -> bulkRequestModifier, (indexRequest, exception) -> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/DeletePipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +    private final IngestService ingestService;, +    public DeletePipelineTransportAction(Settings settings, ThreadPool threadPool, IngestService ingestService,, +                                         IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, DeletePipelineAction.NAME, transportService, ingestService.getClusterService(),, +            threadPool, actionFilters, indexNameExpressionResolver, DeletePipelineRequest::new);, +        this.ingestService = ingestService;, +    protected void masterOperation(DeletePipelineRequest request, ClusterState state,, +        ActionListener<AcknowledgedResponse> listener) throws Exception {, +        ingestService.delete(request, listener);, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        listener.onResponse(new GetPipelineResponse(IngestService.getPipelines(state, request.getIds())));, +++ b/server/src/main/java/org/elasticsearch/action/ingest/PutPipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;, +    private final IngestService ingestService;, +    public PutPipelineTransportAction(Settings settings, ThreadPool threadPool, TransportService transportService,, +        ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +        IngestService ingestService, NodeClient client) {, +        super(, +            settings, PutPipelineAction.NAME, transportService, ingestService.getClusterService(),, +            threadPool, actionFilters, indexNameExpressionResolver, PutPipelineRequest::new, +        );, +        this.ingestService = ingestService;, +                    ingestService.putPipeline(ingestInfos, request, listener);, +++ b/server/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +import org.elasticsearch.ingest.IngestService;, +    static Parsed parseWithPipelineId(String pipelineId, Map<String, Object> config, boolean verbose, IngestService ingestService) {, +        Pipeline pipeline = ingestService.getPipeline(pipelineId);, +    static Parsed parse(Map<String, Object> config, boolean verbose, IngestService pipelineStore) throws Exception {, +        Pipeline pipeline = Pipeline.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorFactories());, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        ingestService.executeBulkRequest(() -> bulkRequestModifier, (indexRequest, exception) -> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/DeletePipelineTransportAction.java, +import org.elasticsearch.ingest.IngestService;]