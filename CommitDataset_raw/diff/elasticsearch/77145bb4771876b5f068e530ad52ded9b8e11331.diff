[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +    static Request rethrottle(RethrottleRequest rethrottleRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_reindex").addPathPart(rethrottleRequest.getTaskId().toString()), +                .addPathPart("_rethrottle").build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request), +                .withRequestsPerSecond(rethrottleRequest.getRequestsPerSecond());, +        // we set "group_by" to "none" because this is the response format we can parse back, +        params.putParam("group_by", "none");, +        return request;, +    }, +, +            // but we don't want to add that to the URL parameters, instead we use -1, +                return putParam(RethrottleRequest.REQUEST_PER_SECOND_PARAMETER, Float.toString(requestsPerSecond));, +                return putParam(RethrottleRequest.REQUEST_PER_SECOND_PARAMETER, "-1");, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +    static Request rethrottle(RethrottleRequest rethrottleRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_reindex").addPathPart(rethrottleRequest.getTaskId().toString()), +                .addPathPart("_rethrottle").build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request), +                .withRequestsPerSecond(rethrottleRequest.getRequestsPerSecond());, +        // we set "group_by" to "none" because this is the response format we can parse back, +        params.putParam("group_by", "none");, +        return request;, +    }, +, +            // but we don't want to add that to the URL parameters, instead we use -1, +                return putParam(RethrottleRequest.REQUEST_PER_SECOND_PARAMETER, Float.toString(requestsPerSecond));, +                return putParam(RethrottleRequest.REQUEST_PER_SECOND_PARAMETER, "-1");, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;, +     * @param updateByQueryRequest the request, +    public final void updateByQueryAsync(UpdateByQueryRequest updateByQueryRequest, RequestOptions options,, +                updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, listener, emptySet(), +     * @param deleteByQueryRequest the request, +    public final void deleteByQueryAsync(DeleteByQueryRequest deleteByQueryRequest, RequestOptions options,, +                deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, listener, emptySet(), +     * Executes a reindex rethrottling request., +     * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#docs-reindex-rethrottle">, +     *     Reindex rethrottling API on elastic.co</a>, +     * @param rethrottleRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public final ListTasksResponse reindexRethrottle(RethrottleRequest rethrottleRequest, RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(rethrottleRequest, RequestConverters::rethrottle, options, ListTasksResponse::fromXContent,, +                emptySet());, +    }, +, +    /**, +     * Executes a reindex rethrottling request., +     * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#docs-reindex-rethrottle">, +     *     Reindex rethrottling API on elastic.co</a>, +     * @param rethrottleRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public final void reindexRethrottleAsync(RethrottleRequest rethrottleRequest, RequestOptions options,, +            ActionListener<ListTasksResponse> listener) {, +        performRequestAsyncAndParseEntity(rethrottleRequest, RequestConverters::rethrottle, options, ListTasksResponse::fromXContent,, +                listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +    static Request rethrottle(RethrottleRequest rethrottleRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_reindex").addPathPart(rethrottleRequest.getTaskId().toString()), +                .addPathPart("_rethrottle").build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request), +                .withRequestsPerSecond(rethrottleRequest.getRequestsPerSecond());, +        // we set "group_by" to "none" because this is the response format we can parse back, +        params.putParam("group_by", "none");, +        return request;, +    }, +, +            // but we don't want to add that to the URL parameters, instead we use -1, +                return putParam(RethrottleRequest.REQUEST_PER_SECOND_PARAMETER, Float.toString(requestsPerSecond));, +                return putParam(RethrottleRequest.REQUEST_PER_SECOND_PARAMETER, "-1");, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;, +     * @param updateByQueryRequest the request, +    public final void updateByQueryAsync(UpdateByQueryRequest updateByQueryRequest, RequestOptions options,, +                updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, listener, emptySet(), +     * @param deleteByQueryRequest the request, +    public final void deleteByQueryAsync(DeleteByQueryRequest deleteByQueryRequest, RequestOptions options,, +                deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, listener, emptySet(), +     * Executes a reindex rethrottling request., +     * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#docs-reindex-rethrottle">, +     *     Reindex rethrottling API on elastic.co</a>, +     * @param rethrottleRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public final ListTasksResponse reindexRethrottle(RethrottleRequest rethrottleRequest, RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(rethrottleRequest, RequestConverters::rethrottle, options, ListTasksResponse::fromXContent,, +                emptySet());]