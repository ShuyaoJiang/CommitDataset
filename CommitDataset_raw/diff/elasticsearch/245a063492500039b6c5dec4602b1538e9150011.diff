[+++ b/qa/ml-native-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RestoreModelSnapshotIT.java, +import org.elasticsearch.ElasticsearchStatusException;, +import org.elasticsearch.xpack.core.ml.job.results.ForecastRequestStats;, +import java.util.stream.Collectors;, + * This test aims to catch regressions where,, + * when a job is reopened, it does not get restored, + * with its model snapshot. To achieve this we, + * leverage the forecast API. Requesting a forecast, + * when there's no model state results to an error., + * Thus, we create a job, send some data, and we close it., + * Then we open it again and we request a forecast asserting, + * the forecast was successful., +    public void tearDownData() {, +        // Create the job, post the data and close the job, +        Job.Builder job = buildAndRegisterJob("restore-model-snapshot-job", bucketSpan);, +        openJob(job.getId());, +        // Forecast should fail when the model has seen no data, ie model state not initialized, +        expectThrows(ElasticsearchStatusException.class, () -> forecast(job.getId(), TimeValue.timeValueHours(3), null));, +        postData(job.getId(), data.stream().collect(Collectors.joining()));, +        closeJob(job.getId());, +        // Reopen the job and check forecast works, +        openJob(job.getId());, +        String forecastId = forecast(job.getId(), TimeValue.timeValueHours(3), null);, +        waitForecastToFinish(job.getId(), forecastId);, +        ForecastRequestStats forecastStats = getForecastStats(job.getId(), forecastId);, +        assertThat(forecastStats.getStatus(), equalTo(ForecastRequestStats.ForecastRequestStatus.FINISHED));, +        closeJob(job.getId());, +        Detector.Builder detector = new Detector.Builder("count", null);]