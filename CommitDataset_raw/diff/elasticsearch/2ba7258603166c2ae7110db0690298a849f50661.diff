[+++ b/qa/sql/no-security/src/test/java/org/elasticsearch/xpack/qa/sql/nosecurity/JdbcCsvSpecIT.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +++ b/qa/sql/no-security/src/test/java/org/elasticsearch/xpack/qa/sql/nosecurity/JdbcCsvSpecIT.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcCsvSpecIT.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +++ b/qa/sql/no-security/src/test/java/org/elasticsearch/xpack/qa/sql/nosecurity/JdbcCsvSpecIT.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcCsvSpecIT.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +import static org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.csvConnection;, +import static org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.executeCsvQuery;, +import static org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.specParser;, +        try (Connection csv = csvConnection(testCase.expectedResults);, +            ResultSet expected = executeCsvQuery(csv, testName);, +            ResultSet elasticResults = executeJdbcQuery(es, testCase.query);, +++ b/qa/sql/no-security/src/test/java/org/elasticsearch/xpack/qa/sql/nosecurity/JdbcCsvSpecIT.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/qa/sql/security/JdbcCsvSpecIT.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +import org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.CsvTestCase;, +import static org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.csvConnection;, +import static org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.executeCsvQuery;, +import static org.elasticsearch.xpack.qa.sql.jdbc.CsvTestUtils.specParser;, +        try (Connection csv = csvConnection(testCase.expectedResults);, +            ResultSet expected = executeCsvQuery(csv, testName);, +            ResultSet elasticResults = executeJdbcQuery(es, testCase.query);, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvTestUtils.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.qa.sql.jdbc;, +, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.io.Streams;, +import org.relique.io.TableReader;, +import org.relique.jdbc.csv.CsvConnection;, +, +import java.io.BufferedReader;, +import java.io.BufferedWriter;, +import java.io.IOException;, +import java.io.Reader;, +import java.io.StringReader;, +import java.io.StringWriter;, +import java.sql.Connection;, +import java.sql.ResultSet;, +import java.sql.SQLException;, +import java.sql.Statement;, +import java.util.List;, +import java.util.Locale;, +import java.util.Properties;, +, +import static org.hamcrest.Matchers.arrayWithSize;, +import static org.junit.Assert.assertThat;, +, +/**, + * Utility functions for CSV testing, + */, +public final class CsvTestUtils {, +, +    private CsvTestUtils() {, +, +    }, +, +    /**, +     * Executes a query on provided CSV connection., +     * <p>, +     * The supplied table name is only used for the test identification., +     */, +    public static ResultSet executeCsvQuery(Connection csv, String csvTableName) throws SQLException {, +        ResultSet expected = csv.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY), +                .executeQuery("SELECT * FROM " + csvTableName);, +        // trigger data loading for type inference, +        expected.beforeFirst();, +        return expected;, +    }, +, +    /**, +     * Wraps CSV in the expectedResults into CSV Connection., +     *, +     * Use {@link #executeCsvQuery} to obtain ResultSet from this connection, +     */, +    public static Connection csvConnection(String expectedResults) throws IOException, SQLException {, +        Properties csvProperties = new Properties();, +        csvProperties.setProperty("charset", "UTF-8");, +        csvProperties.setProperty("separator", "|");, +        csvProperties.setProperty("trimValues", "true");, +        Tuple<String, String> resultsAndTypes = extractColumnTypesAndStripCli(expectedResults);, +        csvProperties.setProperty("columnTypes", resultsAndTypes.v2());, +        Reader reader = new StringReader(resultsAndTypes.v1());, +        TableReader tableReader = new TableReader() {, +            @Override, +            public Reader getReader(Statement statement, String tableName) throws SQLException {, +                return reader;]