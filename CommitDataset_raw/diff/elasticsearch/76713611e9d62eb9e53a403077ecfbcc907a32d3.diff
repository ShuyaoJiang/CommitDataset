[+++ b/build.gradle, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, TermVectorsService termVectorsService, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService) {, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, TermVectorsService termVectorsService, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, TermVectorsService termVectorsService, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.*;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.locks.Condition;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +import java.util.function.Function;, +, +    /** How much heap Lucene's IndexWriter is using */, +    abstract public long indexWriterRAMBytesUsed();, +     * Refreshes the engine for new search operations to reflect the latest, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, TermVectorsService termVectorsService, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.*;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.locks.Condition;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +import java.util.function.Function;, +, +    /** How much heap Lucene's IndexWriter is using */, +    abstract public long indexWriterRAMBytesUsed();, +     * Refreshes the engine for new search operations to reflect the latest, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    private volatile ByteSizeValue indexingBufferSize;, +    private volatile ByteSizeValue versionMapSize;, +    private volatile String versionMapSizeSetting;, +     * The maximum size the version map should grow to before issuing a refresh. Can be an absolute value or a percentage of, +     * the current index memory buffer (defaults to 25%), +    public static final String INDEX_VERSION_MAP_SIZE = "index.version_map_size";, +, +, +    public static final String DEFAULT_VERSION_MAP_SIZE = "25%";, +, +        // We start up inactive and rely on IndexingMemoryController to give us our fair share once we start indexing:, +        indexingBufferSize = IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER;, +        versionMapSizeSetting = settings.get(INDEX_VERSION_MAP_SIZE, DEFAULT_VERSION_MAP_SIZE);, +        updateVersionMapSize();, +    /** updates {@link #versionMapSize} based on current setting and {@link #indexingBufferSize} */, +    private void updateVersionMapSize() {, +        if (versionMapSizeSetting.endsWith("%")) {, +            double percent = Double.parseDouble(versionMapSizeSetting.substring(0, versionMapSizeSetting.length() - 1));, +            versionMapSize = new ByteSizeValue((long) ((double) indexingBufferSize.bytes() * (percent / 100)));, +        } else {, +            versionMapSize = ByteSizeValue.parseBytesSizeValue(versionMapSizeSetting, INDEX_VERSION_MAP_SIZE);, +        }, +    }, +, +    /**, +     * Settings the version map size that should trigger a refresh. See {@link #INDEX_VERSION_MAP_SIZE} for details., +     */, +    public void setVersionMapSizeSetting(String versionMapSizeSetting) {, +        this.versionMapSizeSetting = versionMapSizeSetting;, +        updateVersionMapSize();, +    }, +, +    /**, +     * current setting for the version map size that should trigger a refresh. See {@link #INDEX_VERSION_MAP_SIZE} for details., +     */, +    public String getVersionMapSizeSetting() {, +        return versionMapSizeSetting;, +    }, +, +     * returns the size of the version map that should trigger a refresh, +     */, +    public ByteSizeValue getVersionMapSize() {]