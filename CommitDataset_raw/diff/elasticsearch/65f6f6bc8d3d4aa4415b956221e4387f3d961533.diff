[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ChiSquare;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.GND;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.JLHScore;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.MutualInformation;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.PercentageScore;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ScriptHeuristic;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristic;, +    private final ParseFieldRegistry<SignificanceHeuristicParser> significanceHeuristicParserRegistry = new ParseFieldRegistry<>(, +            "significance_heuristic");, +        registerBuiltinSignificanceHeuristics();, +    /**, +     * Register a {@link SignificanceHeuristic}., +     * , +     * @param heuristicName the name(s) at which the heuristic is parsed and streamed. The {@link ParseField#getPreferredName()} is the name, +     *        under which it is streamed. All names work for the parser., +     * @param reader reads the heuristic from a stream, +     * @param parser reads the heuristic from a XContentParser, +     */, +    public void registerSignificanceHeuristic(ParseField heuristicName, Writeable.Reader<SignificanceHeuristic> reader,, +            SignificanceHeuristicParser parser) {, +        significanceHeuristicParserRegistry.register(parser, heuristicName);, +        namedWriteableRegistry.register(SignificanceHeuristic.class, heuristicName.getPreferredName(), reader);, +    }, +, +    /**, +     * The registry of {@link SignificanceHeuristic}s., +     */, +    public ParseFieldRegistry<SignificanceHeuristicParser> getSignificanceHeuristicParserRegistry() {, +        return significanceHeuristicParserRegistry;, +                new SignificantTermsParser(significanceHeuristicParserRegistry, queryParserRegistry),, +    private void registerBuiltinSignificanceHeuristics() {, +        registerSignificanceHeuristic(ChiSquare.NAMES_FIELD, ChiSquare::new, ChiSquare.PARSER);, +        registerSignificanceHeuristic(GND.NAMES_FIELD, GND::new, GND.PARSER);, +        registerSignificanceHeuristic(JLHScore.NAMES_FIELD, JLHScore::new, JLHScore::parse);, +        registerSignificanceHeuristic(MutualInformation.NAMES_FIELD, MutualInformation::new, MutualInformation.PARSER);, +        registerSignificanceHeuristic(PercentageScore.NAMES_FIELD, PercentageScore::new, PercentageScore::parse);, +        registerSignificanceHeuristic(ScriptHeuristic.NAMES_FIELD, ScriptHeuristic::new, ScriptHeuristic::parse);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ChiSquare;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.GND;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.JLHScore;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.MutualInformation;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.PercentageScore;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ScriptHeuristic;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristic;, +    private final ParseFieldRegistry<SignificanceHeuristicParser> significanceHeuristicParserRegistry = new ParseFieldRegistry<>(, +            "significance_heuristic");, +        registerBuiltinSignificanceHeuristics();, +    /**, +     * Register a {@link SignificanceHeuristic}., +     * , +     * @param heuristicName the name(s) at which the heuristic is parsed and streamed. The {@link ParseField#getPreferredName()} is the name, +     *        under which it is streamed. All names work for the parser., +     * @param reader reads the heuristic from a stream, +     * @param parser reads the heuristic from a XContentParser, +     */, +    public void registerSignificanceHeuristic(ParseField heuristicName, Writeable.Reader<SignificanceHeuristic> reader,, +            SignificanceHeuristicParser parser) {, +        significanceHeuristicParserRegistry.register(parser, heuristicName);, +        namedWriteableRegistry.register(SignificanceHeuristic.class, heuristicName.getPreferredName(), reader);, +    }, +, +    /**, +     * The registry of {@link SignificanceHeuristic}s., +     */, +    public ParseFieldRegistry<SignificanceHeuristicParser> getSignificanceHeuristicParserRegistry() {, +        return significanceHeuristicParserRegistry;, +                new SignificantTermsParser(significanceHeuristicParserRegistry, queryParserRegistry),, +    private void registerBuiltinSignificanceHeuristics() {, +        registerSignificanceHeuristic(ChiSquare.NAMES_FIELD, ChiSquare::new, ChiSquare.PARSER);, +        registerSignificanceHeuristic(GND.NAMES_FIELD, GND::new, GND.PARSER);, +        registerSignificanceHeuristic(JLHScore.NAMES_FIELD, JLHScore::new, JLHScore::parse);, +        registerSignificanceHeuristic(MutualInformation.NAMES_FIELD, MutualInformation::new, MutualInformation.PARSER);, +        registerSignificanceHeuristic(PercentageScore.NAMES_FIELD, PercentageScore::new, PercentageScore::parse);, +        registerSignificanceHeuristic(ScriptHeuristic.NAMES_FIELD, ScriptHeuristic::new, ScriptHeuristic::parse);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantLongTerms.java, +        significanceHeuristic = in.readNamedWriteable(SignificanceHeuristic.class);, +        out.writeNamedWriteable(significanceHeuristic);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ChiSquare;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.GND;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.JLHScore;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.MutualInformation;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.PercentageScore;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.ScriptHeuristic;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristic;, +    private final ParseFieldRegistry<SignificanceHeuristicParser> significanceHeuristicParserRegistry = new ParseFieldRegistry<>(, +            "significance_heuristic");, +        registerBuiltinSignificanceHeuristics();, +    /**, +     * Register a {@link SignificanceHeuristic}., +     * , +     * @param heuristicName the name(s) at which the heuristic is parsed and streamed. The {@link ParseField#getPreferredName()} is the name, +     *        under which it is streamed. All names work for the parser., +     * @param reader reads the heuristic from a stream]