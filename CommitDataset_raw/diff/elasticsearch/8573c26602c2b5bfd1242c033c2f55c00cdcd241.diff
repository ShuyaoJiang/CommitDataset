[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/MoreLikeThisRequest.java, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.util.xcontent.builder.XContentBuilder;, +import java.util.Arrays;, +    private byte[] searchSource;, +    private int searchSourceOffset;, +    private int searchSourceLength;, +    private boolean searchSourceUnsafe;, +    void beforeLocalFork() {, +        if (searchSourceUnsafe) {, +            searchSource = Arrays.copyOfRange(searchSource, searchSourceOffset, searchSourceLength);, +            searchSourceOffset = 0;, +            searchSourceUnsafe = false;, +        }, +    }, +, +        FastByteArrayOutputStream bos = sourceBuilder.buildAsUnsafeBytes();, +        this.searchSource = bos.unsafeByteArray();, +        this.searchSourceOffset = 0;, +        this.searchSourceLength = bos.size();, +        this.searchSourceUnsafe = true;, +        UnicodeUtil.UTF8Result result = Unicode.fromStringAsUtf8(searchSource);, +        this.searchSource = result.result;, +        this.searchSourceOffset = 0;, +        this.searchSourceLength = result.length;, +        this.searchSourceUnsafe = true;, +        return this;, +            BinaryXContentBuilder builder = XContentFactory.contentBinaryBuilder(contentType);, +            return searchSource(builder);, +    }, +, +    public MoreLikeThisRequest searchSource(XContentBuilder builder) {, +        try {, +            this.searchSource = builder.unsafeBytes();, +            this.searchSourceOffset = 0;, +            this.searchSourceLength = builder.unsafeBytesLength();, +            this.searchSourceUnsafe = true;, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + builder + "]", e);, +        }, +        return searchSource(searchSource, 0, searchSource.length);, +    }, +, +    /**, +     * An optional search source request allowing to control the search request for the, +     * more like this documents., +     */, +    public MoreLikeThisRequest searchSource(byte[] searchSource, int offset, int length) {, +        this.searchSourceOffset = offset;, +        this.searchSourceLength = length;, +        this.searchSourceUnsafe = false;, +    public int searchSourceOffset() {, +        return searchSourceOffset;, +    }, +, +    public int searchSourceLength() {, +        return searchSourceLength;, +    }, +, +, +        searchSourceUnsafe = false;, +        searchSourceOffset = 0;, +        searchSourceLength = in.readVInt();, +        if (searchSourceLength == 0) {, +            searchSource = new byte[searchSourceLength];, +        if (searchSource == null) {, +            out.writeVInt(searchSourceLength);, +            out.writeBytes(searchSource, searchSourceOffset, searchSourceLength);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/MoreLikeThisRequest.java, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.util.xcontent.builder.XContentBuilder;, +import java.util.Arrays;, +    private byte[] searchSource;, +    private int searchSourceOffset;, +    private int searchSourceLength;, +    private boolean searchSourceUnsafe;, +    void beforeLocalFork() {, +        if (searchSourceUnsafe) {, +            searchSource = Arrays.copyOfRange(searchSource, searchSourceOffset, searchSourceLength);, +            searchSourceOffset = 0;, +            searchSourceUnsafe = false;, +        }, +    }, +, +        FastByteArrayOutputStream bos = sourceBuilder.buildAsUnsafeBytes();, +        this.searchSource = bos.unsafeByteArray();, +        this.searchSourceOffset = 0;, +        this.searchSourceLength = bos.size();, +        this.searchSourceUnsafe = true;, +        UnicodeUtil.UTF8Result result = Unicode.fromStringAsUtf8(searchSource);, +        this.searchSource = result.result;, +        this.searchSourceOffset = 0;, +        this.searchSourceLength = result.length;, +        this.searchSourceUnsafe = true;, +        return this;, +            BinaryXContentBuilder builder = XContentFactory.contentBinaryBuilder(contentType);, +            return searchSource(builder);, +    }, +, +    public MoreLikeThisRequest searchSource(XContentBuilder builder) {]