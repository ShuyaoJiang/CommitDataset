[+++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    public EngineConfig(ShardId shardId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.optimizeAutoGenerateId = indexSettings.getAsBoolean(EngineConfig.INDEX_OPTIMIZE_AUTOGENERATED_ID_SETTING, false);, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    public EngineConfig(ShardId shardId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.optimizeAutoGenerateId = indexSettings.getAsBoolean(EngineConfig.INDEX_OPTIMIZE_AUTOGENERATED_ID_SETTING, false);, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    private final EngineConfig engineConfig;, +        this.engineConfig = newEngineConfig();, +        return engineConfig.getTranslogRecoveryPerformer().performBatchRecovery(engine(), operations);, +        engineConfig.setEnableGcDeletes(false);, +        createNewEngine(skipTranslogRecovery, engineConfig);, +        return engineConfig.getTranslogRecoveryPerformer().getRecoveredTypes();, +        engineConfig.setEnableGcDeletes(true);, +        final EngineConfig config = engineConfig;, +                if (state() == IndexShardState.CLOSED) { // no need to update anything if we are closed, +                final EngineConfig config = engineConfig;, +    private final EngineConfig newEngineConfig() {, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    public EngineConfig(ShardId shardId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.optimizeAutoGenerateId = indexSettings.getAsBoolean(EngineConfig.INDEX_OPTIMIZE_AUTOGENERATED_ID_SETTING, false);, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    private final EngineConfig engineConfig;, +        this.engineConfig = newEngineConfig();, +        return engineConfig.getTranslogRecoveryPerformer().performBatchRecovery(engine(), operations);, +        engineConfig.setEnableGcDeletes(false);, +        createNewEngine(skipTranslogRecovery, engineConfig);, +        return engineConfig.getTranslogRecoveryPerformer().getRecoveredTypes();, +        engineConfig.setEnableGcDeletes(true);, +        final EngineConfig config = engineConfig;, +                if (state() == IndexShardState.CLOSED) { // no need to update anything if we are closed, +                final EngineConfig config = engineConfig;, +    private final EngineConfig newEngineConfig() {, +++ b/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    /**, +     * Called once for every processed operation by this recovery performer., +     * This can be used to get progress information on the translog execution., +     */, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    public EngineConfig(ShardId shardId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.optimizeAutoGenerateId = indexSettings.getAsBoolean(EngineConfig.INDEX_OPTIMIZE_AUTOGENERATED_ID_SETTING, false);, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    private final EngineConfig engineConfig;, +        this.engineConfig = newEngineConfig();, +        return engineConfig.getTranslogRecoveryPerformer().performBatchRecovery(engine(), operations);, +        engineConfig.setEnableGcDeletes(false);, +        createNewEngine(skipTranslogRecovery, engineConfig);, +        return engineConfig.getTranslogRecoveryPerformer().getRecoveredTypes();, +        engineConfig.setEnableGcDeletes(true);, +        final EngineConfig config = engineConfig;, +                if (state() == IndexShardState.CLOSED) { // no need to update anything if we are closed, +                final EngineConfig config = engineConfig;, +    private final EngineConfig newEngineConfig() {, +++ b/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    /**, +     * Called once for every processed operation by this recovery performer., +     * This can be used to get progress information on the translog execution., +     */, +++ b/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +        EngineConfig config = new EngineConfig(shardId, threadPool, new ShardIndexingService(shardId, EMPTY_SETTINGS, new ShardSlowLogIndexingService(shardId, EMPTY_SETTINGS, indexSettingsService)), indexSettingsService, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    public EngineConfig(ShardId shardId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.optimizeAutoGenerateId = indexSettings.getAsBoolean(EngineConfig.INDEX_OPTIMIZE_AUTOGENERATED_ID_SETTING, false);, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    private final EngineConfig engineConfig;, +        this.engineConfig = newEngineConfig();, +        return engineConfig.getTranslogRecoveryPerformer().performBatchRecovery(engine(), operations);, +        engineConfig.setEnableGcDeletes(false);, +        createNewEngine(skipTranslogRecovery, engineConfig);, +        return engineConfig.getTranslogRecoveryPerformer().getRecoveredTypes();, +        engineConfig.setEnableGcDeletes(true);, +        final EngineConfig config = engineConfig;, +                if (state() == IndexShardState.CLOSED) { // no need to update anything if we are closed, +                final EngineConfig config = engineConfig;, +    private final EngineConfig newEngineConfig() {, +++ b/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +    /**, +     * Called once for every processed operation by this recovery performer., +     * This can be used to get progress information on the translog execution., +     */, +++ b/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +        EngineConfig config = new EngineConfig(shardId, threadPool, new ShardIndexingService(shardId, EMPTY_SETTINGS, new ShardSlowLogIndexingService(shardId, EMPTY_SETTINGS, indexSettingsService)), indexSettingsService, +++ b/src/test/java/org/elasticsearch/index/engine/ShadowEngineTests.java, +        EngineConfig config = new EngineConfig(shardId, threadPool, new ShardIndexingService(shardId, EMPTY_SETTINGS, new ShardSlowLogIndexingService(shardId, EMPTY_SETTINGS, indexSettingsService)), indexSettingsService, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    public EngineConfig(ShardId shardId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.optimizeAutoGenerateId = indexSettings.getAsBoolean(EngineConfig.INDEX_OPTIMIZE_AUTOGENERATED_ID_SETTING, false);, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    private final EngineConfig engineConfig;, +        this.engineConfig = newEngineConfig();, +        return engineConfig.getTranslogRecoveryPerformer().performBatchRecovery(engine(), operations);, +        engineConfig.setEnableGcDeletes(false);, +        createNewEngine(skipTranslogRecovery, engineConfig);, +        return engineConfig.getTranslogRecoveryPerformer().getRecoveredTypes();, +        engineConfig.setEnableGcDeletes(true);, +        final EngineConfig config = engineConfig;, +                if (state() == IndexShardState.CLOSED) { // no need to update anything if we are closed, +                final EngineConfig config = engineConfig;, +    private final EngineConfig newEngineConfig() {, +++ b/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java]