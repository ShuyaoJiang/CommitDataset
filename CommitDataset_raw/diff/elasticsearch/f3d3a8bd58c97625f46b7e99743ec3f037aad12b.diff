[+++ b/src/main/java/org/elasticsearch/action/NoShardAvailableActionException.java, +import org.elasticsearch.rest.RestStatus;, +    public NoShardAvailableActionException(ShardId shardId) {, +        super(shardId, null);, +    }, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.SERVICE_UNAVAILABLE;, +    }, +++ b/src/main/java/org/elasticsearch/action/NoShardAvailableActionException.java, +import org.elasticsearch.rest.RestStatus;, +    public NoShardAvailableActionException(ShardId shardId) {, +        super(shardId, null);, +    }, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.SERVICE_UNAVAILABLE;, +    }, +++ b/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +import org.elasticsearch.rest.RestStatus;, +    @Override, +    public RestStatus status() {, +        if (shardFailures.length == 0) {, +            // if no successful shards, it means no active shards, so just return SERVICE_UNAVAILABLE, +            return RestStatus.SERVICE_UNAVAILABLE;, +        }, +        RestStatus status = shardFailures[0].status();, +        if (shardFailures.length > 1) {, +            for (int i = 1; i < shardFailures.length; i++) {, +                if (shardFailures[i].status().getStatus() >= 500) {, +                    status = shardFailures[i].status();, +                }, +            }, +        }, +        return status;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/NoShardAvailableActionException.java, +import org.elasticsearch.rest.RestStatus;, +    public NoShardAvailableActionException(ShardId shardId) {, +        super(shardId, null);, +    }, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.SERVICE_UNAVAILABLE;, +    }, +++ b/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +import org.elasticsearch.rest.RestStatus;, +    @Override, +    public RestStatus status() {, +        if (shardFailures.length == 0) {, +            // if no successful shards, it means no active shards, so just return SERVICE_UNAVAILABLE, +            return RestStatus.SERVICE_UNAVAILABLE;, +        }, +        RestStatus status = shardFailures[0].status();, +        if (shardFailures.length > 1) {, +            for (int i = 1; i < shardFailures.length; i++) {, +                if (shardFailures[i].status().getStatus() >= 500) {, +                    status = shardFailures[i].status();, +                }, +            }, +        }, +        return status;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +    private transient Throwable failure;, +    @Nullable, +    public Throwable failure() {, +        return failure;, +    }, +, +        this.failure = t;, +++ b/src/main/java/org/elasticsearch/action/NoShardAvailableActionException.java, +import org.elasticsearch.rest.RestStatus;, +    public NoShardAvailableActionException(ShardId shardId) {, +        super(shardId, null);, +    }, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.SERVICE_UNAVAILABLE;, +    }, +++ b/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +import org.elasticsearch.rest.RestStatus;, +    @Override, +    public RestStatus status() {, +        if (shardFailures.length == 0) {, +            // if no successful shards, it means no active shards, so just return SERVICE_UNAVAILABLE, +            return RestStatus.SERVICE_UNAVAILABLE;, +        }, +        RestStatus status = shardFailures[0].status();, +        if (shardFailures.length > 1) {, +            for (int i = 1; i < shardFailures.length; i++) {, +                if (shardFailures[i].status().getStatus() >= 500) {, +                    status = shardFailures[i].status();, +                }]