[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public final CommitStats commitStats() {, +    public final CommitId flush() throws EngineException {, +        return flush(false, false);, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public final CommitStats commitStats() {, +    public final CommitId flush() throws EngineException {, +        return flush(false, false);, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public final CommitStats commitStats() {, +    public final CommitId flush() throws EngineException {, +        return flush(false, false);, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.engine;, +, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexCommit;, +import org.apache.lucene.index.IndexWriter;, +import org.apache.lucene.index.SegmentInfos;, +import org.apache.lucene.index.SoftDeletesDirectoryReaderWrapper;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.ReferenceManager;, +import org.apache.lucene.search.SearcherManager;, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.store.Lock;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.common.lucene.index.ElasticsearchDirectoryReader;, +import org.elasticsearch.core.internal.io.IOUtils;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.seqno.SeqNoStats;, +import org.elasticsearch.index.seqno.SequenceNumbers;, +import org.elasticsearch.index.store.Store;, +import org.elasticsearch.index.translog.Translog;, +import org.elasticsearch.index.translog.TranslogStats;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.io.UncheckedIOException;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.function.BiFunction;, +import java.util.function.Function;, +import java.util.stream.Stream;, +, +/**, + * A basic read-only engine that allows switching a shard to be true read-only temporarily or permanently., + * Note: this engine can be opened side-by-side with a read-write engine but will not reflect any changes made to the read-write, + * engine., + *, + * @see #ReadOnlyEngine(EngineConfig, SeqNoStats, TranslogStats, boolean, Function), + */, +public final class ReadOnlyEngine extends Engine {, +, +    private final SegmentInfos lastCommittedSegmentInfos;, +    private final SeqNoStats seqNoStats;, +    private final TranslogStats translogStats;, +    private final SearcherManager searcherManager;, +    private final IndexCommit indexCommit;, +    private final Lock indexWriterLock;, +, +    /**, +     * Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened, +     * read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another, +     * engine is still open., +     *, +     * @param config the engine configuration, +     * @param seqNoStats sequence number statistics for this engine or null if not provided, +     * @param translogStats translog stats for this engine or null if not provided, +     * @param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise, +     *                   the lock won't be obtained, +     * @param readerWrapperFunction allows to wrap the index-reader for this engine., +     */, +    public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,, +                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {, +        super(config);, +        try {]