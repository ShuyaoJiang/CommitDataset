[+++ b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunner.java, +import java.util.Collections;, +import static org.elasticsearch.ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE;, +    private static final ToXContent.Params STACKTRACE_PARAMS =, +        new ToXContent.MapParams(Collections.singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, "false"));, +        ElasticsearchException.generateThrowableXContent(causeXContentBuilder, STACKTRACE_PARAMS, cause);, +++ b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunner.java, +import java.util.Collections;, +import static org.elasticsearch.ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE;, +    private static final ToXContent.Params STACKTRACE_PARAMS =, +        new ToXContent.MapParams(Collections.singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, "false"));, +        ElasticsearchException.generateThrowableXContent(causeXContentBuilder, STACKTRACE_PARAMS, cause);, +++ b/x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/ExecuteStepsUpdateTaskTests.java, +import static org.hamcrest.Matchers.containsString;, +        assertThat(lifecycleState.getStepInfo(),, +            containsString("{\"type\":\"runtime_exception\",\"reason\":\"error\",\"stack_trace\":\""));, +        assertThat(lifecycleState.getStepInfo(),, +            containsString("{\"type\":\"runtime_exception\",\"reason\":\"error\",\"stack_trace\":\""));, +++ b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunner.java, +import java.util.Collections;, +import static org.elasticsearch.ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE;, +    private static final ToXContent.Params STACKTRACE_PARAMS =, +        new ToXContent.MapParams(Collections.singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, "false"));, +        ElasticsearchException.generateThrowableXContent(causeXContentBuilder, STACKTRACE_PARAMS, cause);, +++ b/x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/ExecuteStepsUpdateTaskTests.java, +import static org.hamcrest.Matchers.containsString;, +        assertThat(lifecycleState.getStepInfo(),, +            containsString("{\"type\":\"runtime_exception\",\"reason\":\"error\",\"stack_trace\":\""));, +        assertThat(lifecycleState.getStepInfo(),, +            containsString("{\"type\":\"runtime_exception\",\"reason\":\"error\",\"stack_trace\":\""));, +++ b/x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunnerTests.java, +import static org.hamcrest.Matchers.containsString;, +            "{\"type\":\"exception\",\"reason\":\"THIS IS AN EXPECTED CAUSE\"");, +            "{\"type\":\"illegal_argument_exception\",\"reason\":\"non elasticsearch-exception\",\"stack_trace\":\"");, +        assertThat(newLifecycleState.getStepInfo(), containsString(expectedCauseValue));, +++ b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunner.java, +import java.util.Collections;, +import static org.elasticsearch.ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE;, +    private static final ToXContent.Params STACKTRACE_PARAMS =, +        new ToXContent.MapParams(Collections.singletonMap(REST_EXCEPTION_SKIP_STACK_TRACE, "false"));, +        ElasticsearchException.generateThrowableXContent(causeXContentBuilder, STACKTRACE_PARAMS, cause);, +++ b/x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/ExecuteStepsUpdateTaskTests.java, +import static org.hamcrest.Matchers.containsString;, +        assertThat(lifecycleState.getStepInfo(),, +            containsString("{\"type\":\"runtime_exception\",\"reason\":\"error\",\"stack_trace\":\""));, +        assertThat(lifecycleState.getStepInfo(),, +            containsString("{\"type\":\"runtime_exception\",\"reason\":\"error\",\"stack_trace\":\""));, +++ b/x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunnerTests.java, +import static org.hamcrest.Matchers.containsString;, +            "{\"type\":\"exception\",\"reason\":\"THIS IS AN EXPECTED CAUSE\"");, +            "{\"type\":\"illegal_argument_exception\",\"reason\":\"non elasticsearch-exception\",\"stack_trace\":\"");, +        assertThat(newLifecycleState.getStepInfo(), containsString(expectedCauseValue));, +++ b/x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/MoveToErrorStepUpdateTaskTests.java, +import static org.hamcrest.Matchers.containsString;, +        assertThat(lifecycleState.getStepInfo(),, +            containsString("{\"type\":\"exception\",\"reason\":\"THIS IS AN EXPECTED CAUSE\",\"stack_trace\":\""));]