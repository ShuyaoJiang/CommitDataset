[+++ b/src/main/java/org/elasticsearch/action/Action.java, +public abstract class Action<Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>>, +++ b/src/main/java/org/elasticsearch/action/Action.java, +public abstract class Action<Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>>, +++ b/src/main/java/org/elasticsearch/action/ActionRequest.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.transport.TransportRequest;, +, +import java.io.IOException;, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +    private boolean listenerThreaded = false;, +, +    protected ActionRequest() {, +        super();, +    }, +, +    protected ActionRequest(ActionRequest request) {, +        super(request);, +        // this does not set the listenerThreaded API, if needed, its up to the caller to set it, +        // since most times, we actually want it to not be threaded..., +        //this.listenerThreaded = request.listenerThreaded();, +    }, +    public final boolean listenerThreaded() {, +        return this.listenerThreaded;, +    }, +    @SuppressWarnings("unchecked"), +    public final T listenerThreaded(boolean listenerThreaded) {, +        this.listenerThreaded = listenerThreaded;, +        return (T) this;, +    }, +, +    public abstract ActionRequestValidationException validate();, +, +    @Override, +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +    }, +++ b/src/main/java/org/elasticsearch/action/Action.java, +public abstract class Action<Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>>, +++ b/src/main/java/org/elasticsearch/action/ActionRequest.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.transport.TransportRequest;, +, +import java.io.IOException;, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +    private boolean listenerThreaded = false;, +, +    protected ActionRequest() {, +        super();, +    }, +, +    protected ActionRequest(ActionRequest request) {, +        super(request);, +        // this does not set the listenerThreaded API, if needed, its up to the caller to set it, +        // since most times, we actually want it to not be threaded..., +        //this.listenerThreaded = request.listenerThreaded();, +    }, +    public final boolean listenerThreaded() {, +        return this.listenerThreaded;, +    }, +    @SuppressWarnings("unchecked"), +    public final T listenerThreaded(boolean listenerThreaded) {, +        this.listenerThreaded = listenerThreaded;, +        return (T) this;, +    }, +, +    public abstract ActionRequestValidationException validate();, +, +    @Override, +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +    }, +++ b/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +import org.elasticsearch.action.support.PlainListenableActionFuture;, +import org.elasticsearch.client.internal.InternalGenericClient;, +, +public abstract class ActionRequestBuilder<Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder> {, +    protected final Request request;, +    protected final InternalGenericClient client;, +    protected ActionRequestBuilder(InternalGenericClient client, Request request) {, +        this.client = client;, +        this.request = request;, +    }, +, +    public Request request() {, +        return this.request;, +    }, +]