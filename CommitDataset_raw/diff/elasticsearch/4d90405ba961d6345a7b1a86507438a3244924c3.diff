[+++ b/README.md, +The JavaScript language plugin allows to have `javascript` (or `js`) as the language of scripts to execute., +++ b/README.md, +The JavaScript language plugin allows to have `javascript` (or `js`) as the language of scripts to execute., +++ b/pom.xml, +        <elasticsearch.version>1.0.0</elasticsearch.version>, +        <lucene.version>4.6.1</lucene.version>, +++ b/README.md, +The JavaScript language plugin allows to have `javascript` (or `js`) as the language of scripts to execute., +++ b/pom.xml, +        <elasticsearch.version>1.0.0</elasticsearch.version>, +        <lucene.version>4.6.1</lucene.version>, +++ b/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptSearchTests.java, +import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;, +        Map<String, Object> sObj1 = (Map<String, Object>) response.getHits().getAt(0).field("s_obj1").value();, +                .source(searchSource().explain(true).query(functionScoreQuery(termQuery("test", "value")), +                        .add(ScoreFunctionBuilders.scriptFunction("doc['num1'].value").lang("js")))), +                .source(searchSource().explain(true).query(functionScoreQuery(termQuery("test", "value")), +                        .add(ScoreFunctionBuilders.scriptFunction("-doc['num1'].value").lang("js")))), +                .source(searchSource().explain(true).query(functionScoreQuery(termQuery("test", "value")), +                        .add(ScoreFunctionBuilders.scriptFunction("Math.pow(doc['num1'].value, 2)").lang("js")))), +                .source(searchSource().explain(true).query(functionScoreQuery(termQuery("test", "value")), +                        .add(ScoreFunctionBuilders.scriptFunction("Math.max(doc['num1'].value, 1)").lang("js")))), +                .source(searchSource().explain(true).query(functionScoreQuery(termQuery("test", "value")), +                        .add(ScoreFunctionBuilders.scriptFunction("doc['num1'].value * _score").lang("js")))), +                .source(searchSource().explain(true).query(functionScoreQuery(termQuery("test", "value")), +                        .add(ScoreFunctionBuilders.scriptFunction("param1 * param2 * _score").param("param1", 2).param("param2", 2).lang("js"))))]