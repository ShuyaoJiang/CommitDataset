[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We only check metadata block, as we want to snapshot closed indices (which have a read block), +        return null;, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We only check metadata block, as we want to snapshot closed indices (which have a read block), +        return null;, +++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.cluster.metadata.MetaDataIndexStateService;, +                    settingsBuilder.remove(MetaDataIndexStateService.VERIFIED_BEFORE_CLOSE_SETTING.getKey());, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We only check metadata block, as we want to snapshot closed indices (which have a read block), +        return null;, +++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.cluster.metadata.MetaDataIndexStateService;, +                    settingsBuilder.remove(MetaDataIndexStateService.VERIFIED_BEFORE_CLOSE_SETTING.getKey());, +++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We only check metadata block, as we want to snapshot closed indices (which have a read block), +        return null;, +++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.cluster.metadata.MetaDataIndexStateService;, +                    settingsBuilder.remove(MetaDataIndexStateService.VERIFIED_BEFORE_CLOSE_SETTING.getKey());, +++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/SnapshotBlocksIT.java, +                .setIndices(COMMON_INDEX_NAME_MASK).setWaitForCompletion(true).get().status(), equalTo(RestStatus.OK));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We only check metadata block, as we want to snapshot closed indices (which have a read block), +        return null;, +++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.cluster.metadata.MetaDataIndexStateService;, +                    settingsBuilder.remove(MetaDataIndexStateService.VERIFIED_BEFORE_CLOSE_SETTING.getKey());, +++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/SnapshotBlocksIT.java, +                .setIndices(COMMON_INDEX_NAME_MASK).setWaitForCompletion(true).get().status(), equalTo(RestStatus.OK));, +++ b/server/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java, +        assertThat(client().prepareSearch("test-idx-closed").setSize(0).get().getHits().getTotalHits().value, equalTo(100L));, +                .setIndices("test-idx-all", "test-idx-none", "test-idx-some", "test-idx-closed"), +                    .setIndices("test-idx-all", "test-idx-none", "test-idx-some", "test-idx-closed"), +            assertThat(snapshotStatus.getShardsStats().getTotalShards(), equalTo(22));, +            assertThat(snapshotStatus.getShardsStats().getDoneShards(), lessThan(16));, +            assertThat(snapshotStatus.getShardsStats().getDoneShards(), greaterThan(10));, +                    .setIndices("test-idx-all", "test-idx-none", "test-idx-some", "test-idx-closed"), +            assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), equalTo(22));, +            assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), lessThan(16));, +            assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(10));, +        assertAcked(client().admin().indices().prepareClose("test-idx-all"));, +, +        logger.info("--> restore snapshot for the closed index that was snapshotted completely");, +        restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap-2"), +            .setRestoreGlobalState(false).setIndices("test-idx-closed").setWaitForCompletion(true).execute().actionGet();, +        assertThat(restoreSnapshotResponse.getRestoreInfo(), notNullValue());, +        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), equalTo(4));, +        assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(), equalTo(4));, +        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));, +, +        assertThat(client().prepareSearch("test-idx-closed").setSize(0).get().getHits().getTotalHits().value, equalTo(100L));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We only check metadata block, as we want to snapshot closed indices (which have a read block), +        return null;, +++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.cluster.metadata.MetaDataIndexStateService;, +                    settingsBuilder.remove(MetaDataIndexStateService.VERIFIED_BEFORE_CLOSE_SETTING.getKey());, +++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/SnapshotBlocksIT.java, +                .setIndices(COMMON_INDEX_NAME_MASK).setWaitForCompletion(true).get().status(), equalTo(RestStatus.OK));, +++ b/server/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java, +        assertThat(client().prepareSearch("test-idx-closed").setSize(0).get().getHits().getTotalHits().value, equalTo(100L));, +                .setIndices("test-idx-all", "test-idx-none", "test-idx-some", "test-idx-closed"), +                    .setIndices("test-idx-all", "test-idx-none", "test-idx-some", "test-idx-closed"), +            assertThat(snapshotStatus.getShardsStats().getTotalShards(), equalTo(22));, +            assertThat(snapshotStatus.getShardsStats().getDoneShards(), lessThan(16));, +            assertThat(snapshotStatus.getShardsStats().getDoneShards(), greaterThan(10));, +                    .setIndices("test-idx-all", "test-idx-none", "test-idx-some", "test-idx-closed"), +            assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), equalTo(22));, +            assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), lessThan(16));, +            assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(10));, +        assertAcked(client().admin().indices().prepareClose("test-idx-all"));, +, +        logger.info("--> restore snapshot for the closed index that was snapshotted completely");, +        restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap-2"), +            .setRestoreGlobalState(false).setIndices("test-idx-closed").setWaitForCompletion(true).execute().actionGet();, +        assertThat(restoreSnapshotResponse.getRestoreInfo(), notNullValue());, +        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), equalTo(4));, +        assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(), equalTo(4));, +        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));, +]