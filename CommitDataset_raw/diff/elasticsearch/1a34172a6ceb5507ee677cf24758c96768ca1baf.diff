[+++ b/src/test/java/org/elasticsearch/blocks/SimpleBlocksTests.java, +import org.elasticsearch.test.AbstractIntegrationTest;, +public class SimpleBlocksTests extends AbstractIntegrationTest {, +        canCreateIndex("test1");, +        canIndexDocument("test1");, +        setIndexReadOnly("test1", "false");, +        canIndexExists("test1");, +        setClusterReadOnly("true");, +        canNotCreateIndex("test2");, +        canNotIndexDocument("test1");, +        canNotIndexExists("test1");, +        setClusterReadOnly("false");, +        canCreateIndex("test2");, +        canIndexDocument("test2");, +        canIndexDocument("test1");, +        canIndexExists("test1");, +        canCreateIndex("ro");, +        canIndexDocument("ro");, +        canIndexExists("ro");, +        setIndexReadOnly( "ro", "true");, +        canNotIndexDocument("ro");, +        canNotIndexExists("ro");, +        canCreateIndex("rw");, +        canIndexDocument("rw");, +        canIndexExists("rw");, +        setIndexReadOnly("ro", "false");, +        canIndexDocument("ro");, +        canIndexExists("ro");, +        canCreateIndex("test1");, +        canIndexDocument("test1");, +        client().admin().indices().prepareUpdateSettings("test1"), +        canNotIndexDocument("test1");, +        client().admin().indices().prepareUpdateSettings("test1"), +        canIndexDocument("test1");, +    private void canCreateIndex(String index) {, +            CreateIndexResponse r = client().admin().indices().prepareCreate(index).execute().actionGet();, +    private void canNotCreateIndex(String index) {, +            client().admin().indices().prepareCreate(index).execute().actionGet();, +    private void canIndexDocument(String index) {, +            IndexRequestBuilder builder = client().prepareIndex(index, "zzz");, +    private void canNotIndexDocument(String index) {, +            IndexRequestBuilder builder = client().prepareIndex(index, "zzz");, +    private void canIndexExists(String index) {, +            IndicesExistsResponse r = client().admin().indices().prepareExists(index).execute().actionGet();, +    private void canNotIndexExists(String index) {, +            IndicesExistsResponse r = client().admin().indices().prepareExists(index).execute().actionGet();, +    private void setClusterReadOnly(String value) {, +        updateClusterSettings(settingsBuilder().put(MetaData.SETTING_READ_ONLY, value).build());, +    private void setIndexReadOnly(String index, Object value) {, +        UpdateSettingsRequestBuilder settingsRequest = client().admin().indices().prepareUpdateSettings(index);, +++ b/src/test/java/org/elasticsearch/blocks/SimpleBlocksTests.java, +import org.elasticsearch.test.AbstractIntegrationTest;, +public class SimpleBlocksTests extends AbstractIntegrationTest {, +        canCreateIndex("test1");, +        canIndexDocument("test1");, +        setIndexReadOnly("test1", "false");, +        canIndexExists("test1");, +        setClusterReadOnly("true");, +        canNotCreateIndex("test2");, +        canNotIndexDocument("test1");, +        canNotIndexExists("test1");, +        setClusterReadOnly("false");, +        canCreateIndex("test2");, +        canIndexDocument("test2");, +        canIndexDocument("test1");, +        canIndexExists("test1");, +        canCreateIndex("ro");, +        canIndexDocument("ro");, +        canIndexExists("ro");, +        setIndexReadOnly( "ro", "true");, +        canNotIndexDocument("ro");, +        canNotIndexExists("ro");, +        canCreateIndex("rw");, +        canIndexDocument("rw");, +        canIndexExists("rw");, +        setIndexReadOnly("ro", "false");, +        canIndexDocument("ro");, +        canIndexExists("ro");, +        canCreateIndex("test1");, +        canIndexDocument("test1");, +        client().admin().indices().prepareUpdateSettings("test1"), +        canNotIndexDocument("test1");, +        client().admin().indices().prepareUpdateSettings("test1"), +        canIndexDocument("test1");, +    private void canCreateIndex(String index) {, +            CreateIndexResponse r = client().admin().indices().prepareCreate(index).execute().actionGet();, +    private void canNotCreateIndex(String index) {, +            client().admin().indices().prepareCreate(index).execute().actionGet();, +    private void canIndexDocument(String index) {, +            IndexRequestBuilder builder = client().prepareIndex(index, "zzz");, +    private void canNotIndexDocument(String index) {, +            IndexRequestBuilder builder = client().prepareIndex(index, "zzz");, +    private void canIndexExists(String index) {, +            IndicesExistsResponse r = client().admin().indices().prepareExists(index).execute().actionGet();, +    private void canNotIndexExists(String index) {, +            IndicesExistsResponse r = client().admin().indices().prepareExists(index).execute().actionGet();, +    private void setClusterReadOnly(String value) {, +        updateClusterSettings(settingsBuilder().put(MetaData.SETTING_READ_ONLY, value).build());, +    private void setIndexReadOnly(String index, Object value) {, +        UpdateSettingsRequestBuilder settingsRequest = client().admin().indices().prepareUpdateSettings(index);]