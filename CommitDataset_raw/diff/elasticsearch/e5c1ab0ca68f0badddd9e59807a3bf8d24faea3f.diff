[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardsAllocation.java, +    /**, +     * Only handles reroute but *without* any reassignment of unassigned shards or rebalancing. Does, +     * make sure to handle removed nodes, but only moved the shards to UNASSIGNED, does not reassign, +     * them., +     */, +    public RoutingAllocation.Result rerouteWithNoReassign(ClusterState clusterState) {, +        RoutingNodes routingNodes = clusterState.routingNodes();, +        RoutingAllocation allocation = new RoutingAllocation(routingNodes, clusterState.nodes());, +        Iterable<DiscoveryNode> dataNodes = allocation.nodes().dataNodes().values();, +        boolean changed = false;, +        // first, clear from the shards any node id they used to belong to that is now dead, +        changed |= deassociateDeadNodes(allocation.routingNodes(), dataNodes);, +, +        // create a sorted list of from nodes with least number of shards to the maximum ones, +        applyNewNodes(allocation.routingNodes(), dataNodes);, +, +        // elect primaries *before* allocating unassigned, so backups of primaries that failed, +        // will be moved to primary state and not wait for primaries to be allocated and recovered (*from gateway*), +        changed |= electPrimaries(allocation.routingNodes());, +, +        if (!changed) {, +            return new RoutingAllocation.Result(false, clusterState.routingTable(), allocation.explanation());, +        }, +        return new RoutingAllocation.Result(true, new RoutingTable.Builder().updateNodes(routingNodes).build().validateRaiseException(clusterState.metaData()), allocation.explanation());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardsAllocation.java, +    /**, +     * Only handles reroute but *without* any reassignment of unassigned shards or rebalancing. Does, +     * make sure to handle removed nodes, but only moved the shards to UNASSIGNED, does not reassign, +     * them., +     */, +    public RoutingAllocation.Result rerouteWithNoReassign(ClusterState clusterState) {, +        RoutingNodes routingNodes = clusterState.routingNodes();, +        RoutingAllocation allocation = new RoutingAllocation(routingNodes, clusterState.nodes());, +        Iterable<DiscoveryNode> dataNodes = allocation.nodes().dataNodes().values();, +        boolean changed = false;, +        // first, clear from the shards any node id they used to belong to that is now dead, +        changed |= deassociateDeadNodes(allocation.routingNodes(), dataNodes);, +, +        // create a sorted list of from nodes with least number of shards to the maximum ones, +        applyNewNodes(allocation.routingNodes(), dataNodes);, +, +        // elect primaries *before* allocating unassigned, so backups of primaries that failed, +        // will be moved to primary state and not wait for primaries to be allocated and recovered (*from gateway*), +        changed |= electPrimaries(allocation.routingNodes());, +, +        if (!changed) {, +            return new RoutingAllocation.Result(false, clusterState.routingTable(), allocation.explanation());, +        }, +        return new RoutingAllocation.Result(true, new RoutingTable.Builder().updateNodes(routingNodes).build().validateRaiseException(clusterState.metaData()), allocation.explanation());, +    }, +, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedNodeRoutingTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.routing.allocation;, +, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.RoutingNodes;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.testng.annotations.Test;, +, +import static org.elasticsearch.cluster.ClusterState.*;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.*;, +import static org.elasticsearch.cluster.metadata.MetaData.*;, +import static org.elasticsearch.cluster.node.DiscoveryNodes.*;, +import static org.elasticsearch.cluster.routing.RoutingBuilders.*;, +import static org.elasticsearch.cluster.routing.ShardRoutingState.*;, +import static org.elasticsearch.cluster.routing.allocation.RoutingAllocationTests.*;, +import static org.elasticsearch.common.settings.ImmutableSettings.*;, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.Matchers.*;, +, +public class FailedNodeRoutingTests {, +, +    private final ESLogger logger = Loggers.getLogger(FailedNodeRoutingTests.class);, +]