[+++ b/docs/build.gradle, +// Used by aggregation docs, +++ b/docs/build.gradle, +// Used by aggregation docs, +++ b/docs/reference/aggregations/metrics/avg-aggregation.asciidoc, +Assuming the data consists of documents representing exams grades (between 0, +and 100) of students we can average their scores with:, +++ b/docs/build.gradle, +// Used by aggregation docs, +++ b/docs/reference/aggregations/metrics/avg-aggregation.asciidoc, +Assuming the data consists of documents representing exams grades (between 0, +and 100) of students we can average their scores with:, +++ b/docs/reference/aggregations/metrics/sum-aggregation.asciidoc, +Assuming the data consists of documents representing sales records we can sum, +the sale price of all hats with:, +POST /sales/_search?size=0, +                "match" : { "type" : "hat" }, +        "hat_prices" : { "sum" : { "field" : "price" } }, +// CONSOLE, +// TEST[setup:sales], +Resulting in:, +        "hat_prices": {, +           "value": 450.0, +// TESTRESPONSE[s/\.\.\./"took": $body.took,"timed_out": false,"_shards": $body._shards,"hits": $body.hits,/], +We could also use a script to fetch the sales price:, +POST /sales/_search?size=0, +    "query" : {, +        "constant_score" : {, +            "filter" : {, +                "match" : { "type" : "hat" }, +            }, +        }, +    },, +        "hat_prices" : {, +                   "inline": "doc.price.value", +// CONSOLE, +// TEST[setup:sales], +POST /sales/_search?size=0, +    "query" : {, +        "constant_score" : {, +            "filter" : {, +                "match" : { "type" : "hat" }, +            }, +        }, +    },, +        "hat_prices" : {, +                        "field" : "price", +// CONSOLE, +// TEST[setup:sales], +It is also possible to access the field value from the script using `_value`., +For example, this will sum the square of the prices for all hats:, +POST /sales/_search?size=0, +    "query" : {, +        "constant_score" : {, +            "filter" : {, +                "match" : { "type" : "hat" }, +            }, +        }, +    },, +        "square_hats" : {, +                "field" : "price",, +// CONSOLE, +// TEST[setup:sales], +The `missing` parameter defines how documents that are missing a value should, +be treated. By default documents missing the value will be ignored but it is, +also possible to treat them as if they had a value. For example, this treats, +all hat sales without a price as being `100`., +POST /sales/_search?size=0, +    "query" : {, +        "constant_score" : {, +            "filter" : {, +                "match" : { "type" : "hat" }, +            }, +        }, +    },, +        "hat_prices" : {, +                "field" : "price",, +// CONSOLE, +// TEST[setup:sales]]