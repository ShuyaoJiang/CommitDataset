[+++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/UpdateShardAllocationSettingsIT.java, +        client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder(), +                .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(), EnableAllocationDecider.Rebalance.NONE)), +                .get();, +        assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numShards)));, +        assertAcked(prepareCreate("test_1").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numShards)));, +        client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder(), +                .put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(), EnableAllocationDecider.Rebalance.NONE)), +                .get();, +        client().admin().indices().prepareUpdateSettings("test"), +                .setSettings(Settings.builder().put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),, +                        randomBoolean() ? EnableAllocationDecider.Rebalance.PRIMARIES : EnableAllocationDecider.Rebalance.ALL)), +                .get();, +        // flip the cluster wide setting such that we can also balance for index, +        // test_1 eventually we should have one shard of each index on each node, +        client().admin().cluster().prepareUpdateSettings(), +                .setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),, +                        randomBoolean() ? EnableAllocationDecider.Rebalance.PRIMARIES : EnableAllocationDecider.Rebalance.ALL)), +                .get();]