[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            this(shardId, msg, null);, +        }, +, +        public RetryOnPrimaryException(ShardId shardId, String msg, Throwable cause) {, +            super(msg, cause);, +, +                                        public void onFailure(Throwable shardFailedError) {, +                                            if (shardFailedError instanceof ShardStateAction.NoLongerPrimaryShardException) {, +                                                ShardRouting primaryShard = indexShardReference.routingEntry();, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                // we are no longer the primary, fail ourselves and start over, +                                                indexShardReference.failShard(message, shardFailedError);, +                                                forceFinishAsFailed(new RetryOnPrimaryException(shardId, message, shardFailedError));, +                                            } else {, +                                                assert false : shardFailedError;, +                                    }, +        void failShard(String reason, @Nullable Throwable e);, +        public void failShard(String reason, @Nullable Throwable e) {, +            indexShard.failShard(reason, e);, +        }, +, +        @Override, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            this(shardId, msg, null);, +        }, +, +        public RetryOnPrimaryException(ShardId shardId, String msg, Throwable cause) {, +            super(msg, cause);, +, +                                        public void onFailure(Throwable shardFailedError) {, +                                            if (shardFailedError instanceof ShardStateAction.NoLongerPrimaryShardException) {, +                                                ShardRouting primaryShard = indexShardReference.routingEntry();, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                // we are no longer the primary, fail ourselves and start over, +                                                indexShardReference.failShard(message, shardFailedError);, +                                                forceFinishAsFailed(new RetryOnPrimaryException(shardId, message, shardFailedError));, +                                            } else {, +                                                assert false : shardFailedError;, +                                    }, +        void failShard(String reason, @Nullable Throwable e);, +        public void failShard(String reason, @Nullable Throwable e) {, +            indexShard.failShard(reason, e);, +        }, +, +        @Override, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/ClusterStateCreationUtils.java, +                Set<String> unassignedNodesExecludingPrimary = new HashSet<>(unassignedNodes);, +                unassignedNodesExecludingPrimary.remove(newNode(0).id());, +                primaryNode = selectAndRemove(unassignedNodesExecludingPrimary);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            this(shardId, msg, null);, +        }, +, +        public RetryOnPrimaryException(ShardId shardId, String msg, Throwable cause) {, +            super(msg, cause);, +, +                                        public void onFailure(Throwable shardFailedError) {, +                                            if (shardFailedError instanceof ShardStateAction.NoLongerPrimaryShardException) {, +                                                ShardRouting primaryShard = indexShardReference.routingEntry();, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                // we are no longer the primary, fail ourselves and start over, +                                                indexShardReference.failShard(message, shardFailedError);, +                                                forceFinishAsFailed(new RetryOnPrimaryException(shardId, message, shardFailedError));, +                                            } else {, +                                                assert false : shardFailedError;, +                                    }, +        void failShard(String reason, @Nullable Throwable e);, +        public void failShard(String reason, @Nullable Throwable e) {, +            indexShard.failShard(reason, e);, +        }, +, +        @Override, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/ClusterStateCreationUtils.java, +                Set<String> unassignedNodesExecludingPrimary = new HashSet<>(unassignedNodes);, +                unassignedNodesExecludingPrimary.remove(newNode(0).id());, +                primaryNode = selectAndRemove(unassignedNodesExecludingPrimary);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +import java.util.function.Consumer;, +import static org.hamcrest.CoreMatchers.containsString;, +        AtomicReference<Throwable> error = new AtomicReference<>();, +, +        TransportChannel channel = createTransportChannel(listener, error::set);, +        TransportReplicationAction<Request, Request, Response>.ReplicationPhase replicationPhase =, +                action.new ReplicationPhase(task, request, new Response(), request.shardId(), channel, reference);, +                    int ternary = randomIntBetween(0, 2);, +                    if (ternary == 0) {, +                    } else if (ternary == 1) {, +                        // simulate the primary has been demoted, +                        transport.handleRemoteError(shardFailedRequest.requestId, new ShardStateAction.NoLongerPrimaryShardException(shardRoutingEntry.getShardRouting().shardId(), "shard-failed-test"));, +                        // the primary should fail itself, +                        assertShardIsFailed();, +                        // we should see a retry on primary exception, +                        assertNotNull(error.get());, +                        assertThat(error.get(), instanceOf(TransportReplicationAction.RetryOnPrimaryException.class));, +                        return;, +                    } else if (ternary == 2) {, +                    } else {, +                        assert false;, +    public void testReroutePhaseRetriedAfterDemotedPrimary() {]