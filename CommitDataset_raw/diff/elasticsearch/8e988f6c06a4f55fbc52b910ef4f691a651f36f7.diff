[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                return PainlessCast.originalTypetoTargetType(def.class, boolean.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, byte.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, short.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, char.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, int.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, long.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, float.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, double.class, explicit);, +            } else if (expected == Boolean.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Boolean.class, explicit);, +            } else if (expected == Byte.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Byte.class, explicit);, +            } else if (expected == Short.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Short.class, explicit);, +            } else if (expected == Character.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Character.class, explicit);, +            } else if (expected == Integer.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Integer.class, explicit);, +            } else if (expected == Long.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Long.class, explicit);, +            } else if (expected == Float.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Float.class, explicit);, +            } else if (expected == Double.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Double.class, explicit);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                return PainlessCast.originalTypetoTargetType(def.class, boolean.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, byte.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, short.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, char.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, int.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, long.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, float.class, explicit);, +                return PainlessCast.originalTypetoTargetType(def.class, double.class, explicit);, +            } else if (expected == Boolean.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Boolean.class, explicit);, +            } else if (expected == Byte.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Byte.class, explicit);, +            } else if (expected == Short.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Short.class, explicit);, +            } else if (expected == Character.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Character.class, explicit);, +            } else if (expected == Integer.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Integer.class, explicit);, +            } else if (expected == Long.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Long.class, explicit);, +            } else if (expected == Float.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Float.class, explicit);, +            } else if (expected == Double.class) {, +                return PainlessCast.originalTypetoTargetType(def.class, Double.class, explicit);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +    public static Boolean defToBoolean(final Object value) {, +        if (value == null) {, +            return null;, +        } else if (value instanceof Boolean) {, +            return (Boolean)value;, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to " +, +                    Boolean.class.getCanonicalName());, +        }, +    }, +, +        } else if (value instanceof Byte) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to " +, +                    Byte.class.getCanonicalName());, +        } else if (value instanceof Short) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to " +, +                    Short.class.getCanonicalName());, +        } else if (value instanceof Character) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to " +, +                    Character.class.getCanonicalName());, +        } else if (value instanceof Integer) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to " +, +                    Integer.class.getCanonicalName());, +        } else if (value instanceof Long) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to " +, +                    Long.class.getCanonicalName());, +        } else if (value instanceof Float) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to " +, +                    Float.class.getCanonicalName());, +        } else if (value instanceof Double) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + value.getClass().getCanonicalName() + "] to " + Double.class.getCanonicalName());, +        } else if (, +            value instanceof Byte    ||, +            value instanceof Short   ||]