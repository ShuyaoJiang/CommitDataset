[+++ b/bin/elasticsearch, +++ b/bin/elasticsearch, +++ b/bin/elasticsearch.bat, +++ b/bin/elasticsearch, +++ b/bin/elasticsearch.bat, +++ /dev/null, +++ b/bin/elasticsearch, +++ b/bin/elasticsearch.bat, +++ /dev/null, +++ b/dev-tools/create_bwc_index.py, +# Licensed to Elasticsearch under one or more contributor, +# license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright, +# ownership. Elasticsearch licenses this file to you under, +# the Apache License, Version 2.0 (the "License"); you may, +# not use this file except in compliance  with the License., +# You may obtain a copy of the License at, +#, +#     http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing,, +# software distributed under the License is distributed on, +# an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,, +# either express or implied. See the License for the specific, +# language governing permissions and limitations under the License., +, +import argparse, +import glob, +import logging, +import os, +import random, +import shutil, +import subprocess, +import sys, +import tempfile, +import time, +, +DEFAULT_TRANSPORT_TCP_PORT = 9300, +DEFAULT_HTTP_TCP_PORT = 9200, +, +if sys.version_info[0] < 3:, +  print('%s must use python 3.x (for the ES python client)' % sys.argv[0]), +, +from datetime import datetime, +try:, +  from elasticsearch import Elasticsearch, +  from elasticsearch.exceptions import ConnectionError, +  from elasticsearch.exceptions import TransportError, +except ImportError as e:, +  print('Can\'t import elasticsearch please install `sudo pip3 install elasticsearch`'), +  sys.exit(1), +, +# sometimes returns True, +def rarely():, +  return random.randint(0, 10) == 0, +, +# usually returns True, +def frequently():, +  return not rarely(), +, +# asserts the correctness of the given hits given they are sorted asc, +def assert_sort(hits):, +  values = [hit['sort'] for hit in hits['hits']['hits']], +  assert len(values) > 0, 'expected non emtpy result', +  val = min(values), +  for x in values:, +    assert x >= val, '%s >= %s' % (x, val), +    val = x, +, +# Indexes the given number of document into the given index, +# and randomly runs refresh, optimize and flush commands, +def index_documents(es, index_name, type, num_docs):, +  logging.info('Indexing %s docs' % num_docs), +  for id in range(0, num_docs):, +    es.index(index=index_name, doc_type=type, id=id, body={'string': str(random.randint(0, 100)),, +                                                           'long_sort': random.randint(0, 100),, +                                                           'double_sort' : float(random.randint(0, 100)),, +                                                           'bool' : random.choice([True, False])}), +    if rarely():, +      es.indices.refresh(index=index_name), +    if rarely():, +      es.indices.flush(index=index_name, force=frequently()), +  logging.info('Flushing index'), +  es.indices.flush(index=index_name), +, +def delete_by_query(es, version, index_name, doc_type):, +, +  logging.info('Deleting long_sort:[10..20] docs'), +, +  query = {'query':, +           {'range':, +            {'long_sort':, +             {'gte': 10,, +              'lte': 20}}}}, +, +  if version.startswith('0.') or version in ('1.0.0.Beta1', '1.0.0.Beta2'):, +    # TODO #10262: we can't write DBQ into the translog for these old versions until we fix this back-compat bug:, +, +    # #4074: these versions don't expect to see the top-level 'query' to count/delete_by_query:, +    query = query['query']]