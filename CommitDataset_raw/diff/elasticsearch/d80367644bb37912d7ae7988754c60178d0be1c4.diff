[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +            "scripts_painless_context",, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +            "scripts_painless_context",, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessPlugin.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.painless.action.PainlessContextAction;, +    private final SetOnce<PainlessScriptEngine> painlessScriptEngine = new SetOnce<>();, +, +        painlessScriptEngine.set(new PainlessScriptEngine(settings, contextsWithWhitelists));, +        return painlessScriptEngine.get();, +    }, +, +    @Override, +    public Collection<Module> createGuiceModules() {, +        return Collections.singleton(b -> b.bind(PainlessScriptEngine.class).toInstance(painlessScriptEngine.get()));, +        List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> actions = new ArrayList<>();, +        actions.add(new ActionHandler<>(PainlessExecuteAction.INSTANCE, PainlessExecuteAction.TransportAction.class));, +        actions.add(new ActionHandler<>(PainlessContextAction.INSTANCE, PainlessContextAction.TransportAction.class));, +        return actions;, +        List<RestHandler> handlers = new ArrayList<>();, +        handlers.add(new PainlessExecuteAction.RestAction(settings, restController));, +        handlers.add(new PainlessContextAction.RestAction(settings, restController));, +        return handlers;, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +            "scripts_painless_context",, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessPlugin.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.painless.action.PainlessContextAction;, +    private final SetOnce<PainlessScriptEngine> painlessScriptEngine = new SetOnce<>();, +, +        painlessScriptEngine.set(new PainlessScriptEngine(settings, contextsWithWhitelists));, +        return painlessScriptEngine.get();, +    }, +, +    @Override, +    public Collection<Module> createGuiceModules() {, +        return Collections.singleton(b -> b.bind(PainlessScriptEngine.class).toInstance(painlessScriptEngine.get()));, +        List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> actions = new ArrayList<>();, +        actions.add(new ActionHandler<>(PainlessExecuteAction.INSTANCE, PainlessExecuteAction.TransportAction.class));, +        actions.add(new ActionHandler<>(PainlessContextAction.INSTANCE, PainlessContextAction.TransportAction.class));, +        return actions;, +        List<RestHandler> handlers = new ArrayList<>();, +        handlers.add(new PainlessExecuteAction.RestAction(settings, restController));, +        handlers.add(new PainlessContextAction.RestAction(settings, restController));, +        return handlers;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +    private final Map<ScriptContext<?>, PainlessLookup> contextsToLookups;, +        Map<ScriptContext<?>, PainlessLookup> contextsToLookups = new HashMap<>();, +            PainlessLookup lookup = PainlessLookupBuilder.buildFromWhitelists(entry.getValue());, +            contextsToCompilers.put(context,, +                    new Compiler(context.instanceClazz, context.factoryClazz, context.statefulFactoryClazz, lookup));, +            contextsToLookups.put(context, lookup);, +        this.contextsToLookups = Collections.unmodifiableMap(contextsToLookups);, +    }, +, +    public Map<ScriptContext<?>, PainlessLookup> getContextsToLookups() {, +        return contextsToLookups;, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +            "scripts_painless_context",, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessPlugin.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.painless.action.PainlessContextAction;, +    private final SetOnce<PainlessScriptEngine> painlessScriptEngine = new SetOnce<>();, +, +        painlessScriptEngine.set(new PainlessScriptEngine(settings, contextsWithWhitelists));, +        return painlessScriptEngine.get();, +    }, +, +    @Override, +    public Collection<Module> createGuiceModules() {, +        return Collections.singleton(b -> b.bind(PainlessScriptEngine.class).toInstance(painlessScriptEngine.get()));, +        List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> actions = new ArrayList<>();, +        actions.add(new ActionHandler<>(PainlessExecuteAction.INSTANCE, PainlessExecuteAction.TransportAction.class));, +        actions.add(new ActionHandler<>(PainlessContextAction.INSTANCE, PainlessContextAction.TransportAction.class));, +        return actions;, +        List<RestHandler> handlers = new ArrayList<>();, +        handlers.add(new PainlessExecuteAction.RestAction(settings, restController));, +        handlers.add(new PainlessContextAction.RestAction(settings, restController));, +        return handlers;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +    private final Map<ScriptContext<?>, PainlessLookup> contextsToLookups;, +        Map<ScriptContext<?>, PainlessLookup> contextsToLookups = new HashMap<>();, +            PainlessLookup lookup = PainlessLookupBuilder.buildFromWhitelists(entry.getValue());, +            contextsToCompilers.put(context,, +                    new Compiler(context.instanceClazz, context.factoryClazz, context.statefulFactoryClazz, lookup));, +            contextsToLookups.put(context, lookup);, +        this.contextsToLookups = Collections.unmodifiableMap(contextsToLookups);, +    }, +, +    public Map<ScriptContext<?>, PainlessLookup> getContextsToLookups() {, +        return contextsToLookups;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/action/PainlessContextAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor]