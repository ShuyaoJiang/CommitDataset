[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +                Optional<PersistentTask<?>> jobTask = validateAndReturnJobTask(jobId, currentState);, +                if (jobTask.isPresent()) {, +                    persistentTasksService.cancelPersistentTask(jobTask.get().getId(),, +        }, +                Optional<PersistentTask<?>> jobTask = validateAndReturnJobTask(jobId, currentState);, +                if (jobTask.isPresent()) {, +                    jobIdToPersistentTaskId.put(jobId, jobTask.get().getId());, +                }, +            }, +, +            // An empty map means all the jobs in the request are currently closed., +            if (jobIdToPersistentTaskId.isEmpty()) {, +                listener.onResponse(new Response(true));, +            if (validateAndReturnJobTask(jobId, state).isPresent()) {, +            } else {, +                return Collections.emptyList();, +            }, +    /**, +     * Validate the close request. Throws an exception on any of these conditions:, +     * <ul>, +     *     <li>If the job does not exist</li>, +     *     <li>If the job has a data feed the feed must be closed first</li>, +     *     <li>If the job is opening i.e. the job has a task but the task has null status</li>, +     *     <li>If the job is not already closed, opened or failed, +     *     i.e. the job is in the {@link JobState#CLOSING} state</li>, +     * </ul>, +     *, +     * If the job is already closed an empty Optional is returned., +     * @param jobId Job Id, +     * @param state Current cluster state, +     * @return The Job PersistentTask or an empty optional if the job is closed., +     */, +    static Optional<PersistentTask<?>> validateAndReturnJobTask(String jobId, ClusterState state) {, +        if (jobTask == null) {, +            return Optional.empty();, +        } else if (jobTask.getStatus() == null) {, +            throw ExceptionsHelper.conflictStatusException("cannot close job, because job [" + jobId + "] is opening");, +, +        return Optional.of(jobTask);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +                Optional<PersistentTask<?>> jobTask = validateAndReturnJobTask(jobId, currentState);, +                if (jobTask.isPresent()) {, +                    persistentTasksService.cancelPersistentTask(jobTask.get().getId(),, +        }, +                Optional<PersistentTask<?>> jobTask = validateAndReturnJobTask(jobId, currentState);, +                if (jobTask.isPresent()) {, +                    jobIdToPersistentTaskId.put(jobId, jobTask.get().getId());, +                }, +            }, +, +            // An empty map means all the jobs in the request are currently closed., +            if (jobIdToPersistentTaskId.isEmpty()) {, +                listener.onResponse(new Response(true));, +            if (validateAndReturnJobTask(jobId, state).isPresent()) {, +            } else {, +                return Collections.emptyList();, +            }, +    /**, +     * Validate the close request. Throws an exception on any of these conditions:, +     * <ul>, +     *     <li>If the job does not exist</li>, +     *     <li>If the job has a data feed the feed must be closed first</li>, +     *     <li>If the job is opening i.e. the job has a task but the task has null status</li>, +     *     <li>If the job is not already closed, opened or failed, +     *     i.e. the job is in the {@link JobState#CLOSING} state</li>, +     * </ul>, +     *, +     * If the job is already closed an empty Optional is returned., +     * @param jobId Job Id, +     * @param state Current cluster state, +     * @return The Job PersistentTask or an empty optional if the job is closed., +     */, +    static Optional<PersistentTask<?>> validateAndReturnJobTask(String jobId, ClusterState state) {, +        if (jobTask == null) {, +            return Optional.empty();, +        } else if (jobTask.getStatus() == null) {, +            throw ExceptionsHelper.conflictStatusException("cannot close job, because job [" + jobId + "] is opening");, +, +        return Optional.of(jobTask);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/CloseJobActionRequestTests.java, +import org.elasticsearch.ResourceNotFoundException;, +import java.util.Optional;, +    public void testValidate_jobIsClosed() {, +        mlBuilder.putJob(BaseMlIntegTestCase.createFareQuoteJob("closed-job").build(new Date()), false);, +        // A closed job doesn't have a task, +        ClusterState cs1 = ClusterState.builder(new ClusterName("_name")), +                .metaData(new MetaData.Builder().putCustom(MlMetadata.TYPE, mlBuilder.build())), +                .build();, +        Optional<PersistentTasksCustomMetaData.PersistentTask<?>> persistentTask =, +                CloseJobAction.validateAndReturnJobTask("closed-job", cs1);, +        assertFalse(persistentTask.isPresent());, +    }, +    public void testValidate_jobIsOpening() {, +        MlMetadata.Builder mlBuilder = new MlMetadata.Builder();, +        mlBuilder.putJob(BaseMlIntegTestCase.createFareQuoteJob("opening-job").build(new Date()), false);, +, +        // An opening job has a null status field, +        addJobTask("opening-job", null, null, tasksBuilder);, +        ElasticsearchStatusException conflictException =]