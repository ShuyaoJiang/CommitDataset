[+++ b/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +    private Query parseAndApply(Type type, String fieldName, Object value, String minimumShouldMatch, Float boostValue) throws IOException {, +        if (boostValue != null && query != null) {, +            query.setBoost(boostValue);, +        }, +            return parseAndApply(type, fieldBoost.getKey(), value, minimumShouldMatch, boostValue);, +                Query query = parseAndApply(type, fieldName, value, minimumShouldMatch, boostValue);, +                Query query = parseAndApply(type, fieldName, value, minimumShouldMatch, boostValue);, +++ b/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +    private Query parseAndApply(Type type, String fieldName, Object value, String minimumShouldMatch, Float boostValue) throws IOException {, +        if (boostValue != null && query != null) {, +            query.setBoost(boostValue);, +        }, +            return parseAndApply(type, fieldBoost.getKey(), value, minimumShouldMatch, boostValue);, +                Query query = parseAndApply(type, fieldName, value, minimumShouldMatch, boostValue);, +                Query query = parseAndApply(type, fieldName, value, minimumShouldMatch, boostValue);, +++ b/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java, +, +    @Test // see https://github.com/elasticsearch/elasticsearch/issues/3797, +    public void testMultiMatchLenientIssue3797() {, +        createIndex("test");, +        ensureGreen();, +        client().prepareIndex("test", "type1", "1").setSource("field1", 123, "field2", "value2").get();, +        refresh();, +, +        SearchResponse searchResponse = client().prepareSearch("test"), +                .setQuery(QueryBuilders.multiMatchQuery("value2", "field1^2", "field2").lenient(true).useDisMax(false)).get();, +        assertHitCount(searchResponse, 1l);, +, +        searchResponse = client().prepareSearch("test"), +                .setQuery(QueryBuilders.multiMatchQuery("value2", "field1^2", "field2").lenient(true).useDisMax(true)).get();, +        assertHitCount(searchResponse, 1l);, +, +        searchResponse = client().prepareSearch("test"), +                .setQuery(QueryBuilders.multiMatchQuery("value2", "field2^2").lenient(true)).get();, +        assertHitCount(searchResponse, 1l);, +    }]