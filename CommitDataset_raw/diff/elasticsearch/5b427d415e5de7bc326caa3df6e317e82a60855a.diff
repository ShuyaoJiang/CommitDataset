[+++ b/x-pack/plugin/core/src/main/config/log4j2.properties, +                %varsNotEmpty{, "request.id":"%enc{%map{request.id}}{JSON}"}\, +# "request.id" a synthentic identifier for the incoming request, this is unique per incoming request, and consistent across all audit events generated by that request, +++ b/x-pack/plugin/core/src/main/config/log4j2.properties, +                %varsNotEmpty{, "request.id":"%enc{%map{request.id}}{JSON}"}\, +# "request.id" a synthentic identifier for the incoming request, this is unique per incoming request, and consistent across all audit events generated by that request, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/interceptor/IndicesAliasesRequestInterceptor.java, +import org.elasticsearch.xpack.security.audit.AuditUtil;, +                                auditTrailService.accessDenied(AuditUtil.extractRequestId(threadContext), authentication, action, request,, +                                    userPermissions.names());, +++ b/x-pack/plugin/core/src/main/config/log4j2.properties, +                %varsNotEmpty{, "request.id":"%enc{%map{request.id}}{JSON}"}\, +# "request.id" a synthentic identifier for the incoming request, this is unique per incoming request, and consistent across all audit events generated by that request, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/interceptor/IndicesAliasesRequestInterceptor.java, +import org.elasticsearch.xpack.security.audit.AuditUtil;, +                                auditTrailService.accessDenied(AuditUtil.extractRequestId(threadContext), authentication, action, request,, +                                    userPermissions.names());, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/interceptor/ResizeRequestInterceptor.java, +import static org.elasticsearch.xpack.security.audit.AuditUtil.extractRequestId;, +, +                auditTrailService.accessDenied(extractRequestId(threadContext), authentication, action, request, userPermissions.names());, +++ b/x-pack/plugin/core/src/main/config/log4j2.properties, +                %varsNotEmpty{, "request.id":"%enc{%map{request.id}}{JSON}"}\, +# "request.id" a synthentic identifier for the incoming request, this is unique per incoming request, and consistent across all audit events generated by that request, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/interceptor/IndicesAliasesRequestInterceptor.java, +import org.elasticsearch.xpack.security.audit.AuditUtil;, +                                auditTrailService.accessDenied(AuditUtil.extractRequestId(threadContext), authentication, action, request,, +                                    userPermissions.names());, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/interceptor/ResizeRequestInterceptor.java, +import static org.elasticsearch.xpack.security.audit.AuditUtil.extractRequestId;, +, +                auditTrailService.accessDenied(extractRequestId(threadContext), authentication, action, request, userPermissions.names());, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +    void authenticationSuccess(String requestId, String realm, User user, RestRequest request);, +    void authenticationSuccess(String requestId, String realm, User user, String action, TransportMessage message);, +    void anonymousAccessDenied(String requestId, String action, TransportMessage message);, +    void anonymousAccessDenied(String requestId, RestRequest request);, +    void authenticationFailed(String requestId, RestRequest request);, +    void authenticationFailed(String requestId, String action, TransportMessage message);, +    void authenticationFailed(String requestId, AuthenticationToken token, String action, TransportMessage message);, +    void authenticationFailed(String requestId, AuthenticationToken token, RestRequest request);, +    void authenticationFailed(String requestId, String realm, AuthenticationToken token, String action, TransportMessage message);, +    void authenticationFailed(String requestId, String realm, AuthenticationToken token, RestRequest request);, +    void accessGranted(String requestId, Authentication authentication, String action, TransportMessage message, String[] roleNames);, +    void accessDenied(String requestId, Authentication authentication, String action, TransportMessage message, String[] roleNames);, +    void tamperedRequest(String requestId, RestRequest request);, +    void tamperedRequest(String requestId, String action, TransportMessage message);, +    void tamperedRequest(String requestId, User user, String action, TransportMessage request);, +    /**, +     * The {@link #connectionGranted(InetAddress, String, SecurityIpFilterRule)} and, +     * {@link #connectionDenied(InetAddress, String, SecurityIpFilterRule)} methods do not have a requestId because they related to a, +     * potentially long-lived TCP connection, not a single request. For both Transport and Rest connections, a single connection, +     * granted/denied event is generated even if that connection is used for multiple Elasticsearch actions (potentially as different users), +     */, +    void runAsGranted(String requestId, Authentication authentication, String action, TransportMessage message, String[] roleNames);, +    void runAsDenied(String requestId, Authentication authentication, String action, TransportMessage message, String[] roleNames);, +    void runAsDenied(String requestId, Authentication authentication, RestRequest request, String[] roleNames);, +, +++ b/x-pack/plugin/core/src/main/config/log4j2.properties, +                %varsNotEmpty{, "request.id":"%enc{%map{request.id}}{JSON}"}\, +# "request.id" a synthentic identifier for the incoming request, this is unique per incoming request, and consistent across all audit events generated by that request, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/interceptor/IndicesAliasesRequestInterceptor.java, +import org.elasticsearch.xpack.security.audit.AuditUtil;, +                                auditTrailService.accessDenied(AuditUtil.extractRequestId(threadContext), authentication, action, request,, +                                    userPermissions.names());, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/interceptor/ResizeRequestInterceptor.java, +import static org.elasticsearch.xpack.security.audit.AuditUtil.extractRequestId;, +, +                auditTrailService.accessDenied(extractRequestId(threadContext), authentication, action, request, userPermissions.names());, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +    void authenticationSuccess(String requestId, String realm, User user, RestRequest request);, +    void authenticationSuccess(String requestId, String realm, User user, String action, TransportMessage message);, +    void anonymousAccessDenied(String requestId, String action, TransportMessage message);, +    void anonymousAccessDenied(String requestId, RestRequest request);, +    void authenticationFailed(String requestId, RestRequest request);, +    void authenticationFailed(String requestId, String action, TransportMessage message);, +    void authenticationFailed(String requestId, AuthenticationToken token, String action, TransportMessage message);, +    void authenticationFailed(String requestId, AuthenticationToken token, RestRequest request);, +    void authenticationFailed(String requestId, String realm, AuthenticationToken token, String action, TransportMessage message);, +    void authenticationFailed(String requestId, String realm, AuthenticationToken token, RestRequest request);, +    void accessGranted(String requestId, Authentication authentication, String action, TransportMessage message, String[] roleNames);, +    void accessDenied(String requestId, Authentication authentication, String action, TransportMessage message, String[] roleNames);, +    void tamperedRequest(String requestId, RestRequest request);, +    void tamperedRequest(String requestId, String action, TransportMessage message);, +    void tamperedRequest(String requestId, User user, String action, TransportMessage request);, +    /**, +     * The {@link #connectionGranted(InetAddress, String, SecurityIpFilterRule)} and, +     * {@link #connectionDenied(InetAddress, String, SecurityIpFilterRule)} methods do not have a requestId because they related to a, +     * potentially long-lived TCP connection, not a single request. For both Transport and Rest connections, a single connection, +     * granted/denied event is generated even if that connection is used for multiple Elasticsearch actions (potentially as different users), +     */, +    void runAsGranted(String requestId, Authentication authentication, String action, TransportMessage message, String[] roleNames);, +    void runAsDenied(String requestId, Authentication authentication, String action, TransportMessage message, String[] roleNames);, +    void runAsDenied(String requestId, Authentication authentication, RestRequest request, String[] roleNames);, +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java, +    public void authenticationSuccess(String requestId, String realm, User user, RestRequest request) {, +                auditTrail.authenticationSuccess(requestId, realm, user, request);, +    public void authenticationSuccess(String requestId, String realm, User user, String action, TransportMessage message) {, +                auditTrail.authenticationSuccess(requestId, realm, user, action, message);]