[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java, +        OutputStream compressedStream = CompressorFactory.COMPRESSOR.streamOutput(bStream);, +            try (OutputStream compressedOutput = CompressorFactory.COMPRESSOR.streamOutput(out)) {, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java, +        OutputStream compressedStream = CompressorFactory.COMPRESSOR.streamOutput(bStream);, +            try (OutputStream compressedOutput = CompressorFactory.COMPRESSOR.streamOutput(out)) {, +++ b/core/src/main/java/org/elasticsearch/common/compress/Compressor.java, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java, +        OutputStream compressedStream = CompressorFactory.COMPRESSOR.streamOutput(bStream);, +            try (OutputStream compressedOutput = CompressorFactory.COMPRESSOR.streamOutput(out)) {, +++ b/core/src/main/java/org/elasticsearch/common/compress/Compressor.java, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressorFactory.java, +    public static final Compressor COMPRESSOR = new DeflateCompressor();, +            if (COMPRESSOR.isCompressed(bytes)) {, +                return COMPRESSOR;, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java, +        OutputStream compressedStream = CompressorFactory.COMPRESSOR.streamOutput(bStream);, +            try (OutputStream compressedOutput = CompressorFactory.COMPRESSOR.streamOutput(out)) {, +++ b/core/src/main/java/org/elasticsearch/common/compress/Compressor.java, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressorFactory.java, +    public static final Compressor COMPRESSOR = new DeflateCompressor();, +            if (COMPRESSOR.isCompressed(bytes)) {, +                return COMPRESSOR;, +++ b/core/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.compress;, +, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.compress.Compressor;, +import org.elasticsearch.common.io.stream.InputStreamStreamInput;, +import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.BufferedInputStream;, +import java.io.BufferedOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.util.Arrays;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.zip.Deflater;, +import java.util.zip.DeflaterOutputStream;, +import java.util.zip.Inflater;, +import java.util.zip.InflaterInputStream;, +, +/**, + * {@link Compressor} implementation based on the DEFLATE compression algorithm., + */, +public class DeflateCompressor implements Compressor {, +, +    // An arbitrary header that we use to identify compressed streams, +    // It needs to be different from other compressors and to not be specific, +    // enough so that no stream starting with these bytes could be detected as, +    // a XContent, +    private static final byte[] HEADER = new byte[] { 'D', 'F', 'L', '\0' };, +    // 3 is a good trade-off between speed and compression ratio, +    private static final int LEVEL = 3;, +    // We use buffering on the input and output of in/def-laters in order to, +    // limit the number of JNI calls, +    private static final int BUFFER_SIZE = 4096;, +, +    @Override, +    public boolean isCompressed(BytesReference bytes) {, +        if (bytes.length() < HEADER.length) {, +            return false;, +        }, +        for (int i = 0; i < HEADER.length; ++i) {, +            if (bytes.get(i) != HEADER[i]) {, +                return false;, +            }]