[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportShrinkAction.java, +        if (IndexMetaData.INDEX_ROUTING_PARTITION_SIZE_SETTING.exists(targetIndexSettings)) {, +            throw new IllegalArgumentException("cannot provide a routing partition size value when shrinking an index");, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportShrinkAction.java, +        if (IndexMetaData.INDEX_ROUTING_PARTITION_SIZE_SETTING.exists(targetIndexSettings)) {, +            throw new IllegalArgumentException("cannot provide a routing partition size value when shrinking an index");, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +, +    public static final String SETTING_ROUTING_PARTITION_SIZE = "index.routing_partition_size";, +    public static final Setting<Integer> INDEX_ROUTING_PARTITION_SIZE_SETTING =, +            Setting.intSetting(SETTING_ROUTING_PARTITION_SIZE, 1, 1, Property.IndexScope);, +, +    private final int routingPartitionSize;, +                          int routingNumShards, int routingPartitionSize, ActiveShardCount waitForActiveShards) {, +        this.routingPartitionSize = routingPartitionSize;, +    public int getRoutingPartitionSize() {, +        return routingPartitionSize;, +    }, +, +    public boolean isRoutingPartitionedIndex() {, +        return routingPartitionSize != 1;, +    }, +, +        /**, +         * Returns the number of shards., +         *, +         * @return the provided value or -1 if it has not been set., +         */, +        /**, +         * Returns the number of replicas., +         *, +         * @return the provided value or -1 if it has not been set., +         */, +        public Builder routingPartitionSize(int routingPartitionSize) {, +            settings = Settings.builder().put(settings).put(SETTING_ROUTING_PARTITION_SIZE, routingPartitionSize).build();, +            return this;, +        }, +, +        /**, +         * Returns the routing partition size., +         *, +         * @return the provided value or -1 if it has not been set., +         */, +        public int routingPartitionSize() {, +            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1);, +        }, +, +            inSyncAllocationIds.put(shardId, new HashSet<>(allocationIds));, +            int routingPartitionSize = INDEX_ROUTING_PARTITION_SIZE_SETTING.get(settings);, +            if (routingPartitionSize != 1 && routingPartitionSize >= getRoutingNumShards()) {, +                throw new IllegalArgumentException("routing partition size [" + routingPartitionSize + "] should be a positive number", +                        + " less than the number of shards [" + getRoutingNumShards() + "] for [" + index + "]");, +            }, +, +                indexCreatedVersion, indexUpgradedVersion, minimumCompatibleLuceneVersion, getRoutingNumShards(), routingPartitionSize, waitForActiveShards);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportShrinkAction.java, +        if (IndexMetaData.INDEX_ROUTING_PARTITION_SIZE_SETTING.exists(targetIndexSettings)) {, +            throw new IllegalArgumentException("cannot provide a routing partition size value when shrinking an index");, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +, +    public static final String SETTING_ROUTING_PARTITION_SIZE = "index.routing_partition_size";, +    public static final Setting<Integer> INDEX_ROUTING_PARTITION_SIZE_SETTING =, +            Setting.intSetting(SETTING_ROUTING_PARTITION_SIZE, 1, 1, Property.IndexScope);, +, +    private final int routingPartitionSize;, +                          int routingNumShards, int routingPartitionSize, ActiveShardCount waitForActiveShards) {, +        this.routingPartitionSize = routingPartitionSize;, +    public int getRoutingPartitionSize() {, +        return routingPartitionSize;, +    }, +, +    public boolean isRoutingPartitionedIndex() {, +        return routingPartitionSize != 1;, +    }, +, +        /**, +         * Returns the number of shards., +         *, +         * @return the provided value or -1 if it has not been set., +         */, +        /**, +         * Returns the number of replicas., +         *, +         * @return the provided value or -1 if it has not been set., +         */, +        public Builder routingPartitionSize(int routingPartitionSize) {, +            settings = Settings.builder().put(settings).put(SETTING_ROUTING_PARTITION_SIZE, routingPartitionSize).build();, +            return this;, +        }, +, +        /**, +         * Returns the routing partition size., +         *, +         * @return the provided value or -1 if it has not been set., +         */, +        public int routingPartitionSize() {, +            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1);]