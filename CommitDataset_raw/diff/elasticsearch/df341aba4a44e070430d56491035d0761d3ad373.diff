[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/indexlifecycle/IndexLifecycleExplainResponse.java, +import java.util.stream.Stream;, +            (Long) a[3],, +            (Long) a[8],, +            (Long) a[9],, +            (Long) a[10],, +    private final Long lifecycleDate;, +    private final Long phaseTime;, +    private final Long actionTime;, +    private final Long stepTime;, +    public static IndexLifecycleExplainResponse newManagedIndexResponse(String index, String policyName, Long lifecycleDate,, +                                                                        Long phaseTime, Long actionTime, Long stepTime,, +        return new IndexLifecycleExplainResponse(index, false, null, null, null, null, null, null, null, null, null, null, null);, +    private IndexLifecycleExplainResponse(String index, boolean managedByILM, String policyName, Long lifecycleDate,, +                                          String phase, String action, String step, String failedStep, Long phaseTime, Long actionTime,, +                                          Long stepTime, BytesReference stepInfo, PhaseExecutionInfo phaseExecutionInfo) {, +            // check to make sure that step details are either all null or all set., +            long numNull = Stream.of(phase, action, step, phaseTime, actionTime, stepTime).filter(Objects::isNull).count();, +            if (numNull > 0 && numNull < 6) {, +                throw new IllegalArgumentException("managed index response must have complete step details [" +, +                    PHASE_FIELD.getPreferredName() + "=" + phase + ", " +, +                    PHASE_TIME_FIELD.getPreferredName() + "=" + phaseTime + ", " +, +                    ACTION_FIELD.getPreferredName() + "=" + action + ", " +, +                    ACTION_TIME_FIELD.getPreferredName() + "=" + actionTime + ", " +, +                    STEP_FIELD.getPreferredName() + "=" + step + ", " +, +                    STEP_TIME_FIELD.getPreferredName() + "=" + stepTime + "]");, +            }, +            if (policyName != null || lifecycleDate != null || phase != null || action != null || step != null || failedStep != null, +                || phaseTime != null || actionTime != null || stepTime != null || stepInfo != null || phaseExecutionInfo != null) {, +            if (lifecycleDate != null) {, +            }, +            if (phase != null) {, +            }, +            if (phaseTime != null) {, +            }, +            if (action != null) {, +            }, +            if (actionTime != null) {, +            }, +            if (step != null) {, +            }, +            if (stepTime != null) {, +            }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/indexlifecycle/IndexLifecycleExplainResponse.java, +import java.util.stream.Stream;, +            (Long) a[3],, +            (Long) a[8],, +            (Long) a[9],, +            (Long) a[10],, +    private final Long lifecycleDate;, +    private final Long phaseTime;, +    private final Long actionTime;, +    private final Long stepTime;, +    public static IndexLifecycleExplainResponse newManagedIndexResponse(String index, String policyName, Long lifecycleDate,, +                                                                        Long phaseTime, Long actionTime, Long stepTime,, +        return new IndexLifecycleExplainResponse(index, false, null, null, null, null, null, null, null, null, null, null, null);, +    private IndexLifecycleExplainResponse(String index, boolean managedByILM, String policyName, Long lifecycleDate,, +                                          String phase, String action, String step, String failedStep, Long phaseTime, Long actionTime,, +                                          Long stepTime, BytesReference stepInfo, PhaseExecutionInfo phaseExecutionInfo) {, +            // check to make sure that step details are either all null or all set., +            long numNull = Stream.of(phase, action, step, phaseTime, actionTime, stepTime).filter(Objects::isNull).count();, +            if (numNull > 0 && numNull < 6) {, +                throw new IllegalArgumentException("managed index response must have complete step details [" +, +                    PHASE_FIELD.getPreferredName() + "=" + phase + ", " +, +                    PHASE_TIME_FIELD.getPreferredName() + "=" + phaseTime + ", " +, +                    ACTION_FIELD.getPreferredName() + "=" + action + ", " +, +                    ACTION_TIME_FIELD.getPreferredName() + "=" + actionTime + ", " +, +                    STEP_FIELD.getPreferredName() + "=" + step + ", " +, +                    STEP_TIME_FIELD.getPreferredName() + "=" + stepTime + "]");, +            }, +            if (policyName != null || lifecycleDate != null || phase != null || action != null || step != null || failedStep != null, +                || phaseTime != null || actionTime != null || stepTime != null || stepInfo != null || phaseExecutionInfo != null) {, +            if (lifecycleDate != null) {, +            }, +            if (phase != null) {, +            }, +            if (phaseTime != null) {, +            }, +            if (action != null) {, +            }, +            if (actionTime != null) {, +            }, +            if (step != null) {, +            }, +            if (stepTime != null) {, +            }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/indexlifecycle/ExplainLifecycleResponseTests.java, +            IndexLifecycleExplainResponse indexResponse = IndexLifecycleExplainResponseTests.randomIndexExplainResponse();, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/indexlifecycle/IndexLifecycleExplainResponse.java, +import java.util.stream.Stream;, +            (Long) a[3],, +            (Long) a[8],, +            (Long) a[9],, +            (Long) a[10],, +    private final Long lifecycleDate;, +    private final Long phaseTime;, +    private final Long actionTime;, +    private final Long stepTime;, +    public static IndexLifecycleExplainResponse newManagedIndexResponse(String index, String policyName, Long lifecycleDate,, +                                                                        Long phaseTime, Long actionTime, Long stepTime,]