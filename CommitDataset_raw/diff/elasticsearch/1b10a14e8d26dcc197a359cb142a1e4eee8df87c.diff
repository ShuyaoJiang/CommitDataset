[+++ b/build.gradle, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public Object compile(String scriptName, String scriptSource, Map<String, String> params) {, +        NativeScriptFactory scriptFactory = scripts.get(scriptSource);, +        throw new IllegalArgumentException("Native script [" + scriptSource + "] not found");, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public Object compile(String scriptName, String scriptSource, Map<String, String> params) {, +        NativeScriptFactory scriptFactory = scripts.get(scriptSource);, +        throw new IllegalArgumentException("Native script [" + scriptSource + "] not found");, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    /**, +     * Compiles a script., +     * @param scriptName name of the script. {@code null} if it is anonymous (inline). , +     *                                        For a file script, its the file name (with extension)., +     *                                        For a stored script, its the identifier., +     * @param scriptSource actual source of the script, +     * @param params compile-time parameters (such as flags to the compiler), +     */, +    Object compile(String scriptName, String scriptSource, Map<String, String> params);, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public Object compile(String scriptName, String scriptSource, Map<String, String> params) {, +        NativeScriptFactory scriptFactory = scripts.get(scriptSource);, +        throw new IllegalArgumentException("Native script [" + scriptSource + "] not found");, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    /**, +     * Compiles a script., +     * @param scriptName name of the script. {@code null} if it is anonymous (inline). , +     *                                        For a file script, its the file name (with extension)., +     *                                        For a stored script, its the identifier., +     * @param scriptSource actual source of the script, +     * @param params compile-time parameters (such as flags to the compiler), +     */, +    Object compile(String scriptName, String scriptSource, Map<String, String> params);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +                // but give the script engine the chance to be better, give it separate name + source code, +                // for the inline case, then its anonymous: null., +                String actualName = (type == ScriptType.INLINE) ? null : name;, +                compiledScript = new CompiledScript(type, name, lang, scriptEngineService.compile(actualName, code, params));, +                        Object compiled = scriptEngineService.compile(id, template.getScript(), Collections.emptyMap());, +                            String name = scriptNameExt.v1();, +                            CacheKey cacheKey = new CacheKey(engineService, name, null, Collections.emptyMap());, +                            // pass the actual file name to the compiler (for script engines that care about this), +                            Object executable = engineService.compile(file.getFileName().toString(), script, Collections.emptyMap());, +                            CompiledScript compiledScript = new CompiledScript(ScriptType.FILE, name, engineService.getType(), executable);, +                            staticCache.put(cacheKey, compiledScript);, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public Object compile(String scriptName, String scriptSource, Map<String, String> params) {, +        NativeScriptFactory scriptFactory = scripts.get(scriptSource);, +        throw new IllegalArgumentException("Native script [" + scriptSource + "] not found");, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    /**, +     * Compiles a script., +     * @param scriptName name of the script. {@code null} if it is anonymous (inline). , +     *                                        For a file script, its the file name (with extension)., +     *                                        For a stored script, its the identifier., +     * @param scriptSource actual source of the script, +     * @param params compile-time parameters (such as flags to the compiler), +     */, +    Object compile(String scriptName, String scriptSource, Map<String, String> params);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +                // but give the script engine the chance to be better, give it separate name + source code, +                // for the inline case, then its anonymous: null., +                String actualName = (type == ScriptType.INLINE) ? null : name;, +                compiledScript = new CompiledScript(type, name, lang, scriptEngineService.compile(actualName, code, params));, +                        Object compiled = scriptEngineService.compile(id, template.getScript(), Collections.emptyMap());, +                            String name = scriptNameExt.v1();, +                            CacheKey cacheKey = new CacheKey(engineService, name, null, Collections.emptyMap());, +                            // pass the actual file name to the compiler (for script engines that care about this), +                            Object executable = engineService.compile(file.getFileName().toString(), script, Collections.emptyMap());, +                            CompiledScript compiledScript = new CompiledScript(ScriptType.FILE, name, engineService.getType(), executable);, +                            staticCache.put(cacheKey, compiledScript);, +++ b/core/src/test/java/org/elasticsearch/script/FileScriptTests.java, +import org.elasticsearch.script.MockScriptEngine.MockCompiledScript;, +        CompiledScript compiledScript = scriptService.compile(script, ScriptContext.Standard.SEARCH, Collections.emptyMap(), null);, +        assertNotNull(compiledScript);, +        MockCompiledScript executable = (MockCompiledScript) compiledScript.compiled();, +        assertEquals("script1.mockscript", executable.name);, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public Object compile(String scriptName, String scriptSource, Map<String, String> params) {, +        NativeScriptFactory scriptFactory = scripts.get(scriptSource);, +        throw new IllegalArgumentException("Native script [" + scriptSource + "] not found");, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    /**, +     * Compiles a script., +     * @param scriptName name of the script. {@code null} if it is anonymous (inline). , +     *                                        For a file script, its the file name (with extension)., +     *                                        For a stored script, its the identifier., +     * @param scriptSource actual source of the script, +     * @param params compile-time parameters (such as flags to the compiler), +     */, +    Object compile(String scriptName, String scriptSource, Map<String, String> params);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +                // but give the script engine the chance to be better, give it separate name + source code, +                // for the inline case, then its anonymous: null., +                String actualName = (type == ScriptType.INLINE) ? null : name;]