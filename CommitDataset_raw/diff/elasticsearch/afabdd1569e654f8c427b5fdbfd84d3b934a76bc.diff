[+++ b/qa/vagrant/pom.xml, +                                    <artifactId>discovery-multicast</artifactId>, +                                    <version>${elasticsearch.version}</version>, +                                    <type>zip</type>, +                                </artifactItem>, +                                <artifactItem>, +                                    <groupId>org.elasticsearch.plugin</groupId>, +++ b/qa/vagrant/pom.xml, +                                    <artifactId>discovery-multicast</artifactId>, +                                    <version>${elasticsearch.version}</version>, +                                    <type>zip</type>, +                                </artifactItem>, +                                <artifactItem>, +                                    <groupId>org.elasticsearch.plugin</groupId>, +++ b/qa/vagrant/src/test/resources/packaging/scripts/plugin_test_cases.bash, +# Note that all of the tests from here to the end of the file expect to be run, +# in sequence and don't take well to being run one at a time., +@test "[$GROUP] install jvm-example plugin" {, +    install_jvm_example, +}, +, +    install_and_check_plugin analysis icu icu4j-*.jar, +    install_and_check_plugin analysis kuromoji, +    install_and_check_plugin analysis phonetic commons-codec-*.jar, +    install_and_check_plugin analysis smartcn, +    install_and_check_plugin analysis stempel, +    install_and_check_plugin cloud aws aws-java-sdk-core-*.jar, +    install_and_check_plugin cloud azure azure-core-*.jar, +    install_and_check_plugin cloud gce google-api-client-*.jar, +    install_and_check_plugin - delete-by-query, +}, +, +@test "[$GROUP] install multicast discovery plugin" {, +    install_and_check_plugin discovery multicast, +    install_and_check_plugin lang javascript rhino-*.jar, +    install_and_check_plugin lang python jython-standalone-*.jar, +    install_and_check_plugin mapper murmur3, +    install_and_check_plugin mapper size, +}, +, +@test "[$GROUP] install site example" {, +    # Doesn't use install_and_check_plugin because this is a site plugin, +    install_plugin site-example $(readlink -m site-example-*.zip), +    assert_file_exist "$ESHOME/plugins/site-example/_site/index.html", +}, +, +@test "[$GROUP] start elasticsearch with all plugins installed" {, +    start_elasticsearch_service, +}, +, +@test "[$GROUP] check that the all bundled number of plugins are installed" {, +    curl -s localhost:9200/_cat/plugins?h=c | sed 's/ *$//' |, +        sort > /tmp/installed, +    ls /elasticsearch/plugins/*/pom.xml | cut -d '/' -f 4 |, +        sort > /tmp/expected, +    echo "Checking installed plugins (<) against the plugins directory (>):", +    diff /tmp/installed /tmp/expected, +}, +, +@test "[$GROUP] stop elasticsearch" {, +    stop_elasticsearch_service, +}, +, +@test "[$GROUP] remove jvm-example plugin" {, +    remove_jvm_example, +}, +, +@test "[$GROUP] remove icu plugin" {, +    remove_plugin analysis-icu, +}, +, +@test "[$GROUP] remove kuromoji plugin" {, +    remove_plugin analysis-kuromoji, +}, +, +@test "[$GROUP] remove phonetic plugin" {, +    remove_plugin analysis-phonetic, +}, +, +@test "[$GROUP] remove smartcn plugin" {, +    remove_plugin analysis-smartcn, +}, +, +@test "[$GROUP] remove stempel plugin" {, +    remove_plugin analysis-stempel, +}, +, +@test "[$GROUP] remove aws plugin" {, +    remove_plugin cloud-aws, +}, +, +@test "[$GROUP] remove azure plugin" {, +    remove_plugin cloud-azure, +}, +, +@test "[$GROUP] remove gce plugin" {, +    remove_plugin cloud-gce, +}, +, +@test "[$GROUP] remove delete by query" {]