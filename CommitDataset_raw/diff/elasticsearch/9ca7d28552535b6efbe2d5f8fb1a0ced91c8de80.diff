[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/core/src/main/java/org/elasticsearch/plugins/ScriptPlugin.java, +import org.elasticsearch.script.ScriptEngine;, +     * Returns a {@link ScriptEngine} instance or <code>null</code> if this plugin doesn't add a new script engine, +    default ScriptEngine getScriptEngine(Settings settings) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/core/src/main/java/org/elasticsearch/plugins/ScriptPlugin.java, +import org.elasticsearch.script.ScriptEngine;, +     * Returns a {@link ScriptEngine} instance or <code>null</code> if this plugin doesn't add a new script engine, +    default ScriptEngine getScriptEngine(Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngine.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.script;, +, +import org.apache.lucene.index.LeafReaderContext;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.search.lookup.SearchLookup;, +]