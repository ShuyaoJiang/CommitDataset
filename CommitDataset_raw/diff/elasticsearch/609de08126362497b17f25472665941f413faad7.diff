[+++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/FastVectorHighlighter.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +        MappedFieldType fieldType = highlighterContext.fieldType;, +        if (canHighlight(fieldType) == false) {, +            FieldHighlightEntry entry = cache.fields.get(fieldType);, +                    if (!forceSource && fieldType.stored()) {, +                        fragmentsBuilder = new SimpleFragmentsBuilder(fieldType, field.fieldOptions().preTags(),, +                        fragmentsBuilder = new SourceSimpleFragmentsBuilder(fieldType, context,, +                        if (!forceSource && fieldType.stored()) {, +                            fragmentsBuilder = new SourceScoreOrderFragmentsBuilder(fieldType, context,, +                        if (!forceSource && fieldType.stored()) {, +                            fragmentsBuilder = new SimpleFragmentsBuilder(fieldType, field.fieldOptions().preTags(),, +                                new SourceSimpleFragmentsBuilder(fieldType, context, field.fieldOptions().preTags(),, +                entry = new FieldHighlightEntry();, +                cache.fields.put(fieldType, entry);, +                    fieldType.name(), field.fieldOptions().matchedFields(), fragmentCharSize,, +                    fieldType.name(), fragmentCharSize, numberOfFragments, entry.fragListBuilder,, +                    fieldType.name(), fieldFragList, 1, field.fieldOptions().preTags(),, +    public boolean canHighlight(MappedFieldType fieldType) {, +        return fieldType.storeTermVectors(), +            && fieldType.storeTermVectorOffsets(), +            && fieldType.storeTermVectorPositions();, +    private class FieldHighlightEntry {, +        public Map<MappedFieldType, FieldHighlightEntry> fields = new HashMap<>();, +++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/FastVectorHighlighter.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +        MappedFieldType fieldType = highlighterContext.fieldType;, +        if (canHighlight(fieldType) == false) {, +            FieldHighlightEntry entry = cache.fields.get(fieldType);, +                    if (!forceSource && fieldType.stored()) {, +                        fragmentsBuilder = new SimpleFragmentsBuilder(fieldType, field.fieldOptions().preTags(),, +                        fragmentsBuilder = new SourceSimpleFragmentsBuilder(fieldType, context,, +                        if (!forceSource && fieldType.stored()) {, +                            fragmentsBuilder = new SourceScoreOrderFragmentsBuilder(fieldType, context,, +                        if (!forceSource && fieldType.stored()) {, +                            fragmentsBuilder = new SimpleFragmentsBuilder(fieldType, field.fieldOptions().preTags(),, +                                new SourceSimpleFragmentsBuilder(fieldType, context, field.fieldOptions().preTags(),, +                entry = new FieldHighlightEntry();, +                cache.fields.put(fieldType, entry);, +                    fieldType.name(), field.fieldOptions().matchedFields(), fragmentCharSize,, +                    fieldType.name(), fragmentCharSize, numberOfFragments, entry.fragListBuilder,, +                    fieldType.name(), fieldFragList, 1, field.fieldOptions().preTags(),, +    public boolean canHighlight(MappedFieldType fieldType) {, +        return fieldType.storeTermVectors(), +            && fieldType.storeTermVectorOffsets(), +            && fieldType.storeTermVectorPositions();, +    private class FieldHighlightEntry {, +        public Map<MappedFieldType, FieldHighlightEntry> fields = new HashMap<>();, +++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/FragmentBuilderHelper.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +    public static WeightedFragInfo fixWeightedFragInfo(MappedFieldType fieldType, Field[] values, WeightedFragInfo fragInfo) {, +        assert fieldType.name().equals(values[0].name()) : "Expected MappedFieldType for field " + values[0].name();, +        if (!fragInfo.getSubInfos().isEmpty() && containsBrokenAnalysis(fieldType.indexAnalyzer())) {, +++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/FastVectorHighlighter.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +        MappedFieldType fieldType = highlighterContext.fieldType;, +        if (canHighlight(fieldType) == false) {, +            FieldHighlightEntry entry = cache.fields.get(fieldType);, +                    if (!forceSource && fieldType.stored()) {, +                        fragmentsBuilder = new SimpleFragmentsBuilder(fieldType, field.fieldOptions().preTags(),, +                        fragmentsBuilder = new SourceSimpleFragmentsBuilder(fieldType, context,, +                        if (!forceSource && fieldType.stored()) {, +                            fragmentsBuilder = new SourceScoreOrderFragmentsBuilder(fieldType, context,, +                        if (!forceSource && fieldType.stored()) {, +                            fragmentsBuilder = new SimpleFragmentsBuilder(fieldType, field.fieldOptions().preTags(),, +                                new SourceSimpleFragmentsBuilder(fieldType, context, field.fieldOptions().preTags(),, +                entry = new FieldHighlightEntry();, +                cache.fields.put(fieldType, entry);, +                    fieldType.name(), field.fieldOptions().matchedFields(), fragmentCharSize,, +                    fieldType.name(), fragmentCharSize, numberOfFragments, entry.fragListBuilder,, +                    fieldType.name(), fieldFragList, 1, field.fieldOptions().preTags(),, +    public boolean canHighlight(MappedFieldType fieldType) {, +        return fieldType.storeTermVectors(), +            && fieldType.storeTermVectorOffsets(), +            && fieldType.storeTermVectorPositions();, +    private class FieldHighlightEntry {, +        public Map<MappedFieldType, FieldHighlightEntry> fields = new HashMap<>();, +++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/FragmentBuilderHelper.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +    public static WeightedFragInfo fixWeightedFragInfo(MappedFieldType fieldType, Field[] values, WeightedFragInfo fragInfo) {, +        assert fieldType.name().equals(values[0].name()) : "Expected MappedFieldType for field " + values[0].name();, +        if (!fragInfo.getSubInfos().isEmpty() && containsBrokenAnalysis(fieldType.indexAnalyzer())) {, +++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightPhase.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +                MappedFieldType fieldType = context.mapperService().fullName(fieldName);, +                if (fieldType == null) {, +                    if (fieldType.typeName().equals(TextFieldMapper.CONTENT_TYPE) == false &&, +                        fieldType.typeName().equals(KeywordFieldMapper.CONTENT_TYPE) == false) {, +                HighlighterContext highlighterContext = new HighlighterContext(fieldName,, +                    field, fieldType, context, hitContext, highlightQuery);, +                if ((highlighter.canHighlight(fieldType) == false) && fieldNameContainsWildcards) {, +++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/FastVectorHighlighter.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +        MappedFieldType fieldType = highlighterContext.fieldType;, +        if (canHighlight(fieldType) == false) {, +            FieldHighlightEntry entry = cache.fields.get(fieldType);, +                    if (!forceSource && fieldType.stored()) {, +                        fragmentsBuilder = new SimpleFragmentsBuilder(fieldType, field.fieldOptions().preTags(),, +                        fragmentsBuilder = new SourceSimpleFragmentsBuilder(fieldType, context,, +                        if (!forceSource && fieldType.stored()) {]