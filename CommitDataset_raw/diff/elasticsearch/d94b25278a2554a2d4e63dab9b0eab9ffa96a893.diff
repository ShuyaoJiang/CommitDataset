[+++ b/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java, +                    builder.field("force_source", field.forceSource);, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java, +                    builder.field("force_source", field.forceSource);, +++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +import org.elasticsearch.client.Requests;, +    public void testForceSourceWithSourceDisabled() throws Exception {, +, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .addMapping("type1", jsonBuilder().startObject().startObject("type1"), +                        //just to make sure that we hit the stored fields rather than the _source, +                        .startObject("_source").field("enabled", false).endObject(), +                        .startObject("properties"), +                        .startObject("field1").field("type", "string").field("store", "yes").field("index_options", "offsets"), +                        .field("term_vector", "with_positions_offsets").endObject(), +                        .endObject().endObject().endObject()));, +, +        //works using stored field, +                .addHighlightedField(new Field("field1").preTags("<xxx>").postTags("</xxx>")), +        assertThat(searchResponse.getFailedShards(), equalTo(1));, +        assertThat(searchResponse.getShardFailures().length, equalTo(1));, +        assertThat(searchResponse.getShardFailures()[0].reason(), containsString("source is forced for field [field1] but type [type1] has disabled _source"));, +, +        searchResponse = client().prepareSearch("test"), +                .setQuery(termQuery("field1", "quick")), +                .addHighlightedField(new Field("field1").preTags("<xxx>").postTags("</xxx>").highlighterType("fvh").forceSource(true)), +                .get();, +        assertThat(searchResponse.getFailedShards(), equalTo(1));, +        assertThat(searchResponse.getShardFailures().length, equalTo(1));, +        assertThat(searchResponse.getShardFailures()[0].reason(), containsString("source is forced for field [field1] but type [type1] has disabled _source"));, +        assertThat(searchResponse.getFailedShards(), equalTo(1));, +        assertThat(searchResponse.getShardFailures().length, equalTo(1));, +        assertThat(searchResponse.getShardFailures()[0].reason(), containsString("source is forced for field [field1] but type [type1] has disabled _source"));, +        SearchSourceBuilder searchSource = SearchSourceBuilder.searchSource().query(termQuery("field1", "quick")), +                .highlight(highlight().forceSource(true).field("field1"));, +        searchResponse = client().search(Requests.searchRequest("test").source(searchSource)).get();, +        assertThat(searchResponse.getFailedShards(), equalTo(1));, +        assertThat(searchResponse.getShardFailures().length, equalTo(1));, +        assertThat(searchResponse.getShardFailures()[0].reason(), containsString("source is forced for field [field1] but type [type1] has disabled _source"));]