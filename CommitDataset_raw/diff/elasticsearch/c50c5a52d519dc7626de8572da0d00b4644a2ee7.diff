[+++ b/core/src/main/java/org/elasticsearch/index/IndexWarmer.java, +++ b/core/src/main/java/org/elasticsearch/index/IndexWarmer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            if (context.indexCreatedVersion().before(Version.V_5_0_0)) {, +                fieldType.setOmitNorms(fieldType.omitNorms() && fieldType.boost() == 1.0f);, +            }, +            builder.field("norms", fieldType().omitNorms() == false);, +++ b/core/src/main/java/org/elasticsearch/index/IndexWarmer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            if (context.indexCreatedVersion().before(Version.V_5_0_0)) {, +                fieldType.setOmitNorms(fieldType.omitNorms() && fieldType.boost() == 1.0f);, +            }, +            builder.field("norms", fieldType().omitNorms() == false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            similarity == null ? null : similarity.name(), fieldDataType, nullValue, nullValueAsString);, +            conflicts.add("mapper [" + name() + "] has different [norms] values, cannot change from disable to enabled");, +++ b/core/src/main/java/org/elasticsearch/index/IndexWarmer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            if (context.indexCreatedVersion().before(Version.V_5_0_0)) {, +                fieldType.setOmitNorms(fieldType.omitNorms() && fieldType.boost() == 1.0f);, +            }, +            builder.field("norms", fieldType().omitNorms() == false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            similarity == null ? null : similarity.name(), fieldDataType, nullValue, nullValueAsString);, +            conflicts.add("mapper [" + name() + "] has different [norms] values, cannot change from disable to enabled");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +                } else if (propName.equals("norms")) {, +                    builder.omitNorms(XContentMapValues.nodeBooleanValue(propNode) == false);, +                    iterator.remove();, +++ b/core/src/main/java/org/elasticsearch/index/IndexWarmer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            if (context.indexCreatedVersion().before(Version.V_5_0_0)) {, +                fieldType.setOmitNorms(fieldType.omitNorms() && fieldType.boost() == 1.0f);, +            }, +            builder.field("norms", fieldType().omitNorms() == false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            similarity == null ? null : similarity.name(), fieldDataType, nullValue, nullValueAsString);, +            conflicts.add("mapper [" + name() + "] has different [norms] values, cannot change from disable to enabled");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +                } else if (propName.equals("norms")) {, +                    builder.omitNorms(XContentMapValues.nodeBooleanValue(propNode) == false);, +                    iterator.remove();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/index/IndexWarmer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            if (context.indexCreatedVersion().before(Version.V_5_0_0)) {, +                fieldType.setOmitNorms(fieldType.omitNorms() && fieldType.boost() == 1.0f);, +            }, +            builder.field("norms", fieldType().omitNorms() == false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            similarity == null ? null : similarity.name(), fieldDataType, nullValue, nullValueAsString);, +            conflicts.add("mapper [" + name() + "] has different [norms] values, cannot change from disable to enabled");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +                } else if (propName.equals("norms")) {, +                    builder.omitNorms(XContentMapValues.nodeBooleanValue(propNode) == false);, +                    iterator.remove();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +                    {, +                    }, +                    {, +                        // upgrade norms settings, +                        Object norms = node.remove("norms");, +                        if (norms instanceof Map) {, +                            norms = ((Map<?,?>) norms).get("enabled");, +                        }, +                        if (norms != null) {, +                            node.put("norms", TypeParsers.nodeBooleanValue("norms", norms, parserContext));, +                        }, +                        Object omitNorms = node.remove("omit_norms");, +                        if (omitNorms != null) {, +                            node.put("norms", TypeParsers.nodeBooleanValue("omit_norms", omitNorms, parserContext) == false);, +                        }, +                    }, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexWarmer.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            if (context.indexCreatedVersion().before(Version.V_5_0_0)) {, +                fieldType.setOmitNorms(fieldType.omitNorms() && fieldType.boost() == 1.0f);, +            }, +            builder.field("norms", fieldType().omitNorms() == false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            similarity == null ? null : similarity.name(), fieldDataType, nullValue, nullValueAsString);, +            conflicts.add("mapper [" + name() + "] has different [norms] values, cannot change from disable to enabled");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +                } else if (propName.equals("norms")) {, +                    builder.omitNorms(XContentMapValues.nodeBooleanValue(propNode) == false);, +                    iterator.remove();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +                    {, +                    }, +                    {, +                        // upgrade norms settings, +                        Object norms = node.remove("norms");, +                        if (norms instanceof Map) {, +                            norms = ((Map<?,?>) norms).get("enabled");]