[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    public static class CommonSettings {, +, +        /**, +         * Should single value cross documents case be optimized to remove ords. Note, this optimization, +         * might not be supported by all Field Data implementations, but the ones that do, should consult, +         * this method to check if it should be done or not., +         */, +        public static boolean removeOrdsOnSingleValue(FieldDataType fieldDataType) {, +            return !"always".equals(fieldDataType.getSettings().get("ordinals"));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    public static class CommonSettings {, +, +        /**, +         * Should single value cross documents case be optimized to remove ords. Note, this optimization, +         * might not be supported by all Field Data implementations, but the ones that do, should consult, +         * this method to check if it should be done or not., +         */, +        public static boolean removeOrdsOnSingleValue(FieldDataType fieldDataType) {, +            return !"always".equals(fieldDataType.getSettings().get("ordinals"));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/ByteArrayIndexFieldData.java, +            return build(reader, fieldDataType, builder, build, new BuilderBytes() {, +    static ByteArrayAtomicFieldData build(AtomicReader reader, FieldDataType fieldDataType, OrdinalsBuilder builder, Ordinals build, BuilderBytes values) {, +        if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    public static class CommonSettings {, +, +        /**, +         * Should single value cross documents case be optimized to remove ords. Note, this optimization, +         * might not be supported by all Field Data implementations, but the ones that do, should consult, +         * this method to check if it should be done or not., +         */, +        public static boolean removeOrdsOnSingleValue(FieldDataType fieldDataType) {, +            return !"always".equals(fieldDataType.getSettings().get("ordinals"));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/ByteArrayIndexFieldData.java, +            return build(reader, fieldDataType, builder, build, new BuilderBytes() {, +    static ByteArrayAtomicFieldData build(AtomicReader reader, FieldDataType fieldDataType, OrdinalsBuilder builder, Ordinals build, BuilderBytes values) {, +        if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DoubleArrayIndexFieldData.java, +            if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    public static class CommonSettings {, +, +        /**, +         * Should single value cross documents case be optimized to remove ords. Note, this optimization, +         * might not be supported by all Field Data implementations, but the ones that do, should consult, +         * this method to check if it should be done or not., +         */, +        public static boolean removeOrdsOnSingleValue(FieldDataType fieldDataType) {, +            return !"always".equals(fieldDataType.getSettings().get("ordinals"));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/ByteArrayIndexFieldData.java, +            return build(reader, fieldDataType, builder, build, new BuilderBytes() {, +    static ByteArrayAtomicFieldData build(AtomicReader reader, FieldDataType fieldDataType, OrdinalsBuilder builder, Ordinals build, BuilderBytes values) {, +        if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DoubleArrayIndexFieldData.java, +            if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/FloatArrayIndexFieldData.java, +            if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    public static class CommonSettings {, +, +        /**, +         * Should single value cross documents case be optimized to remove ords. Note, this optimization, +         * might not be supported by all Field Data implementations, but the ones that do, should consult, +         * this method to check if it should be done or not., +         */, +        public static boolean removeOrdsOnSingleValue(FieldDataType fieldDataType) {, +            return !"always".equals(fieldDataType.getSettings().get("ordinals"));, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/ByteArrayIndexFieldData.java, +            return build(reader, fieldDataType, builder, build, new BuilderBytes() {, +    static ByteArrayAtomicFieldData build(AtomicReader reader, FieldDataType fieldDataType, OrdinalsBuilder builder, Ordinals build, BuilderBytes values) {, +        if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DoubleArrayIndexFieldData.java, +            if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/FloatArrayIndexFieldData.java, +            if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/GeoPointDoubleArrayIndexFieldData.java, +            if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    public static class CommonSettings {, +, +        /**, +         * Should single value cross documents case be optimized to remove ords. Note, this optimization, +         * might not be supported by all Field Data implementations, but the ones that do, should consult, +         * this method to check if it should be done or not.]