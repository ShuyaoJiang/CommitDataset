[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringDoc.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private static final DateFormatter dateTimeFormatter = DateFormatter.forPattern("strict_date_time");, +        ZonedDateTime zonedDateTime = Instant.ofEpochMilli(timestamp).atZone(ZoneOffset.UTC);, +        return dateTimeFormatter.format(zonedDateTime);, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringDoc.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private static final DateFormatter dateTimeFormatter = DateFormatter.forPattern("strict_date_time");, +        ZonedDateTime zonedDateTime = Instant.ofEpochMilli(timestamp).atZone(ZoneOffset.UTC);, +        return dateTimeFormatter.format(zonedDateTime);, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringTemplateUtils.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.Instant;, +     * @param formatter the {@link DateFormatter} to use to compute the timestamped index name, +    public static String indexName(final DateFormatter formatter, final MonitoredSystem system, final long timestamp) {, +        return ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-" + formatter.format(Instant.ofEpochMilli(timestamp));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringDoc.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private static final DateFormatter dateTimeFormatter = DateFormatter.forPattern("strict_date_time");, +        ZonedDateTime zonedDateTime = Instant.ofEpochMilli(timestamp).atZone(ZoneOffset.UTC);, +        return dateTimeFormatter.format(zonedDateTime);, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringTemplateUtils.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.Instant;, +     * @param formatter the {@link DateFormatter} to use to compute the timestamped index name, +    public static String indexName(final DateFormatter formatter, final MonitoredSystem system, final long timestamp) {, +        return ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-" + formatter.format(Instant.ofEpochMilli(timestamp));, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/cleaner/CleanerService.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZonedDateTime;, +        threadPool.schedule(runnable, executionScheduler.nextExecutionDelay(ZonedDateTime.now(Clock.systemDefaultZone())),, +            executorName());, +            ZonedDateTime start = ZonedDateTime.now(Clock.systemUTC());, +        TimeValue nextExecutionDelay(ZonedDateTime now);, +        public TimeValue nextExecutionDelay(ZonedDateTime now) {, +            ZonedDateTime next = now.toLocalDate(), +                .atStartOfDay(now.getZone()), +                .plusHours(1);, +            return TimeValue.timeValueMillis(Duration.between(now, next).toMillis());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringDoc.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private static final DateFormatter dateTimeFormatter = DateFormatter.forPattern("strict_date_time");, +        ZonedDateTime zonedDateTime = Instant.ofEpochMilli(timestamp).atZone(ZoneOffset.UTC);, +        return dateTimeFormatter.format(zonedDateTime);, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringTemplateUtils.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.Instant;, +     * @param formatter the {@link DateFormatter} to use to compute the timestamped index name, +    public static String indexName(final DateFormatter formatter, final MonitoredSystem system, final long timestamp) {, +        return ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-" + formatter.format(Instant.ofEpochMilli(timestamp));, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/cleaner/CleanerService.java, +import java.time.Clock;, +import java.time.Duration;, +import java.time.ZonedDateTime;, +        threadPool.schedule(runnable, executionScheduler.nextExecutionDelay(ZonedDateTime.now(Clock.systemDefaultZone())),, +            executorName());, +            ZonedDateTime start = ZonedDateTime.now(Clock.systemUTC());, +        TimeValue nextExecutionDelay(ZonedDateTime now);, +        public TimeValue nextExecutionDelay(ZonedDateTime now) {, +            ZonedDateTime next = now.toLocalDate(), +                .atStartOfDay(now.getZone()), +                .plusHours(1);, +            return TimeValue.timeValueMillis(Duration.between(now, next).toMillis());, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/Exporter.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final String INDEX_FORMAT = "yyyy.MM.dd";, +    protected static DateFormatter dateTimeFormatter(final Config config) {, +            return DateFormatter.forPattern(format).withZone(ZoneOffset.UTC);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringDoc.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private static final DateFormatter dateTimeFormatter = DateFormatter.forPattern("strict_date_time");, +        ZonedDateTime zonedDateTime = Instant.ofEpochMilli(timestamp).atZone(ZoneOffset.UTC);, +        return dateTimeFormatter.format(zonedDateTime);, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/exporter/MonitoringTemplateUtils.java, +import org.elasticsearch.common.Strings;]