[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        private NumericDocValues versions;, +                final long version = versions == null ? Versions.NOT_FOUND : versions.get(doc);, +            this.versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        private NumericDocValues versions;, +                final long version = versions == null ? Versions.NOT_FOUND : versions.get(doc);, +            this.versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/version/VersionFetchSubPhase.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        long version = Versions.NOT_FOUND;, +            NumericDocValues versions = hitContext.reader().getNumericDocValues(VersionFieldMapper.NAME);, +            if (versions != null) {, +                version = versions.get(hitContext.docId());, +            }, +            throw new ElasticsearchException("Could not retrieve version", e);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        private NumericDocValues versions;, +                final long version = versions == null ? Versions.NOT_FOUND : versions.get(doc);, +            this.versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/version/VersionFetchSubPhase.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        long version = Versions.NOT_FOUND;, +            NumericDocValues versions = hitContext.reader().getNumericDocValues(VersionFieldMapper.NAME);, +            if (versions != null) {, +                version = versions.get(hitContext.docId());, +            }, +            throw new ElasticsearchException("Could not retrieve version", e);, +++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDisconnect());, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        private NumericDocValues versions;, +                final long version = versions == null ? Versions.NOT_FOUND : versions.get(doc);, +            this.versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/version/VersionFetchSubPhase.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        long version = Versions.NOT_FOUND;, +            NumericDocValues versions = hitContext.reader().getNumericDocValues(VersionFieldMapper.NAME);, +            if (versions != null) {, +                version = versions.get(hitContext.docId());, +            }, +            throw new ElasticsearchException("Could not retrieve version", e);, +++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDisconnect());, +++ b/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDelay;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDelay(TimeValue.timeValueMinutes(1)));, +        final AtomicReference<Exception> failure = new AtomicReference<>();, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        private NumericDocValues versions;, +                final long version = versions == null ? Versions.NOT_FOUND : versions.get(doc);, +            this.versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/version/VersionFetchSubPhase.java, +import org.apache.lucene.index.NumericDocValues;, +import org.elasticsearch.index.mapper.VersionFieldMapper;, +        long version = Versions.NOT_FOUND;, +            NumericDocValues versions = hitContext.reader().getNumericDocValues(VersionFieldMapper.NAME);, +            if (versions != null) {, +                version = versions.get(hitContext.docId());, +            }, +            throw new ElasticsearchException("Could not retrieve version", e);, +++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(]