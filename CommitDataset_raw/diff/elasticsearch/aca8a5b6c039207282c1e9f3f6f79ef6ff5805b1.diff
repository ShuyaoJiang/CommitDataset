[+++ b/qa/sql/build.gradle, +  runtime 'org.antlr:antlr4-runtime:4.5.1-1', +, +++ b/qa/sql/build.gradle, +  runtime 'org.antlr:antlr4-runtime:4.5.1-1', +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/embed/ProtoHttpServer.java, +        return server != null ? "localhost:" + address().getPort() : "<not started>";, +++ b/qa/sql/build.gradle, +  runtime 'org.antlr:antlr4-runtime:4.5.1-1', +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/embed/ProtoHttpServer.java, +        return server != null ? "localhost:" + address().getPort() : "<not started>";, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +public class CsvSpecTestCase extends SpecBaseIntegrationTestCase {, +++ b/qa/sql/build.gradle, +  runtime 'org.antlr:antlr4-runtime:4.5.1-1', +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/embed/ProtoHttpServer.java, +        return server != null ? "localhost:" + address().getPort() : "<not started>";, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +public class CsvSpecTestCase extends SpecBaseIntegrationTestCase {, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql("SELECT foo FROM test"), containsString("1:8: Unknown column [foo]"));, +++ b/qa/sql/build.gradle, +  runtime 'org.antlr:antlr4-runtime:4.5.1-1', +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/embed/ProtoHttpServer.java, +        return server != null ? "localhost:" + address().getPort() : "<not started>";, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +public class CsvSpecTestCase extends SpecBaseIntegrationTestCase {, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql("SELECT foo FROM test"), containsString("1:8: Unknown column [foo]"));, +++ /dev/null, +++ b/qa/sql/build.gradle, +  runtime 'org.antlr:antlr4-runtime:4.5.1-1', +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/embed/ProtoHttpServer.java, +        return server != null ? "localhost:" + address().getPort() : "<not started>";, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +public class CsvSpecTestCase extends SpecBaseIntegrationTestCase {, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql("SELECT foo FROM test"), containsString("1:8: Unknown column [foo]"));, +++ /dev/null, +++ /dev/null, +++ b/qa/sql/build.gradle, +  runtime 'org.antlr:antlr4-runtime:4.5.1-1', +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/embed/ProtoHttpServer.java, +        return server != null ? "localhost:" + address().getPort() : "<not started>";, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +public class CsvSpecTestCase extends SpecBaseIntegrationTestCase {, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql("SELECT foo FROM test"), containsString("1:8: Unknown column [foo]"));, +++ /dev/null, +++ /dev/null, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +import org.elasticsearch.xpack.sql.analysis.catalog.Catalog;, +import org.elasticsearch.xpack.sql.analysis.catalog.Catalog.GetIndexResult;, +import org.elasticsearch.xpack.sql.expression.function.FunctionDefinition;, +import java.util.LinkedHashSet;, +import java.util.Set;, +    private final Catalog catalog;, +    public Analyzer(FunctionRegistry functionRegistry, Catalog catalog) {, +        this.catalog = catalog;, +            EsIndex found = null;, +            , +            GetIndexResult index = catalog.getIndex(table.index());, +            if (index.isValid()) {, +                found = index.get();, +                return plan;, +                //throw new UnknownIndexException(table.index(), plan);, +                    String normalizedName = StringUtils.camelCaseToUnderscore(name);, +                    , +                    List<Function> list = getList(seen, normalizedName);, +                        , +                        // try to find alternatives, +                        Set<String> names = new LinkedHashSet<>();, +                        for (FunctionDefinition def : functionRegistry.listFunctions()) {, +                            names.add(def.name());, +                            names.addAll(def.aliases());, +                        }, +                        , +                        List<String> matches = StringUtils.findSimilar(normalizedName, names);, +                        if (!matches.isEmpty()) {, +                            return new UnresolvedFunction(uf.location(), uf.name(), uf.distinct(), uf.children(), UnresolvedFunction.errorMessage(normalizedName, matches));, +                        }, +                        else {, +                            return uf;, +                        }, +                    Function f = functionRegistry.resolveFunction(uf, SqlSession.CURRENT_SETTINGS.get());, +++ b/qa/sql/build.gradle, +  runtime 'org.antlr:antlr4-runtime:4.5.1-1', +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/embed/ProtoHttpServer.java, +        return server != null ? "localhost:" + address().getPort() : "<not started>";, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +public class CsvSpecTestCase extends SpecBaseIntegrationTestCase {, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/rest/RestSqlTestCase.java, +        expectBadRequest(() -> runSql("SELECT foo FROM test"), containsString("1:8: Unknown column [foo]"));]