[+++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +    IndexSearcher wrap(IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +    IndexSearcher wrap(IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +    IndexSearcher wrap(IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser()), +                .put(Murmur3FieldMapper.CONTENT_TYPE, new Murmur3FieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +    IndexSearcher wrap(IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser()), +                .put(Murmur3FieldMapper.CONTENT_TYPE, new Murmur3FieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +    public static Murmur3FieldMapper.Builder murmur3Field(String name) {, +        return new Murmur3FieldMapper.Builder(name);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +    IndexSearcher wrap(IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser()), +                .put(Murmur3FieldMapper.CONTENT_TYPE, new Murmur3FieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +    public static Murmur3FieldMapper.Builder murmur3Field(String name) {, +        return new Murmur3FieldMapper.Builder(name);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/Murmur3FieldMapper.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.core;, +, +import org.apache.lucene.document.Field;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Explicit;, +import org.elasticsearch.common.hash.MurmurHash3;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.analysis.NumericLongAnalyzer;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.Mapper;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.index.mapper.ParseContext;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.Map;, +, +import static org.elasticsearch.index.mapper.MapperBuilders.murmur3Field;, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseNumberField;, +, +public class Murmur3FieldMapper extends LongFieldMapper {, +, +    public static final String CONTENT_TYPE = "murmur3";, +, +    public static class Defaults extends LongFieldMapper.Defaults {, +        public static final MappedFieldType FIELD_TYPE = new Murmur3FieldType();, +    }, +, +    public static class Builder extends NumberFieldMapper.Builder<Builder, Murmur3FieldMapper> {, +, +        public Builder(String name) {, +            super(name, Defaults.FIELD_TYPE, Integer.MAX_VALUE);, +            builder = this;, +            builder.precisionStep(Integer.MAX_VALUE);, +        }, +, +        @Override, +        public Murmur3FieldMapper build(BuilderContext context) {, +            setupFieldType(context);, +            Murmur3FieldMapper fieldMapper = new Murmur3FieldMapper(name, fieldType, defaultFieldType,, +                    ignoreMalformed(context), coerce(context),]