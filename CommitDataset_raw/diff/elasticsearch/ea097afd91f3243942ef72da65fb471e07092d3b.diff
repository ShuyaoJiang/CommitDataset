[+++ b/src/test/java/org/elasticsearch/test/unit/index/query/SimpleIndexQueryParserTests.java, +import org.apache.lucene.queries.FilterClause;, +import java.util.Iterator;, +    public void testBoolFilteredQueryBuilder() throws IOException {, +        IndexQueryParserService queryParser = queryParser();, +        Query parsedQuery = queryParser.parse(filteredQuery(termQuery("name.first", "shay"), boolFilter().must(termFilter("name.first", "shay1"), termFilter("name.first", "shay4")).mustNot(termFilter("name.first", "shay2")).should(termFilter("name.first", "shay3")))).query();, +, +        assertThat(parsedQuery, instanceOf(XFilteredQuery.class));, +        XFilteredQuery filteredQuery = (XFilteredQuery) parsedQuery;, +        XBooleanFilter booleanFilter = (XBooleanFilter) filteredQuery.getFilter();, +, +        Iterator<FilterClause> iterator = booleanFilter.iterator();, +        assertThat(iterator.hasNext(), equalTo(true));, +        FilterClause clause = iterator.next();, +        assertThat(clause.getOccur(), equalTo(BooleanClause.Occur.MUST));, +        assertThat(((TermFilter) clause.getFilter()).getTerm(), equalTo(new Term("name.first", "shay1")));, +, +        assertThat(iterator.hasNext(), equalTo(true));, +        clause = iterator.next();, +        assertThat(clause.getOccur(), equalTo(BooleanClause.Occur.MUST));, +        assertThat(((TermFilter) clause.getFilter()).getTerm(), equalTo(new Term("name.first", "shay4")));, +, +        assertThat(iterator.hasNext(), equalTo(true));, +        clause = iterator.next();, +        assertThat(clause.getOccur(), equalTo(BooleanClause.Occur.MUST_NOT));, +        assertThat(((TermFilter) clause.getFilter()).getTerm(), equalTo(new Term("name.first", "shay2")));, +, +        assertThat(iterator.hasNext(), equalTo(true));, +        clause = iterator.next();, +        assertThat(clause.getOccur(), equalTo(BooleanClause.Occur.SHOULD));, +        assertThat(((TermFilter) clause.getFilter()).getTerm(), equalTo(new Term("name.first", "shay3")));, +, +        assertThat(iterator.hasNext(), equalTo(false));, +    }, +, +, +    @Test, +        Iterator<FilterClause> iterator = booleanFilter.iterator();, +        assertThat(iterator.hasNext(), equalTo(true));, +        FilterClause clause = iterator.next();, +        assertThat(clause.getOccur(), equalTo(BooleanClause.Occur.MUST));, +        assertThat(((TermFilter) clause.getFilter()).getTerm(), equalTo(new Term("name.first", "shay1")));, +, +        assertThat(iterator.hasNext(), equalTo(true));, +        clause = iterator.next();, +        assertThat(clause.getOccur(), equalTo(BooleanClause.Occur.MUST));, +        assertThat(((TermFilter) clause.getFilter()).getTerm(), equalTo(new Term("name.first", "shay4")));, +, +        assertThat(iterator.hasNext(), equalTo(true));, +        clause = iterator.next();, +        assertThat(clause.getOccur(), equalTo(BooleanClause.Occur.MUST_NOT));, +        assertThat(((TermFilter) clause.getFilter()).getTerm(), equalTo(new Term("name.first", "shay2")));, +, +        assertThat(iterator.hasNext(), equalTo(true));, +        clause = iterator.next();, +        assertThat(clause.getOccur(), equalTo(BooleanClause.Occur.SHOULD));, +        assertThat(((TermFilter) clause.getFilter()).getTerm(), equalTo(new Term("name.first", "shay3")));, +, +        assertThat(iterator.hasNext(), equalTo(false));]