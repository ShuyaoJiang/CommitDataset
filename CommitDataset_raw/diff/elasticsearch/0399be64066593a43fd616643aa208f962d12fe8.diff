[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java, +        long start = lastEndTimeMs == null ? lookbackStartTimeMs : Math.max(lookbackStartTimeMs, lastEndTimeMs + 1);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java, +        long start = lastEndTimeMs == null ? lookbackStartTimeMs : Math.max(lookbackStartTimeMs, lastEndTimeMs + 1);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobTests.java, +import org.elasticsearch.mock.orig.Mockito;, +    ActionFuture<PostDataAction.Response> postDataFuture;, +        postDataFuture = mock(ActionFuture.class);, +        when(client.execute(same(PostDataAction.INSTANCE), eq(expectedRequest))).thenReturn(postDataFuture);, +        when(postDataFuture.actionGet()).thenReturn(new PostDataAction.Response(dataCounts));, +    public void testLookBackRunWithStartTimeEarlierThanResumePoint() throws Exception {, +    public void testContinueFromNow() throws Exception {, +        // We need to return empty counts so that the lookback doesn't update the last end time, +        when(postDataFuture.actionGet()).thenReturn(new PostDataAction.Response(new DataCounts("_job_id")));, +, +        currentTime = 10000L;, +        long latestFinalBucketEndTimeMs = 5000;, +        long latestRecordTimeMs = 5000;, +, +        long frequencyMs = 1000;, +        long queryDelayMs = 500;, +        DatafeedJob datafeedJob = createDatafeedJob(frequencyMs, queryDelayMs, latestFinalBucketEndTimeMs, latestRecordTimeMs);, +        datafeedJob.runLookBack(10000L, null);, +, +        // advance time, +        currentTime = 12000L;, +, +        expectThrows(DatafeedJob.EmptyDataCountException.class, () -> datafeedJob.runRealtime());, +, +        verify(dataExtractorFactory, times(1)).newExtractor(10000L, 11000L);, +        Mockito.verifyNoMoreInteractions(dataExtractorFactory);, +    }, +]