[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/jgroups/JgroupsDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), channel.getAddress().toString(), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/jgroups/JgroupsDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), channel.getAddress().toString(), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), Long.toString(nodeIdGenerator.incrementAndGet()), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/jgroups/JgroupsDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), channel.getAddress().toString(), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), Long.toString(nodeIdGenerator.incrementAndGet()), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/node/NodeBuilder.java, +        settings.put("node.local", local);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/jgroups/JgroupsDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), channel.getAddress().toString(), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), Long.toString(nodeIdGenerator.incrementAndGet()), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/node/NodeBuilder.java, +        settings.put("node.local", local);, +++ b/plugins/groovy/src/main/groovy/org/elasticsearch/groovy/util/json/JsonBuilder.groovy, +        c.resolveStrategy = Closure.DELEGATE_FIRST, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/jgroups/JgroupsDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), channel.getAddress().toString(), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), Long.toString(nodeIdGenerator.incrementAndGet()), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/node/NodeBuilder.java, +        settings.put("node.local", local);, +++ b/plugins/groovy/src/main/groovy/org/elasticsearch/groovy/util/json/JsonBuilder.groovy, +        c.resolveStrategy = Closure.DELEGATE_FIRST, +++ b/plugins/groovy/src/test/groovy/org/elasticsearch/groovy/test/client/SimpleActionsTests.groovy, +        def value1 = new org.elasticsearch.groovy.util.json.JsonBuilder().buildAsString {, +            something = "test", +        }, +        println value1, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/jgroups/JgroupsDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), channel.getAddress().toString(), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +            this.localNode = new DiscoveryNode(settings.get("name"), settings.getAsBoolean("node.data", !settings.getAsBoolean("node.client", false)), Long.toString(nodeIdGenerator.incrementAndGet()), transportService.boundAddress().publishAddress());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/node/NodeBuilder.java, +        settings.put("node.local", local);, +++ b/plugins/groovy/src/main/groovy/org/elasticsearch/groovy/util/json/JsonBuilder.groovy, +        c.resolveStrategy = Closure.DELEGATE_FIRST, +++ b/plugins/groovy/src/test/groovy/org/elasticsearch/groovy/test/client/SimpleActionsTests.groovy, +        def value1 = new org.elasticsearch.groovy.util.json.JsonBuilder().buildAsString {, +            something = "test", +        }, +        println value1, +, +++ b/plugins/groovy/src/test/groovy/sample.groovy, +//@Grapes([, +//    @Grab(group = 'org.elasticsearch', module = 'elasticsearch-groovy', version = '0.7.0-SNAPSHOT'),, +//    @Grab(group = 'org.slf4j', module = 'slf4j-simple', version = '1.5.8'), +///*    @Grab(group = 'org.slf4j', module = 'slf4j-log4j12', version = '1.5.8')*/, +//]), +, +def startNode() {, +    def nodeBuilder = new org.elasticsearch.groovy.node.GNodeBuilder(), +    nodeBuilder.settings {, +        node {, +            client = true, +        }, +    }, +    nodeBuilder.node(), +}, +, +, +def node = startNode(), +, +println "settings $node.settings.asMap", +, +println "Node started", +, +future = node.client.index {, +    index "twitter", +    type "tweet", +    id "1", +    source {, +        user = "kimchy", +        message = "this is a tweet", +    }, +}, +, +println "Indexed $future.response.index/$future.response.type/$future.response.id", +, +node.close()]