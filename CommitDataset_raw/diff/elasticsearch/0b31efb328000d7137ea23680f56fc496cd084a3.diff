[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import com.google.common.base.Function;, +        // collect all the mappers for this type, +        List<ObjectMapper> newObjectMappers = new ArrayList<>();, +        List<FieldMapper<?>> newFieldMappers = new ArrayList<>();, +        for (RootMapper rootMapper : this.mapping.rootMappersNotIncludedInObject) {, +                newFieldMappers.add((FieldMapper) rootMapper);, +        MapperUtils.collect(this.mapping.root, newObjectMappers, newFieldMappers);, +        this.fieldMappers = new DocumentFieldMappers(docMapperParser.analysisService).copyAndAllAll(newFieldMappers);, +        this.objectMappers = Maps.uniqueIndex(newObjectMappers, new Function<ObjectMapper, String>() {, +            public String apply(ObjectMapper mapper) {, +                return mapper.fullPath();, +        for (ObjectMapper objectMapper : newObjectMappers) {, +    private void addObjectMappers(Collection<ObjectMapper> objectMappers) {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import com.google.common.base.Function;, +        // collect all the mappers for this type, +        List<ObjectMapper> newObjectMappers = new ArrayList<>();, +        List<FieldMapper<?>> newFieldMappers = new ArrayList<>();, +        for (RootMapper rootMapper : this.mapping.rootMappersNotIncludedInObject) {, +                newFieldMappers.add((FieldMapper) rootMapper);, +        MapperUtils.collect(this.mapping.root, newObjectMappers, newFieldMappers);, +        this.fieldMappers = new DocumentFieldMappers(docMapperParser.analysisService).copyAndAllAll(newFieldMappers);, +        this.objectMappers = Maps.uniqueIndex(newObjectMappers, new Function<ObjectMapper, String>() {, +            public String apply(ObjectMapper mapper) {, +                return mapper.fullPath();, +        for (ObjectMapper objectMapper : newObjectMappers) {, +    private void addObjectMappers(Collection<ObjectMapper> objectMappers) {, +++ b/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +public interface Mapper extends ToXContent, Iterable<Mapper> {, +    Mapper[] EMPTY_ARRAY = new Mapper[0];, +    class BuilderContext {, +    abstract class Builder<T extends Builder, Y extends Mapper> {, +    interface TypeParser {, +        class ParserContext {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import com.google.common.base.Function;, +        // collect all the mappers for this type, +        List<ObjectMapper> newObjectMappers = new ArrayList<>();, +        List<FieldMapper<?>> newFieldMappers = new ArrayList<>();, +        for (RootMapper rootMapper : this.mapping.rootMappersNotIncludedInObject) {, +                newFieldMappers.add((FieldMapper) rootMapper);, +        MapperUtils.collect(this.mapping.root, newObjectMappers, newFieldMappers);, +        this.fieldMappers = new DocumentFieldMappers(docMapperParser.analysisService).copyAndAllAll(newFieldMappers);, +        this.objectMappers = Maps.uniqueIndex(newObjectMappers, new Function<ObjectMapper, String>() {, +            public String apply(ObjectMapper mapper) {, +                return mapper.fullPath();, +        for (ObjectMapper objectMapper : newObjectMappers) {, +    private void addObjectMappers(Collection<ObjectMapper> objectMappers) {, +++ b/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +public interface Mapper extends ToXContent, Iterable<Mapper> {, +    Mapper[] EMPTY_ARRAY = new Mapper[0];, +    class BuilderContext {, +    abstract class Builder<T extends Builder, Y extends Mapper> {, +    interface TypeParser {, +        class ParserContext {, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.ArrayList;, +                List<ObjectMapper> newObjectMappers = new ArrayList<>();, +                List<FieldMapper<?>> newFieldMappers = new ArrayList<>();, +                for (RootMapper rootMapper : mapper.mapping().rootMappers) {, +                    if (!rootMapper.includeInObject() && rootMapper instanceof FieldMapper) {, +                        newFieldMappers.add((FieldMapper<?>) rootMapper);, +                    }, +                }, +                MapperUtils.collect(mapper.mapping().root, newObjectMappers, newFieldMappers);, +                addFieldMappers(newFieldMappers);, +                addObjectMappers(newObjectMappers);, +    private void addObjectMappers(Collection<ObjectMapper> objectMappers) {, +            addObjectMappers(Collections.singletonList(objectMapper));, +        public void objectMappers(Collection<ObjectMapper> objectMappers) {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import com.google.common.base.Function;, +        // collect all the mappers for this type, +        List<ObjectMapper> newObjectMappers = new ArrayList<>();, +        List<FieldMapper<?>> newFieldMappers = new ArrayList<>();, +        for (RootMapper rootMapper : this.mapping.rootMappersNotIncludedInObject) {, +                newFieldMappers.add((FieldMapper) rootMapper);, +        MapperUtils.collect(this.mapping.root, newObjectMappers, newFieldMappers);, +        this.fieldMappers = new DocumentFieldMappers(docMapperParser.analysisService).copyAndAllAll(newFieldMappers);, +        this.objectMappers = Maps.uniqueIndex(newObjectMappers, new Function<ObjectMapper, String>() {, +            public String apply(ObjectMapper mapper) {, +                return mapper.fullPath();, +        for (ObjectMapper objectMapper : newObjectMappers) {, +    private void addObjectMappers(Collection<ObjectMapper> objectMappers) {, +++ b/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +public interface Mapper extends ToXContent, Iterable<Mapper> {, +    Mapper[] EMPTY_ARRAY = new Mapper[0];, +    class BuilderContext {, +    abstract class Builder<T extends Builder, Y extends Mapper> {, +    interface TypeParser {, +        class ParserContext {, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.ArrayList;, +                List<ObjectMapper> newObjectMappers = new ArrayList<>();, +                List<FieldMapper<?>> newFieldMappers = new ArrayList<>();, +                for (RootMapper rootMapper : mapper.mapping().rootMappers) {, +                    if (!rootMapper.includeInObject() && rootMapper instanceof FieldMapper) {, +                        newFieldMappers.add((FieldMapper<?>) rootMapper);, +                    }]