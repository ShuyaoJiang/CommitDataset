[+++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/node/NodeStatsRendererTests.java, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +, +import java.util.Map;, +        try (BytesStreamOutput os = new BytesStreamOutput()) {, +            new NodeStatsRenderer().render(marvelDoc, XContentType.JSON, os);, +            Map<String, Object> result =  XContentHelper.convertToMap(os.bytes(), false).v2();, +            for (String field : NodeStatsRenderer.FILTERS) {, +                if (Constants.WINDOWS) {, +                    // load average is unavailable on Windows, +                    if ("node_stats.os.cpu.load_average.1m".equals(field)) {, +                        continue;, +                    }, +                }, +                assertNotNull("expecting field to be present:" + field, XContentMapValues.extractValue(field, result));, +            }, +        }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/node/NodeStatsRendererTests.java, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +, +import java.util.Map;, +        try (BytesStreamOutput os = new BytesStreamOutput()) {, +            new NodeStatsRenderer().render(marvelDoc, XContentType.JSON, os);, +            Map<String, Object> result =  XContentHelper.convertToMap(os.bytes(), false).v2();, +            for (String field : NodeStatsRenderer.FILTERS) {, +                if (Constants.WINDOWS) {, +                    // load average is unavailable on Windows, +                    if ("node_stats.os.cpu.load_average.1m".equals(field)) {, +                        continue;, +                    }, +                }, +                assertNotNull("expecting field to be present:" + field, XContentMapValues.extractValue(field, result));, +            }, +        }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/node/NodeStatsTests.java, +import org.apache.lucene.util.Constants;, +                if (Constants.WINDOWS) {, +                    // load average is unavailable on Windows, +                    if ("node_stats.os.cpu.load_average.1m".equals(filter)) {, +                        continue;, +                    }, +                }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/node/NodeStatsRendererTests.java, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +, +import java.util.Map;, +        try (BytesStreamOutput os = new BytesStreamOutput()) {, +            new NodeStatsRenderer().render(marvelDoc, XContentType.JSON, os);, +            Map<String, Object> result =  XContentHelper.convertToMap(os.bytes(), false).v2();, +            for (String field : NodeStatsRenderer.FILTERS) {, +                if (Constants.WINDOWS) {, +                    // load average is unavailable on Windows, +                    if ("node_stats.os.cpu.load_average.1m".equals(field)) {, +                        continue;, +                    }, +                }, +                assertNotNull("expecting field to be present:" + field, XContentMapValues.extractValue(field, result));, +            }, +        }, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/node/NodeStatsTests.java, +import org.apache.lucene.util.Constants;, +                if (Constants.WINDOWS) {, +                    // load average is unavailable on Windows, +                    if ("node_stats.os.cpu.load_average.1m".equals(filter)) {, +                        continue;, +                    }, +                }, +++ /dev/null]