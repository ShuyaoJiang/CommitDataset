[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java, +        if (config.unmapped()) {, +            if (config.missing() == null) {, +            } else if (config.valueSourceType() == ValuesSourceType.NUMERIC) {, +            } else if (config.valueSourceType() == ValuesSourceType.GEOPOINT) {, +            } else if (config.valueSourceType() == ValuesSourceType.ANY || config.valueSourceType() == ValuesSourceType.BYTES) {, +                throw new SearchParseException(searchContext, "Can't deal with unmapped ValuesSource type ", +                    + config.valueSourceType(), null);, +        if (config.missing() == null) {, +            final BytesRef missing = new BytesRef(config.missing().toString());, +            if (config.missing() instanceof Number) {, +                missing = (Number) config.missing();, +                if (config.fieldContext() != null && config.fieldContext().fieldType() != null) {, +                    missing = config.fieldContext().fieldType().docValueFormat(null, DateTimeZone.UTC), +                            .parseDouble(config.missing().toString(), false, context.nowCallable());, +                    missing = Double.parseDouble(config.missing().toString());, +            final GeoPoint missing = GeoUtils.parseGeoPoint(config.missing().toString(), new GeoPoint());, +        if (config.fieldContext() == null) {, +            if (config.valueSourceType() == ValuesSourceType.NUMERIC) {, +            if (config.valueSourceType() == ValuesSourceType.BYTES) {, +            throw new AggregationExecutionException("value source of type [" + config.valueSourceType().name(), +        if (config.valueSourceType() == ValuesSourceType.NUMERIC) {, +        if (config.valueSourceType() == ValuesSourceType.GEOPOINT) {, +        return new ValuesSource.Numeric.Script(config.script(), config.scriptValueType());, +        if (!(config.fieldContext().indexFieldData() instanceof IndexNumericFieldData)) {, +            throw new IllegalArgumentException("Expected numeric type on field [" + config.fieldContext().field() +, +                    "], but got [" + config.fieldContext().fieldType().typeName() + "]");, +        ValuesSource.Numeric dataSource = new ValuesSource.Numeric.FieldData((IndexNumericFieldData)config.fieldContext().indexFieldData());, +        if (config.script() != null) {, +            dataSource = new ValuesSource.Numeric.WithScript(dataSource, config.script());, +        final IndexFieldData<?> indexFieldData = config.fieldContext().indexFieldData();, +        if (config.script() != null) {, +            dataSource = new ValuesSource.WithScript(dataSource, config.script());, +        return new ValuesSource.Bytes.Script(config.script());, +        if (!(config.fieldContext().indexFieldData() instanceof IndexGeoPointFieldData)) {, +            throw new IllegalArgumentException("Expected geo_point type on field [" + config.fieldContext().field() +, +                    "], but got [" + config.fieldContext().fieldType().typeName() + "]");, +        return new ValuesSource.GeoPoint.Fielddata((IndexGeoPointFieldData) config.fieldContext().indexFieldData());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java, +        if (config.unmapped()) {, +            if (config.missing() == null) {, +            } else if (config.valueSourceType() == ValuesSourceType.NUMERIC) {, +            } else if (config.valueSourceType() == ValuesSourceType.GEOPOINT) {, +            } else if (config.valueSourceType() == ValuesSourceType.ANY || config.valueSourceType() == ValuesSourceType.BYTES) {, +                throw new SearchParseException(searchContext, "Can't deal with unmapped ValuesSource type ", +                    + config.valueSourceType(), null);, +        if (config.missing() == null) {, +            final BytesRef missing = new BytesRef(config.missing().toString());, +            if (config.missing() instanceof Number) {, +                missing = (Number) config.missing();, +                if (config.fieldContext() != null && config.fieldContext().fieldType() != null) {, +                    missing = config.fieldContext().fieldType().docValueFormat(null, DateTimeZone.UTC), +                            .parseDouble(config.missing().toString(), false, context.nowCallable());, +                    missing = Double.parseDouble(config.missing().toString());, +            final GeoPoint missing = GeoUtils.parseGeoPoint(config.missing().toString(), new GeoPoint());, +        if (config.fieldContext() == null) {, +            if (config.valueSourceType() == ValuesSourceType.NUMERIC) {, +            if (config.valueSourceType() == ValuesSourceType.BYTES) {, +            throw new AggregationExecutionException("value source of type [" + config.valueSourceType().name(), +        if (config.valueSourceType() == ValuesSourceType.NUMERIC) {, +        if (config.valueSourceType() == ValuesSourceType.GEOPOINT) {, +        return new ValuesSource.Numeric.Script(config.script(), config.scriptValueType());, +        if (!(config.fieldContext().indexFieldData() instanceof IndexNumericFieldData)) {, +            throw new IllegalArgumentException("Expected numeric type on field [" + config.fieldContext().field() +, +                    "], but got [" + config.fieldContext().fieldType().typeName() + "]");, +        ValuesSource.Numeric dataSource = new ValuesSource.Numeric.FieldData((IndexNumericFieldData)config.fieldContext().indexFieldData());, +        if (config.script() != null) {, +            dataSource = new ValuesSource.Numeric.WithScript(dataSource, config.script());, +        final IndexFieldData<?> indexFieldData = config.fieldContext().indexFieldData();, +        if (config.script() != null) {, +            dataSource = new ValuesSource.WithScript(dataSource, config.script());, +        return new ValuesSource.Bytes.Script(config.script());, +        if (!(config.fieldContext().indexFieldData() instanceof IndexGeoPointFieldData)) {, +            throw new IllegalArgumentException("Expected geo_point type on field [" + config.fieldContext().field() +, +                    "], but got [" + config.fieldContext().fieldType().typeName() + "]");, +        return new ValuesSource.GeoPoint.Fielddata((IndexGeoPointFieldData) config.fieldContext().indexFieldData());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java, +                config.format(resolveFormat(null, valueType));, +            config.missing(missing);, +            config.timezone(timeZone);, +            config.format(resolveFormat(format, valueType));, +            config.script(createScript(script, context.searchContext()));, +            config.scriptValueType(valueType);, +            config.missing(missing);, +            config.timezone(timeZone);, +            config.format(resolveFormat(format, valueType));, +            config.unmapped(true);, +                config.scriptValueType(valueType);, +        config.fieldContext(new FieldContext(field, indexFieldData, fieldType));, +        config.missing(missing);, +        config.timezone(timeZone);, +        config.script(createScript(script, context.searchContext()));, +        config.format(fieldType.docValueFormat(format, timeZone));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java, +        if (config.unmapped()) {, +            if (config.missing() == null) {, +            } else if (config.valueSourceType() == ValuesSourceType.NUMERIC) {, +            } else if (config.valueSourceType() == ValuesSourceType.GEOPOINT) {, +            } else if (config.valueSourceType() == ValuesSourceType.ANY || config.valueSourceType() == ValuesSourceType.BYTES) {, +                throw new SearchParseException(searchContext, "Can't deal with unmapped ValuesSource type "]