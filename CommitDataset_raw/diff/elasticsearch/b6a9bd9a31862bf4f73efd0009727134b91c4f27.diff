[+++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +        Map<String, Float> fieldNameWithBoosts = Maps.newHashMap();, +                        Float fBoost = null;, +                                fieldNameWithBoosts.put(field, fBoost);, +                            fieldNameWithBoosts.put(fField, fBoost);, +        if (fieldNameWithBoosts.isEmpty()) {, +        Query query = multiMatchQuery.parse(type, fieldNameWithBoosts, text);, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +        Map<String, Float> fieldNameWithBoosts = Maps.newHashMap();, +                        Float fBoost = null;, +                                fieldNameWithBoosts.put(field, fBoost);, +                            fieldNameWithBoosts.put(fField, fBoost);, +        if (fieldNameWithBoosts.isEmpty()) {, +        Query query = multiMatchQuery.parse(type, fieldNameWithBoosts, text);, +++ b/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +import java.util.Map;, +    public Query parse(Type type, Map<String, Float> fieldNames, String text) {, +            Map.Entry<String, Float> fieldBoost = fieldNames.entrySet().iterator().next();, +            Float boostValue = fieldBoost.getValue();, +            if (boostValue == null) {, +                return parse(type, fieldBoost.getKey(), text);, +            } else {, +                Query query = parse(type, fieldBoost.getKey(), text);, +                query.setBoost(boostValue);, +                return query;, +            }, +            for (String fieldName : fieldNames.keySet()) {, +                Float boostValue = fieldNames.get(fieldName);, +                if (boostValue != null) {, +                    query.setBoost(boostValue);, +                }, +            for (String fieldName : fieldNames.keySet()) {, +                Float boostValue = fieldNames.get(fieldName);, +                if (boostValue != null) {, +                    query.setBoost(boostValue);, +                }, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +        Map<String, Float> fieldNameWithBoosts = Maps.newHashMap();, +                        Float fBoost = null;, +                                fieldNameWithBoosts.put(field, fBoost);, +                            fieldNameWithBoosts.put(fField, fBoost);, +        if (fieldNameWithBoosts.isEmpty()) {, +        Query query = multiMatchQuery.parse(type, fieldNameWithBoosts, text);, +++ b/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +import java.util.Map;, +    public Query parse(Type type, Map<String, Float> fieldNames, String text) {, +            Map.Entry<String, Float> fieldBoost = fieldNames.entrySet().iterator().next();, +            Float boostValue = fieldBoost.getValue();, +            if (boostValue == null) {, +                return parse(type, fieldBoost.getKey(), text);, +            } else {, +                Query query = parse(type, fieldBoost.getKey(), text);, +                query.setBoost(boostValue);, +                return query;, +            }, +            for (String fieldName : fieldNames.keySet()) {, +                Float boostValue = fieldNames.get(fieldName);, +                if (boostValue != null) {, +                    query.setBoost(boostValue);, +                }, +            for (String fieldName : fieldNames.keySet()) {, +                Float boostValue = fieldNames.get(fieldName);, +                if (boostValue != null) {, +                    query.setBoost(boostValue);, +                }, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +        client.prepareIndex("test", "type1", "1").setSource("field1", "value1", "field2", "value4", "field3", "value3").execute().actionGet();, +        client.prepareIndex("test", "type1", "2").setSource("field1", "value2", "field2", "value5", "field3", "value2").execute().actionGet();, +        client.prepareIndex("test", "type1", "3").setSource("field1", "value3", "field2", "value6", "field3", "value1").execute().actionGet();, +        client.admin().indices().prepareRefresh("test").execute().actionGet();, +        builder = QueryBuilders.multiMatchQuery("value1", "field1", "field3^1.5"), +                .operator(MatchQueryBuilder.Operator.AND); // Operator only applies on terms inside a field! Fields are always OR-ed together., +        searchResponse = client.prepareSearch(), +                .setQuery(builder), +                .execute().actionGet();, +        assertThat(searchResponse.hits().totalHits(), equalTo(2l));, +        assertThat("3", equalTo(searchResponse.hits().getAt(0).id()));, +        assertThat("1", equalTo(searchResponse.hits().getAt(1).id()));, +, +        client.prepareIndex("test", "type1", "3").setSource("field1", "value7", "field2", "value8", "field4", 5).execute().actionGet();, +        builder = QueryBuilders.multiMatchQuery("value1", "field1", "field2", "field4");]