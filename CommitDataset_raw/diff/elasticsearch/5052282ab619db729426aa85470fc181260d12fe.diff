[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.cluster.node.DiscoveryNodeFilters;, +import org.elasticsearch.common.Nullable;, +    private final DiscoveryNodeFilters includeFilters;, +    private final DiscoveryNodeFilters excludeFilters;, +, +, +        ImmutableMap<String, String> includeMap = settings.getByPrefix("index.routing.allocation.include.").getAsMap();, +        if (includeMap.isEmpty()) {, +            includeFilters = null;, +        } else {, +            includeFilters = DiscoveryNodeFilters.buildFromKeyValue(includeMap);, +        }, +        ImmutableMap<String, String> excludeMap = settings.getByPrefix("index.routing.allocation.exclude.").getAsMap();, +        if (excludeMap.isEmpty()) {, +            excludeFilters = null;, +        } else {, +            excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(excludeMap);, +        }, +    @Nullable public DiscoveryNodeFilters includeFilters() {, +        return includeFilters;, +    }, +, +    @Nullable public DiscoveryNodeFilters excludeFilters() {, +        return excludeFilters;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.cluster.node.DiscoveryNodeFilters;, +import org.elasticsearch.common.Nullable;, +    private final DiscoveryNodeFilters includeFilters;, +    private final DiscoveryNodeFilters excludeFilters;, +, +, +        ImmutableMap<String, String> includeMap = settings.getByPrefix("index.routing.allocation.include.").getAsMap();, +        if (includeMap.isEmpty()) {, +            includeFilters = null;, +        } else {, +            includeFilters = DiscoveryNodeFilters.buildFromKeyValue(includeMap);, +        }, +        ImmutableMap<String, String> excludeMap = settings.getByPrefix("index.routing.allocation.exclude.").getAsMap();, +        if (excludeMap.isEmpty()) {, +            excludeFilters = null;, +        } else {, +            excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(excludeMap);, +        }, +    @Nullable public DiscoveryNodeFilters includeFilters() {, +        return includeFilters;, +    }, +, +    @Nullable public DiscoveryNodeFilters excludeFilters() {, +        return excludeFilters;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.node;, +, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.collect.ImmutableMap;, +import org.elasticsearch.common.regex.Regex;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + */, +public class DiscoveryNodeFilters {, +, +    public static final DiscoveryNodeFilters NO_FILTERS = new DiscoveryNodeFilters(ImmutableMap.<String, String[]>of());, +, +    public static DiscoveryNodeFilters buildFromSettings(String prefix, Settings settings) {, +        return buildFromKeyValue(settings.getByPrefix(prefix).getAsMap());, +    }, +, +    public static DiscoveryNodeFilters buildFromKeyValue(Map<String, String> filters) {, +        Map<String, String[]> bFilters = new HashMap<String, String[]>();, +        for (Map.Entry<String, String> entry : filters.entrySet()) {, +            bFilters.put(entry.getKey(), Strings.splitStringByCommaToArray(entry.getValue()));, +        }]