[+++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    private static final int NUMBER_OF_TESTQUERIES = 20;, +        for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) {, +    }, +        for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) {, +            assertTrue(, +                    "query is not equal to its copy after calling toQuery, firstQuery: " + firstQuery + ", secondQuery: " + controlQuery,, +                secondQuery.queryName(secondQuery.queryName() == null ? randomAsciiOfLengthBetween(1, 30) : secondQuery.queryName(), +                        + randomAsciiOfLengthBetween(1, 10));, +            setSearchContext(randomTypes);, +            SearchContext.removeCurrent();, +                setSearchContext(randomTypes);, +                assertThat("modifying the boost doesn't affect the corresponding lucene query", firstLuceneQuery,, +                        not(equalTo(thirdLuceneQuery)));, +            }, +        for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) {, +    }, +        for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) {, +            assertThat("same query's hashcode returns different values if called multiple times", firstQuery.hashCode(),, +                    equalTo(firstQuery.hashCode()));, +    }, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    private static final int NUMBER_OF_TESTQUERIES = 20;, +        for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) {, +    }, +        for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) {, +            assertTrue(, +                    "query is not equal to its copy after calling toQuery, firstQuery: " + firstQuery + ", secondQuery: " + controlQuery,, +                secondQuery.queryName(secondQuery.queryName() == null ? randomAsciiOfLengthBetween(1, 30) : secondQuery.queryName(), +                        + randomAsciiOfLengthBetween(1, 10));, +            setSearchContext(randomTypes);, +            SearchContext.removeCurrent();, +                setSearchContext(randomTypes);, +                assertThat("modifying the boost doesn't affect the corresponding lucene query", firstLuceneQuery,, +                        not(equalTo(thirdLuceneQuery)));, +            }, +        for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) {, +    }, +        for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) {, +            assertThat("same query's hashcode returns different values if called multiple times", firstQuery.hashCode(),, +                    equalTo(firstQuery.hashCode()));, +    }, +++ b/core/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderTests.java, +import org.elasticsearch.test.geo.RandomShapeGenerator.ShapeType;, +        ShapeType shapeType = ShapeType.randomType(getRandom());, +        ShapeBuilder shape = RandomShapeGenerator.createShapeWithin(getRandom(), null, shapeType);, +        clearShapeFields();, +            // ShapeType.MULTILINESTRING + SpatialStrategy.TERM can lead to large queries and will slow down tests, so, +            // we try to avoid that combination, +            while (shapeType == ShapeType.MULTILINESTRING && strategy == SpatialStrategy.TERM) {, +                strategy = randomFrom(SpatialStrategy.values());, +            }]