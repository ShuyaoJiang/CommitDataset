[+++ b/docs/reference/aggregations/reducer/movavg-aggregation.asciidoc, +    "moving_avg": {, +        "model": "holt",, +==== EWMA (Exponentially Weighted), +The `ewma` model (aka "single-exponential") is similar to the `linear` model, except older data-points become exponentially less important,, +            "model" : "ewma",, +==== Holt-Linear, +The `holt` model (aka "double exponential") incorporates a second exponential term which, +The level calculation is similar to `ewma`, and is an exponentially weighted view of the data.  The difference is, +            "model" : "holt",, +In practice, the `alpha` value behaves very similarly in `holt` as `ewma`: small values produce more smoothing, +The `simple`, `linear` and `ewma` models all produce "flat" predictions: they essentially converge on the mean, +In contrast, the `holt` model can extrapolate based on local or global constant trends.  If we set a high `beta`, +++ b/docs/reference/aggregations/reducer/movavg-aggregation.asciidoc, +    "moving_avg": {, +        "model": "holt",, +==== EWMA (Exponentially Weighted), +The `ewma` model (aka "single-exponential") is similar to the `linear` model, except older data-points become exponentially less important,, +            "model" : "ewma",, +==== Holt-Linear, +The `holt` model (aka "double exponential") incorporates a second exponential term which, +The level calculation is similar to `ewma`, and is an exponentially weighted view of the data.  The difference is, +            "model" : "holt",, +In practice, the `alpha` value behaves very similarly in `holt` as `ewma`: small values produce more smoothing, +The `simple`, `linear` and `ewma` models all produce "flat" predictions: they essentially converge on the mean, +In contrast, the `holt` model can extrapolate based on local or global constant trends.  If we set a high `beta`, +++ /dev/null, +++ b/docs/reference/aggregations/reducer/movavg-aggregation.asciidoc, +    "moving_avg": {, +        "model": "holt",, +==== EWMA (Exponentially Weighted), +The `ewma` model (aka "single-exponential") is similar to the `linear` model, except older data-points become exponentially less important,, +            "model" : "ewma",, +==== Holt-Linear, +The `holt` model (aka "double exponential") incorporates a second exponential term which, +The level calculation is similar to `ewma`, and is an exponentially weighted view of the data.  The difference is, +            "model" : "holt",, +In practice, the `alpha` value behaves very similarly in `holt` as `ewma`: small values produce more smoothing, +The `simple`, `linear` and `ewma` models all produce "flat" predictions: they essentially converge on the mean, +In contrast, the `holt` model can extrapolate based on local or global constant trends.  If we set a high `beta`, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/search/aggregations/reducers/movavg/models/EwmaModel.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations.reducers.movavg.models;, +, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.reducers.movavg.MovAvgParser;, +, +import java.io.IOException;, +import java.util.Collection;, +import java.util.Map;, +, +/**, + * Calculate a exponentially weighted moving average, + */, +public class EwmaModel extends MovAvgModel {, +, +    protected static final ParseField NAME_FIELD = new ParseField("ewma");, +, +    /**, +     * Controls smoothing of data. Alpha = 1 retains no memory of past values, +     * (e.g. random walk), while alpha = 0 retains infinite memory of past values (e.g., +     * mean of the series).  Useful values are somewhere in between, +     */, +    private double alpha;, +, +    public EwmaModel(double alpha) {, +        this.alpha = alpha;, +    }, +, +, +    @Override, +    public <T extends Number> double next(Collection<T> values) {, +        double avg = 0;, +        boolean first = true;, +, +        for (T v : values) {, +            if (first) {]