[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchSearchResult.java, + * @author kimchy (shay.banon), +        hits = InternalSearchHits.readSearchHits(in, InternalSearchHits.streamContext().streamShardTarget(StreamContext.ShardTargetType.NO_STREAM));, +        hits.writeTo(out, InternalSearchHits.streamContext().streamShardTarget(StreamContext.ShardTargetType.NO_STREAM));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchSearchResult.java, + * @author kimchy (shay.banon), +        hits = InternalSearchHits.readSearchHits(in, InternalSearchHits.streamContext().streamShardTarget(StreamContext.ShardTargetType.NO_STREAM));, +        hits.writeTo(out, InternalSearchHits.streamContext().streamShardTarget(StreamContext.ShardTargetType.NO_STREAM));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/InternalSearchHit.java, +    public void shardTarget(SearchShardTarget shardTarget) {, +        this.shard = shardTarget;, +    }, +, +    public static InternalSearchHit readSearchHit(StreamInput in, InternalSearchHits.StreamContext context) throws IOException {, +        hit.readFrom(in, context);, +        readFrom(in, InternalSearchHits.streamContext().streamShardTarget(InternalSearchHits.StreamContext.ShardTargetType.STREAM));, +    public void readFrom(StreamInput in, InternalSearchHits.StreamContext context) throws IOException {, +        if (context.streamShardTarget() == InternalSearchHits.StreamContext.ShardTargetType.STREAM) {, +        } else if (context.streamShardTarget() == InternalSearchHits.StreamContext.ShardTargetType.LOOKUP) {, +            int lookupId = in.readVInt();, +            if (lookupId > 0) {, +                shard = context.handleShardLookup().get(lookupId);, +            }, +        writeTo(out, InternalSearchHits.streamContext().streamShardTarget(InternalSearchHits.StreamContext.ShardTargetType.STREAM));, +    public void writeTo(StreamOutput out, InternalSearchHits.StreamContext context) throws IOException {, +        if (context.streamShardTarget() == InternalSearchHits.StreamContext.ShardTargetType.STREAM) {, +        } else if (context.streamShardTarget() == InternalSearchHits.StreamContext.ShardTargetType.LOOKUP) {, +                out.writeVInt(context.shardHandleLookup().get(shard));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchSearchResult.java, + * @author kimchy (shay.banon), +        hits = InternalSearchHits.readSearchHits(in, InternalSearchHits.streamContext().streamShardTarget(StreamContext.ShardTargetType.NO_STREAM));, +        hits.writeTo(out, InternalSearchHits.streamContext().streamShardTarget(StreamContext.ShardTargetType.NO_STREAM));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/InternalSearchHit.java, +    public void shardTarget(SearchShardTarget shardTarget) {, +        this.shard = shardTarget;, +    }, +, +    public static InternalSearchHit readSearchHit(StreamInput in, InternalSearchHits.StreamContext context) throws IOException {, +        hit.readFrom(in, context);, +        readFrom(in, InternalSearchHits.streamContext().streamShardTarget(InternalSearchHits.StreamContext.ShardTargetType.STREAM));, +    public void readFrom(StreamInput in, InternalSearchHits.StreamContext context) throws IOException {, +        if (context.streamShardTarget() == InternalSearchHits.StreamContext.ShardTargetType.STREAM) {, +        } else if (context.streamShardTarget() == InternalSearchHits.StreamContext.ShardTargetType.LOOKUP) {, +            int lookupId = in.readVInt();, +            if (lookupId > 0) {, +                shard = context.handleShardLookup().get(lookupId);, +            }, +        writeTo(out, InternalSearchHits.streamContext().streamShardTarget(InternalSearchHits.StreamContext.ShardTargetType.STREAM));, +    public void writeTo(StreamOutput out, InternalSearchHits.StreamContext context) throws IOException {, +        if (context.streamShardTarget() == InternalSearchHits.StreamContext.ShardTargetType.STREAM) {, +        } else if (context.streamShardTarget() == InternalSearchHits.StreamContext.ShardTargetType.LOOKUP) {, +                out.writeVInt(context.shardHandleLookup().get(shard));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/InternalSearchHits.java, +import org.elasticsearch.common.thread.ThreadLocals;, +    public static class StreamContext {, +, +        public static enum ShardTargetType {, +            STREAM,, +            LOOKUP,, +            NO_STREAM, +        }, +, +        private IdentityHashMap<SearchShardTarget, Integer> shardHandleLookup = new IdentityHashMap<SearchShardTarget, Integer>();, +        private TIntObjectHashMap<SearchShardTarget> handleShardLookup = new TIntObjectHashMap<SearchShardTarget>();, +        private ShardTargetType streamShardTarget = ShardTargetType.STREAM;, +, +        public StreamContext reset() {, +            shardHandleLookup.clear();, +            handleShardLookup.clear();, +            streamShardTarget = ShardTargetType.STREAM;, +            return this;, +        }, +, +        public IdentityHashMap<SearchShardTarget, Integer> shardHandleLookup() {, +            return shardHandleLookup;, +        }, +, +        public TIntObjectHashMap<SearchShardTarget> handleShardLookup() {, +            return handleShardLookup;, +        }, +, +        public ShardTargetType streamShardTarget() {, +            return streamShardTarget;, +        }, +, +        public StreamContext streamShardTarget(ShardTargetType streamShardTarget) {, +            this.streamShardTarget = streamShardTarget;, +            return this;, +        }, +    }, +, +    private static final ThreadLocal<ThreadLocals.CleanableValue<StreamContext>> cache = new ThreadLocal<ThreadLocals.CleanableValue<StreamContext>>() {, +        @Override protected ThreadLocals.CleanableValue<StreamContext> initialValue() {, +            return new ThreadLocals.CleanableValue<StreamContext>(new StreamContext());, +        }, +    };, +, +    public static StreamContext streamContext() {, +        return cache.get().get().reset();, +    }]