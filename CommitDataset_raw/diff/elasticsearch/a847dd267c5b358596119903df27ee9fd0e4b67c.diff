[+++ b/.settings/org.eclipse.core.resources.prefs, +++ b/.settings/org.eclipse.core.resources.prefs, +++ b/core/pom.xml, +                <version>2.1.3</version>, +        <profile>, +            <id>sign-rpm</id>, +            <activation>, +                <property>, +                    <name>rpm.sign</name>, +                    <value>true</value>, +                </property>, +            </activation>, +            <build>, +                <plugins>, +                    <plugin>, +                        <groupId>org.codehaus.mojo</groupId>, +                        <artifactId>rpm-maven-plugin</artifactId>, +                        <configuration>, +                            <keyname>${gpg.key}</keyname>, +                            <keypath>${gpg.keyring}</keypath>, +                            <keyPassphrase>, +                                <passphrase>${gpg.passphrase}</passphrase>, +                            </keyPassphrase>, +                        </configuration>, +                    </plugin>, +                </plugins>, +            </build>, +        </profile>, +++ b/.settings/org.eclipse.core.resources.prefs, +++ b/core/pom.xml, +                <version>2.1.3</version>, +        <profile>, +            <id>sign-rpm</id>, +            <activation>, +                <property>, +                    <name>rpm.sign</name>, +                    <value>true</value>, +                </property>, +            </activation>, +            <build>, +                <plugins>, +                    <plugin>, +                        <groupId>org.codehaus.mojo</groupId>, +                        <artifactId>rpm-maven-plugin</artifactId>, +                        <configuration>, +                            <keyname>${gpg.key}</keyname>, +                            <keypath>${gpg.keyring}</keypath>, +                            <keyPassphrase>, +                                <passphrase>${gpg.passphrase}</passphrase>, +                            </keyPassphrase>, +                        </configuration>, +                    </plugin>, +                </plugins>, +            </build>, +        </profile>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +    private static final Map<String, Constructor<? extends ElasticsearchException>> MAPPING;, +    public ElasticsearchException(StreamInput in) throws IOException {, +        super(in.readOptionalString(), in.readThrowable());, +        readStackTrace(this, in);, +    }, +, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeOptionalString(this.getMessage());, +        out.writeThrowable(this.getCause());, +        writeStackTraces(this, out);, +    }, +, +    public static ElasticsearchException readException(StreamInput input, String name) throws IOException {, +        Constructor<? extends ElasticsearchException> elasticsearchException = MAPPING.get(name);, +        if (elasticsearchException == null) {, +            throw new IllegalStateException("unknown exception with name: " + name);, +        }, +        try {, +            return elasticsearchException.newInstance(input);, +        } catch (InstantiationException|IllegalAccessException|InvocationTargetException e) {, +            throw new IOException("failed to read exception: [" + name + "]", e);, +        }, +    }, +, +    /**, +     * Retruns <code>true</code> iff the given name is a registered for an exception to be read., +     */, +    public static boolean isRegistered(String name) {, +        return MAPPING.containsKey(name);, +    }, +, +    static Set<String> getRegisteredKeys() { // for testing, +        return MAPPING.keySet();, +    }, +, +    public static class WithRestHeadersException extends ElasticsearchException implements HasRestHeaders {, +        private final Map<String, List<String>> headers;, +        public WithRestHeadersException(String msg, Tuple<String, String[]>... headers) {, +        public WithRestHeadersException(StreamInput in) throws IOException {]