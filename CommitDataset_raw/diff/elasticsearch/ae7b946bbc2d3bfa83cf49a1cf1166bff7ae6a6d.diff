[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrRetentionLeases.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.seqno.RetentionLeaseActions;, +import org.elasticsearch.index.seqno.RetentionLeaseAlreadyExistsException;, +import org.elasticsearch.index.seqno.RetentionLeaseNotFoundException;, +import org.elasticsearch.index.shard.ShardId;, +import java.util.Optional;, +, +import static org.elasticsearch.index.seqno.RetentionLeaseActions.RETAIN_ALL;, +    /**, +     * Synchronously requests to add a retention lease with the specified retention lease ID on the specified leader shard using the given, +     * remote client. Note that this method will block up to the specified timeout., +     *, +     * @param leaderShardId    the leader shard ID, +     * @param retentionLeaseId the retention lease ID, +     * @param remoteClient     the remote client on which to execute this request, +     * @param timeout          the timeout, +     * @return an optional exception indicating whether or not the retention lease already exists, +     */, +    public static Optional<RetentionLeaseAlreadyExistsException> syncAddRetentionLease(, +            final ShardId leaderShardId,, +            final String retentionLeaseId,, +            final Client remoteClient,, +            final TimeValue timeout) {, +        try {, +            final PlainActionFuture<RetentionLeaseActions.Response> response = new PlainActionFuture<>();, +            asyncAddRetentionLease(leaderShardId, retentionLeaseId, remoteClient, response);, +            response.actionGet(timeout);, +            return Optional.empty();, +        } catch (final RetentionLeaseAlreadyExistsException e) {, +            return Optional.of(e);, +        }, +    }, +, +    /**, +     * Asynchronously requests to add a retention lease with the specified retention lease ID on the specified leader shard using the given, +     * remote client. Note that this method will return immediately, with the specified listener callback invoked to indicate a response, +     * or failure., +     *, +     * @param leaderShardId    the leader shard ID, +     * @param retentionLeaseId the retention lease ID, +     * @param remoteClient     the remote client on which to execute this request, +     * @param listener         the listener, +     */, +    public static void asyncAddRetentionLease(, +            final ShardId leaderShardId,, +            final String retentionLeaseId,, +            final Client remoteClient,, +            final ActionListener<RetentionLeaseActions.Response> listener) {, +        final RetentionLeaseActions.AddRequest request =, +                new RetentionLeaseActions.AddRequest(leaderShardId, retentionLeaseId, RETAIN_ALL, "ccr");, +        remoteClient.execute(RetentionLeaseActions.Add.INSTANCE, request, listener);, +    }, +, +    /**, +     * Synchronously requests to renew a retention lease with the specified retention lease ID on the specified leader shard using the given, +     * remote client. Note that this method will block up to the specified timeout., +     *, +     * @param leaderShardId    the leader shard ID, +     * @param retentionLeaseId the retention lease ID, +     * @param remoteClient     the remote client on which to execute this request, +     * @param timeout          the timeout, +     * @return an optional exception indicating whether or not the retention lease already exists, +     */, +    public static Optional<RetentionLeaseNotFoundException> syncRenewRetentionLease(, +            final ShardId leaderShardId,, +            final String retentionLeaseId,, +            final Client remoteClient,, +            final TimeValue timeout) {, +        try {, +            final PlainActionFuture<RetentionLeaseActions.Response> response = new PlainActionFuture<>();, +            asyncRenewRetentionLease(leaderShardId, retentionLeaseId, remoteClient, response);, +            response.actionGet(timeout);, +            return Optional.empty();, +        } catch (final RetentionLeaseNotFoundException e) {, +            return Optional.of(e);, +        }, +    }, +, +    /**, +     * Asynchronously requests to renew a retention lease with the specified retention lease ID on the specified leader shard using the, +     * given remote client. Note that this method will return immediately, with the specified listener callback invoked to indicate a, +     * response or failure., +     *, +     * @param leaderShardId    the leader shard ID, +     * @param retentionLeaseId the retention lease ID, +     * @param remoteClient     the remote client on which to execute this request, +     * @param listener         the listener, +     */, +    public static void asyncRenewRetentionLease(, +            final ShardId leaderShardId,, +            final String retentionLeaseId,, +            final Client remoteClient,, +            final ActionListener<RetentionLeaseActions.Response> listener) {, +        final RetentionLeaseActions.RenewRequest request =, +                new RetentionLeaseActions.RenewRequest(leaderShardId, retentionLeaseId, RETAIN_ALL, "ccr");, +        remoteClient.execute(RetentionLeaseActions.Renew.INSTANCE, request, listener);]