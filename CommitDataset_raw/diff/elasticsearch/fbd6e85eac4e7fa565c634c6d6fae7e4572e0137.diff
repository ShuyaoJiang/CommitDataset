[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/ExistsFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/ExistsFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MissingFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/ExistsFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MissingFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/resident/ResidentFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/ExistsFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MissingFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/resident/ResidentFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/soft/SoftFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/ExistsFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MissingFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/resident/ResidentFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/soft/SoftFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, +    final ConcurrentMap<Object, FilterCacheValue<ConcurrentMap<Object, DocSet>>> cache;, +    protected ConcurrentMap<Object, FilterCacheValue<ConcurrentMap<Object, DocSet>>> buildCache() {, +        return new ConcurrentHashMap<Object, FilterCacheValue<ConcurrentMap<Object, DocSet>>>();, +    protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +        FilterCacheValue<ConcurrentMap<Object, DocSet>> readerValue = cache.remove(reader.getCoreCacheKey());, +        FilterCacheValue<ConcurrentMap<Object, DocSet>> readerValue = cache.remove(reader.getCoreCacheKey());, +        for (FilterCacheValue<ConcurrentMap<Object, DocSet>> readerValue : cache.values()) {, +            FilterCacheValue<ConcurrentMap<Object, DocSet>> cacheValue = cache.cache.get(reader.getCoreCacheKey());, +                cacheValue = new FilterCacheValue<ConcurrentMap<Object, DocSet>>(cache.buildFilterMap(), longsLAB);, +                FilterCacheValue<ConcurrentMap<Object, DocSet>> prev = cache.cache.putIfAbsent(reader.getCoreCacheKey(), cacheValue);, +            Object key = filter;, +            if (filter instanceof CacheKeyFilter) {, +                key = ((CacheKeyFilter) filter).cacheKey();, +            }, +, +            DocSet docSet = cacheValue.value().get(key);, +            DocSet prev = cacheValue.value().putIfAbsent(key, docSet);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/ExistsFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MissingFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/resident/ResidentFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/soft/SoftFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, +    final ConcurrentMap<Object, FilterCacheValue<ConcurrentMap<Object, DocSet>>> cache;, +    protected ConcurrentMap<Object, FilterCacheValue<ConcurrentMap<Object, DocSet>>> buildCache() {, +        return new ConcurrentHashMap<Object, FilterCacheValue<ConcurrentMap<Object, DocSet>>>();, +    protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +        FilterCacheValue<ConcurrentMap<Object, DocSet>> readerValue = cache.remove(reader.getCoreCacheKey());, +        FilterCacheValue<ConcurrentMap<Object, DocSet>> readerValue = cache.remove(reader.getCoreCacheKey());, +        for (FilterCacheValue<ConcurrentMap<Object, DocSet>> readerValue : cache.values()) {, +            FilterCacheValue<ConcurrentMap<Object, DocSet>> cacheValue = cache.cache.get(reader.getCoreCacheKey());, +                cacheValue = new FilterCacheValue<ConcurrentMap<Object, DocSet>>(cache.buildFilterMap(), longsLAB);, +                FilterCacheValue<ConcurrentMap<Object, DocSet>> prev = cache.cache.putIfAbsent(reader.getCoreCacheKey(), cacheValue);, +            Object key = filter;, +            if (filter instanceof CacheKeyFilter) {, +                key = ((CacheKeyFilter) filter).cacheKey();, +            }, +, +            DocSet docSet = cacheValue.value().get(key);, +            DocSet prev = cacheValue.value().putIfAbsent(key, docSet);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractWeightedFilterCache.java, +            Object filterKey = filter;, +            if (filter instanceof CacheKeyFilter) {, +                filterKey = ((CacheKeyFilter) filter).cacheKey();, +            }, +            FilterCacheKey cacheKey = new FilterCacheKey(reader.getCoreCacheKey(), filterKey);, +        private final Object filterKey;, +        public FilterCacheKey(Object readerKey, Object filterKey) {, +            this.filterKey = filterKey;, +        public Object filterKey() {, +            return filterKey;, +            return (readerKey == that.readerKey && filterKey.equals(that.filterKey));, +            return readerKey.hashCode() + 31 * filterKey.hashCode();, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/ExistsFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MissingFieldQueryExtension.java, +        filter = parseContext.cacheFilter(filter, null);, +        filter = parseContext.cacheFilter(filter, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/resident/ResidentFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/soft/SoftFilterCache.java, +    @Override protected ConcurrentMap<Object, DocSet> buildFilterMap() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java]