[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +            TimeValue.timeValueMinutes(20L), TimeValue.timeValueSeconds(1L), TimeValue.timeValueHours(1L), Property.NodeScope);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +            TimeValue.timeValueMinutes(20L), TimeValue.timeValueSeconds(1L), TimeValue.timeValueHours(1L), Property.NodeScope);, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java, +import static org.hamcrest.Matchers.equalTo;, +    public void testTokenExpiryConfig() {, +        TimeValue expiration =  TokenService.TOKEN_EXPIRATION.get(tokenServiceEnabledSettings);, +        assertThat(expiration, equalTo(TimeValue.timeValueMinutes(20L)));, +        // Configure Minimum expiration, +        tokenServiceEnabledSettings = Settings.builder().put(TokenService.TOKEN_EXPIRATION.getKey(), "1s").build();, +        expiration =  TokenService.TOKEN_EXPIRATION.get(tokenServiceEnabledSettings);, +        assertThat(expiration, equalTo(TimeValue.timeValueSeconds(1L)));, +        // Configure Maximum expiration, +        tokenServiceEnabledSettings = Settings.builder().put(TokenService.TOKEN_EXPIRATION.getKey(), "60m").build();, +        expiration =  TokenService.TOKEN_EXPIRATION.get(tokenServiceEnabledSettings);, +        assertThat(expiration, equalTo(TimeValue.timeValueHours(1L)));, +        // Outside range should fail, +        tokenServiceEnabledSettings = Settings.builder().put(TokenService.TOKEN_EXPIRATION.getKey(), "1ms").build();, +        IllegalArgumentException ile = expectThrows(IllegalArgumentException.class,, +                () -> TokenService.TOKEN_EXPIRATION.get(tokenServiceEnabledSettings));, +        assertThat(ile.getMessage(),, +                containsString("failed to parse value [1ms] for setting [xpack.security.authc.token.timeout], must be >= [1s]"));, +        tokenServiceEnabledSettings = Settings.builder().put(TokenService.TOKEN_EXPIRATION.getKey(), "120m").build();, +        ile = expectThrows(IllegalArgumentException.class, () -> TokenService.TOKEN_EXPIRATION.get(tokenServiceEnabledSettings));, +        assertThat(ile.getMessage(),, +                containsString("failed to parse value [120m] for setting [xpack.security.authc.token.timeout], must be <= [1h]"));, +    }, +]