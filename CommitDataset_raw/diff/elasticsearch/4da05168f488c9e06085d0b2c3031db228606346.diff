[+++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/build.gradle, +++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            String taskName = "${task.name}#install${camelName[0].toUpperCase(Locale.ROOT) + camelName.substring(1)}", +        // collect the files for plugins into a list, but wrap each in a closure to delay, +        // looking for the filename until execution time, +        List files = config.plugins.values().collect { plugin -> return { plugin.singleFile } }, +            from(*files) // spread the list into varargs, +                ant.exec(executable: 'cmd', spawn: true, dir: cwd) {, +                args esScript, '-d' // daemonize!, +            commandLine new File(System.getenv('JAVA_HOME'), 'bin/jps'), '-l', +++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            String taskName = "${task.name}#install${camelName[0].toUpperCase(Locale.ROOT) + camelName.substring(1)}", +        // collect the files for plugins into a list, but wrap each in a closure to delay, +        // looking for the filename until execution time, +        List files = config.plugins.values().collect { plugin -> return { plugin.singleFile } }, +            from(*files) // spread the list into varargs, +                ant.exec(executable: 'cmd', spawn: true, dir: cwd) {, +                args esScript, '-d' // daemonize!, +            commandLine new File(System.getenv('JAVA_HOME'), 'bin/jps'), '-l', +++ /dev/null, +++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            String taskName = "${task.name}#install${camelName[0].toUpperCase(Locale.ROOT) + camelName.substring(1)}", +        // collect the files for plugins into a list, but wrap each in a closure to delay, +        // looking for the filename until execution time, +        List files = config.plugins.values().collect { plugin -> return { plugin.singleFile } }, +            from(*files) // spread the list into varargs, +                ant.exec(executable: 'cmd', spawn: true, dir: cwd) {, +                args esScript, '-d' // daemonize!, +            commandLine new File(System.getenv('JAVA_HOME'), 'bin/jps'), '-l', +++ /dev/null, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            String taskName = "${task.name}#install${camelName[0].toUpperCase(Locale.ROOT) + camelName.substring(1)}", +        // collect the files for plugins into a list, but wrap each in a closure to delay, +        // looking for the filename until execution time, +        List files = config.plugins.values().collect { plugin -> return { plugin.singleFile } }, +            from(*files) // spread the list into varargs, +                ant.exec(executable: 'cmd', spawn: true, dir: cwd) {, +                args esScript, '-d' // daemonize!, +            commandLine new File(System.getenv('JAVA_HOME'), 'bin/jps'), '-l', +++ /dev/null, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +++ b/core/build.gradle, +, +++ b/TESTING.asciidoc, +./run.sh, +If you want to run elasticsearch from your IDE, you should execute ./run.sh, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            String taskName = "${task.name}#install${camelName[0].toUpperCase(Locale.ROOT) + camelName.substring(1)}"]