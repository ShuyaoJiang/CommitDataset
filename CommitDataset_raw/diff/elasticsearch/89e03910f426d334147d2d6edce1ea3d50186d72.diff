[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.threadpool.ThreadPool;, +        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS,, +                new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCacheListener(circuitBreakerService), new ThreadPool("testing-only")),, +                circuitBreakerService, new IndicesFieldDataCacheListener(circuitBreakerService));, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.threadpool.ThreadPool;, +        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS,, +                new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCacheListener(circuitBreakerService), new ThreadPool("testing-only")),, +                circuitBreakerService, new IndicesFieldDataCacheListener(circuitBreakerService));, +++ b/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java, +import org.elasticsearch.index.fielddata.*;, +import org.elasticsearch.threadpool.ThreadPool;, +    public static final String FIELDDATA_CLEAN_INTERVAL_SETTING = "indices.fielddata.cache.cleanup_interval";, +, +    private final TimeValue cleanInterval;, +    private final ThreadPool threadPool;, +    private volatile boolean closed = false;, +    public IndicesFieldDataCache(Settings settings, IndicesFieldDataCacheListener indicesFieldDataCacheListener, ThreadPool threadPool) {, +        this.threadPool = threadPool;, +, +        this.cleanInterval = settings.getAsTime(FIELDDATA_CLEAN_INTERVAL_SETTING, TimeValue.timeValueMinutes(1));, +        // Start thread that will manage cleaning the field data cache periodically, +        threadPool.schedule(this.cleanInterval, ThreadPool.Names.SAME,, +                new FieldDataCacheCleaner(this.cache, this.logger, this.threadPool, this.cleanInterval));, +        this.closed = true;, +        /**, +         * Clean up the internal Guava cache, +         */, +        public void cleanUp() {, +            cache.cleanUp();, +        }, +, +, +    /**, +     * FieldDataCacheCleaner is a scheduled Runnable used to clean a Guava cache, +     * periodically. In this case it is the field data cache, because a cache that, +     * has an entry invalidated may not clean up the entry if it is not read from, +     * or written to after invalidation., +     */, +    public class FieldDataCacheCleaner implements Runnable {, +, +        private final Cache<Key, Accountable> cache;, +        private final ESLogger logger;, +        private final ThreadPool threadPool;, +        private final TimeValue interval;, +, +        public FieldDataCacheCleaner(Cache cache, ESLogger logger, ThreadPool threadPool, TimeValue interval) {, +            this.cache = cache;, +            this.logger = logger;, +            this.threadPool = threadPool;, +            this.interval = interval;, +        }, +, +        @Override, +        public void run() {, +            long startTime = System.currentTimeMillis();, +            if (logger.isTraceEnabled()) {, +                logger.trace("running periodic field data cache cleanup");, +            }, +            try {, +                this.cache.cleanUp();, +            } catch (Exception e) {, +                logger.warn("Exception during periodic field data cache cleanup:", e);, +            }, +            if (logger.isTraceEnabled()) {, +                logger.trace("periodic field data cache cleanup finished in {} milliseconds", System.currentTimeMillis() - startTime);, +            }, +            // Reschedule itself to run again if not closed, +            if (closed == false) {, +                threadPool.schedule(interval, ThreadPool.Names.SAME, this);, +            }, +        }, +    }]