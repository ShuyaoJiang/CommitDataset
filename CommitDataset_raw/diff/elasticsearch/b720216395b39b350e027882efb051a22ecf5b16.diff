[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.snapshots.Snapshot;, +                new SnapshotsService.SnapshotRequest(request.repository(), request.snapshot(), "create_snapshot [" + request.snapshot() + "]"), +                        public void onSnapshotCompletion(Snapshot snapshot, SnapshotInfo snapshotInfo) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshotInfo));, +                        public void onSnapshotFailure(Snapshot snapshot, Throwable t) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.snapshots.Snapshot;, +                new SnapshotsService.SnapshotRequest(request.repository(), request.snapshot(), "create_snapshot [" + request.snapshot() + "]"), +                        public void onSnapshotCompletion(Snapshot snapshot, SnapshotInfo snapshotInfo) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshotInfo));, +                        public void onSnapshotFailure(Snapshot snapshot, Throwable t) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        snapshotsService.deleteSnapshot(request.repository(), request.snapshot(), new SnapshotsService.DeleteSnapshotListener() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.snapshots.Snapshot;, +                new SnapshotsService.SnapshotRequest(request.repository(), request.snapshot(), "create_snapshot [" + request.snapshot() + "]"), +                        public void onSnapshotCompletion(Snapshot snapshot, SnapshotInfo snapshotInfo) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshotInfo));, +                        public void onSnapshotFailure(Snapshot snapshot, Throwable t) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        snapshotsService.deleteSnapshot(request.repository(), request.snapshot(), new SnapshotsService.DeleteSnapshotListener() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/GetSnapshotsResponse.java, +        this.snapshots = Collections.unmodifiableList(snapshots);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.snapshots.Snapshot;, +                new SnapshotsService.SnapshotRequest(request.repository(), request.snapshot(), "create_snapshot [" + request.snapshot() + "]"), +                        public void onSnapshotCompletion(Snapshot snapshot, SnapshotInfo snapshotInfo) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshotInfo));, +                        public void onSnapshotFailure(Snapshot snapshot, Throwable t) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        snapshotsService.deleteSnapshot(request.repository(), request.snapshot(), new SnapshotsService.DeleteSnapshotListener() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/GetSnapshotsResponse.java, +        this.snapshots = Collections.unmodifiableList(snapshots);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +import org.elasticsearch.snapshots.SnapshotId;, +import org.elasticsearch.snapshots.SnapshotMissingException;, +import java.util.HashMap;, +import java.util.Map;, +        super(settings, GetSnapshotsAction.NAME, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver,, +              GetSnapshotsRequest::new);, +    protected void masterOperation(final GetSnapshotsRequest request, ClusterState state,, +                                   final ActionListener<GetSnapshotsResponse> listener) {, +            final String repository = request.repository();, +                snapshotInfoBuilder.addAll(snapshotsService.currentSnapshots(repository));, +                snapshotInfoBuilder.addAll(snapshotsService.snapshots(repository,, +                                                                      snapshotsService.snapshotIds(repository),, +                                                                      request.ignoreUnavailable()));, +                snapshotInfoBuilder.addAll(snapshotsService.currentSnapshots(repository));, +                final Map<String, SnapshotId> allSnapshotIds = new HashMap<>();, +                for (SnapshotInfo snapshotInfo : snapshotsService.currentSnapshots(repository)) {, +                    SnapshotId snapshotId = snapshotInfo.snapshotId();, +                    allSnapshotIds.put(snapshotId.getName(), snapshotId);, +                }, +                for (SnapshotId snapshotId : snapshotsService.snapshotIds(repository)) {, +                    allSnapshotIds.put(snapshotId.getName(), snapshotId);, +                }, +                final Set<SnapshotId> toResolve = new LinkedHashSet<>(); // maintain order, +                        if (allSnapshotIds.containsKey(snapshotOrPattern)) {, +                            toResolve.add(allSnapshotIds.get(snapshotOrPattern));, +                        } else if (request.ignoreUnavailable() == false) {, +                            throw new SnapshotMissingException(repository, snapshotOrPattern);, +                        }, +                        for (Map.Entry<String, SnapshotId> entry : allSnapshotIds.entrySet()) {, +                            if (Regex.simpleMatch(snapshotOrPattern, entry.getKey())) {, +                                toResolve.add(entry.getValue());, +, +                if (toResolve.isEmpty() && request.ignoreUnavailable() == false) {, +                    throw new SnapshotMissingException(repository, request.snapshots()[0]);, +, +                snapshotInfoBuilder.addAll(snapshotsService.snapshots(repository, new ArrayList<>(toResolve), request.ignoreUnavailable()));, +            listener.onResponse(new GetSnapshotsResponse(snapshotInfoBuilder));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.snapshots.Snapshot;, +                new SnapshotsService.SnapshotRequest(request.repository(), request.snapshot(), "create_snapshot [" + request.snapshot() + "]"), +                        public void onSnapshotCompletion(Snapshot snapshot, SnapshotInfo snapshotInfo) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshotInfo));, +                        public void onSnapshotFailure(Snapshot snapshot, Throwable t) {, +                            if (snapshot.getRepository().equals(request.repository()) &&, +                                    snapshot.getSnapshotId().getName().equals(request.snapshot())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        snapshotsService.deleteSnapshot(request.repository(), request.snapshot(), new SnapshotsService.DeleteSnapshotListener() {]