[+++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +import java.io.IOException;, +        final String[] indices = {"test-idx-1", "test-idx-2"};, +        createIndex(indices);, +        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1"), +            .setWaitForCompletion(true).setIndices(indices).get();, +        final SnapshotInfo snapshotInfo = createSnapshotResponse.getSnapshotInfo();, +        assertThat(snapshotInfo.successfulShards(), greaterThan(0));, +        assertThat(snapshotInfo.successfulShards(), equalTo(snapshotInfo.totalShards()));, +, +        RepositoriesService service = internalCluster().getInstance(RepositoriesService.class, internalCluster().getMasterName());, +        Repository repository = service.repository("test-repo");, +, +        final Map<String, IndexId> indexIds = repository.getRepositoryData().getIndices();, +        final Path indicesPath = repo.resolve("indices");, +        for (String index : indices) {, +            Path shardZero = indicesPath.resolve(indexIds.get(index).getId()).resolve("0");, +            if (randomBoolean()) {, +                Files.delete(shardZero.resolve("index-0"));, +            }, +            Files.delete(shardZero.resolve("snap-" + snapshotInfo.snapshotId().getUUID() + ".dat"));, +        }, +, +        for (String index : indices) {, +            assertTrue(Files.notExists(indicesPath.resolve(indexIds.get(index).getId())));, +        }, +            files.forEach(indexPath -> {, +                try {, +                    Files.delete(indexPath.resolve("0").resolve("index-0"));, +                } catch (IOException e) {, +                    throw new RuntimeException("Failed to delete expected file", e);, +                }, +            });]