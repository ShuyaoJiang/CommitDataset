[+++ b/docs/java-api/docs/update-by-query.asciidoc, +You can also perform these operations on multiple indices at once, similar to the search API:, +++ b/docs/java-api/docs/update-by-query.asciidoc, +You can also perform these operations on multiple indices at once, similar to the search API:, +++ b/modules/reindex/src/test/java/org/elasticsearch/client/documentation/ReindexDocumentationIT.java, +            updateByQuery.source("foo", "bar");, +++ b/docs/java-api/docs/update-by-query.asciidoc, +You can also perform these operations on multiple indices at once, similar to the search API:, +++ b/modules/reindex/src/test/java/org/elasticsearch/client/documentation/ReindexDocumentationIT.java, +            updateByQuery.source("foo", "bar");, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RestDeleteByQueryActionTests.java, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.rest.action.search.RestSearchAction;, +import org.elasticsearch.test.rest.RestActionTestCase;, +import org.junit.Before;, +public class RestDeleteByQueryActionTests extends RestActionTestCase {, +    private RestDeleteByQueryAction action;, +, +    @Before, +    public void setUpAction() {, +        action = new RestDeleteByQueryAction(Settings.EMPTY, controller());, +    }, +, +    public void testTypeInPath() throws IOException {, +        RestRequest request = new FakeRestRequest.Builder(xContentRegistry()), +            .withMethod(RestRequest.Method.POST), +            .withPath("/some_index/some_type/_delete_by_query"), +            .build();, +        dispatchRequest(request);, +, +        // checks the type in the URL is propagated correctly to the request object, +        // only works after the request is dispatched, so its params are filled from url., +        DeleteByQueryRequest dbqRequest = action.buildRequest(request);, +        assertArrayEquals(new String[]{"some_type"}, dbqRequest.getDocTypes());, +, +        // RestDeleteByQueryAction itself doesn't check for a deprecated type usage, +        // checking here for a deprecation from its internal search request, +        assertWarnings(RestSearchAction.TYPES_DEPRECATION_MESSAGE);, +    }, +, +        DeleteByQueryRequest request = action.buildRequest(new FakeRestRequest.Builder(new NamedXContentRegistry(emptyList())).build());, +++ b/docs/java-api/docs/update-by-query.asciidoc, +You can also perform these operations on multiple indices at once, similar to the search API:, +++ b/modules/reindex/src/test/java/org/elasticsearch/client/documentation/ReindexDocumentationIT.java, +            updateByQuery.source("foo", "bar");, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RestDeleteByQueryActionTests.java, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.rest.action.search.RestSearchAction;, +import org.elasticsearch.test.rest.RestActionTestCase;, +import org.junit.Before;, +public class RestDeleteByQueryActionTests extends RestActionTestCase {, +    private RestDeleteByQueryAction action;, +, +    @Before, +    public void setUpAction() {, +        action = new RestDeleteByQueryAction(Settings.EMPTY, controller());, +    }, +, +    public void testTypeInPath() throws IOException {, +        RestRequest request = new FakeRestRequest.Builder(xContentRegistry()), +            .withMethod(RestRequest.Method.POST), +            .withPath("/some_index/some_type/_delete_by_query"), +            .build();, +        dispatchRequest(request);, +, +        // checks the type in the URL is propagated correctly to the request object, +        // only works after the request is dispatched, so its params are filled from url., +        DeleteByQueryRequest dbqRequest = action.buildRequest(request);, +        assertArrayEquals(new String[]{"some_type"}, dbqRequest.getDocTypes());, +, +        // RestDeleteByQueryAction itself doesn't check for a deprecated type usage, +        // checking here for a deprecation from its internal search request, +        assertWarnings(RestSearchAction.TYPES_DEPRECATION_MESSAGE);, +    }, +, +        DeleteByQueryRequest request = action.buildRequest(new FakeRestRequest.Builder(new NamedXContentRegistry(emptyList())).build());, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RestUpdateByQueryActionTests.java, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.rest.action.search.RestSearchAction;, +import org.elasticsearch.test.rest.RestActionTestCase;, +import org.junit.Before;, +public class RestUpdateByQueryActionTests extends RestActionTestCase {, +, +    private RestUpdateByQueryAction action;, +, +    @Before, +    public void setUpAction() {, +        action = new RestUpdateByQueryAction(Settings.EMPTY, controller());, +    }, +, +    public void testTypeInPath() throws IOException  {, +        RestRequest request = new FakeRestRequest.Builder(xContentRegistry()), +            .withMethod(RestRequest.Method.POST), +            .withPath("/some_index/some_type/_update_by_query"), +            .build();, +        dispatchRequest(request);, +, +        // checks the type in the URL is propagated correctly to the request object, +        // only works after the request is dispatched, so its params are filled from url., +        UpdateByQueryRequest ubqRequest = action.buildRequest(request);]