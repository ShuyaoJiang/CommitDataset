[+++ b/dev-tools/forbidden/all-signatures.txt, +, +java.nio.file.Paths @ Use PathUtils.get instead., +java.nio.file.FileSystems#getDefault() @ use PathUtils.getDefault instead., +++ b/dev-tools/forbidden/all-signatures.txt, +, +java.nio.file.Paths @ Use PathUtils.get instead., +java.nio.file.FileSystems#getDefault() @ use PathUtils.getDefault instead., +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.io.FileSystemUtils;, +import org.elasticsearch.common.io.PathUtils;, +                PidFile.create(PathUtils.get(pidFile), true);, +++ b/dev-tools/forbidden/all-signatures.txt, +, +java.nio.file.Paths @ Use PathUtils.get instead., +java.nio.file.FileSystems#getDefault() @ use PathUtils.getDefault instead., +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.io.FileSystemUtils;, +import org.elasticsearch.common.io.PathUtils;, +                PidFile.create(PathUtils.get(pidFile), true);, +++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +                        path = path.resolveSibling(path.getFileName().toString().concat(suffix));, +++ b/dev-tools/forbidden/all-signatures.txt, +, +java.nio.file.Paths @ Use PathUtils.get instead., +java.nio.file.FileSystems#getDefault() @ use PathUtils.getDefault instead., +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.io.FileSystemUtils;, +import org.elasticsearch.common.io.PathUtils;, +                PidFile.create(PathUtils.get(pidFile), true);, +++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +                        path = path.resolveSibling(path.getFileName().toString().concat(suffix));, +++ b/src/main/java/org/elasticsearch/common/io/PathUtils.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.io;, +, +import org.elasticsearch.common.SuppressForbidden;, +, +import java.net.URI;, +import java.nio.file.FileSystem;, +import java.nio.file.FileSystems;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +, +/** , + * Utilities for creating a Path from names,, + * or accessing the default FileSystem., + * <p>, + * This class allows the default filesystem to, + * be changed during tests., + */, +@SuppressForbidden(reason = "accesses the default filesystem by design"), +public final class PathUtils {, +    /** no instantiation */, +    private PathUtils() {}, +    , +    /** can be changed by tests */, +    static FileSystem DEFAULT = FileSystems.getDefault();, +    , +    /** , +     * Returns a {@code Path} from name components., +     * <p>, +     * This works just like {@code Paths.get()}., +     * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION, +     * UTILITY FUNCTION., +     * <p>, +     * Remember: this should almost never be used. Usually resolve, +     * a path against an existing one!, +     */, +    public static Path get(String first, String... more) {, +        return DEFAULT.getPath(first, more);, +    }, +    , +    /** , +     * Returns a {@code Path} from a URI, +     * <p>, +     * This works just like {@code Paths.get()}., +     * <p>, +     * Remember: this should almost never be used. Usually resolve, +     * a path against an existing one!, +     */, +    public static Path get(URI uri) {]