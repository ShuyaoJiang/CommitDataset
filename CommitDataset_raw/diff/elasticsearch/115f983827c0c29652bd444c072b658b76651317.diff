[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        // visible for testing, +        Builder() {, +                        final String value = getenv(placeholderName);, +        // visible for testing, +        String getenv(String placeholderName) {, +            return System.getenv(placeholderName);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        // visible for testing, +        Builder() {, +                        final String value = getenv(placeholderName);, +        // visible for testing, +        String getenv(String placeholderName) {, +            return System.getenv(placeholderName);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<String, ScriptMode> defaultInlineScriptModes;, +        Map<String, ScriptMode> inlineScriptModes = new HashMap<>();, +            inlineScriptModes.put(language, registration.getDefaultInlineScriptMode());, +        this.defaultInlineScriptModes = Collections.unmodifiableMap(inlineScriptModes);, +    Map<String, ScriptMode> getDefaultInlineScriptModes() {, +        return this.defaultInlineScriptModes;, +        private final ScriptMode defaultInlineScriptMode;, +            this(scriptEngineService, scriptEngineLanguage, ScriptMode.OFF);, +                                        ScriptMode defaultInlineScriptMode) {, +            this.defaultInlineScriptMode = defaultInlineScriptMode;, +        ScriptMode getDefaultInlineScriptMode() {, +            return defaultInlineScriptMode;, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        // visible for testing, +        Builder() {, +                        final String value = getenv(placeholderName);, +        // visible for testing, +        String getenv(String placeholderName) {, +            return System.getenv(placeholderName);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<String, ScriptMode> defaultInlineScriptModes;, +        Map<String, ScriptMode> inlineScriptModes = new HashMap<>();, +            inlineScriptModes.put(language, registration.getDefaultInlineScriptMode());, +        this.defaultInlineScriptModes = Collections.unmodifiableMap(inlineScriptModes);, +    Map<String, ScriptMode> getDefaultInlineScriptModes() {, +        return this.defaultInlineScriptModes;, +        private final ScriptMode defaultInlineScriptMode;, +            this(scriptEngineService, scriptEngineLanguage, ScriptMode.OFF);, +                                        ScriptMode defaultInlineScriptMode) {, +            this.defaultInlineScriptMode = defaultInlineScriptMode;, +        ScriptMode getDefaultInlineScriptMode() {, +            return defaultInlineScriptMode;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptMode.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.script;, +, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * Mode for a specific script, used for script settings., + * Defines whether a certain script or category of scripts can be executed or not., + */, +public enum ScriptMode {, +    ON("true"),, +    OFF("false");, +, +    private final String mode;, +, +    ScriptMode(String mode) {, +        this.mode = mode;, +    }, +, +    private static final Map<String, ScriptMode> SCRIPT_MODES;, +, +    static {, +        SCRIPT_MODES = new HashMap<>();]