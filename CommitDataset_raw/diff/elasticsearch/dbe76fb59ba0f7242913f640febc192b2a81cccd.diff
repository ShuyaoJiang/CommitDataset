[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    private final class Updater implements AbstractScopedSettings.SettingUpdater<T> {, +        public final void apply(T value, Settings current, Settings previous) {, +            logger.info("updating [{}] from [{}] to [{}]", key, getRaw(previous), getRaw(current));, +                        logger.info("updating [{}] from [{}] to [{}]", key, getRaw(previous), getRaw(current));, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    private final class Updater implements AbstractScopedSettings.SettingUpdater<T> {, +        public final void apply(T value, Settings current, Settings previous) {, +            logger.info("updating [{}] from [{}] to [{}]", key, getRaw(previous), getRaw(current));, +                        logger.info("updating [{}] from [{}] to [{}]", key, getRaw(previous), getRaw(current));, +++ b/core/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.SettingsModule;, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +import java.util.function.Function;, +, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return pluginList(TestPlugin.class); //, +    }, +, +    public static final class TestPlugin extends Plugin {, +        @Override, +        public String name() {, +            return "index-a-setting";, +        }, +, +        @Override, +        public String description() {, +            return "a plugin that adds a dynamic tst setting";, +        }, +, +        private static final Setting<String> INDEX_A = new Setting<>("index.a", "", Function.identity(), true, Setting.Scope.INDEX);, +        private static final Setting<String> INDEX_C = new Setting<>("index.c", "", Function.identity(), true, Setting.Scope.INDEX);, +        private static final Setting<String> INDEX_E = new Setting<>("index.e", "", Function.identity(), false, Setting.Scope.INDEX);, +, +, +        public void onModule(SettingsModule module) {, +            module.registerSetting(INDEX_A);, +            module.registerSetting(INDEX_C);, +            module.registerSetting(INDEX_E);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    private final class Updater implements AbstractScopedSettings.SettingUpdater<T> {, +        public final void apply(T value, Settings current, Settings previous) {, +            logger.info("updating [{}] from [{}] to [{}]", key, getRaw(previous), getRaw(current));, +                        logger.info("updating [{}] from [{}] to [{}]", key, getRaw(previous), getRaw(current));, +++ b/core/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.SettingsModule;, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +import java.util.function.Function;, +, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return pluginList(TestPlugin.class); //, +    }, +, +    public static final class TestPlugin extends Plugin {, +        @Override, +        public String name() {, +            return "index-a-setting";, +        }, +, +        @Override, +        public String description() {, +            return "a plugin that adds a dynamic tst setting";, +        }, +, +        private static final Setting<String> INDEX_A = new Setting<>("index.a", "", Function.identity(), true, Setting.Scope.INDEX);, +        private static final Setting<String> INDEX_C = new Setting<>("index.c", "", Function.identity(), true, Setting.Scope.INDEX);, +        private static final Setting<String> INDEX_E = new Setting<>("index.e", "", Function.identity(), false, Setting.Scope.INDEX);, +, +, +        public void onModule(SettingsModule module) {, +            module.registerSetting(INDEX_A);, +            module.registerSetting(INDEX_C);, +            module.registerSetting(INDEX_E);, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java, +            if (event.getLevel() == Level.INFO && message.contains("updating [index.merge.scheduler.max_thread_count] from [10000] to [1]")) {, +            if (event.getLevel() == Level.INFO && message.contains("updating [index.merge.scheduler.auto_throttle] from [true] to [false]")) {, +                             .put(MergeSchedulerConfig.AUTO_THROTTLE_SETTING.getKey(), "false")), +            assertThat(getSettingsResponse.getSetting("test", MergeSchedulerConfig.AUTO_THROTTLE_SETTING.getKey()), equalTo("false"));]