[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]ingest[/\\]SimulateDocumentBaseResult.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]xcontent[/\\]ObjectParser.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]AbstractHighlighterBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]HighlightBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]xcontent[/\\]ObjectParserTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]HighlightBuilderTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]ingest[/\\]SimulateDocumentBaseResult.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]xcontent[/\\]ObjectParser.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]AbstractHighlighterBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]HighlightBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]xcontent[/\\]ObjectParserTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]HighlightBuilderTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplainRequest.java, +    public int getShard() {, +    public boolean isPrimary() {, +        String currentFieldName = null;, +        String index = null;, +        Integer shard = null;, +        Boolean primary = null;, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if ("index".equals(currentFieldName)) {, +                    index = parser.text();, +                } else if ("shard".equals(currentFieldName)) {, +                    shard = parser.intValue();, +                } else if ("primary".equals(currentFieldName)) {, +                    primary = parser.booleanValue();, +                } else {, +                    throw new ElasticsearchParseException("unexpected field [" + currentFieldName + "] in allocation explain request");, +, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                // the object was started, +                continue;, +            } else {, +                throw new ElasticsearchParseException("unexpected token [" + token + "] in allocation explain request");, +            }, +        }, +, +        if (index == null && shard == null && primary == null) {, +            // If it was an empty body, use the "any unassigned shard" request, +            return new ClusterAllocationExplainRequest();, +        } else if (index == null || shard == null || primary == null) {, +            throw new ElasticsearchParseException("'index', 'shard', and 'primary' must be specified in allocation explain request");, +        }, +        return new ClusterAllocationExplainRequest(index, shard, primary);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]ingest[/\\]SimulateDocumentBaseResult.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]xcontent[/\\]ObjectParser.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]AbstractHighlighterBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]HighlightBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]xcontent[/\\]ObjectParserTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]highlight[/\\]HighlightBuilderTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplainRequest.java, +    public int getShard() {, +    public boolean isPrimary() {, +        String currentFieldName = null;, +        String index = null;, +        Integer shard = null;, +        Boolean primary = null;, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if ("index".equals(currentFieldName)) {, +                    index = parser.text();, +                } else if ("shard".equals(currentFieldName)) {, +                    shard = parser.intValue();, +                } else if ("primary".equals(currentFieldName)) {, +                    primary = parser.booleanValue();, +                } else {, +                    throw new ElasticsearchParseException("unexpected field [" + currentFieldName + "] in allocation explain request");, +, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                // the object was started, +                continue;, +            } else {, +                throw new ElasticsearchParseException("unexpected token [" + token + "] in allocation explain request");, +            }, +        }, +, +        if (index == null && shard == null && primary == null) {, +            // If it was an empty body, use the "any unassigned shard" request, +            return new ClusterAllocationExplainRequest();, +        } else if (index == null || shard == null || primary == null) {, +            throw new ElasticsearchParseException("'index', 'shard', and 'primary' must be specified in allocation explain request");, +        }, +        return new ClusterAllocationExplainRequest(index, shard, primary);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoResponse.java, +            builder.startObject(nodeInfo.getNode().id(), XContentBuilder.FieldCaseConversion.NONE);, +            builder.field("name", nodeInfo.getNode().name(), XContentBuilder.FieldCaseConversion.NONE);, +            builder.field("transport_address", nodeInfo.getNode().address().toString());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]ingest[/\\]SimulateDocumentBaseResult.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]xcontent[/\\]ObjectParser.java" checks="LineLength" />]