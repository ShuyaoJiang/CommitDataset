[+++ b/src/main/java/org/elasticsearch/common/util/concurrent/ConcurrentCollections.java, +import jsr166e.ConcurrentHashMapV8;, +    private final static boolean useConcurrentHashMapV8 = Boolean.parseBoolean(System.getProperty("es.useConcurrentHashMapV8", "false"));, +    static final int aggressiveConcurrencyLevel;, +, +    static {, +        aggressiveConcurrencyLevel = Math.max(Runtime.getRuntime().availableProcessors() * 2, 16);, +    }, +, +    /**, +     * Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps., +     */, +    public static <K, V> ConcurrentMap<K, V> newConcurrentMapWithAggressiveConcurrency() {, +        if (useConcurrentHashMapV8) {, +            return new ConcurrentHashMapV8<K, V>(16, 0.75f, aggressiveConcurrencyLevel);, +        }, +        return new ConcurrentHashMap<K, V>(16, 0.75f, aggressiveConcurrencyLevel);, +    }, +, +        if (useConcurrentHashMapV8) {, +            return new ConcurrentHashMapV8<K, V>();, +        }, +    /**, +     * Creates a new CHM with an aggressive concurrency level, aimed at highly updateable long living maps., +     */, +    public static <V> ConcurrentMapLong<V> newConcurrentMapLongWithAggressiveConcurrency() {, +        return new ConcurrentHashMapLong<V>(ConcurrentCollections.<Long, V>newConcurrentMapWithAggressiveConcurrency());, +    }, +, +        return new ConcurrentHashMapLong<V>(ConcurrentCollections.<Long, V>newConcurrentMap());, +        return new MapBackedSet<V>(ConcurrentCollections.<V, Boolean>newConcurrentMap());, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ConcurrentCollections.java, +import jsr166e.ConcurrentHashMapV8;, +    private final static boolean useConcurrentHashMapV8 = Boolean.parseBoolean(System.getProperty("es.useConcurrentHashMapV8", "false"));, +    static final int aggressiveConcurrencyLevel;, +, +    static {, +        aggressiveConcurrencyLevel = Math.max(Runtime.getRuntime().availableProcessors() * 2, 16);, +    }, +, +    /**, +     * Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps., +     */, +    public static <K, V> ConcurrentMap<K, V> newConcurrentMapWithAggressiveConcurrency() {, +        if (useConcurrentHashMapV8) {, +            return new ConcurrentHashMapV8<K, V>(16, 0.75f, aggressiveConcurrencyLevel);, +        }, +        return new ConcurrentHashMap<K, V>(16, 0.75f, aggressiveConcurrencyLevel);, +    }, +, +        if (useConcurrentHashMapV8) {, +            return new ConcurrentHashMapV8<K, V>();, +        }, +    /**, +     * Creates a new CHM with an aggressive concurrency level, aimed at highly updateable long living maps., +     */, +    public static <V> ConcurrentMapLong<V> newConcurrentMapLongWithAggressiveConcurrency() {, +        return new ConcurrentHashMapLong<V>(ConcurrentCollections.<Long, V>newConcurrentMapWithAggressiveConcurrency());, +    }, +, +        return new ConcurrentHashMapLong<V>(ConcurrentCollections.<Long, V>newConcurrentMap());, +        return new MapBackedSet<V>(ConcurrentCollections.<V, Boolean>newConcurrentMap());, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ConcurrentHashMapLong.java, +    public ConcurrentHashMapLong(ConcurrentMap<Long, T> map) {, +        this.map = map;, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ConcurrentCollections.java, +import jsr166e.ConcurrentHashMapV8;, +    private final static boolean useConcurrentHashMapV8 = Boolean.parseBoolean(System.getProperty("es.useConcurrentHashMapV8", "false"));, +    static final int aggressiveConcurrencyLevel;, +, +    static {, +        aggressiveConcurrencyLevel = Math.max(Runtime.getRuntime().availableProcessors() * 2, 16);, +    }, +, +    /**, +     * Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps., +     */, +    public static <K, V> ConcurrentMap<K, V> newConcurrentMapWithAggressiveConcurrency() {, +        if (useConcurrentHashMapV8) {, +            return new ConcurrentHashMapV8<K, V>(16, 0.75f, aggressiveConcurrencyLevel);, +        }, +        return new ConcurrentHashMap<K, V>(16, 0.75f, aggressiveConcurrencyLevel);, +    }, +, +        if (useConcurrentHashMapV8) {, +            return new ConcurrentHashMapV8<K, V>();, +        }, +    /**, +     * Creates a new CHM with an aggressive concurrency level, aimed at highly updateable long living maps., +     */, +    public static <V> ConcurrentMapLong<V> newConcurrentMapLongWithAggressiveConcurrency() {, +        return new ConcurrentHashMapLong<V>(ConcurrentCollections.<Long, V>newConcurrentMapWithAggressiveConcurrency());, +    }, +, +        return new ConcurrentHashMapLong<V>(ConcurrentCollections.<Long, V>newConcurrentMap());, +        return new MapBackedSet<V>(ConcurrentCollections.<V, Boolean>newConcurrentMap());, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ConcurrentHashMapLong.java, +    public ConcurrentHashMapLong(ConcurrentMap<Long, T> map) {, +        this.map = map;, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java]