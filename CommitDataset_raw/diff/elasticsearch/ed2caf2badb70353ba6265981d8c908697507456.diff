[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +        if (patterns == null || patterns.isEmpty()) {, +            throw new IllegalArgumentException("Index patterns must not be null or empty; got " + patterns);, +        }, +            out.writeString(patterns.get(0));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +        if (patterns == null || patterns.isEmpty()) {, +            throw new IllegalArgumentException("Index patterns must not be null or empty; got " + patterns);, +        }, +            out.writeString(patterns.get(0));, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaDataTests.java, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +    public void testValidateInvalidIndexPatterns() throws Exception {, +        final IllegalArgumentException emptyPatternError = expectThrows(IllegalArgumentException.class, () -> {, +            new IndexTemplateMetaData(randomRealisticUnicodeOfLengthBetween(5, 10), randomInt(), randomInt(),, +                Collections.emptyList(), Settings.EMPTY, ImmutableOpenMap.of(), ImmutableOpenMap.of(), ImmutableOpenMap.of());, +        });, +        assertThat(emptyPatternError.getMessage(), equalTo("Index patterns must not be null or empty; got []"));, +, +        final IllegalArgumentException nullPatternError = expectThrows(IllegalArgumentException.class, () -> {, +            new IndexTemplateMetaData(randomRealisticUnicodeOfLengthBetween(5, 10), randomInt(), randomInt(),, +                null, Settings.EMPTY, ImmutableOpenMap.of(), ImmutableOpenMap.of(), ImmutableOpenMap.of());, +        });, +        assertThat(nullPatternError.getMessage(), equalTo("Index patterns must not be null or empty; got null"));, +, +        final String templateWithEmptyPattern = "{\"index_patterns\" : [],\"order\" : 1000," +, +            "\"settings\" : {\"number_of_shards\" : 10,\"number_of_replicas\" : 1}," +, +            "\"mappings\" : {\"doc\" :" +, +            "{\"properties\":{\"" +, +            randomAlphaOfLength(10) + "\":{\"type\":\"text\"},\"" +, +            randomAlphaOfLength(10) + "\":{\"type\":\"keyword\"}}" +, +            "}}}";, +        try (XContentParser parser =, +                 XContentHelper.createParser(NamedXContentRegistry.EMPTY, new BytesArray(templateWithEmptyPattern), XContentType.JSON)) {, +            final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,, +                () -> IndexTemplateMetaData.Builder.fromXContent(parser, randomAlphaOfLengthBetween(1, 100)));, +            assertThat(ex.getMessage(), equalTo("Index patterns must not be null or empty; got []"));, +        }, +, +        final String templateWithoutPattern = "{\"order\" : 1000," +, +            "\"settings\" : {\"number_of_shards\" : 10,\"number_of_replicas\" : 1}," +, +            "\"mappings\" : {\"doc\" :" +, +            "{\"properties\":{\"" +, +            randomAlphaOfLength(10) + "\":{\"type\":\"text\"},\"" +, +            randomAlphaOfLength(10) + "\":{\"type\":\"keyword\"}}" +, +            "}}}";, +        try (XContentParser parser =, +                 XContentHelper.createParser(NamedXContentRegistry.EMPTY, new BytesArray(templateWithoutPattern), XContentType.JSON)) {, +            final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,, +                () -> IndexTemplateMetaData.Builder.fromXContent(parser, randomAlphaOfLengthBetween(1, 100)));, +            assertThat(ex.getMessage(), equalTo("Index patterns must not be null or empty; got null"));, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +        if (patterns == null || patterns.isEmpty()) {, +            throw new IllegalArgumentException("Index patterns must not be null or empty; got " + patterns);, +        }, +            out.writeString(patterns.get(0));, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaDataTests.java, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +    public void testValidateInvalidIndexPatterns() throws Exception {, +        final IllegalArgumentException emptyPatternError = expectThrows(IllegalArgumentException.class, () -> {, +            new IndexTemplateMetaData(randomRealisticUnicodeOfLengthBetween(5, 10), randomInt(), randomInt(),, +                Collections.emptyList(), Settings.EMPTY, ImmutableOpenMap.of(), ImmutableOpenMap.of(), ImmutableOpenMap.of());, +        });, +        assertThat(emptyPatternError.getMessage(), equalTo("Index patterns must not be null or empty; got []"));, +, +        final IllegalArgumentException nullPatternError = expectThrows(IllegalArgumentException.class, () -> {, +            new IndexTemplateMetaData(randomRealisticUnicodeOfLengthBetween(5, 10), randomInt(), randomInt(),, +                null, Settings.EMPTY, ImmutableOpenMap.of(), ImmutableOpenMap.of(), ImmutableOpenMap.of());, +        });, +        assertThat(nullPatternError.getMessage(), equalTo("Index patterns must not be null or empty; got null"));, +, +        final String templateWithEmptyPattern = "{\"index_patterns\" : [],\"order\" : 1000," +, +            "\"settings\" : {\"number_of_shards\" : 10,\"number_of_replicas\" : 1}," +, +            "\"mappings\" : {\"doc\" :" +, +            "{\"properties\":{\"" +, +            randomAlphaOfLength(10) + "\":{\"type\":\"text\"},\"" +, +            randomAlphaOfLength(10) + "\":{\"type\":\"keyword\"}}" +, +            "}}}";, +        try (XContentParser parser =, +                 XContentHelper.createParser(NamedXContentRegistry.EMPTY, new BytesArray(templateWithEmptyPattern), XContentType.JSON)) {, +            final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,, +                () -> IndexTemplateMetaData.Builder.fromXContent(parser, randomAlphaOfLengthBetween(1, 100)));, +            assertThat(ex.getMessage(), equalTo("Index patterns must not be null or empty; got []"));, +        }, +, +        final String templateWithoutPattern = "{\"order\" : 1000," +, +            "\"settings\" : {\"number_of_shards\" : 10,\"number_of_replicas\" : 1}," +, +            "\"mappings\" : {\"doc\" :" +, +            "{\"properties\":{\"" +, +            randomAlphaOfLength(10) + "\":{\"type\":\"text\"},\"" +, +            randomAlphaOfLength(10) + "\":{\"type\":\"keyword\"}}" +, +            "}}}";, +        try (XContentParser parser =, +                 XContentHelper.createParser(NamedXContentRegistry.EMPTY, new BytesArray(templateWithoutPattern), XContentType.JSON)) {, +            final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,, +                () -> IndexTemplateMetaData.Builder.fromXContent(parser, randomAlphaOfLengthBetween(1, 100)));, +            assertThat(ex.getMessage(), equalTo("Index patterns must not be null or empty; got null"));, +        }]