[+++ b/src/main/java/org/elasticsearch/common/joda/TimeZoneRounding.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.joda;, +, +import org.elasticsearch.common.unit.TimeValue;, +import org.joda.time.DateTimeConstants;, +import org.joda.time.DateTimeField;, +import org.joda.time.DateTimeZone;, +, +/**, + */, +public abstract class TimeZoneRounding {, +, +    public abstract long calc(long utcMillis);, +, +    public static Builder builder(DateTimeField field) {, +        return new Builder(field);, +    }, +, +    public static Builder builder(TimeValue interval) {, +        return new Builder(interval);, +    }, +, +    public static class Builder {, +, +        private DateTimeField field;, +        private long interval = -1;, +, +        private DateTimeZone preTz = DateTimeZone.UTC;, +        private DateTimeZone postTz = DateTimeZone.UTC;, +, +        private float factor = 1.0f;, +, +        public Builder(DateTimeField field) {, +            this.field = field;, +            this.interval = -1;, +        }, +, +        public Builder(TimeValue interval) {, +            this.field = null;, +            this.interval = interval.millis();, +        }, +, +        public Builder preZone(DateTimeZone preTz) {, +            this.preTz = preTz;, +            return this;, +        }, +, +        public Builder postZone(DateTimeZone postTz) {, +            this.postTz = postTz;, +            return this;, +        }, +, +        public Builder factor(float factor) {, +            this.factor = factor;, +            return this;, +        }, +, +        public TimeZoneRounding build() {, +            TimeZoneRounding timeZoneRounding;, +            if (field != null) {, +                if (preTz.equals(DateTimeZone.UTC) && postTz.equals(DateTimeZone.UTC)) {, +                    return new UTCTimeZoneRoundingFloor(field);, +                } else if (field.getDurationField().getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12) {, +                    timeZoneRounding = new TimeTimeZoneRoundingFloor(field, preTz, postTz);, +                } else {, +                    timeZoneRounding = new DayTimeZoneRoundingFloor(field, preTz, postTz);, +                }, +            } else {, +                if (preTz.equals(DateTimeZone.UTC) && postTz.equals(DateTimeZone.UTC)) {, +                    return new UTCIntervalTimeZoneRounding(interval);, +                } else if (interval < DateTimeConstants.MILLIS_PER_HOUR * 12) {, +                    timeZoneRounding = new TimeIntervalTimeZoneRounding(interval, preTz, postTz);, +                } else {, +                    timeZoneRounding = new DayIntervalTimeZoneRounding(interval, preTz, postTz);, +                }, +            }, +            if (factor != 1.0f) {, +                timeZoneRounding = new FactorTimeZoneRounding(timeZoneRounding, factor);, +            }, +            return timeZoneRounding;, +        }]