[+++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +    private static final IndexFieldData.Builder DISABLED_BUILDER = new IndexFieldData.Builder() {, +        @Override, +        public IndexFieldData<?> build(IndexSettings indexSettings, MappedFieldType fieldType, IndexFieldDataCache cache,, +                CircuitBreakerService breakerService, MapperService mapperService) {, +            throw new IllegalStateException("Field data loading is forbidden on [" + fieldType.name() + "]");, +        }, +    };, +, +        buildersByTypeBuilder.put("binary", DISABLED_BUILDER);, +                .put(Tuple.tuple("string", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("float", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("double", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("byte", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("short", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("int", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("long", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("geo_point", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("binary", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple(BooleanFieldMapper.CONTENT_TYPE, DISABLED_FORMAT), DISABLED_BUILDER), +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +    private static final IndexFieldData.Builder DISABLED_BUILDER = new IndexFieldData.Builder() {, +        @Override, +        public IndexFieldData<?> build(IndexSettings indexSettings, MappedFieldType fieldType, IndexFieldDataCache cache,, +                CircuitBreakerService breakerService, MapperService mapperService) {, +            throw new IllegalStateException("Field data loading is forbidden on [" + fieldType.name() + "]");, +        }, +    };, +, +        buildersByTypeBuilder.put("binary", DISABLED_BUILDER);, +                .put(Tuple.tuple("string", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("float", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("double", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("byte", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("short", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("int", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("long", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("geo_point", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("binary", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple(BooleanFieldMapper.CONTENT_TYPE, DISABLED_FORMAT), DISABLED_BUILDER), +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +    private static final IndexFieldData.Builder DISABLED_BUILDER = new IndexFieldData.Builder() {, +        @Override, +        public IndexFieldData<?> build(IndexSettings indexSettings, MappedFieldType fieldType, IndexFieldDataCache cache,, +                CircuitBreakerService breakerService, MapperService mapperService) {, +            throw new IllegalStateException("Field data loading is forbidden on [" + fieldType.name() + "]");, +        }, +    };, +, +        buildersByTypeBuilder.put("binary", DISABLED_BUILDER);, +                .put(Tuple.tuple("string", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("float", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("double", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("byte", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("short", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("int", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("long", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("geo_point", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("binary", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple(BooleanFieldMapper.CONTENT_TYPE, DISABLED_FORMAT), DISABLED_BUILDER), +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +    private static final IndexFieldData.Builder DISABLED_BUILDER = new IndexFieldData.Builder() {, +        @Override, +        public IndexFieldData<?> build(IndexSettings indexSettings, MappedFieldType fieldType, IndexFieldDataCache cache,, +                CircuitBreakerService breakerService, MapperService mapperService) {, +            throw new IllegalStateException("Field data loading is forbidden on [" + fieldType.name() + "]");, +        }, +    };, +, +        buildersByTypeBuilder.put("binary", DISABLED_BUILDER);, +                .put(Tuple.tuple("string", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("float", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("double", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("byte", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("short", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("int", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("long", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("geo_point", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple("binary", DISABLED_FORMAT), DISABLED_BUILDER), +                .put(Tuple.tuple(BooleanFieldMapper.CONTENT_TYPE, DISABLED_FORMAT), DISABLED_BUILDER), +++ /dev/null, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java, +, +    public void testDisabled() {, +        ThreadPool threadPool = new ThreadPool("random_threadpool_name");, +        StringFieldMapper.StringFieldType ft = new StringFieldMapper.StringFieldType();, +        try {, +            IndicesFieldDataCache cache = new IndicesFieldDataCache(Settings.EMPTY, null, threadPool);, +            IndexFieldDataService ifds = new IndexFieldDataService(IndexSettingsModule.newIndexSettings(new Index("test"), Settings.EMPTY), cache, null, null);, +            ft.setName("some_str");, +            ft.setFieldDataType(new FieldDataType("string", Settings.builder().put(FieldDataType.FORMAT_KEY, "disabled").build()));, +            try {, +                ifds.getForField(ft);, +                fail();, +            } catch (IllegalStateException e) {, +                assertThat(e.getMessage(), containsString("Field data loading is forbidden on [some_str]"));]