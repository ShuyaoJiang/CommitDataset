[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                        public void onShardFailedFailure(Exception e) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                        public void onShardFailedFailure(Exception e) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardFailed(observer, shardRoutingEntry, listener);, +    }, +, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        logger.trace("{} re-sending failed shard [{}], index UUID [{}], reason [{}]", shardRouting.shardId(), failure, shardRouting, indexUUID, message);, +        shardFailed(shardRouting, indexUUID, message, failure, listener);, +    }, +, +    private void sendShardFailed(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +            logger.warn("{} no master known to fail shard [{}]", shardRoutingEntry.getShardRouting().shardId(), shardRoutingEntry.getShardRouting());, +            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +                SHARD_FAILED_ACTION_NAME, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +                            logger.warn("{} unexpected failure while sending request to [{}] to fail shard [{}]", exp, shardRoutingEntry.getShardRouting().shardId(), masterNode, shardRoutingEntry);, +                            listener.onShardFailedFailure(exp);, +    protected void waitForNewMasterAndRetry(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +                sendShardFailed(observer, shardRoutingEntry, listener);, +                logger.warn("{} node closed while handling failed shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().getId(), shardRoutingEntry.getShardRouting());, +                listener.onShardFailedFailure(new NodeClosedException(clusterService.localNode()));, +    public void shardStarted(final ClusterState clusterState, final ShardRouting shardRouting, String indexUUID, final String reason) {, +        DiscoveryNode masterNode = clusterState.nodes().masterNode();, +        if (masterNode == null) {, +            logger.warn("{} no master known to start shard [{}]", shardRouting.shardId(), shardRouting);, +            return;, +        }, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason, null);, +        logger.debug("sending start shard [{}]", shardRoutingEntry);, +        transportService.sendRequest(masterNode,, +            SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason, null), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                @Override, +                public void handleException(TransportException exp) {, +                    logger.warn("{} failure sending start shard [{}] to [{}]", exp, shardRouting.shardId(), masterNode, shardRouting);, +                }, +            });, +         * @param e the unexpected cause of the failure on the master, +        default void onShardFailedFailure(final Exception e) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                        public void onShardFailedFailure(Exception e) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardFailed(observer, shardRoutingEntry, listener);, +    }, +, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        logger.trace("{} re-sending failed shard [{}], index UUID [{}], reason [{}]", shardRouting.shardId(), failure, shardRouting, indexUUID, message);, +        shardFailed(shardRouting, indexUUID, message, failure, listener);, +    }, +, +    private void sendShardFailed(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +            logger.warn("{} no master known to fail shard [{}]", shardRoutingEntry.getShardRouting().shardId(), shardRoutingEntry.getShardRouting());, +            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +                SHARD_FAILED_ACTION_NAME, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +                            logger.warn("{} unexpected failure while sending request to [{}] to fail shard [{}]", exp, shardRoutingEntry.getShardRouting().shardId(), masterNode, shardRoutingEntry);, +                            listener.onShardFailedFailure(exp);, +    protected void waitForNewMasterAndRetry(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +                sendShardFailed(observer, shardRoutingEntry, listener);, +                logger.warn("{} node closed while handling failed shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().getId(), shardRoutingEntry.getShardRouting());, +                listener.onShardFailedFailure(new NodeClosedException(clusterService.localNode()));, +    public void shardStarted(final ClusterState clusterState, final ShardRouting shardRouting, String indexUUID, final String reason) {, +        DiscoveryNode masterNode = clusterState.nodes().masterNode();, +        if (masterNode == null) {, +            logger.warn("{} no master known to start shard [{}]", shardRouting.shardId(), shardRouting);, +            return;, +        }, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason, null);, +        logger.debug("sending start shard [{}]", shardRoutingEntry);, +        transportService.sendRequest(masterNode,, +            SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason, null), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                @Override, +                public void handleException(TransportException exp) {, +                    logger.warn("{} failure sending start shard [{}] to [{}]", exp, shardRouting.shardId(), masterNode, shardRouting);, +                }, +            });, +         * @param e the unexpected cause of the failure on the master, +        default void onShardFailedFailure(final Exception e) {, +++ b/core/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                    shardStateAction.shardStarted(state, shardRouting, indexMetaData.getIndexUUID(),, +                            "master " + nodes.masterNode() + " marked shard as initializing, but shard state is [" + indexShard.state() + "], mark shard as started");, +                        shardStateAction.shardStarted(state, shardRouting, indexMetaData.getIndexUUID(), "after recovery from store");, +                        shardStateAction.shardStarted(state, shardRouting, indexMetaData.getIndexUUID(), "after recovery from repository");, +            shardStateAction.shardStarted(clusterService.state(), shardRouting, indexMetaData.getIndexUUID(), "after recovery (replica) from node [" + state.getSourceNode() + "]");, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                        public void onShardFailedFailure(Exception e) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardFailed(observer, shardRoutingEntry, listener);, +    }]