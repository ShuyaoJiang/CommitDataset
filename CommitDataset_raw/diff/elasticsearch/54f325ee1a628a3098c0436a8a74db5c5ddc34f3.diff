[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    boolean useFieldQueryWithQueryString();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    boolean useFieldQueryWithQueryString();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public boolean useFieldQueryWithQueryString() {, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    boolean useFieldQueryWithQueryString();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public boolean useFieldQueryWithQueryString() {, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +     * Use the field query created here when matching on numbers., +     */, +    @Override public boolean useFieldQueryWithQueryString() {, +        return true;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    boolean useFieldQueryWithQueryString();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public boolean useFieldQueryWithQueryString() {, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +     * Use the field query created here when matching on numbers., +     */, +    @Override public boolean useFieldQueryWithQueryString() {, +        return true;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/support/MapperQueryParser.java, +                FieldMapper mapper = fieldMappers.fieldMappers().mapper();, +                if (mapper != null) {, +                    Query query;, +                    if (mapper.useFieldQueryWithQueryString()) {, +                        query = fieldMappers.fieldMappers().mapper().fieldQuery(queryText);, +                    } else {, +                        query = super.getFieldQuery(mapper.names().indexName(), queryText);, +                    }, +        return newRangeQuery(field, part1, part2, inclusive);]