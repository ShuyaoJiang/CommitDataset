[+++ b/bin/service.bat, +"%JAVA_HOME%\bin\java" -version 2>&1 | find "64-Bit" >nul:, +++ b/bin/service.bat, +"%JAVA_HOME%\bin\java" -version 2>&1 | find "64-Bit" >nul:, +++ b/dev-tools/create-bwc-index.py, +                                                           'double_sort' : float(random.randint(0, 100)),, +                                                           'bool' : random.choice([True, False])}), +++ b/bin/service.bat, +"%JAVA_HOME%\bin\java" -version 2>&1 | find "64-Bit" >nul:, +++ b/dev-tools/create-bwc-index.py, +                                                           'double_sort' : float(random.randint(0, 100)),, +                                                           'bool' : random.choice([True, False])}), +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== Boolean fields, +, +Boolean fields used to have a string fielddata with `F` meaning `false` and `T`, +meaning `true`. They have been refactored to use numeric fielddata, with `0`, +for `false` and `1` for `true`. As a consequence, the format of the responses of, +the following APIs changed when applied to boolean fields: `0`/`1` is returned, +instead of `F`/`T`:, +, + - <<search-request-fielddata-fields,fielddata fields>>, + - <<search-request-sort,sort values>>, + - <<search-aggregations-bucket-terms-aggregation,terms aggregations>>, +, +In addition, terms aggregations use a custom formatter for boolean (like for, +dates and ip addresses, which are also backed by numbers) in order to return, +the user-friendly representation of boolean fields: `false`/`true`:, +, +[source,json], +---------------, +"buckets": [, +  {, +     "key": 0,, +     "key_as_string": "false",, +     "doc_count": 42, +  },, +  {, +     "key": 1,, +     "key_as_string": "true",, +     "doc_count": 12, +  }, +], +---------------, +, +++ b/bin/service.bat, +"%JAVA_HOME%\bin\java" -version 2>&1 | find "64-Bit" >nul:, +++ b/dev-tools/create-bwc-index.py, +                                                           'double_sort' : float(random.randint(0, 100)),, +                                                           'bool' : random.choice([True, False])}), +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== Boolean fields, +, +Boolean fields used to have a string fielddata with `F` meaning `false` and `T`, +meaning `true`. They have been refactored to use numeric fielddata, with `0`, +for `false` and `1` for `true`. As a consequence, the format of the responses of, +the following APIs changed when applied to boolean fields: `0`/`1` is returned, +instead of `F`/`T`:, +, + - <<search-request-fielddata-fields,fielddata fields>>, + - <<search-request-sort,sort values>>, + - <<search-aggregations-bucket-terms-aggregation,terms aggregations>>, +, +In addition, terms aggregations use a custom formatter for boolean (like for, +dates and ip addresses, which are also backed by numbers) in order to return, +the user-friendly representation of boolean fields: `false`/`true`:, +, +[source,json], +---------------, +"buckets": [, +  {, +     "key": 0,, +     "key_as_string": "false",, +     "doc_count": 42, +  },, +  {, +     "key": 1,, +     "key_as_string": "true",, +     "doc_count": 12, +  }, +], +---------------, +, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder field(String name, boolean... value) throws IOException {, +        startArray(name);, +        for (boolean o : value) {, +            value(o);, +        }, +        endArray();, +        return this;, +    }, +, +, +    public XContentBuilder field(XContentBuilderString name, boolean... value) throws IOException {, +        startArray(name);, +        for (boolean o : value) {, +            value(o);, +        }, +        endArray();]