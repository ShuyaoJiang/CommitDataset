[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +import org.elasticsearch.search.aggregations.bucket.DateScriptMocks.DateScriptsMockPlugin;, +import java.util.HashMap;, +import java.util.Map;, +                DateScriptsMockPlugin.class);, +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +import org.elasticsearch.search.aggregations.bucket.DateScriptMocks.DateScriptsMockPlugin;, +import java.util.HashMap;, +import java.util.Map;, +                DateScriptsMockPlugin.class);, +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateRangeIT.java, +import org.elasticsearch.search.aggregations.bucket.DateScriptMocks.DateScriptsMockPlugin;, +import java.util.HashMap;, +import java.util.Map;, +        return date(month, day, DateTimeZone.UTC);, +    }, +, +    private static DateTime date(int month, int day, DateTimeZone timezone) {, +        return new DateTime(2012, month, day, 0, 0, timezone);, +                DateScriptsMockPlugin.class);, +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +            rangeBuilder.script(new Script(DateScriptMocks.ExtractFieldScript.NAME, ScriptType.INLINE, "native", params));, +        String[] ids = DateTimeZone.getAvailableIDs().toArray(new String[DateTimeZone.getAvailableIDs().size()]);, +        DateTimeZone timezone = DateTimeZone.forID(randomFrom(ids));, +        int timeZoneOffset = timezone.getOffset(date(2, 15));, +        // if time zone is UTC (or equivalent), time zone suffix is "Z", else something like "+03:00", which we get with the "ZZ" format, +        String feb15Suffix = timeZoneOffset == 0 ? "Z" : date(2,15, timezone).toString("ZZ");, +        String mar15Suffix = timeZoneOffset == 0 ? "Z" : date(3,15, timezone).toString("ZZ");, +        assertThat((String) bucket.getKey(), equalTo("*-2012-02-15T00:00:00.000" + feb15Suffix));, +        assertThat(((DateTime) bucket.getTo()), equalTo(date(2, 15, timezone).toDateTime(DateTimeZone.UTC)));, +        assertThat(bucket.getToAsString(), equalTo("2012-02-15T00:00:00.000" + feb15Suffix));, +        assertThat((String) bucket.getKey(), equalTo("2012-02-15T00:00:00.000" + feb15Suffix +, +                "-2012-03-15T00:00:00.000" + mar15Suffix));, +        assertThat(((DateTime) bucket.getFrom()), equalTo(date(2, 15, timezone).toDateTime(DateTimeZone.UTC)));, +        assertThat(((DateTime) bucket.getTo()), equalTo(date(3, 15, timezone).toDateTime(DateTimeZone.UTC)));, +        assertThat(bucket.getFromAsString(), equalTo("2012-02-15T00:00:00.000" + feb15Suffix));, +        assertThat(bucket.getToAsString(), equalTo("2012-03-15T00:00:00.000" + mar15Suffix));, +        assertThat((String) bucket.getKey(), equalTo("2012-03-15T00:00:00.000" + mar15Suffix + "-*"));, +        assertThat(((DateTime) bucket.getFrom()), equalTo(date(3, 15, timezone).toDateTime(DateTimeZone.UTC)));, +        assertThat(bucket.getFromAsString(), equalTo("2012-03-15T00:00:00.000" + mar15Suffix));, +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                                .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                        .script(new Script(DateScriptMocks.ExtractFieldScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                        dateRange("range").script(new Script(DateScriptMocks.ExtractFieldScript.NAME, ScriptType.INLINE, "native", params)), +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +import org.elasticsearch.search.aggregations.bucket.DateScriptMocks.DateScriptsMockPlugin;, +import java.util.HashMap;, +import java.util.Map;, +                DateScriptsMockPlugin.class);, +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                        .script(new Script(DateScriptMocks.PlusOneMonthScript.NAME, ScriptType.INLINE, "native", params)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "date");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +        Map<String, Object> params = new HashMap<>();, +        params.put("fieldname", "dates");, +                .addAggregation(dateHistogram("histo").script(new Script(DateScriptMocks.ExtractFieldScript.NAME,, +                        ScriptType.INLINE, "native", params)).dateHistogramInterval(DateHistogramInterval.MONTH)), +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateRangeIT.java, +import org.elasticsearch.search.aggregations.bucket.DateScriptMocks.DateScriptsMockPlugin;, +import java.util.HashMap;]