[+++ b/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +        logger.debug("Refresh request executed for {}. Force: [{}].", indexShard.shardId(), request.force());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +        logger.debug("Refresh request executed for {}. Force: [{}].", indexShard.shardId(), request.force());, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +, +            if (logger.isDebugEnabled()) {, +                StringBuilder sb = new StringBuilder();, +                for (int i = 0; i < firstResults.length(); i++) {, +                    SearchShardTarget shard = firstResults.get(i).shardTarget();, +                    if (i > 0) {, +                        sb.append(",");, +                    }, +                    sb.append(shard);, +                }, +                logger.debug("Moving to second phase, based on results from: {}", sb);, +            }, +++ b/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +        logger.debug("Refresh request executed for {}. Force: [{}].", indexShard.shardId(), request.force());, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +, +            if (logger.isDebugEnabled()) {, +                StringBuilder sb = new StringBuilder();, +                for (int i = 0; i < firstResults.length(); i++) {, +                    SearchShardTarget shard = firstResults.get(i).shardTarget();, +                    if (i > 0) {, +                        sb.append(",");, +                    }, +                    sb.append(shard);, +                }, +                logger.debug("Moving to second phase, based on results from: {}", sb);, +            }, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +                    logger.debug("primary shard [{}] is not yet active or we do not know the node it is assigned to [{}]. Scheduling a retry.", shard.shardId(), shard.currentNodeId());]