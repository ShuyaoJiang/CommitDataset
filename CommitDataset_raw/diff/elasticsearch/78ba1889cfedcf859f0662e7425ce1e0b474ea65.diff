[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/230_composite.yml, +      version: " - 6.99.99", +      reason:  starting in 7.0 the composite aggregation throws an execption if the provided size is greater than search.max_buckets., +        catch: /.*Trying to create too many buckets.*/, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/230_composite.yml, +      version: " - 6.99.99", +      reason:  starting in 7.0 the composite aggregation throws an execption if the provided size is greater than search.max_buckets., +        catch: /.*Trying to create too many buckets.*/, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/MultiBucketConsumerService.java, +, +        public int getLimit() {, +            return limit;, +        }, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/230_composite.yml, +      version: " - 6.99.99", +      reason:  starting in 7.0 the composite aggregation throws an execption if the provided size is greater than search.max_buckets., +        catch: /.*Trying to create too many buckets.*/, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/MultiBucketConsumerService.java, +, +        public int getLimit() {, +            return limit;, +        }, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/SearchContextAggregations.java, +    public MultiBucketConsumer multiBucketConsumer() {, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/230_composite.yml, +      version: " - 6.99.99", +      reason:  starting in 7.0 the composite aggregation throws an execption if the provided size is greater than search.max_buckets., +        catch: /.*Trying to create too many buckets.*/, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/MultiBucketConsumerService.java, +, +        public int getLimit() {, +            return limit;, +        }, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/SearchContextAggregations.java, +    public MultiBucketConsumer multiBucketConsumer() {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/BinaryValuesSource.java, +    @Override, +    int hashCode(int slot) {, +        if (missingBucket && values.get(slot) == null) {, +            return 0;, +        } else {, +            return values.get(slot).hashCode();, +        }, +    }, +, +    @Override, +    int hashCodeCurrent() {, +        if (missingBucket && currentValue == null) {, +            return 0;, +        } else {, +            return currentValue.hashCode();, +        }, +    }, +, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/230_composite.yml, +      version: " - 6.99.99", +      reason:  starting in 7.0 the composite aggregation throws an execption if the provided size is greater than search.max_buckets., +        catch: /.*Trying to create too many buckets.*/, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/MultiBucketConsumerService.java, +, +        public int getLimit() {, +            return limit;, +        }, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/SearchContextAggregations.java, +    public MultiBucketConsumer multiBucketConsumer() {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/BinaryValuesSource.java, +    @Override, +    int hashCode(int slot) {, +        if (missingBucket && values.get(slot) == null) {, +            return 0;, +        } else {, +            return values.get(slot).hashCode();, +        }, +    }, +, +    @Override, +    int hashCodeCurrent() {, +        if (missingBucket && currentValue == null) {, +            return 0;, +        } else {, +            return currentValue.hashCode();, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregator.java, +import org.elasticsearch.search.aggregations.MultiBucketConsumerService;, +import static org.elasticsearch.search.aggregations.MultiBucketConsumerService.MAX_BUCKET_SETTING;, +, +        // check that the provided size is not greater than the search.max_buckets setting, +        int bucketLimit = context.aggregations().multiBucketConsumer().getLimit();, +        if (size > bucketLimit) {, +            throw new MultiBucketConsumerService.TooManyBucketsException("Trying to create too many buckets. Must be less than or equal" +, +                " to: [" + bucketLimit + "] but was [" + size + "]. This limit can be set by changing the [" + MAX_BUCKET_SETTING.getKey() +, +                "] cluster level setting.", bucketLimit);, +        }, +            this.sources[i] = createValuesSource(context.bigArrays(), context.searcher().getIndexReader(), sourceConfigs[i], size);, +        try {, +        } finally {, +    }, +        while (queue.size() > 0) {]