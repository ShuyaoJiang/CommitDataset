[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python",, +                    "elasticsearch-mapper-size", +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python",, +                    "elasticsearch-mapper-size", +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType));, +        public DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python",, +                    "elasticsearch-mapper-size", +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType));, +        public DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java, +        public static final DateMath DEFAULT = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER));, +        public DateMath(String format) {, +            this(new DateMathParser(Joda.forPattern(format)));, +        public DateMath(DateMathParser parser) {, +            return parser.parse(value, now);, +        public static DateMath mapper(DateFieldMapper.DateFieldType fieldType) {, +            return new DateMath(new DateMathParser(fieldType.dateTimeFormatter()));, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python",, +                    "elasticsearch-mapper-size", +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType));, +        public DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java, +        public static final DateMath DEFAULT = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER));, +        public DateMath(String format) {, +            this(new DateMathParser(Joda.forPattern(format)));, +        public DateMath(DateMathParser parser) {, +            return parser.parse(value, now);, +        public static DateMath mapper(DateFieldMapper.DateFieldType fieldType) {, +            return new DateMath(new DateMathParser(fieldType.dateTimeFormatter()));, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +    public Query rewrite(Query original) throws IOException {, +        try {, +            return in.rewrite(original);, +        } catch (Throwable t) {, +            searchContext.clearReleasables(Lifetime.COLLECTION);, +            throw ExceptionsHelper.convertToElastic(t);, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python",, +                    "elasticsearch-mapper-size", +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType));, +        public DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java, +        public static final DateMath DEFAULT = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER));, +        public DateMath(String format) {, +            this(new DateMathParser(Joda.forPattern(format)));, +        public DateMath(DateMathParser parser) {, +            return parser.parse(value, now);, +        public static DateMath mapper(DateFieldMapper.DateFieldType fieldType) {, +            return new DateMath(new DateMathParser(fieldType.dateTimeFormatter()));, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +    public Query rewrite(Query original) throws IOException {, +        try {, +            return in.rewrite(original);, +        } catch (Throwable t) {, +            searchContext.clearReleasables(Lifetime.COLLECTION);, +            throw ExceptionsHelper.convertToElastic(t);, +        }, +    }, +, +    @Override, +++ b/core/src/main/resources/org/elasticsearch/plugins/plugin-install.help, +    - elasticsearch-mapper-size, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python",, +                    "elasticsearch-mapper-size", +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType));, +        public DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java, +        public static final DateMath DEFAULT = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER));, +        public DateMath(String format) {, +            this(new DateMathParser(Joda.forPattern(format)));, +        public DateMath(DateMathParser parser) {, +            return parser.parse(value, now);, +        public static DateMath mapper(DateFieldMapper.DateFieldType fieldType) {, +            return new DateMath(new DateMathParser(fieldType.dateTimeFormatter()));, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +    public Query rewrite(Query original) throws IOException {, +        try {, +            return in.rewrite(original);, +        } catch (Throwable t) {, +            searchContext.clearReleasables(Lifetime.COLLECTION);]