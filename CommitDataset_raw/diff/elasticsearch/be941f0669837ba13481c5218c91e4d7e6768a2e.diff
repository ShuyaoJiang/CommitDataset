[+++ b/core/src/test/java/org/elasticsearch/action/IndicesRequestIT.java, +++ b/core/src/test/java/org/elasticsearch/action/IndicesRequestIT.java, +++ b/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java, +import static org.elasticsearch.index.query.QueryBuilders.andQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.index.query.QueryBuilders.notQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.CoreMatchers.notNullValue;, +++ b/core/src/test/java/org/elasticsearch/action/IndicesRequestIT.java, +++ b/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java, +import static org.elasticsearch.index.query.QueryBuilders.andQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.index.query.QueryBuilders.notQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.CoreMatchers.notNullValue;, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.termvectors;, +, +import com.carrotsearch.hppc.ObjectIntHashMap;, +import org.apache.lucene.analysis.payloads.PayloadHelper;, +import org.apache.lucene.document.FieldType;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.Fields;, +import org.apache.lucene.index.PostingsEnum;, +import org.apache.lucene.index.Terms;, +import org.apache.lucene.index.TermsEnum;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.ActionFuture;, +import org.elasticsearch.action.admin.indices.alias.Alias;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.lucene.uid.Versions;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.index.engine.VersionConflictEngineException;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.hamcrest.Matcher;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.ExecutionException;, +, +import static org.elasticsearch.common.settings.Settings.settingsBuilder;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertThrows;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.lessThan;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.Matchers.nullValue;, +, +public class GetTermVectorsIT extends AbstractTermVectorsTests {, +, +    @Test, +    public void testNoSuchDoc() throws Exception {, +        XContentBuilder mapping = jsonBuilder().startObject().startObject("type1"), +                .startObject("properties"), +                        .startObject("field"), +                            .field("type", "string"), +                            .field("term_vector", "with_positions_offsets_payloads"), +                        .endObject(), +                .endObject(), +                .endObject().endObject();, +        assertAcked(prepareCreate("test").addAlias(new Alias("alias")).addMapping("type1", mapping));, +, +        ensureYellow();, +]