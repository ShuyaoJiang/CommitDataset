[+++ b/.idea/misc.xml, +    <option name="OUTPUT_DIRECTORY" value="$PROJECT_DIR$/../../../tmp/tmp1" />, +    <option name="OTHER_OPTIONS" />, +++ b/.idea/misc.xml, +    <option name="OUTPUT_DIRECTORY" value="$PROJECT_DIR$/../../../tmp/tmp1" />, +    <option name="OTHER_OPTIONS" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +import static org.elasticsearch.util.settings.ImmutableSettings.*;, +                ImmutableSettings.Builder indexSettingsBuilder = settingsBuilder().putAll(indexSettings);, +++ b/.idea/misc.xml, +    <option name="OUTPUT_DIRECTORY" value="$PROJECT_DIR$/../../../tmp/tmp1" />, +    <option name="OTHER_OPTIONS" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +import static org.elasticsearch.util.settings.ImmutableSettings.*;, +                ImmutableSettings.Builder indexSettingsBuilder = settingsBuilder().putAll(indexSettings);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/ImmutableSettings.java, + * An immutable implementation of {@link Settings}., + *, +    /**, +     * Returns a builder to be used in order to build settings., +     */, +    /**, +     * A builder allowing to put different settings and then {@link #build()} an immutable, +     * settings implementation. Use {@link ImmutableSettings#settingsBuilder()} in order to, +     * construct it., +     */, +        private Builder() {, +        /**, +         * Returns a setting value based on the setting key., +         */, +        /**, +         * Sets a setting with the provided setting key and value., +         *, +         * @param key   The setting key, +         * @param value The setting value, +         * @return The builder, +         */, +        /**, +         * Sets a setting with the provided setting key and class as value., +         *, +         * @param key   The setting key, +         * @param clazz The setting class value, +         * @return The builder, +         */, +        /**, +         * Sets the setting with the provided setting key and the boolean value., +         *, +         * @param setting The setting key, +         * @param value   The boolean value, +         * @return The builder, +         */, +        /**, +         * Sets the setting with the provided setting key and the int value., +         *, +         * @param setting The setting key, +         * @param value   The int value, +         * @return The builder, +         */, +        /**, +         * Sets the setting with the provided setting key and the long value., +         *, +         * @param setting The setting key, +         * @param value   The long value, +         * @return The builder, +         */, +        /**, +         * Sets the setting with the provided setting key and the float value., +         *, +         * @param setting The setting key, +         * @param value   The float value, +         * @return The builder, +         */, +        /**, +         * Sets the setting with the provided setting key and the time value., +         *, +         * @param setting The setting key, +         * @param value   The time value, +         * @return The builder, +         */, +        /**, +         * Sets the setting with the provided setting key and the size value., +         *, +         * @param setting The setting key, +         * @param value   The size value, +         * @return The builder, +         */, +        /**, +         * Sets the setting group., +         */, +        /**, +         * Sets all the provided settings., +         */, +        /**, +         * Sets all the provided settings., +         */, +        /**, +         * Sets all the provided settings., +         */, +         * Loads settings from the actual string content that represents them using the, +         * {@link SettingsLoaderFactory#loaderFromSource(String)}.]