[+++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +import java.nio.file.Path;, +        public final Path publicKeyPath;, +        public final Path privateKeyPath;, +        protected KeyGenerator(Terminal terminal, Path publicKeyPath, Path privateKeyPath) {, +            Path publicKeyPath = Paths.get(commandLine.getOptionValue("publicKeyPath"));, +            Path privateKeyPath = Paths.get(commandLine.getOptionValue("privateKeyPath"));, +            if (Files.exists(privateKeyPath)) {, +            } else if (Files.exists(publicKeyPath)) {, +        private static KeyPair generateKeyPair(Path privateKeyPath, Path publicKeyPath) throws IOException, NoSuchAlgorithmException {, +            saveKeyPairToFiles(keyPair, privateKeyPath, publicKeyPath);, +    private static void saveKeyPairToFiles(KeyPair keyPair, Path privateKeyPath, Path publicKeyPath) throws IOException {, +        Files.write(privateKeyPath, writeEncryptedPrivateKey(keyPair.getPrivate()));, +        Files.write(publicKeyPath, writeEncryptedPublicKey(keyPair.getPublic()));, +++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +import java.nio.file.Path;, +        public final Path publicKeyPath;, +        public final Path privateKeyPath;, +        protected KeyGenerator(Terminal terminal, Path publicKeyPath, Path privateKeyPath) {, +            Path publicKeyPath = Paths.get(commandLine.getOptionValue("publicKeyPath"));, +            Path privateKeyPath = Paths.get(commandLine.getOptionValue("privateKeyPath"));, +            if (Files.exists(privateKeyPath)) {, +            } else if (Files.exists(publicKeyPath)) {, +        private static KeyPair generateKeyPair(Path privateKeyPath, Path publicKeyPath) throws IOException, NoSuchAlgorithmException {, +            saveKeyPairToFiles(keyPair, privateKeyPath, publicKeyPath);, +    private static void saveKeyPairToFiles(KeyPair keyPair, Path privateKeyPath, Path publicKeyPath) throws IOException {, +        Files.write(privateKeyPath, writeEncryptedPrivateKey(keyPair.getPrivate()));, +        Files.write(publicKeyPath, writeEncryptedPublicKey(keyPair.getPublic()));, +++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/LicenseGeneratorTool.java, +        public final Path publicKeyFilePath;, +        public final Path privateKeyFilePath;, +        public LicenseGenerator(Terminal terminal, Path publicKeyFilePath, Path privateKeyFilePath, Set<License> licenseSpecs) {, +            Path publicKeyPath = Paths.get(commandLine.getOptionValue("publicKeyPath"));, +            Path privateKeyPath = Paths.get(commandLine.getOptionValue("privateKeyPath"));, +            if (!Files.exists(privateKeyPath)) {, +            } else if (!Files.exists(publicKeyPath)) {, +                    if (!Files.exists(licenseSpecPath)) {, +++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +import java.nio.file.Path;, +        public final Path publicKeyPath;, +        public final Path privateKeyPath;, +        protected KeyGenerator(Terminal terminal, Path publicKeyPath, Path privateKeyPath) {, +            Path publicKeyPath = Paths.get(commandLine.getOptionValue("publicKeyPath"));, +            Path privateKeyPath = Paths.get(commandLine.getOptionValue("privateKeyPath"));, +            if (Files.exists(privateKeyPath)) {, +            } else if (Files.exists(publicKeyPath)) {, +        private static KeyPair generateKeyPair(Path privateKeyPath, Path publicKeyPath) throws IOException, NoSuchAlgorithmException {, +            saveKeyPairToFiles(keyPair, privateKeyPath, publicKeyPath);, +    private static void saveKeyPairToFiles(KeyPair keyPair, Path privateKeyPath, Path publicKeyPath) throws IOException {, +        Files.write(privateKeyPath, writeEncryptedPrivateKey(keyPair.getPrivate()));, +        Files.write(publicKeyPath, writeEncryptedPublicKey(keyPair.getPublic()));, +++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/LicenseGeneratorTool.java, +        public final Path publicKeyFilePath;, +        public final Path privateKeyFilePath;, +        public LicenseGenerator(Terminal terminal, Path publicKeyFilePath, Path privateKeyFilePath, Set<License> licenseSpecs) {, +            Path publicKeyPath = Paths.get(commandLine.getOptionValue("publicKeyPath"));, +            Path privateKeyPath = Paths.get(commandLine.getOptionValue("privateKeyPath"));, +            if (!Files.exists(privateKeyPath)) {, +            } else if (!Files.exists(publicKeyPath)) {, +                    if (!Files.exists(licenseSpecPath)) {, +++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/LicenseVerificationTool.java, +            String publicKeyPathString = commandLine.getOptionValue("publicKeyPath");, +                    if (!Files.exists(licensePath)) {, +            Path publicKeyPath = Paths.get(publicKeyPathString);, +            if (!Files.exists(publicKeyPath)) {, +            return new LicenseVerifier(terminal, licenses, publicKeyPath);, +++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +import java.nio.file.Path;, +        public final Path publicKeyPath;, +        public final Path privateKeyPath;, +        protected KeyGenerator(Terminal terminal, Path publicKeyPath, Path privateKeyPath) {, +            Path publicKeyPath = Paths.get(commandLine.getOptionValue("publicKeyPath"));, +            Path privateKeyPath = Paths.get(commandLine.getOptionValue("privateKeyPath"));, +            if (Files.exists(privateKeyPath)) {, +            } else if (Files.exists(publicKeyPath)) {, +        private static KeyPair generateKeyPair(Path privateKeyPath, Path publicKeyPath) throws IOException, NoSuchAlgorithmException {, +            saveKeyPairToFiles(keyPair, privateKeyPath, publicKeyPath);, +    private static void saveKeyPairToFiles(KeyPair keyPair, Path privateKeyPath, Path publicKeyPath) throws IOException {, +        Files.write(privateKeyPath, writeEncryptedPrivateKey(keyPair.getPrivate()));, +        Files.write(publicKeyPath, writeEncryptedPublicKey(keyPair.getPublic()));, +++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/LicenseGeneratorTool.java, +        public final Path publicKeyFilePath;, +        public final Path privateKeyFilePath;, +        public LicenseGenerator(Terminal terminal, Path publicKeyFilePath, Path privateKeyFilePath, Set<License> licenseSpecs) {, +            Path publicKeyPath = Paths.get(commandLine.getOptionValue("publicKeyPath"));, +            Path privateKeyPath = Paths.get(commandLine.getOptionValue("privateKeyPath"));, +            if (!Files.exists(privateKeyPath)) {, +            } else if (!Files.exists(publicKeyPath)) {, +                    if (!Files.exists(licenseSpecPath)) {, +++ b/licensor/src/main/java/org/elasticsearch/license/licensor/tools/LicenseVerificationTool.java, +            String publicKeyPathString = commandLine.getOptionValue("publicKeyPath");, +                    if (!Files.exists(licensePath)) {, +            Path publicKeyPath = Paths.get(publicKeyPathString);, +            if (!Files.exists(publicKeyPath)) {, +            return new LicenseVerifier(terminal, licenses, publicKeyPath);, +++ b/licensor/src/test/java/org/elasticsearch/license/licensor/tools/KeyPairGenerationToolTests.java, +import java.nio.file.Files;, +import java.nio.file.Path;, +        Path publicKeyFilePath = Paths.get(publicKeyPath);, +        Path privateKeyFilePath = Paths.get(privateKeyPath);]