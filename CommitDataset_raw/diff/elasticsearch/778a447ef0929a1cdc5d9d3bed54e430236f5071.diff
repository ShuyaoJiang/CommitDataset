[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +        return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +        return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java, +            case count: return valuesSource == null ? 0 : counts.get(owningBucketOrd);, +            case sum: return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +            case min: return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +            case max: return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +            case avg: return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +        return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java, +            case count: return valuesSource == null ? 0 : counts.get(owningBucketOrd);, +            case sum: return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +            case min: return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +            case max: return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +            case avg: return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +            case count: return valuesSource == null ? 0 : counts.get(owningBucketOrd);, +            case sum: return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +            case min: return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +            case max: return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +            case avg: return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +            case sum_of_squares: return valuesSource == null ? 0 : sumOfSqrs.get(owningBucketOrd);, +            case variance: return valuesSource == null ? Double.NaN : variance(owningBucketOrd);, +            case std_deviation: return valuesSource == null ? Double.NaN : Math.sqrt(variance(owningBucketOrd));, +                if (valuesSource == null) { return Double.NaN; }, +                if (valuesSource == null) { return Double.NaN; }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +        return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java, +            case count: return valuesSource == null ? 0 : counts.get(owningBucketOrd);, +            case sum: return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +            case min: return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +            case max: return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +            case avg: return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +            case count: return valuesSource == null ? 0 : counts.get(owningBucketOrd);, +            case sum: return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +            case min: return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +            case max: return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +            case avg: return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +            case sum_of_squares: return valuesSource == null ? 0 : sumOfSqrs.get(owningBucketOrd);, +            case variance: return valuesSource == null ? Double.NaN : variance(owningBucketOrd);, +            case std_deviation: return valuesSource == null ? Double.NaN : Math.sqrt(variance(owningBucketOrd));, +                if (valuesSource == null) { return Double.NaN; }, +                if (valuesSource == null) { return Double.NaN; }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/sum/SumAggregator.java, +        return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +        return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java, +            case count: return valuesSource == null ? 0 : counts.get(owningBucketOrd);, +            case sum: return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +            case min: return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +            case max: return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +            case avg: return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +            case count: return valuesSource == null ? 0 : counts.get(owningBucketOrd);, +            case sum: return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +            case min: return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);, +            case max: return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);, +            case avg: return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +            case sum_of_squares: return valuesSource == null ? 0 : sumOfSqrs.get(owningBucketOrd);, +            case variance: return valuesSource == null ? Double.NaN : variance(owningBucketOrd);, +            case std_deviation: return valuesSource == null ? Double.NaN : Math.sqrt(variance(owningBucketOrd));, +                if (valuesSource == null) { return Double.NaN; }, +                if (valuesSource == null) { return Double.NaN; }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/sum/SumAggregator.java, +        return valuesSource == null ? 0 : sums.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +                        throw new ParsingException(parser.getTokenLocation(), "Sort order [{}] not supported.", sortOrder);, +                    throw new ParsingException(parser.getTokenLocation(), "Option [{}] not supported.", currentFieldName);]