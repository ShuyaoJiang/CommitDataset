[+++ b/core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryBuilder.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +public class ConstantScoreQueryBuilder extends QueryBuilder<ConstantScoreQueryBuilder> implements BoostableQueryBuilder<ConstantScoreQueryBuilder> {, +    private float boost = 1.0f;, +    static final ConstantScoreQueryBuilder PROTOTYPE = new ConstantScoreQueryBuilder(null);, +     * A query that wraps another query and simply returns a constant score equal to the, +        this.filterBuilder = filterBuilder;, +     * @return the query that was wrapped in this constant score query, +    public QueryBuilder query() {, +        return this.filterBuilder;, +    /**, +     * @return the boost factor, +     */, +    public float boost() {, +        return this.boost;, +    }, +, +    public Query toQuery(QueryParseContext parseContext) throws QueryParsingException, IOException {, +        // current DSL allows empty inner filter clauses, we ignore them, +        if (filterBuilder == null) {, +            return null;, +        }, +, +        Query innerFilter = filterBuilder.toQuery(parseContext);, +        if (innerFilter == null ) {, +            // return null so that parent queries (e.g. bool) also ignore this, +            return null;, +        }, +, +        Query filter = new ConstantScoreQuery(filterBuilder.toQuery(parseContext));, +        filter.setBoost(boost);, +        return filter;, +    }, +, +    @Override, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(boost, filterBuilder);, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        ConstantScoreQueryBuilder other = (ConstantScoreQueryBuilder) obj;, +        return Objects.equals(boost, other.boost) &&, +                Objects.equals(filterBuilder, other.filterBuilder);, +    }, +, +    @Override, +    public ConstantScoreQueryBuilder readFrom(StreamInput in) throws IOException {, +        QueryBuilder innerFilterBuilder = in.readNamedWriteable();, +        ConstantScoreQueryBuilder constantScoreQueryBuilder = new ConstantScoreQueryBuilder(innerFilterBuilder);, +        constantScoreQueryBuilder.boost = in.readFloat();, +        return constantScoreQueryBuilder;, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeNamedWriteable(this.filterBuilder);, +        out.writeFloat(boost);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryBuilder.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +public class ConstantScoreQueryBuilder extends QueryBuilder<ConstantScoreQueryBuilder> implements BoostableQueryBuilder<ConstantScoreQueryBuilder> {, +    private float boost = 1.0f;, +    static final ConstantScoreQueryBuilder PROTOTYPE = new ConstantScoreQueryBuilder(null);, +     * A query that wraps another query and simply returns a constant score equal to the, +        this.filterBuilder = filterBuilder;, +     * @return the query that was wrapped in this constant score query, +    public QueryBuilder query() {, +        return this.filterBuilder;, +    /**, +     * @return the boost factor, +     */, +    public float boost() {, +        return this.boost;, +    }, +, +    public Query toQuery(QueryParseContext parseContext) throws QueryParsingException, IOException {, +        // current DSL allows empty inner filter clauses, we ignore them, +        if (filterBuilder == null) {, +            return null;, +        }, +, +        Query innerFilter = filterBuilder.toQuery(parseContext);, +        if (innerFilter == null ) {, +            // return null so that parent queries (e.g. bool) also ignore this, +            return null;, +        }, +]