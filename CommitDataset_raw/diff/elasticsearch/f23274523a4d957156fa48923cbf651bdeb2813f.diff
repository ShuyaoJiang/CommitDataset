[+++ b/docs/reference/search/benchmark.asciidoc, +`name`::            Unique name for the competition., +`iterations`::      Number of times to run the competitors. Defaults to `5`., +`concurrency`::     Within each iteration use this level of parallelism. Defaults to `5`., +`multiplier`::      Within each iteration run the query this many times. Defaults to `1000`., +`warmup`::          Perform warmup of query. Defaults to `true`., +`num_slowest`::     Record N slowest queries. Defaults to `1`., +`search_type`::     Type of search, e.g. "query_then_fetch", "dfs_query_then_fetch", "count". Defaults to `query_then_fetch`., +`requests`::        Query DSL describing search requests., +`clear_caches`::    Whether caches should be cleared on each iteration, and if so, how. Caches are not cleared by default., +`indices`::         Array of indices to search, e.g. ["my_index_1", "my_index_2", "my_index_3"]., +`types`::           Array of index types to search, e.g. ["my_type_1", "my_type_2"]., +`clear_caches`::                Set to 'false' to disable cache clearing completely., +`clear_caches.filter`::         Whether to clear the filter cache., +`clear_caches.field_data`::     Whether to clear the field data cache., +`clear_caches.id`::             Whether to clear the id cache., +`clear_caches.recycler`::       Whether to clear the recycler cache., +`clear_caches.fields`::         Array of fields to clear., +`clear_caches.filter_keys`::    Array of filter keys to clear., +`name`::                    Unique name for the benchmark., +`percentiles`::             Array of percentile values to report. Defaults to: [10, 25, 50, 75, 90, 99]., +        "types": [ "my_type_1" ],, +        "types": [ "my_type_2" ],, +++ b/docs/reference/search/benchmark.asciidoc, +`name`::            Unique name for the competition., +`iterations`::      Number of times to run the competitors. Defaults to `5`., +`concurrency`::     Within each iteration use this level of parallelism. Defaults to `5`., +`multiplier`::      Within each iteration run the query this many times. Defaults to `1000`., +`warmup`::          Perform warmup of query. Defaults to `true`., +`num_slowest`::     Record N slowest queries. Defaults to `1`., +`search_type`::     Type of search, e.g. "query_then_fetch", "dfs_query_then_fetch", "count". Defaults to `query_then_fetch`., +`requests`::        Query DSL describing search requests., +`clear_caches`::    Whether caches should be cleared on each iteration, and if so, how. Caches are not cleared by default., +`indices`::         Array of indices to search, e.g. ["my_index_1", "my_index_2", "my_index_3"]., +`types`::           Array of index types to search, e.g. ["my_type_1", "my_type_2"]., +`clear_caches`::                Set to 'false' to disable cache clearing completely., +`clear_caches.filter`::         Whether to clear the filter cache., +`clear_caches.field_data`::     Whether to clear the field data cache., +`clear_caches.id`::             Whether to clear the id cache., +`clear_caches.recycler`::       Whether to clear the recycler cache., +`clear_caches.fields`::         Array of fields to clear., +`clear_caches.filter_keys`::    Array of filter keys to clear., +`name`::                    Unique name for the benchmark., +`percentiles`::             Array of percentile values to report. Defaults to: [10, 25, 50, 75, 90, 99]., +        "types": [ "my_type_1" ],, +        "types": [ "my_type_2" ],, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkNodeResponse.java, +    public String benchmarkName() {, +        return benchmarkName;, +    }, +, +    public String errorMessage() {, +        return errorMessage;, +    }, +, +        errorMessage = in.readOptionalString();, +        out.writeOptionalString(errorMessage);, +++ b/docs/reference/search/benchmark.asciidoc, +`name`::            Unique name for the competition., +`iterations`::      Number of times to run the competitors. Defaults to `5`., +`concurrency`::     Within each iteration use this level of parallelism. Defaults to `5`., +`multiplier`::      Within each iteration run the query this many times. Defaults to `1000`., +`warmup`::          Perform warmup of query. Defaults to `true`., +`num_slowest`::     Record N slowest queries. Defaults to `1`., +`search_type`::     Type of search, e.g. "query_then_fetch", "dfs_query_then_fetch", "count". Defaults to `query_then_fetch`., +`requests`::        Query DSL describing search requests., +`clear_caches`::    Whether caches should be cleared on each iteration, and if so, how. Caches are not cleared by default., +`indices`::         Array of indices to search, e.g. ["my_index_1", "my_index_2", "my_index_3"]., +`types`::           Array of index types to search, e.g. ["my_type_1", "my_type_2"]., +`clear_caches`::                Set to 'false' to disable cache clearing completely., +`clear_caches.filter`::         Whether to clear the filter cache., +`clear_caches.field_data`::     Whether to clear the field data cache., +`clear_caches.id`::             Whether to clear the id cache., +`clear_caches.recycler`::       Whether to clear the recycler cache., +`clear_caches.fields`::         Array of fields to clear., +`clear_caches.filter_keys`::    Array of filter keys to clear., +`name`::                    Unique name for the benchmark., +`percentiles`::             Array of percentile values to report. Defaults to: [10, 25, 50, 75, 90, 99]., +        "types": [ "my_type_1" ],, +        "types": [ "my_type_2" ],, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkNodeResponse.java, +    public String benchmarkName() {, +        return benchmarkName;, +    }, +, +    public String errorMessage() {, +        return errorMessage;, +    }, +, +        errorMessage = in.readOptionalString();, +        out.writeOptionalString(errorMessage);, +++ b/src/main/java/org/elasticsearch/action/bench/AbortBenchmarkResponse.java, +    public List<AbortBenchmarkNodeResponse> getNodeResponses() {, +        return nodeResponses;, +    }, +, +    public String getBenchmarkName() {, +        return benchmarkName;, +    }, +]