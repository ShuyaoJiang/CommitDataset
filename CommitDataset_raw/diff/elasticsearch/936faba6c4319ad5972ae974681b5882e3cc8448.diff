[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RollupClient.java, +import org.elasticsearch.client.rollup.DeleteRollupJobRequest;, +import org.elasticsearch.client.rollup.DeleteRollupJobResponse;, +     * Delete a rollup job from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-delete-job.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public DeleteRollupJobResponse deleteRollupJob(DeleteRollupJobRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request,, +            RollupRequestConverters::deleteJob,, +            options,, +            DeleteRollupJobResponse::fromXContent,, +            Collections.emptySet());, +    }, +    /**, +     * Asynchronously delete a rollup job from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-delete-job.html">, +     *     The docs</a> for details., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void deleteRollupJobAsync(DeleteRollupJobRequest request,, +                                     RequestOptions options,, +                                     ActionListener<DeleteRollupJobResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request,, +            RollupRequestConverters::deleteJob,, +            options,, +            DeleteRollupJobResponse::fromXContent,, +            listener, Collections.emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RollupClient.java, +import org.elasticsearch.client.rollup.DeleteRollupJobRequest;, +import org.elasticsearch.client.rollup.DeleteRollupJobResponse;, +     * Delete a rollup job from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-delete-job.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public DeleteRollupJobResponse deleteRollupJob(DeleteRollupJobRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request,, +            RollupRequestConverters::deleteJob,, +            options,, +            DeleteRollupJobResponse::fromXContent,, +            Collections.emptySet());, +    }, +    /**, +     * Asynchronously delete a rollup job from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-delete-job.html">, +     *     The docs</a> for details., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void deleteRollupJobAsync(DeleteRollupJobRequest request,, +                                     RequestOptions options,, +                                     ActionListener<DeleteRollupJobResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request,, +            RollupRequestConverters::deleteJob,, +            options,, +            DeleteRollupJobResponse::fromXContent,, +            listener, Collections.emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RollupRequestConverters.java, +import org.apache.http.client.methods.HttpDelete;, +import org.elasticsearch.client.rollup.DeleteRollupJobRequest;, +, +    static Request deleteJob(final DeleteRollupJobRequest deleteRollupJobRequest) throws IOException {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("rollup"), +            .addPathPartAsIs("job"), +            .addPathPart(deleteRollupJobRequest.getId()), +            .build();, +        Request request = new Request(HttpDelete.METHOD_NAME, endpoint);, +        request.setEntity(createEntity(deleteRollupJobRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RollupClient.java, +import org.elasticsearch.client.rollup.DeleteRollupJobRequest;, +import org.elasticsearch.client.rollup.DeleteRollupJobResponse;, +     * Delete a rollup job from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-delete-job.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */]