[+++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(childrenConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(childrenConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import org.elasticsearch.index.search.child.*;, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(childrenConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import org.elasticsearch.index.search.child.*;, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +++ b/src/main/java/org/elasticsearch/index/query/HasParentFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(parentConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(childrenConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import org.elasticsearch.index.search.child.*;, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +++ b/src/main/java/org/elasticsearch/index/query/HasParentFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(parentConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(childrenConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import org.elasticsearch.index.search.child.*;, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +++ b/src/main/java/org/elasticsearch/index/query/HasParentFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(parentConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +++ b/src/main/java/org/elasticsearch/index/query/TopChildrenQueryParser.java, +import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;, +        Query innerQuery = null;, +                        innerQuery = parseContext.parseInnerQuery();, +        if (innerQuery == null) {, +        innerQuery.setBoost(boost);, +        innerQuery = new XFilteredQuery(innerQuery, parseContext.cacheFilter(childDocMapper.typeFilter(), null));, +        TopChildrenQuery query = new TopChildrenQuery(innerQuery, childType, parentType, scoreType, factor, incrementalFactor, parseContext.cacheRecycler());, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +        return query;, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(childrenConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import org.elasticsearch.index.search.child.*;, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +++ b/src/main/java/org/elasticsearch/index/query/HasParentFilterParser.java, +            parseContext.addNamedFilter(filterName, new CustomQueryWrappingFilter(parentConstantScoreQuery));, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +++ b/src/main/java/org/elasticsearch/index/query/TopChildrenQueryParser.java, +import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;, +        Query innerQuery = null;, +                        innerQuery = parseContext.parseInnerQuery();, +        if (innerQuery == null) {, +        innerQuery.setBoost(boost);, +        innerQuery = new XFilteredQuery(innerQuery, parseContext.cacheFilter(childDocMapper.typeFilter(), null));, +        TopChildrenQuery query = new TopChildrenQuery(innerQuery, childType, parentType, scoreType, factor, incrementalFactor, parseContext.cacheRecycler());, +            parseContext.addNamedFilter(queryName, new CustomQueryWrappingFilter(query));, +        return query;, +++ b/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java, +    @Test, +    public void testNamedFilters() throws Exception {, +        client().admin().indices().prepareCreate("test"), +                .setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)), +                .execute().actionGet();, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();, +        client().admin(), +                .indices(), +                .preparePutMapping("test"), +                .setType("child"), +                .setSource("_parent", "type=parent").execute().actionGet();, +, +        String parentId = "p1";, +        client().prepareIndex("test", "parent", parentId).setSource("p_field", "1").execute().actionGet();, +        client().prepareIndex("test", "child", "c1").setSource("c_field", "1").setParent(parentId).execute().actionGet();, +        client().admin().indices().prepareRefresh().execute().actionGet();, +, +        SearchResponse searchResponse = client().prepareSearch("test").setQuery(topChildrenQuery("child", termQuery("c_field", "1")).queryName("test")), +                .execute().actionGet();, +        assertHitCount(searchResponse, 1l);, +        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));, +        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo("test"));, +, +        searchResponse = client().prepareSearch("test").setQuery(hasChildQuery("child", termQuery("c_field", "1")).scoreType("max").queryName("test")), +                .execute().actionGet();, +        assertHitCount(searchResponse, 1l);, +        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));, +        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo("test"));, +, +        searchResponse = client().prepareSearch("test").setQuery(hasParentQuery("parent", termQuery("p_field", "1")).scoreType("score").queryName("test")), +                .execute().actionGet();, +        assertHitCount(searchResponse, 1l);, +        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));, +        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo("test"));, +]