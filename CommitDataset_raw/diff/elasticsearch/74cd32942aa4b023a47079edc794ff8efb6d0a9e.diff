[+++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +import org.apache.lucene.index.IndexOptions;, +    private boolean hasPositions(MappedFieldType fieldType) {, +        return fieldType.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;, +    }, +, +        if (hasPositions(fieldType)) {, +        } else {, +            builder.setAutoGenerateMultiTermSynonymsPhraseQuery(false);, +        }, +        @Override, +        protected Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {, +            if (hasPositions(mapper) == false) {, +                IllegalStateException exc =, +                    new IllegalStateException("field:[" + field + "] was indexed without position data; cannot run PhraseQuery");, +                if (lenient) {, +                    return newLenientFieldQuery(field, exc);, +                } else {, +                    throw exc;, +                }, +            }, +            return super.analyzePhrase(field, stream, slop);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +import org.apache.lucene.index.IndexOptions;, +    private boolean hasPositions(MappedFieldType fieldType) {, +        return fieldType.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;, +    }, +, +        if (hasPositions(fieldType)) {, +        } else {, +            builder.setAutoGenerateMultiTermSynonymsPhraseQuery(false);, +        }, +        @Override, +        protected Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {, +            if (hasPositions(mapper) == false) {, +                IllegalStateException exc =, +                    new IllegalStateException("field:[" + field + "] was indexed without position data; cannot run PhraseQuery");, +                if (lenient) {, +                    return newLenientFieldQuery(field, exc);, +                } else {, +                    throw exc;, +                }, +            }, +            return super.analyzePhrase(field, stream, slop);, +        }, +, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java, +        mapperService.merge("doc", new CompressedXContent(PutMappingRequest.buildFromSimplifiedDef(, +                "doc",, +                "string_boost", "type=text,boost=4", "string_no_pos",, +                "type=text,index_options=docs").string(), +            ),, +            MapperService.MergeReason.MAPPING_UPDATE, false);, +    }, +    public void testLenientPhraseQuery() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        QueryShardContext context = createShardContext();, +        MatchQuery b = new MatchQuery(context);, +        b.setLenient(true);, +        Query query = b.parse(Type.PHRASE, "string_no_pos", "foo bar");, +        assertThat(query, instanceOf(MatchNoDocsQuery.class));, +        assertThat(query.toString(),, +            containsString("field:[string_no_pos] was indexed without position data; cannot run PhraseQuery"));, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +import org.apache.lucene.index.IndexOptions;, +    private boolean hasPositions(MappedFieldType fieldType) {, +        return fieldType.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;, +    }, +, +        if (hasPositions(fieldType)) {, +        } else {, +            builder.setAutoGenerateMultiTermSynonymsPhraseQuery(false);, +        }, +        @Override, +        protected Query analyzePhrase(String field, TokenStream stream, int slop) throws IOException {, +            if (hasPositions(mapper) == false) {, +                IllegalStateException exc =, +                    new IllegalStateException("field:[" + field + "] was indexed without position data; cannot run PhraseQuery");, +                if (lenient) {, +                    return newLenientFieldQuery(field, exc);, +                } else {, +                    throw exc;, +                }, +            }, +            return super.analyzePhrase(field, stream, slop);, +        }, +, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java, +        mapperService.merge("doc", new CompressedXContent(PutMappingRequest.buildFromSimplifiedDef(, +                "doc",, +                "string_boost", "type=text,boost=4", "string_no_pos",, +                "type=text,index_options=docs").string(), +            ),, +            MapperService.MergeReason.MAPPING_UPDATE, false);, +    }, +    public void testLenientPhraseQuery() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        QueryShardContext context = createShardContext();]