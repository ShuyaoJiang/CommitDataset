[+++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +import org.apache.lucene.analysis.Analyzer;, +    // LUCENE 4 UPGRADE: We can get rid of the do while loop, since there is only one _uid value (live docs are taken into account), +            if (uid == null || uid.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {, +    // LUCENE 4 UPGRADE: We can get rid of the do while loop, since there is only one _uid value (live docs are taken into account), +            if (uid == null || uid.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {, +        super(name, UidFieldMapper.Defaults.UID_FIELD_TYPE);, +    public TokenStream tokenStream(Analyzer analyzer) throws IOException {, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +import org.apache.lucene.analysis.Analyzer;, +    // LUCENE 4 UPGRADE: We can get rid of the do while loop, since there is only one _uid value (live docs are taken into account), +            if (uid == null || uid.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {, +    // LUCENE 4 UPGRADE: We can get rid of the do while loop, since there is only one _uid value (live docs are taken into account), +            if (uid == null || uid.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {, +        super(name, UidFieldMapper.Defaults.UID_FIELD_TYPE);, +    public TokenStream tokenStream(Analyzer analyzer) throws IOException {, +++ b/src/test/java/org/elasticsearch/test/unit/common/lucene/uid/UidFieldTests.java, +import org.apache.lucene.index.*;, +import org.elasticsearch.index.mapper.internal.UidFieldMapper;, +        DirectoryReader directoryReader = DirectoryReader.open(writer, true);, +        AtomicReader atomicReader = SlowCompositeReaderWrapper.wrap(directoryReader);, +        MatcherAssert.assertThat(UidField.loadVersion(atomicReader.getContext(), new Term("_uid", "1")), equalTo(-1l));, +        doc.add(new Field("_uid", "1", UidFieldMapper.Defaults.UID_FIELD_TYPE));, +        directoryReader = DirectoryReader.openIfChanged(directoryReader);, +        atomicReader = SlowCompositeReaderWrapper.wrap(directoryReader);, +        assertThat(UidField.loadVersion(atomicReader.getContext(), new Term("_uid", "1")), equalTo(-2l));, +        assertThat(UidField.loadDocIdAndVersion(atomicReader.getContext(), new Term("_uid", "1")).version, equalTo(-2l));, +        directoryReader = DirectoryReader.openIfChanged(directoryReader);, +        atomicReader = SlowCompositeReaderWrapper.wrap(directoryReader);, +        assertThat(UidField.loadVersion(atomicReader.getContext(), new Term("_uid", "1")), equalTo(1l));, +        assertThat(UidField.loadDocIdAndVersion(atomicReader.getContext(), new Term("_uid", "1")).version, equalTo(1l));, +        directoryReader = DirectoryReader.openIfChanged(directoryReader);, +        atomicReader = SlowCompositeReaderWrapper.wrap(directoryReader);, +        assertThat(UidField.loadVersion(atomicReader.getContext(), new Term("_uid", "1")), equalTo(2l));, +        assertThat(UidField.loadDocIdAndVersion(atomicReader.getContext(), new Term("_uid", "1")).version, equalTo(2l));, +        directoryReader = DirectoryReader.openIfChanged(directoryReader);, +        atomicReader = SlowCompositeReaderWrapper.wrap(directoryReader);, +        assertThat(UidField.loadVersion(atomicReader.getContext(), new Term("_uid", "1")), equalTo(3l));, +        assertThat(UidField.loadDocIdAndVersion(atomicReader.getContext(), new Term("_uid", "1")).version, equalTo(3l));, +        directoryReader = DirectoryReader.openIfChanged(directoryReader);, +        atomicReader = SlowCompositeReaderWrapper.wrap(directoryReader);, +        assertThat(UidField.loadVersion(atomicReader.getContext(), new Term("_uid", "1")), equalTo(-1l));, +        assertThat(UidField.loadDocIdAndVersion(atomicReader.getContext(), new Term("_uid", "1")), nullValue());]