[+++ /dev/null, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.elasticsearch.common.lucene.search.XBooleanFilter;, +        } else if (sourceFilter instanceof XBooleanFilter) {, +            XBooleanFilter booleanFilter = (XBooleanFilter) sourceFilter;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.elasticsearch.common.lucene.search.XBooleanFilter;, +        } else if (sourceFilter instanceof XBooleanFilter) {, +            XBooleanFilter booleanFilter = (XBooleanFilter) sourceFilter;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/docset/OpenBitDocSet.java, +    public OpenBitSet set() {, +        return set;, +    }, +, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.elasticsearch.common.lucene.search.XBooleanFilter;, +        } else if (sourceFilter instanceof XBooleanFilter) {, +            XBooleanFilter booleanFilter = (XBooleanFilter) sourceFilter;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/docset/OpenBitDocSet.java, +    public OpenBitSet set() {, +        return set;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.search;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.OpenBitSet;, +import org.apache.lucene.util.OpenBitSetDISI;, +import org.elasticsearch.common.lucene.docset.DocSet;, +import org.elasticsearch.common.lucene.docset.OpenBitDocSet;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +, +/**, + * @author kimchy (shay.banon), + */, +// LUCENE MONITOR: added to take into account DocSet that wraps OpenBitSet when optimizing or/and/..., +public class XBooleanFilter extends Filter {, +    ArrayList<Filter> shouldFilters = null;, +    ArrayList<Filter> notFilters = null;, +    ArrayList<Filter> mustFilters = null;, +, +    private DocIdSetIterator getDISI(ArrayList<Filter> filters, int index, IndexReader reader), +            throws IOException {, +        return filters.get(index).getDocIdSet(reader).iterator();, +    }, +, +    public List<Filter> getShouldFilters() {, +        return this.shouldFilters;, +    }, +, +    public List<Filter> getMustFilters() {, +        return this.mustFilters;, +    }, +, +    public List<Filter> getNotFilters() {, +        return this.notFilters;, +    }, +, +    /**, +     * Returns the a DocIdSetIterator representing the Boolean composition, +     * of the filters that have been added., +     */, +    @Override, +    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {, +        OpenBitSetDISI res = null;, +, +        if (shouldFilters != null) {, +            for (int i = 0; i < shouldFilters.size(); i++) {, +                if (res == null) {, +                    res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());, +                } else {, +                    DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);, +                    if (dis instanceof OpenBitSet) {]