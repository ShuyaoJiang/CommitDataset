[+++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ClusterStateTaskConfig;, +import org.elasticsearch.cluster.ClusterStateTaskExecutor;, +import org.elasticsearch.cluster.ClusterStateTaskListener;, +import org.elasticsearch.transport.EmptyTransportResponseHandler;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequest;, +import org.elasticsearch.transport.TransportRequestHandler;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportResponse;, +import org.elasticsearch.transport.TransportService;, +public class ShardStateAction extends AbstractComponent {, +    private class ShardFailedTransportHandler implements TransportRequestHandler<ShardRoutingEntry> {, +        public void messageReceived(ShardRoutingEntry request, TransportChannel channel) throws Exception {, +            handleShardFailureOnMaster(request);, +            channel.sendResponse(TransportResponse.Empty.INSTANCE);, +    private final ShardFailedClusterStateHandler shardFailedClusterStateHandler = new ShardFailedClusterStateHandler();, +    private void handleShardFailureOnMaster(final ShardRoutingEntry shardRoutingEntry) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.failure, shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +            "shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]",, +            ClusterStateTaskConfig.build(Priority.HIGH),, +            shardFailedClusterStateHandler,, +            shardFailedClusterStateHandler);, +    }, +, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String reason) {, +        DiscoveryNode masterNode = clusterService.state().nodes().masterNode();, +        if (masterNode == null) {, +            logger.warn("{} can't send shard started for {}, no master known.", shardRouting.shardId(), shardRouting);, +            return;, +        }, +        shardStarted(shardRouting, indexUUID, reason, masterNode);, +    }, +, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason, null);, +        logger.debug("{} sending shard started for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        transportService.sendRequest(masterNode,, +            SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason, null), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                @Override, +                public void handleException(TransportException exp) {, +                    logger.warn("failed to send shard started to [{}]", exp, masterNode);, +                }, +            });, +    }, +, +    class ShardStartedTransportHandler implements TransportRequestHandler<ShardRoutingEntry> {, +        @Override, +        public void messageReceived(ShardRoutingEntry request, TransportChannel channel) throws Exception {, +            handleShardStartedOnMaster(request);, +            channel.sendResponse(TransportResponse.Empty.INSTANCE);, +        }, +    private final ShardStartedClusterStateHandler shardStartedClusterStateHandler = new ShardStartedClusterStateHandler();, +    private void handleShardStartedOnMaster(final ShardRoutingEntry shardRoutingEntry) {, +        logger.debug("received shard started for {}", shardRoutingEntry);, +        clusterService.submitStateUpdateTask(, +            "shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.message + "]",, +            shardRoutingEntry,, +            ClusterStateTaskConfig.build(Priority.URGENT),, +            shardStartedClusterStateHandler,, +            shardStartedClusterStateHandler);, +        default void onSuccess() {, +        }, +, +        default void onShardFailedNoMaster() {, +        }, +, +        default void onShardFailedFailure(final DiscoveryNode master, final TransportException e) {, +        }]