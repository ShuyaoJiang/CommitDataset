[+++ b/docs/reference/modules/snapshots.asciidoc, +`max_restore_bytes_per_sec`:: Throttles per node restore rate. Defaults to `20mb` per second., +`max_snapshot_bytes_per_sec`:: Throttles per node snapshot rate. Defaults to `20mb` per second., +++ b/docs/reference/modules/snapshots.asciidoc, +`max_restore_bytes_per_sec`:: Throttles per node restore rate. Defaults to `20mb` per second., +`max_snapshot_bytes_per_sec`:: Throttles per node snapshot rate. Defaults to `20mb` per second., +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.store.RateLimiter;, +import java.io.InputStream;, +    private RateLimiter snapshotRateLimiter;, +, +    private RateLimiter restoreRateLimiter;, +, +    private RateLimiterListener rateLimiterListener;, +, +    private RateLimitingInputStream.Listener snapshotThrottleListener;, +, +    public void initialize(BlobStore blobStore, BlobPath basePath, ByteSizeValue chunkSize,, +                           RateLimiter snapshotRateLimiter, RateLimiter restoreRateLimiter,, +                           final RateLimiterListener rateLimiterListener) {, +        this.snapshotRateLimiter = snapshotRateLimiter;, +        this.restoreRateLimiter = restoreRateLimiter;, +        this.rateLimiterListener = rateLimiterListener;, +        this.snapshotThrottleListener = new RateLimitingInputStream.Listener() {, +            @Override, +            public void onPause(long nanos) {, +                rateLimiterListener.onSnapshotPause(nanos);, +            }, +        };, +                    InputStreamIndexInput inputStreamIndexInput = new ThreadSafeInputStreamIndexInput(indexInput, fileInfo.partBytes());, +                    long size = inputStreamIndexInput.actualSizeToRead();, +                    InputStream inputStream;, +                    if (snapshotRateLimiter != null) {, +                        inputStream = new RateLimitingInputStream(inputStreamIndexInput, snapshotRateLimiter, snapshotThrottleListener);, +                    } else {, +                        inputStream = inputStreamIndexInput;, +                    }, +                    blobContainer.writeBlob(fileInfo.partName(i), inputStream, size, new ImmutableBlobContainer.WriterListener() {, +                    if (restoreRateLimiter != null) {, +                        rateLimiterListener.onRestorePause(restoreRateLimiter.pause(size));, +                    }, +    public interface RateLimiterListener {, +        void onRestorePause(long nanos);, +, +        void onSnapshotPause(long nanos);, +    }, +, +++ b/docs/reference/modules/snapshots.asciidoc, +`max_restore_bytes_per_sec`:: Throttles per node restore rate. Defaults to `20mb` per second., +`max_snapshot_bytes_per_sec`:: Throttles per node snapshot rate. Defaults to `20mb` per second., +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.store.RateLimiter;, +import java.io.InputStream;, +    private RateLimiter snapshotRateLimiter;, +, +    private RateLimiter restoreRateLimiter;, +, +    private RateLimiterListener rateLimiterListener;, +, +    private RateLimitingInputStream.Listener snapshotThrottleListener;, +, +    public void initialize(BlobStore blobStore, BlobPath basePath, ByteSizeValue chunkSize,, +                           RateLimiter snapshotRateLimiter, RateLimiter restoreRateLimiter,, +                           final RateLimiterListener rateLimiterListener) {, +        this.snapshotRateLimiter = snapshotRateLimiter;, +        this.restoreRateLimiter = restoreRateLimiter;, +        this.rateLimiterListener = rateLimiterListener;, +        this.snapshotThrottleListener = new RateLimitingInputStream.Listener() {, +            @Override, +            public void onPause(long nanos) {, +                rateLimiterListener.onSnapshotPause(nanos);, +            }, +        };, +                    InputStreamIndexInput inputStreamIndexInput = new ThreadSafeInputStreamIndexInput(indexInput, fileInfo.partBytes());, +                    long size = inputStreamIndexInput.actualSizeToRead();, +                    InputStream inputStream;, +                    if (snapshotRateLimiter != null) {, +                        inputStream = new RateLimitingInputStream(inputStreamIndexInput, snapshotRateLimiter, snapshotThrottleListener);, +                    } else {, +                        inputStream = inputStreamIndexInput;, +                    }, +                    blobContainer.writeBlob(fileInfo.partName(i), inputStream, size, new ImmutableBlobContainer.WriterListener() {, +                    if (restoreRateLimiter != null) {, +                        rateLimiterListener.onRestorePause(restoreRateLimiter.pause(size));, +                    }, +    public interface RateLimiterListener {, +        void onRestorePause(long nanos);, +, +        void onSnapshotPause(long nanos);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/RateLimitingInputStream.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at]