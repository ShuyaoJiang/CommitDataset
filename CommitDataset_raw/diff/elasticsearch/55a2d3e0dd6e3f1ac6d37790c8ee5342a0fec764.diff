[+++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PublishableHttpResource.java, +import org.elasticsearch.client.Request;, +, +        final Request request = new Request("GET", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        final Set<Integer> expectedResponseCodes = Sets.union(exists, doesNotExist);, +        request.addParameter("ignore", expectedResponseCodes.stream().map(i -> i.toString()).collect(Collectors.joining(",")));, +            final Response response = client.performRequest(request);, +        final Request request = new Request("PUT", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        request.setEntity(body.get());, +, +            final Response response = client.performRequest(request);, +        Request request = new Request("DELETE", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        if (false == parameters.containsKey("ignore")) {, +            request.addParameter("ignore", Integer.toString(RestStatus.NOT_FOUND.getStatus()));, +        }, +            final Response response = client.performRequest(request);, +    private void addParameters(Request request) {, +        for (Map.Entry<String, String> param : parameters.entrySet()) {, +            request.addParameter(param.getKey(), param.getValue());, +        }, +    }, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PublishableHttpResource.java, +import org.elasticsearch.client.Request;, +, +        final Request request = new Request("GET", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        final Set<Integer> expectedResponseCodes = Sets.union(exists, doesNotExist);, +        request.addParameter("ignore", expectedResponseCodes.stream().map(i -> i.toString()).collect(Collectors.joining(",")));, +            final Response response = client.performRequest(request);, +        final Request request = new Request("PUT", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        request.setEntity(body.get());, +, +            final Response response = client.performRequest(request);, +        Request request = new Request("DELETE", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        if (false == parameters.containsKey("ignore")) {, +            request.addParameter("ignore", Integer.toString(RestStatus.NOT_FOUND.getStatus()));, +        }, +            final Response response = client.performRequest(request);, +    private void addParameters(Request request) {, +        for (Map.Entry<String, String> param : parameters.entrySet()) {, +            request.addParameter(param.getKey(), param.getValue());, +        }, +    }, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/VersionHttpResource.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("GET", "/");, +            request.addParameter("filter_path", "version.number");, +            return validateVersion(client.performRequest(request));, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/PublishableHttpResource.java, +import org.elasticsearch.client.Request;, +, +        final Request request = new Request("GET", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        final Set<Integer> expectedResponseCodes = Sets.union(exists, doesNotExist);, +        request.addParameter("ignore", expectedResponseCodes.stream().map(i -> i.toString()).collect(Collectors.joining(",")));, +            final Response response = client.performRequest(request);, +        final Request request = new Request("PUT", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        request.setEntity(body.get());, +, +            final Response response = client.performRequest(request);, +        Request request = new Request("DELETE", resourceBasePath + "/" + resourceName);, +        addParameters(request);, +        if (false == parameters.containsKey("ignore")) {, +            request.addParameter("ignore", Integer.toString(RestStatus.NOT_FOUND.getStatus()));, +        }, +            final Response response = client.performRequest(request);, +    private void addParameters(Request request) {, +        for (Map.Entry<String, String> param : parameters.entrySet()) {, +            request.addParameter(param.getKey(), param.getValue());, +        }, +    }, +++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/VersionHttpResource.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("GET", "/");, +            request.addParameter("filter_path", "version.number");, +            return validateVersion(client.performRequest(request));, +++ b/x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/AbstractPublishableHttpResourceTestCase.java, +import org.elasticsearch.client.Request;, +import org.mockito.ArgumentCaptor;, +import org.mockito.Mockito;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.mockito.Mockito.verify;, +        Request request = new Request("GET", endpoint);, +        addParameters(request, getParameters(resource.getParameters()));, +        when(client.performRequest(request)).thenThrow(e);, +        Request request = new Request("DELETE", endpoint);, +        addParameters(request, deleteParameters(resource.getParameters()));, +        when(client.performRequest(request)).thenThrow(e);, +        when(client.performRequest(Mockito.any(Request.class))).thenThrow(e);, +        ArgumentCaptor<Request> request = ArgumentCaptor.forClass(Request.class);, +        verify(client).performRequest(request.capture());, +        assertThat(request.getValue().getMethod(), is("PUT"));, +        assertThat(request.getValue().getEndpoint(), is(endpoint));, +        assertThat(request.getValue().getParameters(), is(resource.getParameters()));]