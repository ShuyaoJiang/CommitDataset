[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +                if (state == IndexShardState.CLOSED) {, +                    // ignore if closed...., +                    return;, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +                if (state == IndexShardState.CLOSED) {, +                    // ignore if closed...., +                    return;, +                }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/stress/rollingrestart/RollingRestartStressTest.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.stress.rollingrestart;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.count.CountResponse;, +import org.elasticsearch.common.io.FileSystemUtils;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.env.NodeEnvironment;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +import org.elasticsearch.node.internal.InternalNode;, +, +import java.io.File;, +import java.io.IOException;, +import java.util.concurrent.atomic.AtomicLong;, +, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class RollingRestartStressTest {, +, +    private final ESLogger logger = Loggers.getLogger(getClass());, +, +    private int numberOfNodes = 4;, +, +    private long initialNumberOfDocs = 100000;, +, +    private int indexers = 0;, +, +    private TimeValue indexerThrottle = TimeValue.timeValueMillis(100);, +, +    private Settings settings = ImmutableSettings.Builder.EMPTY_SETTINGS;, +, +    private TimeValue period = TimeValue.timeValueMinutes(20);, +, +    private boolean clearNodeWork = true;, +, +    private Node client;, +, +    private AtomicLong indexCounter = new AtomicLong();, +, +    public RollingRestartStressTest numberOfNodes(int numberOfNodes) {, +        this.numberOfNodes = numberOfNodes;, +        return this;, +    }, +, +    public RollingRestartStressTest initialNumberOfDocs(long initialNumberOfDocs) {, +        this.initialNumberOfDocs = initialNumberOfDocs;, +        return this;, +    }, +, +    public RollingRestartStressTest indexers(int indexers) {, +        this.indexers = indexers;, +        return this;, +    }, +, +    public RollingRestartStressTest indexerThrottle(TimeValue indexerThrottle) {, +        this.indexerThrottle = indexerThrottle;, +        return this;, +    }, +, +    public RollingRestartStressTest period(TimeValue period) {, +        this.period = period;, +        return this;]