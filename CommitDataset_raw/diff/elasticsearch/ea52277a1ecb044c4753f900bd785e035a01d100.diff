[+++ b/client/rest-high-level/build.gradle, +integTestRunner {, +  systemProperty 'tests.rest.cluster.username', System.getProperty('tests.rest.cluster.username', 'test_user'), +  systemProperty 'tests.rest.cluster.password', System.getProperty('tests.rest.cluster.password', 'test-password'), +}, +, +  setting 'xpack.security.enabled', 'true', +  setupCommand 'setupDummyUser',, +          'bin/elasticsearch-users',, +          'useradd', System.getProperty('tests.rest.cluster.username', 'test_user'),, +          '-p', System.getProperty('tests.rest.cluster.password', 'test-password'),, +          '-r', 'superuser', +  waitCondition = { node, ant ->, +    File tmpFile = new File(node.cwd, 'wait.success'), +    ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +            dest: tmpFile.toString(),, +            username: System.getProperty('tests.rest.cluster.username', 'test_user'),, +            password: System.getProperty('tests.rest.cluster.password', 'test-password'),, +            ignoreerrors: true,, +            retries: 10), +    return tmpFile.exists(), +  }, +++ b/client/rest-high-level/build.gradle, +integTestRunner {, +  systemProperty 'tests.rest.cluster.username', System.getProperty('tests.rest.cluster.username', 'test_user'), +  systemProperty 'tests.rest.cluster.password', System.getProperty('tests.rest.cluster.password', 'test-password'), +}, +, +  setting 'xpack.security.enabled', 'true', +  setupCommand 'setupDummyUser',, +          'bin/elasticsearch-users',, +          'useradd', System.getProperty('tests.rest.cluster.username', 'test_user'),, +          '-p', System.getProperty('tests.rest.cluster.password', 'test-password'),, +          '-r', 'superuser', +  waitCondition = { node, ant ->, +    File tmpFile = new File(node.cwd, 'wait.success'), +    ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +            dest: tmpFile.toString(),, +            username: System.getProperty('tests.rest.cluster.username', 'test_user'),, +            password: System.getProperty('tests.rest.cluster.password', 'test-password'),, +            ignoreerrors: true,, +            retries: 10), +    return tmpFile.exists(), +  }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +    private final SecurityClient securityClient = new SecurityClient(this);, +     * Provides methods for accessing the Elastic Licensed Security APIs that, +     * are shipped with the Elastic Stack distribution of Elasticsearch. All of, +     * these APIs will 404 if run against the OSS distribution of Elasticsearch., +     * <p>, +     * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api.html">, +     * Security APIs on elastic.co</a> for more information., +     *, +     * @return the client wrapper for making Security API calls, +     */, +    public SecurityClient security() {, +        return securityClient;, +    }, +, +    /**, +++ b/client/rest-high-level/build.gradle, +integTestRunner {, +  systemProperty 'tests.rest.cluster.username', System.getProperty('tests.rest.cluster.username', 'test_user'), +  systemProperty 'tests.rest.cluster.password', System.getProperty('tests.rest.cluster.password', 'test-password'), +}, +, +  setting 'xpack.security.enabled', 'true', +  setupCommand 'setupDummyUser',, +          'bin/elasticsearch-users',, +          'useradd', System.getProperty('tests.rest.cluster.username', 'test_user'),, +          '-p', System.getProperty('tests.rest.cluster.password', 'test-password'),, +          '-r', 'superuser', +  waitCondition = { node, ant ->, +    File tmpFile = new File(node.cwd, 'wait.success'), +    ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +            dest: tmpFile.toString(),, +            username: System.getProperty('tests.rest.cluster.username', 'test_user'),, +            password: System.getProperty('tests.rest.cluster.password', 'test-password'),, +            ignoreerrors: true,, +            retries: 10), +    return tmpFile.exists(), +  }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +    private final SecurityClient securityClient = new SecurityClient(this);, +     * Provides methods for accessing the Elastic Licensed Security APIs that, +     * are shipped with the Elastic Stack distribution of Elasticsearch. All of, +     * these APIs will 404 if run against the OSS distribution of Elasticsearch., +     * <p>, +     * See the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api.html">, +     * Security APIs on elastic.co</a> for more information., +     *, +     * @return the client wrapper for making Security API calls, +     */, +    public SecurityClient security() {, +        return securityClient;, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +/*]