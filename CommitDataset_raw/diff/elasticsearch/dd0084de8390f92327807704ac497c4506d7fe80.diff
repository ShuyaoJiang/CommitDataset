[+++ b/rest-api-spec/test/index/75_ttl.yaml, +++ b/rest-api-spec/test/index/75_ttl.yaml, +++ b/rest-api-spec/test/update/75_ttl.yaml, +++ b/rest-api-spec/test/index/75_ttl.yaml, +++ b/rest-api-spec/test/update/75_ttl.yaml, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/rest-api-spec/test/index/75_ttl.yaml, +++ b/rest-api-spec/test/update/75_ttl.yaml, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/src/test/java/org/elasticsearch/index/mapper/ttl/TTLMappingTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +    public void testSetValuesBackcompat() throws Exception {, +                .field("enabled", "yes").field("store", "no"), +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        DocumentMapper docMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse(mapping);, +        assertThat(docMapper.TTLFieldMapper().fieldType().stored(), equalTo(true)); // store was never serialized, so it was always lost, +, +                .field("enabled", "yes"), +++ b/rest-api-spec/test/index/75_ttl.yaml, +++ b/rest-api-spec/test/update/75_ttl.yaml, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/src/test/java/org/elasticsearch/index/mapper/ttl/TTLMappingTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +    public void testSetValuesBackcompat() throws Exception {, +                .field("enabled", "yes").field("store", "no"), +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        DocumentMapper docMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse(mapping);, +        assertThat(docMapper.TTLFieldMapper().fieldType().stored(), equalTo(true)); // store was never serialized, so it was always lost, +, +                .field("enabled", "yes"), +++ b/src/test/java/org/elasticsearch/ttl/SimpleTTLTests.java, +                        .startObject("_ttl").field("enabled", true).endObject(), +                        .startObject("_ttl").field("enabled", true).field("default", "1d").endObject(), +++ b/rest-api-spec/test/index/75_ttl.yaml, +++ b/rest-api-spec/test/update/75_ttl.yaml, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/src/test/java/org/elasticsearch/index/mapper/ttl/TTLMappingTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +    public void testSetValuesBackcompat() throws Exception {, +                .field("enabled", "yes").field("store", "no"), +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        DocumentMapper docMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse(mapping);, +        assertThat(docMapper.TTLFieldMapper().fieldType().stored(), equalTo(true)); // store was never serialized, so it was always lost, +, +                .field("enabled", "yes"), +++ b/src/test/java/org/elasticsearch/ttl/SimpleTTLTests.java, +                        .startObject("_ttl").field("enabled", true).endObject(), +                        .startObject("_ttl").field("enabled", true).field("default", "1d").endObject(), +++ b/src/test/java/org/elasticsearch/update/UpdateTests.java, +                        .startObject("_ttl").field("enabled", true).endObject(), +                        .startObject("_ttl").field("enabled", true).endObject(), +                        .startObject("_ttl").field("enabled", true).endObject()]