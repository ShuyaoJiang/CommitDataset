[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +            if (XPackSettings.SECURITY_ENABLED.get(settings)) {, +                // TODO we should really validate that all nodes have xpack installed and are consistently configured but this, +                // should happen on a different level and not in this code, +                } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings), +                    && newLicense.operationMode() != License.OperationMode.PLATINUM, +                    && newLicense.operationMode() != License.OperationMode.TRIAL) {, +                    throw new IllegalStateException("Cannot install a [" + newLicense.operationMode() +, +                        "] license unless FIPS mode is disabled");, +                }, +            }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +            if (XPackSettings.SECURITY_ENABLED.get(settings)) {, +                // TODO we should really validate that all nodes have xpack installed and are consistently configured but this, +                // should happen on a different level and not in this code, +                } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings), +                    && newLicense.operationMode() != License.OperationMode.PLATINUM, +                    && newLicense.operationMode() != License.OperationMode.TRIAL) {, +                    throw new IllegalStateException("Cannot install a [" + newLicense.operationMode() +, +                        "] license unless FIPS mode is disabled");, +                }, +            }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java, +    /** Setting for enabling or disabling FIPS mode. Defaults to false */, +    public static final Setting<Boolean> FIPS_MODE_ENABLED =, +        Setting.boolSetting("xpack.security.fips_mode.enabled", false, Property.NodeScope);, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +            if (XPackSettings.SECURITY_ENABLED.get(settings)) {, +                // TODO we should really validate that all nodes have xpack installed and are consistently configured but this, +                // should happen on a different level and not in this code, +                } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings), +                    && newLicense.operationMode() != License.OperationMode.PLATINUM, +                    && newLicense.operationMode() != License.OperationMode.TRIAL) {, +                    throw new IllegalStateException("Cannot install a [" + newLicense.operationMode() +, +                        "] license unless FIPS mode is disabled");, +                }, +            }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java, +    /** Setting for enabling or disabling FIPS mode. Defaults to false */, +    public static final Setting<Boolean> FIPS_MODE_ENABLED =, +        Setting.boolSetting("xpack.security.fips_mode.enabled", false, Property.NodeScope);, +, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/LicenseFIPSTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.license;, +, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.cluster.ClusterStateUpdateTask;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.protocol.xpack.license.PutLicenseResponse;, +, +import static org.hamcrest.Matchers.containsString;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.verify;, +, +public class LicenseFIPSTests extends AbstractLicenseServiceTestCase {, +, +    public void testFIPSCheckWithAllowedLicense() throws Exception {, +        License newLicense = TestUtils.generateSignedLicense(randomFrom("trial", "platinum"), TimeValue.timeValueHours(24L));, +        PutLicenseRequest request = new PutLicenseRequest();, +        request.acknowledge(true);, +        request.license(newLicense);, +        Settings settings = Settings.builder(), +            .put("xpack.security.enabled", true), +            .put("xpack.security.transport.ssl.enabled", true), +            .put("xpack.security.fips_mode.enabled", randomBoolean()), +            .build();, +        XPackLicenseState licenseState = new XPackLicenseState(settings);, +, +        setInitialState(null, licenseState, settings);, +        licenseService.start();, +        PlainActionFuture<PutLicenseResponse> responseFuture = new PlainActionFuture<>();, +        licenseService.registerLicense(request, responseFuture);, +        verify(clusterService).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class));, +    }, +, +    public void testFIPSCheckWithoutAllowedLicense() throws Exception {, +        License newLicense = TestUtils.generateSignedLicense(randomFrom("gold", "standard"), TimeValue.timeValueHours(24L));, +        PutLicenseRequest request = new PutLicenseRequest();, +        request.acknowledge(true);, +        request.license(newLicense);, +        Settings settings = Settings.builder(), +            .put("xpack.security.enabled", true), +            .put("xpack.security.transport.ssl.enabled", true), +            .put("xpack.security.fips_mode.enabled", true), +            .build();, +        XPackLicenseState licenseState = new XPackLicenseState(settings);, +, +        setInitialState(null, licenseState, settings);, +        licenseService.start();]