[+++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import java.util.HashSet;, +import java.util.Set;, +        private final Set<String> names = new HashSet<>();, +        private final List<AggregatorFactory> factories = new ArrayList<>();, +            if (!names.add(factory.name)) {, +                throw new ElasticsearchIllegalArgumentException("Two sibling aggregations cannot have the same name: [" + factory.name + "]");, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import java.util.HashSet;, +import java.util.Set;, +        private final Set<String> names = new HashSet<>();, +        private final List<AggregatorFactory> factories = new ArrayList<>();, +            if (!names.add(factory.name)) {, +                throw new ElasticsearchIllegalArgumentException("Two sibling aggregations cannot have the same name: [" + factory.name + "]");, +            }, +++ b/src/test/java/org/elasticsearch/search/aggregations/ParsingTests.java, +import com.carrotsearch.randomizedtesting.generators.RandomStrings;, +    public void testSameAggregationName() throws Exception {, +        createIndex("idx");, +        ensureGreen();, +        final String name = RandomStrings.randomAsciiOfLength(getRandom(), 10);, +        client().prepareSearch("idx").setAggregations(JsonXContent.contentBuilder(), +            .startObject(), +                .startObject(name), +                    .startObject("terms"), +                        .field("field", "a"), +                    .endObject(), +                .endObject(), +                .startObject(name), +                    .startObject("terms"), +                        .field("field", "b"), +                    .endObject(), +                .endObject(), +            .endObject()).execute().actionGet();, +    }, +, +    @Test(expected=SearchPhaseExecutionException.class)]