[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=${numNodes}",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=${numNodes}",, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.transport.ReceiveTimeoutTransportException;, +    public static final String SHARD_FAILURE_TIMEOUT = "action.support.replication.shard.failure_timeout";, +, +    private final TimeValue shardFailedTimeout;, +        // TODO: set a default timeout, +        shardFailedTimeout = settings.getAsTime(SHARD_FAILURE_TIMEOUT, null);, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference, shardFailedTimeout);, +        private final TimeValue shardFailedTimeout;, +                                TransportChannel channel, Releasable indexShardReference, TimeValue shardFailedTimeout) {, +            this.shardFailedTimeout = shardFailedTimeout;, +                                logger.warn("{} failed to perform {} on node {}", exp, shardId, transportReplicaAction, node);, +                                shardStateAction.shardFailed(clusterService.state(), shard, indexUUID, "failed to perform " + transportReplicaAction + " on replica on node " + node, exp, shardFailedTimeout, new ReplicationFailedShardStateListener(nodeId, exp));, +                            }, +                        }, +                    }, +            );, +, +        public class ReplicationFailedShardStateListener implements ShardStateAction.Listener {, +            private final String nodeId;, +            private Throwable failure;, +, +            public ReplicationFailedShardStateListener(String nodeId, Throwable failure) {, +                this.nodeId = nodeId;, +                this.failure = failure;, +            }, +, +            @Override, +            public void onSuccess() {, +                onReplicaFailure(nodeId, failure);, +            }, +, +            @Override, +            public void onShardFailedNoMaster() {, +                onReplicaFailure(nodeId, failure);, +            }, +, +            @Override, +            public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +                if (e instanceof ReceiveTimeoutTransportException) {, +                    logger.trace("timeout sending shard failure to master [{}]", e, master);, +                }, +                onReplicaFailure(nodeId, failure);, +            }, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=${numNodes}",, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.transport.ReceiveTimeoutTransportException;, +    public static final String SHARD_FAILURE_TIMEOUT = "action.support.replication.shard.failure_timeout";, +, +    private final TimeValue shardFailedTimeout;, +        // TODO: set a default timeout, +        shardFailedTimeout = settings.getAsTime(SHARD_FAILURE_TIMEOUT, null);, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference, shardFailedTimeout);, +        private final TimeValue shardFailedTimeout;, +                                TransportChannel channel, Releasable indexShardReference, TimeValue shardFailedTimeout) {, +            this.shardFailedTimeout = shardFailedTimeout;, +                                logger.warn("{} failed to perform {} on node {}", exp, shardId, transportReplicaAction, node);, +                                shardStateAction.shardFailed(clusterService.state(), shard, indexUUID, "failed to perform " + transportReplicaAction + " on replica on node " + node, exp, shardFailedTimeout, new ReplicationFailedShardStateListener(nodeId, exp));, +                            }, +                        }, +                    }, +            );, +, +        public class ReplicationFailedShardStateListener implements ShardStateAction.Listener {, +            private final String nodeId;, +            private Throwable failure;, +, +            public ReplicationFailedShardStateListener(String nodeId, Throwable failure) {, +                this.nodeId = nodeId;, +                this.failure = failure;, +            }, +, +            @Override, +            public void onSuccess() {, +                onReplicaFailure(nodeId, failure);, +            }, +, +            @Override, +            public void onShardFailedNoMaster() {, +                onReplicaFailure(nodeId, failure);, +            }, +, +            @Override, +            public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +                if (e instanceof ReceiveTimeoutTransportException) {, +                    logger.trace("timeout sending shard failure to master [{}]", e, master);, +                }, +                onReplicaFailure(nodeId, failure);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +                    logger.trace("node: [{}], most available: total disk: {}, available disk: {} / least available: total disk: {}, available disk: {}",, +                            nodeId, mostAvailablePath.getTotal(), leastAvailablePath.getAvailable(),, +                            leastAvailablePath.getTotal(), leastAvailablePath.getAvailable());]