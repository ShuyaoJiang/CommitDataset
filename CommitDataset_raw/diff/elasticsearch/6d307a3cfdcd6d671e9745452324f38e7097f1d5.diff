[+++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace`., +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace`., +++ b/TESTING.asciidoc, +* sles-12, +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace`., +++ b/TESTING.asciidoc, +* sles-12, +++ b/Vagrantfile, +    suse_common config, +          apt-get update -o \, +            Dir::Etc::sourcelist="$(ls /etc/apt/sources.list.d/#{openjdk_list}.list)" \, +            -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"), +def suse_common(config), +    java_package: "java-1_8_0-openjdk-devel"), +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace`., +++ b/TESTING.asciidoc, +* sles-12, +++ b/Vagrantfile, +    suse_common config, +          apt-get update -o \, +            Dir::Etc::sourcelist="$(ls /etc/apt/sources.list.d/#{openjdk_list}.list)" \, +            -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"), +def suse_common(config), +    java_package: "java-1_8_0-openjdk-devel"), +++ b/core/pom.xml, +            <groupId>org.apache.lucene</groupId>, +            <artifactId>lucene-expressions</artifactId>, +            <optional>true</optional>, +        </dependency>, +        <dependency>, +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace`., +++ b/TESTING.asciidoc, +* sles-12, +++ b/Vagrantfile, +    suse_common config, +          apt-get update -o \, +            Dir::Etc::sourcelist="$(ls /etc/apt/sources.list.d/#{openjdk_list}.list)" \, +            -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"), +def suse_common(config), +    java_package: "java-1_8_0-openjdk-devel"), +++ b/core/pom.xml, +            <groupId>org.apache.lucene</groupId>, +            <artifactId>lucene-expressions</artifactId>, +            <optional>true</optional>, +        </dependency>, +        <dependency>, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace`., +++ b/TESTING.asciidoc, +* sles-12, +++ b/Vagrantfile, +    suse_common config, +          apt-get update -o \, +            Dir::Etc::sourcelist="$(ls /etc/apt/sources.list.d/#{openjdk_list}.list)" \, +            -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"), +def suse_common(config), +    java_package: "java-1_8_0-openjdk-devel"), +++ b/core/pom.xml, +            <groupId>org.apache.lucene</groupId>, +            <artifactId>lucene-expressions</artifactId>, +            <optional>true</optional>, +        </dependency>, +        <dependency>, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace`., +++ b/TESTING.asciidoc, +* sles-12, +++ b/Vagrantfile, +    suse_common config, +          apt-get update -o \, +            Dir::Etc::sourcelist="$(ls /etc/apt/sources.list.d/#{openjdk_list}.list)" \, +            -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"), +def suse_common(config), +    java_package: "java-1_8_0-openjdk-devel"), +++ b/core/pom.xml, +            <groupId>org.apache.lucene</groupId>, +            <artifactId>lucene-expressions</artifactId>, +            <optional>true</optional>, +        </dependency>, +        <dependency>]