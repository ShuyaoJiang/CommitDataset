[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/analysis/synonym/SynonymFilter.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.apache.lucene.analysis.synonym;, +, +import org.apache.lucene.analysis.Token;, +import org.apache.lucene.analysis.TokenFilter;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;, +import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;, +import org.apache.lucene.analysis.tokenattributes.TypeAttribute;, +import org.apache.lucene.util.AttributeSource;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.LinkedList;, +, +/**, + * SynonymFilter handles multi-token synonyms with variable position increment offsets., + * <p>, + * The matched tokens from the input stream may be optionally passed through (includeOrig=true), + * or discarded.  If the original tokens are included, the position increments may be modified, + * to retain absolute positions after merging with the synonym tokenstream., + * <p>, + * Generated synonyms will start at the same position as the first matched source token., + */, +// LUCENE MONITOR: Taken from 4.0, remove once upgraded, +public final class SynonymFilter extends TokenFilter {, +, +    private final SynonymMap map;  // Map<String, SynonymMap>, +    private Iterator<AttributeSource> replacement;  // iterator over generated tokens, +, +    public SynonymFilter(TokenStream in, SynonymMap map) {, +        super(in);, +        if (map == null), +            throw new IllegalArgumentException("map is required");, +, +        this.map = map;, +        // just ensuring these attributes exist..., +        addAttribute(CharTermAttribute.class);, +        addAttribute(PositionIncrementAttribute.class);, +        addAttribute(OffsetAttribute.class);, +        addAttribute(TypeAttribute.class);, +    }, +, +, +    /*, +    * Need to worry about multiple scenarios:, +    *  - need to go for the longest match, +    *    a b => foo      #shouldn't match if "a b" is followed by "c d", +    *    a b c d => bar, +    *  - need to backtrack - retry matches for tokens already read, +    *     a b c d => foo, +    *       b c => bar, +    *     If the input stream is "a b c x", one will consume "a b c d", +    *     trying to match the first rule... all but "a" should be, +    *     pushed back so a match may be made on "b c"., +    *  - don't try and match generated tokens (thus need separate queue), +    *    matching is not recursive., +    *  - handle optional generation of original tokens in all these cases,, +    *    merging token streams to preserve token positions., +    *  - preserve original positionIncrement of first matched token, +    */, +    @Override, +    public boolean incrementToken() throws IOException {, +        while (true) {, +            // if there are any generated tokens, return them... don't try any, +            // matches against them, as we specifically don't want recursion., +            if (replacement != null && replacement.hasNext()) {, +                copy(this, replacement.next());, +                return true;, +            }, +, +            // common case fast-path of first token not matching anything, +            AttributeSource firstTok = nextTok();, +            if (firstTok == null) return false;, +            CharTermAttribute termAtt = firstTok.addAttribute(CharTermAttribute.class);, +            SynonymMap result = map.submap != null ? map.submap.get(termAtt.buffer(), 0, termAtt.length()) : null;, +            if (result == null) {, +                copy(this, firstTok);, +                return true;]