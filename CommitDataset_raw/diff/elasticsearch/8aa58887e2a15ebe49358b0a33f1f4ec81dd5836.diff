[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityFeatureSetUsage.java, +, +    public Map<String, Object> getRealmsUsage() {, +        return Collections.unmodifiableMap(realmsUsage);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityFeatureSetUsage.java, +, +    public Map<String, Object> getRealmsUsage() {, +        return Collections.unmodifiableMap(realmsUsage);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Realm.java, +    public void usageStats(ActionListener<Map<String, Object>> listener) {, +        listener.onResponse(stats);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityFeatureSetUsage.java, +, +    public Map<String, Object> getRealmsUsage() {, +        return Collections.unmodifiableMap(realmsUsage);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Realm.java, +    public void usageStats(ActionListener<Map<String, Object>> listener) {, +        listener.onResponse(stats);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/SecurityFeatureSet.java, +        final AtomicReference<Map<String, Object>> realmsUsageRef = new AtomicReference<>();, +        final CountDown countDown = new CountDown(3);, +                listener.onResponse(new SecurityFeatureSetUsage(available(), enabled(), realmsUsageRef.get(),, +        final ActionListener<Map<String, Object>> realmsUsageListener =, +            ActionListener.wrap(realmsUsage -> {, +                realmsUsageRef.set(realmsUsage);, +                doCountDown.run();, +            }, listener::onFailure);, +, +            realmsUsageListener.onResponse(Collections.emptyMap());, +        } else {, +            realms.usageStats(realmsUsageListener);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityFeatureSetUsage.java, +, +    public Map<String, Object> getRealmsUsage() {, +        return Collections.unmodifiableMap(realmsUsage);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Realm.java, +    public void usageStats(ActionListener<Map<String, Object>> listener) {, +        listener.onResponse(stats);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/SecurityFeatureSet.java, +        final AtomicReference<Map<String, Object>> realmsUsageRef = new AtomicReference<>();, +        final CountDown countDown = new CountDown(3);, +                listener.onResponse(new SecurityFeatureSetUsage(available(), enabled(), realmsUsageRef.get(),, +        final ActionListener<Map<String, Object>> realmsUsageListener =, +            ActionListener.wrap(realmsUsage -> {, +                realmsUsageRef.set(realmsUsage);, +                doCountDown.run();, +            }, listener::onFailure);, +, +            realmsUsageListener.onResponse(Collections.emptyMap());, +        } else {, +            realms.usageStats(realmsUsageListener);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/Realms.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.stream.Collectors;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.common.util.concurrent.CountDown;, +    public void usageStats(ActionListener<Map<String, Object>> listener) {, +        final AtomicBoolean failed = new AtomicBoolean(false);, +        final List<Realm> realmList = asList().stream(), +            .filter(r -> ReservedRealm.TYPE.equals(r.type()) == false), +            .collect(Collectors.toList());, +        final CountDown countDown = new CountDown(realmList.size());, +        final Runnable doCountDown = () -> {, +            if ((realmList.isEmpty() || countDown.countDown()) && failed.get() == false) {, +                listener.onResponse(realmMap);, +            }, +        };, +        if (realmList.isEmpty()) {, +            doCountDown.run();, +        } else {, +            for (Realm realm : realmList) {, +                realm.usageStats(ActionListener.wrap(stats -> {, +                        if (failed.get() == false) {, +                            synchronized (realmMap) {, +                                realmMap.compute(realm.type(), (key, value) -> {, +                                    if (value == null) {, +                                        Object realmTypeUsage = convertToMapOfLists(stats);, +                                        return realmTypeUsage;, +                                    }, +                                    assert value instanceof Map;, +                                    combineMaps((Map<String, Object>) value, stats);, +                                    return value;, +                                });, +                            }, +                            doCountDown.run();, +                        }, +                    },, +                    e -> {, +                        if (failed.compareAndSet(false, true)) {, +                            listener.onFailure(e);, +                        }, +                    }));, +            }, +        }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityFeatureSetUsage.java, +]