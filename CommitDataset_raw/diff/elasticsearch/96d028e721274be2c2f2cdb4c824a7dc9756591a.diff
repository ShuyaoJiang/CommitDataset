[+++ b/src/main/java/org/elasticsearch/index/engine/SegmentsStats.java, +import org.apache.lucene.util.Version;, +import org.elasticsearch.common.lucene.Lucene;, +    static {, +        assert Version.LUCENE_46.onOrAfter(Lucene.VERSION); // remove special -1 handling below, +    }, +, +        // replace me with, +        // "this.memoryInBytes += memoryInBytes;", +        // upon upgrade to Lucene 4.7, +        if (memoryInBytes == -1) {, +            this.memoryInBytes = -1;, +        } else if (this.memoryInBytes != -1) {, +    }, +        add(mergeStats.count, mergeStats.memoryInBytes);, +++ b/src/main/java/org/elasticsearch/index/engine/SegmentsStats.java, +import org.apache.lucene.util.Version;, +import org.elasticsearch.common.lucene.Lucene;, +    static {, +        assert Version.LUCENE_46.onOrAfter(Lucene.VERSION); // remove special -1 handling below, +    }, +, +        // replace me with, +        // "this.memoryInBytes += memoryInBytes;", +        // upon upgrade to Lucene 4.7, +        if (memoryInBytes == -1) {, +            this.memoryInBytes = -1;, +        } else if (this.memoryInBytes != -1) {, +    }, +        add(mergeStats.count, mergeStats.memoryInBytes);, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +import org.apache.lucene.codecs.lucene3x.Lucene3xCodec;, +import org.apache.lucene.util.Version;, +    static {, +        assert Version.LUCENE_46.onOrAfter(Lucene.VERSION); // Lucene 4.7 fixed Lucene 3.X RAM usage estimations, see LUCENE-5462, +    }, +        final SegmentReader segmentReader = SegmentReaderUtils.segmentReader(reader.reader());, +        if (segmentReader.getSegmentInfo().info.getCodec() instanceof Lucene3xCodec) {, +            // https://issues.apache.org/jira/browse/LUCENE-5462, +            // RAM usage estimation is very costly on Lucene 3.x segments, +            return -1;, +        }, +        return segmentReader.ramBytesUsed();]