[+++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinals.java, +        endOffsets.freeze();, +        ords.freeze();, +            final long startOffset = docId != 0 ? endOffsets.get(docId - 1) : 0;, +            final long endOffset = endOffsets.get(docId);, +            return startOffset == endOffset ? -1 : (int) ords.get(startOffset);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinals.java, +        endOffsets.freeze();, +        ords.freeze();, +            final long startOffset = docId != 0 ? endOffsets.get(docId - 1) : 0;, +            final long endOffset = endOffsets.get(docId);, +            return startOffset == endOffset ? -1 : (int) ords.get(startOffset);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/OrdinalsBuilder.java, +     * Whether to for the use of {@link MultiOrdinals} to store the ordinals for testing purposes., +     */, +    public static final String FORCE_MULTI_ORDINALS = "force_multi_ordinals";, +, +    /**, +        final boolean forceMultiOrdinals = settings.getAsBoolean(FORCE_MULTI_ORDINALS, false);, +        if (forceMultiOrdinals || numMultiValuedDocs > 0 || MultiOrdinals.significantlySmallerThanSinglePackedOrdinals(maxDoc, numDocsWithValue, getValueCount(), acceptableOverheadRatio)) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinals.java, +        endOffsets.freeze();, +        ords.freeze();, +            final long startOffset = docId != 0 ? endOffsets.get(docId - 1) : 0;, +            final long endOffset = endOffsets.get(docId);, +            return startOffset == endOffset ? -1 : (int) ords.get(startOffset);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/OrdinalsBuilder.java, +     * Whether to for the use of {@link MultiOrdinals} to store the ordinals for testing purposes., +     */, +    public static final String FORCE_MULTI_ORDINALS = "force_multi_ordinals";, +, +    /**, +        final boolean forceMultiOrdinals = settings.getAsBoolean(FORCE_MULTI_ORDINALS, false);, +        if (forceMultiOrdinals || numMultiValuedDocs > 0 || MultiOrdinals.significantlySmallerThanSinglePackedOrdinals(maxDoc, numDocsWithValue, getValueCount(), acceptableOverheadRatio)) {, +++ b/src/test/java/org/elasticsearch/index/fielddata/FSTPackedBytesStringFieldDataTests.java, +import org.elasticsearch.index.fielddata.ordinals.OrdinalsBuilder;, +        return new FieldDataType("string", ImmutableSettings.builder().put("format", "fst").put(OrdinalsBuilder.FORCE_MULTI_ORDINALS, randomBoolean()));, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinals.java, +        endOffsets.freeze();, +        ords.freeze();, +            final long startOffset = docId != 0 ? endOffsets.get(docId - 1) : 0;, +            final long endOffset = endOffsets.get(docId);, +            return startOffset == endOffset ? -1 : (int) ords.get(startOffset);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/OrdinalsBuilder.java, +     * Whether to for the use of {@link MultiOrdinals} to store the ordinals for testing purposes., +     */, +    public static final String FORCE_MULTI_ORDINALS = "force_multi_ordinals";, +, +    /**, +        final boolean forceMultiOrdinals = settings.getAsBoolean(FORCE_MULTI_ORDINALS, false);, +        if (forceMultiOrdinals || numMultiValuedDocs > 0 || MultiOrdinals.significantlySmallerThanSinglePackedOrdinals(maxDoc, numDocsWithValue, getValueCount(), acceptableOverheadRatio)) {, +++ b/src/test/java/org/elasticsearch/index/fielddata/FSTPackedBytesStringFieldDataTests.java, +import org.elasticsearch.index.fielddata.ordinals.OrdinalsBuilder;, +        return new FieldDataType("string", ImmutableSettings.builder().put("format", "fst").put(OrdinalsBuilder.FORCE_MULTI_ORDINALS, randomBoolean()));, +++ b/src/test/java/org/elasticsearch/index/fielddata/PagedBytesStringFieldDataTests.java, +import org.elasticsearch.index.fielddata.ordinals.OrdinalsBuilder;, +        return new FieldDataType("string", ImmutableSettings.builder().put("format", "paged_bytes").put(OrdinalsBuilder.FORCE_MULTI_ORDINALS, randomBoolean()));]