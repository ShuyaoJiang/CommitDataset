[+++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    , +    public ShardIterator primaryActiveShardIt() {, +        if (!primaryAsList.isEmpty() && !primaryAsList.get(0).active()) {, +            List<ShardRouting> primaryList = ImmutableList.of();, +            return new PlainShardIterator(shardId, primaryList);, +        }, +        return primaryShardIt();, +    }, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    , +    public ShardIterator primaryActiveShardIt() {, +        if (!primaryAsList.isEmpty() && !primaryAsList.get(0).active()) {, +            List<ShardRouting> primaryList = ImmutableList.of();, +            return new PlainShardIterator(shardId, primaryList);, +        }, +        return primaryShardIt();, +    }, +++ b/src/main/java/org/elasticsearch/cluster/routing/operation/plain/PlainOperationRouting.java, +                return indexShard.primaryActiveShardIt();, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    , +    public ShardIterator primaryActiveShardIt() {, +        if (!primaryAsList.isEmpty() && !primaryAsList.get(0).active()) {, +            List<ShardRouting> primaryList = ImmutableList.of();, +            return new PlainShardIterator(shardId, primaryList);, +        }, +        return primaryShardIt();, +    }, +++ b/src/main/java/org/elasticsearch/cluster/routing/operation/plain/PlainOperationRouting.java, +                return indexShard.primaryActiveShardIt();, +++ b/src/test/java/org/elasticsearch/test/integration/search/preference/SearchPreferenceTests.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.rest.RestStatus;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +    @Test // see #2896, +    public void testStopOneNodePreferenceWithRedState() throws InterruptedException {, +        startNode("server3");, +        client.admin().indices().prepareDelete().execute().actionGet();, +        client.admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", 10).put("index.number_of_replicas", 0)).execute().actionGet();, +        client.admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();, +        for (int i = 0; i < 10; i++) {, +            client.prepareIndex("test", "type1", ""+i).setSource("field1", "value1").execute().actionGet();, +        }, +        client.admin().indices().prepareRefresh().execute().actionGet();, +        closeNode("server3");, +        client.admin().cluster().prepareHealth().setWaitForStatus(ClusterHealthStatus.RED).execute().actionGet();, +        String[] preferences = new String[] {"_primary", "_local", "_primary_first", "_only_local", "_prefer_node:somenode", "_prefer_node:server2"};, +        for (String pref : preferences) {, +            SearchResponse searchResponse = client.prepareSearch().setSearchType(SearchType.COUNT).setPreference(pref).execute().actionGet();, +            assertThat(RestStatus.OK, equalTo(searchResponse.status()));, +            assertThat(pref, searchResponse.getFailedShards(), greaterThanOrEqualTo(0));, +            searchResponse = client.prepareSearch().setPreference(pref).execute().actionGet();, +            assertThat(RestStatus.OK, equalTo(searchResponse.status()));, +            assertThat(pref, searchResponse.getFailedShards(), greaterThanOrEqualTo(0));, +        }, +    }, +    , +]