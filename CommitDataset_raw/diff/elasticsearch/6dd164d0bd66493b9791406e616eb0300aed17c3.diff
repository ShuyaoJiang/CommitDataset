[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ZenDiscovery.MASTER_ELECTION_IGNORE_NON_MASTER_PINGS_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ZenDiscovery.MASTER_ELECTION_IGNORE_NON_MASTER_PINGS_SETTING,, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import java.util.Arrays;, +import java.util.stream.Collectors;, +    public final static Setting<Boolean> MASTER_ELECTION_IGNORE_NON_MASTER_PINGS_SETTING =, +            Setting.boolSetting("discovery.zen.master_election.ignore_non_master_pings", false, Property.NodeScope);, +    private final boolean masterElectionIgnoreNonMasters;, +        this.masterElectionIgnoreNonMasters = MASTER_ELECTION_IGNORE_NON_MASTER_PINGS_SETTING.get(settings);, +        logger.debug("using ping_timeout [{}], join.timeout [{}], master_election.ignore_non_master [{}]",, +                this.pingTimeout, joinTimeout, masterElectionIgnoreNonMasters);, +        final List<ZenPing.PingResponse> pingResponses;, +        pingResponses = filterPingResponses(fullPingResponses, masterElectionIgnoreNonMasters, logger);, +    static List<ZenPing.PingResponse> filterPingResponses(ZenPing.PingResponse[] fullPingResponses, boolean masterElectionIgnoreNonMasters, ESLogger logger) {, +        List<ZenPing.PingResponse> pingResponses;, +        if (masterElectionIgnoreNonMasters) {, +            pingResponses = Arrays.stream(fullPingResponses).filter(ping -> ping.node().isMasterNode()).collect(Collectors.toList());, +        } else {, +            pingResponses = Arrays.asList(fullPingResponses);, +        }, +, +        if (logger.isDebugEnabled()) {, +            StringBuilder sb = new StringBuilder();, +            if (pingResponses.isEmpty()) {, +                sb.append(" {none}");, +            } else {, +                for (ZenPing.PingResponse pingResponse : pingResponses) {, +                    sb.append("\n\t--> ").append(pingResponse);, +                }, +            }, +            logger.debug("filtered ping responses: (ignore_non_masters [{}]){}", masterElectionIgnoreNonMasters, sb);, +        }, +        return pingResponses;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ZenDiscovery.MASTER_ELECTION_IGNORE_NON_MASTER_PINGS_SETTING,, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import java.util.Arrays;, +import java.util.stream.Collectors;, +    public final static Setting<Boolean> MASTER_ELECTION_IGNORE_NON_MASTER_PINGS_SETTING =, +            Setting.boolSetting("discovery.zen.master_election.ignore_non_master_pings", false, Property.NodeScope);, +    private final boolean masterElectionIgnoreNonMasters;, +        this.masterElectionIgnoreNonMasters = MASTER_ELECTION_IGNORE_NON_MASTER_PINGS_SETTING.get(settings);, +        logger.debug("using ping_timeout [{}], join.timeout [{}], master_election.ignore_non_master [{}]",, +                this.pingTimeout, joinTimeout, masterElectionIgnoreNonMasters);, +        final List<ZenPing.PingResponse> pingResponses;, +        pingResponses = filterPingResponses(fullPingResponses, masterElectionIgnoreNonMasters, logger);, +    static List<ZenPing.PingResponse> filterPingResponses(ZenPing.PingResponse[] fullPingResponses, boolean masterElectionIgnoreNonMasters, ESLogger logger) {, +        List<ZenPing.PingResponse> pingResponses;, +        if (masterElectionIgnoreNonMasters) {, +            pingResponses = Arrays.stream(fullPingResponses).filter(ping -> ping.node().isMasterNode()).collect(Collectors.toList());, +        } else {, +            pingResponses = Arrays.asList(fullPingResponses);, +        }, +, +        if (logger.isDebugEnabled()) {, +            StringBuilder sb = new StringBuilder();, +            if (pingResponses.isEmpty()) {, +                sb.append(" {none}");, +            } else {, +                for (ZenPing.PingResponse pingResponse : pingResponses) {, +                    sb.append("\n\t--> ").append(pingResponse);, +                }, +            }, +            logger.debug("filtered ping responses: (ignore_non_masters [{}]){}", masterElectionIgnoreNonMasters, sb);, +        }, +        return pingResponses;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryUnitTests.java, +import org.elasticsearch.discovery.zen.ping.ZenPing;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.stream.Collectors;, +, +import static org.hamcrest.Matchers.equalTo;, +, +    public void testFilterNonMasterPingResponse() {, +        ArrayList<ZenPing.PingResponse> responses = new ArrayList<>();, +        ArrayList<DiscoveryNode> masterNodes = new ArrayList<>();, +        ArrayList<DiscoveryNode> allNodes = new ArrayList<>();, +        for (int i = randomIntBetween(10, 20); i >= 0; i--) {, +            Map<String, String> attrs = new HashMap<>();, +            for (String attr : randomSubsetOf(, +                    Arrays.asList(DiscoveryNode.INGEST_ATTR, DiscoveryNode.DATA_ATTR, DiscoveryNode.MASTER_ATTR))) {, +                attrs.put(attr, randomBoolean() + "");, +            }, +, +            DiscoveryNode node = new DiscoveryNode("node_" + i, "id_" + i, DummyTransportAddress.INSTANCE, attrs, Version.CURRENT);, +            responses.add(new ZenPing.PingResponse(node, randomBoolean() ? null : node, new ClusterName("test"), randomBoolean()));, +            allNodes.add(node);, +            if (node.isMasterNode()) {, +                masterNodes.add(node);, +            }]