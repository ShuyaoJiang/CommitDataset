[+++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +    class AsyncAction {, +        AsyncAction(Task task, NodesRequest request, ActionListener<NodesResponse> listener) {, +        void start() {, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +    class AsyncAction {, +        AsyncAction(Task task, NodesRequest request, ActionListener<NodesResponse> listener) {, +        void start() {, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +    class AsyncAction {, +        AsyncAction(Task task, NodesRequest request, ActionListener<NodesResponse> listener) {, +        void start() {, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +    class AsyncAction {, +        AsyncAction(Task task, NodesRequest request, ActionListener<NodesResponse> listener) {, +        void start() {, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +    class AsyncAction {, +        AsyncAction(Task task, NodesRequest request, ActionListener<NodesResponse> listener) {, +        void start() {, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +++ b/core/src/test/java/org/elasticsearch/action/support/nodes/TransportNodesActionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.support.nodes;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeActionTests;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.DummyTransportAddress;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.cluster.TestClusterService;, +import org.elasticsearch.test.transport.CapturingTransport;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.BeforeClass;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReferenceArray;, +import java.util.function.Supplier;, +, +public class TransportNodesActionTests extends ESTestCase {, +, +    private static ThreadPool THREAD_POOL;, +    private static ClusterName CLUSTER_NAME = new ClusterName("test-cluster");, +, +    private TestClusterService clusterService;, +    private CapturingTransport transport;, +    private TestTransportNodesAction action;, +, +    public void testRequestIsSentToEachNode() throws Exception {, +        TestNodesRequest request = new TestNodesRequest();, +        PlainActionFuture<TestNodesResponse> listener = new PlainActionFuture<>();, +        action.new AsyncAction(null, request, listener).start();, +        Map<String, List<CapturingTransport.CapturedRequest>> capturedRequests = transport.getCapturedRequestsByTargetNodeAndClear();, +        int numNodes = clusterService.state().getNodes().size();, +        // check a request was sent to the right number of nodes, +        assertEquals(numNodes, capturedRequests.size());, +    }]