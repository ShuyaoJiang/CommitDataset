[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/bootstrap/GetDiscoveredNodesResponse.java, +        out.writeCollection(nodes);, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/bootstrap/GetDiscoveredNodesResponse.java, +        out.writeCollection(nodes);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java, +        out.writeCollection(votingConfigExclusions);, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/bootstrap/GetDiscoveredNodesResponse.java, +        out.writeCollection(nodes);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java, +        out.writeCollection(votingConfigExclusions);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +     * Writes a collection to this stream. The corresponding collection can be read from a stream input using, +     * {@link StreamInput#readList(Writeable.Reader)}., +     *, +     * @param collection the collection to write to this stream, +     * @throws IOException if an I/O exception occurs writing the collection, +     */, +    public void writeCollection(final Collection<? extends Writeable> collection) throws IOException {, +        writeCollection(collection, (o, v) -> v.writeTo(o));, +    }, +, +    /**, +        writeCollection(list);, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/bootstrap/GetDiscoveredNodesResponse.java, +        out.writeCollection(nodes);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java, +        out.writeCollection(votingConfigExclusions);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +     * Writes a collection to this stream. The corresponding collection can be read from a stream input using, +     * {@link StreamInput#readList(Writeable.Reader)}., +     *, +     * @param collection the collection to write to this stream, +     * @throws IOException if an I/O exception occurs writing the collection, +     */, +    public void writeCollection(final Collection<? extends Writeable> collection) throws IOException {, +        writeCollection(collection, (o, v) -> v.writeTo(o));, +    }, +, +    /**, +        writeCollection(list);, +++ b/server/src/test/java/org/elasticsearch/common/io/stream/StreamTests.java, +import java.util.Collection;, +import java.util.Objects;, +    public void testCollection() throws IOException {, +        class FooBar implements Writeable {, +, +            private final int foo;, +            private final int bar;, +, +            private FooBar(final int foo, final int bar) {, +                this.foo = foo;, +                this.bar = bar;, +            }, +, +            private FooBar(final StreamInput in) throws IOException {, +                this.foo = in.readInt();, +                this.bar = in.readInt();, +            }, +, +            @Override, +            public void writeTo(final StreamOutput out) throws IOException {, +                out.writeInt(foo);, +                out.writeInt(bar);, +            }, +, +            @Override, +            public boolean equals(final Object o) {, +                if (this == o) return true;, +                if (o == null || getClass() != o.getClass()) return false;, +                final FooBar that = (FooBar) o;, +                return foo == that.foo && bar == that.bar;, +            }, +, +            @Override, +            public int hashCode() {, +                return Objects.hash(foo, bar);, +            }, +, +        }, +, +        final int length = randomIntBetween(0, 16);, +        final Collection<FooBar> fooBars = new ArrayList<>(length);, +        for (int i = 0; i < length; i++) {, +            fooBars.add(new FooBar(randomInt(), randomInt()));, +        }, +        try (BytesStreamOutput out = new BytesStreamOutput()) {, +            out.writeCollection(fooBars);, +            try (StreamInput in = out.bytes().streamInput()) {, +                assertThat(fooBars, equalTo(in.readList(FooBar::new)));, +            }, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/bootstrap/GetDiscoveredNodesResponse.java, +        out.writeCollection(nodes);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java, +        out.writeCollection(votingConfigExclusions);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +     * Writes a collection to this stream. The corresponding collection can be read from a stream input using, +     * {@link StreamInput#readList(Writeable.Reader)}.]