[+++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                                logger.trace("Retry attempt [{}] of [{}] on version conflict on [{}][{}][{}]",, +                                        retryCount + 1, request.retryOnConflict(), request.index(), request.shardId(), request.id());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                                logger.trace("Retry attempt [{}] of [{}] on version conflict on [{}][{}][{}]",, +                                        retryCount + 1, request.retryOnConflict(), request.index(), request.shardId(), request.id());, +++ b/core/src/test/java/org/elasticsearch/update/UpdateIT.java, +        final int numberOfUpdatesPerThread = scaledRandomIntBetween(100, 500);, +, +                            if (i % 100 == 0) {, +                                logger.debug("Client [{}] issued [{}] of [{}] requests", Thread.currentThread().getName(), i, numberOfUpdatesPerThread);, +                            }, +                        logger.info("Client [{}] issued all [{}] requests.", Thread.currentThread().getName(), numberOfUpdatesPerThread);, +                    } catch (InterruptedException e) {, +                        // test infrastructure kills long-running tests by interrupting them, thus we handle this case separately, +                        logger.warn("Test was forcefully stopped. Client [{}] may still have outstanding requests.", Thread.currentThread().getName());, +                        failures.add(e);, +                        Thread.currentThread().interrupt();, +            Thread updater = new Thread(r);, +            updater.setName("UpdateIT-Client-" + i);, +            updater.start();]