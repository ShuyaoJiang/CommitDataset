[+++ b/src/main/java/org/elasticsearch/http/HttpRequest.java, +public abstract class HttpRequest extends RestRequest {, +++ b/src/main/java/org/elasticsearch/http/HttpRequest.java, +public abstract class HttpRequest extends RestRequest {, +++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +        serverTransport.dispatchRequest(new NettyHttpRequest(request, e.getChannel()), new NettyHttpChannel(serverTransport, e.getChannel(), request));, +++ b/src/main/java/org/elasticsearch/http/HttpRequest.java, +public abstract class HttpRequest extends RestRequest {, +++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +        serverTransport.dispatchRequest(new NettyHttpRequest(request, e.getChannel()), new NettyHttpChannel(serverTransport, e.getChannel(), request));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.jboss.netty.channel.Channel;, +import java.net.SocketAddress;, +public class NettyHttpRequest extends HttpRequest {, +    private final Channel channel;, +    public NettyHttpRequest(org.jboss.netty.handler.codec.http.HttpRequest request, Channel channel) {, +        this.channel = channel;, +    /**, +     * Returns the remote address where this rest request channel is "connected to".  The, +     * returned {@link SocketAddress} is supposed to be down-cast into more, +     * concrete type such as {@link java.net.InetSocketAddress} to retrieve, +     * the detailed information., +     */, +    @Override, +    public SocketAddress getRemoteAddress() {, +        return channel.getRemoteAddress();, +    }, +, +    /**, +     * Returns the local address where this request channel is bound to.  The returned, +     * {@link SocketAddress} is supposed to be down-cast into more concrete, +     * type such as {@link java.net.InetSocketAddress} to retrieve the detailed, +     * information., +     */, +    @Override, +    public SocketAddress getLocalAddress() {, +        return channel.getLocalAddress();, +    }, +, +    public Iterable<Map.Entry<String, String>> headers() {, +        return request.headers().entries();, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/http/HttpRequest.java, +public abstract class HttpRequest extends RestRequest {, +++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +        serverTransport.dispatchRequest(new NettyHttpRequest(request, e.getChannel()), new NettyHttpChannel(serverTransport, e.getChannel(), request));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.jboss.netty.channel.Channel;, +import java.net.SocketAddress;, +public class NettyHttpRequest extends HttpRequest {, +    private final Channel channel;, +    public NettyHttpRequest(org.jboss.netty.handler.codec.http.HttpRequest request, Channel channel) {, +        this.channel = channel;, +    /**, +     * Returns the remote address where this rest request channel is "connected to".  The, +     * returned {@link SocketAddress} is supposed to be down-cast into more, +     * concrete type such as {@link java.net.InetSocketAddress} to retrieve, +     * the detailed information., +     */, +    @Override, +    public SocketAddress getRemoteAddress() {, +        return channel.getRemoteAddress();, +    }, +, +    /**, +     * Returns the local address where this request channel is bound to.  The returned, +     * {@link SocketAddress} is supposed to be down-cast into more concrete, +     * type such as {@link java.net.InetSocketAddress} to retrieve the detailed, +     * information., +     */, +    @Override, +    public SocketAddress getLocalAddress() {, +        return channel.getLocalAddress();, +    }, +, +    public Iterable<Map.Entry<String, String>> headers() {, +        return request.headers().entries();, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/rest/RestRequest.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.rest.support.RestUtils;, +import java.net.SocketAddress;, +import static org.elasticsearch.common.unit.ByteSizeValue.parseBytesSizeValue;, +import static org.elasticsearch.common.unit.TimeValue.parseTimeValue;, +, +public abstract class RestRequest implements ToXContent.Params {, +    public enum Method {, +    public abstract Method method();, +    public abstract String uri();, +    public abstract String rawPath();, +    public final String path() {, +        return RestUtils.decodeComponent(rawPath());, +    }]