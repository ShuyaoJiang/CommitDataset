[+++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +        configureUnicastCluster(DEFAULT_SETTINGS, numberOfNodes, unicastHostsOrdinals, minimumMasterNode);, +    }, +, +    private void configureUnicastCluster(Settings settings, int numberOfNodes, @Nullable int[] unicastHostsOrdinals, int minimumMasterNode) throws ExecutionException, InterruptedException {, +                .put(settings), +        final Settings settings = Settings.builder(), +                                      .put(DEFAULT_SETTINGS), +                                      .put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "0s") // don't wait on isolated data node, +                                      .put(DiscoverySettings.COMMIT_TIMEOUT_SETTING.getKey(), "30s") // wait till cluster state is committed, +                                      .build();, +        final String idxName = "test";, +        configureUnicastCluster(settings, 3, null, 2);, +        final List<String> allMasterEligibleNodes = masterNodes.get();, +        final String masterNode1 = internalCluster().getMasterName();, +        // We know this will time out due to the partition, we check manually below to not proceed until, +        // the delete has been applied to the master node and the master eligible node., +        internalCluster().client(masterNode1).admin().indices().prepareDelete(idxName).setTimeout("0s").get();, +        // Don't restart the master node until we know the index deletion has taken effect on master and the master eligible node., +        assertBusy(() -> {, +            for (String masterNode : allMasterEligibleNodes) {, +                final ClusterState masterState = internalCluster().clusterService(masterNode).state();, +                assertTrue("index not deleted on " + masterNode, masterState.metaData().hasIndex(idxName) == false &&, +                                                                 masterState.status() == ClusterState.ClusterStateStatus.APPLIED);, +            }, +        });, +        assertFalse(client().admin().indices().prepareExists(idxName).get().isExists());]