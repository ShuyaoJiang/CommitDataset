[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        private Map<Class<? extends RootMapper>, RootMapper> rootMappers = Maps.newHashMap();, +            this.rootMappers.put(SizeFieldMapper.class, new SizeFieldMapper());, +            this.rootMappers.put(IndexFieldMapper.class, new IndexFieldMapper());, +            this.rootMappers.put(SourceFieldMapper.class, new SourceFieldMapper());, +            this.rootMappers.put(TypeFieldMapper.class, new TypeFieldMapper());, +            this.rootMappers.put(AllFieldMapper.class, new AllFieldMapper());, +            this.rootMappers.put(AnalyzerMapper.class, new AnalyzerMapper());, +            this.rootMappers.put(BoostFieldMapper.class, new BoostFieldMapper());, +            this.rootMappers.put(RoutingFieldMapper.class, new RoutingFieldMapper());, +            // don't add parent field, by default its "null", +            RootMapper rootMapper = (RootMapper) mapper.build(builderContext);, +            rootMappers.put(rootMapper.getClass(), rootMapper);, +                    indexAnalyzer, searchAnalyzer,, +    private final ImmutableMap<Class<? extends RootMapper>, RootMapper> rootMappers;, +                          Map<Class<? extends RootMapper>, RootMapper> rootMappers) {, +        if (rootMapper(ParentFieldMapper.class) != null) {, +            // mark the routing field mapper as required, +            rootMapper(RoutingFieldMapper.class).markAsRequired();, +    @SuppressWarnings({"unchecked"}) public <T extends RootMapper> T rootMapper(Class<T> type) {, +        return (T) rootMappers.get(type);, +        return rootMapper(TypeFieldMapper.class);, +        return rootMapper(SourceFieldMapper.class);, +        return rootMapper(AllFieldMapper.class);, +        return rootMapper(RoutingFieldMapper.class);, +        return rootMapper(ParentFieldMapper.class);, +        for (Map.Entry<Class<? extends RootMapper>, RootMapper> entry : rootMappers.entrySet()) {, +        }, rootMappersNotIncludedInObject);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        private Map<Class<? extends RootMapper>, RootMapper> rootMappers = Maps.newHashMap();, +            this.rootMappers.put(SizeFieldMapper.class, new SizeFieldMapper());, +            this.rootMappers.put(IndexFieldMapper.class, new IndexFieldMapper());, +            this.rootMappers.put(SourceFieldMapper.class, new SourceFieldMapper());, +            this.rootMappers.put(TypeFieldMapper.class, new TypeFieldMapper());, +            this.rootMappers.put(AllFieldMapper.class, new AllFieldMapper());, +            this.rootMappers.put(AnalyzerMapper.class, new AnalyzerMapper());, +            this.rootMappers.put(BoostFieldMapper.class, new BoostFieldMapper());, +            this.rootMappers.put(RoutingFieldMapper.class, new RoutingFieldMapper());, +            // don't add parent field, by default its "null", +            RootMapper rootMapper = (RootMapper) mapper.build(builderContext);, +            rootMappers.put(rootMapper.getClass(), rootMapper);, +                    indexAnalyzer, searchAnalyzer,, +    private final ImmutableMap<Class<? extends RootMapper>, RootMapper> rootMappers;, +                          Map<Class<? extends RootMapper>, RootMapper> rootMappers) {, +        if (rootMapper(ParentFieldMapper.class) != null) {, +            // mark the routing field mapper as required, +            rootMapper(RoutingFieldMapper.class).markAsRequired();, +    @SuppressWarnings({"unchecked"}) public <T extends RootMapper> T rootMapper(Class<T> type) {, +        return (T) rootMappers.get(type);, +        return rootMapper(TypeFieldMapper.class);, +        return rootMapper(SourceFieldMapper.class);, +        return rootMapper(AllFieldMapper.class);, +        return rootMapper(RoutingFieldMapper.class);, +        return rootMapper(ParentFieldMapper.class);, +        for (Map.Entry<Class<? extends RootMapper>, RootMapper> entry : rootMappers.entrySet()) {, +        }, rootMappersNotIncludedInObject);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(BoostFieldMapper.NAME, new BoostFieldMapper.TypeParser()), +                .put(ParentFieldMapper.NAME, new ParentFieldMapper.TypeParser()), +                .put(RoutingFieldMapper.NAME, new RoutingFieldMapper.TypeParser()), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        private Map<Class<? extends RootMapper>, RootMapper> rootMappers = Maps.newHashMap();, +            this.rootMappers.put(SizeFieldMapper.class, new SizeFieldMapper());, +            this.rootMappers.put(IndexFieldMapper.class, new IndexFieldMapper());, +            this.rootMappers.put(SourceFieldMapper.class, new SourceFieldMapper());, +            this.rootMappers.put(TypeFieldMapper.class, new TypeFieldMapper());, +            this.rootMappers.put(AllFieldMapper.class, new AllFieldMapper());, +            this.rootMappers.put(AnalyzerMapper.class, new AnalyzerMapper());, +            this.rootMappers.put(BoostFieldMapper.class, new BoostFieldMapper());, +            this.rootMappers.put(RoutingFieldMapper.class, new RoutingFieldMapper());, +            // don't add parent field, by default its "null", +            RootMapper rootMapper = (RootMapper) mapper.build(builderContext);, +            rootMappers.put(rootMapper.getClass(), rootMapper);, +                    indexAnalyzer, searchAnalyzer,, +    private final ImmutableMap<Class<? extends RootMapper>, RootMapper> rootMappers;, +                          Map<Class<? extends RootMapper>, RootMapper> rootMappers) {, +        if (rootMapper(ParentFieldMapper.class) != null) {, +            // mark the routing field mapper as required, +            rootMapper(RoutingFieldMapper.class).markAsRequired();, +    @SuppressWarnings({"unchecked"}) public <T extends RootMapper> T rootMapper(Class<T> type) {, +        return (T) rootMappers.get(type);, +        return rootMapper(TypeFieldMapper.class);, +        return rootMapper(SourceFieldMapper.class);, +        return rootMapper(AllFieldMapper.class);, +        return rootMapper(RoutingFieldMapper.class);, +        return rootMapper(ParentFieldMapper.class);, +        for (Map.Entry<Class<? extends RootMapper>, RootMapper> entry : rootMappers.entrySet()) {, +        }, rootMappersNotIncludedInObject);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(BoostFieldMapper.NAME, new BoostFieldMapper.TypeParser()), +                .put(ParentFieldMapper.NAME, new ParentFieldMapper.TypeParser()), +                .put(RoutingFieldMapper.NAME, new RoutingFieldMapper.TypeParser()), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/internal/BoostFieldMapper.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.index.mapper.MapperBuilders;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.index.mapper.RootMapper;, +import java.util.Map;, +, +import static org.elasticsearch.common.xcontent.support.XContentMapValues.*;]