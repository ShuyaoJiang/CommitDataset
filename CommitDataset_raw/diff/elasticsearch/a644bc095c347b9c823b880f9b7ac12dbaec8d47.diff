[+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplainActionTests.java, +import org.elasticsearch.cluster.routing.UnassignedInfo;, +import org.elasticsearch.cluster.routing.allocation.AllocationDecision;, +import java.time.Instant;, +                         shardRoutingState.toString().toLowerCase(Locale.ROOT) + "\"" +, +                        (shard.unassignedInfo() != null ?, +                            ",\"unassigned_info\":{", +                                + "\"reason\":\"" + shard.unassignedInfo().getReason() + "\",", +                                + "\"at\":\""+ UnassignedInfo.DATE_TIME_FORMATTER.format(, +                                    Instant.ofEpochMilli(shard.unassignedInfo().getUnassignedTimeInMillis())) + "\",", +                                + "\"last_allocation_status\":\"" + AllocationDecision.fromAllocationStatus(, +                                    shard.unassignedInfo().getLastAllocationStatus()) + "\"}", +                            : ""), +                        + ",\"current_node\":" +, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplainActionTests.java, +import org.elasticsearch.cluster.routing.UnassignedInfo;, +import org.elasticsearch.cluster.routing.allocation.AllocationDecision;, +import java.time.Instant;, +                         shardRoutingState.toString().toLowerCase(Locale.ROOT) + "\"" +, +                        (shard.unassignedInfo() != null ?, +                            ",\"unassigned_info\":{", +                                + "\"reason\":\"" + shard.unassignedInfo().getReason() + "\",", +                                + "\"at\":\""+ UnassignedInfo.DATE_TIME_FORMATTER.format(, +                                    Instant.ofEpochMilli(shard.unassignedInfo().getUnassignedTimeInMillis())) + "\",", +                                + "\"last_allocation_status\":\"" + AllocationDecision.fromAllocationStatus(, +                                    shard.unassignedInfo().getLastAllocationStatus()) + "\"}", +                            : ""), +                        + ",\"current_node\":" +, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/ClusterStateCreationUtils.java, +            } else if (primaryState == ShardRoutingState.INITIALIZING) {, +                unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null);, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplainActionTests.java, +import org.elasticsearch.cluster.routing.UnassignedInfo;, +import org.elasticsearch.cluster.routing.allocation.AllocationDecision;, +import java.time.Instant;, +                         shardRoutingState.toString().toLowerCase(Locale.ROOT) + "\"" +, +                        (shard.unassignedInfo() != null ?, +                            ",\"unassigned_info\":{", +                                + "\"reason\":\"" + shard.unassignedInfo().getReason() + "\",", +                                + "\"at\":\""+ UnassignedInfo.DATE_TIME_FORMATTER.format(, +                                    Instant.ofEpochMilli(shard.unassignedInfo().getUnassignedTimeInMillis())) + "\",", +                                + "\"last_allocation_status\":\"" + AllocationDecision.fromAllocationStatus(, +                                    shard.unassignedInfo().getLastAllocationStatus()) + "\"}", +                            : ""), +                        + ",\"current_node\":" +, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/ClusterStateCreationUtils.java, +            } else if (primaryState == ShardRoutingState.INITIALIZING) {, +                unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null);, +++ b/server/src/test/java/org/elasticsearch/cluster/action/shard/ShardFailedClusterStateTaskExecutorTests.java, +    @Override, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplainActionTests.java, +import org.elasticsearch.cluster.routing.UnassignedInfo;, +import org.elasticsearch.cluster.routing.allocation.AllocationDecision;, +import java.time.Instant;, +                         shardRoutingState.toString().toLowerCase(Locale.ROOT) + "\"" +, +                        (shard.unassignedInfo() != null ?, +                            ",\"unassigned_info\":{", +                                + "\"reason\":\"" + shard.unassignedInfo().getReason() + "\",", +                                + "\"at\":\""+ UnassignedInfo.DATE_TIME_FORMATTER.format(, +                                    Instant.ofEpochMilli(shard.unassignedInfo().getUnassignedTimeInMillis())) + "\",", +                                + "\"last_allocation_status\":\"" + AllocationDecision.fromAllocationStatus(, +                                    shard.unassignedInfo().getLastAllocationStatus()) + "\"}", +                            : ""), +                        + ",\"current_node\":" +, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/ClusterStateCreationUtils.java, +            } else if (primaryState == ShardRoutingState.INITIALIZING) {, +                unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null);, +++ b/server/src/test/java/org/elasticsearch/cluster/action/shard/ShardFailedClusterStateTaskExecutorTests.java, +    @Override, +++ b/server/src/test/java/org/elasticsearch/cluster/action/shard/ShardStartedClusterStateTaskExecutorTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.action.shard;, +, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ClusterStateTaskExecutor;, +import org.elasticsearch.cluster.ESAllocationTestCase;, +import org.elasticsearch.cluster.action.shard.ShardStateAction.StartedShardEntry;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;]