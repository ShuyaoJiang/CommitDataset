[+++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    Checks each suggestion against the specified `query` to prune suggestions, +    for which no matching docs exist in the index. The collate query for a, +    suggestion is run only on the local shard from which the suggestion has, +    been generated from. The `query` must be specified, and it is run as, +    a <<query-dsl-template-query,`template` query>>., +    variable, which should be used in your query.  You can still specify, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    Checks each suggestion against the specified `query` to prune suggestions, +    for which no matching docs exist in the index. The collate query for a, +    suggestion is run only on the local shard from which the suggestion has, +    been generated from. The `query` must be specified, and it is run as, +    a <<query-dsl-template-query,`template` query>>., +    variable, which should be used in your query.  You can still specify, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                        } else if ("query".equals(fieldName)) {, +                            Template template = Template.parse(parser);, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    Checks each suggestion against the specified `query` to prune suggestions, +    for which no matching docs exist in the index. The collate query for a, +    suggestion is run only on the local shard from which the suggestion has, +    been generated from. The `query` must be specified, and it is run as, +    a <<query-dsl-template-query,`template` query>>., +    variable, which should be used in your query.  You can still specify, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                        } else if ("query".equals(fieldName)) {, +                            Template template = Template.parse(parser);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +            final CompiledScript collateScript = suggestion.getCollateQueryScript();, +                    final ParsedQuery parsedQuery = suggestion.getQueryParserService().parse(querySource);, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    Checks each suggestion against the specified `query` to prune suggestions, +    for which no matching docs exist in the index. The collate query for a, +    suggestion is run only on the local shard from which the suggestion has, +    been generated from. The `query` must be specified, and it is run as, +    a <<query-dsl-template-query,`template` query>>., +    variable, which should be used in your query.  You can still specify, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                        } else if ("query".equals(fieldName)) {, +                            Template template = Template.parse(parser);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +            final CompiledScript collateScript = suggestion.getCollateQueryScript();, +                    final ParsedQuery parsedQuery = suggestion.getQueryParserService().parse(querySource);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +            builder.startObject("collate");, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    Checks each suggestion against the specified `query` to prune suggestions, +    for which no matching docs exist in the index. The collate query for a, +    suggestion is run only on the local shard from which the suggestion has, +    been generated from. The `query` must be specified, and it is run as, +    a <<query-dsl-template-query,`template` query>>., +    variable, which should be used in your query.  You can still specify, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                        } else if ("query".equals(fieldName)) {, +                            Template template = Template.parse(parser);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +            final CompiledScript collateScript = suggestion.getCollateQueryScript();, +                    final ParsedQuery parsedQuery = suggestion.getQueryParserService().parse(querySource);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +            builder.startObject("collate");, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionContext.java, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    Checks each suggestion against the specified `query` to prune suggestions, +    for which no matching docs exist in the index. The collate query for a, +    suggestion is run only on the local shard from which the suggestion has, +    been generated from. The `query` must be specified, and it is run as, +    a <<query-dsl-template-query,`template` query>>., +    variable, which should be used in your query.  You can still specify, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                        } else if ("query".equals(fieldName)) {, +                            Template template = Template.parse(parser);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +            final CompiledScript collateScript = suggestion.getCollateQueryScript();, +                    final ParsedQuery parsedQuery = suggestion.getQueryParserService().parse(querySource);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +            builder.startObject("collate");, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionContext.java, +++ b/src/test/java/org/elasticsearch/search/suggest/SuggestSearchTests.java, +        // suggest without collate, +        // suggest with collate, +        // collate suggest with no result (boundary case), +        // collate suggest with bad query, +        // suggest with collation, +        PhraseSuggestionBuilder filteredFilterSuggest = suggest.collateQuery(filterStringAsFilter);, +        // collate suggest with bad query, +        PhraseSuggestionBuilder in = suggest.collateQuery(filterStr);, +        PhraseSuggestionBuilder phraseSuggestWithNoParams = suggest.collateQuery(collateWithParams);, +        PhraseSuggestionBuilder phraseSuggestWithParams = suggest.collateQuery(collateWithParams).collateParams(params);, +        PhraseSuggestionBuilder phraseSuggestWithParamsAndReturn = suggest.collateQuery(collateWithParams).collateParams(params).collatePrune(true);]