[+++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/MonitoredSystem.java, +    KIBANA("kibana"),, +    LOGSTASH("logstash");, +            case "logstash":, +                return LOGSTASH;, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/MonitoredSystem.java, +    KIBANA("kibana"),, +    LOGSTASH("logstash");, +            case "logstash":, +                return LOGSTASH;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/resolver/ResolversRegistry.java, +        registerMonitoredSystem(MonitoredSystem.LOGSTASH, settings);, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/MonitoredSystem.java, +    KIBANA("kibana"),, +    LOGSTASH("logstash");, +            case "logstash":, +                return LOGSTASH;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/resolver/ResolversRegistry.java, +        registerMonitoredSystem(MonitoredSystem.LOGSTASH, settings);, +++ b/elasticsearch/src/main/resources/monitoring-data.json, +    },, +    "logstash": {, +      "enabled": false, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/MonitoredSystem.java, +    KIBANA("kibana"),, +    LOGSTASH("logstash");, +            case "logstash":, +                return LOGSTASH;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/resolver/ResolversRegistry.java, +        registerMonitoredSystem(MonitoredSystem.LOGSTASH, settings);, +++ b/elasticsearch/src/main/resources/monitoring-data.json, +    },, +    "logstash": {, +      "enabled": false, +++ b/elasticsearch/src/main/resources/monitoring-logstash.json, +{, +  "template": ".monitoring-logstash-${monitoring.template.version}-*",, +  "settings": {, +    "index.number_of_shards": 1,, +    "index.number_of_replicas": 1,, +    "index.codec": "best_compression", +  },, +  "mappings": {, +    "_default_": {, +      "_all": {, +        "enabled": false, +      },, +      "properties": {, +        "cluster_uuid": {, +          "type": "keyword", +        },, +        "timestamp": {, +          "type": "date",, +          "format": "date_time", +        },, +        "source_node": {, +          "properties": {, +            "uuid": {, +              "type": "keyword", +            },, +            "host": {, +              "type": "keyword"]