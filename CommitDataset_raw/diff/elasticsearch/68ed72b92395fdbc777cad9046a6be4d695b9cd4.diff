[+++ b/libs/grok/src/main/java/org/elasticsearch/grok/ThreadWatchdog.java, +import java.util.function.BiConsumer;, +                                      BiConsumer<Long, Runnable> scheduler) {, +        private final BiConsumer<Long, Runnable> scheduler;, +                        BiConsumer<Long, Runnable> scheduler) {, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +++ b/libs/grok/src/main/java/org/elasticsearch/grok/ThreadWatchdog.java, +import java.util.function.BiConsumer;, +                                      BiConsumer<Long, Runnable> scheduler) {, +        private final BiConsumer<Long, Runnable> scheduler;, +                        BiConsumer<Long, Runnable> scheduler) {, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/GrokTests.java, +import java.util.function.BiConsumer;, +        BiConsumer<Long, Runnable> scheduler = (delay, command) -> {, +++ b/libs/grok/src/main/java/org/elasticsearch/grok/ThreadWatchdog.java, +import java.util.function.BiConsumer;, +                                      BiConsumer<Long, Runnable> scheduler) {, +        private final BiConsumer<Long, Runnable> scheduler;, +                        BiConsumer<Long, Runnable> scheduler) {, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/GrokTests.java, +import java.util.function.BiConsumer;, +        BiConsumer<Long, Runnable> scheduler = (delay, command) -> {, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/ThreadWatchdogTests.java, +++ b/libs/grok/src/main/java/org/elasticsearch/grok/ThreadWatchdog.java, +import java.util.function.BiConsumer;, +                                      BiConsumer<Long, Runnable> scheduler) {, +        private final BiConsumer<Long, Runnable> scheduler;, +                        BiConsumer<Long, Runnable> scheduler) {, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/GrokTests.java, +import java.util.function.BiConsumer;, +        BiConsumer<Long, Runnable> scheduler = (delay, command) -> {, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/ThreadWatchdogTests.java, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/IngestCommonPlugin.java, +        return ThreadWatchdog.newInstance(intervalMillis, maxExecutionTimeMillis,, +            parameters.relativeTimeSupplier, parameters.scheduler::apply);, +++ b/libs/grok/src/main/java/org/elasticsearch/grok/ThreadWatchdog.java, +import java.util.function.BiConsumer;, +                                      BiConsumer<Long, Runnable> scheduler) {, +        private final BiConsumer<Long, Runnable> scheduler;, +                        BiConsumer<Long, Runnable> scheduler) {, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/GrokTests.java, +import java.util.function.BiConsumer;, +        BiConsumer<Long, Runnable> scheduler = (delay, command) -> {, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/ThreadWatchdogTests.java, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/IngestCommonPlugin.java, +        return ThreadWatchdog.newInstance(intervalMillis, maxExecutionTimeMillis,, +            parameters.relativeTimeSupplier, parameters.scheduler::apply);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteScrollableHitSource.java, +                                        threadPool.schedule(RetryHelper.this, delay, ThreadPool.Names.SAME);, +++ b/libs/grok/src/main/java/org/elasticsearch/grok/ThreadWatchdog.java, +import java.util.function.BiConsumer;, +                                      BiConsumer<Long, Runnable> scheduler) {, +        private final BiConsumer<Long, Runnable> scheduler;, +                        BiConsumer<Long, Runnable> scheduler) {, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/GrokTests.java, +import java.util.function.BiConsumer;, +        BiConsumer<Long, Runnable> scheduler = (delay, command) -> {, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/ThreadWatchdogTests.java, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/IngestCommonPlugin.java, +        return ThreadWatchdog.newInstance(intervalMillis, maxExecutionTimeMillis,, +            parameters.relativeTimeSupplier, parameters.scheduler::apply);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteScrollableHitSource.java, +                                        threadPool.schedule(RetryHelper.this, delay, ThreadPool.Names.SAME);, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java, +            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String name) {, +            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String name) {, +            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String name) {, +                return super.schedule(command, delay, name);, +++ b/libs/grok/src/main/java/org/elasticsearch/grok/ThreadWatchdog.java, +import java.util.function.BiConsumer;, +                                      BiConsumer<Long, Runnable> scheduler) {, +        private final BiConsumer<Long, Runnable> scheduler;, +                        BiConsumer<Long, Runnable> scheduler) {, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +                scheduler.accept(interval, this::interruptLongRunningExecutions);, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/GrokTests.java, +import java.util.function.BiConsumer;, +        BiConsumer<Long, Runnable> scheduler = (delay, command) -> {, +++ b/libs/grok/src/test/java/org/elasticsearch/grok/ThreadWatchdogTests.java, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/IngestCommonPlugin.java, +        return ThreadWatchdog.newInstance(intervalMillis, maxExecutionTimeMillis,, +            parameters.relativeTimeSupplier, parameters.scheduler::apply);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteScrollableHitSource.java, +                                        threadPool.schedule(RetryHelper.this, delay, ThreadPool.Names.SAME);, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java, +            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String name) {, +            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String name) {, +            public ScheduledCancellable schedule(Runnable command, TimeValue delay, String name) {, +                return super.schedule(command, delay, name);]