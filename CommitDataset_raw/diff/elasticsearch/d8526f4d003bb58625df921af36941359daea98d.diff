[+++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import java.util.concurrent.ThreadLocalRandom;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(ThreadLocalRandom.current().nextInt(1000)), request.indices());, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import java.util.concurrent.ThreadLocalRandom;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(ThreadLocalRandom.current().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.concurrent.ThreadLocalRandom;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import java.util.concurrent.ThreadLocalRandom;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(ThreadLocalRandom.current().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.concurrent.ThreadLocalRandom;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.concurrent.ThreadLocalRandom;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import java.util.concurrent.ThreadLocalRandom;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(ThreadLocalRandom.current().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.concurrent.ThreadLocalRandom;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.concurrent.ThreadLocalRandom;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import java.util.concurrent.ThreadLocalRandom;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(ThreadLocalRandom.current().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.concurrent.ThreadLocalRandom;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.concurrent.ThreadLocalRandom;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +++ b/core/src/main/java/org/elasticsearch/common/math/UnboxedMathUtils.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.math;, +, +import org.elasticsearch.common.SuppressForbidden;, +, +import java.util.concurrent.ThreadLocalRandom;, +, +/**, + *, + */, +public class UnboxedMathUtils {, +, +    public static double sin(Short a) {, +        return Math.sin(a.doubleValue());, +    }, +, +    public static double sin(Integer a) {, +        return Math.sin(a.doubleValue());, +    }, +, +    public static double sin(Float a) {, +        return Math.sin(a.doubleValue());, +    }, +, +    public static double sin(Long a) {, +        return Math.sin(a.doubleValue());, +    }, +, +    public static double sin(Double a) {, +        return Math.sin(a);, +    }]