[+++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnection.java, +import org.elasticsearch.common.unit.TimeValue;, +import javax.naming.directory.DirContext;, +    ActiveDirectoryConnection(ESLogger logger, DirContext ctx, String boundName, String groupSearchDN, TimeValue timeout) {, +        super(logger, ctx, boundName, new ActiveDirectoryGroupsResolver(logger, groupSearchDN), timeout);, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnection.java, +import org.elasticsearch.common.unit.TimeValue;, +import javax.naming.directory.DirContext;, +    ActiveDirectoryConnection(ESLogger logger, DirContext ctx, String boundName, String groupSearchDN, TimeValue timeout) {, +        super(logger, ctx, boundName, new ActiveDirectoryGroupsResolver(logger, groupSearchDN), timeout);, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnectionFactory.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.shield.authc.support.ldap.SearchScope;, +    public static final String AD_USER_SEARCH_SCOPE_SETTING = "user_search.scope";, +    private final SearchScope userSearchScope;, +    private final TimeValue timeout;, +        userSearchScope = SearchScope.resolve(settings.get(AD_USER_SEARCH_SCOPE_SETTING), SearchScope.SUB_TREE);, +        timeout = settings.getAsTime(TIMEOUT_LDAP_SETTING, TIMEOUT_DEFAULT);, +            searchCtls.setSearchScope(userSearchScope.scope());, +            searchCtls.setTimeLimit((int) timeout.millis());, +                        return new ActiveDirectoryConnection(connectionLogger, ctx, name, userSearchDN, timeout);, +            throw new ActiveDirectoryException("unable to authenticate user [" + userName + "] to active directory domain [" + domainName + "]", e);, +        } finally {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnection.java, +import org.elasticsearch.common.unit.TimeValue;, +import javax.naming.directory.DirContext;, +    ActiveDirectoryConnection(ESLogger logger, DirContext ctx, String boundName, String groupSearchDN, TimeValue timeout) {, +        super(logger, ctx, boundName, new ActiveDirectoryGroupsResolver(logger, groupSearchDN), timeout);, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnectionFactory.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.shield.authc.support.ldap.SearchScope;, +    public static final String AD_USER_SEARCH_SCOPE_SETTING = "user_search.scope";, +    private final SearchScope userSearchScope;, +    private final TimeValue timeout;, +        userSearchScope = SearchScope.resolve(settings.get(AD_USER_SEARCH_SCOPE_SETTING), SearchScope.SUB_TREE);, +        timeout = settings.getAsTime(TIMEOUT_LDAP_SETTING, TIMEOUT_DEFAULT);, +            searchCtls.setSearchScope(userSearchScope.scope());, +            searchCtls.setTimeLimit((int) timeout.millis());, +                        return new ActiveDirectoryConnection(connectionLogger, ctx, name, userSearchDN, timeout);, +            throw new ActiveDirectoryException("unable to authenticate user [" + userName + "] to active directory domain [" + domainName + "]", e);, +        } finally {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryGroupsResolver.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.shield.authc.active_directory;, +, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.shield.authc.ldap.LdapException;, +import org.elasticsearch.shield.authc.support.ldap.AbstractLdapConnection;, +import org.elasticsearch.shield.authc.support.ldap.ClosableNamingEnumeration;, +import org.elasticsearch.shield.authc.support.ldap.SearchScope;, +, +import javax.naming.NamingEnumeration;, +import javax.naming.NamingException;, +import javax.naming.directory.*;, +import java.util.List;, +, +/**, + *, + */, +public class ActiveDirectoryGroupsResolver implements AbstractLdapConnection.GroupsResolver {, +, +    private final ESLogger logger;, +    private final String baseDn;, +, +    public ActiveDirectoryGroupsResolver(ESLogger logger, String baseDn) {, +        this.logger = logger;, +        this.baseDn = baseDn;, +    }, +, +    public List<String> resolve(DirContext ctx, String userDn, TimeValue timeout) {, +, +        String groupsSearchFilter = buildGroupQuery(ctx, userDn, timeout);, +        logger.debug("group SID to DN search filter: [{}]", groupsSearchFilter);, +, +        // Search for groups the user belongs to in order to get their names, +        //Create the search controls, +        SearchControls groupsSearchCtls = new SearchControls();, +, +        //Specify the search scope, +        groupsSearchCtls.setSearchScope(SearchScope.SUB_TREE.scope());, +        groupsSearchCtls.setReturningAttributes(Strings.EMPTY_ARRAY);  //we only need the entry DN, +        groupsSearchCtls.setTimeLimit((int) timeout.millis());, +, +        ImmutableList.Builder<String> groups = ImmutableList.builder();, +        try (ClosableNamingEnumeration<SearchResult> groupsAnswer = new ClosableNamingEnumeration<>(, +                ctx.search(baseDn, groupsSearchFilter, groupsSearchCtls))) {, +, +            //Loop through the search results, +            while (groupsAnswer.hasMoreElements()) {, +                SearchResult sr = groupsAnswer.next();, +                groups.add(sr.getNameInNamespace());, +            }, +        } catch (NamingException | LdapException ne) {]