[+++ b/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingTests.java, +                    waitNoPendingTasksOnMaster();, +++ b/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingTests.java, +                    waitNoPendingTasksOnMaster();, +++ b/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +        waitNoPendingTasksOnAll();, +++ b/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingTests.java, +                    waitNoPendingTasksOnMaster();, +++ b/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +        waitNoPendingTasksOnAll();, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.action.admin.cluster.tasks.PendingClusterTasksResponse;, +import static org.hamcrest.Matchers.*;, +     * Waits until all nodes have no pending tasks., +     */, +    public void waitNoPendingTasksOnAll() throws InterruptedException {, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get();, +        final PendingClusterTasksResponse[] reference = new PendingClusterTasksResponse[1];, +        boolean applied = awaitBusy(new Predicate<Object>() {, +            @Override, +            public boolean apply(Object input) {, +                reference[0] = null;, +                for (Client client : clients()) {, +                    PendingClusterTasksResponse pendingTasks = client.admin().cluster().preparePendingClusterTasks().setLocal(true).get();, +                    if (!pendingTasks.pendingTasks().isEmpty()) {, +                        reference[0] = pendingTasks;, +                        return false;, +                    }, +                }, +                return true;, +            }, +        });, +        if (!applied) {, +            fail(reference[0].prettyPrint());, +        }, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get();, +    }, +, +    /**, +     * Waits until the elected master node has no pending tasks., +     */, +    public void waitNoPendingTasksOnMaster() throws InterruptedException {, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get();, +        final PendingClusterTasksResponse[] reference = new PendingClusterTasksResponse[1];, +        boolean applied = awaitBusy(new Predicate<Object>() {, +            @Override, +            public boolean apply(Object input) {, +                reference[0] = null;, +                PendingClusterTasksResponse pendingTasks = client().admin().cluster().preparePendingClusterTasks().get();, +                if (!pendingTasks.pendingTasks().isEmpty()) {, +                    reference[0] = pendingTasks;, +                    return false;, +                }, +                return true;, +            }, +        });, +        if (!applied) {, +            fail(reference[0].prettyPrint());, +        }, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get();, +    }, +, +    /**]