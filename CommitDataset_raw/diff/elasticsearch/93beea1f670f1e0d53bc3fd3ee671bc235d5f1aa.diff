[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are reading the cluster metadata and indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are reading the cluster metadata and indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        // Cluster is not affected but we look up repositories in metadata, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are reading the cluster metadata and indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        // Cluster is not affected but we look up repositories in metadata, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/SnapshotStatus.java, +import org.elasticsearch.cluster.SnapshotsInProgress.State;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are reading the cluster metadata and indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        // Cluster is not affected but we look up repositories in metadata, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/SnapshotStatus.java, +import org.elasticsearch.cluster.SnapshotsInProgress.State;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +import org.elasticsearch.cluster.SnapshotsInProgress;, +        List<SnapshotsInProgress.Entry> currentSnapshots = snapshotsService.currentSnapshots(request.repository(), request.snapshots());, +        for (SnapshotsInProgress.Entry entry : currentSnapshots) {, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                                List<SnapshotsInProgress.Entry> currentSnapshots =, +    private SnapshotsStatusResponse buildResponse(SnapshotsStatusRequest request, List<SnapshotsInProgress.Entry> currentSnapshots,, +            for (SnapshotsInProgress.Entry entry : currentSnapshots) {, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                        final SnapshotsInProgress.State state;, +                                state = SnapshotsInProgress.State.FAILED;, +                                state = SnapshotsInProgress.State.SUCCESS;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are reading the cluster metadata and indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        // Cluster is not affected but we look up repositories in metadata, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/SnapshotStatus.java, +import org.elasticsearch.cluster.SnapshotsInProgress.State;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +import org.elasticsearch.cluster.SnapshotsInProgress;, +        List<SnapshotsInProgress.Entry> currentSnapshots = snapshotsService.currentSnapshots(request.repository(), request.snapshots());, +        for (SnapshotsInProgress.Entry entry : currentSnapshots) {, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                                List<SnapshotsInProgress.Entry> currentSnapshots =, +    private SnapshotsStatusResponse buildResponse(SnapshotsStatusRequest request, List<SnapshotsInProgress.Entry> currentSnapshots,, +            for (SnapshotsInProgress.Entry entry : currentSnapshots) {, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                        final SnapshotsInProgress.State state;, +                                state = SnapshotsInProgress.State.FAILED;, +                                state = SnapshotsInProgress.State.SUCCESS;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +    private boolean customs = true;, +        customs = true;, +        customs = false;, +    public ClusterStateRequest customs(boolean customs) {, +        this.customs = customs;, +        return this;, +    }, +, +    public boolean customs() {, +        return customs;, +    }, +, +        customs = in.readBoolean();, +        out.writeBoolean(customs);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are reading the cluster metadata and indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        // Cluster is not affected but we look up repositories in metadata, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/SnapshotStatus.java, +import org.elasticsearch.cluster.SnapshotsInProgress.State;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +import org.elasticsearch.cluster.SnapshotsInProgress;, +        List<SnapshotsInProgress.Entry> currentSnapshots = snapshotsService.currentSnapshots(request.repository(), request.snapshots());, +        for (SnapshotsInProgress.Entry entry : currentSnapshots) {, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                                List<SnapshotsInProgress.Entry> currentSnapshots =, +    private SnapshotsStatusResponse buildResponse(SnapshotsStatusRequest request, List<SnapshotsInProgress.Entry> currentSnapshots,, +            for (SnapshotsInProgress.Entry entry : currentSnapshots) {, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                        final SnapshotsInProgress.State state;, +                                state = SnapshotsInProgress.State.FAILED;, +                                state = SnapshotsInProgress.State.SUCCESS;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +    private boolean customs = true;, +        customs = true;, +        customs = false;, +    public ClusterStateRequest customs(boolean customs) {]