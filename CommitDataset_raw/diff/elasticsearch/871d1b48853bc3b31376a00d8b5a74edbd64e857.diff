[+++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.Randomness;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(Randomness.get().nextInt(1000)), request.indices());, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.Randomness;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(Randomness.get().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.Randomness;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(Randomness.get().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.Randomness;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(Randomness.get().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +    @SuppressForbidden(reason = "ThreadLocalRandom is okay when not running tests"), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.Randomness;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(Randomness.get().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +    @SuppressForbidden(reason = "ThreadLocalRandom is okay when not running tests"), +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +import org.elasticsearch.common.Randomness;, +            int index = Randomness.get().nextInt(names.size());, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.Randomness;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(Randomness.get().nextInt(1000)), request.indices());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import org.elasticsearch.common.Randomness;, +        this.shuffler = new RotationShardShuffler(Randomness.get().nextInt());, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +    @SuppressForbidden(reason = "ThreadLocalRandom is okay when not running tests"), +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +import org.elasticsearch.common.Randomness;, +            int index = Randomness.get().nextInt(names.size());, +++ b/plugins/lang-javascript/src/test/java/org/elasticsearch/script/javascript/JavaScriptScriptMultiThreadedTests.java, +import org.elasticsearch.common.Randomness;, +                        long x = Randomness.get().nextInt();, +                        long y = Randomness.get().nextInt();, +                        long x = Randomness.get().nextInt();, +                            long y = Randomness.get().nextInt();, +                            long x = Randomness.get().nextInt();, +                            long y = Randomness.get().nextInt();, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.Randomness;, +        Map<String, Set<String>> routingMap = indexNameExpressionResolver.resolveSearchRouting(clusterState, Integer.toString(Randomness.get().nextInt(1000)), request.indices());]