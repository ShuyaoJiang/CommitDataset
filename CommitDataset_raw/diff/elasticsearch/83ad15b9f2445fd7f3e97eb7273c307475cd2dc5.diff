[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/IndicesMemoryCleaner.java, +import org.elasticsearch.index.shard.ShardId;, +import java.util.Set;, +, +import static org.elasticsearch.util.collect.Sets.*;, +    public void fullMemoryClean() {, +                indexShard.flush(new Engine.Flush().full(true));, +            }, +        }, +    }, +, +    public void forceCleanMemory(Set<ShardId> shardsToIgnore) {, +        for (IndexService indexService : indicesService) {, +            for (IndexShard indexShard : indexService) {, +                if (!shardsToIgnore.contains(indexShard.shardId())) {, +                    indexShard.flush(new Engine.Flush().full(false));, +                }, +        Set<ShardId> shardsCleaned = newHashSet();, +            shardsCleaned.add(tuple.v2().shardId());, +        return new MemoryCleanResult(totalShards, cleanedShards, new SizeValue(estimatedFlushableSize), new SizeValue(cleaned), shardsCleaned);, +        private final Set<ShardId> shardsCleaned;, +        public MemoryCleanResult(int totalShards, int cleanedShards, SizeValue estimatedFlushableSize, SizeValue cleaned, Set<ShardId> shardsCleaned) {, +            this.shardsCleaned = shardsCleaned;, +        public Set<ShardId> shardsCleaned() {, +            return this.shardsCleaned;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/IndicesMemoryCleaner.java, +import org.elasticsearch.index.shard.ShardId;, +import java.util.Set;, +, +import static org.elasticsearch.util.collect.Sets.*;, +    public void fullMemoryClean() {, +                indexShard.flush(new Engine.Flush().full(true));, +            }, +        }, +    }, +, +    public void forceCleanMemory(Set<ShardId> shardsToIgnore) {, +        for (IndexService indexService : indicesService) {, +            for (IndexShard indexShard : indexService) {, +                if (!shardsToIgnore.contains(indexShard.shardId())) {, +                    indexShard.flush(new Engine.Flush().full(false));, +                }, +        Set<ShardId> shardsCleaned = newHashSet();, +            shardsCleaned.add(tuple.v2().shardId());, +        return new MemoryCleanResult(totalShards, cleanedShards, new SizeValue(estimatedFlushableSize), new SizeValue(cleaned), shardsCleaned);, +        private final Set<ShardId> shardsCleaned;, +        public MemoryCleanResult(int totalShards, int cleanedShards, SizeValue estimatedFlushableSize, SizeValue cleaned, Set<ShardId> shardsCleaned) {, +            this.shardsCleaned = shardsCleaned;, +        public Set<ShardId> shardsCleaned() {, +            return this.shardsCleaned;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/memory/alpha/AlphaMemoryMonitor.java, +                    indicesMemoryCleaner.fullMemoryClean();, +                    if (memoryCleanResult.cleaned().bytes() < memoryToClean && (fullCounter > (fullThreshold / 2))) {, +                        indicesMemoryCleaner.forceCleanMemory(memoryCleanResult.shardsCleaned());]