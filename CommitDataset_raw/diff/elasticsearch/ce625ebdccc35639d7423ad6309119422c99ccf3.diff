[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, new ShardSearchFailure[0]));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, new ShardSearchFailure[0]));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +        return reducedQueryPhase(queryResults, null, 0);, +     * @param numReducePhases the number of non-final reduce phases applied to the query results., +                                                     List<InternalAggregations> bufferdAggs, int numReducePhases) {, +        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases;, +        numReducePhases++; // increment for this phase, +            return new ReducedQueryPhase(totalHits, fetchHits, maxScore, timedOut, terminatedEarly, null, null, null, null,, +                numReducePhases);, +            assert numReducePhases > 1 : "num reduce phases must be > 1 but was: " + numReducePhases;, +            shardResults, numReducePhases);, +        // the number of reduces phases, +        final int numReducePhases;, +                                 SearchProfileShardResults shardResults, int numReducePhases) {, +            if (numReducePhases <= 0) {, +                throw new IllegalArgumentException("at least one reduce phase must have been applied but was: " + numReducePhases);, +            }, +            this.numReducePhases = numReducePhases;, +            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases);, +        private int numReducePhases = 0;, +                numReducePhases++;, +            return controller.reducedQueryPhase(results.asList(), getRemaining(), numReducePhases);, +, +        int getNumReducePhases() { return numReducePhases; }, +            if (request.getBatchedReduceSize() < numShards) {, +                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, new ShardSearchFailure[0]));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +        return reducedQueryPhase(queryResults, null, 0);, +     * @param numReducePhases the number of non-final reduce phases applied to the query results., +                                                     List<InternalAggregations> bufferdAggs, int numReducePhases) {, +        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases;, +        numReducePhases++; // increment for this phase, +            return new ReducedQueryPhase(totalHits, fetchHits, maxScore, timedOut, terminatedEarly, null, null, null, null,, +                numReducePhases);, +            assert numReducePhases > 1 : "num reduce phases must be > 1 but was: " + numReducePhases;, +            shardResults, numReducePhases);, +        // the number of reduces phases, +        final int numReducePhases;, +                                 SearchProfileShardResults shardResults, int numReducePhases) {, +            if (numReducePhases <= 0) {, +                throw new IllegalArgumentException("at least one reduce phase must have been applied but was: " + numReducePhases);, +            }, +            this.numReducePhases = numReducePhases;, +            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases);, +        private int numReducePhases = 0;, +                numReducePhases++;, +            return controller.reducedQueryPhase(results.asList(), getRemaining(), numReducePhases);, +, +        int getNumReducePhases() { return numReducePhases; }, +            if (request.getBatchedReduceSize() < numShards) {, +                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    private int batchedReduceSize = 512;, +    public void setBatchedReduceSize(int batchedReduceSize) {, +        if (batchedReduceSize <= 1) {, +            throw new IllegalArgumentException("batchedReduceSize must be >= 2");, +        this.batchedReduceSize = batchedReduceSize;, +    public int getBatchedReduceSize() {, +        return batchedReduceSize;, +            batchedReduceSize = in.readVInt();, +            out.writeVInt(batchedReduceSize);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, new ShardSearchFailure[0]));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +        return reducedQueryPhase(queryResults, null, 0);, +     * @param numReducePhases the number of non-final reduce phases applied to the query results., +                                                     List<InternalAggregations> bufferdAggs, int numReducePhases) {, +        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases;, +        numReducePhases++; // increment for this phase, +            return new ReducedQueryPhase(totalHits, fetchHits, maxScore, timedOut, terminatedEarly, null, null, null, null,, +                numReducePhases);, +            assert numReducePhases > 1 : "num reduce phases must be > 1 but was: " + numReducePhases;, +            shardResults, numReducePhases);, +        // the number of reduces phases, +        final int numReducePhases;, +                                 SearchProfileShardResults shardResults, int numReducePhases) {, +            if (numReducePhases <= 0) {, +                throw new IllegalArgumentException("at least one reduce phase must have been applied but was: " + numReducePhases);, +            }, +            this.numReducePhases = numReducePhases;, +            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases);, +        private int numReducePhases = 0;, +                numReducePhases++;, +            return controller.reducedQueryPhase(results.asList(), getRemaining(), numReducePhases);, +, +        int getNumReducePhases() { return numReducePhases; }, +            if (request.getBatchedReduceSize() < numShards) {, +                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    private int batchedReduceSize = 512;]