[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.cluster.action.shard.NoOpShardStateActionListener;, +    final class ReplicationPhase extends AbstractRunnable implements ShardStateAction.Listener {, +        @Override, +        public void onShardFailedNoMaster() {, +, +        }, +, +        @Override, +        public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +, +        }, +, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, ReplicationPhase.this);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.cluster.action.shard.NoOpShardStateActionListener;, +    final class ReplicationPhase extends AbstractRunnable implements ShardStateAction.Listener {, +        @Override, +        public void onShardFailedNoMaster() {, +, +        }, +, +        @Override, +        public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +, +        }, +, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, ReplicationPhase.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/NoOpShardStateActionListener.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.action.shard;, +, +public class NoOpShardStateActionListener implements ShardStateAction.Listener {, +}, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.cluster.action.shard.NoOpShardStateActionListener;, +    final class ReplicationPhase extends AbstractRunnable implements ShardStateAction.Listener {, +        @Override, +        public void onShardFailedNoMaster() {, +, +        }, +, +        @Override, +        public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +, +        }, +, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, ReplicationPhase.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/NoOpShardStateActionListener.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.action.shard;, +, +public class NoOpShardStateActionListener implements ShardStateAction.Listener {, +}, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +            listener.onShardFailedNoMaster();, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, listener);, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, @Nullable final Throwable failure, Listener listener) {, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, listener);, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, final Throwable failure, Listener listener) {, +                        listener.onShardFailedFailure(masterNode, exp);, +, +    public interface Listener {]