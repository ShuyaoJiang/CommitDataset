[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationModule.java, +import org.elasticsearch.cluster.routing.allocation.allocator.ShardsAllocators;, +import org.elasticsearch.common.util.ExtensionPoint;, +, +    private final ExtensionPoint.TypeExtensionPoint<ShardsAllocator> shardsAllocators = new ExtensionPoint.TypeExtensionPoint<>("shards_allocator", ShardsAllocator.class);, +    private final ExtensionPoint.SetExtensionPoint<AllocationDecider> allocationDeciders = new ExtensionPoint.SetExtensionPoint<>("allocation_decider", AllocationDecider.class, AllocationDeciders.class);, +        for (Class<? extends AllocationDecider> decider : DEFAULT_ALLOCATION_DECIDERS) {, +            allocationDeciders.registerExtension(decider);, +        }, +        shardsAllocators.registerExtension(BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        shardsAllocators.registerExtension(EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +        allocationDeciders.registerExtension(allocationDecider);, +        shardsAllocators.registerExtension(name, clazz);, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, AllocationModule.SHARDS_ALLOCATOR_TYPE_KEY, AllocationModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(EVEN_SHARD_COUNT_ALLOCATOR)) {, +        allocationDeciders.bind(binder());, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationModule.java, +import org.elasticsearch.cluster.routing.allocation.allocator.ShardsAllocators;, +import org.elasticsearch.common.util.ExtensionPoint;, +, +    private final ExtensionPoint.TypeExtensionPoint<ShardsAllocator> shardsAllocators = new ExtensionPoint.TypeExtensionPoint<>("shards_allocator", ShardsAllocator.class);, +    private final ExtensionPoint.SetExtensionPoint<AllocationDecider> allocationDeciders = new ExtensionPoint.SetExtensionPoint<>("allocation_decider", AllocationDecider.class, AllocationDeciders.class);, +        for (Class<? extends AllocationDecider> decider : DEFAULT_ALLOCATION_DECIDERS) {, +            allocationDeciders.registerExtension(decider);, +        }, +        shardsAllocators.registerExtension(BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        shardsAllocators.registerExtension(EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +        allocationDeciders.registerExtension(allocationDecider);, +        shardsAllocators.registerExtension(name, clazz);, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, AllocationModule.SHARDS_ALLOCATOR_TYPE_KEY, AllocationModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(EVEN_SHARD_COUNT_ALLOCATOR)) {, +        allocationDeciders.bind(binder());, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                throw new SettingsException("Failed to load settings from [" + resourceName + "]");, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationModule.java, +import org.elasticsearch.cluster.routing.allocation.allocator.ShardsAllocators;, +import org.elasticsearch.common.util.ExtensionPoint;, +, +    private final ExtensionPoint.TypeExtensionPoint<ShardsAllocator> shardsAllocators = new ExtensionPoint.TypeExtensionPoint<>("shards_allocator", ShardsAllocator.class);, +    private final ExtensionPoint.SetExtensionPoint<AllocationDecider> allocationDeciders = new ExtensionPoint.SetExtensionPoint<>("allocation_decider", AllocationDecider.class, AllocationDeciders.class);, +        for (Class<? extends AllocationDecider> decider : DEFAULT_ALLOCATION_DECIDERS) {, +            allocationDeciders.registerExtension(decider);, +        }, +        shardsAllocators.registerExtension(BALANCED_ALLOCATOR, BalancedShardsAllocator.class);, +        shardsAllocators.registerExtension(EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);, +        allocationDeciders.registerExtension(allocationDecider);, +        shardsAllocators.registerExtension(name, clazz);, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, AllocationModule.SHARDS_ALLOCATOR_TYPE_KEY, AllocationModule.BALANCED_ALLOCATOR);, +        if (shardsAllocatorType.equals(EVEN_SHARD_COUNT_ALLOCATOR)) {, +        allocationDeciders.bind(binder());, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                throw new SettingsException("Failed to load settings from [" + resourceName + "]");, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.util;, +, +import org.elasticsearch.common.inject.Binder;, +import org.elasticsearch.common.inject.multibindings.MapBinder;, +import org.elasticsearch.common.inject.multibindings.Multibinder;, +import org.elasticsearch.common.settings.Settings;, +, +import java.util.*;, +, +/**, + * This class defines an official elasticsearch extension point. It registers, + * all extensions by a single name and ensures that extensions are not registered, + * more than once., + */, +public abstract class ExtensionPoint<T> {, +    protected final String name;, +    protected final Class<T> extensionClass;, +    protected final Class<?>[] singletons;, +, +    /**, +     * Creates a new extension point, +     *, +     * @param name           the human readable underscore case name of the extension poing. This is used in error messages etc., +     * @param extensionClass the base class that should be extended, +     * @param singletons     a list of singletons to bind with this extension point - these are bound in {@link #bind(Binder)}]