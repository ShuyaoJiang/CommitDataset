[+++ b/x-pack/docs/en/rollup/understanding-groups.asciidoc, +There was previously a limitation in how Rollup could handle indices that had heterogeneous mappings (multiple, unrelated/non-overlapping, +mappings).  The recommendation at the time was to configure a separate job per data "type".  For example, you might configure a separate, +job for each Beats module that you had enabled (one for `process`, another for `filesystem`, etc)., +This recommendation was driven by internal implementation details that caused document counts to be potentially incorrect if a single "merged", +job was used., +This limitation has since been alleviated.  As of 6.4.0, it is now considered best practice to combine all rollup configurations, +into a single job., +the best practice is to combine them into a single rollup job which covers both of these document types, like this:, +There was previously an issue with document counts on "overlapping" job configurations, driven by the same internal implementation detail., +If there were  two Rollup jobs saving to the same index, where one job is a "subset" of another job, it was possible that document counts, +could be incorrect for certain aggregation arrangements., +This issue has also since been eliminated in 6.4.0., +++ b/x-pack/docs/en/rollup/understanding-groups.asciidoc, +There was previously a limitation in how Rollup could handle indices that had heterogeneous mappings (multiple, unrelated/non-overlapping, +mappings).  The recommendation at the time was to configure a separate job per data "type".  For example, you might configure a separate, +job for each Beats module that you had enabled (one for `process`, another for `filesystem`, etc)., +This recommendation was driven by internal implementation details that caused document counts to be potentially incorrect if a single "merged", +job was used., +This limitation has since been alleviated.  As of 6.4.0, it is now considered best practice to combine all rollup configurations, +into a single job., +the best practice is to combine them into a single rollup job which covers both of these document types, like this:, +There was previously an issue with document counts on "overlapping" job configurations, driven by the same internal implementation detail., +If there were  two Rollup jobs saving to the same index, where one job is a "subset" of another job, it was possible that document counts, +could be incorrect for certain aggregation arrangements., +This issue has also since been eliminated in 6.4.0., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistoGroupConfig.java, +++ b/x-pack/docs/en/rollup/understanding-groups.asciidoc, +There was previously a limitation in how Rollup could handle indices that had heterogeneous mappings (multiple, unrelated/non-overlapping, +mappings).  The recommendation at the time was to configure a separate job per data "type".  For example, you might configure a separate, +job for each Beats module that you had enabled (one for `process`, another for `filesystem`, etc)., +This recommendation was driven by internal implementation details that caused document counts to be potentially incorrect if a single "merged", +job was used., +This limitation has since been alleviated.  As of 6.4.0, it is now considered best practice to combine all rollup configurations, +into a single job., +the best practice is to combine them into a single rollup job which covers both of these document types, like this:, +There was previously an issue with document counts on "overlapping" job configurations, driven by the same internal implementation detail., +If there were  two Rollup jobs saving to the same index, where one job is a "subset" of another job, it was possible that document counts, +could be incorrect for certain aggregation arrangements., +This issue has also since been eliminated in 6.4.0., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistoGroupConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistoGroupConfig.java, +            vsBuilder.missingBucket(true);, +++ b/x-pack/docs/en/rollup/understanding-groups.asciidoc, +There was previously a limitation in how Rollup could handle indices that had heterogeneous mappings (multiple, unrelated/non-overlapping, +mappings).  The recommendation at the time was to configure a separate job per data "type".  For example, you might configure a separate, +job for each Beats module that you had enabled (one for `process`, another for `filesystem`, etc)., +This recommendation was driven by internal implementation details that caused document counts to be potentially incorrect if a single "merged", +job was used., +This limitation has since been alleviated.  As of 6.4.0, it is now considered best practice to combine all rollup configurations, +into a single job., +the best practice is to combine them into a single rollup job which covers both of these document types, like this:, +There was previously an issue with document counts on "overlapping" job configurations, driven by the same internal implementation detail., +If there were  two Rollup jobs saving to the same index, where one job is a "subset" of another job, it was possible that document counts, +could be incorrect for certain aggregation arrangements., +This issue has also since been eliminated in 6.4.0., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistoGroupConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistoGroupConfig.java, +            vsBuilder.missingBucket(true);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/TermsGroupConfig.java, +            vsBuilder.missingBucket(true);, +++ b/x-pack/docs/en/rollup/understanding-groups.asciidoc, +There was previously a limitation in how Rollup could handle indices that had heterogeneous mappings (multiple, unrelated/non-overlapping, +mappings).  The recommendation at the time was to configure a separate job per data "type".  For example, you might configure a separate, +job for each Beats module that you had enabled (one for `process`, another for `filesystem`, etc)., +This recommendation was driven by internal implementation details that caused document counts to be potentially incorrect if a single "merged", +job was used., +This limitation has since been alleviated.  As of 6.4.0, it is now considered best practice to combine all rollup configurations, +into a single job., +the best practice is to combine them into a single rollup job which covers both of these document types, like this:, +There was previously an issue with document counts on "overlapping" job configurations, driven by the same internal implementation detail., +If there were  two Rollup jobs saving to the same index, where one job is a "subset" of another job, it was possible that document counts, +could be incorrect for certain aggregation arrangements., +This issue has also since been eliminated in 6.4.0., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistoGroupConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistoGroupConfig.java, +            vsBuilder.missingBucket(true);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/TermsGroupConfig.java, +            vsBuilder.missingBucket(true);, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/rollup/RollupRestTestStateCleaner.java, +    public static void clearRollupMetadata(RestClient adminClient) throws Exception {, +        deleteAllJobs(adminClient);, +        waitForPendingTasks(adminClient);, +    private static void waitForPendingTasks(RestClient adminClient) throws Exception {, +    private static void deleteAllJobs(RestClient adminClient) throws Exception {, +        try (BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(),, +            StandardCharsets.UTF_8))) {, +++ b/x-pack/docs/en/rollup/understanding-groups.asciidoc, +There was previously a limitation in how Rollup could handle indices that had heterogeneous mappings (multiple, unrelated/non-overlapping, +mappings).  The recommendation at the time was to configure a separate job per data "type".  For example, you might configure a separate, +job for each Beats module that you had enabled (one for `process`, another for `filesystem`, etc)., +This recommendation was driven by internal implementation details that caused document counts to be potentially incorrect if a single "merged", +job was used., +This limitation has since been alleviated.  As of 6.4.0, it is now considered best practice to combine all rollup configurations, +into a single job., +the best practice is to combine them into a single rollup job which covers both of these document types, like this:, +There was previously an issue with document counts on "overlapping" job configurations, driven by the same internal implementation detail., +If there were  two Rollup jobs saving to the same index, where one job is a "subset" of another job, it was possible that document counts, +could be incorrect for certain aggregation arrangements., +This issue has also since been eliminated in 6.4.0.]