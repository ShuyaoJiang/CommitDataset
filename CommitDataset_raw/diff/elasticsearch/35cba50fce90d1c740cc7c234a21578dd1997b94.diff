[+++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +import org.elasticsearch.common.Strings;, +import java.util.List;, +        setLikeText(new String[]{likeText});, +    public void setLikeText(List<String> likeText) {, +        setLikeText(likeText.toArray(Strings.EMPTY_ARRAY));, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +import org.elasticsearch.common.Strings;, +import java.util.List;, +        setLikeText(new String[]{likeText});, +    public void setLikeText(List<String> likeText) {, +        setLikeText(likeText.toArray(Strings.EMPTY_ARRAY));, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java, +import com.google.common.collect.ObjectArrays;, +            // collapse the text onto the same field name, +            Collection<LikeText> likeTextsCollapsed = collapseTextOnField(likeTexts);, +            for (LikeText likeText : likeTextsCollapsed) {, +    public static Collection<LikeText> collapseTextOnField (Collection<LikeText> likeTexts) {, +        Map<String, LikeText> collapsedTexts = new HashMap<>();, +        for (LikeText likeText : likeTexts) {, +            String field = likeText.field;, +            String[] text = likeText.text;, +            if (collapsedTexts.containsKey(field)) {, +                text = ObjectArrays.concat(collapsedTexts.get(field).text, text, String.class);, +            }, +            collapsedTexts.put(field, new LikeText(field, text));, +        }, +        return collapsedTexts.values();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +import org.elasticsearch.common.Strings;, +import java.util.List;, +        setLikeText(new String[]{likeText});, +    public void setLikeText(List<String> likeText) {, +        setLikeText(likeText.toArray(Strings.EMPTY_ARRAY));, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java, +import com.google.common.collect.ObjectArrays;, +            // collapse the text onto the same field name, +            Collection<LikeText> likeTextsCollapsed = collapseTextOnField(likeTexts);, +            for (LikeText likeText : likeTextsCollapsed) {, +    public static Collection<LikeText> collapseTextOnField (Collection<LikeText> likeTexts) {, +        Map<String, LikeText> collapsedTexts = new HashMap<>();, +        for (LikeText likeText : likeTexts) {, +            String field = likeText.field;, +            String[] text = likeText.text;, +            if (collapsedTexts.containsKey(field)) {, +                text = ObjectArrays.concat(collapsedTexts.get(field).text, text, String.class);, +            }, +            collapsedTexts.put(field, new LikeText(field, text));, +        }, +        return collapsedTexts.values();, +    }, +, +++ b/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.index.search.morelikethis.MoreLikeThisFetchService.LikeText;, +        List<LikeText> likeTexts = new ArrayList<>();, +        likeTexts.add(new LikeText("name.first", new String[]{, +                "test person 1 name.first", "test person 2 name.first", "test person 3 name.first", "test person 4 name.first"}));, +        likeTexts.add(new LikeText("name.last", new String[]{, +                "test person 1 name.last", "test person 2 name.last", "test person 3 name.last", "test person 4 name.last"}));, +        String query = copyToStringFromClasspath("/org/elasticsearch/index/query/mlt-items.json");, +++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +import org.elasticsearch.common.Strings;, +import java.util.List;, +        setLikeText(new String[]{likeText});, +    public void setLikeText(List<String> likeText) {, +        setLikeText(likeText.toArray(Strings.EMPTY_ARRAY));, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java, +import com.google.common.collect.ObjectArrays;, +            // collapse the text onto the same field name, +            Collection<LikeText> likeTextsCollapsed = collapseTextOnField(likeTexts);, +            for (LikeText likeText : likeTextsCollapsed) {, +    public static Collection<LikeText> collapseTextOnField (Collection<LikeText> likeTexts) {, +        Map<String, LikeText> collapsedTexts = new HashMap<>();, +        for (LikeText likeText : likeTexts) {, +            String field = likeText.field;, +            String[] text = likeText.text;, +            if (collapsedTexts.containsKey(field)) {, +                text = ObjectArrays.concat(collapsedTexts.get(field).text, text, String.class);, +            }, +            collapsedTexts.put(field, new LikeText(field, text));, +        }, +        return collapsedTexts.values();, +    }, +, +++ b/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.index.search.morelikethis.MoreLikeThisFetchService.LikeText;, +        List<LikeText> likeTexts = new ArrayList<>();, +        likeTexts.add(new LikeText("name.first", new String[]{]