[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenResponse.java, +        args -> new InvalidateTokenResponse((int) args[0], (int) args[1], (List<ElasticsearchException>) args[3]));, +    public InvalidateTokenResponse(int invalidatedTokens, int previouslyInvalidatedTokens,, +        return invalidatedTokens == that.invalidatedTokens &&, +        return Objects.hash(invalidatedTokens, previouslyInvalidatedTokens, errors);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenResponse.java, +        args -> new InvalidateTokenResponse((int) args[0], (int) args[1], (List<ElasticsearchException>) args[3]));, +    public InvalidateTokenResponse(int invalidatedTokens, int previouslyInvalidatedTokens,, +        return invalidatedTokens == that.invalidatedTokens &&, +        return Objects.hash(invalidatedTokens, previouslyInvalidatedTokens, errors);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/InvalidateTokenResponseTests.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenResponse.java, +        args -> new InvalidateTokenResponse((int) args[0], (int) args[1], (List<ElasticsearchException>) args[3]));, +    public InvalidateTokenResponse(int invalidatedTokens, int previouslyInvalidatedTokens,, +        return invalidatedTokens == that.invalidatedTokens &&, +        return Objects.hash(invalidatedTokens, previouslyInvalidatedTokens, errors);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/InvalidateTokenResponseTests.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenRequest.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenResponse.java, +        args -> new InvalidateTokenResponse((int) args[0], (int) args[1], (List<ElasticsearchException>) args[3]));, +    public InvalidateTokenResponse(int invalidatedTokens, int previouslyInvalidatedTokens,, +        return invalidatedTokens == that.invalidatedTokens &&, +        return Objects.hash(invalidatedTokens, previouslyInvalidatedTokens, errors);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/InvalidateTokenResponseTests.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenRequest.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenResponse.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenResponse.java, +        args -> new InvalidateTokenResponse((int) args[0], (int) args[1], (List<ElasticsearchException>) args[3]));, +    public InvalidateTokenResponse(int invalidatedTokens, int previouslyInvalidatedTokens,, +        return invalidatedTokens == that.invalidatedTokens &&, +        return Objects.hash(invalidatedTokens, previouslyInvalidatedTokens, errors);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/InvalidateTokenResponseTests.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenRequest.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenResponse.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/TokensInvalidationResult.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenResponse.java, +        args -> new InvalidateTokenResponse((int) args[0], (int) args[1], (List<ElasticsearchException>) args[3]));, +    public InvalidateTokenResponse(int invalidatedTokens, int previouslyInvalidatedTokens,, +        return invalidatedTokens == that.invalidatedTokens &&, +        return Objects.hash(invalidatedTokens, previouslyInvalidatedTokens, errors);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/InvalidateTokenResponseTests.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenRequest.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenResponse.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/TokensInvalidationResult.java, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenResponseTests.java, +            equalTo("{" +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenResponse.java, +        args -> new InvalidateTokenResponse((int) args[0], (int) args[1], (List<ElasticsearchException>) args[3]));, +    public InvalidateTokenResponse(int invalidatedTokens, int previouslyInvalidatedTokens,, +        return invalidatedTokens == that.invalidatedTokens &&, +        return Objects.hash(invalidatedTokens, previouslyInvalidatedTokens, errors);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/InvalidateTokenResponseTests.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenRequest.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenResponse.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/TokensInvalidationResult.java, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenResponseTests.java, +            equalTo("{" +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ExpiredTokenRemover.java, + * Responsible for cleaning the invalidated and expired tokens from the security index., + * The document gets deleted if it was created more than 24 hours which is the maximum, + * lifetime of a refresh token, +                .filter(QueryBuilders.termsQuery("doc_type", "token")), +                .filter(QueryBuilders.rangeQuery("creation_time").lte(now.minus(24L, ChronoUnit.HOURS).toEpochMilli())));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenResponse.java, +        args -> new InvalidateTokenResponse((int) args[0], (int) args[1], (List<ElasticsearchException>) args[3]));, +    public InvalidateTokenResponse(int invalidatedTokens, int previouslyInvalidatedTokens,, +        return invalidatedTokens == that.invalidatedTokens &&, +        return Objects.hash(invalidatedTokens, previouslyInvalidatedTokens, errors);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/InvalidateTokenResponseTests.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenRequest.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenResponse.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/TokensInvalidationResult.java, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/token/InvalidateTokenResponseTests.java, +            equalTo("{" +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ExpiredTokenRemover.java, + * Responsible for cleaning the invalidated and expired tokens from the security index., + * The document gets deleted if it was created more than 24 hours which is the maximum, + * lifetime of a refresh token, +                .filter(QueryBuilders.termsQuery("doc_type", "token")), +                .filter(QueryBuilders.rangeQuery("creation_time").lte(now.minus(24L, ChronoUnit.HOURS).toEpochMilli())));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +    private static final String TOKEN_DOC_TYPE = "token";, +    private static final String TOKEN_DOC_ID_PREFIX = TOKEN_DOC_TYPE + "_";, +                builder.field("doc_type", TOKEN_DOC_TYPE);, +                    decodeToken(token, ActionListener.wrap(userToken -> {, +                        if (userToken != null) {, +                            checkIfTokenIsValid(userToken, listener);, +                            listener.onResponse(null);, +                    }, listener::onFailure));, +                        }, listener::onFailure));, +     * used. The process of invalidation involves performing an update to, +                        indexInvalidation(Collections.singleton(userToken.getId()), listener, new AtomicInteger(0),, +                            "access_token", null);, +            indexInvalidation(Collections.singleton(userToken.getId()), listener, new AtomicInteger(0), "access_token", null);, +                indexInvalidation(accessTokenIds, listener, new AtomicInteger(result.getAttemptCount()),, +                    "access_token", result),, +                    .filter(QueryBuilders.termQuery("doc_type", TOKEN_DOC_TYPE)), +                .filter(QueryBuilders.termQuery("doc_type", TOKEN_DOC_TYPE)), +                .filter(QueryBuilders.termQuery("doc_type", TOKEN_DOC_TYPE)), +        return TOKEN_DOC_ID_PREFIX + id;]