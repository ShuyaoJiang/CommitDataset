[+++ b/server/src/main/java/org/elasticsearch/index/engine/LuceneChangesSnapshot.java, +        final long requestingSize = (toSeqNo - fromSeqNo) == Long.MAX_VALUE ? Long.MAX_VALUE : (toSeqNo - fromSeqNo + 1L);, +        this.searchBatchSize = requestingSize < searchBatchSize ? Math.toIntExact(requestingSize) : searchBatchSize;, +        this.parallelArray = new ParallelArray(this.searchBatchSize);, +++ b/server/src/main/java/org/elasticsearch/index/engine/LuceneChangesSnapshot.java, +        final long requestingSize = (toSeqNo - fromSeqNo) == Long.MAX_VALUE ? Long.MAX_VALUE : (toSeqNo - fromSeqNo + 1L);, +        this.searchBatchSize = requestingSize < searchBatchSize ? Math.toIntExact(requestingSize) : searchBatchSize;, +        this.parallelArray = new ParallelArray(this.searchBatchSize);, +++ b/server/src/test/java/org/elasticsearch/index/engine/LuceneChangesSnapshotTests.java, +, +    public void testOverFlow() throws Exception {, +        long fromSeqNo = randomLongBetween(0, 5);, +        long toSeqNo = randomLongBetween(Long.MAX_VALUE - 5, Long.MAX_VALUE);, +        try (Translog.Snapshot snapshot = engine.newChangesSnapshot("test", mapperService, fromSeqNo, toSeqNo, true)) {, +            IllegalStateException error = expectThrows(IllegalStateException.class, () -> drainAll(snapshot));, +            assertThat(error.getMessage(),, +                containsString("Not all operations between from_seqno [" + fromSeqNo + "] and to_seqno [" + toSeqNo + "] found"));, +        }, +    }]