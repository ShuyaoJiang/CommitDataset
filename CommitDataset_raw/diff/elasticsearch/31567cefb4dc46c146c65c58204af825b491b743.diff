[+++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    private String concreteIndex(final ClusterState state, final ReplicationRequest request) {, +        return resolveIndex() ? indexNameExpressionResolver.concreteSingleIndex(state, request).getName() : request.index();, +    }, +, +    private ClusterBlockException blockExceptions(final ClusterState state, final String indexName) {, +        ClusterBlockLevel globalBlockLevel = globalBlockLevel();, +        if (globalBlockLevel != null) {, +            ClusterBlockException blockException = state.blocks().globalBlockedException(globalBlockLevel);, +            if (blockException != null) {, +                return blockException;, +            }, +        }, +        ClusterBlockLevel indexBlockLevel = indexBlockLevel();, +        if (indexBlockLevel != null) {, +            ClusterBlockException blockException = state.blocks().indexBlockedException(indexBlockLevel, indexName);, +            if (blockException != null) {, +                return blockException;, +            }, +        }, +        return null;, +    }, +, +                || TransportActions.isShardNotAvailableException(e), +                || isRetryableClusterBlockException(e);, +    }, +, +    boolean isRetryableClusterBlockException(final Throwable e) {, +        if (e instanceof ClusterBlockException) {, +            return ((ClusterBlockException) e).retryable();, +        }, +        return false;, +                final ClusterState clusterState = clusterService.state();, +                final IndexMetaData indexMetaData = clusterState.metaData().getIndexSafe(primaryShardReference.routingEntry().index());, +, +                final ClusterBlockException blockException = blockExceptions(clusterState, indexMetaData.getIndex().getName());, +                if (blockException != null) {, +                    logger.trace("cluster is blocked, action failed on primary", blockException);, +                    throw blockException;, +                }, +, +                    DiscoveryNode relocatingNode = clusterState.nodes().get(primary.relocatingNodeId());, +            final String concreteIndex = concreteIndex(state, request);, +            final ClusterBlockException blockException = blockExceptions(state, concreteIndex);, +            if (blockException != null) {, +                if (blockException.retryable()) {, +                    logger.trace("cluster is blocked, scheduling a retry", blockException);, +                    retry(blockException);, +                } else {, +                    finishAsFailed(blockException);, +            } else {, +                assert request.waitForActiveShards() != ActiveShardCount.DEFAULT :, +                    "request waitForActiveShards must be set in resolveRequest";, +        }, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    private String concreteIndex(final ClusterState state, final ReplicationRequest request) {, +        return resolveIndex() ? indexNameExpressionResolver.concreteSingleIndex(state, request).getName() : request.index();, +    }, +, +    private ClusterBlockException blockExceptions(final ClusterState state, final String indexName) {, +        ClusterBlockLevel globalBlockLevel = globalBlockLevel();, +        if (globalBlockLevel != null) {, +            ClusterBlockException blockException = state.blocks().globalBlockedException(globalBlockLevel);, +            if (blockException != null) {, +                return blockException;, +            }, +        }, +        ClusterBlockLevel indexBlockLevel = indexBlockLevel();, +        if (indexBlockLevel != null) {, +            ClusterBlockException blockException = state.blocks().indexBlockedException(indexBlockLevel, indexName);, +            if (blockException != null) {, +                return blockException;, +            }, +        }, +        return null;, +    }, +, +                || TransportActions.isShardNotAvailableException(e), +                || isRetryableClusterBlockException(e);, +    }, +, +    boolean isRetryableClusterBlockException(final Throwable e) {, +        if (e instanceof ClusterBlockException) {, +            return ((ClusterBlockException) e).retryable();, +        }, +        return false;, +                final ClusterState clusterState = clusterService.state();, +                final IndexMetaData indexMetaData = clusterState.metaData().getIndexSafe(primaryShardReference.routingEntry().index());, +, +                final ClusterBlockException blockException = blockExceptions(clusterState, indexMetaData.getIndex().getName());, +                if (blockException != null) {, +                    logger.trace("cluster is blocked, action failed on primary", blockException);, +                    throw blockException;, +                }, +, +                    DiscoveryNode relocatingNode = clusterState.nodes().get(primary.relocatingNodeId());, +            final String concreteIndex = concreteIndex(state, request);, +            final ClusterBlockException blockException = blockExceptions(state, concreteIndex);, +            if (blockException != null) {, +                if (blockException.retryable()) {]