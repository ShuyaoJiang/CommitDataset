[+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreFunction.java, +import org.apache.lucene.search.Scorer;, +import java.io.IOException;, +    static final class CannedScorer extends Scorer {, +        protected int docid;, +        protected float score;, +, +        public CannedScorer() {, +            super(null);, +        }, +, +        @Override, +        public int docID() {, +            return docid;, +        }, +, +        @Override, +        public float score() throws IOException {, +            return score;, +        }, +, +        @Override, +        public int freq() throws IOException {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public int nextDoc() throws IOException {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public int advance(int target) throws IOException {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public long cost() {, +            return 1;, +        }, +    }, +, +    private final CannedScorer scorer;, +, +        this.scorer = new CannedScorer();, +        script.setScorer(scorer);, +        scorer.docid = docId;, +        scorer.score = subQueryScore;, +            scorer.docid = docId;, +            scorer.score = subQueryExpl.getValue();, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreFunction.java, +import org.apache.lucene.search.Scorer;, +import java.io.IOException;, +    static final class CannedScorer extends Scorer {, +        protected int docid;, +        protected float score;, +, +        public CannedScorer() {, +            super(null);, +        }, +, +        @Override, +        public int docID() {, +            return docid;, +        }, +, +        @Override, +        public float score() throws IOException {, +            return score;, +        }, +, +        @Override, +        public int freq() throws IOException {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public int nextDoc() throws IOException {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public int advance(int target) throws IOException {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public long cost() {, +            return 1;, +        }, +    }, +, +    private final CannedScorer scorer;, +, +        this.scorer = new CannedScorer();, +        script.setScorer(scorer);, +        scorer.docid = docId;, +        scorer.score = subQueryScore;, +            scorer.docid = docId;, +            scorer.score = subQueryExpl.getValue();]