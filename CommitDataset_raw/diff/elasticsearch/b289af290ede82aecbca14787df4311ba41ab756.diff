[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        , +        if (site) {, +            if (!Files.exists(dir.resolve("_site"))) {, +                throw new IllegalArgumentException("Plugin [" + name + "] is a site plugin but has no _site");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        , +        if (site) {, +            if (!Files.exists(dir.resolve("_site"))) {, +                throw new IllegalArgumentException("Plugin [" + name + "] is a site plugin but has no _site");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +        Path pluginFile = pluginHandle.newDistroFile(environment);, +        Path newDistroFile(Environment env) throws IOException {, +            return Files.createTempFile(env.tmpFile(), name, ".zip");, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        , +        if (site) {, +            if (!Files.exists(dir.resolve("_site"))) {, +                throw new IllegalArgumentException("Plugin [" + name + "] is a site plugin but has no _site");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +        Path pluginFile = pluginHandle.newDistroFile(environment);, +        Path newDistroFile(Environment env) throws IOException {, +            return Files.createTempFile(env.tmpFile(), name, ".zip");, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java, +    static void writeProperties(Path pluginDir, String... stringProps) throws IOException {, +        Files.createDirectories(pluginDir.resolve("_site"));, +    public void testReadFromPropertiesSitePluginWithoutSite() throws Exception {, +        Path pluginDir = createTempDir().resolve("fake-plugin");, +        writeProperties(pluginDir,, +            "description", "fake desc",, +            "version", "1.0",, +            "elasticsearch.version", Version.CURRENT.toString(),, +            "site", "true");, +        try {, +            PluginInfo.readFromProperties(pluginDir);, +            fail("didn't get expected exception");, +        } catch (IllegalArgumentException e) {, +            assertTrue(e.getMessage().contains("site plugin but has no _site"));, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        , +        if (site) {, +            if (!Files.exists(dir.resolve("_site"))) {, +                throw new IllegalArgumentException("Plugin [" + name + "] is a site plugin but has no _site");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +        Path pluginFile = pluginHandle.newDistroFile(environment);, +        Path newDistroFile(Environment env) throws IOException {, +            return Files.createTempFile(env.tmpFile(), name, ".zip");, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java, +    static void writeProperties(Path pluginDir, String... stringProps) throws IOException {, +        Files.createDirectories(pluginDir.resolve("_site"));, +    public void testReadFromPropertiesSitePluginWithoutSite() throws Exception {, +        Path pluginDir = createTempDir().resolve("fake-plugin");, +        writeProperties(pluginDir,, +            "description", "fake desc",, +            "version", "1.0",, +            "elasticsearch.version", Version.CURRENT.toString(),, +            "site", "true");, +        try {, +            PluginInfo.readFromProperties(pluginDir);, +            fail("didn't get expected exception");, +        } catch (IllegalArgumentException e) {, +            assertTrue(e.getMessage().contains("site plugin but has no _site"));, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerTests.java, +import org.elasticsearch.Version;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.DirectoryStream;, +import java.nio.file.FileVisitResult;, +import java.nio.file.SimpleFileVisitor;, +import java.nio.file.attribute.BasicFileAttributes;, +import java.util.zip.ZipEntry;, +import java.util.zip.ZipInputStream;, +import java.util.zip.ZipOutputStream;, +import static org.elasticsearch.plugins.PluginInfoTests.writeProperties;, +    /** creates a plugin .zip and returns the url for testing */, +    private String createPlugin(final Path structure, String... properties) throws IOException {, +        writeProperties(structure, properties);, +        Path zip = createTempDir().resolve(structure.getFileName() + ".zip");, +        try (ZipOutputStream stream = new ZipOutputStream(Files.newOutputStream(zip))) {, +            Files.walkFileTree(structure, new SimpleFileVisitor<Path>() {, +                @Override, +                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {, +                    stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()));, +                    Files.copy(file, stream);, +                    return FileVisitResult.CONTINUE;, +                }, +            });]