[+++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha1, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha1, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_alpha1_ID = 5000001;, +    public static final Version V_5_0_0_alpha1 = new Version(V_5_0_0_alpha1_ID, org.apache.lucene.util.Version.LUCENE_6_0_0);, +    public static final Version CURRENT = V_5_0_0_alpha1;, +            case V_5_0_0_alpha1_ID:, +                return V_5_0_0_alpha1;, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha1, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_alpha1_ID = 5000001;, +    public static final Version V_5_0_0_alpha1 = new Version(V_5_0_0_alpha1_ID, org.apache.lucene.util.Version.LUCENE_6_0_0);, +    public static final Version CURRENT = V_5_0_0_alpha1;, +            case V_5_0_0_alpha1_ID:, +                return V_5_0_0_alpha1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +        if (out.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +        if (in.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha1, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_alpha1_ID = 5000001;, +    public static final Version V_5_0_0_alpha1 = new Version(V_5_0_0_alpha1_ID, org.apache.lucene.util.Version.LUCENE_6_0_0);, +    public static final Version CURRENT = V_5_0_0_alpha1;, +            case V_5_0_0_alpha1_ID:, +                return V_5_0_0_alpha1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +        if (out.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +        if (in.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        if (indexMetaData.activeAllocationIds(id()).isEmpty() && indexMetaData.getCreationVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha1, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_alpha1_ID = 5000001;, +    public static final Version V_5_0_0_alpha1 = new Version(V_5_0_0_alpha1_ID, org.apache.lucene.util.Version.LUCENE_6_0_0);, +    public static final Version CURRENT = V_5_0_0_alpha1;, +            case V_5_0_0_alpha1_ID:, +                return V_5_0_0_alpha1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +        if (out.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +        if (in.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        if (indexMetaData.activeAllocationIds(id()).isEmpty() && indexMetaData.getCreationVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java, +                assert Version.indexCreated(indexMetaData.getSettings()).before(Version.V_5_0_0_alpha1) : "trying to allocated a primary with an empty allocation id set, but index is new";, +                logger.debug("[{}][{}]: version-based allocation for pre-{} index found {} allocations of {}", shard.index(), shard.id(), Version.V_5_0_0_alpha1, nodeShardsResult.allocationsFound, shard);, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha1, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_alpha1_ID = 5000001;, +    public static final Version V_5_0_0_alpha1 = new Version(V_5_0_0_alpha1_ID, org.apache.lucene.util.Version.LUCENE_6_0_0);, +    public static final Version CURRENT = V_5_0_0_alpha1;, +            case V_5_0_0_alpha1_ID:, +                return V_5_0_0_alpha1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +        if (out.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +        if (in.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        if (indexMetaData.activeAllocationIds(id()).isEmpty() && indexMetaData.getCreationVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java, +                assert Version.indexCreated(indexMetaData.getSettings()).before(Version.V_5_0_0_alpha1) : "trying to allocated a primary with an empty allocation id set, but index is new";, +                logger.debug("[{}][{}]: version-based allocation for pre-{} index found {} allocations of {}", shard.index(), shard.id(), Version.V_5_0_0_alpha1, nodeShardsResult.allocationsFound, shard);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +            if (createdVersion.onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha1, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_alpha1_ID = 5000001;, +    public static final Version V_5_0_0_alpha1 = new Version(V_5_0_0_alpha1_ID, org.apache.lucene.util.Version.LUCENE_6_0_0);, +    public static final Version CURRENT = V_5_0_0_alpha1;, +            case V_5_0_0_alpha1_ID:, +                return V_5_0_0_alpha1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +        if (out.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +        if (in.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        if (indexMetaData.activeAllocationIds(id()).isEmpty() && indexMetaData.getCreationVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java, +                assert Version.indexCreated(indexMetaData.getSettings()).before(Version.V_5_0_0_alpha1) : "trying to allocated a primary with an empty allocation id set, but index is new";, +                logger.debug("[{}][{}]: version-based allocation for pre-{} index found {} allocations of {}", shard.index(), shard.id(), Version.V_5_0_0_alpha1, nodeShardsResult.allocationsFound, shard);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +            if (createdVersion.onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/SegmentsStats.java, +        if (in.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +        if (out.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha1, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_0_alpha1_ID = 5000001;, +    public static final Version V_5_0_0_alpha1 = new Version(V_5_0_0_alpha1_ID, org.apache.lucene.util.Version.LUCENE_6_0_0);, +    public static final Version CURRENT = V_5_0_0_alpha1;, +            case V_5_0_0_alpha1_ID:, +                return V_5_0_0_alpha1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +        if (out.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +        if (in.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {]