[+++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +        AlertUtils.writeSearchRequest(searchRequest, builder, params);, +++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +        AlertUtils.writeSearchRequest(searchRequest, builder, params);, +++ b/src/main/java/org/elasticsearch/alerts/AlertUtils.java, +import org.elasticsearch.script.ScriptService;, +                XContentBuilder builder;, +                        builder = XContentBuilder.builder(parser.contentType().xContent());, +                    case "template_source":, +                        builder = XContentBuilder.builder(parser.contentType().xContent());, +                        builder.copyCurrentStructure(parser);, +                        searchRequest.templateSource(builder.bytes(), false);, +                        break;, +                    case "template_type":, +                        searchRequest.templateType(readScriptType(parser.textOrNull()));, +                        break;, +    public static void writeSearchRequest(SearchRequest searchRequest, XContentBuilder builder, ToXContent.Params params) throws IOException {, +            XContentHelper.writeRawField("body", searchRequest.source(), builder, params);, +        if (searchRequest.templateType() != null) {, +            builder.field("template_type", writeScriptType(searchRequest.templateType()));, +        }, +        if (Strings.hasLength(searchRequest.templateSource())) {, +            XContentHelper.writeRawField("template_source", searchRequest.templateSource(), builder, params);, +        }, +    private static ScriptService.ScriptType readScriptType(String value) {, +        switch (value) {, +            case "indexed":, +                return ScriptService.ScriptType.INDEXED;, +            case "inline":, +                return ScriptService.ScriptType.INLINE;, +            case "file":, +                return ScriptService.ScriptType.FILE;, +            default:, +                throw new ElasticsearchIllegalArgumentException("Unknown script_type value [" + value + "]");, +        }, +    }, +, +    private static String writeScriptType(ScriptService.ScriptType value) {, +        switch (value) {, +            case INDEXED:, +                return "indexed";, +            case INLINE:, +                return "inline";, +            case FILE:, +                return "file";, +            default:, +                throw new ElasticsearchIllegalArgumentException("Illegal script_type value [" + value + "]");, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +        AlertUtils.writeSearchRequest(searchRequest, builder, params);, +++ b/src/main/java/org/elasticsearch/alerts/AlertUtils.java, +import org.elasticsearch.script.ScriptService;, +                XContentBuilder builder;, +                        builder = XContentBuilder.builder(parser.contentType().xContent());, +                    case "template_source":, +                        builder = XContentBuilder.builder(parser.contentType().xContent());, +                        builder.copyCurrentStructure(parser);, +                        searchRequest.templateSource(builder.bytes(), false);, +                        break;, +                    case "template_type":, +                        searchRequest.templateType(readScriptType(parser.textOrNull()));, +                        break;, +    public static void writeSearchRequest(SearchRequest searchRequest, XContentBuilder builder, ToXContent.Params params) throws IOException {, +            XContentHelper.writeRawField("body", searchRequest.source(), builder, params);, +        if (searchRequest.templateType() != null) {, +            builder.field("template_type", writeScriptType(searchRequest.templateType()));, +        }, +        if (Strings.hasLength(searchRequest.templateSource())) {, +            XContentHelper.writeRawField("template_source", searchRequest.templateSource(), builder, params);, +        }, +    private static ScriptService.ScriptType readScriptType(String value) {, +        switch (value) {, +            case "indexed":, +                return ScriptService.ScriptType.INDEXED;, +            case "inline":, +                return ScriptService.ScriptType.INLINE;, +            case "file":, +                return ScriptService.ScriptType.FILE;, +            default:, +                throw new ElasticsearchIllegalArgumentException("Unknown script_type value [" + value + "]");, +        }, +    }, +, +    private static String writeScriptType(ScriptService.ScriptType value) {, +        switch (value) {, +            case INDEXED:, +                return "indexed";, +            case INLINE:, +                return "inline";, +            case FILE:, +                return "file";, +            default:, +                throw new ElasticsearchIllegalArgumentException("Illegal script_type value [" + value + "]");, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionEntry.java, +            AlertUtils.writeSearchRequest(searchRequest, historyEntry, params);]