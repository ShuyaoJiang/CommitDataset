[+++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.lucene.all.AllTermQuery;, +        if (termQuery instanceof AllTermQuery) {, +            return ((AllTermQuery) termQuery).getTerm();, +        } else if (termQuery instanceof TypeFieldMapper.TypesQuery) {, +            assert ((TypeFieldMapper.TypesQuery) termQuery).getTerms().length == 1;, +            return new Term(TypeFieldMapper.NAME, ((TypeFieldMapper.TypesQuery) termQuery).getTerms()[0]);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.lucene.all.AllTermQuery;, +        if (termQuery instanceof AllTermQuery) {, +            return ((AllTermQuery) termQuery).getTerm();, +        } else if (termQuery instanceof TypeFieldMapper.TypesQuery) {, +            assert ((TypeFieldMapper.TypesQuery) termQuery).getTerms().length == 1;, +            return new Term(TypeFieldMapper.NAME, ((TypeFieldMapper.TypesQuery) termQuery).getTerms()[0]);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +        public BytesRef[] getTerms() {, +            return types;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.lucene.all.AllTermQuery;, +        if (termQuery instanceof AllTermQuery) {, +            return ((AllTermQuery) termQuery).getTerm();, +        } else if (termQuery instanceof TypeFieldMapper.TypesQuery) {, +            assert ((TypeFieldMapper.TypesQuery) termQuery).getTerms().length == 1;, +            return new Term(TypeFieldMapper.NAME, ((TypeFieldMapper.TypesQuery) termQuery).getTerms()[0]);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +        public BytesRef[] getTerms() {, +            return types;, +        }, +, +++ b/core/src/test/java/org/elasticsearch/index/query/SpanTermQueryBuilderTests.java, +import com.fasterxml.jackson.core.io.JsonStringEncoder;, +    public void testWithMetaDataField() throws IOException {, +        QueryShardContext context = createShardContext();, +        for (String field : new String[]{"_type", "_all"}) {, +            SpanTermQueryBuilder spanTermQueryBuilder = new SpanTermQueryBuilder(field, "toto");, +            Query query = spanTermQueryBuilder.toQuery(context);, +            Query expected = new SpanTermQuery(new Term(field, "toto"));, +            assertEquals(expected, query);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.lucene.all.AllTermQuery;, +        if (termQuery instanceof AllTermQuery) {, +            return ((AllTermQuery) termQuery).getTerm();, +        } else if (termQuery instanceof TypeFieldMapper.TypesQuery) {, +            assert ((TypeFieldMapper.TypesQuery) termQuery).getTerms().length == 1;, +            return new Term(TypeFieldMapper.NAME, ((TypeFieldMapper.TypesQuery) termQuery).getTerms()[0]);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +        public BytesRef[] getTerms() {, +            return types;, +        }, +, +++ b/core/src/test/java/org/elasticsearch/index/query/SpanTermQueryBuilderTests.java, +import com.fasterxml.jackson.core.io.JsonStringEncoder;, +    public void testWithMetaDataField() throws IOException {, +        QueryShardContext context = createShardContext();, +        for (String field : new String[]{"_type", "_all"}) {, +            SpanTermQueryBuilder spanTermQueryBuilder = new SpanTermQueryBuilder(field, "toto");, +            Query query = spanTermQueryBuilder.toQuery(context);, +            Query expected = new SpanTermQuery(new Term(field, "toto"));, +            assertEquals(expected, query);, +        }, +    }, +++ b/core/src/test/java/org/elasticsearch/index/query/WildcardQueryBuilderTests.java, +import org.apache.lucene.index.Term;, +, +    public void testWithMetaDataField() throws IOException {, +        QueryShardContext context = createShardContext();, +        for (String field : new String[]{"_type", "_all"}) {, +            WildcardQueryBuilder wildcardQueryBuilder = new WildcardQueryBuilder(field, "toto");, +            Query query = wildcardQueryBuilder.toQuery(context);, +            Query expected = new WildcardQuery(new Term(field, "toto"));, +            assertEquals(expected, query);, +        }, +    }]