[+++ b/rest-api-spec/api/mlt.json, +++ b/rest-api-spec/api/mlt.json, +++ b/src/main/java/org/elasticsearch/action/mlt/MoreLikeThisRequest.java, +        if (in.getVersion().before(Version.V_1_4_0)) {, +            //searchQueryHint was unused and removed in 1.4, +                in.readString();, +            }, +        if (out.getVersion().before(Version.V_1_4_0)) {, +            //searchQueryHint was unused and removed in 1.4, +++ b/rest-api-spec/api/mlt.json, +++ b/src/main/java/org/elasticsearch/action/mlt/MoreLikeThisRequest.java, +        if (in.getVersion().before(Version.V_1_4_0)) {, +            //searchQueryHint was unused and removed in 1.4, +                in.readString();, +            }, +        if (out.getVersion().before(Version.V_1_4_0)) {, +            //searchQueryHint was unused and removed in 1.4, +++ b/src/main/java/org/elasticsearch/rest/action/mlt/RestMoreLikeThisAction.java, +++ b/rest-api-spec/api/mlt.json, +++ b/src/main/java/org/elasticsearch/action/mlt/MoreLikeThisRequest.java, +        if (in.getVersion().before(Version.V_1_4_0)) {, +            //searchQueryHint was unused and removed in 1.4, +                in.readString();, +            }, +        if (out.getVersion().before(Version.V_1_4_0)) {, +            //searchQueryHint was unused and removed in 1.4, +++ b/src/main/java/org/elasticsearch/rest/action/mlt/RestMoreLikeThisAction.java, +++ b/src/test/java/org/elasticsearch/action/mlt/MoreLikeThisRequestTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.mlt;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.Scroll;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.Test;, +, +import java.io.IOException;, +, +import static org.hamcrest.CoreMatchers.*;, +, +public class MoreLikeThisRequestTests extends ElasticsearchTestCase {, +, +    @Test, +    public void testSerialization() throws IOException {, +, +        MoreLikeThisRequest mltRequest = new MoreLikeThisRequest(randomAsciiOfLength(randomIntBetween(1, 20))), +                .id(randomAsciiOfLength(randomIntBetween(1, 20))).type(randomAsciiOfLength(randomIntBetween(1, 20)));, +, +        if (randomBoolean()) {, +            mltRequest.boostTerms(randomFloat());, +        }, +        if (randomBoolean()) {, +            mltRequest.maxDocFreq(randomInt());, +        }, +        if (randomBoolean()) {, +            mltRequest.minDocFreq(randomInt());, +        }, +        if (randomBoolean()) {, +            mltRequest.maxQueryTerms(randomInt());, +        }, +        if (randomBoolean()) {, +            mltRequest.minWordLength(randomInt());, +        }, +        if (randomBoolean()) {, +            mltRequest.maxWordLength(randomInt());, +        }, +        if (randomBoolean()) {, +            mltRequest.percentTermsToMatch(randomFloat());, +        }, +        if (randomBoolean()) {, +            mltRequest.searchTypes(randomStrings(5));, +        }, +        if (randomBoolean()) {, +            mltRequest.searchType(randomFrom(SearchType.values()));, +        }]