[+++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.LocalTransportAddress;, +        return new DiscoveryNode("", nodeId, LocalTransportAddress.buildUnique(), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.LocalTransportAddress;, +        return new DiscoveryNode("", nodeId, LocalTransportAddress.buildUnique(), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.LocalTransportAddress;, +        return new DiscoveryNode("", nodeId, LocalTransportAddress.buildUnique(), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +                        newNodes.add(new DiscoveryNode(nodeWithInfo.getName(), nodeWithInfo.getId(), nodeWithInfo.getEphemeralId(),, +                            nodeWithInfo.getHostName(), nodeWithInfo.getHostAddress(), listedNode.getAddress(),, +                            nodeWithInfo.getAttributes(), nodeWithInfo.getRoles(), nodeWithInfo.getVersion()));, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.LocalTransportAddress;, +        return new DiscoveryNode("", nodeId, LocalTransportAddress.buildUnique(), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +                        newNodes.add(new DiscoveryNode(nodeWithInfo.getName(), nodeWithInfo.getId(), nodeWithInfo.getEphemeralId(),, +                            nodeWithInfo.getHostName(), nodeWithInfo.getHostAddress(), listedNode.getAddress(),, +                            nodeWithInfo.getAttributes(), nodeWithInfo.getRoles(), nodeWithInfo.getVersion()));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +import org.elasticsearch.common.UUIDs;, +        boolean localStorageEnable = Node.NODE_LOCAL_STORAGE_SETTING.get(settings);, +        if (localStorageEnable == false &&, +            (Node.NODE_DATA_SETTING.get(settings) ||, +                Node.NODE_MASTER_SETTING.get(settings)), +            ) {, +            // TODO: make this a proper setting validation logic, requiring multi-settings validation, +            throw new IllegalArgumentException("storage can not be disabled for master and data nodes");, +        }, +        return localStorageEnable;, +    private final String ephemeralId;, +     * @param id               the nodes unique (persistent) node id. This constructor will auto generate a random ephemeral id., +     * @param version          the version of the node, +    public DiscoveryNode(String id, TransportAddress address, Map<String, String> attributes, Set<Role> roles,, +                         Version version) {, +        this("", id, address, attributes, roles, version);, +     * @param nodeId           the nodes unique persistent id. An ephemeral id will be auto generated., +     * @param version          the version of the node, +    public DiscoveryNode(String nodeName, String nodeId, TransportAddress address,, +                         Map<String, String> attributes, Set<Role> roles, Version version) {, +        this(nodeName, nodeId, UUIDs.randomBase64UUID(), address.getHost(), address.getAddress(), address, attributes, roles, version);, +     * @param nodeId           the nodes unique persistent id, +     * @param ephemeralId      the nodes unique ephemeral id, +     * @param version          the version of the node, +    public DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress,, +                         TransportAddress address, Map<String, String> attributes, Set<Role> roles, Version version) {, +        this.ephemeralId = ephemeralId.intern();, +        this.ephemeralId = in.readString().intern();, +        out.writeString(ephemeralId);, +     * The unique ephemeral id of the node. Ephemeral ids are meant to be attached the the life span, +     * of a node process. When ever a node is restarted, it's ephemeral id is required to change (while it's {@link #getId()}, +     * will be read from the data folder and will remain the same across restarts). Since all node attributes and addresses, +     * are maintained during the life span of a node process, we can (and are) using the ephemeralId in, +     * {@link DiscoveryNode#equals(Object)}., +     */, +    public String getEphemeralId() {, +        return ephemeralId;, +    }, +, +    /**, +    public boolean equals(Object o) {, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +        DiscoveryNode that = (DiscoveryNode) o;, +, +        return ephemeralId.equals(that.ephemeralId);, +        // we only need to hash the id because it's highly unlikely that two nodes, +        // in our system will have the same id but be different, +        // This is done so that this class can be used efficiently as a key in a map, +        return ephemeralId.hashCode();, +        sb.append('{').append(ephemeralId).append('}');, +        builder.field("ephemeral_id", getEphemeralId());, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.LocalTransportAddress;, +        return new DiscoveryNode("", nodeId, LocalTransportAddress.buildUnique(), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +                        newNodes.add(new DiscoveryNode(nodeWithInfo.getName(), nodeWithInfo.getId(), nodeWithInfo.getEphemeralId(),, +                            nodeWithInfo.getHostName(), nodeWithInfo.getHostAddress(), listedNode.getAddress(),, +                            nodeWithInfo.getAttributes(), nodeWithInfo.getRoles(), nodeWithInfo.getVersion()));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +import org.elasticsearch.common.UUIDs;, +        boolean localStorageEnable = Node.NODE_LOCAL_STORAGE_SETTING.get(settings);, +        if (localStorageEnable == false &&, +            (Node.NODE_DATA_SETTING.get(settings) ||, +                Node.NODE_MASTER_SETTING.get(settings)), +            ) {, +            // TODO: make this a proper setting validation logic, requiring multi-settings validation, +            throw new IllegalArgumentException("storage can not be disabled for master and data nodes");, +        }, +        return localStorageEnable;, +    private final String ephemeralId;, +     * @param id               the nodes unique (persistent) node id. This constructor will auto generate a random ephemeral id., +     * @param version          the version of the node]