[+++ b/core/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +        SearchProfileShardResults shardResults = null;, +            shardResults = new SearchProfileShardResults(profileResults);, +++ b/core/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +        SearchProfileShardResults shardResults = null;, +            shardResults = new SearchProfileShardResults(profileResults);, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +import org.elasticsearch.search.profile.QueryProfileBreakdown;, +import org.elasticsearch.search.profile.QueryProfiler;, +import org.elasticsearch.search.profile.QueryTimingType;, +    private QueryProfiler profiler;, +    public void setProfiler(QueryProfiler profiler) {, +            QueryProfileBreakdown profile = profiler.getQueryBreakdown(query);, +            profile.startTime(QueryTimingType.CREATE_WEIGHT);, +++ b/core/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +        SearchProfileShardResults shardResults = null;, +            shardResults = new SearchProfileShardResults(profileResults);, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +import org.elasticsearch.search.profile.QueryProfileBreakdown;, +import org.elasticsearch.search.profile.QueryProfiler;, +import org.elasticsearch.search.profile.QueryTimingType;, +    private QueryProfiler profiler;, +    public void setProfiler(QueryProfiler profiler) {, +            QueryProfileBreakdown profile = profiler.getQueryBreakdown(query);, +            profile.startTime(QueryTimingType.CREATE_WEIGHT);, +++ b/core/src/main/java/org/elasticsearch/search/internal/InternalSearchResponse.java, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +    private SearchProfileShardResults profileResults;, +                                  SearchProfileShardResults profileResults, boolean timedOut, Boolean terminatedEarly) {, +            profileResults = new SearchProfileShardResults(in);, +++ b/core/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +        SearchProfileShardResults shardResults = null;, +            shardResults = new SearchProfileShardResults(profileResults);, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +import org.elasticsearch.search.profile.QueryProfileBreakdown;, +import org.elasticsearch.search.profile.QueryProfiler;, +import org.elasticsearch.search.profile.QueryTimingType;, +    private QueryProfiler profiler;, +    public void setProfiler(QueryProfiler profiler) {, +            QueryProfileBreakdown profile = profiler.getQueryBreakdown(query);, +            profile.startTime(QueryTimingType.CREATE_WEIGHT);, +++ b/core/src/main/java/org/elasticsearch/search/internal/InternalSearchResponse.java, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +    private SearchProfileShardResults profileResults;, +                                  SearchProfileShardResults profileResults, boolean timedOut, Boolean terminatedEarly) {, +            profileResults = new SearchProfileShardResults(in);, +++ b/core/src/main/java/org/elasticsearch/search/profile/AbstractProfileBreakdown.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.profile;, +, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * A record of timings for the various operations that may happen during query execution., + * A node's time may be composed of several internal attributes (rewriting, weighting,, + * scoring, etc)., + */, +public abstract class AbstractProfileBreakdown<T extends Enum<T>> {, +, +    /**, +     * The accumulated timings for this query node, +     */, +    private final long[] timings;, +, +    /** Scratch to store the current timing type. */, +    private T currentTimingType;, +, +    /**, +     * The temporary scratch space for holding start-times, +     */, +    private long scratch;, +, +    private T[] timingTypes;, +, +    /** Sole constructor. */, +    public AbstractProfileBreakdown(T[] timingTypes) {]