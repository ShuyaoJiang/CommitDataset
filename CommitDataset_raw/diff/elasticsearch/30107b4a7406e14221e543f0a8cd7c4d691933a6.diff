[+++ b/build.gradle, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Retruns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions, +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions., +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Retruns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions, +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions., +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Retruns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions, +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions., +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestBuilder.java, +     * Sets to reutrn all the data., +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Retruns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions, +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions., +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestBuilder.java, +     * Sets to reutrn all the data., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Retruns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions, +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions., +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestBuilder.java, +     * Sets to reutrn all the data., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;, +                indicesRequestCache.clear(shard);, +                    indicesRequestCache.clear(shard);, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Retruns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions, +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions., +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestBuilder.java, +     * Sets to reutrn all the data., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;, +                indicesRequestCache.clear(shard);, +                    indicesRequestCache.clear(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +    public CommonStats(IndexShard indexShard, CommonStatsFlags flags) {, +                    queryCache = indexShard.queryCacheStats();, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +     * Retruns <code>true</code> iff the given class is a registered for an exception to be read., +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions, +     * Returns the root cause of this exception or mupltiple if different shards caused different exceptions., +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestBuilder.java, +     * Sets to reutrn all the data., +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;]