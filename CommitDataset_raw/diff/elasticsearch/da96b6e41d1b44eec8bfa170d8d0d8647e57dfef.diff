[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]gateway[/\\]GatewayIndexStateIT.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]IndexSettingsTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]gateway[/\\]GatewayIndexStateIT.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]IndexSettingsTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JNANatives.trySetMaxSizeVirtualMemory();, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]gateway[/\\]GatewayIndexStateIT.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]IndexSettingsTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JNANatives.trySetMaxSizeVirtualMemory();, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        checks.add(new MaxSizeVirtualMemoryCheck());, +    static class MaxSizeVirtualMemoryCheck implements Check {, +, +        @Override, +        public boolean check() {, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != JNACLibrary.RLIM_INFINITY;, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                Locale.ROOT,, +                "max size virtual memory [%d] for user [%s] likely too low, increase to [unlimited]",, +                getMaxSizeVirtualMemory(),, +                BootstrapInfo.getSystemProperties().get("user.name"));, +        }, +, +        // visible for testing, +        long getMaxSizeVirtualMemory() {, +            return JNANatives.MAX_SIZE_VIRTUAL_MEMORY;, +        }, +, +    }, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]gateway[/\\]GatewayIndexStateIT.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]IndexSettingsTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JNANatives.trySetMaxSizeVirtualMemory();, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        checks.add(new MaxSizeVirtualMemoryCheck());, +    static class MaxSizeVirtualMemoryCheck implements Check {, +, +        @Override, +        public boolean check() {, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != JNACLibrary.RLIM_INFINITY;, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                Locale.ROOT,, +                "max size virtual memory [%d] for user [%s] likely too low, increase to [unlimited]",, +                getMaxSizeVirtualMemory(),, +                BootstrapInfo.getSystemProperties().get("user.name"));, +        }, +, +        // visible for testing, +        long getMaxSizeVirtualMemory() {, +            return JNANatives.MAX_SIZE_VIRTUAL_MEMORY;, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +    public static final int RLIMIT_AS = Constants.MAC_OS_X ? 5 : 9;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]gateway[/\\]GatewayIndexStateIT.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]IndexSettingsTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JNANatives.trySetMaxSizeVirtualMemory();, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        checks.add(new MaxSizeVirtualMemoryCheck());, +    static class MaxSizeVirtualMemoryCheck implements Check {, +, +        @Override, +        public boolean check() {, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != JNACLibrary.RLIM_INFINITY;, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                Locale.ROOT,, +                "max size virtual memory [%d] for user [%s] likely too low, increase to [unlimited]",, +                getMaxSizeVirtualMemory(),, +                BootstrapInfo.getSystemProperties().get("user.name"));, +        }, +, +        // visible for testing, +        long getMaxSizeVirtualMemory() {, +            return JNANatives.MAX_SIZE_VIRTUAL_MEMORY;]