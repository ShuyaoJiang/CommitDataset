[+++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/resolver/node/NodeStatsResolver.java, +            "node_stats.thread_pool.bulk.rejected",, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/resolver/node/NodeStatsResolver.java, +            "node_stats.thread_pool.bulk.rejected",, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/resolver/node/NodeStatsResolverTests.java, +        List<ThreadPoolStats.Stats> threadPoolStats = Arrays.asList(new ThreadPoolStats.Stats(ThreadPool.Names.INDEX, 0, 0, 0, 0, 0, 0),, +                new ThreadPoolStats.Stats(ThreadPool.Names.SEARCH, 0, 0, 0, 0, 0, 0), +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/resolver/node/NodeStatsResolver.java, +            "node_stats.thread_pool.bulk.rejected",, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/agent/resolver/node/NodeStatsResolverTests.java, +        List<ThreadPoolStats.Stats> threadPoolStats = Arrays.asList(new ThreadPoolStats.Stats(ThreadPool.Names.INDEX, 0, 0, 0, 0, 0, 0),, +                new ThreadPoolStats.Stats(ThreadPool.Names.SEARCH, 0, 0, 0, 0, 0, 0), +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/integration/IndexPrivilegeTests.java, +@ESIntegTestCase.ClusterScope(randomDynamicTemplates = false, maxNumDataNodes = 2), +    private String jsonDoc = "{ \"name\" : \"elasticsearch\", \"body\": \"foo bar\" }";, +                    "read_b_role:\n" +, +                    "  indices:\n" +, +                    "    - names: 'b'\n" +, +                    "      privileges: [ read ]\n" +, +                    "read_write_all_role:\n" +, +                    "      privileges: [ read, write ]\n" +, +                    "read_write_a_role:\n" +, +                    "      privileges: [ read, write ]\n" +, +            "read_b_role:u3,u5,u6,u8,u13\n" +, +            "manage_starts_with_a_role:u4\n" +, +            "read_write_all_role:u12\n" +, +            "read_write_a_role:u12\n" +, +            "index_a_role:u13\n";, +        // u3 has read b role, but all access to a* and b* via regex, +        // u5 may read a and read b, +        assertUserIsAllowed("u5", "read", "b");, +        // u6 has all access on a and read access on b, +        assertUserIsAllowed("u6", "read", "b");, +        // u8 has admin access and read access on b, +        // u13 has read access on b and index access on a, +        assertUserIsAllowed("u13", "read", "b");]