[+++ b/src/main/java/org/elasticsearch/index/search/nested/BlockJoinQuery.java, +            ComplexExplanation explanation = new ComplexExplanation(, +                    true, score(), String.format(Locale.ROOT, "Score based on score mode %s and child doc range from %d to %d", scoreMode, start, end), +, +            for (int i = 0; i < childDocUpto; i++) {, +                int childDoc = pendingChildDocs[i];, +                float childScore = pendingChildScores[i];, +                explanation.addDetail(new Explanation(childScore, String.format(Locale.ROOT, "Child[%d]", childDoc)));, +            }, +, +            return explanation;, +++ b/src/main/java/org/elasticsearch/index/search/nested/BlockJoinQuery.java, +            ComplexExplanation explanation = new ComplexExplanation(, +                    true, score(), String.format(Locale.ROOT, "Score based on score mode %s and child doc range from %d to %d", scoreMode, start, end), +, +            for (int i = 0; i < childDocUpto; i++) {, +                int childDoc = pendingChildDocs[i];, +                float childScore = pendingChildScores[i];, +                explanation.addDetail(new Explanation(childScore, String.format(Locale.ROOT, "Child[%d]", childDoc)));, +            }, +, +            return explanation;, +++ b/src/test/java/org/elasticsearch/test/integration/nested/SimpleNestedTests.java, +import org.apache.lucene.search.Explanation;, +    @Test, +    public void testExplain() throws Exception {, +        client.admin().indices().prepareDelete().execute().actionGet();, +, +        client.admin().indices().prepareCreate("test"), +                .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties"), +                        .startObject("nested1"), +                        .field("type", "nested"), +                        .endObject(), +                        .endObject().endObject().endObject()), +                .execute().actionGet();, +, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +        client.prepareIndex("test", "type1", "1").setSource(jsonBuilder().startObject(), +                .field("field1", "value1"), +                .startArray("nested1"), +                .startObject(), +                .field("n_field1", "n_value1"), +                .endObject(), +                .startObject(), +                .field("n_field1", "n_value1"), +                .endObject(), +                .endArray(), +                .endObject()), +                .setRefresh(true), +                .execute().actionGet();, +, +        SearchResponse searchResponse = client.prepareSearch("test"), +                .setQuery(nestedQuery("nested1", termQuery("nested1.n_field1", "n_value1")).scoreMode("total")), +                .setExplain(true), +                .execute().actionGet();, +        assertThat(Arrays.toString(searchResponse.shardFailures()), searchResponse.failedShards(), equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(1l));, +        Explanation explanation = searchResponse.hits().hits()[0].explanation();, +        assertThat(explanation.getValue(), equalTo(2f));, +        assertThat(explanation.getDescription(), equalTo("Score based on score mode Total and child doc range from 0 to 1"));, +        assertThat(explanation.getDetails().length, equalTo(2));, +        assertThat(explanation.getDetails()[0].getValue(), equalTo(1f));, +        assertThat(explanation.getDetails()[0].getDescription(), equalTo("Child[0]"));, +        assertThat(explanation.getDetails()[1].getValue(), equalTo(1f));, +        assertThat(explanation.getDetails()[1].getDescription(), equalTo("Child[1]"));, +    }, +]