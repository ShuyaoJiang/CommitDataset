[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +            if (timestampFieldMapperMergeWith.defaultTimestamp() == null && defaultTimestamp == null) {, +                return;, +            }, +            if (defaultTimestamp == null) {, +                mergeContext.addConflict("Cannot update default in _timestamp value. Value is null now encountering " + timestampFieldMapperMergeWith.defaultTimestamp());, +            } else if (timestampFieldMapperMergeWith.defaultTimestamp() == null) {, +                mergeContext.addConflict("Cannot update default in _timestamp value. Value is \" + defaultTimestamp.toString() + \" now encountering null");, +            } else if (!timestampFieldMapperMergeWith.defaultTimestamp().equals(defaultTimestamp)) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +            if (timestampFieldMapperMergeWith.defaultTimestamp() == null && defaultTimestamp == null) {, +                return;, +            }, +            if (defaultTimestamp == null) {, +                mergeContext.addConflict("Cannot update default in _timestamp value. Value is null now encountering " + timestampFieldMapperMergeWith.defaultTimestamp());, +            } else if (timestampFieldMapperMergeWith.defaultTimestamp() == null) {, +                mergeContext.addConflict("Cannot update default in _timestamp value. Value is \" + defaultTimestamp.toString() + \" now encountering null");, +            } else if (!timestampFieldMapperMergeWith.defaultTimestamp().equals(defaultTimestamp)) {, +++ b/src/test/java/org/elasticsearch/index/mapper/timestamp/TimestampMappingTests.java, +import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;, +    /**, +     * Test case for #9204, +     */, +    @Test, +    public void testMergingNullValues() throws Exception {, +        // From trying to add another field with default = null, +        String mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                .startObject("_timestamp"), +                    .field("enabled", true), +                    .field("default", (String) null), +                .endObject(), +                .endObject().endObject().string();, +        DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();, +, +        DocumentMapper docMapper = parser.parse(mapping);, +        mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                    .startObject("_timestamp"), +                        .field("enabled", true), +                        .field("default", (String) null), +                    .endObject(), +                    .startObject("properties"), +                        .startObject("foo"), +                            .field("type", "string"), +                        .endObject(), +                    .endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper.MergeResult mergeResult = docMapper.merge(parser.parse(mapping), DocumentMapper.MergeFlags.mergeFlags().simulate(true));, +        assertThat(mergeResult.hasConflicts(), is(false));, +, +        client().admin().indices().delete(new DeleteIndexRequest("test")).get();, +, +        // From trying to update from null to non null, +        mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                .startObject("_timestamp"), +                    .field("enabled", true), +                    .field("default", (String) null), +                .endObject(), +                .endObject().endObject().string();, +        parser = createIndex("test").mapperService().documentMapperParser();, +, +        docMapper = parser.parse(mapping);, +        mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                    .startObject("_timestamp"), +                        .field("enabled", true), +                        .field("default", "now"), +                    .endObject(), +                .endObject().endObject().string();, +, +        mergeResult = docMapper.merge(parser.parse(mapping), DocumentMapper.MergeFlags.mergeFlags().simulate(true));, +        assertThat(mergeResult.hasConflicts(), is(true));, +, +        client().admin().indices().delete(new DeleteIndexRequest("test")).get();, +, +        // From trying to update from non null to null, +        mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                .startObject("_timestamp"), +                    .field("enabled", true), +                    .field("default", "now"), +                .endObject(), +                .endObject().endObject().string();, +        parser = createIndex("test").mapperService().documentMapperParser();, +, +        docMapper = parser.parse(mapping);, +        mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                    .startObject("_timestamp"), +                .field("enabled", true), +                .field("default", (String) null), +                    .endObject(), +                .endObject().endObject().string();, +, +        mergeResult = docMapper.merge(parser.parse(mapping), DocumentMapper.MergeFlags.mergeFlags().simulate(true));, +        assertThat(mergeResult.hasConflicts(), is(true));, +    }]