[+++ /dev/null, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.action.support.replication;, +, +import org.apache.lucene.index.CorruptIndexException;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.ActionWriteResponse;, +import org.elasticsearch.action.UnavailableShardsException;, +import org.elasticsearch.action.WriteConsistencyLevel;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ClusterStateObserver;, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.cluster.routing.ShardIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.shard.IndexShardNotStartedException;, +import org.elasticsearch.index.shard.IndexShardState;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.cluster.TestClusterService;, +import org.elasticsearch.test.transport.CapturingTransport;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportResponse;, +import org.elasticsearch.transport.TransportResponseOptions;, +import org.elasticsearch.transport.TransportService;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.util.HashSet;, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import static org.elasticsearch.action.support.replication.ClusterStateCreationUtils.state;, +import static org.elasticsearch.action.support.replication.ClusterStateCreationUtils.stateWithStartedPrimary;, +import static org.hamcrest.Matchers.arrayWithSize;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.Matchers.nullValue;, +, +public class TransportReplicationActionTests extends ESTestCase {, +, +    private static ThreadPool threadPool;, +, +    private TestClusterService clusterService;, +    private TransportService transportService;, +    private CapturingTransport transport;, +    private Action action;, +    /* *, +    * TransportReplicationAction needs an instance of IndexShard to count operations., +    * indexShards is reset to null before each test and will be initialized upon request in the tests., +    */, +, +    @BeforeClass, +    public static void beforeClass() {]