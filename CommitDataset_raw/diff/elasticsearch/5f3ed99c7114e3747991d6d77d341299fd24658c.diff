[+++ b/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java, +++ b/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsTests.java, +            if (aggsTest instanceof InternalMultiBucketAggregationTestCase) {, +                // Lower down the number of buckets generated by multi bucket aggregation tests in, +                // order to avoid too many aggregations to be created., +                ((InternalMultiBucketAggregationTestCase) aggsTest).maxNumberOfBuckets = 3;, +            }, +++ b/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsTests.java, +            if (aggsTest instanceof InternalMultiBucketAggregationTestCase) {, +                // Lower down the number of buckets generated by multi bucket aggregation tests in, +                // order to avoid too many aggregations to be created., +                ((InternalMultiBucketAggregationTestCase) aggsTest).maxNumberOfBuckets = 3;, +            }, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregationTestCase.java, +    private static final int DEFAULT_MAX_NUMBER_OF_BUCKETS = 10;, +, +    int maxNumberOfBuckets = DEFAULT_MAX_NUMBER_OF_BUCKETS;, +, +    protected int randomNumberOfBuckets() {, +        return randomIntBetween(minNumberOfBuckets(), maxNumberOfBuckets());, +    }, +, +    protected int minNumberOfBuckets() {, +        return 0;, +    }, +, +    protected int maxNumberOfBuckets() {, +        return maxNumberOfBuckets;, +    }, +        T instance = createTestInstance(name, pipelineAggregators, metaData, subAggregationsSupplier.get());, +        assert instance.getBuckets().size() <= maxNumberOfBuckets() :, +                "Maximum number of buckets exceeded for " + instance.getClass().getSimpleName() + " aggregation";, +        return instance;, +++ b/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsTests.java, +            if (aggsTest instanceof InternalMultiBucketAggregationTestCase) {, +                // Lower down the number of buckets generated by multi bucket aggregation tests in, +                // order to avoid too many aggregations to be created., +                ((InternalMultiBucketAggregationTestCase) aggsTest).maxNumberOfBuckets = 3;, +            }, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregationTestCase.java, +    private static final int DEFAULT_MAX_NUMBER_OF_BUCKETS = 10;, +, +    int maxNumberOfBuckets = DEFAULT_MAX_NUMBER_OF_BUCKETS;, +, +    protected int randomNumberOfBuckets() {, +        return randomIntBetween(minNumberOfBuckets(), maxNumberOfBuckets());, +    }, +, +    protected int minNumberOfBuckets() {, +        return 0;, +    }, +, +    protected int maxNumberOfBuckets() {, +        return maxNumberOfBuckets;, +    }, +        T instance = createTestInstance(name, pipelineAggregators, metaData, subAggregationsSupplier.get());, +        assert instance.getBuckets().size() <= maxNumberOfBuckets() :, +                "Maximum number of buckets exceeded for " + instance.getClass().getSimpleName() + " aggregation";, +        return instance;, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/adjacency/InternalAdjacencyMatrixTests.java, +    protected int maxNumberOfBuckets() {, +        return 10;, +    }, +, +    @Override, +        // InternalAdjacencyMatrix represents the upper triangular matrix:, +        // 2 filters (matrix of 2x2) generates 3 buckets, +        // 3 filters generates 6 buckets, +        // 4 filters generates 10 buckets, +++ b/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregationsTests.java, +            if (aggsTest instanceof InternalMultiBucketAggregationTestCase) {, +                // Lower down the number of buckets generated by multi bucket aggregation tests in, +                // order to avoid too many aggregations to be created., +                ((InternalMultiBucketAggregationTestCase) aggsTest).maxNumberOfBuckets = 3;, +            }, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregationTestCase.java, +    private static final int DEFAULT_MAX_NUMBER_OF_BUCKETS = 10;, +, +    int maxNumberOfBuckets = DEFAULT_MAX_NUMBER_OF_BUCKETS;, +, +    protected int randomNumberOfBuckets() {, +        return randomIntBetween(minNumberOfBuckets(), maxNumberOfBuckets());, +    }, +, +    protected int minNumberOfBuckets() {, +        return 0;, +    }, +, +    protected int maxNumberOfBuckets() {, +        return maxNumberOfBuckets;, +    }, +        T instance = createTestInstance(name, pipelineAggregators, metaData, subAggregationsSupplier.get());, +        assert instance.getBuckets().size() <= maxNumberOfBuckets() :, +                "Maximum number of buckets exceeded for " + instance.getClass().getSimpleName() + " aggregation";, +        return instance;, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/adjacency/InternalAdjacencyMatrixTests.java]