[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.EnumSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import java.util.regex.Pattern;, +import java.util.stream.Collectors;, +, +import org.elasticsearch.common.Nullable;, +    @Nullable, +    private final Setting<T> fallbackSetting;, +    private Setting(Key key, @Nullable Setting<T> fallbackSetting, Function<Settings, String> defaultValue, Function<String, T> parser,, +            Property... properties) {, +        this.fallbackSetting = fallbackSetting;, +     * Creates a new Setting instance. When no scope is provided, we default to {@link Property#NodeScope}., +     * @param key the settings key for this setting., +     * @param defaultValue a default value function that returns the default values string representation., +     * @param parser a parser that parses the string rep into a complex datatype., +     * @param properties properties for this setting like scope, filtering..., +     */, +    public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {, +        this(key, null, defaultValue, parser, properties);, +    }, +, +    /**, +     * Creates a new Setting instance. When no scope is provided, we default to {@link Property#NodeScope}., +     * @param key the settings key for this setting., +     * @param fallbackSetting a setting who's value to fallback on if this setting is not defined, +     * @param parser a parser that parses the string rep into a complex datatype., +     * @param properties properties for this setting like scope, filtering..., +     */, +    public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {, +        this(key, fallbackSetting, fallbackSetting::getRaw, parser, properties);, +    }, +, +    /**, +        this(new SimpleKey(key), fallBackSetting, parser, properties);, +        if (fallbackSetting == null) {, +        if (exists(secondary)) {, +            return get(secondary);, +        }, +        if (fallbackSetting.exists(primary)) {, +            return fallbackSetting.get(primary);, +        }, +        return fallbackSetting.get(secondary);, +    }, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Setting<ByteSizeValue> fallbackSetting,, +        return new Setting<>(key, fallbackSetting, (s) -> ByteSizeValue.parseBytesSizeValue(s, key), properties);, +    // TODO this one's two argument get is still broken, +        return new Setting<>(key, fallbackSetting, (s) -> TimeValue.parseTimeValue(s, key), properties);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.EnumSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import java.util.regex.Pattern;, +import java.util.stream.Collectors;, +, +import org.elasticsearch.common.Nullable;, +    @Nullable, +    private final Setting<T> fallbackSetting;, +    private Setting(Key key, @Nullable Setting<T> fallbackSetting, Function<Settings, String> defaultValue, Function<String, T> parser,, +            Property... properties) {, +        this.fallbackSetting = fallbackSetting;, +     * Creates a new Setting instance. When no scope is provided, we default to {@link Property#NodeScope}., +     * @param key the settings key for this setting., +     * @param defaultValue a default value function that returns the default values string representation., +     * @param parser a parser that parses the string rep into a complex datatype., +     * @param properties properties for this setting like scope, filtering..., +     */, +    public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {, +        this(key, null, defaultValue, parser, properties);, +    }, +, +    /**, +     * Creates a new Setting instance. When no scope is provided, we default to {@link Property#NodeScope}., +     * @param key the settings key for this setting., +     * @param fallbackSetting a setting who's value to fallback on if this setting is not defined, +     * @param parser a parser that parses the string rep into a complex datatype., +     * @param properties properties for this setting like scope, filtering..., +     */, +    public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {, +        this(key, fallbackSetting, fallbackSetting::getRaw, parser, properties);, +    }, +, +    /**, +        this(new SimpleKey(key), fallBackSetting, parser, properties);, +        if (fallbackSetting == null) {]