[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import java.time.ZonedDateTime, +import java.time.ZoneOffset, +, +        configureJarManifest(project) // jar config must be added before info broker, +, +    /** Performs checks on the build environment and prints information about the build environment. */, +            String javaHome = findJavaHome(), +            File gradleJavaHome = Jvm.current().javaHome, +            String gradleJavaVersionDetails = "${System.getProperty('java.vendor')} ${System.getProperty('java.version')}" +, +                " [${System.getProperty('java.vm.name')} ${System.getProperty('java.vm.version')}]", +, +            String javaVersionDetails = gradleJavaVersionDetails, +            String javaVersion = System.getProperty('java.version'), +            JavaVersion javaVersionEnum = JavaVersion.current(), +            if (new File(javaHome).canonicalPath != gradleJavaHome.canonicalPath) {, +                javaVersionDetails = findJavaVersionDetails(project, javaHome), +                javaVersionEnum = JavaVersion.toVersion(findJavaSpecificationVersion(project, javaHome)), +                javaVersion = findJavaVersion(project, javaHome), +            }, +            if (gradleJavaVersionDetails != javaVersionDetails) {, +                println "  JDK Version (gradle)  : ${gradleJavaVersionDetails}", +                println "  JDK Version (compile) : ${javaVersionDetails}", +            } else {, +                println "  JDK Version           : ${gradleJavaVersionDetails}", +            }, +            if (javaVersionEnum < minimumJava) {, +            project.rootProject.ext.javaHome = javaHome, +            project.rootProject.ext.javaVersion = javaVersion, +            project.rootProject.ext.buildChecksDone = true, +        }, +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +        // set java home for each project, so they dont have to find it in the root project, +        project.ext.javaHome = project.rootProject.ext.javaHome, +        project.ext.javaVersion = project.rootProject.ext.javaVersion, +    }, +, +    /** Finds and enforces JAVA_HOME is set */, +    private static String findJavaHome() {, +        String javaHome = System.getenv('JAVA_HOME'), +        return javaHome, +    /** Finds printable java version of the given JAVA_HOME */, +    private static String findJavaVersionDetails(Project project, String javaHome) {, +        String versionInfoScript = 'print(' +, +            'java.lang.System.getProperty("java.vendor") + " " + java.lang.System.getProperty("java.version") + ' +, +            '" [" + java.lang.System.getProperty("java.vm.name") + " " + java.lang.System.getProperty("java.vm.version") + "]");', +        return runJavascript(project, javaHome, versionInfoScript).trim(), +    }, +, +    /** Finds the parsable java specification version */, +    private static String findJavaSpecificationVersion(Project project, String javaHome) {, +        String versionScript = 'print(java.lang.System.getProperty("java.specification.version"));', +        return runJavascript(project, javaHome, versionScript), +    }, +, +    /** Finds the parsable java specification version */, +    private static String findJavaVersion(Project project, String javaHome) {, +        String versionScript = 'print(java.lang.System.getProperty("java.version"));', +        return runJavascript(project, javaHome, versionScript), +    }, +, +    /** Runs the given javascript using jjs from the jdk, and returns the output */, +    private static String runJavascript(Project project, String javaHome, String script) {, +        File tmpScript = File.createTempFile('es-gradle-tmp', '.js');, +        tmpScript.setText(script, 'UTF-8'), +        ByteArrayOutputStream output = new ByteArrayOutputStream(), +        project.exec {, +            executable = new File(javaHome, 'bin/jjs'), +            args tmpScript.toString(), +            standardOutput = output, +            errorOutput = new ByteArrayOutputStream(), +        }, +        return output.toString('UTF-8').trim(), +    }, +, +    /** Return the configuration name used for finding transitive deps of the given dependency. */, +    private static String transitiveDepConfigName(String groupId, String artifactId, String version) {, +                options.fork = true, +                options.forkOptions.executable = new File(project.javaHome, 'bin/javac'), +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all' << '-Xdoclint:-missing', +            jarTask.doFirst {, +                // this doFirst is added before the info plugin, therefore it will run, +                // after the doFirst added by the info plugin, and we can override attributes, +                jarTask.manifest.attributes(, +                        'X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                        'X-Compile-Lucene-Version': VersionProperties.lucene,, +                        'Build-Date': ZonedDateTime.now(ZoneOffset.UTC),, +                        'Build-Java-Version': project.javaVersion), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import java.time.ZonedDateTime, +import java.time.ZoneOffset, +, +        configureJarManifest(project) // jar config must be added before info broker, +, +    /** Performs checks on the build environment and prints information about the build environment. */, +            String javaHome = findJavaHome(), +            File gradleJavaHome = Jvm.current().javaHome, +            String gradleJavaVersionDetails = "${System.getProperty('java.vendor')} ${System.getProperty('java.version')}" +, +                " [${System.getProperty('java.vm.name')} ${System.getProperty('java.vm.version')}]"]