[+++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +import java.util.stream.Collectors;, +            parentUsed(0L).totalUsage, 1.0, parentTripCount.get()));, +    private static class ParentMemoryUsage {, +        final long baseUsage;, +        final long totalUsage;, +, +        ParentMemoryUsage(final long baseUsage, final long totalUsage) {, +            this.baseUsage = baseUsage;, +            this.totalUsage = totalUsage;, +        }, +    }, +, +    private ParentMemoryUsage parentUsed(long newBytesReserved) {, +            final long current = currentMemoryUsage();, +            return new ParentMemoryUsage(current, current + newBytesReserved);, +            return new ParentMemoryUsage(parentEstimated, parentEstimated);, +        final ParentMemoryUsage parentUsed = parentUsed(newBytesReserved);, +        if (parentUsed.totalUsage > parentLimit) {, +            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +, +                    " would be [" + parentUsed.totalUsage + "/" + new ByteSizeValue(parentUsed.totalUsage) + "]" +, +                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]");, +            if (this.trackRealMemoryUsage) {, +                final long realUsage = parentUsed.baseUsage;, +                message.append(", real usage: [");, +                message.append(realUsage);, +                message.append("/");, +                message.append(new ByteSizeValue(realUsage));, +                message.append("], new bytes reserved: [");, +                message.append(newBytesReserved);, +                message.append("/");, +                message.append(new ByteSizeValue(newBytesReserved));, +                message.append("]");, +            } else {, +                message.append(", usages [");, +                message.append(String.join(", ",, +                    this.breakers.entrySet().stream().map(e -> {, +                        final CircuitBreaker breaker = e.getValue();, +                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead());, +                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed);, +                    }), +                        .collect(Collectors.toList())));, +                message.append("]");, +            }, +            throw new CircuitBreakingException(message.toString(), parentUsed.totalUsage, parentLimit);, +++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +import java.util.stream.Collectors;, +            parentUsed(0L).totalUsage, 1.0, parentTripCount.get()));, +    private static class ParentMemoryUsage {, +        final long baseUsage;, +        final long totalUsage;, +, +        ParentMemoryUsage(final long baseUsage, final long totalUsage) {, +            this.baseUsage = baseUsage;, +            this.totalUsage = totalUsage;, +        }, +    }, +, +    private ParentMemoryUsage parentUsed(long newBytesReserved) {, +            final long current = currentMemoryUsage();, +            return new ParentMemoryUsage(current, current + newBytesReserved);, +            return new ParentMemoryUsage(parentEstimated, parentEstimated);, +        final ParentMemoryUsage parentUsed = parentUsed(newBytesReserved);, +        if (parentUsed.totalUsage > parentLimit) {, +            final StringBuilder message = new StringBuilder("[parent] Data too large, data for [" + label + "]" +, +                    " would be [" + parentUsed.totalUsage + "/" + new ByteSizeValue(parentUsed.totalUsage) + "]" +, +                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]");, +            if (this.trackRealMemoryUsage) {, +                final long realUsage = parentUsed.baseUsage;, +                message.append(", real usage: [");, +                message.append(realUsage);, +                message.append("/");, +                message.append(new ByteSizeValue(realUsage));, +                message.append("], new bytes reserved: [");, +                message.append(newBytesReserved);, +                message.append("/");, +                message.append(new ByteSizeValue(newBytesReserved));, +                message.append("]");, +            } else {, +                message.append(", usages [");, +                message.append(String.join(", ",, +                    this.breakers.entrySet().stream().map(e -> {, +                        final CircuitBreaker breaker = e.getValue();, +                        final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead());, +                        return e.getKey() + "=" + breakerUsed + "/" + new ByteSizeValue(breakerUsed);, +                    }), +                        .collect(Collectors.toList())));, +                message.append("]");, +            }, +            throw new CircuitBreakingException(message.toString(), parentUsed.totalUsage, parentLimit);, +++ b/server/src/test/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerServiceTests.java, +            assertThat(exception.getMessage(),, +                containsString("usages [request=157286400/150mb, fielddata=54001664/51.5mb, in_flight_requests=0/0b, accounting=0/0b]"));, +        assertThat(exception.getMessage(),, +            containsString("real usage: [181/181b], new bytes reserved: [" + (reservationInBytes * 2) +, +                "/" + new ByteSizeValue(reservationInBytes * 2) + "]"));]