[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +                ((HttpURLConnection) connection).setConnectTimeout(5000);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +                ((HttpURLConnection) connection).setConnectTimeout(5000);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +import org.elasticsearch.common.netty.channel.ChannelHandler;, +import org.elasticsearch.common.netty.channel.ChannelHandlerContext;, +import org.elasticsearch.common.netty.channel.ExceptionEvent;, +import org.elasticsearch.common.netty.channel.MessageEvent;, +import org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler;, +        serverTransport.dispatchRequest(new NettyHttpRequest(request), new NettyHttpChannel(serverTransport, e.getChannel(), request));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +                ((HttpURLConnection) connection).setConnectTimeout(5000);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +import org.elasticsearch.common.netty.channel.ChannelHandler;, +import org.elasticsearch.common.netty.channel.ChannelHandlerContext;, +import org.elasticsearch.common.netty.channel.ExceptionEvent;, +import org.elasticsearch.common.netty.channel.MessageEvent;, +import org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler;, +        serverTransport.dispatchRequest(new NettyHttpRequest(request), new NettyHttpChannel(serverTransport, e.getChannel(), request));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +    private final NettyHttpServerTransport transport;, +    public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.elasticsearch.common.netty.handler.codec.http.HttpRequest request) {, +        this.transport = transport;, +        if (transport.resetCookies) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +                ((HttpURLConnection) connection).setConnectTimeout(5000);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +import org.elasticsearch.common.netty.channel.ChannelHandler;, +import org.elasticsearch.common.netty.channel.ChannelHandlerContext;, +import org.elasticsearch.common.netty.channel.ExceptionEvent;, +import org.elasticsearch.common.netty.channel.MessageEvent;, +import org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler;, +        serverTransport.dispatchRequest(new NettyHttpRequest(request), new NettyHttpChannel(serverTransport, e.getChannel(), request));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +    private final NettyHttpServerTransport transport;, +    public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.elasticsearch.common.netty.handler.codec.http.HttpRequest request) {, +        this.transport = transport;, +        if (transport.resetCookies) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +    final boolean resetCookies;, +, +        // don't reset cookies by default, since I don't think we really need to, and parsing of cookies with netty is slow, +        // and requires a large stack allocation because of the use of regex, +        this.resetCookies = componentSettings.getAsBoolean("reset_cookies", settings.getAsBoolean("http.reset_cookies", false));]