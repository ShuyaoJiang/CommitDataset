[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +import org.elasticsearch.common.util.IntArray;, +    private IntArray docCounts;, +        docCounts = bigArrays.newIntArray(estimatedBucketsCount, true);, +    public IntArray getDocCounts() {, +    protected final void incrementBucketDocCount(int inc, long bucketOrd) throws IOException {, +    public final int bucketDocCount(long bucketOrd) {, +            return 0;, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +import org.elasticsearch.common.util.IntArray;, +    private IntArray docCounts;, +        docCounts = bigArrays.newIntArray(estimatedBucketsCount, true);, +    public IntArray getDocCounts() {, +    protected final void incrementBucketDocCount(int inc, long bucketOrd) throws IOException {, +    public final int bucketDocCount(long bucketOrd) {, +            return 0;, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            final int bucketDocCount = bucketOrd < 0 ? 0 : bucketDocCount(bucketOrd);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +import org.elasticsearch.common.util.IntArray;, +    private IntArray docCounts;, +        docCounts = bigArrays.newIntArray(estimatedBucketsCount, true);, +    public IntArray getDocCounts() {, +    protected final void incrementBucketDocCount(int inc, long bucketOrd) throws IOException {, +    public final int bucketDocCount(long bucketOrd) {, +            return 0;, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            final int bucketDocCount = bucketOrd < 0 ? 0 : bucketDocCount(bucketOrd);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +import org.elasticsearch.common.util.IntArray;, +            final int bucketDocCount = bucketOrd < 0 ? 0 : bucketDocCount(bucketOrd);, +        private final IntArray segmentDocCounts;, +        private IntArray current;, +            this.segmentDocCounts = bigArrays.newIntArray(maxOrd, true);, +                final int inc = segmentDocCounts.set(i, 0);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +import org.elasticsearch.common.util.IntArray;, +    private IntArray docCounts;, +        docCounts = bigArrays.newIntArray(estimatedBucketsCount, true);, +    public IntArray getDocCounts() {, +    protected final void incrementBucketDocCount(int inc, long bucketOrd) throws IOException {, +    public final int bucketDocCount(long bucketOrd) {, +            return 0;, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +            final int bucketDocCount = bucketOrd < 0 ? 0 : bucketDocCount(bucketOrd);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +import org.elasticsearch.common.util.IntArray;, +            final int bucketDocCount = bucketOrd < 0 ? 0 : bucketDocCount(bucketOrd);, +        private final IntArray segmentDocCounts;, +        private IntArray current;, +            this.segmentDocCounts = bigArrays.newIntArray(maxOrd, true);, +                final int inc = segmentDocCounts.set(i, 0);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +                        int mul = asc ? 1 : -1;, +                        int v1 = ((SingleBucketAggregator) aggregator).bucketDocCount(((InternalTerms.Bucket) o1).bucketOrd);, +                        int v2 = ((SingleBucketAggregator) aggregator).bucketDocCount(((InternalTerms.Bucket) o2).bucketOrd);, +                        return mul * (v1 - v2);]