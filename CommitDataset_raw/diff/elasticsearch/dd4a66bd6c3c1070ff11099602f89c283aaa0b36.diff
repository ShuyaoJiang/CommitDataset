[+++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +import org.elasticsearch.action.get.MultiGetAction;, +import org.elasticsearch.action.search.MultiSearchAction;, +        public static final Index SEARCH =          new Index("search",         SearchAction.NAME + "*", MultiSearchAction.NAME + "*", SuggestAction.NAME + "*");, +        public static final Index GET =             new Index("get",            GetAction.NAME + "*", MultiGetAction.NAME + "*");, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +import org.elasticsearch.action.get.MultiGetAction;, +import org.elasticsearch.action.search.MultiSearchAction;, +        public static final Index SEARCH =          new Index("search",         SearchAction.NAME + "*", MultiSearchAction.NAME + "*", SuggestAction.NAME + "*");, +        public static final Index GET =             new Index("get",            GetAction.NAME + "*", MultiGetAction.NAME + "*");, +++ b/src/test/java/org/elasticsearch/integration/SearchGetAndSuggestPermissionsTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.integration;, +, +import org.elasticsearch.action.get.MultiGetResponse;, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.action.search.MultiSearchResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.suggest.SuggestResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.search.suggest.SuggestBuilders;, +import org.elasticsearch.shield.authc.support.SecuredStringTests;, +import org.elasticsearch.shield.authc.support.UsernamePasswordToken;, +import org.elasticsearch.shield.authz.AuthorizationException;, +import org.elasticsearch.test.ShieldIntegrationTest;, +import org.junit.Test;, +, +import static org.elasticsearch.client.Requests.searchRequest;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +, +@ClusterScope(scope = Scope.SUITE), +public class SearchGetAndSuggestPermissionsTests extends ShieldIntegrationTest {, +, +    @Override, +    protected String configRoles() {, +        return super.configRoles() + "\n" +, +                "\n" +, +                "search_role:\n" +, +                "  indices:\n" +, +                "    'a': search\n" +, +                "\n" +, +                "get_role:\n" +, +                "  indices:\n" +, +                "    'a': get\n" +, +                "\n" +, +                "suggest_role:\n" +, +                "  indices:\n" +, +                "    'a': suggest\n";, +    }, +, +    @Override, +    protected String configUsers() {, +        return super.configUsers() +, +                "search_user:{plain}passwd\n" +, +                "get_user:{plain}passwd\n" +, +                "suggest_user:{plain}passwd\n";, +, +    }, +, +    @Override, +    protected String configUsersRoles() {, +        return super.configUsersRoles() +, +                "search_role:search_user\n" +, +                "get_role:get_user\n" +, +                "suggest_role:suggest_user\n";, +    }, +, +    /**, +     * testing both "search" and "suggest" privileges can execute the suggest API, +     */, +    @Test, +     public void testSuggestAPI() throws Exception {, +        IndexResponse indexResponse = index("a", "type", jsonBuilder(), +                .startObject(), +                .field("name", "value"), +                .endObject());, +        assertThat(indexResponse.isCreated(), is(true));, +, +        refresh();, +, +        Client client = internalCluster().transportClient();, +, +        SuggestResponse suggestResponse = client.prepareSuggest("a"), +                .putHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, userHeader("suggest_user", "passwd")), +                .addSuggestion(SuggestBuilders.termSuggestion("name").field("name").text("val")).get();, +        assertNoFailures(suggestResponse);, +        assertThat(suggestResponse.getSuggest().size(), is(1));, +, +        suggestResponse = client.prepareSuggest("a"), +                .putHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, userHeader("search_user", "passwd")), +                .addSuggestion(SuggestBuilders.termSuggestion("name").field("name").text("val")).get();]