[+++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +                                assert lonField.fieldType().docValueType() == latField.fieldType().docValueType();, +                                // we write doc values fields differently: one field for all values, so we need to only care about indexed fields, +                                if (lonField.fieldType().docValueType() == null) {, +                            }, +++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +                                assert lonField.fieldType().docValueType() == latField.fieldType().docValueType();, +                                // we write doc values fields differently: one field for all values, so we need to only care about indexed fields, +                                if (lonField.fieldType().docValueType() == null) {, +                            }, +++ b/src/test/java/org/elasticsearch/index/fielddata/DisabledFieldDataFormatTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +                                assert lonField.fieldType().docValueType() == latField.fieldType().docValueType();, +                                // we write doc values fields differently: one field for all values, so we need to only care about indexed fields, +                                if (lonField.fieldType().docValueType() == null) {, +                            }, +++ b/src/test/java/org/elasticsearch/index/fielddata/DisabledFieldDataFormatTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/cache/CacheTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +@ClusterScope(scope= Scope.SUITE, numDataNodes =1, numClientNodes = 0, randomDynamicTemplates = false), +++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +                                assert lonField.fieldType().docValueType() == latField.fieldType().docValueType();, +                                // we write doc values fields differently: one field for all values, so we need to only care about indexed fields, +                                if (lonField.fieldType().docValueType() == null) {, +                            }, +++ b/src/test/java/org/elasticsearch/index/fielddata/DisabledFieldDataFormatTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/cache/CacheTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +@ClusterScope(scope= Scope.SUITE, numDataNodes =1, numClientNodes = 0, randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/CircuitBreakerServiceTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(scope = TEST, randomDynamicTemplates = false), +++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +                                assert lonField.fieldType().docValueType() == latField.fieldType().docValueType();, +                                // we write doc values fields differently: one field for all values, so we need to only care about indexed fields, +                                if (lonField.fieldType().docValueType() == null) {, +                            }, +++ b/src/test/java/org/elasticsearch/index/fielddata/DisabledFieldDataFormatTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/cache/CacheTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +@ClusterScope(scope= Scope.SUITE, numDataNodes =1, numClientNodes = 0, randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/CircuitBreakerServiceTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(scope = TEST, randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/mapping/SimpleGetMappingsTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +                                assert lonField.fieldType().docValueType() == latField.fieldType().docValueType();, +                                // we write doc values fields differently: one field for all values, so we need to only care about indexed fields, +                                if (lonField.fieldType().docValueType() == null) {, +                            }, +++ b/src/test/java/org/elasticsearch/index/fielddata/DisabledFieldDataFormatTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/cache/CacheTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +@ClusterScope(scope= Scope.SUITE, numDataNodes =1, numClientNodes = 0, randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/CircuitBreakerServiceTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(scope = TEST, randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/mapping/SimpleGetMappingsTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java, +                                assert lonField.fieldType().docValueType() == latField.fieldType().docValueType();, +                                // we write doc values fields differently: one field for all values, so we need to only care about indexed fields, +                                if (lonField.fieldType().docValueType() == null) {, +                            }, +++ b/src/test/java/org/elasticsearch/index/fielddata/DisabledFieldDataFormatTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/cache/CacheTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +@ClusterScope(scope= Scope.SUITE, numDataNodes =1, numClientNodes = 0, randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/CircuitBreakerServiceTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(scope = TEST, randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/mapping/SimpleGetMappingsTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/indices/mapping/UpdateMappingTests.java, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(randomDynamicTemplates = false), +++ b/src/test/java/org/elasticsearch/routing/SimpleRoutingTests.java, +                        .startObject("properties"), +                            .startObject("routing_field"), +                                .field("type", "long"), +                                .field("doc_values", false) // TODO this test fails with doc values https://github.com/elasticsearch/elasticsearch/pull/5858]