[+++ b/server/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.test.InternalSettingsPlugin;, +        return Arrays.asList(MockTransportService.TestPlugin.class, InternalSettingsPlugin.class);, +            .put("index.number_of_shards", 1).put("index.number_of_replicas", 1), +            .put("index.global_checkpoint_sync.interval", "1s")), +            .get());, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.test.InternalSettingsPlugin;, +        return Arrays.asList(MockTransportService.TestPlugin.class, InternalSettingsPlugin.class);, +            .put("index.number_of_shards", 1).put("index.number_of_replicas", 1), +            .put("index.global_checkpoint_sync.interval", "1s")), +            .get());, +++ b/server/src/test/java/org/elasticsearch/discovery/AbstractDisruptionTestCase.java, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.test.InternalSettingsPlugin;, +    public Settings indexSettings() {, +        return Settings.builder().put(super.indexSettings()), +            // sync global checkpoint quickly so we can verify seq_no_stats aligned between all copies after tests., +            .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), "1s").build();, +    }, +, +    @Override, +        return Arrays.asList(MockTransportService.TestPlugin.class, InternalSettingsPlugin.class);, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.test.InternalSettingsPlugin;, +        return Arrays.asList(MockTransportService.TestPlugin.class, InternalSettingsPlugin.class);, +            .put("index.number_of_shards", 1).put("index.number_of_replicas", 1), +            .put("index.global_checkpoint_sync.interval", "1s")), +            .get());, +++ b/server/src/test/java/org/elasticsearch/discovery/AbstractDisruptionTestCase.java, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.test.InternalSettingsPlugin;, +    public Settings indexSettings() {, +        return Settings.builder().put(super.indexSettings()), +            // sync global checkpoint quickly so we can verify seq_no_stats aligned between all copies after tests., +            .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), "1s").build();, +    }, +, +    @Override, +        return Arrays.asList(MockTransportService.TestPlugin.class, InternalSettingsPlugin.class);, +++ b/server/src/test/java/org/elasticsearch/recovery/RelocationIT.java, +    @Override, +    public Settings indexSettings() {, +        return Settings.builder().put(super.indexSettings()), +            // sync global checkpoint quickly so we can verify seq_no_stats aligned between all copies after tests., +            .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), "1s").build();, +    }, +, +               ).get();, +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(halfNodes - 1));, +            // we want to control refreshes, +            .put("index.refresh_interval", -1)).get();, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.test.InternalSettingsPlugin;, +        return Arrays.asList(MockTransportService.TestPlugin.class, InternalSettingsPlugin.class);, +            .put("index.number_of_shards", 1).put("index.number_of_replicas", 1), +            .put("index.global_checkpoint_sync.interval", "1s")), +            .get());, +++ b/server/src/test/java/org/elasticsearch/discovery/AbstractDisruptionTestCase.java, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.test.InternalSettingsPlugin;, +    public Settings indexSettings() {, +        return Settings.builder().put(super.indexSettings()), +            // sync global checkpoint quickly so we can verify seq_no_stats aligned between all copies after tests., +            .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), "1s").build();, +    }, +, +    @Override, +        return Arrays.asList(MockTransportService.TestPlugin.class, InternalSettingsPlugin.class);, +++ b/server/src/test/java/org/elasticsearch/recovery/RelocationIT.java, +    @Override, +    public Settings indexSettings() {, +        return Settings.builder().put(super.indexSettings()), +            // sync global checkpoint quickly so we can verify seq_no_stats aligned between all copies after tests., +            .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), "1s").build();, +    }, +, +               ).get();, +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(halfNodes - 1));, +            // we want to control refreshes, +            .put("index.refresh_interval", -1)).get();, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.test.InternalSettingsPlugin;, +            MockNioTransportPlugin.class, InternalSettingsPlugin.class);, +                    builder.field(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), "1s");]