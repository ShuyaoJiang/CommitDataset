[+++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptedMetricAggContextsTests.java, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.memory.MemoryIndex;, +import org.elasticsearch.search.lookup.LeafSearchLookup;, +import org.elasticsearch.search.lookup.SearchLookup;, +import org.elasticsearch.search.lookup.SourceLookup;, +import java.io.IOException;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +    public void testMapBasic() throws IOException {, +    public void testMapSourceAccess() throws IOException {, +        ScriptedMetricAggContexts.MapScript.Factory factory = scriptEngine.compile("test",, +            "state.testField = params._source.three", ScriptedMetricAggContexts.MapScript.CONTEXT, Collections.emptyMap());, +, +        Map<String, Object> params = new HashMap<>();, +        Map<String, Object> state = new HashMap<>();, +, +        MemoryIndex index = new MemoryIndex();, +        // we don't need a real index, just need to construct a LeafReaderContext which cannot be mocked, +        LeafReaderContext leafReaderContext = index.createSearcher().getIndexReader().leaves().get(0);, +, +        SearchLookup lookup = mock(SearchLookup.class);, +        LeafSearchLookup leafLookup = mock(LeafSearchLookup.class);, +        when(lookup.getLeafSearchLookup(leafReaderContext)).thenReturn(leafLookup);, +        SourceLookup sourceLookup = mock(SourceLookup.class);, +        when(leafLookup.asMap()).thenReturn(Collections.singletonMap("_source", sourceLookup));, +        when(sourceLookup.get("three")).thenReturn(3);, +        ScriptedMetricAggContexts.MapScript.LeafFactory leafFactory = factory.newFactory(params, state, lookup);, +        ScriptedMetricAggContexts.MapScript script = leafFactory.newInstance(leafReaderContext);, +, +        script.execute();, +, +        assert(state.containsKey("testField"));, +        assertEquals(3, state.get("testField"));, +    }, +, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptedMetricAggContextsTests.java, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.memory.MemoryIndex;, +import org.elasticsearch.search.lookup.LeafSearchLookup;, +import org.elasticsearch.search.lookup.SearchLookup;, +import org.elasticsearch.search.lookup.SourceLookup;, +import java.io.IOException;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +    public void testMapBasic() throws IOException {, +    public void testMapSourceAccess() throws IOException {, +        ScriptedMetricAggContexts.MapScript.Factory factory = scriptEngine.compile("test",, +            "state.testField = params._source.three", ScriptedMetricAggContexts.MapScript.CONTEXT, Collections.emptyMap());, +, +        Map<String, Object> params = new HashMap<>();, +        Map<String, Object> state = new HashMap<>();, +, +        MemoryIndex index = new MemoryIndex();, +        // we don't need a real index, just need to construct a LeafReaderContext which cannot be mocked, +        LeafReaderContext leafReaderContext = index.createSearcher().getIndexReader().leaves().get(0);, +, +        SearchLookup lookup = mock(SearchLookup.class);, +        LeafSearchLookup leafLookup = mock(LeafSearchLookup.class);, +        when(lookup.getLeafSearchLookup(leafReaderContext)).thenReturn(leafLookup);, +        SourceLookup sourceLookup = mock(SourceLookup.class);, +        when(leafLookup.asMap()).thenReturn(Collections.singletonMap("_source", sourceLookup));, +        when(sourceLookup.get("three")).thenReturn(3);, +        ScriptedMetricAggContexts.MapScript.LeafFactory leafFactory = factory.newFactory(params, state, lookup);, +        ScriptedMetricAggContexts.MapScript script = leafFactory.newInstance(leafReaderContext);, +, +        script.execute();, +, +        assert(state.containsKey("testField"));, +        assertEquals(3, state.get("testField"));, +    }, +, +++ b/server/src/main/java/org/elasticsearch/script/ScriptedMetricAggContexts.java, +import java.util.Collections;, +import java.util.HashMap;, +, +    public abstract static class InitScript {, +        public InitScript(Map<String, Object> params, Map<String, Object> state) {, +    public abstract static class MapScript {, +        private static final Map<String, String> DEPRECATIONS;, +, +        static {, +            Map<String, String> deprecations = new HashMap<>();, +            deprecations.put(, +                "doc",, +                "Accessing variable [doc] via [params.doc] from within a scripted metric agg map script " +, +                    "is deprecated in favor of directly accessing [doc].", +            );, +            deprecations.put(, +                "_doc",, +                "Accessing variable [doc] via [params._doc] from within a scripted metric agg map script " +, +                    "is deprecated in favor of directly accessing [doc].", +            );, +            deprecations.put(, +                "_agg",, +                "Accessing variable [_agg] via [params._agg] from within a scripted metric agg map script " +, +                    "is deprecated in favor of using [state].", +            );]