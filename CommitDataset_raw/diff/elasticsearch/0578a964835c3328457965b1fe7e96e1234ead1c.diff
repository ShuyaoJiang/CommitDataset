[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java, +    private double minBound = Double.MAX_VALUE;, +    private double maxBound = Double.MIN_VALUE;, +    /** Set extended bounds on this builder: buckets between {@code minBound}, +     *  and {@code maxBound} will be created even if no documents fell into, +     *  these buckets. It is possible to create half-open bounds by providing, +     *  {@link Double#POSITIVE_INFINITY} as a {@code minBound} or , +     *  {@link Double#NEGATIVE_INFINITY} as a {@code maxBound}. */, +        if (minBound == Double.NEGATIVE_INFINITY) {, +            throw new IllegalArgumentException("minBound must not be -Infinity, got: " + minBound);, +        if (maxBound == Double.POSITIVE_INFINITY) {, +            throw new IllegalArgumentException("maxBound must not be +Infinity, got: " + maxBound);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java, +    private double minBound = Double.MAX_VALUE;, +    private double maxBound = Double.MIN_VALUE;, +    /** Set extended bounds on this builder: buckets between {@code minBound}, +     *  and {@code maxBound} will be created even if no documents fell into, +     *  these buckets. It is possible to create half-open bounds by providing, +     *  {@link Double#POSITIVE_INFINITY} as a {@code minBound} or , +     *  {@link Double#NEGATIVE_INFINITY} as a {@code maxBound}. */, +        if (minBound == Double.NEGATIVE_INFINITY) {, +            throw new IllegalArgumentException("minBound must not be -Infinity, got: " + minBound);, +        if (maxBound == Double.POSITIVE_INFINITY) {, +            throw new IllegalArgumentException("maxBound must not be +Infinity, got: " + maxBound);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java, +        } catch (Exception e) {, +    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19833"), +        } catch (Exception e) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java, +    private double minBound = Double.MAX_VALUE;, +    private double maxBound = Double.MIN_VALUE;, +    /** Set extended bounds on this builder: buckets between {@code minBound}, +     *  and {@code maxBound} will be created even if no documents fell into, +     *  these buckets. It is possible to create half-open bounds by providing, +     *  {@link Double#POSITIVE_INFINITY} as a {@code minBound} or , +     *  {@link Double#NEGATIVE_INFINITY} as a {@code maxBound}. */, +        if (minBound == Double.NEGATIVE_INFINITY) {, +            throw new IllegalArgumentException("minBound must not be -Infinity, got: " + minBound);, +        if (maxBound == Double.POSITIVE_INFINITY) {, +            throw new IllegalArgumentException("maxBound must not be +Infinity, got: " + maxBound);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java, +        } catch (Exception e) {, +    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19833"), +        } catch (Exception e) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramTests.java, +            factory.extendedBounds(randomDouble(), randomDouble());, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java, +    private double minBound = Double.MAX_VALUE;, +    private double maxBound = Double.MIN_VALUE;, +    /** Set extended bounds on this builder: buckets between {@code minBound}, +     *  and {@code maxBound} will be created even if no documents fell into, +     *  these buckets. It is possible to create half-open bounds by providing, +     *  {@link Double#POSITIVE_INFINITY} as a {@code minBound} or , +     *  {@link Double#NEGATIVE_INFINITY} as a {@code maxBound}. */, +        if (minBound == Double.NEGATIVE_INFINITY) {, +            throw new IllegalArgumentException("minBound must not be -Infinity, got: " + minBound);, +        if (maxBound == Double.POSITIVE_INFINITY) {, +            throw new IllegalArgumentException("maxBound must not be +Infinity, got: " + maxBound);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java, +        } catch (Exception e) {, +    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19833"), +        } catch (Exception e) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramTests.java, +            factory.extendedBounds(randomDouble(), randomDouble());, +++ b/modules/rank-eval/build.gradle, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +esplugin {, +  description 'The Rank Eval module adds APIs to evaluate ranking quality.', +  classname 'org.elasticsearch.index.rankeval.RankEvalPlugin', +}, +, +integTest {]