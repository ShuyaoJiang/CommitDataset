[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                                                              PainlessLookupUtility.typeToCanonicalTypeName(interfaceType));, +                PainlessLookupUtility.typeToCanonicalTypeName(implMethod.target), implMethod.name, receiverClass);, +                         "to [" + PainlessLookupUtility.typeToCanonicalTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                                                              PainlessLookupUtility.typeToCanonicalTypeName(interfaceType));, +                PainlessLookupUtility.typeToCanonicalTypeName(implMethod.target), implMethod.name, receiverClass);, +                         "to [" + PainlessLookupUtility.typeToCanonicalTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                                                              PainlessLookupUtility.typeToCanonicalTypeName(interfaceType));, +                PainlessLookupUtility.typeToCanonicalTypeName(implMethod.target), implMethod.name, receiverClass);, +                         "to [" + PainlessLookupUtility.typeToCanonicalTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +            b.append("Variable[type=").append(PainlessLookupUtility.typeToCanonicalTypeName(clazz));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                                                              PainlessLookupUtility.typeToCanonicalTypeName(interfaceType));, +                PainlessLookupUtility.typeToCanonicalTypeName(implMethod.target), implMethod.name, receiverClass);, +                         "to [" + PainlessLookupUtility.typeToCanonicalTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +            b.append("Variable[type=").append(PainlessLookupUtility.typeToCanonicalTypeName(clazz));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +        type = PainlessLookupUtility.javaTypeToType(type);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                                                              PainlessLookupUtility.typeToCanonicalTypeName(interfaceType));, +                PainlessLookupUtility.typeToCanonicalTypeName(implMethod.target), implMethod.name, receiverClass);, +                         "to [" + PainlessLookupUtility.typeToCanonicalTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +            b.append("Variable[type=").append(PainlessLookupUtility.typeToCanonicalTypeName(clazz));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +        type = PainlessLookupUtility.javaTypeToType(type);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookup.java, +        return PainlessLookupUtility.canonicalTypeNameToType(painlessType, painlessTypesToJavaClasses);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                                                              PainlessLookupUtility.typeToCanonicalTypeName(interfaceType));, +                PainlessLookupUtility.typeToCanonicalTypeName(implMethod.target), implMethod.name, receiverClass);, +                         "to [" + PainlessLookupUtility.typeToCanonicalTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +                    "to [" + PainlessLookupUtility.typeToCanonicalTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +            b.append("Variable[type=").append(PainlessLookupUtility.typeToCanonicalTypeName(clazz));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +        type = PainlessLookupUtility.javaTypeToType(type);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookup.java, +        return PainlessLookupUtility.canonicalTypeNameToType(painlessType, painlessTypesToJavaClasses);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +import static org.elasticsearch.painless.lookup.PainlessLookupUtility.DEF_TYPE_NAME;, +        private final Class<?> targetType;, +        private final List<Class<?>> typeParameters;, +        private PainlessMethodCacheKey(Class<?> targetType, String methodName, List<Class<?>> typeParameters) {, +            this.targetType = targetType;, +            this.typeParameters = Collections.unmodifiableList(typeParameters);, +            return Objects.equals(targetType, that.targetType) &&, +                   Objects.equals(typeParameters, that.typeParameters);, +            return Objects.hash(targetType, methodName, typeParameters);, +        private final Class<?> targetType;, +        private final Class<?> typeParameter;, +        private PainlessFieldCacheKey(Class<?> targetType, String fieldName, Class<?> typeParameter) {, +            this.targetType = targetType;, +            this.typeParameter = typeParameter;, +            return Objects.equals(targetType, that.targetType) &&, +                   Objects.equals(typeParameter, that.typeParameter);, +            return Objects.hash(targetType, fieldName, typeParameter);, +    private final Map<String, Class<?>> canonicalClassNamesToClasses;, +    private final Map<Class<?>, PainlessClassBuilder> classesToPainlessClasses;, +        canonicalClassNamesToClasses = new HashMap<>();, +        classesToPainlessClasses = new HashMap<>();, +        canonicalClassNamesToClasses.put(DEF_TYPE_NAME, def.class);, +        classesToPainlessClasses.put(def.class,, +                new PainlessClassBuilder(DEF_TYPE_NAME, Object.class, Type.getType(Object.class)));, +    private Class<?> canonicalTypeNameToType(String canonicalTypeName) {, +        return PainlessLookupUtility.canonicalTypeNameToType(canonicalTypeName, canonicalClassNamesToClasses);]