[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        // We disable JMX on by default, since we don't really want the overhead of RMI (and RMI GC...), +//        if (tuple.v1().get(JmxService.SettingsConstants.CREATE_CONNECTOR) == null) {, +//            // automatically create the connector if we are bootstrapping, +//            Settings updated = settingsBuilder().put(tuple.v1()).put(JmxService.SettingsConstants.CREATE_CONNECTOR, true).build();, +//            tuple = new Tuple<Settings, Environment>(updated, tuple.v2());, +//        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        // We disable JMX on by default, since we don't really want the overhead of RMI (and RMI GC...), +//        if (tuple.v1().get(JmxService.SettingsConstants.CREATE_CONNECTOR) == null) {, +//            // automatically create the connector if we are bootstrapping, +//            Settings updated = settingsBuilder().put(tuple.v1()).put(JmxService.SettingsConstants.CREATE_CONNECTOR, true).build();, +//            tuple = new Tuple<Settings, Environment>(updated, tuple.v2());, +//        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/jmx/JmxService.java, +            // we are going to create the connector, set the GC interval to a large value, +            try {, +                if (System.getProperty("sun.rmi.dgc.client.gcInterval") == null), +                    System.setProperty("sun.rmi.dgc.client.gcInterval", "36000000");, +                if (System.getProperty("sun.rmi.dgc.server.gcInterval") == null), +                    System.setProperty("sun.rmi.dgc.server.gcInterval", "36000000");, +            } catch (Exception secExc) {, +                logger.warn("Failed to set sun.rmi.dgc.xxx system properties", secExc);, +            }, +]