[+++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.cluster.storedscripts.DeleteStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.GetStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.TransportDeleteStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.TransportGetStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.TransportPutStoredScriptAction;, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.common.NamedRegistry;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.plugins.ActionPlugin;, +import org.elasticsearch.plugins.ActionPlugin.ActionHandler;, +import static java.util.Collections.unmodifiableList;, +import static java.util.Collections.unmodifiableMap;, +, + * Builds and binds the generic action map, all {@link TransportAction}s, and {@link ActionFilters}., +    private final boolean transportClient;, +    private final Map<String, ActionHandler<?, ?>> actions;, +    private final List<Class<? extends ActionFilter>> actionFilters;, +    private final AutoCreateIndex autoCreateIndex;, +    private final DestructiveOperations destructiveOperations;, +    public ActionModule(boolean ingestEnabled, boolean transportClient, Settings settings, IndexNameExpressionResolver resolver,, +            ClusterSettings clusterSettings, List<ActionPlugin> actionPlugins) {, +        this.transportClient = transportClient;, +        actions = setupActions(actionPlugins);, +        actionFilters = setupActionFilters(actionPlugins, ingestEnabled);, +        autoCreateIndex = transportClient ? null : new AutoCreateIndex(settings, resolver);, +        destructiveOperations = new DestructiveOperations(settings, clusterSettings);, +    }, +    private Map<String, ActionHandler<?, ?>> setupActions(List<ActionPlugin> actionPlugins) {, +        // Subclass NamedRegistry for easy registration, +        class ActionRegistry extends NamedRegistry<ActionHandler<?, ?>> {, +            public ActionRegistry() {, +                super("action");, +            }, +, +            public void register(ActionHandler<?, ?> handler) {, +                register(handler.getAction().name(), handler);, +            }, +, +            public <Request extends ActionRequest<Request>, Response extends ActionResponse> void register(, +                    GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction,, +                    Class<?>... supportTransportActions) {, +                register(new ActionHandler<>(action, transportAction, supportTransportActions));, +            }, +        }, +        ActionRegistry actions = new ActionRegistry();, +, +        actions.register(MainAction.INSTANCE, TransportMainAction.class);, +        actions.register(NodesInfoAction.INSTANCE, TransportNodesInfoAction.class);, +        actions.register(NodesStatsAction.INSTANCE, TransportNodesStatsAction.class);, +        actions.register(NodesHotThreadsAction.INSTANCE, TransportNodesHotThreadsAction.class);, +        actions.register(ListTasksAction.INSTANCE, TransportListTasksAction.class);, +        actions.register(GetTaskAction.INSTANCE, TransportGetTaskAction.class);, +        actions.register(CancelTasksAction.INSTANCE, TransportCancelTasksAction.class);, +, +        actions.register(ClusterAllocationExplainAction.INSTANCE, TransportClusterAllocationExplainAction.class);, +        actions.register(ClusterStatsAction.INSTANCE, TransportClusterStatsAction.class);, +        actions.register(ClusterStateAction.INSTANCE, TransportClusterStateAction.class);, +        actions.register(ClusterHealthAction.INSTANCE, TransportClusterHealthAction.class);, +        actions.register(ClusterUpdateSettingsAction.INSTANCE, TransportClusterUpdateSettingsAction.class);, +        actions.register(ClusterRerouteAction.INSTANCE, TransportClusterRerouteAction.class);, +        actions.register(ClusterSearchShardsAction.INSTANCE, TransportClusterSearchShardsAction.class);, +        actions.register(PendingClusterTasksAction.INSTANCE, TransportPendingClusterTasksAction.class);, +        actions.register(PutRepositoryAction.INSTANCE, TransportPutRepositoryAction.class);, +        actions.register(GetRepositoriesAction.INSTANCE, TransportGetRepositoriesAction.class);, +        actions.register(DeleteRepositoryAction.INSTANCE, TransportDeleteRepositoryAction.class);, +        actions.register(VerifyRepositoryAction.INSTANCE, TransportVerifyRepositoryAction.class);, +        actions.register(GetSnapshotsAction.INSTANCE, TransportGetSnapshotsAction.class);, +        actions.register(DeleteSnapshotAction.INSTANCE, TransportDeleteSnapshotAction.class);, +        actions.register(CreateSnapshotAction.INSTANCE, TransportCreateSnapshotAction.class);, +        actions.register(RestoreSnapshotAction.INSTANCE, TransportRestoreSnapshotAction.class);, +        actions.register(SnapshotsStatusAction.INSTANCE, TransportSnapshotsStatusAction.class);, +, +        actions.register(IndicesStatsAction.INSTANCE, TransportIndicesStatsAction.class);, +        actions.register(IndicesSegmentsAction.INSTANCE, TransportIndicesSegmentsAction.class);, +        actions.register(IndicesShardStoresAction.INSTANCE, TransportIndicesShardStoresAction.class);, +        actions.register(CreateIndexAction.INSTANCE, TransportCreateIndexAction.class);, +        actions.register(ShrinkAction.INSTANCE, TransportShrinkAction.class);, +        actions.register(RolloverAction.INSTANCE, TransportRolloverAction.class);, +        actions.register(DeleteIndexAction.INSTANCE, TransportDeleteIndexAction.class);, +        actions.register(GetIndexAction.INSTANCE, TransportGetIndexAction.class);, +        actions.register(OpenIndexAction.INSTANCE, TransportOpenIndexAction.class);, +        actions.register(CloseIndexAction.INSTANCE, TransportCloseIndexAction.class);, +        actions.register(IndicesExistsAction.INSTANCE, TransportIndicesExistsAction.class);, +        actions.register(TypesExistsAction.INSTANCE, TransportTypesExistsAction.class);, +        actions.register(GetMappingsAction.INSTANCE, TransportGetMappingsAction.class);, +        actions.register(GetFieldMappingsAction.INSTANCE, TransportGetFieldMappingsAction.class,, +                TransportGetFieldMappingsIndexAction.class);, +        actions.register(PutMappingAction.INSTANCE, TransportPutMappingAction.class);, +        actions.register(IndicesAliasesAction.INSTANCE, TransportIndicesAliasesAction.class);, +        actions.register(UpdateSettingsAction.INSTANCE, TransportUpdateSettingsAction.class);, +        actions.register(AnalyzeAction.INSTANCE, TransportAnalyzeAction.class);, +        actions.register(PutIndexTemplateAction.INSTANCE, TransportPutIndexTemplateAction.class);, +        actions.register(GetIndexTemplatesAction.INSTANCE, TransportGetIndexTemplatesAction.class);, +        actions.register(DeleteIndexTemplateAction.INSTANCE, TransportDeleteIndexTemplateAction.class);, +        actions.register(ValidateQueryAction.INSTANCE, TransportValidateQueryAction.class);]