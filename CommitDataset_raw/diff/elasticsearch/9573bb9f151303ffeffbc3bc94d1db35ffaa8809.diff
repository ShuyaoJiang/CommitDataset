[+++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +import org.elasticsearch.repositories.hdfs.HdfsBlobStore.Operation;, +    private final HdfsBlobStore store;, +    private final int bufferSize;, +    HdfsBlobContainer(BlobPath blobPath, HdfsBlobStore store, Path path, int bufferSize) {, +        this.store = store;, +        this.bufferSize = bufferSize;, +            return store.execute(new Operation<Boolean>() {, +            store.execute(new Operation<Boolean>() {, +        store.execute(new Operation<Void>() {, +        return store.execute(new Operation<InputStream>() {, +                return fileContext.open(new Path(path, blobName), bufferSize);, +        store.execute(new Operation<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(bufferSize) };, +                    byte[] buffer = new byte[bufferSize];, +        FileStatus[] files = store.execute(new Operation<FileStatus[]>() {, +        FileStatus[] files = store.execute(new Operation<FileStatus[]>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +import org.elasticsearch.repositories.hdfs.HdfsBlobStore.Operation;, +    private final HdfsBlobStore store;, +    private final int bufferSize;, +    HdfsBlobContainer(BlobPath blobPath, HdfsBlobStore store, Path path, int bufferSize) {, +        this.store = store;, +        this.bufferSize = bufferSize;, +            return store.execute(new Operation<Boolean>() {, +            store.execute(new Operation<Boolean>() {, +        store.execute(new Operation<Void>() {, +        return store.execute(new Operation<InputStream>() {, +                return fileContext.open(new Path(path, blobName), bufferSize);, +        store.execute(new Operation<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(bufferSize) };, +                    byte[] buffer = new byte[bufferSize];, +        FileStatus[] files = store.execute(new Operation<FileStatus[]>() {, +        FileStatus[] files = store.execute(new Operation<FileStatus[]>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobStore.java, +import org.apache.lucene.store.AlreadyClosedException;, +import org.elasticsearch.SpecialPermission;, +import java.security.AccessController;, +import java.security.PrivilegedActionException;, +import java.security.PrivilegedExceptionAction;, +    private final FileContext fileContext;, +    private final int bufferSize;, +    private volatile boolean closed;, +    HdfsBlobStore(FileContext fileContext, String path, int bufferSize) throws IOException {, +        this.fileContext = fileContext;, +        this.bufferSize = bufferSize;, +        this.root = execute(new Operation<Path>() {, +          @Override, +          public Path run(FileContext fileContext) throws IOException {, +              return fileContext.makeQualified(new Path(path));, +          }, +        });, +        execute(new Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                fileContext.mkdir(path, null, true);, +        return new HdfsBlobContainer(path, this, buildHdfsPath(path), bufferSize);, +        execute(new Operation<Void>() {, +    , +    interface Operation<V> {, +        V run(FileContext fileContext) throws IOException;, +    }, +    , +    /**, +     * Executes the provided operation against this store, +     */, +    <V> V execute(Operation<V> operation) throws IOException {, +        SecurityManager sm = System.getSecurityManager();, +        if (sm != null) {, +            // unprivileged code such as scripts do not have SpecialPermission, +            sm.checkPermission(new SpecialPermission());, +        }, +        if (closed) {, +            throw new AlreadyClosedException("HdfsBlobStore is closed: " + root);, +        }, +        try {, +            return AccessController.doPrivileged(new PrivilegedExceptionAction<V>() {, +                @Override, +                public V run() throws IOException {, +                    return operation.run(fileContext);, +                }, +            });, +        } catch (PrivilegedActionException pae) {, +            throw (IOException) pae.getException();, +        }, +    }, +, +        closed = true;, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +import org.elasticsearch.repositories.hdfs.HdfsBlobStore.Operation;, +    private final HdfsBlobStore store;, +    private final int bufferSize;, +    HdfsBlobContainer(BlobPath blobPath, HdfsBlobStore store, Path path, int bufferSize) {, +        this.store = store;, +        this.bufferSize = bufferSize;, +            return store.execute(new Operation<Boolean>() {, +            store.execute(new Operation<Boolean>() {, +        store.execute(new Operation<Void>() {, +        return store.execute(new Operation<InputStream>() {, +                return fileContext.open(new Path(path, blobName), bufferSize);, +        store.execute(new Operation<Void>() {]