[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.FindFileStructureRequest;, +import org.elasticsearch.common.xcontent.XContentType;, +, +    static Request findFileStructure(FindFileStructureRequest findFileStructureRequest) {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("ml"), +            .addPathPartAsIs("find_file_structure"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        if (findFileStructureRequest.getLinesToSample() != null) {, +            params.putParam(FindFileStructureRequest.LINES_TO_SAMPLE.getPreferredName(),, +                findFileStructureRequest.getLinesToSample().toString());, +        }, +        if (findFileStructureRequest.getTimeout() != null) {, +            params.putParam(FindFileStructureRequest.TIMEOUT.getPreferredName(), findFileStructureRequest.getTimeout().toString());, +        }, +        if (findFileStructureRequest.getCharset() != null) {, +            params.putParam(FindFileStructureRequest.CHARSET.getPreferredName(), findFileStructureRequest.getCharset());, +        }, +        if (findFileStructureRequest.getFormat() != null) {, +            params.putParam(FindFileStructureRequest.FORMAT.getPreferredName(), findFileStructureRequest.getFormat().toString());, +        }, +        if (findFileStructureRequest.getColumnNames() != null) {, +            params.putParam(FindFileStructureRequest.COLUMN_NAMES.getPreferredName(),, +                Strings.collectionToCommaDelimitedString(findFileStructureRequest.getColumnNames()));, +        }, +        if (findFileStructureRequest.getHasHeaderRow() != null) {, +            params.putParam(FindFileStructureRequest.HAS_HEADER_ROW.getPreferredName(),, +                findFileStructureRequest.getHasHeaderRow().toString());, +        }, +        if (findFileStructureRequest.getDelimiter() != null) {, +            params.putParam(FindFileStructureRequest.DELIMITER.getPreferredName(),, +                findFileStructureRequest.getDelimiter().toString());, +        }, +        if (findFileStructureRequest.getQuote() != null) {, +            params.putParam(FindFileStructureRequest.QUOTE.getPreferredName(), findFileStructureRequest.getQuote().toString());, +        }, +        if (findFileStructureRequest.getShouldTrimFields() != null) {, +            params.putParam(FindFileStructureRequest.SHOULD_TRIM_FIELDS.getPreferredName(),, +                findFileStructureRequest.getShouldTrimFields().toString());, +        }, +        if (findFileStructureRequest.getGrokPattern() != null) {, +            params.putParam(FindFileStructureRequest.GROK_PATTERN.getPreferredName(), findFileStructureRequest.getGrokPattern());, +        }, +        if (findFileStructureRequest.getTimestampFormat() != null) {, +            params.putParam(FindFileStructureRequest.TIMESTAMP_FORMAT.getPreferredName(), findFileStructureRequest.getTimestampFormat());, +        }, +        if (findFileStructureRequest.getTimestampField() != null) {, +            params.putParam(FindFileStructureRequest.TIMESTAMP_FIELD.getPreferredName(), findFileStructureRequest.getTimestampField());, +        }, +        if (findFileStructureRequest.getExplain() != null) {, +            params.putParam(FindFileStructureRequest.EXPLAIN.getPreferredName(), findFileStructureRequest.getExplain().toString());, +        }, +, +        BytesReference sample = findFileStructureRequest.getSample();, +        BytesRef source = sample.toBytesRef();, +        HttpEntity byteEntity = new ByteArrayEntity(source.bytes, source.offset, source.length, createContentType(XContentType.JSON));, +        request.setEntity(byteEntity);, +        return request;, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.FindFileStructureRequest;, +import org.elasticsearch.common.xcontent.XContentType;, +, +    static Request findFileStructure(FindFileStructureRequest findFileStructureRequest) {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("ml"), +            .addPathPartAsIs("find_file_structure"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        if (findFileStructureRequest.getLinesToSample() != null) {, +            params.putParam(FindFileStructureRequest.LINES_TO_SAMPLE.getPreferredName(),, +                findFileStructureRequest.getLinesToSample().toString());, +        }, +        if (findFileStructureRequest.getTimeout() != null) {, +            params.putParam(FindFileStructureRequest.TIMEOUT.getPreferredName(), findFileStructureRequest.getTimeout().toString());, +        }, +        if (findFileStructureRequest.getCharset() != null) {, +            params.putParam(FindFileStructureRequest.CHARSET.getPreferredName(), findFileStructureRequest.getCharset());, +        }, +        if (findFileStructureRequest.getFormat() != null) {, +            params.putParam(FindFileStructureRequest.FORMAT.getPreferredName(), findFileStructureRequest.getFormat().toString());, +        }, +        if (findFileStructureRequest.getColumnNames() != null) {, +            params.putParam(FindFileStructureRequest.COLUMN_NAMES.getPreferredName(),, +                Strings.collectionToCommaDelimitedString(findFileStructureRequest.getColumnNames()));, +        }, +        if (findFileStructureRequest.getHasHeaderRow() != null) {, +            params.putParam(FindFileStructureRequest.HAS_HEADER_ROW.getPreferredName(),, +                findFileStructureRequest.getHasHeaderRow().toString());, +        }, +        if (findFileStructureRequest.getDelimiter() != null) {, +            params.putParam(FindFileStructureRequest.DELIMITER.getPreferredName(),]