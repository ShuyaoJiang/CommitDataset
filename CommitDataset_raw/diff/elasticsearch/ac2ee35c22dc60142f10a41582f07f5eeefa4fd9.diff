[+++ /dev/null, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptions.java, +import org.elasticsearch.test.discovery.ClusterDiscoveryConfiguration;, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptions.java, +import org.elasticsearch.test.discovery.ClusterDiscoveryConfiguration;, +++ b/src/test/java/org/elasticsearch/discovery/ZenUnicastDiscoveryTests.java, +import org.elasticsearch.test.discovery.ClusterDiscoveryConfiguration;, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptions.java, +import org.elasticsearch.test.discovery.ClusterDiscoveryConfiguration;, +++ b/src/test/java/org/elasticsearch/discovery/ZenUnicastDiscoveryTests.java, +import org.elasticsearch.test.discovery.ClusterDiscoveryConfiguration;, +++ b/src/test/java/org/elasticsearch/test/discovery/ClusterDiscoveryConfiguration.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.test.discovery;, +, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +import com.google.common.primitives.Ints;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.elasticsearch.test.InternalTestCluster;, +import org.elasticsearch.test.SettingsSource;, +import org.elasticsearch.transport.local.LocalTransport;, +, +import java.util.HashSet;, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicInteger;, +, +public class ClusterDiscoveryConfiguration extends SettingsSource {, +, +    public static Settings DEFAULT_SETTINGS = ImmutableSettings.settingsBuilder(), +            .put("gateway.type", "local"), +            .put("discovery.type", "zen"), +            .build();, +, +    final int numOfNodes;, +, +    final Settings baseSettings;, +, +    public ClusterDiscoveryConfiguration(int numOfNodes) {, +        this(numOfNodes, ImmutableSettings.EMPTY);, +    }, +, +    public ClusterDiscoveryConfiguration(int numOfNodes, Settings extraSettings) {, +        this.numOfNodes = numOfNodes;, +        this.baseSettings = ImmutableSettings.builder().put(DEFAULT_SETTINGS).put(extraSettings).build();, +    }, +, +    @Override, +    public Settings node(int nodeOrdinal) {, +        return baseSettings;, +    }, +, +    @Override, +    public Settings transportClient() {, +        return baseSettings;, +    }, +, +    public static class UnicastZen extends ClusterDiscoveryConfiguration {, +, +        private final static AtomicInteger portRangeCounter = new AtomicInteger();, +, +        private final int[] unicastHostOrdinals;, +        private final int basePort;, +, +        public UnicastZen(int numOfNodes) {, +            this(numOfNodes, numOfNodes);, +        }, +, +        public UnicastZen(int numOfNodes, Settings extraSettings) {, +            this(numOfNodes, numOfNodes, extraSettings);, +        }, +, +        public UnicastZen(int numOfNodes, int numOfUnicastHosts) {, +            this(numOfNodes, numOfUnicastHosts, ImmutableSettings.EMPTY);, +        }, +, +        public UnicastZen(int numOfNodes, int numOfUnicastHosts, Settings extraSettings) {, +            super(numOfNodes, extraSettings);, +            if (numOfUnicastHosts == numOfNodes) {]