[+++ b/sql/server/build.gradle, +++ b/sql/server/build.gradle, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/Scroller.java, +                        return new AggValueInput(a.location(), a.expression(), action, a.innerKey());, +                    return new HitExtractorInput(l.location(), l.expression(), he);, +++ b/sql/server/build.gradle, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/Scroller.java, +                        return new AggValueInput(a.location(), a.expression(), action, a.innerKey());, +                    return new HitExtractorInput(l.location(), l.expression(), he);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Alias.java, +import org.elasticsearch.xpack.sql.tree.NodeInfo;, +import java.util.List;, +, +    @Override, +    protected NodeInfo<Alias> info() {, +        return NodeInfo.create(this, Alias::new, name(), qualifier, child, id(), synthetic());, +    }, +, +    @Override, +    public Expression replaceChildren(List<Expression> newChildren) {, +        if (newChildren.size() != 1) {, +            throw new IllegalArgumentException("expected [1] child but received [" + newChildren.size() + "]");, +        }, +        return new Alias(location(), name(), qualifier, newChildren.get(0), id(), synthetic());, +    }, +, +++ b/sql/server/build.gradle, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/Scroller.java, +                        return new AggValueInput(a.location(), a.expression(), action, a.innerKey());, +                    return new HitExtractorInput(l.location(), l.expression(), he);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Alias.java, +import org.elasticsearch.xpack.sql.tree.NodeInfo;, +import java.util.List;, +, +    @Override, +    protected NodeInfo<Alias> info() {, +        return NodeInfo.create(this, Alias::new, name(), qualifier, child, id(), synthetic());, +    }, +, +    @Override, +    public Expression replaceChildren(List<Expression> newChildren) {, +        if (newChildren.size() != 1) {, +            throw new IllegalArgumentException("expected [1] child but received [" + newChildren.size() + "]");, +        }, +        return new Alias(location(), name(), qualifier, newChildren.get(0), id(), synthetic());, +    }, +, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Attribute.java, +import java.util.List;, +, +    @Override, +    public final Expression replaceChildren(List<Expression> newChildren) {, +        throw new UnsupportedOperationException("this type of node doesn't have any children to replace");, +    }, +, +++ b/sql/server/build.gradle, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/Scroller.java, +                        return new AggValueInput(a.location(), a.expression(), action, a.innerKey());, +                    return new HitExtractorInput(l.location(), l.expression(), he);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Alias.java, +import org.elasticsearch.xpack.sql.tree.NodeInfo;, +import java.util.List;, +, +    @Override, +    protected NodeInfo<Alias> info() {, +        return NodeInfo.create(this, Alias::new, name(), qualifier, child, id(), synthetic());, +    }, +, +    @Override, +    public Expression replaceChildren(List<Expression> newChildren) {, +        if (newChildren.size() != 1) {, +            throw new IllegalArgumentException("expected [1] child but received [" + newChildren.size() + "]");, +        }, +        return new Alias(location(), name(), qualifier, newChildren.get(0), id(), synthetic());, +    }, +, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Attribute.java, +import java.util.List;, +, +    @Override, +    public final Expression replaceChildren(List<Expression> newChildren) {, +        throw new UnsupportedOperationException("this type of node doesn't have any children to replace");, +    }, +, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/BinaryExpression.java, +import java.util.List;, +    @Override, +    public final BinaryExpression replaceChildren(List<Expression> newChildren) {, +        if (newChildren.size() != 2) {, +            throw new IllegalArgumentException("expected [2] children but received [" + newChildren.size() + "]");, +        }, +        return replaceChildren(newChildren.get(0), newChildren.get(1));, +    }, +    protected abstract BinaryExpression replaceChildren(Expression newLeft, Expression newRight);, +, +++ b/sql/server/build.gradle, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/Scroller.java, +                        return new AggValueInput(a.location(), a.expression(), action, a.innerKey());, +                    return new HitExtractorInput(l.location(), l.expression(), he);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Alias.java]