[+++ b/docs/reference/search/aggregations.asciidoc, +The `aggregations` object (the key `aggs` can also be used) in the json holds the aggregations to be computed. Each aggregation, +++ b/docs/reference/search/aggregations.asciidoc, +The `aggregations` object (the key `aggs` can also be used) in the json holds the aggregations to be computed. Each aggregation, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +to use the normal `histogram` on dates as well, though accuracy will be compromised. The reason for this is in the fact, +we need a special support for time based data. From a functionality perspective, this histogram supports the same features, +as the normal <<search-aggregations-bucket-histogram-aggregation,histogram>>. The main difference is that the interval can be specified by date/time expressions., +Requesting bucket intervals of a month., +fractional values are allowed, for example 1.5 hours:, +                "interval" : "1.5h", +++ b/docs/reference/search/aggregations.asciidoc, +The `aggregations` object (the key `aggs` can also be used) in the json holds the aggregations to be computed. Each aggregation, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +to use the normal `histogram` on dates as well, though accuracy will be compromised. The reason for this is in the fact, +we need a special support for time based data. From a functionality perspective, this histogram supports the same features, +as the normal <<search-aggregations-bucket-histogram-aggregation,histogram>>. The main difference is that the interval can be specified by date/time expressions., +Requesting bucket intervals of a month., +fractional values are allowed, for example 1.5 hours:, +                "interval" : "1.5h", +++ b/docs/reference/search/aggregations/bucket/histogram-aggregation.asciidoc, +A multi-bucket values source based aggregation that can be applied on numeric values extracted from the documents. It dynamically builds fixed size (a.k.a. interval) buckets over the values. For example, if the documents have a field that holds a price (numeric), we can configure this aggregation to dynamically build buckets with interval `5` (in case of price it may represent $5). When the aggregation executes, the price field of every document will be evaluated and will be rounded down to its closest bucket - for example, if the price is `32` and the bucket size is `5` then the rounding will yield `30` and thus the document will "fall" into the bucket that is associated withe the key `30`. To make this more formal, here is the rounding function that is used:, +The response above shows that none of the aggregated products has a price that falls within the range of `[100 - 150)`. By default, the response will only contain the non-empty buckets, though it is possible to also return those, by setting the `empty_buckets` flag to `true`:, +By default, the buckets are returned as an ordered array. It is also possible to request the response as a hash instead keyed by the buckets keys:, +++ b/docs/reference/search/aggregations.asciidoc, +The `aggregations` object (the key `aggs` can also be used) in the json holds the aggregations to be computed. Each aggregation, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +to use the normal `histogram` on dates as well, though accuracy will be compromised. The reason for this is in the fact, +we need a special support for time based data. From a functionality perspective, this histogram supports the same features, +as the normal <<search-aggregations-bucket-histogram-aggregation,histogram>>. The main difference is that the interval can be specified by date/time expressions., +Requesting bucket intervals of a month., +fractional values are allowed, for example 1.5 hours:, +                "interval" : "1.5h", +++ b/docs/reference/search/aggregations/bucket/histogram-aggregation.asciidoc, +A multi-bucket values source based aggregation that can be applied on numeric values extracted from the documents. It dynamically builds fixed size (a.k.a. interval) buckets over the values. For example, if the documents have a field that holds a price (numeric), we can configure this aggregation to dynamically build buckets with interval `5` (in case of price it may represent $5). When the aggregation executes, the price field of every document will be evaluated and will be rounded down to its closest bucket - for example, if the price is `32` and the bucket size is `5` then the rounding will yield `30` and thus the document will "fall" into the bucket that is associated withe the key `30`. To make this more formal, here is the rounding function that is used:, +The response above shows that none of the aggregated products has a price that falls within the range of `[100 - 150)`. By default, the response will only contain the non-empty buckets, though it is possible to also return those, by setting the `empty_buckets` flag to `true`:, +By default, the buckets are returned as an ordered array. It is also possible to request the response as a hash instead keyed by the buckets keys:, +++ b/docs/reference/search/aggregations/bucket/missing-aggregation.asciidoc, +A field data based single bucket aggregation, that creates a bucket of all documents in the current document set context that are missing a field value (effectively, missing a field or having the configured NULL value set). This aggregator will often be used in conjunction with other field data bucket aggregators (such as ranges) to return information for all the documents that could not be placed in any of the other buckets due to missing field data values., +++ b/docs/reference/search/aggregations.asciidoc, +The `aggregations` object (the key `aggs` can also be used) in the json holds the aggregations to be computed. Each aggregation, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +to use the normal `histogram` on dates as well, though accuracy will be compromised. The reason for this is in the fact, +we need a special support for time based data. From a functionality perspective, this histogram supports the same features, +as the normal <<search-aggregations-bucket-histogram-aggregation,histogram>>. The main difference is that the interval can be specified by date/time expressions., +Requesting bucket intervals of a month., +fractional values are allowed, for example 1.5 hours:, +                "interval" : "1.5h", +++ b/docs/reference/search/aggregations/bucket/histogram-aggregation.asciidoc, +A multi-bucket values source based aggregation that can be applied on numeric values extracted from the documents. It dynamically builds fixed size (a.k.a. interval) buckets over the values. For example, if the documents have a field that holds a price (numeric), we can configure this aggregation to dynamically build buckets with interval `5` (in case of price it may represent $5). When the aggregation executes, the price field of every document will be evaluated and will be rounded down to its closest bucket - for example, if the price is `32` and the bucket size is `5` then the rounding will yield `30` and thus the document will "fall" into the bucket that is associated withe the key `30`. To make this more formal, here is the rounding function that is used:, +The response above shows that none of the aggregated products has a price that falls within the range of `[100 - 150)`. By default, the response will only contain the non-empty buckets, though it is possible to also return those, by setting the `empty_buckets` flag to `true`:, +By default, the buckets are returned as an ordered array. It is also possible to request the response as a hash instead keyed by the buckets keys:, +++ b/docs/reference/search/aggregations/bucket/missing-aggregation.asciidoc, +A field data based single bucket aggregation, that creates a bucket of all documents in the current document set context that are missing a field value (effectively, missing a field or having the configured NULL value set). This aggregator will often be used in conjunction with other field data bucket aggregators (such as ranges) to return information for all the documents that could not be placed in any of the other buckets due to missing field data values., +++ b/docs/reference/search/aggregations/metrics/avg-aggregation.asciidoc, +The name of the aggregation (`avg_grade` above) also serves as the key by which the aggregation result can be retrieved from the returned response., +It turned out that the exam was way above the level of the students and a grade correction needs to be applied. We can use value script to get the new average:, +++ b/docs/reference/search/aggregations.asciidoc, +The `aggregations` object (the key `aggs` can also be used) in the json holds the aggregations to be computed. Each aggregation, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +to use the normal `histogram` on dates as well, though accuracy will be compromised. The reason for this is in the fact, +we need a special support for time based data. From a functionality perspective, this histogram supports the same features, +as the normal <<search-aggregations-bucket-histogram-aggregation,histogram>>. The main difference is that the interval can be specified by date/time expressions., +Requesting bucket intervals of a month., +fractional values are allowed, for example 1.5 hours:, +                "interval" : "1.5h", +++ b/docs/reference/search/aggregations/bucket/histogram-aggregation.asciidoc, +A multi-bucket values source based aggregation that can be applied on numeric values extracted from the documents. It dynamically builds fixed size (a.k.a. interval) buckets over the values. For example, if the documents have a field that holds a price (numeric), we can configure this aggregation to dynamically build buckets with interval `5` (in case of price it may represent $5). When the aggregation executes, the price field of every document will be evaluated and will be rounded down to its closest bucket - for example, if the price is `32` and the bucket size is `5` then the rounding will yield `30` and thus the document will "fall" into the bucket that is associated withe the key `30`. To make this more formal, here is the rounding function that is used:, +The response above shows that none of the aggregated products has a price that falls within the range of `[100 - 150)`. By default, the response will only contain the non-empty buckets, though it is possible to also return those, by setting the `empty_buckets` flag to `true`:, +By default, the buckets are returned as an ordered array. It is also possible to request the response as a hash instead keyed by the buckets keys:, +++ b/docs/reference/search/aggregations/bucket/missing-aggregation.asciidoc, +A field data based single bucket aggregation, that creates a bucket of all documents in the current document set context that are missing a field value (effectively, missing a field or having the configured NULL value set). This aggregator will often be used in conjunction with other field data bucket aggregators (such as ranges) to return information for all the documents that could not be placed in any of the other buckets due to missing field data values., +++ b/docs/reference/search/aggregations/metrics/avg-aggregation.asciidoc, +The name of the aggregation (`avg_grade` above) also serves as the key by which the aggregation result can be retrieved from the returned response., +It turned out that the exam was way above the level of the students and a grade correction needs to be applied. We can use value script to get the new average:, +++ b/docs/reference/search/aggregations/metrics/extendedstats-aggregation.asciidoc, +The `extended_stats` aggregations is an extended version of the <<search-aggregations-metrics-stats-aggregation,`stats`>> aggregation, where additional metrics are added such as `sum_of_squares`, `variance` and `std_deviation`., +It turned out that the exam was way above the level of the students and a grade correction needs to be applied. We can use value script to get the new stats:, +++ b/docs/reference/search/aggregations.asciidoc, +The `aggregations` object (the key `aggs` can also be used) in the json holds the aggregations to be computed. Each aggregation, +++ b/docs/reference/search/aggregations/bucket/datehistogram-aggregation.asciidoc, +to use the normal `histogram` on dates as well, though accuracy will be compromised. The reason for this is in the fact, +we need a special support for time based data. From a functionality perspective, this histogram supports the same features, +as the normal <<search-aggregations-bucket-histogram-aggregation,histogram>>. The main difference is that the interval can be specified by date/time expressions., +Requesting bucket intervals of a month., +fractional values are allowed, for example 1.5 hours:, +                "interval" : "1.5h", +++ b/docs/reference/search/aggregations/bucket/histogram-aggregation.asciidoc, +A multi-bucket values source based aggregation that can be applied on numeric values extracted from the documents. It dynamically builds fixed size (a.k.a. interval) buckets over the values. For example, if the documents have a field that holds a price (numeric), we can configure this aggregation to dynamically build buckets with interval `5` (in case of price it may represent $5). When the aggregation executes, the price field of every document will be evaluated and will be rounded down to its closest bucket - for example, if the price is `32` and the bucket size is `5` then the rounding will yield `30` and thus the document will "fall" into the bucket that is associated withe the key `30`. To make this more formal, here is the rounding function that is used:, +The response above shows that none of the aggregated products has a price that falls within the range of `[100 - 150)`. By default, the response will only contain the non-empty buckets, though it is possible to also return those, by setting the `empty_buckets` flag to `true`:, +By default, the buckets are returned as an ordered array. It is also possible to request the response as a hash instead keyed by the buckets keys:, +++ b/docs/reference/search/aggregations/bucket/missing-aggregation.asciidoc, +A field data based single bucket aggregation, that creates a bucket of all documents in the current document set context that are missing a field value (effectively, missing a field or having the configured NULL value set). This aggregator will often be used in conjunction with other field data bucket aggregators (such as ranges) to return information for all the documents that could not be placed in any of the other buckets due to missing field data values., +++ b/docs/reference/search/aggregations/metrics/avg-aggregation.asciidoc, +The name of the aggregation (`avg_grade` above) also serves as the key by which the aggregation result can be retrieved from the returned response., +It turned out that the exam was way above the level of the students and a grade correction needs to be applied. We can use value script to get the new average:, +++ b/docs/reference/search/aggregations/metrics/extendedstats-aggregation.asciidoc, +The `extended_stats` aggregations is an extended version of the <<search-aggregations-metrics-stats-aggregation,`stats`>> aggregation, where additional metrics are added such as `sum_of_squares`, `variance` and `std_deviation`., +It turned out that the exam was way above the level of the students and a grade correction needs to be applied. We can use value script to get the new stats:, +++ b/docs/reference/search/aggregations/metrics/max-aggregation.asciidoc]