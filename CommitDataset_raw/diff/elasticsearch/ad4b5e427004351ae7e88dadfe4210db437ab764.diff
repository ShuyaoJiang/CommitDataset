[+++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final Map<Setting<?>, SettingUpgrader<?>> settingUpgraders;, +                        settingUpgraders.stream().collect(Collectors.toMap(SettingUpgrader::getSetting, Function.identity())));, +, +            final SettingUpgrader<?> upgrader = settingUpgraders.get(setting);, +                if (setting.isListSetting()) {, +                    final List<String> value = settings.getAsList(key);, +                    final String upgradedKey = upgrader.getKey(key);, +                    final List<String> upgradedValue = upgrader.getListValue(value);, +                    builder.putList(upgradedKey, upgradedValue);, +                } else {, +                    final String value = settings.get(key);, +                    final String upgradedKey = upgrader.getKey(key);, +                    final String upgradedValue = upgrader.getValue(value);, +                    builder.put(upgradedKey, upgradedValue);, +                }, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final Map<Setting<?>, SettingUpgrader<?>> settingUpgraders;, +                        settingUpgraders.stream().collect(Collectors.toMap(SettingUpgrader::getSetting, Function.identity())));, +, +            final SettingUpgrader<?> upgrader = settingUpgraders.get(setting);, +                if (setting.isListSetting()) {, +                    final List<String> value = settings.getAsList(key);, +                    final String upgradedKey = upgrader.getKey(key);, +                    final List<String> upgradedValue = upgrader.getListValue(value);, +                    builder.putList(upgradedKey, upgradedValue);, +                } else {, +                    final String value = settings.get(key);, +                    final String upgradedKey = upgrader.getKey(key);, +                    final String upgradedValue = upgrader.getValue(value);, +                    builder.put(upgradedKey, upgradedValue);, +                }, +++ b/server/src/main/java/org/elasticsearch/common/settings/SettingUpgrader.java, +import java.util.List;, +, +    default List<String> getListValue(final List<String> value) {, +        return value;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final Map<Setting<?>, SettingUpgrader<?>> settingUpgraders;, +                        settingUpgraders.stream().collect(Collectors.toMap(SettingUpgrader::getSetting, Function.identity())));, +, +            final SettingUpgrader<?> upgrader = settingUpgraders.get(setting);, +                if (setting.isListSetting()) {, +                    final List<String> value = settings.getAsList(key);, +                    final String upgradedKey = upgrader.getKey(key);, +                    final List<String> upgradedValue = upgrader.getListValue(value);, +                    builder.putList(upgradedKey, upgradedValue);, +                } else {, +                    final String value = settings.get(key);, +                    final String upgradedKey = upgrader.getKey(key);, +                    final String upgradedValue = upgrader.getValue(value);, +                    builder.put(upgradedKey, upgradedValue);, +                }, +++ b/server/src/main/java/org/elasticsearch/common/settings/SettingUpgrader.java, +import java.util.List;, +, +    default List<String> getListValue(final List<String> value) {, +        return value;, +    }, +, +++ b/server/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +import java.util.stream.Collectors;, +    public void testUpgradeListSetting() {, +        final Setting<List<String>> oldSetting =, +                Setting.listSetting("foo.old", Collections.emptyList(), Function.identity(), Property.NodeScope);, +        final Setting<List<String>> newSetting =, +                Setting.listSetting("foo.new", Collections.emptyList(), Function.identity(), Property.NodeScope);, +, +        final AbstractScopedSettings service =, +                new ClusterSettings(, +                        Settings.EMPTY,, +                        new HashSet<>(Arrays.asList(oldSetting, newSetting)),, +                        Collections.singleton(new SettingUpgrader<List<String>>() {, +, +                            @Override, +                            public Setting<List<String>> getSetting() {, +                                return oldSetting;, +                            }, +, +                            @Override, +                            public String getKey(final String key) {, +                                return "foo.new";, +                            }, +, +                            @Override, +                            public List<String> getListValue(final List<String> value) {, +                                return value.stream().map(s -> "new." + s).collect(Collectors.toList());, +                            }, +                        }));, +, +        final int length = randomIntBetween(0, 16);, +        final List<String> values = length == 0 ? Collections.emptyList() : new ArrayList<>(length);, +        for (int i = 0; i < length; i++) {, +            values.add(randomAlphaOfLength(8));, +        }, +, +        final Settings settings = Settings.builder().putList("foo.old", values).build();, +        final Settings upgradedSettings = service.upgradeSettings(settings);]