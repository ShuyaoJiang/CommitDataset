[+++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +        } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +        } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.apache.lucene.store.LockObtainFailedException;, +import org.apache.lucene.util.IOUtils;, +                } catch (Throwable e) {, +                    IOUtils.closeWhileHandlingException(indexWriter);, +            } catch (Throwable e) {, +            } catch (Throwable e) {, +                        IOUtils.closeWhileHandlingException(current); // ignore, +                    } catch (Throwable e) {, +                        } catch (Throwable e) {, +                    } catch (Throwable e) {, +            } catch (Throwable e) {, +        } catch (Throwable e) {, +            } catch (Throwable e) {, +        } catch (Throwable e) {, +        } catch (Throwable e) {, +        } catch (Throwable e) {, +        } catch (Throwable e) {, +        } catch (Throwable e) {, +        } catch (Throwable e) {, +            IOUtils.closeWhileHandlingException(searcherManager);, +        } catch (Throwable e) {, +            /* We set this timeout to a highish value to work around, +             * the default poll interval in the Lucene lock that is , +             * 1000ms by default. We might need to poll multiple times, +             * here but with 1s poll this is only executed twice at most, +             * in combination with the default writelock timeout*/, +            config.setWriteLockTimeout(5000);, +            return new IndexWriter(store.directory(), config);, +        } catch (LockObtainFailedException ex) {, +            boolean isLocked = IndexWriter.isLocked(store.directory());, +            logger.warn("Could not lock IndexWriter isLocked [{}]", ex, isLocked);, +            throw ex;, +                } catch (Throwable e) {, +                        IOUtils.closeWhileHandlingException(newSearcher.getIndexReader()); // ignore]