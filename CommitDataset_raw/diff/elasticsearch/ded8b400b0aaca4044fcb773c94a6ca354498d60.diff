[+++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            assert totalBytes >= 0      ;, +, +                        // Must pull this again because it may have changed since we first checked:, +                        totalBytes = bytesWrittenSinceCheck.get();, +                        if (totalBytes > indexingBuffer.bytes()/30) {, +                        }, +, +                    // Must get it again since other threads could have increased it while we were in runUnlocked, +                    totalBytes = bytesWrittenSinceCheck.get();, +                    // Another thread beat us to it: let them do all the work, yay!, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            assert totalBytes >= 0      ;, +, +                        // Must pull this again because it may have changed since we first checked:, +                        totalBytes = bytesWrittenSinceCheck.get();, +                        if (totalBytes > indexingBuffer.bytes()/30) {, +                        }, +, +                    // Must get it again since other threads could have increased it while we were in runUnlocked, +                    totalBytes = bytesWrittenSinceCheck.get();, +                    // Another thread beat us to it: let them do all the work, yay!, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        indexingMemoryController = new IndexingMemoryController(settings, threadPool, Iterables.flatten(this));, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            assert totalBytes >= 0      ;, +, +                        // Must pull this again because it may have changed since we first checked:, +                        totalBytes = bytesWrittenSinceCheck.get();, +                        if (totalBytes > indexingBuffer.bytes()/30) {, +                        }, +, +                    // Must get it again since other threads could have increased it while we were in runUnlocked, +                    totalBytes = bytesWrittenSinceCheck.get();, +                    // Another thread beat us to it: let them do all the work, yay!, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        indexingMemoryController = new IndexingMemoryController(settings, threadPool, Iterables.flatten(this));, +++ b/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java, +import org.elasticsearch.test.ESTestCase;, +, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            assert totalBytes >= 0      ;, +, +                        // Must pull this again because it may have changed since we first checked:, +                        totalBytes = bytesWrittenSinceCheck.get();, +                        if (totalBytes > indexingBuffer.bytes()/30) {, +                        }, +, +                    // Must get it again since other threads could have increased it while we were in runUnlocked, +                    totalBytes = bytesWrittenSinceCheck.get();, +                    // Another thread beat us to it: let them do all the work, yay!, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        indexingMemoryController = new IndexingMemoryController(settings, threadPool, Iterables.flatten(this));, +++ b/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java, +import org.elasticsearch.test.ESTestCase;, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    , +    public final static String CLASS_NAME      = BASE_CLASS_NAME + "$Script";, +    public final static Type CLASS_TYPE        = Type.getObjectType(CLASS_NAME.replace('.', '/'));, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            assert totalBytes >= 0      ;, +, +                        // Must pull this again because it may have changed since we first checked:, +                        totalBytes = bytesWrittenSinceCheck.get();, +                        if (totalBytes > indexingBuffer.bytes()/30) {, +                        }, +, +                    // Must get it again since other threads could have increased it while we were in runUnlocked, +                    totalBytes = bytesWrittenSinceCheck.get();, +                    // Another thread beat us to it: let them do all the work, yay!, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        indexingMemoryController = new IndexingMemoryController(settings, threadPool, Iterables.flatten(this));, +++ b/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java, +import org.elasticsearch.test.ESTestCase;, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    , +    public final static String CLASS_NAME      = BASE_CLASS_NAME + "$Script";, +    public final static Type CLASS_TYPE        = Type.getObjectType(CLASS_NAME.replace('.', '/'));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/LDefArray.java, +        adapter.visitInvokeDynamicInsn("arrayLoad", desc, DEF_BOOTSTRAP_HANDLE, DefBootstrap.ARRAY_LOAD);, +        adapter.visitInvokeDynamicInsn("arrayStore", desc, DEF_BOOTSTRAP_HANDLE, DefBootstrap.ARRAY_STORE);, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +            assert totalBytes >= 0      ;, +, +                        // Must pull this again because it may have changed since we first checked:, +                        totalBytes = bytesWrittenSinceCheck.get();, +                        if (totalBytes > indexingBuffer.bytes()/30) {, +                        }, +, +                    // Must get it again since other threads could have increased it while we were in runUnlocked, +                    totalBytes = bytesWrittenSinceCheck.get();]