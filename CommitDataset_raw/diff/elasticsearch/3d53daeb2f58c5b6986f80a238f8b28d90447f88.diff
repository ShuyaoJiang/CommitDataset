[+++ b/docs/reference/migration/migrate_7_0/indices.asciidoc, +, +==== `network.breaker.inflight_requests.overhead` increased to 2, +, +Previously the in flight requests circuit breaker considered only the raw byte representation., +By bumping the value of `network.breaker.inflight_requests.overhead` from 1 to 2, this circuit, +breaker considers now also the memory overhead of representing the request as a structured object., +++ b/docs/reference/migration/migrate_7_0/indices.asciidoc, +, +==== `network.breaker.inflight_requests.overhead` increased to 2, +, +Previously the in flight requests circuit breaker considered only the raw byte representation., +By bumping the value of `network.breaker.inflight_requests.overhead` from 1 to 2, this circuit, +breaker considers now also the memory overhead of representing the request as a structured object., +++ b/docs/reference/modules/indices/circuit_breaker.asciidoc, +memory on a node. The memory usage is based on the content length of the request itself. This, +circuit breaker also considers that memory is not only needed for representing the raw request but, +also as a structured object which is reflected by default overhead., +    final estimation. Defaults to 2., +++ b/docs/reference/migration/migrate_7_0/indices.asciidoc, +, +==== `network.breaker.inflight_requests.overhead` increased to 2, +, +Previously the in flight requests circuit breaker considered only the raw byte representation., +By bumping the value of `network.breaker.inflight_requests.overhead` from 1 to 2, this circuit, +breaker considers now also the memory overhead of representing the request as a structured object., +++ b/docs/reference/modules/indices/circuit_breaker.asciidoc, +memory on a node. The memory usage is based on the content length of the request itself. This, +circuit breaker also considers that memory is not only needed for representing the raw request but, +also as a structured object which is reflected by default overhead., +    final estimation. Defaults to 2., +++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +        Setting.doubleSetting("network.breaker.inflight_requests.overhead", 2.0d, 0.0d, Property.Dynamic, Property.NodeScope);, +++ b/docs/reference/migration/migrate_7_0/indices.asciidoc, +, +==== `network.breaker.inflight_requests.overhead` increased to 2, +, +Previously the in flight requests circuit breaker considered only the raw byte representation., +By bumping the value of `network.breaker.inflight_requests.overhead` from 1 to 2, this circuit, +breaker considers now also the memory overhead of representing the request as a structured object., +++ b/docs/reference/modules/indices/circuit_breaker.asciidoc, +memory on a node. The memory usage is based on the content length of the request itself. This, +circuit breaker also considers that memory is not only needed for representing the raw request but, +also as a structured object which is reflected by default overhead., +    final estimation. Defaults to 2., +++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +        Setting.doubleSetting("network.breaker.inflight_requests.overhead", 2.0d, 0.0d, Property.Dynamic, Property.NodeScope);, +++ b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java, +        String content = randomAlphaOfLength((int) Math.round(contentLength / inFlightRequestsBreaker.getOverhead()));, +        String content = randomAlphaOfLength((int) Math.round(contentLength / inFlightRequestsBreaker.getOverhead()));, +        String content = randomAlphaOfLength((int) Math.round(contentLength / inFlightRequestsBreaker.getOverhead()));, +        String content = randomAlphaOfLength((int) Math.round(contentLength / inFlightRequestsBreaker.getOverhead()));, +        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));, +        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));, +        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));, +        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));]