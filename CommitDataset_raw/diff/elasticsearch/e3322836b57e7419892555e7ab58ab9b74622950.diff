[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +        if (component.getName().startsWith("org.elasticsearch")) {, +        // not starting with org.elasticsearch, just remove the first package part (probably org/net/com), +        return getComponentSettings(component.getName().substring(0, component.getName().indexOf('.')), component);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +        if (component.getName().startsWith("org.elasticsearch")) {, +        // not starting with org.elasticsearch, just remove the first package part (probably org/net/com), +        return getComponentSettings(component.getName().substring(0, component.getName().indexOf('.')), component);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/Settings.java, +     * FQN of the class is used, without the <tt>org.elasticsearch<tt> prefix. If there is no <tt>org.elasticsearch</tt>, +     * prefix, then the prefix used is the first part of the package name (<tt>org</tt> / <tt>com</tt> / ...), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +        if (component.getName().startsWith("org.elasticsearch")) {, +        // not starting with org.elasticsearch, just remove the first package part (probably org/net/com), +        return getComponentSettings(component.getName().substring(0, component.getName().indexOf('.')), component);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/Settings.java, +     * FQN of the class is used, without the <tt>org.elasticsearch<tt> prefix. If there is no <tt>org.elasticsearch</tt>, +     * prefix, then the prefix used is the first part of the package name (<tt>org</tt> / <tt>com</tt> / ...), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/AbstractIndexComponent.java, +    /**, +     * Constructs a new index component, with the index name and its settings., +     *, +     * @param index         The index name, +     * @param indexSettings The index settings, +     */, +    /**, +     * Constructs a new index component, with the index name and its settings, as well as settings prefix., +     *, +     * @param index          The index name, +     * @param indexSettings  The index settings, +     * @param prefixSettings A settings prefix (like "com.mycompany") to simplify extracting the component settings, +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +        if (component.getName().startsWith("org.elasticsearch")) {, +        // not starting with org.elasticsearch, just remove the first package part (probably org/net/com), +        return getComponentSettings(component.getName().substring(0, component.getName().indexOf('.')), component);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/Settings.java, +     * FQN of the class is used, without the <tt>org.elasticsearch<tt> prefix. If there is no <tt>org.elasticsearch</tt>, +     * prefix, then the prefix used is the first part of the package name (<tt>org</tt> / <tt>com</tt> / ...), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/AbstractIndexComponent.java, +    /**, +     * Constructs a new index component, with the index name and its settings., +     *, +     * @param index         The index name, +     * @param indexSettings The index settings, +     */, +    /**, +     * Constructs a new index component, with the index name and its settings, as well as settings prefix., +     *, +     * @param index          The index name, +     * @param indexSettings  The index settings, +     * @param prefixSettings A settings prefix (like "com.mycompany") to simplify extracting the component settings, +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AbstractIndexAnalyzerProvider.java, +    /**, +     * Constructs a new analyzer component, with the index name and its settings and the analyzer name., +     *, +     * @param index         The index name, +     * @param indexSettings The index settings, +     * @param name          The analyzer name, +     */, +    /**, +     * Constructs a new analyzer component, with the index name and its settings and the analyzer name., +     *, +     * @param index          The index name, +     * @param indexSettings  The index settings, +     * @param prefixSettings A settings prefix (like "com.mycompany") to simplify extracting the component settings, +     * @param name           The analyzer name, +     */, +    public AbstractIndexAnalyzerProvider(Index index, @IndexSettings Settings indexSettings, String prefixSettings, String name) {, +        super(index, indexSettings, prefixSettings);, +        this.name = name;, +    }, +]