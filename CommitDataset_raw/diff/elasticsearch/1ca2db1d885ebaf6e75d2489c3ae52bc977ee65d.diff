[+++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private final XPackLicenseState licenseState;, +    public GraphFeatureSet(Settings settings, @Nullable XPackLicenseState licenseState, NamedWriteableRegistry namedWriteableRegistry) {, +        this.licenseState = licenseState;, +        return licenseState != null && licenseState.isGraphAllowed();, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private final XPackLicenseState licenseState;, +    public GraphFeatureSet(Settings settings, @Nullable XPackLicenseState licenseState, NamedWriteableRegistry namedWriteableRegistry) {, +        this.licenseState = licenseState;, +        return licenseState != null && licenseState.isGraphAllowed();, +++ /dev/null, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private final XPackLicenseState licenseState;, +    public GraphFeatureSet(Settings settings, @Nullable XPackLicenseState licenseState, NamedWriteableRegistry namedWriteableRegistry) {, +        this.licenseState = licenseState;, +        return licenseState != null && licenseState.isGraphAllowed();, +++ /dev/null, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/action/TransportGraphExploreAction.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +import org.elasticsearch.xpack.graph.Graph;, +    protected final XPackLicenseState licenseState;, +            XPackLicenseState licenseState) {, +        this.licenseState = licenseState;, +        if (licenseState.isGraphAllowed()) {, +            listener.onFailure(LicenseUtils.newComplianceException(Graph.NAME));, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private final XPackLicenseState licenseState;, +    public GraphFeatureSet(Settings settings, @Nullable XPackLicenseState licenseState, NamedWriteableRegistry namedWriteableRegistry) {, +        this.licenseState = licenseState;, +        return licenseState != null && licenseState.isGraphAllowed();, +++ /dev/null, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/action/TransportGraphExploreAction.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +import org.elasticsearch.xpack.graph.Graph;, +    protected final XPackLicenseState licenseState;, +            XPackLicenseState licenseState) {, +        this.licenseState = licenseState;, +        if (licenseState.isGraphAllowed()) {, +            listener.onFailure(LicenseUtils.newComplianceException(Graph.NAME));, +++ b/elasticsearch/x-pack/graph/src/test/java/org/elasticsearch/xpack/graph/GraphFeatureSetTests.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private XPackLicenseState licenseState;, +        licenseState = mock(XPackLicenseState.class);, +        new GraphFeatureSet(Settings.EMPTY, licenseState, namedWriteableRegistry);, +        GraphFeatureSet featureSet = new GraphFeatureSet(Settings.EMPTY, licenseState, namedWriteableRegistry);, +        when(licenseState.isGraphAllowed()).thenReturn(available);, +        GraphFeatureSet featureSet = new GraphFeatureSet(settings.build(), licenseState, namedWriteableRegistry);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private final XPackLicenseState licenseState;, +    public GraphFeatureSet(Settings settings, @Nullable XPackLicenseState licenseState, NamedWriteableRegistry namedWriteableRegistry) {, +        this.licenseState = licenseState;, +        return licenseState != null && licenseState.isGraphAllowed();, +++ /dev/null, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/action/TransportGraphExploreAction.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +import org.elasticsearch.xpack.graph.Graph;, +    protected final XPackLicenseState licenseState;, +            XPackLicenseState licenseState) {, +        this.licenseState = licenseState;, +        if (licenseState.isGraphAllowed()) {, +            listener.onFailure(LicenseUtils.newComplianceException(Graph.NAME));, +++ b/elasticsearch/x-pack/graph/src/test/java/org/elasticsearch/xpack/graph/GraphFeatureSetTests.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private XPackLicenseState licenseState;, +        licenseState = mock(XPackLicenseState.class);, +        new GraphFeatureSet(Settings.EMPTY, licenseState, namedWriteableRegistry);, +        GraphFeatureSet featureSet = new GraphFeatureSet(Settings.EMPTY, licenseState, namedWriteableRegistry);, +        when(licenseState.isGraphAllowed()).thenReturn(available);, +        GraphFeatureSet featureSet = new GraphFeatureSet(settings.build(), licenseState, namedWriteableRegistry);, +++ /dev/null, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private final XPackLicenseState licenseState;, +    public GraphFeatureSet(Settings settings, @Nullable XPackLicenseState licenseState, NamedWriteableRegistry namedWriteableRegistry) {, +        this.licenseState = licenseState;, +        return licenseState != null && licenseState.isGraphAllowed();, +++ /dev/null, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/action/TransportGraphExploreAction.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +import org.elasticsearch.xpack.graph.Graph;, +    protected final XPackLicenseState licenseState;, +            XPackLicenseState licenseState) {, +        this.licenseState = licenseState;, +        if (licenseState.isGraphAllowed()) {, +            listener.onFailure(LicenseUtils.newComplianceException(Graph.NAME));, +++ b/elasticsearch/x-pack/graph/src/test/java/org/elasticsearch/xpack/graph/GraphFeatureSetTests.java, +import org.elasticsearch.license.plugin.core.XPackLicenseState;, +    private XPackLicenseState licenseState;]