[+++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +import org.elasticsearch.common.Strings;, +public abstract class AbstractQueryBuilder<QB extends AbstractQueryBuilder<QB>> implements QueryBuilder {, +, +        Query result;, +    static Object convertToBytesRefIfString(Object obj) {, +    static Object convertToStringIfBytesRef(Object obj) {, +    static Collection<Query> toQueries(Collection<QueryBuilder> queryBuilders, QueryShardContext context) throws QueryShardException,, +    static void writeQueries(StreamOutput out, List<? extends QueryBuilder> queries) throws IOException {, +    static List<QueryBuilder> readQueries(StreamInput in) throws IOException {, +    static void declareStandardFields(AbstractObjectParser<? extends QueryBuilder, ?> parser) {, +        parser.declareFloat(QueryBuilder::boost, AbstractQueryBuilder.BOOST_FIELD);, +        parser.declareString(QueryBuilder::queryName, AbstractQueryBuilder.NAME_FIELD);, +    }, +, +    @Override, +    public final String toString() {, +        return Strings.toString(this, true, true);, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +import org.elasticsearch.common.Strings;, +public abstract class AbstractQueryBuilder<QB extends AbstractQueryBuilder<QB>> implements QueryBuilder {, +, +        Query result;, +    static Object convertToBytesRefIfString(Object obj) {, +    static Object convertToStringIfBytesRef(Object obj) {, +    static Collection<Query> toQueries(Collection<QueryBuilder> queryBuilders, QueryShardContext context) throws QueryShardException,, +    static void writeQueries(StreamOutput out, List<? extends QueryBuilder> queries) throws IOException {, +    static List<QueryBuilder> readQueries(StreamInput in) throws IOException {, +    static void declareStandardFields(AbstractObjectParser<? extends QueryBuilder, ?> parser) {, +        parser.declareFloat(QueryBuilder::boost, AbstractQueryBuilder.BOOST_FIELD);, +        parser.declareString(QueryBuilder::queryName, AbstractQueryBuilder.NAME_FIELD);, +    }, +, +    @Override, +    public final String toString() {, +        return Strings.toString(this, true, true);, +++ b/core/src/test/java/org/elasticsearch/index/query/WrapperQueryBuilderTests.java, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.io.UncheckedIOException;, +        BytesReference bytes;, +        try {, +            bytes = XContentHelper.toXContent(wrappedQuery, XContentType.JSON, false);, +        } catch(IOException e) {, +            throw new UncheckedIOException(e);, +        }, +, +, +                return new WrapperQueryBuilder(BytesReference.toBytes(bytes));, +                return new WrapperQueryBuilder(bytes);, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +import org.elasticsearch.common.Strings;, +public abstract class AbstractQueryBuilder<QB extends AbstractQueryBuilder<QB>> implements QueryBuilder {, +, +        Query result;, +    static Object convertToBytesRefIfString(Object obj) {, +    static Object convertToStringIfBytesRef(Object obj) {, +    static Collection<Query> toQueries(Collection<QueryBuilder> queryBuilders, QueryShardContext context) throws QueryShardException,, +    static void writeQueries(StreamOutput out, List<? extends QueryBuilder> queries) throws IOException {, +    static List<QueryBuilder> readQueries(StreamInput in) throws IOException {, +    static void declareStandardFields(AbstractObjectParser<? extends QueryBuilder, ?> parser) {, +        parser.declareFloat(QueryBuilder::boost, AbstractQueryBuilder.BOOST_FIELD);, +        parser.declareString(QueryBuilder::queryName, AbstractQueryBuilder.NAME_FIELD);, +    }, +, +    @Override, +    public final String toString() {, +        return Strings.toString(this, true, true);, +++ b/core/src/test/java/org/elasticsearch/index/query/WrapperQueryBuilderTests.java, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.io.UncheckedIOException;, +        BytesReference bytes;, +        try {, +            bytes = XContentHelper.toXContent(wrappedQuery, XContentType.JSON, false);, +        } catch(IOException e) {, +            throw new UncheckedIOException(e);, +        }, +, +, +                return new WrapperQueryBuilder(BytesReference.toBytes(bytes));, +                return new WrapperQueryBuilder(bytes);, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +import org.elasticsearch.common.xcontent.XContentHelper;, +            scale = randomTimeValue(1, 1000, "d", "h", "ms", "s", "m");, +        for (XContentType xContentType : XContentType.values()) {, +            BytesReference bytes = XContentHelper.toXContent(queryBuilder, xContentType, false);, +            try (XContentParser parser = createParser(xContentType.xContent(), bytes)) {, +        for (XContentType xContentType : XContentType.values()) {, +            BytesReference bytes = XContentHelper.toXContent(queryBuilder, xContentType, false);, +            try (XContentParser parser = createParser(xContentType.xContent(), bytes)) {, +        FunctionScoreQueryBuilder expectedParsed = (FunctionScoreQueryBuilder) parseQuery(expected);, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +import org.elasticsearch.common.Strings;, +public abstract class AbstractQueryBuilder<QB extends AbstractQueryBuilder<QB>> implements QueryBuilder {, +, +        Query result;, +    static Object convertToBytesRefIfString(Object obj) {, +    static Object convertToStringIfBytesRef(Object obj) {, +    static Collection<Query> toQueries(Collection<QueryBuilder> queryBuilders, QueryShardContext context) throws QueryShardException,]