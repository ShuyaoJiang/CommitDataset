[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.apache.http.HttpEntity;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.client.ml.PostDataRequest;, +import org.elasticsearch.common.bytes.BytesReference;, +import static org.elasticsearch.client.RequestConverters.createContentType;, +    static Request postData(PostDataRequest postDataRequest) throws IOException {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("ml"), +            .addPathPartAsIs("anomaly_detectors"), +            .addPathPart(postDataRequest.getJobId()), +            .addPathPartAsIs("_data"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        if (postDataRequest.getResetStart() != null) {, +            params.putParam(PostDataRequest.RESET_START.getPreferredName(), postDataRequest.getResetStart());, +        }, +        if (postDataRequest.getResetEnd() != null) {, +            params.putParam(PostDataRequest.RESET_END.getPreferredName(), postDataRequest.getResetEnd());, +        }, +        BytesReference content = postDataRequest.getContent();, +        if (content != null) {, +            BytesRef source = postDataRequest.getContent().toBytesRef();, +            HttpEntity byteEntity = new ByteArrayEntity(source.bytes,, +                source.offset,, +                source.length,, +                createContentType(postDataRequest.getXContentType()));, +            request.setEntity(byteEntity);, +        }, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.apache.http.HttpEntity;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.client.ml.PostDataRequest;, +import org.elasticsearch.common.bytes.BytesReference;, +import static org.elasticsearch.client.RequestConverters.createContentType;, +    static Request postData(PostDataRequest postDataRequest) throws IOException {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("ml"), +            .addPathPartAsIs("anomaly_detectors"), +            .addPathPart(postDataRequest.getJobId()), +            .addPathPartAsIs("_data"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        if (postDataRequest.getResetStart() != null) {, +            params.putParam(PostDataRequest.RESET_START.getPreferredName(), postDataRequest.getResetStart());, +        }, +        if (postDataRequest.getResetEnd() != null) {, +            params.putParam(PostDataRequest.RESET_END.getPreferredName(), postDataRequest.getResetEnd());, +        }, +        BytesReference content = postDataRequest.getContent();, +        if (content != null) {, +            BytesRef source = postDataRequest.getContent().toBytesRef();, +            HttpEntity byteEntity = new ByteArrayEntity(source.bytes,, +                source.offset,, +                source.length,, +                createContentType(postDataRequest.getXContentType()));, +            request.setEntity(byteEntity);, +        }, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.PostDataRequest;, +import org.elasticsearch.client.ml.PostDataResponse;, +     * Sends data to an anomaly detection job for analysis., +     *, +     * NOTE: The job must have a state of open to receive and process the data., +     *, +     * <p>, +     *     For additional info, +     *     see <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-post-data.html">ML POST Data documentation</a>, +     * </p>, +     *, +     * @param request PostDataRequest containing the data to post and some additional options, +     * @param options  Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return response containing operational progress about the job, +     * @throws IOException when there is a serialization issue sending the request or receiving the response, +     */, +    public PostDataResponse postData(PostDataRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request,, +            MLRequestConverters::postData,, +            options,, +            PostDataResponse::fromXContent,, +            Collections.emptySet());, +    }, +, +    /**, +     * Sends data to an anomaly detection job for analysis, asynchronously, +     *]