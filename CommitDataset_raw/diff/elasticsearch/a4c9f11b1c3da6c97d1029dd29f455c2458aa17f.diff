[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +    private String scope;, +, +    public NestedQueryBuilder scope(String scope) {, +        this.scope = scope;, +        return this;, +    }, +, +        if (scope != null) {, +            builder.field("_scope", scope);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +    private String scope;, +, +    public NestedQueryBuilder scope(String scope) {, +        this.scope = scope;, +        return this;, +    }, +, +        if (scope != null) {, +            builder.field("_scope", scope);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +import org.elasticsearch.search.internal.SearchContext;, +        String scope = null;, +                } else if ("_scope".equals(currentFieldName)) {, +                    scope = parser.text();, +, +        if (scope != null) {, +            SearchContext.current().addNestedQuery(scope, joinQuery);, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +    private String scope;, +, +    public NestedQueryBuilder scope(String scope) {, +        this.scope = scope;, +        return this;, +    }, +, +        if (scope != null) {, +            builder.field("_scope", scope);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +import org.elasticsearch.search.internal.SearchContext;, +        String scope = null;, +                } else if ("_scope".equals(currentFieldName)) {, +                    scope = parser.text();, +, +        if (scope != null) {, +            SearchContext.current().addNestedQuery(scope, joinQuery);, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/search/nested/BlockJoinQuery.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.common.lucene.search.NoopCollector;, +// LUCENE MONITOR: Track CHANGE, +    private Collector childCollector = NoopCollector.NOOP_COLLECTOR;, +, +    public BlockJoinQuery setCollector(Collector collector) {, +        this.childCollector = collector;, +        return this;, +    }, +, +        return new BlockJoinWeight(this, childQuery.createWeight(searcher), parentsFilter, scoreMode, childCollector);, +        private final Collector childCollector;, +        public BlockJoinWeight(Query joinQuery, Weight childWeight, Filter parentsFilter, ScoreMode scoreMode, Collector childCollector) {, +            this.childCollector = childCollector;, +            // CHANGE:, +            if (childCollector != null) {, +                childCollector.setNextReader(reader, 0);, +                childCollector.setScorer(childScorer);, +            }, +, +            return new BlockJoinScorer(this, childScorer, (OpenBitSet) parents, firstChildDoc, scoreMode, childCollector);, +        private final Collector childCollector;, +        public BlockJoinScorer(Weight weight, Scorer childScorer, OpenBitSet parentBits, int firstChildDoc, ScoreMode scoreMode, Collector childCollector) {, +            this.childCollector = childCollector;, +, +                // CHANGE:, +                childCollector.collect(nextChildDoc);, +, +                    scoreMode).setCollector(childCollector);, +                scoreMode).setCollector(childCollector);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +    private String scope;, +, +    public NestedQueryBuilder scope(String scope) {, +        this.scope = scope;, +        return this;, +    }, +, +        if (scope != null) {, +            builder.field("_scope", scope);, +        }]