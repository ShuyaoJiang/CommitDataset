[+++ b/test/fixtures/krb5kdc-fixture/src/main/resources/provision/addprinc.sh, +  echo 'Usage: addprinc.sh principalName [password]', +  echo '  principalName    user principal name without realm', +  echo '  password         If provided then will set password for user else it will provision user with keytab', +PASSWD="$2", +if [ -f $USER_KTAB ] && [ -z "$PASSWD" ]; then, +  sudo cp $USER_KTAB $KEYTAB_DIR/$USER.keytab, +  if [ -z "$PASSWD" ]; then, +  else, +    echo "Provisioning '${PRINC}@${REALM}' principal with password...", +    sudo kadmin -p $ADMIN_PRIN -kt $ADMIN_KTAB -q "addprinc -pw $PASSWD $PRINC", +  fi, +fi, +++ b/test/fixtures/krb5kdc-fixture/src/main/resources/provision/addprinc.sh, +  echo 'Usage: addprinc.sh principalName [password]', +  echo '  principalName    user principal name without realm', +  echo '  password         If provided then will set password for user else it will provision user with keytab', +PASSWD="$2", +if [ -f $USER_KTAB ] && [ -z "$PASSWD" ]; then, +  sudo cp $USER_KTAB $KEYTAB_DIR/$USER.keytab, +  if [ -z "$PASSWD" ]; then, +  else, +    echo "Provisioning '${PRINC}@${REALM}' principal with password...", +    sudo kadmin -p $ADMIN_PRIN -kt $ADMIN_KTAB -q "addprinc -pw $PASSWD $PRINC", +  fi, +fi, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/DefaultAuthenticationFailureHandler.java, +import org.elasticsearch.xpack.core.XPackField;, +, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, + * The default implementation of a {@link AuthenticationFailureHandler}. This, + * handler will return an exception with a RestStatus of 401 and default failure, + * response headers like 'WWW-Authenticate', +    private final Map<String, List<String>> defaultFailureResponseHeaders;, +, +    /**, +     * Constructs default authentication failure handler, +     *, +     * @deprecated replaced by {@link #DefaultAuthenticationFailureHandler(Map)}, +     */, +    @Deprecated, +    public DefaultAuthenticationFailureHandler() {, +        this(null);, +    }, +, +    /**, +     * Constructs default authentication failure handler with provided default, +     * response headers., +     *, +     * @param failureResponseHeaders Map of header key and list of header values to, +     *            be sent as failure response., +     * @see Realm#getAuthenticationFailureHeaders(), +     */, +    public DefaultAuthenticationFailureHandler(Map<String, List<String>> failureResponseHeaders) {, +        if (failureResponseHeaders == null || failureResponseHeaders.isEmpty()) {, +            failureResponseHeaders = Collections.singletonMap("WWW-Authenticate",, +                    Collections.singletonList("Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\""));, +        }, +        this.defaultFailureResponseHeaders = Collections.unmodifiableMap(failureResponseHeaders);, +    }, +    public ElasticsearchSecurityException failedAuthentication(RestRequest request, AuthenticationToken token, ThreadContext context) {, +        return createAuthenticationError("unable to authenticate user [{}] for REST request [{}]", null, token.principal(), request.uri());, +        return createAuthenticationError("unable to authenticate user [{}] for action [{}]", null, token.principal(), action);, +        return createAuthenticationError("error attempting to authenticate request", e, (Object[]) null);, +        return createAuthenticationError("error attempting to authenticate request", e, (Object[]) null);, +        return createAuthenticationError("missing authentication token for REST request [{}]", null, request.uri());, +        return createAuthenticationError("missing authentication token for action [{}]", null, action);, +        return createAuthenticationError("action [{}] requires authentication", null, action);, +    }, +, +    /**, +     * Creates an instance of {@link ElasticsearchSecurityException} with, +     * {@link RestStatus#UNAUTHORIZED} status., +     * <p>, +     * Also adds default failure response headers as configured for this, +     * {@link DefaultAuthenticationFailureHandler}, +     * <p>, +     * It may replace existing response headers if the cause is an instance of, +     * {@link ElasticsearchSecurityException}, +     *, +     * @param message error message, +     * @param t cause, if it is an instance of, +     *            {@link ElasticsearchSecurityException} asserts status is, +     *            RestStatus.UNAUTHORIZED and adds headers to it, else it will, +     *            create a new instance of {@link ElasticsearchSecurityException}, +     * @param args error message args, +     * @return instance of {@link ElasticsearchSecurityException}, +     */, +    private ElasticsearchSecurityException createAuthenticationError(final String message, final Throwable t, final Object... args) {, +        final ElasticsearchSecurityException ese;, +        final boolean containsNegotiateWithToken;, +        if (t instanceof ElasticsearchSecurityException) {, +            assert ((ElasticsearchSecurityException) t).status() == RestStatus.UNAUTHORIZED;, +            ese = (ElasticsearchSecurityException) t;, +            if (ese.getHeader("WWW-Authenticate") != null && ese.getHeader("WWW-Authenticate").isEmpty() == false) {, +                /**, +                 * If 'WWW-Authenticate' header is present with 'Negotiate ' then do not, +                 * replace. In case of kerberos spnego mechanism, we use]