[+++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferDirectory.java, +        sizeInBytes.addAndGet(-file.sizeInBytes());, +        ByteBufferFileOutput file = new ByteBufferFileOutput(this, allocator.sizeInBytes(allocatorType));, +            sizeInBytes.addAndGet(-existing.sizeInBytes());, +        return new ByteBufferIndexOutput(this, name, allocator, allocatorType, file);, +    }, +, +    void closeOutput(String name, ByteBufferFileOutput file) {, +        // we replace the output file with a read only file, with no sync, +        files.put(name, new ByteBufferFile(file));, +++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferDirectory.java, +        sizeInBytes.addAndGet(-file.sizeInBytes());, +        ByteBufferFileOutput file = new ByteBufferFileOutput(this, allocator.sizeInBytes(allocatorType));, +            sizeInBytes.addAndGet(-existing.sizeInBytes());, +        return new ByteBufferIndexOutput(this, name, allocator, allocatorType, file);, +    }, +, +    void closeOutput(String name, ByteBufferFileOutput file) {, +        // we replace the output file with a read only file, with no sync, +        files.put(name, new ByteBufferFile(file));, +++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferFile.java, +import java.util.ArrayList;, +import java.util.List;, +    final ByteBufferDirectory dir;, +, +    final List<ByteBuffer> buffers;, +    long length;, +    volatile long lastModified = System.currentTimeMillis();, +, +    final AtomicInteger refCount;, +, +    long sizeInBytes;, +        this.buffers = new ArrayList<ByteBuffer>();, +        this.refCount = new AtomicInteger(1);, +    ByteBufferFile(ByteBufferFile file) {, +        this.dir = file.dir;, +        this.bufferSize = file.bufferSize;, +        this.buffers = file.buffers;, +        this.length = file.length;, +        this.lastModified = file.lastModified;, +        this.refCount = file.refCount;, +        this.sizeInBytes = file.sizeInBytes;, +    }, +, +    void setLastModified(long lastModified) {, +    long sizeInBytes() {, +        return sizeInBytes;, +    ByteBuffer getBuffer(int index) {, +    int numBuffers() {, +            sizeInBytes = 0;, +++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferDirectory.java, +        sizeInBytes.addAndGet(-file.sizeInBytes());, +        ByteBufferFileOutput file = new ByteBufferFileOutput(this, allocator.sizeInBytes(allocatorType));, +            sizeInBytes.addAndGet(-existing.sizeInBytes());, +        return new ByteBufferIndexOutput(this, name, allocator, allocatorType, file);, +    }, +, +    void closeOutput(String name, ByteBufferFileOutput file) {, +        // we replace the output file with a read only file, with no sync, +        files.put(name, new ByteBufferFile(file));, +++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferFile.java, +import java.util.ArrayList;, +import java.util.List;, +    final ByteBufferDirectory dir;, +, +    final List<ByteBuffer> buffers;, +    long length;, +    volatile long lastModified = System.currentTimeMillis();, +, +    final AtomicInteger refCount;, +, +    long sizeInBytes;, +        this.buffers = new ArrayList<ByteBuffer>();, +        this.refCount = new AtomicInteger(1);, +    ByteBufferFile(ByteBufferFile file) {, +        this.dir = file.dir;, +        this.bufferSize = file.bufferSize;, +        this.buffers = file.buffers;, +        this.length = file.length;, +        this.lastModified = file.lastModified;, +        this.refCount = file.refCount;, +        this.sizeInBytes = file.sizeInBytes;, +    }, +, +    void setLastModified(long lastModified) {, +    long sizeInBytes() {, +        return sizeInBytes;, +    ByteBuffer getBuffer(int index) {, +    int numBuffers() {, +            sizeInBytes = 0;, +++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferFileOutput.java, +package org.apache.lucene.store.bytebuffer;, +, +/**, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements.  See the NOTICE file distributed with, + * this work for additional information regarding copyright ownership., + * The ASF licenses this file to You under the Apache License, Version 2.0, + * (the "License"); you may not use this file except in compliance with, + * the License.  You may obtain a copy of the License at]