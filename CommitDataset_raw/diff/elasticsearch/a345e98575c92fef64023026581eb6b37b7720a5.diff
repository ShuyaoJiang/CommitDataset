[+++ b/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.indices.IndexClosedException;, +            } catch (IndexMissingException|IndexClosedException e) {, +                // ignore these failures, we will notify the search response if its really the case from the actual action, +++ b/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.indices.IndexClosedException;, +            } catch (IndexMissingException|IndexClosedException e) {, +                // ignore these failures, we will notify the search response if its really the case from the actual action, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            return concreteIndices(aliasesOrIndices[0], indicesOptions.allowNoIndices(), indicesOptions);, +            String[] indices = concreteIndices(aliasOrIndex, indicesOptions.ignoreUnavailable(), indicesOptions);, +    private String[] concreteIndices(String aliasOrIndex, boolean allowNoIndices, IndicesOptions options) throws IndexMissingException, ElasticsearchIllegalArgumentException {, +        boolean failClosed = options.forbidClosedIndices() && !options.ignoreUnavailable();, +, +            if (indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +                if (failClosed) {, +                    return options.forbidClosedIndices() ? Strings.EMPTY_ARRAY : new String[]{aliasOrIndex};, +                }, +            } else {, +        if (indices.length > 1 && !options.allowAliasesToMultipleIndices()) {, +        if (indexMetaData != null && indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +            if (failClosed) {, +            } else {, +                if (options.forbidClosedIndices()) {, +                    return Strings.EMPTY_ARRAY;, +                }, +            }, +++ b/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.indices.IndexClosedException;, +            } catch (IndexMissingException|IndexClosedException e) {, +                // ignore these failures, we will notify the search response if its really the case from the actual action, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            return concreteIndices(aliasesOrIndices[0], indicesOptions.allowNoIndices(), indicesOptions);, +            String[] indices = concreteIndices(aliasOrIndex, indicesOptions.ignoreUnavailable(), indicesOptions);, +    private String[] concreteIndices(String aliasOrIndex, boolean allowNoIndices, IndicesOptions options) throws IndexMissingException, ElasticsearchIllegalArgumentException {, +        boolean failClosed = options.forbidClosedIndices() && !options.ignoreUnavailable();, +, +            if (indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +                if (failClosed) {, +                    return options.forbidClosedIndices() ? Strings.EMPTY_ARRAY : new String[]{aliasOrIndex};, +                }, +            } else {, +        if (indices.length > 1 && !options.allowAliasesToMultipleIndices()) {, +        if (indexMetaData != null && indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +            if (failClosed) {, +            } else {, +                if (options.forbidClosedIndices()) {, +                    return Strings.EMPTY_ARRAY;, +                }, +            }, +++ b/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationTests.java, +    public void testSpecifiedIndexUnavailable_multipleIndices() throws Exception {, +    public void testSpecifiedIndexUnavailable_singleIndexThatIsClosed() throws Exception {, +        assertAcked(prepareCreate("test1"));, +        ensureYellow();, +, +        assertAcked(client().admin().indices().prepareClose("test1"));, +, +        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();, +        verify(search("test1").setIndicesOptions(options), true);, +        verify(msearch(options, "test1"), true);, +        verify(count("test1").setIndicesOptions(options), true);, +        verify(clearCache("test1").setIndicesOptions(options), true);, +        verify(_flush("test1").setIndicesOptions(options),true);, +        verify(segments("test1").setIndicesOptions(options), true);, +        verify(stats("test1").setIndicesOptions(options), true);, +        verify(optimize("test1").setIndicesOptions(options), true);, +        verify(refresh("test1").setIndicesOptions(options), true);, +        verify(validateQuery("test1").setIndicesOptions(options), true);, +        verify(aliasExists("test1").setIndicesOptions(options), true);, +        verify(typesExists("test1").setIndicesOptions(options), true);, +        verify(deleteByQuery("test1").setIndicesOptions(options), true);, +        verify(percolate("test1").setIndicesOptions(options), true);, +        verify(mpercolate(options, "test1").setIndicesOptions(options), true);, +        verify(suggest("test1").setIndicesOptions(options), true);, +        verify(getAliases("test1").setIndicesOptions(options), true);, +        verify(getFieldMapping("test1").setIndicesOptions(options), true);, +        verify(getMapping("test1").setIndicesOptions(options), true);, +        verify(getWarmer("test1").setIndicesOptions(options), true);, +        verify(getSettings("test1").setIndicesOptions(options), true);, +, +        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(), options.expandWildcardsClosed(), options);, +        verify(search("test1").setIndicesOptions(options), false);, +        verify(msearch(options, "test1"), false);, +        verify(count("test1").setIndicesOptions(options), false);, +        verify(clearCache("test1").setIndicesOptions(options), false);, +        verify(_flush("test1").setIndicesOptions(options),false);, +        verify(segments("test1").setIndicesOptions(options), false);, +        verify(stats("test1").setIndicesOptions(options), false);, +        verify(optimize("test1").setIndicesOptions(options), false);, +        verify(refresh("test1").setIndicesOptions(options), false);, +        verify(validateQuery("test1").setIndicesOptions(options), false);, +        verify(aliasExists("test1").setIndicesOptions(options), false);, +        verify(typesExists("test1").setIndicesOptions(options), false);, +        verify(deleteByQuery("test1").setIndicesOptions(options), false);, +        verify(percolate("test1").setIndicesOptions(options), false);, +        verify(mpercolate(options, "test1").setIndicesOptions(options), false);, +        verify(suggest("test1").setIndicesOptions(options), false);, +        verify(getAliases("test1").setIndicesOptions(options), false);, +        verify(getFieldMapping("test1").setIndicesOptions(options), false);]