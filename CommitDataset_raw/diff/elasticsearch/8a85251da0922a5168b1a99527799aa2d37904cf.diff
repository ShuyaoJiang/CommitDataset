[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +    public void checkRemoteClusterLicenseAndFetchLeaderIndexMetadataAndHistoryUUIDs(, +                client.getRemoteClusterClient(clusterAlias),, +                systemClient(client.getRemoteClusterClient(clusterAlias)),, +     * @param leaderClient               the leader client to use to execute cluster state API, +    private void checkRemoteClusterLicenseAndFetchClusterState(, +            final Client leaderClient,, +    private static Client systemClient(Client client) {, +        final ThreadContext threadContext = client.threadPool().getThreadContext();, +        return new FilterClient(client) {, +            @Override, +            protected <Request extends ActionRequest, Response extends ActionResponse>, +            void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {, +                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false);, +                try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +                    threadContext.markAsSystemContext();, +                    super.doExecute(action, request, new ContextPreservingActionListener<>(supplier, listener));, +                }, +            }, +        };, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +    public void checkRemoteClusterLicenseAndFetchLeaderIndexMetadataAndHistoryUUIDs(, +                client.getRemoteClusterClient(clusterAlias),, +                systemClient(client.getRemoteClusterClient(clusterAlias)),, +     * @param leaderClient               the leader client to use to execute cluster state API, +    private void checkRemoteClusterLicenseAndFetchClusterState(, +            final Client leaderClient,, +    private static Client systemClient(Client client) {, +        final ThreadContext threadContext = client.threadPool().getThreadContext();, +        return new FilterClient(client) {, +            @Override, +            protected <Request extends ActionRequest, Response extends ActionResponse>, +            void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {, +                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false);, +                try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +                    threadContext.markAsSystemContext();, +                    super.doExecute(action, request, new ContextPreservingActionListener<>(supplier, listener));, +                }, +            }, +        };, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +            void getLeaderClusterState(final String remoteCluster,, +                getLeaderClusterState(remoteCluster, (leaderClusterState, e) -> {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +    public void checkRemoteClusterLicenseAndFetchLeaderIndexMetadataAndHistoryUUIDs(, +                client.getRemoteClusterClient(clusterAlias),, +                systemClient(client.getRemoteClusterClient(clusterAlias)),, +     * @param leaderClient               the leader client to use to execute cluster state API, +    private void checkRemoteClusterLicenseAndFetchClusterState(, +            final Client leaderClient,, +    private static Client systemClient(Client client) {, +        final ThreadContext threadContext = client.threadPool().getThreadContext();, +        return new FilterClient(client) {, +            @Override, +            protected <Request extends ActionRequest, Response extends ActionResponse>, +            void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {, +                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false);, +                try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +                    threadContext.markAsSystemContext();, +                    super.doExecute(action, request, new ContextPreservingActionListener<>(supplier, listener));, +                }, +            }, +        };, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +            void getLeaderClusterState(final String remoteCluster,, +                getLeaderClusterState(remoteCluster, (leaderClusterState, e) -> {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +    public void checkRemoteClusterLicenseAndFetchLeaderIndexMetadataAndHistoryUUIDs(, +                client.getRemoteClusterClient(clusterAlias),, +                systemClient(client.getRemoteClusterClient(clusterAlias)),, +     * @param leaderClient               the leader client to use to execute cluster state API, +    private void checkRemoteClusterLicenseAndFetchClusterState(, +            final Client leaderClient,, +    private static Client systemClient(Client client) {, +        final ThreadContext threadContext = client.threadPool().getThreadContext();, +        return new FilterClient(client) {, +            @Override, +            protected <Request extends ActionRequest, Response extends ActionResponse>, +            void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {, +                final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false);, +                try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +                    threadContext.markAsSystemContext();, +                    super.doExecute(action, request, new ContextPreservingActionListener<>(supplier, listener));, +                }, +            }, +        };, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +            void getLeaderClusterState(final String remoteCluster,, +                getLeaderClusterState(remoteCluster, (leaderClusterState, e) -> {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinatorTests.java]