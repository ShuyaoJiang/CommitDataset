[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;, +, +             PainlessMethod painlessMethod =  painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, numArguments - 1);, +, +             if (painlessMethod == null) {, +                 throw new IllegalArgumentException("dynamic method " +, +                         "[" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + (numArguments - 1) + "] not found");, +             }, +, +             return painlessMethod.methodHandle;, +         PainlessMethod method = painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, arity);, +, +        if (method == null) {, +            throw new IllegalArgumentException(, +                    "dynamic method [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + arity + "] not found");, +        }, +, +        if (interfaceType == null) {, +            throw new IllegalArgumentException("type [" + interfaceClass + "] not found");, +        }, +        PainlessMethod implMethod = painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, arity);, +        if (implMethod == null) {, +            throw new IllegalArgumentException(, +                    "dynamic method [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + arity + "] not found");, +        }, +, +        MethodHandle getter = painlessLookup.lookupRuntimeGetterMethodHandle(receiverClass, name);, +        if (getter != null) {, +            return getter;, +        throw new IllegalArgumentException(, +                "dynamic getter [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "] not found");, +        MethodHandle setter = painlessLookup.lookupRuntimeSetterMethodHandle(receiverClass, name);, +        if (setter != null) {, +            return setter;, +        throw new IllegalArgumentException(, +                "dynamic getter [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "] not found");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;, +, +             PainlessMethod painlessMethod =  painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, numArguments - 1);, +, +             if (painlessMethod == null) {, +                 throw new IllegalArgumentException("dynamic method " +, +                         "[" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + (numArguments - 1) + "] not found");, +             }, +, +             return painlessMethod.methodHandle;, +         PainlessMethod method = painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, arity);, +, +        if (method == null) {, +            throw new IllegalArgumentException(, +                    "dynamic method [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + arity + "] not found");, +        }, +, +        if (interfaceType == null) {, +            throw new IllegalArgumentException("type [" + interfaceClass + "] not found");, +        }, +        PainlessMethod implMethod = painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, arity);, +        if (implMethod == null) {, +            throw new IllegalArgumentException(, +                    "dynamic method [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + arity + "] not found");, +        }, +, +        MethodHandle getter = painlessLookup.lookupRuntimeGetterMethodHandle(receiverClass, name);, +        if (getter != null) {, +            return getter;, +        throw new IllegalArgumentException(, +                "dynamic getter [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "] not found");, +        MethodHandle setter = painlessLookup.lookupRuntimeSetterMethodHandle(receiverClass, name);, +        if (setter != null) {, +            return setter;, +        throw new IllegalArgumentException(, +                "dynamic getter [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "] not found");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +, +            if (interfaceMethod == null) {, +                        "to a non-functional interface [" + targetClassName + "]");, +                PainlessConstructor painlessConstructor = painlessLookup.lookupPainlessConstructor(typeName, interfaceTypeParametersSize);, +                if (painlessConstructor == null) {, +                            "not found");, +                PainlessMethod painlessMethod =, +                        painlessLookup.lookupPainlessMethod(typeName, true, methodName, interfaceTypeParametersSize);, +                if (painlessMethod == null) {, +, +                    if (painlessMethod == null) {, +                                "not found");, +                } else if (captured) {, +                    throw new IllegalStateException("internal error");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;, +, +             PainlessMethod painlessMethod =  painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, numArguments - 1);, +, +             if (painlessMethod == null) {, +                 throw new IllegalArgumentException("dynamic method " +, +                         "[" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + (numArguments - 1) + "] not found");, +             }, +, +             return painlessMethod.methodHandle;]