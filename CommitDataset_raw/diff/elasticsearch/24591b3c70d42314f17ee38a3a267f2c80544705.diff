[+++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.elasticsearch.common.lucene.search.MatchNoDocsFilter;, +        switch (values.size()) {, +        case 0:, +            return new MatchNoDocsFilter();, +        case 1:, +            // When there is a single term, it's important to return a term filter so that, +            // it can return a DocIdSet that is directly backed by a postings list, instead, +            // of loading everything into a bit set and returning an iterator based on the, +            // bit set, +            return termFilter(values.get(0), context);, +        default:, +            , +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.elasticsearch.common.lucene.search.MatchNoDocsFilter;, +        switch (values.size()) {, +        case 0:, +            return new MatchNoDocsFilter();, +        case 1:, +            // When there is a single term, it's important to return a term filter so that, +            // it can return a DocIdSet that is directly backed by a postings list, instead, +            // of loading everything into a bit set and returning an iterator based on the, +            // bit set, +            return termFilter(values.get(0), context);, +        default:, +            , +        }, +++ b/src/test/java/org/elasticsearch/index/mapper/string/SimpleStringMappingTests.java, +, +import org.apache.lucene.index.Term;, +import org.apache.lucene.queries.TermFilter;, +import org.apache.lucene.queries.TermsFilter;, +import org.elasticsearch.common.lucene.search.Queries;, +import java.util.Collections;, +    public void testTermsFilter() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").field("index", "not_analyzed").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = parser.parse(mapping);, +        FieldMapper<?> mapper = defaultMapper.mappers().fullName("field").mapper();, +        assertNotNull(mapper);, +        assertTrue(mapper instanceof StringFieldMapper);, +        assertEquals(Queries.MATCH_NO_FILTER, mapper.termsFilter(Collections.emptyList(), null));, +        assertEquals(new TermFilter(new Term("field", "value")), mapper.termsFilter(Collections.singletonList("value"), null));, +        assertEquals(new TermsFilter(new Term("field", "value1"), new Term("field", "value2")), mapper.termsFilter(Arrays.asList("value1", "value2"), null));, +    }, +]