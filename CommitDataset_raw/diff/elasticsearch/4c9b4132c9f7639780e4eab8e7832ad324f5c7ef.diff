[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.node.hotthreads.NodeHotThreads;, +import org.elasticsearch.action.admin.cluster.node.hotthreads.NodesHotThreadsResponse;, +import org.elasticsearch.xpack.ml.action.GetDatafeedsStatsAction;, +import org.elasticsearch.xpack.ml.action.GetJobsStatsAction;, +import org.elasticsearch.xpack.ml.action.StopDatafeedAction;, +import org.elasticsearch.xpack.ml.datafeed.DatafeedConfig;, +import org.elasticsearch.xpack.ml.datafeed.DatafeedState;, +import org.elasticsearch.xpack.ml.job.config.Job;, +import org.elasticsearch.xpack.ml.job.config.JobState;, +import org.elasticsearch.xpack.ml.job.process.autodetect.state.DataCounts;, +import org.junit.After;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +, +import static org.elasticsearch.xpack.ml.support.BaseMlIntegTestCase.createDatafeed;, +import static org.elasticsearch.xpack.ml.support.BaseMlIntegTestCase.createScheduledJob;, +import static org.elasticsearch.xpack.ml.support.BaseMlIntegTestCase.getDataCounts;, +import static org.elasticsearch.xpack.ml.support.BaseMlIntegTestCase.indexDocs;, +import static org.hamcrest.Matchers.equalTo;, +, +public class DatafeedJobsIT extends MlNativeAutodetectIntegTestCase {, +, +    @After, +    public void cleanup() throws Exception {, +        cleanUp();, +    }, +, +    public void testLookbackOnly() throws Exception {, +        client().admin().indices().prepareCreate("data-1"), +                .addMapping("type", "time", "type=date"), +                .get();, +        long numDocs = randomIntBetween(32, 2048);, +        long now = System.currentTimeMillis();, +        long oneWeekAgo = now - 604800000;, +        long twoWeeksAgo = oneWeekAgo - 604800000;, +        indexDocs(logger, "data-1", numDocs, twoWeeksAgo, oneWeekAgo);, +, +        client().admin().indices().prepareCreate("data-2"), +                .addMapping("type", "time", "type=date"), +                .get();, +        ClusterHealthResponse r = client().admin().cluster().prepareHealth("data-1", "data-2").setWaitForYellowStatus().get();, +        long numDocs2 = randomIntBetween(32, 2048);, +        indexDocs(logger, "data-2", numDocs2, oneWeekAgo, now);, +, +        Job.Builder job = createScheduledJob("lookback-job");, +        registerJob(job);, +        assertTrue(putJob(job).isAcknowledged());, +        openJob(job.getId());, +        assertBusy(() -> {, +            GetJobsStatsAction.Response statsResponse =, +                    client().execute(GetJobsStatsAction.INSTANCE, new GetJobsStatsAction.Request(job.getId())).actionGet();, +            assertEquals(getJobStats(job.getId()).get(0).getState(), JobState.OPENED);, +        });, +, +        List<String> t = new ArrayList<>(2);, +        t.add("data-1");, +        t.add("data-2");, +        DatafeedConfig datafeedConfig = createDatafeed(job.getId() + "-datafeed", job.getId(), t);, +        registerDatafeed(datafeedConfig);, +        assertTrue(putDatafeed(datafeedConfig).isAcknowledged());, +, +        startDatafeed(datafeedConfig.getId(), 0L, now);, +        assertBusy(() -> {, +            DataCounts dataCounts = getDataCounts(job.getId());, +            assertThat(dataCounts.getProcessedRecordCount(), equalTo(numDocs + numDocs2));, +            assertThat(dataCounts.getOutOfOrderTimeStampCount(), equalTo(0L));, +, +            GetDatafeedsStatsAction.Request request = new GetDatafeedsStatsAction.Request(datafeedConfig.getId());, +            GetDatafeedsStatsAction.Response response = client().execute(GetDatafeedsStatsAction.INSTANCE, request).actionGet();, +            assertThat(response.getResponse().results().get(0).getDatafeedState(), equalTo(DatafeedState.STOPPED));, +        }, 60, TimeUnit.SECONDS);, +, +        waitUntilJobIsClosed(job.getId());, +    }, +, +    public void testRealtime() throws Exception {, +        client().admin().indices().prepareCreate("data"), +                .addMapping("type", "time", "type=date"), +                .get();, +        long numDocs1 = randomIntBetween(32, 2048);, +        long now = System.currentTimeMillis();, +        long lastWeek = now - 604800000;, +        indexDocs(logger, "data", numDocs1, lastWeek, now);]