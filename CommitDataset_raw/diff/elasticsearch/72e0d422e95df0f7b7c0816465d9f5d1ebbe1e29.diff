[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    /**, +     * A query that rewrites into another query using, +     * {@link JoinUtil#createJoinQuery(String, Query, Query, IndexSearcher, ScoreMode, MultiDocValues.OrdinalMap, int, int)}, +     * that executes the actual join., +     *, +     * This query is exclusively used by the {@link HasChildQueryBuilder} and {@link HasParentQueryBuilder} to get access, +     * to the {@link DirectoryReader} used by the current search in order to retrieve the {@link MultiDocValues.OrdinalMap}., +     * The {@link MultiDocValues.OrdinalMap} is required by {@link JoinUtil} to execute the join., +     */, +    // TODO: Find a way to remove this query and let doToQuery(...) just return the query from JoinUtil.createJoinQuery(...), +    public static final class LateParsingQuery extends Query {, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    /**, +     * A query that rewrites into another query using, +     * {@link JoinUtil#createJoinQuery(String, Query, Query, IndexSearcher, ScoreMode, MultiDocValues.OrdinalMap, int, int)}, +     * that executes the actual join., +     *, +     * This query is exclusively used by the {@link HasChildQueryBuilder} and {@link HasParentQueryBuilder} to get access, +     * to the {@link DirectoryReader} used by the current search in order to retrieve the {@link MultiDocValues.OrdinalMap}., +     * The {@link MultiDocValues.OrdinalMap} is required by {@link JoinUtil} to execute the join., +     */, +    // TODO: Find a way to remove this query and let doToQuery(...) just return the query from JoinUtil.createJoinQuery(...), +    public static final class LateParsingQuery extends Query {, +++ b/core/src/main/java/org/elasticsearch/search/highlight/CustomQueryScorer.java, +import org.elasticsearch.index.query.HasChildQueryBuilder;, +            if (query instanceof GeoPointInBBoxQuery) {, +                return;, +            } else if (query instanceof HasChildQueryBuilder.LateParsingQuery) {, +                // skip has_child or has_parent queries, see: https://github.com/elastic/elasticsearch/issues/14999, +                return;, +, +            super.extract(query, boost, terms);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    /**, +     * A query that rewrites into another query using, +     * {@link JoinUtil#createJoinQuery(String, Query, Query, IndexSearcher, ScoreMode, MultiDocValues.OrdinalMap, int, int)}, +     * that executes the actual join., +     *, +     * This query is exclusively used by the {@link HasChildQueryBuilder} and {@link HasParentQueryBuilder} to get access, +     * to the {@link DirectoryReader} used by the current search in order to retrieve the {@link MultiDocValues.OrdinalMap}., +     * The {@link MultiDocValues.OrdinalMap} is required by {@link JoinUtil} to execute the join., +     */, +    // TODO: Find a way to remove this query and let doToQuery(...) just return the query from JoinUtil.createJoinQuery(...), +    public static final class LateParsingQuery extends Query {, +++ b/core/src/main/java/org/elasticsearch/search/highlight/CustomQueryScorer.java, +import org.elasticsearch.index.query.HasChildQueryBuilder;, +            if (query instanceof GeoPointInBBoxQuery) {, +                return;, +            } else if (query instanceof HasChildQueryBuilder.LateParsingQuery) {, +                // skip has_child or has_parent queries, see: https://github.com/elastic/elasticsearch/issues/14999, +                return;, +, +            super.extract(query, boost, terms);, +++ b/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java, +import org.elasticsearch.index.query.BoolQueryBuilder;, +import org.elasticsearch.index.query.HasParentQueryBuilder;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.MatchQueryBuilder;, +import org.elasticsearch.search.highlight.HighlightBuilder;, +import org.elasticsearch.search.highlight.HighlightField;, +, +    public void testHighlighersIgnoreParentChild() {, +        assertAcked(prepareCreate("test"), +                .addMapping("parent-type", "searchText", "type=text,term_vector=with_positions_offsets,index_options=offsets"), +                .addMapping("child-type", "_parent", "type=parent-type", "searchText",, +                        "type=text,term_vector=with_positions_offsets,index_options=offsets"));, +        client().prepareIndex("test", "parent-type", "parent-id").setSource("searchText", "quick brown fox").get();, +        client().prepareIndex("test", "child-type", "child-id").setParent("parent-id").setSource("searchText", "quick brown fox").get();, +        refresh();, +, +        String[] highlightTypes = new String[] {"plain", "fvh", "postings"};, +        for (String highlightType : highlightTypes) {, +            logger.info("Testing with highlight type [{}]", highlightType);, +            SearchResponse searchResponse = client().prepareSearch("test"), +                    .setQuery(new BoolQueryBuilder(), +                            .must(new MatchQueryBuilder("searchText", "fox")), +                            .must(new HasChildQueryBuilder("child-type", new MatchAllQueryBuilder(), ScoreMode.None)), +                    ), +                    .highlighter(new HighlightBuilder().field(new HighlightBuilder.Field("searchText").highlighterType(highlightType))), +                    .get();, +            assertHitCount(searchResponse, 1);, +            assertThat(searchResponse.getHits().getAt(0).id(), equalTo("parent-id"));, +            HighlightField highlightField = searchResponse.getHits().getAt(0).getHighlightFields().get("searchText");, +            assertThat(highlightField.getFragments()[0].string(), equalTo("quick brown <em>fox</em>"));, +, +            searchResponse = client().prepareSearch("test"), +                    .setQuery(new BoolQueryBuilder(), +                            .must(new MatchQueryBuilder("searchText", "fox")), +                            .must(new HasParentQueryBuilder("parent-type", new MatchAllQueryBuilder(), false)), +                    ), +                    .highlighter(new HighlightBuilder().field(new HighlightBuilder.Field("searchText").highlighterType(highlightType))), +                    .get();, +            assertHitCount(searchResponse, 1);, +            assertThat(searchResponse.getHits().getAt(0).id(), equalTo("child-id"));, +            highlightField = searchResponse.getHits().getAt(0).getHighlightFields().get("searchText");]