[+++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +task clean(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['clean'], +}, +, +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +task clean(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['clean'], +}, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaHome = System.getenv('JAVA_HOME'), +            println "  JDK Version    : ${System.getProperty('java.runtime.version')} (${System.getProperty('java.vendor')})", +            println "  JAVA_HOME      : ${javaHome == null ? 'not set' : javaHome}", +            if (JavaVersion.current() < minimumJava) {, +            // find java home so eg tests can use it to set java to run with, +            project.rootProject.ext.javaHome = javaHome, +            project.rootProject.ext.buildChecksDone = true, +        }, +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +        // set java home for each project, so they dont have to find it in the root project, +        project.ext.javaHome = project.rootProject.ext.javaHome, +    /** Return the name, +     */, +    static String transitiveDepConfigName(String groupId, String artifactId, String version) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                        'Build-Date': ZonedDateTime.now(ZoneOffset.UTC)), +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +task clean(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['clean'], +}, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaHome = System.getenv('JAVA_HOME'), +            println "  JDK Version    : ${System.getProperty('java.runtime.version')} (${System.getProperty('java.vendor')})", +            println "  JAVA_HOME      : ${javaHome == null ? 'not set' : javaHome}", +            if (JavaVersion.current() < minimumJava) {, +            // find java home so eg tests can use it to set java to run with, +            project.rootProject.ext.javaHome = javaHome, +            project.rootProject.ext.buildChecksDone = true, +        }, +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +        // set java home for each project, so they dont have to find it in the root project, +        project.ext.javaHome = project.rootProject.ext.javaHome, +    /** Return the name, +     */, +    static String transitiveDepConfigName(String groupId, String artifactId, String version) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                        'Build-Date': ZonedDateTime.now(ZoneOffset.UTC)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +                configureForbiddenPatterns(project.tasks)], +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +task clean(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['clean'], +}, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaHome = System.getenv('JAVA_HOME'), +            println "  JDK Version    : ${System.getProperty('java.runtime.version')} (${System.getProperty('java.vendor')})", +            println "  JAVA_HOME      : ${javaHome == null ? 'not set' : javaHome}", +            if (JavaVersion.current() < minimumJava) {, +            // find java home so eg tests can use it to set java to run with, +            project.rootProject.ext.javaHome = javaHome, +            project.rootProject.ext.buildChecksDone = true, +        }, +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +        // set java home for each project, so they dont have to find it in the root project, +        project.ext.javaHome = project.rootProject.ext.javaHome, +    /** Return the name, +     */, +    static String transitiveDepConfigName(String groupId, String artifactId, String version) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                        'Build-Date': ZonedDateTime.now(ZoneOffset.UTC)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +                configureForbiddenPatterns(project.tasks)], +++ b/core/src/main/java/org/elasticsearch/action/ActionWriteResponse.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]