[+++ b/src/main/java/org/elasticsearch/cluster/metadata/SnapshotMetaData.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +        private final long startTime;, +        public Entry(SnapshotId snapshotId, boolean includeGlobalState, State state, ImmutableList<String> indices, long startTime, ImmutableMap<ShardId, ShardSnapshotStatus> shards) {, +            this.startTime = startTime;, +        public Entry(Entry entry, State state, ImmutableMap<ShardId, ShardSnapshotStatus> shards) {, +            this(entry.snapshotId, entry.includeGlobalState, state, entry.indices, entry.startTime, shards);, +        }, +, +        public Entry(Entry entry, ImmutableMap<ShardId, ShardSnapshotStatus> shards) {, +            this(entry, entry.state, shards);, +        }, +, +        public long startTime() {, +            return startTime;, +        }, +, +            if (startTime != entry.startTime) return false;, +            if (!waitingIndices.equals(entry.waitingIndices)) return false;, +            result = 31 * result + waitingIndices.hashCode();, +            result = 31 * result + (int) (startTime ^ (startTime >>> 32));, +                long startTime = in.readLong();, +                ImmutableMap.Builder<ShardId, ShardSnapshotStatus> builder = ImmutableMap.builder();, +                entries[i] = new Entry(snapshotId, includeGlobalState, state, indexBuilder.build(), startTime, builder.build());, +                out.writeLong(entry.startTime());, +        static final class Fields {, +            static final XContentBuilderString REPOSITORY = new XContentBuilderString("repository");, +            static final XContentBuilderString SNAPSHOTS = new XContentBuilderString("snapshots");, +            static final XContentBuilderString SNAPSHOT = new XContentBuilderString("snapshot");, +            static final XContentBuilderString INCLUDE_GLOBAL_STATE = new XContentBuilderString("include_global_state");, +            static final XContentBuilderString STATE = new XContentBuilderString("state");, +            static final XContentBuilderString INDICES = new XContentBuilderString("indices");, +            static final XContentBuilderString START_TIME_MILLIS = new XContentBuilderString("start_time_millis");, +            static final XContentBuilderString START_TIME = new XContentBuilderString("start_time");, +            static final XContentBuilderString SHARDS = new XContentBuilderString("shards");, +            static final XContentBuilderString INDEX = new XContentBuilderString("index");, +            static final XContentBuilderString SHARD = new XContentBuilderString("shard");, +            static final XContentBuilderString NODE = new XContentBuilderString("node");, +        }, +, +            builder.startArray(Fields.SNAPSHOTS);, +            builder.field(Fields.REPOSITORY, entry.snapshotId().getRepository());, +            builder.field(Fields.SNAPSHOT, entry.snapshotId().getSnapshot());, +            builder.field(Fields.INCLUDE_GLOBAL_STATE, entry.includeGlobalState());, +            builder.field(Fields.STATE, entry.state());, +            builder.startArray(Fields.INDICES);, +            builder.timeValueField(Fields.START_TIME_MILLIS, Fields.START_TIME, entry.startTime());, +            builder.startArray(Fields.SHARDS);, +                        builder.field(Fields.INDEX, shardId.getIndex());, +                        builder.field(Fields.SHARD, shardId.getId());, +                        builder.field(Fields.STATE, status.state());, +                        builder.field(Fields.NODE, status.nodeId());, +++ b/src/main/java/org/elasticsearch/cluster/metadata/SnapshotMetaData.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +        private final long startTime;, +        public Entry(SnapshotId snapshotId, boolean includeGlobalState, State state, ImmutableList<String> indices, long startTime, ImmutableMap<ShardId, ShardSnapshotStatus> shards) {, +            this.startTime = startTime;, +        public Entry(Entry entry, State state, ImmutableMap<ShardId, ShardSnapshotStatus> shards) {, +            this(entry.snapshotId, entry.includeGlobalState, state, entry.indices, entry.startTime, shards);, +        }, +, +        public Entry(Entry entry, ImmutableMap<ShardId, ShardSnapshotStatus> shards) {, +            this(entry, entry.state, shards);, +        }, +, +        public long startTime() {, +            return startTime;, +        }, +, +            if (startTime != entry.startTime) return false;, +            if (!waitingIndices.equals(entry.waitingIndices)) return false;, +            result = 31 * result + waitingIndices.hashCode();, +            result = 31 * result + (int) (startTime ^ (startTime >>> 32));, +                long startTime = in.readLong();, +                ImmutableMap.Builder<ShardId, ShardSnapshotStatus> builder = ImmutableMap.builder();, +                entries[i] = new Entry(snapshotId, includeGlobalState, state, indexBuilder.build(), startTime, builder.build());, +                out.writeLong(entry.startTime());, +        static final class Fields {, +            static final XContentBuilderString REPOSITORY = new XContentBuilderString("repository");, +            static final XContentBuilderString SNAPSHOTS = new XContentBuilderString("snapshots");, +            static final XContentBuilderString SNAPSHOT = new XContentBuilderString("snapshot");, +            static final XContentBuilderString INCLUDE_GLOBAL_STATE = new XContentBuilderString("include_global_state");, +            static final XContentBuilderString STATE = new XContentBuilderString("state");, +            static final XContentBuilderString INDICES = new XContentBuilderString("indices");, +            static final XContentBuilderString START_TIME_MILLIS = new XContentBuilderString("start_time_millis");, +            static final XContentBuilderString START_TIME = new XContentBuilderString("start_time");, +            static final XContentBuilderString SHARDS = new XContentBuilderString("shards");, +            static final XContentBuilderString INDEX = new XContentBuilderString("index");, +            static final XContentBuilderString SHARD = new XContentBuilderString("shard");, +            static final XContentBuilderString NODE = new XContentBuilderString("node");, +        }, +, +            builder.startArray(Fields.SNAPSHOTS);, +            builder.field(Fields.REPOSITORY, entry.snapshotId().getRepository());, +            builder.field(Fields.SNAPSHOT, entry.snapshotId().getSnapshot());, +            builder.field(Fields.INCLUDE_GLOBAL_STATE, entry.includeGlobalState());, +            builder.field(Fields.STATE, entry.state());, +            builder.startArray(Fields.INDICES);, +            builder.timeValueField(Fields.START_TIME_MILLIS, Fields.START_TIME, entry.startTime());, +            builder.startArray(Fields.SHARDS);]