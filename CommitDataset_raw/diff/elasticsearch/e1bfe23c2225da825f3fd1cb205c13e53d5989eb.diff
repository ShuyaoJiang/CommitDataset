[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +        return new InternalExtendedStats(name, 0, 0d, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0d, sigma, formatter, pipelineAggregators(),, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +        return new InternalExtendedStats(name, 0, 0d, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0d, sigma, formatter, pipelineAggregators(),, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/InternalExtendedStats.java, +            if (stats.sigma != sigma) {, +                throw new IllegalStateException("Cannot reduce other stats aggregations that have a different sigma");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +        return new InternalExtendedStats(name, 0, 0d, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0d, sigma, formatter, pipelineAggregators(),, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/InternalExtendedStats.java, +            if (stats.sigma != sigma) {, +                throw new IllegalStateException("Cannot reduce other stats aggregations that have a different sigma");, +            }, +++ b/docs/java-api/search.asciidoc, +        .setSearchType(SearchType.SCAN), +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +        return new InternalExtendedStats(name, 0, 0d, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0d, sigma, formatter, pipelineAggregators(),, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/InternalExtendedStats.java, +            if (stats.sigma != sigma) {, +                throw new IllegalStateException("Cannot reduce other stats aggregations that have a different sigma");, +            }, +++ b/docs/java-api/search.asciidoc, +        .setSearchType(SearchType.SCAN), +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ExtendedStatsTests.java, +    public void testPartiallyUnmapped() {, +        double sigma = randomDouble() * 5;, +        ExtendedStats s1 = client().prepareSearch("idx"), +                .addAggregation(extendedStats("stats").field("value").sigma(sigma)).get(), +                .getAggregations().get("stats");, +        ExtendedStats s2 = client().prepareSearch("idx", "idx_unmapped"), +                .addAggregation(extendedStats("stats").field("value").sigma(sigma)).get(), +                .getAggregations().get("stats");, +        assertEquals(s1.getAvg(), s2.getAvg(), 1e-10);, +        assertEquals(s1.getCount(), s2.getCount());, +        assertEquals(s1.getMin(), s2.getMin(), 0d);, +        assertEquals(s1.getMax(), s2.getMax(), 0d);, +        assertEquals(s1.getStdDeviation(), s2.getStdDeviation(), 1e-10);, +        assertEquals(s1.getSumOfSquares(), s2.getSumOfSquares(), 1e-10);, +        assertEquals(s1.getStdDeviationBound(Bounds.LOWER), s2.getStdDeviationBound(Bounds.LOWER), 1e-10);, +        assertEquals(s1.getStdDeviationBound(Bounds.UPPER), s2.getStdDeviationBound(Bounds.UPPER), 1e-10);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +        return new InternalExtendedStats(name, 0, 0d, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0d, sigma, formatter, pipelineAggregators(),, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/InternalExtendedStats.java, +            if (stats.sigma != sigma) {, +                throw new IllegalStateException("Cannot reduce other stats aggregations that have a different sigma");, +            }, +++ b/docs/java-api/search.asciidoc, +        .setSearchType(SearchType.SCAN), +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ExtendedStatsTests.java, +    public void testPartiallyUnmapped() {, +        double sigma = randomDouble() * 5;, +        ExtendedStats s1 = client().prepareSearch("idx"), +                .addAggregation(extendedStats("stats").field("value").sigma(sigma)).get(), +                .getAggregations().get("stats");, +        ExtendedStats s2 = client().prepareSearch("idx", "idx_unmapped"), +                .addAggregation(extendedStats("stats").field("value").sigma(sigma)).get(), +                .getAggregations().get("stats");, +        assertEquals(s1.getAvg(), s2.getAvg(), 1e-10);, +        assertEquals(s1.getCount(), s2.getCount());, +        assertEquals(s1.getMin(), s2.getMin(), 0d);, +        assertEquals(s1.getMax(), s2.getMax(), 0d);, +        assertEquals(s1.getStdDeviation(), s2.getStdDeviation(), 1e-10);, +        assertEquals(s1.getSumOfSquares(), s2.getSumOfSquares(), 1e-10);, +        assertEquals(s1.getStdDeviationBound(Bounds.LOWER), s2.getStdDeviationBound(Bounds.LOWER), 1e-10);, +        assertEquals(s1.getStdDeviationBound(Bounds.UPPER), s2.getStdDeviationBound(Bounds.UPPER), 1e-10);, +    }, +, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/StatsTests.java, +import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStats;, +import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStats.Bounds;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.extendedStats;, +    public void testPartiallyUnmapped() {, +        Stats s1 = client().prepareSearch("idx"), +                .addAggregation(stats("stats").field("value")).get(), +                .getAggregations().get("stats");, +        ExtendedStats s2 = client().prepareSearch("idx", "idx_unmapped"), +                .addAggregation(stats("stats").field("value")).get(), +                .getAggregations().get("stats");, +        assertEquals(s1.getAvg(), s2.getAvg(), 1e-10);, +        assertEquals(s1.getCount(), s2.getCount());, +        assertEquals(s1.getMin(), s2.getMin(), 0d);, +        assertEquals(s1.getMax(), s2.getMax(), 0d);, +    }, +]