[+++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +    public static final Validator PERCENTAGE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                if (value == null) {, +                    return "the value of " + setting + " can not be null";, +                }, +                if (!value.endsWith("%")) {, +                    return "the value [" + value + "] for " + setting + " must end with %";, +                }, +                final double asDouble = Double.parseDouble(value.substring(0, value.length() - 1));, +                if (asDouble < 0.0 || asDouble > 100.0) {, +                    return "the value [" + value + "] for " + setting + " must be a percentage between 0% and 100%";, +                }, +            } catch (NumberFormatException ex) {, +                return ex.getMessage();, +            }, +            return null;, +        }, +    };, +, +, +    public static final Validator BYTES_SIZE_OR_PERCENTAGE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            String byteSize = BYTES_SIZE.validate(setting, value);, +            if (byteSize != null) {, +                String percentage = PERCENTAGE.validate(setting, value);, +                if (percentage == null) {, +                    return null;, +                }, +                return percentage + " or be a valid bytes size value, like [16mb]";, +            }, +            return null;, +        }, +    };, +, +, +++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +    public static final Validator PERCENTAGE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                if (value == null) {, +                    return "the value of " + setting + " can not be null";, +                }, +                if (!value.endsWith("%")) {, +                    return "the value [" + value + "] for " + setting + " must end with %";, +                }, +                final double asDouble = Double.parseDouble(value.substring(0, value.length() - 1));, +                if (asDouble < 0.0 || asDouble > 100.0) {, +                    return "the value [" + value + "] for " + setting + " must be a percentage between 0% and 100%";, +                }, +            } catch (NumberFormatException ex) {, +                return ex.getMessage();, +            }, +            return null;, +        }, +    };, +, +, +    public static final Validator BYTES_SIZE_OR_PERCENTAGE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            String byteSize = BYTES_SIZE.validate(setting, value);, +            if (byteSize != null) {, +                String percentage = PERCENTAGE.validate(setting, value);, +                if (percentage == null) {, +                    return null;, +                }, +                return percentage + " or be a valid bytes size value, like [16mb]";, +            }, +            return null;, +        }, +    };, +, +, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    private volatile ByteSizeValue versionMapSize;, +    private volatile String versionMapSizeSetting;, +    /**, +     * Index setting to enable / disable checksum checks on merge, +     * This setting is realtime updateable., +     */, +    public static final String INDEX_CHECKSUM_ON_MERGE = "index.checksum_on_merge";, +, +    /**, +     * The maximum size the version map should grow to before issuing a refresh. Can be an absolute value or a percentage of, +     * the current index memory buffer (defaults to 25%), +     */, +    public static final String INDEX_VERSION_MAP_SIZE = "index.version_map_size";, +, +    public static final String DEFAULT_VERSION_MAP_SIZE = "25%";, +, +        versionMapSizeSetting = indexSettings.get(INDEX_VERSION_MAP_SIZE, DEFAULT_VERSION_MAP_SIZE);, +        updateVersionMapSize();, +    }, +, +    /** updates {@link #versionMapSize} based on current setting and {@link #indexingBufferSize} */]