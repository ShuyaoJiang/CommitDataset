[+++ b/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +        hasher = Hasher.resolve(config.settings().get(CACHE_HASH_ALGO_SETTING, null), Hasher.BCRYPT4);, +++ b/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +        hasher = Hasher.resolve(config.settings().get(CACHE_HASH_ALGO_SETTING, null), Hasher.BCRYPT4);, +++ b/src/main/java/org/elasticsearch/shield/authc/support/Hasher.java, +    BCRYPT4() {, +        @Override, +        public char[] hash(SecuredString text) {, +            String salt = org.elasticsearch.shield.authc.support.BCrypt.gensalt(4);, +            return BCrypt.hashpw(text, salt).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(BCRYPT_PREFIX)) {, +                return false;, +            }, +            return BCrypt.checkpw(text, hashStr);, +        }, +    },, +, +    BCRYPT6() {, +        @Override, +        public char[] hash(SecuredString text) {, +            String salt = org.elasticsearch.shield.authc.support.BCrypt.gensalt(6);, +            return BCrypt.hashpw(text, salt).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(BCRYPT_PREFIX)) {, +                return false;, +            }, +            return BCrypt.checkpw(text, hashStr);, +        }, +    },, +, +    BCRYPT8() {, +        @Override, +        public char[] hash(SecuredString text) {, +            String salt = org.elasticsearch.shield.authc.support.BCrypt.gensalt(8);, +            return BCrypt.hashpw(text, salt).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(BCRYPT_PREFIX)) {, +                return false;, +            }, +            return BCrypt.checkpw(text, hashStr);, +        }, +    },, +, +    BCRYPT9() {, +        @Override, +        public char[] hash(SecuredString text) {, +            String salt = org.elasticsearch.shield.authc.support.BCrypt.gensalt(9);, +            return BCrypt.hashpw(text, salt).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(BCRYPT_PREFIX)) {, +                return false;, +            }, +            return BCrypt.checkpw(text, hashStr);, +        }, +    },, +, +            case "bcrypt4"      : return BCRYPT4;, +            case "bcrypt6"      : return BCRYPT6;, +            case "bcrypt8"      : return BCRYPT8;, +            case "bcrypt9"      : return BCRYPT9;, +++ b/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +        hasher = Hasher.resolve(config.settings().get(CACHE_HASH_ALGO_SETTING, null), Hasher.BCRYPT4);, +++ b/src/main/java/org/elasticsearch/shield/authc/support/Hasher.java, +    BCRYPT4() {, +        @Override, +        public char[] hash(SecuredString text) {, +            String salt = org.elasticsearch.shield.authc.support.BCrypt.gensalt(4);, +            return BCrypt.hashpw(text, salt).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(BCRYPT_PREFIX)) {, +                return false;, +            }, +            return BCrypt.checkpw(text, hashStr);, +        }, +    },, +, +    BCRYPT6() {, +        @Override, +        public char[] hash(SecuredString text) {]