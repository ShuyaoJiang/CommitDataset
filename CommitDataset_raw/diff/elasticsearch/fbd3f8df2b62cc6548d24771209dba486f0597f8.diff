[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/ExtractQueryTermsService.java, +                UnsupportedQueryException uqe = null;, +                    Set<Term> temp;, +                    try {, +                        temp = extractQueryTerms(clause.getQuery());, +                    } catch (UnsupportedQueryException e) {, +                        uqe = e;, +                        continue;, +                    }, +                    if (uqe != null) {, +                        throw uqe;, +                    }, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/ExtractQueryTermsService.java, +                UnsupportedQueryException uqe = null;, +                    Set<Term> temp;, +                    try {, +                        temp = extractQueryTerms(clause.getQuery());, +                    } catch (UnsupportedQueryException e) {, +                        uqe = e;, +                        continue;, +                    }, +                    if (uqe != null) {, +                        throw uqe;, +                    }, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/ExtractQueryTermsServiceTests.java, +import static org.elasticsearch.percolator.ExtractQueryTermsService.UnsupportedQueryException;, +import static org.elasticsearch.percolator.ExtractQueryTermsService.extractQueryTerms;, +import static org.elasticsearch.percolator.ExtractQueryTermsService.createQueryTermsQuery;, +import static org.elasticsearch.percolator.ExtractQueryTermsService.selectTermListWithTheLongestShortestTerm;, +        extractQueryTerms(bq.build(), document, QUERY_TERMS_FIELD, UNKNOWN_QUERY_FIELD, QUERY_TERMS_FIELD_TYPE);, +        extractQueryTerms(query, document, QUERY_TERMS_FIELD, UNKNOWN_QUERY_FIELD, QUERY_TERMS_FIELD_TYPE);, +        List<Term> terms = new ArrayList<>(extractQueryTerms(termQuery));, +        List<Term> terms = new ArrayList<>(extractQueryTerms(termsQuery));, +        terms = new ArrayList<>(extractQueryTerms(termsQuery));, +        List<Term> terms = new ArrayList<>(extractQueryTerms(phraseQuery));, +        List<Term> terms = new ArrayList<>(extractQueryTerms(booleanQuery));, +        List<Term> terms = new ArrayList<>(extractQueryTerms(booleanQuery));, +        List<Term> terms = new ArrayList<>(extractQueryTerms(booleanQuery));, +        List<Term> terms = new ArrayList<>(extractQueryTerms(constantScoreQuery));, +        List<Term> terms = new ArrayList<>(extractQueryTerms(constantScoreQuery));, +        List<Term> terms = new ArrayList<>(extractQueryTerms(commonTermsQuery));, +        List<Term> result = new ArrayList<>(extractQueryTerms(commonTermsQuery));, +        Set<Term> terms = extractQueryTerms(spanTermQuery1);, +        Set<Term> terms = extractQueryTerms(spanNearQuery);, +        Set<Term> terms = extractQueryTerms(spanOrQuery);, +        Set<Term> terms = extractQueryTerms(spanFirstQuery);, +        Set<Term> terms = extractQueryTerms(spanNotQuery);, +        Set<Term> terms = extractQueryTerms(new MatchNoDocsQuery("sometimes there is no reason at all"));, +        terms = extractQueryTerms(bq.build());, +        terms = extractQueryTerms(bq.build());, +        UnsupportedQueryException e = expectThrows(UnsupportedQueryException.class, () -> extractQueryTerms(termRangeQuery));, +        e = expectThrows(UnsupportedQueryException.class, () -> extractQueryTerms(bq));, +, +    public void testExtractQueryMetadata_unsupportedQueryInBoolQueryWithMustClauses() {, +        TermRangeQuery unsupportedQuery = new TermRangeQuery("_field", null, null, true, false);, +, +        TermQuery termQuery1 = new TermQuery(new Term("_field", "_term"));, +        BooleanQuery.Builder builder = new BooleanQuery.Builder();, +        builder.add(termQuery1, BooleanClause.Occur.MUST);, +        builder.add(unsupportedQuery, BooleanClause.Occur.MUST);, +        BooleanQuery bq1 = builder.build();, +, +        Set<Term> terms = extractQueryTerms(bq1);, +        assertTermsEqual(terms, termQuery1.getTerm());, +, +        TermQuery termQuery2 = new TermQuery(new Term("_field", "_longer_term"));, +        builder = new BooleanQuery.Builder();, +        builder.add(termQuery1, BooleanClause.Occur.MUST);, +        builder.add(termQuery2, BooleanClause.Occur.MUST);, +        builder.add(unsupportedQuery, BooleanClause.Occur.MUST);, +        bq1 = builder.build();, +        terms = extractQueryTerms(bq1);, +        assertTermsEqual(terms, termQuery2.getTerm());, +, +        builder = new BooleanQuery.Builder();, +        builder.add(unsupportedQuery, BooleanClause.Occur.MUST);, +        builder.add(unsupportedQuery, BooleanClause.Occur.MUST);, +        BooleanQuery bq2 = builder.build();, +        UnsupportedQueryException e = expectThrows(UnsupportedQueryException.class, () -> extractQueryTerms(bq2));, +        assertThat(e.getUnsupportedQuery(), sameInstance(unsupportedQuery));, +                createQueryTermsQuery(indexReader, QUERY_TERMS_FIELD, UNKNOWN_QUERY_FIELD);, +        Set<Term> result = selectTermListWithTheLongestShortestTerm(terms1, terms2);]