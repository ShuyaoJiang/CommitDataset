[+++ b/src/test/java/org/elasticsearch/indices/mapping/SimpleDeleteMappingTests.java, +import com.google.common.base.Predicate;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +        waitForMappingOnMaster("test", "type1");, +        assertAcked(client().admin().indices().prepareDeleteMapping().setIndices("test").setType("type1"));, +        boolean applied = awaitBusy(new Predicate<Object>() {, +            @Override, +            public boolean apply(Object input) {, +                GetMappingsResponse response = client().admin().indices().prepareGetMappings("test").setTypes("type1").get();, +                ImmutableOpenMap<String, MappingMetaData> mappings = response.getMappings().get("test");, +                if (mappings == null) {, +                    return true;, +                }, +                return !mappings.containsKey("type1");, +            }, +        });, +        if (!applied) {, +            fail("failed to wait for the mapping to be removed from the master cluster state");, +        }, +, +++ b/src/test/java/org/elasticsearch/indices/mapping/SimpleDeleteMappingTests.java, +import com.google.common.base.Predicate;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +        waitForMappingOnMaster("test", "type1");, +        assertAcked(client().admin().indices().prepareDeleteMapping().setIndices("test").setType("type1"));, +        boolean applied = awaitBusy(new Predicate<Object>() {, +            @Override, +            public boolean apply(Object input) {, +                GetMappingsResponse response = client().admin().indices().prepareGetMappings("test").setTypes("type1").get();, +                ImmutableOpenMap<String, MappingMetaData> mappings = response.getMappings().get("test");, +                if (mappings == null) {, +                    return true;, +                }, +                return !mappings.containsKey("type1");, +            }, +        });, +        if (!applied) {, +            fail("failed to wait for the mapping to be removed from the master cluster state");, +        }, +, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +     * Waits for the given mapping type to exists on the master node., +     */, +    public void waitForMappingOnMaster(final String index, final String type) throws InterruptedException {, +        boolean applied = awaitBusy(new Predicate<Object>() {, +            @Override, +            public boolean apply(Object input) {, +                GetMappingsResponse response = client().admin().indices().prepareGetMappings(index).setTypes(type).get();, +                ImmutableOpenMap<String, MappingMetaData> mappings = response.getMappings().get(index);, +                if (mappings == null) {, +                    return false;, +                }, +                return mappings.containsKey(type);, +            }, +        });, +        if (!applied) {, +            fail("failed to find mappings for index " + index + ", type " + type + " on master node");, +        }, +    }, +, +    /**]