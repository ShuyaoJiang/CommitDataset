[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +                .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +                .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)), +            reindexRequest.setSourceQuery(new IdsQueryBuilder().addIds("1"));, +                .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +                .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +                .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +                .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)), +            reindexRequest.setSourceQuery(new IdsQueryBuilder().addIds("1"));, +                .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +                .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)), +++ b/docs/reference/docs/reindex.asciidoc, +You can limit the documents by adding a query to the `source`., +This will only copy tweets made by `kimchy` into `new_twitter`:, +`index` in `source` can be a list, allowing you to copy from lots , +of sources in one request. This will copy documents from the, +`twitter` and `blog` indices:, +    "index": ["twitter", "blog"], +    "index": "all_together", +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +                .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +                .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)), +            reindexRequest.setSourceQuery(new IdsQueryBuilder().addIds("1"));, +                .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +                .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)), +++ b/docs/reference/docs/reindex.asciidoc, +You can limit the documents by adding a query to the `source`., +This will only copy tweets made by `kimchy` into `new_twitter`:, +`index` in `source` can be a list, allowing you to copy from lots , +of sources in one request. This will copy documents from the, +`twitter` and `blog` indices:, +    "index": ["twitter", "blog"], +    "index": "all_together", +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Specifying types in reindex requests is deprecated.";, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestReindexAction.class));, +                deprecationLogger.deprecatedAndMaybeLog("reindex_with_types", TYPES_DEPRECATION_MESSAGE);, +        destParser.declareString((request, type) -> {, +            deprecationLogger.deprecatedAndMaybeLog("reindex_with_types", TYPES_DEPRECATION_MESSAGE);, +            request.type(type);, +        }, new ParseField("type"));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +                .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +                .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)), +            reindexRequest.setSourceQuery(new IdsQueryBuilder().addIds("1"));, +                .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +                .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo2", "bar2"), XContentType.JSON)), +++ b/docs/reference/docs/reindex.asciidoc, +You can limit the documents by adding a query to the `source`., +This will only copy tweets made by `kimchy` into `new_twitter`:, +`index` in `source` can be a list, allowing you to copy from lots , +of sources in one request. This will copy documents from the, +`twitter` and `blog` indices:, +    "index": ["twitter", "blog"], +    "index": "all_together", +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +    static final String TYPES_DEPRECATION_MESSAGE = "[types removal] Specifying types in reindex requests is deprecated.";, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestReindexAction.class));, +                deprecationLogger.deprecatedAndMaybeLog("reindex_with_types", TYPES_DEPRECATION_MESSAGE);, +        destParser.declareString((request, type) -> {, +            deprecationLogger.deprecatedAndMaybeLog("reindex_with_types", TYPES_DEPRECATION_MESSAGE);, +            request.type(type);, +        }, new ParseField("type"));, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RestReindexActionTests.java, +import org.elasticsearch.rest.RestRequest.Method;, +import org.elasticsearch.test.rest.RestActionTestCase;, +import org.junit.Before;, +import java.util.Arrays;, +public class RestReindexActionTests extends RestActionTestCase {, +, +    private RestReindexAction action;, +, +    @Before, +    public void setUpAction() {, +        action = new RestReindexAction(Settings.EMPTY, controller());, +    }, +, +, +    /**, +     * test deprecation is logged if one or more types are used in source search request inside reindex, +     */, +    public void testTypeInSource() throws IOException {, +        FakeRestRequest.Builder requestBuilder = new FakeRestRequest.Builder(xContentRegistry()), +                .withMethod(Method.POST), +                .withPath("/_reindex");, +        XContentBuilder b = JsonXContent.contentBuilder().startObject();, +        {, +            b.startObject("source");, +            {, +                b.field("type", randomFrom(Arrays.asList("\"t1\"", "[\"t1\", \"t2\"]", "\"_doc\"")));, +            }, +            b.endObject();, +        }, +        b.endObject();, +        requestBuilder.withContent(new BytesArray(BytesReference.bytes(b).toBytesRef()), XContentType.JSON);]