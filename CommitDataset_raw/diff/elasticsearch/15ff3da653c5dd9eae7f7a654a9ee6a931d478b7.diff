[+++ b/docs/reference/indices/clearcache.asciidoc, +relevant fields. Note that the provided names must refer to concrete, +fields -- objects and field aliases are not supported., +++ b/docs/reference/indices/clearcache.asciidoc, +relevant fields. Note that the provided names must refer to concrete, +fields -- objects and field aliases are not supported., +++ b/docs/reference/mapping.asciidoc, +and <<docs-reindex,reindex>> your data into that index. If you only wish, +to rename a field and not change its mappings, it may make sense to introduce, +an <<alias, `alias`>> field., +++ b/docs/reference/indices/clearcache.asciidoc, +relevant fields. Note that the provided names must refer to concrete, +fields -- objects and field aliases are not supported., +++ b/docs/reference/mapping.asciidoc, +and <<docs-reindex,reindex>> your data into that index. If you only wish, +to rename a field and not change its mappings, it may make sense to introduce, +an <<alias, `alias`>> field., +++ b/docs/reference/mapping/types.asciidoc, +<<alias>>::         Defines an alias to an existing field., +, +include::types/alias.asciidoc[], +, +++ b/docs/reference/indices/clearcache.asciidoc, +relevant fields. Note that the provided names must refer to concrete, +fields -- objects and field aliases are not supported., +++ b/docs/reference/mapping.asciidoc, +and <<docs-reindex,reindex>> your data into that index. If you only wish, +to rename a field and not change its mappings, it may make sense to introduce, +an <<alias, `alias`>> field., +++ b/docs/reference/mapping/types.asciidoc, +<<alias>>::         Defines an alias to an existing field., +, +include::types/alias.asciidoc[], +, +++ b/docs/reference/mapping/types/alias.asciidoc, +[[alias]], +=== Alias datatype, +, +An `alias` mapping defines an alternate name for a field in the  index., +The alias can be used in place of the target field in <<search, search>> requests,, +and selected other APIs like <<search-field-caps, field capabilities>>., +, +[source,js], +--------------------------------, +PUT trips, +{, +  "mappings": {, +    "_doc": {, +      "properties": {, +        "distance": {, +          "type": "long", +        },, +        "route_length_miles": {, +          "type": "alias",, +          "path": "distance" // <1>, +        },, +        "transit_mode": {, +          "type": "keyword", +        }, +      }, +    }, +  }, +}, +, +GET _search, +{, +  "query": {, +    "range" : {, +      "route_length_miles" : {, +        "gte" : 39, +      }, +    }, +  }, +}, +--------------------------------, +// CONSOLE, +, +<1> The path to the target field. Note that this must be the full path, including any parent, +objects (e.g. `object1.object2.field`)., +, +Almost all components of the search request accept field aliases. In particular, aliases can be, +used in queries, aggregations, and sort fields, as well as when requesting `docvalue_fields`,, +`stored_fields`, suggestions, and highlights. Scripts also support aliases when accessing, +field values. Please see the section on <<unsupported-apis, unsupported APIs>> for exceptions., +, +In some parts of the search request and when requesting field capabilities, field wildcard patterns can be, +provided. In these cases, the wildcard pattern will match field aliases in addition to concrete fields:, +, +[source,js], +--------------------------------, +GET trips/_field_caps?fields=route_*,transit_mode, +--------------------------------, +// CONSOLE, +// TEST[continued], +, +[[alias-targets]], +==== Alias targets, +, +There are a few restrictions on the target of an alias:, +]