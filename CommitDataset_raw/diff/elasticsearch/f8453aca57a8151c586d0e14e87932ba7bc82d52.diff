[+++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.util.Collections;, +        this.untrusted = Security.readPolicy(getClass().getResource(UNTRUSTED_RESOURCE), Collections.emptySet());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.util.Collections;, +        this.untrusted = Security.readPolicy(getClass().getResource(UNTRUSTED_RESOURCE), Collections.emptySet());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.util.Collections;, +import java.util.LinkedHashSet;, +    public static Set<URL> parseClassPath()  {, +    static Set<URL> parseClassPath(String classPath) {, +        Set<URL> urlElements = new LinkedHashSet<>(); // order is already lost, but some filesystems have it, +        for (String element : elements) {, +                URL url = PathUtils.get(element).toUri().toURL();, +                if (urlElements.add(url) == false) {, +                    throw new IllegalStateException("jar hell!" + System.lineSeparator() +, +                        "duplicate jar on classpath: " + classPath);, +                }, +        return Collections.unmodifiableSet(urlElements);, +    public static void checkJarHell(Set<URL> urls) throws URISyntaxException, IOException {, +                    throw new IllegalStateException("jar hell!" + System.lineSeparator() +, +                                                    "duplicate jar on classpath: " + path);, +                            // normalize with the os separator, remove '.class', +                            entry = entry.replace(sep, ".").substring(0,  entry.length() - ".class".length());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.util.Collections;, +        this.untrusted = Security.readPolicy(getClass().getResource(UNTRUSTED_RESOURCE), Collections.emptySet());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.util.Collections;, +import java.util.LinkedHashSet;, +    public static Set<URL> parseClassPath()  {, +    static Set<URL> parseClassPath(String classPath) {, +        Set<URL> urlElements = new LinkedHashSet<>(); // order is already lost, but some filesystems have it, +        for (String element : elements) {, +                URL url = PathUtils.get(element).toUri().toURL();, +                if (urlElements.add(url) == false) {, +                    throw new IllegalStateException("jar hell!" + System.lineSeparator() +, +                        "duplicate jar on classpath: " + classPath);, +                }, +        return Collections.unmodifiableSet(urlElements);, +    public static void checkJarHell(Set<URL> urls) throws URISyntaxException, IOException {, +                    throw new IllegalStateException("jar hell!" + System.lineSeparator() +, +                                                    "duplicate jar on classpath: " + path);, +                            // normalize with the os separator, remove '.class', +                            entry = entry.replace(sep, ".").substring(0,  entry.length() - ".class".length());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +        // collect up set of plugins and modules by listing directories., +        Set<Path> pluginsAndModules = new LinkedHashSet<>(); // order is already lost, but some filesystems have it, +                    if (pluginsAndModules.add(plugin) == false) {, +                        throw new IllegalStateException("duplicate plugin: " + plugin);, +                    }, +                for (Path module : stream) {, +                    if (pluginsAndModules.add(module) == false) {, +                        throw new IllegalStateException("duplicate module: " + module);, +                    }, +                Set<URL> codebases = new LinkedHashSet<>(); // order is already lost, but some filesystems have it, +                        URL url = jar.toRealPath().toUri().toURL();, +                        if (codebases.add(url) == false) {, +                            throw new IllegalStateException("duplicate module/plugin: " + url);, +                        }, +                Policy policy = readPolicy(policyFile.toUri().toURL(), codebases);, +     * Jar files listed in {@code codebases} location will be provided to the policy file via, +     * a system property of the short name: e.g. <code>${codebase.joda-convert-1.2.jar}</code>, +     * would map to full URL., +    static Policy readPolicy(URL policyFile, Set<URL> codebases) {, +                    if (shortName.endsWith(".jar") == false) {, +                        continue; // tests :(, +                    }, +                    String previous = System.setProperty("codebase." + shortName, url.toString());, +                    if (previous != null) {, +                        throw new IllegalStateException("codebase property already set: " + shortName + "->" + previous);, +                    }, +                    if (shortName.endsWith(".jar") == false) {, +                        continue; // tests :(, +                    }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.util.Collections;, +        this.untrusted = Security.readPolicy(getClass().getResource(UNTRUSTED_RESOURCE), Collections.emptySet());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.util.Collections;, +import java.util.LinkedHashSet;, +    public static Set<URL> parseClassPath()  {, +    static Set<URL> parseClassPath(String classPath) {, +        Set<URL> urlElements = new LinkedHashSet<>(); // order is already lost, but some filesystems have it, +        for (String element : elements) {, +                URL url = PathUtils.get(element).toUri().toURL();, +                if (urlElements.add(url) == false) {, +                    throw new IllegalStateException("jar hell!" + System.lineSeparator() +, +                        "duplicate jar on classpath: " + classPath);, +                }, +        return Collections.unmodifiableSet(urlElements);, +    public static void checkJarHell(Set<URL> urls) throws URISyntaxException, IOException {, +                    throw new IllegalStateException("jar hell!" + System.lineSeparator() +, +                                                    "duplicate jar on classpath: " + path);, +                            // normalize with the os separator, remove '.class', +                            entry = entry.replace(sep, ".").substring(0,  entry.length() - ".class".length());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import java.util.LinkedHashSet;]