[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.DocsStats;, +     * Returns the engines current document statistics, +     */, +    public DocsStats getDocStats() {, +        try (Engine.Searcher searcher = acquireSearcher("doc_stats")) {, +            IndexReader reader = searcher.reader();, +            return new DocsStats(reader.numDocs(), reader.numDeletedDocs());, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.DocsStats;, +     * Returns the engines current document statistics, +     */, +    public DocsStats getDocStats() {, +        try (Engine.Searcher searcher = acquireSearcher("doc_stats")) {, +            IndexReader reader = searcher.reader();, +            return new DocsStats(reader.numDocs(), reader.numDeletedDocs());, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.shard.DocsStats;, +, +    @Override, +    public DocsStats getDocStats() {, +        final int numDocs = indexWriter.numDocs();, +        final int maxDoc = indexWriter.maxDoc();, +        return new DocsStats(numDocs, maxDoc-numDocs);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.DocsStats;, +     * Returns the engines current document statistics, +     */, +    public DocsStats getDocStats() {, +        try (Engine.Searcher searcher = acquireSearcher("doc_stats")) {, +            IndexReader reader = searcher.reader();, +            return new DocsStats(reader.numDocs(), reader.numDeletedDocs());, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.shard.DocsStats;, +, +    @Override, +    public DocsStats getDocStats() {, +        final int numDocs = indexWriter.numDocs();, +        final int maxDoc = indexWriter.maxDoc();, +        return new DocsStats(numDocs, maxDoc-numDocs);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        readAllowed();, +        final Engine engine = getEngine();, +        return engine.getDocStats();, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.DocsStats;, +     * Returns the engines current document statistics, +     */, +    public DocsStats getDocStats() {, +        try (Engine.Searcher searcher = acquireSearcher("doc_stats")) {, +            IndexReader reader = searcher.reader();, +            return new DocsStats(reader.numDocs(), reader.numDeletedDocs());, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.shard.DocsStats;, +, +    @Override, +    public DocsStats getDocStats() {, +        final int numDocs = indexWriter.numDocs();, +        final int maxDoc = indexWriter.maxDoc();, +        return new DocsStats(numDocs, maxDoc-numDocs);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        readAllowed();, +        final Engine engine = getEngine();, +        return engine.getDocStats();, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +import org.elasticsearch.index.shard.DocsStats;, +, +    public void testDocStats() throws IOException {, +        final int numDocs = randomIntBetween(1, 10);, +        for (int i = 0; i < numDocs; i++) {, +            ParsedDocument doc = testParsedDocument(Integer.toString(i), Integer.toString(i), "test", null, -1, -1, testDocument(), new BytesArray("{}"), null);, +            Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime());, +            engine.index(firstIndexRequest);, +            assertThat(firstIndexRequest.version(), equalTo(1L));, +        }, +        DocsStats docStats = engine.getDocStats();, +        assertEquals(numDocs, docStats.getCount());, +        assertEquals(0, docStats.getDeleted());, +        engine.forceMerge(randomBoolean(), 1, false, false, false);, +, +        ParsedDocument doc = testParsedDocument(Integer.toString(0), Integer.toString(0), "test", null, -1, -1, testDocument(), new BytesArray("{}"), null);]