[+++ b/core/src/main/java/org/elasticsearch/plugins/SearchPlugin.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    default List<SuggesterSpec<?>> getSuggesters() {, +        return emptyList();, +     * Specification for a {@link Suggester}., +     */, +    class SuggesterSpec<T extends SuggestionBuilder<T>> extends SearchExtensionSpec<T, NoContextParser<T>> {, +        /**, +         * Specification of custom {@link Suggester}., +         *, +         * @param name holds the names by which this suggester might be parsed. The {@link ParseField#getPreferredName()} is special as it, +         *        is the name by under which the reader is registered. So it is the name that the query should use as its, +         *        {@link NamedWriteable#getWriteableName()} too., +         * @param reader the reader registered for this suggester's builder. Typically a reference to a constructor that takes a, +         *        {@link StreamInput}, +         * @param parser the parser the reads the query suggester from xcontent, +         */, +        public SuggesterSpec(ParseField name, Writeable.Reader<T> reader, NoContextParser<T> parser) {, +            super(name, reader, parser);, +        }, +, +        /**, +         * Specification of custom {@link Suggester}., +         *, +         * @param name the name by which this suggester might be parsed or deserialized. Make sure that the query builder returns this name, +         *        for {@link NamedWriteable#getWriteableName()}., +         * @param reader the reader registered for this suggester's builder. Typically a reference to a constructor that takes a, +         *        {@link StreamInput}, +         * @param parser the parser the reads the suggester builder from xcontent, +         */, +        public SuggesterSpec(String name, Writeable.Reader<T> reader, NoContextParser<T> parser) {, +            super(name, reader, parser);, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/plugins/SearchPlugin.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    default List<SuggesterSpec<?>> getSuggesters() {, +        return emptyList();, +     * Specification for a {@link Suggester}., +     */, +    class SuggesterSpec<T extends SuggestionBuilder<T>> extends SearchExtensionSpec<T, NoContextParser<T>> {, +        /**, +         * Specification of custom {@link Suggester}., +         *, +         * @param name holds the names by which this suggester might be parsed. The {@link ParseField#getPreferredName()} is special as it, +         *        is the name by under which the reader is registered. So it is the name that the query should use as its, +         *        {@link NamedWriteable#getWriteableName()} too., +         * @param reader the reader registered for this suggester's builder. Typically a reference to a constructor that takes a, +         *        {@link StreamInput}, +         * @param parser the parser the reads the query suggester from xcontent, +         */, +        public SuggesterSpec(ParseField name, Writeable.Reader<T> reader, NoContextParser<T> parser) {, +            super(name, reader, parser);, +        }, +, +        /**, +         * Specification of custom {@link Suggester}., +         *, +         * @param name the name by which this suggester might be parsed or deserialized. Make sure that the query builder returns this name, +         *        for {@link NamedWriteable#getWriteableName()}., +         * @param reader the reader registered for this suggester's builder. Typically a reference to a constructor that takes a, +         *        {@link StreamInput}, +         * @param parser the parser the reads the suggester builder from xcontent, +         */, +        public SuggesterSpec(String name, Writeable.Reader<T> reader, NoContextParser<T> parser) {, +            super(name, reader, parser);, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +                searchRequest.source(SearchSourceBuilder.fromXContent(queryParseContext));, +++ b/core/src/main/java/org/elasticsearch/plugins/SearchPlugin.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    default List<SuggesterSpec<?>> getSuggesters() {, +        return emptyList();, +     * Specification for a {@link Suggester}., +     */, +    class SuggesterSpec<T extends SuggestionBuilder<T>> extends SearchExtensionSpec<T, NoContextParser<T>> {, +        /**, +         * Specification of custom {@link Suggester}., +         *, +         * @param name holds the names by which this suggester might be parsed. The {@link ParseField#getPreferredName()} is special as it, +         *        is the name by under which the reader is registered. So it is the name that the query should use as its, +         *        {@link NamedWriteable#getWriteableName()} too., +         * @param reader the reader registered for this suggester's builder. Typically a reference to a constructor that takes a, +         *        {@link StreamInput}, +         * @param parser the parser the reads the query suggester from xcontent, +         */, +        public SuggesterSpec(ParseField name, Writeable.Reader<T> reader, NoContextParser<T> parser) {, +            super(name, reader, parser);, +        }, +, +        /**, +         * Specification of custom {@link Suggester}., +         *, +         * @param name the name by which this suggester might be parsed or deserialized. Make sure that the query builder returns this name, +         *        for {@link NamedWriteable#getWriteableName()}.]