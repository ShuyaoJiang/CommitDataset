[+++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +    /**, +     * An enum that represents the the results of CRUD operations, primarily used to communicate the type of, +     * operation that occurred., +     */, +    public enum Result implements Writeable {, +        CREATED(0),, +        UPDATED(1),, +        DELETED(2),, +        NOT_FOUND(3),, +        NOOP(4);, +        Result(int op) {, +        public static Result readFrom(StreamInput in) throws IOException{, +                    return CREATED;, +                    return UPDATED;, +                    return DELETED;, +                    return NOT_FOUND;, +                case 4:, +                    throw new IllegalArgumentException("Unknown result code: " + opcode);, +    protected Result result;, +    public DocWriteResponse(ShardId shardId, String type, String id, long version, Result result) {, +        this.result = result;, +    public Result getResult() {, +        return result;, +        result = Result.readFrom(in);, +        result.writeTo(out);, +            .field("result", getResult().getLowercase());, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +    /**, +     * An enum that represents the the results of CRUD operations, primarily used to communicate the type of, +     * operation that occurred., +     */, +    public enum Result implements Writeable {, +        CREATED(0),, +        UPDATED(1),, +        DELETED(2),, +        NOT_FOUND(3),, +        NOOP(4);, +        Result(int op) {, +        public static Result readFrom(StreamInput in) throws IOException{, +                    return CREATED;, +                    return UPDATED;, +                    return DELETED;, +                    return NOT_FOUND;, +                case 4:, +                    throw new IllegalArgumentException("Unknown result code: " + opcode);, +    protected Result result;, +    public DocWriteResponse(ShardId shardId, String type, String id, long version, Result result) {, +        this.result = result;, +    public Result getResult() {, +        return result;, +        result = Result.readFrom(in);, +        result.writeTo(out);, +            .field("result", getResult().getLowercase());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                switch (updateResult.result.getResponseResult()) {, +                    case CREATED:, +                    case UPDATED:, +                        UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getVersion(), indexResponse.getResult());, +                    case DELETED:, +                        updateResponse = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.getResult());, +                    default:, +                        throw new IllegalStateException("Illegal operation " + updateResult.result.getResponseResult());, +                        switch (updateResult.result.getResponseResult()) {, +                            case CREATED:, +                            case UPDATED:, +                            case DELETED:, +                            default:, +                                throw new IllegalStateException("Illegal operation " + updateResult.result.getResponseResult());, +        switch (translate.getResponseResult()) {, +            case CREATED:, +            case UPDATED:, +            case DELETED:, +                throw new IllegalStateException("Illegal update operation " + translate.getResponseResult());, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +    /**, +     * An enum that represents the the results of CRUD operations, primarily used to communicate the type of, +     * operation that occurred., +     */, +    public enum Result implements Writeable {, +        CREATED(0),, +        UPDATED(1),, +        DELETED(2),, +        NOT_FOUND(3),, +        NOOP(4);, +        Result(int op) {, +        public static Result readFrom(StreamInput in) throws IOException{, +                    return CREATED;, +                    return UPDATED;, +                    return DELETED;, +                    return NOT_FOUND;, +                case 4:, +                    throw new IllegalArgumentException("Unknown result code: " + opcode);, +    protected Result result;, +    public DocWriteResponse(ShardId shardId, String type, String id, long version, Result result) {, +        this.result = result;, +    public Result getResult() {, +        return result;, +        result = Result.readFrom(in);, +        result.writeTo(out);]