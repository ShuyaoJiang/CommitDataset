[+++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, +        executeNext(pendingExecutions == null ? null : pendingExecutions::finishAndRunNext, originalThread);, +    }, +, +    protected void executeNext(Runnable runnable, Thread originalThread) {, +            if (originalThread == Thread.currentThread()) {, +                fork(runnable);, +                runnable.run();, +            }, +        } else {, +            assert runnable == null;, +                    executePhaseOnShard(shardIt, shard,, +                        new SearchActionListener<FirstResult>(shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, +        executeNext(pendingExecutions == null ? null : pendingExecutions::finishAndRunNext, originalThread);, +    }, +, +    protected void executeNext(Runnable runnable, Thread originalThread) {, +            if (originalThread == Thread.currentThread()) {, +                fork(runnable);, +                runnable.run();, +            }, +        } else {, +            assert runnable == null;, +                    executePhaseOnShard(shardIt, shard,, +                        new SearchActionListener<FirstResult>(shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchAsyncActionTests.java, +        int numShards = 10;, +        ActionListener<SearchResponse> responseListener = ActionListener.wrap(response -> {},, +            (e) -> { throw new AssertionError("unexpected", e);});, +            numShards, randomBoolean(), primaryNode, replicaNode);, +        CountDownLatch latch = new CountDownLatch(numShards - numSkipped);, +        AtomicBoolean searchPhaseDidRun = new AtomicBoolean(false);, +                            assertTrue(searchPhaseDidRun.compareAndSet(false, true));, +, +                @Override, +                protected void executeNext(Runnable runnable, Thread originalThread) {, +                    super.executeNext(runnable, originalThread);, +                    latch.countDown();, +                }, +        assertTrue(searchPhaseDidRun.get());, +        int numShards = 10;, +        CountDownLatch latch = new CountDownLatch(numShards);, +        AtomicBoolean searchPhaseDidRun = new AtomicBoolean(false);, +        ActionListener<SearchResponse> responseListener = ActionListener.wrap(response -> {},, +            (e) -> { throw new AssertionError("unexpected", e);});, +            numShards, randomBoolean(), primaryNode, replicaNode);, +                            assertTrue(searchPhaseDidRun.compareAndSet(false, true));, +, +                @Override, +                protected void executeNext(Runnable runnable, Thread originalThread) {, +                    super.executeNext(runnable, originalThread);, +                    latch.countDown();, +                }, +        assertTrue(searchPhaseDidRun.get());, +        ActionListener<SearchResponse> responseListener = ActionListener.wrap(, +            searchResponse -> response.set((TestSearchResponse) searchResponse),, +            (e) -> { throw new AssertionError("unexpected", e);});, +        int numShards = randomIntBetween(1, 10);, +                numShards, randomBoolean(), primaryNode, replicaNode);, +        ExecutorService executor = Executors.newFixedThreadPool(randomIntBetween(1, Runtime.getRuntime().availableProcessors()));, +        final CountDownLatch latch = new CountDownLatch(numShards);, +, +            @Override, +            protected void executeNext(Runnable runnable, Thread originalThread) {, +                super.executeNext(runnable, originalThread);, +                latch.countDown();, +            }]