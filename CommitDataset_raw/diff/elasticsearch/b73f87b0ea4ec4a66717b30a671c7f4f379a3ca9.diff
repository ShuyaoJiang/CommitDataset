[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="client[/\\]rest[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]HeapBufferedAsyncResponseConsumerTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="client[/\\]rest[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]HeapBufferedAsyncResponseConsumerTests.java" checks="LineLength" />, +++ b/client/rest/src/main/java/org/elasticsearch/client/HttpAsyncResponseConsumerFactory.java, +public interface HttpAsyncResponseConsumerFactory {, +        public HeapBufferedResponseConsumerFactory(int bufferLimitBytes) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="client[/\\]rest[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]HeapBufferedAsyncResponseConsumerTests.java" checks="LineLength" />, +++ b/client/rest/src/main/java/org/elasticsearch/client/HttpAsyncResponseConsumerFactory.java, +public interface HttpAsyncResponseConsumerFactory {, +        public HeapBufferedResponseConsumerFactory(int bufferLimitBytes) {, +++ b/client/rest/src/test/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumerTests.java, +import org.apache.http.nio.protocol.HttpAsyncResponseConsumer;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Modifier;, +import static org.hamcrest.CoreMatchers.instanceOf;, +import static org.junit.Assert.assertThat;, +    public void testCanConfigureHeapBufferLimitFromOutsidePackage() throws ClassNotFoundException, NoSuchMethodException,, +            IllegalAccessException, InvocationTargetException, InstantiationException {, +        int bufferLimit = randomIntBetween(1, Integer.MAX_VALUE);, +        //we use reflection to make sure that the class can be instantiated from the outside, and the constructor is public, +        Constructor<?> constructor = HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory.class.getConstructor(Integer.TYPE);, +        assertEquals(Modifier.PUBLIC, constructor.getModifiers() & Modifier.PUBLIC);, +        Object object = constructor.newInstance(bufferLimit);, +        assertThat(object, instanceOf(HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory.class));, +        HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory consumerFactory =, +                (HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory) object;, +        HttpAsyncResponseConsumer<HttpResponse> consumer = consumerFactory.createHttpAsyncResponseConsumer();, +        assertThat(consumer, instanceOf(HeapBufferedAsyncResponseConsumer.class));, +        HeapBufferedAsyncResponseConsumer bufferedAsyncResponseConsumer = (HeapBufferedAsyncResponseConsumer) consumer;, +        assertEquals(bufferLimit, bufferedAsyncResponseConsumer.getBufferLimit());, +    }, +, +    public void testHttpAsyncResponseConsumerFactoryVisibility() throws ClassNotFoundException {, +        assertEquals(Modifier.PUBLIC, HttpAsyncResponseConsumerFactory.class.getModifiers() & Modifier.PUBLIC);, +    }, +]