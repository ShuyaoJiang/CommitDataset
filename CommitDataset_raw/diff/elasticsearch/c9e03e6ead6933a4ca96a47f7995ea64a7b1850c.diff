[+++ b/docs/reference/index-modules/allocation/filtering.asciidoc, +=== Index-level shard allocation filtering, +You can use shard allocation filters to control where {es} allocates shards of, +a particular index. These per-index filters are applied in conjunction with, +<<allocation-filtering, cluster-wide allocation filtering>> and, +<<allocation-awareness, allocation awareness>>., +Shard allocation filters can be based on custom node attributes or the built-in, +`_name`, `host_ip`, `publish_ip`, `_ip`, and `_host` attributes., +<<index-lifecycle-management, Index lifecycle management>> uses filters based, +on custom node attributes to determine how to reallocate shards when moving, +between phases., +The `cluster.routing.allocation` settings are dynamic, enabling live indices to, +be moved from one set of nodes to another. Shards are only relocated if it is, +possible to do so without breaking another routing constraint, such as never, +allocating a primary and replica shard on the same node., +For example, you could use a custom node attribute to indicate a node's, +performance characteristics and use shard allocation filtering to route shards, +for a particular index to the most appropriate class of hardware., +, +[float], +[[index-allocation-filters]], +==== Enabling index-level shard allocation filtering, +, +To filter based on a custom node attribute:, +, +. Specify the filter characteristics with a custom node attribute in each, +node's `elasticsearch.yml` configuration file. For example, if you have `small`,, +`medium`, and `big` nodes, you could add a `size` attribute to filter based, +on node size., ++, +[source,yaml], +--------------------------------------------------------, +node.attr.size: medium, +--------------------------------------------------------, ++, +You can also set custom attributes when you start a node:, ++, +--------------------------------------------------------, +`./bin/elasticsearch -Enode.attr.size=medium, +--------------------------------------------------------, +. Add a routing allocation filter to the index. The `index.routing.allocation`, +settings support three types of filters: `include`, `exclude`, and `require`., +For example, to tell {es} to allocate shards from the `test` index to either, +`big` or `medium` nodes, use `index.routing.allocation.include`:, ++, ++, +If you specify multiple filters, all conditions must be satisfied for shards to, +be relocated. For example, to move the `test` index to `big` nodes in `rack1`,, +you could specify:, ++, +[float], +[[index-allocation-settings]], +==== Index allocation filter settings, +The index allocation settings support the following built-in attributes:, +You can use wildcards when specifying attribute values, for example:, +++ b/docs/reference/index-modules/allocation/filtering.asciidoc, +=== Index-level shard allocation filtering, +You can use shard allocation filters to control where {es} allocates shards of, +a particular index. These per-index filters are applied in conjunction with, +<<allocation-filtering, cluster-wide allocation filtering>> and, +<<allocation-awareness, allocation awareness>>., +Shard allocation filters can be based on custom node attributes or the built-in, +`_name`, `host_ip`, `publish_ip`, `_ip`, and `_host` attributes., +<<index-lifecycle-management, Index lifecycle management>> uses filters based, +on custom node attributes to determine how to reallocate shards when moving, +between phases., +The `cluster.routing.allocation` settings are dynamic, enabling live indices to, +be moved from one set of nodes to another. Shards are only relocated if it is, +possible to do so without breaking another routing constraint, such as never, +allocating a primary and replica shard on the same node., +For example, you could use a custom node attribute to indicate a node's, +performance characteristics and use shard allocation filtering to route shards, +for a particular index to the most appropriate class of hardware., +, +[float], +[[index-allocation-filters]], +==== Enabling index-level shard allocation filtering, +, +To filter based on a custom node attribute:, +, +. Specify the filter characteristics with a custom node attribute in each, +node's `elasticsearch.yml` configuration file. For example, if you have `small`,, +`medium`, and `big` nodes, you could add a `size` attribute to filter based, +on node size., ++, +[source,yaml], +--------------------------------------------------------, +node.attr.size: medium, +--------------------------------------------------------, ++, +You can also set custom attributes when you start a node:, ++, +--------------------------------------------------------, +`./bin/elasticsearch -Enode.attr.size=medium, +--------------------------------------------------------, +. Add a routing allocation filter to the index. The `index.routing.allocation`, +settings support three types of filters: `include`, `exclude`, and `require`., +For example, to tell {es} to allocate shards from the `test` index to either, +`big` or `medium` nodes, use `index.routing.allocation.include`:, ++]