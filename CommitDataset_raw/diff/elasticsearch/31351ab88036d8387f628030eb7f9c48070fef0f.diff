[+++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +            Map<String, List<String>> finalHeaders = new HashMap<>(headers.size() + metadata.size());, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +            Map<String, List<String>> finalHeaders = new HashMap<>(headers.size() + metadata.size());, +++ b/server/src/main/java/org/elasticsearch/action/FailedNodeException.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Override, +    protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.field("node_id", nodeId);, +    }, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +            Map<String, List<String>> finalHeaders = new HashMap<>(headers.size() + metadata.size());, +++ b/server/src/main/java/org/elasticsearch/action/FailedNodeException.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Override, +    protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.field("node_id", nodeId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this, true, true);, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +            Map<String, List<String>> finalHeaders = new HashMap<>(headers.size() + metadata.size());, +++ b/server/src/main/java/org/elasticsearch/action/FailedNodeException.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Override, +    protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.field("node_id", nodeId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this, true, true);, +++ b/server/src/main/java/org/elasticsearch/tasks/TaskInfo.java, +        return Strings.toString(this, true, true);, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +            Map<String, List<String>> finalHeaders = new HashMap<>(headers.size() + metadata.size());, +++ b/server/src/main/java/org/elasticsearch/action/FailedNodeException.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Override, +    protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.field("node_id", nodeId);, +    }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this, true, true);, +++ b/server/src/main/java/org/elasticsearch/tasks/TaskInfo.java, +        return Strings.toString(this, true, true);, +++ b/server/src/test/java/org/elasticsearch/tasks/ListTasksResponseTests.java, +import org.elasticsearch.common.Strings;, +import java.net.ConnectException;, +import java.util.function.Predicate;, +import java.util.function.Supplier;, +import static org.hamcrest.Matchers.instanceOf;, +        assertEquals("{\n" +, +                "  \"tasks\" : [ ]\n" +, +                "}", new ListTasksResponse().toString());, +        assertEquals("{\n" +, +                "  \"tasks\" : [\n" +, +                "    {\n" +, +                "      \"node\" : \"node1\",\n" +, +                "      \"id\" : 1,\n" +, +                "      \"type\" : \"dummy-type\",\n" +, +                "      \"action\" : \"dummy-action\",\n" +, +                "      \"description\" : \"dummy-description\",\n" +, +                "      \"start_time\" : \"1970-01-01T00:00:00.000Z\",\n" +, +                "      \"start_time_in_millis\" : 0,\n" +, +                "      \"running_time\" : \"1nanos\",\n" +, +                "      \"running_time_in_nanos\" : 1,\n" +, +                "      \"cancellable\" : true,\n" +, +                "      \"parent_task_id\" : \"node1:0\",\n" +, +                "      \"headers\" : {\n" +, +                "        \"foo\" : \"bar\"\n" +, +                "      }\n" +, +                "    }\n" +, +                "  ]\n" +, +                "}", tasksResponse.toString());, +        //failures are tested separately, so we can test xcontent equivalence at least when we have no failures, +        return new ListTasksResponse(randomTasks(), Collections.emptyList(), Collections.emptyList());, +    }, +, +    private static List<TaskInfo> randomTasks() {, +        return tasks;, +    protected ListTasksResponse doParseInstance(XContentParser parser) {, +        return true;, +    }, +, +    @Override, +    protected Predicate<String> getRandomFieldsExcludeFilter() {, +        //status and headers hold arbitrary content, we can't inject random fields in them, +        return field -> field.endsWith("status") || field.endsWith("headers");, +        assertThat(newInstance.getNodeFailures().size(), equalTo(expectedInstance.getNodeFailures().size()));, +        for (int i = 0; i < newInstance.getNodeFailures().size(); i++) {, +            ElasticsearchException newException = newInstance.getNodeFailures().get(i);, +            ElasticsearchException expectedException = expectedInstance.getNodeFailures().get(i);, +            assertThat(newException.getMetadata("es.node_id").get(0), equalTo(((FailedNodeException)expectedException).nodeId()));, +            assertThat(newException.getMessage(), equalTo("Elasticsearch exception [type=failed_node_exception, reason=error message]"));, +            assertThat(newException.getCause(), instanceOf(ElasticsearchException.class));, +            ElasticsearchException cause = (ElasticsearchException) newException.getCause();, +            assertThat(cause.getMessage(), equalTo("Elasticsearch exception [type=connect_exception, reason=null]"));]