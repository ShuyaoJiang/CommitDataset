[+++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +aggMinOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MIN(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +aggMaxOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MAX(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +aggMinOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MIN(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +aggMaxOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MAX(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/Querier.java, +                return new MetricAggExtractor(r.name(), r.property(), r.innerKey(), cfg.zoneId(), r.isDateTimeBased());, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +aggMinOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MIN(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +aggMaxOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MAX(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/Querier.java, +                return new MetricAggExtractor(r.name(), r.property(), r.innerKey(), cfg.zoneId(), r.isDateTimeBased());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/extractor/MetricAggExtractor.java, +import org.elasticsearch.xpack.sql.util.DateUtils;, +import java.time.ZoneId;, +    private final boolean isDateTimeBased;, +    private final ZoneId zoneId;, +    public MetricAggExtractor(String name, String property, String innerKey, ZoneId zoneId, boolean isDateTimeBased) {, +        this. isDateTimeBased =isDateTimeBased;, +        this.zoneId = zoneId;, +        isDateTimeBased = in.readBoolean();, +        zoneId = ZoneId.of(in.readString());, +        out.writeBoolean(isDateTimeBased);, +        out.writeString(zoneId.getId());, +    ZoneId zoneId() {, +        return zoneId;, +    }, +, +            return handleDateTime(((InternalNumericMetricsAggregation.MultiValue) agg).value(property));, +        return handleDateTime(innerKey != null && v instanceof Map ? ((Map<?, ?>) v).get(innerKey) : v);, +    }, +, +    private Object handleDateTime(Object object) {, +        if (isDateTimeBased) {, +            if (object == null) {, +                return object;, +            } else if (object instanceof Number) {, +                return DateUtils.asDateTime(((Number) object).longValue(), zoneId);, +            } else {, +                throw new SqlIllegalArgumentException("Invalid date key returned: {}", object);, +            }, +        }, +        return object;, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +aggMinOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MIN(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +aggMaxOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MAX(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/Querier.java, +                return new MetricAggExtractor(r.name(), r.property(), r.innerKey(), cfg.zoneId(), r.isDateTimeBased());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/extractor/MetricAggExtractor.java, +import org.elasticsearch.xpack.sql.util.DateUtils;, +import java.time.ZoneId;, +    private final boolean isDateTimeBased;, +    private final ZoneId zoneId;, +    public MetricAggExtractor(String name, String property, String innerKey, ZoneId zoneId, boolean isDateTimeBased) {, +        this. isDateTimeBased =isDateTimeBased;, +        this.zoneId = zoneId;, +        isDateTimeBased = in.readBoolean();, +        zoneId = ZoneId.of(in.readString());, +        out.writeBoolean(isDateTimeBased);, +        out.writeString(zoneId.getId());, +    ZoneId zoneId() {, +        return zoneId;, +    }, +, +            return handleDateTime(((InternalNumericMetricsAggregation.MultiValue) agg).value(property));, +        return handleDateTime(innerKey != null && v instanceof Map ? ((Map<?, ?>) v).get(innerKey) : v);, +    }, +, +    private Object handleDateTime(Object object) {, +        if (isDateTimeBased) {, +            if (object == null) {, +                return object;, +            } else if (object instanceof Number) {, +                return DateUtils.asDateTime(((Number) object).longValue(), zoneId);, +            } else {, +                throw new SqlIllegalArgumentException("Invalid date key returned: {}", object);, +            }, +        }, +        return object;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java, +                    AggPathInput a = new AggPathInput(f, new MetricAggRef(leafAgg.id(), "doc_count", "_count", false));, +                        new MetricAggRef(cAggPath, ia.innerName(),, +                            ia.innerKey() != null ? QueryTranslator.nameOf(ia.innerKey()) : null,, +                            ia.dataType().isDateBased()));, +                    aggInput = new AggPathInput(f, new MetricAggRef(leafAgg.id(), f.dataType().isDateBased()));, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +aggMinOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MIN(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +aggMaxOnDateTimeCastAsDate, +SELECT gender, YEAR(CAST(MAX(birth_date) AS DATE)) m FROM "test_emp" GROUP BY gender ORDER BY gender;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/Querier.java]