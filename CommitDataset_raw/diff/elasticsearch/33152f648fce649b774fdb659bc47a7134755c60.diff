[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +    public void testGetWithType() {, +        getAndExistsWithTypeTest(RequestConverters::get, HttpGet.METHOD_NAME);, +    }, +, +            MultiGetRequest.Item item = new MultiGetRequest.Item(randomAlphaOfLength(4), randomAlphaOfLength(4));, +    public void testMultiGetWithType() throws IOException {, +        MultiGetRequest multiGetRequest = new MultiGetRequest();, +        MultiGetRequest.Item item = new MultiGetRequest.Item(randomAlphaOfLength(4),, +            randomAlphaOfLength(4),, +            randomAlphaOfLength(4));, +        multiGetRequest.add(item);, +, +        Request request = RequestConverters.multiGet(multiGetRequest);, +        assertEquals(HttpPost.METHOD_NAME, request.getMethod());, +        assertEquals("/_mget", request.getEndpoint());, +        assertToXContentBody(multiGetRequest, request.getEntity());, +    }, +, +        DeleteRequest deleteRequest = new DeleteRequest(index, id);, +        assertEquals("/" + index + "/_doc/" + id, request.getEndpoint());, +        assertEquals(expectedParams, request.getParameters());, +        assertNull(request.getEntity());, +    }, +, +    public void testDeleteWithType() {, +        String index = randomAlphaOfLengthBetween(3, 10);, +        String type = randomAlphaOfLengthBetween(3, 10);, +        String id = randomAlphaOfLengthBetween(3, 10);, +        DeleteRequest deleteRequest = new DeleteRequest(index, type, id);, +, +        Request request = RequestConverters.delete(deleteRequest);, +        assertEquals(HttpDelete.METHOD_NAME, request.getMethod());, +        assertEquals("/" + index + "/" + type + "/" + id, request.getEndpoint());, +    public void testExistsWithType() {, +        getAndExistsWithTypeTest(RequestConverters::exists, HttpHead.METHOD_NAME);, +    }, +, +        GetRequest getRequest = new GetRequest(index, id);, +        assertEquals("/" + index + "/_doc/" + id, request.getEndpoint());, +    private static void getAndExistsWithTypeTest(Function<GetRequest, Request> requestConverter, String method) {, +        String index = randomAlphaOfLengthBetween(3, 10);, +        String type = randomAlphaOfLengthBetween(3, 10);, +        String id = randomAlphaOfLengthBetween(3, 10);, +        GetRequest getRequest = new GetRequest(index, type, id);, +, +        Request request = requestConverter.apply(getRequest);, +        assertEquals("/" + index + "/" + type + "/" + id, request.getEndpoint());, +        assertNull(request.getEntity());, +        assertEquals(method, request.getMethod());, +    }, +, +            String id = randomAlphaOfLengthBetween(3, 10);, +            TermVectorsRequest tvRequest = new TermVectorsRequest(index, id);, +            String[] fields = generateRandomStringArray(10, 5, false, false);, +            tvRequest.setFields(fields);, +            mtvRequest.add(tvRequest);, +        }, +, +        Request request = RequestConverters.mtermVectors(mtvRequest);, +        assertEquals(HttpGet.METHOD_NAME, request.getMethod());, +        assertEquals("_mtermvectors", request.getEndpoint());, +        assertToXContentBody(mtvRequest, request.getEntity());, +    }, +, +    public void testMultiTermVectorsWithType() throws IOException {, +        MultiTermVectorsRequest mtvRequest = new MultiTermVectorsRequest();, +, +        int numberOfRequests = randomIntBetween(0, 5);, +        for (int i = 0; i < numberOfRequests; i++) {, +            String index = randomAlphaOfLengthBetween(3, 10);, +            String type = randomAlphaOfLengthBetween(3, 10);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +    public void testGetWithType() {, +        getAndExistsWithTypeTest(RequestConverters::get, HttpGet.METHOD_NAME);, +    }, +, +            MultiGetRequest.Item item = new MultiGetRequest.Item(randomAlphaOfLength(4), randomAlphaOfLength(4));, +    public void testMultiGetWithType() throws IOException {, +        MultiGetRequest multiGetRequest = new MultiGetRequest();, +        MultiGetRequest.Item item = new MultiGetRequest.Item(randomAlphaOfLength(4),, +            randomAlphaOfLength(4),, +            randomAlphaOfLength(4));, +        multiGetRequest.add(item);, +, +        Request request = RequestConverters.multiGet(multiGetRequest);, +        assertEquals(HttpPost.METHOD_NAME, request.getMethod());, +        assertEquals("/_mget", request.getEndpoint());, +        assertToXContentBody(multiGetRequest, request.getEntity());, +    }, +, +        DeleteRequest deleteRequest = new DeleteRequest(index, id);, +        assertEquals("/" + index + "/_doc/" + id, request.getEndpoint());, +        assertEquals(expectedParams, request.getParameters());, +        assertNull(request.getEntity());, +    }, +, +    public void testDeleteWithType() {, +        String index = randomAlphaOfLengthBetween(3, 10);, +        String type = randomAlphaOfLengthBetween(3, 10);]