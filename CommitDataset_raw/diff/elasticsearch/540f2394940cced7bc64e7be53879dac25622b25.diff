[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +        channel.writeAndFlush(response, Netty4TcpChannel.addPromise(listener, channel));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +        channel.writeAndFlush(response, Netty4TcpChannel.addPromise(listener, channel));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java, +    protected void channelRead0(ChannelHandlerContext ctx, HttpPipelinedRequest<FullHttpRequest> msg) {, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +        channel.writeAndFlush(response, Netty4TcpChannel.addPromise(listener, channel));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java, +    protected void channelRead0(ChannelHandlerContext ctx, HttpPipelinedRequest<FullHttpRequest> msg) {, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +        channel.writeAndFlush(response, Netty4TcpChannel.addPromise(listener, channel));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java, +    protected void channelRead0(ChannelHandlerContext ctx, HttpPipelinedRequest<FullHttpRequest> msg) {, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +        channel.writeAndFlush(response, Netty4TcpChannel.addPromise(listener, channel));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java, +    protected void channelRead0(ChannelHandlerContext ctx, HttpPipelinedRequest<FullHttpRequest> msg) {, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +        addListener(this.channel.closeFuture(), closeContext);, +        addListener(connectFuture, connectContext);, +    /**, +     * Adds a listener that completes the given {@link CompletableContext} to the given {@link ChannelFuture}., +     * @param channelFuture Channel future, +     * @param context Context to complete, +     */, +    public static void addListener(ChannelFuture channelFuture, CompletableContext<Void> context) {, +        channelFuture.addListener(f -> {, +                context.complete(null);, +                    context.completeExceptionally(new Exception(cause));, +                    context.completeExceptionally((Exception) cause);, +    /**, +     * Creates a {@link ChannelPromise} for the given {@link Channel} and adds a listener that invokes the given {@link ActionListener}, +     * on its completion., +     * @param listener lister to invoke, +     * @param channel channel, +     * @return write promise, +     */, +    public static ChannelPromise addPromise(ActionListener<Void> listener, Channel channel) {, +        ChannelPromise writePromise = channel.newPromise();, +        writePromise.addListener(f -> {, +            if (f.isSuccess()) {, +                listener.onResponse(null);, +            } else {, +                final Throwable cause = f.cause();, +                ExceptionsHelper.maybeDieOnAnotherThread(cause);, +                if (cause instanceof Error) {, +                    listener.onFailure(new Exception(cause));, +                } else {, +                    listener.onFailure((Exception) cause);, +                }, +            }, +        });, +        return writePromise;, +    }, +, +        channel.writeAndFlush(Netty4Utils.toByteBuf(reference), addPromise(listener, channel));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +        channel.writeAndFlush(response, Netty4TcpChannel.addPromise(listener, channel));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java, +    protected void channelRead0(ChannelHandlerContext ctx, HttpPipelinedRequest<FullHttpRequest> msg) {, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerChannel.java, +import org.elasticsearch.transport.netty4.Netty4TcpChannel;, +        Netty4TcpChannel.addListener(this.channel.closeFuture(), closeContext);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4InternalESLogger.java, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +        addListener(this.channel.closeFuture(), closeContext);, +        addListener(connectFuture, connectContext);, +    /**, +     * Adds a listener that completes the given {@link CompletableContext} to the given {@link ChannelFuture}., +     * @param channelFuture Channel future, +     * @param context Context to complete]