[+++ b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        int line = 0;, +            line++;, +            // now parse the action, +                token = parser.nextToken();, +                if (token == XContentParser.Token.START_OBJECT) {, +                            } else {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [" + currentFieldName + "]");, +                            }, +                        } else {, +                            throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +                } else if (token != XContentParser.Token.END_OBJECT) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected " + XContentParser.Token.START_OBJECT, +                            + " or " + XContentParser.Token.END_OBJECT + " but found [" + token + "]");, +                    line++;, +, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        int line = 0;, +            line++;, +            // now parse the action, +                token = parser.nextToken();, +                if (token == XContentParser.Token.START_OBJECT) {, +                            } else {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [" + currentFieldName + "]");, +                            }, +                        } else {, +                            throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +                } else if (token != XContentParser.Token.END_OBJECT) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected " + XContentParser.Token.START_OBJECT, +                            + " or " + XContentParser.Token.END_OBJECT + " but found [" + token + "]");, +                    line++;, +, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +import org.elasticsearch.common.collect.IdentityHashSet;, +            final Set<ModelNode> throttledNodes = new IdentityHashSet<>();, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        int line = 0;, +            line++;, +            // now parse the action, +                token = parser.nextToken();, +                if (token == XContentParser.Token.START_OBJECT) {, +                            } else {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [" + currentFieldName + "]");, +                            }, +                        } else {, +                            throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +                } else if (token != XContentParser.Token.END_OBJECT) {, +                    throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected " + XContentParser.Token.START_OBJECT, +                            + " or " + XContentParser.Token.END_OBJECT + " but found [" + token + "]");, +                    line++;, +, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +import org.elasticsearch.common.collect.IdentityHashSet;, +            final Set<ModelNode> throttledNodes = new IdentityHashSet<>();, +++ b/src/main/java/org/elasticsearch/common/collect/BoundedTreeSet.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.collect;, +, +import java.util.Collection;, +import java.util.Comparator;, +import java.util.TreeSet;, +, +/**, + * A {@link TreeSet} that is bounded by size., + *, + *, + */, +public class BoundedTreeSet<E> extends TreeSet<E> {, +, +    private final int size;, +, +    public BoundedTreeSet(int size) {, +        this.size = size;, +    }, +, +    public BoundedTreeSet(Comparator<? super E> comparator, int size) {, +        super(comparator);, +        this.size = size;, +    }, +, +    @Override, +    public boolean add(E e) {]