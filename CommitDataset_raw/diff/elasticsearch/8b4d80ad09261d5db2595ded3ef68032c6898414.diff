[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/AntFixture.groovy, +        // so now evaluates if the waitCondition is successful, +            success = waitCondition(this, ant), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/AntFixture.groovy, +        // so now evaluates if the waitCondition is successful, +            success = waitCondition(this, ant), +++ b/modules/reindex/build.gradle, +      waitCondition = { fixture, ant ->, +        // the fixture writes the ports file when Elasticsearch's HTTP service, +        // is ready, so we can just wait for the file to exist, +        return fixture.portsFile.exists(), +      }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/AntFixture.groovy, +        // so now evaluates if the waitCondition is successful, +            success = waitCondition(this, ant), +++ b/modules/reindex/build.gradle, +      waitCondition = { fixture, ant ->, +        // the fixture writes the ports file when Elasticsearch's HTTP service, +        // is ready, so we can just wait for the file to exist, +        return fixture.portsFile.exists(), +      }, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLFixture.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +, +            final String userAgent = exchange.getRequestHeaders().getFirst("User-Agent");, +            if (userAgent != null && userAgent.startsWith("Apache Ant")) {, +                // This is a request made by the AntFixture, just reply "OK", +                response = new Response(RestStatus.OK, emptyMap(), "text/plain; charset=utf-8", "OK".getBytes(UTF_8));, +, +            } else if ("GET".equalsIgnoreCase(exchange.getRequestMethod())) {, +                        response = new Response(RestStatus.NOT_FOUND, emptyMap(), "text/plain; charset=utf-8", new byte[0]);, +                    response = new Response(RestStatus.FORBIDDEN, emptyMap(), "text/plain; charset=utf-8", new byte[0]);, +                response = new Response(RestStatus.INTERNAL_SERVER_ERROR, emptyMap(), "text/plain; charset=utf-8",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/AntFixture.groovy, +        // so now evaluates if the waitCondition is successful, +            success = waitCondition(this, ant), +++ b/modules/reindex/build.gradle, +      waitCondition = { fixture, ant ->, +        // the fixture writes the ports file when Elasticsearch's HTTP service, +        // is ready, so we can just wait for the file to exist, +        return fixture.portsFile.exists(), +      }, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLFixture.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +, +            final String userAgent = exchange.getRequestHeaders().getFirst("User-Agent");, +            if (userAgent != null && userAgent.startsWith("Apache Ant")) {, +                // This is a request made by the AntFixture, just reply "OK", +                response = new Response(RestStatus.OK, emptyMap(), "text/plain; charset=utf-8", "OK".getBytes(UTF_8));, +, +            } else if ("GET".equalsIgnoreCase(exchange.getRequestMethod())) {, +                        response = new Response(RestStatus.NOT_FOUND, emptyMap(), "text/plain; charset=utf-8", new byte[0]);, +                    response = new Response(RestStatus.FORBIDDEN, emptyMap(), "text/plain; charset=utf-8", new byte[0]);, +                response = new Response(RestStatus.INTERNAL_SERVER_ERROR, emptyMap(), "text/plain; charset=utf-8",, +++ b/plugins/examples/rest-handler/src/test/java/org/elasticsearch/example/resthandler/ExampleFixtureIT.java, +import java.io.BufferedWriter;, +import java.io.OutputStreamWriter;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.hamcrest.Matchers.hasItems;, +        final String externalAddress = System.getProperty("external.address");, +        assertNotNull("External address must not be null", externalAddress);, +        final URL url = new URL("http://" + externalAddress);, +            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8));, +            writer.write("GET / HTTP/1.1\r\n");, +            writer.write("Host: elastic.co\r\n\r\n");, +            writer.flush();, +, +            final List<String> lines = new ArrayList<>();, +            String line;, +            while ((line = reader.readLine()) != null) {, +                lines.add(line);, +            }, +            assertThat(lines, hasItems("HTTP/1.1 200 OK", "TEST"));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/AntFixture.groovy, +        // so now evaluates if the waitCondition is successful, +            success = waitCondition(this, ant), +++ b/modules/reindex/build.gradle, +      waitCondition = { fixture, ant ->, +        // the fixture writes the ports file when Elasticsearch's HTTP service, +        // is ready, so we can just wait for the file to exist, +        return fixture.portsFile.exists(), +      }, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLFixture.java, +import static java.nio.charset.StandardCharsets.UTF_8;, +, +            final String userAgent = exchange.getRequestHeaders().getFirst("User-Agent");, +            if (userAgent != null && userAgent.startsWith("Apache Ant")) {, +                // This is a request made by the AntFixture, just reply "OK", +                response = new Response(RestStatus.OK, emptyMap(), "text/plain; charset=utf-8", "OK".getBytes(UTF_8));, +, +            } else if ("GET".equalsIgnoreCase(exchange.getRequestMethod())) {, +                        response = new Response(RestStatus.NOT_FOUND, emptyMap(), "text/plain; charset=utf-8", new byte[0]);, +                    response = new Response(RestStatus.FORBIDDEN, emptyMap(), "text/plain; charset=utf-8", new byte[0]);, +                response = new Response(RestStatus.INTERNAL_SERVER_ERROR, emptyMap(), "text/plain; charset=utf-8",, +++ b/plugins/examples/rest-handler/src/test/java/org/elasticsearch/example/resthandler/ExampleFixtureIT.java, +import java.io.BufferedWriter;, +import java.io.OutputStreamWriter;, +import java.util.ArrayList;]