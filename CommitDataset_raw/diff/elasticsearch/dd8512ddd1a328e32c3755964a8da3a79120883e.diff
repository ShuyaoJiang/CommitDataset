[+++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.elasticsearch.action.support.IgnoreIndices;, +    public void indexRandom(boolean forceRefresh, IndexRequestBuilder... builders) throws InterruptedException, ExecutionException {, +        if (builders.length == 0) {, +            return;, +        }, +        Set<String> indicesSet = new HashSet<String>();, +        for (int i = 0; i < builders.length; i++) {, +            indicesSet.add(builders[i].request().index());, +        }, +        final String[] indices = indicesSet.toArray(new String[0]);, +                        client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<RefreshResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareFlush(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<FlushResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareOptimize(indices).setIgnoreIndices(IgnoreIndices.MISSING).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute(new LatchedActionListener<OptimizeResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<RefreshResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareFlush(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<FlushResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareOptimize(indices).setIgnoreIndices(IgnoreIndices.MISSING).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute(new LatchedActionListener<OptimizeResponse>(newLatch(latches), errors));, +            assertNoFailures(client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute().get());, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.elasticsearch.action.support.IgnoreIndices;, +    public void indexRandom(boolean forceRefresh, IndexRequestBuilder... builders) throws InterruptedException, ExecutionException {, +        if (builders.length == 0) {, +            return;, +        }, +        Set<String> indicesSet = new HashSet<String>();, +        for (int i = 0; i < builders.length; i++) {, +            indicesSet.add(builders[i].request().index());, +        }, +        final String[] indices = indicesSet.toArray(new String[0]);, +                        client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<RefreshResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareFlush(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<FlushResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareOptimize(indices).setIgnoreIndices(IgnoreIndices.MISSING).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute(new LatchedActionListener<OptimizeResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<RefreshResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareFlush(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<FlushResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareOptimize(indices).setIgnoreIndices(IgnoreIndices.MISSING).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute(new LatchedActionListener<OptimizeResponse>(newLatch(latches), errors));, +            assertNoFailures(client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute().get());, +++ b/src/test/java/org/elasticsearch/count/query/SimpleQueryTests.java, +        indexRandom(true, client().prepareIndex("test", "type1", "3").setSource("field1", "quick lazy huge brown pidgin", "field2", "the quick lazy huge brown fox jumps over the tree"),, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "quick brown fox", "field2", "quick brown fox"),, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "value1"),, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.elasticsearch.action.support.IgnoreIndices;, +    public void indexRandom(boolean forceRefresh, IndexRequestBuilder... builders) throws InterruptedException, ExecutionException {, +        if (builders.length == 0) {, +            return;, +        }, +        Set<String> indicesSet = new HashSet<String>();, +        for (int i = 0; i < builders.length; i++) {, +            indicesSet.add(builders[i].request().index());, +        }, +        final String[] indices = indicesSet.toArray(new String[0]);, +                        client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<RefreshResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareFlush(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<FlushResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareOptimize(indices).setIgnoreIndices(IgnoreIndices.MISSING).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute(new LatchedActionListener<OptimizeResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<RefreshResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareFlush(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<FlushResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareOptimize(indices).setIgnoreIndices(IgnoreIndices.MISSING).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute(new LatchedActionListener<OptimizeResponse>(newLatch(latches), errors));, +            assertNoFailures(client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute().get());, +++ b/src/test/java/org/elasticsearch/count/query/SimpleQueryTests.java, +        indexRandom(true, client().prepareIndex("test", "type1", "3").setSource("field1", "quick lazy huge brown pidgin", "field2", "the quick lazy huge brown fox jumps over the tree"),, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "quick brown fox", "field2", "quick brown fox"),, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "value1"),, +++ b/src/test/java/org/elasticsearch/count/simple/SimpleCountTests.java, +        indexRandom(true, client().prepareIndex("test", "type", "1").setSource("field", "value"),, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.elasticsearch.action.support.IgnoreIndices;, +    public void indexRandom(boolean forceRefresh, IndexRequestBuilder... builders) throws InterruptedException, ExecutionException {, +        if (builders.length == 0) {, +            return;, +        }, +        Set<String> indicesSet = new HashSet<String>();, +        for (int i = 0; i < builders.length; i++) {, +            indicesSet.add(builders[i].request().index());, +        }, +        final String[] indices = indicesSet.toArray(new String[0]);, +                        client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<RefreshResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareFlush(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<FlushResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareOptimize(indices).setIgnoreIndices(IgnoreIndices.MISSING).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute(new LatchedActionListener<OptimizeResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<RefreshResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareFlush(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute(new LatchedActionListener<FlushResponse>(newLatch(latches), errors));, +                        client().admin().indices().prepareOptimize(indices).setIgnoreIndices(IgnoreIndices.MISSING).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute(new LatchedActionListener<OptimizeResponse>(newLatch(latches), errors));, +            assertNoFailures(client().admin().indices().prepareRefresh(indices).setIgnoreIndices(IgnoreIndices.MISSING).execute().get());, +++ b/src/test/java/org/elasticsearch/count/query/SimpleQueryTests.java, +        indexRandom(true, client().prepareIndex("test", "type1", "3").setSource("field1", "quick lazy huge brown pidgin", "field2", "the quick lazy huge brown fox jumps over the tree"),, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "quick brown fox", "field2", "quick brown fox"),, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "value1"),, +++ b/src/test/java/org/elasticsearch/count/simple/SimpleCountTests.java, +        indexRandom(true, client().prepareIndex("test", "type", "1").setSource("field", "value"),, +++ b/src/test/java/org/elasticsearch/search/basic/SearchWhileRelocatingTests.java, +        indexRandom(true, indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]));, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.elasticsearch.action.support.IgnoreIndices;, +    public void indexRandom(boolean forceRefresh, IndexRequestBuilder... builders) throws InterruptedException, ExecutionException {, +        if (builders.length == 0) {, +            return;, +        }, +        Set<String> indicesSet = new HashSet<String>();, +        for (int i = 0; i < builders.length; i++) {, +            indicesSet.add(builders[i].request().index());, +        }]