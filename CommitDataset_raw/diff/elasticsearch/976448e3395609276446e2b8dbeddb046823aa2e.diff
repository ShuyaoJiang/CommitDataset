[+++ b/README.md, +Repository validation rules, +---------------------------, +, +According to the [containers naming guide](http://msdn.microsoft.com/en-us/library/dd135715.aspx), a container name must , +be a valid DNS name, conforming to the following naming rules:, +, +* Container names must start with a letter or number, and can contain only letters, numbers, and the dash (-) character., +* Every dash (-) character must be immediately preceded and followed by a letter or number; consecutive dashes are not , +permitted in container names., +* All letters in a container name must be lowercase., +* Container names must be from 3 through 63 characters long., +, +=======, +++ b/README.md, +Repository validation rules, +---------------------------, +, +According to the [containers naming guide](http://msdn.microsoft.com/en-us/library/dd135715.aspx), a container name must , +be a valid DNS name, conforming to the following naming rules:, +, +* Container names must start with a letter or number, and can contain only letters, numbers, and the dash (-) character., +* Every dash (-) character must be immediately preceded and followed by a letter or number; consecutive dashes are not , +permitted in container names., +* All letters in a container name must be lowercase., +* Container names must be from 3 through 63 characters long., +, +=======, +++ b/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreITest.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.repositories.RepositoryException;, +import static org.hamcrest.Matchers.is;, +     * For issue #21: https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/21, +     */, +    @Test @LuceneTestCase.AwaitsFix(bugUrl = "https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/21"), +    public void testForbiddenContainerName() {, +        checkContainerName("", false);, +        checkContainerName("es", false);, +        checkContainerName("-elasticsearch", false);, +        checkContainerName("elasticsearch--integration", false);, +        checkContainerName("elasticsearch_integration", false);, +        checkContainerName("ElAsTicsearch_integration", false);, +        checkContainerName("123456789-123456789-123456789-123456789-123456789-123456789-1234", false);, +        checkContainerName("123456789-123456789-123456789-123456789-123456789-123456789-123", true);, +        checkContainerName("elasticsearch-integration", true);, +        checkContainerName("elasticsearch-integration-007", true);, +    }, +, +    /**, +     * Create repository with wrong or correct container name, +     * @param container Container name we want to create, +     * @param correct Is this container name correct, +     */, +    private void checkContainerName(String container, boolean correct) {, +        logger.info("-->  creating azure repository with container name [{}]", container);, +        try {, +            PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo"), +                    .setType("azure").setSettings(ImmutableSettings.settingsBuilder(), +                                    .put(AzureStorageService.Fields.CONTAINER, container), +                                    .put(AzureStorageService.Fields.BASE_PATH, basePath), +                                    .put(AzureStorageService.Fields.CHUNK_SIZE, randomIntBetween(1000, 10000)), +                    ).get();, +            assertThat(putRepositoryResponse.isAcknowledged(), is(correct));, +            client().admin().cluster().prepareDeleteRepository("test-repo").get();, +        } catch (RepositoryException e) {, +            if (correct) {, +                // We did not expect any exception here :(, +                throw e;, +            }, +        }, +    }, +, +    /**]