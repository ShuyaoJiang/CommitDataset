[+++ b/plugin/core/src/main/java/org/elasticsearch/xpack/persistent/AllocatedPersistentTask.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.function.Predicate;, +    /**, +     * Waits for this persistent task to have the desired state., +     */, +    public void waitForPersistentTaskStatus(Predicate<PersistentTasksCustomMetaData.PersistentTask<?>> predicate,, +                                            @Nullable TimeValue timeout,, +                                            PersistentTasksService.WaitForPersistentTaskStatusListener<?> listener) {, +        persistentTasksService.waitForPersistentTaskStatus(persistentTaskId, predicate, timeout, listener);, +    }, +, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/persistent/AllocatedPersistentTask.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.function.Predicate;, +    /**, +     * Waits for this persistent task to have the desired state., +     */, +    public void waitForPersistentTaskStatus(Predicate<PersistentTasksCustomMetaData.PersistentTask<?>> predicate,, +                                            @Nullable TimeValue timeout,, +                                            PersistentTasksService.WaitForPersistentTaskStatusListener<?> listener) {, +        persistentTasksService.waitForPersistentTaskStatus(persistentTaskId, predicate, timeout, listener);, +    }, +, +++ b/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        components.addAll(createComponents(client, clusterService, threadPool, xContentRegistry, environment));, +    // TODO: once initialization of the PersistentTasksClusterService, PersistentTasksService, +    // and PersistentTasksExecutorRegistry has been moved somewhere else the entire contents of, +    // this method can replace the entire contents of the overridden createComponents() method, +    private Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,, +                                                NamedXContentRegistry xContentRegistry, Environment environment) {, +                System::currentTimeMillis, auditor);, +, +        // This object's constructor attaches to the license state, so there's no need to retain another reference to it, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/persistent/AllocatedPersistentTask.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.function.Predicate;, +    /**, +     * Waits for this persistent task to have the desired state., +     */, +    public void waitForPersistentTaskStatus(Predicate<PersistentTasksCustomMetaData.PersistentTask<?>> predicate,, +                                            @Nullable TimeValue timeout,, +                                            PersistentTasksService.WaitForPersistentTaskStatusListener<?> listener) {, +        persistentTasksService.waitForPersistentTaskStatus(persistentTaskId, predicate, timeout, listener);, +    }, +, +++ b/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        components.addAll(createComponents(client, clusterService, threadPool, xContentRegistry, environment));, +    // TODO: once initialization of the PersistentTasksClusterService, PersistentTasksService, +    // and PersistentTasksExecutorRegistry has been moved somewhere else the entire contents of, +    // this method can replace the entire contents of the overridden createComponents() method, +    private Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,, +                                                NamedXContentRegistry xContentRegistry, Environment environment) {, +                System::currentTimeMillis, auditor);, +, +        // This object's constructor attaches to the license state, so there's no need to retain another reference to it, +++ b/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedManager.java, +                           Supplier<Long> currentTimeSupplier, Auditor auditor) {, +                    Holder holder = new Holder(task, datafeed, datafeedJob, new ProblemTracker(auditor, job.getId()), taskHandler);, +        private final TransportStartDatafeedAction.DatafeedTask task;, +        Holder(TransportStartDatafeedAction.DatafeedTask task, DatafeedConfig datafeed, DatafeedJob datafeedJob,, +            this.task = task;, +            this.allocationId = task.getAllocationId();, +            this.autoCloseJob = task.isLookbackOnly();, +            task.waitForPersistentTaskStatus(Objects::isNull, TimeValue.timeValueSeconds(20),, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/persistent/AllocatedPersistentTask.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.function.Predicate;, +    /**, +     * Waits for this persistent task to have the desired state., +     */, +    public void waitForPersistentTaskStatus(Predicate<PersistentTasksCustomMetaData.PersistentTask<?>> predicate,, +                                            @Nullable TimeValue timeout,, +                                            PersistentTasksService.WaitForPersistentTaskStatusListener<?> listener) {, +        persistentTasksService.waitForPersistentTaskStatus(persistentTaskId, predicate, timeout, listener);, +    }, +, +++ b/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        components.addAll(createComponents(client, clusterService, threadPool, xContentRegistry, environment));, +    // TODO: once initialization of the PersistentTasksClusterService, PersistentTasksService, +    // and PersistentTasksExecutorRegistry has been moved somewhere else the entire contents of, +    // this method can replace the entire contents of the overridden createComponents() method, +    private Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,, +                                                NamedXContentRegistry xContentRegistry, Environment environment) {, +                System::currentTimeMillis, auditor);, +, +        // This object's constructor attaches to the license state, so there's no need to retain another reference to it, +++ b/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedManager.java, +                           Supplier<Long> currentTimeSupplier, Auditor auditor) {, +                    Holder holder = new Holder(task, datafeed, datafeedJob, new ProblemTracker(auditor, job.getId()), taskHandler);, +        private final TransportStartDatafeedAction.DatafeedTask task;, +        Holder(TransportStartDatafeedAction.DatafeedTask task, DatafeedConfig datafeed, DatafeedJob datafeedJob,, +            this.task = task;, +            this.allocationId = task.getAllocationId();, +            this.autoCloseJob = task.isLookbackOnly();, +            task.waitForPersistentTaskStatus(Objects::isNull, TimeValue.timeValueSeconds(20),, +++ b/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/datafeed/DatafeedManagerTests.java, +        datafeedManager = new DatafeedManager(threadPool, client, clusterService, datafeedJobBuilder, () -> currentTime, auditor);]