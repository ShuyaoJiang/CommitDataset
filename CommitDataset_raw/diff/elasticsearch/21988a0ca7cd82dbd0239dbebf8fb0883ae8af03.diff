[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorExecutor.java, +import org.elasticsearch.common.compress.lzf.LZF;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +import org.elasticsearch.common.io.stream.CachedStreamInput;, +import org.elasticsearch.common.io.stream.LZFStreamInput;, +import org.elasticsearch.common.xcontent.XContentType;, +            if (LZF.isCompressed(source, sourceOffset, sourceLength)) {, +                BytesStreamInput siBytes = new BytesStreamInput(source, sourceOffset, sourceLength);, +                LZFStreamInput siLzf = CachedStreamInput.cachedLzf(siBytes);, +                XContentType contentType = XContentFactory.xContentType(siLzf);, +                siLzf.resetToBufferStart();, +                parser = XContentFactory.xContent(contentType).createParser(siLzf);, +            } else {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorExecutor.java, +import org.elasticsearch.common.compress.lzf.LZF;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +import org.elasticsearch.common.io.stream.CachedStreamInput;, +import org.elasticsearch.common.io.stream.LZFStreamInput;, +import org.elasticsearch.common.xcontent.XContentType;, +            if (LZF.isCompressed(source, sourceOffset, sourceLength)) {, +                BytesStreamInput siBytes = new BytesStreamInput(source, sourceOffset, sourceLength);, +                LZFStreamInput siLzf = CachedStreamInput.cachedLzf(siBytes);, +                XContentType contentType = XContentFactory.xContentType(siLzf);, +                siLzf.resetToBufferStart();, +                parser = XContentFactory.xContent(contentType).createParser(siLzf);, +            } else {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorService.java, +                percolator.addQuery(create.id(), create.source(), create.sourceOffset(), create.sourceLength());, +                percolator.addQuery(index.id(), index.source(), index.sourceOffset(), index.sourceLength());]