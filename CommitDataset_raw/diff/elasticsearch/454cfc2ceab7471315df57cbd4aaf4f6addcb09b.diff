[+++ b/core/src/main/java/org/apache/lucene/queries/BinaryDocValuesRangeQuery.java, +    private final LengthType lengthType;, +    public BinaryDocValuesRangeQuery(String fieldName, QueryType queryType, LengthType lengthType,, +                                     BytesRef from, BytesRef to,, +        this.lengthType = lengthType;, +                    BytesRef otherFrom = new BytesRef();, +                    BytesRef otherTo = new BytesRef();, +                        final byte[] bytes = encodedRanges.bytes;, +                        otherFrom.bytes = bytes;, +                        otherTo.bytes = bytes;, +                        int offset = in.getPosition();, +                            int length = lengthType.readLength(bytes, offset);, +                            otherFrom.offset = offset;, +                            otherFrom.length = length;, +                            offset += length;, +                            length = lengthType.readLength(bytes, offset);, +                            otherTo.offset = offset;, +                            otherTo.length = length;, +                            offset += length;, +                        assert offset == encodedRanges.offset + encodedRanges.length;, +                lengthType == that.lengthType &&, +        return Objects.hash(getClass(), fieldName, queryType, lengthType, from, to);, +    public enum LengthType {, +        FIXED_4 {, +            @Override, +            int readLength(byte[] bytes, int offset) {, +                return 4;, +            }, +        },, +        FIXED_8 {, +            @Override, +            int readLength(byte[] bytes, int offset) {, +                return 8;, +            }, +        },, +        FIXED_16 {, +            @Override, +            int readLength(byte[] bytes, int offset) {, +                return 16;, +            }, +        },, +        VARIABLE {, +            @Override, +            int readLength(byte[] bytes, int offset) {, +                // the first bit encodes the sign and the next 4 bits encode the number, +                // of additional bytes, +                int token = Byte.toUnsignedInt(bytes[offset]);, +                int length = (token >>> 3) & 0x0f;, +                if ((token & 0x80) == 0) {, +                    length = 0x0f - length;, +                }, +                return 1 + length;, +            }, +        };, +, +        /**, +         * Return the length of the value that starts at {@code offset} in {@code bytes}., +         */, +        abstract int readLength(byte[] bytes, int offset);, +    }, +++ b/core/src/main/java/org/apache/lucene/queries/BinaryDocValuesRangeQuery.java, +    private final LengthType lengthType;, +    public BinaryDocValuesRangeQuery(String fieldName, QueryType queryType, LengthType lengthType,, +                                     BytesRef from, BytesRef to,, +        this.lengthType = lengthType;, +                    BytesRef otherFrom = new BytesRef();, +                    BytesRef otherTo = new BytesRef();, +                        final byte[] bytes = encodedRanges.bytes;, +                        otherFrom.bytes = bytes;, +                        otherTo.bytes = bytes;, +                        int offset = in.getPosition();, +                            int length = lengthType.readLength(bytes, offset);, +                            otherFrom.offset = offset;, +                            otherFrom.length = length;, +                            offset += length;, +                            length = lengthType.readLength(bytes, offset);, +                            otherTo.offset = offset;, +                            otherTo.length = length;, +                            offset += length;, +                        assert offset == encodedRanges.offset + encodedRanges.length;, +                lengthType == that.lengthType &&, +        return Objects.hash(getClass(), fieldName, queryType, lengthType, from, to);, +    public enum LengthType {, +        FIXED_4 {, +            @Override, +            int readLength(byte[] bytes, int offset) {, +                return 4;, +            }, +        },, +        FIXED_8 {, +            @Override, +            int readLength(byte[] bytes, int offset) {, +                return 8;, +            }, +        },, +        FIXED_16 {, +            @Override, +            int readLength(byte[] bytes, int offset) {, +                return 16;, +            }]