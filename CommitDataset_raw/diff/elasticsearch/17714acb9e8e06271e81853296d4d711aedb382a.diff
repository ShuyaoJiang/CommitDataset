[+++ b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java, +        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();, +        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();, +        assertThat(capturedRequests.length, equalTo(1));, +        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];, +        if (rejoinSameMaster) {, +            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(remoteNode, "Fake error"));, +            assertFalse(listener.isDone());, +            // reset the same state to increment a version simulating a join of an existing node, +            setState(clusterService, clusterService.state());, +            assertFalse(listener.isDone());, +            capturedRequests = transport.getCapturedRequestsAndClear();, +            assertThat(capturedRequests.length, equalTo(1));, +            capturedRequest = capturedRequests[0];, +            assertTrue(capturedRequest.node.isMasterNode());, +            assertThat(capturedRequest.request, equalTo(request));, +            assertThat(capturedRequest.action, equalTo("testAction"));, +        } else if (failsWithConnectTransportException) {, +++ b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java, +        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();, +        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();, +        assertThat(capturedRequests.length, equalTo(1));, +        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];, +        if (rejoinSameMaster) {, +            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(remoteNode, "Fake error"));, +            assertFalse(listener.isDone());, +            // reset the same state to increment a version simulating a join of an existing node, +            setState(clusterService, clusterService.state());, +            assertFalse(listener.isDone());, +            capturedRequests = transport.getCapturedRequestsAndClear();, +            assertThat(capturedRequests.length, equalTo(1));, +            capturedRequest = capturedRequests[0];, +            assertTrue(capturedRequest.node.isMasterNode());, +            assertThat(capturedRequest.request, equalTo(request));, +            assertThat(capturedRequest.action, equalTo("testAction"));, +        } else if (failsWithConnectTransportException) {, +++ b/core/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesIT.java, +import org.elasticsearch.test.junit.annotations.TestLogging;, +@TestLogging("_root:DEBUG,org.elasticsearch.action.admin.cluster.state:TRACE")]