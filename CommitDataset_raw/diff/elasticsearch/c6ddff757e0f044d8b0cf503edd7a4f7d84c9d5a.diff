[+++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * Notifies the service to update the local checkpoint for the shard with the provided allocation ID. See, +     * {@link GlobalCheckpointService#updateLocalCheckpoint(String, long)} for details., +     * @param activeAllocationIds       the allocation IDs of the currently active shard copies, +     * @param initializingAllocationIds the allocation IDs of the currently initializing shard copies, +++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * Notifies the service to update the local checkpoint for the shard with the provided allocation ID. See, +     * {@link GlobalCheckpointService#updateLocalCheckpoint(String, long)} for details., +     * @param activeAllocationIds       the allocation IDs of the currently active shard copies, +     * @param initializingAllocationIds the allocation IDs of the currently initializing shard copies, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +     * Notifies the service to update the local checkpoint for the shard with the provided allocation ID. See, +     * {@link GlobalCheckpointService#updateLocalCheckpoint(String, long)} for details., +     *, +     * @param allocationId the allocation ID of the shard to update the local checkpoint for, +     * @param checkpoint   the local checkpoint for the shard, +    public void updateLocalCheckpointForShard(final String allocationId, final long checkpoint) {, +     * Marks the shard with the provided allocation ID as in-sync with the primary shard. See, +     * {@link GlobalCheckpointService#markAllocationIdAsInSync(String)} for additional details., +     * @param allocationId the allocation ID of the shard to mark as in-sync, +    public void markAllocationIdAsInSync(final String allocationId) {, +    /**, +     * Returns the local checkpoint for the shard., +     *, +     * @return the local checkpoint, +     */, +    /**, +     * Returns the global checkpoint for the shard., +     *, +     * @return the global checkpoint, +     */, +     * Checks whether the global checkpoint can be updated based on current knowledge of local checkpoints on the different shard copies., +     * The checkpoint is updated or if more information is required from the replica, a global checkpoint sync is initiated., +     * Updates the global checkpoint on a replica shard after it has been updated by the primary., +     *, +     * @param checkpoint the global checkpoint, +    public void updateGlobalCheckpointOnReplica(final long checkpoint) {, +     * Notifies the service of the current allocation IDs in the cluster state. See, +     * {@link GlobalCheckpointService#updateAllocationIdsFromMaster(Set, Set)} for details., +     * @param activeAllocationIds       the allocation IDs of the currently active shard copies, +     * @param initializingAllocationIds the allocation IDs of the currently initializing shard copies, +    public void updateAllocationIdsFromMaster(final Set<String> activeAllocationIds, final Set<String> initializingAllocationIds) {, +        final Engine engine = getEngineOrNull();, +        // if the engine is not yet started, we are not ready yet and can just ignore this]