[+++ b/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +        public static final Dynamic DYNAMIC = null; // not set, inherited from root, +    private volatile Dynamic dynamic;, +        return this.dynamic == null ? Dynamic.TRUE : this.dynamic;, +        if (!mergeContext.mergeFlags().simulate()) {, +            if (mergeWithObject.dynamic != null) {, +                this.dynamic = mergeWithObject.dynamic;, +            }, +        }, +, +        if (dynamic != null) {, +++ b/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +        public static final Dynamic DYNAMIC = null; // not set, inherited from root, +    private volatile Dynamic dynamic;, +        return this.dynamic == null ? Dynamic.TRUE : this.dynamic;, +        if (!mergeContext.mergeFlags().simulate()) {, +            if (mergeWithObject.dynamic != null) {, +                this.dynamic = mergeWithObject.dynamic;, +            }, +        }, +, +        if (dynamic != null) {, +++ b/src/main/java/org/elasticsearch/index/mapper/object/RootObjectMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +        public static final Dynamic DYNAMIC = null; // not set, inherited from root, +    private volatile Dynamic dynamic;, +        return this.dynamic == null ? Dynamic.TRUE : this.dynamic;, +        if (!mergeContext.mergeFlags().simulate()) {, +            if (mergeWithObject.dynamic != null) {, +                this.dynamic = mergeWithObject.dynamic;, +            }, +        }, +, +        if (dynamic != null) {, +++ b/src/main/java/org/elasticsearch/index/mapper/object/RootObjectMapper.java, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/merge/TestMergeMapperTests.java, +import org.elasticsearch.index.mapper.object.ObjectMapper;, +    @Test, +    public void testMergeObjectDynamic() throws Exception {, +        String objectMapping = XContentFactory.jsonBuilder().startObject().startObject("type1").endObject().endObject().string();, +        DocumentMapper mapper = MapperTestUtils.newParser().parse(objectMapping);, +        assertThat(mapper.root().dynamic(), equalTo(ObjectMapper.Dynamic.TRUE));, +, +        String withDynamicMapping = XContentFactory.jsonBuilder().startObject().startObject("type1").field("dynamic", "false").endObject().endObject().string();, +        DocumentMapper withDynamicMapper = MapperTestUtils.newParser().parse(withDynamicMapping);, +        assertThat(withDynamicMapper.root().dynamic(), equalTo(ObjectMapper.Dynamic.FALSE));, +, +        DocumentMapper.MergeResult mergeResult = mapper.merge(withDynamicMapper, mergeFlags().simulate(false));, +        assertThat(mergeResult.hasConflicts(), equalTo(false));, +        assertThat(mapper.root().dynamic(), equalTo(ObjectMapper.Dynamic.FALSE));, +    }]