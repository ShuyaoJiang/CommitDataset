[+++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +            final Ordinals.Docs globalOrdinals;, +            if (segmentOrdToGlobalOrdLookup != null) {, +                globalOrdinals = segmentOrdToGlobalOrdLookup.globalOrdinals(segmentOrdinals);, +            } else {, +                globalOrdinals = segmentOrdinals;, +            }, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +            final Ordinals.Docs globalOrdinals;, +            if (segmentOrdToGlobalOrdLookup != null) {, +                globalOrdinals = segmentOrdToGlobalOrdLookup.globalOrdinals(segmentOrdinals);, +            } else {, +                globalOrdinals = segmentOrdinals;, +            }, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/InternalGlobalOrdinalsBuilder.java, +            // this does include the [] from the array in the impl name, +            String implName = segmentOrdToGlobalOrdLookups.getClass().getSimpleName();, +                    if (segmentOrdToGlobalOrdDelta.size() == maxOrd) {, +                        // This means that a segment contains all the value and in that case segment ordinals, +                        // can be used as global ordinals. This will save an extra lookup per hit., +                        sources[i] = null;, +                    } else {, +, +                }, +                    if (segmentOrdToGlobalOrdLookup.size() == maxOrd) {, +                        // idem as above, +                        sources[i] = null;, +                    } else {, +                }, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +            final Ordinals.Docs globalOrdinals;, +            if (segmentOrdToGlobalOrdLookup != null) {, +                globalOrdinals = segmentOrdToGlobalOrdLookup.globalOrdinals(segmentOrdinals);, +            } else {, +                globalOrdinals = segmentOrdinals;, +            }, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/InternalGlobalOrdinalsBuilder.java, +            // this does include the [] from the array in the impl name, +            String implName = segmentOrdToGlobalOrdLookups.getClass().getSimpleName();, +                    if (segmentOrdToGlobalOrdDelta.size() == maxOrd) {, +                        // This means that a segment contains all the value and in that case segment ordinals, +                        // can be used as global ordinals. This will save an extra lookup per hit., +                        sources[i] = null;, +                    } else {, +, +                }, +                    if (segmentOrdToGlobalOrdLookup.size() == maxOrd) {, +                        // idem as above, +                        sources[i] = null;, +                    } else {, +                }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +        collectExistingBucket(doc, bucketOrd);, +    }, +, +    /**, +     * Same as {@link #collectBucket(int, long)}, but doesn't check if the docCounts needs to be re-sized., +     */, +    protected final void collectExistingBucket(int doc, long bucketOrd) throws IOException {, +     * Initializes the docCounts to the specified size., +     */, +    public void initializeDocCounts(long maxOrd) {, +        docCounts = bigArrays.grow(docCounts, maxOrd);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +            final Ordinals.Docs globalOrdinals;, +            if (segmentOrdToGlobalOrdLookup != null) {, +                globalOrdinals = segmentOrdToGlobalOrdLookup.globalOrdinals(segmentOrdinals);, +            } else {, +                globalOrdinals = segmentOrdinals;, +            }, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/InternalGlobalOrdinalsBuilder.java, +            // this does include the [] from the array in the impl name, +            String implName = segmentOrdToGlobalOrdLookups.getClass().getSimpleName();, +                    if (segmentOrdToGlobalOrdDelta.size() == maxOrd) {, +                        // This means that a segment contains all the value and in that case segment ordinals, +                        // can be used as global ordinals. This will save an extra lookup per hit., +                        sources[i] = null;, +                    } else {, +, +                }, +                    if (segmentOrdToGlobalOrdLookup.size() == maxOrd) {, +                        // idem as above, +                        sources[i] = null;, +                    } else {, +                }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +        collectExistingBucket(doc, bucketOrd);, +    }, +, +    /**, +     * Same as {@link #collectBucket(int, long)}, but doesn't check if the docCounts needs to be re-sized., +     */, +    protected final void collectExistingBucket(int doc, long bucketOrd) throws IOException {, +     * Initializes the docCounts to the specified size., +     */, +    public void initializeDocCounts(long maxOrd) {, +        docCounts = bigArrays.grow(docCounts, maxOrd);]