[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary) {, +        primary.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request, IndexShard replica) {, +        replica.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", replica.shardId());, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary) {, +        primary.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request, IndexShard replica) {, +        replica.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", replica.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult shardOperationOnPrimary(BasicReplicationRequest shardRequest, IndexShard primary) {, +        primary.refresh("api");, +        logger.trace("{} refresh request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(BasicReplicationRequest request, IndexShard replica) {, +        replica.refresh("api");, +        logger.trace("{} refresh request executed on replica", replica.shardId());, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary) {, +        primary.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request, IndexShard replica) {, +        replica.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", replica.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult shardOperationOnPrimary(BasicReplicationRequest shardRequest, IndexShard primary) {, +        primary.refresh("api");, +        logger.trace("{} refresh request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(BasicReplicationRequest request, IndexShard replica) {, +        replica.refresh("api");, +        logger.trace("{} refresh request executed on replica", replica.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java, +    private static final Pattern INDEX_NAME_PATTERN = Pattern.compile("^.*-\\d+$");, +            throw new IllegalArgumentException("index name [" + sourceIndexName + "] does not match pattern '^.*-\\d+$'");, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {]