[+++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/AwsS3Service.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +    /**, +     * Creates an {@code AmazonS3} client from the given repository metadata and node settings., +     */, +    AmazonS3 client(RepositoryMetaData metadata, Settings repositorySettings);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/AwsS3Service.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +    /**, +     * Creates an {@code AmazonS3} client from the given repository metadata and node settings., +     */, +    AmazonS3 client(RepositoryMetaData metadata, Settings repositorySettings);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/DefaultS3OutputStream.java, +    DefaultS3OutputStream(S3BlobStore blobStore, String bucketName, String blobName, int bufferSizeInBytes, boolean serverSideEncryption) {, +        super(blobStore, bucketName, blobName, bufferSizeInBytes, serverSideEncryption);, +        InputStream inputStream;, +        while (multipartId == null) {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/AwsS3Service.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +    /**, +     * Creates an {@code AmazonS3} client from the given repository metadata and node settings., +     */, +    AmazonS3 client(RepositoryMetaData metadata, Settings repositorySettings);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/DefaultS3OutputStream.java, +    DefaultS3OutputStream(S3BlobStore blobStore, String bucketName, String blobName, int bufferSizeInBytes, boolean serverSideEncryption) {, +        super(blobStore, bucketName, blobName, bufferSizeInBytes, serverSideEncryption);, +        InputStream inputStream;, +        while (multipartId == null) {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/InternalAwsS3Service.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +import static org.elasticsearch.repositories.s3.S3Repository.getValue;, +, +    public synchronized AmazonS3 client(RepositoryMetaData metadata, Settings repositorySettings) {, +        Integer maxRetries = getValue(metadata.settings(), settings,, +            S3Repository.Repository.MAX_RETRIES_SETTING,, +            S3Repository.Repositories.MAX_RETRIES_SETTING);, +        boolean useThrottleRetries = getValue(metadata.settings(), settings,, +            S3Repository.Repository.USE_THROTTLE_RETRIES_SETTING,, +            S3Repository.Repositories.USE_THROTTLE_RETRIES_SETTING);, +        // If the user defined a path style access setting, we rely on it,, +        // otherwise we use the default value set by the SDK, +        Boolean pathStyleAccess = null;, +        if (S3Repository.Repository.PATH_STYLE_ACCESS_SETTING.exists(metadata.settings()) ||, +                S3Repository.Repositories.PATH_STYLE_ACCESS_SETTING.exists(settings)) {, +            pathStyleAccess = getValue(metadata.settings(), settings,, +                S3Repository.Repository.PATH_STYLE_ACCESS_SETTING,, +                S3Repository.Repositories.PATH_STYLE_ACCESS_SETTING);, +        }, +, +        logger.debug("creating S3 client with client_name [{}], endpoint [{}], max_retries [{}], " +, +                     "use_throttle_retries [{}], path_style_access [{}]",, +                     clientName, foundEndpoint, maxRetries, useThrottleRetries, pathStyleAccess);, +, +            return getValue(repositorySettings, globalSettings, repositorySetting, globalSetting);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/AwsS3Service.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +    /**, +     * Creates an {@code AmazonS3} client from the given repository metadata and node settings., +     */, +    AmazonS3 client(RepositoryMetaData metadata, Settings repositorySettings);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/DefaultS3OutputStream.java, +    DefaultS3OutputStream(S3BlobStore blobStore, String bucketName, String blobName, int bufferSizeInBytes, boolean serverSideEncryption) {, +        super(blobStore, bucketName, blobName, bufferSizeInBytes, serverSideEncryption);, +        InputStream inputStream;, +        while (multipartId == null) {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/InternalAwsS3Service.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +import static org.elasticsearch.repositories.s3.S3Repository.getValue;, +, +    public synchronized AmazonS3 client(RepositoryMetaData metadata, Settings repositorySettings) {, +        Integer maxRetries = getValue(metadata.settings(), settings,, +            S3Repository.Repository.MAX_RETRIES_SETTING,, +            S3Repository.Repositories.MAX_RETRIES_SETTING);, +        boolean useThrottleRetries = getValue(metadata.settings(), settings,, +            S3Repository.Repository.USE_THROTTLE_RETRIES_SETTING,, +            S3Repository.Repositories.USE_THROTTLE_RETRIES_SETTING);, +        // If the user defined a path style access setting, we rely on it,, +        // otherwise we use the default value set by the SDK, +        Boolean pathStyleAccess = null;, +        if (S3Repository.Repository.PATH_STYLE_ACCESS_SETTING.exists(metadata.settings()) ||, +                S3Repository.Repositories.PATH_STYLE_ACCESS_SETTING.exists(settings)) {, +            pathStyleAccess = getValue(metadata.settings(), settings,, +                S3Repository.Repository.PATH_STYLE_ACCESS_SETTING,, +                S3Repository.Repositories.PATH_STYLE_ACCESS_SETTING);, +        }, +, +        logger.debug("creating S3 client with client_name [{}], endpoint [{}], max_retries [{}], " +, +                     "use_throttle_retries [{}], path_style_access [{}]",, +                     clientName, foundEndpoint, maxRetries, useThrottleRetries, pathStyleAccess);, +, +            return getValue(repositorySettings, globalSettings, repositorySetting, globalSetting);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +            blobStore.bufferSizeInBytes(), blobStore.serverSideEncryption());, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/AwsS3Service.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +    /**, +     * Creates an {@code AmazonS3} client from the given repository metadata and node settings., +     */, +    AmazonS3 client(RepositoryMetaData metadata, Settings repositorySettings);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/DefaultS3OutputStream.java]