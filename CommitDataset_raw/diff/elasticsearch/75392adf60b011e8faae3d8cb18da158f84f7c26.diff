[+++ b/server/src/main/java/org/elasticsearch/search/SearchHits.java, +        return Objects.hash(totalHits, maxScore, Arrays.hashCode(hits));, +++ b/server/src/main/java/org/elasticsearch/search/SearchHits.java, +        return Objects.hash(totalHits, maxScore, Arrays.hashCode(hits));, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java, +            SearchHits hits = SearchHitsTests.createTestItem(true, true);, +++ b/server/src/main/java/org/elasticsearch/search/SearchHits.java, +        return Objects.hash(totalHits, maxScore, Arrays.hashCode(hits));, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java, +            SearchHits hits = SearchHitsTests.createTestItem(true, true);, +++ b/server/src/test/java/org/elasticsearch/search/SearchHitTests.java, +    public static SearchHit createTestItem(boolean withOptionalInnerHits, boolean withShardTarget) {, +        return createTestItem(randomFrom(XContentType.values()), withOptionalInnerHits, withShardTarget);, +    }, +, +    public static SearchHit createTestItem(XContentType xContentType, boolean withOptionalInnerHits, boolean withShardTarget) {, +            fields = GetResultTests.randomDocumentFields(xContentType).v2();, +            hit.sourceRef(RandomObjects.randomSource(random(), xContentType));, +                    innerHits.put(randomAlphaOfLength(5),, +                        SearchHitsTests.createTestItem(xContentType, false, withShardTarget));, +        if (withShardTarget && randomBoolean()) {, +        return createTestItem(randomFrom(XContentType.values()), randomBoolean(), randomBoolean());, +        SearchHit searchHit = createTestItem(xContentType, true, false);, +        boolean humanReadable = randomBoolean();, +        SearchHit searchHit = createTestItem(xContentType, true, true);, +    static Explanation createExplanation(int depth) {, +++ b/server/src/main/java/org/elasticsearch/search/SearchHits.java, +        return Objects.hash(totalHits, maxScore, Arrays.hashCode(hits));, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java, +            SearchHits hits = SearchHitsTests.createTestItem(true, true);, +++ b/server/src/test/java/org/elasticsearch/search/SearchHitTests.java, +    public static SearchHit createTestItem(boolean withOptionalInnerHits, boolean withShardTarget) {, +        return createTestItem(randomFrom(XContentType.values()), withOptionalInnerHits, withShardTarget);, +    }, +, +    public static SearchHit createTestItem(XContentType xContentType, boolean withOptionalInnerHits, boolean withShardTarget) {, +            fields = GetResultTests.randomDocumentFields(xContentType).v2();, +            hit.sourceRef(RandomObjects.randomSource(random(), xContentType));, +                    innerHits.put(randomAlphaOfLength(5),, +                        SearchHitsTests.createTestItem(xContentType, false, withShardTarget));, +        if (withShardTarget && randomBoolean()) {, +        return createTestItem(randomFrom(XContentType.values()), randomBoolean(), randomBoolean());, +        SearchHit searchHit = createTestItem(xContentType, true, false);, +        boolean humanReadable = randomBoolean();, +        SearchHit searchHit = createTestItem(xContentType, true, true);, +    static Explanation createExplanation(int depth) {, +++ b/server/src/test/java/org/elasticsearch/search/SearchHitsTests.java, +import org.elasticsearch.action.OriginalIndices;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.text.Text;, +import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.test.AbstractStreamableXContentTestCase;, +import java.util.Collections;, +public class SearchHitsTests extends AbstractStreamableXContentTestCase<SearchHits> {, +    public static SearchHits createTestItem(boolean withOptionalInnerHits, boolean withShardTarget) {, +        return createTestItem(randomFrom(XContentType.values()), withOptionalInnerHits, withShardTarget);, +, +    private static SearchHit[] createSearchHitArray(int size, XContentType xContentType, boolean withOptionalInnerHits,, +                                                    boolean withShardTarget) {, +        SearchHit[] hits = new SearchHit[size];, +        for (int i = 0; i < hits.length; i++) {, +            hits[i] = SearchHitTests.createTestItem(xContentType, withOptionalInnerHits, withShardTarget);, +        }, +        return hits;, +    }, +, +    private static TotalHits randomTotalHits() {, +        return new TotalHits(totalHits, relation);, +    }, +    public static SearchHits createTestItem(XContentType xContentType, boolean withOptionalInnerHits, boolean withShardTarget) {, +        int searchHits = randomIntBetween(0, 5);, +        SearchHit[] hits = createSearchHitArray(searchHits, xContentType, withOptionalInnerHits, withShardTarget);, +        float maxScore = frequently() ? randomFloat() : Float.NaN;, +        return new SearchHits(hits, frequently() ? randomTotalHits() : null, maxScore);, +    }, +, +    @Override, +    protected SearchHits mutateInstance(SearchHits instance) {, +        switch (randomIntBetween(0, 2)) {, +            case 0:, +                return new SearchHits(createSearchHitArray(instance.getHits().length + 1,, +                    randomFrom(XContentType.values()), false, randomBoolean()),, +                    instance.getTotalHits(), instance.getMaxScore());, +            case 1:, +                final TotalHits totalHits;, +                if (instance.getTotalHits() == null) {, +                    totalHits = randomTotalHits();, +                } else {, +                    totalHits = null;, +                }, +                return new SearchHits(instance.getHits(), totalHits, instance.getMaxScore());, +            case 2:, +                final float maxScore;, +                if (Float.isNaN(instance.getMaxScore())) {, +                    maxScore = randomFloat();, +                } else {]