[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                request.onRetry();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                request.onRetry();, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +, +    @Override, +    public String toString() {, +        return "DeleteVersionValue{" +, +            "version=" + version() + ", " +, +            "time=" + time +, +            '}';, +    }, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                request.onRetry();, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +, +    @Override, +    public String toString() {, +        return "DeleteVersionValue{" +, +            "version=" + version() + ", " +, +            "time=" + time +, +            '}';, +    }, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.search.TermQuery;, +            final boolean canOptimizeAddDocument = canOptimizeAddDocument(index);, +            if (canOptimizeAddDocument) {, +                // document does not exists, we can optimize for create, but double check if assertions are running, +                assert assertDocDoesNotExist(index, canOptimizeAddDocument == false);, +    /**, +     * Asserts that the doc in the index operation really doesn't exist, +     */, +    private boolean assertDocDoesNotExist(final Index index, final boolean allowDeleted) throws IOException {, +        final VersionValue versionValue = versionMap.getUnderLock(index.uid());, +        if (versionValue != null) {, +            if (versionValue.delete() == false || allowDeleted == false) {, +                throw new AssertionError("doc [" + index.type() + "][" + index.id() + "] exists in version map (version " + versionValue + ")");, +            }, +        } else {, +            try (final Searcher searcher = acquireSearcher("assert doc doesn't exist")) {, +                final long docsWithId = searcher.searcher().count(new TermQuery(index.uid()));, +                if (docsWithId > 0) {, +                    throw new AssertionError("doc [" + index.type() + "][" + index.id() + "] exists [" + docsWithId + "] times in index");, +                }, +            }, +        }, +        return true;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                request.onRetry();, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +, +    @Override, +    public String toString() {, +        return "DeleteVersionValue{" +, +            "version=" + version() + ", " +, +            "time=" + time +, +            '}';, +    }, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.search.TermQuery;, +            final boolean canOptimizeAddDocument = canOptimizeAddDocument(index);, +            if (canOptimizeAddDocument) {, +                // document does not exists, we can optimize for create, but double check if assertions are running, +                assert assertDocDoesNotExist(index, canOptimizeAddDocument == false);, +    /**, +     * Asserts that the doc in the index operation really doesn't exist, +     */, +    private boolean assertDocDoesNotExist(final Index index, final boolean allowDeleted) throws IOException {, +        final VersionValue versionValue = versionMap.getUnderLock(index.uid());, +        if (versionValue != null) {, +            if (versionValue.delete() == false || allowDeleted == false) {, +                throw new AssertionError("doc [" + index.type() + "][" + index.id() + "] exists in version map (version " + versionValue + ")");, +            }, +        } else {, +            try (final Searcher searcher = acquireSearcher("assert doc doesn't exist")) {, +                final long docsWithId = searcher.searcher().count(new TermQuery(index.uid()));, +                if (docsWithId > 0) {, +                    throw new AssertionError("doc [" + index.type() + "][" + index.id() + "] exists [" + docsWithId + "] times in index");, +                }, +            }, +        }, +        return true;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/VersionValue.java, +, +    @Override, +    public String toString() {, +        return "VersionValue{" +, +            "version=" + version +, +            '}';, +    }, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                request.onRetry();, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +, +    @Override]