[+++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +                            throw new ParsingException(parser.getTokenLocation(), "[" + NAME + "] query does not support type " + tStr);, +                                "[" + NAME + "] query does not support [" + currentFieldName + "]");, +                            "[" + NAME + "] unknown token [" + token + "] after [" + currentFieldName + "]");, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +                            throw new ParsingException(parser.getTokenLocation(), "[" + NAME + "] query does not support type " + tStr);, +                                "[" + NAME + "] query does not support [" + currentFieldName + "]");, +                            "[" + NAME + "] unknown token [" + token + "] after [" + currentFieldName + "]");, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import java.util.HashMap;, +    public static final ParseField QUERY_NAME_FIELD = new ParseField(NAME);, +    private static final ParseField SLOP_FIELD = new ParseField("slop", "phrase_slop");, +    private static final ParseField ZERO_TERMS_QUERY_FIELD = new ParseField("zero_terms_query");, +    private static final ParseField LENIENT_FIELD = new ParseField("lenient");, +    private static final ParseField CUTOFF_FREQUENCY_FIELD = new ParseField("cutoff_frequency");, +    private static final ParseField TIE_BREAKER_FIELD = new ParseField("tie_breaker");, +    private static final ParseField USE_DIS_MAX_FIELD = new ParseField("use_dis_max");, +    private static final ParseField FUZZY_REWRITE_FIELD = new ParseField("fuzzy_rewrite");, +    private static final ParseField MINIMUM_SHOULD_MATCH_FIELD = new ParseField("minimum_should_match");, +    private static final ParseField OPERATOR_FIELD = new ParseField("operator");, +    private static final ParseField MAX_EXPANSIONS_FIELD = new ParseField("max_expansions");, +    private static final ParseField PREFIX_LENGTH_FIELD = new ParseField("prefix_length");, +    private static final ParseField ANALYZER_FIELD = new ParseField("analyzer");, +    private static final ParseField TYPE_FIELD = new ParseField("type");, +    private static final ParseField QUERY_FIELD = new ParseField("query");, +    private static final ParseField FIELDS_FIELD = new ParseField("fields");, +, +    public static final MultiMatchQueryBuilder PROTOTYPE = new MultiMatchQueryBuilder("");, +        builder.field(QUERY_FIELD.getPreferredName(), value);, +        builder.startArray(FIELDS_FIELD.getPreferredName());, +        builder.field(TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH));, +        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());, +            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);, +        builder.field(SLOP_FIELD.getPreferredName(), slop);, +        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);, +        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);, +            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);, +            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);, +            builder.field(USE_DIS_MAX_FIELD.getPreferredName(), useDisMax);, +            builder.field(TIE_BREAKER_FIELD.getPreferredName(), tieBreaker);, +        builder.field(LENIENT_FIELD.getPreferredName(), lenient);, +            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);, +        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());, +    public static MultiMatchQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {, +        XContentParser parser = parseContext.parser();, +, +        Object value = null;, +        Map<String, Float> fieldsBoosts = new HashMap<>();, +        MultiMatchQueryBuilder.Type type = DEFAULT_TYPE;, +        String analyzer = null;, +        int slop = DEFAULT_PHRASE_SLOP;, +        Fuzziness fuzziness = null;, +        int prefixLength = DEFAULT_PREFIX_LENGTH;, +        int maxExpansions = DEFAULT_MAX_EXPANSIONS;, +        Operator operator = DEFAULT_OPERATOR;, +        String minimumShouldMatch = null;, +        String fuzzyRewrite = null;, +        Boolean useDisMax = null;, +        Float tieBreaker = null;, +        Float cutoffFrequency = null;, +        boolean lenient = DEFAULT_LENIENCY;, +        MatchQuery.ZeroTermsQuery zeroTermsQuery = DEFAULT_ZERO_TERMS_QUERY;, +, +        float boost = AbstractQueryBuilder.DEFAULT_BOOST;, +        String queryName = null;, +, +        XContentParser.Token token;, +        String currentFieldName = null;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (parseContext.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) {, +                if (token == XContentParser.Token.START_ARRAY) {, +                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                        parseFieldAndBoost(parser, fieldsBoosts);, +                    }, +                } else if (token.isValue()) {, +                    parseFieldAndBoost(parser, fieldsBoosts);, +                } else {, +                    throw new ParsingException(parser.getTokenLocation(),, +                            "[" + NAME + "] query does not support [" + currentFieldName + "]");, +                }, +            } else if (token.isValue()) {, +                if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {, +                    value = parser.objectText();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, TYPE_FIELD)) {, +                    type = MultiMatchQueryBuilder.Type.parse(parser.text(), parseContext.parseFieldMatcher());, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) {, +                    analyzer = parser.text();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {, +                    boost = parser.floatValue();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, SLOP_FIELD)) {, +                    slop = parser.intValue();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, Fuzziness.FIELD)) {, +                    fuzziness = Fuzziness.parse(parser);, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, PREFIX_LENGTH_FIELD)) {, +                    prefixLength = parser.intValue();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) {]