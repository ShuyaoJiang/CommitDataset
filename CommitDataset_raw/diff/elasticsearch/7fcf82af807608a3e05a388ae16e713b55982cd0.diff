[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/facet/TermsFacetSearchBenchmark.java, +        stats.add(termsStats("terms_stats_s_l", "s_value", "l_value", null));, +        stats.add(termsStats("terms_stats_s_lm", "s_value", "lm_value", null));, +, +, +    private static StatsResult termsStats(String name, String keyField, String valueField, String executionHint) {, +        long totalQueryTime;, +, +        client.admin().indices().prepareClearCache().setFieldDataCache(true).execute().actionGet();, +, +        System.out.println("--> Warmup (" + name + ")...");, +        // run just the child query, warm up first, +        for (int j = 0; j < QUERY_WARMUP; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setSearchType(SearchType.COUNT), +                    .setQuery(matchAllQuery()), +                    .addFacet(termsStatsFacet(name).keyField(keyField).valueField(valueField)), +                    .execute().actionGet();, +            if (j == 0) {, +                System.out.println("--> Loading (" + name + "): took: " + searchResponse.took());, +            }, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +        }, +        System.out.println("--> Warmup (" + name + ") DONE");, +, +, +        System.out.println("--> Running (" + name + ")...");, +        totalQueryTime = 0;, +        for (int j = 0; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setSearchType(SearchType.COUNT), +                    .setQuery(matchAllQuery()), +                    .addFacet(termsStatsFacet(name).keyField(keyField).valueField(valueField)), +                    .execute().actionGet();, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +            totalQueryTime += searchResponse.tookInMillis();, +        }, +        System.out.println("--> Terms Facet (" + name + "), hint(" + executionHint + "): " + (totalQueryTime / QUERY_COUNT) + "ms");, +        return new StatsResult(name, totalQueryTime);, +    }, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/facet/TermsFacetSearchBenchmark.java, +        stats.add(termsStats("terms_stats_s_l", "s_value", "l_value", null));, +        stats.add(termsStats("terms_stats_s_lm", "s_value", "lm_value", null));, +, +, +    private static StatsResult termsStats(String name, String keyField, String valueField, String executionHint) {, +        long totalQueryTime;, +, +        client.admin().indices().prepareClearCache().setFieldDataCache(true).execute().actionGet();, +, +        System.out.println("--> Warmup (" + name + ")...");, +        // run just the child query, warm up first, +        for (int j = 0; j < QUERY_WARMUP; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setSearchType(SearchType.COUNT), +                    .setQuery(matchAllQuery()), +                    .addFacet(termsStatsFacet(name).keyField(keyField).valueField(valueField)), +                    .execute().actionGet();, +            if (j == 0) {, +                System.out.println("--> Loading (" + name + "): took: " + searchResponse.took());, +            }, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +        }, +        System.out.println("--> Warmup (" + name + ") DONE");, +, +, +        System.out.println("--> Running (" + name + ")...");, +        totalQueryTime = 0;, +        for (int j = 0; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setSearchType(SearchType.COUNT), +                    .setQuery(matchAllQuery()), +                    .addFacet(termsStatsFacet(name).keyField(keyField).valueField(valueField)), +                    .execute().actionGet();, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +            totalQueryTime += searchResponse.tookInMillis();, +        }, +        System.out.println("--> Terms Facet (" + name + "), hint(" + executionHint + "): " + (totalQueryTime / QUERY_COUNT) + "ms");, +        return new StatsResult(name, totalQueryTime);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/termsstats/doubles/TermsStatsDoubleFacetCollector.java, +        final ValueAggregator valueAggregator = new ValueAggregator();, +, +                valueAggregator.doubleEntry = doubleEntry;, +                valueFieldData.forEachValueInDoc(docId, valueAggregator);, +, +        public static class ValueAggregator implements NumericFieldData.DoubleValueInDocProc {, +, +            InternalTermsStatsDoubleFacet.DoubleEntry doubleEntry;, +, +            @Override public void onValue(int docId, double value) {, +                if (value < doubleEntry.min) {]