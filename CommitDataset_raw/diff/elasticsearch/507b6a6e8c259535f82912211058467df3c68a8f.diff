[+++ b/src/main/java/org/elasticsearch/common/lucene/store/BufferedChecksumIndexOutput.java, +        try {, +        } finally {, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/store/BufferedChecksumIndexOutput.java, +        try {, +        } finally {, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.apache.lucene.util.IOUtils;, +            boolean success = false;, +            try {, +                    , +                    final StoreIndexOutput storeIndexOutput = new StoreIndexOutput(metaData, out, name);, +                    success = true;, +                    return storeIndexOutput;, +                }, +            } finally {, +                if (!success) {, +                    IOUtils.closeWhileHandlingException(out);, +                }, +            boolean success = false;, +            try {, +                success = true;, +            } finally {, +                if (!success) {, +                    IOUtils.closeWhileHandlingException(in);, +                }, +            }, +++ b/src/main/java/org/elasticsearch/common/lucene/store/BufferedChecksumIndexOutput.java, +        try {, +        } finally {, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.apache.lucene.util.IOUtils;, +            boolean success = false;, +            try {, +                    , +                    final StoreIndexOutput storeIndexOutput = new StoreIndexOutput(metaData, out, name);, +                    success = true;, +                    return storeIndexOutput;, +                }, +            } finally {, +                if (!success) {, +                    IOUtils.closeWhileHandlingException(out);, +                }, +            boolean success = false;, +            try {, +                success = true;, +            } finally {, +                if (!success) {, +                    IOUtils.closeWhileHandlingException(in);, +                }, +            }, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +            assertNoFailures(client().admin().indices().prepareRefresh(index).execute().get());, +++ b/src/main/java/org/elasticsearch/common/lucene/store/BufferedChecksumIndexOutput.java, +        try {, +        } finally {, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.apache.lucene.util.IOUtils;, +            boolean success = false;, +            try {, +                    , +                    final StoreIndexOutput storeIndexOutput = new StoreIndexOutput(metaData, out, name);, +                    success = true;, +                    return storeIndexOutput;, +                }, +            } finally {, +                if (!success) {, +                    IOUtils.closeWhileHandlingException(out);, +                }, +            boolean success = false;, +            try {, +                success = true;, +            } finally {, +                if (!success) {, +                    IOUtils.closeWhileHandlingException(in);, +                }, +            }, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +            assertNoFailures(client().admin().indices().prepareRefresh(index).execute().get());, +++ b/src/test/java/org/elasticsearch/index/store/mock/MockDirectoryHelper.java, +    public static final String RANDOM_IO_EXCEPTION_RATE = "index.store.mock.random.io_exception_rate";, +    public static final String RANDOM_IO_EXCEPTION_RATE_ON_OPEN = "index.store.mock.random.io_exception_rate_on_open";, +    public static final String RANDOM_SEED = "index.store.mock.random.seed";, +    public static final String RANDOM_THROTTLE = "index.store.mock.random.throttle";, +    public static final String CHECK_INDEX_ON_CLOSE = "index.store.mock.check_index_on_close";, +++ b/src/main/java/org/elasticsearch/common/lucene/store/BufferedChecksumIndexOutput.java, +        try {, +        } finally {, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.apache.lucene.util.IOUtils;]