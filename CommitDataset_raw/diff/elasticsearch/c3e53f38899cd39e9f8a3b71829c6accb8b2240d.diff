[+++ b/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotTests.java, +    public void waitForBlock(String node, String repository, TimeValue timeout) throws InterruptedException {, +        MockRepository mockRepository = (MockRepository) repositoriesService.repository(repository);, +        while (System.currentTimeMillis() - start < timeout.millis()) {, +            if (mockRepository.blocked()) {, +                return;, +    public static String blockNodeWithIndex(String index) {, +        for(String node : cluster().nodesInclude("test-idx")) {, +            ((MockRepository)cluster().getInstance(RepositoriesService.class, node).repository("test-repo")).blockOnDataFiles(true);, +            return node;, +        fail("No nodes for the index " + index + " found");, +        return null;, +    }, +, +    public static void unblockNode(String node) {, +        ((MockRepository)cluster().getInstance(RepositoriesService.class, node).repository("test-repo")).unblock();, +++ b/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotTests.java, +    public void waitForBlock(String node, String repository, TimeValue timeout) throws InterruptedException {, +        MockRepository mockRepository = (MockRepository) repositoriesService.repository(repository);, +        while (System.currentTimeMillis() - start < timeout.millis()) {, +            if (mockRepository.blocked()) {, +                return;, +    public static String blockNodeWithIndex(String index) {, +        for(String node : cluster().nodesInclude("test-idx")) {, +            ((MockRepository)cluster().getInstance(RepositoriesService.class, node).repository("test-repo")).blockOnDataFiles(true);, +            return node;, +        fail("No nodes for the index " + index + " found");, +        return null;, +    }, +, +    public static void unblockNode(String node) {, +        ((MockRepository)cluster().getInstance(RepositoriesService.class, node).repository("test-repo")).unblock();, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +        // Pick one node and block it, +        String blockedNode = blockNodeWithIndex("test-idx");, +, +        logger.info("--> waiting for block to kick in");, +        waitForBlock(blockedNode, "test-repo", TimeValue.timeValueSeconds(60));, +, +        unblockNode(blockedNode);, +, +++ b/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotTests.java, +    public void waitForBlock(String node, String repository, TimeValue timeout) throws InterruptedException {, +        MockRepository mockRepository = (MockRepository) repositoriesService.repository(repository);, +        while (System.currentTimeMillis() - start < timeout.millis()) {, +            if (mockRepository.blocked()) {, +                return;, +    public static String blockNodeWithIndex(String index) {, +        for(String node : cluster().nodesInclude("test-idx")) {, +            ((MockRepository)cluster().getInstance(RepositoriesService.class, node).repository("test-repo")).blockOnDataFiles(true);, +            return node;, +        fail("No nodes for the index " + index + " found");, +        return null;, +    }, +, +    public static void unblockNode(String node) {, +        ((MockRepository)cluster().getInstance(RepositoriesService.class, node).repository("test-repo")).unblock();, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +        // Pick one node and block it, +        String blockedNode = blockNodeWithIndex("test-idx");, +, +        logger.info("--> waiting for block to kick in");, +        waitForBlock(blockedNode, "test-repo", TimeValue.timeValueSeconds(60));, +, +        unblockNode(blockedNode);, +, +++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +        // Pick one node and block it, +        String blockedNode = blockNodeWithIndex("test-idx");, +, +, +        logger.info("--> waiting for block to kick in");, +        waitForBlock(blockedNode, "test-repo", TimeValue.timeValueSeconds(60));, +, +        logger.info("--> execution was blocked on node [{}], moving shards away from this node", blockedNode);, +, +        logger.info("--> unblocking blocked node");, +        unblockNode(blockedNode);, +        SnapshotInfo snapshotInfo = waitForCompletion("test-repo", "test-snap", TimeValue.timeValueSeconds(600));, +, +, +++ b/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotTests.java, +    public void waitForBlock(String node, String repository, TimeValue timeout) throws InterruptedException {, +        MockRepository mockRepository = (MockRepository) repositoriesService.repository(repository);, +        while (System.currentTimeMillis() - start < timeout.millis()) {, +            if (mockRepository.blocked()) {, +                return;, +    public static String blockNodeWithIndex(String index) {, +        for(String node : cluster().nodesInclude("test-idx")) {, +            ((MockRepository)cluster().getInstance(RepositoriesService.class, node).repository("test-repo")).blockOnDataFiles(true);, +            return node;, +        fail("No nodes for the index " + index + " found");, +        return null;, +    }, +, +    public static void unblockNode(String node) {, +        ((MockRepository)cluster().getInstance(RepositoriesService.class, node).repository("test-repo")).unblock();, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +        // Pick one node and block it, +        String blockedNode = blockNodeWithIndex("test-idx");]