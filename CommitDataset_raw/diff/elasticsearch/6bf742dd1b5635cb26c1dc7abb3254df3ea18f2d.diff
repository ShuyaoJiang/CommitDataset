[+++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java, +import static org.hamcrest.Matchers.hasToString;, +        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class));, +        assertThat(e.getCause(), hasToString(containsString("test")));, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java, +import static org.hamcrest.Matchers.hasToString;, +        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class));, +        assertThat(e.getCause(), hasToString(containsString("test")));, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 59 used to be EsRejectedExecutionException, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java, +import static org.hamcrest.Matchers.hasToString;, +        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class));, +        assertThat(e.getCause(), hasToString(containsString("test")));, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 59 used to be EsRejectedExecutionException, +++ b/server/src/main/java/org/elasticsearch/ExceptionsHelper.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +            } else if (t instanceof EsRejectedExecutionException) {, +                return RestStatus.TOO_MANY_REQUESTS;, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java, +import static org.hamcrest.Matchers.hasToString;, +        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class));, +        assertThat(e.getCause(), hasToString(containsString("test")));, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 59 used to be EsRejectedExecutionException, +++ b/server/src/main/java/org/elasticsearch/ExceptionsHelper.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +            } else if (t instanceof EsRejectedExecutionException) {, +                return RestStatus.TOO_MANY_REQUESTS;, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +                    // TODO: remove the if branch when master is bumped to 8.0.0, +                    assert Version.CURRENT.major < 8;, +                    if (ord == 59) {, +                        final ElasticsearchException ex = new ElasticsearchException(this);, +                        final boolean isExecutorShutdown = readBoolean();, +                        return (T) new EsRejectedExecutionException(ex.getMessage(), isExecutorShutdown);, +                    }, +                case 18:, +                    final boolean isExecutorShutdown = readBoolean();, +                    return (T) readStackTrace(new EsRejectedExecutionException(readOptionalString(), isExecutorShutdown), this);, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java, +import static org.hamcrest.Matchers.hasToString;, +        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class));, +        assertThat(e.getCause(), hasToString(containsString("test")));, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 59 used to be EsRejectedExecutionException, +++ b/server/src/main/java/org/elasticsearch/ExceptionsHelper.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +            } else if (t instanceof EsRejectedExecutionException) {, +                return RestStatus.TOO_MANY_REQUESTS;, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +                    // TODO: remove the if branch when master is bumped to 8.0.0, +                    assert Version.CURRENT.major < 8;, +                    if (ord == 59) {, +                        final ElasticsearchException ex = new ElasticsearchException(this);, +                        final boolean isExecutorShutdown = readBoolean();, +                        return (T) new EsRejectedExecutionException(ex.getMessage(), isExecutorShutdown);, +                    }, +                case 18:, +                    final boolean isExecutorShutdown = readBoolean();, +                    return (T) readStackTrace(new EsRejectedExecutionException(readOptionalString(), isExecutorShutdown), this);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +            } else if (throwable instanceof EsRejectedExecutionException) {, +                // TODO: remove the if branch when master is bumped to 8.0.0, +                assert Version.CURRENT.major < 8;, +                if (version.before(Version.V_7_0_0_alpha1)) {, +                    /*, +                     * This is a backwards compatibility layer when speaking to nodes that still treated EsRejectedExceutionException as an, +                     * instance of ElasticsearchException. As such, we serialize this in a way that the receiving node would read this as an, +                     * EsRejectedExecutionException., +                     */, +                    final ElasticsearchException ex = new ElasticsearchException(throwable.getMessage());, +                    writeVInt(0);, +                    writeVInt(59);, +                    ex.writeTo(this);, +                    writeBoolean(((EsRejectedExecutionException) throwable).isExecutorShutdown());, +                    return;, +                    writeVInt(18);, +                    writeBoolean(((EsRejectedExecutionException) throwable).isExecutorShutdown());, +                    writeCause = false;, +                }, +            } else {, +                final ElasticsearchException ex;, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java, +import static org.hamcrest.Matchers.hasToString;, +        assertThat(e.getCause(), instanceOf(EsRejectedExecutionException.class));, +        assertThat(e.getCause(), hasToString(containsString("test")));, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 59 used to be EsRejectedExecutionException, +++ b/server/src/main/java/org/elasticsearch/ExceptionsHelper.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +            } else if (t instanceof EsRejectedExecutionException) {, +                return RestStatus.TOO_MANY_REQUESTS;, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +                    // TODO: remove the if branch when master is bumped to 8.0.0]