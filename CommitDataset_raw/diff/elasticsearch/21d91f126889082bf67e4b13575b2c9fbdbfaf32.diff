[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +import static org.elasticsearch.discovery.DiscoverySettings.NO_MASTER_BLOCK_ID;, +    private final DiscoverySettings discoverySettings;, +        this.discoverySettings = new DiscoverySettings(settings, clusterSettings);, +                    .addGlobalBlock(discoverySettings.getNoMasterBlock())), +            assert (applierState.nodes().getMasterNodeId() == null) == applierState.blocks().hasGlobalBlock(NO_MASTER_BLOCK_ID);, +            assert clusterState.blocks().hasGlobalBlock(NO_MASTER_BLOCK_ID) == false :, +                discoverySettings.getNoMasterBlock()).build();, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +import static org.elasticsearch.discovery.DiscoverySettings.NO_MASTER_BLOCK_ID;, +    private final DiscoverySettings discoverySettings;, +        this.discoverySettings = new DiscoverySettings(settings, clusterSettings);, +                    .addGlobalBlock(discoverySettings.getNoMasterBlock())), +            assert (applierState.nodes().getMasterNodeId() == null) == applierState.blocks().hasGlobalBlock(NO_MASTER_BLOCK_ID);, +            assert clusterState.blocks().hasGlobalBlock(NO_MASTER_BLOCK_ID) == false :, +                discoverySettings.getNoMasterBlock()).build();, +++ b/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.common.settings.Settings.Builder;, +import static org.elasticsearch.discovery.DiscoverySettings.NO_MASTER_BLOCK_ALL;, +import static org.elasticsearch.discovery.DiscoverySettings.NO_MASTER_BLOCK_SETTING;, +import static org.elasticsearch.discovery.DiscoverySettings.NO_MASTER_BLOCK_WRITES;, +import static org.hamcrest.Matchers.contains;, +    public void testAppliesNoMasterBlockWritesByDefault() {, +        testAppliesNoMasterBlock(null, NO_MASTER_BLOCK_WRITES);, +    }, +, +    public void testAppliesNoMasterBlockWritesIfConfigured() {, +        testAppliesNoMasterBlock("write", NO_MASTER_BLOCK_WRITES);, +    }, +, +    public void testAppliesNoMasterBlockAllIfConfigured() {, +        testAppliesNoMasterBlock("all", NO_MASTER_BLOCK_ALL);, +    }, +, +    private void testAppliesNoMasterBlock(String noMasterBlockSetting, ClusterBlock expectedBlock) {, +        final Cluster cluster = new Cluster(3);, +        cluster.runRandomly();, +        cluster.stabilise();, +, +        final ClusterNode leader = cluster.getAnyLeader();, +        leader.submitUpdateTask("update NO_MASTER_BLOCK_SETTING", cs -> {, +            final Builder settingsBuilder = Settings.builder().put(cs.metaData().persistentSettings());, +            settingsBuilder.put(NO_MASTER_BLOCK_SETTING.getKey(), noMasterBlockSetting);, +            return ClusterState.builder(cs).metaData(MetaData.builder(cs.metaData()).persistentSettings(settingsBuilder.build())).build();, +        });, +        cluster.runFor(DEFAULT_CLUSTER_STATE_UPDATE_DELAY, "committing setting update");, +, +        leader.disconnect();, +        cluster.runFor(defaultMillis(FOLLOWER_CHECK_INTERVAL_SETTING) + DEFAULT_CLUSTER_STATE_UPDATE_DELAY, "detecting disconnection");, +, +        assertThat(leader.clusterApplier.lastAppliedClusterState.blocks().global(), contains(expectedBlock));, +, +        // TODO reboot the leader and verify that the same block is applied when it restarts, +    }, +]