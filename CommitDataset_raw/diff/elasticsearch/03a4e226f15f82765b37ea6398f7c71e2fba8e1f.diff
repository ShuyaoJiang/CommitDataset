[+++ b/core/pom.xml, +            <groupId>org.codehaus.groovy</groupId>, +            <artifactId>groovy-all</artifactId>, +            <classifier>indy</classifier>, +            <optional>true</optional>, +        </dependency>, +        <dependency>, +++ b/core/pom.xml, +            <groupId>org.codehaus.groovy</groupId>, +            <artifactId>groovy-all</artifactId>, +            <classifier>indy</classifier>, +            <optional>true</optional>, +        </dependency>, +        <dependency>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        TokenStream source;, +        List<String> tlist = new ArrayList<>();, +, +        try {, +            source.close();, +        } catch (IOException e) {, +            // ignore, +                    try {, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                        source.close();, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                source.close();, +++ b/core/pom.xml, +            <groupId>org.codehaus.groovy</groupId>, +            <artifactId>groovy-all</artifactId>, +            <classifier>indy</classifier>, +            <optional>true</optional>, +        </dependency>, +        <dependency>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        TokenStream source;, +        List<String> tlist = new ArrayList<>();, +, +        try {, +            source.close();, +        } catch (IOException e) {, +            // ignore, +                    try {, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                        source.close();, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                source.close();, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      TokenStream ts = queryAnalyzer.tokenStream("", key.toString());, +      try {, +      } finally {, +          IOUtils.closeWhileHandlingException(ts);, +++ b/core/pom.xml, +            <groupId>org.codehaus.groovy</groupId>, +            <artifactId>groovy-all</artifactId>, +            <classifier>indy</classifier>, +            <optional>true</optional>, +        </dependency>, +        <dependency>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        TokenStream source;, +        List<String> tlist = new ArrayList<>();, +, +        try {, +            source.close();, +        } catch (IOException e) {, +            // ignore, +                    try {, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                        source.close();, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                source.close();, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      TokenStream ts = queryAnalyzer.tokenStream("", key.toString());, +      try {, +      } finally {, +          IOUtils.closeWhileHandlingException(ts);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        GROOVY_SCRIPT_COMPILATION_EXCEPTION(org.elasticsearch.script.groovy.GroovyScriptCompilationException.class, org.elasticsearch.script.groovy.GroovyScriptCompilationException::new, 95),, +        GROOVY_SCRIPT_EXECUTION_EXCEPTION(org.elasticsearch.script.groovy.GroovyScriptExecutionException.class, org.elasticsearch.script.groovy.GroovyScriptExecutionException::new, 122),, +++ b/core/pom.xml, +            <groupId>org.codehaus.groovy</groupId>, +            <artifactId>groovy-all</artifactId>, +            <classifier>indy</classifier>, +            <optional>true</optional>, +        </dependency>, +        <dependency>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        TokenStream source;, +        List<String> tlist = new ArrayList<>();, +, +        try {, +            source.close();, +        } catch (IOException e) {, +            // ignore, +                    try {, +                        TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                        source.close();, +                TokenStream source = getAnalyzer().tokenStream(field, tmp.toString());, +                source.close();]