[+++ b/core/src/test/java/org/elasticsearch/tribe/TribeIT.java, +import java.util.function.Function;, +                Strings.randomBase64UUID(getRandom()), nodeConfigurationSource, 0, false, SECOND_CLUSTER_NODE_PREFIX, Collections.emptyList(), Function.identity());, +++ b/core/src/test/java/org/elasticsearch/tribe/TribeIT.java, +import java.util.function.Function;, +                Strings.randomBase64UUID(getRandom()), nodeConfigurationSource, 0, false, SECOND_CLUSTER_NODE_PREFIX, Collections.emptyList(), Function.identity());, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +                InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING, nodePrefix, mockPlugins, getClientWrapper());, +    }, +, +    /**, +     * Returns a function that allows to wrap / filter all clients that are exposed by the test cluster. This is useful, +     * for debugging or request / response pre and post processing. It also allows to intercept all calls done by the test, +     * framework. By default this method returns an identity function {@link Function#identity()}., +     */, +    protected Function<Client,Client> getClientWrapper() {, +        return Function.identity();, +++ b/core/src/test/java/org/elasticsearch/tribe/TribeIT.java, +import java.util.function.Function;, +                Strings.randomBase64UUID(getRandom()), nodeConfigurationSource, 0, false, SECOND_CLUSTER_NODE_PREFIX, Collections.emptyList(), Function.identity());, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +                InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING, nodePrefix, mockPlugins, getClientWrapper());, +    }, +, +    /**, +     * Returns a function that allows to wrap / filter all clients that are exposed by the test cluster. This is useful, +     * for debugging or request / response pre and post processing. It also allows to intercept all calls done by the test, +     * framework. By default this method returns an identity function {@link Function#identity()}., +     */, +    protected Function<Client,Client> getClientWrapper() {, +        return Function.identity();, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +import java.util.function.Function;, +    private Function<Client, Client> clientWrapper;, +                               boolean enableHttpPipelining, String nodePrefix, Collection<Class<? extends Plugin>> mockPlugins, Function<Client, Client> clientWrapper) {, +        this.clientWrapper = clientWrapper;, +            if (nodeClient == null) {, +                nodeClient = node.client();, +            return clientWrapper.apply(nodeClient);, +            if (transportClient == null) {, +                transportClient = new TransportClientFactory(false, nodeConfigurationSource.transportClientSettings(), baseDir, nodeMode, nodeConfigurationSource.transportClientPlugins()).client(node, clusterName);, +            }, +            return clientWrapper.apply(transportClient);, +++ b/core/src/test/java/org/elasticsearch/tribe/TribeIT.java, +import java.util.function.Function;, +                Strings.randomBase64UUID(getRandom()), nodeConfigurationSource, 0, false, SECOND_CLUSTER_NODE_PREFIX, Collections.emptyList(), Function.identity());, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +                InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING, nodePrefix, mockPlugins, getClientWrapper());, +    }, +, +    /**, +     * Returns a function that allows to wrap / filter all clients that are exposed by the test cluster. This is useful, +     * for debugging or request / response pre and post processing. It also allows to intercept all calls done by the test, +     * framework. By default this method returns an identity function {@link Function#identity()}., +     */, +    protected Function<Client,Client> getClientWrapper() {, +        return Function.identity();, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +import java.util.function.Function;, +    private Function<Client, Client> clientWrapper;, +                               boolean enableHttpPipelining, String nodePrefix, Collection<Class<? extends Plugin>> mockPlugins, Function<Client, Client> clientWrapper) {, +        this.clientWrapper = clientWrapper;, +            if (nodeClient == null) {, +                nodeClient = node.client();, +            return clientWrapper.apply(nodeClient);, +            if (transportClient == null) {, +                transportClient = new TransportClientFactory(false, nodeConfigurationSource.transportClientSettings(), baseDir, nodeMode, nodeConfigurationSource.transportClientPlugins()).client(node, clusterName);, +            }, +            return clientWrapper.apply(transportClient);, +++ b/test/framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java, +import java.util.function.Function;, +        InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList(), Function.identity());, +        InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList(), Function.identity());, +        InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName1, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList(), Function.identity());, +        InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList(), Function.identity());]