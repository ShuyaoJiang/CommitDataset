[+++ b/core/src/main/java/org/elasticsearch/script/ScriptEngine.java, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngine.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngine.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +        Map<String, ScriptEngine> enginesByName = getEnginesByName(scriptEngines);, +            scriptService = new ScriptService(settings, enginesByName, scriptContextRegistry);, +    private Map<String, ScriptEngine> getEnginesByName(List<ScriptEngine> engines) {, +        Map<String, ScriptEngine> enginesByName = new HashMap<>();, +        for (ScriptEngine engine : engines) {, +            ScriptEngine existing = enginesByName.put(engine.getType(), engine);, +            if (existing != null) {, +                throw new IllegalArgumentException("scripting language [" + engine.getType() + "] defined for engine [" +, +                    existing.getClass().getName() + "] and [" + engine.getClass().getName());, +            }, +        }, +        return Collections.unmodifiableMap(enginesByName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngine.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +        Map<String, ScriptEngine> enginesByName = getEnginesByName(scriptEngines);, +            scriptService = new ScriptService(settings, enginesByName, scriptContextRegistry);, +    private Map<String, ScriptEngine> getEnginesByName(List<ScriptEngine> engines) {, +        Map<String, ScriptEngine> enginesByName = new HashMap<>();, +        for (ScriptEngine engine : engines) {, +            ScriptEngine existing = enginesByName.put(engine.getType(), engine);, +            if (existing != null) {, +                throw new IllegalArgumentException("scripting language [" + engine.getType() + "] defined for engine [" +, +                    existing.getClass().getName() + "] and [" + engine.getClass().getName());, +            }, +        }, +        return Collections.unmodifiableMap(enginesByName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +    public ScriptService(Settings settings, Map<String, ScriptEngine> engines, ScriptContextRegistry scriptContextRegistry) throws IOException {, +        this.engines = Objects.requireNonNull(engines);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngine.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +        Map<String, ScriptEngine> enginesByName = getEnginesByName(scriptEngines);, +            scriptService = new ScriptService(settings, enginesByName, scriptContextRegistry);, +    private Map<String, ScriptEngine> getEnginesByName(List<ScriptEngine> engines) {, +        Map<String, ScriptEngine> enginesByName = new HashMap<>();, +        for (ScriptEngine engine : engines) {, +            ScriptEngine existing = enginesByName.put(engine.getType(), engine);, +            if (existing != null) {, +                throw new IllegalArgumentException("scripting language [" + engine.getType() + "] defined for engine [" +, +                    existing.getClass().getName() + "] and [" + engine.getClass().getName());, +            }, +        }, +        return Collections.unmodifiableMap(enginesByName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +    public ScriptService(Settings settings, Map<String, ScriptEngine> engines, ScriptContextRegistry scriptContextRegistry) throws IOException {, +        this.engines = Objects.requireNonNull(engines);, +++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java, +                Collections.singletonMap(engine.getType(), engine),, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngine.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +        Map<String, ScriptEngine> enginesByName = getEnginesByName(scriptEngines);, +            scriptService = new ScriptService(settings, enginesByName, scriptContextRegistry);, +    private Map<String, ScriptEngine> getEnginesByName(List<ScriptEngine> engines) {, +        Map<String, ScriptEngine> enginesByName = new HashMap<>();, +        for (ScriptEngine engine : engines) {, +            ScriptEngine existing = enginesByName.put(engine.getType(), engine);, +            if (existing != null) {, +                throw new IllegalArgumentException("scripting language [" + engine.getType() + "] defined for engine [" +, +                    existing.getClass().getName() + "] and [" + engine.getClass().getName());, +            }, +        }, +        return Collections.unmodifiableMap(enginesByName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +    public ScriptService(Settings settings, Map<String, ScriptEngine> engines, ScriptContextRegistry scriptContextRegistry) throws IOException {, +        this.engines = Objects.requireNonNull(engines);, +++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java, +                Collections.singletonMap(engine.getType(), engine),, +++ b/core/src/test/java/org/elasticsearch/index/IndexModuleTests.java, +        scriptService = new ScriptService(settings, Collections.emptyMap(), scriptContextRegistry);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngine.java, +++ /dev/null]