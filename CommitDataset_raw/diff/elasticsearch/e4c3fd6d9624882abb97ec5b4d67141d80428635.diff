[+++ b/docs/build.gradle, +  exclude 'reference/graph/explore.asciidoc', +++ b/docs/build.gradle, +  exclude 'reference/graph/explore.asciidoc', +++ b/docs/reference/graph/explore.asciidoc, +[role="xpack"], +[testenv="platinum"], +[[graph-explore-api]], +== Explore API, +, +The Graph explore API enables you to extract and summarize information about, +the documents and terms in your Elasticsearch index., +, +The easiest way to understand the behaviour of this API is to use the, +Graph UI to explore connections. You can view the most recent request submitted, +to the `_explore` endpoint from the *Last request* panel. For more information,, +see {kibana-ref}/graph-getting-started.html[Getting Started with Graph]., +, +For additional information about working with the explore API, see the Graph, +{kibana-ref}/graph-troubleshooting.html[Troubleshooting] and, +{kibana-ref}/graph-limitations.html[Limitations] topics., +, +[float], +=== Request, +, +`POST <index>/_xpack/graph/_explore`, +, +[float], +=== Description, +, +An initial request to the `_explore` API contains a seed query that identifies, +the documents of interest and specifies the fields that define the vertices, +and connections you want to include in the graph. Subsequent `_explore` requests, +enable you to _spider out_ from one more vertices of interest. You can exclude, +vertices that have already been returned., +, +[float], +=== Request Body, +, +query::, +A seed query that identifies the documents of interest. Can be any valid, +Elasticsearch query. For example:, ++, +[source,js], +--------------------------------------------------, +"query": {, +  "bool": {, +    "must": {, +      "match": {, +        "query.raw": "midi", +      }, +    },, +    "filter": [, +      {, +        "range": {, +          "query_time": {, +            "gte": "2015-10-01 00:00:00", +          }, +        }, +      }, +    ], +  }, +}, +--------------------------------------------------, +, +, +vertices::, +Specifies or more fields that contain the terms you want to include in the, +graph as vertices. For example:, ++, +[source,js], +--------------------------------------------------, +"vertices": [, +  {, +    "field": "product", +    }, +], +--------------------------------------------------, +, +field::: Identifies a field in the documents of interest., +include::: Identifies the terms of interest that form the starting points, +from which you want to spider out. You do not have to specify a seed query, +if you specify an include clause. The include clause implicitly querys for, +documents that contain any of the listed terms listed., +In addition to specifying a simple array of strings, you can also pass, +objects with `term` and `boost` values to boost matches on particular terms., +exclude:::, +The `exclude` clause prevents the specified terms from being included in, +the results., +size:::, +Specifies the maximum number of vertex terms returned for each, +field. Defaults to 5., +min_doc_count:::, +Specifies how many documents must contain a pair of terms before it is, +considered to be a useful connection. This setting acts as a certainty, +threshold. Defaults to 3., +shard_min_doc_count:::, +This advanced setting controls how many documents on a particular shard have, +to contain a pair of terms before the connection is returned for global, +consideration. Defaults to 2.]