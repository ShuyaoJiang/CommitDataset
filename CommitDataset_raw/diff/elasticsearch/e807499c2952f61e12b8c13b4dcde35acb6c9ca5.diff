[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.skip_cause";, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, false) == false) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.skip_cause";, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, false) == false) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        // TODO: add version + unassigned info check. see #12387, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.skip_cause";, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, false) == false) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        // TODO: add version + unassigned info check. see #12387, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.skip_cause";, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, false) == false) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        // TODO: add version + unassigned info check. see #12387, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +         * Removes the specified value from the given key., +         * Returns true if the value was found and removed, false otherwise., +         */, +        public boolean removeArrayElement(String key, String value) {, +            // TODO: this is too crazy, we should just have a multimap..., +            String oldValue = get(key);, +            if (oldValue != null) {, +                // single valued case, +                boolean match = oldValue.equals(value);, +                if (match) {, +                    remove(key);, +                }, +                return match;, +            }, +, +            // multi valued, +            int i = 0;, +            while (true) {, +                String toCheck = map.get(key + '.' + i++);, +                if (toCheck == null) {, +                    return false;, +                } else if (toCheck.equals(value)) {, +                    break;, +                }, +            }, +            // found the value, shift values after it back one index, +            int j = i + 1;, +            while (true) {, +                String toMove = map.get(key + '.' + j++);, +                if (toMove == null) {, +                    return true;, +                }, +                put(key + '.' + i++, toMove);, +            }, +        }, +, +        /**, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.skip_cause";, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, false) == false) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        // TODO: add version + unassigned info check. see #12387, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +         * Removes the specified value from the given key., +         * Returns true if the value was found and removed, false otherwise., +         */, +        public boolean removeArrayElement(String key, String value) {, +            // TODO: this is too crazy, we should just have a multimap..., +            String oldValue = get(key);, +            if (oldValue != null) {, +                // single valued case, +                boolean match = oldValue.equals(value);, +                if (match) {, +                    remove(key);, +                }, +                return match;, +            }, +, +            // multi valued, +            int i = 0;, +            while (true) {, +                String toCheck = map.get(key + '.' + i++);, +                if (toCheck == null) {, +                    return false;, +                } else if (toCheck.equals(value)) {, +                    break;, +                }, +            }, +            // found the value, shift values after it back one index, +            int j = i + 1;, +            while (true) {, +                String toMove = map.get(key + '.' + j++);, +                if (toMove == null) {, +                    return true;, +                }, +                put(key + '.' + i++, toMove);, +            }, +        }]