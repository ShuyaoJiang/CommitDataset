[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetModelSnapshotsAction.java, +import java.util.stream.Collectors;, +                        listener.onResponse(new Response(clearQuantiles(page)));, +        public static QueryPage<ModelSnapshot> clearQuantiles(QueryPage<ModelSnapshot> page) {, +            if (page.results() == null) {, +                return page;, +            }, +            return new QueryPage<>(page.results().stream().map(snapshot ->, +                    new ModelSnapshot.Builder(snapshot).setQuantiles(null).build()), +                    .collect(Collectors.toList()), page.count(), page.getResultsField());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetModelSnapshotsAction.java, +import java.util.stream.Collectors;, +                        listener.onResponse(new Response(clearQuantiles(page)));, +        public static QueryPage<ModelSnapshot> clearQuantiles(QueryPage<ModelSnapshot> page) {, +            if (page.results() == null) {, +                return page;, +            }, +            return new QueryPage<>(page.results().stream().map(snapshot ->, +                    new ModelSnapshot.Builder(snapshot).setQuantiles(null).build()), +                    .collect(Collectors.toList()), page.count(), page.getResultsField());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/RevertModelSnapshotAction.java, +                handler.accept(new ModelSnapshot.Builder(modelSnapshot).setQuantiles(null).build());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetModelSnapshotsAction.java, +import java.util.stream.Collectors;, +                        listener.onResponse(new Response(clearQuantiles(page)));, +        public static QueryPage<ModelSnapshot> clearQuantiles(QueryPage<ModelSnapshot> page) {, +            if (page.results() == null) {, +                return page;, +            }, +            return new QueryPage<>(page.results().stream().map(snapshot ->, +                    new ModelSnapshot.Builder(snapshot).setQuantiles(null).build()), +                    .collect(Collectors.toList()), page.count(), page.getResultsField());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/RevertModelSnapshotAction.java, +                handler.accept(new ModelSnapshot.Builder(modelSnapshot).setQuantiles(null).build());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateModelSnapshotAction.java, +                    ModelSnapshot.Builder updatedSnapshotBuilder = new ModelSnapshot.Builder(changeCandidates.get(0));, +                    updatedSnapshotBuilder.setDescription(request.getDescriptionString());, +                    ModelSnapshot updatedSnapshot = updatedSnapshotBuilder.build();, +                    jobManager.updateModelSnapshot(updatedSnapshot, b -> {, +                        listener.onResponse(new Response(new ModelSnapshot.Builder(updatedSnapshot).setQuantiles(null).build()));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetModelSnapshotsAction.java, +import java.util.stream.Collectors;, +                        listener.onResponse(new Response(clearQuantiles(page)));, +        public static QueryPage<ModelSnapshot> clearQuantiles(QueryPage<ModelSnapshot> page) {, +            if (page.results() == null) {, +                return page;, +            }, +            return new QueryPage<>(page.results().stream().map(snapshot ->, +                    new ModelSnapshot.Builder(snapshot).setQuantiles(null).build()), +                    .collect(Collectors.toList()), page.count(), page.getResultsField());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/RevertModelSnapshotAction.java, +                handler.accept(new ModelSnapshot.Builder(modelSnapshot).setQuantiles(null).build());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateModelSnapshotAction.java, +                    ModelSnapshot.Builder updatedSnapshotBuilder = new ModelSnapshot.Builder(changeCandidates.get(0));, +                    updatedSnapshotBuilder.setDescription(request.getDescriptionString());, +                    ModelSnapshot updatedSnapshot = updatedSnapshotBuilder.build();, +                    jobManager.updateModelSnapshot(updatedSnapshot, b -> {, +                        listener.onResponse(new Response(new ModelSnapshot.Builder(updatedSnapshot).setQuantiles(null).build()));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/util/QueryPage.java, +    public ParseField getResultsField() {, +        return resultsField;, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetModelSnapshotsAction.java, +import java.util.stream.Collectors;, +                        listener.onResponse(new Response(clearQuantiles(page)));, +        public static QueryPage<ModelSnapshot> clearQuantiles(QueryPage<ModelSnapshot> page) {, +            if (page.results() == null) {, +                return page;, +            }, +            return new QueryPage<>(page.results().stream().map(snapshot ->, +                    new ModelSnapshot.Builder(snapshot).setQuantiles(null).build()), +                    .collect(Collectors.toList()), page.count(), page.getResultsField());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/RevertModelSnapshotAction.java, +                handler.accept(new ModelSnapshot.Builder(modelSnapshot).setQuantiles(null).build());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateModelSnapshotAction.java, +                    ModelSnapshot.Builder updatedSnapshotBuilder = new ModelSnapshot.Builder(changeCandidates.get(0));, +                    updatedSnapshotBuilder.setDescription(request.getDescriptionString());, +                    ModelSnapshot updatedSnapshot = updatedSnapshotBuilder.build();, +                    jobManager.updateModelSnapshot(updatedSnapshot, b -> {, +                        listener.onResponse(new Response(new ModelSnapshot.Builder(updatedSnapshot).setQuantiles(null).build()));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/util/QueryPage.java, +    public ParseField getResultsField() {, +        return resultsField;, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +        get(indexName, DataCounts.TYPE.getPreferredName(), DataCounts.documentId(jobId), handler, errorHandler,, +    private <T, U> void get(String indexName, String type, String id, Consumer<T> handler, Consumer<Exception> errorHandler,, +        get(indexName, Quantiles.TYPE.getPreferredName(), quantilesId, handler, errorHandler, Quantiles.PARSER, () -> {, +        get(AnomalyDetectorsIndex.jobResultsAliasedName(jobId), ModelSnapshot.TYPE.getPreferredName(),, +                ModelSnapshot.documentId(jobId, modelSnapshotId), handler, errorHandler,, +                (parser, context) -> ModelSnapshot.PARSER.apply(parser, null).build(), () -> null);, +        get(indexName, Result.TYPE.getPreferredName(), ModelSizeStats.documentId(jobId),, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetModelSnapshotsAction.java, +import java.util.stream.Collectors;, +                        listener.onResponse(new Response(clearQuantiles(page)));, +        public static QueryPage<ModelSnapshot> clearQuantiles(QueryPage<ModelSnapshot> page) {, +            if (page.results() == null) {, +                return page;]