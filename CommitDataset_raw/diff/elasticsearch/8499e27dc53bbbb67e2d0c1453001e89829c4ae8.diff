[+++ b/core/src/main/java/org/elasticsearch/script/Script.java, +import java.util.function.Supplier;, +    /**, +     * A {@link Supplier} implementation for use when reading a {@link Script}, +     * using {@link StreamInput#readOptionalStreamable(Supplier)}, +     */, +    public static final Supplier<Script> SUPPLIER = new Supplier<Script>() {, +, +        @Override, +        public Script get() {, +            return new Script();, +        }, +    };, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +import java.util.function.Supplier;, +    /**, +     * A {@link Supplier} implementation for use when reading a {@link Script}, +     * using {@link StreamInput#readOptionalStreamable(Supplier)}, +     */, +    public static final Supplier<Script> SUPPLIER = new Supplier<Script>() {, +, +        @Override, +        public Script get() {, +            return new Script();, +        }, +    };, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.Objects;, +        public Factory(String name) {, +        }, +, +        /**, +         * Set the <tt>init</tt> script., +         */, +        public void initScript(Script initScript) {, +        }, +, +        /**, +         * Set the <tt>map</tt> script., +         */, +        public void mapScript(Script mapScript) {, +        }, +, +        /**, +         * Set the <tt>combine</tt> script., +         */, +        public void combineScript(Script combineScript) {, +        }, +, +        /**, +         * Set the <tt>reduce</tt> script., +         */, +        public void reduceScript(Script reduceScript) {, +        }, +, +        /**, +         * Set parameters that will be available in the <tt>init</tt>,, +         * <tt>map</tt> and <tt>combine</tt> phases., +         */, +        public void params(Map<String, Object> params) {, +        @Override, +        protected XContentBuilder internalXContent(XContentBuilder builder, Params builderParams) throws IOException {, +            builder.startObject();, +            if (initScript != null) {, +                builder.field(ScriptedMetricParser.INIT_SCRIPT_FIELD.getPreferredName(), initScript);, +            }, +, +            if (mapScript != null) {, +                builder.field(ScriptedMetricParser.MAP_SCRIPT_FIELD.getPreferredName(), mapScript);, +            }, +, +            if (combineScript != null) {, +                builder.field(ScriptedMetricParser.COMBINE_SCRIPT_FIELD.getPreferredName(), combineScript);, +            }, +, +            if (reduceScript != null) {, +                builder.field(ScriptedMetricParser.REDUCE_SCRIPT_FIELD.getPreferredName(), reduceScript);, +            }, +            if (params != null) {, +                builder.field(ScriptedMetricParser.PARAMS_FIELD.getPreferredName());, +                builder.map(params);, +            }, +            builder.endObject();, +            return builder;, +        }, +, +        @Override, +        protected AggregatorFactory doReadFrom(String name, StreamInput in) throws IOException {, +            Factory factory = new Factory(name);, +            factory.initScript = in.readOptionalStreamable(Script.SUPPLIER);, +            factory.mapScript = in.readOptionalStreamable(Script.SUPPLIER);, +            factory.combineScript = in.readOptionalStreamable(Script.SUPPLIER);, +            factory.reduceScript = in.readOptionalStreamable(Script.SUPPLIER);, +            if (in.readBoolean()) {, +                factory.params = in.readMap();, +            }, +            return factory;]