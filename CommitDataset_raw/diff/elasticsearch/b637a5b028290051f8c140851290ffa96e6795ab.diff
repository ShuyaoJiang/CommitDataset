[+++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +import com.carrotsearch.ant.tasks.junit4.events.TestStartedEvent, +import com.carrotsearch.ant.tasks.junit4.events.aggregated.AggregatedQuitEvent, +import com.carrotsearch.ant.tasks.junit4.events.aggregated.AggregatedSuiteStartedEvent, +import com.carrotsearch.ant.tasks.junit4.events.aggregated.ChildBootstrap, +import com.carrotsearch.ant.tasks.junit4.events.aggregated.HeartBeatEvent, +    ProgressLogger parentProgressLogger, +    ProgressLogger suiteLogger, +    ProgressLogger testLogger, +    ProgressLogger[] slaveLoggers, +        parentProgressLogger = factory.newOperation(TestProgressLogger), +        parentProgressLogger.setDescription('Randomized test runner'), +        parentProgressLogger.started(), +        suiteLogger = factory.newOperation(TestProgressLogger, parentProgressLogger), +        suiteLogger.setDescription('Suite logger'), +        suiteLogger.started("Suites: 0/" + totalSuites), +        testLogger = factory.newOperation(TestProgressLogger, parentProgressLogger), +        testLogger.setDescription('Test logger'), +        testLogger.started('Tests: completed: 0, failed: 0, ignored: 0'), +        slaveLoggers = new ProgressLogger[e.slaveCount], +        for (int i = 0; i < e.slaveCount; ++i) {, +            slaveLoggers[i] = factory.newOperation(TestProgressLogger, parentProgressLogger), +            slaveLoggers[i].setDescription("J${i} test logger"), +            slaveLoggers[i].started("J${i}: initializing..."), +        }, +    void onChildBootstrap(ChildBootstrap e) throws IOException {, +        slaveLoggers[e.getSlave().id].progress("J${e.slave.id}: starting (pid ${e.slave.pidString})"), +    @Subscribe, +    void onQuit(AggregatedQuitEvent e) throws IOException {, +        suiteLogger.completed(), +        testLogger.completed(), +        for (ProgressLogger slaveLogger : slaveLoggers) {, +            slaveLogger.completed(), +        }, +        parentProgressLogger.completed(), +    }, +, +    @Subscribe, +    void onSuiteStart(AggregatedSuiteStartedEvent e) throws IOException {, +        String suiteName = simpleName(e.suiteStartedEvent.description.className), +        slaveLoggers[e.slave.id].progress("J${e.slave.id}: ${suiteName} - initializing"), +        suiteLogger.progress("Suites: " + suitesCompleted + "/" + totalSuites), +    @Subscribe, +    void onTestResult(AggregatedTestResultEvent e) throws IOException {, +        final String statusMessage, +        testsCompleted++, +        switch (e.status) {, +        case ERROR:, +        case FAILURE:, +            testsFailed++, +            statusMessage = "failed", +            break, +        case IGNORED:, +        case IGNORED_ASSUMPTION:, +            testsIgnored++, +            statusMessage = "ignored", +            break, +        case OK:, +            String time = formatDurationInSeconds(e.executionTime), +            statusMessage = "completed [${time}]", +            break, +        default:, +            throw new IllegalArgumentException("Unknown test status: [${e.status}]"), +        testLogger.progress("Tests: completed: ${testsCompleted}, failed: ${testsFailed}, ignored: ${testsIgnored}"), +        String testName = simpleName(e.description.className) + '.' + e.description.methodName, +        slaveLoggers[e.slave.id].progress("J${e.slave.id}: ${testName} ${statusMessage}"), +    }, +, +    @Subscribe, +    void onTestStarted(TestStartedEvent e) throws IOException {, +        String testName = simpleName(e.description.className) + '.' + e.description.methodName, +        slaveLoggers[e.slave.id].progress("J${e.slave.id}: ${testName} ..."), +    }, +, +    @Subscribe, +    void onHeartbeat(HeartBeatEvent e) throws IOException {, +        String testName = simpleName(e.description.className) + '.' + e.description.methodName, +        String time = formatDurationInSeconds(e.getNoEventDuration()), +        slaveLoggers[e.slave.id].progress("J${e.slave.id}: ${testName} stalled for ${time}")]