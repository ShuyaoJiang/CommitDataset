[+++ b/TESTING.asciidoc, +gradle test -Dtests.logger.level=DEBUG, +++ b/TESTING.asciidoc, +gradle test -Dtests.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.logger.level', 'WARN', +++ b/TESTING.asciidoc, +gradle test -Dtests.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.logger.level', 'WARN', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.addAll("-E", "node.portsfile=true"), +        args.addAll("-E", "path.conf=${confDir}"), +++ b/TESTING.asciidoc, +gradle test -Dtests.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.logger.level', 'WARN', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.addAll("-E", "node.portsfile=true"), +        args.addAll("-E", "path.conf=${confDir}"), +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        node = new Node(settings) {, +    private static Environment initialSettings(boolean foreground, String pidFile, Map<String, String> esSettings) {, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, esSettings);, +        // force the class initializer for BootstrapInfo to run before, +        // the security manager is installed, +        BootstrapInfo.init();, +        Environment environment = initialSettings(foreground, pidFile, esSettings);, +++ b/TESTING.asciidoc, +gradle test -Dtests.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.logger.level', 'WARN', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.addAll("-E", "node.portsfile=true"), +        args.addAll("-E", "path.conf=${confDir}"), +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        node = new Node(settings) {, +    private static Environment initialSettings(boolean foreground, String pidFile, Map<String, String> esSettings) {, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, esSettings);, +        // force the class initializer for BootstrapInfo to run before, +        // the security manager is installed, +        BootstrapInfo.init();, +        Environment environment = initialSettings(foreground, pidFile, esSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +, +    public static void init() {, +    }, +, +++ b/TESTING.asciidoc, +gradle test -Dtests.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.logger.level', 'WARN', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.addAll("-E", "node.portsfile=true"), +        args.addAll("-E", "path.conf=${confDir}"), +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        node = new Node(settings) {, +    private static Environment initialSettings(boolean foreground, String pidFile, Map<String, String> esSettings) {, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, esSettings);, +        // force the class initializer for BootstrapInfo to run before, +        // the security manager is installed, +        BootstrapInfo.init();, +        Environment environment = initialSettings(foreground, pidFile, esSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +, +    public static void init() {, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +import org.elasticsearch.cli.SettingCommand;, +class Elasticsearch extends SettingCommand {, +    protected void execute(Terminal terminal, OptionSet options, Map<String, String> settings) throws Exception {, +        init(daemonize, pidFile, settings);, +++ b/TESTING.asciidoc, +gradle test -Dtests.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'tests.logger.level', 'WARN', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.addAll("-E", "node.portsfile=true"), +        args.addAll("-E", "path.conf=${confDir}"), +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        node = new Node(settings) {, +    private static Environment initialSettings(boolean foreground, String pidFile, Map<String, String> esSettings) {, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, esSettings);, +        // force the class initializer for BootstrapInfo to run before, +        // the security manager is installed, +        BootstrapInfo.init();, +        Environment environment = initialSettings(foreground, pidFile, esSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +, +    public static void init() {, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +import org.elasticsearch.cli.SettingCommand;, +class Elasticsearch extends SettingCommand {, +    protected void execute(Terminal terminal, OptionSet options, Map<String, String> settings) throws Exception {, +        init(daemonize, pidFile, settings);, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +import java.io.IOException;]