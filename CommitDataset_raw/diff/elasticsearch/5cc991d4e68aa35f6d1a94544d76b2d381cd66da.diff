[+++ b/.gitignore, +dependency-reduced-pom.xml, +++ b/.gitignore, +dependency-reduced-pom.xml, +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.artifactId}', +++ b/.gitignore, +dependency-reduced-pom.xml, +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.artifactId}', +++ b/bin/plugin, +export HOSTNAME=`hostname -s`, +, +++ b/.gitignore, +dependency-reduced-pom.xml, +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.artifactId}', +++ b/bin/plugin, +export HOSTNAME=`hostname -s`, +, +++ b/bin/plugin.bat, +SET HOSTNAME=%COMPUTERNAME%, +, +++ b/.gitignore, +dependency-reduced-pom.xml, +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.artifactId}', +++ b/bin/plugin, +export HOSTNAME=`hostname -s`, +, +++ b/bin/plugin.bat, +SET HOSTNAME=%COMPUTERNAME%, +, +++ b/config/logging.yml, +, +  # deprecation logging, turn to DEBUG to see them, +  deprecation: INFO, deprecation_log_file, +, +  deprecation: false, +  deprecation_log_file:, +    type: dailyRollingFile, +    file: ${path.logs}/${cluster.name}_deprecation.log, +    datePattern: "'.'yyyy-MM-dd", +    layout:, +      type: pattern, +      conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n", +, +++ b/.gitignore, +dependency-reduced-pom.xml, +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.artifactId}', +++ b/bin/plugin, +export HOSTNAME=`hostname -s`, +, +++ b/bin/plugin.bat, +SET HOSTNAME=%COMPUTERNAME%, +, +++ b/config/logging.yml, +, +  # deprecation logging, turn to DEBUG to see them, +  deprecation: INFO, deprecation_log_file, +, +  deprecation: false, +  deprecation_log_file:, +    type: dailyRollingFile, +    file: ${path.logs}/${cluster.name}_deprecation.log, +    datePattern: "'.'yyyy-MM-dd", +    layout:, +      type: pattern, +      conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n", +, +++ b/dev-tools/build_release.py, +from functools import partial, +# console colors, +COLOR_OK = '\033[92m', +COLOR_END = '\033[0m', +COLOR_FAIL = '\033[91m', +, +def run_and_print(text, run_function):, +  try:, +    print(text, end=''), +    run_function(), +    print(COLOR_OK + 'OK' + COLOR_END), +    return True, +  except RuntimeError:, +    print(COLOR_FAIL + 'NOT OK' + COLOR_END), +    return False, +, +def check_env_var(text, env_var):, +  try:, +    print(text, end=''), +    env[env_var], +    print(COLOR_OK + 'OK' + COLOR_END), +    return True, +  except KeyError:, +    print(COLOR_FAIL + 'NOT OK' + COLOR_END), +    return False, +, +def check_environment_and_commandline_tools(check_only):, +  checks = list()]