[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. When the `Import Options` dialog is presented, add `-Declipse` to the JVM Options box. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. When the `Import Options` dialog is presented, add `-Declipse` to the JVM Options box. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // easy to type bypass so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          if (System.getProperty("eclipse") == null) {, +          }, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. When the `Import Options` dialog is presented, add `-Declipse` to the JVM Options box. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // easy to type bypass so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          if (System.getProperty("eclipse") == null) {, +          }, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. When the `Import Options` dialog is presented, add `-Declipse` to the JVM Options box. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // easy to type bypass so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          if (System.getProperty("eclipse") == null) {, +          }, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length());, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length());, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length());, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. When the `Import Options` dialog is presented, add `-Declipse` to the JVM Options box. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // easy to type bypass so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          if (System.getProperty("eclipse") == null) {, +          }, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length());, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length());, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length());, +++ b/core/src/main/java/org/elasticsearch/index/query/GeohashCellQuery.java, +                            // A string indicates either a geohash or a lat/lon, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. When the `Import Options` dialog is presented, add `-Declipse` to the JVM Options box. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // easy to type bypass so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          if (System.getProperty("eclipse") == null) {, +          }, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length());, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length());, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length());, +++ b/core/src/main/java/org/elasticsearch/index/query/GeohashCellQuery.java, +                            // A string indicates either a geohash or a lat/lon, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchNoneQueryBuilder.java, +    protected void setFinalBoost(Query query) {, +        //no-op this query doesn't support boost, +    }, +, +    @Override, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. When the `Import Options` dialog is presented, add `-Declipse` to the JVM Options box. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // easy to type bypass so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          if (System.getProperty("eclipse") == null) {, +          }, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length());, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length());, +                    fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length());, +++ b/core/src/main/java/org/elasticsearch/index/query/GeohashCellQuery.java, +                            // A string indicates either a geohash or a lat/lon, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchNoneQueryBuilder.java, +    protected void setFinalBoost(Query query) {, +        //no-op this query doesn't support boost, +    }, +, +    @Override]