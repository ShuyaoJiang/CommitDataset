[+++ b/docs/plugins/discovery-ec2.asciidoc, +`node_cache_time`::, +, +    How long the list of hosts is cached to prevent further requests to the AWS API., +    Defaults to `10s`., +, +++ b/docs/plugins/discovery-ec2.asciidoc, +`node_cache_time`::, +, +    How long the list of hosts is cached to prevent further requests to the AWS API., +    Defaults to `10s`., +, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +        public static final String NODE_CACHE_TIME = "discovery.ec2.node_cache_time";, +++ b/docs/plugins/discovery-ec2.asciidoc, +`node_cache_time`::, +, +    How long the list of hosts is cached to prevent further requests to the AWS API., +    Defaults to `10s`., +, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +        public static final String NODE_CACHE_TIME = "discovery.ec2.node_cache_time";, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java, +import com.amazonaws.AmazonClientException;, +import com.amazonaws.AmazonWebServiceRequest;, +import com.amazonaws.retry.RetryPolicy;, +import java.util.Random;, +        // Increase the number of retries in case of 5xx API responses, +        final Random rand = new Random();, +        RetryPolicy retryPolicy = new RetryPolicy(, +                RetryPolicy.RetryCondition.NO_RETRY_CONDITION,, +                new RetryPolicy.BackoffStrategy() {, +                    @Override, +                    public long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest,, +                                                     AmazonClientException exception,, +                                                     int retriesAttempted) {, +                        // with 10 retries the max delay time is 320s/320000ms (10 * 2^5 * 1 * 1000), +                        logger.warn("EC2 API request failed, retry again. Reason was:", exception);, +                        return 1000L * (long) (10d * Math.pow(2, ((double) retriesAttempted) / 2.0d) * (1.0d + rand.nextDouble()));, +                    }, +                },, +                10,, +                false);, +        clientConfiguration.setRetryPolicy(retryPolicy);, +, +++ b/docs/plugins/discovery-ec2.asciidoc, +`node_cache_time`::, +, +    How long the list of hosts is cached to prevent further requests to the AWS API., +    Defaults to `10s`., +, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +        public static final String NODE_CACHE_TIME = "discovery.ec2.node_cache_time";, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java, +import com.amazonaws.AmazonClientException;, +import com.amazonaws.AmazonWebServiceRequest;, +import com.amazonaws.retry.RetryPolicy;, +import java.util.Random;, +        // Increase the number of retries in case of 5xx API responses, +        final Random rand = new Random();, +        RetryPolicy retryPolicy = new RetryPolicy(, +                RetryPolicy.RetryCondition.NO_RETRY_CONDITION,, +                new RetryPolicy.BackoffStrategy() {, +                    @Override, +                    public long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest,, +                                                     AmazonClientException exception,, +                                                     int retriesAttempted) {, +                        // with 10 retries the max delay time is 320s/320000ms (10 * 2^5 * 1 * 1000), +                        logger.warn("EC2 API request failed, retry again. Reason was:", exception);, +                        return 1000L * (long) (10d * Math.pow(2, ((double) retriesAttempted) / 2.0d) * (1.0d + rand.nextDouble()));, +                    }, +                },, +                10,, +                false);, +        clientConfiguration.setRetryPolicy(retryPolicy);, +, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2UnicastHostsProvider.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.SingleObjectCache;, +    private final DiscoNodesCache discoNodes;, +, +        this.discoNodes = new DiscoNodesCache(this.settings.getAsTime(DISCOVERY_EC2.NODE_CACHE_TIME,, +                                              TimeValue.timeValueMillis(10_000L)));, +, +        return discoNodes.getOrRefresh();, +    }, +, +    protected List<DiscoveryNode> fetchDynamicNodes() {, +, +, +    private final class DiscoNodesCache extends SingleObjectCache<List<DiscoveryNode>> {, +, +        private boolean empty = true;, +, +        protected DiscoNodesCache(TimeValue refreshInterval) {, +            super(refreshInterval,  new ArrayList<>());, +        }, +, +        @Override, +        protected boolean needsRefresh() {]