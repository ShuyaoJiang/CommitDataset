[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +            searchAfterBuilder = new SearchAfterBuilder(in);, +                    searchAfterBuilder = SearchAfterBuilder.fromXContent(parser, context.parseFieldMatcher());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +            searchAfterBuilder = new SearchAfterBuilder(in);, +                    searchAfterBuilder = SearchAfterBuilder.fromXContent(parser, context.parseFieldMatcher());, +++ b/core/src/main/java/org/elasticsearch/search/searchafter/SearchAfterBuilder.java, +import org.elasticsearch.common.xcontent.XContentParser;, +public class SearchAfterBuilder implements ToXContent, Writeable<SearchAfterBuilder> {, +    public SearchAfterBuilder() {, +    }, +, +    /**, +     * Read from a stream., +     */, +    public SearchAfterBuilder(StreamInput in) throws IOException {, +        int size = in.readVInt();, +        sortValues = new Object[size];, +        for (int i = 0; i < size; i++) {, +            sortValues[i] = in.readGenericValue();, +        }, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(sortValues.length);, +        for (Object fieldValue : sortValues) {, +            out.writeGenericValue(fieldValue);, +        }, +    }, +, +            throw new IllegalArgumentException(, +                    SEARCH_AFTER.getPreferredName() + " has " + values.length + " value(s) but sort has " + sort.getSort().length + ".");, +        /*, +         * We set the doc id to Integer.MAX_VALUE in order to make sure that the search starts "after" the first document that is equal to, +         * the field values., +         */, +                    throw new IllegalArgumentException("Comparator type [" + sortType.name() + "] for field [" + fieldName, +                            + "] is not supported.");, +            throw new IllegalArgumentException(, +                    "Failed to parse " + SEARCH_AFTER.getPreferredName() + " value for field [" + fieldName + "].", e);, +    public static SearchAfterBuilder fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +                    throw new ParsingException(parser.getTokenLocation(), "Expected [" + XContentParser.Token.VALUE_STRING + "] or [", +                            + XContentParser.Token.VALUE_NUMBER + "] or [" + XContentParser.Token.VALUE_BOOLEAN + "] or [", +                            + XContentParser.Token.VALUE_NULL + "] but found [" + token + "] inside search_after.");, +            throw new ParsingException(parser.getTokenLocation(), "Expected [" + XContentParser.Token.START_ARRAY + "] in [", +                    + SEARCH_AFTER.getPreferredName() + "] but found [" + token + "] inside search_after", parser.getTokenLocation());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +            searchAfterBuilder = new SearchAfterBuilder(in);, +                    searchAfterBuilder = SearchAfterBuilder.fromXContent(parser, context.parseFieldMatcher());, +++ b/core/src/main/java/org/elasticsearch/search/searchafter/SearchAfterBuilder.java, +import org.elasticsearch.common.xcontent.XContentParser;, +public class SearchAfterBuilder implements ToXContent, Writeable<SearchAfterBuilder> {, +    public SearchAfterBuilder() {, +    }, +, +    /**, +     * Read from a stream., +     */, +    public SearchAfterBuilder(StreamInput in) throws IOException {, +        int size = in.readVInt();, +        sortValues = new Object[size];, +        for (int i = 0; i < size; i++) {, +            sortValues[i] = in.readGenericValue();, +        }, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(sortValues.length);, +        for (Object fieldValue : sortValues) {, +            out.writeGenericValue(fieldValue);, +        }, +    }, +, +            throw new IllegalArgumentException(, +                    SEARCH_AFTER.getPreferredName() + " has " + values.length + " value(s) but sort has " + sort.getSort().length + ".");, +        /*, +         * We set the doc id to Integer.MAX_VALUE in order to make sure that the search starts "after" the first document that is equal to, +         * the field values., +         */, +                    throw new IllegalArgumentException("Comparator type [" + sortType.name() + "] for field [" + fieldName, +                            + "] is not supported.");, +            throw new IllegalArgumentException(, +                    "Failed to parse " + SEARCH_AFTER.getPreferredName() + " value for field [" + fieldName + "].", e);, +    public static SearchAfterBuilder fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException {, +                    throw new ParsingException(parser.getTokenLocation(), "Expected [" + XContentParser.Token.VALUE_STRING + "] or [", +                            + XContentParser.Token.VALUE_NUMBER + "] or [" + XContentParser.Token.VALUE_BOOLEAN + "] or [", +                            + XContentParser.Token.VALUE_NULL + "] but found [" + token + "] inside search_after.");, +            throw new ParsingException(parser.getTokenLocation(), "Expected [" + XContentParser.Token.START_ARRAY + "] in [", +                    + SEARCH_AFTER.getPreferredName() + "] but found [" + token + "] inside search_after", parser.getTokenLocation());, +++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java, +            builder.searchAfter(SearchAfterBuilder.fromXContent(parser, null).getSortValues());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +            searchAfterBuilder = new SearchAfterBuilder(in);]