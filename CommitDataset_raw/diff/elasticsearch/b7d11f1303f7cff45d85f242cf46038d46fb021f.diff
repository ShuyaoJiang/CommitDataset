[+++ b/build.gradle, +versionNumber = '0.8.0-SNAPSHOT', +++ b/build.gradle, +versionNumber = '0.8.0-SNAPSHOT', +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.util.xcontent.XContentFactory;, +            builder.startArray("mappings");, +                XContentParser parser = XContentFactory.xContent(entry.getValue()).createParser(entry.getValue());, +                Map<String, Object> mapping = parser.map();, +                parser.close();, +                builder.map(mapping);, +            builder.endArray();, +                        while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                            Map<String, Object> mapping = parser.map();, +                            if (mapping.size() == 1) {, +                                String mappingSource = XContentFactory.jsonBuilder().map(mapping).string();, +, +                                    builder.putMapping(mapping.keySet().iterator().next(), mappingSource);, +                                }, +++ b/build.gradle, +versionNumber = '0.8.0-SNAPSHOT', +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.util.xcontent.XContentFactory;, +            builder.startArray("mappings");, +                XContentParser parser = XContentFactory.xContent(entry.getValue()).createParser(entry.getValue());, +                Map<String, Object> mapping = parser.map();, +                parser.close();, +                builder.map(mapping);, +            builder.endArray();, +                        while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                            Map<String, Object> mapping = parser.map();, +                            if (mapping.size() == 1) {, +                                String mappingSource = XContentFactory.jsonBuilder().map(mapping).string();, +, +                                    builder.putMapping(mapping.keySet().iterator().next(), mappingSource);, +                                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +, +    @Override public String param(String key, String defaultValue) {, +        String value = params.get(key);, +        if (value == null) {, +            return defaultValue;, +        }, +        return value;, +    }, +++ b/build.gradle, +versionNumber = '0.8.0-SNAPSHOT', +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.util.xcontent.XContentFactory;, +            builder.startArray("mappings");, +                XContentParser parser = XContentFactory.xContent(entry.getValue()).createParser(entry.getValue());, +                Map<String, Object> mapping = parser.map();, +                parser.close();, +                builder.map(mapping);, +            builder.endArray();, +                        while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                            Map<String, Object> mapping = parser.map();, +                            if (mapping.size() == 1) {, +                                String mappingSource = XContentFactory.jsonBuilder().map(mapping).string();, +, +                                    builder.putMapping(mapping.keySet().iterator().next(), mappingSource);, +                                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +, +    @Override public String param(String key, String defaultValue) {, +        String value = params.get(key);, +        if (value == null) {, +            return defaultValue;, +        }, +        return value;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +     * A generic interface representing an operation performed on the transaction log., +            in.readVInt(); // version, +            out.writeVInt(0); // version, +            in.readVInt(); // version, +            out.writeVInt(0); // version, +            in.readVInt(); // version, +            out.writeVInt(0); // version, +            in.readVInt(); // version, +            out.writeVInt(0); // version, +++ b/build.gradle, +versionNumber = '0.8.0-SNAPSHOT', +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.util.xcontent.XContentFactory;, +            builder.startArray("mappings");, +                XContentParser parser = XContentFactory.xContent(entry.getValue()).createParser(entry.getValue());, +                Map<String, Object> mapping = parser.map();, +                parser.close();, +                builder.map(mapping);, +            builder.endArray();, +                        while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                            Map<String, Object> mapping = parser.map();, +                            if (mapping.size() == 1) {, +                                String mappingSource = XContentFactory.jsonBuilder().map(mapping).string();, +, +                                    builder.putMapping(mapping.keySet().iterator().next(), mappingSource);, +                                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +]