[+++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    // volatile fields are updated via #updateIndexMetaData(IndexMetaData) under lock, +     * Creates a new {@link IndexSettings} instance. The given node settings will be merged with the settings in the metadata, +     * while index level settings will overwrite node settings., +     *, +     * @param indexMetaData the index metadata this settings object is associated with, +     * @param nodeSettings the nodes settings this index is allocated on., +    public int getNumberOfReplicas() { return settings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, null); }, +     * Updates the settings and index metadata and notifies all registered settings consumers with the new settings iff at least one setting has changed., +        final Settings mergedSettings = this.settings = Settings.builder().put(nodeSettings).put(newSettings).build();, +, +    /**, +     * Returns all settings update consumers, +     */, +    List<Consumer<Settings>> getUpdateListeners() { // for testing, +        return updateListeners;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    // volatile fields are updated via #updateIndexMetaData(IndexMetaData) under lock, +     * Creates a new {@link IndexSettings} instance. The given node settings will be merged with the settings in the metadata, +     * while index level settings will overwrite node settings., +     *, +     * @param indexMetaData the index metadata this settings object is associated with, +     * @param nodeSettings the nodes settings this index is allocated on., +    public int getNumberOfReplicas() { return settings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, null); }, +     * Updates the settings and index metadata and notifies all registered settings consumers with the new settings iff at least one setting has changed., +        final Settings mergedSettings = this.settings = Settings.builder().put(nodeSettings).put(newSettings).build();, +, +    /**, +     * Returns all settings update consumers, +     */, +    List<Consumer<Settings>> getUpdateListeners() { // for testing, +        return updateListeners;, +    }, +++ b/core/src/test/java/org/elasticsearch/index/SettingsListenerIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index;, +, +import org.elasticsearch.cluster.ClusterModule;, +import org.elasticsearch.cluster.settings.Validator;, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.inject.Binder;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.function.Consumer;, +, +import static org.elasticsearch.test.ESIntegTestCase.Scope.SUITE;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.hamcrest.Matchers.nullValue;, +, +@ClusterScope(scope = SUITE, numDataNodes = 1, transportClientRatio = 0.0), +public class SettingsListenerIT extends ESIntegTestCase {, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return pluginList(SettingsListenerPlugin.class);, +    }, +, +    public static class SettingsListenerPlugin extends Plugin {, +        private final SettingsTestingService service = new SettingsTestingService();, +, +        /**, +         * The name of the plugin., +         */, +        @Override, +        public String name() {, +            return "settings-listener";, +        }, +, +        /**, +         * The description of the plugin., +         */, +        @Override, +        public String description() {, +            return "Settings Listenern Plugin";, +        }, +]