[+++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +, +    private Boolean lenient;, +, +    /**, +     * Sets whether format based failures will be ignored., +     */, +    public MatchQueryBuilder setLenient(boolean lenient) {, +        this.lenient = lenient;, +        return this;, +    }, +, +        if (lenient != null) {, +            builder.field("lenient", lenient);, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +, +    private Boolean lenient;, +, +    /**, +     * Sets whether format based failures will be ignored., +     */, +    public MatchQueryBuilder setLenient(boolean lenient) {, +        this.lenient = lenient;, +        return this;, +    }, +, +        if (lenient != null) {, +            builder.field("lenient", lenient);, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryParser.java, +                    } else if ("lenient".equals(currentFieldName)) {, +                        matchQuery.setLenient(parser.booleanValue());, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +, +    private Boolean lenient;, +, +    /**, +     * Sets whether format based failures will be ignored., +     */, +    public MatchQueryBuilder setLenient(boolean lenient) {, +        this.lenient = lenient;, +        return this;, +    }, +, +        if (lenient != null) {, +            builder.field("lenient", lenient);, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryParser.java, +                    } else if ("lenient".equals(currentFieldName)) {, +                        matchQuery.setLenient(parser.booleanValue());, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +    private Boolean lenient;, +, +    public MultiMatchQueryBuilder tieBreaker(Integer tieBreaker) {, +    /**, +     * Sets whether format based failures will be ignored., +     */, +    public MultiMatchQueryBuilder lenient(boolean lenient) {, +        this.lenient = lenient;, +        return this;, +    }, +, +        if (lenient != null) {, +            builder.field("lenient", lenient);, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +, +    private Boolean lenient;, +, +    /**, +     * Sets whether format based failures will be ignored., +     */, +    public MatchQueryBuilder setLenient(boolean lenient) {, +        this.lenient = lenient;, +        return this;, +    }, +, +        if (lenient != null) {, +            builder.field("lenient", lenient);, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/MatchQueryParser.java, +                    } else if ("lenient".equals(currentFieldName)) {, +                        matchQuery.setLenient(parser.booleanValue());, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +    private Boolean lenient;, +, +    public MultiMatchQueryBuilder tieBreaker(Integer tieBreaker) {, +    /**, +     * Sets whether format based failures will be ignored., +     */, +    public MultiMatchQueryBuilder lenient(boolean lenient) {, +        this.lenient = lenient;, +        return this;, +    }]