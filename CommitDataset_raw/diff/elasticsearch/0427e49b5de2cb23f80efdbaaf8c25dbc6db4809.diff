[+++ b/src/main/java/org/elasticsearch/common/network/MulticastChannel.java, +    public static final String SHARED_CHANNEL_NAME = "#shared#";, +                    shared = new Shared(multiListener, new Plain(multiListener, SHARED_CHANNEL_NAME, config));, +++ b/src/main/java/org/elasticsearch/common/network/MulticastChannel.java, +    public static final String SHARED_CHANNEL_NAME = "#shared#";, +                    shared = new Shared(multiListener, new Plain(multiListener, SHARED_CHANNEL_NAME, config));, +++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +    public static final String TRANSPORT_CLIENT_PREFIX = "transport_client_";, +                    .put("name", TRANSPORT_CLIENT_PREFIX + node.settings().get("name")), +++ b/src/main/java/org/elasticsearch/common/network/MulticastChannel.java, +    public static final String SHARED_CHANNEL_NAME = "#shared#";, +                    shared = new Shared(multiListener, new Plain(multiListener, SHARED_CHANNEL_NAME, config));, +++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +    public static final String TRANSPORT_CLIENT_PREFIX = "transport_client_";, +                    .put("name", TRANSPORT_CLIENT_PREFIX + node.settings().get("name")), +++ b/src/test/java/org/elasticsearch/threadpool/SimpleThreadPoolTests.java, +import com.carrotsearch.randomizedtesting.annotations.Repeat;, +import com.google.common.collect.Lists;, +import com.google.common.collect.Sets;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.common.network.MulticastChannel;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.test.InternalTestCluster;, +import org.elasticsearch.test.TestCluster;, +import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;, +import org.hamcrest.Matchers;, +import java.lang.management.ManagementFactory;, +import java.lang.management.ThreadMXBean;, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;, +@ClusterScope(scope= Scope.TEST, numDataNodes = 0, numClientNodes = 0), +    @Test, +    public void verifyThreadNames() throws Exception {, +        ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();, +        Set<String> preNodeStartThreadNames = Sets.newHashSet();, +        for (long l : threadBean.getAllThreadIds()) {, +            preNodeStartThreadNames.add(threadBean.getThreadInfo(l).getThreadName());, +        }, +        logger.info("pre node threads are {}", preNodeStartThreadNames);, +        String node = internalCluster().startNode();, +        logger.info("do some indexing, flushing, optimize, and searches");, +        int numDocs = randomIntBetween(2, 100);, +        IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocs];, +        for (int i = 0; i < numDocs; ++i) {, +            builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder(), +                    .startObject(), +                    .field("str_value", "s" + i), +                    .field("str_values", new String[]{"s" + (i * 2), "s" + (i * 2 + 1)}), +                    .field("l_value", i), +                    .field("l_values", new int[] {i * 2, i * 2 + 1}), +                    .field("d_value", i), +                    .field("d_values", new double[]{i * 2, i * 2 + 1}), +                    .endObject());, +        }, +        indexRandom(true, builders);, +        int numSearches = randomIntBetween(2, 100);, +        for (int i = 0; i < numSearches; i++) {, +            assertAllSuccessful(client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("str_value", "s" + i)).get());, +            assertAllSuccessful(client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("l_value", i)).get());, +        }, +        Set<String> threadNames = Sets.newHashSet();, +        for (long l : threadBean.getAllThreadIds()) {, +            threadNames.add(threadBean.getThreadInfo(l).getThreadName());, +        }, +        logger.info("post node threads are {}", threadNames);, +        threadNames.removeAll(preNodeStartThreadNames);, +        logger.info("post node *new* threads are {}", threadNames);, +        for (String threadName : threadNames) {, +            // ignore some shared threads we know that are created within the same VM, like the shared discovery one, +            if (threadName.contains("[" + MulticastChannel.SHARED_CHANNEL_NAME + "]")) {, +                continue;, +            }, +            assertThat(threadName, anyOf(containsString("[" + node + "]"), containsString("[" + InternalTestCluster.TRANSPORT_CLIENT_PREFIX + node + "]")));, +        }, +    }, +, +        internalCluster().startNodesAsync(2).get();]