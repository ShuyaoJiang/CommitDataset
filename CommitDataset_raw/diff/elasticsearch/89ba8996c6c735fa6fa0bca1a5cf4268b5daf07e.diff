[+++ b/build.gradle, +, +import org.elasticsearch.gradle.VersionCollection, +import org.elasticsearch.gradle.VersionProperties, +import org.gradle.plugins.ide.eclipse.model.SourceFolder, +, +import java.nio.file.Path, +/* Introspect all versions of ES that may be tested against for backwards, +VersionCollection versions = new VersionCollection(file('core/src/main/java/org/elasticsearch/Version.java').readLines('UTF-8')), +if (versions.currentVersion.toString() != VersionProperties.elasticsearch) {, +  throw new GradleException("The last version in Versions.java [${versions.currentVersion}] does not match " +, +          "VersionProperties.elasticsearch [${VersionProperties.elasticsearch}]"), +, +    // for BWC testing, +    versionCollection = versions, +, +    knownVersions = knownVersions.findAll { it.major >= versions.currentVersion.major - 1 && it.before(VersionProperties.elasticsearch) }, +    Set<Version> actualVersions = new TreeSet<>(versions.versionsIndexCompatibleWithCurrent.findAll { false == it.snapshot }), +, +  for (final Version version : versionCollection.versionsIndexCompatibleWithCurrent) {, +    if (version.branch != null) {, +      final String snapshotProject = ":distribution:bwc-snapshot-${version.branch}", +      project(snapshotProject).ext.bwcVersion = version, +      ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${version}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${version}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${version}"] = snapshotProject, +, +++ b/build.gradle, +, +import org.elasticsearch.gradle.VersionCollection, +import org.elasticsearch.gradle.VersionProperties, +import org.gradle.plugins.ide.eclipse.model.SourceFolder, +, +import java.nio.file.Path, +/* Introspect all versions of ES that may be tested against for backwards, +VersionCollection versions = new VersionCollection(file('core/src/main/java/org/elasticsearch/Version.java').readLines('UTF-8')), +if (versions.currentVersion.toString() != VersionProperties.elasticsearch) {, +  throw new GradleException("The last version in Versions.java [${versions.currentVersion}] does not match " +, +          "VersionProperties.elasticsearch [${VersionProperties.elasticsearch}]"), +, +    // for BWC testing, +    versionCollection = versions, +, +    knownVersions = knownVersions.findAll { it.major >= versions.currentVersion.major - 1 && it.before(VersionProperties.elasticsearch) }, +    Set<Version> actualVersions = new TreeSet<>(versions.versionsIndexCompatibleWithCurrent.findAll { false == it.snapshot }), +, +  for (final Version version : versionCollection.versionsIndexCompatibleWithCurrent) {, +    if (version.branch != null) {, +      final String snapshotProject = ":distribution:bwc-snapshot-${version.branch}", +      project(snapshotProject).ext.bwcVersion = version, +      ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${version}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${version}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${version}"] = snapshotProject, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/Version.groovy, +    final int revision, +    final String branch, +    public Version(int major, int minor, int revision,, +            String suffix, boolean snapshot, String branch) {, +        this.revision = revision, +        this.branch = branch, +        this.id = major * 100000 + minor * 1000 + revision * 10 +, +            m.group(3) as int, m.group(4) ?: '', m.group(5) != null, null), +        return "${major}.${minor}.${revision}${suffix}${snapshotStr}", +, +    public boolean onOrBeforeIncludingSuffix(Version otherVersion) {, +        if (id != otherVersion.id) {, +            return id < otherVersion.id, +        }, +, +        if (suffix == '') {, +            return otherVersion.suffix == '', +        }, +, +        return otherVersion.suffix == '' || suffix < otherVersion.suffix, +    }, +, +    boolean equals(o) {, +        if (this.is(o)) return true, +        if (getClass() != o.class) return false, +, +        Version version = (Version) o, +, +        if (id != version.id) return false, +        if (major != version.major) return false, +        if (minor != version.minor) return false, +        if (revision != version.revision) return false, +        if (snapshot != version.snapshot) return false, +        if (suffix != version.suffix) return false, +, +        return true, +    }, +, +    int hashCode() {, +        int result, +        result = major, +        result = 31 * result + minor, +        result = 31 * result + revision, +        result = 31 * result + id, +        result = 31 * result + (snapshot ? 1 : 0)]