[+++ b/sample/license_spec.json, +{"licenses":[{"uid": "893361dc-9749-4997-93cb-802e3d7fa4a8", "type":"internal","subscription_type":"none","issued_to":"issuedTo","issuer":"issuer","issue_date":"2014-09-29","expiry_date":"2015-08-29","feature":"shield","max_nodes":1}]}, +++ b/sample/license_spec.json, +{"licenses":[{"uid": "893361dc-9749-4997-93cb-802e3d7fa4a8", "type":"internal","subscription_type":"none","issued_to":"issuedTo","issuer":"issuer","issue_date":"2014-09-29","expiry_date":"2015-08-29","feature":"shield","max_nodes":1}]}, +++ b/src/main/java/org/elasticsearch/license/core/DateUtils.java, +import org.elasticsearch.common.joda.FormatDateTimeFormatter;, +import org.elasticsearch.common.joda.Joda;, +import org.elasticsearch.common.joda.time.MutableDateTime;, +import org.elasticsearch.common.joda.time.format.DateTimeFormatter;, +    private final static FormatDateTimeFormatter formatDateTimeFormatter = Joda.forPattern("yyyy-MM-dd");, +, +    private final static DateTimeFormatter dateTimeFormatter = formatDateTimeFormatter.parser();, +, +    public static long endOfTheDay(String date) {, +        MutableDateTime dateTime = dateTimeFormatter.parseMutableDateTime(date);, +        dateTime.dayOfMonth().roundCeiling();, +        return dateTime.getMillis();, +    public static long beginningOfTheDay(String date) {, +        return dateTimeFormatter.parseDateTime(date).getMillis();, +++ b/sample/license_spec.json, +{"licenses":[{"uid": "893361dc-9749-4997-93cb-802e3d7fa4a8", "type":"internal","subscription_type":"none","issued_to":"issuedTo","issuer":"issuer","issue_date":"2014-09-29","expiry_date":"2015-08-29","feature":"shield","max_nodes":1}]}, +++ b/src/main/java/org/elasticsearch/license/core/DateUtils.java, +import org.elasticsearch.common.joda.FormatDateTimeFormatter;, +import org.elasticsearch.common.joda.Joda;, +import org.elasticsearch.common.joda.time.MutableDateTime;, +import org.elasticsearch.common.joda.time.format.DateTimeFormatter;, +    private final static FormatDateTimeFormatter formatDateTimeFormatter = Joda.forPattern("yyyy-MM-dd");, +, +    private final static DateTimeFormatter dateTimeFormatter = formatDateTimeFormatter.parser();, +, +    public static long endOfTheDay(String date) {, +        MutableDateTime dateTime = dateTimeFormatter.parseMutableDateTime(date);, +        dateTime.dayOfMonth().roundCeiling();, +        return dateTime.getMillis();, +    public static long beginningOfTheDay(String date) {, +        return dateTimeFormatter.parseDateTime(date).getMillis();, +++ b/src/main/java/org/elasticsearch/license/core/ESLicense.java, +    public void verify() {, +        if (issuer == null) {, +            throw new IllegalStateException("issuer can not be null");, +        } else if (issuedTo == null) {, +            throw new IllegalStateException("issuedTo can not be null");, +        } else if (issueDate == -1) {, +            throw new IllegalStateException("issueDate has to be set");, +        } else if (type == null) {, +            throw new IllegalStateException("type can not be null");, +        } else if (subscriptionType == null) {, +            throw new IllegalStateException("subscriptionType can not be null");, +        } else if (uid == null) {, +            throw new IllegalStateException("uid can not be null");, +        } else if (feature == null) {, +            throw new IllegalStateException("at least one feature has to be enabled");, +        } else if (signature == null) {, +            throw new IllegalStateException("signature can not be null");, +        } else if (maxNodes == -1) {, +            throw new IllegalStateException("maxNodes has to be set");, +        } else if (expiryDate == -1) {, +            throw new IllegalStateException("expiryDate has to be set");, +        }, +    }, +, +, +        builder.verify();, +        return builder.build();, +        if (signature != null && !params.paramAsBoolean(ESLicenses.OMIT_SIGNATURE, false)) {, +    private static long parseDate(XContentParser parser, String description) throws IOException {, +        if (parser.currentToken() == XContentParser.Token.VALUE_NUMBER) {, +            return parser.longValue();, +            try {, +                return DateUtils.endOfTheDay((parser.text()));, +            } catch (IllegalArgumentException ex) {, +                throw new ElasticsearchParseException("invalid " + description + " date format " + parser.text());, +        }, +        public Builder fromXContent(XContentParser parser) throws IOException {, +            XContentParser.Token token = parser.currentToken();, +            if (token == XContentParser.Token.START_OBJECT) {, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        String currentFieldName = parser.currentName();, +                        token = parser.nextToken();, +                        if (token.isValue()) {, +                            if (Fields.UID.equals(currentFieldName)) {, +                                uid(parser.text());, +                            } else if (Fields.TYPE.equals(currentFieldName)) {, +                                type(parser.text());, +                            } else if (Fields.SUBSCRIPTION_TYPE.equals(currentFieldName)) {, +                                subscriptionType(parser.text());, +                            } else if (Fields.ISSUE_DATE.equals(currentFieldName)) {, +                                issueDate(parseDate(parser, "issue"));, +                            } else if (Fields.FEATURE.equals(currentFieldName)) {, +                                feature(parser.text());, +                            } else if (Fields.EXPIRY_DATE.equals(currentFieldName)) {, +                                expiryDate(parseDate(parser, "expiration"));, +                            } else if (Fields.MAX_NODES.equals(currentFieldName)) {, +                                maxNodes(parser.intValue());, +                            } else if (Fields.ISSUED_TO.equals(currentFieldName)) {, +                                issuedTo(parser.text());, +                            } else if (Fields.ISSUER.equals(currentFieldName)) {, +                                issuer(parser.text());, +                            } else if (Fields.SIGNATURE.equals(currentFieldName)) {]