[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +        double[] pt = {point.lon(), point.lat()};, +        normalizePoint(pt, normLon, normLat);, +        point.reset(pt[1], pt[0]);, +    }, +    public static void normalizePoint(double[] lonLat) {, +        normalizePoint(lonLat, true, true);, +    }, +, +    public static void normalizePoint(double[] lonLat, boolean normLon, boolean normLat) {, +        assert lonLat != null && lonLat.length == 2;, +, +        normLat = normLat && (lonLat[1] > 90 || lonLat[1] <= -90);, +        normLon = normLon && (lonLat[0] > 180 || lonLat[0] <= -180);, +            lonLat[1] = centeredModulus(lonLat[1], 360);, +            if (lonLat[1] < -90) {, +                lonLat[1] = -180 - lonLat[1];, +            } else if (lonLat[1] > 90) {, +                lonLat[1] = 180 - lonLat[1];, +                    lonLat[0] += 180;, +                    lonLat[0] += normalizeLon(lonLat[0]) > 0 ? -180 : 180;, +            lonLat[0] = centeredModulus(lonLat[0], 360);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +        double[] pt = {point.lon(), point.lat()};, +        normalizePoint(pt, normLon, normLat);, +        point.reset(pt[1], pt[0]);, +    }, +    public static void normalizePoint(double[] lonLat) {, +        normalizePoint(lonLat, true, true);, +    }, +, +    public static void normalizePoint(double[] lonLat, boolean normLon, boolean normLat) {, +        assert lonLat != null && lonLat.length == 2;, +, +        normLat = normLat && (lonLat[1] > 90 || lonLat[1] <= -90);, +        normLon = normLon && (lonLat[0] > 180 || lonLat[0] <= -180);, +            lonLat[1] = centeredModulus(lonLat[1], 360);, +            if (lonLat[1] < -90) {, +                lonLat[1] = -180 - lonLat[1];, +            } else if (lonLat[1] > 90) {, +                lonLat[1] = 180 - lonLat[1];, +                    lonLat[0] += 180;, +                    lonLat[0] += normalizeLon(lonLat[0]) > 0 ? -180 : 180;, +            lonLat[0] = centeredModulus(lonLat[0], 360);, +++ b/core/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +        double[] pt = {point.lon(), point.lat()};, +        normalizePoint(pt, normLon, normLat);, +        point.reset(pt[1], pt[0]);, +    }, +    public static void normalizePoint(double[] lonLat) {, +        normalizePoint(lonLat, true, true);, +    }, +, +    public static void normalizePoint(double[] lonLat, boolean normLon, boolean normLat) {, +        assert lonLat != null && lonLat.length == 2;, +, +        normLat = normLat && (lonLat[1] > 90 || lonLat[1] <= -90);, +        normLon = normLon && (lonLat[0] > 180 || lonLat[0] <= -180);, +            lonLat[1] = centeredModulus(lonLat[1], 360);, +            if (lonLat[1] < -90) {, +                lonLat[1] = -180 - lonLat[1];, +            } else if (lonLat[1] > 90) {, +                lonLat[1] = 180 - lonLat[1];, +                    lonLat[0] += 180;, +                    lonLat[0] += normalizeLon(lonLat[0]) > 0 ? -180 : 180;, +            lonLat[0] = centeredModulus(lonLat[0], 360);, +++ b/core/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /** How much heap Lucene's IndexWriter is using */, +    abstract public long indexWriterRAMBytesUsed();, +     * Refreshes the engine for new search operations to reflect the latest, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +        double[] pt = {point.lon(), point.lat()};, +        normalizePoint(pt, normLon, normLat);, +        point.reset(pt[1], pt[0]);, +    }, +    public static void normalizePoint(double[] lonLat) {, +        normalizePoint(lonLat, true, true);, +    }, +, +    public static void normalizePoint(double[] lonLat, boolean normLon, boolean normLat) {, +        assert lonLat != null && lonLat.length == 2;, +, +        normLat = normLat && (lonLat[1] > 90 || lonLat[1] <= -90);, +        normLon = normLon && (lonLat[0] > 180 || lonLat[0] <= -180);, +            lonLat[1] = centeredModulus(lonLat[1], 360);, +            if (lonLat[1] < -90) {, +                lonLat[1] = -180 - lonLat[1];, +            } else if (lonLat[1] > 90) {]