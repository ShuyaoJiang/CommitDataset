[+++ b/src/main/java/org/elasticsearch/alerts/AlertsModule.java, +import org.elasticsearch.alerts.history.HistoryModule;, +                new ActionModule(),, +                new HistoryModule());, +++ b/src/main/java/org/elasticsearch/alerts/AlertsModule.java, +import org.elasticsearch.alerts.history.HistoryModule;, +                new ActionModule(),, +                new HistoryModule());, +++ b/src/main/java/org/elasticsearch/alerts/AlertsService.java, +import org.elasticsearch.alerts.history.FiredAlert;, +     * The rest of the actions happen in {@link #runAlert(org.elasticsearch.alerts.history.FiredAlert)}., +                historyService.alertFired(alert, scheduledFireTime, fireTime);, +    public AlertRun runAlert(FiredAlert entry) throws IOException {, +        alertLock.acquire(entry.name());, +            Alert alert = alertsStore.getAlert(entry.name());, +            Trigger.Result triggerResult = trigger.execute(alert, entry.scheduledTime(), entry.fireTime());, +                alert.status().triggered(true, entry.fireTime());, +                    Map<String, Object> data = alert.payload().execute(alert, triggerResult, entry.scheduledTime(), entry.fireTime());, +                    alertRun = new AlertRun(triggerResult, throttleResult, data);, +                    alert.status().executed(entry.scheduledTime());, +                    alert.status().throttled(entry.fireTime(), throttleResult.reason());, +                alert.status().triggered(false, entry.fireTime());, +                alertRun = new AlertRun(triggerResult, null, null);, +            alert.status().ran(entry.fireTime());, +            alertLock.release(entry.name());, +        private final Trigger.Result triggerResult;, +        private final Throttler.Result throttleResult;, +        public AlertRun(Trigger.Result triggerResult, Throttler.Result throttleResult, Map<String, Object> data) {, +            this.triggerResult = triggerResult;, +            this.throttleResult = throttleResult;, +            return triggerResult;, +        }, +, +        public Throttler.Result throttleResult() {, +            return throttleResult;, +++ b/src/main/java/org/elasticsearch/alerts/AlertsModule.java, +import org.elasticsearch.alerts.history.HistoryModule;, +                new ActionModule(),, +                new HistoryModule());, +++ b/src/main/java/org/elasticsearch/alerts/AlertsService.java, +import org.elasticsearch.alerts.history.FiredAlert;, +     * The rest of the actions happen in {@link #runAlert(org.elasticsearch.alerts.history.FiredAlert)}., +                historyService.alertFired(alert, scheduledFireTime, fireTime);, +    public AlertRun runAlert(FiredAlert entry) throws IOException {, +        alertLock.acquire(entry.name());, +            Alert alert = alertsStore.getAlert(entry.name());, +            Trigger.Result triggerResult = trigger.execute(alert, entry.scheduledTime(), entry.fireTime());, +                alert.status().triggered(true, entry.fireTime());, +                    Map<String, Object> data = alert.payload().execute(alert, triggerResult, entry.scheduledTime(), entry.fireTime());, +                    alertRun = new AlertRun(triggerResult, throttleResult, data);, +                    alert.status().executed(entry.scheduledTime());, +                    alert.status().throttled(entry.fireTime(), throttleResult.reason());, +                alert.status().triggered(false, entry.fireTime());, +                alertRun = new AlertRun(triggerResult, null, null);, +            alert.status().ran(entry.fireTime());, +            alertLock.release(entry.name());, +        private final Trigger.Result triggerResult;, +        private final Throttler.Result throttleResult;, +        public AlertRun(Trigger.Result triggerResult, Throttler.Result throttleResult, Map<String, Object> data) {, +            this.triggerResult = triggerResult;, +            this.throttleResult = throttleResult;, +            return triggerResult;, +        }, +, +        public Throttler.Result throttleResult() {, +            return throttleResult;, +++ b/src/main/java/org/elasticsearch/alerts/actions/Action.java, +    public static abstract class Result implements ToXContent {, +++ b/src/main/java/org/elasticsearch/alerts/AlertsModule.java, +import org.elasticsearch.alerts.history.HistoryModule;, +                new ActionModule(),, +                new HistoryModule());, +++ b/src/main/java/org/elasticsearch/alerts/AlertsService.java, +import org.elasticsearch.alerts.history.FiredAlert;, +     * The rest of the actions happen in {@link #runAlert(org.elasticsearch.alerts.history.FiredAlert)}., +                historyService.alertFired(alert, scheduledFireTime, fireTime);, +    public AlertRun runAlert(FiredAlert entry) throws IOException {, +        alertLock.acquire(entry.name());, +            Alert alert = alertsStore.getAlert(entry.name());, +            Trigger.Result triggerResult = trigger.execute(alert, entry.scheduledTime(), entry.fireTime());, +                alert.status().triggered(true, entry.fireTime());, +                    Map<String, Object> data = alert.payload().execute(alert, triggerResult, entry.scheduledTime(), entry.fireTime());, +                    alertRun = new AlertRun(triggerResult, throttleResult, data);, +                    alert.status().executed(entry.scheduledTime());, +                    alert.status().throttled(entry.fireTime(), throttleResult.reason());, +                alert.status().triggered(false, entry.fireTime());, +                alertRun = new AlertRun(triggerResult, null, null);, +            alert.status().ran(entry.fireTime());, +            alertLock.release(entry.name());, +        private final Trigger.Result triggerResult;, +        private final Throttler.Result throttleResult;, +        public AlertRun(Trigger.Result triggerResult, Throttler.Result throttleResult, Map<String, Object> data) {, +            this.triggerResult = triggerResult;, +            this.throttleResult = throttleResult;, +            return triggerResult;, +        }, +, +        public Throttler.Result throttleResult() {, +            return throttleResult;, +++ b/src/main/java/org/elasticsearch/alerts/actions/Action.java]