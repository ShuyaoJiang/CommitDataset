[+++ b/core/src/main/java/org/elasticsearch/monitor/jvm/DeadlockAnalyzer.java, +            for (ThreadInfo t = entry.getValue(); !cycle.contains(t); t = threadInfoMap.get(Long.valueOf(t.getLockOwnerId()))) {, +            }, +            if (!cycles.contains(cycle)) {, +        }, +    private Set<LinkedHashSet<ThreadInfo>> calculateCycleDeadlockChains(Map<Long, ThreadInfo> threadInfoMap,, +            Set<LinkedHashSet<ThreadInfo>> cycles) {, +                for (LinkedHashSet<ThreadInfo> cycle : cycles) {, +                        ThreadInfo node = threadInfo;, +                        while (!chain.contains(node)) {, +                            node = threadInfoMap.get(Long.valueOf(node.getLockOwnerId()));, +                        }, +                if (x < members.length) {, +                }, +                if (x == members.length - 1) {, +                }, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/DeadlockAnalyzer.java, +            for (ThreadInfo t = entry.getValue(); !cycle.contains(t); t = threadInfoMap.get(Long.valueOf(t.getLockOwnerId()))) {, +            }, +            if (!cycles.contains(cycle)) {, +        }, +    private Set<LinkedHashSet<ThreadInfo>> calculateCycleDeadlockChains(Map<Long, ThreadInfo> threadInfoMap,, +            Set<LinkedHashSet<ThreadInfo>> cycles) {, +                for (LinkedHashSet<ThreadInfo> cycle : cycles) {, +                        ThreadInfo node = threadInfo;, +                        while (!chain.contains(node)) {, +                            node = threadInfoMap.get(Long.valueOf(node.getLockOwnerId()));, +                        }, +                if (x < members.length) {, +                }, +                if (x == members.length - 1) {, +                }, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +        if (this == obj) return true;, +        if (obj == null) return false;, +        if (getClass() != obj.getClass()) return false;, +            if (other.lang != null) return false;, +        } else {, +            if (!lang.equals(other.lang)) return false;, +        }, +            if (other.params != null) return false;, +        } else {, +            if (!params.equals(other.params)) return false;, +        }, +            if (other.script != null) return false;, +        } else {, +            if (!script.equals(other.script)) return false;, +        }, +        if (type != other.type) return false;, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/DeadlockAnalyzer.java, +            for (ThreadInfo t = entry.getValue(); !cycle.contains(t); t = threadInfoMap.get(Long.valueOf(t.getLockOwnerId()))) {, +            }, +            if (!cycles.contains(cycle)) {, +        }, +    private Set<LinkedHashSet<ThreadInfo>> calculateCycleDeadlockChains(Map<Long, ThreadInfo> threadInfoMap,, +            Set<LinkedHashSet<ThreadInfo>> cycles) {, +                for (LinkedHashSet<ThreadInfo> cycle : cycles) {, +                        ThreadInfo node = threadInfo;, +                        while (!chain.contains(node)) {, +                            node = threadInfoMap.get(Long.valueOf(node.getLockOwnerId()));, +                        }, +                if (x < members.length) {, +                }, +                if (x == members.length - 1) {, +                }, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +        if (this == obj) return true;, +        if (obj == null) return false;, +        if (getClass() != obj.getClass()) return false;, +            if (other.lang != null) return false;, +        } else {, +            if (!lang.equals(other.lang)) return false;, +        }, +            if (other.params != null) return false;, +        } else {, +            if (!params.equals(other.params)) return false;, +        }, +            if (other.script != null) return false;, +        } else {, +            if (!script.equals(other.script)) return false;, +        }, +        if (type != other.type) return false;, +++ b/core/src/main/java/org/elasticsearch/script/Template.java, +        if (this == obj) return true;, +        if (!super.equals(obj)) return false;, +        if (getClass() != obj.getClass()) return false;, +        if (contentType != other.contentType) return false;]