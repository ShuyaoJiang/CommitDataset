[+++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +    /** Remove a listener */, +    public void removeListener(Runnable runnable) {, +        listeners.remove(runnable);, +    }, +, +     * @return true if the license is active, +     * Monitoring Cluster Alerts requires the equivalent license to use Watcher., +     *, +     * @return {@link #isWatcherAllowed()}, +     * @see #isWatcherAllowed(), +     */, +    public boolean isMonitoringClusterAlertsAllowed() {, +        return isWatcherAllowed();, +    }, +, +    /**, +++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +    /** Remove a listener */, +    public void removeListener(Runnable runnable) {, +        listeners.remove(runnable);, +    }, +, +     * @return true if the license is active, +     * Monitoring Cluster Alerts requires the equivalent license to use Watcher., +     *, +     * @return {@link #isWatcherAllowed()}, +     * @see #isWatcherAllowed(), +     */, +    public boolean isMonitoringClusterAlertsAllowed() {, +        return isWatcherAllowed();, +    }, +, +    /**, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +        exporterFactories.put(LocalExporter.TYPE, config -> new LocalExporter(config, client, cleanerService));, +        final Exporters exporters = new Exporters(settings, exporterFactories, clusterService, licenseState, threadPool.getThreadContext());, +++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +    /** Remove a listener */, +    public void removeListener(Runnable runnable) {, +        listeners.remove(runnable);, +    }, +, +     * @return true if the license is active, +     * Monitoring Cluster Alerts requires the equivalent license to use Watcher., +     *, +     * @return {@link #isWatcherAllowed()}, +     * @see #isWatcherAllowed(), +     */, +    public boolean isMonitoringClusterAlertsAllowed() {, +        return isWatcherAllowed();, +    }, +, +    /**, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +        exporterFactories.put(LocalExporter.TYPE, config -> new LocalExporter(config, client, cleanerService));, +        final Exporters exporters = new Exporters(settings, exporterFactories, clusterService, licenseState, threadPool.getThreadContext());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/exporter/ClusterAlertsUtil.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.monitoring.exporter;, +, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.collect.MapBuilder;, +import org.elasticsearch.common.io.Streams;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.Locale;, +import java.util.Map;, +import java.util.regex.Pattern;, +, +/**, + * {@code ClusterAlertsUtil} provides static methods to easily load the JSON resources that, + * represent watches for Cluster Alerts., + */, +public class ClusterAlertsUtil {, +, +    /**, +     * The name of the Watch resource when substituted by the high-level watch ID., +     */, +    private static final String WATCH_FILE = "/monitoring/watches/%s.json";, +    /**, +     * Replace the <code>${monitoring.watch.cluster_uuid}</code> field in the watches., +     */, +    private static final Pattern CLUSTER_UUID_PROPERTY =, +            Pattern.compile(Pattern.quote("${monitoring.watch.cluster_uuid}"));, +    /**, +     * Replace the <code>${monitoring.watch.id}</code> field in the watches., +     */, +    private static final Pattern WATCH_ID_PROPERTY =, +            Pattern.compile(Pattern.quote("${monitoring.watch.id}"));, +    /**, +     * Replace the <code>${monitoring.watch.unique_id}</code> field in the watches.]