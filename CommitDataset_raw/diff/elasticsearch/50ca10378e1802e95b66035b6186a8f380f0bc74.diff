[+++ b/Vagrantfile, +    install_command_retries: 5,, +    install_command_retries: 0,, +, +    # Retry install command up to $2 times, if failed, +    retry_installcommand() {, +      n=0, +      while true; do, +        #{install_command} $1 && break, +        let n=n+1, +        if [ $n -ge $2 ]; then, +          echo "==> Exhausted retries to install $1", +          return 1, +        fi, +        echo "==> Retrying installing $1, attempt $((n+1))", +        # Add a small delay to increase chance of metalink providing updated list of mirrors, +        sleep 5, +      done, +    }, +, +, +      if [ #{install_command_retries} -eq 0 ], +      then, +      else, +            retry_installcommand $1 #{install_command_retries}, +      fi, +, +++ b/Vagrantfile, +    install_command_retries: 5,, +    install_command_retries: 0,, +, +    # Retry install command up to $2 times, if failed, +    retry_installcommand() {, +      n=0, +      while true; do, +        #{install_command} $1 && break, +        let n=n+1, +        if [ $n -ge $2 ]; then, +          echo "==> Exhausted retries to install $1", +          return 1, +        fi, +        echo "==> Retrying installing $1, attempt $((n+1))", +        # Add a small delay to increase chance of metalink providing updated list of mirrors, +        sleep 5, +      done, +    }, +, +, +      if [ #{install_command_retries} -eq 0 ], +      then, +      else, +            retry_installcommand $1 #{install_command_retries}, +      fi, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    artifactId = project.pluginProperties.extension.name, +++ b/Vagrantfile, +    install_command_retries: 5,, +    install_command_retries: 0,, +, +    # Retry install command up to $2 times, if failed, +    retry_installcommand() {, +      n=0, +      while true; do, +        #{install_command} $1 && break, +        let n=n+1, +        if [ $n -ge $2 ]; then, +          echo "==> Exhausted retries to install $1", +          return 1, +        fi, +        echo "==> Retrying installing $1, attempt $((n+1))", +        # Add a small delay to increase chance of metalink providing updated list of mirrors, +        sleep 5, +      done, +    }, +, +, +      if [ #{install_command_retries} -eq 0 ], +      then, +      else, +            retry_installcommand $1 #{install_command_retries}, +      fi, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    artifactId = project.pluginProperties.extension.name, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +        Setting.floatSetting("cluster.routing.allocation.balance.index", 0.55f, 0.0f, Property.Dynamic, Property.NodeScope);, +        Setting.floatSetting("cluster.routing.allocation.balance.shard", 0.45f, 0.0f, Property.Dynamic, Property.NodeScope);, +        private final Map<String, ModelNode> nodes;, +        private final NodeSorter sorter;, +            nodes = Collections.unmodifiableMap(buildModelFromAssigned());, +            sorter = newNodeSorter();, +            buildWeightOrderedIndices();, +         * shards only if the delta exceeds the threshold. In the default case, +            for (String index : buildWeightOrderedIndices()) {, +                // find nodes that have a shard of this index or where shards of this index are allowed to be allocated to,, +         * with 3 primary and 1 replica shards. At the first stage all three nodes hold, +         * 2 shard for each index. Now we add another node and the first index, +         * is balanced moving three shards from two of the nodes over to the new node since it, +        private String[] buildWeightOrderedIndices() {]