[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.index.query.ParsedQuery;, +    private final SearchService searchService;, +            TransportService transportService, SearchService searchService, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.searchService = searchService;, +        ShardSearchLocalRequest shardSearchLocalRequest = new ShardSearchLocalRequest(request.shardId(), request.types(),, +            request.nowInMillis(), request.filteringAliases());, +        SearchContext searchContext = searchService.createSearchContext(shardSearchLocalRequest, SearchService.NO_TIMEOUT, null);, +            ParsedQuery parsedQuery = searchContext.getQueryShardContext().toQuery(request.query());, +            searchContext.parsedQuery(parsedQuery);, +            searchContext.preProcess(request.rewrite());, +            explanation = explain(searchContext, request.rewrite());, +            Releasables.close(searchContext, () -> SearchContext.removeCurrent());, +    private String explain(SearchContext context, boolean rewritten) throws IOException {, +        Query query = context.query();, +        if (rewritten && query instanceof MatchNoDocsQuery) {, +            return context.parsedQuery().query().toString();, +            return query.toString();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.index.query.ParsedQuery;, +    private final SearchService searchService;, +            TransportService transportService, SearchService searchService, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.searchService = searchService;, +        ShardSearchLocalRequest shardSearchLocalRequest = new ShardSearchLocalRequest(request.shardId(), request.types(),, +            request.nowInMillis(), request.filteringAliases());, +        SearchContext searchContext = searchService.createSearchContext(shardSearchLocalRequest, SearchService.NO_TIMEOUT, null);, +            ParsedQuery parsedQuery = searchContext.getQueryShardContext().toQuery(request.query());, +            searchContext.parsedQuery(parsedQuery);, +            searchContext.preProcess(request.rewrite());, +            explanation = explain(searchContext, request.rewrite());, +            Releasables.close(searchContext, () -> SearchContext.removeCurrent());, +    private String explain(SearchContext context, boolean rewritten) throws IOException {, +        Query query = context.query();, +        if (rewritten && query instanceof MatchNoDocsQuery) {, +            return context.parsedQuery().query().toString();, +            return query.toString();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.common.lease.Releasables;, +    private final SearchService searchService;, +                                  TransportService transportService, SearchService searchService, ActionFilters actionFilters,, +                                  IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.searchService = searchService;, +        ShardSearchLocalRequest shardSearchLocalRequest = new ShardSearchLocalRequest(shardId,, +            new String[]{request.type()}, request.nowInMillis, request.filteringAlias());, +        SearchContext context = searchService.createSearchContext(shardSearchLocalRequest, SearchService.NO_TIMEOUT, null);, +        SearchContext.setCurrent(context);, +        Engine.GetResult result = null;, +        try {, +            result = context.indexShard().get(new Engine.Get(false, uidTerm));, +            context.preProcess(true);, +                GetResult getResult = context.indexShard().getService().get(result, request.id(), request.type(), request.fields(),, +                    request.fetchSourceContext());, +            Releasables.close(result, context, () -> SearchContext.removeCurrent());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.index.query.ParsedQuery;, +    private final SearchService searchService;, +            TransportService transportService, SearchService searchService, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.searchService = searchService;, +        ShardSearchLocalRequest shardSearchLocalRequest = new ShardSearchLocalRequest(request.shardId(), request.types(),, +            request.nowInMillis(), request.filteringAliases());, +        SearchContext searchContext = searchService.createSearchContext(shardSearchLocalRequest, SearchService.NO_TIMEOUT, null);, +            ParsedQuery parsedQuery = searchContext.getQueryShardContext().toQuery(request.query());, +            searchContext.parsedQuery(parsedQuery);, +            searchContext.preProcess(request.rewrite());, +            explanation = explain(searchContext, request.rewrite());, +            Releasables.close(searchContext, () -> SearchContext.removeCurrent());, +    private String explain(SearchContext context, boolean rewritten) throws IOException {, +        Query query = context.query();, +        if (rewritten && query instanceof MatchNoDocsQuery) {, +            return context.parsedQuery().query().toString();, +            return query.toString();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.common.lease.Releasables;, +    private final SearchService searchService;, +                                  TransportService transportService, SearchService searchService, ActionFilters actionFilters,, +                                  IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.searchService = searchService;, +        ShardSearchLocalRequest shardSearchLocalRequest = new ShardSearchLocalRequest(shardId,, +            new String[]{request.type()}, request.nowInMillis, request.filteringAlias());, +        SearchContext context = searchService.createSearchContext(shardSearchLocalRequest, SearchService.NO_TIMEOUT, null);, +        SearchContext.setCurrent(context);, +        Engine.GetResult result = null;, +        try {, +            result = context.indexShard().get(new Engine.Get(false, uidTerm));, +            context.preProcess(true);, +                GetResult getResult = context.indexShard().getService().get(result, request.id(), request.type(), request.fields(),, +                    request.fetchSourceContext());, +            Releasables.close(result, context, () -> SearchContext.removeCurrent());, +++ b/core/src/main/java/org/elasticsearch/action/get/GetRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.index.query.ParsedQuery;, +    private final SearchService searchService;, +            TransportService transportService, SearchService searchService, ActionFilters actionFilters,]