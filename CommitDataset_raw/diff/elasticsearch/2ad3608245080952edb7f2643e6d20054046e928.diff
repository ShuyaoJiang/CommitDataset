[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +            if (pointRangeQuery.getNumDims() != 1) {, +                throw new UnsupportedQueryException(query);, +            }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +            if (pointRangeQuery.getNumDims() != 1) {, +                throw new UnsupportedQueryException(query);, +            }, +, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorQuerySearchIT.java, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.common.unit.DistanceUnit;, +import java.util.Arrays;, +, +import static org.elasticsearch.index.query.QueryBuilders.geoBoundingBoxQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoDistanceQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoPolygonQuery;, +    public void testPercolatorGeoQueries() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("test"), +            .addMapping("type", "field1", "type=geo_point", "field2", "type=geo_shape", "query", "type=percolator"), +            );, +, +        client().prepareIndex("test", "type", "1"), +            .setSource(jsonBuilder().startObject().field("query",, +                geoDistanceQuery("field1").point(52.18, 4.38).distance(50, DistanceUnit.KILOMETERS)), +            .endObject()).get();, +, +        client().prepareIndex("test", "type", "2"), +            .setSource(jsonBuilder().startObject().field("query",, +                geoBoundingBoxQuery("field1").setCorners(52.3, 4.4, 52.1, 4.6)), +            .endObject()).get();, +, +        client().prepareIndex("test", "type", "3"), +            .setSource(jsonBuilder().startObject().field("query",, +                geoPolygonQuery("field1", Arrays.asList(new GeoPoint(52.1, 4.4), new GeoPoint(52.3, 4.5), new GeoPoint(52.1, 4.6)))), +            .endObject()).get();, +        refresh();, +, +        BytesReference source = jsonBuilder().startObject(), +            .startObject("field1").field("lat", 52.20).field("lon", 4.51).endObject(), +            .endObject().bytes();, +        SearchResponse response = client().prepareSearch(), +            .setQuery(new PercolateQueryBuilder("query", source, XContentType.JSON)), +            .addSort("_id", SortOrder.ASC), +            .get();, +        assertHitCount(response, 3);, +        assertThat(response.getHits().getAt(0).getId(), equalTo("1"));, +        assertThat(response.getHits().getAt(1).getId(), equalTo("2"));, +        assertThat(response.getHits().getAt(2).getId(), equalTo("3"));, +    }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +            if (pointRangeQuery.getNumDims() != 1) {, +                throw new UnsupportedQueryException(query);, +            }, +, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorQuerySearchIT.java, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.common.unit.DistanceUnit;, +import java.util.Arrays;, +, +import static org.elasticsearch.index.query.QueryBuilders.geoBoundingBoxQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoDistanceQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoPolygonQuery;, +    public void testPercolatorGeoQueries() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("test"), +            .addMapping("type", "field1", "type=geo_point", "field2", "type=geo_shape", "query", "type=percolator"), +            );, +, +        client().prepareIndex("test", "type", "1"), +            .setSource(jsonBuilder().startObject().field("query",, +                geoDistanceQuery("field1").point(52.18, 4.38).distance(50, DistanceUnit.KILOMETERS)), +            .endObject()).get();, +, +        client().prepareIndex("test", "type", "2"), +            .setSource(jsonBuilder().startObject().field("query",, +                geoBoundingBoxQuery("field1").setCorners(52.3, 4.4, 52.1, 4.6)), +            .endObject()).get();, +, +        client().prepareIndex("test", "type", "3"), +            .setSource(jsonBuilder().startObject().field("query",, +                geoPolygonQuery("field1", Arrays.asList(new GeoPoint(52.1, 4.4), new GeoPoint(52.3, 4.5), new GeoPoint(52.1, 4.6)))), +            .endObject()).get();, +        refresh();, +, +        BytesReference source = jsonBuilder().startObject(), +            .startObject("field1").field("lat", 52.20).field("lon", 4.51).endObject(), +            .endObject().bytes();, +        SearchResponse response = client().prepareSearch(), +            .setQuery(new PercolateQueryBuilder("query", source, XContentType.JSON)), +            .addSort("_id", SortOrder.ASC), +            .get();, +        assertHitCount(response, 3);, +        assertThat(response.getHits().getAt(0).getId(), equalTo("1"));, +        assertThat(response.getHits().getAt(1).getId(), equalTo("2"));, +        assertThat(response.getHits().getAt(2).getId(), equalTo("3"));, +    }, +, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/QueryAnalyzerTests.java]