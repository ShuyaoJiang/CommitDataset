[+++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        return Queries.newMatchAllQuery();, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        return Queries.newMatchAllQuery();, +++ b/src/main/java/org/elasticsearch/common/lucene/search/ApplyAcceptedDocsFilter.java, +    , +    @Override, +    public int hashCode() {, +        final int prime = 31;, +        int result = 1;, +        result = prime * result + ((filter == null) ? 0 : filter.hashCode());, +        return result;, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj), +            return true;, +        if (obj == null), +            return false;, +        if (getClass() != obj.getClass()), +            return false;, +        ApplyAcceptedDocsFilter other = (ApplyAcceptedDocsFilter) obj;, +        if (filter == null) {, +            if (other.filter != null), +                return false;, +        } else if (!filter.equals(other.filter)), +            return false;, +        return true;, +    }, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        return Queries.newMatchAllQuery();, +++ b/src/main/java/org/elasticsearch/common/lucene/search/ApplyAcceptedDocsFilter.java, +    , +    @Override, +    public int hashCode() {, +        final int prime = 31;, +        int result = 1;, +        result = prime * result + ((filter == null) ? 0 : filter.hashCode());, +        return result;, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj), +            return true;, +        if (obj == null), +            return false;, +        if (getClass() != obj.getClass()), +            return false;, +        ApplyAcceptedDocsFilter other = (ApplyAcceptedDocsFilter) obj;, +        if (filter == null) {, +            if (other.filter != null), +                return false;, +        } else if (!filter.equals(other.filter)), +            return false;, +        return true;, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    /* In general we should never us a static query instance and share it., +     * In this case the instance is immutable so that's ok.*/, +    private static final Filter MATCH_ALL_DOCS_FILTER = new MatchAllDocsFilter();, +    , +    @SuppressWarnings("unchecked"), +    public static Query newMatchAllQuery() {, +        // We don't use MatchAllDocsQuery, its slower than the one below ... (much slower), +        // NEVER cache this XConstantScore Query it's not immutable and based on #3521, +        // some code might set a boost on this query., +        return new XConstantScoreQuery(MATCH_ALL_DOCS_FILTER);, +    }, +, +            newBq.add(newMatchAllQuery(), BooleanClause.Occur.MUST);, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        return Queries.newMatchAllQuery();, +++ b/src/main/java/org/elasticsearch/common/lucene/search/ApplyAcceptedDocsFilter.java, +    , +    @Override, +    public int hashCode() {, +        final int prime = 31;, +        int result = 1;, +        result = prime * result + ((filter == null) ? 0 : filter.hashCode());, +        return result;, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj), +            return true;, +        if (obj == null), +            return false;, +        if (getClass() != obj.getClass()), +            return false;, +        ApplyAcceptedDocsFilter other = (ApplyAcceptedDocsFilter) obj;, +        if (filter == null) {, +            if (other.filter != null), +                return false;, +        } else if (!filter.equals(other.filter)), +            return false;, +        return true;, +    }]