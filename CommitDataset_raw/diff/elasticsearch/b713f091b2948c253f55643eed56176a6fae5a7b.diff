[+++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/dev-tools/checkstyle_suppressions.xml, +  <!-- These files are generated by ANTLR so its silly to hold them to our rules. -->, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]parser[/\\]SqlBase(Base(Listener|Visitor)|Lexer|Listener|Parser|Visitor).java" checks="." />, +, +  <!-- NOCOMMIT Temporary-->, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\].*.java" checks="LineLength" />, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\].*.java" checks="EqualsHashCode" />, +  <suppress files="sql-clients[/\\].*.java" checks="LineLength" />, +, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential', 'Generated'], +++ b/dev-tools/checkstyle_suppressions.xml, +  <!-- These files are generated by ANTLR so its silly to hold them to our rules. -->, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]parser[/\\]SqlBase(Base(Listener|Visitor)|Lexer|Listener|Parser|Visitor).java" checks="." />, +, +  <!-- NOCOMMIT Temporary-->, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\].*.java" checks="LineLength" />, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]sql[/\\]expression[/\\].*.java" checks="EqualsHashCode" />, +  <suppress files="sql-clients[/\\].*.java" checks="LineLength" />, +, +++ b/plugin/build.gradle, +, +  mapping from: /jdbc-proto.*/, to: 'elasticsearch', +  mapping from: /cli-proto.*/, to: 'elasticsearch', +  mapping from: /net-client.*/, to: 'elasticsearch', +  ignoreSha 'jdbc-proto', +  ignoreSha 'cli-proto', +  ignoreSha 'net-client', +  // sql deps, +  compile project(':x-pack-elasticsearch:sql-clients:jdbc-proto'), +  compile project(':x-pack-elasticsearch:sql-clients:cli-proto'), +  compile 'org.antlr:antlr4-runtime:4.5.1-1', +, +compileJava.options.compilerArgs << "-parameters" << "-Xlint:-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-parameters" << "-Xlint:-deprecation,-rawtypes,-serial,-try,-unchecked", +, +, +/**********************************************, + *          SQL Parser regeneration           *, + **********************************************/, +, +configurations {, +  regenerate, +}, +, +dependencies {, +  regenerate 'org.antlr:antlr4:4.5.1-1', +}, +, +String grammarPath = 'src/main/antlr', +String outputPath = 'src/main/java/org/elasticsearch/xpack/sql/parser', +, +task cleanGenerated(type: Delete) {, +  delete fileTree(grammarPath) {, +    include '*.tokens', +  }, +  delete fileTree(outputPath) {, +    include 'SqlBase*.java', +  }, +}, +, +task regenParser(type: JavaExec) {, +  dependsOn cleanGenerated, +  main = 'org.antlr.v4.Tool', +  classpath = configurations.regenerate, +  systemProperty 'file.encoding', 'UTF-8', +  systemProperty 'user.language', 'en', +  systemProperty 'user.country', 'US', +  systemProperty 'user.variant', '', +  args '-Werror',, +       '-package', 'org.elasticsearch.xpack.sql.parser',, +       '-listener',, +       '-visitor',, +       '-o', outputPath,, +       "${file(grammarPath)}/SqlBase.g4", +}, +, +task regen {, +  dependsOn regenParser, +  doLast {, +    // moves token files to grammar directory for use with IDE's, +    ant.move(file: "${outputPath}/SqlBase.tokens", toDir: grammarPath), +    ant.move(file: "${outputPath}/SqlBaseLexer.tokens", toDir: grammarPath), +    // make the generated classes package private, +    ant.replaceregexp(match: 'public ((interface|class) \\QSqlBase\\E\\w+)',, +                      replace: '\\1',, +                      encoding: 'UTF-8') {, +      fileset(dir: outputPath, includes: 'SqlBase*.java'), +    }, +    // nuke timestamps/filenames in generated files, +    ant.replaceregexp(match: '\\Q// Generated from \\E.*',, +                      replace: '\\/\\/ ANTLR GENERATED CODE: DO NOT EDIT',, +                      encoding: 'UTF-8') {, +      fileset(dir: outputPath, includes: 'SqlBase*.java'), +    }, +    // remove tabs in antlr generated files]