[+++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/mutate/GsubExpression.java, +import java.util.Objects;, +        this.fieldName = Objects.requireNonNull(fieldName);, +        this.pattern = Objects.requireNonNull(pattern);, +        this.replacement = Objects.requireNonNull(replacement);, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +        GsubExpression that = (GsubExpression) o;, +        return Objects.equals(fieldName, that.fieldName) &&, +                Objects.equals(pattern.pattern(), that.pattern.pattern()) &&, +                Objects.equals(replacement, that.replacement);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(fieldName, pattern, replacement);, +    }, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/mutate/GsubExpression.java, +import java.util.Objects;, +        this.fieldName = Objects.requireNonNull(fieldName);, +        this.pattern = Objects.requireNonNull(pattern);, +        this.replacement = Objects.requireNonNull(replacement);, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +        GsubExpression that = (GsubExpression) o;, +        return Objects.equals(fieldName, that.fieldName) &&, +                Objects.equals(pattern.pattern(), that.pattern.pattern()) &&, +                Objects.equals(replacement, that.replacement);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(fieldName, pattern, replacement);, +    }, +++ b/plugins/ingest/src/test/java/org/elasticsearch/ingest/processor/mutate/MutateProcessorFactoryTests.java, +        assertThat(processor.getGsub().get(0), equalTo(new GsubExpression("foo", Pattern.compile("\\s.*e\\s"), "<word_ending_with_e>")));]