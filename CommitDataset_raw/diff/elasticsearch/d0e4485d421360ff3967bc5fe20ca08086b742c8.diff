[+++ b/build.gradle, +    "org.elasticsearch.gradle:build-tools:${version}": ':build-tools',, +++ b/build.gradle, +    "org.elasticsearch.gradle:build-tools:${version}": ':build-tools',, +++ b/buildSrc/build.gradle, +  test.exclude 'org/elasticsearch/test/NamingConventionsCheckBadClasses*', +  forbiddenApisTest.enabled = false, +, +  namingConventions {, +    testClass = 'org.elasticsearch.test.NamingConventionsCheckBadClasses$UnitTestCase', +    integTestClass = 'org.elasticsearch.test.NamingConventionsCheckBadClasses$IntegTestCase', +  }, +++ b/build.gradle, +    "org.elasticsearch.gradle:build-tools:${version}": ':build-tools',, +++ b/buildSrc/build.gradle, +  test.exclude 'org/elasticsearch/test/NamingConventionsCheckBadClasses*', +  forbiddenApisTest.enabled = false, +, +  namingConventions {, +    testClass = 'org.elasticsearch.test.NamingConventionsCheckBadClasses$UnitTestCase', +    integTestClass = 'org.elasticsearch.test.NamingConventionsCheckBadClasses$IntegTestCase', +  }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +import org.gradle.api.artifacts.Dependency, +    /**, +     * Superclass for all tests., +     */, +    @Input, +    String testClass = 'org.apache.lucene.util.LuceneTestCase', +, +    /**, +     * Superclass for all integration tests., +     */, +    @Input, +    String integTestClass = 'org.elasticsearch.test.ESIntegTestCase', +, +        // Extra classpath contains the actual test, +        project.configurations.create('namingConventions'), +        Dependency buildToolsDep = project.dependencies.add('namingConventions',, +                "org.elasticsearch.gradle:build-tools:${VersionProperties.elasticsearch}"), +        buildToolsDep.transitive = false // We don't need gradle in the classpath. It conflicts., +        FileCollection extraClasspath = project.configurations.namingConventions, +        dependsOn(extraClasspath), +, +                args('-cp', (classpath + extraClasspath).asPath, 'org.elasticsearch.test.NamingConventionsCheck'), +                args(testClass, integTestClass), +                if (':build-tools'.equals(project.path)) {, +++ b/build.gradle, +    "org.elasticsearch.gradle:build-tools:${version}": ':build-tools',, +++ b/buildSrc/build.gradle, +  test.exclude 'org/elasticsearch/test/NamingConventionsCheckBadClasses*', +  forbiddenApisTest.enabled = false, +, +  namingConventions {, +    testClass = 'org.elasticsearch.test.NamingConventionsCheckBadClasses$UnitTestCase', +    integTestClass = 'org.elasticsearch.test.NamingConventionsCheckBadClasses$IntegTestCase', +  }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +import org.gradle.api.artifacts.Dependency, +    /**, +     * Superclass for all tests., +     */, +    @Input, +    String testClass = 'org.apache.lucene.util.LuceneTestCase', +, +    /**, +     * Superclass for all integration tests., +     */, +    @Input, +    String integTestClass = 'org.elasticsearch.test.ESIntegTestCase', +, +        // Extra classpath contains the actual test, +        project.configurations.create('namingConventions'), +        Dependency buildToolsDep = project.dependencies.add('namingConventions',, +                "org.elasticsearch.gradle:build-tools:${VersionProperties.elasticsearch}"), +        buildToolsDep.transitive = false // We don't need gradle in the classpath. It conflicts., +        FileCollection extraClasspath = project.configurations.namingConventions, +        dependsOn(extraClasspath), +, +                args('-cp', (classpath + extraClasspath).asPath, 'org.elasticsearch.test.NamingConventionsCheck'), +                args(testClass, integTestClass), +                if (':build-tools'.equals(project.path)) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +        if (project.path != ':build-tools') {, +            /*, +             * Sadly, build-tools can't have logger-usage-check because that, +             * would create a circular project dependency between build-tools, +             * (which provides NamingConventionsCheck) and :test:logger-usage, +             * which provides the logger usage check. Since the build tools, +             * don't use the logger usage check because they don't have any, +             * of Elaticsearch's loggers and :test:logger-usage actually does, +             * use the NamingConventionsCheck we break the circular dependency, +             * here., +             */, +            precommitTasks.add(configureLoggerUsage(project)), +        }, +, +++ b/build.gradle, +    "org.elasticsearch.gradle:build-tools:${version}": ':build-tools',, +++ b/buildSrc/build.gradle]