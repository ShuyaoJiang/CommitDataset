[+++ b/docs/reference/docs/delete-by-query.asciidoc, +`1000`, etc) and throttles rate at which `_delete_by_query` issues batches of, +delete operations by padding each batch with a wait time. The throttling can be, +disabled by setting `requests_per_second` to `-1`., +, +The throttling is done by waiting between batches so that scroll that, +`_delete_by_query` uses internally can be given a timeout that takes into, +account the padding. The padding time is the difference between the batch size, +divided by the `requests_per_second` and the time spent writing. By default the, +batch size is `1000`, so if the `requests_per_second` is set to `500`:, +, +[source,txt], +--------------------------------------------------, +target_time = 1000 / 500 per second = 2 seconds, +wait_time = target_time - write_time = 2 seconds - .5 seconds = 1.5 seconds, +--------------------------------------------------, +, +Since the batch is issued as a single `_bulk` request large batch sizes will, +cause Elasticsearch to create many requests and then wait for a while before, +starting the next set. This is "bursty" instead of "smooth". The default is `-1`., +++ b/docs/reference/docs/delete-by-query.asciidoc, +`1000`, etc) and throttles rate at which `_delete_by_query` issues batches of, +delete operations by padding each batch with a wait time. The throttling can be, +disabled by setting `requests_per_second` to `-1`., +, +The throttling is done by waiting between batches so that scroll that, +`_delete_by_query` uses internally can be given a timeout that takes into, +account the padding. The padding time is the difference between the batch size, +divided by the `requests_per_second` and the time spent writing. By default the, +batch size is `1000`, so if the `requests_per_second` is set to `500`:, +, +[source,txt], +--------------------------------------------------, +target_time = 1000 / 500 per second = 2 seconds, +wait_time = target_time - write_time = 2 seconds - .5 seconds = 1.5 seconds, +--------------------------------------------------, +, +Since the batch is issued as a single `_bulk` request large batch sizes will, +cause Elasticsearch to create many requests and then wait for a while before, +starting the next set. This is "bursty" instead of "smooth". The default is `-1`., +++ b/docs/reference/docs/reindex.asciidoc, +`1000`, etc) and throttles rate at which reindex issues batches of index, +operations by padding each batch with a wait time. The throttling can be, +disabled by setting `requests_per_second` to `-1`., +The throttling is done by waiting between batches so that scroll that reindex, +uses internally can be given a timeout that takes into account the padding., +The padding time is the difference between the batch size divided by the, +`requests_per_second` and the time spent writing. By default the batch size is, +`1000`, so if the `requests_per_second` is set to `500`:, +[source,txt], +--------------------------------------------------, +target_time = 1000 / 500 per second = 2 seconds, +wait_time = target_time - write_time = 2 seconds - .5 seconds = 1.5 seconds, +--------------------------------------------------, +Since the batch is issued as a single `_bulk` request large batch sizes will, +++ b/docs/reference/docs/delete-by-query.asciidoc, +`1000`, etc) and throttles rate at which `_delete_by_query` issues batches of, +delete operations by padding each batch with a wait time. The throttling can be, +disabled by setting `requests_per_second` to `-1`., +, +The throttling is done by waiting between batches so that scroll that, +`_delete_by_query` uses internally can be given a timeout that takes into, +account the padding. The padding time is the difference between the batch size, +divided by the `requests_per_second` and the time spent writing. By default the, +batch size is `1000`, so if the `requests_per_second` is set to `500`:, +, +[source,txt], +--------------------------------------------------, +target_time = 1000 / 500 per second = 2 seconds, +wait_time = target_time - write_time = 2 seconds - .5 seconds = 1.5 seconds, +--------------------------------------------------, +, +Since the batch is issued as a single `_bulk` request large batch sizes will, +cause Elasticsearch to create many requests and then wait for a while before, +starting the next set. This is "bursty" instead of "smooth". The default is `-1`., +++ b/docs/reference/docs/reindex.asciidoc, +`1000`, etc) and throttles rate at which reindex issues batches of index, +operations by padding each batch with a wait time. The throttling can be, +disabled by setting `requests_per_second` to `-1`., +The throttling is done by waiting between batches so that scroll that reindex, +uses internally can be given a timeout that takes into account the padding., +The padding time is the difference between the batch size divided by the, +`requests_per_second` and the time spent writing. By default the batch size is, +`1000`, so if the `requests_per_second` is set to `500`:, +[source,txt], +--------------------------------------------------, +target_time = 1000 / 500 per second = 2 seconds, +wait_time = target_time - write_time = 2 seconds - .5 seconds = 1.5 seconds, +--------------------------------------------------, +Since the batch is issued as a single `_bulk` request large batch sizes will, +++ b/docs/reference/docs/update-by-query.asciidoc, +`1000`, etc) and throttles rate at which `_update_by_query` issues batches of, +index operations by padding each batch with a wait time. The throttling can be, +disabled by setting `requests_per_second` to `-1`., +, +The throttling is done by waiting between batches so that scroll that, +`_update_by_query` uses internally can be given a timeout that takes into, +account the padding. The padding time is the difference between the batch size, +divided by the `requests_per_second` and the time spent writing. By default the, +batch size is `1000`, so if the `requests_per_second` is set to `500`:]