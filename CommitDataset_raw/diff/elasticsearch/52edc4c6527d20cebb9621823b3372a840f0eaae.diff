[+++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +import java.util.*;, +        boolean mustOrMustNotBeforeShould = false;, +                if (!hasShouldClauses && (hasMustClauses || hasMustNotClauses)) {, +                    mustOrMustNotBeforeShould = true;, +                }, +        if (mustOrMustNotBeforeShould) {, +            // Sort the clause only once if we encounter a should before a must or must_not clause, +            Collections.sort(clauses, new Comparator<FilterClause>() {, +                @Override, +                public int compare(FilterClause o1, FilterClause o2) {, +                    if (o1.getOccur() != o2.getOccur()) {, +                        return o1.getOccur() == Occur.SHOULD ? -1 : 1;, +                    } else {, +                        return 0;, +                    }, +                }, +            });, +, +            // Because we sorted the clause we also need to sort the result clauses, +            Collections.sort(results, new Comparator<ResultClause>() {, +                @Override, +                public int compare(ResultClause o1, ResultClause o2) {, +                    if (o1.clause.getOccur() != o2.clause.getOccur()) {, +                        return o1.clause.getOccur() == Occur.SHOULD ? -1 : 1;, +                    } else {, +                        return 0;, +                    }, +                }, +            });, +        }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +import java.util.*;, +        boolean mustOrMustNotBeforeShould = false;, +                if (!hasShouldClauses && (hasMustClauses || hasMustNotClauses)) {, +                    mustOrMustNotBeforeShould = true;, +                }, +        if (mustOrMustNotBeforeShould) {, +            // Sort the clause only once if we encounter a should before a must or must_not clause, +            Collections.sort(clauses, new Comparator<FilterClause>() {, +                @Override, +                public int compare(FilterClause o1, FilterClause o2) {, +                    if (o1.getOccur() != o2.getOccur()) {, +                        return o1.getOccur() == Occur.SHOULD ? -1 : 1;, +                    } else {, +                        return 0;, +                    }, +                }, +            });, +, +            // Because we sorted the clause we also need to sort the result clauses, +            Collections.sort(results, new Comparator<ResultClause>() {, +                @Override, +                public int compare(ResultClause o1, ResultClause o2) {, +                    if (o1.clause.getOccur() != o2.clause.getOccur()) {, +                        return o1.clause.getOccur() == Occur.SHOULD ? -1 : 1;, +                    } else {, +                        return 0;, +                    }, +                }, +            });, +        }, +, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +                .field("field1", "test1"), +                .field("field1", "test1"), +                .field("field1", "test2"), +                .field("field1", "test2"), +, +        // This made #2979 fail!, +        response = client.prepareSearch("test").setFilter(, +                FilterBuilders.boolFilter(), +                        .must(FilterBuilders.termFilter("field1", "test1")), +                        .should(FilterBuilders.rangeFilter("num_long").from(1).to(2)), +                        .should(FilterBuilders.rangeFilter("num_long").from(3).to(4)), +        ).execute().actionGet();, +, +        assertThat(response.getHits().totalHits(), equalTo(2l));]