[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +import org.elasticsearch.xpack.sql.expression.Expressions;, +        throw new SqlIllegalArgumentException("Don't know how to translate {} {}", e.nodeName(), e);, +        throw new SqlIllegalArgumentException("Don't know how to translate {} {}", f.nodeName(), f);, +        throw new SqlIllegalArgumentException("Does not know how to convert argument {} for function {}", arg.nodeString(),, +                af.nodeString());, +                    "Line {}:{}: Comparisons against variables are not (currently) supported; offender [{}] in [{}]",, +                    Expressions.name(bc.right()), bc.symbol());, +            throw new SqlIllegalArgumentException("Don't know how to translate binary comparison [{}] in [{}]", bc.right().nodeString(),, +                    bc);, +                throw new SqlIllegalArgumentException("No idea how to translate " + e);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +import org.elasticsearch.xpack.sql.expression.Expressions;, +        throw new SqlIllegalArgumentException("Don't know how to translate {} {}", e.nodeName(), e);, +        throw new SqlIllegalArgumentException("Don't know how to translate {} {}", f.nodeName(), f);, +        throw new SqlIllegalArgumentException("Does not know how to convert argument {} for function {}", arg.nodeString(),, +                af.nodeString());, +                    "Line {}:{}: Comparisons against variables are not (currently) supported; offender [{}] in [{}]",, +                    Expressions.name(bc.right()), bc.symbol());, +            throw new SqlIllegalArgumentException("Don't know how to translate binary comparison [{}] in [{}]", bc.right().nodeString(),, +                    bc);, +                throw new SqlIllegalArgumentException("No idea how to translate " + e);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/FieldAttributeTests.java, +        assertThat(list, hasSize(8));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +import org.elasticsearch.xpack.sql.expression.Expressions;, +        throw new SqlIllegalArgumentException("Don't know how to translate {} {}", e.nodeName(), e);, +        throw new SqlIllegalArgumentException("Don't know how to translate {} {}", f.nodeName(), f);, +        throw new SqlIllegalArgumentException("Does not know how to convert argument {} for function {}", arg.nodeString(),, +                af.nodeString());, +                    "Line {}:{}: Comparisons against variables are not (currently) supported; offender [{}] in [{}]",, +                    Expressions.name(bc.right()), bc.symbol());, +            throw new SqlIllegalArgumentException("Don't know how to translate binary comparison [{}] in [{}]", bc.right().nodeString(),, +                    bc);, +                throw new SqlIllegalArgumentException("No idea how to translate " + e);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/FieldAttributeTests.java, +        assertThat(list, hasSize(8));, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumnsTests.java, +        assertEquals(16, rows.size());, +        row = rows.get(7);, +        row = rows.get(15);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +import org.elasticsearch.xpack.sql.expression.Expressions;, +        throw new SqlIllegalArgumentException("Don't know how to translate {} {}", e.nodeName(), e);, +        throw new SqlIllegalArgumentException("Don't know how to translate {} {}", f.nodeName(), f);, +        throw new SqlIllegalArgumentException("Does not know how to convert argument {} for function {}", arg.nodeString(),, +                af.nodeString());, +                    "Line {}:{}: Comparisons against variables are not (currently) supported; offender [{}] in [{}]",, +                    Expressions.name(bc.right()), bc.symbol());, +            throw new SqlIllegalArgumentException("Don't know how to translate binary comparison [{}] in [{}]", bc.right().nodeString(),, +                    bc);, +                throw new SqlIllegalArgumentException("No idea how to translate " + e);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/FieldAttributeTests.java, +        assertThat(list, hasSize(8));, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumnsTests.java, +        assertEquals(16, rows.size());, +        row = rows.get(7);, +        row = rows.get(15);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +import org.elasticsearch.xpack.sql.querydsl.query.RangeQuery;, +import org.joda.time.DateTime;, +, +    public void testComparisonAgainstColumns() {, +        LogicalPlan p = plan("SELECT some.string FROM test WHERE date > int");, +        assertTrue(p instanceof Project);, +        p = ((Project) p).child();, +        assertTrue(p instanceof Filter);, +        Expression condition = ((Filter) p).condition();, +        SqlIllegalArgumentException ex = expectThrows(SqlIllegalArgumentException.class, () -> QueryTranslator.toQuery(condition, false));, +        assertEquals("Line 1:43: Comparisons against variables are not (currently) supported; offender [int] in [>]", ex.getMessage());, +    }, +, +    public void testDateRange() {, +        LogicalPlan p = plan("SELECT some.string FROM test WHERE date > 1969-05-13");, +        assertTrue(p instanceof Project);, +        p = ((Project) p).child();, +        assertTrue(p instanceof Filter);, +        Expression condition = ((Filter) p).condition();, +        QueryTranslation translation = QueryTranslator.toQuery(condition, false);, +        Query query = translation.query;, +        assertTrue(query instanceof RangeQuery);, +        RangeQuery rq = (RangeQuery) query;, +        assertEquals("date", rq.field());, +        assertEquals(1951, rq.lower());, +    }, +, +    public void testDateRangeLiteral() {, +        LogicalPlan p = plan("SELECT some.string FROM test WHERE date > '1969-05-13'");, +        assertTrue(p instanceof Project);, +        p = ((Project) p).child();, +        assertTrue(p instanceof Filter);, +        Expression condition = ((Filter) p).condition();, +        QueryTranslation translation = QueryTranslator.toQuery(condition, false);, +        Query query = translation.query;, +        assertTrue(query instanceof RangeQuery);, +        RangeQuery rq = (RangeQuery) query;, +        assertEquals("date", rq.field());, +        assertEquals("1969-05-13", rq.lower());, +    }]