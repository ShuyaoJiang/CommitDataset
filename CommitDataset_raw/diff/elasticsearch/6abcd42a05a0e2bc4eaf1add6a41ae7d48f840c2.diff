[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, CancelTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, CancelTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +            List<? extends FailedNodeException> nodeFailures) {, +    /**, +     * Set a reference to the {@linkplain DiscoveryNodes}. Used for calling {@link #toXContent(XContentBuilder, ToXContent.Params)} with, +     * {@code group_by=nodes}., +     */, +    public void setDiscoveryNodes(DiscoveryNodes discoveryNodes) {, +        //WTF is this? Why isn't this set by default;, +        this.discoveryNodes = discoveryNodes;, +    }, +, +            if (discoveryNodes == null) {, +                throw new IllegalStateException("discoveryNodes must be set before calling toXContent with group_by=nodes");, +            }, +        return Strings.toString(this);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, CancelTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +            List<? extends FailedNodeException> nodeFailures) {, +    /**, +     * Set a reference to the {@linkplain DiscoveryNodes}. Used for calling {@link #toXContent(XContentBuilder, ToXContent.Params)} with, +     * {@code group_by=nodes}., +     */, +    public void setDiscoveryNodes(DiscoveryNodes discoveryNodes) {, +        //WTF is this? Why isn't this set by default;, +        this.discoveryNodes = discoveryNodes;, +    }, +, +            if (discoveryNodes == null) {, +                throw new IllegalStateException("discoveryNodes must be set before calling toXContent with group_by=nodes");, +            }, +        return Strings.toString(this);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +                indexNameExpressionResolver, ListTasksRequest::new, ListTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new ListTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, CancelTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +            List<? extends FailedNodeException> nodeFailures) {, +    /**, +     * Set a reference to the {@linkplain DiscoveryNodes}. Used for calling {@link #toXContent(XContentBuilder, ToXContent.Params)} with, +     * {@code group_by=nodes}., +     */, +    public void setDiscoveryNodes(DiscoveryNodes discoveryNodes) {, +        //WTF is this? Why isn't this set by default;, +        this.discoveryNodes = discoveryNodes;, +    }, +, +            if (discoveryNodes == null) {, +                throw new IllegalStateException("discoveryNodes must be set before calling toXContent with group_by=nodes");, +            }, +        return Strings.toString(this);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +                indexNameExpressionResolver, ListTasksRequest::new, ListTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new ListTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.logging.ESLogger;, + * {@link RoutingNodes} represents a copy the routing information contained in the {@link ClusterState cluster state}., + * It can be either initialized as mutable or immutable (see {@link #RoutingNodes(ClusterState, boolean)}), allowing, + * or disallowing changes to its elements., + *, + * The main methods used to update routing entries are:, + * <ul>, + * <li> {@link #initializeShard} initializes an unassigned shard., + * <li> {@link #startShard} starts an initializing shard / completes relocation of a shard., + * <li> {@link #relocateShard} starts relocation of a started shard., + * <li> {@link #failShard} fails/cancels an assigned shard., + * </ul>, +        ensureMutable();, +    public ShardRouting initializeShard(ShardRouting unassignedShard, String nodeId, @Nullable String existingAllocationId,, +                                        long expectedSize) {, +        assert unassignedShard.unassigned() : "expected an unassigned shard " + unassignedShard;, +        ShardRouting initializedShard = unassignedShard.initialize(nodeId, existingAllocationId, expectedSize);, +    public Tuple<ShardRouting,ShardRouting> relocateShard(ShardRouting startedShard, String nodeId, long expectedShardSize) {, +        ShardRouting source = startedShard.relocate(nodeId, expectedShardSize);, +        updateAssigned(startedShard, source);]