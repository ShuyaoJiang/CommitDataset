[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_UUID_NA_VALUE;, +, +    private static final String INDEX_HEADER_KEY_UUID = "es.index_uuid";, +            builder.append(getIndex());, +    public Index getIndex() {, +            List<String> index_uuid = getHeader(INDEX_HEADER_KEY_UUID);, +            return new Index(index.get(0), index_uuid.get(0));, +            addHeader(INDEX_HEADER_KEY_UUID, index.getUUID());, +            setIndex(new Index(index, INDEX_UUID_NA_VALUE));, +            setIndex(shardId.getIndex());, +    public void setShard(String index, int shardId) {, +            setIndex(index);, +            addHeader(SHARD_HEADER_KEY, Integer.toString(shardId));, +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_UUID_NA_VALUE;, +, +    private static final String INDEX_HEADER_KEY_UUID = "es.index_uuid";, +            builder.append(getIndex());, +    public Index getIndex() {, +            List<String> index_uuid = getHeader(INDEX_HEADER_KEY_UUID);, +            return new Index(index.get(0), index_uuid.get(0));, +            addHeader(INDEX_HEADER_KEY_UUID, index.getUUID());, +            setIndex(new Index(index, INDEX_UUID_NA_VALUE));, +            setIndex(shardId.getIndex());, +    public void setShard(String index, int shardId) {, +            setIndex(index);, +            addHeader(SHARD_HEADER_KEY, Integer.toString(shardId));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +import org.elasticsearch.index.Index;, +                final Index index = ((ElasticsearchException) t).getIndex();, +                if (index != null) {, +                    this.index = index.getName();, +                } else {, +                    this.index = null;, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_UUID_NA_VALUE;, +, +    private static final String INDEX_HEADER_KEY_UUID = "es.index_uuid";, +            builder.append(getIndex());, +    public Index getIndex() {, +            List<String> index_uuid = getHeader(INDEX_HEADER_KEY_UUID);, +            return new Index(index.get(0), index_uuid.get(0));, +            addHeader(INDEX_HEADER_KEY_UUID, index.getUUID());, +            setIndex(new Index(index, INDEX_UUID_NA_VALUE));, +            setIndex(shardId.getIndex());, +    public void setShard(String index, int shardId) {, +            setIndex(index);, +            addHeader(SHARD_HEADER_KEY, Integer.toString(shardId));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +import org.elasticsearch.index.Index;, +                final Index index = ((ElasticsearchException) t).getIndex();, +                if (index != null) {, +                    this.index = index.getName();, +                } else {, +                    this.index = null;, +                }, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +import org.elasticsearch.action.ingest.DeletePipelineAction;, +import org.elasticsearch.action.ingest.DeletePipelineTransportAction;, +import org.elasticsearch.action.ingest.GetPipelineAction;, +import org.elasticsearch.action.ingest.GetPipelineTransportAction;, +import org.elasticsearch.action.ingest.PutPipelineAction;, +import org.elasticsearch.action.ingest.PutPipelineTransportAction;, +import org.elasticsearch.action.ingest.SimulatePipelineAction;, +import org.elasticsearch.action.ingest.SimulatePipelineTransportAction;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.node.NodeModule;, +    private final boolean ingestEnabled;, +    public ActionModule(boolean ingestEnabled, boolean proxy) {, +        this.ingestEnabled = ingestEnabled;, +        if (proxy == false) {, +            if (ingestEnabled) {, +                registerFilter(IngestActionFilter.class);, +            } else {, +                registerFilter(IngestProxyActionFilter.class);, +            }, +        }, +        registerAction(PutPipelineAction.INSTANCE, PutPipelineTransportAction.class);, +        registerAction(GetPipelineAction.INSTANCE, GetPipelineTransportAction.class);, +        registerAction(DeletePipelineAction.INSTANCE, DeletePipelineTransportAction.class);, +        registerAction(SimulatePipelineAction.INSTANCE, SimulatePipelineTransportAction.class);, +]