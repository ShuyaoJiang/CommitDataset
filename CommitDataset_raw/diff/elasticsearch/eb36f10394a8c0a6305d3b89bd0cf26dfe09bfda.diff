[+++ b/test/framework/src/main/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java, +        private ReplicationTargets replicationTargets;, +, +            computeReplicationTargets();, +            promoteReplicaToPrimary(replica, (shard, listener) -> {, +                computeReplicationTargets();, +                primaryReplicaSyncer.resync(shard,, +                    });, +            });, +                computeReplicationTargets();, +            computeReplicationTargets();, +            computeReplicationTargets();, +, +        private synchronized void computeReplicationTargets() {, +            this.replicationTargets = new ReplicationTargets(primary, replicas);, +        }, +, +        private synchronized ReplicationTargets getReplicationTargets() {, +            return replicationTargets;, +        }, +    }, +, +    static final class ReplicationTargets {, +        final IndexShard primary;, +        final List<IndexShard> replicas;, +, +        ReplicationTargets(IndexShard primary, List<IndexShard> replicas) {, +            this.primary = primary;, +            this.replicas = Collections.unmodifiableList(replicas);, +        }, +        private final ReplicationTargets replicationTargets;, +            this.replicationTargets = group.getReplicationTargets();, +            return replicationTargets.primary;, +                return getPrimaryShard().routingEntry();, +                return performOnPrimary(getPrimaryShard(), request);, +                getPrimaryShard().updateLocalCheckpointForShard(allocationId, checkpoint);, +                getPrimaryShard().updateGlobalCheckpointForShard(allocationId, globalCheckpoint);, +                return getPrimaryShard().getLocalCheckpoint();, +                return getPrimaryShard().getGlobalCheckpoint();, +                return getPrimaryShard().getMaxSeqNoOfUpdatesOrDeletes();, +                return getPrimaryShard().getReplicationGroup();, +                IndexShard replica = replicationTargets.replicas.stream(), +                        getPrimaryShard().getPendingPrimaryTerm(),]