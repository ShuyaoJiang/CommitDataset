[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +    public TransportNoopBulkAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopBulkAction.NAME, transportService, actionFilters, BulkRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +    public TransportNoopBulkAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopBulkAction.NAME, transportService, actionFilters, BulkRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +import org.elasticsearch.search.aggregations.InternalAggregations;, +    public TransportNoopSearchAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopSearchAction.NAME, transportService, actionFilters, (Writeable.Reader<SearchRequest>) SearchRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +    public TransportNoopBulkAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopBulkAction.NAME, transportService, actionFilters, BulkRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +import org.elasticsearch.search.aggregations.InternalAggregations;, +    public TransportNoopSearchAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopSearchAction.NAME, transportService, actionFilters, (Writeable.Reader<SearchRequest>) SearchRequest::new);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/GrokProcessorGetAction.java, +        public TransportAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +            super(settings, NAME, transportService, actionFilters, Request::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +    public TransportNoopBulkAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopBulkAction.NAME, transportService, actionFilters, BulkRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +import org.elasticsearch.search.aggregations.InternalAggregations;, +    public TransportNoopSearchAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopSearchAction.NAME, transportService, actionFilters, (Writeable.Reader<SearchRequest>) SearchRequest::new);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/GrokProcessorGetAction.java, +        public TransportAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +            super(settings, NAME, transportService, actionFilters, Request::new);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportMultiSearchTemplateAction.java, +    public TransportMultiSearchTemplateAction(Settings settings, TransportService transportService,, +        super(settings, MultiSearchTemplateAction.NAME, transportService, actionFilters, MultiSearchTemplateRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +    public TransportNoopBulkAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopBulkAction.NAME, transportService, actionFilters, BulkRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +import org.elasticsearch.search.aggregations.InternalAggregations;, +    public TransportNoopSearchAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopSearchAction.NAME, transportService, actionFilters, (Writeable.Reader<SearchRequest>) SearchRequest::new);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/GrokProcessorGetAction.java, +        public TransportAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +            super(settings, NAME, transportService, actionFilters, Request::new);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportMultiSearchTemplateAction.java, +    public TransportMultiSearchTemplateAction(Settings settings, TransportService transportService,, +        super(settings, MultiSearchTemplateAction.NAME, transportService, actionFilters, MultiSearchTemplateRequest::new);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java, +    public TransportSearchTemplateAction(Settings settings, TransportService transportService, ActionFilters actionFilters,, +                                         ScriptService scriptService, NamedXContentRegistry xContentRegistry, NodeClient client) {, +        super(settings, SearchTemplateAction.NAME, transportService, actionFilters,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +    public TransportNoopBulkAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopBulkAction.NAME, transportService, actionFilters, BulkRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +import org.elasticsearch.search.aggregations.InternalAggregations;, +    public TransportNoopSearchAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopSearchAction.NAME, transportService, actionFilters, (Writeable.Reader<SearchRequest>) SearchRequest::new);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/GrokProcessorGetAction.java, +        public TransportAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +            super(settings, NAME, transportService, actionFilters, Request::new);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportMultiSearchTemplateAction.java, +    public TransportMultiSearchTemplateAction(Settings settings, TransportService transportService,, +        super(settings, MultiSearchTemplateAction.NAME, transportService, actionFilters, MultiSearchTemplateRequest::new);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java, +    public TransportSearchTemplateAction(Settings settings, TransportService transportService, ActionFilters actionFilters,, +                                         ScriptService scriptService, NamedXContentRegistry xContentRegistry, NodeClient client) {, +        super(settings, SearchTemplateAction.NAME, transportService, actionFilters,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessExecuteAction.java, +        public TransportAction(Settings settings, TransportService transportService,, +            super(settings, NAME, transportService, actionFilters, Request::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +    public TransportNoopBulkAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopBulkAction.NAME, transportService, actionFilters, BulkRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +import org.elasticsearch.search.aggregations.InternalAggregations;, +    public TransportNoopSearchAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +        super(settings, NoopSearchAction.NAME, transportService, actionFilters, (Writeable.Reader<SearchRequest>) SearchRequest::new);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/GrokProcessorGetAction.java, +        public TransportAction(Settings settings, TransportService transportService, ActionFilters actionFilters) {, +            super(settings, NAME, transportService, actionFilters, Request::new);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportMultiSearchTemplateAction.java, +    public TransportMultiSearchTemplateAction(Settings settings, TransportService transportService,, +        super(settings, MultiSearchTemplateAction.NAME, transportService, actionFilters, MultiSearchTemplateRequest::new);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java, +    public TransportSearchTemplateAction(Settings settings, TransportService transportService, ActionFilters actionFilters,, +                                         ScriptService scriptService, NamedXContentRegistry xContentRegistry, NodeClient client) {, +        super(settings, SearchTemplateAction.NAME, transportService, actionFilters,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessExecuteAction.java, +        public TransportAction(Settings settings, TransportService transportService,, +            super(settings, NAME, transportService, actionFilters, Request::new);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/TransportRankEvalAction.java, +    public TransportRankEvalAction(Settings settings, ActionFilters actionFilters, Client client,, +        super(settings, RankEvalAction.NAME, transportService, actionFilters,]