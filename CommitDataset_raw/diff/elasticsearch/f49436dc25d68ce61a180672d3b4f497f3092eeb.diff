[+++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Creates a listener that delegates all responses it receives to another listener., +     *, +     * @param delegate ActionListener to wrap and delegate any exception to, +     * @param bc BiConsumer invoked with delegate listener and exception, +     * @param <T> Type of the listener, +     * @return Delegating listener, +     */, +    static <T> ActionListener<T> delegateResponse(ActionListener<T> delegate, BiConsumer<ActionListener<T>, Exception> bc) {, +        return new ActionListener<T>() {, +, +            @Override, +            public void onResponse(T r) {, +                delegate.onResponse(r);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                bc.accept(delegate, e);, +            }, +        };, +    }, +, +    /**, +     * Creates a listener that delegates all exceptions it receives to another listener., +     *, +     * @param delegate ActionListener to wrap and delegate any exception to, +     * @param bc BiConsumer invoked with delegate listener and response, +     * @param <T> Type of the delegating listener's response, +     * @param <R> Type of the wrapped listeners, +     * @return Delegating listener, +     */, +    static <T, R> ActionListener<T> delegateFailure(ActionListener<R> delegate, BiConsumer<ActionListener<R>, T> bc) {, +        return new ActionListener<T>() {, +, +            @Override, +            public void onResponse(T r) {, +                bc.accept(delegate, r);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                delegate.onFailure(e);, +            }, +        };, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Creates a listener that delegates all responses it receives to another listener., +     *, +     * @param delegate ActionListener to wrap and delegate any exception to, +     * @param bc BiConsumer invoked with delegate listener and exception, +     * @param <T> Type of the listener, +     * @return Delegating listener, +     */, +    static <T> ActionListener<T> delegateResponse(ActionListener<T> delegate, BiConsumer<ActionListener<T>, Exception> bc) {, +        return new ActionListener<T>() {, +, +            @Override, +            public void onResponse(T r) {, +                delegate.onResponse(r);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                bc.accept(delegate, e);, +            }, +        };, +    }, +, +    /**, +     * Creates a listener that delegates all exceptions it receives to another listener., +     *, +     * @param delegate ActionListener to wrap and delegate any exception to, +     * @param bc BiConsumer invoked with delegate listener and response, +     * @param <T> Type of the delegating listener's response, +     * @param <R> Type of the wrapped listeners, +     * @return Delegating listener, +     */, +    static <T, R> ActionListener<T> delegateFailure(ActionListener<R> delegate, BiConsumer<ActionListener<R>, T> bc) {, +        return new ActionListener<T>() {, +, +            @Override, +            public void onResponse(T r) {, +                bc.accept(delegate, r);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                delegate.onFailure(e);, +            }, +        };, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                    protected void doRun() {, +        getFinishedTaskFromIndex(thisTask, request, ActionListener.delegateResponse(listener, (delegatedListener, e) -> {, +                    delegatedListener.onResponse(new GetTaskResponse(new TaskResult(true, snapshotOfRunningTask)));]