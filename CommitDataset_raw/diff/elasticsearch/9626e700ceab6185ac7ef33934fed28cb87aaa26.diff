[+++ b/client/rest/src/main/java/org/elasticsearch/client/RequestOptions.java, +import java.util.ArrayList;, +    /**, +     * Default request options., +     */, +            Collections.<Header>emptyList(), HeapBufferedResponseConsumerFactory.DEFAULT, null).build();, +    private final WarningsHandler warningsHandler;, +        this.warningsHandler = builder.warningsHandler;, +    /**, +     * Create a builder that contains these options but can be modified., +     */, +        return new Builder(headers, httpAsyncResponseConsumerFactory, warningsHandler);, +    /**, +     * How this request should handle warnings. If null (the default) then, +     * this request will default to the behavior dictacted by, +     * {@link RestClientBuilder#setStrictDeprecationMode}., +     * <p>, +     * This can be set to {@link WarningsHandler#PERMISSIVE} if the client, +     * should ignore all warnings which is the same behavior as setting, +     * strictDeprecationMode to true. It can be set to, +     * {@link WarningsHandler#STRICT} if the client should fail if there are, +     * any warnings which is the same behavior as settings, +     * strictDeprecationMode to false., +     * <p>, +     * It can also be set to a custom implementation of, +     * {@linkplain WarningsHandler} to permit only certain warnings or to, +     * fail the request if the warnings returned don't, +     * <strong>exactly</strong> match some set., +     */, +    public WarningsHandler getWarningsHandler() {, +        return warningsHandler;, +    }, +, +        boolean comma = false;, +            b.append("headers=");, +            comma = true;, +            if (comma) b.append(", ");, +            comma = true;, +            b.append("consumerFactory=").append(httpAsyncResponseConsumerFactory);, +        }, +        if (warningsHandler != null) {, +            if (comma) b.append(", ");, +            comma = true;, +            b.append("warningsHandler=").append(warningsHandler);, +                && httpAsyncResponseConsumerFactory.equals(other.httpAsyncResponseConsumerFactory), +                && Objects.equals(warningsHandler, other.warningsHandler);, +        return Objects.hash(headers, httpAsyncResponseConsumerFactory, warningsHandler);, +    /**, +     * Builds {@link RequestOptions}. Get one by calling, +     * {@link RequestOptions#toBuilder} on {@link RequestOptions#DEFAULT} or, +     * any other {@linkplain RequestOptions}., +     */, +        private WarningsHandler warningsHandler;, +        private Builder(List<Header> headers, HttpAsyncResponseConsumerFactory httpAsyncResponseConsumerFactory,, +                WarningsHandler warningsHandler) {, +            this.warningsHandler = warningsHandler;, +, +        /**, +         * How this request should handle warnings. If null (the default) then, +         * this request will default to the behavior dictacted by, +         * {@link RestClientBuilder#setStrictDeprecationMode}., +         * <p>, +         * This can be set to {@link WarningsHandler#PERMISSIVE} if the client, +         * should ignore all warnings which is the same behavior as setting, +         * strictDeprecationMode to true. It can be set to, +         * {@link WarningsHandler#STRICT} if the client should fail if there are, +         * any warnings which is the same behavior as settings, +         * strictDeprecationMode to false., +         * <p>, +         * It can also be set to a custom implementation of, +         * {@linkplain WarningsHandler} to permit only certain warnings or to, +         * fail the request if the warnings returned don't, +         * <strong>exactly</strong> match some set., +         */, +        public void setWarningsHandler(WarningsHandler warningsHandler) {, +            this.warningsHandler = warningsHandler;, +        }, +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestOptions.java, +import java.util.ArrayList;, +    /**, +     * Default request options., +     */, +            Collections.<Header>emptyList(), HeapBufferedResponseConsumerFactory.DEFAULT, null).build();, +    private final WarningsHandler warningsHandler;, +        this.warningsHandler = builder.warningsHandler;, +    /**, +     * Create a builder that contains these options but can be modified., +     */, +        return new Builder(headers, httpAsyncResponseConsumerFactory, warningsHandler);, +    /**, +     * How this request should handle warnings. If null (the default) then, +     * this request will default to the behavior dictacted by, +     * {@link RestClientBuilder#setStrictDeprecationMode}., +     * <p>, +     * This can be set to {@link WarningsHandler#PERMISSIVE} if the client, +     * should ignore all warnings which is the same behavior as setting, +     * strictDeprecationMode to true. It can be set to, +     * {@link WarningsHandler#STRICT} if the client should fail if there are, +     * any warnings which is the same behavior as settings, +     * strictDeprecationMode to false.]