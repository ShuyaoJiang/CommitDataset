[+++ b/docs/reference/search/profile.asciidoc, +Each shard object lists its `id` which uniquely identifies the shard.  The ID's format is, +Lucene index.  Most search requests submitted by the user will only execute a single `search` against the Lucene index., +a `query` array and a `collector` array.  Alongside the `search` object is an `aggregations` object that contains the profile information for the aggregations. In the future, more sections may be added, such as `suggest`, `highlight`, etc., +    iterates over matching documents and generates a score per-document (e.g. how well does "foo" match the document?)., +    This may also show timing associated with caching, if enabled and/or applicable for the query, +    Some queries, such as phrase queries, match documents using a "two-phase" process.  First, the document is, +    This records the time taken to score a particular document via its Scorer, +which is responsible for coordinating the traversal, scoring, and collection of matching documents.  Collectors, +`Collector` used by Elasticsearch.  The `reason` field attempts to give a plain English description of the class name.  The, +It should be noted that Collector times are **independent** from the Query times.  They are calculated, combined,, +For reference, the various collector reasons are:, +    global aggs, and post_filters are combined in a single search., +    Because the global scope is necessarily different from the executed query, it must execute its own, +<1> The `"aggregations"` portion has been omitted because it will be covered in the next section, +As you can see, the output is significantly more verbose than before.  All the major portions of the query are, +A special note needs to be made about the `MultiTermQuery` class of queries.  This includes wildcards, regex, and fuzzy, +so Lucene rewrites the query in context of the segment being evaluated, e.g., one segment may contain the tokens, +token `[bakery]`, so the query rewrites to a single TermQuery for "bakery"., +This yields the following aggregation profile output:, +aggregation then has a child `LongTermsAggregator` which comes from the second term's aggregation on `likes`., +low-level method calls such as `collect`, `advance`, and `next_doc` can be fairly expensive, since these methods are called, +- Profiling also does not account for time spent in the queue, merging shard responses on the coordinating node, or, +additional work such as building global ordinals (an internal data structure used to speed up search), +diagnostics.  We hope to improve this over time. If you find obviously wrong numbers, strange query structures, or]