[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentFactory.java, +            throw new ElasticsearchParseException("Failed to derive xcontent from " + content);, +            throw new ElasticsearchParseException("Failed to derive xcontent from (offset=" + offset + ", length=" + length + "): " + Arrays.toString(data));, +            throw new ElasticsearchParseException("Failed to derive xcontent from " + bytes);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentFactory.java, +            throw new ElasticsearchParseException("Failed to derive xcontent from " + content);, +            throw new ElasticsearchParseException("Failed to derive xcontent from (offset=" + offset + ", length=" + length + "): " + Arrays.toString(data));, +            throw new ElasticsearchParseException("Failed to derive xcontent from " + bytes);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import java.util.Objects;, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (!(o instanceof MappedFieldType)) return false;, +        if (!super.equals(o)) return false;, +        MappedFieldType fieldType = (MappedFieldType) o;, +        return Objects.equals(boost, fieldType.boost) &&, +            Objects.equals(docValues, fieldType.docValues) &&, +            Objects.equals(names, fieldType.names) &&, +            Objects.equals(indexAnalyzer, fieldType.indexAnalyzer) &&, +            Objects.equals(searchAnalyzer, fieldType.searchAnalyzer) &&, +            Objects.equals(searchQuoteAnalyzer(), fieldType.searchQuoteAnalyzer()) &&, +            Objects.equals(similarity, fieldType.similarity) &&, +            Objects.equals(normsLoading, fieldType.normsLoading) &&, +            Objects.equals(fieldDataType, fieldType.fieldDataType) &&, +            Objects.equals(nullValue, fieldType.nullValue) &&, +            Objects.equals(nullValueAsString, fieldType.nullValueAsString);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(super.hashCode(), names, boost, docValues, indexAnalyzer, searchAnalyzer, searchQuoteAnalyzer, similarity, normsLoading, fieldDataType, nullValue, nullValueAsString);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentFactory.java, +            throw new ElasticsearchParseException("Failed to derive xcontent from " + content);, +            throw new ElasticsearchParseException("Failed to derive xcontent from (offset=" + offset + ", length=" + length + "): " + Arrays.toString(data));, +            throw new ElasticsearchParseException("Failed to derive xcontent from " + bytes);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import java.util.Objects;, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (!(o instanceof MappedFieldType)) return false;, +        if (!super.equals(o)) return false;, +        MappedFieldType fieldType = (MappedFieldType) o;, +        return Objects.equals(boost, fieldType.boost) &&, +            Objects.equals(docValues, fieldType.docValues) &&, +            Objects.equals(names, fieldType.names) &&, +            Objects.equals(indexAnalyzer, fieldType.indexAnalyzer) &&, +            Objects.equals(searchAnalyzer, fieldType.searchAnalyzer) &&, +            Objects.equals(searchQuoteAnalyzer(), fieldType.searchQuoteAnalyzer()) &&, +            Objects.equals(similarity, fieldType.similarity) &&, +            Objects.equals(normsLoading, fieldType.normsLoading) &&, +            Objects.equals(fieldDataType, fieldType.fieldDataType) &&, +            Objects.equals(nullValue, fieldType.nullValue) &&, +            Objects.equals(nullValueAsString, fieldType.nullValueAsString);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(super.hashCode(), names, boost, docValues, indexAnalyzer, searchAnalyzer, searchQuoteAnalyzer, similarity, normsLoading, fieldDataType, nullValue, nullValueAsString);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +import java.util.Objects;, +            ((BinaryFieldType)fieldType).setTryUncompressing(context.indexCreatedVersion().before(Version.V_2_0_0));, +        private boolean tryUncompressing = false;, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (!(o instanceof BinaryFieldType)) return false;, +            if (!super.equals(o)) return false;, +            BinaryFieldType that = (BinaryFieldType) o;, +            return Objects.equals(tryUncompressing, that.tryUncompressing);, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(super.hashCode(), tryUncompressing);, +        }, +, +        public boolean tryUncompressing() {, +            return tryUncompressing;, +        }, +, +        public void setTryUncompressing(boolean tryUncompressing) {, +            checkIfFrozen();, +            this.tryUncompressing = tryUncompressing;, +        }, +, +        @Override, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentFactory.java, +            throw new ElasticsearchParseException("Failed to derive xcontent from " + content);, +            throw new ElasticsearchParseException("Failed to derive xcontent from (offset=" + offset + ", length=" + length + "): " + Arrays.toString(data));, +            throw new ElasticsearchParseException("Failed to derive xcontent from " + bytes);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import java.util.Objects;, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;]