[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.inject.CreationException;, +import org.elasticsearch.common.inject.spi.Message;, +import java.util.Set;, +import static com.google.common.collect.Sets.newHashSet;, + * A main entry point when starting from the command line., +public class Bootstrap {, +    public static boolean isMemoryLocked() {, +        return Natives.isMemoryLocked();, +    }, +, +    /** Calls doMain(), but with special formatting of errors */, +    public static void main(String[] args) throws StartupError {, +        try {, +            doMain(args);, +        } catch (Throwable t) {, +            throw new StartupError(t);, +        }, +    }, +, +    public static void doMain(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.inject.CreationException;, +import org.elasticsearch.common.inject.spi.Message;, +import java.util.Set;, +import static com.google.common.collect.Sets.newHashSet;, + * A main entry point when starting from the command line., +public class Bootstrap {, +    public static boolean isMemoryLocked() {, +        return Natives.isMemoryLocked();, +    }, +, +    /** Calls doMain(), but with special formatting of errors */, +    public static void main(String[] args) throws StartupError {, +        try {, +            doMain(args);, +        } catch (Throwable t) {, +            throw new StartupError(t);, +        }, +    }, +, +    public static void doMain(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCLIParser.java, +public class BootstrapCLIParser extends CliTool {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.inject.CreationException;, +import org.elasticsearch.common.inject.spi.Message;, +import java.util.Set;, +import static com.google.common.collect.Sets.newHashSet;, + * A main entry point when starting from the command line., +public class Bootstrap {, +    public static boolean isMemoryLocked() {, +        return Natives.isMemoryLocked();, +    }, +, +    /** Calls doMain(), but with special formatting of errors */, +    public static void main(String[] args) throws StartupError {, +        try {, +            doMain(args);, +        } catch (Throwable t) {, +            throw new StartupError(t);, +        }, +    }, +, +    public static void doMain(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCLIParser.java, +public class BootstrapCLIParser extends CliTool {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.inject.CreationException;, +import org.elasticsearch.common.inject.spi.Message;, +import java.util.Set;, +import static com.google.common.collect.Sets.newHashSet;, + * A main entry point when starting from the command line., +public class Bootstrap {, +    public static boolean isMemoryLocked() {, +        return Natives.isMemoryLocked();, +    }, +, +    /** Calls doMain(), but with special formatting of errors */, +    public static void main(String[] args) throws StartupError {, +        try {, +            doMain(args);, +        } catch (Throwable t) {, +            throw new StartupError(t);, +        }, +    }, +, +    public static void doMain(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCLIParser.java, +public class BootstrapCLIParser extends CliTool {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, + * A wrapper around {@link Bootstrap} just so the process will look nicely on things like jps., +public class Elasticsearch extends Bootstrap {, +        Bootstrap.main(args);]