[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        registerAction(SearchAction.INSTANCE, TransportSearchAction.class);, +        registerAction(SearchScrollAction.INSTANCE, TransportSearchScrollAction.class);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        registerAction(SearchAction.INSTANCE, TransportSearchAction.class);, +        registerAction(SearchScrollAction.INSTANCE, TransportSearchScrollAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractAsyncAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.search;, +, +/**, + * Base implementation for an async action., + */, +abstract class AbstractAsyncAction {, +, +    private final long startTime;, +, +    protected AbstractAsyncAction() {, +        this.startTime = System.currentTimeMillis();, +    }, +, +    /**, +     * Return the time when the action started., +     */, +    protected final long startTime() {, +        return startTime;, +    }, +, +    /**, +     * Builds how long it took to execute the search., +     */, +    protected final long buildTookInMillis() {, +        // protect ourselves against time going backwards, +        // negative values don't make sense and we want to be able to serialize that thing as a vLong, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    }, +, +    abstract void start();, +}, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        registerAction(SearchAction.INSTANCE, TransportSearchAction.class);, +        registerAction(SearchScrollAction.INSTANCE, TransportSearchScrollAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractAsyncAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.search;, +, +/**, + * Base implementation for an async action., + */, +abstract class AbstractAsyncAction {, +, +    private final long startTime;, +, +    protected AbstractAsyncAction() {, +        this.startTime = System.currentTimeMillis();, +    }, +, +    /**, +     * Return the time when the action started., +     */]