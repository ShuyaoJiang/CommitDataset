[+++ b/docs/reference/settings/security-settings.asciidoc, +[float], +[[security-automata-settings]], +==== Automata Settings, +In places where {security} accepts wildcard patterns (e.g. index patterns in, +roles, group matches in the role mapping API), each pattern is compiled into, +an Automaton. The follow settings are available to control this behaviour., +, +`xpack.security.automata.max_determinized_states`::, +The upper limit on how many automaton states may be created by a single pattern., +This protects against too-difficult (e.g. exponentially hard) patterns., +Defaults to `100,000`., +, +`xpack.security.automata.cache.enabled`::, +Whether to cache the compiled automata. Compiling automata can be CPU intensive, +and may slowdown some operations. The cache reduces the frequency with which, +automata need to be compiled., +Defaults to `true`., +, +`xpack.security.automata.cache.size`::, +The maximum number of items to retain in the automata cache., +Defaults to `10,000`., +, +`xpack.security.automata.cache.ttl`::, +The length of time to retain in an item in the automata cache (based on most, +recent usage)., +Defaults to `48h` (48 hours)., +, +[float], +++ b/docs/reference/settings/security-settings.asciidoc, +[float], +[[security-automata-settings]], +==== Automata Settings, +In places where {security} accepts wildcard patterns (e.g. index patterns in, +roles, group matches in the role mapping API), each pattern is compiled into, +an Automaton. The follow settings are available to control this behaviour., +, +`xpack.security.automata.max_determinized_states`::, +The upper limit on how many automaton states may be created by a single pattern., +This protects against too-difficult (e.g. exponentially hard) patterns., +Defaults to `100,000`., +, +`xpack.security.automata.cache.enabled`::, +Whether to cache the compiled automata. Compiling automata can be CPU intensive, +and may slowdown some operations. The cache reduces the frequency with which, +automata need to be compiled., +Defaults to `true`., +, +`xpack.security.automata.cache.size`::, +The maximum number of items to retain in the automata cache., +Defaults to `10,000`., +, +`xpack.security.automata.cache.ttl`::, +The length of time to retain in an item in the automata cache (based on most, +recent usage)., +Defaults to `48h` (48 hours)., +, +[float], +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/support/Automatons.java, +import org.elasticsearch.common.cache.Cache;, +import org.elasticsearch.common.cache.CacheBuilder;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.set.Sets;, +import java.util.concurrent.ExecutionException;, +    static final Setting<Integer> MAX_DETERMINIZED_STATES_SETTING =, +, +    static final Setting<Boolean> CACHE_ENABLED =, +        Setting.boolSetting("xpack.security.automata.cache.enabled", true, Setting.Property.NodeScope);, +    static final Setting<Integer> CACHE_SIZE =, +        Setting.intSetting("xpack.security.automata.cache.size", 10_000, Setting.Property.NodeScope);, +    static final Setting<TimeValue> CACHE_TTL =, +        Setting.timeSetting("xpack.security.automata.cache.ttl", TimeValue.timeValueHours(48), Setting.Property.NodeScope);, +, +    // these values are not final since we allow them to be set at runtime, +    private static Cache<Object, Automaton> cache = buildCache(Settings.EMPTY);, +        if (cache == null) {, +            return buildAutomaton(patterns);, +        } else {, +            try {, +                return cache.computeIfAbsent(Sets.newHashSet(patterns), ignore -> buildAutomaton(patterns));, +            } catch (ExecutionException e) {, +                throw unwrapCacheException(e);, +            }, +        }, +    }, +, +    private static Automaton buildAutomaton(Collection<String> patterns) {, +        if (cache == null) {, +            return buildAutomaton(pattern);, +        } else {, +            try {, +                return cache.computeIfAbsent(pattern, ignore -> buildAutomaton(pattern));, +            } catch (ExecutionException e) {, +                throw unwrapCacheException(e);, +            }, +        }, +    }, +, +    private static Automaton buildAutomaton(String pattern) {, +    private static RuntimeException unwrapCacheException(ExecutionException e) {]