[+++ b/server/src/main/java/org/elasticsearch/index/query/TermsSetQueryBuilder.java, +    // package protected for testing purpose, +    String getFieldName() {, +        return fieldName;, +    }, +, +        return Objects.equals(fieldName, other.fieldName), +            && Objects.equals(values, other.values), +            && Objects.equals(minimumShouldMatchField, other.minimumShouldMatchField), +            && Objects.equals(minimumShouldMatchScript, other.minimumShouldMatchScript);, +++ b/server/src/main/java/org/elasticsearch/index/query/TermsSetQueryBuilder.java, +    // package protected for testing purpose, +    String getFieldName() {, +        return fieldName;, +    }, +, +        return Objects.equals(fieldName, other.fieldName), +            && Objects.equals(values, other.values), +            && Objects.equals(minimumShouldMatchField, other.minimumShouldMatchField), +            && Objects.equals(minimumShouldMatchScript, other.minimumShouldMatchScript);, +++ b/server/src/test/java/org/elasticsearch/index/query/TermsSetQueryBuilderTests.java, +import java.util.function.Predicate;, +import static java.util.Collections.emptyMap;, +        List<?> randomTerms = randomValues(fieldName);, +                    new Script(ScriptType.INLINE, MockScriptEngine.NAME, "_script", emptyMap()));, +    @Override, +    public TermsSetQueryBuilder mutateInstance(final TermsSetQueryBuilder instance) throws IOException {, +        String fieldName = instance.getFieldName();, +        List<?> values = instance.getValues();, +        String minimumShouldMatchField = null;, +        Script minimumShouldMatchScript = null;, +, +        switch (randomIntBetween(0, 3)) {, +            case 0:, +                Predicate<String> predicate = s -> s.equals(instance.getFieldName()) == false && s.equals(GEO_POINT_FIELD_NAME) == false, +                    && s.equals(GEO_SHAPE_FIELD_NAME) == false;, +                fieldName = randomValueOtherThanMany(predicate, () -> randomFrom(MAPPED_FIELD_NAMES));, +                values = randomValues(fieldName);, +                break;, +            case 1:, +                values = randomValues(fieldName);, +                break;, +            case 2:, +                minimumShouldMatchField = randomAlphaOfLengthBetween(1, 10);, +                break;, +            case 3:, +                minimumShouldMatchScript = new Script(ScriptType.INLINE, MockScriptEngine.NAME, randomAlphaOfLength(10), emptyMap());, +                break;, +        }, +, +        TermsSetQueryBuilder newInstance = new TermsSetQueryBuilder(fieldName, values);, +        if (minimumShouldMatchField != null) {, +            newInstance.setMinimumShouldMatchField(minimumShouldMatchField);, +        }, +        if (minimumShouldMatchScript != null) {, +            newInstance.setMinimumShouldMatchScript(minimumShouldMatchScript);, +        }, +        return newInstance;, +    }, +, +                Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "_script", emptyMap());, +    private static List<?> randomValues(final String fieldName) {, +        final int numValues = randomIntBetween(0, 10);, +        final List<Object> values = new ArrayList<>(numValues);, +, +        for (int i = 0; i < numValues; i++) {, +            values.add(getRandomValueForFieldName(fieldName));, +        }, +        return values;, +    }, +]