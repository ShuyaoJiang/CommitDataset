[+++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/ConnectionTestCase.java, +import java.sql.DatabaseMetaData;, +            DatabaseMetaData md = c.getMetaData();, +            assertEquals(Version.CURRENT.major, md.getDatabaseMajorVersion());, +            assertEquals(Version.CURRENT.minor, md.getDatabaseMinorVersion());, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/ConnectionTestCase.java, +import java.sql.DatabaseMetaData;, +            DatabaseMetaData md = c.getMetaData();, +            assertEquals(Version.CURRENT.major, md.getDatabaseMajorVersion());, +            assertEquals(Version.CURRENT.minor, md.getDatabaseMinorVersion());, +++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Proto.java, +//        QUERY_CLOSE(QueryClosenRequest::new), NOCOMMIT implement me, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/ConnectionTestCase.java, +import java.sql.DatabaseMetaData;, +            DatabaseMetaData md = c.getMetaData();, +            assertEquals(Version.CURRENT.major, md.getDatabaseMajorVersion());, +            assertEquals(Version.CURRENT.minor, md.getDatabaseMinorVersion());, +++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Proto.java, +//        QUERY_CLOSE(QueryClosenRequest::new), NOCOMMIT implement me, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +        checkOpen();, +        return !isClosed() && client.ping(TimeUnit.SECONDS.toMillis(timeout));, +    // There's no checkOpen on these methods since they are used by, +    // DatabaseMetadata that can work on a closed connection as well, +    // in fact, this information is cached by the underlying client, +    // once retrieved, +    int esInfoMajorVersion() throws SQLException {, +    int esInfoMinorVersion() throws SQLException {, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/ConnectionTestCase.java, +import java.sql.DatabaseMetaData;, +            DatabaseMetaData md = c.getMetaData();, +            assertEquals(Version.CURRENT.major, md.getDatabaseMajorVersion());, +            assertEquals(Version.CURRENT.minor, md.getDatabaseMinorVersion());, +++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Proto.java, +//        QUERY_CLOSE(QueryClosenRequest::new), NOCOMMIT implement me, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +        checkOpen();, +        return !isClosed() && client.ping(TimeUnit.SECONDS.toMillis(timeout));, +    // There's no checkOpen on these methods since they are used by, +    // DatabaseMetadata that can work on a closed connection as well, +    // in fact, this information is cached by the underlying client, +    // once retrieved, +    int esInfoMajorVersion() throws SQLException {, +    int esInfoMinorVersion() throws SQLException {, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +import org.elasticsearch.xpack.sql.session.Configuration;, +    public void nextPage(Configuration cfg, Cursor cursor, ActionListener<RowSet> listener) {, +        cursor.nextPage(cfg, client, listener);, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/ConnectionTestCase.java, +import java.sql.DatabaseMetaData;, +            DatabaseMetaData md = c.getMetaData();, +            assertEquals(Version.CURRENT.major, md.getDatabaseMajorVersion());, +            assertEquals(Version.CURRENT.minor, md.getDatabaseMinorVersion());, +++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Proto.java, +//        QUERY_CLOSE(QueryClosenRequest::new), NOCOMMIT implement me, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +        checkOpen();, +        return !isClosed() && client.ping(TimeUnit.SECONDS.toMillis(timeout));, +    // There's no checkOpen on these methods since they are used by, +    // DatabaseMetadata that can work on a closed connection as well, +    // in fact, this information is cached by the underlying client, +    // once retrieved, +    int esInfoMajorVersion() throws SQLException {, +    int esInfoMinorVersion() throws SQLException {, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +import org.elasticsearch.xpack.sql.session.Configuration;, +    public void nextPage(Configuration cfg, Cursor cursor, ActionListener<RowSet> listener) {, +        cursor.nextPage(cfg, client, listener);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/ScrollCursor.java, +import org.elasticsearch.xpack.sql.session.Configuration;, +    public void nextPage(Configuration cfg, Client client, ActionListener<RowSet> listener) {, +        SearchScrollRequest request = new SearchScrollRequest(scrollId).scroll(cfg.pageTimeout());, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/ConnectionTestCase.java, +import java.sql.DatabaseMetaData;, +            DatabaseMetaData md = c.getMetaData();, +            assertEquals(Version.CURRENT.major, md.getDatabaseMajorVersion());, +            assertEquals(Version.CURRENT.minor, md.getDatabaseMinorVersion());, +++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Proto.java, +//        QUERY_CLOSE(QueryClosenRequest::new), NOCOMMIT implement me, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +        checkOpen();, +        return !isClosed() && client.ping(TimeUnit.SECONDS.toMillis(timeout));, +    // There's no checkOpen on these methods since they are used by, +    // DatabaseMetadata that can work on a closed connection as well, +    // in fact, this information is cached by the underlying client, +    // once retrieved, +    int esInfoMajorVersion() throws SQLException {, +    int esInfoMinorVersion() throws SQLException {, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +import org.elasticsearch.xpack.sql.session.Configuration;, +    public void nextPage(Configuration cfg, Cursor cursor, ActionListener<RowSet> listener) {, +        cursor.nextPage(cfg, client, listener);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/ScrollCursor.java, +import org.elasticsearch.xpack.sql.session.Configuration;, +    public void nextPage(Configuration cfg, Client client, ActionListener<RowSet> listener) {, +        SearchScrollRequest request = new SearchScrollRequest(scrollId).scroll(cfg.pageTimeout());, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/function/AbstractFunctionRegistry.java, +import org.elasticsearch.xpack.sql.util.Check;, +                Check.isTrue(defs.containsKey(alias) == false, "Alias %s already exists", alias);, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/ConnectionTestCase.java]