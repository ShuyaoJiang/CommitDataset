[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults, request);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults, request);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +            if (isTemplateRequest) {, +                searchRequest.templateSource(data.slice(from,  nextMarker - from));, +            } else {, +            }, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults, request);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +            if (isTemplateRequest) {, +                searchRequest.templateSource(data.slice(from,  nextMarker - from));, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(SearchPhaseController.EMPTY_DOCS, firstResults,, +                    (AtomicArray<? extends FetchSearchResultProvider>) AtomicArray.empty(), request);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults, request);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +            if (isTemplateRequest) {, +                searchRequest.templateSource(data.slice(from,  nextMarker - from));, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(SearchPhaseController.EMPTY_DOCS, firstResults,, +                    (AtomicArray<? extends FetchSearchResultProvider>) AtomicArray.empty(), request);, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    final InternalSearchResponse internalResponse = searchPhaseController.merge(sortedShardList, queryFetchResults,, +                            queryFetchResults, request);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults, request);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +            if (isTemplateRequest) {, +                searchRequest.templateSource(data.slice(from,  nextMarker - from));, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchCountAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(SearchPhaseController.EMPTY_DOCS, firstResults,, +                    (AtomicArray<? extends FetchSearchResultProvider>) AtomicArray.empty(), request);, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +                    final InternalSearchResponse internalResponse = searchPhaseController.merge(sortedShardList, queryFetchResults,, +                            queryFetchResults, request);, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +, +import org.elasticsearch.search.fetch.ShardFetchSearchRequest;, +                    final InternalSearchResponse internalResponse = searchPhaseController.merge(sortedShardList, queryResults,, +                            fetchResults, request);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults, request);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {]