[+++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != JNACLibrary.RLIM_INFINITY;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != JNACLibrary.RLIM_INFINITY;, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexWarmer.INDEX_NORMS_LOADING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != JNACLibrary.RLIM_INFINITY;, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexWarmer.INDEX_NORMS_LOADING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +        return value;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != JNACLibrary.RLIM_INFINITY;, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexWarmer.INDEX_NORMS_LOADING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +        return value;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.fielddata.FieldDataType;, +            final Engine.Warmer engineWarmer = (searcher, toLevel) -> {, +                    warmer.warm(searcher, shard, IndexService.this.indexSettings, toLevel);, +        public void onCache(ShardId shardId, String fieldName, FieldDataType fieldDataType, Accountable ramUsage) {, +                    shard.fieldData().onCache(shardId, fieldName, fieldDataType, ramUsage);, +        public void onRemoval(ShardId shardId, String fieldName, FieldDataType fieldDataType, boolean wasEvicted, long sizeInBytes) {, +                    shard.fieldData().onRemoval(shardId, fieldName, fieldDataType, wasEvicted, sizeInBytes);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != JNACLibrary.RLIM_INFINITY;, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexWarmer.INDEX_NORMS_LOADING_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +        return value;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.fielddata.FieldDataType;, +            final Engine.Warmer engineWarmer = (searcher, toLevel) -> {, +                    warmer.warm(searcher, shard, IndexService.this.indexSettings, toLevel);, +        public void onCache(ShardId shardId, String fieldName, FieldDataType fieldDataType, Accountable ramUsage) {]