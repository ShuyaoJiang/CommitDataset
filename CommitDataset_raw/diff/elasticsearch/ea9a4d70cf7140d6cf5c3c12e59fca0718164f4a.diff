[+++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.ShardIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +                String value = fieldMapper.valueAsString(convertField(field));, +    private Object convertField(Field field) {, +        if (field.stringValue() != null) {, +            return field.stringValue();, +        } else if (field.binaryValue() != null) {, +            return BytesRef.deepCopyOf(field.binaryValue()).bytes;, +        } else if (field.numericValue() != null) {, +            return field.numericValue();, +        } else {, +            throw new ElasticSearchIllegalStateException("Field should have either a string, numeric or binary value");, +        }, +    }, +, +        addMoreLikeThis(request, boolBuilder, field.name(), fieldMapper.valueAsString(convertField(field)));, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.ShardIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +                String value = fieldMapper.valueAsString(convertField(field));, +    private Object convertField(Field field) {, +        if (field.stringValue() != null) {, +            return field.stringValue();, +        } else if (field.binaryValue() != null) {, +            return BytesRef.deepCopyOf(field.binaryValue()).bytes;, +        } else if (field.numericValue() != null) {, +            return field.numericValue();, +        } else {, +            throw new ElasticSearchIllegalStateException("Field should have either a string, numeric or binary value");, +        }, +    }, +, +        addMoreLikeThis(request, boolBuilder, field.name(), fieldMapper.valueAsString(convertField(field)));, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.ShardIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +                String value = fieldMapper.valueAsString(convertField(field));, +    private Object convertField(Field field) {, +        if (field.stringValue() != null) {, +            return field.stringValue();, +        } else if (field.binaryValue() != null) {, +            return BytesRef.deepCopyOf(field.binaryValue()).bytes;, +        } else if (field.numericValue() != null) {, +            return field.numericValue();, +        } else {, +            throw new ElasticSearchIllegalStateException("Field should have either a string, numeric or binary value");, +        }, +    }, +, +        addMoreLikeThis(request, boolBuilder, field.name(), fieldMapper.valueAsString(convertField(field)));, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.ShardIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +                String value = fieldMapper.valueAsString(convertField(field));, +    private Object convertField(Field field) {, +        if (field.stringValue() != null) {, +            return field.stringValue();, +        } else if (field.binaryValue() != null) {, +            return BytesRef.deepCopyOf(field.binaryValue()).bytes;, +        } else if (field.numericValue() != null) {, +            return field.numericValue();, +        } else {, +            throw new ElasticSearchIllegalStateException("Field should have either a string, numeric or binary value");, +        }, +    }, +, +        addMoreLikeThis(request, boolBuilder, field.name(), fieldMapper.valueAsString(convertField(field)));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.ShardIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +                String value = fieldMapper.valueAsString(convertField(field));, +    private Object convertField(Field field) {, +        if (field.stringValue() != null) {]