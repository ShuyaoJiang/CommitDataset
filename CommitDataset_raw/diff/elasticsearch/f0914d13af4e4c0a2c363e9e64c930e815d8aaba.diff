[+++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                // cacheRecycler.clear();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                // cacheRecycler.clear();, +++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.recycler.QueueRecycler;, +import org.elasticsearch.common.recycler.Recycler;, +import org.elasticsearch.common.recycler.SoftThreadLocalRecycler;, +import org.elasticsearch.common.recycler.ThreadLocalRecycler;, +import org.elasticsearch.common.settings.Settings;, +@SuppressWarnings("unchecked"), +public class CacheRecycler extends AbstractComponent {, +    public final Recycler<ExtTHashMap> hashMap;, +    public final Recycler<THashSet> hashSet;, +    public final Recycler<ExtTDoubleObjectHashMap> doubleObjectMap;, +    public final Recycler<ExtTLongObjectHashMap> longObjectMap;, +    public final Recycler<TLongLongHashMap> longLongMap;, +    public final Recycler<TIntIntHashMap> intIntMap;, +    public final Recycler<TFloatIntHashMap> floatIntMap;, +    public final Recycler<TDoubleIntHashMap> doubleIntMap;, +    public final Recycler<TLongIntHashMap> longIntMap;, +    public final Recycler<TObjectIntHashMap> objectIntMap;, +    public final Recycler<TIntObjectHashMap> intObjectMap;, +    public final Recycler<TObjectFloatHashMap> objectFloatMap;, +    public void close() {, +        hashMap.close();, +        hashSet.close();, +        doubleObjectMap.close();, +        longObjectMap.close();, +        longLongMap.close();, +        intIntMap.close();, +        floatIntMap.close();, +        doubleIntMap.close();, +        longIntMap.close();, +        objectIntMap.close();, +        intObjectMap.close();, +        objectFloatMap.close();, +    }, +    @Inject, +    public CacheRecycler(Settings settings) {, +        super(settings);, +        String type = settings.get("type", "soft_thread_local");, +        int limit = settings.getAsInt("limit", 10);, +        int smartSize = settings.getAsInt("smart_size", 1024);, +        hashMap = build(type, limit, smartSize, new Recycler.C<ExtTHashMap>() {, +            @Override, +            public ExtTHashMap newInstance(int sizing) {, +                return new ExtTHashMap(size(sizing));, +            }, +            @Override, +            public void clear(ExtTHashMap value) {, +                value.clear();, +            }, +        });, +        hashSet = build(type, limit, smartSize, new Recycler.C<THashSet>() {, +            @Override, +            public THashSet newInstance(int sizing) {, +                return new THashSet(size(sizing));, +            }, +            @Override, +            public void clear(THashSet value) {, +                value.clear();, +            }, +        });, +        doubleObjectMap = build(type, limit, smartSize, new Recycler.C<ExtTDoubleObjectHashMap>() {, +            @Override, +            public ExtTDoubleObjectHashMap newInstance(int sizing) {, +                return new ExtTDoubleObjectHashMap(size(sizing));, +            }, +            @Override, +            public void clear(ExtTDoubleObjectHashMap value) {, +                value.clear();, +            }, +        });, +        longObjectMap = build(type, limit, smartSize, new Recycler.C<ExtTLongObjectHashMap>() {, +            @Override, +            public ExtTLongObjectHashMap newInstance(int sizing) {, +                return new ExtTLongObjectHashMap(size(sizing));, +            }, +            @Override, +            public void clear(ExtTLongObjectHashMap value) {, +                value.clear();, +            }, +        });, +        longLongMap = build(type, limit, smartSize, new Recycler.C<TLongLongHashMap>() {, +            @Override, +            public TLongLongHashMap newInstance(int sizing) {, +                return new TLongLongHashMap(size(sizing));, +            }, +            @Override, +            public void clear(TLongLongHashMap value) {, +                value.clear();, +            }, +        });, +        intIntMap = build(type, limit, smartSize, new Recycler.C<TIntIntHashMap>() {, +            @Override, +            public TIntIntHashMap newInstance(int sizing) {]