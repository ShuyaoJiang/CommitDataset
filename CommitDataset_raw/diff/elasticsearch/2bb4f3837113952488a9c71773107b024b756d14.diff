[+++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageFixture.java, +                final String ifNoneMatch = request.getHeader("If-None-Match");, +                if ("*".equals(ifNoneMatch)) {, +                } else {, +                    destContainer.objects.put(destBlobName, request.getBody());, +                }, +++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageFixture.java, +                final String ifNoneMatch = request.getHeader("If-None-Match");, +                if ("*".equals(ifNoneMatch)) {, +                } else {, +                    destContainer.objects.put(destBlobName, request.getBody());, +                }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize, failIfAlreadyExists);, +++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageFixture.java, +                final String ifNoneMatch = request.getHeader("If-None-Match");, +                if ("*".equals(ifNoneMatch)) {, +                } else {, +                    destContainer.objects.put(destBlobName, request.getBody());, +                }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize, failIfAlreadyExists);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists), +        throws URISyntaxException, StorageException, FileAlreadyExistsException {, +        service.writeBlob(this.clientName, container, blobName, inputStream, blobSize, failIfAlreadyExists);, +++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageFixture.java, +                final String ifNoneMatch = request.getHeader("If-None-Match");, +                if ("*".equals(ifNoneMatch)) {, +                } else {, +                    destContainer.objects.put(destBlobName, request.getBody());, +                }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize, failIfAlreadyExists);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists), +        throws URISyntaxException, StorageException, FileAlreadyExistsException {, +        service.writeBlob(this.clientName, container, blobName, inputStream, blobSize, failIfAlreadyExists);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java, +    public void writeBlob(String account, String container, String blobName, InputStream inputStream, long blobSize,, +                          boolean failIfAlreadyExists), +            final AccessCondition accessCondition =, +                failIfAlreadyExists ? AccessCondition.generateIfNotExistsCondition() : AccessCondition.generateEmptyCondition();, +                blob.upload(inputStream, blobSize, accessCondition, null, client.v2().get()));, +            if (failIfAlreadyExists && se.getHttpStatusCode() == HttpURLConnection.HTTP_CONFLICT &&, +++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageFixture.java, +                final String ifNoneMatch = request.getHeader("If-None-Match");, +                if ("*".equals(ifNoneMatch)) {, +                } else {, +                    destContainer.objects.put(destBlobName, request.getBody());, +                }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize, failIfAlreadyExists);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists), +        throws URISyntaxException, StorageException, FileAlreadyExistsException {, +        service.writeBlob(this.clientName, container, blobName, inputStream, blobSize, failIfAlreadyExists);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java, +    public void writeBlob(String account, String container, String blobName, InputStream inputStream, long blobSize,, +                          boolean failIfAlreadyExists), +            final AccessCondition accessCondition =, +                failIfAlreadyExists ? AccessCondition.generateIfNotExistsCondition() : AccessCondition.generateEmptyCondition();, +                blob.upload(inputStream, blobSize, accessCondition, null, client.v2().get()));, +            if (failIfAlreadyExists && se.getHttpStatusCode() == HttpURLConnection.HTTP_CONFLICT &&, +++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureStorageServiceMock.java, +    public void writeBlob(String account, String container, String blobName, InputStream inputStream, long blobSize,, +                          boolean failIfAlreadyExists), +        if (failIfAlreadyExists && blobs.containsKey(blobName)) {, +++ b/modules/repository-url/src/main/java/org/elasticsearch/common/blobstore/url/URLBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageFixture.java, +                final String ifNoneMatch = request.getHeader("If-None-Match");, +                if ("*".equals(ifNoneMatch)) {, +                } else {, +                    destContainer.objects.put(destBlobName, request.getBody());, +                }, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists) throws IOException {, +            blobStore.writeBlob(buildKey(blobName), inputStream, blobSize, failIfAlreadyExists);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize, boolean failIfAlreadyExists), +        throws URISyntaxException, StorageException, FileAlreadyExistsException {, +        service.writeBlob(this.clientName, container, blobName, inputStream, blobSize, failIfAlreadyExists);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java]