[+++ b/.gitignore, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +                    continue; // we can't fail because of sheistiness with joda-time, +                if (clazz.equals("org.joda.time.base.BaseDateTime")) {, +                    return; // apparently this is intentional... clean this up, +                }, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +                    continue; // we can't fail because of sheistiness with joda-time, +                if (clazz.equals("org.joda.time.base.BaseDateTime")) {, +                    return; // apparently this is intentional... clean this up, +                }, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +                    continue; // we can't fail because of sheistiness with joda-time, +                if (clazz.equals("org.joda.time.base.BaseDateTime")) {, +                    return; // apparently this is intentional... clean this up, +                }, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +            throw new UserException(, +                    ExitCodes.USAGE,, +                    "plugin " + pluginName + " not found; run 'elasticsearch-plugin list' to get list of installed plugins");, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +                    continue; // we can't fail because of sheistiness with joda-time, +                if (clazz.equals("org.joda.time.base.BaseDateTime")) {, +                    return; // apparently this is intentional... clean this up, +                }, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +            throw new UserException(, +                    ExitCodes.USAGE,, +                    "plugin " + pluginName + " not found; run 'elasticsearch-plugin list' to get list of installed plugins");, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testBaseDateTimeLeniency() throws Exception {, +        URL[] jars = {makeJar(dir, "foo.jar", null, "org/joda/time/base/BaseDateTime.class"), makeJar(dir, "bar.jar", null, "org/joda/time/base/BaseDateTime.class")};, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +                    continue; // we can't fail because of sheistiness with joda-time, +                if (clazz.equals("org.joda.time.base.BaseDateTime")) {, +                    return; // apparently this is intentional... clean this up, +                }, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +            throw new UserException(, +                    ExitCodes.USAGE,, +                    "plugin " + pluginName + " not found; run 'elasticsearch-plugin list' to get list of installed plugins");, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testBaseDateTimeLeniency() throws Exception {, +        URL[] jars = {makeJar(dir, "foo.jar", null, "org/joda/time/base/BaseDateTime.class"), makeJar(dir, "bar.jar", null, "org/joda/time/base/BaseDateTime.class")};, +++ b/distribution/src/main/resources/config/jvm.options, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +                    continue; // we can't fail because of sheistiness with joda-time, +                if (clazz.equals("org.joda.time.base.BaseDateTime")) {, +                    return; // apparently this is intentional... clean this up, +                }, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +            throw new UserException(, +                    ExitCodes.USAGE,, +                    "plugin " + pluginName + " not found; run 'elasticsearch-plugin list' to get list of installed plugins");, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testBaseDateTimeLeniency() throws Exception {, +        URL[] jars = {makeJar(dir, "foo.jar", null, "org/joda/time/base/BaseDateTime.class"), makeJar(dir, "bar.jar", null, "org/joda/time/base/BaseDateTime.class")};, +++ b/distribution/src/main/resources/config/jvm.options, +++ /dev/null, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +                    continue; // we can't fail because of sheistiness with joda-time, +                if (clazz.equals("org.joda.time.base.BaseDateTime")) {, +                    return; // apparently this is intentional... clean this up, +                }, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +            throw new UserException(, +                    ExitCodes.USAGE,, +                    "plugin " + pluginName + " not found; run 'elasticsearch-plugin list' to get list of installed plugins");, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testBaseDateTimeLeniency() throws Exception {, +        URL[] jars = {makeJar(dir, "foo.jar", null, "org/joda/time/base/BaseDateTime.class"), makeJar(dir, "bar.jar", null, "org/joda/time/base/BaseDateTime.class")};, +++ b/distribution/src/main/resources/config/jvm.options, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +                    continue; // we can't fail because of sheistiness with joda-time]