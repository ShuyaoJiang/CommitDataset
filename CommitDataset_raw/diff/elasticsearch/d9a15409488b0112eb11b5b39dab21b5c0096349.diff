[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            throw new MapperParsingException("Type mismatch, provide type [" + source.type() + "] but mapper is of type [" + this.type + "]", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, must start with an object", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, after first object, either the type field or the actual properties should exist", context.mappingsModified());, +                throw new MapperParsingException("failed to parse, document is empty", context.mappingsModified());, +            throw new MapperParsingException("failed to parse", e, context.mappingsModified());, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            throw new MapperParsingException("Type mismatch, provide type [" + source.type() + "] but mapper is of type [" + this.type + "]", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, must start with an object", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, after first object, either the type field or the actual properties should exist", context.mappingsModified());, +                throw new MapperParsingException("failed to parse, document is empty", context.mappingsModified());, +            throw new MapperParsingException("failed to parse", e, context.mappingsModified());, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperParsingException.java, +        mappingsModified = false;, +    }, +, +    public boolean isMappingsModified() {, +        return mappingsModified;, +    }, +, +    private boolean mappingsModified = false;, +, +    public MapperParsingException(String message, boolean mappingsModified) {, +        super(message);, +        this.mappingsModified = mappingsModified;, +    }, +, +    public MapperParsingException(String message, Throwable cause, boolean mappingsModified) {, +        super(message, cause);, +        this.mappingsModified = mappingsModified;, +        this.mappingsModified = false;, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            throw new MapperParsingException("Type mismatch, provide type [" + source.type() + "] but mapper is of type [" + this.type + "]", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, must start with an object", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, after first object, either the type field or the actual properties should exist", context.mappingsModified());, +                throw new MapperParsingException("failed to parse, document is empty", context.mappingsModified());, +            throw new MapperParsingException("failed to parse", e, context.mappingsModified());, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperParsingException.java, +        mappingsModified = false;, +    }, +, +    public boolean isMappingsModified() {, +        return mappingsModified;, +    }, +, +    private boolean mappingsModified = false;, +, +    public MapperParsingException(String message, boolean mappingsModified) {, +        super(message);, +        this.mappingsModified = mappingsModified;, +    }, +, +    public MapperParsingException(String message, Throwable cause, boolean mappingsModified) {, +        super(message, cause);, +        this.mappingsModified = mappingsModified;, +        this.mappingsModified = false;, +++ b/src/main/java/org/elasticsearch/index/mapper/StrictDynamicMappingException.java, +    public StrictDynamicMappingException(String path, String fieldName, boolean mappingsModified) {, +        super("mapping set to strict, dynamic introduction of [" + fieldName + "] within [" + path + "] is not allowed", mappingsModified);, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            throw new MapperParsingException("Type mismatch, provide type [" + source.type() + "] but mapper is of type [" + this.type + "]", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, must start with an object", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, after first object, either the type field or the actual properties should exist", context.mappingsModified());, +                throw new MapperParsingException("failed to parse, document is empty", context.mappingsModified());, +            throw new MapperParsingException("failed to parse", e, context.mappingsModified());, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperParsingException.java, +        mappingsModified = false;, +    }, +, +    public boolean isMappingsModified() {, +        return mappingsModified;, +    }, +, +    private boolean mappingsModified = false;, +, +    public MapperParsingException(String message, boolean mappingsModified) {, +        super(message);, +        this.mappingsModified = mappingsModified;, +    }, +, +    public MapperParsingException(String message, Throwable cause, boolean mappingsModified) {, +        super(message, cause);, +        this.mappingsModified = mappingsModified;, +        this.mappingsModified = false;, +++ b/src/main/java/org/elasticsearch/index/mapper/StrictDynamicMappingException.java, +    public StrictDynamicMappingException(String path, String fieldName, boolean mappingsModified) {, +        super("mapping set to strict, dynamic introduction of [" + fieldName + "] within [" + path + "] is not allowed", mappingsModified);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +            throw new MapperParsingException("failed to parse [" + names.fullName() + "]", e, context.mappingsModified());, +                        throw new MapperParsingException("attempt to copy value to non-existing object [" + field + "]", context.mappingsModified());, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            throw new MapperParsingException("Type mismatch, provide type [" + source.type() + "] but mapper is of type [" + this.type + "]", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, must start with an object", context.mappingsModified());, +                throw new MapperParsingException("Malformed content, after first object, either the type field or the actual properties should exist", context.mappingsModified());, +                throw new MapperParsingException("failed to parse, document is empty", context.mappingsModified());, +            throw new MapperParsingException("failed to parse", e, context.mappingsModified());, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperParsingException.java, +        mappingsModified = false;, +    }, +]