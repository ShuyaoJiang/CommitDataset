[+++ b/src/main/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellChecker.java, +    public static final int DEFAULT_TOKEN_LIMIT = 10;, +    private final int tokenLimit;, +        this(nonErrorLikelihood, true, DEFAULT_TOKEN_LIMIT);, +    public NoisyChannelSpellChecker(double nonErrorLikelihood, boolean requireUnigram, int tokenLimit) {, +        this.tokenLimit = tokenLimit;, +                , +        if (candidateSetsList.isEmpty() || candidateSetsList.size() >= tokenLimit) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellChecker.java, +    public static final int DEFAULT_TOKEN_LIMIT = 10;, +    private final int tokenLimit;, +        this(nonErrorLikelihood, true, DEFAULT_TOKEN_LIMIT);, +    public NoisyChannelSpellChecker(double nonErrorLikelihood, boolean requireUnigram, int tokenLimit) {, +        this.tokenLimit = tokenLimit;, +                , +        if (candidateSetsList.isEmpty() || candidateSetsList.size() >= tokenLimit) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                    } else if ("token_limit".equals(fieldName) || "tokenLimit".equals(fieldName)) {, +                        int tokenLimit = parser.intValue();, +                        if (tokenLimit <= 0) {, +                            throw new ElasticSearchIllegalArgumentException("token_limit must be >= 1");, +                        }, +                        suggestion.setTokenLimit(tokenLimit);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellChecker.java, +    public static final int DEFAULT_TOKEN_LIMIT = 10;, +    private final int tokenLimit;, +        this(nonErrorLikelihood, true, DEFAULT_TOKEN_LIMIT);, +    public NoisyChannelSpellChecker(double nonErrorLikelihood, boolean requireUnigram, int tokenLimit) {, +        this.tokenLimit = tokenLimit;, +                , +        if (candidateSetsList.isEmpty() || candidateSetsList.size() >= tokenLimit) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                    } else if ("token_limit".equals(fieldName) || "tokenLimit".equals(fieldName)) {, +                        int tokenLimit = parser.intValue();, +                        if (tokenLimit <= 0) {, +                            throw new ElasticSearchIllegalArgumentException("token_limit must be >= 1");, +                        }, +                        suggestion.setTokenLimit(tokenLimit);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +        final NoisyChannelSpellChecker checker = new NoisyChannelSpellChecker(realWordErrorLikelihood, suggestion.getRequireUnigram(), suggestion.getTokenLimit());, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellChecker.java, +    public static final int DEFAULT_TOKEN_LIMIT = 10;, +    private final int tokenLimit;, +        this(nonErrorLikelihood, true, DEFAULT_TOKEN_LIMIT);, +    public NoisyChannelSpellChecker(double nonErrorLikelihood, boolean requireUnigram, int tokenLimit) {, +        this.tokenLimit = tokenLimit;, +                , +        if (candidateSetsList.isEmpty() || candidateSetsList.size() >= tokenLimit) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                    } else if ("token_limit".equals(fieldName) || "tokenLimit".equals(fieldName)) {, +                        int tokenLimit = parser.intValue();, +                        if (tokenLimit <= 0) {, +                            throw new ElasticSearchIllegalArgumentException("token_limit must be >= 1");, +                        }, +                        suggestion.setTokenLimit(tokenLimit);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +        final NoisyChannelSpellChecker checker = new NoisyChannelSpellChecker(realWordErrorLikelihood, suggestion.getRequireUnigram(), suggestion.getTokenLimit());, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +    private Integer tokenLimit;, +    public PhraseSuggestionBuilder tokenLimit(int tokenLimit) {, +        this.tokenLimit = tokenLimit;, +        return this;, +    }, +, +        if (tokenLimit != null) {, +            builder.field("token_limit", tokenLimit);, +        }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellChecker.java, +    public static final int DEFAULT_TOKEN_LIMIT = 10;, +    private final int tokenLimit;, +        this(nonErrorLikelihood, true, DEFAULT_TOKEN_LIMIT);, +    public NoisyChannelSpellChecker(double nonErrorLikelihood, boolean requireUnigram, int tokenLimit) {, +        this.tokenLimit = tokenLimit;, +                , +        if (candidateSetsList.isEmpty() || candidateSetsList.size() >= tokenLimit) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                    } else if ("token_limit".equals(fieldName) || "tokenLimit".equals(fieldName)) {, +                        int tokenLimit = parser.intValue();, +                        if (tokenLimit <= 0) {, +                            throw new ElasticSearchIllegalArgumentException("token_limit must be >= 1");, +                        }, +                        suggestion.setTokenLimit(tokenLimit);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +        final NoisyChannelSpellChecker checker = new NoisyChannelSpellChecker(realWordErrorLikelihood, suggestion.getRequireUnigram(), suggestion.getTokenLimit());, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +    private Integer tokenLimit;, +    public PhraseSuggestionBuilder tokenLimit(int tokenLimit) {, +        this.tokenLimit = tokenLimit;, +        return this;, +    }, +, +        if (tokenLimit != null) {, +            builder.field("token_limit", tokenLimit);, +        }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionContext.java, +    private int tokenLimit = NoisyChannelSpellChecker.DEFAULT_TOKEN_LIMIT;, +    public void setTokenLimit(int tokenLimit) {, +        this.tokenLimit = tokenLimit;, +    }, +   ]