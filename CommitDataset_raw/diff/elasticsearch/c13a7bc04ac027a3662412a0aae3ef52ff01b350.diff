[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Utility.java, +        if (value == null) {, +            throw new ClassCastException("cannot cast " +, +                    "null " + String.class.getCanonicalName() +  " to " + char.class.getCanonicalName());, +        }, +, +            throw new ClassCastException("cannot cast " +, +                    String.class.getCanonicalName() +  " with length not equal to one to " + char.class.getCanonicalName());, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Utility.java, +        if (value == null) {, +            throw new ClassCastException("cannot cast " +, +                    "null " + String.class.getCanonicalName() +  " to " + char.class.getCanonicalName());, +        }, +, +            throw new ClassCastException("cannot cast " +, +                    String.class.getCanonicalName() +  " with length not equal to one to " + char.class.getCanonicalName());, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/StandardCastTests.java, +, +    public void testStringCasts() {, +        exec("String o = 'string'; Object n = o;");, +        exec("String o = null; Object n = o;");, +        exec("String o = 'string'; Object n = (Object)o;");, +        exec("String o = null; Object n = (Object)o;");, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Number n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Number n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Number n = (String)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Number n = (String)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; boolean b = (boolean)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; boolean b = (boolean)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; byte b = (byte)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; byte b = (byte)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; short b = (short)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; short b = (short)o;"));, +, +        assertEquals('s', exec("String s = 's'; (char)s"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; char b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; char b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; char b = (char)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; char b = (char)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; int b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; int b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; int b = (int)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; int b = (int)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; long b = (long)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; long b = (long)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; float b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; float b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; float b = (float)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; float b = (float)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; double b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; double b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; double b = (double)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; double b = (double)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Boolean b = (Boolean)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Boolean b = (Boolean)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Byte b = (Byte)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Byte b = (Byte)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Short b = (Short)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Short b = (Short)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Character b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Character b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Character b = (Character)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Character b = (Character)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Integer b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Integer b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Integer b = (Integer)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Integer b = (Integer)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = 'string'; Long b = (Long)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("String o = null; Long b = (Long)o;"));, +]