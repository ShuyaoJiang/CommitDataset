[+++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/index/shard/ElasticsearchMergePolicy.java, +        return delegate.findMerges(mergeTrigger, segmentInfos, writer);, +            MergeSpecification spec = new MergeSpecification();, +        return delegate.findForcedMerges(segmentInfos, maxSegmentCount, segmentsToMerge, writer);, +        return delegate.findForcedDeletesMerges(segmentInfos, writer);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/index/shard/ElasticsearchMergePolicy.java, +        return delegate.findMerges(mergeTrigger, segmentInfos, writer);, +            MergeSpecification spec = new MergeSpecification();, +        return delegate.findForcedMerges(segmentInfos, maxSegmentCount, segmentsToMerge, writer);, +        return delegate.findForcedDeletesMerges(segmentInfos, writer);, +++ b/core/src/test/java/org/elasticsearch/common/lucene/uid/VersionsTests.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/index/shard/ElasticsearchMergePolicy.java, +        return delegate.findMerges(mergeTrigger, segmentInfos, writer);, +            MergeSpecification spec = new MergeSpecification();, +        return delegate.findForcedMerges(segmentInfos, maxSegmentCount, segmentsToMerge, writer);, +        return delegate.findForcedDeletesMerges(segmentInfos, writer);, +++ b/core/src/test/java/org/elasticsearch/common/lucene/uid/VersionsTests.java, +++ b/core/src/test/java/org/elasticsearch/index/VersionTypeTests.java]