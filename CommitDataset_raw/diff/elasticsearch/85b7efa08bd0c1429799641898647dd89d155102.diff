[+++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +                return indexQueryParser.parseInnerFilter(parser).filter();, +++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +                return indexQueryParser.parseInnerFilter(parser).filter();, +++ b/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +    public ParsedFilter parseInnerFilter(XContentParser parser) throws IOException {, +        return new ParsedFilter(context.parseInnerFilter(), context.copyNamedFilters());, +++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +                return indexQueryParser.parseInnerFilter(parser).filter();, +++ b/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +    public ParsedFilter parseInnerFilter(XContentParser parser) throws IOException {, +        return new ParsedFilter(context.parseInnerFilter(), context.copyNamedFilters());, +++ b/src/main/java/org/elasticsearch/index/query/ParsedFilter.java, +package org.elasticsearch.index.query;, +, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.Filter;, +import org.elasticsearch.common.lucene.search.Queries;, +, +public class ParsedFilter {, +, +    public static final ParsedFilter EMPTY = new ParsedFilter(Queries.MATCH_NO_FILTER, ImmutableMap.<String, Filter>of());, +, +    private final Filter filter;, +, +    private final ImmutableMap<String, Filter> namedFilters;, +, +    public ParsedFilter(Filter filter, ImmutableMap<String, Filter> namedFilters) {, +        this.filter = filter;, +        this.namedFilters = namedFilters;, +    }, +, +    public Filter filter() {, +        return filter;, +    }, +, +    public ImmutableMap<String, Filter> namedFilters() {, +        return namedFilters;, +    }, +}, +++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +                return indexQueryParser.parseInnerFilter(parser).filter();, +++ b/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +    public ParsedFilter parseInnerFilter(XContentParser parser) throws IOException {, +        return new ParsedFilter(context.parseInnerFilter(), context.copyNamedFilters());, +++ b/src/main/java/org/elasticsearch/index/query/ParsedFilter.java, +package org.elasticsearch.index.query;, +, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.Filter;, +import org.elasticsearch.common.lucene.search.Queries;, +, +public class ParsedFilter {, +, +    public static final ParsedFilter EMPTY = new ParsedFilter(Queries.MATCH_NO_FILTER, ImmutableMap.<String, Filter>of());, +, +    private final Filter filter;, +, +    private final ImmutableMap<String, Filter> namedFilters;, +, +    public ParsedFilter(Filter filter, ImmutableMap<String, Filter> namedFilters) {, +        this.filter = filter;, +        this.namedFilters = namedFilters;, +    }, +, +    public Filter filter() {, +        return filter;, +    }, +, +    public ImmutableMap<String, Filter> namedFilters() {, +        return namedFilters;, +    }, +}, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +                        Filter filter = documentIndexService.queryParserService().parseInnerFilter(parser).filter();, +                        Filter filter = documentIndexService.queryParserService().parseInnerFilter(parser).filter();, +++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +                return indexQueryParser.parseInnerFilter(parser).filter();, +++ b/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +    public ParsedFilter parseInnerFilter(XContentParser parser) throws IOException {, +        return new ParsedFilter(context.parseInnerFilter(), context.copyNamedFilters());, +++ b/src/main/java/org/elasticsearch/index/query/ParsedFilter.java, +package org.elasticsearch.index.query;, +, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.Filter;, +import org.elasticsearch.common.lucene.search.Queries;, +, +public class ParsedFilter {, +, +    public static final ParsedFilter EMPTY = new ParsedFilter(Queries.MATCH_NO_FILTER, ImmutableMap.<String, Filter>of());, +, +    private final Filter filter;, +, +    private final ImmutableMap<String, Filter> namedFilters;, +, +    public ParsedFilter(Filter filter, ImmutableMap<String, Filter> namedFilters) {, +        this.filter = filter;, +        this.namedFilters = namedFilters;, +    }]