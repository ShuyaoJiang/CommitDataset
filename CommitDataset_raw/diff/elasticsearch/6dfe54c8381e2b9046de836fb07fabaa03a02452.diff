[+++ b/server/src/main/java/org/elasticsearch/index/shard/GlobalCheckpointListeners.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +         * non-null and an instance of {@link ElasticsearchTimeoutException}. If the global checkpoint is updated, the exception will be, +         * null., +     * notified after if the timeout elapses. In this case, the listener will be notified with a {@link ElasticsearchTimeoutException}., +     * Passing null for the timeout means no timeout will be associated to the listener., +                                        final ElasticsearchTimeoutException e = new ElasticsearchTimeoutException(timeout.getStringRep());, +                assert e instanceof ElasticsearchTimeoutException : e;, +++ b/server/src/main/java/org/elasticsearch/index/shard/GlobalCheckpointListeners.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +         * non-null and an instance of {@link ElasticsearchTimeoutException}. If the global checkpoint is updated, the exception will be, +         * null., +     * notified after if the timeout elapses. In this case, the listener will be notified with a {@link ElasticsearchTimeoutException}., +     * Passing null for the timeout means no timeout will be associated to the listener., +                                        final ElasticsearchTimeoutException e = new ElasticsearchTimeoutException(timeout.getStringRep());, +                assert e instanceof ElasticsearchTimeoutException : e;, +++ b/server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +                        assertThat(e, instanceOf(ElasticsearchTimeoutException.class));, +                        final ArgumentCaptor<ElasticsearchTimeoutException> t =, +                                ArgumentCaptor.forClass(ElasticsearchTimeoutException.class);, +                        assertThat(e, instanceOf(ElasticsearchTimeoutException.class));, +++ b/server/src/main/java/org/elasticsearch/index/shard/GlobalCheckpointListeners.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +         * non-null and an instance of {@link ElasticsearchTimeoutException}. If the global checkpoint is updated, the exception will be, +         * null., +     * notified after if the timeout elapses. In this case, the listener will be notified with a {@link ElasticsearchTimeoutException}., +     * Passing null for the timeout means no timeout will be associated to the listener., +                                        final ElasticsearchTimeoutException e = new ElasticsearchTimeoutException(timeout.getStringRep());, +                assert e instanceof ElasticsearchTimeoutException : e;, +++ b/server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +                        assertThat(e, instanceOf(ElasticsearchTimeoutException.class));, +                        final ArgumentCaptor<ElasticsearchTimeoutException> t =, +                                ArgumentCaptor.forClass(ElasticsearchTimeoutException.class);, +                        assertThat(e, instanceOf(ElasticsearchTimeoutException.class));, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardIT.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +                        assertThat(e, instanceOf(ElasticsearchTimeoutException.class));]