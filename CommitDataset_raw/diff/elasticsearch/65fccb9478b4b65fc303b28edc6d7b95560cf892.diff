[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MinScoreQuery.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.search;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.BulkScorer;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.Explanation;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.LeafCollector;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.ScoreCachingWrappingScorer;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.search.TwoPhaseIterator;, +import org.apache.lucene.search.Weight;, +import org.apache.lucene.util.Bits;, +, +import java.io.IOException;, +import java.util.Objects;, +import java.util.Set;, +, +/**, + * A {@link Query} wrapper that only emits as hits documents whose score is, + * above a given threshold. This query only really makes sense for queries, + * whose score is computed manually, like eg. function score queries., + */, +public final class MinScoreQuery extends Query {, +, +    private final Query query;, +    private final float minScore;, +    private final IndexSearcher searcher;, +, +    /** Sole constructor. */, +    public MinScoreQuery(Query query, float minScore) {, +        this(query, minScore, null);, +    }, +, +    MinScoreQuery(Query query, float minScore, IndexSearcher searcher) {, +        this.query = query;, +        this.minScore = minScore;, +        this.searcher = searcher;, +    }, +, +    /** Return the wrapped query. */, +    public Query getQuery() {, +        return query;, +    }, +, +    /** Return the minimum score. */, +    public float getMinScore() {, +        return minScore;, +    }, +, +    @Override, +    public String toString(String field) {, +        return getClass().getSimpleName() + "(" + query.toString(field) + ", minScore=" + minScore + ")";, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (super.equals(obj) == false) {, +            return false;, +        }, +        MinScoreQuery that = (MinScoreQuery) obj;, +        return minScore == that.minScore, +                && searcher == that.searcher, +                && query.equals(that.query);, +    }, +, +    @Override, +    public int hashCode() {, +        return 31 * super.hashCode() + Objects.hash(query, minScore, searcher);, +    }, +, +    @Override, +    public Query rewrite(IndexReader reader) throws IOException {, +        if (getBoost() != 1f) {, +            return super.rewrite(reader);]