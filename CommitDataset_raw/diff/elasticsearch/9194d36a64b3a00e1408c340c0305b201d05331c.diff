[+++ b/src/main/java/org/elasticsearch/cluster/metadata/AliasMetaData.java, +                XContentBuilder builder = XContentFactory.jsonBuilder().map(filter);, +                this.filter = new CompressedString(builder.underlyingBytes(), 0, builder.underlyingBytesLength());, +++ b/src/main/java/org/elasticsearch/cluster/metadata/AliasMetaData.java, +                XContentBuilder builder = XContentFactory.jsonBuilder().map(filter);, +                this.filter = new CompressedString(builder.underlyingBytes(), 0, builder.underlyingBytesLength());, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +        XContentBuilder mappingBuilder = XContentFactory.jsonBuilder().map(mapping);, +        this.source = new CompressedString(mappingBuilder.underlyingBytes(), 0, mappingBuilder.underlyingBytesLength());, +++ b/src/main/java/org/elasticsearch/cluster/metadata/AliasMetaData.java, +                XContentBuilder builder = XContentFactory.jsonBuilder().map(filter);, +                this.filter = new CompressedString(builder.underlyingBytes(), 0, builder.underlyingBytesLength());, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +        XContentBuilder mappingBuilder = XContentFactory.jsonBuilder().map(mapping);, +        this.source = new CompressedString(mappingBuilder.underlyingBytes(), 0, mappingBuilder.underlyingBytesLength());, +++ b/src/main/java/org/elasticsearch/common/compress/CompressedString.java, +import org.elasticsearch.common.compress.lzf.LZF;, +    /**, +     * Constructor assuming the data provided is compressed (UTF8). It uses the provided, +     * array without copying it., +     */, +    /**, +     * Constructs a new compressed string, assuming the bytes are UTF8, by copying it over., +     *, +     * @param data   The byte array, +     * @param offset Offset into the byte array, +     * @param length The length of the data, +     * @throws IOException, +     */, +    public CompressedString(byte[] data, int offset, int length) throws IOException {, +        if (LZF.isCompressed(data, offset, length)) {, +            this.bytes = Arrays.copyOfRange(data, offset, offset + length);, +        } else {, +            this.bytes = LZFEncoder.encode(data, offset, length);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/AliasMetaData.java, +                XContentBuilder builder = XContentFactory.jsonBuilder().map(filter);, +                this.filter = new CompressedString(builder.underlyingBytes(), 0, builder.underlyingBytesLength());, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +        XContentBuilder mappingBuilder = XContentFactory.jsonBuilder().map(mapping);, +        this.source = new CompressedString(mappingBuilder.underlyingBytes(), 0, mappingBuilder.underlyingBytesLength());, +++ b/src/main/java/org/elasticsearch/common/compress/CompressedString.java, +import org.elasticsearch.common.compress.lzf.LZF;, +    /**, +     * Constructor assuming the data provided is compressed (UTF8). It uses the provided, +     * array without copying it., +     */, +    /**, +     * Constructs a new compressed string, assuming the bytes are UTF8, by copying it over., +     *, +     * @param data   The byte array, +     * @param offset Offset into the byte array, +     * @param length The length of the data, +     * @throws IOException, +     */, +    public CompressedString(byte[] data, int offset, int length) throws IOException {, +        if (LZF.isCompressed(data, offset, length)) {, +            this.bytes = Arrays.copyOfRange(data, offset, offset + length);, +        } else {, +            this.bytes = LZFEncoder.encode(data, offset, length);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            this.mappingSource = new CompressedString(builder.underlyingBytes(), 0, builder.underlyingBytesLength());]