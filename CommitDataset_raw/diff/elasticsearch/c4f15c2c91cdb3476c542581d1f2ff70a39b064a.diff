[+++ b/core/src/main/java/org/elasticsearch/action/RoutingMissingException.java, +import java.util.Objects;, +        Objects.requireNonNull(index, "index must not be null");, +        Objects.requireNonNull(type, "type must not be null");, +        Objects.requireNonNull(id, "id must not be null");, +++ b/core/src/main/java/org/elasticsearch/action/RoutingMissingException.java, +import java.util.Objects;, +        Objects.requireNonNull(index, "index must not be null");, +        Objects.requireNonNull(type, "type must not be null");, +        Objects.requireNonNull(id, "id must not be null");, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +, +    public String getPhaseName() {, +        return phaseName;, +    }, +++ b/core/src/main/java/org/elasticsearch/action/RoutingMissingException.java, +import java.util.Objects;, +        Objects.requireNonNull(index, "index must not be null");, +        Objects.requireNonNull(type, "type must not be null");, +        Objects.requireNonNull(id, "id must not be null");, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +, +    public String getPhaseName() {, +        return phaseName;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreakingException.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Override, +    protected void innerToXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.field("bytes_wanted", bytesWanted);, +        builder.field("bytes_limit", byteLimit);, +        super.innerToXContent(builder, params);, +    }, +++ b/core/src/main/java/org/elasticsearch/action/RoutingMissingException.java, +import java.util.Objects;, +        Objects.requireNonNull(index, "index must not be null");, +        Objects.requireNonNull(type, "type must not be null");, +        Objects.requireNonNull(id, "id must not be null");, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +, +    public String getPhaseName() {, +        return phaseName;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreakingException.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Override, +    protected void innerToXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.field("bytes_wanted", bytesWanted);, +        builder.field("bytes_limit", byteLimit);, +        super.innerToXContent(builder, params);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +            if (throwable instanceof CorruptIndexException) {, +++ b/core/src/main/java/org/elasticsearch/action/RoutingMissingException.java, +import java.util.Objects;, +        Objects.requireNonNull(index, "index must not be null");, +        Objects.requireNonNull(type, "type must not be null");, +        Objects.requireNonNull(id, "id must not be null");, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +, +    public String getPhaseName() {, +        return phaseName;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreakingException.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Override, +    protected void innerToXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.field("bytes_wanted", bytesWanted);, +        builder.field("bytes_limit", byteLimit);, +        super.innerToXContent(builder, params);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +            if (throwable instanceof CorruptIndexException) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/CreateFailedEngineException.java, +import java.util.Objects;, +    public CreateFailedEngineException(ShardId shardId, String type, String id, Throwable cause) {, +        super(shardId, "Create failed for [" + type + "#" + id + "]", cause);, +        Objects.requireNonNull(type, "type must not be null");, +        Objects.requireNonNull(id, "id must not be null");, +        this.type = type;, +        this.id = id;, +++ b/core/src/main/java/org/elasticsearch/action/RoutingMissingException.java, +import java.util.Objects;, +        Objects.requireNonNull(index, "index must not be null");, +        Objects.requireNonNull(type, "type must not be null");, +        Objects.requireNonNull(id, "id must not be null");, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +, +    public String getPhaseName() {, +        return phaseName;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreakingException.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +    @Override, +    protected void innerToXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.field("bytes_wanted", bytesWanted);]