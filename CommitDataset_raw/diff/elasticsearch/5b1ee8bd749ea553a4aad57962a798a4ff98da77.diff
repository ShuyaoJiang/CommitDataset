[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                } else if (shouldExecuteReplication(indexMetaData.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                } else if (shouldExecuteReplication(indexMetaData.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +            Seccomp.init(tmpFile);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterIndexHealth.java, +        this.index = indexMetaData.getIndex();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/exists/types/TransportTypesExistsAction.java, +            ImmutableOpenMap<String, MappingMetaData> mappings = state.metaData().getIndices().get(concreteIndex).getMappings();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            Settings settings = SettingsFilter.filterSettings(settingsFilter.getPatterns(), indexMetaData.getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +                IndexMetaData.isIndexUsingShadowReplicas(indexMeta.getSettings())) { // and the index uses shadow replicas, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                            Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +                Version version = Version.indexCreated(metaData.getIndices().get(concreteIndex).getSettings());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                    } else if (shouldExecuteReplication(indexMetaData.getSettings()) == false) {, +                } else if (shouldExecuteReplication(indexMetaData.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +            Seccomp.init(tmpFile);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Seccomp.java, +    static final int SECCOMP_MODE_FILTER       =   2;   // since Linux Linux 3.5, +    private static void linuxImpl() {, +        // check for kernel version, +        if (linux_libc.prctl(PR_GET_NO_NEW_PRIVS, 0, 0, 0, 0) < 0) {, +                case ENOSYS: throw new UnsupportedOperationException("seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in");, +                default: throw new UnsupportedOperationException("prctl(PR_GET_NO_NEW_PRIVS): " + JNACLibrary.strerror(errno));, +        if (linux_libc.prctl(PR_GET_SECCOMP, 0, 0, 0, 0) < 0) {, +            switch (errno) {, +                case EINVAL: throw new UnsupportedOperationException("seccomp unavailable: CONFIG_SECCOMP not compiled into kernel, CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER are needed");, +                default: throw new UnsupportedOperationException("prctl(PR_GET_SECCOMP): " + JNACLibrary.strerror(errno));, +        if (linux_libc.prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, 0, 0, 0) < 0) {, +        if (linux_libc.prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) < 0) {, +            if (linux_libc.prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, pointer, 0, 0) < 0) {, +        logger.debug("Linux seccomp filter installation successful");, +            throw new IllegalStateException("bug: should not be trying to initialize seccomp for an unsupported OS");]