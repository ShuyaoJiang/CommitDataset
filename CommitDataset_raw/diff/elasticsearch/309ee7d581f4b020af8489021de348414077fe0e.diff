[+++ b/src/main/java/org/elasticsearch/common/lucene/all/AllEntries.java, +        private final int startOffset;, +        public Entry(String name, FastStringReader reader, int startOffset, float boost) {, +            this.startOffset = startOffset;, +        public int startOffset() {, +            return startOffset;, +        }, +, +        final int lastStartOffset;, +        if (entries.isEmpty()) {, +            lastStartOffset = -1;, +        } else {, +            final Entry last = entries.get(entries.size() - 1);, +            lastStartOffset = last.startOffset() + last.reader().length();, +        }, +        final int startOffset = lastStartOffset + 1; // +1 because we insert a space between tokens, +        Entry entry = new Entry(name, new FastStringReader(text), startOffset, boost);, +    // compute the boost for a token with the given startOffset, +    public float boost(int startOffset) {, +        int lo = 0, hi = entries.size() - 1;, +        while (lo <= hi) {, +            final int mid = (lo + hi) >>> 1;, +            final int midOffset = entries.get(mid).startOffset();, +            if (startOffset < midOffset) {, +                hi = mid - 1;, +            } else {, +                lo = mid + 1;, +            }, +        }, +        final int index = Math.max(0, hi); // protection against broken token streams, +        assert entries.get(index).startOffset() <= startOffset;, +        assert index == entries.size() - 1 || entries.get(index + 1).startOffset() > startOffset;, +        return entries.get(index).boost();, +            // no need to close, these are readers on strings, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllEntries.java, +        private final int startOffset;, +        public Entry(String name, FastStringReader reader, int startOffset, float boost) {, +            this.startOffset = startOffset;, +        public int startOffset() {, +            return startOffset;, +        }, +, +        final int lastStartOffset;, +        if (entries.isEmpty()) {, +            lastStartOffset = -1;, +        } else {, +            final Entry last = entries.get(entries.size() - 1);, +            lastStartOffset = last.startOffset() + last.reader().length();, +        }, +        final int startOffset = lastStartOffset + 1; // +1 because we insert a space between tokens, +        Entry entry = new Entry(name, new FastStringReader(text), startOffset, boost);, +    // compute the boost for a token with the given startOffset, +    public float boost(int startOffset) {, +        int lo = 0, hi = entries.size() - 1;, +        while (lo <= hi) {, +            final int mid = (lo + hi) >>> 1;, +            final int midOffset = entries.get(mid).startOffset();, +            if (startOffset < midOffset) {, +                hi = mid - 1;, +            } else {, +                lo = mid + 1;, +            }, +        }, +        final int index = Math.max(0, hi); // protection against broken token streams, +        assert entries.get(index).startOffset() <= startOffset;, +        assert index == entries.size() - 1 || entries.get(index + 1).startOffset() > startOffset;, +        return entries.get(index).boost();, +            // no need to close, these are readers on strings, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllTokenStream.java, +import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;, +    private final OffsetAttribute offsetAttribute;, +        offsetAttribute = addAttribute(OffsetAttribute.class);, +        final float boost = allEntries.boost(offsetAttribute.startOffset());, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllEntries.java, +        private final int startOffset;, +        public Entry(String name, FastStringReader reader, int startOffset, float boost) {, +            this.startOffset = startOffset;, +        public int startOffset() {, +            return startOffset;, +        }, +, +        final int lastStartOffset;, +        if (entries.isEmpty()) {, +            lastStartOffset = -1;, +        } else {, +            final Entry last = entries.get(entries.size() - 1);, +            lastStartOffset = last.startOffset() + last.reader().length();, +        }, +        final int startOffset = lastStartOffset + 1; // +1 because we insert a space between tokens, +        Entry entry = new Entry(name, new FastStringReader(text), startOffset, boost);, +    // compute the boost for a token with the given startOffset, +    public float boost(int startOffset) {, +        int lo = 0, hi = entries.size() - 1;, +        while (lo <= hi) {, +            final int mid = (lo + hi) >>> 1;, +            final int midOffset = entries.get(mid).startOffset();, +            if (startOffset < midOffset) {, +                hi = mid - 1;, +            } else {, +                lo = mid + 1;]