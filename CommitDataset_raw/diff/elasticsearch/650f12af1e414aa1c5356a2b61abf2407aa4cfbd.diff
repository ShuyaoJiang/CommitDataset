[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +                        RollupJobStatus::fromXContent), +                // TODO NORELEASE: These lines may not be necessary, and they cause errors if present, +                // as they are duplicated in IndexLifecycle., +                // Leaving this for now in case they are necessary as we move forward with the HLRC., +//                new NamedXContentRegistry.Entry(LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.AllocateAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.AllocateAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.DeleteAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.DeleteAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.ForceMergeAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.ForceMergeAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.ReadOnlyAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.ReadOnlyAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.RolloverAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.RolloverAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.ShrinkAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.ShrinkAction::parse), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +                        RollupJobStatus::fromXContent), +                // TODO NORELEASE: These lines may not be necessary, and they cause errors if present, +                // as they are duplicated in IndexLifecycle., +                // Leaving this for now in case they are necessary as we move forward with the HLRC., +//                new NamedXContentRegistry.Entry(LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.AllocateAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.AllocateAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.DeleteAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.DeleteAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.ForceMergeAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.ForceMergeAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.ReadOnlyAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.ReadOnlyAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.RolloverAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.RolloverAction::parse),, +//                new NamedXContentRegistry.Entry(org.elasticsearch.xpack.core.indexlifecycle.LifecycleAction.class,, +//                    new ParseField(org.elasticsearch.xpack.core.indexlifecycle.ShrinkAction.NAME),, +//                    org.elasticsearch.xpack.core.indexlifecycle.ShrinkAction::parse), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ExplainLifecycleRequest.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.core.indexlifecycle;, +, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.master.info.ClusterInfoRequest;, +import org.elasticsearch.common.io.stream.StreamInput;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Objects;, +, +/**, + * The request object used by the Explain Lifecycle API., + * , + * Multiple indices may be queried in the same request using the, + * {@link #indices(String...)} method, + */, +public class ExplainLifecycleRequest extends ClusterInfoRequest<ExplainLifecycleRequest> {, +, +    public ExplainLifecycleRequest() {, +        super();, +    }, +, +    public ExplainLifecycleRequest(StreamInput in) throws IOException {, +        super(in);, +    }, +, +    @Override, +    public ActionRequestValidationException validate() {, +        return null;, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(Arrays.hashCode(indices()), indicesOptions());, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (obj == null) {, +            return false;, +        }, +        if (obj.getClass() != getClass()) {, +            return false;, +        }, +        ExplainLifecycleRequest other = (ExplainLifecycleRequest) obj;, +        return Objects.deepEquals(indices(), other.indices()) &&, +                Objects.equals(indicesOptions(), other.indicesOptions());]