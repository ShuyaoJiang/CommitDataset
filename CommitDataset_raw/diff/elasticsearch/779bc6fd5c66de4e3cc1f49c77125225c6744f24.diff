[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract Searcher acquireSearcher(String source, SearcherScope scope) throws EngineException;, +    protected final void ensureOpen(Exception suppressed) {, +            AlreadyClosedException ace = new AlreadyClosedException(shardId + " engine is closed", failedEngine.get());, +            if (suppressed != null) {, +                ace.addSuppressed(suppressed);, +            throw ace;, +        }, +    }, +, +    protected final void ensureOpen() {, +        ensureOpen(null);, +                try (Searcher searcher = acquireSearcher("refresh_needed", SearcherScope.EXTERNAL)) {, +                    return searcher.getDirectoryReader().isCurrent() == false;, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract Searcher acquireSearcher(String source, SearcherScope scope) throws EngineException;, +    protected final void ensureOpen(Exception suppressed) {, +            AlreadyClosedException ace = new AlreadyClosedException(shardId + " engine is closed", failedEngine.get());, +            if (suppressed != null) {, +                ace.addSuppressed(suppressed);, +            throw ace;, +        }, +    }, +, +    protected final void ensureOpen() {, +        ensureOpen(null);, +                try (Searcher searcher = acquireSearcher("refresh_needed", SearcherScope.EXTERNAL)) {, +                    return searcher.getDirectoryReader().isCurrent() == false;, +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineSearcher.java, +import java.io.Closeable;, +final class EngineSearcher extends Engine.Searcher {, +    private final ReferenceManager<IndexSearcher> referenceManager;, +    EngineSearcher(String source, ReferenceManager<IndexSearcher> searcherReferenceManager, Store store, Logger logger) throws IOException {, +        super(source, searcherReferenceManager.acquire());, +        this.referenceManager = searcherReferenceManager;, +            referenceManager.release(searcher());, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract Searcher acquireSearcher(String source, SearcherScope scope) throws EngineException;, +    protected final void ensureOpen(Exception suppressed) {, +            AlreadyClosedException ace = new AlreadyClosedException(shardId + " engine is closed", failedEngine.get());, +            if (suppressed != null) {, +                ace.addSuppressed(suppressed);, +            throw ace;, +        }, +    }, +, +    protected final void ensureOpen() {, +        ensureOpen(null);, +                try (Searcher searcher = acquireSearcher("refresh_needed", SearcherScope.EXTERNAL)) {, +                    return searcher.getDirectoryReader().isCurrent() == false;, +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineSearcher.java, +import java.io.Closeable;, +final class EngineSearcher extends Engine.Searcher {, +    private final ReferenceManager<IndexSearcher> referenceManager;, +    EngineSearcher(String source, ReferenceManager<IndexSearcher> searcherReferenceManager, Store store, Logger logger) throws IOException {, +        super(source, searcherReferenceManager.acquire());, +        this.referenceManager = searcherReferenceManager;, +            referenceManager.release(searcher());, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.common.lease.Releasables;, +            ensureOpen(ex);, +    public Searcher acquireSearcher(String source, SearcherScope scope) {, +        /* Acquire order here is store -> manager since we need, +         * to make sure that the store is not closed before, +         * the searcher is acquired. */, +        store.incRef();, +        Releasable releasable = store::decRef;, +        try {, +            final ReferenceManager<IndexSearcher> referenceManager;, +                    referenceManager = internalSearcherManager;, +                    break;, +                    referenceManager = externalSearcherManager;, +                    break;, +            EngineSearcher engineSearcher = new EngineSearcher(source, referenceManager, store, logger);, +            releasable = null; // success - hand over the reference to the engine searcher, +            return engineSearcher;, +        } catch (AlreadyClosedException ex) {, +            throw ex;, +        } catch (Exception ex) {, +            ensureOpen(ex); // throw EngineCloseException here if we are already closed, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to acquire searcher, source {}", source), ex);, +            throw new EngineException(shardId, "failed to acquire searcher, source " + source, ex);, +        } finally {, +            Releasables.close(releasable);, +        }, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract Searcher acquireSearcher(String source, SearcherScope scope) throws EngineException;, +    protected final void ensureOpen(Exception suppressed) {, +            AlreadyClosedException ace = new AlreadyClosedException(shardId + " engine is closed", failedEngine.get());, +            if (suppressed != null) {, +                ace.addSuppressed(suppressed);, +            throw ace;, +        }, +    }, +, +    protected final void ensureOpen() {, +        ensureOpen(null);, +                try (Searcher searcher = acquireSearcher("refresh_needed", SearcherScope.EXTERNAL)) {]