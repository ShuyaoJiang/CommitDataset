[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.MAX_NGRAM_DIFF_SETTING,, +        IndexSettings.MAX_SHINGLE_DIFF_SETTING,, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.MAX_NGRAM_DIFF_SETTING,, +        IndexSettings.MAX_SHINGLE_DIFF_SETTING,, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.MAX_NGRAM_DIFF_SETTING,, +        IndexSettings.MAX_SHINGLE_DIFF_SETTING,, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.MAX_NGRAM_DIFF_SETTING,, +        IndexSettings.MAX_SHINGLE_DIFF_SETTING,, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +     * Index setting describing for NGramTokenizer and NGramTokenFilter, +     * the maximum difference between, +     * max_gram (maximum length of characters in a gram) and, +     * min_gram (minimum length of characters in a gram)., +     * The default value is 1 as this is default difference in NGramTokenizer,, +     * and is defensive as it prevents generating too many index terms., +     */, +    public static final Setting<Integer> MAX_NGRAM_DIFF_SETTING =, +        Setting.intSetting("index.max_ngram_diff", 1, 0, Property.Dynamic, Property.IndexScope);, +, +    /**, +     * Index setting describing for ShingleTokenFilter, +     * the maximum difference between, +     * max_shingle_size and min_shingle_size., +     * The default value is 3 is defensive as it prevents generating too many tokens., +     */, +    public static final Setting<Integer> MAX_SHINGLE_DIFF_SETTING =, +        Setting.intSetting("index.max_shingle_diff", 3, 0, Property.Dynamic, Property.IndexScope);, +, +    /**, +    private volatile int maxNgramDiff;, +    private volatile int maxShingleDiff;, +        maxNgramDiff = scopedSettings.get(MAX_NGRAM_DIFF_SETTING);, +        maxShingleDiff = scopedSettings.get(MAX_SHINGLE_DIFF_SETTING);, +        scopedSettings.addSettingsUpdateConsumer(MAX_NGRAM_DIFF_SETTING, this::setMaxNgramDiff);, +        scopedSettings.addSettingsUpdateConsumer(MAX_SHINGLE_DIFF_SETTING, this::setMaxShingleDiff);, +     * Returns the maximum allowed difference between max and min length of ngram, +     */, +    public int getMaxNgramDiff() { return this.maxNgramDiff; }, +, +    private void setMaxNgramDiff(int maxNgramDiff) { this.maxNgramDiff = maxNgramDiff; }, +, +    /**, +     * Returns the maximum allowed difference between max and min shingle_size, +     */, +    public int getMaxShingleDiff() { return this.maxShingleDiff; }, +, +    private void setMaxShingleDiff(int maxShingleDiff) { this.maxShingleDiff = maxShingleDiff; }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexSettings.MAX_NGRAM_DIFF_SETTING,, +        IndexSettings.MAX_SHINGLE_DIFF_SETTING,, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing]