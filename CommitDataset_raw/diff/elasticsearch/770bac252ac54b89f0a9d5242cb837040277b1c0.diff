[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                                listener.onFailure(new MasterNotDiscoveredException());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                                listener.onFailure(new MasterNotDiscoveredException());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +, +            LocalDiscovery firstMaster = null;, +            for (LocalDiscovery localDiscovery : clusterGroup.members()) {, +                if (localDiscovery.localNode().masterNode()) {, +                    firstMaster = localDiscovery;, +                    break;, +                }, +            }, +, +            if (firstMaster != null && firstMaster.equals(this)) {, +                final LocalDiscovery master = firstMaster;, +                        DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.newNodesBuilder();, +                        for (LocalDiscovery discovery : clusterGroups.get(clusterName).members()) {, +                            nodesBuilder.put(discovery.localNode);, +                        }, +                        nodesBuilder.localNodeId(master.localNode().id()).masterNodeId(master.localNode().id());, +                        return newClusterStateBuilder().state(currentState).nodes(nodesBuilder).build();, +            } else if (firstMaster != null) {, +                final ClusterState masterState = firstMaster.clusterService.state();, +                final LocalDiscovery master = firstMaster;, +                firstMaster.clusterService.submitStateUpdateTask("local-disco-receive(from node[" + localNode + "])", new ProcessedClusterStateUpdateTask() {, +                        DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.newNodesBuilder();, +                        for (LocalDiscovery discovery : clusterGroups.get(clusterName).members()) {, +                            nodesBuilder.put(discovery.localNode);, +                        nodesBuilder.localNodeId(master.localNode().id()).masterNodeId(master.localNode().id());, +                        return newClusterStateBuilder().state(currentState).nodes(nodesBuilder).build();, +        } // else, no master node, the next node that will start will fill things in..., +            LocalDiscovery firstMaster = null;, +            for (LocalDiscovery localDiscovery : clusterGroup.members()) {, +                if (localDiscovery.localNode().masterNode()) {, +                    firstMaster = localDiscovery;, +                    break;, +                }, +            }, +, +            if (firstMaster != null) {, +                    firstMaster.master = true;, +                final LocalDiscovery master = firstMaster;, +                master.clusterService.submitStateUpdateTask("local-disco-update", new ClusterStateUpdateTask() {, +                        DiscoveryNodes newNodes = currentState.nodes().removeDeadMembers(newMembers, master.localNode.id());, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                                listener.onFailure(new MasterNotDiscoveredException());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +, +            LocalDiscovery firstMaster = null;, +            for (LocalDiscovery localDiscovery : clusterGroup.members()) {, +                if (localDiscovery.localNode().masterNode()) {, +                    firstMaster = localDiscovery;, +                    break;, +                }, +            }, +, +            if (firstMaster != null && firstMaster.equals(this)) {, +                final LocalDiscovery master = firstMaster;, +                        DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.newNodesBuilder();, +                        for (LocalDiscovery discovery : clusterGroups.get(clusterName).members()) {, +                            nodesBuilder.put(discovery.localNode);, +                        }, +                        nodesBuilder.localNodeId(master.localNode().id()).masterNodeId(master.localNode().id());, +                        return newClusterStateBuilder().state(currentState).nodes(nodesBuilder).build();, +            } else if (firstMaster != null) {, +                final ClusterState masterState = firstMaster.clusterService.state();, +                final LocalDiscovery master = firstMaster;, +                firstMaster.clusterService.submitStateUpdateTask("local-disco-receive(from node[" + localNode + "])", new ProcessedClusterStateUpdateTask() {, +                        DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.newNodesBuilder();, +                        for (LocalDiscovery discovery : clusterGroups.get(clusterName).members()) {, +                            nodesBuilder.put(discovery.localNode);, +                        nodesBuilder.localNodeId(master.localNode().id()).masterNodeId(master.localNode().id());, +                        return newClusterStateBuilder().state(currentState).nodes(nodesBuilder).build();, +        } // else, no master node, the next node that will start will fill things in..., +            LocalDiscovery firstMaster = null;, +            for (LocalDiscovery localDiscovery : clusterGroup.members()) {, +                if (localDiscovery.localNode().masterNode()) {, +                    firstMaster = localDiscovery;, +                    break;, +                }, +            }, +, +            if (firstMaster != null) {, +                    firstMaster.master = true;, +                final LocalDiscovery master = firstMaster;, +                master.clusterService.submitStateUpdateTask("local-disco-update", new ClusterStateUpdateTask() {, +                        DiscoveryNodes newNodes = currentState.nodes().removeDeadMembers(newMembers, master.localNode.id());, +    }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/aliases/IndexAliasesTests.java, +        logger.info("--> creating index [test]");, +        logger.info("--> running cluster_health");, +        logger.info("--> done cluster_health, status " + clusterHealth.status());, +            logger.info("--> indexing against [alias1], should fail");, +        logger.info("--> aliasing index [test] with [alias1]");, +        logger.info("--> indexing against [alias1], should work now");, +        logger.info("--> creating index [test]");, +        logger.info("--> running cluster_health");, +        logger.info("--> done cluster_health, status " + clusterHealth.status());]