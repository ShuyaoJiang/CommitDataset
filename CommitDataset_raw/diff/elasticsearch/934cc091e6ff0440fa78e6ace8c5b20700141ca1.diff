[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /** How much heap Lucene's IndexWriter is using */, +    abstract public long indexWriterRAMBytesUsed();, +, +, +        /**, +         * Returns operation start time in nanoseconds., +         */, +        long startTime();, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /** How much heap Lucene's IndexWriter is using */, +    abstract public long indexWriterRAMBytesUsed();, +, +, +        /**, +         * Returns operation start time in nanoseconds., +         */, +        long startTime();, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public long indexWriterRAMBytesUsed() {, +        return indexWriter.ramBytesUsed();, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /** How much heap Lucene's IndexWriter is using */, +    abstract public long indexWriterRAMBytesUsed();, +, +, +        /**, +         * Returns operation start time in nanoseconds., +         */, +        long startTime();, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public long indexWriterRAMBytesUsed() {, +        return indexWriter.ramBytesUsed();, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/engine/ShadowEngine.java, +    @Override, +    public long indexWriterRAMBytesUsed() {, +        // No IndexWriter, +        return 0L;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /** How much heap Lucene's IndexWriter is using */, +    abstract public long indexWriterRAMBytesUsed();, +, +, +        /**, +         * Returns operation start time in nanoseconds., +         */, +        long startTime();, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public long indexWriterRAMBytesUsed() {, +        return indexWriter.ramBytesUsed();, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/engine/ShadowEngine.java, +    @Override, +    public long indexWriterRAMBytesUsed() {, +        // No IndexWriter, +        return 0L;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.index.store.Store;, +import org.elasticsearch.indices.memory.IndexingMemoryController;, +, +    private final AtomicBoolean active = new AtomicBoolean();, +    private volatile long lastWriteNS;, +    private final IndexingMemoryController indexingMemoryController;, +, +                      ShardPath path, BigArrays bigArrays, IndexSearcherWrappingService wrappingService,, +                      IndexingMemoryController indexingMemoryController) {, +        this.indexingMemoryController = indexingMemoryController;, +, +        // TODO: can we somehow call IMC.forceCheck here?  Since we just became active, it can divvy up the RAM, +        active.set(true);, +        ensureWriteAllowed(create);, +        ensureWriteAllowed(index);, +        ensureWriteAllowed(delete);, +    /** Returns timestamp of last indexing operation */, +    public long getLastWriteNS() {, +        return lastWriteNS;, +    }, +, +    private void ensureWriteAllowed(Engine.Operation op) throws IllegalIndexShardStateException {, +        if (active.getAndSet(true) == false) {, +            // We are currently inactive, but a new write operation just showed up, so we now notify IMC, +            // to wake up and fix our indexing buffer.  We could do this async instead, but cost should]