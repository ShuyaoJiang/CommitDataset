[+++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, + * to serialize via {@link StreamOutput#writeThrowable(Throwable)}., + * This class will perserve the stacktrace as well as the suppressed exceptions of, + * the throwable it was created with instead of it's own. The stacktrace has no indication, + * of where this exception was created., +        setStackTrace(other.getStackTrace());, +        for (Throwable otherSuppressed : other.getSuppressed()) {, +            addSuppressed(otherSuppressed);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, + * to serialize via {@link StreamOutput#writeThrowable(Throwable)}., + * This class will perserve the stacktrace as well as the suppressed exceptions of, + * the throwable it was created with instead of it's own. The stacktrace has no indication, + * of where this exception was created., +        setStackTrace(other.getStackTrace());, +        for (Throwable otherSuppressed : other.getSuppressed()) {, +            addSuppressed(otherSuppressed);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import com.fasterxml.jackson.core.JsonLocation;, +import com.fasterxml.jackson.core.JsonParseException;, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, + * to serialize via {@link StreamOutput#writeThrowable(Throwable)}., + * This class will perserve the stacktrace as well as the suppressed exceptions of, + * the throwable it was created with instead of it's own. The stacktrace has no indication, + * of where this exception was created., +        setStackTrace(other.getStackTrace());, +        for (Throwable otherSuppressed : other.getSuppressed()) {, +            addSuppressed(otherSuppressed);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import com.fasterxml.jackson.core.JsonLocation;, +import com.fasterxml.jackson.core.JsonParseException;, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +import org.elasticsearch.test.VersionUtils;, +import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;, +            ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(getRandom()), t);, +            ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(getRandom()), ex);, +            ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(getRandom()), e);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, + * to serialize via {@link StreamOutput#writeThrowable(Throwable)}., + * This class will perserve the stacktrace as well as the suppressed exceptions of, + * the throwable it was created with instead of it's own. The stacktrace has no indication, + * of where this exception was created., +        setStackTrace(other.getStackTrace());, +        for (Throwable otherSuppressed : other.getSuppressed()) {, +            addSuppressed(otherSuppressed);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import com.fasterxml.jackson.core.JsonLocation;, +import com.fasterxml.jackson.core.JsonParseException;, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +import org.elasticsearch.test.VersionUtils;, +import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;, +            ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(getRandom()), t);, +            ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(getRandom()), ex);, +            ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(getRandom()), e);, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +import com.fasterxml.jackson.core.JsonLocation;, +import com.fasterxml.jackson.core.JsonParseException;, +import org.codehaus.groovy.runtime.typehandling.GroovyCastException;, +import org.elasticsearch.test.VersionUtils;, +import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;, +    private <T extends Throwable> T serialize(T exception) throws IOException {, +        ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(random()), exception);, +, +        Throwable[] unknowns = new Throwable[] {, +                new JsonParseException("foobar", new JsonLocation(new Object(), 1,2,3,4)),, +                new GroovyCastException("boom boom boom"),, +                new IOException("booom"), +        };, +        for (Throwable t : unknowns) {, +            if (randomBoolean()) {, +                t.addSuppressed(new IOException("suppressed"));, +                t.addSuppressed(new NullPointerException());, +            }, +            Throwable deserialized = serialize(t);, +            assertTrue(deserialized instanceof NotSerializableExceptionWrapper);, +            assertArrayEquals(t.getStackTrace(), deserialized.getStackTrace());, +            assertEquals(t.getSuppressed().length, deserialized.getSuppressed().length);, +            if (t.getSuppressed().length > 0) {, +                assertTrue(deserialized.getSuppressed()[0] instanceof NotSerializableExceptionWrapper);, +                assertArrayEquals(t.getSuppressed()[0].getStackTrace(), deserialized.getSuppressed()[0].getStackTrace());, +                assertTrue(deserialized.getSuppressed()[1] instanceof NullPointerException);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, + * to serialize via {@link StreamOutput#writeThrowable(Throwable)}., + * This class will perserve the stacktrace as well as the suppressed exceptions of, + * the throwable it was created with instead of it's own. The stacktrace has no indication, + * of where this exception was created., +        setStackTrace(other.getStackTrace());, +        for (Throwable otherSuppressed : other.getSuppressed()) {, +            addSuppressed(otherSuppressed);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import com.fasterxml.jackson.core.JsonLocation;, +import com.fasterxml.jackson.core.JsonParseException;, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +import org.elasticsearch.test.VersionUtils;]