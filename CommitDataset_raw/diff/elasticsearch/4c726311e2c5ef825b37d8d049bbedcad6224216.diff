[+++ b/core/src/test/java/org/elasticsearch/search/AbstractSearchTestCase.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search;, +, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.text.Text;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.indices.IndicesModule;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.plugins.SearchPlugin;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.fetch.subphase.FetchSourceContext;, +import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilderTests;, +import org.elasticsearch.search.rescore.QueryRescoreBuilderTests;, +import org.elasticsearch.search.searchafter.SearchAfterBuilder;, +import org.elasticsearch.search.slice.SliceBuilder;, +import org.elasticsearch.search.sort.ScriptSortBuilder;, +import org.elasticsearch.search.sort.SortBuilders;, +import org.elasticsearch.search.sort.SortOrder;, +import org.elasticsearch.search.suggest.SuggestBuilderTests;, +import org.elasticsearch.test.AbstractQueryTestCase;, +import org.elasticsearch.test.ESTestCase;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.Set;, +import java.util.function.Function;, +, +public abstract class AbstractSearchTestCase extends ESTestCase {, +, +    protected NamedWriteableRegistry namedWriteableRegistry;, +    protected SearchRequestParsers searchRequestParsers;, +    private TestSearchExtPlugin searchExtPlugin;, +, +    public void setUp() throws Exception {, +        super.setUp();, +        IndicesModule indicesModule = new IndicesModule(Collections.emptyList());, +        searchExtPlugin = new TestSearchExtPlugin();, +        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.singletonList(searchExtPlugin));, +        List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();, +        entries.addAll(indicesModule.getNamedWriteables());, +        entries.addAll(searchModule.getNamedWriteables());, +        namedWriteableRegistry = new NamedWriteableRegistry(entries);, +        searchRequestParsers = searchModule.getSearchRequestParsers();, +    }, +, +    protected SearchSourceBuilder createSearchSourceBuilder() throws IOException {, +        SearchSourceBuilder builder = new SearchSourceBuilder();, +        if (randomBoolean()) {, +            builder.from(randomIntBetween(0, 10000));, +        }, +        if (randomBoolean()) {, +            builder.size(randomIntBetween(0, 10000));, +        }, +        if (randomBoolean()) {, +            builder.explain(randomBoolean());, +        }, +        if (randomBoolean()) {, +            builder.version(randomBoolean());, +        }, +        if (randomBoolean()) {, +            builder.trackScores(randomBoolean());]