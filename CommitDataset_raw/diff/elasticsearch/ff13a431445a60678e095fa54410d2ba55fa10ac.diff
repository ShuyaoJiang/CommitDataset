[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, +        jobConfigProvider.updateJob(jobId, update, null, clusterService.state().nodes().getMinNodeVersion(), ActionListener.wrap(, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, +        jobConfigProvider.updateJob(jobId, update, null, clusterService.state().nodes().getMinNodeVersion(), ActionListener.wrap(, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateDatafeedAction.java, +                    jobConfigProvider::validateDatafeedJob, clusterService.state().nodes().getMinNodeVersion(),, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, +        jobConfigProvider.updateJob(jobId, update, null, clusterService.state().nodes().getMinNodeVersion(), ActionListener.wrap(, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateDatafeedAction.java, +                    jobConfigProvider::validateDatafeedJob, clusterService.state().nodes().getMinNodeVersion(),, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateFilterAction.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.service.ClusterService;, +    private final ClusterService clusterService;, +                                       JobManager jobManager, ClusterService clusterService) {, +        this.clusterService = clusterService;, +        indexUpdatedFilter(, +            updatedFilter, filterWithVersion.version, filterWithVersion.seqNo, filterWithVersion.primaryTerm, request, listener);, +    private void indexUpdatedFilter(MlFilter filter, final long version, final long seqNo, final long primaryTerm,, +                                    UpdateFilterAction.Request request,, +        if (clusterService.state().nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0)) {, +            indexRequest.setIfSeqNo(seqNo);, +            indexRequest.setIfPrimaryTerm(primaryTerm);, +        } else {, +        }, +                            listener.onResponse(new FilterWithVersion(filter, getDocResponse));, +        private final long seqNo;, +        private final long primaryTerm;, +        private  FilterWithVersion(MlFilter filter, GetResponse getDocResponse) {, +            this.version = getDocResponse.getVersion();, +            this.seqNo = getDocResponse.getSeqNo();, +            this.primaryTerm = getDocResponse.getPrimaryTerm();, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, +        jobConfigProvider.updateJob(jobId, update, null, clusterService.state().nodes().getMinNodeVersion(), ActionListener.wrap(, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateDatafeedAction.java, +                    jobConfigProvider::validateDatafeedJob, clusterService.state().nodes().getMinNodeVersion(),, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateFilterAction.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.service.ClusterService;, +    private final ClusterService clusterService;, +                                       JobManager jobManager, ClusterService clusterService) {, +        this.clusterService = clusterService;, +        indexUpdatedFilter(, +            updatedFilter, filterWithVersion.version, filterWithVersion.seqNo, filterWithVersion.primaryTerm, request, listener);, +    private void indexUpdatedFilter(MlFilter filter, final long version, final long seqNo, final long primaryTerm,, +                                    UpdateFilterAction.Request request,, +        if (clusterService.state().nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0)) {, +            indexRequest.setIfSeqNo(seqNo);, +            indexRequest.setIfPrimaryTerm(primaryTerm);, +        } else {, +        }, +                            listener.onResponse(new FilterWithVersion(filter, getDocResponse));, +        private final long seqNo;, +        private final long primaryTerm;, +        private  FilterWithVersion(MlFilter filter, GetResponse getDocResponse) {, +            this.version = getDocResponse.getVersion();, +            this.seqNo = getDocResponse.getSeqNo();, +            this.primaryTerm = getDocResponse.getPrimaryTerm();, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +     * @param minClusterNodeVersion minimum version of nodes in cluster, +                          Version minClusterNodeVersion,, +                final long version = getResponse.getVersion();, +                final long seqNo = getResponse.getSeqNo();, +                final long primaryTerm = getResponse.getPrimaryTerm();, +                            indexUpdatedConfig(updatedConfig, version, seqNo, primaryTerm, minClusterNodeVersion, ActionListener.wrap(, +    private void indexUpdatedConfig(DatafeedConfig updatedConfig, long version, long seqNo, long primaryTerm,, +                                    Version minClusterNodeVersion, ActionListener<IndexResponse> listener) {, +            IndexRequestBuilder indexRequest = client.prepareIndex(AnomalyDetectorsIndex.configIndexName(),, +                    .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);, +            if (minClusterNodeVersion.onOrAfter(Version.V_6_7_0)) {, +                indexRequest.setIfSeqNo(seqNo);, +                indexRequest.setIfPrimaryTerm(primaryTerm);, +            } else {, +                indexRequest.setVersion(version);, +            }, +, +            executeAsyncWithOrigin(client, ML_ORIGIN, IndexAction.INSTANCE, indexRequest.request(), listener);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, +        jobConfigProvider.updateJob(jobId, update, null, clusterService.state().nodes().getMinNodeVersion(), ActionListener.wrap(, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateDatafeedAction.java, +                    jobConfigProvider::validateDatafeedJob, clusterService.state().nodes().getMinNodeVersion(),, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateFilterAction.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.service.ClusterService;, +    private final ClusterService clusterService;, +                                       JobManager jobManager, ClusterService clusterService) {, +        this.clusterService = clusterService;, +        indexUpdatedFilter(, +            updatedFilter, filterWithVersion.version, filterWithVersion.seqNo, filterWithVersion.primaryTerm, request, listener);, +    private void indexUpdatedFilter(MlFilter filter, final long version, final long seqNo, final long primaryTerm,, +                                    UpdateFilterAction.Request request,, +        if (clusterService.state().nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0)) {, +            indexRequest.setIfSeqNo(seqNo);, +            indexRequest.setIfPrimaryTerm(primaryTerm);, +        } else {, +        }]