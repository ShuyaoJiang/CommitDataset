[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/BucketMetricsParser.java, +        Map<String, Object> params = new HashMap<>(5);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +        BucketMetricsPipelineAggregatorBuilder<?> factory  = buildFactory(pipelineAggregatorName, bucketsPaths[0], params);, +                                                                              Map<String, Object> params);, +    protected boolean token(XContentParser parser, QueryParseContext context, String field,, +                            XContentParser.Token token, Map<String, Object> params) throws IOException {, +        return false;, +    }, +, +    private void parseToken(String aggregationName, XContentParser parser, QueryParseContext context, String currentFieldName,, +                       XContentParser.Token currentToken, Map<String, Object> params) throws IOException {, +        if (token(parser, context, currentFieldName, currentToken, params) == false) {, +            throw new ParsingException(parser.getTokenLocation(),, +                "Unexpected token " + currentToken + " [" + currentFieldName + "] in [" + aggregationName + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/BucketMetricsParser.java, +        Map<String, Object> params = new HashMap<>(5);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +        BucketMetricsPipelineAggregatorBuilder<?> factory  = buildFactory(pipelineAggregatorName, bucketsPaths[0], params);, +                                                                              Map<String, Object> params);, +    protected boolean token(XContentParser parser, QueryParseContext context, String field,, +                            XContentParser.Token token, Map<String, Object> params) throws IOException {, +        return false;, +    }, +, +    private void parseToken(String aggregationName, XContentParser parser, QueryParseContext context, String currentFieldName,, +                       XContentParser.Token currentToken, Map<String, Object> params) throws IOException {, +        if (token(parser, context, currentFieldName, currentToken, params) == false) {, +            throw new ParsingException(parser.getTokenLocation(),, +                "Unexpected token " + currentToken + " [" + currentFieldName + "] in [" + aggregationName + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/avg/AvgBucketPipelineAggregatorBuilder.java, +                String bucketsPath, Map<String, Object> params) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/BucketMetricsParser.java, +        Map<String, Object> params = new HashMap<>(5);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +        BucketMetricsPipelineAggregatorBuilder<?> factory  = buildFactory(pipelineAggregatorName, bucketsPaths[0], params);, +                                                                              Map<String, Object> params);, +    protected boolean token(XContentParser parser, QueryParseContext context, String field,, +                            XContentParser.Token token, Map<String, Object> params) throws IOException {, +        return false;, +    }, +, +    private void parseToken(String aggregationName, XContentParser parser, QueryParseContext context, String currentFieldName,, +                       XContentParser.Token currentToken, Map<String, Object> params) throws IOException {, +        if (token(parser, context, currentFieldName, currentToken, params) == false) {, +            throw new ParsingException(parser.getTokenLocation(),, +                "Unexpected token " + currentToken + " [" + currentFieldName + "] in [" + aggregationName + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/avg/AvgBucketPipelineAggregatorBuilder.java, +                String bucketsPath, Map<String, Object> params) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/max/MaxBucketPipelineAggregatorBuilder.java, +                String bucketsPath, Map<String, Object> params) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/BucketMetricsParser.java, +        Map<String, Object> params = new HashMap<>(5);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +        BucketMetricsPipelineAggregatorBuilder<?> factory  = buildFactory(pipelineAggregatorName, bucketsPaths[0], params);, +                                                                              Map<String, Object> params);, +    protected boolean token(XContentParser parser, QueryParseContext context, String field,, +                            XContentParser.Token token, Map<String, Object> params) throws IOException {, +        return false;, +    }, +, +    private void parseToken(String aggregationName, XContentParser parser, QueryParseContext context, String currentFieldName,, +                       XContentParser.Token currentToken, Map<String, Object> params) throws IOException {, +        if (token(parser, context, currentFieldName, currentToken, params) == false) {, +            throw new ParsingException(parser.getTokenLocation(),, +                "Unexpected token " + currentToken + " [" + currentFieldName + "] in [" + aggregationName + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/avg/AvgBucketPipelineAggregatorBuilder.java, +                String bucketsPath, Map<String, Object> params) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/max/MaxBucketPipelineAggregatorBuilder.java, +                String bucketsPath, Map<String, Object> params) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/min/MinBucketPipelineAggregatorBuilder.java, +                String bucketsPath, Map<String, Object> params) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketmetrics/BucketMetricsParser.java, +        Map<String, Object> params = new HashMap<>(5);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                    parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +                parseToken(pipelineAggregatorName, parser, context, currentFieldName, token, params);, +        BucketMetricsPipelineAggregatorBuilder<?> factory  = buildFactory(pipelineAggregatorName, bucketsPaths[0], params);, +                                                                              Map<String, Object> params);, +    protected boolean token(XContentParser parser, QueryParseContext context, String field,, +                            XContentParser.Token token, Map<String, Object> params) throws IOException {, +        return false;, +    }, +]