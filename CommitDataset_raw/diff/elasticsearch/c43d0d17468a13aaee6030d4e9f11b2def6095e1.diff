[+++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.elasticsearch.ElasticSearchException;, +import java.util.concurrent.atomic.AtomicLong;, +, +    private final AtomicLong highestUniqueValuesCount = new AtomicLong();, +, +    @Override, +    public long getHighestNumberOfSeenUniqueValues() {, +        return highestUniqueValuesCount.get();, +    }, +, +    @Override, +    public final FD load(AtomicReaderContext context) {, +        try {, +            FD fd = cache.load(context, this);, +            updateHighestSeenValuesCount(fd.getNumberUniqueValues());, +            return fd;, +        } catch (Throwable e) {, +            if (e instanceof ElasticSearchException) {, +                throw (ElasticSearchException) e;, +            } else {, +                throw new ElasticSearchException(e.getMessage(), e);, +            }, +        }, +    }, +, +    private void updateHighestSeenValuesCount(long newValuesCount) {, +        long current;, +        do {, +            if ((current = highestUniqueValuesCount.get()) >= newValuesCount) {, +                break;, +            }, +        } while (!highestUniqueValuesCount.compareAndSet(current, newValuesCount));, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.elasticsearch.ElasticSearchException;, +import java.util.concurrent.atomic.AtomicLong;, +, +    private final AtomicLong highestUniqueValuesCount = new AtomicLong();, +, +    @Override, +    public long getHighestNumberOfSeenUniqueValues() {, +        return highestUniqueValuesCount.get();, +    }, +, +    @Override, +    public final FD load(AtomicReaderContext context) {, +        try {, +            FD fd = cache.load(context, this);, +            updateHighestSeenValuesCount(fd.getNumberUniqueValues());, +            return fd;, +        } catch (Throwable e) {, +            if (e instanceof ElasticSearchException) {, +                throw (ElasticSearchException) e;, +            } else {, +                throw new ElasticSearchException(e.getMessage(), e);, +            }, +        }, +    }, +, +    private void updateHighestSeenValuesCount(long newValuesCount) {, +        long current;, +        do {, +            if ((current = highestUniqueValuesCount.get()) >= newValuesCount) {, +                break;, +            }, +        } while (!highestUniqueValuesCount.compareAndSet(current, newValuesCount));, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +     * The number of unique values in this atomic field data., +     */, +    long getNumberUniqueValues();, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractIndexFieldData.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.elasticsearch.ElasticSearchException;, +import java.util.concurrent.atomic.AtomicLong;, +, +    private final AtomicLong highestUniqueValuesCount = new AtomicLong();, +, +    @Override, +    public long getHighestNumberOfSeenUniqueValues() {, +        return highestUniqueValuesCount.get();, +    }, +, +    @Override, +    public final FD load(AtomicReaderContext context) {, +        try {, +            FD fd = cache.load(context, this);, +            updateHighestSeenValuesCount(fd.getNumberUniqueValues());, +            return fd;, +        } catch (Throwable e) {, +            if (e instanceof ElasticSearchException) {, +                throw (ElasticSearchException) e;, +            } else {]