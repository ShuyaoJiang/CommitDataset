[+++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ /dev/null, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ /dev/null, +++ b/buildSrc/version.properties, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ /dev/null, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ /dev/null, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, +        } catch (InterruptedException e) {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ /dev/null, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, +        } catch (InterruptedException e) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        builder = MapperBuilders.doubleField(currentFieldName);, +                    builder = MapperBuilders.doubleField(currentFieldName);, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ /dev/null, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, +        } catch (InterruptedException e) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        builder = MapperBuilders.doubleField(currentFieldName);, +                    builder = MapperBuilders.doubleField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            class MultiFieldParserContext extends ParserContext {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ /dev/null, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, +        } catch (InterruptedException e) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        builder = MapperBuilders.doubleField(currentFieldName);, +                    builder = MapperBuilders.doubleField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            class MultiFieldParserContext extends ParserContext {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseField;, +            parseField(builder, name, node, parserContext);, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ /dev/null, +++ b/buildSrc/version.properties, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, +        } catch (InterruptedException e) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        builder = MapperBuilders.doubleField(currentFieldName);, +                    builder = MapperBuilders.doubleField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            class MultiFieldParserContext extends ParserContext {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseField;, +            parseField(builder, name, node, parserContext);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +    public static void parseField(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) {, +            } else if (propName.equals("term_vector")) {, +                parseTermVector(name, propNode.toString(), builder);, +                iterator.remove();, +            } else if (propName.equals("store_term_vectors")) {, +                builder.storeTermVectors(nodeBooleanValue(propNode));, +                iterator.remove();, +            } else if (propName.equals("store_term_vector_offsets")) {, +                builder.storeTermVectorOffsets(nodeBooleanValue(propNode));, +                iterator.remove();, +            } else if (propName.equals("store_term_vector_positions")) {, +                builder.storeTermVectorPositions(nodeBooleanValue(propNode));, +                iterator.remove();, +            } else if (propName.equals("store_term_vector_payloads")) {, +                builder.storeTermVectorPayloads(nodeBooleanValue(propNode));, +                iterator.remove();, +            } else if (propName.equals("analyzer") || // for backcompat, reading old indexes, remove for v3.0, +                       propName.equals("index_analyzer") && indexVersionCreated.before(Version.V_2_0_0_beta1)) {, +, +                NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString());, +                if (analyzer == null) {, +                    throw new MapperParsingException("analyzer [" + propNode.toString() + "] not found for field [" + name + "]");, +                }, +                indexAnalyzer = analyzer;, +                iterator.remove();]