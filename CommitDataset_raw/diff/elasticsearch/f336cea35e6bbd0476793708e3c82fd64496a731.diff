[+++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +                    if (placeholderResolver.shouldRemoveMissingPlaceholder(placeholder)) {, +                    } else {, +                        return strVal;, +                    }, +, +        /**, +         * Allows for special handling for ignored missing placeholders that may be resolved elsewhere, +         *, +         * @param placeholderName the name of the placeholder to resolve., +         * @return true if the placeholder should be replaced with a empty string, +         */, +        boolean shouldRemoveMissingPlaceholder(String placeholderName);, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +                    if (placeholderResolver.shouldRemoveMissingPlaceholder(placeholder)) {, +                    } else {, +                        return strVal;, +                    }, +, +        /**, +         * Allows for special handling for ignored missing placeholders that may be resolved elsewhere, +         *, +         * @param placeholderName the name of the placeholder to resolve., +         * @return true if the placeholder should be replaced with a empty string, +         */, +        boolean shouldRemoveMissingPlaceholder(String placeholderName);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        public Builder replacePropertyPlaceholders() {, +                        if (placeholderName.startsWith("env.") || placeholderName.startsWith("prompt.")) {, +, +                    @Override, +                    public boolean shouldRemoveMissingPlaceholder(String placeholderName) {, +                        if (placeholderName.startsWith("prompt.")) {, +                            return false;, +                        }, +                        return true;, +                    }, +                String value = propertyPlaceholder.replacePlaceholders(entry.getValue(), placeholderResolver);, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +                    if (placeholderResolver.shouldRemoveMissingPlaceholder(placeholder)) {, +                    } else {, +                        return strVal;, +                    }, +, +        /**, +         * Allows for special handling for ignored missing placeholders that may be resolved elsewhere, +         *, +         * @param placeholderName the name of the placeholder to resolve., +         * @return true if the placeholder should be replaced with a empty string, +         */, +        boolean shouldRemoveMissingPlaceholder(String placeholderName);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        public Builder replacePropertyPlaceholders() {, +                        if (placeholderName.startsWith("env.") || placeholderName.startsWith("prompt.")) {, +, +                    @Override, +                    public boolean shouldRemoveMissingPlaceholder(String placeholderName) {, +                        if (placeholderName.startsWith("prompt.")) {, +                            return false;, +                        }, +                        return true;, +                    }, +                String value = propertyPlaceholder.replacePlaceholders(entry.getValue(), placeholderResolver);, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +        builder.startObject(AndQueryParser.NAME);, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +                    if (placeholderResolver.shouldRemoveMissingPlaceholder(placeholder)) {, +                    } else {, +                        return strVal;, +                    }, +, +        /**, +         * Allows for special handling for ignored missing placeholders that may be resolved elsewhere, +         *, +         * @param placeholderName the name of the placeholder to resolve., +         * @return true if the placeholder should be replaced with a empty string, +         */, +        boolean shouldRemoveMissingPlaceholder(String placeholderName);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        public Builder replacePropertyPlaceholders() {, +                        if (placeholderName.startsWith("env.") || placeholderName.startsWith("prompt.")) {, +, +                    @Override, +                    public boolean shouldRemoveMissingPlaceholder(String placeholderName) {, +                        if (placeholderName.startsWith("prompt.")) {, +                            return false;, +                        }, +                        return true;, +                    }, +                String value = propertyPlaceholder.replacePlaceholders(entry.getValue(), placeholderResolver);, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java, +        builder.startObject(AndQueryParser.NAME);, +++ b/core/src/main/java/org/elasticsearch/index/query/AndQueryParser.java, +public class AndQueryParser implements QueryParser {, +, +    public static final String NAME = "and";, +        return new String[]{NAME};, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +                    if (placeholderResolver.shouldRemoveMissingPlaceholder(placeholder)) {, +                    } else {]