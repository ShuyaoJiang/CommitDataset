[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufStreamInput.java, +        try {, +        } catch (IndexOutOfBoundsException ex) {, +            EOFException eofException = new EOFException();, +            eofException.initCause(ex);, +            throw eofException;, +        }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufStreamInput.java, +        try {, +        } catch (IndexOutOfBoundsException ex) {, +            EOFException eofException = new EOFException();, +            eofException.initCause(ex);, +            throw eofException;, +        }, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/ByteBufUtils.java, +            try {, +            } catch (IndexOutOfBoundsException ex) {, +                EOFException eofException = new EOFException();, +                eofException.initCause(ex);, +                throw eofException;, +            }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufStreamInput.java, +        try {, +        } catch (IndexOutOfBoundsException ex) {, +            EOFException eofException = new EOFException();, +            eofException.initCause(ex);, +            throw eofException;, +        }, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/ByteBufUtils.java, +            try {, +            } catch (IndexOutOfBoundsException ex) {, +                EOFException eofException = new EOFException();, +                eofException.initCause(ex);, +                throw eofException;, +            }, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +    private final TransportHandshaker handshaker;, +        this.handshaker = new TransportHandshaker(version, threadPool,, +                TransportHandshaker.HANDSHAKE_ACTION_NAME, new TransportHandshaker.HandshakeRequest(version),, +                TransportRequestOptions.EMPTY, v, TransportStatus.setHandshake((byte) 0)),, +                TransportHandshaker.HANDSHAKE_ACTION_NAME, TransportResponseOptions.EMPTY, TransportStatus.setHandshake((byte) 0)));, +                handshaker.handleHandshake(version, features, channel, requestId, stream);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufStreamInput.java, +        try {, +        } catch (IndexOutOfBoundsException ex) {, +            EOFException eofException = new EOFException();, +            eofException.initCause(ex);, +            throw eofException;, +        }, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/ByteBufUtils.java, +            try {, +            } catch (IndexOutOfBoundsException ex) {, +                EOFException eofException = new EOFException();, +                eofException.initCause(ex);, +                throw eofException;, +            }, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +    private final TransportHandshaker handshaker;, +        this.handshaker = new TransportHandshaker(version, threadPool,, +                TransportHandshaker.HANDSHAKE_ACTION_NAME, new TransportHandshaker.HandshakeRequest(version),, +                TransportRequestOptions.EMPTY, v, TransportStatus.setHandshake((byte) 0)),, +                TransportHandshaker.HANDSHAKE_ACTION_NAME, TransportResponseOptions.EMPTY, TransportStatus.setHandshake((byte) 0)));, +                handshaker.handleHandshake(version, features, channel, requestId, stream);, +++ /dev/null, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufStreamInput.java, +        try {, +        } catch (IndexOutOfBoundsException ex) {, +            EOFException eofException = new EOFException();, +            eofException.initCause(ex);, +            throw eofException;, +        }, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/ByteBufUtils.java, +            try {, +            } catch (IndexOutOfBoundsException ex) {, +                EOFException eofException = new EOFException();, +                eofException.initCause(ex);, +                throw eofException;, +            }, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +    private final TransportHandshaker handshaker;, +        this.handshaker = new TransportHandshaker(version, threadPool,, +                TransportHandshaker.HANDSHAKE_ACTION_NAME, new TransportHandshaker.HandshakeRequest(version),, +                TransportRequestOptions.EMPTY, v, TransportStatus.setHandshake((byte) 0)),, +                TransportHandshaker.HANDSHAKE_ACTION_NAME, TransportResponseOptions.EMPTY, TransportStatus.setHandshake((byte) 0)));, +                handshaker.handleHandshake(version, features, channel, requestId, stream);, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/transport/TransportHandshaker.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an]