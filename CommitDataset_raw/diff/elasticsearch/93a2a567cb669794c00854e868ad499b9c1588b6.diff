[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetDatafeedsStatsAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.xpack.ml.action.GetDatafeedsStatsAction.Response.DatafeedStats;, +            @Nullable, +            private DiscoveryNode node;, +            @Nullable, +            private String assignmentExplanation;, +            DatafeedStats(String datafeedId, DatafeedState datafeedState, @Nullable DiscoveryNode node,, +                          @Nullable String assignmentExplanation) {, +                this.node = node;, +                this.assignmentExplanation = assignmentExplanation;, +                node = in.readOptionalWriteable(DiscoveryNode::new);, +                assignmentExplanation = in.readOptionalString();, +            public DiscoveryNode getNode() {, +                return node;, +            }, +, +            public String getAssignmentExplanation() {, +                return assignmentExplanation;, +            }, +, +                if (node != null) {, +                    builder.startObject("node");, +                    builder.field("id", node.getId());, +                    builder.field("name", node.getName());, +                    builder.field("ephemeral_id", node.getEphemeralId());, +                    builder.field("transport_address", node.getAddress().toString());, +                    builder.startObject("attributes");, +                    for (Map.Entry<String, String> entry : node.getAttributes().entrySet()) {, +                        builder.field(entry.getKey(), entry.getValue());, +                    }, +                    builder.endObject();, +                    builder.endObject();, +                }, +                if (assignmentExplanation != null) {, +                    builder.field("assigment_explanation", assignmentExplanation);, +                }, +                builder.endObject();, +                out.writeOptionalWriteable(node);, +                out.writeOptionalString(assignmentExplanation);, +                return Objects.hash(datafeedId, datafeedState, node, assignmentExplanation);, +                DatafeedStats other = (DatafeedStats) obj;, +                return Objects.equals(datafeedId, other.datafeedId) &&, +                        Objects.equals(this.datafeedState, other.datafeedState) &&, +                        Objects.equals(this.node, other.node) &&, +                        Objects.equals(this.assignmentExplanation, other.assignmentExplanation);, +            Map<String, DatafeedStats> results = new HashMap<>();, +            PersistentTasksInProgress tasksInProgress = state.getMetaData().custom(PersistentTasksInProgress.TYPE);, +            if (request.getDatafeedId().equals(ALL) == false && mlMetadata.getDatafeed(request.getDatafeedId()) == null) {, +, +            for (DatafeedConfig datafeedConfig : mlMetadata.getDatafeeds().values()) {, +                if (request.getDatafeedId().equals(ALL) || datafeedConfig.getId().equals(request.getDatafeedId())) {, +                    PersistentTaskInProgress<?> task = MlMetadata.getDatafeedTask(request.getDatafeedId(), tasksInProgress);, +                    DatafeedState datafeedState = MlMetadata.getDatafeedState(request.getDatafeedId(), tasksInProgress);, +                    DiscoveryNode node = null;, +                    String explanation = null;, +                    if (task != null) {, +                        node = state.nodes().get(task.getExecutorNode());, +                        explanation = task.getAssignment().getExplanation();, +                    results.put(datafeedConfig.getId(), new DatafeedStats(datafeedConfig.getId(), datafeedState, node, explanation));, +                }, +            }, +            QueryPage<DatafeedStats> statsPage = new QueryPage<>(new ArrayList<>(results.values()), results.size(),, +                    DatafeedConfig.RESULTS_FIELD);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetDatafeedsStatsAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.xpack.ml.action.GetDatafeedsStatsAction.Response.DatafeedStats;, +            @Nullable, +            private DiscoveryNode node;, +            @Nullable, +            private String assignmentExplanation;, +            DatafeedStats(String datafeedId, DatafeedState datafeedState, @Nullable DiscoveryNode node,, +                          @Nullable String assignmentExplanation) {, +                this.node = node;, +                this.assignmentExplanation = assignmentExplanation;, +                node = in.readOptionalWriteable(DiscoveryNode::new);, +                assignmentExplanation = in.readOptionalString();, +            public DiscoveryNode getNode() {, +                return node;, +            }, +, +            public String getAssignmentExplanation() {, +                return assignmentExplanation;, +            }, +, +                if (node != null) {, +                    builder.startObject("node");, +                    builder.field("id", node.getId());, +                    builder.field("name", node.getName());, +                    builder.field("ephemeral_id", node.getEphemeralId());, +                    builder.field("transport_address", node.getAddress().toString());, +                    builder.startObject("attributes");, +                    for (Map.Entry<String, String> entry : node.getAttributes().entrySet()) {, +                        builder.field(entry.getKey(), entry.getValue());, +                    }, +                    builder.endObject();, +                    builder.endObject();, +                }]