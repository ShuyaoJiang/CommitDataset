[+++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        return multiMatchQuery.parse(type, newFieldsBoosts, value, minimumShouldMatch);, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        return multiMatchQuery.parse(type, newFieldsBoosts, value, minimumShouldMatch);, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        return multiMatchQuery.parse(type, newFieldsBoosts, value, minimumShouldMatch);, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +import org.apache.lucene.search.BooleanClause.Occur;, +import org.elasticsearch.common.lucene.search.MatchNoDocsQuery;, +        Query result;, +            result = parseAndApply(type.matchQueryType(), fieldBoost.getKey(), value, minimumShouldMatch, boostValue);, +        } else {, +            result = queryBuilder.combineGrouped(queries);, +        }, +        assert result != null;, +        return result;, +        private Query combineGrouped(List<? extends Query> groupQuery) {, +                return  new MatchNoDocsQuery("[multi_match] list of group queries was empty");, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        return multiMatchQuery.parse(type, newFieldsBoosts, value, minimumShouldMatch);, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +import org.apache.lucene.search.BooleanClause.Occur;, +import org.elasticsearch.common.lucene.search.MatchNoDocsQuery;, +        Query result;, +            result = parseAndApply(type.matchQueryType(), fieldBoost.getKey(), value, minimumShouldMatch, boostValue);, +        } else {, +            result = queryBuilder.combineGrouped(queries);, +        }, +        assert result != null;, +        return result;, +        private Query combineGrouped(List<? extends Query> groupQuery) {, +                return  new MatchNoDocsQuery("[multi_match] list of group queries was empty");, +++ b/core/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java, +    private static final String MISSING_WILDCARD_FIELD_NAME = "missing_*";, +    private static final String MISSING_FIELD_NAME = "missing";, +, +        String fieldName = randomFrom(STRING_FIELD_NAME, INT_FIELD_NAME, DOUBLE_FIELD_NAME, BOOLEAN_FIELD_NAME, DATE_FIELD_NAME,, +                MISSING_FIELD_NAME, MISSING_WILDCARD_FIELD_NAME);, +, +    public void testToQueryFieldMissing() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        assertThat(multiMatchQuery("test").field(MISSING_WILDCARD_FIELD_NAME).toQuery(createShardContext()), instanceOf(MatchNoDocsQuery.class));, +        assertThat(multiMatchQuery("test").field(MISSING_FIELD_NAME).toQuery(createShardContext()), instanceOf(TermQuery.class));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        return multiMatchQuery.parse(type, newFieldsBoosts, value, minimumShouldMatch);, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +import org.apache.lucene.search.BooleanClause.Occur;, +import org.elasticsearch.common.lucene.search.MatchNoDocsQuery;, +        Query result;, +            result = parseAndApply(type.matchQueryType(), fieldBoost.getKey(), value, minimumShouldMatch, boostValue);, +        } else {, +            result = queryBuilder.combineGrouped(queries);, +        }, +        assert result != null;, +        return result;, +        private Query combineGrouped(List<? extends Query> groupQuery) {, +                return  new MatchNoDocsQuery("[multi_match] list of group queries was empty");, +++ b/core/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java, +    private static final String MISSING_WILDCARD_FIELD_NAME = "missing_*";, +    private static final String MISSING_FIELD_NAME = "missing";, +, +        String fieldName = randomFrom(STRING_FIELD_NAME, INT_FIELD_NAME, DOUBLE_FIELD_NAME, BOOLEAN_FIELD_NAME, DATE_FIELD_NAME,, +                MISSING_FIELD_NAME, MISSING_WILDCARD_FIELD_NAME);, +, +    public void testToQueryFieldMissing() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        assertThat(multiMatchQuery("test").field(MISSING_WILDCARD_FIELD_NAME).toQuery(createShardContext()), instanceOf(MatchNoDocsQuery.class));, +        assertThat(multiMatchQuery("test").field(MISSING_FIELD_NAME).toQuery(createShardContext()), instanceOf(TermQuery.class));, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java, +        String[] fields = { "full_name", "first_name", "last_name", "last_name_phrase", "first_name_phrase", "category_phrase", "category",, +                "missing_field", "missing_fields*" };, +            if (field.startsWith("missing")) {, +                assertEquals(0, hits.hits().length);, +            }]