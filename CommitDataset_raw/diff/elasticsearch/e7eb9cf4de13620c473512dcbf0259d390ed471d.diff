[+++ b/core/pom.xml, +                <version>2.1.3</version>, +        <profile>, +            <id>sign-rpm</id>, +            <activation>, +                <property>, +                    <name>rpm.sign</name>, +                    <value>true</value>, +                </property>, +            </activation>, +            <build>, +                <plugins>, +                    <plugin>, +                        <groupId>org.codehaus.mojo</groupId>, +                        <artifactId>rpm-maven-plugin</artifactId>, +                        <configuration>, +                            <keyname>${gpg.key}</keyname>, +                            <keypath>${gpg.keyring}</keypath>, +                            <keyPassphrase>, +                                <passphrase>${gpg.passphrase}</passphrase>, +                            </keyPassphrase>, +                        </configuration>, +                    </plugin>, +                </plugins>, +            </build>, +        </profile>, +++ b/core/pom.xml, +                <version>2.1.3</version>, +        <profile>, +            <id>sign-rpm</id>, +            <activation>, +                <property>, +                    <name>rpm.sign</name>, +                    <value>true</value>, +                </property>, +            </activation>, +            <build>, +                <plugins>, +                    <plugin>, +                        <groupId>org.codehaus.mojo</groupId>, +                        <artifactId>rpm-maven-plugin</artifactId>, +                        <configuration>, +                            <keyname>${gpg.key}</keyname>, +                            <keypath>${gpg.keyring}</keypath>, +                            <keyPassphrase>, +                                <passphrase>${gpg.passphrase}</passphrase>, +                            </keyPassphrase>, +                        </configuration>, +                    </plugin>, +                </plugins>, +            </build>, +        </profile>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/pom.xml, +                <version>2.1.3</version>, +        <profile>, +            <id>sign-rpm</id>, +            <activation>, +                <property>, +                    <name>rpm.sign</name>, +                    <value>true</value>, +                </property>, +            </activation>, +            <build>, +                <plugins>, +                    <plugin>, +                        <groupId>org.codehaus.mojo</groupId>, +                        <artifactId>rpm-maven-plugin</artifactId>, +                        <configuration>, +                            <keyname>${gpg.key}</keyname>, +                            <keypath>${gpg.keyring}</keypath>, +                            <keyPassphrase>, +                                <passphrase>${gpg.passphrase}</passphrase>, +                            </keyPassphrase>, +                        </configuration>, +                    </plugin>, +                </plugins>, +            </build>, +        </profile>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +    static final Map<String, Constructor<? extends ElasticsearchException>> MAPPING;, +    public ElasticsearchException(StreamInput in) throws IOException {, +        super(in.readOptionalString(), in.readThrowable()); //TODO readOptionalThrowable, +        readStackTrace(this, in);, +, +    }, +, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeOptionalString(this.getMessage());, +        out.writeThrowable(this.getCause());, +        writeStackTraces(this, out);]