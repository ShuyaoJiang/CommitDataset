[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ScriptService.SCRIPT_MAX_COMPILATIONS_PER_MINUTE,, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ScriptService.SCRIPT_MAX_COMPILATIONS_PER_MINUTE,, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings());, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ScriptService.SCRIPT_MAX_COMPILATIONS_PER_MINUTE,, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +import org.elasticsearch.common.settings.ClusterSettings;, +    public static ScriptModule create(Settings settings, Environment environment,, +                                      ResourceWatcherService resourceWatcherService, List<ScriptPlugin> scriptPlugins) {, +    public ScriptModule(Settings settings, Environment environment,, +                        ResourceWatcherService resourceWatcherService, List<ScriptEngineService> scriptEngineServices,, +                        List<ScriptContext.Plugin> customScriptContexts) {, +, +    /**, +     * Allow the script service to register any settings update handlers on the cluster settings, +     */, +    public void registerClusterSettingsListeners(ClusterSettings clusterSettings) {, +        scriptService.registerClusterSettingsListeners(clusterSettings);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ScriptService.SCRIPT_MAX_COMPILATIONS_PER_MINUTE,, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +import org.elasticsearch.common.settings.ClusterSettings;, +    public static ScriptModule create(Settings settings, Environment environment,, +                                      ResourceWatcherService resourceWatcherService, List<ScriptPlugin> scriptPlugins) {, +    public ScriptModule(Settings settings, Environment environment,, +                        ResourceWatcherService resourceWatcherService, List<ScriptEngineService> scriptEngineServices,, +                        List<ScriptContext.Plugin> customScriptContexts) {, +, +    /**, +     * Allow the script service to register any settings update handlers on the cluster settings, +     */, +    public void registerClusterSettingsListeners(ClusterSettings clusterSettings) {, +        scriptService.registerClusterSettingsListeners(clusterSettings);, +    }, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.common.breaker.CircuitBreakingException;, +import org.elasticsearch.common.settings.ClusterSettings;, +    public static final Setting<Integer> SCRIPT_MAX_COMPILATIONS_PER_MINUTE =, +        Setting.intSetting("script.max_compilations_per_minute", 15, 0, Property.Dynamic, Property.NodeScope);, +    private int totalCompilesPerMinute;, +    private long lastInlineCompileTime;, +    private double scriptsPerMinCounter;, +    private double compilesAllowedPerNano;, +, +, +        this.lastInlineCompileTime = System.nanoTime();, +        this.setMaxCompilationsPerMinute(SCRIPT_MAX_COMPILATIONS_PER_MINUTE.get(settings));, +    }, +, +    void registerClusterSettingsListeners(ClusterSettings clusterSettings) {, +        clusterSettings.addSettingsUpdateConsumer(SCRIPT_MAX_COMPILATIONS_PER_MINUTE, this::setMaxCompilationsPerMinute);, +    void setMaxCompilationsPerMinute(Integer newMaxPerMinute) {, +        this.totalCompilesPerMinute = newMaxPerMinute;, +        // Reset the counter to allow new compilations, +        this.scriptsPerMinCounter = totalCompilesPerMinute;, +        this.compilesAllowedPerNano = ((double) totalCompilesPerMinute) / TimeValue.timeValueMinutes(1).nanos();, +    }, +     * Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so., +     * This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket, +     *, +     * It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that, +     * elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not, +     * enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity, +     * is discarded - there can never be more water in the bucket than the size of the bucket., +     */, +    void checkCompilationLimit() {, +        long now = System.nanoTime();, +        long timePassed = now - lastInlineCompileTime;, +        lastInlineCompileTime = now;, +, +        scriptsPerMinCounter += ((double) timePassed) * compilesAllowedPerNano;, +, +        // It's been over the time limit anyway, readjust the bucket to be level, +        if (scriptsPerMinCounter > totalCompilesPerMinute) {, +            scriptsPerMinCounter = totalCompilesPerMinute;, +        }, +, +        // If there is enough tokens in the bucket, allow the request and decrease the tokens by 1, +        if (scriptsPerMinCounter >= 1) {, +            scriptsPerMinCounter -= 1.0;, +        } else {, +            // Otherwise reject the request, +            throw new CircuitBreakingException("[script] Too many dynamic script compilations within one minute, max: [" +, +                            totalCompilesPerMinute + "/min]; please use on-disk, indexed, or scripts with parameters instead; " +, +                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_PER_MINUTE.getKey() + "] setting");, +        }, +    }, +, +    /**, +        if (compiledScript != null) {, +            return compiledScript;, +        }]