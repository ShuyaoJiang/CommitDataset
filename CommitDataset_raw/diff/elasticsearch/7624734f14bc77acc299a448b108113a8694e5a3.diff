[+++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +                        channel.sendResponse(new ClusterStateResponse(clusterName, build, 0L, false));, +++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +                        channel.sendResponse(new ClusterStateResponse(clusterName, build, 0L, false));, +++ b/rest-api-spec/src/main/resources/rest-api-spec/api/cluster.state.json, +        "wait_for_metadata_version": {, +          "type": "number",, +          "description": "Wait for the metadata version to be equal or greater than the specified metadata version", +        },, +        "wait_for_timeout" : {, +          "type": "time",, +          "description": "The maximum time to wait for wait_for_metadata_version before timing out", +        },, +++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +                        channel.sendResponse(new ClusterStateResponse(clusterName, build, 0L, false));, +++ b/rest-api-spec/src/main/resources/rest-api-spec/api/cluster.state.json, +        "wait_for_metadata_version": {, +          "type": "number",, +          "description": "Wait for the metadata version to be equal or greater than the specified metadata version", +        },, +        "wait_for_timeout" : {, +          "type": "time",, +          "description": "The maximum time to wait for wait_for_metadata_version before timing out", +        },, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.TimeValue;, +    public static final TimeValue DEFAULT_WAIT_FOR_NODE_TIMEOUT = TimeValue.timeValueMinutes(1);, +, +    private Long waitForMetaDataVersion;, +    private TimeValue waitForTimeout = DEFAULT_WAIT_FOR_NODE_TIMEOUT;, +        // TODO: change version to V_6_6_0 after backporting:, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            waitForTimeout = in.readTimeValue();, +            waitForMetaDataVersion = in.readOptionalLong();, +        }, +        // TODO: change version to V_6_6_0 after backporting:, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeTimeValue(waitForTimeout);, +            out.writeOptionalLong(waitForMetaDataVersion);, +        }, +    public TimeValue waitForTimeout() {, +        return waitForTimeout;, +    }, +, +    public ClusterStateRequest waitForTimeout(TimeValue waitForTimeout) {, +        this.waitForTimeout = waitForTimeout;, +        return this;, +    }, +, +    public Long waitForMetaDataVersion() {, +        return waitForMetaDataVersion;, +    }, +, +    public ClusterStateRequest waitForMetaDataVersion(long waitForMetaDataVersion) {, +        if (waitForMetaDataVersion < 1) {, +            throw new IllegalArgumentException("provided waitForMetaDataVersion should be >= 1, but instead is [" +, +                waitForMetaDataVersion + "]");, +        }, +        this.waitForMetaDataVersion = waitForMetaDataVersion;, +        return this;, +    }, +, +++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +                        channel.sendResponse(new ClusterStateResponse(clusterName, build, 0L, false));, +++ b/rest-api-spec/src/main/resources/rest-api-spec/api/cluster.state.json, +        "wait_for_metadata_version": {, +          "type": "number",, +          "description": "Wait for the metadata version to be equal or greater than the specified metadata version", +        },, +        "wait_for_timeout" : {, +          "type": "time",, +          "description": "The maximum time to wait for wait_for_metadata_version before timing out", +        },, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.unit.TimeValue;, +    public static final TimeValue DEFAULT_WAIT_FOR_NODE_TIMEOUT = TimeValue.timeValueMinutes(1);, +, +    private Long waitForMetaDataVersion;, +    private TimeValue waitForTimeout = DEFAULT_WAIT_FOR_NODE_TIMEOUT;, +        // TODO: change version to V_6_6_0 after backporting:, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            waitForTimeout = in.readTimeValue();, +            waitForMetaDataVersion = in.readOptionalLong();, +        }, +        // TODO: change version to V_6_6_0 after backporting:, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeTimeValue(waitForTimeout);, +            out.writeOptionalLong(waitForMetaDataVersion);, +        }, +    public TimeValue waitForTimeout() {, +        return waitForTimeout;, +    }, +, +    public ClusterStateRequest waitForTimeout(TimeValue waitForTimeout) {, +        this.waitForTimeout = waitForTimeout;, +        return this;, +    }, +]