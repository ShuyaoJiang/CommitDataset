[+++ b/modules/reindex/src/test/java/org/elasticsearch/client/documentation/ReindexDocumentationIT.java, +import org.elasticsearch.index.IndexModule;, +import org.elasticsearch.index.engine.Engine;, +import org.elasticsearch.index.reindex.AbstractBulkByScrollRequestBuilder;, +import org.elasticsearch.index.reindex.CancelTests;, +import org.elasticsearch.index.reindex.ReindexPlugin;, +import org.elasticsearch.index.shard.IndexingOperationListener;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.plugins.Plugin;, +import org.hamcrest.Matcher;, +import org.junit.Before;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.concurrent.Semaphore;, +import java.util.concurrent.TimeUnit;, +import java.util.stream.Collectors;, +import java.util.stream.IntStream;, +, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.equalTo;, +    // Semaphore used to allow & block indexing operations during the test, +    private static final Semaphore ALLOWED_OPERATIONS = new Semaphore(0);, +    private static final String INDEX_NAME = "source_index";, +, +    @Override, +    protected boolean ignoreExternalCluster() {, +        return true;, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Arrays.asList(ReindexPlugin.class, ReindexCancellationPlugin.class);, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> transportClientPlugins() {, +        return Collections.singletonList(ReindexPlugin.class);, +    }, +, +    @Before, +    public void setup() {, +        client().admin().indices().prepareCreate(INDEX_NAME).get();, +    }, +, +    public void testReindex() {, +        BulkByScrollResponse response =, +          new ReindexRequestBuilder(client, ReindexAction.INSTANCE), +            .source("source_index"), +    public void testUpdateByQuery() {, +        client.admin().indices().prepareCreate("foo").get();, +        client.admin().indices().prepareCreate("bar").get();, +        client.admin().indices().preparePutMapping(INDEX_NAME).setType("_doc").setSource("cat", "type=keyword").get();, +            UpdateByQueryRequestBuilder updateByQuery =, +              new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE);, +            UpdateByQueryRequestBuilder updateByQuery =, +              new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE);, +                .script(new Script(ScriptType.INLINE,, +                    "ctx._source.awesome = 'absolutely'",, +                    "painless",, +                    Collections.emptyMap()));, +            UpdateByQueryRequestBuilder updateByQuery =, +              new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE);, +                .source(), +                .setSize(500);, +            UpdateByQueryRequestBuilder updateByQuery =, +               new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE);, +            updateByQuery.source("source_index"), +                .size(100), +                .source(), +                .addSort("cat", SortOrder.DESC);, +            UpdateByQueryRequestBuilder updateByQuery =, +              new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE);, +            UpdateByQueryRequestBuilder updateByQuery =, +              new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE);, +            UpdateByQueryRequestBuilder updateByQuery =, +              new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE);, +            UpdateByQueryRequestBuilder updateByQuery =, +              new UpdateByQueryRequestBuilder(client, UpdateByQueryAction.INSTANCE);, +    }, +, +    public void testTasks() throws InterruptedException {, +        final Client client = client();, +        final ReindexRequestBuilder builder = reindexAndPartiallyBlock();, +, +                BulkByScrollTask.Status status =, +                    (BulkByScrollTask.Status) info.getStatus();, +, +        TaskInfo mainTask = CancelTests.findTaskToCancel(ReindexAction.NAME, builder.request().getSlices());, +        BulkByScrollTask.Status status = (BulkByScrollTask.Status) mainTask.getStatus();, +        assertNull(status.getReasonCancelled());, +        TaskId taskId = mainTask.getTaskId();, +            client.admin().cluster().prepareCancelTasks(), +                .setActions(UpdateByQueryAction.NAME).get().getTasks();, +            client.admin().cluster().prepareCancelTasks(), +                .setTaskId(taskId).get().getTasks();, +, +        // unblocking the blocked update, +        ALLOWED_OPERATIONS.release(builder.request().getSlices());, +    public void testDeleteByQuery() {, +        client.admin().indices().prepareCreate("persons").get();]