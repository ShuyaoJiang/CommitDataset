[+++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/cluster/ClusterInfoIT.java, +        String uid = (String) license.get(ClusterInfoRenderer.Fields.UID.underscore().toString());, +        String type = (String) license.get(ClusterInfoRenderer.Fields.TYPE.underscore().toString());, +        String status = (String) license.get(ClusterInfoRenderer.Fields.STATUS.underscore().toString());, +        Long expiryDate = (Long) license.get(ClusterInfoRenderer.Fields.EXPIRY_DATE_IN_MILLIS.underscore().toString());, +        String hkey = (String) license.get(ClusterInfoRenderer.Fields.HKEY.underscore().toString());, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.FEATURE.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUER.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUED_TO.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((Long) license.get(ClusterInfoRenderer.Fields.ISSUE_DATE_IN_MILLIS.underscore().toString()), greaterThan(0L));, +        assertThat((Integer) license.get(ClusterInfoRenderer.Fields.MAX_NODES.underscore().toString()), greaterThan(0));, +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/cluster/ClusterInfoIT.java, +        String uid = (String) license.get(ClusterInfoRenderer.Fields.UID.underscore().toString());, +        String type = (String) license.get(ClusterInfoRenderer.Fields.TYPE.underscore().toString());, +        String status = (String) license.get(ClusterInfoRenderer.Fields.STATUS.underscore().toString());, +        Long expiryDate = (Long) license.get(ClusterInfoRenderer.Fields.EXPIRY_DATE_IN_MILLIS.underscore().toString());, +        String hkey = (String) license.get(ClusterInfoRenderer.Fields.HKEY.underscore().toString());, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.FEATURE.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUER.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUED_TO.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((Long) license.get(ClusterInfoRenderer.Fields.ISSUE_DATE_IN_MILLIS.underscore().toString()), greaterThan(0L));, +        assertThat((Integer) license.get(ClusterInfoRenderer.Fields.MAX_NODES.underscore().toString()), greaterThan(0));, +++ b/qa/shield-example-realm/pom.xml, +        <xlint.options>-Xlint:-rawtypes</xlint.options>, +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/cluster/ClusterInfoIT.java, +        String uid = (String) license.get(ClusterInfoRenderer.Fields.UID.underscore().toString());, +        String type = (String) license.get(ClusterInfoRenderer.Fields.TYPE.underscore().toString());, +        String status = (String) license.get(ClusterInfoRenderer.Fields.STATUS.underscore().toString());, +        Long expiryDate = (Long) license.get(ClusterInfoRenderer.Fields.EXPIRY_DATE_IN_MILLIS.underscore().toString());, +        String hkey = (String) license.get(ClusterInfoRenderer.Fields.HKEY.underscore().toString());, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.FEATURE.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUER.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUED_TO.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((Long) license.get(ClusterInfoRenderer.Fields.ISSUE_DATE_IN_MILLIS.underscore().toString()), greaterThan(0L));, +        assertThat((Integer) license.get(ClusterInfoRenderer.Fields.MAX_NODES.underscore().toString()), greaterThan(0));, +++ b/qa/shield-example-realm/pom.xml, +        <xlint.options>-Xlint:-rawtypes</xlint.options>, +++ b/qa/shield-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +                .put("path.home", createTempDir()), +                .put("path.home", createTempDir()), +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/cluster/ClusterInfoIT.java, +        String uid = (String) license.get(ClusterInfoRenderer.Fields.UID.underscore().toString());, +        String type = (String) license.get(ClusterInfoRenderer.Fields.TYPE.underscore().toString());, +        String status = (String) license.get(ClusterInfoRenderer.Fields.STATUS.underscore().toString());, +        Long expiryDate = (Long) license.get(ClusterInfoRenderer.Fields.EXPIRY_DATE_IN_MILLIS.underscore().toString());, +        String hkey = (String) license.get(ClusterInfoRenderer.Fields.HKEY.underscore().toString());, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.FEATURE.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUER.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUED_TO.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((Long) license.get(ClusterInfoRenderer.Fields.ISSUE_DATE_IN_MILLIS.underscore().toString()), greaterThan(0L));, +        assertThat((Integer) license.get(ClusterInfoRenderer.Fields.MAX_NODES.underscore().toString()), greaterThan(0));, +++ b/qa/shield-example-realm/pom.xml, +        <xlint.options>-Xlint:-rawtypes</xlint.options>, +++ b/qa/shield-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +                .put("path.home", createTempDir()), +                .put("path.home", createTempDir()), +++ b/qa/shield-tribe-node-tests/integration-tests.xml, +    <property name="integ.pidfile.2" location="${integ.scratch}/cluster2.pid"/>, +    <available property="integ.pidfile.2.exists" file="${integ.pidfile.2}"/>, +    <property name="integ.pidfile.3" location="${integ.scratch}/cluster3.pid"/>, +    <available property="integ.pidfile.3.exists" file="${integ.pidfile.3}"/>, +                                       es.pidfile="${integ.pidfile.2}", +                <echo>Failed to start first cluster with message: ${failure.message}</echo>, +                <stop-node es.pidfile="${integ.pidfile.2}"/>, +                                       es.pidfile="${integ.pidfile.3}", +                <echo>Failed to start second cluster with message: ${failure.message}</echo>, +                <stop-node es.pidfile="${integ.pidfile.3}"/>, +                <stop-node es.pidfile="${integ.pidfile.2}"/>, +                <startup-elasticsearch>, +                <stop-node es.pidfile="${integ.pidfile}"/>, +                <stop-node es.pidfile="${integ.pidfile.3}"/>, +                <stop-node es.pidfile="${integ.pidfile.2}"/>, +    <target name="stop-tribe-node" if="integ.pidfile.exists">, +        <stop-node es.pidfile="${integ.pidfile}"/>, +    <target name="stop-cluster1" if="integ.pidfile.2.exists">, +        <stop-node es.pidfile="${integ.pidfile.2}"/>, +    <target name="stop-cluster2" if="integ.pidfile.2.exists">, +        <stop-node es.pidfile="${integ.pidfile.3}"/>, +++ b/marvel/pom.xml, +        <xlint.options>-Xlint:-rawtypes,-unchecked</xlint.options>, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/cluster/ClusterInfoIT.java, +        String uid = (String) license.get(ClusterInfoRenderer.Fields.UID.underscore().toString());, +        String type = (String) license.get(ClusterInfoRenderer.Fields.TYPE.underscore().toString());, +        String status = (String) license.get(ClusterInfoRenderer.Fields.STATUS.underscore().toString());, +        Long expiryDate = (Long) license.get(ClusterInfoRenderer.Fields.EXPIRY_DATE_IN_MILLIS.underscore().toString());, +        String hkey = (String) license.get(ClusterInfoRenderer.Fields.HKEY.underscore().toString());, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.FEATURE.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUER.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((String) license.get(ClusterInfoRenderer.Fields.ISSUED_TO.underscore().toString()), not(isEmptyOrNullString()));, +        assertThat((Long) license.get(ClusterInfoRenderer.Fields.ISSUE_DATE_IN_MILLIS.underscore().toString()), greaterThan(0L));]