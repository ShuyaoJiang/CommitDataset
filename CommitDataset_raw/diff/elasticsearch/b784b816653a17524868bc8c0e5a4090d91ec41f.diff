[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        return addRescorer(rescorer, window);, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        return addRescorer(rescorer, window);, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;, +import java.util.function.Function;, +     * Reads a {@link QueryBuilder} from the current stream, +    public Rescorer readRescorer() throws IOException {, +        return readNamedWriteable(Rescorer.class);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        return addRescorer(rescorer, window);, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;, +import java.util.function.Function;, +     * Reads a {@link QueryBuilder} from the current stream, +    public Rescorer readRescorer() throws IOException {, +        return readNamedWriteable(Rescorer.class);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;, +     * Writes a {@link Rescorer} to the current stream, +    public void writeRescorer(Rescorer rescorer) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        return addRescorer(rescorer, window);, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;, +import java.util.function.Function;, +     * Reads a {@link QueryBuilder} from the current stream, +    public Rescorer readRescorer() throws IOException {, +        return readNamedWriteable(Rescorer.class);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;, +     * Writes a {@link Rescorer} to the current stream, +    public void writeRescorer(Rescorer rescorer) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.function.Supplier;, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        return addRescorer(rescorer, window);, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;, +import java.util.function.Function;, +     * Reads a {@link QueryBuilder} from the current stream, +    public Rescorer readRescorer() throws IOException {, +        return readNamedWriteable(Rescorer.class);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;, +     * Writes a {@link Rescorer} to the current stream, +    public void writeRescorer(Rescorer rescorer) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;]