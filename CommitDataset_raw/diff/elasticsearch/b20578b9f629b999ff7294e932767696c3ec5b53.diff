[+++ b/plugin/src/main/java/org/elasticsearch/xpack/common/IteratingActionListener.java, +import org.elasticsearch.common.inject.internal.Nullable;, +import java.util.function.Supplier;, + * has no more elements then the wrapped listener will be called with a null value, unless an optional {@link Supplier} is provided, + * that supplies the response to send for {@link ActionListener#onResponse(Object)}., +    private final Supplier<T> consumablesFinishedResponse;, +    /**, +     * Constructs an {@link IteratingActionListener}., +     *, +     * @param delegate the delegate listener to call when all consumables have finished executing, +     * @param consumer the consumer that is executed for each consumable instance, +     * @param consumables the instances that can be consumed to produce a response which is ultimately sent on the delegate listener, +     * @param threadContext the thread context for the thread pool that created the listener, +     */, +        this(delegate, consumer, consumables, threadContext, null);, +    }, +, +    /**, +     * Constructs an {@link IteratingActionListener}., +     *, +     * @param delegate the delegate listener to call when all consumables have finished executing, +     * @param consumer the consumer that is executed for each consumable instance, +     * @param consumables the instances that can be consumed to produce a response which is ultimately sent on the delegate listener, +     * @param threadContext the thread context for the thread pool that created the listener, +     * @param consumablesFinishedResponse a supplier that maps the last consumable's response to a response, +     *                                    to be sent on the delegate listener, in case the last consumable returns a, +     *                                    {@code null} value, but the delegate listener should respond with some other value, +     *                                    (perhaps a concatenation of the results of all the consumables)., +     */, +    public IteratingActionListener(ActionListener<T> delegate, BiConsumer<U, ActionListener<T>> consumer, List<U> consumables,, +                                   ThreadContext threadContext, @Nullable Supplier<T> consumablesFinishedResponse) {, +        this.consumablesFinishedResponse = consumablesFinishedResponse;, +                    if (consumablesFinishedResponse != null) {, +                        delegate.onResponse(consumablesFinishedResponse.get());, +                    } else {, +                    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/common/IteratingActionListener.java, +import org.elasticsearch.common.inject.internal.Nullable;, +import java.util.function.Supplier;, + * has no more elements then the wrapped listener will be called with a null value, unless an optional {@link Supplier} is provided, + * that supplies the response to send for {@link ActionListener#onResponse(Object)}., +    private final Supplier<T> consumablesFinishedResponse;, +    /**, +     * Constructs an {@link IteratingActionListener}., +     *, +     * @param delegate the delegate listener to call when all consumables have finished executing, +     * @param consumer the consumer that is executed for each consumable instance, +     * @param consumables the instances that can be consumed to produce a response which is ultimately sent on the delegate listener, +     * @param threadContext the thread context for the thread pool that created the listener, +     */, +        this(delegate, consumer, consumables, threadContext, null);, +    }, +, +    /**, +     * Constructs an {@link IteratingActionListener}., +     *, +     * @param delegate the delegate listener to call when all consumables have finished executing, +     * @param consumer the consumer that is executed for each consumable instance, +     * @param consumables the instances that can be consumed to produce a response which is ultimately sent on the delegate listener, +     * @param threadContext the thread context for the thread pool that created the listener, +     * @param consumablesFinishedResponse a supplier that maps the last consumable's response to a response, +     *                                    to be sent on the delegate listener, in case the last consumable returns a, +     *                                    {@code null} value, but the delegate listener should respond with some other value, +     *                                    (perhaps a concatenation of the results of all the consumables)., +     */, +    public IteratingActionListener(ActionListener<T> delegate, BiConsumer<U, ActionListener<T>> consumer, List<U> consumables,, +                                   ThreadContext threadContext, @Nullable Supplier<T> consumablesFinishedResponse) {, +        this.consumablesFinishedResponse = consumablesFinishedResponse;, +                    if (consumablesFinishedResponse != null) {, +                        delegate.onResponse(consumablesFinishedResponse.get());, +                    } else {, +                    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/extensions/XPackExtension.java, +import java.util.function.BiConsumer;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.xpack.security.authz.RoleDescriptor;, +, +    /**, +     * Returns an ordered list of role providers that are used to resolve role names, +     * to {@link RoleDescriptor} objects.  Each provider is invoked in order to, +     * resolve any role names not resolved by the reserved or native roles stores., +     *, +     * Each role provider is represented as a {@link BiConsumer} which takes a set, +     * of roles to resolve as the first parameter to consume and an {@link ActionListener}, +     * as the second parameter to consume.  The implementation of the role provider, +     * should be asynchronous if the computation is lengthy or any disk and/or network, +     * I/O is involved.  The implementation is responsible for resolving whatever roles, +     * it can into a set of {@link RoleDescriptor} instances.  If successful, the, +     * implementation must invoke {@link ActionListener#onResponse(Object)} to pass along, +     * the resolved set of role descriptors.  If a failure was encountered, the, +     * implementation must invoke {@link ActionListener#onFailure(Exception)}., +     *, +     * By default, an empty list is returned., +     *, +     * @param settings The configured settings for the node, +     * @param resourceWatcherService Use to watch configuration files for changes, +     */, +    public List<BiConsumer<Set<String>, ActionListener<Set<RoleDescriptor>>>>, +    getRolesProviders(Settings settings, ResourceWatcherService resourceWatcherService) {]