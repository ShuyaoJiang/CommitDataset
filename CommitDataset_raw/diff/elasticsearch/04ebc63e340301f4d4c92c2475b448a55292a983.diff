[+++ b/server/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +import org.elasticsearch.action.RoutingMissingException;, +                    responses.set(i, newItemFailure(concreteSingleIndex, item.type(), item.id(),, +                        new RoutingMissingException(concreteSingleIndex, item.type(), item.id())));, +        executeShardAction(listener, responses, shardRequests);, +    }, +, +    protected void executeShardAction(ActionListener<MultiGetResponse> listener,, +                                      AtomicArray<MultiGetItemResponse> responses,, +                                      Map<ShardId, MultiGetShardRequest> shardRequests) {, +++ b/server/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +import org.elasticsearch.action.RoutingMissingException;, +                    responses.set(i, newItemFailure(concreteSingleIndex, item.type(), item.id(),, +                        new RoutingMissingException(concreteSingleIndex, item.type(), item.id())));, +        executeShardAction(listener, responses, shardRequests);, +    }, +, +    protected void executeShardAction(ActionListener<MultiGetResponse> listener,, +                                      AtomicArray<MultiGetItemResponse> responses,, +                                      Map<ShardId, MultiGetShardRequest> shardRequests) {, +++ b/server/src/main/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsAction.java, +import org.elasticsearch.action.RoutingMissingException;, +                responses.set(i, new MultiTermVectorsItemResponse(null,, +                    new MultiTermVectorsResponse.Failure(termVectorsRequest.index(), termVectorsRequest.type(), termVectorsRequest.id(),, +                        new IndexNotFoundException(termVectorsRequest.index()))));, +                        new RoutingMissingException(concreteSingleIndex, termVectorsRequest.type(), termVectorsRequest.id()))));, +        executeShardAction(listener, responses, shardRequests);, +    }, +, +    protected void executeShardAction(ActionListener<MultiTermVectorsResponse> listener,, +                                      AtomicArray<MultiTermVectorsItemResponse> responses,, +                                      Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {, +, +++ b/server/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +import org.elasticsearch.action.RoutingMissingException;, +                    responses.set(i, newItemFailure(concreteSingleIndex, item.type(), item.id(),, +                        new RoutingMissingException(concreteSingleIndex, item.type(), item.id())));, +        executeShardAction(listener, responses, shardRequests);, +    }, +, +    protected void executeShardAction(ActionListener<MultiGetResponse> listener,, +                                      AtomicArray<MultiGetItemResponse> responses,, +                                      Map<ShardId, MultiGetShardRequest> shardRequests) {, +++ b/server/src/main/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsAction.java, +import org.elasticsearch.action.RoutingMissingException;, +                responses.set(i, new MultiTermVectorsItemResponse(null,, +                    new MultiTermVectorsResponse.Failure(termVectorsRequest.index(), termVectorsRequest.type(), termVectorsRequest.id(),, +                        new IndexNotFoundException(termVectorsRequest.index()))));, +                        new RoutingMissingException(concreteSingleIndex, termVectorsRequest.type(), termVectorsRequest.id()))));, +        executeShardAction(listener, responses, shardRequests);, +    }, +, +    protected void executeShardAction(ActionListener<MultiTermVectorsResponse> listener,, +                                      AtomicArray<MultiTermVectorsItemResponse> responses,, +                                      Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {, +, +++ b/server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +import org.elasticsearch.action.RoutingMissingException;, +                checkRoutingMissingException(response);, +    private static void checkRoutingMissingException(MultiTermVectorsItemResponse response) {, +        Throwable cause = ExceptionsHelper.unwrap(response.getFailure().getCause(), RoutingMissingException.class);, +        if (cause != null) {, +            throw ((RoutingMissingException) cause);, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +import org.elasticsearch.action.RoutingMissingException;, +                    responses.set(i, newItemFailure(concreteSingleIndex, item.type(), item.id(),, +                        new RoutingMissingException(concreteSingleIndex, item.type(), item.id())));, +        executeShardAction(listener, responses, shardRequests);, +    }, +, +    protected void executeShardAction(ActionListener<MultiGetResponse> listener,, +                                      AtomicArray<MultiGetItemResponse> responses,, +                                      Map<ShardId, MultiGetShardRequest> shardRequests) {, +++ b/server/src/main/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsAction.java, +import org.elasticsearch.action.RoutingMissingException;, +                responses.set(i, new MultiTermVectorsItemResponse(null,, +                    new MultiTermVectorsResponse.Failure(termVectorsRequest.index(), termVectorsRequest.type(), termVectorsRequest.id(),, +                        new IndexNotFoundException(termVectorsRequest.index()))));, +                        new RoutingMissingException(concreteSingleIndex, termVectorsRequest.type(), termVectorsRequest.id()))));, +        executeShardAction(listener, responses, shardRequests);, +    }, +, +    protected void executeShardAction(ActionListener<MultiTermVectorsResponse> listener,, +                                      AtomicArray<MultiTermVectorsItemResponse> responses,, +                                      Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {, +, +++ b/server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +import org.elasticsearch.action.RoutingMissingException;, +                checkRoutingMissingException(response);, +    private static void checkRoutingMissingException(MultiTermVectorsItemResponse response) {, +        Throwable cause = ExceptionsHelper.unwrap(response.getFailure().getCause(), RoutingMissingException.class);, +        if (cause != null) {, +            throw ((RoutingMissingException) cause);, +        }, +    }, +, +++ b/server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java]