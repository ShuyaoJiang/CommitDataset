[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsBuilder.java, +import org.elasticsearch.search.aggregations.bucket.terms.AbstractTermsParametersParser;, +    private int requiredSize = AbstractTermsParametersParser.DEFAULT_REQUIRED_SIZE;, +    private int shardSize = AbstractTermsParametersParser.DEFAULT_SHARD_SIZE;, +    private int minDocCount = AbstractTermsParametersParser.DEFAULT_MIN_DOC_COUNT;, +    private int shardMinDocCount = AbstractTermsParametersParser.DEFAULT_SHARD_MIN_DOC_COUNT;, +        if (minDocCount != AbstractTermsParametersParser.DEFAULT_MIN_DOC_COUNT) {, +        if (shardMinDocCount != AbstractTermsParametersParser.DEFAULT_SHARD_MIN_DOC_COUNT) {, +        if (requiredSize != AbstractTermsParametersParser.DEFAULT_REQUIRED_SIZE) {, +        if (shardSize != AbstractTermsParametersParser.DEFAULT_SHARD_SIZE) {, +            builder.field(SignificantTermsParametersParser.BACKGROUND_FILTER.getPreferredName());, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsBuilder.java, +import org.elasticsearch.search.aggregations.bucket.terms.AbstractTermsParametersParser;, +    private int requiredSize = AbstractTermsParametersParser.DEFAULT_REQUIRED_SIZE;, +    private int shardSize = AbstractTermsParametersParser.DEFAULT_SHARD_SIZE;, +    private int minDocCount = AbstractTermsParametersParser.DEFAULT_MIN_DOC_COUNT;, +    private int shardMinDocCount = AbstractTermsParametersParser.DEFAULT_SHARD_MIN_DOC_COUNT;, +        if (minDocCount != AbstractTermsParametersParser.DEFAULT_MIN_DOC_COUNT) {, +        if (shardMinDocCount != AbstractTermsParametersParser.DEFAULT_SHARD_MIN_DOC_COUNT) {, +        if (requiredSize != AbstractTermsParametersParser.DEFAULT_REQUIRED_SIZE) {, +        if (shardSize != AbstractTermsParametersParser.DEFAULT_SHARD_SIZE) {, +            builder.field(SignificantTermsParametersParser.BACKGROUND_FILTER.getPreferredName());, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsParametersParser.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +, +package org.elasticsearch.search.aggregations.bucket.significant;, +, +import org.apache.lucene.search.Filter;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.search.SearchParseException;, +import org.elasticsearch.search.aggregations.bucket.terms.AbstractTermsParametersParser;, +import org.elasticsearch.search.internal.SearchContext;, +, +import java.io.IOException;, +, +, +public class SignificantTermsParametersParser extends AbstractTermsParametersParser {, +, +, +    public Filter getFilter() {, +        return filter;, +    }, +, +    private Filter filter = null;, +, +    @Override, +    public void setDefaults() {, +        setMinDocCount(3);, +    }, +, +    static final ParseField BACKGROUND_FILTER = new ParseField("background_filter");, +, +    @Override, +    public void parseSpecial(String aggregationName, XContentParser parser, SearchContext context, XContentParser.Token token, String currentFieldName) throws IOException {, +, +        if (token == XContentParser.Token.START_OBJECT) {, +            if (BACKGROUND_FILTER.match(currentFieldName)) {, +                filter = context.queryParserService().parseInnerFilter(parser).filter();, +            } else {, +                throw new SearchParseException(context, "Unknown key for a " + token + " in [" + aggregationName + "]: [" + currentFieldName + "].");, +            }, +        } else {, +            throw new SearchParseException(context, "Unknown key for a " + token + " in [" + aggregationName + "]: [" + currentFieldName + "].");, +        }, +    }, +}, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsBuilder.java, +import org.elasticsearch.search.aggregations.bucket.terms.AbstractTermsParametersParser;, +    private int requiredSize = AbstractTermsParametersParser.DEFAULT_REQUIRED_SIZE;, +    private int shardSize = AbstractTermsParametersParser.DEFAULT_SHARD_SIZE;, +    private int minDocCount = AbstractTermsParametersParser.DEFAULT_MIN_DOC_COUNT;, +    private int shardMinDocCount = AbstractTermsParametersParser.DEFAULT_SHARD_MIN_DOC_COUNT;, +        if (minDocCount != AbstractTermsParametersParser.DEFAULT_MIN_DOC_COUNT) {, +        if (shardMinDocCount != AbstractTermsParametersParser.DEFAULT_SHARD_MIN_DOC_COUNT) {, +        if (requiredSize != AbstractTermsParametersParser.DEFAULT_REQUIRED_SIZE) {, +        if (shardSize != AbstractTermsParametersParser.DEFAULT_SHARD_SIZE) {, +            builder.field(SignificantTermsParametersParser.BACKGROUND_FILTER.getPreferredName());, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsParametersParser.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with]