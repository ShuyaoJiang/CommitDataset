[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory;, +                        charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name, analysisService.getIndexSettings());, +                        if (charFilterFactoryFactory == null) {, +                        charFilterFactories[i] = charFilterFactoryFactory.get(analysisService.getIndexSettings(), environment, charFilter.name,, +                            AnalysisRegistry.getSettingsFromIndexSettings(analysisService.getIndexSettings(),, +                                AnalysisRegistry.INDEX_ANALYSIS_CHAR_FILTER + "." + charFilter.name));, +                    AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory;, +                        tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +                        tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name, analysisService.getIndexSettings());, +                       if (tokenFilterFactoryFactory == null) {, +                        tokenFilterFactories[i] = tokenFilterFactoryFactory.get(analysisService.getIndexSettings(), environment, tokenFilter.name,, +                            AnalysisRegistry.getSettingsFromIndexSettings(analysisService.getIndexSettings(),, +                                AnalysisRegistry.INDEX_ANALYSIS_FILTER + "." + tokenFilter.name));, +            AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory;, +                tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name, analysisService.getIndexSettings());, +                if (tokenizerFactoryFactory == null) {, +                tokenizerFactory = tokenizerFactoryFactory.get(analysisService.getIndexSettings(), environment, tokenizer.name,, +                    AnalysisRegistry.getSettingsFromIndexSettings(analysisService.getIndexSettings(),, +                        AnalysisRegistry.INDEX_ANALYSIS_TOKENIZER + "." + tokenizer.name));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory;, +                        charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name, analysisService.getIndexSettings());, +                        if (charFilterFactoryFactory == null) {, +                        charFilterFactories[i] = charFilterFactoryFactory.get(analysisService.getIndexSettings(), environment, charFilter.name,, +                            AnalysisRegistry.getSettingsFromIndexSettings(analysisService.getIndexSettings(),, +                                AnalysisRegistry.INDEX_ANALYSIS_CHAR_FILTER + "." + charFilter.name));, +                    AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory;, +                        tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +                        tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name, analysisService.getIndexSettings());, +                       if (tokenFilterFactoryFactory == null) {, +                        tokenFilterFactories[i] = tokenFilterFactoryFactory.get(analysisService.getIndexSettings(), environment, tokenFilter.name,, +                            AnalysisRegistry.getSettingsFromIndexSettings(analysisService.getIndexSettings(),, +                                AnalysisRegistry.INDEX_ANALYSIS_FILTER + "." + tokenFilter.name));, +            AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory;, +                tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name, analysisService.getIndexSettings());, +                if (tokenizerFactoryFactory == null) {, +                tokenizerFactory = tokenizerFactoryFactory.get(analysisService.getIndexSettings(), environment, tokenizer.name,, +                    AnalysisRegistry.getSettingsFromIndexSettings(analysisService.getIndexSettings(),, +                        AnalysisRegistry.INDEX_ANALYSIS_TOKENIZER + "." + tokenizer.name));, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +    public static final String INDEX_ANALYSIS_CHAR_FILTER = "index.analysis.char_filter";, +    public static final String INDEX_ANALYSIS_FILTER = "index.analysis.filter";, +    public static final String INDEX_ANALYSIS_TOKENIZER = "index.analysis.tokenizer";, +    public static Settings getSettingsFromIndexSettings(IndexSettings indexSettings, String groupName) {, +        Settings settings = indexSettings.getSettings().getAsSettings(groupName);, +        if (settings.isEmpty()) {, +            settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, indexSettings.getIndexVersionCreated()).build();, +        }, +        return settings;, +    }, +, +        final Map<String, Settings> charFiltersSettings = indexSettings.getSettings().getGroups(INDEX_ANALYSIS_CHAR_FILTER);, +        final Map<String, Settings> tokenFiltersSettings = indexSettings.getSettings().getGroups(INDEX_ANALYSIS_FILTER);, +        final Map<String, Settings> tokenizersSettings = indexSettings.getSettings().getGroups(INDEX_ANALYSIS_TOKENIZER);, +        tokenFilters.put("synonym", requriesAnalysisSettings((is, env, name, settings) -> new SynonymTokenFilterFactory(is, env, this, name, settings)));, +    public AnalysisProvider<TokenizerFactory> getTokenizerProvider(String tokenizer, IndexSettings indexSettings) {, +        final Map<String, Settings> tokenizerSettings = indexSettings.getSettings().getGroups("index.analysis.tokenizer");, +        if (tokenizerSettings.containsKey(tokenizer)) {, +            Settings currentSettings = tokenizerSettings.get(tokenizer);, +            return getAnalysisProvider("tokenizer", tokenizers, tokenizer, currentSettings.get("type"));, +        } else {, +            return prebuiltAnalysis.tokenizerFactories.get(tokenizer);, +        }, +    }, +, +    public AnalysisProvider<TokenFilterFactory> getTokenFilterProvider(String tokenFilter, IndexSettings indexSettings) {, +        final Map<String, Settings> tokenFilterSettings = indexSettings.getSettings().getGroups("index.analysis.filter");, +        if (tokenFilterSettings.containsKey(tokenFilter)) {, +            Settings currentSettings = tokenFilterSettings.get(tokenFilter);, +            String typeName = currentSettings.get("type");, +            /*, +             * synonym is different than everything else since it needs access to the tokenizer factories for this index., +             * instead of building the infrastructure for plugins we rather make it a real exception to not pollute the general interface and, +             * hide internal data-structures as much as possible., +             */, +            if ("synonym".equals(typeName)) {, +                return requriesAnalysisSettings((is, env, name, settings) -> new SynonymTokenFilterFactory(is, env, this, name, settings));, +            } else {, +                return getAnalysisProvider("tokenfilter", tokenFilters, tokenFilter, typeName);, +            }, +        } else {, +            return prebuiltAnalysis.tokenFilterFactories.get(tokenFilter);, +        }, +    }, +, +    public AnalysisProvider<CharFilterFactory> getCharFilterProvider(String charFilter, IndexSettings indexSettings) {, +        final Map<String, Settings> tokenFilterSettings = indexSettings.getSettings().getGroups("index.analysis.char_filter");, +        if (tokenFilterSettings.containsKey(charFilter)) {, +            Settings currentSettings = tokenFilterSettings.get(charFilter);, +            return getAnalysisProvider("charfilter", charFilters, charFilter, currentSettings.get("type"));, +        } else {, +            return prebuiltAnalysis.charFilterFactories.get(charFilter);, +        }, +    }, +]