[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +    public AcknowledgedResponse putPipeline(PutPipelineRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent, emptySet());, +    public void putPipelineAsync(PutPipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +    public AcknowledgedResponse deletePipeline(DeletePipelineRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent, emptySet());, +    public void deletePipelineAsync(DeletePipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +    public AcknowledgedResponse putPipeline(PutPipelineRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent, emptySet());, +    public void putPipelineAsync(PutPipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +    public AcknowledgedResponse deletePipeline(DeletePipelineRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent, emptySet());, +    public void deletePipelineAsync(DeletePipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IngestClientIT.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +        AcknowledgedResponse putPipelineResponse =, +        AcknowledgedResponse response =, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +    public AcknowledgedResponse putPipeline(PutPipelineRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent, emptySet());, +    public void putPipelineAsync(PutPipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +    public AcknowledgedResponse deletePipeline(DeletePipelineRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent, emptySet());, +    public void deletePipelineAsync(DeletePipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IngestClientIT.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +        AcknowledgedResponse putPipelineResponse =, +        AcknowledgedResponse response =, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/IngestClientDocumentationIT.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +            AcknowledgedResponse response = client.ingest().putPipeline(request, RequestOptions.DEFAULT); // <1>, +            ActionListener<AcknowledgedResponse> listener =, +                new ActionListener<AcknowledgedResponse>() {, +                    public void onResponse(AcknowledgedResponse response) {, +            AcknowledgedResponse response = client.ingest().deletePipeline(request, RequestOptions.DEFAULT); // <1>, +            ActionListener<AcknowledgedResponse> listener =, +                new ActionListener<AcknowledgedResponse>() {, +                    public void onResponse(AcknowledgedResponse response) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +    public AcknowledgedResponse putPipeline(PutPipelineRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent, emptySet());, +    public void putPipelineAsync(PutPipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +    public AcknowledgedResponse deletePipeline(DeletePipelineRequest request, RequestOptions options) throws IOException {, +            AcknowledgedResponse::fromXContent, emptySet());, +    public void deletePipelineAsync(DeletePipelineRequest request, RequestOptions options, ActionListener<AcknowledgedResponse> listener) {, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IngestClientIT.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +        AcknowledgedResponse putPipelineResponse =, +        AcknowledgedResponse response =, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/IngestClientDocumentationIT.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +            AcknowledgedResponse response = client.ingest().putPipeline(request, RequestOptions.DEFAULT); // <1>, +            ActionListener<AcknowledgedResponse> listener =, +                new ActionListener<AcknowledgedResponse>() {, +                    public void onResponse(AcknowledgedResponse response) {, +            AcknowledgedResponse response = client.ingest().deletePipeline(request, RequestOptions.DEFAULT); // <1>, +            ActionListener<AcknowledgedResponse> listener =, +                new ActionListener<AcknowledgedResponse>() {, +                    public void onResponse(AcknowledgedResponse response) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;, +, +             PainlessMethod painlessMethod =  painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, numArguments - 1);, +, +             if (painlessMethod == null) {, +                 throw new IllegalArgumentException("dynamic method " +, +                         "[" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + (numArguments - 1) + "] not found");, +             }, +, +             return painlessMethod.methodHandle;, +         PainlessMethod method = painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, arity);, +, +        if (method == null) {, +            throw new IllegalArgumentException(, +                    "dynamic method [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + arity + "] not found");, +        }, +, +        if (interfaceType == null) {, +            throw new IllegalArgumentException("type [" + interfaceClass + "] not found");, +        }, +        PainlessMethod implMethod = painlessLookup.lookupRuntimePainlessMethod(receiverClass, name, arity);, +        if (implMethod == null) {, +            throw new IllegalArgumentException(, +                    "dynamic method [" + typeToCanonicalTypeName(receiverClass) + ", " + name + "/" + arity + "] not found");, +        }, +, +        MethodHandle getter = painlessLookup.lookupRuntimeGetterMethodHandle(receiverClass, name);]