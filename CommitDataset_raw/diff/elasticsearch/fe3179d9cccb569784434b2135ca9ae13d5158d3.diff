[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +import org.elasticsearch.common.xcontent.*;, +public class ClusterHealthResponse extends ActionResponse implements Iterable<ClusterIndexHealth>, StatusToXContent {, +    @Override, +    public RestStatus status() {, +        return isTimedOut() ? RestStatus.REQUEST_TIMEOUT : RestStatus.OK;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +import org.elasticsearch.common.xcontent.*;, +public class ClusterHealthResponse extends ActionResponse implements Iterable<ClusterIndexHealth>, StatusToXContent {, +    @Override, +    public RestStatus status() {, +        return isTimedOut() ? RestStatus.REQUEST_TIMEOUT : RestStatus.OK;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/health/RestClusterHealthAction.java, +import org.elasticsearch.rest.action.support.RestStatusToXContentListener;, +        client.admin().cluster().health(clusterHealthRequest, new RestStatusToXContentListener<ClusterHealthResponse>(channel));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +import org.elasticsearch.common.xcontent.*;, +public class ClusterHealthResponse extends ActionResponse implements Iterable<ClusterIndexHealth>, StatusToXContent {, +    @Override, +    public RestStatus status() {, +        return isTimedOut() ? RestStatus.REQUEST_TIMEOUT : RestStatus.OK;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/health/RestClusterHealthAction.java, +import org.elasticsearch.rest.action.support.RestStatusToXContentListener;, +        client.admin().cluster().health(clusterHealthRequest, new RestStatusToXContentListener<ClusterHealthResponse>(channel));, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponsesTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.cluster.health;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.Version;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.action.admin.cluster.health.ClusterIndexHealth;, +import org.elasticsearch.action.admin.cluster.health.ClusterShardHealth;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.routing.*;, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.test.ESTestCase;, +import org.hamcrest.Matchers;, +import org.junit.Test;, +, +import java.io.IOException;, +, +import static org.hamcrest.CoreMatchers.allOf;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.Matchers.*;, +, +public class ClusterHealthResponsesTests extends ESTestCase {, +, +    private final IndexNameExpressionResolver indexNameExpressionResolver = new IndexNameExpressionResolver(Settings.EMPTY);, +, +    private void assertIndexHealth(ClusterIndexHealth indexHealth, ShardCounter counter, IndexMetaData indexMetaData) {, +        assertThat(indexHealth.getStatus(), equalTo(counter.status()));, +        assertThat(indexHealth.getNumberOfShards(), equalTo(indexMetaData.getNumberOfShards()));, +        assertThat(indexHealth.getNumberOfReplicas(), equalTo(indexMetaData.getNumberOfReplicas()));, +        assertThat(indexHealth.getActiveShards(), equalTo(counter.active));, +        assertThat(indexHealth.getRelocatingShards(), equalTo(counter.relocating));, +        assertThat(indexHealth.getInitializingShards(), equalTo(counter.initializing));, +        assertThat(indexHealth.getUnassignedShards(), equalTo(counter.unassigned));, +        assertThat(indexHealth.getShards().size(), equalTo(indexMetaData.getNumberOfShards()));, +        assertThat(indexHealth.getValidationFailures(), empty());, +        int totalShards = 0;, +        for (ClusterShardHealth shardHealth : indexHealth.getShards().values()) {, +            totalShards += shardHealth.getActiveShards() + shardHealth.getInitializingShards() + shardHealth.getUnassignedShards();, +        }, +]