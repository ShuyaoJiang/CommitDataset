[+++ b/plugins/ingest-attachment/build.gradle, +  exclude '**/*.doc', +  exclude '**/*.vsdx', +++ b/plugins/ingest-attachment/build.gradle, +  exclude '**/*.doc', +  exclude '**/*.vsdx', +++ b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/TikaImpl.java, +import org.apache.tika.mime.MediaType;, +import org.apache.tika.parser.ParserDecorator;, +import java.util.Collections;, +import java.util.Set;, +    /** Exclude some formats */, +    private static final Set<MediaType> EXCLUDES = Collections.singleton(MediaType.application("x-tika-ooxml"));, +, +        ParserDecorator.withoutTypes(new org.apache.tika.parser.microsoft.ooxml.OOXMLParser(), EXCLUDES),, +++ b/plugins/ingest-attachment/build.gradle, +  exclude '**/*.doc', +  exclude '**/*.vsdx', +++ b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/TikaImpl.java, +import org.apache.tika.mime.MediaType;, +import org.apache.tika.parser.ParserDecorator;, +import java.util.Collections;, +import java.util.Set;, +    /** Exclude some formats */, +    private static final Set<MediaType> EXCLUDES = Collections.singleton(MediaType.application("x-tika-ooxml"));, +, +        ParserDecorator.withoutTypes(new org.apache.tika.parser.microsoft.ooxml.OOXMLParser(), EXCLUDES),, +++ b/plugins/ingest-attachment/src/test/java/org/elasticsearch/ingest/attachment/AttachmentProcessorTests.java, +import static org.hamcrest.Matchers.nullValue;, +    public void testWordDocumentWithVisioSchema() throws Exception {, +        Map<String, Object> attachmentData = parseDocument("issue-22077.docx", processor);, +, +        assertThat(attachmentData.keySet(), containsInAnyOrder("content", "language", "date", "author", "content_type",, +            "content_length"));, +        assertThat(attachmentData.get("content").toString(), containsString("Table of Contents"));, +        assertThat(attachmentData.get("language"), is("en"));, +        assertThat(attachmentData.get("date"), is("2015-01-06T18:07:00Z"));, +        assertThat(attachmentData.get("author"), is(notNullValue()));, +        assertThat(attachmentData.get("content_length"), is(notNullValue()));, +        assertThat(attachmentData.get("content_type").toString(),, +            is("application/vnd.openxmlformats-officedocument.wordprocessingml.document"));, +    }, +, +    public void testLegacyWordDocumentWithVisioSchema() throws Exception {, +        Map<String, Object> attachmentData = parseDocument("issue-22077.doc", processor);, +, +        assertThat(attachmentData.keySet(), containsInAnyOrder("content", "language", "date", "author", "content_type",, +            "content_length"));, +        assertThat(attachmentData.get("content").toString(), containsString("Table of Contents"));, +        assertThat(attachmentData.get("language"), is("en"));, +        assertThat(attachmentData.get("date"), is("2016-12-16T15:04:00Z"));, +        assertThat(attachmentData.get("author"), is(notNullValue()));, +        assertThat(attachmentData.get("content_length"), is(notNullValue()));, +        assertThat(attachmentData.get("content_type").toString(),, +            is("application/msword"));, +    }, +, +    public void testVisioIsExcluded() throws Exception {, +        Map<String, Object> attachmentData = parseDocument("issue-22077.vsdx", processor);, +        assertThat(attachmentData.get("content"), nullValue());, +        assertThat(attachmentData.get("content_type"), is("application/vnd.ms-visio.drawing"));, +        assertThat(attachmentData.get("content_length"), is(0L));, +    }, +, +++ b/plugins/ingest-attachment/build.gradle, +  exclude '**/*.doc', +  exclude '**/*.vsdx', +++ b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/TikaImpl.java, +import org.apache.tika.mime.MediaType;, +import org.apache.tika.parser.ParserDecorator;, +import java.util.Collections;, +import java.util.Set;, +    /** Exclude some formats */, +    private static final Set<MediaType> EXCLUDES = Collections.singleton(MediaType.application("x-tika-ooxml"));, +, +        ParserDecorator.withoutTypes(new org.apache.tika.parser.microsoft.ooxml.OOXMLParser(), EXCLUDES),, +++ b/plugins/ingest-attachment/src/test/java/org/elasticsearch/ingest/attachment/AttachmentProcessorTests.java, +import static org.hamcrest.Matchers.nullValue;, +    public void testWordDocumentWithVisioSchema() throws Exception {, +        Map<String, Object> attachmentData = parseDocument("issue-22077.docx", processor);, +, +        assertThat(attachmentData.keySet(), containsInAnyOrder("content", "language", "date", "author", "content_type",, +            "content_length"));, +        assertThat(attachmentData.get("content").toString(), containsString("Table of Contents"));, +        assertThat(attachmentData.get("language"), is("en"));, +        assertThat(attachmentData.get("date"), is("2015-01-06T18:07:00Z"));, +        assertThat(attachmentData.get("author"), is(notNullValue()));, +        assertThat(attachmentData.get("content_length"), is(notNullValue()));, +        assertThat(attachmentData.get("content_type").toString(),, +            is("application/vnd.openxmlformats-officedocument.wordprocessingml.document"));, +    }, +, +    public void testLegacyWordDocumentWithVisioSchema() throws Exception {, +        Map<String, Object> attachmentData = parseDocument("issue-22077.doc", processor);, +, +        assertThat(attachmentData.keySet(), containsInAnyOrder("content", "language", "date", "author", "content_type",, +            "content_length"));, +        assertThat(attachmentData.get("content").toString(), containsString("Table of Contents"));, +        assertThat(attachmentData.get("language"), is("en"));, +        assertThat(attachmentData.get("date"), is("2016-12-16T15:04:00Z"));]