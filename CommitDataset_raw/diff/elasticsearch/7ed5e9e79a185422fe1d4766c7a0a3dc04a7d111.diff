[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetRequest.java, +import org.elasticsearch.common.Nullable;, + * A request to get a document (its source) from an index based on its type (optional) and id. Best created using, +        type = "_all";, +        super(index, "_all", null);, +    public GetRequest type(@Nullable String type) {, +        if (type == null) {, +            type = "_all";, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetRequest.java, +import org.elasticsearch.common.Nullable;, + * A request to get a document (its source) from an index based on its type (optional) and id. Best created using, +        type = "_all";, +        super(index, "_all", null);, +    public GetRequest type(@Nullable String type) {, +        if (type == null) {, +            type = "_all";, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +import org.elasticsearch.index.mapper.Uid;, +        String type = null;, +        Engine.GetResult get = null;, +        if (request.type() == null || request.type().equals("_all")) {, +            for (String typeX : indexService.mapperService().types()) {, +                get = indexShard.get(new Engine.Get(request.realtime(), UidFieldMapper.TERM_FACTORY.createTerm(Uid.createUid(typeX, request.id()))));, +                if (get.exists()) {, +                    type = typeX;, +                    break;, +                }, +            }, +            if (get == null || !get.exists()) {, +                return new GetResponse(request.index(), request.type(), request.id(), -1, false, null, null);, +            }, +        } else {, +            type = request.type();, +            get = indexShard.get(new Engine.Get(request.realtime(), UidFieldMapper.TERM_FACTORY.createTerm(Uid.createUid(type, request.id()))));, +            if (!get.exists()) {, +                return new GetResponse(request.index(), request.type(), request.id(), -1, false, null, null);, +            }, +        }, +, +        DocumentMapper docMapper = indexService.mapperService().documentMapper(type);, +        try {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetRequest.java, +import org.elasticsearch.common.Nullable;, + * A request to get a document (its source) from an index based on its type (optional) and id. Best created using, +        type = "_all";, +        super(index, "_all", null);, +    public GetRequest type(@Nullable String type) {, +        if (type == null) {, +            type = "_all";, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +import org.elasticsearch.index.mapper.Uid;, +        String type = null;, +        Engine.GetResult get = null;, +        if (request.type() == null || request.type().equals("_all")) {, +            for (String typeX : indexService.mapperService().types()) {, +                get = indexShard.get(new Engine.Get(request.realtime(), UidFieldMapper.TERM_FACTORY.createTerm(Uid.createUid(typeX, request.id()))));, +                if (get.exists()) {, +                    type = typeX;, +                    break;, +                }, +            }, +            if (get == null || !get.exists()) {, +                return new GetResponse(request.index(), request.type(), request.id(), -1, false, null, null);, +            }, +        } else {, +            type = request.type();, +            get = indexShard.get(new Engine.Get(request.realtime(), UidFieldMapper.TERM_FACTORY.createTerm(Uid.createUid(type, request.id()))));, +            if (!get.exists()) {, +                return new GetResponse(request.index(), request.type(), request.id(), -1, false, null, null);, +            }, +        }, +, +        DocumentMapper docMapper = indexService.mapperService().documentMapper(type);, +        try {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/Client.java, +     * Gets the document that was indexed from an index with a type (optional) and id., +    GetRequestBuilder prepareGet(String index, @Nullable String type, String id);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetRequest.java, +import org.elasticsearch.common.Nullable;, + * A request to get a document (its source) from an index based on its type (optional) and id. Best created using, +        type = "_all";, +        super(index, "_all", null);, +    public GetRequest type(@Nullable String type) {, +        if (type == null) {, +            type = "_all";, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/TransportGetAction.java, +import org.elasticsearch.index.mapper.Uid;, +        String type = null;, +        Engine.GetResult get = null;, +        if (request.type() == null || request.type().equals("_all")) {, +            for (String typeX : indexService.mapperService().types()) {, +                get = indexShard.get(new Engine.Get(request.realtime(), UidFieldMapper.TERM_FACTORY.createTerm(Uid.createUid(typeX, request.id()))));, +                if (get.exists()) {, +                    type = typeX;, +                    break;, +                }]