[+++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool);, +            final ScriptModule scriptModule = ScriptModule.create(settings, environment, resourceWatcherService,, +                    pluginsService.filterPlugins(ScriptPlugin.class));, +                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool);, +            final ScriptModule scriptModule = ScriptModule.create(settings, environment, resourceWatcherService,, +                    pluginsService.filterPlugins(ScriptPlugin.class));, +                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.watcher.ResourceWatcherService;, +import java.io.IOException;, + * Manages building {@link ScriptService} and {@link ScriptSettings} from a list of plugins., +public class ScriptModule {, +    private final ScriptSettings scriptSettings;, +    private final ScriptService scriptService;, +     * Build from {@linkplain ScriptPlugin}s. Convenient for normal use but not great for tests. See, +     * {@link ScriptModule#ScriptModule(Settings, Environment, ResourceWatcherService, List, List)} for easier use in tests., +    public static ScriptModule create(Settings settings, Environment environment, ResourceWatcherService resourceWatcherService,, +            List<ScriptPlugin> scriptPlugins) {, +        List<ScriptContext.Plugin> plugins = scriptPlugins.stream().map(x -> x.getCustomScriptContexts()).filter(Objects::nonNull), +                .collect(Collectors.toList());, +        return new ScriptModule(settings, environment, resourceWatcherService, scriptEngineServices, plugins);, +    }, +, +    /**, +     * Build {@linkplain ScriptEngineService} and {@linkplain ScriptContext.Plugin}., +     */, +    public ScriptModule(Settings settings, Environment environment, ResourceWatcherService resourceWatcherService,, +            List<ScriptEngineService> scriptEngineServices, List<ScriptContext.Plugin> customScriptContexts) {, +        ScriptContextRegistry scriptContextRegistry = new ScriptContextRegistry(customScriptContexts);, +        ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(scriptEngineServices);, +        scriptSettings = new ScriptSettings(scriptEngineRegistry, scriptContextRegistry);, +        try {, +            scriptService = new ScriptService(settings, environment, resourceWatcherService, scriptEngineRegistry, scriptContextRegistry,, +                    scriptSettings);, +        } catch (IOException e) {, +            throw new RuntimeException("Couldn't setup ScriptService", e);, +        }, +    }, +, +    /**, +     * Extra settings for scripts., +     */, +    public List<Setting<?>> getSettings() {, +        return scriptSettings.getSettings();, +    }, +, +    /**, +     * Service responsible for managing scripts., +     */, +    public ScriptService getScriptService() {, +        return scriptService;, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, threadPool);, +            final ScriptModule scriptModule = ScriptModule.create(settings, environment, resourceWatcherService,, +                    pluginsService.filterPlugins(ScriptPlugin.class));, +                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());, +++ b/core/src/main/java/org/elasticsearch/script/ScriptModule.java, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.watcher.ResourceWatcherService;, +import java.io.IOException;, + * Manages building {@link ScriptService} and {@link ScriptSettings} from a list of plugins., +public class ScriptModule {, +    private final ScriptSettings scriptSettings;, +    private final ScriptService scriptService;, +     * Build from {@linkplain ScriptPlugin}s. Convenient for normal use but not great for tests. See, +     * {@link ScriptModule#ScriptModule(Settings, Environment, ResourceWatcherService, List, List)} for easier use in tests., +    public static ScriptModule create(Settings settings, Environment environment, ResourceWatcherService resourceWatcherService,, +            List<ScriptPlugin> scriptPlugins) {, +        List<ScriptContext.Plugin> plugins = scriptPlugins.stream().map(x -> x.getCustomScriptContexts()).filter(Objects::nonNull), +                .collect(Collectors.toList());, +        return new ScriptModule(settings, environment, resourceWatcherService, scriptEngineServices, plugins);, +    }, +, +    /**, +     * Build {@linkplain ScriptEngineService} and {@linkplain ScriptContext.Plugin}., +     */, +    public ScriptModule(Settings settings, Environment environment, ResourceWatcherService resourceWatcherService,, +            List<ScriptEngineService> scriptEngineServices, List<ScriptContext.Plugin> customScriptContexts) {, +        ScriptContextRegistry scriptContextRegistry = new ScriptContextRegistry(customScriptContexts);, +        ScriptEngineRegistry scriptEngineRegistry = new ScriptEngineRegistry(scriptEngineServices);, +        scriptSettings = new ScriptSettings(scriptEngineRegistry, scriptContextRegistry);, +        try {, +            scriptService = new ScriptService(settings, environment, resourceWatcherService, scriptEngineRegistry, scriptContextRegistry,, +                    scriptSettings);, +        } catch (IOException e) {, +            throw new RuntimeException("Couldn't setup ScriptService", e);, +        }, +    }, +, +    /**, +     * Extra settings for scripts., +     */, +    public List<Setting<?>> getSettings() {, +        return scriptSettings.getSettings();, +    }, +]