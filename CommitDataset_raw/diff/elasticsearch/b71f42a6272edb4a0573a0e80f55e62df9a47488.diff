[+++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, dont be lenient in tests., +# unfortunately, invoke() cannot be banned, because forbidden apis does not support signature polymorphic methods, +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, dont be lenient in tests., +# unfortunately, invoke() cannot be banned, because forbidden apis does not support signature polymorphic methods, +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, dont be lenient in tests., +# unfortunately, invoke() cannot be banned, because forbidden apis does not support signature polymorphic methods, +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public ShardIterator preferNodeActiveInitializingShardsIt(String nodeId) {, +        ArrayList<ShardRouting> ordered = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +            ordered.add(shardRouting);, +            if (nodeId.equals(shardRouting.currentNodeId())) {, +                // switch, its the matching node id, +                ordered.set(ordered.size() - 1, ordered.get(0));, +                ordered.set(0, shardRouting);, +            ordered.addAll(allInitializingShards);, +        return new PlainShardIterator(shardId, ordered);, +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, dont be lenient in tests., +# unfortunately, invoke() cannot be banned, because forbidden apis does not support signature polymorphic methods, +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public ShardIterator preferNodeActiveInitializingShardsIt(String nodeId) {, +        ArrayList<ShardRouting> ordered = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +            ordered.add(shardRouting);, +            if (nodeId.equals(shardRouting.currentNodeId())) {, +                // switch, its the matching node id, +                ordered.set(ordered.size() - 1, ordered.get(0));, +                ordered.set(0, shardRouting);, +            ordered.addAll(allInitializingShards);, +        return new PlainShardIterator(shardId, ordered);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +/**, + *, + */, +, +                case PREFER_NODE:, +                    return indexShard.preferNodeActiveInitializingShardsIt(preference.substring(Preference.PREFER_NODE.type().length() + 1));, +                    return indexShard.preferNodeActiveInitializingShardsIt(localNodeId);, +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, dont be lenient in tests., +# unfortunately, invoke() cannot be banned, because forbidden apis does not support signature polymorphic methods, +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public ShardIterator preferNodeActiveInitializingShardsIt(String nodeId) {, +        ArrayList<ShardRouting> ordered = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +            ordered.add(shardRouting);, +            if (nodeId.equals(shardRouting.currentNodeId())) {, +                // switch, its the matching node id, +                ordered.set(ordered.size() - 1, ordered.get(0));, +                ordered.set(0, shardRouting);, +            ordered.addAll(allInitializingShards);, +        return new PlainShardIterator(shardId, ordered);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +/**, + *, + */, +, +                case PREFER_NODE:, +                    return indexShard.preferNodeActiveInitializingShardsIt(preference.substring(Preference.PREFER_NODE.type().length() + 1));, +                    return indexShard.preferNodeActiveInitializingShardsIt(localNodeId);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/Preference.java, +     * Route to preferred node, if possible, +    PREFER_NODE("_prefer_node"),, +            case "_prefer_node":, +                return PREFER_NODE;, +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, dont be lenient in tests., +# unfortunately, invoke() cannot be banned, because forbidden apis does not support signature polymorphic methods, +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public ShardIterator preferNodeActiveInitializingShardsIt(String nodeId) {, +        ArrayList<ShardRouting> ordered = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +            ordered.add(shardRouting);, +            if (nodeId.equals(shardRouting.currentNodeId())) {, +                // switch, its the matching node id, +                ordered.set(ordered.size() - 1, ordered.get(0));, +                ordered.set(0, shardRouting);]