[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +        private final Definition definition;, +        Loader(ClassLoader parent, Definition definition) {, +, +            this.definition = definition;, +        }, +, +        /**, +         * Will check to see if the {@link Class} has already been loaded when, +         * the {@link Definition} was initially created.  Allows for {@link Whitelist}ed, +         * classes to be loaded from other modules/plugins without a direct relationship, +         * to the module's/plugin's {@link ClassLoader}., +         */, +        @Override, +        public Class<?> findClass(String name) throws ClassNotFoundException {, +            Class<?> found = definition.getClassFromBinaryName(name);, +, +            return found != null ? found : super.findClass(name);, +     * Return a new {@link Loader} for a script using the, +     * {@link Compiler}'s specified {@link Definition}., +     */, +    public Loader createLoader(ClassLoader parent) {, +        return new Loader(parent, definition);, +    }, +, +    /**, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +        private final Definition definition;, +        Loader(ClassLoader parent, Definition definition) {, +, +            this.definition = definition;, +        }, +, +        /**, +         * Will check to see if the {@link Class} has already been loaded when, +         * the {@link Definition} was initially created.  Allows for {@link Whitelist}ed, +         * classes to be loaded from other modules/plugins without a direct relationship, +         * to the module's/plugin's {@link ClassLoader}., +         */, +        @Override, +        public Class<?> findClass(String name) throws ClassNotFoundException {, +            Class<?> found = definition.getClassFromBinaryName(name);, +, +            return found != null ? found : super.findClass(name);, +     * Return a new {@link Loader} for a script using the, +     * {@link Compiler}'s specified {@link Definition}., +     */, +    public Loader createLoader(ClassLoader parent) {, +        return new Loader(parent, definition);, +    }, +, +    /**, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +    public static final String[] DEFINITION_FILES = new String[] {, +    public Class<?> getClassFromBinaryName(String name) {, +        Struct struct = structsMap.get(name.replace('$', '.'));, +, +        return struct == null ? null : struct.clazz;, +    }, +, +    public Definition(List<Whitelist> whitelists) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +        private final Definition definition;, +        Loader(ClassLoader parent, Definition definition) {, +, +            this.definition = definition;, +        }, +, +        /**, +         * Will check to see if the {@link Class} has already been loaded when, +         * the {@link Definition} was initially created.  Allows for {@link Whitelist}ed, +         * classes to be loaded from other modules/plugins without a direct relationship, +         * to the module's/plugin's {@link ClassLoader}., +         */, +        @Override, +        public Class<?> findClass(String name) throws ClassNotFoundException {, +            Class<?> found = definition.getClassFromBinaryName(name);, +, +            return found != null ? found : super.findClass(name);, +     * Return a new {@link Loader} for a script using the, +     * {@link Compiler}'s specified {@link Definition}., +     */, +    public Loader createLoader(ClassLoader parent) {, +        return new Loader(parent, definition);, +    }, +, +    /**, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +    public static final String[] DEFINITION_FILES = new String[] {, +    public Class<?> getClassFromBinaryName(String name) {, +        Struct struct = structsMap.get(name.replace('$', '.'));, +, +        return struct == null ? null : struct.clazz;, +    }, +, +    public Definition(List<Whitelist> whitelists) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessPlugin.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +        private final Definition definition;, +        Loader(ClassLoader parent, Definition definition) {]