[+++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/Realms.java, +    public static boolean isRealmTypeAvailable(AllowedRealmType enabledRealmType, String type) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/Realms.java, +    public static boolean isRealmTypeAvailable(AllowedRealmType enabledRealmType, String type) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/SecurityBaseRestHandler.java, +import org.elasticsearch.xpack.core.XPackField;, +        final String failedFeature = checkLicensedFeature(request);, +        if (failedFeature == null) {, +            return channel -> channel.sendResponse(new BytesRestResponse(channel, LicenseUtils.newComplianceException(failedFeature)));, +     * Check whether the given request is allowed within the current license state, and return the name of any unlicensed feature., +     * By default this returns {@link org.elasticsearch.xpack.core.XPackField#SECURITY} if the license state does not, +     * {@link XPackLicenseState#isAuthAllowed() allow authentication and authorization}., +     * Sub-classes can override this method if they have additional licensing requirements., +     * @return {@code null} if all required features are licensed, otherwise the name of the most significant unlicensed feature., +     */, +    protected String checkLicensedFeature(RestRequest request) {, +        return licenseState.isAuthAllowed() ? null : XPackField.SECURITY;, +    }, +, +, +    /**, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/Realms.java, +    public static boolean isRealmTypeAvailable(AllowedRealmType enabledRealmType, String type) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/SecurityBaseRestHandler.java, +import org.elasticsearch.xpack.core.XPackField;, +        final String failedFeature = checkLicensedFeature(request);, +        if (failedFeature == null) {, +            return channel -> channel.sendResponse(new BytesRestResponse(channel, LicenseUtils.newComplianceException(failedFeature)));, +     * Check whether the given request is allowed within the current license state, and return the name of any unlicensed feature., +     * By default this returns {@link org.elasticsearch.xpack.core.XPackField#SECURITY} if the license state does not, +     * {@link XPackLicenseState#isAuthAllowed() allow authentication and authorization}., +     * Sub-classes can override this method if they have additional licensing requirements., +     * @return {@code null} if all required features are licensed, otherwise the name of the most significant unlicensed feature., +     */, +    protected String checkLicensedFeature(RestRequest request) {, +        return licenseState.isAuthAllowed() ? null : XPackField.SECURITY;, +    }, +, +, +    /**, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlAuthenticateAction.java, +public class RestSamlAuthenticateAction extends SamlBaseRestHandler implements RestHandler {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/Realms.java, +    public static boolean isRealmTypeAvailable(AllowedRealmType enabledRealmType, String type) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/SecurityBaseRestHandler.java, +import org.elasticsearch.xpack.core.XPackField;, +        final String failedFeature = checkLicensedFeature(request);, +        if (failedFeature == null) {, +            return channel -> channel.sendResponse(new BytesRestResponse(channel, LicenseUtils.newComplianceException(failedFeature)));, +     * Check whether the given request is allowed within the current license state, and return the name of any unlicensed feature., +     * By default this returns {@link org.elasticsearch.xpack.core.XPackField#SECURITY} if the license state does not, +     * {@link XPackLicenseState#isAuthAllowed() allow authentication and authorization}., +     * Sub-classes can override this method if they have additional licensing requirements., +     * @return {@code null} if all required features are licensed, otherwise the name of the most significant unlicensed feature., +     */, +    protected String checkLicensedFeature(RestRequest request) {, +        return licenseState.isAuthAllowed() ? null : XPackField.SECURITY;, +    }, +, +, +    /**, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlAuthenticateAction.java, +public class RestSamlAuthenticateAction extends SamlBaseRestHandler implements RestHandler {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlInvalidateSessionAction.java, +public class RestSamlInvalidateSessionAction extends SamlBaseRestHandler {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/Realms.java, +    public static boolean isRealmTypeAvailable(AllowedRealmType enabledRealmType, String type) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/SecurityBaseRestHandler.java, +import org.elasticsearch.xpack.core.XPackField;, +        final String failedFeature = checkLicensedFeature(request);, +        if (failedFeature == null) {, +            return channel -> channel.sendResponse(new BytesRestResponse(channel, LicenseUtils.newComplianceException(failedFeature)));, +     * Check whether the given request is allowed within the current license state, and return the name of any unlicensed feature., +     * By default this returns {@link org.elasticsearch.xpack.core.XPackField#SECURITY} if the license state does not, +     * {@link XPackLicenseState#isAuthAllowed() allow authentication and authorization}., +     * Sub-classes can override this method if they have additional licensing requirements., +     * @return {@code null} if all required features are licensed, otherwise the name of the most significant unlicensed feature., +     */, +    protected String checkLicensedFeature(RestRequest request) {, +        return licenseState.isAuthAllowed() ? null : XPackField.SECURITY;, +    }, +, +, +    /**, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlAuthenticateAction.java, +public class RestSamlAuthenticateAction extends SamlBaseRestHandler implements RestHandler {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlInvalidateSessionAction.java, +public class RestSamlInvalidateSessionAction extends SamlBaseRestHandler {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlLogoutAction.java, +public class RestSamlLogoutAction extends SamlBaseRestHandler {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/Realms.java, +    public static boolean isRealmTypeAvailable(AllowedRealmType enabledRealmType, String type) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/SecurityBaseRestHandler.java, +import org.elasticsearch.xpack.core.XPackField;, +        final String failedFeature = checkLicensedFeature(request);, +        if (failedFeature == null) {, +            return channel -> channel.sendResponse(new BytesRestResponse(channel, LicenseUtils.newComplianceException(failedFeature)));, +     * Check whether the given request is allowed within the current license state, and return the name of any unlicensed feature., +     * By default this returns {@link org.elasticsearch.xpack.core.XPackField#SECURITY} if the license state does not, +     * {@link XPackLicenseState#isAuthAllowed() allow authentication and authorization}.]