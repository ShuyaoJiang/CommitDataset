[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/TransportLivenessAction.java, +        transportService.registerRequestHandler(NAME, LivenessRequest::new, ThreadPool.Names.SAME, this);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/TransportLivenessAction.java, +        transportService.registerRequestHandler(NAME, LivenessRequest::new, ThreadPool.Names.SAME, this);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.joda.time.ReadableDateTime;, +        public ReadableDateTime getDate() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/TransportLivenessAction.java, +        transportService.registerRequestHandler(NAME, LivenessRequest::new, ThreadPool.Names.SAME, this);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.joda.time.ReadableDateTime;, +        public ReadableDateTime getDate() {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.common.unit.Fuzziness;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData.NumericType;, +import org.elasticsearch.index.fielddata.plain.DocValuesIndexFieldData;, +            return new DocValuesIndexFieldData.Builder().numericType(NumericType.LONG);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/TransportLivenessAction.java, +        transportService.registerRequestHandler(NAME, LivenessRequest::new, ThreadPool.Names.SAME, this);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.joda.time.ReadableDateTime;, +        public ReadableDateTime getDate() {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.common.unit.Fuzziness;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData.NumericType;, +import org.elasticsearch.index.fielddata.plain.DocValuesIndexFieldData;, +            return new DocValuesIndexFieldData.Builder().numericType(NumericType.LONG);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/TransportLivenessAction.java, +        transportService.registerRequestHandler(NAME, LivenessRequest::new, ThreadPool.Names.SAME, this);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.joda.time.ReadableDateTime;, +        public ReadableDateTime getDate() {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.common.unit.Fuzziness;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData.NumericType;, +import org.elasticsearch.index.fielddata.plain.DocValuesIndexFieldData;, +            return new DocValuesIndexFieldData.Builder().numericType(NumericType.LONG);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ClassPermission.java, + *   <li>{@link org.joda.time.ReadableDateTime}</li>, + *   <li>{@link org.joda.time.ReadableInstant}</li>, +            org.joda.time.Instant.class.getName(),, +            org.joda.time.ReadableDateTime.class.getName(),, +            org.joda.time.ReadableInstant.class.getName(), +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/TransportLivenessAction.java, +        transportService.registerRequestHandler(NAME, LivenessRequest::new, ThreadPool.Names.SAME, this);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.joda.time.ReadableDateTime;, +        public ReadableDateTime getDate() {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.common.unit.Fuzziness;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData.NumericType;, +import org.elasticsearch.index.fielddata.plain.DocValuesIndexFieldData;, +            return new DocValuesIndexFieldData.Builder().numericType(NumericType.LONG);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ClassPermission.java, + *   <li>{@link org.joda.time.ReadableDateTime}</li>, + *   <li>{@link org.joda.time.ReadableInstant}</li>, +            org.joda.time.Instant.class.getName(),, +            org.joda.time.ReadableDateTime.class.getName(),, +            org.joda.time.ReadableInstant.class.getName(), +++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +import org.elasticsearch.index.mapper.ip.LegacyIpFieldMapper;, +            return LegacyIpFieldMapper.longToIp(value);, +            return format((long) value);, +            // TODO: throw exception in 6.0, +            return LegacyIpFieldMapper.ipToLong(value);, +            return parseLong(value, roundUp, now);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/TransportLivenessAction.java, +        transportService.registerRequestHandler(NAME, LivenessRequest::new, ThreadPool.Names.SAME, this);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.joda.time.ReadableDateTime;, +        public ReadableDateTime getDate() {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +import org.elasticsearch.common.unit.Fuzziness;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData.NumericType;, +import org.elasticsearch.index.fielddata.plain.DocValuesIndexFieldData;, +            return new DocValuesIndexFieldData.Builder().numericType(NumericType.LONG);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/script/ClassPermission.java, + *   <li>{@link org.joda.time.ReadableDateTime}</li>, + *   <li>{@link org.joda.time.ReadableInstant}</li>, +            org.joda.time.Instant.class.getName(),, +            org.joda.time.ReadableDateTime.class.getName(),, +            org.joda.time.ReadableInstant.class.getName(), +++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +import org.elasticsearch.index.mapper.ip.LegacyIpFieldMapper;, +            return LegacyIpFieldMapper.longToIp(value);, +            return format((long) value);, +            // TODO: throw exception in 6.0, +            return LegacyIpFieldMapper.ipToLong(value);, +            return parseLong(value, roundUp, now);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/BinaryRangeAggregator.java, +        throw new IllegalArgumentException("binary range aggregation expects a values source that supports ordinals");, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/TransportLivenessAction.java, +        transportService.registerRequestHandler(NAME, LivenessRequest::new, ThreadPool.Names.SAME, this);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.joda.time.ReadableDateTime;, +        public ReadableDateTime getDate() {]