[+++ b/core/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +        ensureCapacity(count + 1L);, +        ensureCapacity(((long) count) + length);, +    public void seek(long position) {, +        ensureCapacity(position);, +        seek(((long) count) + length);, +    private void ensureCapacity(long offset) {, +        if (offset > Integer.MAX_VALUE) {, +            throw new IllegalArgumentException(getClass().getSimpleName() + " cannot hold more than 2GB of data");, +        }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +        ensureCapacity(count + 1L);, +        ensureCapacity(((long) count) + length);, +    public void seek(long position) {, +        ensureCapacity(position);, +        seek(((long) count) + length);, +    private void ensureCapacity(long offset) {, +        if (offset > Integer.MAX_VALUE) {, +            throw new IllegalArgumentException(getClass().getSimpleName() + " cannot hold more than 2GB of data");, +        }, +++ b/core/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java, +        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> out.seek(Integer.MAX_VALUE + 1L));, +        assertEquals("BytesStreamOutput cannot hold more than 2GB of data", iae.getMessage());, +, +        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> out.skip(Integer.MAX_VALUE - 50));, +        assertEquals("BytesStreamOutput cannot hold more than 2GB of data", iae.getMessage());, +]