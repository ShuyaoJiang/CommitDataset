[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/distribution/build.gradle, +       'deb': 'source /etc/default/elasticsearch',, +       'rpm': 'source /etc/sysconfig/elasticsearch',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/distribution/build.gradle, +       'deb': 'source /etc/default/elasticsearch',, +       'rpm': 'source /etc/sysconfig/elasticsearch',, +++ b/distribution/deb/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +integTest.enabled = false, +licenseHeaders.enabled = false, +, +// task that sanity checks if the Deb archive can be extracted, +task checkDeb(type: LoggedExec) {, +  onlyIf { new File('/usr/bin/dpkg-deb').exists() || new File('/usr/local/bin/dpkg-deb').exists() }, +  final File debExtracted = new File("${buildDir}", 'deb-extracted'), +  commandLine 'dpkg-deb', '-x', "${buildDir}/distributions/elasticsearch-${project.version}.deb", debExtracted, +  doFirst {, +    debExtracted.deleteDir(), +}, +, +checkDeb.dependsOn buildDeb, +check.dependsOn checkDeb, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/distribution/build.gradle, +       'deb': 'source /etc/default/elasticsearch',, +       'rpm': 'source /etc/sysconfig/elasticsearch',, +++ b/distribution/deb/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +integTest.enabled = false, +licenseHeaders.enabled = false, +, +// task that sanity checks if the Deb archive can be extracted, +task checkDeb(type: LoggedExec) {, +  onlyIf { new File('/usr/bin/dpkg-deb').exists() || new File('/usr/local/bin/dpkg-deb').exists() }, +  final File debExtracted = new File("${buildDir}", 'deb-extracted'), +  commandLine 'dpkg-deb', '-x', "${buildDir}/distributions/elasticsearch-${project.version}.deb", debExtracted, +  doFirst {, +    debExtracted.deleteDir(), +}, +, +checkDeb.dependsOn buildDeb, +check.dependsOn checkDeb, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/distribution/build.gradle, +       'deb': 'source /etc/default/elasticsearch',, +       'rpm': 'source /etc/sysconfig/elasticsearch',, +++ b/distribution/deb/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +integTest.enabled = false, +licenseHeaders.enabled = false, +, +// task that sanity checks if the Deb archive can be extracted, +task checkDeb(type: LoggedExec) {, +  onlyIf { new File('/usr/bin/dpkg-deb').exists() || new File('/usr/local/bin/dpkg-deb').exists() }, +  final File debExtracted = new File("${buildDir}", 'deb-extracted'), +  commandLine 'dpkg-deb', '-x', "${buildDir}/distributions/elasticsearch-${project.version}.deb", debExtracted, +  doFirst {, +    debExtracted.deleteDir(), +}, +, +checkDeb.dependsOn buildDeb, +check.dependsOn checkDeb, +++ /dev/null, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/distribution/build.gradle, +       'deb': 'source /etc/default/elasticsearch',, +       'rpm': 'source /etc/sysconfig/elasticsearch',, +++ b/distribution/deb/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +integTest.enabled = false, +licenseHeaders.enabled = false, +, +// task that sanity checks if the Deb archive can be extracted, +task checkDeb(type: LoggedExec) {, +  onlyIf { new File('/usr/bin/dpkg-deb').exists() || new File('/usr/local/bin/dpkg-deb').exists() }, +  final File debExtracted = new File("${buildDir}", 'deb-extracted'), +  commandLine 'dpkg-deb', '-x', "${buildDir}/distributions/elasticsearch-${project.version}.deb", debExtracted, +  doFirst {, +    debExtracted.deleteDir(), +}, +, +checkDeb.dependsOn buildDeb, +check.dependsOn checkDeb, +++ /dev/null, +++ /dev/null, +++ b/distribution/rpm/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +, +integTest.enabled = false, +licenseHeaders.enabled = false, +]