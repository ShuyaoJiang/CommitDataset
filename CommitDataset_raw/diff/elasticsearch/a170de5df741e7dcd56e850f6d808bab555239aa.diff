[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.children.ChildrenAggregatorBuilder;, +        registerAggregation(ChildrenAggregatorBuilder.PROTOTYPE::readFrom, ChildrenAggregatorBuilder::parse,, +                ChildrenAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.children.ChildrenAggregatorBuilder;, +        registerAggregation(ChildrenAggregatorBuilder.PROTOTYPE::readFrom, ChildrenAggregatorBuilder::parse,, +                ChildrenAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +    @FunctionalInterface, +        default String type() {, +            throw new UnsupportedOperationException(); // NORELEASE remove before 5.0.0GA, +        }, +        default AggregatorBuilder<?> getFactoryPrototypes() {, +            throw new UnsupportedOperationException(); // NORELEASE remove before 5.0.0GA, +        }, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.children.ChildrenAggregatorBuilder;, +        registerAggregation(ChildrenAggregatorBuilder.PROTOTYPE::readFrom, ChildrenAggregatorBuilder::parse,, +                ChildrenAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +    @FunctionalInterface, +        default String type() {, +            throw new UnsupportedOperationException(); // NORELEASE remove before 5.0.0GA, +        }, +        default AggregatorBuilder<?> getFactoryPrototypes() {, +            throw new UnsupportedOperationException(); // NORELEASE remove before 5.0.0GA, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenAggregatorBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.search.aggregations.AggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSource.Bytes.ParentChild;, +    public static final String NAME = InternalChildren.TYPE.name();, +    public static final ParseField AGGREGATION_NAME_FIELD = new ParseField(NAME);, +    public static final ChildrenAggregatorBuilder PROTOTYPE = new ChildrenAggregatorBuilder("", "");, +    public static ChildrenAggregatorBuilder parse(String aggregationName, XContentParser parser,, +            QueryParseContext context) throws IOException {, +        String childType = null;, +, +        XContentParser.Token token;, +        String currentFieldName = null;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token == XContentParser.Token.VALUE_STRING) {, +                if ("type".equals(currentFieldName)) {, +                    childType = parser.text();, +                } else {, +                    throw new ParsingException(parser.getTokenLocation(),, +                            "Unknown key for a " + token + " in [" + aggregationName + "]: [" + currentFieldName + "].");, +                }, +            } else {, +                throw new ParsingException(parser.getTokenLocation(), "Unexpected token " + token + " in [" + aggregationName + "].");, +            }, +        }, +, +        if (childType == null) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    "Missing [child_type] field for children aggregation [" + aggregationName + "]");, +        }, +, +, +        return new ChildrenAggregatorBuilder(aggregationName, childType);, +    }, +, +]