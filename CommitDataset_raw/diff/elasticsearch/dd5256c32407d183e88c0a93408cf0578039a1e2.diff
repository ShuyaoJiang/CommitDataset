[+++ b/core/src/main/java/org/elasticsearch/transport/ConnectionProfile.java, +        Collections.singletonList(new ConnectionTypeHandle(0, 1, EnumSet.of(, +            TransportRequestOptions.Type.STATE))), 1);, +            handles.add(new ConnectionTypeHandle(offset, numConnections, EnumSet.copyOf(Arrays.asList(types))));, +     * Returns the number of connections per type for this profile. This might return a count that is shared with other types such, +     * that the sum of all connections per type might be higher than {@link #getNumConnections()}. For instance if, +     * {@link org.elasticsearch.transport.TransportRequestOptions.Type#BULK} shares connections with, +     * {@link org.elasticsearch.transport.TransportRequestOptions.Type#REG} they will return both the same number of connections from, +     * this method but the connections are not distinct., +     */, +    public int getNumConnectionsPerType(TransportRequestOptions.Type type) {, +        for (ConnectionTypeHandle handle : handles) {, +            if (handle.getTypes().contains(type)) {, +                return handle.length;, +            }, +        }, +        throw new AssertionError("no handle found for type: "  + type);, +    }, +, +    /**, +        private final Set<TransportRequestOptions.Type> types;, +        private ConnectionTypeHandle(int offset, int length, Set<TransportRequestOptions.Type> types) {, +            if (length == 0) {, +                throw new IllegalStateException("can't select channel size is 0");, +            }, +        Set<TransportRequestOptions.Type> getTypes() {, +++ b/core/src/main/java/org/elasticsearch/transport/ConnectionProfile.java, +        Collections.singletonList(new ConnectionTypeHandle(0, 1, EnumSet.of(, +            TransportRequestOptions.Type.STATE))), 1);, +            handles.add(new ConnectionTypeHandle(offset, numConnections, EnumSet.copyOf(Arrays.asList(types))));, +     * Returns the number of connections per type for this profile. This might return a count that is shared with other types such, +     * that the sum of all connections per type might be higher than {@link #getNumConnections()}. For instance if, +     * {@link org.elasticsearch.transport.TransportRequestOptions.Type#BULK} shares connections with, +     * {@link org.elasticsearch.transport.TransportRequestOptions.Type#REG} they will return both the same number of connections from, +     * this method but the connections are not distinct., +     */, +    public int getNumConnectionsPerType(TransportRequestOptions.Type type) {, +        for (ConnectionTypeHandle handle : handles) {, +            if (handle.getTypes().contains(type)) {, +                return handle.length;, +            }, +        }, +        throw new AssertionError("no handle found for type: "  + type);, +    }, +, +    /**, +        private final Set<TransportRequestOptions.Type> types;, +        private ConnectionTypeHandle(int offset, int length, Set<TransportRequestOptions.Type> types) {, +            if (length == 0) {, +                throw new IllegalStateException("can't select channel size is 0");, +            }, +        Set<TransportRequestOptions.Type> getTypes() {, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +import java.util.EnumSet;, +    protected final ConnectionProfile defaultConnectionProfile;, +, +        defaultConnectionProfile = buildDefaultConnectionProfile(settings);, +    }, +, +    static ConnectionProfile buildDefaultConnectionProfile(Settings settings) {, +        int connectionsPerNodeRecovery = CONNECTIONS_PER_NODE_RECOVERY.get(settings);, +        int connectionsPerNodeBulk = CONNECTIONS_PER_NODE_BULK.get(settings);, +        int connectionsPerNodeReg = CONNECTIONS_PER_NODE_REG.get(settings);, +        int connectionsPerNodeState = CONNECTIONS_PER_NODE_STATE.get(settings);, +        int connectionsPerNodePing = CONNECTIONS_PER_NODE_PING.get(settings);, +        // if we are not master eligible we don't need a dedicated channel to publish the state, +        builder.addConnections(DiscoveryNode.isMasterNode(settings) ? connectionsPerNodeState : 0, TransportRequestOptions.Type.STATE);, +        // if we are not a data-node we don't need any dedicated channels for recovery, +        builder.addConnections(DiscoveryNode.isDataNode(settings) ? connectionsPerNodeRecovery : 0, TransportRequestOptions.Type.RECOVERY);, +        return builder.build();, +++ b/core/src/main/java/org/elasticsearch/transport/ConnectionProfile.java, +        Collections.singletonList(new ConnectionTypeHandle(0, 1, EnumSet.of(, +            TransportRequestOptions.Type.STATE))), 1);, +            handles.add(new ConnectionTypeHandle(offset, numConnections, EnumSet.copyOf(Arrays.asList(types))));, +     * Returns the number of connections per type for this profile. This might return a count that is shared with other types such, +     * that the sum of all connections per type might be higher than {@link #getNumConnections()}. For instance if, +     * {@link org.elasticsearch.transport.TransportRequestOptions.Type#BULK} shares connections with, +     * {@link org.elasticsearch.transport.TransportRequestOptions.Type#REG} they will return both the same number of connections from, +     * this method but the connections are not distinct., +     */, +    public int getNumConnectionsPerType(TransportRequestOptions.Type type) {, +        for (ConnectionTypeHandle handle : handles) {, +            if (handle.getTypes().contains(type)) {, +                return handle.length;, +            }, +        }, +        throw new AssertionError("no handle found for type: "  + type);, +    }, +, +    /**, +        private final Set<TransportRequestOptions.Type> types;, +        private ConnectionTypeHandle(int offset, int length, Set<TransportRequestOptions.Type> types) {, +            if (length == 0) {, +                throw new IllegalStateException("can't select channel size is 0");, +            }, +        Set<TransportRequestOptions.Type> getTypes() {, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +import java.util.EnumSet;, +    protected final ConnectionProfile defaultConnectionProfile;, +]