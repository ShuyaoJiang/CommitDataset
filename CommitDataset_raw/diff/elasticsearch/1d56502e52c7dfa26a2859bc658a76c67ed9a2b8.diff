[+++ b/pom.xml, +        <lucene.maven.version>5.1.0-snapshot-1671277</lucene.maven.version>, +            <url>https://download.elastic.co/lucenesnapshots/1671277</url>, +++ b/pom.xml, +        <lucene.maven.version>5.1.0-snapshot-1671277</lucene.maven.version>, +            <url>https://download.elastic.co/lucenesnapshots/1671277</url>, +++ b/src/main/java/org/apache/lucene/search/postingshighlight/XPostingsHighlighter.java, +            if (!t.hasOffsets()) {, +                // no offsets available, +                throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");, +            }, +                assert de != null;, +            assert start >= 0;, +++ b/pom.xml, +        <lucene.maven.version>5.1.0-snapshot-1671277</lucene.maven.version>, +            <url>https://download.elastic.co/lucenesnapshots/1671277</url>, +++ b/src/main/java/org/apache/lucene/search/postingshighlight/XPostingsHighlighter.java, +            if (!t.hasOffsets()) {, +                // no offsets available, +                throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");, +            }, +                assert de != null;, +            assert start >= 0;, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +                        bloomFilter = bloomFilterFactory.createFilter(state.segmentInfo.maxDoc());, +++ b/pom.xml, +        <lucene.maven.version>5.1.0-snapshot-1671277</lucene.maven.version>, +            <url>https://download.elastic.co/lucenesnapshots/1671277</url>, +++ b/src/main/java/org/apache/lucene/search/postingshighlight/XPostingsHighlighter.java, +            if (!t.hasOffsets()) {, +                // no offsets available, +                throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");, +            }, +                assert de != null;, +            assert start >= 0;, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +                        bloomFilter = bloomFilterFactory.createFilter(state.segmentInfo.maxDoc());, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +                    segment.docCount = info.info.maxDoc();, +++ b/pom.xml, +        <lucene.maven.version>5.1.0-snapshot-1671277</lucene.maven.version>, +            <url>https://download.elastic.co/lucenesnapshots/1671277</url>, +++ b/src/main/java/org/apache/lucene/search/postingshighlight/XPostingsHighlighter.java, +            if (!t.hasOffsets()) {, +                // no offsets available, +                throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");, +            }, +                assert de != null;, +            assert start >= 0;, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +                        bloomFilter = bloomFilterFactory.createFilter(state.segmentInfo.maxDoc());, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +                    segment.docCount = info.info.maxDoc();, +++ b/src/main/java/org/elasticsearch/index/merge/policy/VersionFieldUpgrader.java, +                    assert terms.hasPayloads() : "field has payloads";, +++ b/pom.xml, +        <lucene.maven.version>5.1.0-snapshot-1671277</lucene.maven.version>, +            <url>https://download.elastic.co/lucenesnapshots/1671277</url>, +++ b/src/main/java/org/apache/lucene/search/postingshighlight/XPostingsHighlighter.java, +            if (!t.hasOffsets()) {, +                // no offsets available, +                throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");, +            }, +                assert de != null;, +            assert start >= 0;, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +                        bloomFilter = bloomFilterFactory.createFilter(state.segmentInfo.maxDoc());, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +                    segment.docCount = info.info.maxDoc();, +++ b/src/main/java/org/elasticsearch/index/merge/policy/VersionFieldUpgrader.java, +                    assert terms.hasPayloads() : "field has payloads";, +++ b/src/main/java/org/elasticsearch/search/lookup/IndexFieldTerm.java, +            postings = getPostings(convertToLuceneFlags(flags), reader);, +                // no term or field for this segment, fake out the postings..., +            throw new ElasticsearchException("Unable to get postings for field " + fieldName + " and term " + term, e);, +    private int convertToLuceneFlags(int flags) {, +        int lucenePositionsFlags = PostingsEnum.NONE;, +        lucenePositionsFlags |= (flags & IndexLookup.FLAG_FREQUENCIES) > 0 ? PostingsEnum.FREQS : 0x0;, +        lucenePositionsFlags |= (flags & IndexLookup.FLAG_POSITIONS) > 0 ? PostingsEnum.POSITIONS : 0x0;, +++ b/pom.xml, +        <lucene.maven.version>5.1.0-snapshot-1671277</lucene.maven.version>, +            <url>https://download.elastic.co/lucenesnapshots/1671277</url>, +++ b/src/main/java/org/apache/lucene/search/postingshighlight/XPostingsHighlighter.java, +            if (!t.hasOffsets()) {, +                // no offsets available, +                throw new IllegalArgumentException("field '" + field + "' was indexed without offsets, cannot highlight");, +            }, +                assert de != null;, +            assert start >= 0;, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +                        bloomFilter = bloomFilterFactory.createFilter(state.segmentInfo.maxDoc());, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +                    segment.docCount = info.info.maxDoc();, +++ b/src/main/java/org/elasticsearch/index/merge/policy/VersionFieldUpgrader.java, +                    assert terms.hasPayloads() : "field has payloads";, +++ b/src/main/java/org/elasticsearch/search/lookup/IndexFieldTerm.java, +            postings = getPostings(convertToLuceneFlags(flags), reader);, +                // no term or field for this segment, fake out the postings..., +            throw new ElasticsearchException("Unable to get postings for field " + fieldName + " and term " + term, e);, +    private int convertToLuceneFlags(int flags) {]