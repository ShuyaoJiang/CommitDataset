[+++ b/core/src/main/java/org/elasticsearch/tasks/CancellableTask.java, +        onCancelled();, +, +    /**, +     * Called after the task is cancelled so that it can take any actions that it has to take., +     */, +    protected void onCancelled() {, +    }, +++ b/core/src/main/java/org/elasticsearch/tasks/CancellableTask.java, +        onCancelled();, +, +    /**, +     * Called after the task is cancelled so that it can take any actions that it has to take., +     */, +    protected void onCancelled() {, +    }, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, + * Abstract base for scrolling across a search and executing bulk actions on all results. All package private methods are package private so, + * their tests can use them. Most methods run in the listener thread pool because the are meant to be fast and don't expect to block., +        AbstractRunnable prepareBulkRequestRunnable = new AbstractRunnable() {, +                prepareBulkRequest(searchResponse);, +            }, +, +            @Override, +            public void onFailure(Throwable t) {, +                finishHim(t);, +            }, +        };, +        prepareBulkRequestRunnable = (AbstractRunnable) threadPool.getThreadContext().preserveContext(prepareBulkRequestRunnable);, +        task.delayPrepareBulkRequest(threadPool, delay, prepareBulkRequestRunnable);, +    }, +, +    /**, +     * Prepare the bulk request. Called on the generic thread pool after some preflight checks have been done one the SearchResponse and any, +     * delay has been slept. Uses the generic thread pool because reindex is rare enough not to need its own thread pool and because the, +     * thread may be blocked by the user script., +     */, +    void prepareBulkRequest(SearchResponse searchResponse) {, +        if (task.getRequestsPerSecond() == 0) {, +        float targetBatchTimeInSeconds = lastBatchSize / task.getRequestsPerSecond();, +++ b/core/src/main/java/org/elasticsearch/tasks/CancellableTask.java, +        onCancelled();, +, +    /**, +     * Called after the task is cancelled so that it can take any actions that it has to take., +     */, +    protected void onCancelled() {, +    }, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, + * Abstract base for scrolling across a search and executing bulk actions on all results. All package private methods are package private so, + * their tests can use them. Most methods run in the listener thread pool because the are meant to be fast and don't expect to block., +        AbstractRunnable prepareBulkRequestRunnable = new AbstractRunnable() {, +                prepareBulkRequest(searchResponse);, +            }, +, +            @Override, +            public void onFailure(Throwable t) {, +                finishHim(t);, +            }, +        };, +        prepareBulkRequestRunnable = (AbstractRunnable) threadPool.getThreadContext().preserveContext(prepareBulkRequestRunnable);, +        task.delayPrepareBulkRequest(threadPool, delay, prepareBulkRequestRunnable);, +    }, +, +    /**, +     * Prepare the bulk request. Called on the generic thread pool after some preflight checks have been done one the SearchResponse and any, +     * delay has been slept. Uses the generic thread pool because reindex is rare enough not to need its own thread pool and because the, +     * thread may be blocked by the user script., +     */, +    void prepareBulkRequest(SearchResponse searchResponse) {, +        if (task.getRequestsPerSecond() == 0) {, +        float targetBatchTimeInSeconds = lastBatchSize / task.getRequestsPerSecond();, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBaseReindexRestHandler.java, +, +    /**, +     * @return requests_per_second from the request as a float if it was on the request, null otherwise, +     */, +    public static Float parseRequestsPerSecond(RestRequest request) {, +        String requestsPerSecond = request.param("requests_per_second");, +        if (requestsPerSecond == null) {, +            return null;, +        }, +        if ("".equals(requestsPerSecond)) {, +            throw new IllegalArgumentException("requests_per_second cannot be an empty string");, +        }, +        if ("unlimited".equals(requestsPerSecond)) {, +            return 0f;, +        }, +        return Float.parseFloat(requestsPerSecond);, +    }, +, +        Float requestsPerSecond = parseRequestsPerSecond(request);, +        if (requestsPerSecond != null) {, +            internalRequest.setRequestsPerSecond(requestsPerSecond);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/tasks/CancellableTask.java, +        onCancelled();, +, +    /**]