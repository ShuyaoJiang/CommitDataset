[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +import org.elasticsearch.repositories.RepositoryData;, +            final RepositoryData repositoryData  = snapshotsService.getRepositoryData(repository);, +                for (SnapshotId snapshotId : repositoryData.getAllSnapshotIds()) {, +            snapshotInfoBuilder.addAll(snapshotsService.snapshots(, +                repository, new ArrayList<>(toResolve), repositoryData.getIncompatibleSnapshotIds(), request.ignoreUnavailable()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +import org.elasticsearch.repositories.RepositoryData;, +            final RepositoryData repositoryData  = snapshotsService.getRepositoryData(repository);, +                for (SnapshotId snapshotId : repositoryData.getAllSnapshotIds()) {, +            snapshotInfoBuilder.addAll(snapshotsService.snapshots(, +                repository, new ArrayList<>(toResolve), repositoryData.getIncompatibleSnapshotIds(), request.ignoreUnavailable()));, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +import org.elasticsearch.repositories.RepositoryData;, +            final RepositoryData repositoryData  = snapshotsService.getRepositoryData(repository);, +                for (SnapshotId snapshotId : repositoryData.getAllSnapshotIds()) {, +            snapshotInfoBuilder.addAll(snapshotsService.snapshots(, +                repository, new ArrayList<>(toResolve), repositoryData.getIncompatibleSnapshotIds(), request.ignoreUnavailable()));, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +     * @param incompatibleSnapshotIds   snapshots for which not to fetch snapshot information, +    public List<SnapshotInfo> snapshots(final String repositoryName,, +                                        final List<SnapshotId> snapshotIds,, +                                        final List<SnapshotId> incompatibleSnapshotIds,, +                                        final boolean ignoreUnavailable) {, +                if (incompatibleSnapshotIds.contains(snapshotId)) {, +                    // an incompatible snapshot - cannot read its snapshot metadata file, just return, +                    // a SnapshotInfo indicating its incompatible, +                    snapshotSet.add(SnapshotInfo.incompatible(snapshotId));, +                } else {, +                }]