[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                new ActionListener<ClusterStateUpdateResponse>() {, +                    public void onResponse(ClusterStateUpdateResponse unregisterRepositoryResponse) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                new ActionListener<ClusterStateUpdateResponse>() {, +                    public void onResponse(ClusterStateUpdateResponse unregisterRepositoryResponse) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                .ackTimeout(request.timeout()), new ActionListener<ClusterStateUpdateResponse>() {, +            public void onResponse(ClusterStateUpdateResponse response) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                new ActionListener<ClusterStateUpdateResponse>() {, +                    public void onResponse(ClusterStateUpdateResponse unregisterRepositoryResponse) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                .ackTimeout(request.timeout()), new ActionListener<ClusterStateUpdateResponse>() {, +            public void onResponse(ClusterStateUpdateResponse response) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +import org.elasticsearch.cluster.routing.allocation.RoutingExplanations;, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask<ClusterRerouteResponse>(request, listener) {, +            protected ClusterRerouteResponse newResponse(boolean acknowledged) {, +                return new ClusterRerouteResponse(acknowledged, clusterStateToSend, explanations);, +                super.onFailure(source, t);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                new ActionListener<ClusterStateUpdateResponse>() {, +                    public void onResponse(ClusterStateUpdateResponse unregisterRepositoryResponse) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                .ackTimeout(request.timeout()), new ActionListener<ClusterStateUpdateResponse>() {, +            public void onResponse(ClusterStateUpdateResponse response) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +import org.elasticsearch.cluster.routing.allocation.RoutingExplanations;, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask<ClusterRerouteResponse>(request, listener) {, +            protected ClusterRerouteResponse newResponse(boolean acknowledged) {, +                return new ClusterRerouteResponse(acknowledged, clusterStateToSend, explanations);, +                super.onFailure(source, t);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings", Priority.IMMEDIATE, new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(request, listener) {, +            protected ClusterUpdateSettingsResponse newResponse(boolean acknowledged) {, +                return new ClusterUpdateSettingsResponse(acknowledged, transientUpdates.build(), persistentUpdates.build());, +                    super.onAllNodesAcked(t);, +                    super.onAckTimeout();, +                clusterService.submitStateUpdateTask("reroute_after_cluster_update_settings", Priority.URGENT, new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(request, listener) {, +                    //we return when the cluster reroute is acked or it times out but the acknowledged flag depends on whether the update settings was acknowledged, +                    protected ClusterUpdateSettingsResponse newResponse(boolean acknowledged) {, +                        return new ClusterUpdateSettingsResponse(updateSettingsAcked && acknowledged, transientUpdates.build(), persistentUpdates.build());, +                super.onFailure(source, t);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                new ActionListener<ClusterStateUpdateResponse>() {, +                    public void onResponse(ClusterStateUpdateResponse unregisterRepositoryResponse) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                .ackTimeout(request.timeout()), new ActionListener<ClusterStateUpdateResponse>() {, +            public void onResponse(ClusterStateUpdateResponse response) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +import org.elasticsearch.cluster.routing.allocation.RoutingExplanations;, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask<ClusterRerouteResponse>(request, listener) {, +            protected ClusterRerouteResponse newResponse(boolean acknowledged) {, +                return new ClusterRerouteResponse(acknowledged, clusterStateToSend, explanations);, +                super.onFailure(source, t);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings", Priority.IMMEDIATE, new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(request, listener) {, +            protected ClusterUpdateSettingsResponse newResponse(boolean acknowledged) {, +                return new ClusterUpdateSettingsResponse(acknowledged, transientUpdates.build(), persistentUpdates.build());, +                    super.onAllNodesAcked(t);, +                    super.onAckTimeout();, +                clusterService.submitStateUpdateTask("reroute_after_cluster_update_settings", Priority.URGENT, new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(request, listener) {, +                    //we return when the cluster reroute is acked or it times out but the acknowledged flag depends on whether the update settings was acknowledged, +                    protected ClusterUpdateSettingsResponse newResponse(boolean acknowledged) {, +                        return new ClusterUpdateSettingsResponse(updateSettingsAcked && acknowledged, transientUpdates.build(), persistentUpdates.build());, +                super.onFailure(source, t);, +++ b/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +        indexAliasesService.indicesAliases(updateRequest, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                new ActionListener<ClusterStateUpdateResponse>() {, +                    public void onResponse(ClusterStateUpdateResponse unregisterRepositoryResponse) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;, +                .ackTimeout(request.timeout()), new ActionListener<ClusterStateUpdateResponse>() {, +            public void onResponse(ClusterStateUpdateResponse response) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +import org.elasticsearch.cluster.routing.allocation.RoutingExplanations;, +        clusterService.submitStateUpdateTask("cluster_reroute (api)", Priority.IMMEDIATE, new AckedClusterStateUpdateTask<ClusterRerouteResponse>(request, listener) {, +            protected ClusterRerouteResponse newResponse(boolean acknowledged) {, +                return new ClusterRerouteResponse(acknowledged, clusterStateToSend, explanations);, +                super.onFailure(source, t);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +        clusterService.submitStateUpdateTask("cluster_update_settings", Priority.IMMEDIATE, new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(request, listener) {, +            protected ClusterUpdateSettingsResponse newResponse(boolean acknowledged) {, +                return new ClusterUpdateSettingsResponse(acknowledged, transientUpdates.build(), persistentUpdates.build());, +                    super.onAllNodesAcked(t);, +                    super.onAckTimeout();, +                clusterService.submitStateUpdateTask("reroute_after_cluster_update_settings", Priority.URGENT, new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(request, listener) {, +                    //we return when the cluster reroute is acked or it times out but the acknowledged flag depends on whether the update settings was acknowledged]