[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DynamicTemplate.java, +import org.elasticsearch.common.Strings;, +        String match = null;, +        String pathMatch = null;, +        String unmatch = null;, +        String pathUnmatch = null;, +        Map<String, Object> mapping = null;, +        String matchMappingType = null;, +        String matchPattern = "simple";, +, +        for (Map.Entry<String, Object> entry : conf.entrySet()) {, +            String propName = Strings.toUnderscoreCase(entry.getKey());, +            if ("match".equals(propName)) {, +                match = entry.getValue().toString();, +            } else if ("path_match".equals(propName)) {, +                pathMatch = entry.getValue().toString();, +            } else if ("unmatch".equals(propName)) {, +                unmatch = entry.getValue().toString();, +            } else if ("path_unmatch".equals(propName)) {, +                pathUnmatch = entry.getValue().toString();, +            } else if ("match_mapping_type".equals(propName)) {, +                matchMappingType = entry.getValue().toString();, +            } else if ("match_pattern".equals(propName)) {, +                matchPattern = entry.getValue().toString();, +            } else if ("mapping".equals(propName)) {, +                mapping = (Map<String, Object>) entry.getValue();, +        }, +, +        if (match == null && pathMatch == null) {, +            throw new MapperParsingException("template must have match or path_match set");, +        }, +        if (mapping == null) {, +        return new DynamicTemplate(name, conf, pathMatch, pathUnmatch, match, unmatch, matchMappingType, MatchType.fromString(matchPattern), mapping);, +    private final String pathMatch;, +, +    private final String pathUnmatch;, +, +    public DynamicTemplate(String name, Map<String, Object> conf, String pathMatch, String pathUnmatch, String match, String unmatch, String matchMappingType, MatchType matchType, Map<String, Object> mapping) {, +        this.pathMatch = pathMatch;, +        this.pathUnmatch = pathUnmatch;, +    public boolean match(ContentPath path, String name, String dynamicType) {, +        if (pathMatch != null && !patternMatch(pathMatch, path.fullPathAsText(name))) {, +        if (match != null && !patternMatch(match, name)) {, +            return false;, +        }, +        if (pathUnmatch != null && patternMatch(pathUnmatch, path.fullPathAsText(name))) {, +            return false;, +        }, +        if (unmatch != null && patternMatch(unmatch, name)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DynamicTemplate.java, +import org.elasticsearch.common.Strings;, +        String match = null;, +        String pathMatch = null;, +        String unmatch = null;, +        String pathUnmatch = null;, +        Map<String, Object> mapping = null;, +        String matchMappingType = null;, +        String matchPattern = "simple";, +, +        for (Map.Entry<String, Object> entry : conf.entrySet()) {, +            String propName = Strings.toUnderscoreCase(entry.getKey());, +            if ("match".equals(propName)) {, +                match = entry.getValue().toString();, +            } else if ("path_match".equals(propName)) {, +                pathMatch = entry.getValue().toString();, +            } else if ("unmatch".equals(propName)) {, +                unmatch = entry.getValue().toString();, +            } else if ("path_unmatch".equals(propName)) {, +                pathUnmatch = entry.getValue().toString();, +            } else if ("match_mapping_type".equals(propName)) {, +                matchMappingType = entry.getValue().toString();, +            } else if ("match_pattern".equals(propName)) {, +                matchPattern = entry.getValue().toString();, +            } else if ("mapping".equals(propName)) {, +                mapping = (Map<String, Object>) entry.getValue();, +        }, +, +        if (match == null && pathMatch == null) {, +            throw new MapperParsingException("template must have match or path_match set");, +        }, +        if (mapping == null) {, +        return new DynamicTemplate(name, conf, pathMatch, pathUnmatch, match, unmatch, matchMappingType, MatchType.fromString(matchPattern), mapping);, +    private final String pathMatch;, +, +    private final String pathUnmatch;, +, +    public DynamicTemplate(String name, Map<String, Object> conf, String pathMatch, String pathUnmatch, String match, String unmatch, String matchMappingType, MatchType matchType, Map<String, Object> mapping) {, +        this.pathMatch = pathMatch;, +        this.pathUnmatch = pathUnmatch;, +    public boolean match(ContentPath path, String name, String dynamicType) {, +        if (pathMatch != null && !patternMatch(pathMatch, path.fullPathAsText(name))) {, +        if (match != null && !patternMatch(match, name)) {, +            return false;, +        }, +        if (pathUnmatch != null && patternMatch(pathUnmatch, path.fullPathAsText(name))) {, +            return false;, +        }, +        if (unmatch != null && patternMatch(unmatch, name)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ObjectMapper.java, +                String propName = Strings.toUnderscoreCase(entry.getKey());]