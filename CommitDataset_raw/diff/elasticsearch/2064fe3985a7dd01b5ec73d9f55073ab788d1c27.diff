[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.apache.lucene.search.PrefixQuery;, +import org.elasticsearch.common.lucene.BytesRefs;, +import org.elasticsearch.index.mapper.Uid;, +                return new ConstantScoreQuery(new PrefixQuery(new Term(UidFieldMapper.NAME, Uid.typePrefixAsBytes(BytesRefs.toBytesRef(value)))));, +            return new ConstantScoreQuery(new TermQuery(createTerm(value)));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.apache.lucene.search.PrefixQuery;, +import org.elasticsearch.common.lucene.BytesRefs;, +import org.elasticsearch.index.mapper.Uid;, +                return new ConstantScoreQuery(new PrefixQuery(new Term(UidFieldMapper.NAME, Uid.typePrefixAsBytes(BytesRefs.toBytesRef(value)))));, +            return new ConstantScoreQuery(new TermQuery(createTerm(value)));, +++ b/core/src/main/java/org/elasticsearch/index/query/PercolatorQuery.java, +                    int result = scorer.iterator().advance(docId);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.apache.lucene.search.PrefixQuery;, +import org.elasticsearch.common.lucene.BytesRefs;, +import org.elasticsearch.index.mapper.Uid;, +                return new ConstantScoreQuery(new PrefixQuery(new Term(UidFieldMapper.NAME, Uid.typePrefixAsBytes(BytesRefs.toBytesRef(value)))));, +            return new ConstantScoreQuery(new TermQuery(createTerm(value)));, +++ b/core/src/main/java/org/elasticsearch/index/query/PercolatorQuery.java, +                    int result = scorer.iterator().advance(docId);, +++ b/core/src/main/java/org/elasticsearch/index/query/TypeQueryBuilder.java, +        Query filter;, +            filter = new TermQuery(new Term(TypeFieldMapper.NAME, type));, +            filter = documentMapper.typeFilter();, +        return filter;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.apache.lucene.search.PrefixQuery;, +import org.elasticsearch.common.lucene.BytesRefs;, +import org.elasticsearch.index.mapper.Uid;, +                return new ConstantScoreQuery(new PrefixQuery(new Term(UidFieldMapper.NAME, Uid.typePrefixAsBytes(BytesRefs.toBytesRef(value)))));, +            return new ConstantScoreQuery(new TermQuery(createTerm(value)));, +++ b/core/src/main/java/org/elasticsearch/index/query/PercolatorQuery.java, +                    int result = scorer.iterator().advance(docId);, +++ b/core/src/main/java/org/elasticsearch/index/query/TypeQueryBuilder.java, +        Query filter;, +            filter = new TermQuery(new Term(TypeFieldMapper.NAME, type));, +            filter = documentMapper.typeFilter();, +        return filter;, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/ConvertProcessor.java, +        }, AUTO {, +            @Override, +            public Object convert(Object value) {, +                if (!(value instanceof String)) {, +                   return value;, +                }, +                try {, +                    return BOOLEAN.convert(value);, +                } catch (IllegalArgumentException e) { }, +                try {, +                    return INTEGER.convert(value);, +                } catch (IllegalArgumentException e) {}, +                try {, +                    return FLOAT.convert(value);, +                } catch (IllegalArgumentException e) {}, +                return value;, +            }, +    private final String targetField;, +    ConvertProcessor(String tag, String field, String targetField, Type convertType) {, +        this.targetField = targetField;, +    String getTargetField() {, +        return targetField;, +    }, +, +        document.setFieldValue(targetField, newValue);, +            String targetField = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "target_field", field);, +            return new ConvertProcessor(processorTag, field, targetField, convertType);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName);, +                builder = new TextFieldMapper.Builder(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.apache.lucene.search.PrefixQuery;, +import org.elasticsearch.common.lucene.BytesRefs;, +import org.elasticsearch.index.mapper.Uid;, +                return new ConstantScoreQuery(new PrefixQuery(new Term(UidFieldMapper.NAME, Uid.typePrefixAsBytes(BytesRefs.toBytesRef(value)))));]