[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.plugins.ReloadablePlugin;, +import org.elasticsearch.xpack.watcher.notification.NotificationService;, +public class Watcher extends Plugin implements ActionPlugin, ScriptPlugin, ReloadablePlugin {, +    protected List<NotificationService> reloadableServices = new ArrayList<>();, +        reloadableServices.add(emailService);, +        reloadableServices.add(hipChatService);, +        reloadableServices.add(jiraService);, +        reloadableServices.add(slackService);, +        reloadableServices.add(pagerDutyService);, +, +, +    /**, +     * Reloads all the reloadable services in watcher., +     */, +    @Override, +    public void reload(Settings settings) {, +        if (enabled == false || transportClient) {, +            return;, +        }, +        reloadableServices.forEach(s -> s.reload(settings));, +    }, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.plugins.ReloadablePlugin;, +import org.elasticsearch.xpack.watcher.notification.NotificationService;, +public class Watcher extends Plugin implements ActionPlugin, ScriptPlugin, ReloadablePlugin {, +    protected List<NotificationService> reloadableServices = new ArrayList<>();, +        reloadableServices.add(emailService);, +        reloadableServices.add(hipChatService);, +        reloadableServices.add(jiraService);, +        reloadableServices.add(slackService);, +        reloadableServices.add(pagerDutyService);, +, +, +    /**, +     * Reloads all the reloadable services in watcher., +     */, +    @Override, +    public void reload(Settings settings) {, +        if (enabled == false || transportClient) {, +            return;, +        }, +        reloadableServices.forEach(s -> s.reload(settings));, +    }, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/NotificationService.java, +        clusterSettings.addSettingsUpdateConsumer(this::reload, pluginSettings);, +    public synchronized void reload(Settings settings) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.plugins.ReloadablePlugin;, +import org.elasticsearch.xpack.watcher.notification.NotificationService;, +public class Watcher extends Plugin implements ActionPlugin, ScriptPlugin, ReloadablePlugin {, +    protected List<NotificationService> reloadableServices = new ArrayList<>();, +        reloadableServices.add(emailService);, +        reloadableServices.add(hipChatService);, +        reloadableServices.add(jiraService);, +        reloadableServices.add(slackService);, +        reloadableServices.add(pagerDutyService);, +, +, +    /**, +     * Reloads all the reloadable services in watcher., +     */, +    @Override, +    public void reload(Settings settings) {, +        if (enabled == false || transportClient) {, +            return;, +        }, +        reloadableServices.forEach(s -> s.reload(settings));, +    }, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/NotificationService.java, +        clusterSettings.addSettingsUpdateConsumer(this::reload, pluginSettings);, +    public synchronized void reload(Settings settings) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/email/EmailService.java, +        reload(settings);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.plugins.ReloadablePlugin;, +import org.elasticsearch.xpack.watcher.notification.NotificationService;, +public class Watcher extends Plugin implements ActionPlugin, ScriptPlugin, ReloadablePlugin {, +    protected List<NotificationService> reloadableServices = new ArrayList<>();, +        reloadableServices.add(emailService);, +        reloadableServices.add(hipChatService);, +        reloadableServices.add(jiraService);, +        reloadableServices.add(slackService);, +        reloadableServices.add(pagerDutyService);, +, +, +    /**, +     * Reloads all the reloadable services in watcher., +     */, +    @Override, +    public void reload(Settings settings) {, +        if (enabled == false || transportClient) {, +            return;, +        }, +        reloadableServices.forEach(s -> s.reload(settings));, +    }, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/NotificationService.java, +        clusterSettings.addSettingsUpdateConsumer(this::reload, pluginSettings);, +    public synchronized void reload(Settings settings) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/email/EmailService.java]