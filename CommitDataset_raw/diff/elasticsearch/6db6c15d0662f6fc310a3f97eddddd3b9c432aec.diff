[+++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +        return get(DEFAULT, first, more);, +    }, +, +    /**, +     * Returns a {@code Path} from name components against the given, +     * {@code FileSystem}., +     * <p>, +     * This works just like {@code Paths.get()}., +     * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION, +     * UTILITY FUNCTION., +     * <p>, +     * Remember: this should almost never be used. Usually resolve, +     * a path against an existing one!, +     *, +     * @param fs    the given {@code FileSystem}, +     * @param first the first path component, +     * @param more  the remaining path components, +     * @return a path, +     */, +    public static Path get(FileSystem fs, String first, String... more) {, +        return fs.getPath(first, more);, +++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +        return get(DEFAULT, first, more);, +    }, +, +    /**, +     * Returns a {@code Path} from name components against the given, +     * {@code FileSystem}., +     * <p>, +     * This works just like {@code Paths.get()}., +     * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION, +     * UTILITY FUNCTION., +     * <p>, +     * Remember: this should almost never be used. Usually resolve, +     * a path against an existing one!, +     *, +     * @param fs    the given {@code FileSystem}, +     * @param first the first path component, +     * @param more  the remaining path components, +     * @return a path, +     */, +    public static Path get(FileSystem fs, String first, String... more) {, +        return fs.getPath(first, more);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.net.URI;, +++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +        return get(DEFAULT, first, more);, +    }, +, +    /**, +     * Returns a {@code Path} from name components against the given, +     * {@code FileSystem}., +     * <p>, +     * This works just like {@code Paths.get()}., +     * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION, +     * UTILITY FUNCTION., +     * <p>, +     * Remember: this should almost never be used. Usually resolve, +     * a path against an existing one!, +     *, +     * @param fs    the given {@code FileSystem}, +     * @param first the first path component, +     * @param more  the remaining path components, +     * @return a path, +     */, +    public static Path get(FileSystem fs, String first, String... more) {, +        return fs.getPath(first, more);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.net.URI;, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +import java.nio.file.FileSystem;, +        this(PathUtils.getDefaultFileSystem(), settings);, +    }, +, +    public Environment(FileSystem fs, Settings settings) {, +            homeFile = PathUtils.get(fs, PATH_HOME_SETTING.get(settings));, +            configFile = PathUtils.get(fs, cleanPath(PATH_CONF_SETTING.get(settings)));, +            scriptsFile = PathUtils.get(fs, cleanPath(PATH_SCRIPTS_SETTING.get(settings)));, +            pluginsFile = PathUtils.get(fs, cleanPath(PATH_PLUGINS_SETTING.get(settings)));, +                dataFiles[i] = PathUtils.get(fs, dataPaths.get(i));, +++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +        return get(DEFAULT, first, more);, +    }, +, +    /**, +     * Returns a {@code Path} from name components against the given, +     * {@code FileSystem}., +     * <p>, +     * This works just like {@code Paths.get()}., +     * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION, +     * UTILITY FUNCTION., +     * <p>, +     * Remember: this should almost never be used. Usually resolve, +     * a path against an existing one!, +     *, +     * @param fs    the given {@code FileSystem}, +     * @param first the first path component, +     * @param more  the remaining path components, +     * @return a path]