[+++ b/core/src/test/java/org/elasticsearch/search/sort/AbstractSortTestCase.java, +import org.elasticsearch.index.query.IdsQueryBuilder;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.TermQueryBuilder;, +    protected static QueryBuilder<?> randomNestedFilter() {, +        int id = randomIntBetween(0, 2);, +        switch(id) {, +            case 0: return (new MatchAllQueryBuilder()).boost(randomFloat());, +            case 1: return (new IdsQueryBuilder()).boost(randomFloat());, +            case 2: return (new TermQueryBuilder(, +                    randomAsciiOfLengthBetween(1, 10),, +                    randomDouble()).boost(randomFloat()));, +            default: throw new IllegalStateException("Only three query builders supported for testing sort");, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/sort/AbstractSortTestCase.java, +import org.elasticsearch.index.query.IdsQueryBuilder;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.TermQueryBuilder;, +    protected static QueryBuilder<?> randomNestedFilter() {, +        int id = randomIntBetween(0, 2);, +        switch(id) {, +            case 0: return (new MatchAllQueryBuilder()).boost(randomFloat());, +            case 1: return (new IdsQueryBuilder()).boost(randomFloat());, +            case 2: return (new TermQueryBuilder(, +                    randomAsciiOfLengthBetween(1, 10),, +                    randomDouble()).boost(randomFloat()));, +            default: throw new IllegalStateException("Only three query builders supported for testing sort");, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/sort/FieldSortBuilderTests.java, +            randomAsciiOfLength(10), randomUnicodeOfCodepointLengthBetween(5, 15),, +            randomInt());, +            builder.unmappedType(randomAsciiOfLengthBetween(1, 10));, +            builder.setNestedFilter(randomNestedFilter());, +            builder.setNestedPath(randomAsciiOfLengthBetween(1, 10));, +            mutated.setNestedPath(randomValueOtherThan(, +                    () -> randomAsciiOfLengthBetween(1, 10)));, +            mutated.setNestedFilter(randomValueOtherThan(, +                    () -> randomNestedFilter()));, +            mutated.sortMode(randomValueOtherThan(original.sortMode(), () -> randomFrom(SortMode.values())));, +            mutated.unmappedType(randomValueOtherThan(, +                    () -> randomAsciiOfLengthBetween(1, 10)));, +            mutated.missing(randomValueOtherThan(original.missing(), () -> randomFrom(missingContent)));, +            mutated.order(randomValueOtherThan(original.order(), () -> randomFrom(SortOrder.values())));, +++ b/core/src/test/java/org/elasticsearch/search/sort/AbstractSortTestCase.java, +import org.elasticsearch.index.query.IdsQueryBuilder;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.TermQueryBuilder;, +    protected static QueryBuilder<?> randomNestedFilter() {, +        int id = randomIntBetween(0, 2);, +        switch(id) {, +            case 0: return (new MatchAllQueryBuilder()).boost(randomFloat());, +            case 1: return (new IdsQueryBuilder()).boost(randomFloat());, +            case 2: return (new TermQueryBuilder(, +                    randomAsciiOfLengthBetween(1, 10),, +                    randomDouble()).boost(randomFloat()));, +            default: throw new IllegalStateException("Only three query builders supported for testing sort");, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/sort/FieldSortBuilderTests.java, +            randomAsciiOfLength(10), randomUnicodeOfCodepointLengthBetween(5, 15),, +            randomInt());, +            builder.unmappedType(randomAsciiOfLengthBetween(1, 10));, +            builder.setNestedFilter(randomNestedFilter());, +            builder.setNestedPath(randomAsciiOfLengthBetween(1, 10));, +            mutated.setNestedPath(randomValueOtherThan(, +                    () -> randomAsciiOfLengthBetween(1, 10)));, +            mutated.setNestedFilter(randomValueOtherThan(, +                    () -> randomNestedFilter()));, +            mutated.sortMode(randomValueOtherThan(original.sortMode(), () -> randomFrom(SortMode.values())));, +            mutated.unmappedType(randomValueOtherThan(, +                    () -> randomAsciiOfLengthBetween(1, 10)));, +            mutated.missing(randomValueOtherThan(original.missing(), () -> randomFrom(missingContent)));, +            mutated.order(randomValueOtherThan(original.order(), () -> randomFrom(SortOrder.values())));, +++ b/core/src/test/java/org/elasticsearch/search/sort/GeoDistanceSortBuilderTests.java, +            result.setNestedFilter(randomNestedFilter());, +                    () -> randomNestedFilter()));, +++ b/core/src/test/java/org/elasticsearch/search/sort/AbstractSortTestCase.java, +import org.elasticsearch.index.query.IdsQueryBuilder;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.TermQueryBuilder;, +    protected static QueryBuilder<?> randomNestedFilter() {, +        int id = randomIntBetween(0, 2);, +        switch(id) {, +            case 0: return (new MatchAllQueryBuilder()).boost(randomFloat());, +            case 1: return (new IdsQueryBuilder()).boost(randomFloat());, +            case 2: return (new TermQueryBuilder(, +                    randomAsciiOfLengthBetween(1, 10),, +                    randomDouble()).boost(randomFloat()));, +            default: throw new IllegalStateException("Only three query builders supported for testing sort");, +        }, +    }]