[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +        // request headers override default headers, so we don't add default headers if they exist as request headers, +        final Set<String> requestNames = new HashSet<>(requestHeaders.length);, +            httpRequest.addHeader(requestHeader);, +            requestNames.add(requestHeader.getName());, +        }, +        for (Header defaultHeader : defaultHeaders) {, +            if (requestNames.contains(defaultHeader.getName()) == false) {, +                httpRequest.addHeader(defaultHeader);, +            }, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +        // request headers override default headers, so we don't add default headers if they exist as request headers, +        final Set<String> requestNames = new HashSet<>(requestHeaders.length);, +            httpRequest.addHeader(requestHeader);, +            requestNames.add(requestHeader.getName());, +        }, +        for (Header defaultHeader : defaultHeaders) {, +            if (requestNames.contains(defaultHeader.getName()) == false) {, +                httpRequest.addHeader(defaultHeader);, +            }, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +     * Sets the default request headers, which will be sent along with each request., +     * <p>, +     * Request-time headers will always overwrite any default headers., +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +        // request headers override default headers, so we don't add default headers if they exist as request headers, +        final Set<String> requestNames = new HashSet<>(requestHeaders.length);, +            httpRequest.addHeader(requestHeader);, +            requestNames.add(requestHeader.getName());, +        }, +        for (Header defaultHeader : defaultHeaders) {, +            if (requestNames.contains(defaultHeader.getName()) == false) {, +                httpRequest.addHeader(defaultHeader);, +            }, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +     * Sets the default request headers, which will be sent along with each request., +     * <p>, +     * Request-time headers will always overwrite any default headers., +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientIntegTests.java, +        int numHeaders = randomIntBetween(0, 5);, +        defaultHeaders = generateHeaders("Header-default", "Header-array", numHeaders);, +            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"));, +            final int numHeaders = randomIntBetween(1, 5);, +            final Header[] headers = generateHeaders("Header", "Header-array", numHeaders);, +            final Map<String, List<String>> expectedHeaders = new HashMap<>();, +, +            addHeaders(expectedHeaders, defaultHeaders, headers);, +, +            final int statusCode = randomStatusCode(getRandom());, +                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), headers);, +            for (final Header responseHeader : esResponse.getHeaders()) {, +                final String name = responseHeader.getName();, +                final String value = responseHeader.getValue();, +                if (name.startsWith("Header")) {, +                    final List<String> values = expectedHeaders.get(name);, +                    assertNotNull("found response header [" + name + "] that wasn't originally sent: " + value, values);, +                    assertTrue("found incorrect response header [" + name + "]: " + value, values.remove(value));, +, +                    // we've collected them all, +                    if (values.isEmpty()) {, +                        expectedHeaders.remove(name);, +                    }, +                    assertTrue("unknown header was returned " + name, standardHeaders.remove(name));, +            assertTrue("some headers that were sent weren't returned: " + expectedHeaders, expectedHeaders.isEmpty());, +            assertTrue("some expected standard headers weren't returned: " + standardHeaders, standardHeaders.isEmpty());, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +        // request headers override default headers, so we don't add default headers if they exist as request headers, +        final Set<String> requestNames = new HashSet<>(requestHeaders.length);, +            httpRequest.addHeader(requestHeader);, +            requestNames.add(requestHeader.getName());, +        }, +        for (Header defaultHeader : defaultHeaders) {, +            if (requestNames.contains(defaultHeader.getName()) == false) {, +                httpRequest.addHeader(defaultHeader);, +            }, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +     * Sets the default request headers, which will be sent along with each request., +     * <p>, +     * Request-time headers will always overwrite any default headers., +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientIntegTests.java, +        int numHeaders = randomIntBetween(0, 5);, +        defaultHeaders = generateHeaders("Header-default", "Header-array", numHeaders);, +            final Set<String> standardHeaders = new HashSet<>(Arrays.asList("Connection", "Host", "User-agent", "Date"));, +            final int numHeaders = randomIntBetween(1, 5);, +            final Header[] headers = generateHeaders("Header", "Header-array", numHeaders);, +            final Map<String, List<String>> expectedHeaders = new HashMap<>();, +, +            addHeaders(expectedHeaders, defaultHeaders, headers);, +, +            final int statusCode = randomStatusCode(getRandom());, +                esResponse = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap(), headers);, +            for (final Header responseHeader : esResponse.getHeaders()) {, +                final String name = responseHeader.getName();, +                final String value = responseHeader.getValue();, +                if (name.startsWith("Header")) {, +                    final List<String> values = expectedHeaders.get(name);, +                    assertNotNull("found response header [" + name + "] that wasn't originally sent: " + value, values);, +                    assertTrue("found incorrect response header [" + name + "]: " + value, values.remove(value));, +, +                    // we've collected them all]