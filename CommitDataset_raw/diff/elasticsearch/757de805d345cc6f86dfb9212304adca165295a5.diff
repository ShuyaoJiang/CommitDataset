[+++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java, +            return String.join("-", sourceIndexName.substring(0, numberIndex), String.valueOf(++counter));, +++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java, +            return String.join("-", sourceIndexName.substring(0, numberIndex), String.valueOf(++counter));, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        id = in.readString();, +        out.writeString(id);, +++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java, +            return String.join("-", sourceIndexName.substring(0, numberIndex), String.valueOf(++counter));, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        id = in.readString();, +        out.writeString(id);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineResponse.java, +        out.writeString(pipelineId);, +        this.pipelineId = in.readString();, +++ b/TESTING.asciidoc, +run it using Maven:, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseException.java, +    private static String buildMessage(Response response) {, +        return response.getRequestLine().getMethod() + " " + response.getHost() + response.getRequestLine().getUri(), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java, +            return String.join("-", sourceIndexName.substring(0, numberIndex), String.valueOf(++counter));, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        id = in.readString();, +        out.writeString(id);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineResponse.java, +        out.writeString(pipelineId);, +        this.pipelineId = in.readString();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java]