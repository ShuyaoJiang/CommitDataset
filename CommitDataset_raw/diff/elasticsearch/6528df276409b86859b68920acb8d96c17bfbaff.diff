[+++ b/docs/reference/index.asciidoc, +include::testing.asciidoc[], +, +++ b/docs/reference/index.asciidoc, +include::testing.asciidoc[], +, +++ b/docs/reference/testing.asciidoc, +[[testing]], += Testing, +, +[partintro], +--, +This section is about utilizing elasticsearch as part of your testing infrastructure., +, +[float], +[[testing-header]], +== Testing:, +, +* <<testing-framework>>, +, +--, +, +include::testing/testing-framework.asciidoc[], +++ b/docs/reference/index.asciidoc, +include::testing.asciidoc[], +, +++ b/docs/reference/testing.asciidoc, +[[testing]], += Testing, +, +[partintro], +--, +This section is about utilizing elasticsearch as part of your testing infrastructure., +, +[float], +[[testing-header]], +== Testing:, +, +* <<testing-framework>>, +, +--, +, +include::testing/testing-framework.asciidoc[], +++ b/docs/reference/testing/testing-framework.asciidoc, +[[testing-framework]], +== Java Testing Framework, +, +added[1.0.0], +, +[[testing-intro]], +, +Testing is a crucial part of your application, and as information retrieval itself is already a complex topic, there should not be any additional complexity in setting up a testing infrastructure, which uses elasticsearch. This is the main reason why we decided to release an additional file to the release, which allows you to use the same testing infrastructure we do in the elasticsearch core. The testing framework allows you to setup clusters with multiple nodes in order to check if your code covers everything needed to run in a cluster. The framework prevents you from writing complex code yourself to start, stop or manage several test nodes in a cluster. In addition there is another very important feature called randomized testing, which you are getting for free as it is part of the elasticsearch infrastructure., +, +, +, +[[why-randomized-testing]], +=== why randomized testing?, +, +The key concept of randomized testing is not to use the same input values for every testcase, but still be able to reproduce it in case of a failure. This allows to test with vastly different input variables in order to make sure, that your implementation is actually independent from your provided test data., +, +If you are interested in the implementation being used, check out the http://labs.carrotsearch.com/randomizedtesting.html[RandomizedTesting webpage]., +, +, +[[using-elasticsearch-test-classes]], +=== Using the elasticsearch test classes, +, +First, you need to include the testing dependency in your project. If you use maven and its `pom.xml` file, it looks like this, +, +[[source,xml]], +--------------------------------------------------, +<dependencies>, +  <dependency>, +    <groupId>org.apache.lucene</groupId>, +    <artifactId>lucene-test-framework</artifactId>, +    <version>${lucene.version}</version>, +    <scope>test</scope>, +  </dependency>, +  <dependency>, +    <groupId>org.elasticsearch</groupId>, +    <artifactId>elasticsearch</artifactId>, +    <version>${elasticsearch.version}</version>, +    <scope>test</scope>, +    <type>test-jar</type>, +  </dependency>, +  <dependency>, +    <groupId>org.elasticsearch</groupId>, +    <artifactId>elasticsearch</artifactId>, +    <version>${elasticsearch.version}</version>, +    <scope>test</scope>, +  </dependency>, +</dependencies>, +--------------------------------------------------, +, +Replace the elasticsearch version and the lucene versions with the current elasticsearch version and its accompanying lucene release. , +, +There are already have a couple of classes, you can inherit from in your own test classes. The advantages of doing so is having already defined loggers, the whole randomized infrastructure is set up already., +, +, +[[unit-tests]], +=== unit tests]