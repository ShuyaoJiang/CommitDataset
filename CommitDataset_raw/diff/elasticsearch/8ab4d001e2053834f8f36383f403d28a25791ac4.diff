[+++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.io.stream.NamedWriteable;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.script.Script.ScriptField;, +import org.elasticsearch.script.ScriptParameterParser;, +import org.elasticsearch.script.ScriptParameterParser.ScriptParameterValue;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Objects;, +public class ScriptSortBuilder extends SortBuilder<ScriptSortBuilder> implements NamedWriteable<ScriptSortBuilder>,, +    SortElementParserTemp<ScriptSortBuilder> {, +    private static final String NAME = "_script";, +    static final ScriptSortBuilder PROTOTYPE = new ScriptSortBuilder(new Script("_na_"), "_na_");, +    public static final ParseField TYPE_FIELD = new ParseField("type");, +    public static final ParseField SCRIPT_FIELD = new ParseField("script");, +    public static final ParseField SORTMODE_FIELD = new ParseField("mode");, +    public static final ParseField NESTED_PATH_FIELD = new ParseField("nested_path");, +    public static final ParseField NESTED_FILTER_FIELD = new ParseField("nested_filter");, +    public static final ParseField PARAMS_FIELD = new ParseField("params");, +    private final Script script;, +, +    // TODO make this an enum, +    // TODO make this an enum, +    private QueryBuilder<?> nestedFilter;, +     * @param type, +     *            The type of the script, can be either {@link ScriptSortParser#STRING_SORT_TYPE} or, +     *            {@link ScriptSortParser#NUMBER_SORT_TYPE}, +        Objects.requireNonNull(script, "script cannot be null");, +        Objects.requireNonNull(type, "type cannot be null");, +    ScriptSortBuilder(ScriptSortBuilder original) {, +        this.script = original.script;, +        this.type = original.type;, +        this.order = original.order;, +        this.sortMode = original.sortMode;, +        this.nestedFilter = original.nestedFilter;, +        this.nestedPath = original.nestedPath;, +    }, +, +    /**, +     * Get the script used in this sort., +     */, +    public Script script() {, +        return this.script;, +    }, +, +    /**, +     * Get the type used in this sort., +     */, +    public String type() {, +        return this.type;, +    }, +, +     * Get the sort mode., +     */, +    public String sortMode() {, +        return this.sortMode;, +    }, +, +    /**, +     * Gets the nested filter., +     */, +    public QueryBuilder<?> getNestedFilter() {, +        return this.nestedFilter;, +    }, +, +    /**, +    /**, +     * Gets the nested path., +     */, +    public String getNestedPath() {, +        return this.nestedPath;, +    }, +, +        builder.startObject(NAME);, +        builder.field(SCRIPT_FIELD.getPreferredName(), script);, +        builder.field(TYPE_FIELD.getPreferredName(), type);, +            builder.field(SORTMODE_FIELD.getPreferredName(), sortMode);, +            builder.field(NESTED_PATH_FIELD.getPreferredName(), nestedPath);, +            builder.field(NESTED_FILTER_FIELD.getPreferredName(), nestedFilter, builderParams);, +, +    @Override, +    public ScriptSortBuilder fromXContent(QueryParseContext context, String elementName) throws IOException {, +        ScriptParameterParser scriptParameterParser = new ScriptParameterParser();, +        XContentParser parser = context.parser();, +        ParseFieldMatcher parseField = context.parseFieldMatcher();, +        Script script = null;, +        String type = null;, +        String sortMode = null;, +        SortOrder order = null;, +        QueryBuilder<?> nestedFilter = null;, +        String nestedPath = null;, +        Map<String, Object> params = new HashMap<>();, +, +        XContentParser.Token token;, +        String currentName = parser.currentName();]