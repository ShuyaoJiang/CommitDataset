[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import java.util.Optional;, +        Optional<ValidationException> validationException = request.validate();, +        if (validationException != null && validationException.isPresent()) {, +            throw validationException.get();, +        Optional<ValidationException> validationException = request.validate();, +        if (validationException != null && validationException.isPresent()) {, +            listener.onFailure(validationException.get());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import java.util.Optional;, +        Optional<ValidationException> validationException = request.validate();, +        if (validationException != null && validationException.isPresent()) {, +            throw validationException.get();, +        Optional<ValidationException> validationException = request.validate();, +        if (validationException != null && validationException.isPresent()) {, +            listener.onFailure(validationException.get());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Validatable.java, +import java.util.Optional;, +, +     * Perform validation. This method does not have to be overridden in the event that no validation needs to be done,, +     * or the validation was done during object construction time. A {@link ValidationException} that is not null is, +     * assumed to contain validation errors and will be thrown., +     * @return An {@link Optional} {@link ValidationException} that contains a list of validation errors., +    default Optional<ValidationException> validate() {, +        return Optional.empty();]