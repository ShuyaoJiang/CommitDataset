[+++ b/elasticsearch/license/licensor/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +import java.io.File;, +import joptsimple.OptionSet;, +import joptsimple.OptionSpec;, +import org.elasticsearch.cli.Command;, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.cli.UserError;, +import org.elasticsearch.common.cli.Terminal;, +, +public class KeyPairGeneratorTool extends Command {, +    private final OptionSpec<File> publicKeyPathOption;, +    private final OptionSpec<File> privateKeyPathOption;, +        super("Generates a key pair with RSA 2048-bit security");, +        // TODO: in jopt-simple 5.0 we can use a PathConverter to take Path instead of File, +        this.publicKeyPathOption = parser.accepts("publicKeyPath", "public key path"), +            .withRequiredArg().ofType(File.class).required();, +        this.privateKeyPathOption = parser.accepts("privateKeyPath", "private key path"), +            .withRequiredArg().ofType(File.class).required();, +    }, +, +    public static void main(String[] args) throws Exception {, +        exit(new KeyPairGeneratorTool().main(args, Terminal.DEFAULT));, +    protected void printAdditionalHelp(Terminal terminal) {, +        terminal.println("This tool generates and saves a key pair to the provided publicKeyPath");, +        terminal.println("and privateKeyPath. The tool checks the existence of the provided key paths");, +        terminal.println("and will not override if any existing keys are found.");, +        terminal.println("");, +    @Override, +    protected int execute(Terminal terminal, OptionSet options) throws Exception {, +        File publicKeyPath = publicKeyPathOption.value(options);, +        File privateKeyPath = privateKeyPathOption.value(options);, +        execute(terminal, publicKeyPath.toPath(), privateKeyPath.toPath());, +        return ExitCodes.OK;, +    // pkg private for tests, +    void execute(Terminal terminal, Path publicKeyPath, Path privateKeyPath) throws Exception {, +            throw new UserError(ExitCodes.USAGE, privateKeyPath + " already exists");, +            throw new UserError(ExitCodes.USAGE, publicKeyPath + " already exists");, +        terminal.println(Terminal.Verbosity.VERBOSE, "generating key pair [public key: " + publicKeyPath + ", private key: ", +            + privateKeyPath + "]");, +++ b/elasticsearch/license/licensor/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +import java.io.File;, +import joptsimple.OptionSet;, +import joptsimple.OptionSpec;, +import org.elasticsearch.cli.Command;, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.cli.UserError;, +import org.elasticsearch.common.cli.Terminal;, +, +public class KeyPairGeneratorTool extends Command {, +    private final OptionSpec<File> publicKeyPathOption;, +    private final OptionSpec<File> privateKeyPathOption;, +        super("Generates a key pair with RSA 2048-bit security");, +        // TODO: in jopt-simple 5.0 we can use a PathConverter to take Path instead of File, +        this.publicKeyPathOption = parser.accepts("publicKeyPath", "public key path"), +            .withRequiredArg().ofType(File.class).required();, +        this.privateKeyPathOption = parser.accepts("privateKeyPath", "private key path"), +            .withRequiredArg().ofType(File.class).required();, +    }, +, +    public static void main(String[] args) throws Exception {, +        exit(new KeyPairGeneratorTool().main(args, Terminal.DEFAULT));, +    protected void printAdditionalHelp(Terminal terminal) {, +        terminal.println("This tool generates and saves a key pair to the provided publicKeyPath");, +        terminal.println("and privateKeyPath. The tool checks the existence of the provided key paths");, +        terminal.println("and will not override if any existing keys are found.");, +        terminal.println("");, +    @Override, +    protected int execute(Terminal terminal, OptionSet options) throws Exception {, +        File publicKeyPath = publicKeyPathOption.value(options);, +        File privateKeyPath = privateKeyPathOption.value(options);, +        execute(terminal, publicKeyPath.toPath(), privateKeyPath.toPath());, +        return ExitCodes.OK;, +    // pkg private for tests, +    void execute(Terminal terminal, Path publicKeyPath, Path privateKeyPath) throws Exception {, +            throw new UserError(ExitCodes.USAGE, privateKeyPath + " already exists");, +            throw new UserError(ExitCodes.USAGE, publicKeyPath + " already exists");, +        terminal.println(Terminal.Verbosity.VERBOSE, "generating key pair [public key: " + publicKeyPath + ", private key: ", +            + privateKeyPath + "]");, +++ b/elasticsearch/license/licensor/src/main/java/org/elasticsearch/license/licensor/tools/LicenseGeneratorTool.java, +import java.nio.file.Files;, +import java.nio.file.Path;, +, +import joptsimple.OptionSet;, +import joptsimple.OptionSpec;, +import org.elasticsearch.cli.Command;, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.cli.UserError;, +import org.elasticsearch.common.io.PathUtils;, +public class LicenseGeneratorTool extends Command {, +    private final OptionSpec<String> publicKeyPathOption;, +    private final OptionSpec<String> privateKeyPathOption;, +    private final OptionSpec<String> licenseOption;, +    private final OptionSpec<String> licenseFileOption;, +        super("Generates signed elasticsearch license(s) for a given license spec(s)");, +        publicKeyPathOption = parser.accepts("publicKeyPath", "path to public key file"), +            .withRequiredArg().required();, +        privateKeyPathOption = parser.accepts("privateKeyPath", "path to private key file"), +            .withRequiredArg().required();, +        // TODO: with jopt-simple 5.0, we can make these requiredUnless each other, +        // which is effectively "one must be present"]