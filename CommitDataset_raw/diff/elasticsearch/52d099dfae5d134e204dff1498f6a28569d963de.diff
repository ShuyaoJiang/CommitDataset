[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +        this.requestedSize = context.size();, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +        this.requestedSize = context.size();, +++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +    private int size;, +        return 0;, +        return size;, +        this.size = size;, +        this.limit = true;, +        return this;, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +        this.requestedSize = context.size();, +++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +    private int size;, +        return 0;, +        return size;, +        this.size = size;, +        this.limit = true;, +        return this;, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +            if (context.size() < 0) {, +                context.size(0);, +                        context.size(parser.intValue());, +                        if (context.size() < 0) {, +                            throw new ElasticsearchParseException("size is set to [" + context.size() + "] and is expected to be higher or equal to 0");, +                    if (!context.limit || count < context.size()) {, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +        this.requestedSize = context.size();, +++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +    private int size;, +        return 0;, +        return size;, +        this.size = size;, +        this.limit = true;, +        return this;, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +            if (context.size() < 0) {, +                context.size(0);, +                        context.size(parser.intValue());, +                        if (context.size() < 0) {, +                            throw new ElasticsearchParseException("size is set to [" + context.size() + "] and is expected to be higher or equal to 0");, +                    if (!context.limit || count < context.size()) {, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +            this.size = context.size();, +            topDocsCollector = TopScoreDocCollector.create(context.size(), false);, +            this.size = context.size();, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +        this.requestedSize = context.size();, +++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +    private int size;, +        return 0;, +        return size;, +        this.size = size;, +        this.limit = true;, +        return this;, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +            if (context.size() < 0) {, +                context.size(0);, +                        context.size(parser.intValue());, +                        if (context.size() < 0) {, +                            throw new ElasticsearchParseException("size is set to [" + context.size() + "] and is expected to be higher or equal to 0");, +                    if (!context.limit || count < context.size()) {, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +            this.size = context.size();, +            topDocsCollector = TopScoreDocCollector.create(context.size(), false);, +            this.size = context.size();, +++ b/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +        client().admin().indices().prepareCreate("my-index"), +                .addMapping("my-type", "level", "type=integer"), +                .get();, +                .get();, +                .get();]