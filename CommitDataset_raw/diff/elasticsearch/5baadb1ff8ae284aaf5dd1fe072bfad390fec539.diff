[+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/TemplateUpgradeService.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +, +                final ThreadContext threadContext = threadPool.getThreadContext();, +                try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +                    threadContext.markAsSystemContext();, +    }, +        if (threadPool.getThreadContext().isSystemContext() == false) {, +            throw new IllegalStateException("template updates from the template upgrade service should always happen in a system context");, +        }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/TemplateUpgradeService.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +, +                final ThreadContext threadContext = threadPool.getThreadContext();, +                try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {, +                    threadContext.markAsSystemContext();, +    }, +        if (threadPool.getThreadContext().isSystemContext() == false) {, +            throw new IllegalStateException("template updates from the template upgrade service should always happen in a system context");, +        }, +, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/TemplateUpgradeServiceTests.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import static org.hamcrest.Matchers.containsString;, +        ThreadPool threadPool = mock(ThreadPool.class);, +        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);, +        when(threadPool.getThreadContext()).thenReturn(threadContext);, +        TemplateUpgradeService service = new TemplateUpgradeService(Settings.EMPTY, mockClient, clusterService, threadPool,, +        IllegalStateException ise = expectThrows(IllegalStateException.class, () -> service.updateTemplates(additions, deletions));, +        assertThat(ise.getMessage(), containsString("template upgrade service should always happen in a system context"));, +, +        threadContext.markAsSystemContext();, +        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);, +        when(threadPool.getThreadContext()).thenReturn(threadContext);, +            assertTrue(threadContext.isSystemContext());]