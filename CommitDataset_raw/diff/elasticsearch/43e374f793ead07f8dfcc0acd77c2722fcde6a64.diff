[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +        for (int requestIndex = 0; requestIndex < request.items().length; requestIndex++) {, +            BulkItemRequest item = request.items()[requestIndex];, +                    responses[requestIndex] = new BulkItemResponse(item.id(), indexRequest.opType().lowercase(), indexResponse);, +                    preVersions[requestIndex] = result.preVersion;, +                        ops[requestIndex] = result.op;, +                        for (int j = 0; j < requestIndex; j++) {, +                    responses[requestIndex] = new BulkItemResponse(item.id(), indexRequest.opType().lowercase(),, +                    request.items()[requestIndex] = null;, +                    responses[requestIndex] = new BulkItemResponse(item.id(), "delete", deleteResponse);, +                        for (int j = 0; j < requestIndex; j++) {, +                    responses[requestIndex] = new BulkItemResponse(item.id(), "delete",, +                    request.items()[requestIndex] = null;, +                //  We need to do the requested retries plus the initial attempt. We don't do < 1+retry_on_conflict because retry_on_conflict may be Integer.MAX_VALUE, +                for (int updateAttemptsCount = 0; updateAttemptsCount <= updateRequest.retryOnConflict(); updateAttemptsCount++) {, +, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update", updateResponse);, +                                preVersions[requestIndex] = result.preVersion;, +                                    ops[requestIndex] = result.op;, +                                request.items()[requestIndex] = new BulkItemRequest(request.items()[requestIndex].id(), indexRequest);, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update", updateResponse);, +                                request.items()[requestIndex] = new BulkItemRequest(request.items()[requestIndex].id(), deleteRequest);, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update", updateResult.noopResult);, +                                request.items()[requestIndex] = null; // No need to go to the replica, +                        if (updateResult.retry) {, +                            // updateAttemptCount is 0 based and marks current attempt, if it's equal to retryOnConflict we are going out of the iteration, +                            if (updateAttemptsCount >= updateRequest.retryOnConflict()) {, +                                // we can't try any more, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update",, +                                        new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), ExceptionsHelper.detailedMessage(t)));;, +, +                                request.items()[requestIndex] = null; // do not send to replicas, +                          }, +                        }, +                        else {, +                                for (int j = 0; j < requestIndex; j++) {, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), ExceptionsHelper.detailedMessage(t)));, +                                        responses[requestIndex] = new BulkItemResponse(item.id(), indexRequest.opType().lowercase(),, +                                        responses[requestIndex] = new BulkItemResponse(item.id(), "delete",, +                            request.items()[requestIndex] = null;, +, +            assert responses[requestIndex] != null; // we must have set a response somewhere., +, +        }, +, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +        for (int requestIndex = 0; requestIndex < request.items().length; requestIndex++) {, +            BulkItemRequest item = request.items()[requestIndex];, +                    responses[requestIndex] = new BulkItemResponse(item.id(), indexRequest.opType().lowercase(), indexResponse);, +                    preVersions[requestIndex] = result.preVersion;, +                        ops[requestIndex] = result.op;, +                        for (int j = 0; j < requestIndex; j++) {, +                    responses[requestIndex] = new BulkItemResponse(item.id(), indexRequest.opType().lowercase(),, +                    request.items()[requestIndex] = null;, +                    responses[requestIndex] = new BulkItemResponse(item.id(), "delete", deleteResponse);, +                        for (int j = 0; j < requestIndex; j++) {, +                    responses[requestIndex] = new BulkItemResponse(item.id(), "delete",, +                    request.items()[requestIndex] = null;, +                //  We need to do the requested retries plus the initial attempt. We don't do < 1+retry_on_conflict because retry_on_conflict may be Integer.MAX_VALUE, +                for (int updateAttemptsCount = 0; updateAttemptsCount <= updateRequest.retryOnConflict(); updateAttemptsCount++) {, +, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update", updateResponse);, +                                preVersions[requestIndex] = result.preVersion;, +                                    ops[requestIndex] = result.op;, +                                request.items()[requestIndex] = new BulkItemRequest(request.items()[requestIndex].id(), indexRequest);, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update", updateResponse);, +                                request.items()[requestIndex] = new BulkItemRequest(request.items()[requestIndex].id(), deleteRequest);, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update", updateResult.noopResult);, +                                request.items()[requestIndex] = null; // No need to go to the replica, +                        if (updateResult.retry) {, +                            // updateAttemptCount is 0 based and marks current attempt, if it's equal to retryOnConflict we are going out of the iteration, +                            if (updateAttemptsCount >= updateRequest.retryOnConflict()) {, +                                // we can't try any more, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update",, +                                        new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), ExceptionsHelper.detailedMessage(t)));;, +, +                                request.items()[requestIndex] = null; // do not send to replicas, +                          }, +                        }, +                        else {, +                                for (int j = 0; j < requestIndex; j++) {, +                                responses[requestIndex] = new BulkItemResponse(item.id(), "update", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), ExceptionsHelper.detailedMessage(t)));, +                                        responses[requestIndex] = new BulkItemResponse(item.id(), indexRequest.opType().lowercase(),, +                                        responses[requestIndex] = new BulkItemResponse(item.id(), "delete",, +                            request.items()[requestIndex] = null;, +, +            assert responses[requestIndex] != null; // we must have set a response somewhere., +, +        }, +, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +                    } catch (Throwable e1) {, +            } catch (Throwable e) {, +                            } catch (Throwable e) {, +                    } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +        for (int requestIndex = 0; requestIndex < request.items().length; requestIndex++) {, +            BulkItemRequest item = request.items()[requestIndex];, +                    responses[requestIndex] = new BulkItemResponse(item.id(), indexRequest.opType().lowercase(), indexResponse);, +                    preVersions[requestIndex] = result.preVersion;]