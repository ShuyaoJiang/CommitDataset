[+++ b/docs/reference/query-dsl/full-text-queries.asciidoc, +<<query-dsl-intervals-query,`intervals` query>>::, +, +    A full text query that allows fine-grained control of the ordering and, +    proximity of matching terms, +, +, +include::intervals-query.asciidoc[], +++ b/docs/reference/query-dsl/full-text-queries.asciidoc, +<<query-dsl-intervals-query,`intervals` query>>::, +, +    A full text query that allows fine-grained control of the ordering and, +    proximity of matching terms, +, +, +include::intervals-query.asciidoc[], +++ b/docs/reference/query-dsl/intervals-query.asciidoc, +[[query-dsl-intervals-query]], +=== Intervals query, +, +An `intervals` query allows fine-grained control over the order and proximity of, +matching terms.  Matching rules are constructed from a small set of definitions,, +and the rules are then applied to terms from a particular `field`., +, +The definitions produce sequences of minimal intervals that span terms in a, +body of text.  These intervals can be further combined and filtered by, +parent sources., +, +The example below will search for the phrase `my favourite food` appearing, +before the terms `hot` and `water` or `cold` and `porridge` in any order, in, +the field `my_text`, +, +[source,js], +--------------------------------------------------, +POST _search, +{, +  "query": {, +    "intervals" : {, +      "my_text" : {, +        "all_of" : {, +          "ordered" : true,, +          "intervals" : [, +            {, +              "match" : {, +                "query" : "my favourite food",, +                "max_gaps" : 0,, +                "ordered" : true, +              }, +            },, +            {, +              "any_of" : {, +                "intervals" : [, +                  { "match" : { "query" : "hot water" } },, +                  { "match" : { "query" : "cold porridge" } }, +                ], +              }, +            }, +          ], +        },, +        "boost" : 2.0,, +        "_name" : "favourite_food", +      }, +    }, +  }, +}, +--------------------------------------------------, +// CONSOLE, +, +In the above example, the text `my favourite food is cold porridge` would, +match because the two intervals matching `my favourite food` and `cold, +porridge` appear in the correct order, but the text `when it's cold my, +favourite food is porridge` would not match, because the interval matching, +`cold porridge` starts before the interval matching `my favourite food`., +, +[[intervals-match]], +==== `match`, +, +The `match` rule matches analyzed text, and takes the following parameters:, +, +[horizontal], +`query`::, +The text to match., +`max_gaps`::, +Specify a maximum number of gaps between the terms in the text.  Terms that, +appear further apart than this will not match. If unspecified, or set to -1,, +then there is no width restriction on the match.  If set to 0 then the terms, +must appear next to each other., +`ordered`::, +Whether or not the terms must appear in their specified order.  Defaults to, +`false`, +`analyzer`::, +Which analyzer should be used to analyze terms in the `query`.  By, +default, the search analyzer of the top-level field will be used., +`filter`::, +An optional <<interval_filter,interval filter>>, +, +[[intervals-all_of]], +==== `all_of`, +, +`all_of` returns returns matches that span a combination of other rules.]