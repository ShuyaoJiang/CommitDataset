[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/monitor/memory/SimpleMemoryMonitorBenchmark.java, +import org.elasticsearch.node.Node;, +import static org.elasticsearch.node.NodeBuilder.*;, +        Node node1 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server1")).node();, +        Node node2 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server2")).node();, +        Client client1 = node1.client();, +        node1.close();, +        node2.close();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/monitor/memory/SimpleMemoryMonitorBenchmark.java, +import org.elasticsearch.node.Node;, +import static org.elasticsearch.node.NodeBuilder.*;, +        Node node1 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server1")).node();, +        Node node2 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server2")).node();, +        Client client1 = node1.client();, +        node1.close();, +        node2.close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdown.java, +import org.elasticsearch.node.Node;, +    private final Node node;, +                                          Node node) {, +        this.node = node;, +                node.close();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/monitor/memory/SimpleMemoryMonitorBenchmark.java, +import org.elasticsearch.node.Node;, +import static org.elasticsearch.node.NodeBuilder.*;, +        Node node1 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server1")).node();, +        Node node2 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server2")).node();, +        Client client1 = node1.client();, +        node1.close();, +        node2.close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdown.java, +import org.elasticsearch.node.Node;, +    private final Node node;, +                                          Node node) {, +        this.node = node;, +                node.close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +import org.elasticsearch.node.internal.InternalSettingsPerparer;, +    private Node node;, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(tuple.v1()).loadConfigSettings(false);, +        node = nodeBuilder.build();, +                    node.close();, +        node.start();, +        node.stop();, +        node.close();, +            if (bootstrap.node != null) {, +                logger = Loggers.getLogger(Bootstrap.class, bootstrap.node.settings().get("name"));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/monitor/memory/SimpleMemoryMonitorBenchmark.java, +import org.elasticsearch.node.Node;, +import static org.elasticsearch.node.NodeBuilder.*;, +        Node node1 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server1")).node();, +        Node node2 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server2")).node();, +        Client client1 = node1.client();, +        node1.close();, +        node2.close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdown.java, +import org.elasticsearch.node.Node;, +    private final Node node;, +                                          Node node) {, +        this.node = node;, +                node.close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +import org.elasticsearch.node.internal.InternalSettingsPerparer;, +    private Node node;, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(tuple.v1()).loadConfigSettings(false);, +        node = nodeBuilder.build();, +                    node.close();, +        node.start();, +        node.stop();, +        node.close();, +            if (bootstrap.node != null) {, +                logger = Loggers.getLogger(Bootstrap.class, bootstrap.node.settings().get("name"));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/Client.java, + * <p>A client can either be retrieved from a {@link org.elasticsearch.node.Node} started, or connected remotely, + * @see org.elasticsearch.node.Node#client(), +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/monitor/memory/SimpleMemoryMonitorBenchmark.java, +import org.elasticsearch.node.Node;, +import static org.elasticsearch.node.NodeBuilder.*;, +        Node node1 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server1")).node();, +        Node node2 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "server2")).node();, +        Client client1 = node1.client();, +        node1.close();, +        node2.close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdown.java, +import org.elasticsearch.node.Node;, +    private final Node node;, +                                          Node node) {, +        this.node = node;, +                node.close();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +import org.elasticsearch.node.internal.InternalSettingsPerparer;, +    private Node node;, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(tuple.v1()).loadConfigSettings(false);, +        node = nodeBuilder.build();]