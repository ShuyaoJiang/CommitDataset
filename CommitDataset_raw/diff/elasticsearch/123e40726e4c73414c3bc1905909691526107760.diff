[+++ b/core/src/main/java/org/elasticsearch/common/rounding/DateTimeUnit.java, +    WEEK_OF_WEEKYEAR(   (byte) 1, ISOChronology.getInstanceUTC().weekOfWeekyear()),, +    YEAR_OF_CENTURY(    (byte) 2, ISOChronology.getInstanceUTC().yearOfCentury()),, +    QUARTER(            (byte) 3, Joda.QuarterOfYear.getField(ISOChronology.getInstanceUTC())),, +    MONTH_OF_YEAR(      (byte) 4, ISOChronology.getInstanceUTC().monthOfYear()),, +    DAY_OF_MONTH(       (byte) 5, ISOChronology.getInstanceUTC().dayOfMonth()),, +    HOUR_OF_DAY(        (byte) 6, ISOChronology.getInstanceUTC().hourOfDay()),, +    MINUTES_OF_HOUR(    (byte) 7, ISOChronology.getInstanceUTC().minuteOfHour()),, +    SECOND_OF_MINUTE(   (byte) 8, ISOChronology.getInstanceUTC().secondOfMinute());, +    private final DateTimeField field;, +    private DateTimeUnit(byte id, DateTimeField field) {, +        this.field = field;, +    public DateTimeField field() {, +        return field;, +    }, +, +     * @param unit the {@link DateTimeUnit} to check, +     * @return true if the unit is a day or longer, +    public static boolean isDayOrLonger(DateTimeUnit unit) {, +        return (unit == DateTimeUnit.HOUR_OF_DAY || unit == DateTimeUnit.MINUTES_OF_HOUR, +                || unit == DateTimeUnit.SECOND_OF_MINUTE) == false;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/DateTimeUnit.java, +    WEEK_OF_WEEKYEAR(   (byte) 1, ISOChronology.getInstanceUTC().weekOfWeekyear()),, +    YEAR_OF_CENTURY(    (byte) 2, ISOChronology.getInstanceUTC().yearOfCentury()),, +    QUARTER(            (byte) 3, Joda.QuarterOfYear.getField(ISOChronology.getInstanceUTC())),, +    MONTH_OF_YEAR(      (byte) 4, ISOChronology.getInstanceUTC().monthOfYear()),, +    DAY_OF_MONTH(       (byte) 5, ISOChronology.getInstanceUTC().dayOfMonth()),, +    HOUR_OF_DAY(        (byte) 6, ISOChronology.getInstanceUTC().hourOfDay()),, +    MINUTES_OF_HOUR(    (byte) 7, ISOChronology.getInstanceUTC().minuteOfHour()),, +    SECOND_OF_MINUTE(   (byte) 8, ISOChronology.getInstanceUTC().secondOfMinute());, +    private final DateTimeField field;, +    private DateTimeUnit(byte id, DateTimeField field) {, +        this.field = field;, +    public DateTimeField field() {, +        return field;, +    }, +, +     * @param unit the {@link DateTimeUnit} to check, +     * @return true if the unit is a day or longer, +    public static boolean isDayOrLonger(DateTimeUnit unit) {, +        return (unit == DateTimeUnit.HOUR_OF_DAY || unit == DateTimeUnit.MINUTES_OF_HOUR, +                || unit == DateTimeUnit.SECOND_OF_MINUTE) == false;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +import org.joda.time.DurationField;, +        private DurationField durationField;, +            this.field = unit.field();, +            this.durationField = field.getDurationField();, +            long timeLocal = utcMillis;, +            timeLocal = timeZone.convertUTCToLocal(utcMillis);, +            long rounded = field.roundFloor(timeLocal);, +            return timeZone.convertLocalToUTC(rounded, false, utcMillis);, +        public long nextRoundingValue(long time) {, +            if (DateTimeUnit.isDayOrLonger(unit)) {, +                time = timeZone.convertUTCToLocal(time);, +            long next = durationField.add(time, 1);, +            if (DateTimeUnit.isDayOrLonger(unit)) {, +                return timeZone.convertLocalToUTC(next, false);, +            } else {, +        }, +            field = unit.field();, +            durationField = field.getDurationField();, +++ b/core/src/main/java/org/elasticsearch/common/rounding/DateTimeUnit.java, +    WEEK_OF_WEEKYEAR(   (byte) 1, ISOChronology.getInstanceUTC().weekOfWeekyear()),, +    YEAR_OF_CENTURY(    (byte) 2, ISOChronology.getInstanceUTC().yearOfCentury()),, +    QUARTER(            (byte) 3, Joda.QuarterOfYear.getField(ISOChronology.getInstanceUTC())),, +    MONTH_OF_YEAR(      (byte) 4, ISOChronology.getInstanceUTC().monthOfYear()),, +    DAY_OF_MONTH(       (byte) 5, ISOChronology.getInstanceUTC().dayOfMonth()),, +    HOUR_OF_DAY(        (byte) 6, ISOChronology.getInstanceUTC().hourOfDay()),, +    MINUTES_OF_HOUR(    (byte) 7, ISOChronology.getInstanceUTC().minuteOfHour()),, +    SECOND_OF_MINUTE(   (byte) 8, ISOChronology.getInstanceUTC().secondOfMinute());, +    private final DateTimeField field;, +    private DateTimeUnit(byte id, DateTimeField field) {, +        this.field = field;, +    public DateTimeField field() {, +        return field;, +    }, +, +     * @param unit the {@link DateTimeUnit} to check, +     * @return true if the unit is a day or longer, +    public static boolean isDayOrLonger(DateTimeUnit unit) {, +        return (unit == DateTimeUnit.HOUR_OF_DAY || unit == DateTimeUnit.MINUTES_OF_HOUR, +                || unit == DateTimeUnit.SECOND_OF_MINUTE) == false;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +import org.joda.time.DurationField;, +        private DurationField durationField;, +            this.field = unit.field();, +            this.durationField = field.getDurationField();, +            long timeLocal = utcMillis;, +            timeLocal = timeZone.convertUTCToLocal(utcMillis);, +            long rounded = field.roundFloor(timeLocal);, +            return timeZone.convertLocalToUTC(rounded, false, utcMillis);, +        public long nextRoundingValue(long time) {, +            if (DateTimeUnit.isDayOrLonger(unit)) {, +                time = timeZone.convertUTCToLocal(time);, +            long next = durationField.add(time, 1);, +            if (DateTimeUnit.isDayOrLonger(unit)) {, +                return timeZone.convertLocalToUTC(next, false);, +            } else {, +        }, +            field = unit.field();]