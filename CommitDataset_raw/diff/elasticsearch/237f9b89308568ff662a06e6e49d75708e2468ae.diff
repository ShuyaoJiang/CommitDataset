[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);, +            if (handlingSettings.isCorsEnabled()) {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);, +            if (handlingSettings.isCorsEnabled()) {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);;, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);, +            if (handlingSettings.isCorsEnabled()) {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);;, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/HttpReadWriteHandlerTests.java, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;, +            SETTING_PIPELINING_MAX_EVENTS.getDefault(settings),, +            SETTING_CORS_ENABLED.getDefault(settings));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);, +            if (handlingSettings.isCorsEnabled()) {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);;, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/HttpReadWriteHandlerTests.java, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;, +            SETTING_PIPELINING_MAX_EVENTS.getDefault(settings),, +            SETTING_CORS_ENABLED.getDefault(settings));, +++ b/qa/smoke-test-http/build.gradle, +    testCompile project(path: ':plugins:transport-nio', configuration: 'runtime') // for http, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);, +            if (handlingSettings.isCorsEnabled()) {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);;, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/HttpReadWriteHandlerTests.java, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;, +            SETTING_PIPELINING_MAX_EVENTS.getDefault(settings),, +            SETTING_CORS_ENABLED.getDefault(settings));, +++ b/qa/smoke-test-http/build.gradle, +    testCompile project(path: ':plugins:transport-nio', configuration: 'runtime') // for http, +++ b/qa/smoke-test-http/src/test/java/org/elasticsearch/http/HttpSmokeTestCase.java, +import org.elasticsearch.transport.nio.NioTransportPlugin;, +        nodeTransportTypeKey = getTypeKey(randomFrom(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class));, +        nodeHttpTypeKey = getHttpTypeKey(randomFrom(Netty4Plugin.class, NioTransportPlugin.class));, +        clientTypeKey = getTypeKey(randomFrom(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class));, +        } else if (clazz.equals(NioTransportPlugin.class)) {, +            return NioTransportPlugin.NIO_TRANSPORT_NAME;, +    private static String getHttpTypeKey(Class<? extends Plugin> clazz) {, +        if (clazz.equals(NioTransportPlugin.class)) {, +            return NioTransportPlugin.NIO_HTTP_TRANSPORT_NAME;, +        } else {, +            assert clazz.equals(Netty4Plugin.class);, +            return Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME;, +        }, +    }, +, +        return Arrays.asList(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class);, +        return Arrays.asList(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class);, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);, +            if (handlingSettings.isCorsEnabled()) {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);;, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/HttpReadWriteHandlerTests.java, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;, +            SETTING_PIPELINING_MAX_EVENTS.getDefault(settings),, +            SETTING_CORS_ENABLED.getDefault(settings));, +++ b/qa/smoke-test-http/build.gradle, +    testCompile project(path: ':plugins:transport-nio', configuration: 'runtime') // for http, +++ b/qa/smoke-test-http/src/test/java/org/elasticsearch/http/HttpSmokeTestCase.java, +import org.elasticsearch.transport.nio.NioTransportPlugin;, +        nodeTransportTypeKey = getTypeKey(randomFrom(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class));, +        nodeHttpTypeKey = getHttpTypeKey(randomFrom(Netty4Plugin.class, NioTransportPlugin.class));, +        clientTypeKey = getTypeKey(randomFrom(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class));, +        } else if (clazz.equals(NioTransportPlugin.class)) {, +            return NioTransportPlugin.NIO_TRANSPORT_NAME;, +    private static String getHttpTypeKey(Class<? extends Plugin> clazz) {, +        if (clazz.equals(NioTransportPlugin.class)) {, +            return NioTransportPlugin.NIO_HTTP_TRANSPORT_NAME;, +        } else {, +            assert clazz.equals(Netty4Plugin.class);, +            return Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME;, +        }, +    }, +, +        return Arrays.asList(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class);, +        return Arrays.asList(getTestTransportPlugin(), Netty4Plugin.class, NioTransportPlugin.class);, +++ b/server/src/main/java/org/elasticsearch/http/HttpHandlingSettings.java, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;, +                                int pipeliningMaxEvents, boolean corsEnabled) {, +        this.corsEnabled = corsEnabled;, +            SETTING_PIPELINING_MAX_EVENTS.get(settings),, +            SETTING_CORS_ENABLED.get(settings));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);, +            if (handlingSettings.isCorsEnabled()) {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +        this.httpHandlingSettings = HttpHandlingSettings.fromSettings(settings);;, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/HttpReadWriteHandlerTests.java, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;, +            SETTING_PIPELINING_MAX_EVENTS.getDefault(settings),]