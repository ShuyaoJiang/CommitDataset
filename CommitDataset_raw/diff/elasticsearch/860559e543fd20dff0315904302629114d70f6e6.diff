[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AbstractHistogramBuilder.java, +            extendedBounds = new ExtendedBounds(in);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AbstractHistogramBuilder.java, +            extendedBounds = new ExtendedBounds(in);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/ExtendedBounds.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.search.SearchParseException;, +public class ExtendedBounds implements ToXContent, Writeable<ExtendedBounds> {, +    ExtendedBounds() {} //for parsing, +    /**, +     * Read from a stream., +     */, +    public ExtendedBounds(StreamInput in) throws IOException {, +        if (in.readBoolean()) {, +            min = in.readLong();, +        }, +        if (in.readBoolean()) {, +            max = in.readLong();, +        }, +        minAsStr = in.readOptionalString();, +        maxAsStr = in.readOptionalString();, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        if (min != null) {, +            out.writeBoolean(true);, +            out.writeLong(min);, +        } else {, +            out.writeBoolean(false);, +        }, +        if (max != null) {, +            out.writeBoolean(true);, +            out.writeLong(max);, +        } else {, +            out.writeBoolean(false);, +        }, +        out.writeOptionalString(minAsStr);, +        out.writeOptionalString(maxAsStr);, +    }, +, +, +    public static ExtendedBounds fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher, String aggregationName), +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AbstractHistogramBuilder.java, +            extendedBounds = new ExtendedBounds(in);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/ExtendedBounds.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.search.SearchParseException;, +public class ExtendedBounds implements ToXContent, Writeable<ExtendedBounds> {, +    ExtendedBounds() {} //for parsing, +    /**, +     * Read from a stream., +     */, +    public ExtendedBounds(StreamInput in) throws IOException {, +        if (in.readBoolean()) {, +            min = in.readLong();, +        }, +        if (in.readBoolean()) {, +            max = in.readLong();, +        }, +        minAsStr = in.readOptionalString();, +        maxAsStr = in.readOptionalString();, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        if (min != null) {, +            out.writeBoolean(true);, +            out.writeLong(min);, +        } else {, +            out.writeBoolean(false);, +        }, +        if (max != null) {, +            out.writeBoolean(true);, +            out.writeLong(max);, +        } else {, +            out.writeBoolean(false);, +        }, +        out.writeOptionalString(minAsStr);, +        out.writeOptionalString(maxAsStr);, +    }, +, +, +    public static ExtendedBounds fromXContent(XContentParser parser, ParseFieldMatcher parseFieldMatcher, String aggregationName), +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramParser.java, +                ExtendedBounds extendedBounds = ExtendedBounds.fromXContent(parser, parseFieldMatcher, aggregationName);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/AbstractHistogramBuilder.java, +            extendedBounds = new ExtendedBounds(in);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/ExtendedBounds.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.search.SearchParseException;, +public class ExtendedBounds implements ToXContent, Writeable<ExtendedBounds> {, +    ExtendedBounds() {} //for parsing, +    /**, +     * Read from a stream., +     */, +    public ExtendedBounds(StreamInput in) throws IOException {, +        if (in.readBoolean()) {, +            min = in.readLong();, +        }]