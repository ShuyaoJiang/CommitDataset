[+++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, +import java.nio.file.Path;, +, +    public void delete(Path path) {, +        project.delete(path.toFile());, +    }, +++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, +import java.nio.file.Path;, +, +    public void delete(Path path) {, +        project.delete(path.toFile());, +    }, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java, +    public static final int CLEAN_WORKDIR_RETRIES = 3;, +        syncWithLinks(distroExtractDir, workingDir);, +    /**, +     * Does the equivalent of `cp -lr` and `chmod -r a-w` to save space and improve speed., +     * We remove write permissions to make sure files are note mistakenly edited ( e.x. the config file ) and changes, +     * reflected across all copies. Permissions are retained to be able to replace the links., +     *, +     * @param sourceRoot where to copy from, +     * @param destinationRoot destination to link to, +     */, +    private void syncWithLinks(Path sourceRoot, Path destinationRoot) {, +        if (Files.exists(destinationRoot)) {, +            services.delete(destinationRoot);, +        }, +, +        try (Stream<Path> stream = Files.walk(sourceRoot)) {, +            stream.forEach(source -> {, +                Path destination = destinationRoot.resolve(sourceRoot.relativize(source));, +                if (Files.isDirectory(source)) {, +                    try {, +                        Files.createDirectories(destination);, +                    } catch (IOException e) {, +                        throw new UncheckedIOException("Can't create directory " + destination.getParent(), e);, +                    }, +                } else {, +                    try {, +                        Files.createDirectories(destination.getParent());, +                    } catch (IOException e) {, +                        throw new UncheckedIOException("Can't create directory " + destination.getParent(), e);, +                    }, +                    try {, +                        Files.createLink(destination, source);, +                    } catch (IOException e) {, +                        // Note does not work for network drives, e.g. Vagrant, +                        throw new UncheckedIOException(, +                            "Failed to create hard link " + destination + " pointing to " + source, e, +                        );, +                    }, +                }, +            });, +        } catch (IOException e) {, +            throw new UncheckedIOException("Can't walk source " + sourceRoot, e);, +        }, +    }, +, +            // We create hard links  for the distribution, so we need to remove the config file before writing it, +            // to prevent the changes to reflect across all copies., +            Files.delete(configFile);]