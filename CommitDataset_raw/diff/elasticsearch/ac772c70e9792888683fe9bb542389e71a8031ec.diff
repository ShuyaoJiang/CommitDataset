[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/derivative/DerivativeParser.java, +        GapPolicy gapPolicy = null;, +        DerivativePipelineAggregator.Factory factory = new DerivativePipelineAggregator.Factory(pipelineAggregatorName, bucketsPaths);, +            factory.format(format);, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +            factory.units(units);, +        return factory;, +        return new DerivativePipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/derivative/DerivativeParser.java, +        GapPolicy gapPolicy = null;, +        DerivativePipelineAggregator.Factory factory = new DerivativePipelineAggregator.Factory(pipelineAggregatorName, bucketsPaths);, +            factory.format(format);, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +            factory.units(units);, +        return factory;, +        return new DerivativePipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/derivative/DerivativePipelineAggregator.java, +import org.elasticsearch.common.rounding.DateTimeUnit;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.support.format.ValueFormat;, +import java.util.Objects;, +        private String format;, +        private GapPolicy gapPolicy = GapPolicy.SKIP;, +        private String units;, +        public Factory(String name, String[] bucketsPaths) {, +        }, +, +        public void format(String format) {, +            this.format = format;, +        }, +, +        public void gapPolicy(GapPolicy gapPolicy) {, +        }, +, +        public void units(String units) {, +            this.units = units;, +            ValueFormatter formatter;, +            if (format != null) {, +                formatter = ValueFormat.Patternable.Number.format(format).formatter();, +            } else {, +                formatter = ValueFormatter.RAW;, +            }, +            Long xAxisUnits = null;, +            if (units != null) {, +                DateTimeUnit dateTimeUnit = HistogramAggregator.DateHistogramFactory.DATE_FIELD_UNITS.get(units);, +                if (dateTimeUnit != null) {, +                    xAxisUnits = dateTimeUnit.field().getDurationField().getUnitMillis();, +                } else {, +                    TimeValue timeValue = TimeValue.parseTimeValue(units, null, getClass().getSimpleName() + ".unit");, +                    if (timeValue != null) {, +                        xAxisUnits = timeValue.getMillis();, +                    }, +                }, +            }, +        @Override, +        protected PipelineAggregatorFactory doReadFrom(String name, String[] bucketsPaths, StreamInput in) throws IOException {, +            Factory factory = new Factory(name, bucketsPaths);, +            factory.format = in.readOptionalString();, +            if (in.readBoolean()) {, +                factory.gapPolicy = GapPolicy.readFrom(in);, +            }, +            factory.units = in.readOptionalString();, +            return factory;, +        }, +, +        @Override, +        protected void doWriteTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(format);, +            boolean hasGapPolicy = gapPolicy != null;, +            out.writeBoolean(hasGapPolicy);, +            if (hasGapPolicy) {, +                gapPolicy.writeTo(out);, +            }, +            out.writeOptionalString(units);, +        }, +, +        @Override, +        protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {, +            if (format != null) {, +                builder.field(DerivativeParser.FORMAT.getPreferredName(), format);, +            }, +            if (gapPolicy != null) {, +                builder.field(DerivativeParser.GAP_POLICY.getPreferredName(), gapPolicy.getName());, +            }, +            if (units != null) {, +                builder.field(DerivativeParser.UNIT.getPreferredName(), units);, +            }, +            return builder;, +        }, +, +        @Override, +        protected boolean doEquals(Object obj) {, +            Factory other = (Factory) obj;, +            if (!Objects.equals(format, other.format)) {, +                return false;]