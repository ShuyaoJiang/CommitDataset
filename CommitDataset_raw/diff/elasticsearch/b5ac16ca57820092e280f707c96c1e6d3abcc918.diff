[+++ b/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        Setting.timeSetting("thread_pool.estimated_time_interval",, +            TimeValue.timeValueMillis(200), TimeValue.ZERO, Setting.Property.NodeScope);, +         * <p>, +         * If {@link ThreadPool#ESTIMATED_TIME_INTERVAL_SETTING} is set to 0, +         * then the cache is disabled and the method calls {@link System#nanoTime()}, +         * whenever called. Typically used for testing., +            if (0 < interval) {, +            return TimeValue.nsecToMSec(System.nanoTime());, +        }, +         * <p>, +         * If {@link ThreadPool#ESTIMATED_TIME_INTERVAL_SETTING} is set to 0, +         * then the cache is disabled and the method calls {@link System#currentTimeMillis()}, +         * whenever called. Typically used for testing., +            if (0 < interval) {, +            return System.currentTimeMillis();, +        }, +            while (running && 0 < interval) {, +++ b/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        Setting.timeSetting("thread_pool.estimated_time_interval",, +            TimeValue.timeValueMillis(200), TimeValue.ZERO, Setting.Property.NodeScope);, +         * <p>, +         * If {@link ThreadPool#ESTIMATED_TIME_INTERVAL_SETTING} is set to 0, +         * then the cache is disabled and the method calls {@link System#nanoTime()}, +         * whenever called. Typically used for testing., +            if (0 < interval) {, +            return TimeValue.nsecToMSec(System.nanoTime());, +        }, +         * <p>, +         * If {@link ThreadPool#ESTIMATED_TIME_INTERVAL_SETTING} is set to 0, +         * then the cache is disabled and the method calls {@link System#currentTimeMillis()}, +         * whenever called. Typically used for testing., +            if (0 < interval) {, +            return System.currentTimeMillis();, +        }, +            while (running && 0 < interval) {, +++ b/server/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java, +import org.elasticsearch.threadpool.ThreadPool;, +import static org.hamcrest.Matchers.greaterThan;, +    /**, +     * Needed by {@link UpdateSettingsIT#testEngineGCDeletesSetting()}, +     */, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return Settings.builder().put(super.nodeSettings(nodeOrdinal)), +            .put("thread_pool.estimated_time_interval", 0), +            .build();, +    }, +, +    public void testEngineGCDeletesSetting() throws Exception {, +        assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.gc_deletes", 0)));, +, +        // Make sure the time has advanced for InternalEngine#resolveDocVersion(), +        for (ThreadPool threadPool : internalCluster().getInstances(ThreadPool.class)) {, +            long startTime = threadPool.relativeTimeInMillis();, +            assertBusy(() -> assertThat(threadPool.relativeTimeInMillis(), greaterThan(startTime)));, +        }, +, +++ b/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        Setting.timeSetting("thread_pool.estimated_time_interval",, +            TimeValue.timeValueMillis(200), TimeValue.ZERO, Setting.Property.NodeScope);, +         * <p>, +         * If {@link ThreadPool#ESTIMATED_TIME_INTERVAL_SETTING} is set to 0, +         * then the cache is disabled and the method calls {@link System#nanoTime()}, +         * whenever called. Typically used for testing., +            if (0 < interval) {, +            return TimeValue.nsecToMSec(System.nanoTime());, +        }, +         * <p>, +         * If {@link ThreadPool#ESTIMATED_TIME_INTERVAL_SETTING} is set to 0, +         * then the cache is disabled and the method calls {@link System#currentTimeMillis()}, +         * whenever called. Typically used for testing., +            if (0 < interval) {, +            return System.currentTimeMillis();, +        }, +            while (running && 0 < interval) {, +++ b/server/src/test/java/org/elasticsearch/indices/settings/UpdateSettingsIT.java, +import org.elasticsearch.threadpool.ThreadPool;, +import static org.hamcrest.Matchers.greaterThan;, +    /**, +     * Needed by {@link UpdateSettingsIT#testEngineGCDeletesSetting()}, +     */, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return Settings.builder().put(super.nodeSettings(nodeOrdinal)), +            .put("thread_pool.estimated_time_interval", 0), +            .build();, +    }, +, +    public void testEngineGCDeletesSetting() throws Exception {, +        assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.gc_deletes", 0)));, +, +        // Make sure the time has advanced for InternalEngine#resolveDocVersion(), +        for (ThreadPool threadPool : internalCluster().getInstances(ThreadPool.class)) {, +            long startTime = threadPool.relativeTimeInMillis();, +            assertBusy(() -> assertThat(threadPool.relativeTimeInMillis(), greaterThan(startTime)));, +        }, +, +++ b/server/src/test/java/org/elasticsearch/threadpool/ThreadPoolTests.java, +import org.elasticsearch.common.settings.Settings;]