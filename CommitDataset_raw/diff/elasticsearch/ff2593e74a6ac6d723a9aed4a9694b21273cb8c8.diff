[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/CircleBuilder.java, +, +    static final CircleBuilder PROTOTYPE = new CircleBuilder();, +    private DistanceUnit unit = DistanceUnit.DEFAULT;, +     * Creates a circle centered at [0.0, 0.0]., +     * Center can be changed by calling {@link #center(Coordinate)} later., +     */, +    public CircleBuilder() {, +        this.center = ZERO_ZERO;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerIndexDynamicSetting(EngineConfig.INDEX_VERSION_MAP_SIZE, Validator.BYTES_SIZE_OR_PERCENTAGE);, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/CircleBuilder.java, +, +    static final CircleBuilder PROTOTYPE = new CircleBuilder();, +    private DistanceUnit unit = DistanceUnit.DEFAULT;, +     * Creates a circle centered at [0.0, 0.0]., +     * Center can be changed by calling {@link #center(Coordinate)} later., +     */, +    public CircleBuilder() {, +        this.center = ZERO_ZERO;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/CoordinateCollection.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.geo.builders;, +, +import com.vividsolutions.jts.geom.Coordinate;, +, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +, +/**, + * The {@link CoordinateCollection} is an abstract base implementation for {@link LineStringBuilder} and {@link MultiPointBuilder}., + * It holds a common list of {@link Coordinate}, provides setters for adding elements to the list and can render this to XContent., + */, +public abstract class CoordinateCollection<E extends CoordinateCollection<E>> extends ShapeBuilder {, +, +    protected final List<Coordinate> coordinates;, +, +    /**, +     * Construct a new collection of coordinates., +     * @param coordinates an initial list of coordinates, +     * @throws IllegalArgumentException if coordinates is <tt>null</tt> or empty, +     */, +    protected CoordinateCollection(List<Coordinate> coordinates) {, +        if (coordinates == null || coordinates.size() == 0) {, +            throw new IllegalArgumentException("cannot create point collection with empty set of points");, +        }, +        this.coordinates = coordinates;, +    }, +, +    @SuppressWarnings("unchecked"), +    private E thisRef() {, +        return (E)this;, +    }, +, +    /**, +     * Add a new coordinate to the collection, +     * @param longitude longitude of the coordinate, +     * @param latitude latitude of the coordinate, +     * @return this, +     */, +    public E coordinate(double longitude, double latitude) {, +        return this.coordinate(new Coordinate(longitude, latitude));, +    }, +, +    /**, +     * Add a new coordinate to the collection, +     * @param coordinate coordinate of the point, +     * @return this]