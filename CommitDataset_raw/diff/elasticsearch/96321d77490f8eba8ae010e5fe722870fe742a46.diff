[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]cluster[/\\]ClusterModuleTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]cluster[/\\]ClusterModuleTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +import static org.elasticsearch.action.admin.cluster.node.tasks.list.TransportListTasksAction.waitForTaskCompletion;, +                        waitForTaskCompletion(taskManager, runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]cluster[/\\]ClusterModuleTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +import static org.elasticsearch.action.admin.cluster.node.tasks.list.TransportListTasksAction.waitForTaskCompletion;, +                        waitForTaskCompletion(taskManager, runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.tasks.TaskManager;, +import static org.elasticsearch.common.unit.TimeValue.timeValueMillis;, +    public static void waitForTaskCompletion(TaskManager taskManager, Task task, long untilInNanos) {, +        while (System.nanoTime() - untilInNanos < 0) {, +            if (taskManager.getTask(task.getId()) == null) {, +                return;, +            }, +            try {, +                Thread.sleep(WAIT_FOR_COMPLETION_POLL.millis());, +            } catch (InterruptedException e) {, +                throw new ElasticsearchException("Interrupted waiting for completion of [{}]", e, task);, +            }, +        }, +        throw new ElasticsearchTimeoutException("Timed out waiting for completion of [{}]", task);, +    }, +    private static final TimeValue WAIT_FOR_COMPLETION_POLL = timeValueMillis(100);, +                waitForTaskCompletion(taskManager, task, timeoutNanos);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]cluster[/\\]ClusterModuleTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +import static org.elasticsearch.action.admin.cluster.node.tasks.list.TransportListTasksAction.waitForTaskCompletion;, +                        waitForTaskCompletion(taskManager, runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.tasks.TaskManager;, +import static org.elasticsearch.common.unit.TimeValue.timeValueMillis;, +    public static void waitForTaskCompletion(TaskManager taskManager, Task task, long untilInNanos) {, +        while (System.nanoTime() - untilInNanos < 0) {, +            if (taskManager.getTask(task.getId()) == null) {, +                return;, +            }, +            try {, +                Thread.sleep(WAIT_FOR_COMPLETION_POLL.millis());, +            } catch (InterruptedException e) {, +                throw new ElasticsearchException("Interrupted waiting for completion of [{}]", e, task);, +            }, +        }, +        throw new ElasticsearchTimeoutException("Timed out waiting for completion of [{}]", task);, +    }, +    private static final TimeValue WAIT_FOR_COMPLETION_POLL = timeValueMillis(100);, +                waitForTaskCompletion(taskManager, task, timeoutNanos);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]cluster[/\\]ClusterModuleTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +import static org.elasticsearch.action.admin.cluster.node.tasks.list.TransportListTasksAction.waitForTaskCompletion;, +                        waitForTaskCompletion(taskManager, runningTask, waitForCompletionTimeout(request.getTimeout()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.tasks.TaskManager;, +import static org.elasticsearch.common.unit.TimeValue.timeValueMillis;, +    public static void waitForTaskCompletion(TaskManager taskManager, Task task, long untilInNanos) {, +        while (System.nanoTime() - untilInNanos < 0) {, +            if (taskManager.getTask(task.getId()) == null) {, +                return;, +            }, +            try {, +                Thread.sleep(WAIT_FOR_COMPLETION_POLL.millis());, +            } catch (InterruptedException e) {, +                throw new ElasticsearchException("Interrupted waiting for completion of [{}]", e, task);, +            }, +        }, +        throw new ElasticsearchTimeoutException("Timed out waiting for completion of [{}]", task);, +    }, +    private static final TimeValue WAIT_FOR_COMPLETION_POLL = timeValueMillis(100);, +                waitForTaskCompletion(taskManager, task, timeoutNanos);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.indices.breaker.CircuitBreakerModule;, +import org.elasticsearch.threadpool.ThreadPoolModule;, +                modules.add(new SettingsModule(settings));, +                modules.add(new ThreadPoolModule(threadPool));, +                modules.add(new CircuitBreakerModule(settings));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]cluster[/\\]ClusterModuleTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.PersistedTaskInfo;, +import static org.elasticsearch.action.admin.cluster.node.tasks.list.TransportListTasksAction.waitForTaskCompletion;, +                        waitForTaskCompletion(taskManager, runningTask, waitForCompletionTimeout(request.getTimeout()));]