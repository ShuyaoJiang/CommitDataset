[+++ b/server/src/main/java/org/elasticsearch/transport/TransportActionProxy.java, +     * Unwraps a proxy action and returns the underlying action, +     */, +    public static String unwrapAction(String action) {, +        assert isProxyAction(action) : "Attempted to unwrap non-proxy action: " + action;, +        return action.substring(PROXY_ACTION_PREFIX.length());, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/transport/TransportActionProxy.java, +     * Unwraps a proxy action and returns the underlying action, +     */, +    public static String unwrapAction(String action) {, +        assert isProxyAction(action) : "Attempted to unwrap non-proxy action: " + action;, +        return action.substring(PROXY_ACTION_PREFIX.length());, +    }, +, +    /**, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/SystemPrivilege.java, +import org.elasticsearch.transport.TransportActionProxy;, +    private static final Predicate<String> ALLOWED_ACTIONS = Automatons.predicate(, +    );, +, +    private static final Predicate<String> PREDICATE = (action) -> {, +        // Only allow a proxy action if the underlying action is allowed, +        if (TransportActionProxy.isProxyAction(action)) {, +            return ALLOWED_ACTIONS.test(TransportActionProxy.unwrapAction(action));, +        } else {, +            return ALLOWED_ACTIONS.test(action);, +        }, +    };, +++ b/server/src/main/java/org/elasticsearch/transport/TransportActionProxy.java, +     * Unwraps a proxy action and returns the underlying action, +     */, +    public static String unwrapAction(String action) {, +        assert isProxyAction(action) : "Attempted to unwrap non-proxy action: " + action;, +        return action.substring(PROXY_ACTION_PREFIX.length());, +    }, +, +    /**, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/SystemPrivilege.java, +import org.elasticsearch.transport.TransportActionProxy;, +    private static final Predicate<String> ALLOWED_ACTIONS = Automatons.predicate(, +    );, +, +    private static final Predicate<String> PREDICATE = (action) -> {, +        // Only allow a proxy action if the underlying action is allowed, +        if (TransportActionProxy.isProxyAction(action)) {, +            return ALLOWED_ACTIONS.test(TransportActionProxy.unwrapAction(action));, +        } else {, +            return ALLOWED_ACTIONS.test(action);, +        }, +    };, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/PrivilegeTests.java, +        assertThat(predicate.test("internal:transport/proxy/indices:monitor/whatever"), is(true));]