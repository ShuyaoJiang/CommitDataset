[+++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesManagerService.java, +     * @return current {@link LicenseState}, +    LicenseState licenseState();, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesManagerService.java, +     * @return current {@link LicenseState}, +    LicenseState licenseState();, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +    public LicenseState licenseState() {, +        if (registeredLicensees.size() > 0) {, +            return registeredLicensees.get(0).currentLicenseState;, +        return null;, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesManagerService.java, +     * @return current {@link LicenseState}, +    LicenseState licenseState();, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +    public LicenseState licenseState() {, +        if (registeredLicensees.size() > 0) {, +            return registeredLicensees.get(0).currentLicenseState;, +        return null;, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/AbstractLicensesConsumerPluginIntegrationTestCase.java, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesManagerService.java, +     * @return current {@link LicenseState}, +    LicenseState licenseState();, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +    public LicenseState licenseState() {, +        if (registeredLicensees.size() > 0) {, +            return registeredLicensees.get(0).currentLicenseState;, +        return null;, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/AbstractLicensesConsumerPluginIntegrationTestCase.java, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/AbstractLicensesIntegrationTestCase.java, +    protected void assertLicenseeState(final LicenseState state) throws InterruptedException {, +        assertTrue("license should have status " + state.name(), awaitBusy(() -> {, +                if (managerService.licenseState() != state) {, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesManagerService.java, +     * @return current {@link LicenseState}, +    LicenseState licenseState();, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +    public LicenseState licenseState() {, +        if (registeredLicensees.size() > 0) {, +            return registeredLicensees.get(0).currentLicenseState;, +        return null;, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/AbstractLicensesConsumerPluginIntegrationTestCase.java, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/AbstractLicensesIntegrationTestCase.java, +    protected void assertLicenseeState(final LicenseState state) throws InterruptedException {, +        assertTrue("license should have status " + state.name(), awaitBusy(() -> {, +                if (managerService.licenseState() != state) {, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/LicensesPluginIntegrationTests.java, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.GRACE_PERIOD);, +        assertLicenseeState(LicenseState.DISABLED);, +        assertLicenseeState(LicenseState.ENABLED);, +        assertLicenseeState(LicenseState.ENABLED);]