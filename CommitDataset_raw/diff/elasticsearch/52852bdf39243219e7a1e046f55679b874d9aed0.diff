[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            bundledSignatures = ['jdk-unsafe', 'jdk-deprecated'], +                bundledSignatures += 'jdk-system-out', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            bundledSignatures = ['jdk-unsafe', 'jdk-deprecated'], +                bundledSignatures += 'jdk-system-out', +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_2_1_ID = 2020199;, +    public static final Version V_2_2_1 = new Version(V_2_2_1_ID, org.apache.lucene.util.Version.LUCENE_5_4_1);, +            case V_2_2_1_ID:, +                return V_2_2_1;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            bundledSignatures = ['jdk-unsafe', 'jdk-deprecated'], +                bundledSignatures += 'jdk-system-out', +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_2_1_ID = 2020199;, +    public static final Version V_2_2_1 = new Version(V_2_2_1_ID, org.apache.lucene.util.Version.LUCENE_5_4_1);, +            case V_2_2_1_ID:, +                return V_2_2_1;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    if (tryRenewSyncCommit() == false) {, +                        flush(false, true);, +                    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            bundledSignatures = ['jdk-unsafe', 'jdk-deprecated'], +                bundledSignatures += 'jdk-system-out', +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_2_1_ID = 2020199;, +    public static final Version V_2_2_1 = new Version(V_2_2_1_ID, org.apache.lucene.util.Version.LUCENE_5_4_1);, +            case V_2_2_1_ID:, +                return V_2_2_1;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    if (tryRenewSyncCommit() == false) {, +                        flush(false, true);, +                    }, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +           if (nodeEnv.hasNodeFile()) {, +                final boolean isAllocated = indexService != null && indexService.hasShard(shardId.id());, +                if (isAllocated) {, +                    return false; // we are allocated - can't delete the shard, +                } else if (indexSettings.hasCustomDataPath()) {, +                    // lets see if it's on a custom path (return false if the shared doesn't exist), +                    // we don't need to delete anything that is not there, +                    // lets see if it's path is available (return false if the shared doesn't exist), +                    // we don't need to delete anything that is not there, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            bundledSignatures = ['jdk-unsafe', 'jdk-deprecated'], +                bundledSignatures += 'jdk-system-out', +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_2_1_ID = 2020199;, +    public static final Version V_2_2_1 = new Version(V_2_2_1_ID, org.apache.lucene.util.Version.LUCENE_5_4_1);, +            case V_2_2_1_ID:, +                return V_2_2_1;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    if (tryRenewSyncCommit() == false) {, +                        flush(false, true);, +                    }, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +           if (nodeEnv.hasNodeFile()) {, +                final boolean isAllocated = indexService != null && indexService.hasShard(shardId.id());, +                if (isAllocated) {, +                    return false; // we are allocated - can't delete the shard, +                } else if (indexSettings.hasCustomDataPath()) {, +                    // lets see if it's on a custom path (return false if the shared doesn't exist), +                    // we don't need to delete anything that is not there, +                    // lets see if it's path is available (return false if the shared doesn't exist), +                    // we don't need to delete anything that is not there, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +    private SortMode sortMode;, +    private QueryBuilder<?> nestedFilter;, +        if (template.sortMode != null) {, +        }, +    public FieldSortBuilder sortMode(SortMode sortMode) {, +        Objects.requireNonNull(sortMode, "sort mode cannot be null");, +    public SortMode sortMode() {, +        out.writeBoolean(this.sortMode != null);, +        if (this.sortMode != null) {, +           this.sortMode.writeTo(out);, +        }, +            QueryBuilder<?> query = in.readQuery();, +        if (in.readBoolean()) {, +            result.sortMode(SortMode.PROTOTYPE.readFrom(in));, +        }, +        QueryBuilder<?> nestedFilter = null;, +        SortMode sortMode = null;, +                    sortMode = SortMode.fromString(parser.text());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            bundledSignatures = ['jdk-unsafe', 'jdk-deprecated'], +                bundledSignatures += 'jdk-system-out', +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_2_1_ID = 2020199;, +    public static final Version V_2_2_1 = new Version(V_2_2_1_ID, org.apache.lucene.util.Version.LUCENE_5_4_1);, +            case V_2_2_1_ID:, +                return V_2_2_1;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    if (tryRenewSyncCommit() == false) {, +                        flush(false, true);, +                    }, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +           if (nodeEnv.hasNodeFile()) {]