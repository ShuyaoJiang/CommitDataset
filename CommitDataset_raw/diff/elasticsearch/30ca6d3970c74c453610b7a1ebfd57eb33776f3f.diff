[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                if (Version.indexCreated(indexService.getIndexSettings()).onOrAfter(Version.V_2_0_0_beta1) && newMapper.parentFieldMapper().active()) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                if (Version.indexCreated(indexService.getIndexSettings()).onOrAfter(Version.V_2_0_0_beta1) && newMapper.parentFieldMapper().active()) {, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +            if (extensionClass == instance) {, +                binder.bind(extensionClass).asEagerSingleton();, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                if (Version.indexCreated(indexService.getIndexSettings()).onOrAfter(Version.V_2_0_0_beta1) && newMapper.parentFieldMapper().active()) {, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +            if (extensionClass == instance) {, +                binder.bind(extensionClass).asEagerSingleton();, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/gateway/Gateway.java, +        int requiredAllocation = calcRequiredAllocations(this.initialMeta, nodesIds.size());, +, +    protected int calcRequiredAllocations(final String setting, final int nodeCount) {, +        int requiredAllocation = 1;, +        try {, +            if ("quorum".equals(setting)) {, +                if (nodeCount > 2) {, +                    requiredAllocation = (nodeCount / 2) + 1;, +                }, +            } else if ("quorum-1".equals(setting) || "half".equals(setting)) {, +                if (nodeCount > 2) {, +                    requiredAllocation = ((1 + nodeCount) / 2);, +                }, +            } else if ("one".equals(setting)) {, +                requiredAllocation = 1;, +            } else if ("full".equals(setting) || "all".equals(setting)) {, +                requiredAllocation = nodeCount;, +            } else if ("full-1".equals(setting) || "all-1".equals(setting)) {, +                if (nodeCount > 1) {, +                    requiredAllocation = nodeCount - 1;, +                }, +            } else {, +                requiredAllocation = Integer.parseInt(setting);, +            }, +        } catch (Exception e) {, +            logger.warn("failed to derived initial_meta from value {}", setting);, +        }, +        return requiredAllocation;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                if (Version.indexCreated(indexService.getIndexSettings()).onOrAfter(Version.V_2_0_0_beta1) && newMapper.parentFieldMapper().active()) {, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +            if (extensionClass == instance) {, +                binder.bind(extensionClass).asEagerSingleton();, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/gateway/Gateway.java, +        int requiredAllocation = calcRequiredAllocations(this.initialMeta, nodesIds.size());, +, +    protected int calcRequiredAllocations(final String setting, final int nodeCount) {, +        int requiredAllocation = 1;, +        try {, +            if ("quorum".equals(setting)) {, +                if (nodeCount > 2) {, +                    requiredAllocation = (nodeCount / 2) + 1;, +                }, +            } else if ("quorum-1".equals(setting) || "half".equals(setting)) {, +                if (nodeCount > 2) {, +                    requiredAllocation = ((1 + nodeCount) / 2);, +                }, +            } else if ("one".equals(setting)) {, +                requiredAllocation = 1;, +            } else if ("full".equals(setting) || "all".equals(setting)) {, +                requiredAllocation = nodeCount;, +            } else if ("full-1".equals(setting) || "all-1".equals(setting)) {, +                if (nodeCount > 1) {, +                    requiredAllocation = nodeCount - 1;, +                }, +            } else {, +                requiredAllocation = Integer.parseInt(setting);, +            }, +        } catch (Exception e) {, +            logger.warn("failed to derived initial_meta from value {}", setting);, +        }, +        return requiredAllocation;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayModule.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.ExtensionPoint;, +    public static final String GATEWAY_TYPE_KEY = "gateway.type";, +, +    private final ExtensionPoint.SelectedType<Gateway> gatewayTypes = new ExtensionPoint.SelectedType<>("gateway", Gateway.class);, +    private final Settings settings;, +, +    public GatewayModule(Settings settings) {, +        this.settings = settings;, +        registerGatewayType("default", Gateway.class);, +    }, +, +    /**]