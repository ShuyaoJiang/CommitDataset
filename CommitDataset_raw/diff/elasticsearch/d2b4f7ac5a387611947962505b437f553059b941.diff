[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                    new Script(ScriptType.STORED, null, "increment-field", parameters);  // <1>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                    new Script(ScriptType.STORED, null, "increment-field", parameters);  // <1>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                null,                                          // <2>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                    new Script(ScriptType.STORED, null, "increment-field", parameters);  // <1>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                null,                                          // <2>, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, + *                                be {@code null}, +                        "must specify <id> for an inline script");, +                if (lang != null) {, +                    throw new IllegalArgumentException(, +                        "illegally specified <lang> for a stored script");, +                        "must specify <code> for a stored script");, +                        "cannot be specified using a stored script");, +            if (lang != null) {, +                throw new IllegalArgumentException("lang cannot be specified for stored scripts");, +            }, +, +            this.lang = null;, +                throw new IllegalStateException("options cannot be specified for stored scripts");, +            String lang = in.readString();, +            this.lang = this.type == ScriptType.STORED ? null : lang;, +                this.lang = this.type == ScriptType.STORED ? null : DEFAULT_SCRIPT_LANG;, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                    new Script(ScriptType.STORED, null, "increment-field", parameters);  // <1>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                null,                                          // <2>, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, + *                                be {@code null}, +                        "must specify <id> for an inline script");, +                if (lang != null) {, +                    throw new IllegalArgumentException(, +                        "illegally specified <lang> for a stored script");, +                        "must specify <code> for a stored script");, +                        "cannot be specified using a stored script");, +            if (lang != null) {, +                throw new IllegalArgumentException("lang cannot be specified for stored scripts");, +            }, +, +            this.lang = null;, +                throw new IllegalStateException("options cannot be specified for stored scripts");, +            String lang = in.readString();, +            this.lang = this.type == ScriptType.STORED ? null : lang;, +                this.lang = this.type == ScriptType.STORED ? null : DEFAULT_SCRIPT_LANG;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +            // * lang and options will both be null when looking up a stored script,, +            // so we must get the source to retrieve the them before checking if the, +            // context is supported, +            // * a stored script must be pulled from the cluster state every time in case, +        boolean expression = "expression".equals(lang);, +            throw new ResourceNotFoundException("unable to find script [" + id + "] in cluster state");, +            throw new ResourceNotFoundException("unable to find script [" + id + "] in cluster state");, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                    new Script(ScriptType.STORED, null, "increment-field", parameters);  // <1>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                null,                                          // <2>, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, + *                                be {@code null}, +                        "must specify <id> for an inline script");, +                if (lang != null) {, +                    throw new IllegalArgumentException(, +                        "illegally specified <lang> for a stored script");, +                        "must specify <code> for a stored script");, +                        "cannot be specified using a stored script");, +            if (lang != null) {, +                throw new IllegalArgumentException("lang cannot be specified for stored scripts");, +            }, +, +            this.lang = null;, +                throw new IllegalStateException("options cannot be specified for stored scripts");, +            String lang = in.readString();, +            this.lang = this.type == ScriptType.STORED ? null : lang;, +                this.lang = this.type == ScriptType.STORED ? null : DEFAULT_SCRIPT_LANG;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +            // * lang and options will both be null when looking up a stored script,, +            // so we must get the source to retrieve the them before checking if the, +            // context is supported, +            // * a stored script must be pulled from the cluster state every time in case, +        boolean expression = "expression".equals(lang);, +            throw new ResourceNotFoundException("unable to find script [" + id + "] in cluster state");, +            throw new ResourceNotFoundException("unable to find script [" + id + "] in cluster state");, +++ b/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.Function;, +, +                if (lang != null) {, +                    throw new IllegalArgumentException("expected null lang in test");, +                }, +                return new StoredScriptSource("test", "1+1", Collections.emptyMap());, +        assertCompileAccepted(null, "script", ScriptType.STORED, SearchScript.CONTEXT);, +        assertCompileRejected(null, "script", ScriptType.STORED, SearchScript.CONTEXT);, +        assertCompileRejected(null, "script", ScriptType.STORED, SearchScript.CONTEXT);, +            scriptService.compile(new Script(ScriptType.INLINE, type, "test", Collections.emptyMap()), ExecutableScript.INGEST_CONTEXT));]