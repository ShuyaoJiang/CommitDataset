[+++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/Licensing.java, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/Licensing.java, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.inject.util.Providers;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.license.LicenseService;, +import org.elasticsearch.license.XPackLicenseState;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.monitoring.agent.collector.Collector;, +import org.elasticsearch.xpack.monitoring.agent.collector.cluster.ClusterStateCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.cluster.ClusterStatsCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.indices.IndexRecoveryCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.indices.IndexStatsCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.indices.IndicesStatsCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.node.NodeStatsCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.shards.ShardsCollector;, +import org.elasticsearch.xpack.monitoring.agent.exporter.Exporter;, +import org.elasticsearch.xpack.monitoring.agent.exporter.Exporters;, +import org.elasticsearch.xpack.monitoring.agent.exporter.http.HttpExporter;, +import org.elasticsearch.xpack.monitoring.agent.exporter.local.LocalExporter;, +import org.elasticsearch.xpack.security.InternalClient;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +    private final Environment env;, +    private final XPackLicenseState licenseState;, +    public Monitoring(Settings settings, Environment env, XPackLicenseState licenseState) {, +        this.env = env;, +        this.licenseState = licenseState;, +        modules.add(b -> {, +            XPackPlugin.bindFeatureSet(b, MonitoringFeatureSet.class);, +            if (transportClientMode || enabled == false || tribeNode) {, +                b.bind(Exporters.class).toProvider(Providers.of(null));, +        });, +    public Collection<Object> createComponents(InternalClient client, ThreadPool threadPool, ClusterService clusterService,, +                                               LicenseService licenseService) {, +        if (enabled == false || tribeNode) {, +, +        final ClusterSettings clusterSettings = clusterService.getClusterSettings();, +        final MonitoringSettings monitoringSettings = new MonitoringSettings(settings, clusterSettings);, +        final CleanerService cleanerService = new CleanerService(settings, clusterSettings, threadPool, licenseState);, +, +        Map<String, Exporter.Factory> exporterFactories = new HashMap<>();, +        exporterFactories.put(HttpExporter.TYPE, config -> new HttpExporter(config, env));, +        exporterFactories.put(LocalExporter.TYPE, config -> new LocalExporter(config, client, clusterService, cleanerService));, +        final Exporters exporters = new Exporters(settings, exporterFactories, clusterService);, +, +        Set<Collector> collectors = new HashSet<>();, +        collectors.add(new IndicesStatsCollector(settings, clusterService, monitoringSettings, licenseState, client));, +        collectors.add(new IndexStatsCollector(settings, clusterService, monitoringSettings, licenseState, client));, +        collectors.add(new ClusterStatsCollector(settings, clusterService, monitoringSettings, licenseState, client, licenseService));, +        collectors.add(new ClusterStateCollector(settings, clusterService, monitoringSettings, licenseState, client));, +        collectors.add(new ShardsCollector(settings, clusterService, monitoringSettings, licenseState));, +        collectors.add(new NodeStatsCollector(settings, clusterService, monitoringSettings, licenseState, client));, +        collectors.add(new IndexRecoveryCollector(settings, clusterService, monitoringSettings, licenseState, client));, +        final AgentService agentService = new AgentService(settings, clusterSettings, collectors, exporters);, +, +        return Arrays.asList(agentService, monitoringSettings, exporters, cleanerService);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/Licensing.java, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/Monitoring.java, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.inject.util.Providers;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.license.LicenseService;, +import org.elasticsearch.license.XPackLicenseState;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.monitoring.agent.collector.Collector;, +import org.elasticsearch.xpack.monitoring.agent.collector.cluster.ClusterStateCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.cluster.ClusterStatsCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.indices.IndexRecoveryCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.indices.IndexStatsCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.indices.IndicesStatsCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.node.NodeStatsCollector;, +import org.elasticsearch.xpack.monitoring.agent.collector.shards.ShardsCollector;, +import org.elasticsearch.xpack.monitoring.agent.exporter.Exporter;, +import org.elasticsearch.xpack.monitoring.agent.exporter.Exporters;, +import org.elasticsearch.xpack.monitoring.agent.exporter.http.HttpExporter;, +import org.elasticsearch.xpack.monitoring.agent.exporter.local.LocalExporter;, +import org.elasticsearch.xpack.security.InternalClient;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +    private final Environment env;, +    private final XPackLicenseState licenseState;, +    public Monitoring(Settings settings, Environment env, XPackLicenseState licenseState) {, +        this.env = env;, +        this.licenseState = licenseState;, +        modules.add(b -> {, +            XPackPlugin.bindFeatureSet(b, MonitoringFeatureSet.class);, +            if (transportClientMode || enabled == false || tribeNode) {, +                b.bind(Exporters.class).toProvider(Providers.of(null));, +        });, +    public Collection<Object> createComponents(InternalClient client, ThreadPool threadPool, ClusterService clusterService,, +                                               LicenseService licenseService) {, +        if (enabled == false || tribeNode) {]