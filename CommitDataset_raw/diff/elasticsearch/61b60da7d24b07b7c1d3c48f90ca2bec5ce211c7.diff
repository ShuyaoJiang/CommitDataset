[+++ b/src/test/java/org/elasticsearch/VersionTests.java, +        assumeTrue("tests.version is set", property != null);, +++ b/src/test/java/org/elasticsearch/VersionTests.java, +        assumeTrue("tests.version is set", property != null);, +++ b/src/test/java/org/elasticsearch/indices/stats/IndexStatsTests.java, +        assumeTrue("test doesn't work with 4.6.0", org.elasticsearch.Version.CURRENT.luceneVersion != Version.LUCENE_4_6_0);, +++ b/src/test/java/org/elasticsearch/VersionTests.java, +        assumeTrue("tests.version is set", property != null);, +++ b/src/test/java/org/elasticsearch/indices/stats/IndexStatsTests.java, +        assumeTrue("test doesn't work with 4.6.0", org.elasticsearch.Version.CURRENT.luceneVersion != Version.LUCENE_4_6_0);, +++ b/src/test/java/org/elasticsearch/plugins/PluginManagerTests.java, +        assumeTrue("download.elasticsearch.org is accessible", isDownloadServiceWorking("download.elasticsearch.org", 80, "/elasticsearch/ci-test.txt"));, +        assumeTrue("search.maven.org is accessible", isDownloadServiceWorking("search.maven.org", 80, "/"));, +        assumeTrue("repo1.maven.org is accessible", isDownloadServiceWorking("repo1.maven.org", 443, "/maven2/org/elasticsearch/elasticsearch-transport-thrift/2.4.0/elasticsearch-transport-thrift-2.4.0.pom"));, +        assumeTrue("github.com is accessible", isDownloadServiceWorking("github.com", 443, "/"));, +++ b/src/test/java/org/elasticsearch/VersionTests.java, +        assumeTrue("tests.version is set", property != null);, +++ b/src/test/java/org/elasticsearch/indices/stats/IndexStatsTests.java, +        assumeTrue("test doesn't work with 4.6.0", org.elasticsearch.Version.CURRENT.luceneVersion != Version.LUCENE_4_6_0);, +++ b/src/test/java/org/elasticsearch/plugins/PluginManagerTests.java, +        assumeTrue("download.elasticsearch.org is accessible", isDownloadServiceWorking("download.elasticsearch.org", 80, "/elasticsearch/ci-test.txt"));, +        assumeTrue("search.maven.org is accessible", isDownloadServiceWorking("search.maven.org", 80, "/"));, +        assumeTrue("repo1.maven.org is accessible", isDownloadServiceWorking("repo1.maven.org", 443, "/maven2/org/elasticsearch/elasticsearch-transport-thrift/2.4.0/elasticsearch-transport-thrift-2.4.0.pom"));, +        assumeTrue("github.com is accessible", isDownloadServiceWorking("github.com", 443, "/"));, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +import com.carrotsearch.randomizedtesting.SysGlobals;, +     * The child JVM ordinal of this JVM. Default is <tt>0</tt>, +     */, +    public static final int CHILD_JVM_ID = Integer.parseInt(System.getProperty(SysGlobals.CHILDVM_SYSPROP_JVM_ID, "0"));, +, +    /**, +            timeZone = DateTimeZone.forTimeZone(RandomizedTest.randomTimeZone());, +++ b/src/test/java/org/elasticsearch/VersionTests.java, +        assumeTrue("tests.version is set", property != null);, +++ b/src/test/java/org/elasticsearch/indices/stats/IndexStatsTests.java, +        assumeTrue("test doesn't work with 4.6.0", org.elasticsearch.Version.CURRENT.luceneVersion != Version.LUCENE_4_6_0);, +++ b/src/test/java/org/elasticsearch/plugins/PluginManagerTests.java, +        assumeTrue("download.elasticsearch.org is accessible", isDownloadServiceWorking("download.elasticsearch.org", 80, "/elasticsearch/ci-test.txt"));, +        assumeTrue("search.maven.org is accessible", isDownloadServiceWorking("search.maven.org", 80, "/"));, +        assumeTrue("repo1.maven.org is accessible", isDownloadServiceWorking("repo1.maven.org", 443, "/maven2/org/elasticsearch/elasticsearch-transport-thrift/2.4.0/elasticsearch-transport-thrift-2.4.0.pom"));, +        assumeTrue("github.com is accessible", isDownloadServiceWorking("github.com", 443, "/"));, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +import com.carrotsearch.randomizedtesting.SysGlobals;, +     * The child JVM ordinal of this JVM. Default is <tt>0</tt>, +     */, +    public static final int CHILD_JVM_ID = Integer.parseInt(System.getProperty(SysGlobals.CHILDVM_SYSPROP_JVM_ID, "0"));, +, +    /**, +            timeZone = DateTimeZone.forTimeZone(RandomizedTest.randomTimeZone());, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchTestCase.java, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +     * Returns a "scaled" random number between min and max (inclusive)., +     * @see RandomizedTest#scaledRandomIntBetween(int, int);, +        return RandomizedTest.scaledRandomIntBetween(min, max);, +      return RandomizedTest.randomInt(max); , +      return RandomizedTest.randomAsciiOfLengthBetween(minCodeUnits, maxCodeUnits);, +      return RandomizedTest.randomAsciiOfLength(codeUnits);, +      return RandomizedTest.randomUnicodeOfLengthBetween(minCodeUnits, maxCodeUnits);, +      return RandomizedTest.randomUnicodeOfLength(codeUnits);, +      return RandomizedTest.randomUnicodeOfCodepointLengthBetween(minCodePoints, maxCodePoints);, +      return RandomizedTest.randomUnicodeOfCodepointLength(codePoints);, +      return RandomizedTest.randomRealisticUnicodeOfLengthBetween(minCodeUnits, maxCodeUnits);, +      return RandomizedTest.randomRealisticUnicodeOfLength(codeUnits);, +    public static String randomRealisticUnicodeOfCodepointLengthBetween(int minCodePoints, int maxCodePoints) {, +      return RandomizedTest.randomRealisticUnicodeOfCodepointLengthBetween(minCodePoints, maxCodePoints);, +      return RandomizedTest.randomRealisticUnicodeOfCodepointLength(codePoints);, +      return RandomizedTest.getContext();, +      return RandomizedTest.isNightly();, +     * Returns a non-negative random value smaller or equal <code>max</code>., +     * @see RandomizedTest#atMost(int);, +        return RandomizedTest.atMost(max);]