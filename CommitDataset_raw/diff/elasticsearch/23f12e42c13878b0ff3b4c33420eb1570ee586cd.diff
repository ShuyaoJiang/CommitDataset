[+++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/build.gradle, +    setting 'xpack.monitoring.collection.enabled', 'true', +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/build.gradle, +    setting 'xpack.monitoring.collection.enabled', 'true', +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +            assertBusy(() -> verifyCcrMonitoring(allowedIndex));, +    private static void verifyCcrMonitoring(String expectedLeaderIndex) throws IOException {, +        ensureYellow(".monitoring-*");, +, +        Request request = new Request("GET", "/.monitoring-*/_search");, +        request.setJsonEntity("{\"query\": {\"term\": {\"type\": \"ccr_stats\"}}}");, +        Map<String, ?> response = toMap(adminClient().performRequest(request));, +, +        int numDocs = (int) XContentMapValues.extractValue("hits.total", response);, +        assertThat(numDocs, greaterThanOrEqualTo(1));, +, +        int numberOfOperationsReceived = 0;, +        int numberOfOperationsIndexed = 0;, +, +        List<?> hits = (List<?>) XContentMapValues.extractValue("hits.hits", response);, +        for (int i = 0; i < numDocs; i++) {, +            Map<?, ?> hit = (Map<?, ?>) hits.get(i);, +            String leaderIndex = (String) XContentMapValues.extractValue("_source.ccr_stats.leader_index", hit);, +            if (leaderIndex.endsWith(expectedLeaderIndex) == false) {, +                continue;, +            }, +, +            int foundNumberOfOperationsReceived =, +                (int) XContentMapValues.extractValue("_source.ccr_stats.operations_received", hit);, +            numberOfOperationsReceived = Math.max(numberOfOperationsReceived, foundNumberOfOperationsReceived);, +            int foundNumberOfOperationsIndexed =, +                (int) XContentMapValues.extractValue("_source.ccr_stats.number_of_operations_indexed", hit);, +            numberOfOperationsIndexed = Math.max(numberOfOperationsIndexed, foundNumberOfOperationsIndexed);, +        }, +, +        assertThat(numberOfOperationsReceived, greaterThanOrEqualTo(1));, +        assertThat(numberOfOperationsIndexed, greaterThanOrEqualTo(1));, +    }, +, +    private static void ensureYellow(String index) throws IOException {, +        Request request = new Request("GET", "/_cluster/health/" + index);, +        request.addParameter("wait_for_status", "yellow");, +        request.addParameter("wait_for_no_relocating_shards", "true");, +        request.addParameter("timeout", "70s");, +        request.addParameter("level", "shards");, +        adminClient().performRequest(request);, +    }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/build.gradle, +    setting 'xpack.monitoring.collection.enabled', 'true', +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +            assertBusy(() -> verifyCcrMonitoring(allowedIndex));, +    private static void verifyCcrMonitoring(String expectedLeaderIndex) throws IOException {, +        ensureYellow(".monitoring-*");, +, +        Request request = new Request("GET", "/.monitoring-*/_search");, +        request.setJsonEntity("{\"query\": {\"term\": {\"type\": \"ccr_stats\"}}}");, +        Map<String, ?> response = toMap(adminClient().performRequest(request));, +, +        int numDocs = (int) XContentMapValues.extractValue("hits.total", response);, +        assertThat(numDocs, greaterThanOrEqualTo(1));, +, +        int numberOfOperationsReceived = 0;, +        int numberOfOperationsIndexed = 0;, +, +        List<?> hits = (List<?>) XContentMapValues.extractValue("hits.hits", response);, +        for (int i = 0; i < numDocs; i++) {, +            Map<?, ?> hit = (Map<?, ?>) hits.get(i);, +            String leaderIndex = (String) XContentMapValues.extractValue("_source.ccr_stats.leader_index", hit);, +            if (leaderIndex.endsWith(expectedLeaderIndex) == false) {, +                continue;, +            }, +, +            int foundNumberOfOperationsReceived =, +                (int) XContentMapValues.extractValue("_source.ccr_stats.operations_received", hit);, +            numberOfOperationsReceived = Math.max(numberOfOperationsReceived, foundNumberOfOperationsReceived);, +            int foundNumberOfOperationsIndexed =, +                (int) XContentMapValues.extractValue("_source.ccr_stats.number_of_operations_indexed", hit);, +            numberOfOperationsIndexed = Math.max(numberOfOperationsIndexed, foundNumberOfOperationsIndexed);, +        }, +, +        assertThat(numberOfOperationsReceived, greaterThanOrEqualTo(1));, +        assertThat(numberOfOperationsIndexed, greaterThanOrEqualTo(1));, +    }, +, +    private static void ensureYellow(String index) throws IOException {, +        Request request = new Request("GET", "/_cluster/health/" + index);, +        request.addParameter("wait_for_status", "yellow");, +        request.addParameter("wait_for_no_relocating_shards", "true");, +        request.addParameter("timeout", "70s");, +        request.addParameter("level", "shards");, +        adminClient().performRequest(request);, +    }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster/build.gradle, +    setting 'xpack.monitoring.collection.enabled', 'true', +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/build.gradle, +    setting 'xpack.monitoring.collection.enabled', 'true']