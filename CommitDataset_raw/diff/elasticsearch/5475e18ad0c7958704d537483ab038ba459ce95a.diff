[+++ b/buildSrc/build.gradle, +  compile 'de.thetaphi:forbiddenapis:2.2', +++ b/buildSrc/build.gradle, +  compile 'de.thetaphi:forbiddenapis:2.2', +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +@defaultMessage Don't use MethodHandles in slow ways, don't be lenient in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +++ b/buildSrc/build.gradle, +  compile 'de.thetaphi:forbiddenapis:2.2', +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +@defaultMessage Don't use MethodHandles in slow ways, don't be lenient in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/CompilerSettings.java, +++ b/buildSrc/build.gradle, +  compile 'de.thetaphi:forbiddenapis:2.2', +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +@defaultMessage Don't use MethodHandles in slow ways, don't be lenient in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/CompilerSettings.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +++ b/buildSrc/build.gradle, +  compile 'de.thetaphi:forbiddenapis:2.2', +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +@defaultMessage Don't use MethodHandles in slow ways, don't be lenient in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/CompilerSettings.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +     * , +        PIC(Lookup lookup, String name, MethodType type, int flavor, Object[] args) {, +        MIC(String name, MethodType type, int flavor, int flags) {, +                    if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                        if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +            if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                return DefMath.lookupGenericWithCast(name);, +            } else {, +                return DefMath.lookupGeneric(name);, +            final MethodHandle target = lookup(args).asType(type);, +     * In addition to ordinary parameters, we also take a static parameter {@code flavor} which, +     * tells us what type of dynamic call it is (and which part of whitelist to look at)., +    public static CallSite bootstrap(Lookup lookup, String name, MethodType type, int flavor, Object... args) {, +                return new PIC(lookup, name, type, flavor, args);, +                return new PIC(lookup, name, type, flavor, args);, +                return new PIC(lookup, name, type, flavor, args);, +                if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0 && flavor != BINARY_OPERATOR) {, +                    throw new BootstrapMethodError("This parameter is only supported for BINARY_OPERATORs");, +                return new MIC(name, type, flavor, flags);, +++ b/buildSrc/build.gradle, +  compile 'de.thetaphi:forbiddenapis:2.2', +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +@defaultMessage Don't use MethodHandles in slow ways, don't be lenient in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/CompilerSettings.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +     * , +        PIC(Lookup lookup, String name, MethodType type, int flavor, Object[] args) {, +        MIC(String name, MethodType type, int flavor, int flags) {, +                    if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                        if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +            if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                return DefMath.lookupGenericWithCast(name);, +            } else {, +                return DefMath.lookupGeneric(name);, +            final MethodHandle target = lookup(args).asType(type);, +     * In addition to ordinary parameters, we also take a static parameter {@code flavor} which, +     * tells us what type of dynamic call it is (and which part of whitelist to look at)., +    public static CallSite bootstrap(Lookup lookup, String name, MethodType type, int flavor, Object... args) {, +                return new PIC(lookup, name, type, flavor, args);, +                return new PIC(lookup, name, type, flavor, args);, +                return new PIC(lookup, name, type, flavor, args);, +                if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0 && flavor != BINARY_OPERATOR) {, +                    throw new BootstrapMethodError("This parameter is only supported for BINARY_OPERATORs");, +                return new MIC(name, type, flavor, flags);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefMath.java, +        if (clazz == Boolean.class) {, +            return boolean.class;, +        } else if (clazz == Byte.class) { , +            return byte.class; , +        } else if (clazz == Short.class) { , +            return short.class; , +        } else if (clazz == Character.class) {, +            return char.class;, +        } else if (clazz == Integer.class) {, +            return int.class;, +        } else if (clazz == Long.class) {, +            return long.class;, +        } else if (clazz == Float.class) {, +            return float.class;, +        } else if (clazz == Double.class) {, +            return double.class;, +        } else {, +            return clazz;, +        }, +    , +    static Object dynamicCast(Object returnValue, Object lhs) {, +            Class<?> c = lhs.getClass();, +            if (c == returnValue.getClass()) {, +            if (c == Integer.class) {, +                return getNumber(returnValue).intValue();]