[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]completion[/\\]CompletionSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]PhraseSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]PhraseSuggestionBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]term[/\\]TermSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]rescore[/\\]QueryRescoreBuilderTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]SmoothingModelTestCase.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]completion[/\\]CompletionSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]PhraseSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]PhraseSuggestionBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]term[/\\]TermSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]rescore[/\\]QueryRescoreBuilderTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]SmoothingModelTestCase.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkResponse.java, +    public final static long NO_INGEST_TOOK = -1L;, +, +    private long ingestTookInMillis;, +        this(responses, tookInMillis, NO_INGEST_TOOK);, +    }, +, +    public BulkResponse(BulkItemResponse[] responses, long tookInMillis, long ingestTookInMillis) {, +        this.ingestTookInMillis = ingestTookInMillis;, +     * How long the bulk execution took. Excluding ingest preprocessing., +     * How long the bulk execution took in milliseconds. Excluding ingest preprocessing., +     * If ingest is enabled returns the bulk ingest preprocessing time, otherwise 0 is returned., +     */, +    public TimeValue getIngestTook() {, +        return new TimeValue(ingestTookInMillis);, +    }, +, +    /**, +     * If ingest is enabled returns the bulk ingest preprocessing time. in milliseconds, otherwise -1 is returned., +     */, +    public long getIngestTookInMillis() {, +        return ingestTookInMillis;, +    }, +, +    /**, +        ingestTookInMillis = in.readZLong();, +        out.writeZLong(ingestTookInMillis);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]completion[/\\]CompletionSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]PhraseSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]PhraseSuggestionBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]term[/\\]TermSuggester.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]rescore[/\\]QueryRescoreBuilderTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]suggest[/\\]phrase[/\\]SmoothingModelTestCase.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkResponse.java, +    public final static long NO_INGEST_TOOK = -1L;, +, +    private long ingestTookInMillis;, +        this(responses, tookInMillis, NO_INGEST_TOOK);, +    }, +, +    public BulkResponse(BulkItemResponse[] responses, long tookInMillis, long ingestTookInMillis) {, +        this.ingestTookInMillis = ingestTookInMillis;, +     * How long the bulk execution took. Excluding ingest preprocessing., +     * How long the bulk execution took in milliseconds. Excluding ingest preprocessing., +     * If ingest is enabled returns the bulk ingest preprocessing time, otherwise 0 is returned., +     */, +    public TimeValue getIngestTook() {, +        return new TimeValue(ingestTookInMillis);, +    }, +, +    /**, +     * If ingest is enabled returns the bulk ingest preprocessing time. in milliseconds, otherwise -1 is returned., +     */, +    public long getIngestTookInMillis() {, +        return ingestTookInMillis;, +    }, +, +    /**, +        ingestTookInMillis = in.readZLong();, +        out.writeZLong(ingestTookInMillis);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/IngestActionFilter.java, +import java.util.concurrent.TimeUnit;, +        long ingestStartTimeInNanos = System.nanoTime();, +                long ingestTookInMillis = TimeUnit.MILLISECONDS.convert(System.nanoTime() - ingestStartTimeInNanos, TimeUnit.NANOSECONDS);, +                ActionListener<BulkResponse> actionListener = bulkRequestModifier.wrapActionListenerIfNeeded(ingestTookInMillis, listener);, +        ActionListener<BulkResponse> wrapActionListenerIfNeeded(long ingestTookInMillis, ActionListener<BulkResponse> actionListener) {, +                return new ActionListener<BulkResponse>() {, +                    @Override, +                    public void onResponse(BulkResponse response) {, +                        actionListener.onResponse(new BulkResponse(response.getItems(), response.getTookInMillis(), ingestTookInMillis));, +                    }, +, +                    @Override, +                    public void onFailure(Throwable e) {, +                        actionListener.onFailure(e);, +                    }, +                };, +                return new IngestBulkResponseListener(ingestTookInMillis, originalSlots, itemResponses, actionListener);, +    final static class IngestBulkResponseListener implements ActionListener<BulkResponse> {, +        private final long ingestTookInMillis;, +        IngestBulkResponseListener(long ingestTookInMillis, int[] originalSlots, List<BulkItemResponse> itemResponses, ActionListener<BulkResponse> actionListener) {, +            this.ingestTookInMillis = ingestTookInMillis;, +        public void onResponse(BulkResponse response) {, +            for (int i = 0; i < response.getItems().length; i++) {, +                itemResponses.add(originalSlots[i], response.getItems()[i]);]