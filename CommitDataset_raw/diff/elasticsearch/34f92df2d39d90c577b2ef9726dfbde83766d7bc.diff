[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                final compilerJavaHomeFile = new File(project.compilerJavaHome), +                // we only fork if the Gradle JDK is not the same as the compiler JDK, +                if (compilerJavaHomeFile.canonicalPath == Jvm.current().javaHome.canonicalPath) {, +                    options.fork = false, +                } else {, +                    options.forkOptions.javaHome = compilerJavaHomeFile, +                    options.compilerArgs << '--release' << JavaVersion.toVersion(it.targetCompatibility).majorVersion, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                final compilerJavaHomeFile = new File(project.compilerJavaHome), +                // we only fork if the Gradle JDK is not the same as the compiler JDK, +                if (compilerJavaHomeFile.canonicalPath == Jvm.current().javaHome.canonicalPath) {, +                    options.fork = false, +                } else {, +                    options.forkOptions.javaHome = compilerJavaHomeFile, +                    options.compilerArgs << '--release' << JavaVersion.toVersion(it.targetCompatibility).majorVersion, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            String badBody = /GET|PUT|POST|HEAD|OPTIONS|DELETE|startyaml|#/, +            String rawRequest = /(?:$method\s+$pathAndQuery$body?)/, +            String yamlRequest = /(?:startyaml(?s)(?<yaml>.+?)(?-s)endyaml)/, +            String nonComment = /(?:$rawRequest|$yamlRequest)/, +                String yamlRequest = matcher.group("yaml");, +                if (yamlRequest != null) {, +                    current.println(yamlRequest), +                    return, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                final compilerJavaHomeFile = new File(project.compilerJavaHome), +                // we only fork if the Gradle JDK is not the same as the compiler JDK, +                if (compilerJavaHomeFile.canonicalPath == Jvm.current().javaHome.canonicalPath) {, +                    options.fork = false, +                } else {, +                    options.forkOptions.javaHome = compilerJavaHomeFile, +                    options.compilerArgs << '--release' << JavaVersion.toVersion(it.targetCompatibility).majorVersion, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            String badBody = /GET|PUT|POST|HEAD|OPTIONS|DELETE|startyaml|#/, +            String rawRequest = /(?:$method\s+$pathAndQuery$body?)/, +            String yamlRequest = /(?:startyaml(?s)(?<yaml>.+?)(?-s)endyaml)/, +            String nonComment = /(?:$rawRequest|$yamlRequest)/, +                String yamlRequest = matcher.group("yaml");, +                if (yamlRequest != null) {, +                    current.println(yamlRequest), +                    return, +                }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +    static Request getRepositories(GetRepositoriesRequest getRepositoriesRequest) {, +        String[] repositories = getRepositoriesRequest.repositories() == null ? Strings.EMPTY_ARRAY : getRepositoriesRequest.repositories();, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot").addCommaSeparatedPathParts(repositories).build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(getRepositoriesRequest.masterNodeTimeout());, +        parameters.withLocal(getRepositoriesRequest.local());, +        return request;, +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                final compilerJavaHomeFile = new File(project.compilerJavaHome), +                // we only fork if the Gradle JDK is not the same as the compiler JDK, +                if (compilerJavaHomeFile.canonicalPath == Jvm.current().javaHome.canonicalPath) {, +                    options.fork = false, +                } else {, +                    options.forkOptions.javaHome = compilerJavaHomeFile, +                    options.compilerArgs << '--release' << JavaVersion.toVersion(it.targetCompatibility).majorVersion, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            String badBody = /GET|PUT|POST|HEAD|OPTIONS|DELETE|startyaml|#/, +            String rawRequest = /(?:$method\s+$pathAndQuery$body?)/, +            String yamlRequest = /(?:startyaml(?s)(?<yaml>.+?)(?-s)endyaml)/, +            String nonComment = /(?:$rawRequest|$yamlRequest)/, +                String yamlRequest = matcher.group("yaml");, +                if (yamlRequest != null) {, +                    current.println(yamlRequest), +                    return, +                }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +    static Request getRepositories(GetRepositoriesRequest getRepositoriesRequest) {, +        String[] repositories = getRepositoriesRequest.repositories() == null ? Strings.EMPTY_ARRAY : getRepositoriesRequest.repositories();, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot").addCommaSeparatedPathParts(repositories).build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(getRepositoriesRequest.masterNodeTimeout());, +        parameters.withLocal(getRepositoriesRequest.local());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesResponse;, +    private final SnapshotClient snapshotClient = new SnapshotClient(this);, +     * Provides a {@link SnapshotClient} which can be used to access the Snapshot API., +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">Snapshot API on elastic.co</a>, +     */]