[+++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +public class DateFieldMapper extends FieldMapper {, +            return new DateFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +public class DateFieldMapper extends FieldMapper {, +            return new DateFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +        // update the default value of include_in_all if necessary, +        Boolean includeInAll = mapper.includeInAll();, +        if (includeInAll != null) {, +            context = context.setIncludeInAllDefault(includeInAll);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +public class DateFieldMapper extends FieldMapper {, +            return new DateFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +        // update the default value of include_in_all if necessary, +        Boolean includeInAll = mapper.includeInAll();, +        if (includeInAll != null) {, +            context = context.setIncludeInAllDefault(includeInAll);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                builder.put(cursor.key, cursor.value);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +public class DateFieldMapper extends FieldMapper {, +            return new DateFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +        // update the default value of include_in_all if necessary, +        Boolean includeInAll = mapper.includeInAll();, +        if (includeInAll != null) {, +            context = context.setIncludeInAllDefault(includeInAll);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                builder.put(cursor.key, cursor.value);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java, +public class IpFieldMapper extends FieldMapper {, +            return new IpFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +public class DateFieldMapper extends FieldMapper {, +            return new DateFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +        // update the default value of include_in_all if necessary, +        Boolean includeInAll = mapper.includeInAll();, +        if (includeInAll != null) {, +            context = context.setIncludeInAllDefault(includeInAll);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                builder.put(cursor.key, cursor.value);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java, +public class IpFieldMapper extends FieldMapper {, +            return new IpFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java, +public final class KeywordFieldMapper extends FieldMapper {, +            return new KeywordFieldMapper(, +                    name, fieldType, defaultFieldType, ignoreAbove, includeInAll,, +                                int ignoreAbove, Boolean includeInAll, Settings indexSettings, MultiFields multiFields, CopyTo copyTo) {, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +public class DateFieldMapper extends FieldMapper {, +            return new DateFieldMapper(name, fieldType, defaultFieldType, ignoreMalformed(context),, +                    includeInAll, context.indexSettings(), multiFieldsBuilder.build(this, context), copyTo);, +            Boolean includeInAll,, +        this.includeInAll = includeInAll;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +        // update the default value of include_in_all if necessary, +        Boolean includeInAll = mapper.includeInAll();, +        if (includeInAll != null) {, +            context = context.setIncludeInAllDefault(includeInAll);]