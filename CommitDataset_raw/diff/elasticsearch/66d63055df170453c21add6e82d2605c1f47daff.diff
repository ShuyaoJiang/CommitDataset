[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    long evictions();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    long evictions();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +, +    @Override public long evictions() {, +        return 0;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    long evictions();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +, +    @Override public long evictions() {, +        return 0;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/resident/ResidentFieldDataCache.java, +, +    @Override public long evictions() {, +        return 0;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    long evictions();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +, +    @Override public long evictions() {, +        return 0;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/resident/ResidentFieldDataCache.java, +, +    @Override public long evictions() {, +        return 0;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/soft/SoftFieldDataCache.java, +import org.elasticsearch.common.collect.MapEvictionListener;, +import javax.annotation.Nullable;, +import java.util.concurrent.atomic.AtomicLong;, +public class SoftFieldDataCache extends AbstractConcurrentMapFieldDataCache implements MapEvictionListener<String, FieldData> {, +, +    private final AtomicLong evictions = new AtomicLong();, +        return new MapMaker().softValues().evictionListener(this).makeMap();, +    }, +, +    @Override public long evictions() {, +        return evictions.get();, +, +    @Override public void onEviction(@Nullable String s, @Nullable FieldData fieldData) {, +        evictions.incrementAndGet();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    long evictions();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +, +    @Override public long evictions() {, +        return 0;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/resident/ResidentFieldDataCache.java, +, +    @Override public long evictions() {, +        return 0;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/soft/SoftFieldDataCache.java, +import org.elasticsearch.common.collect.MapEvictionListener;, +import javax.annotation.Nullable;, +import java.util.concurrent.atomic.AtomicLong;, +public class SoftFieldDataCache extends AbstractConcurrentMapFieldDataCache implements MapEvictionListener<String, FieldData> {, +, +    private final AtomicLong evictions = new AtomicLong();, +        return new MapMaker().softValues().evictionListener(this).makeMap();, +    }, +, +    @Override public long evictions() {, +        return evictions.get();, +, +    @Override public void onEviction(@Nullable String s, @Nullable FieldData fieldData) {, +        evictions.incrementAndGet();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/weak/WeakFieldDataCache.java, +import org.elasticsearch.common.collect.MapEvictionListener;, +import javax.annotation.Nullable;, +import java.util.concurrent.atomic.AtomicLong;, +public class WeakFieldDataCache extends AbstractConcurrentMapFieldDataCache implements MapEvictionListener<String, FieldData> {, +, +    private final AtomicLong evictions = new AtomicLong();, +        return new MapMaker().weakValues().evictionListener(this).makeMap();, +, +    @Override public long evictions() {, +        return evictions.get();, +    }, +, +    @Override public void onEviction(@Nullable String s, @Nullable FieldData fieldData) {, +        evictions.incrementAndGet();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    long evictions();]