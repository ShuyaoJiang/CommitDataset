[+++ b/src/test/java/org/elasticsearch/shield/transport/ssl/SslMultiPortTests.java, +    /**, +     * On each node sets up the following profiles:, +     * <ul>, +     *     <li>default: testnode keystore. Requires client auth</li>, +     *     <li>client: testnode-client-profile keystore that only trusts the testclient cert. Requires client auth</li>, +     *     <li>no_client_auth: testnode keystore. Does not require client auth</li>, +     *     <li>no_ssl: plaintext transport profile</li>, +     * </ul>, +     */, +    /**, +     * Uses the internal cluster's transport client to test connection to the default profile. The internal transport, +     * client uses the same SSL settings as the default profile so a connection should always succeed, +     */, +    /**, +     * Uses a transport client with the same settings as the internal cluster transport client to test connection to the, +     * no_client_auth profile. The internal transport client is not used here since we are connecting to a different, +     * profile. Since the no_client_auth profile does not require client authentication, the standard transport client, +     * connection should always succeed as the settings are the same as the default profile except for the port and, +     * disabling the client auth requirement, +     */, +    /**, +     * Uses a transport client with the same settings as the internal cluster transport client to test connection to the, +     * client profile. The internal transport client is not used here since we are connecting to a different, +     * profile. The client profile requires client auth and only trusts the certificate in the testclient-client-profile, +     * keystore so this connection will fail as the certificate presented by the standard transport client is not trusted, +     * by this profile, +     */, +    /**, +     * Uses a transport client with the same settings as the internal cluster transport client to test connection to the, +     * no_ssl profile. The internal transport client is not used here since we are connecting to a different, +     * profile. The no_ssl profile is plain text and the standard transport client uses SSL, so a connection will never work, +     */, +    /**, +     * Uses a transport client with a custom keystore; this keystore testclient-client-profile.jks trusts the testnode, +     * certificate and had its own self signed certificate. This test connects to the client profile, which is only, +     * set to trust the testclient-client-profile certificate so the connection should always succeed, +     */, +    /**, +     * Uses a transport client with a custom keystore; this keystore testclient-client-profile.jks trusts the testnode, +     * certificate and had its own self signed certificate. This test connects to the no_client_auth profile, which, +     * uses a truststore that does not trust the testclient-client-profile certificate but does not require client, +     * authentication, +     */, +    /**, +     * Uses a transport client with a custom keystore; this keystore testclient-client-profile.jks trusts the testnode, +     * certificate and had its own self signed certificate. This test connects to the default profile, which, +     * uses a truststore that does not trust the testclient-client-profile certificate and requires client authentication, +     * so the connection should always fail, +     */, +    /**, +     * Uses a transport client with a custom keystore; this keystore testclient-client-profile.jks trusts the testnode, +     * certificate and had its own self signed certificate. This test connects to the no_ssl profile, which does not, +     * use SSL so the connection will never work, +     */, +    /**, +     * Uses a transport client with SSL disabled. This test connects to the no_ssl profile, which should always succeed, +     */, +    /**, +     * Uses a transport client with SSL disabled. This test connects to the default profile, which should always fail, +     * as a non-ssl transport client cannot connect to a ssl profile, +     */, +    /**, +     * Uses a transport client with SSL disabled. This test connects to the client profile, which should always fail, +     * as a non-ssl transport client cannot connect to a ssl profile, +     */, +    /**, +     * Uses a transport client with SSL disabled. This test connects to the no_client_auth profile, which should always fail, +     * as a non-ssl transport client cannot connect to a ssl profile, +     */, +    /**, +     * Uses a transport client with a custom truststore; this truststore truststore-testnode-only only trusts the testnode, +     * certificate and contains no other certification. This test connects to the no_client_auth profile, which uses, +     * the testnode certificate and does not require to present a certificate, so this connection should always succeed, +     */, +    /**, +     * Uses a transport client with a custom truststore; this truststore truststore-testnode-only only trusts the testnode, +     * certificate and contains no other certification. This test connects to the client profile, which uses, +     * the testnode certificate and requires the client to present a certificate, so this connection will never work as, +     * the client has no certificate to present, +     */, +    /**, +     * Uses a transport client with a custom truststore; this truststore truststore-testnode-only only trusts the testnode, +     * certificate and contains no other certification. This test connects to the default profile, which uses, +     * the testnode certificate and requires the client to present a certificate, so this connection will never work as, +     * the client has no certificate to present, +     */, +    /**, +     * Uses a transport client with a custom truststore; this truststore truststore-testnode-only only trusts the testnode, +     * certificate and contains no other certification. This test connects to the no_ssl profile, which does not use, +     * SSL so the connection should never succeed, +     */, +, +    /**, +     * Uses a transport client with the default JDK truststore; this truststore only trusts the known good public, +     * certificate authorities. This test connects to the default profile, which uses a self-signed certificate that, +     * will never be trusted by the default truststore so the connection should always fail, +     */, +    @Test(expected = NoNodeAvailableException.class), +    public void testThatSSLTransportClientWithNoTruststoreCannotConnectToDefaultProfile() throws Exception {]