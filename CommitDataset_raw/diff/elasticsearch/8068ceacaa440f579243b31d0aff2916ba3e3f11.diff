[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    public PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +        super(shardId, originalIndices);, +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    public PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +        super(shardId, originalIndices);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +                OriginalIndices originalIndices = OriginalIndices.readOriginalIndices(in);, +                PercolateShardRequest shardRequest = new PercolateShardRequest(new ShardId(index, shardId), originalIndices);, +                shardRequest.documentType(in.readString());, +                shardRequest.source(in.readBytesReference());, +                shardRequest.docSource(in.readBytesReference());, +                shardRequest.onlyCount(in.readBoolean());, +                OriginalIndices.writeOriginalIndices(item.request.originalIndices(), out);, +                out.writeString(item.request.documentType());, +                out.writeBytesReference(item.request.source());, +                out.writeBytesReference(item.request.docSource());, +                out.writeBoolean(item.request.onlyCount());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    public PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +        super(shardId, originalIndices);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +                OriginalIndices originalIndices = OriginalIndices.readOriginalIndices(in);, +                PercolateShardRequest shardRequest = new PercolateShardRequest(new ShardId(index, shardId), originalIndices);, +                shardRequest.documentType(in.readString());, +                shardRequest.source(in.readBytesReference());, +                shardRequest.docSource(in.readBytesReference());, +                shardRequest.onlyCount(in.readBoolean());, +                OriginalIndices.writeOriginalIndices(item.request.originalIndices(), out);, +                out.writeString(item.request.documentType());, +                out.writeBytesReference(item.request.source());, +                out.writeBytesReference(item.request.docSource());, +                out.writeBoolean(item.request.onlyCount());, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +                    logger.trace("node: [{}], most available: total disk: {}, available disk: {} / least available: total disk: {}, available disk: {}", nodeId, mostAvailablePath.getTotal(), leastAvailablePath.getAvailable(), leastAvailablePath.getTotal(), leastAvailablePath.getAvailable());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    public PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +        super(shardId, originalIndices);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +                OriginalIndices originalIndices = OriginalIndices.readOriginalIndices(in);, +                PercolateShardRequest shardRequest = new PercolateShardRequest(new ShardId(index, shardId), originalIndices);, +                shardRequest.documentType(in.readString());, +                shardRequest.source(in.readBytesReference());, +                shardRequest.docSource(in.readBytesReference());, +                shardRequest.onlyCount(in.readBoolean());, +                OriginalIndices.writeOriginalIndices(item.request.originalIndices(), out);, +                out.writeString(item.request.documentType());, +                out.writeBytesReference(item.request.source());, +                out.writeBytesReference(item.request.docSource());, +                out.writeBoolean(item.request.onlyCount());, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +                    logger.trace("node: [{}], most available: total disk: {}, available disk: {} / least available: total disk: {}, available disk: {}", nodeId, mostAvailablePath.getTotal(), leastAvailablePath.getAvailable(), leastAvailablePath.getTotal(), leastAvailablePath.getAvailable());, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedRunnable.java, +        creationDate = System.nanoTime();, +        return Math.max(0, (System.nanoTime() - creationDate) / 1000);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    public PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +        super(shardId, originalIndices);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +                OriginalIndices originalIndices = OriginalIndices.readOriginalIndices(in);, +                PercolateShardRequest shardRequest = new PercolateShardRequest(new ShardId(index, shardId), originalIndices);, +                shardRequest.documentType(in.readString());, +                shardRequest.source(in.readBytesReference());, +                shardRequest.docSource(in.readBytesReference());, +                shardRequest.onlyCount(in.readBoolean());, +                OriginalIndices.writeOriginalIndices(item.request.originalIndices(), out);]