[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ElasticsearchException extends RuntimeException implements ToXContent, Writeable {, +    @Override, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ElasticsearchException extends RuntimeException implements ToXContent, Writeable {, +    @Override, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/NodesHotThreadsResponse.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.List;, +    public NodesHotThreadsResponse(ClusterName clusterName, List<NodeHotThreads> nodes, List<FailedNodeException> failures) {, +        super(clusterName, nodes, failures);, +    protected List<NodeHotThreads> readNodesFrom(StreamInput in) throws IOException {, +        return in.readList(NodeHotThreads::readNodeHotThreads);, +    protected void writeNodesTo(StreamOutput out, List<NodeHotThreads> nodes) throws IOException {, +        out.writeStreamableList(nodes);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ElasticsearchException extends RuntimeException implements ToXContent, Writeable {, +    @Override, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/NodesHotThreadsResponse.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.List;, +    public NodesHotThreadsResponse(ClusterName clusterName, List<NodeHotThreads> nodes, List<FailedNodeException> failures) {, +        super(clusterName, nodes, failures);, +    protected List<NodeHotThreads> readNodesFrom(StreamInput in) throws IOException {, +        return in.readList(NodeHotThreads::readNodeHotThreads);, +    protected void writeNodesTo(StreamOutput out, List<NodeHotThreads> nodes) throws IOException {, +        out.writeStreamableList(nodes);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +import org.elasticsearch.action.FailedNodeException;, +public class TransportNodesHotThreadsAction extends TransportNodesAction<NodesHotThreadsRequest,, +                                                                         NodesHotThreadsResponse,, +                                                                         TransportNodesHotThreadsAction.NodeRequest,, +                                                                         NodeHotThreads> {, +              indexNameExpressionResolver, NodesHotThreadsRequest::new, NodeRequest::new, ThreadPool.Names.GENERIC, NodeHotThreads.class);, +    protected NodesHotThreadsResponse newResponse(NodesHotThreadsRequest request,, +                                                  List<NodeHotThreads> responses, List<FailedNodeException> failures) {, +        return new NodesHotThreadsResponse(clusterName, responses, failures);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ElasticsearchException extends RuntimeException implements ToXContent, Writeable {, +    @Override, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/NodesHotThreadsResponse.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.List;, +    public NodesHotThreadsResponse(ClusterName clusterName, List<NodeHotThreads> nodes, List<FailedNodeException> failures) {, +        super(clusterName, nodes, failures);, +    protected List<NodeHotThreads> readNodesFrom(StreamInput in) throws IOException {, +        return in.readList(NodeHotThreads::readNodeHotThreads);, +    protected void writeNodesTo(StreamOutput out, List<NodeHotThreads> nodes) throws IOException {, +        out.writeStreamableList(nodes);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +import org.elasticsearch.action.FailedNodeException;, +public class TransportNodesHotThreadsAction extends TransportNodesAction<NodesHotThreadsRequest,, +                                                                         NodesHotThreadsResponse,, +                                                                         TransportNodesHotThreadsAction.NodeRequest,, +                                                                         NodeHotThreads> {, +              indexNameExpressionResolver, NodesHotThreadsRequest::new, NodeRequest::new, ThreadPool.Names.GENERIC, NodeHotThreads.class);, +    protected NodesHotThreadsResponse newResponse(NodesHotThreadsRequest request,, +                                                  List<NodeHotThreads> responses, List<FailedNodeException> failures) {, +        return new NodesHotThreadsResponse(clusterName, responses, failures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoResponse.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.List;, +    public NodesInfoResponse(ClusterName clusterName, List<NodeInfo> nodes, List<FailedNodeException> failures) {, +        super(clusterName, nodes, failures);, +    protected List<NodeInfo> readNodesFrom(StreamInput in) throws IOException {, +        return in.readList(NodeInfo::readNodeInfo);, +    protected void writeNodesTo(StreamOutput out, List<NodeInfo> nodes) throws IOException {, +        out.writeStreamableList(nodes);, +        for (NodeInfo nodeInfo : getNodes()) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ElasticsearchException extends RuntimeException implements ToXContent, Writeable {, +    @Override, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/NodesHotThreadsResponse.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.List;, +    public NodesHotThreadsResponse(ClusterName clusterName, List<NodeHotThreads> nodes, List<FailedNodeException> failures) {, +        super(clusterName, nodes, failures);, +    protected List<NodeHotThreads> readNodesFrom(StreamInput in) throws IOException {, +        return in.readList(NodeHotThreads::readNodeHotThreads);, +    protected void writeNodesTo(StreamOutput out, List<NodeHotThreads> nodes) throws IOException {, +        out.writeStreamableList(nodes);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +import org.elasticsearch.action.FailedNodeException;, +public class TransportNodesHotThreadsAction extends TransportNodesAction<NodesHotThreadsRequest,, +                                                                         NodesHotThreadsResponse,, +                                                                         TransportNodesHotThreadsAction.NodeRequest,, +                                                                         NodeHotThreads> {, +              indexNameExpressionResolver, NodesHotThreadsRequest::new, NodeRequest::new, ThreadPool.Names.GENERIC, NodeHotThreads.class);, +    protected NodesHotThreadsResponse newResponse(NodesHotThreadsRequest request,, +                                                  List<NodeHotThreads> responses, List<FailedNodeException> failures) {, +        return new NodesHotThreadsResponse(clusterName, responses, failures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoResponse.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.List;, +    public NodesInfoResponse(ClusterName clusterName, List<NodeInfo> nodes, List<FailedNodeException> failures) {]