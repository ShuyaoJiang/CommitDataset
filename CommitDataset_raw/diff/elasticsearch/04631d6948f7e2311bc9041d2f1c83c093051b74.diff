[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +public final class NotSerializableExceptionWrapper extends ElasticsearchException.WithRestHeadersException {, +    public NotSerializableExceptionWrapper(Throwable other, Map<String, List<String>> headers) {, +        super(other.getMessage(), other.getCause(), headers);, +    public NotSerializableExceptionWrapper(WithRestHeadersException other) {, +        this(other, other.getHeaders());, +    }, +, +    public NotSerializableExceptionWrapper(Throwable other) {, +        this(other, Collections.EMPTY_MAP);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +public final class NotSerializableExceptionWrapper extends ElasticsearchException.WithRestHeadersException {, +    public NotSerializableExceptionWrapper(Throwable other, Map<String, List<String>> headers) {, +        super(other.getMessage(), other.getCause(), headers);, +    public NotSerializableExceptionWrapper(WithRestHeadersException other) {, +        this(other, other.getHeaders());, +    }, +, +    public NotSerializableExceptionWrapper(Throwable other) {, +        this(other, Collections.EMPTY_MAP);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +                } else if (throwable instanceof ElasticsearchException.WithRestHeadersException) {, +                    // ensure we transport also the headers, +                    ex = new NotSerializableExceptionWrapper((ElasticsearchException.WithRestHeadersException)throwable);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +public final class NotSerializableExceptionWrapper extends ElasticsearchException.WithRestHeadersException {, +    public NotSerializableExceptionWrapper(Throwable other, Map<String, List<String>> headers) {, +        super(other.getMessage(), other.getCause(), headers);, +    public NotSerializableExceptionWrapper(WithRestHeadersException other) {, +        this(other, other.getHeaders());, +    }, +, +    public NotSerializableExceptionWrapper(Throwable other) {, +        this(other, Collections.EMPTY_MAP);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +                } else if (throwable instanceof ElasticsearchException.WithRestHeadersException) {, +                    // ensure we transport also the headers, +                    ex = new NotSerializableExceptionWrapper((ElasticsearchException.WithRestHeadersException)throwable);, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +import org.elasticsearch.common.collect.Tuple;, +        assertTrue(notRegistered.remove(UnknownHeaderException.class));, +, +    public void testWithRestHeadersException() throws IOException {, +        ElasticsearchException.WithRestHeadersException ex = serialize(new ElasticsearchException.WithRestHeadersException("msg", new Tuple("foo", new String[]{"foo", "bar"})));, +        assertEquals("msg", ex.getMessage());, +        assertEquals(2, ex.getHeaders().get("foo").size());, +        assertEquals("foo", ex.getHeaders().get("foo").get(0));, +        assertEquals("bar", ex.getHeaders().get("foo").get(1));, +, +        // ensure we are carrying over the headers even if not serialized, +        ElasticsearchException e = serialize((ElasticsearchException)new UnknownHeaderException("msg", new Tuple("foo", new String[]{"foo", "bar"})));, +        assertTrue(e instanceof NotSerializableExceptionWrapper);, +        assertEquals("msg", ex.getMessage());, +        assertEquals(2, ex.getHeaders().get("foo").size());]