[+++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +                        AlertActionRegistry actionRegistry, ThreadPool threadPool, ScriptService scriptService, Client client) {, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +                        AlertActionRegistry actionRegistry, ThreadPool threadPool, ScriptService scriptService, Client client) {, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, + * Simple service to get settings that are persisted in the a special document in the .alerts index., + * Also notifies known components about setting changes., + *, + * The service requires on the fact that the alert service has been started., +    public Settings getConfig() {, +            client.admin().indices().prepareRefresh(AlertsStore.ALERT_INDEX).get();, +            logger.error("No index [" + AlertsStore.ALERT_INDEX + "] found");, +        GetResponse response = client.prepareGet(AlertsStore.ALERT_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void updateConfig(BytesReference settingsSource) throws IOException {, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +                        AlertActionRegistry actionRegistry, ThreadPool threadPool, ScriptService scriptService, Client client) {, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, + * Simple service to get settings that are persisted in the a special document in the .alerts index., + * Also notifies known components about setting changes., + *, + * The service requires on the fact that the alert service has been started., +    public Settings getConfig() {, +            client.admin().indices().prepareRefresh(AlertsStore.ALERT_INDEX).get();, +            logger.error("No index [" + AlertsStore.ALERT_INDEX + "] found");, +        GetResponse response = client.prepareGet(AlertsStore.ALERT_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void updateConfig(BytesReference settingsSource) throws IOException {, +++ b/src/main/java/org/elasticsearch/alerts/actions/SmtpAlertActionFactory.java, +            settings = configurationManager.getConfig();, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +                        AlertActionRegistry actionRegistry, ThreadPool threadPool, ScriptService scriptService, Client client) {, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, + * Simple service to get settings that are persisted in the a special document in the .alerts index., + * Also notifies known components about setting changes., + *, + * The service requires on the fact that the alert service has been started., +    public Settings getConfig() {, +            client.admin().indices().prepareRefresh(AlertsStore.ALERT_INDEX).get();, +            logger.error("No index [" + AlertsStore.ALERT_INDEX + "] found");, +        GetResponse response = client.prepareGet(AlertsStore.ALERT_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void updateConfig(BytesReference settingsSource) throws IOException {, +++ b/src/main/java/org/elasticsearch/alerts/actions/SmtpAlertActionFactory.java, +            settings = configurationManager.getConfig();, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/config/ConfigAlertRequest.java, +import org.elasticsearch.alerts.AlertsStore;, +        return "config {[" + AlertsStore.ALERT_INDEX + "][" + ConfigurationManager.CONFIG_TYPE + "]}";, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +                        AlertActionRegistry actionRegistry, ThreadPool threadPool, ScriptService scriptService, Client client) {, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, + * Simple service to get settings that are persisted in the a special document in the .alerts index., + * Also notifies known components about setting changes., + *, + * The service requires on the fact that the alert service has been started., +    public Settings getConfig() {, +            client.admin().indices().prepareRefresh(AlertsStore.ALERT_INDEX).get();, +            logger.error("No index [" + AlertsStore.ALERT_INDEX + "] found");, +        GetResponse response = client.prepareGet(AlertsStore.ALERT_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void updateConfig(BytesReference settingsSource) throws IOException {, +++ b/src/main/java/org/elasticsearch/alerts/actions/SmtpAlertActionFactory.java, +            settings = configurationManager.getConfig();, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/config/ConfigAlertRequest.java, +import org.elasticsearch.alerts.AlertsStore;, +        return "config {[" + AlertsStore.ALERT_INDEX + "][" + ConfigurationManager.CONFIG_TYPE + "]}";, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/config/TransportConfigAlertAction.java, +import org.elasticsearch.alerts.AlertsStore;, +            IndexResponse indexResponse = client.prepareIndex(AlertsStore.ALERT_INDEX, ConfigurationManager.CONFIG_TYPE, ConfigurationManager.GLOBAL_CONFIG_NAME), +            configManager.updateConfig(request.getConfigSource());, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.WRITE, new String[]{AlertsStore.ALERT_INDEX});, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +                        AlertActionRegistry actionRegistry, ThreadPool threadPool, ScriptService scriptService, Client client) {, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, + * Simple service to get settings that are persisted in the a special document in the .alerts index., + * Also notifies known components about setting changes., + *, + * The service requires on the fact that the alert service has been started., +    public Settings getConfig() {, +            client.admin().indices().prepareRefresh(AlertsStore.ALERT_INDEX).get();, +            logger.error("No index [" + AlertsStore.ALERT_INDEX + "] found");, +        GetResponse response = client.prepareGet(AlertsStore.ALERT_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void updateConfig(BytesReference settingsSource) throws IOException {, +++ b/src/main/java/org/elasticsearch/alerts/actions/SmtpAlertActionFactory.java, +            settings = configurationManager.getConfig();, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/config/ConfigAlertRequest.java, +import org.elasticsearch.alerts.AlertsStore;, +        return "config {[" + AlertsStore.ALERT_INDEX + "][" + ConfigurationManager.CONFIG_TYPE + "]}";, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/config/TransportConfigAlertAction.java, +import org.elasticsearch.alerts.AlertsStore;, +            IndexResponse indexResponse = client.prepareIndex(AlertsStore.ALERT_INDEX, ConfigurationManager.CONFIG_TYPE, ConfigurationManager.GLOBAL_CONFIG_NAME), +            configManager.updateConfig(request.getConfigSource());, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.WRITE, new String[]{AlertsStore.ALERT_INDEX});, +++ b/src/test/java/org/elasticsearch/alerts/ConfigTest.java, +        configurationManager.updateConfig(jsonSettings.bytes());, +                .prepareIndex(AlertsStore.ALERT_INDEX, ConfigurationManager.CONFIG_TYPE, "global"), +, +        Settings loadedSettings = configurationManager.getConfig();]