[+++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +            return parseLong(value, roundUp, now);, +++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +            return parseLong(value, roundUp, now);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValueType.java, +    // TODO: what is the difference between "number" and "numeric"?, +    },, +    BOOLEAN((byte) 9, "boolean", "boolean", ValuesSourceType.NUMERIC, IndexNumericFieldData.class, DocValueFormat.BOOLEAN) {, +        @Override, +        public boolean isNumeric() {, +            return super.isNumeric();, +        }, +            case "boolean": return BOOLEAN;, +                // TODO: do not be lenient here, +++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +            return parseLong(value, roundUp, now);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValueType.java, +    // TODO: what is the difference between "number" and "numeric"?, +    },, +    BOOLEAN((byte) 9, "boolean", "boolean", ValuesSourceType.NUMERIC, IndexNumericFieldData.class, DocValueFormat.BOOLEAN) {, +        @Override, +        public boolean isNumeric() {, +            return super.isNumeric();, +        }, +            case "boolean": return BOOLEAN;, +                // TODO: do not be lenient here, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java, +import org.elasticsearch.search.aggregations.AggregationInitializationException;, +        ValueType valueType = this.valueType != null ? this.valueType : targetValueType;, +        return ValuesSourceConfig.resolve(context.getQueryShardContext(),, +                valueType, field, script, missing, timeZone, format);, +++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +            return parseLong(value, roundUp, now);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValueType.java, +    // TODO: what is the difference between "number" and "numeric"?, +    },, +    BOOLEAN((byte) 9, "boolean", "boolean", ValuesSourceType.NUMERIC, IndexNumericFieldData.class, DocValueFormat.BOOLEAN) {, +        @Override, +        public boolean isNumeric() {, +            return super.isNumeric();, +        }, +            case "boolean": return BOOLEAN;, +                // TODO: do not be lenient here, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java, +import org.elasticsearch.search.aggregations.AggregationInitializationException;, +        ValueType valueType = this.valueType != null ? this.valueType : targetValueType;, +        return ValuesSourceConfig.resolve(context.getQueryShardContext(),, +                valueType, field, script, missing, timeZone, format);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregatorFactory.java, +        VS vs = config.toValuesSource(context.getQueryShardContext());, +++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +            return parseLong(value, roundUp, now);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValueType.java, +    // TODO: what is the difference between "number" and "numeric"?, +    },, +    BOOLEAN((byte) 9, "boolean", "boolean", ValuesSourceType.NUMERIC, IndexNumericFieldData.class, DocValueFormat.BOOLEAN) {, +        @Override, +        public boolean isNumeric() {, +            return super.isNumeric();, +        }, +            case "boolean": return BOOLEAN;, +                // TODO: do not be lenient here, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregationBuilder.java, +import org.elasticsearch.search.aggregations.AggregationInitializationException;, +        ValueType valueType = this.valueType != null ? this.valueType : targetValueType;, +        return ValuesSourceConfig.resolve(context.getQueryShardContext(),, +                valueType, field, script, missing, timeZone, format);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceAggregatorFactory.java, +        VS vs = config.toValuesSource(context.getQueryShardContext());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptContext;, +/**, + * A configuration that tells aggregations how to retrieve data from the index, + * in order to run a specific aggregation., + */, +    /**, +     * Resolve a {@link ValuesSourceConfig} given configuration parameters., +     */, +    public static <VS extends ValuesSource> ValuesSourceConfig<VS> resolve(, +            QueryShardContext context,, +            ValueType valueType,, +            String field, Script script,, +            Object missing,, +            DateTimeZone timeZone,, +            String format) {, +, +        if (field == null) {, +            if (script == null) {, +                @SuppressWarnings("unchecked"), +                ValuesSourceConfig<VS> config = new ValuesSourceConfig<>(ValuesSourceType.ANY);, +                config.format(resolveFormat(null, valueType));, +                return config;, +            }, +            ValuesSourceType valuesSourceType = valueType != null ? valueType.getValuesSourceType() : ValuesSourceType.ANY;, +            if (valuesSourceType == ValuesSourceType.ANY) {, +                // the specific value source type is undefined, but for scripts,, +                // we need to have a specific value source]