[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.node.Node;, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING,, +        SearchService.DEFAULT_KEEPALIVE_SETTING,, +        SearchService.KEEPALIVE_INTERVAL_SETTING,, +        Node.WRITE_PORTS_FIELD_SETTING, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.node.Node;, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING,, +        SearchService.DEFAULT_KEEPALIVE_SETTING,, +        SearchService.KEEPALIVE_INTERVAL_SETTING,, +        Node.WRITE_PORTS_FIELD_SETTING, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> WRITE_PORTS_FIELD_SETTING = Setting.boolSetting("node.portsfile", false, false, Setting.Scope.CLUSTER);, +        if (WRITE_PORTS_FIELD_SETTING.get(settings)) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.node.Node;, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING,, +        SearchService.DEFAULT_KEEPALIVE_SETTING,, +        SearchService.KEEPALIVE_INTERVAL_SETTING,, +        Node.WRITE_PORTS_FIELD_SETTING, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> WRITE_PORTS_FIELD_SETTING = Setting.boolSetting("node.portsfile", false, false, Setting.Scope.CLUSTER);, +        if (WRITE_PORTS_FIELD_SETTING.get(settings)) {, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.node.Node;, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING,, +        SearchService.DEFAULT_KEEPALIVE_SETTING,, +        SearchService.KEEPALIVE_INTERVAL_SETTING,, +        Node.WRITE_PORTS_FIELD_SETTING, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> WRITE_PORTS_FIELD_SETTING = Setting.boolSetting("node.portsfile", false, false, Setting.Scope.CLUSTER);, +        if (WRITE_PORTS_FIELD_SETTING.get(settings)) {, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +    // we can have 5 minutes here, since we make sure to clean with search requests and when shard/index closes, +    public static final Setting<TimeValue> DEFAULT_KEEPALIVE_SETTING = Setting.positiveTimeSetting("search.default_keep_alive", timeValueMinutes(5), false, Setting.Scope.CLUSTER);, +    public static final Setting<TimeValue> KEEPALIVE_INTERVAL_SETTING = Setting.positiveTimeSetting("search.keep_alive_interval", timeValueMinutes(1), false, Setting.Scope.CLUSTER);, +        TimeValue keepAliveInterval = KEEPALIVE_INTERVAL_SETTING.get(settings);, +        this.defaultKeepAlive = DEFAULT_KEEPALIVE_SETTING.get(settings).millis();, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.node.Node;, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING,, +        SearchService.DEFAULT_KEEPALIVE_SETTING,, +        SearchService.KEEPALIVE_INTERVAL_SETTING,, +        Node.WRITE_PORTS_FIELD_SETTING, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> WRITE_PORTS_FIELD_SETTING = Setting.boolSetting("node.portsfile", false, false, Setting.Scope.CLUSTER);, +        if (WRITE_PORTS_FIELD_SETTING.get(settings)) {, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +    // we can have 5 minutes here, since we make sure to clean with search requests and when shard/index closes, +    public static final Setting<TimeValue> DEFAULT_KEEPALIVE_SETTING = Setting.positiveTimeSetting("search.default_keep_alive", timeValueMinutes(5), false, Setting.Scope.CLUSTER);, +    public static final Setting<TimeValue> KEEPALIVE_INTERVAL_SETTING = Setting.positiveTimeSetting("search.keep_alive_interval", timeValueMinutes(1), false, Setting.Scope.CLUSTER);, +        TimeValue keepAliveInterval = KEEPALIVE_INTERVAL_SETTING.get(settings);, +        this.defaultKeepAlive = DEFAULT_KEEPALIVE_SETTING.get(settings).millis();, +++ b/core/src/test/java/org/elasticsearch/search/StressSearchServiceReaperIT.java, +                .put(SearchService.KEEPALIVE_INTERVAL_SETTING.getKey(), TimeValue.timeValueMillis(1)).build();, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.node.Node;, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING,, +        SearchService.DEFAULT_KEEPALIVE_SETTING,, +        SearchService.KEEPALIVE_INTERVAL_SETTING,, +        Node.WRITE_PORTS_FIELD_SETTING, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> WRITE_PORTS_FIELD_SETTING = Setting.boolSetting("node.portsfile", false, false, Setting.Scope.CLUSTER);, +        if (WRITE_PORTS_FIELD_SETTING.get(settings)) {, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +    // we can have 5 minutes here, since we make sure to clean with search requests and when shard/index closes, +    public static final Setting<TimeValue> DEFAULT_KEEPALIVE_SETTING = Setting.positiveTimeSetting("search.default_keep_alive", timeValueMinutes(5), false, Setting.Scope.CLUSTER);, +    public static final Setting<TimeValue> KEEPALIVE_INTERVAL_SETTING = Setting.positiveTimeSetting("search.keep_alive_interval", timeValueMinutes(1), false, Setting.Scope.CLUSTER);, +        TimeValue keepAliveInterval = KEEPALIVE_INTERVAL_SETTING.get(settings);, +        this.defaultKeepAlive = DEFAULT_KEEPALIVE_SETTING.get(settings).millis();, +++ b/core/src/test/java/org/elasticsearch/search/StressSearchServiceReaperIT.java, +                .put(SearchService.KEEPALIVE_INTERVAL_SETTING.getKey(), TimeValue.timeValueMillis(1)).build();, +++ b/test/framework/src/main/java/org/elasticsearch/cache/recycler/MockPageCacheRecycler.java, +        // we always initialize with 0 here since we really only wanna have some random bytes / ints / longs, +        // and given the fact that it's called concurrently it won't reproduces anyway the same order other than in a unittest, +        // for the latter 0 is just fine]