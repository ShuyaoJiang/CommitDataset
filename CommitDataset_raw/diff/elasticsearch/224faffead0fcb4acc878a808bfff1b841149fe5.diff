[+++ b/src/main/java/org/elasticsearch/search/facet/terms/strings/HashedScriptAggregator.java, +import com.google.common.collect.ImmutableSet;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +    public void addValue(BytesRef value, int hashCode) {, +        if (excluded != null && excluded.contains(value)) {, +            return;, +        }, +        UnicodeUtil.UTF8toUTF16(value, spare);, +        if (matcher != null) {, +            assert convert : "regexp: [convert == false] but should be true";, +            assert value.utf8ToString().equals(spare.toString()) : "not converted";, +            if (!matcher.reset(spare).matches()) {, +                return;, +            }, +        }, +        super.addValue(value, hashCode);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/search/facet/terms/strings/HashedScriptAggregator.java, +import com.google.common.collect.ImmutableSet;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +    public void addValue(BytesRef value, int hashCode) {, +        if (excluded != null && excluded.contains(value)) {, +            return;, +        }, +        UnicodeUtil.UTF8toUTF16(value, spare);, +        if (matcher != null) {, +            assert convert : "regexp: [convert == false] but should be true";, +            assert value.utf8ToString().equals(spare.toString()) : "not converted";, +            if (!matcher.reset(spare).matches()) {, +                return;, +            }, +        }, +        super.addValue(value, hashCode);, +    }, +, +    @Override, +++ b/src/test/java/org/elasticsearch/test/integration/search/facet/ExtendedFacetsTests.java, +package org.elasticsearch.test.integration.search.facet;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.RandomStringGenerator;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.regex.Regex;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.text.StringText;, +import org.elasticsearch.common.text.Text;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.facet.FacetBuilders;, +import org.elasticsearch.search.facet.terms.TermsFacet;, +import org.elasticsearch.search.facet.terms.TermsFacetBuilder;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.testng.annotations.AfterClass;, +import org.testng.annotations.BeforeClass;, +import org.testng.annotations.Test;, +, +import java.util.*;, +import java.util.regex.Pattern;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.equalTo;, +, +/**, + */, +public class ExtendedFacetsTests extends AbstractNodesTests {, +, +    private Client client;, +, +    @BeforeClass, +    public void createNodes() throws Exception {, +        Settings settings = ImmutableSettings.settingsBuilder().put("index.number_of_shards", numberOfShards()).put("index.number_of_replicas", 0).build();, +        for (int i = 0; i < numberOfNodes(); i++) {, +            startNode("node" + i, settings);, +        }, +        client = getClient();, +    }, +, +    protected int numberOfShards() {, +        return 1;, +    }, +, +    protected int numberOfNodes() {, +        return 1;, +    }, +, +    protected int numDocs() {, +        return 2500;, +    }, +, +    @AfterClass, +    public void closeNodes() {, +        client.close();, +        closeAllNodes();, +    }]