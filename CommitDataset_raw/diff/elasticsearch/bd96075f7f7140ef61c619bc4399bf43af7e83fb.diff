[+++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +            convertMultiPhraseQuery(0, new int[q.getTermArrays().length], q, q.getTermArrays(), q.getPositions(), reader, flatQueries);, +    private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, Term[][] terms, int[] pos, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +        if (currentPos == terms.length) {, +                queryBuilder.add(terms[i][termsIdx[i]], pos[i]);, +            Term[] t = terms[currentPos];, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +            convertMultiPhraseQuery(0, new int[q.getTermArrays().length], q, q.getTermArrays(), q.getPositions(), reader, flatQueries);, +    private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, Term[][] terms, int[] pos, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +        if (currentPos == terms.length) {, +                queryBuilder.add(terms[i][termsIdx[i]], pos[i]);, +            Term[] t = terms[currentPos];, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                indexNameExpressionResolver.concreteIndexNames(clusterState, IndicesOptions.strictExpand(), request.indices());, +            concreteIndices = indexNameExpressionResolver.concreteIndexNames(clusterState, request);, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +            convertMultiPhraseQuery(0, new int[q.getTermArrays().length], q, q.getTermArrays(), q.getPositions(), reader, flatQueries);, +    private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, Term[][] terms, int[] pos, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +        if (currentPos == terms.length) {, +                queryBuilder.add(terms[i][termsIdx[i]], pos[i]);, +            Term[] t = terms[currentPos];, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                indexNameExpressionResolver.concreteIndexNames(clusterState, IndicesOptions.strictExpand(), request.indices());, +            concreteIndices = indexNameExpressionResolver.concreteIndexNames(clusterState, request);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsGroup.java, +        index = new Index(in);, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +            convertMultiPhraseQuery(0, new int[q.getTermArrays().length], q, q.getTermArrays(), q.getPositions(), reader, flatQueries);, +    private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, Term[][] terms, int[] pos, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +        if (currentPos == terms.length) {, +                queryBuilder.add(terms[i][termsIdx[i]], pos[i]);, +            Term[] t = terms[currentPos];, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                indexNameExpressionResolver.concreteIndexNames(clusterState, IndicesOptions.strictExpand(), request.indices());, +            concreteIndices = indexNameExpressionResolver.concreteIndexNames(clusterState, request);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsGroup.java, +        index = new Index(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/TransportClusterSearchShardsAction.java, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ, indexNameExpressionResolver.concreteIndexNames(state, request));, +        String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(clusterState, request);, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +            convertMultiPhraseQuery(0, new int[q.getTermArrays().length], q, q.getTermArrays(), q.getPositions(), reader, flatQueries);, +    private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, Term[][] terms, int[] pos, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +        if (currentPos == terms.length) {, +                queryBuilder.add(terms[i][termsIdx[i]], pos[i]);, +            Term[] t = terms[currentPos];, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                indexNameExpressionResolver.concreteIndexNames(clusterState, IndicesOptions.strictExpand(), request.indices());, +            concreteIndices = indexNameExpressionResolver.concreteIndexNames(clusterState, request);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsGroup.java, +        index = new Index(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/TransportClusterSearchShardsAction.java, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ, indexNameExpressionResolver.concreteIndexNames(state, request));, +        String[] concreteIndices = indexNameExpressionResolver.concreteIndexNames(clusterState, request);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.READ, indexNameExpressionResolver.concreteIndexNames(state, request));, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();]