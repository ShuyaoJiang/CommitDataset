[+++ b/docs/reference/cluster/update-settings.asciidoc, +      on a specific node (float). Defaults to `0.55f`.  Raising this raises the, +      allocated on a node (float). `0.00f`.  Raising this raises the tendency, +      to equalize the number of primary shards across all nodes in the cluster. deprecated[1.3.8], +++ b/docs/reference/cluster/update-settings.asciidoc, +      on a specific node (float). Defaults to `0.55f`.  Raising this raises the, +      allocated on a node (float). `0.00f`.  Raising this raises the tendency, +      to equalize the number of primary shards across all nodes in the cluster. deprecated[1.3.8], +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     * @param state {@link ShardRoutingState} to retrieve, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +            shards.addAll(shardRoutingTable.shardsWithState(state));, +++ b/docs/reference/cluster/update-settings.asciidoc, +      on a specific node (float). Defaults to `0.55f`.  Raising this raises the, +      allocated on a node (float). `0.00f`.  Raising this raises the tendency, +      to equalize the number of primary shards across all nodes in the cluster. deprecated[1.3.8], +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     * @param state {@link ShardRoutingState} to retrieve, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +            shards.addAll(shardRoutingTable.shardsWithState(state));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +        if (state == ShardRoutingState.INITIALIZING) {, +            return allInitializingShards;, +        }, +++ b/docs/reference/cluster/update-settings.asciidoc, +      on a specific node (float). Defaults to `0.55f`.  Raising this raises the, +      allocated on a node (float). `0.00f`.  Raising this raises the tendency, +      to equalize the number of primary shards across all nodes in the cluster. deprecated[1.3.8], +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     * @param state {@link ShardRoutingState} to retrieve, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +            shards.addAll(shardRoutingTable.shardsWithState(state));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +        if (state == ShardRoutingState.INITIALIZING) {, +            return allInitializingShards;, +        }, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +            shards.addAll(indexRoutingTable.shardsWithState(state));, +++ b/docs/reference/cluster/update-settings.asciidoc, +      on a specific node (float). Defaults to `0.55f`.  Raising this raises the, +      allocated on a node (float). `0.00f`.  Raising this raises the tendency, +      to equalize the number of primary shards across all nodes in the cluster. deprecated[1.3.8], +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     * @param state {@link ShardRoutingState} to retrieve, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +            shards.addAll(shardRoutingTable.shardsWithState(state));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +        if (state == ShardRoutingState.INITIALIZING) {, +            return allInitializingShards;, +        }, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +            shards.addAll(indexRoutingTable.shardsWithState(state));, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +    private static final float DEFAULT_INDEX_BALANCE_FACTOR = 0.55f;, +    /**, +     * The primary balance factor was introduces as a tie-breaker to make the initial allocation, +     * more deterministic. Yet other mechanism have been added ensure that the algorithm is more deterministic such that this, +     * setting is not needed anymore. Additionally, this setting was abused to balance shards based on their primary flag which can lead, +     * to unexpected behavior when allocating or balancing the shards., +     *, +     * @deprecated the threshold primary balance factor is deprecated and should not be used., +     */, +    @Deprecated, +    private static final float DEFAULT_PRIMARY_BALANCE_FACTOR = 0.0f;, +        private final float[] theta;, +            theta = new float[]{shardBalance / sum, indexBalance / sum, primaryBalance / sum};, +            final float weightShard = node.numShards() - balancer.avgShardsPerNode();, +            final float weightIndex = node.numShards(index) - balancer.avgShardsPerNode(index);, +            final float weightPrimary = node.numPrimaries() - balancer.avgPrimariesPerNode();, +        MOVE, +        private static float absDelta(float lower, float higher) {, +            assert higher >= lower : higher + " lt " + lower +" but was expected to be gte";, +            return Math.abs(higher - lower);, +        }, +, +            return delta <= (threshold + 0.001f);, +                                float delta = absDelta(weights[lowIdx], weights[highIdx]);, +                                        && (absDelta(weights[0], weights[highIdx-1]) > threshold) // check if we need to break at all, +                                    logger.trace("Can not allocate on node [{}] remove from round decision [{}]", node, decision.type());, +++ b/docs/reference/cluster/update-settings.asciidoc, +      on a specific node (float). Defaults to `0.55f`.  Raising this raises the, +      allocated on a node (float). `0.00f`.  Raising this raises the tendency, +      to equalize the number of primary shards across all nodes in the cluster. deprecated[1.3.8], +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     * @param state {@link ShardRoutingState} to retrieve, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +            shards.addAll(shardRoutingTable.shardsWithState(state));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +        if (state == ShardRoutingState.INITIALIZING) {, +            return allInitializingShards;, +        }, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState state) {, +            shards.addAll(indexRoutingTable.shardsWithState(state));]