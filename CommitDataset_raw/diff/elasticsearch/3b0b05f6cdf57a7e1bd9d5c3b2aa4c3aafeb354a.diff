[+++ b/TESTING.asciidoc, +To run tests instrumented with jacoco and produce a coverage report in, +`target/site/jacoco/`:, +++ b/TESTING.asciidoc, +To run tests instrumented with jacoco and produce a coverage report in, +`target/site/jacoco/`:, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/TESTING.asciidoc, +To run tests instrumented with jacoco and produce a coverage report in, +`target/site/jacoco/`:, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/src/main/java/org/apache/lucene/queries/MinDocQuery.java, +import org.apache.lucene.util.Bits;, +            public Scorer scorer(LeafReaderContext context, final Bits acceptDocs) throws IOException {, +                        while (doc < maxDoc) {, +                            if (acceptDocs == null || acceptDocs.get(doc)) {, +                                break;, +                            }, +                            doc += 1;, +                        }, +++ b/TESTING.asciidoc, +To run tests instrumented with jacoco and produce a coverage report in, +`target/site/jacoco/`:, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/src/main/java/org/apache/lucene/queries/MinDocQuery.java, +import org.apache.lucene.util.Bits;, +            public Scorer scorer(LeafReaderContext context, final Bits acceptDocs) throws IOException {, +                        while (doc < maxDoc) {, +                            if (acceptDocs == null || acceptDocs.get(doc)) {, +                                break;, +                            }, +                            doc += 1;, +                        }, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        applySlop(q, slop);, +                        applySlop(q, slop);, +    protected WildcardQuery newWildcardQuery(Term t) {, +        // Backport: https://issues.apache.org/jira/browse/LUCENE-6677, +        assert Version.LATEST == Version.LUCENE_5_2_1;, +        WildcardQuery query = new WildcardQuery(t, maxDeterminizedStates);, +        query.setRewriteMethod(multiTermRewriteMethod);, +        return query;, +    }, +, +    @Override, +    private void applySlop(Query q, int slop) {, +        if (q instanceof FilteredQuery) {, +            applySlop(((FilteredQuery)q).getQuery(), slop);, +        if (q instanceof PhraseQuery) {, +            ((PhraseQuery) q).setSlop(slop);, +++ b/TESTING.asciidoc, +To run tests instrumented with jacoco and produce a coverage report in, +`target/site/jacoco/`:, +++ b/core/pom.xml, +, +        <!-- START: dependencies that might be shaded -->, +        <!-- END: dependencies that might be shaded -->, +++ b/core/src/main/java/org/apache/lucene/queries/MinDocQuery.java, +import org.apache.lucene.util.Bits;, +            public Scorer scorer(LeafReaderContext context, final Bits acceptDocs) throws IOException {, +                        while (doc < maxDoc) {, +                            if (acceptDocs == null || acceptDocs.get(doc)) {, +                                break;, +                            }, +                            doc += 1;, +                        }, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        applySlop(q, slop);, +                        applySlop(q, slop);, +    protected WildcardQuery newWildcardQuery(Term t) {, +        // Backport: https://issues.apache.org/jira/browse/LUCENE-6677, +        assert Version.LATEST == Version.LUCENE_5_2_1;, +        WildcardQuery query = new WildcardQuery(t, maxDeterminizedStates);, +        query.setRewriteMethod(multiTermRewriteMethod);, +        return query;, +    }, +, +    @Override, +    private void applySlop(Query q, int slop) {, +        if (q instanceof FilteredQuery) {, +            applySlop(((FilteredQuery)q).getQuery(), slop);, +        if (q instanceof PhraseQuery) {, +            ((PhraseQuery) q).setSlop(slop);, +++ b/core/src/main/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIterator.java, +/*, +Licensed to Elasticsearch under one or more contributor, +license agreements. See the NOTICE file distributed with, +this work for additional information regarding copyright, +ownership. Elasticsearch licenses this file to you under, +the Apache License, Version 2.0 (the "License"); you may, +not use this file except in compliance with the License.]