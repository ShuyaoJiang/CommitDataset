[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/100_stored_fields.yml, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/100_stored_fields.yml, +++ b/server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        DocumentMapper documentMapper = context.mapperService().documentMapper();, +        Text typeText = documentMapper.typeText();, +            return new SearchHit(docId, null, typeText, null);, +        DocumentMapper documentMapper = context.mapperService().documentMapper();, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/100_stored_fields.yml, +++ b/server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        DocumentMapper documentMapper = context.mapperService().documentMapper();, +        Text typeText = documentMapper.typeText();, +            return new SearchHit(docId, null, typeText, null);, +        DocumentMapper documentMapper = context.mapperService().documentMapper();, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsIT.java, +                assertThat(hit.getType(), equalTo("type"));, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/100_stored_fields.yml, +++ b/server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        DocumentMapper documentMapper = context.mapperService().documentMapper();, +        Text typeText = documentMapper.typeText();, +            return new SearchHit(docId, null, typeText, null);, +        DocumentMapper documentMapper = context.mapperService().documentMapper();, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsIT.java, +                assertThat(hit.getType(), equalTo("type"));, +++ b/server/src/test/java/org/elasticsearch/search/source/MetadataFetchingIT.java, +import org.apache.lucene.search.join.ScoreMode;, +import org.elasticsearch.index.query.InnerHitBuilder;, +import org.elasticsearch.index.query.NestedQueryBuilder;, +import org.elasticsearch.index.query.TermQueryBuilder;, +import org.elasticsearch.search.SearchHits;, +import org.elasticsearch.search.fetch.subphase.FetchSourceContext;, +import java.util.Collections;, +, +        client().prepareIndex("test", "_doc", "1").setSource("field", "value").execute().actionGet();, +        assertThat(response.getHits().getAt(0).getType(),  equalTo("_doc"));, +        assertThat(response.getHits().getAt(0).getType(),  equalTo("_doc"));, +    public void testInnerHits() {, +        assertAcked(prepareCreate("test").addMapping("_doc", "nested", "type=nested"));, +        ensureGreen();, +        client().prepareIndex("test", "_doc", "1"), +            .setSource("field", "value", "nested", Collections.singletonMap("title", "foo")).execute().actionGet();, +        refresh();, +, +        SearchResponse response = client(), +            .prepareSearch("test"), +            .storedFields("_none_"), +            .setFetchSource(false), +            .setQuery(, +                new NestedQueryBuilder("nested", new TermQueryBuilder("nested.title", "foo"), ScoreMode.Total), +                    .innerHit(new InnerHitBuilder(), +                        .setStoredFieldNames(Collections.singletonList("_none_")), +                        .setFetchSourceContext(new FetchSourceContext(false))), +            ), +            .get();, +        assertThat(response.getHits().totalHits, equalTo(1L));, +        assertThat(response.getHits().getAt(0).getId(), nullValue());, +        assertThat(response.getHits().getAt(0).getType(), equalTo("_doc"));, +        assertThat(response.getHits().getAt(0).getSourceAsString(), nullValue());, +        assertThat(response.getHits().getAt(0).getInnerHits().size(), equalTo(1));, +        SearchHits hits = response.getHits().getAt(0).getInnerHits().get("nested");, +        assertThat(hits.totalHits, equalTo(1L));, +        assertThat(hits.getAt(0).getId(), nullValue());, +        assertThat(hits.getAt(0).getType(), equalTo("_doc"));, +        assertThat(hits.getAt(0).getSourceAsString(), nullValue());, +    }, +, +        client().prepareIndex("test", "_doc", "1").setSource("field", "value").setRouting("toto").execute().actionGet();, +        assertThat(response.getHits().getAt(0).getType(),  equalTo("_doc"));, +        assertThat(response.getHits().getAt(0).getType(),  equalTo("_doc"));, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/100_stored_fields.yml, +++ b/server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        DocumentMapper documentMapper = context.mapperService().documentMapper();, +        Text typeText = documentMapper.typeText();, +            return new SearchHit(docId, null, typeText, null);, +        DocumentMapper documentMapper = context.mapperService().documentMapper();, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsIT.java, +                assertThat(hit.getType(), equalTo("type"));, +++ b/server/src/test/java/org/elasticsearch/search/source/MetadataFetchingIT.java, +import org.apache.lucene.search.join.ScoreMode;, +import org.elasticsearch.index.query.InnerHitBuilder;, +import org.elasticsearch.index.query.NestedQueryBuilder;, +import org.elasticsearch.index.query.TermQueryBuilder;, +import org.elasticsearch.search.SearchHits;, +import org.elasticsearch.search.fetch.subphase.FetchSourceContext;, +import java.util.Collections;, +, +        client().prepareIndex("test", "_doc", "1").setSource("field", "value").execute().actionGet();, +        assertThat(response.getHits().getAt(0).getType(),  equalTo("_doc"));, +        assertThat(response.getHits().getAt(0).getType(),  equalTo("_doc"));, +    public void testInnerHits() {, +        assertAcked(prepareCreate("test").addMapping("_doc", "nested", "type=nested"));, +        ensureGreen();, +        client().prepareIndex("test", "_doc", "1"), +            .setSource("field", "value", "nested", Collections.singletonMap("title", "foo")).execute().actionGet();, +        refresh();, +, +        SearchResponse response = client(), +            .prepareSearch("test"), +            .storedFields("_none_"), +            .setFetchSource(false), +            .setQuery(]