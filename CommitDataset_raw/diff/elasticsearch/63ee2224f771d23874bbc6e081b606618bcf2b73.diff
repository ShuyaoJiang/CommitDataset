[+++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +++ b/core/src/main/resources/org/elasticsearch/plugins/plugin-install.help, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +++ b/core/src/main/resources/org/elasticsearch/plugins/plugin-install.help, +++ b/modules/ingest-grok/src/main/java/org/elasticsearch/ingest/grok/GrokProcessor.java, +import org.elasticsearch.ingest.core.ConfigurationUtils;, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.nio.charset.StandardCharsets;, +import java.util.Collections;, +        private final static String[] PATTERN_NAMES = new String[] {, +            "aws", "bacula", "bro", "exim", "firewalls", "grok-patterns", "haproxy",, +            "java", "junos", "linux-syslog", "mcollective-patterns", "mongodb", "nagios",, +            "postgresql", "rails", "redis", "ruby", +        };, +        private final Map<String, String> builtinPatternBank;, +        public Factory() throws IOException {, +            // TODO(simonw): we should have a static helper method to load these patterns and make this, +            // factory only accept a String->String map instead. That way we can load, +            // the patterns in the IngestGrokPlugin ctor or even in a static context and this ctor doesn't need to throw any exception., +            Map<String, String> builtinPatterns = new HashMap<>();, +            for (String pattern : PATTERN_NAMES) {, +                try(InputStream is = getClass().getResourceAsStream("/patterns/" + pattern)) {, +                    loadBankFromStream(builtinPatterns, is);, +                }, +            }, +            this.builtinPatternBank = Collections.unmodifiableMap(builtinPatterns);, +        }, +, +        static void loadBankFromStream(Map<String, String> patternBank, InputStream inputStream) throws IOException {, +            String line;, +            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));, +            while ((line = br.readLine()) != null) {, +                String trimmedLine = line.replaceAll("^\\s+", "");, +                if (trimmedLine.startsWith("#") || trimmedLine.length() == 0) {, +                    continue;, +                }, +, +                String[] parts = trimmedLine.split("\\s+", 2);, +                if (parts.length == 2) {, +                    patternBank.put(parts[0], parts[1]);, +                }, +            }, +            Map<String, String> patternBank = new HashMap<>(builtinPatternBank);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +        threadPool.executor(ThreadPool.Names.INDEX).execute(() -> {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +++ b/core/src/main/resources/org/elasticsearch/plugins/plugin-install.help, +++ b/modules/ingest-grok/src/main/java/org/elasticsearch/ingest/grok/GrokProcessor.java, +import org.elasticsearch.ingest.core.ConfigurationUtils;, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.nio.charset.StandardCharsets;, +import java.util.Collections;, +        private final static String[] PATTERN_NAMES = new String[] {, +            "aws", "bacula", "bro", "exim", "firewalls", "grok-patterns", "haproxy",, +            "java", "junos", "linux-syslog", "mcollective-patterns", "mongodb", "nagios",, +            "postgresql", "rails", "redis", "ruby", +        };, +        private final Map<String, String> builtinPatternBank;, +        public Factory() throws IOException {, +            // TODO(simonw): we should have a static helper method to load these patterns and make this, +            // factory only accept a String->String map instead. That way we can load, +            // the patterns in the IngestGrokPlugin ctor or even in a static context and this ctor doesn't need to throw any exception., +            Map<String, String> builtinPatterns = new HashMap<>();, +            for (String pattern : PATTERN_NAMES) {, +                try(InputStream is = getClass().getResourceAsStream("/patterns/" + pattern)) {, +                    loadBankFromStream(builtinPatterns, is);, +                }, +            }, +            this.builtinPatternBank = Collections.unmodifiableMap(builtinPatterns);, +        }, +, +        static void loadBankFromStream(Map<String, String> patternBank, InputStream inputStream) throws IOException {]