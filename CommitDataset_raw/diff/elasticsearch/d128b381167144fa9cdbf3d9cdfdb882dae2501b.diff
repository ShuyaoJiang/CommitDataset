[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            configureThirdPartyAudit(project),, +            configureTestingConventions(project), +    static Task configureTestingConventions(Project project) {, +        project.getTasks().create("testingConventions", TestingConventionsTasks.class), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            configureThirdPartyAudit(project),, +            configureTestingConventions(project), +    static Task configureTestingConventions(Project project) {, +        project.getTasks().create("testingConventions", TestingConventionsTasks.class), +    }, +, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/FilePermissionsTask.java, +import org.elasticsearch.gradle.tool.Boilerplate;, +        return Boilerplate.getJavaSourceSets(getProject()).stream(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            configureThirdPartyAudit(project),, +            configureTestingConventions(project), +    static Task configureTestingConventions(Project project) {, +        project.getTasks().create("testingConventions", TestingConventionsTasks.class), +    }, +, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/FilePermissionsTask.java, +import org.elasticsearch.gradle.tool.Boilerplate;, +        return Boilerplate.getJavaSourceSets(getProject()).stream(), +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.gradle.precommit;, +, +import org.elasticsearch.gradle.tool.Boilerplate;, +import org.gradle.api.DefaultTask;, +import org.gradle.api.file.FileCollection;, +import org.gradle.api.tasks.Input;, +import org.gradle.api.tasks.OutputFile;, +import org.gradle.api.tasks.SkipWhenEmpty;, +import org.gradle.api.tasks.TaskAction;, +, +import java.io.File;, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.lang.reflect.Modifier;, +import java.net.MalformedURLException;, +import java.net.URL;, +import java.net.URLClassLoader;, +import java.nio.file.FileVisitResult;, +import java.nio.file.FileVisitor;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.StandardOpenOption;, +import java.nio.file.attribute.BasicFileAttributes;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.function.Predicate;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +public class TestingConventionsTasks extends DefaultTask {, +, +    private static final String TEST_CLASS_SUFIX = "Tests";, +    private static final String INTEG_TEST_CLASS_SUFIX = "IT";, +    private static final String TEST_METHOD_PREFIX = "test";, +, +    /**, +     * Are there tests to execute ? Accounts for @Ignore and @AwaitsFix, +     */, +    private Boolean activeTestsExists;, +, +    private List<String> testClassNames;, +, +    public TestingConventionsTasks() {, +        setDescription("Tests various testing conventions");, +        // Run only after everything is compiled, +        Boilerplate.getJavaSourceSets(getProject()).all(sourceSet -> dependsOn(sourceSet.getClassesTaskName()));, +    }, +, +    @TaskAction, +    public void doCheck() throws IOException {, +        activeTestsExists = false;, +        final List<String> problems;, +]