[+++ b/core/pom.xml, +                <directory>${project.basedir}/src/main/resources</directory>, +                    <include>es-build.properties</include>, +                <filtering>true</filtering>, +++ b/core/pom.xml, +                <directory>${project.basedir}/src/main/resources</directory>, +                    <include>es-build.properties</include>, +                <filtering>true</filtering>, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings).loadConfigSettings(false);, +    private static Tuple<Settings, Environment> initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareSettings(EMPTY_SETTINGS, true, terminal);, +        Tuple<Settings, Environment> tuple = initialSettings(foreground);, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +++ b/core/pom.xml, +                <directory>${project.basedir}/src/main/resources</directory>, +                    <include>es-build.properties</include>, +                <filtering>true</filtering>, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings).loadConfigSettings(false);, +    private static Tuple<Settings, Environment> initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareSettings(EMPTY_SETTINGS, true, terminal);, +        Tuple<Settings, Environment> tuple = initialSettings(foreground);, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        private boolean loadConfigSettings = true;, +         * Should the transport client load file based configuration automatically or not (and rely, +         * only on the provided settings), defaults to true., +         */, +        public Builder loadConfigSettings(boolean loadConfigSettings) {, +            this.loadConfigSettings = loadConfigSettings;, +            return this;, +        }, +, +        /**, +            Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettings(settings, loadConfigSettings);, +            Settings settings = settingsBuilder(), +                    .put(tuple.v1()), +            Environment environment = tuple.v2();, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +                modules.add(new EnvironmentModule(environment));, +++ b/core/pom.xml, +                <directory>${project.basedir}/src/main/resources</directory>, +                    <include>es-build.properties</include>, +                <filtering>true</filtering>, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings).loadConfigSettings(false);, +    private static Tuple<Settings, Environment> initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareSettings(EMPTY_SETTINGS, true, terminal);, +        Tuple<Settings, Environment> tuple = initialSettings(foreground);, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        private boolean loadConfigSettings = true;, +         * Should the transport client load file based configuration automatically or not (and rely, +         * only on the provided settings), defaults to true., +         */, +        public Builder loadConfigSettings(boolean loadConfigSettings) {, +            this.loadConfigSettings = loadConfigSettings;, +            return this;, +        }, +, +        /**, +            Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettings(settings, loadConfigSettings);, +            Settings settings = settingsBuilder(), +                    .put(tuple.v1()), +            Environment environment = tuple.v2();, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +                modules.add(new EnvironmentModule(environment));, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +        Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettings(EMPTY_SETTINGS, true, terminal);, +        settings = tuple.v1();, +        env = tuple.v2();, +++ b/core/pom.xml, +                <directory>${project.basedir}/src/main/resources</directory>, +                    <include>es-build.properties</include>, +                <filtering>true</filtering>, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings).loadConfigSettings(false);, +    private static Tuple<Settings, Environment> initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareSettings(EMPTY_SETTINGS, true, terminal);, +        Tuple<Settings, Environment> tuple = initialSettings(foreground);, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        private boolean loadConfigSettings = true;, +         * Should the transport client load file based configuration automatically or not (and rely, +         * only on the provided settings), defaults to true., +         */, +        public Builder loadConfigSettings(boolean loadConfigSettings) {, +            this.loadConfigSettings = loadConfigSettings;, +            return this;, +        }, +, +        /**, +            Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettings(settings, loadConfigSettings);, +            Settings settings = settingsBuilder(), +                    .put(tuple.v1())]