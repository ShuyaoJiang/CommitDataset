[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesService;, +            IndicesService.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesService;, +            IndicesService.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry, IndicesFieldDataCache indicesFieldDataCache,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, indicesFieldDataCache, listeners);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesService;, +            IndicesService.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry, IndicesFieldDataCache indicesFieldDataCache,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, indicesFieldDataCache, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +                        IndicesFieldDataCache indicesFieldDataCache,, +        this.indexFieldData = new IndexFieldDataService(indexSettings, indicesFieldDataCache, nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesService;, +            IndicesService.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry, IndicesFieldDataCache indicesFieldDataCache,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, indicesFieldDataCache, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +                        IndicesFieldDataCache indicesFieldDataCache,, +        this.indexFieldData = new IndexFieldDataService(indexSettings, indicesFieldDataCache, nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, CircuitBreakerService circuitBreakerService) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesService;, +            IndicesService.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry, IndicesFieldDataCache indicesFieldDataCache,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, indicesFieldDataCache, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +                        IndicesFieldDataCache indicesFieldDataCache,, +        this.indexFieldData = new IndexFieldDataService(indexSettings, indicesFieldDataCache, nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, CircuitBreakerService circuitBreakerService) {, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        default void onCache(ShardId shardId, String fieldName, FieldDataType fieldDataType, Accountable ramUsage){}, +        default void onRemoval(ShardId shardId, String fieldName, FieldDataType fieldDataType, boolean wasEvicted, long sizeInBytes){}, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesService;, +            IndicesService.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry, IndicesFieldDataCache indicesFieldDataCache,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, indicesFieldDataCache, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +                        IndicesFieldDataCache indicesFieldDataCache,, +        this.indexFieldData = new IndexFieldDataService(indexSettings, indicesFieldDataCache, nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, CircuitBreakerService circuitBreakerService) {, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        default void onCache(ShardId shardId, String fieldName, FieldDataType fieldDataType, Accountable ramUsage){}, +        default void onRemoval(ShardId shardId, String fieldName, FieldDataType fieldDataType, boolean wasEvicted, long sizeInBytes){}, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesModule.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesService;, +            IndicesService.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry, IndicesFieldDataCache indicesFieldDataCache,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, indicesFieldDataCache, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +                        IndicesFieldDataCache indicesFieldDataCache,, +        this.indexFieldData = new IndexFieldDataService(indexSettings, indicesFieldDataCache, nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, CircuitBreakerService circuitBreakerService) {, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        default void onCache(ShardId shardId, String fieldName, FieldDataType fieldDataType, Accountable ramUsage){}, +        default void onRemoval(ShardId shardId, String fieldName, FieldDataType fieldDataType, boolean wasEvicted, long sizeInBytes){}, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesModule.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +import org.apache.lucene.util.Accountable;, +import org.elasticsearch.common.breaker.CircuitBreaker;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.index.fielddata.FieldDataType;, +import org.elasticsearch.index.fielddata.IndexFieldDataCache;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +import java.util.concurrent.atomic.AtomicBoolean;, +    public static final Setting<TimeValue> INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING = Setting.positiveTimeSetting("indices.fielddata.cache.cleanup_interval", TimeValue.timeValueMinutes(1), false, Setting.Scope.CLUSTER);, +    private final IndicesFieldDataCache indicesFieldDataCache;, +    private final FieldDataCacheCleaner fieldDataCacheCleaner;, +    private final ThreadPool threadPool;, +    private final TimeValue cleanInterval;]