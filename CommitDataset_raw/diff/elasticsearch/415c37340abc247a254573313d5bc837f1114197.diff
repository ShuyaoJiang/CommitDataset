[+++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.forkOptions.memoryMaximumSize = "1g", +                // don't even think about passing args with -J-xxx, oracle will ask you to submit a bug report :), +++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.forkOptions.memoryMaximumSize = "1g", +                // don't even think about passing args with -J-xxx, oracle will ask you to submit a bug report :), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.*, +        /* project.configurations.elasticsearchDistro.singleFile will be an, +          external artifact if this is being run by a plugin not living in the, +          elasticsearch source tree. If this is a plugin built in the, +          elasticsearch source tree or this is a distro in the elasticsearch, +          source tree then this should be the version of elasticsearch built, +          by the source tree. If it isn't then Bad Things(TM) will happen. */, +            case 'rpm':, +                File rpmDatabase = new File(node.baseDir, 'rpm-database'), +                File rpmExtracted = new File(node.baseDir, 'rpm-extracted'), +                /* Delay reading the location of the rpm file until task execution */, +                Object rpm = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                extract = project.tasks.create(name: name, type: LoggedExec, dependsOn: extractDependsOn) {, +                    commandLine 'rpm', '--badreloc', '--nodeps', '--noscripts', '--notriggers',, +                        '--dbpath', rpmDatabase,, +                        '--relocate', "/=${rpmExtracted}",, +                        '-i', rpm, +                    doFirst {, +                        rpmDatabase.deleteDir(), +                        rpmExtracted.deleteDir(), +                    }, +                }, +                break;, +            case 'deb':, +                /* Delay reading the location of the deb file until task execution */, +                File debExtracted = new File(node.baseDir, 'deb-extracted'), +                Object deb = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                extract = project.tasks.create(name: name, type: LoggedExec, dependsOn: extractDependsOn) {, +                    commandLine 'dpkg-deb', '-x', deb, debExtracted, +                    doFirst {, +                        debExtracted.deleteDir(), +                    }, +                }, +                break;, +            File configFile = new File(node.confDir, 'elasticsearch.yml'), +            copyConfig.doFirst {, +                // make sure the copy won't be a no-op or act on a directory, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +        List<String> esArgs = [], +            esArgs.add('/C'), +            esArgs.add('call'), +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }, +, +++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.forkOptions.memoryMaximumSize = "1g", +                // don't even think about passing args with -J-xxx, oracle will ask you to submit a bug report :), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.*, +        /* project.configurations.elasticsearchDistro.singleFile will be an, +          external artifact if this is being run by a plugin not living in the, +          elasticsearch source tree. If this is a plugin built in the, +          elasticsearch source tree or this is a distro in the elasticsearch, +          source tree then this should be the version of elasticsearch built, +          by the source tree. If it isn't then Bad Things(TM) will happen. */, +            case 'rpm':]