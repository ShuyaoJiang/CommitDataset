[+++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +    public NodeEnvironment(Settings settings, Environment environment) {, +            throw new ElasticSearchIllegalStateException("Failed to obtain node lock, is the following location writable?: " + Arrays.toString(environment.dataWithClusterFiles()), lastException);, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +    public NodeEnvironment(Settings settings, Environment environment) {, +            throw new ElasticSearchIllegalStateException("Failed to obtain node lock, is the following location writable?: " + Arrays.toString(environment.dataWithClusterFiles()), lastException);, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironmentModule.java, +import org.elasticsearch.common.Nullable;, +    private final NodeEnvironment nodeEnvironment;, +, +        this(null);, +    }, +, +    public NodeEnvironmentModule(@Nullable NodeEnvironment nodeEnvironment) {, +        this.nodeEnvironment = nodeEnvironment;, +        if (nodeEnvironment != null) {, +            bind(NodeEnvironment.class).toInstance(nodeEnvironment);, +        } else {, +}, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +    public NodeEnvironment(Settings settings, Environment environment) {, +            throw new ElasticSearchIllegalStateException("Failed to obtain node lock, is the following location writable?: " + Arrays.toString(environment.dataWithClusterFiles()), lastException);, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironmentModule.java, +import org.elasticsearch.common.Nullable;, +    private final NodeEnvironment nodeEnvironment;, +, +        this(null);, +    }, +, +    public NodeEnvironmentModule(@Nullable NodeEnvironment nodeEnvironment) {, +        this.nodeEnvironment = nodeEnvironment;, +        if (nodeEnvironment != null) {, +            bind(NodeEnvironment.class).toInstance(nodeEnvironment);, +        } else {, +}, +++ b/src/main/java/org/elasticsearch/node/internal/InternalNode.java, +        NodeEnvironment nodeEnvironment = new NodeEnvironment(this.settings, this.environment);, +, +        modules.add(new NodeEnvironmentModule(nodeEnvironment));]