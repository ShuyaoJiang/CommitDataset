[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Object[] args = [new File(node.homeDir, 'bin/elasticsearch-plugin'), 'install', file], +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Object[] args = [new File(node.homeDir, 'bin/elasticsearch-plugin'), 'install', file], +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +            IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Object[] args = [new File(node.homeDir, 'bin/elasticsearch-plugin'), 'install', file], +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +            IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, listeners);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Object[] args = [new File(node.homeDir, 'bin/elasticsearch-plugin'), 'install', file], +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +            IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        this.indexFieldData = new IndexFieldDataService(indexSettings, nodeServicesProvider.getIndicesFieldDataCache(), nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Object[] args = [new File(node.homeDir, 'bin/elasticsearch-plugin'), 'install', file], +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +            IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        this.indexFieldData = new IndexFieldDataService(indexSettings, nodeServicesProvider.getIndicesFieldDataCache(), nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    private final IndicesFieldDataCache indicesFieldDataCache;, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService) {, +        this.indicesFieldDataCache = indicesFieldDataCache;, +    public IndicesFieldDataCache getIndicesFieldDataCache() {, +        return indicesFieldDataCache;, +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Object[] args = [new File(node.homeDir, 'bin/elasticsearch-plugin'), 'install', file], +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +            IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        this.indexFieldData = new IndexFieldDataService(indexSettings, nodeServicesProvider.getIndicesFieldDataCache(), nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    private final IndicesFieldDataCache indicesFieldDataCache;, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService) {, +        this.indicesFieldDataCache = indicesFieldDataCache;, +    public IndicesFieldDataCache getIndicesFieldDataCache() {, +        return indicesFieldDataCache;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        void onCache(ShardId shardId, String fieldName, FieldDataType fieldDataType, Accountable ramUsage);, +        void onRemoval(ShardId shardId, String fieldName, FieldDataType fieldDataType, boolean wasEvicted, long sizeInBytes);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Object[] args = [new File(node.homeDir, 'bin/elasticsearch-plugin'), 'install', file], +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +            IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        this.indexFieldData = new IndexFieldDataService(indexSettings, nodeServicesProvider.getIndicesFieldDataCache(), nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    private final IndicesFieldDataCache indicesFieldDataCache;, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService) {, +        this.indicesFieldDataCache = indicesFieldDataCache;, +    public IndicesFieldDataCache getIndicesFieldDataCache() {, +        return indicesFieldDataCache;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +        void onCache(ShardId shardId, String fieldName, FieldDataType fieldDataType, Accountable ramUsage);, +        void onRemoval(ShardId shardId, String fieldName, FieldDataType fieldDataType, boolean wasEvicted, long sizeInBytes);, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesModule.java, +import org.elasticsearch.index.termvectors.TermVectorsService;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCacheListener;, +        bind(IndicesFieldDataCache.class).asEagerSingleton();, +        bind(IndicesFieldDataCacheListener.class).asEagerSingleton();, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Object[] args = [new File(node.homeDir, 'bin/elasticsearch-plugin'), 'install', file], +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +            IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    public IndexService newIndexService(NodeEnvironment environment, IndexService.ShardStoreDeleter shardStoreDeleter, NodeServicesProvider servicesProvider, MapperRegistry mapperRegistry,, +                servicesProvider, queryCache, store, eventListener, searcherWrapperFactory, mapperRegistry, listeners);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        this.indexFieldData = new IndexFieldDataService(indexSettings, nodeServicesProvider.getIndicesFieldDataCache(), nodeServicesProvider.getCircuitBreakerService(), mapperService);, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    private final IndicesFieldDataCache indicesFieldDataCache;]