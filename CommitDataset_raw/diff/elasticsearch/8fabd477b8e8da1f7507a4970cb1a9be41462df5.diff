[+++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (logger.isTraceEnabled()) {, +                    } else if (logger.isDebugEnabled()) {, +                        logger.debug("recovery completed from [{}], took [{}]", shardGateway, timeValueMillis(recoveryStatus.time()));, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (logger.isTraceEnabled()) {, +                    } else if (logger.isDebugEnabled()) {, +                        logger.debug("recovery completed from [{}], took [{}]", shardGateway, timeValueMillis(recoveryStatus.time()));, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +        if (logger.isTraceEnabled()) {, +        } else if (logger.isDebugEnabled()) {, +            logger.debug("using dynamic[{}], default mapping: default_mapping_location[{}], loaded_from[{}], default percolator mapping: location[{}], loaded_from[{}]", dynamic, defaultMappingLocation, defaultMappingUrl, percolatorMappingLocation, percolatorMappingUrl);, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (logger.isTraceEnabled()) {, +                    } else if (logger.isDebugEnabled()) {, +                        logger.debug("recovery completed from [{}], took [{}]", shardGateway, timeValueMillis(recoveryStatus.time()));, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +        if (logger.isTraceEnabled()) {, +        } else if (logger.isDebugEnabled()) {, +            logger.debug("using dynamic[{}], default mapping: default_mapping_location[{}], loaded_from[{}], default percolator mapping: location[{}], loaded_from[{}]", dynamic, defaultMappingLocation, defaultMappingUrl, percolatorMappingLocation, percolatorMappingUrl);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +            if (logger.isTraceEnabled()) {, +            } else if (logger.isDebugEnabled()) {, +                logger.debug("recovery completed from [{}], took [{}]", request.shardId(), request.sourceNode(), stopWatch.totalTime());]