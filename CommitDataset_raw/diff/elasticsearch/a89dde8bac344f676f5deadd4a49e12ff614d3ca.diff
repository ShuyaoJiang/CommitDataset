[+++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +        boolean hasMustClauses = false;, +        boolean hasMustNotClauses = false;, +                hasMustClauses = true;, +                hasMustNotClauses = true;, +        hasNonEmptyShouldClause = false;, +                hasNonEmptyShouldClause = true;, +            if (hasShouldClauses && !hasNonEmptyShouldClause) {, +                return null;, +            } else {, +        }, +        List<ResultClause> orClauses = new ArrayList<ResultClause>();, +                if (hasMustClauses || hasMustNotClauses) {, +                    orClauses.add(clause);, +                } else {, +                        hasNonEmptyShouldClause = true;, +                    } else if (!hasMustNotClauses && !hasMustClauses) {, +                        for (int doc = 0; doc < reader.maxDoc(); doc++) {, +                            if (!res.get(doc) && clause.bits.get(doc)) {, +                                hasNonEmptyShouldClause = true;, +                                res.set(doc);, +        // From a boolean_logic behavior point of view a should clause doesn't have impact on a bool filter if there, +        // is already a must or must_not clause. However in the current ES bool filter behaviour all should clauses, +        // must match in order for a doc to be a match. What we do here is checking if matched docs match with any, +        // should filter. TODO: Add an option to have disable minimum_should_match=1 behaviour, +        if (!orClauses.isEmpty()) {, +            DocIdSetIterator it = res.iterator();, +            for (int setDoc = it.nextDoc(); setDoc != DocIdSetIterator.NO_MORE_DOCS; setDoc = it.nextDoc()) {, +                boolean match = false;, +                for (ResultClause orClause : orClauses) {, +                    if (orClause.bits.get(setDoc)) {, +                        match = true;, +                        hasNonEmptyShouldClause = true;, +                    }, +                }, +                if (!match) {, +                    res.clear(setDoc);, +                }, +            }, +        }, +, +        if (hasShouldClauses && !hasNonEmptyShouldClause) {, +            return null;, +        } else {, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XBooleanFilter.java, +        boolean hasMustClauses = false;, +        boolean hasMustNotClauses = false;, +                hasMustClauses = true;, +                hasMustNotClauses = true;, +        hasNonEmptyShouldClause = false;, +                hasNonEmptyShouldClause = true;, +            if (hasShouldClauses && !hasNonEmptyShouldClause) {, +                return null;, +            } else {, +        }, +        List<ResultClause> orClauses = new ArrayList<ResultClause>();, +                if (hasMustClauses || hasMustNotClauses) {, +                    orClauses.add(clause);, +                } else {, +                        hasNonEmptyShouldClause = true;, +                    } else if (!hasMustNotClauses && !hasMustClauses) {, +                        for (int doc = 0; doc < reader.maxDoc(); doc++) {, +                            if (!res.get(doc) && clause.bits.get(doc)) {, +                                hasNonEmptyShouldClause = true;, +                                res.set(doc);, +        // From a boolean_logic behavior point of view a should clause doesn't have impact on a bool filter if there, +        // is already a must or must_not clause. However in the current ES bool filter behaviour all should clauses, +        // must match in order for a doc to be a match. What we do here is checking if matched docs match with any, +        // should filter. TODO: Add an option to have disable minimum_should_match=1 behaviour, +        if (!orClauses.isEmpty()) {, +            DocIdSetIterator it = res.iterator();, +            for (int setDoc = it.nextDoc(); setDoc != DocIdSetIterator.NO_MORE_DOCS; setDoc = it.nextDoc()) {, +                boolean match = false;, +                for (ResultClause orClause : orClauses) {, +                    if (orClause.bits.get(setDoc)) {, +                        match = true;, +                        hasNonEmptyShouldClause = true;, +                    }, +                }, +                if (!match) {, +                    res.clear(setDoc);, +                }, +            }, +        }, +, +        if (hasShouldClauses && !hasNonEmptyShouldClause) {, +            return null;, +        } else {, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +, +    @Test, +    public void testNumericRangeFilter_2826() throws Exception {, +        client.admin().indices().prepareDelete().execute().actionGet();, +        client.admin().indices().prepareCreate("test").setSettings(, +                ImmutableSettings.settingsBuilder(), +                        .put("index.number_of_shards", 1)]