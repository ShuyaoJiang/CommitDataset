[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                      Set<IndexTemplateFilter> indexTemplateFilters, Environment env, NodeServicesProvider nodeServicesProvider, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                      Set<IndexTemplateFilter> indexTemplateFilters, Environment env, NodeServicesProvider nodeServicesProvider, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        super(settings);, +        this.lastSettingsApplied = Settings.EMPTY;, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, AbstractScopedSettings other) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        this.scope = other.scope;, +        complexMatchers.putAll(other.complexMatchers);, +        keySettings.putAll(other.keySettings);, +        settingUpdaters.addAll(other.settingUpdaters);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                      Set<IndexTemplateFilter> indexTemplateFilters, Environment env, NodeServicesProvider nodeServicesProvider, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        super(settings);, +        this.lastSettingsApplied = Settings.EMPTY;, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, AbstractScopedSettings other) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        this.scope = other.scope;, +        complexMatchers.putAll(other.complexMatchers);, +        keySettings.putAll(other.keySettings);, +        settingUpdaters.addAll(other.settingUpdaters);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopeSettings.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.common.settings;, +, +import org.elasticsearch.action.admin.indices.close.TransportCloseIndexAction;, +import org.elasticsearch.action.support.DestructiveOperations;, +import org.elasticsearch.cluster.InternalClusterInfoService;, +import org.elasticsearch.cluster.action.index.MappingUpdatedAction;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.routing.UnassignedInfo;, +import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;, +import org.elasticsearch.cluster.routing.allocation.decider.AwarenessAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ConcurrentRebalanceAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ShardsLimitAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.SnapshotInProgressAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ThrottlingAllocationDecider;, +import org.elasticsearch.cluster.service.InternalClusterService;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +import org.elasticsearch.discovery.DiscoverySettings;, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +import org.elasticsearch.discovery.zen.elect.ElectMasterService;, +import org.elasticsearch.gateway.PrimaryShardAllocator;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.IndexingSlowLog;, +import org.elasticsearch.index.MergePolicyConfig;, +import org.elasticsearch.index.MergeSchedulerConfig;, +import org.elasticsearch.index.SearchSlowLog;, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.index.store.IndexStoreConfig;, +import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;, +import org.elasticsearch.indices.cache.request.IndicesRequestCache;, +import org.elasticsearch.indices.recovery.RecoverySettings;, +import org.elasticsearch.indices.ttl.IndicesTTLService;, +import org.elasticsearch.search.SearchService;, +import org.elasticsearch.threadpool.ThreadPool;]