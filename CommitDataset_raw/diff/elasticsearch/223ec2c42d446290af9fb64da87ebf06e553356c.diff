[+++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +            private int innerOrd;, +                innerOrd = ord = ordsIter.next();, +                return innerOrd != 0;, +                withOrds.getValueScratchByOrd(innerOrd, scratch);, +                ord = innerOrd;, +                innerOrd = ordsIter.next();, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +            private int innerOrd;, +                innerOrd = ord = ordsIter.next();, +                return innerOrd != 0;, +                withOrds.getValueScratchByOrd(innerOrd, scratch);, +                ord = innerOrd;, +                innerOrd = ordsIter.next();, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                        throw new ElasticSearchIllegalArgumentException("failed to find field data builder for field " + fieldNames.fullName() + ", and type " + type.getType());, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +            private int innerOrd;, +                innerOrd = ord = ordsIter.next();, +                return innerOrd != 0;, +                withOrds.getValueScratchByOrd(innerOrd, scratch);, +                ord = innerOrd;, +                innerOrd = ordsIter.next();, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                        throw new ElasticSearchIllegalArgumentException("failed to find field data builder for field " + fieldNames.fullName() + ", and type " + type.getType());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/FSTBytesAtomicFieldData.java, +        assert fst != null;, +, +        @Override, +        public org.elasticsearch.index.fielddata.BytesValues.WithOrdinals getHashedBytesValues() {, +            return getBytesValues();, +        }, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +            private int innerOrd;, +                innerOrd = ord = ordsIter.next();, +                return innerOrd != 0;, +                withOrds.getValueScratchByOrd(innerOrd, scratch);, +                ord = innerOrd;, +                innerOrd = ordsIter.next();, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                        throw new ElasticSearchIllegalArgumentException("failed to find field data builder for field " + fieldNames.fullName() + ", and type " + type.getType());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/FSTBytesAtomicFieldData.java, +        assert fst != null;, +, +        @Override, +        public org.elasticsearch.index.fielddata.BytesValues.WithOrdinals getHashedBytesValues() {, +            return getBytesValues();, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/index/fielddata/DuellFieldDataTest.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.test.unit.index.fielddata;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.nullValue;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Map.Entry;, +import java.util.Random;, +, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.DoubleField;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.FloatField;, +import org.apache.lucene.document.IntField;, +import org.apache.lucene.document.LongField;, +import org.apache.lucene.document.StringField;, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.index.CompositeReaderContext;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.English;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.index.fielddata.AtomicFieldData;, +import org.elasticsearch.index.fielddata.AtomicNumericFieldData;, +import org.elasticsearch.index.fielddata.BytesValues;, +import org.elasticsearch.index.fielddata.BytesValues.Iter;, +import org.elasticsearch.index.fielddata.DoubleValues;, +import org.elasticsearch.index.fielddata.FieldDataType;, +import org.elasticsearch.index.fielddata.IndexFieldData;]