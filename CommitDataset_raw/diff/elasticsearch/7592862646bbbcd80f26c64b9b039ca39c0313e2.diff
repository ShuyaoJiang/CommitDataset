[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, + * @author kimchy (shay.banon), +    private final List<MutableShardRouting> ignoredUnassigned = newArrayList();, +, +    public List<MutableShardRouting> ignoredUnassigned() {, +        return this.ignoredUnassigned;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, + * @author kimchy (shay.banon), +    private final List<MutableShardRouting> ignoredUnassigned = newArrayList();, +, +    public List<MutableShardRouting> ignoredUnassigned() {, +        return this.ignoredUnassigned;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +import org.elasticsearch.common.collect.Iterables;, + * @author kimchy (shay.banon), +            for (MutableShardRouting shardRoutingEntry : Iterables.concat(routingNodes.unassigned(), routingNodes.ignoredUnassigned())) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, + * @author kimchy (shay.banon), +    private final List<MutableShardRouting> ignoredUnassigned = newArrayList();, +, +    public List<MutableShardRouting> ignoredUnassigned() {, +        return this.ignoredUnassigned;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +import org.elasticsearch.common.collect.Iterables;, + * @author kimchy (shay.banon), +            for (MutableShardRouting shardRoutingEntry : Iterables.concat(routingNodes.unassigned(), routingNodes.ignoredUnassigned())) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocation.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    boolean allocate(RoutingNodes routingNodes, DiscoveryNodes nodes);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, + * @author kimchy (shay.banon), +    private final List<MutableShardRouting> ignoredUnassigned = newArrayList();, +, +    public List<MutableShardRouting> ignoredUnassigned() {, +        return this.ignoredUnassigned;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +import org.elasticsearch.common.collect.Iterables;, + * @author kimchy (shay.banon), +            for (MutableShardRouting shardRoutingEntry : Iterables.concat(routingNodes.unassigned(), routingNodes.ignoredUnassigned())) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocation.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    boolean allocate(RoutingNodes routingNodes, DiscoveryNodes nodes);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    @Override public boolean allocate(RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        boolean changed = false;, +        for (NodeAllocation allocation : allocations) {, +            changed |= allocation.allocate(routingNodes, nodes);, +        }, +        return changed;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, + * @author kimchy (shay.banon), +    private final List<MutableShardRouting> ignoredUnassigned = newArrayList();, +, +    public List<MutableShardRouting> ignoredUnassigned() {, +        return this.ignoredUnassigned;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +import org.elasticsearch.common.collect.Iterables;, + * @author kimchy (shay.banon), +            for (MutableShardRouting shardRoutingEntry : Iterables.concat(routingNodes.unassigned(), routingNodes.ignoredUnassigned())) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocation.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    boolean allocate(RoutingNodes routingNodes, DiscoveryNodes nodes);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    @Override public boolean allocate(RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        boolean changed = false;, +        for (NodeAllocation allocation : allocations) {, +            changed |= allocation.allocate(routingNodes, nodes);, +        }, +        return changed;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/PreferUnallocatedShardUnassignedStrategy.java, +                if (nodeAllocations.canAllocate(shard, lastNodeMatched, routingNodes) == NodeAllocation.Decision.THROTTLE) {, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[{}][{}]: throttling allocation [{}] to [{}] in order to reuse its unallocated persistent store with total_size [{}]", shard.index(), shard.id(), shard, lastDiscoNodeMatched, new ByteSizeValue(lastSizeMatched));, +                    }, +                    // we are throttling this, but we have enough to allocate to this node, ignore it for now, +                    unassignedIterator.remove();, +                    routingNodes.ignoredUnassigned().add(shard);, +                } else {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, + * @author kimchy (shay.banon)]