[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 124 used to be Script.ScriptParseException, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 124 used to be Script.ScriptParseException, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +     * A functional interface that people can use to reference {@link #shardLock(ShardId, long)}, +     */, +    @FunctionalInterface, +    public interface ShardLocker {, +, +        ShardLock lock(ShardId shardId, long lockTimeoutMS) throws IOException;, +    }, +, +    /**, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 124 used to be Script.ScriptParseException, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +     * A functional interface that people can use to reference {@link #shardLock(ShardId, long)}, +     */, +    @FunctionalInterface, +    public interface ShardLocker {, +, +        ShardLock lock(ShardId shardId, long lockTimeoutMS) throws IOException;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +import org.elasticsearch.indices.IndicesService;, +    private final IndicesService indicesService;, +                                                  NodeEnvironment env, IndicesService indicesService) {, +        this.indicesService = indicesService;, +                if (indicesService.getShardOrNull(shardId) == null) {, +                    // we don't have an open shard on the store, validate the files on disk are openable, +                        Store.tryOpenIndex(shardPath.resolveIndex(), shardId, nodeEnv::shardLock, logger);, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 124 used to be Script.ScriptParseException, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +     * A functional interface that people can use to reference {@link #shardLock(ShardId, long)}, +     */, +    @FunctionalInterface, +    public interface ShardLocker {, +, +        ShardLock lock(ShardId shardId, long lockTimeoutMS) throws IOException;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +import org.elasticsearch.indices.IndicesService;, +    private final IndicesService indicesService;, +                                                  NodeEnvironment env, IndicesService indicesService) {, +        this.indicesService = indicesService;, +                if (indicesService.getShardOrNull(shardId) == null) {, +                    // we don't have an open shard on the store, validate the files on disk are openable, +                        Store.tryOpenIndex(shardPath.resolveIndex(), shardId, nodeEnv::shardLock, logger);, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 124 used to be Script.ScriptParseException, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +     * A functional interface that people can use to reference {@link #shardLock(ShardId, long)}, +     */, +    @FunctionalInterface, +    public interface ShardLocker {, +, +        ShardLock lock(ShardId shardId, long lockTimeoutMS) throws IOException;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +import org.elasticsearch.indices.IndicesService;, +    private final IndicesService indicesService;, +                                                  NodeEnvironment env, IndicesService indicesService) {, +        this.indicesService = indicesService;, +                if (indicesService.getShardOrNull(shardId) == null) {, +                    // we don't have an open shard on the store, validate the files on disk are openable, +                        Store.tryOpenIndex(shardPath.resolveIndex(), shardId, nodeEnv::shardLock, logger);, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 124 used to be Script.ScriptParseException, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +     * A functional interface that people can use to reference {@link #shardLock(ShardId, long)}, +     */]