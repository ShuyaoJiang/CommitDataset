[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                shardStateAction.shardFailed(shard, indexUUID, "failed to perform " + transportReplicaAction + " on replica on node " + node, exp, shardFailedTimeout, new ReplicationFailedShardStateListener(nodeId, exp));, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                shardStateAction.shardFailed(shard, indexUUID, "failed to perform " + transportReplicaAction + " on replica on node " + node, exp, shardFailedTimeout, new ReplicationFailedShardStateListener(nodeId, exp));, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private final ClusterService clusterService;, +        this.clusterService = clusterService;, +        transportService.registerRequestHandler(SHARD_STARTED_ACTION_NAME, ShardRoutingEntry::new, ThreadPool.Names.SAME, new ShardStartedTransportHandler());, +        transportService.registerRequestHandler(SHARD_FAILED_ACTION_NAME, ShardRoutingEntry::new, ThreadPool.Names.SAME, new ShardFailedTransportHandler());, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        shardFailed(shardRouting, indexUUID, message, failure, null, listener);, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, TimeValue timeout, Listener listener) {, +        DiscoveryNode masterNode = clusterService.state().nodes().masterNode();, +            logger.warn("can't send shard failed for {}, no master known.", shardRouting);, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, timeout, listener);, +    }, +, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, @Nullable final Throwable failure, Listener listener) {, +        logger.trace("{} re-sending failed shard for {}, indexUUID [{}], reason [{}]", failure, shardRouting.shardId(), shardRouting, indexUUID, message);, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, null, listener);, +    }, +, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, final Throwable failure, TimeValue timeout, Listener listener) {, +    private void handleShardFailureOnMaster(final ShardRoutingEntry shardRoutingEntry, ClusterStateTaskListener listener) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.failure, shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask(, +            "shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]",, +            shardRoutingEntry,, +            ClusterStateTaskConfig.build(Priority.HIGH),, +            shardFailedClusterStateHandler,, +            listener);, +    }, +, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String reason) {, +        DiscoveryNode masterNode = clusterService.state().nodes().masterNode();, +            logger.warn("{} can't send shard started for {}, no master known.", shardRouting.shardId(), shardRouting);, +        shardStarted(shardRouting, indexUUID, reason, masterNode);, +    }, +, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        logger.debug("{} sending shard started for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +                    logger.warn("failed to send shard started to [{}]", exp, masterNode);, +    private void handleShardStartedOnMaster(final ShardRoutingEntry shardRoutingEntry) {, +        logger.debug("received shard started for {}", shardRoutingEntry);, +, +        clusterService.submitStateUpdateTask(, +            "shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.message + "]",, +            shardRoutingEntry,, +            ClusterStateTaskConfig.build(Priority.URGENT),, +            shardStartedClusterStateHandler,, +            shardStartedClusterStateHandler);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                shardStateAction.shardFailed(shard, indexUUID, "failed to perform " + transportReplicaAction + " on replica on node " + node, exp, shardFailedTimeout, new ReplicationFailedShardStateListener(nodeId, exp));, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private final ClusterService clusterService;, +        this.clusterService = clusterService;, +        transportService.registerRequestHandler(SHARD_STARTED_ACTION_NAME, ShardRoutingEntry::new, ThreadPool.Names.SAME, new ShardStartedTransportHandler());, +        transportService.registerRequestHandler(SHARD_FAILED_ACTION_NAME, ShardRoutingEntry::new, ThreadPool.Names.SAME, new ShardFailedTransportHandler());, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        shardFailed(shardRouting, indexUUID, message, failure, null, listener);, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, TimeValue timeout, Listener listener) {, +        DiscoveryNode masterNode = clusterService.state().nodes().masterNode();, +            logger.warn("can't send shard failed for {}, no master known.", shardRouting);, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, timeout, listener);, +    }, +, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, @Nullable final Throwable failure, Listener listener) {, +        logger.trace("{} re-sending failed shard for {}, indexUUID [{}], reason [{}]", failure, shardRouting.shardId(), shardRouting, indexUUID, message);, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, null, listener);, +    }, +, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, final Throwable failure, TimeValue timeout, Listener listener) {, +    private void handleShardFailureOnMaster(final ShardRoutingEntry shardRoutingEntry, ClusterStateTaskListener listener) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.failure, shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask(, +            "shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]",, +            shardRoutingEntry,, +            ClusterStateTaskConfig.build(Priority.HIGH),, +            shardFailedClusterStateHandler,, +            listener);, +    }, +, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String reason) {, +        DiscoveryNode masterNode = clusterService.state().nodes().masterNode();, +            logger.warn("{} can't send shard started for {}, no master known.", shardRouting.shardId(), shardRouting);, +        shardStarted(shardRouting, indexUUID, reason, masterNode);, +    }, +, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        logger.debug("{} sending shard started for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +                    logger.warn("failed to send shard started to [{}]", exp, masterNode);, +    private void handleShardStartedOnMaster(final ShardRoutingEntry shardRoutingEntry) {, +        logger.debug("received shard started for {}", shardRoutingEntry);, +, +        clusterService.submitStateUpdateTask(, +            "shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.message + "]",, +            shardRoutingEntry,, +            ClusterStateTaskConfig.build(Priority.URGENT),]