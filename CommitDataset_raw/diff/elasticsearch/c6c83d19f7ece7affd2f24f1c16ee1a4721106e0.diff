[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +                    synchronized (ShardFollowNodeTask.this) {, +                        // Always clear fetch exceptions:, +                        fetchExceptions.remove(from);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +                    synchronized (ShardFollowNodeTask.this) {, +                        // Always clear fetch exceptions:, +                        fetchExceptions.remove(from);, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskTests.java, +        responseSizes.add(64);, +    public void testEmptyShardChangesResponseShouldClearFetchException() {, +        ShardFollowNodeTask task = createShardFollowTask(64, 1, 1, Integer.MAX_VALUE, Long.MAX_VALUE);, +        startTask(task, -1, -1);, +, +        readFailures.add(new ShardNotFoundException(new ShardId("leader_index", "", 0)));, +        mappingVersions.add(1L);, +        leaderGlobalCheckpoints.add(-1L);, +        maxSeqNos.add(-1L);, +        simulateResponse.set(true);, +        task.coordinateReads();, +, +        // number of requests is equal to initial request + retried attempts, +        assertThat(shardChangesRequests.size(), equalTo(2));, +        for (long[] shardChangesRequest : shardChangesRequests) {, +            assertThat(shardChangesRequest[0], equalTo(0L));, +            assertThat(shardChangesRequest[1], equalTo(64L));, +        }, +, +        assertFalse("task is not stopped", task.isStopped());, +        ShardFollowNodeTaskStatus status = task.getStatus();, +        assertThat(status.numberOfConcurrentReads(), equalTo(1));, +        assertThat(status.numberOfConcurrentWrites(), equalTo(0));, +        assertThat(status.numberOfFailedFetches(), equalTo(1L));, +        // the fetch failure should have been cleared:, +        assertThat(status.fetchExceptions().entrySet(), hasSize(0));, +        assertThat(status.lastRequestedSeqNo(), equalTo(-1L));, +        assertThat(status.leaderGlobalCheckpoint(), equalTo(-1L));, +    }, +, +        responseSizes.add(64);, +                    final int responseSize = responseSizes.size() == 0 ? 0 : responseSizes.poll();]