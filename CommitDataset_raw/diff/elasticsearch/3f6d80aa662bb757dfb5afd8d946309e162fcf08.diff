[+++ b/docs/reference/ingest/ingest-node.asciidoc, +Removes existing fields. If one field doesn't exist, an exception will be thrown., +| `field`   | yes       | -        | Fields to be removed, +Here is an example to remove a single field:, +, +To remove multiple fields, you can use the following query:, +, +[source,js], +--------------------------------------------------, +{, +  "remove": {, +    "field": ["foo", "bar"], +  }, +}, +--------------------------------------------------, +// NOTCONSOLE, +, +++ b/docs/reference/ingest/ingest-node.asciidoc, +Removes existing fields. If one field doesn't exist, an exception will be thrown., +| `field`   | yes       | -        | Fields to be removed, +Here is an example to remove a single field:, +, +To remove multiple fields, you can use the following query:, +, +[source,js], +--------------------------------------------------, +{, +  "remove": {, +    "field": ["foo", "bar"], +  }, +}, +--------------------------------------------------, +// NOTCONSOLE, +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/RemoveProcessor.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.stream.Collectors;, +    private final List<TemplateService.Template> fields;, +    RemoveProcessor(String tag, List<TemplateService.Template> fields) {, +        this.fields = new ArrayList<>(fields);, +    public List<TemplateService.Template> getFields() {, +        return fields;, +       fields.forEach(document::removeField);, +            final List<String> fields = new ArrayList<>();, +            final Object field = ConfigurationUtils.readObject(TYPE, processorTag, config, "field");, +            if (field instanceof List) {, +                fields.addAll((List) field);, +            } else {, +                fields.add((String) field);, +            }, +, +            final List<TemplateService.Template> compiledTemplates = fields.stream(), +                .map(f -> ConfigurationUtils.compileTemplate(TYPE, processorTag, "field", f, templateService)), +                .collect(Collectors.toList());, +            return new RemoveProcessor(processorTag, compiledTemplates);, +++ b/docs/reference/ingest/ingest-node.asciidoc, +Removes existing fields. If one field doesn't exist, an exception will be thrown., +| `field`   | yes       | -        | Fields to be removed, +Here is an example to remove a single field:, +, +To remove multiple fields, you can use the following query:, +, +[source,js], +--------------------------------------------------, +{, +  "remove": {, +    "field": ["foo", "bar"], +  }, +}, +--------------------------------------------------, +// NOTCONSOLE, +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/RemoveProcessor.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.stream.Collectors;, +    private final List<TemplateService.Template> fields;, +    RemoveProcessor(String tag, List<TemplateService.Template> fields) {, +        this.fields = new ArrayList<>(fields);, +    public List<TemplateService.Template> getFields() {, +        return fields;, +       fields.forEach(document::removeField);, +            final List<String> fields = new ArrayList<>();, +            final Object field = ConfigurationUtils.readObject(TYPE, processorTag, config, "field");, +            if (field instanceof List) {, +                fields.addAll((List) field);, +            } else {, +                fields.add((String) field);, +            }, +, +            final List<TemplateService.Template> compiledTemplates = fields.stream(), +                .map(f -> ConfigurationUtils.compileTemplate(TYPE, processorTag, "field", f, templateService)), +                .collect(Collectors.toList());, +            return new RemoveProcessor(processorTag, compiledTemplates);, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/RemoveProcessorFactoryTests.java, +import java.util.Arrays;, +import java.util.stream.Collectors;, +        assertThat(removeProcessor.getFields().get(0).execute(Collections.emptyMap()), equalTo("field1"));, +    }]