[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.minimumMasterNodesOnPublishingMaster(currentState.getMinimumMasterNodesOnPublishingMaster());, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.minimumMasterNodesOnPublishingMaster(currentState.getMinimumMasterNodesOnPublishingMaster());, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +    private final int minimumMasterNodesOnPublishingMaster;, +, +                state.customs(), -1, false);, +                        int minimumMasterNodesOnPublishingMaster, boolean wasReadFromDiff) {, +        this.minimumMasterNodesOnPublishingMaster = minimumMasterNodesOnPublishingMaster;, +    /**, +     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling, +     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how, +     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level, +     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value, +     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}., +     */, +    public int getMinimumMasterNodesOnPublishingMaster() {, +        return minimumMasterNodesOnPublishingMaster;, +    }, +, +        private int minimumMasterNodesOnPublishingMaster = -1;, +            this.minimumMasterNodesOnPublishingMaster = state.minimumMasterNodesOnPublishingMaster;, +        public Builder minimumMasterNodesOnPublishingMaster(int minimumMasterNodesOnPublishingMaster) {, +            this.minimumMasterNodesOnPublishingMaster = minimumMasterNodesOnPublishingMaster;, +            return this;, +        }, +, +            return new ClusterState(clusterName, version, uuid, metaData, routingTable, nodes, blocks, customs.build(),, +                minimumMasterNodesOnPublishingMaster, fromDiff);, +        builder.minimumMasterNodesOnPublishingMaster = in.getVersion().onOrAfter(Version.V_7_0_0) ? in.readVInt() : -1;, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeVInt(minimumMasterNodesOnPublishingMaster);, +        }, +        private final int minimumMasterNodesOnPublishingMaster;, +, +            minimumMasterNodesOnPublishingMaster = after.minimumMasterNodesOnPublishingMaster;, +            minimumMasterNodesOnPublishingMaster = in.getVersion().onOrAfter(Version.V_7_0_0) ? in.readVInt() : -1;, +            if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +                out.writeVInt(minimumMasterNodesOnPublishingMaster);, +            }, +            builder.minimumMasterNodesOnPublishingMaster(minimumMasterNodesOnPublishingMaster);, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.minimumMasterNodesOnPublishingMaster(currentState.getMinimumMasterNodesOnPublishingMaster());, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +    private final int minimumMasterNodesOnPublishingMaster;, +, +                state.customs(), -1, false);, +                        int minimumMasterNodesOnPublishingMaster, boolean wasReadFromDiff) {, +        this.minimumMasterNodesOnPublishingMaster = minimumMasterNodesOnPublishingMaster;, +    /**, +     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling, +     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how, +     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level, +     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value, +     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}., +     */, +    public int getMinimumMasterNodesOnPublishingMaster() {, +        return minimumMasterNodesOnPublishingMaster;, +    }, +, +        private int minimumMasterNodesOnPublishingMaster = -1;, +            this.minimumMasterNodesOnPublishingMaster = state.minimumMasterNodesOnPublishingMaster;, +        public Builder minimumMasterNodesOnPublishingMaster(int minimumMasterNodesOnPublishingMaster) {, +            this.minimumMasterNodesOnPublishingMaster = minimumMasterNodesOnPublishingMaster;, +            return this;, +        }, +, +            return new ClusterState(clusterName, version, uuid, metaData, routingTable, nodes, blocks, customs.build(),, +                minimumMasterNodesOnPublishingMaster, fromDiff);, +        builder.minimumMasterNodesOnPublishingMaster = in.getVersion().onOrAfter(Version.V_7_0_0) ? in.readVInt() : -1;, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeVInt(minimumMasterNodesOnPublishingMaster);, +        }, +        private final int minimumMasterNodesOnPublishingMaster;, +, +            minimumMasterNodesOnPublishingMaster = after.minimumMasterNodesOnPublishingMaster;, +            minimumMasterNodesOnPublishingMaster = in.getVersion().onOrAfter(Version.V_7_0_0) ? in.readVInt() : -1;, +            if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +                out.writeVInt(minimumMasterNodesOnPublishingMaster);, +            }, +            builder.minimumMasterNodesOnPublishingMaster(minimumMasterNodesOnPublishingMaster);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +        this.discoveryUpgradeService = new DiscoveryUpgradeService(settings, transportService,, +                discoveryUpgradeService.activate(lastKnownLeader, coordinationState.get().getLastAcceptedState());, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.minimumMasterNodesOnPublishingMaster(currentState.getMinimumMasterNodesOnPublishingMaster());, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +    private final int minimumMasterNodesOnPublishingMaster;, +, +                state.customs(), -1, false);, +                        int minimumMasterNodesOnPublishingMaster, boolean wasReadFromDiff) {, +        this.minimumMasterNodesOnPublishingMaster = minimumMasterNodesOnPublishingMaster;, +    /**, +     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling, +     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how, +     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level]