[+++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java, +            FIELD_TYPE.setEagerGlobalOrdinals(true);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java, +            FIELD_TYPE.setEagerGlobalOrdinals(true);, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentIdFieldMapper.java, +        public Builder eagerGlobalOrdinals(boolean eagerGlobalOrdinals) {, +            fieldType().setEagerGlobalOrdinals(eagerGlobalOrdinals);, +            return builder;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java, +            FIELD_TYPE.setEagerGlobalOrdinals(true);, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentIdFieldMapper.java, +        public Builder eagerGlobalOrdinals(boolean eagerGlobalOrdinals) {, +            fieldType().setEagerGlobalOrdinals(eagerGlobalOrdinals);, +            return builder;, +        }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import org.elasticsearch.index.mapper.ParentFieldMapper;, +import java.util.Arrays;, +        boolean eagerGlobalOrdinals = true;, +            return builder;, +        }, +, +        public Builder eagerGlobalOrdinals(boolean eagerGlobalOrdinals) {, +            this.eagerGlobalOrdinals = eagerGlobalOrdinals;, +            return builder;, +            parentIdFieldBuilders.stream(), +                .map((parentBuilder) -> {, +                    if (eagerGlobalOrdinals) {, +                        parentBuilder.eagerGlobalOrdinals(true);, +                    }, +                    return parentBuilder.build(context);, +                }), +                .forEach(parentIdFields::add);, +                if ("eager_global_ordinals".equals(entry.getKey())) {, +                    builder.eagerGlobalOrdinals(XContentMapValues.nodeBooleanValue(entry.getValue(), "eager_global_ordinals"));, +                    iterator.remove();, +                    continue;, +                }, +                if (XContentMapValues.isArray(entry.getValue())) {, +                    children = new HashSet<>(Arrays.asList(XContentMapValues.nodeStringArrayValue(entry.getValue())));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java, +            FIELD_TYPE.setEagerGlobalOrdinals(true);, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentIdFieldMapper.java, +        public Builder eagerGlobalOrdinals(boolean eagerGlobalOrdinals) {, +            fieldType().setEagerGlobalOrdinals(eagerGlobalOrdinals);, +            return builder;, +        }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/ParentJoinFieldMapper.java, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import org.elasticsearch.index.mapper.ParentFieldMapper;, +import java.util.Arrays;, +        boolean eagerGlobalOrdinals = true;, +            return builder;, +        }, +, +        public Builder eagerGlobalOrdinals(boolean eagerGlobalOrdinals) {, +            this.eagerGlobalOrdinals = eagerGlobalOrdinals;, +            return builder;, +            parentIdFieldBuilders.stream(), +                .map((parentBuilder) -> {, +                    if (eagerGlobalOrdinals) {, +                        parentBuilder.eagerGlobalOrdinals(true);, +                    }, +                    return parentBuilder.build(context);, +                }), +                .forEach(parentIdFields::add);, +                if ("eager_global_ordinals".equals(entry.getKey())) {, +                    builder.eagerGlobalOrdinals(XContentMapValues.nodeBooleanValue(entry.getValue(), "eager_global_ordinals"));, +                    iterator.remove();, +                    continue;, +                }, +                if (XContentMapValues.isArray(entry.getValue())) {, +                    children = new HashSet<>(Arrays.asList(XContentMapValues.nodeStringArrayValue(entry.getValue())));, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/mapper/ParentJoinFieldMapperTests.java, +, +    public void testEagerGlobalOrdinals() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject(), +            .startObject("properties"), +                .startObject("join_field"), +                    .field("type", "join"), +                    .field("parent", "child"), +                    .field("child", "grand_child"), +                .endObject(), +            .endObject(), +            .endObject().string();, +        IndexService service = createIndex("test");, +        DocumentMapper docMapper = service.mapperService().merge("type", new CompressedXContent(mapping),, +            MapperService.MergeReason.MAPPING_UPDATE, false);, +        assertTrue(docMapper.mappers().getMapper("join_field") == ParentJoinFieldMapper.getMapper(service.mapperService()));, +        assertFalse(service.mapperService().fullName("join_field").eagerGlobalOrdinals());, +        assertNotNull(service.mapperService().fullName("join_field#parent"));, +        assertTrue(service.mapperService().fullName("join_field#parent").eagerGlobalOrdinals());, +        assertNotNull(service.mapperService().fullName("join_field#child"));, +        assertTrue(service.mapperService().fullName("join_field#child").eagerGlobalOrdinals());, +]