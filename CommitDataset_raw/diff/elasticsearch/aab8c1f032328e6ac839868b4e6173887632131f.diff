[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsRequest.java, +                            parseIndexContraints(indexConstraints, parser);, +    private void parseIndexContraints(List<IndexConstraint> indexConstraints,, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsRequest.java, +                            parseIndexContraints(indexConstraints, parser);, +    private void parseIndexContraints(List<IndexConstraint> indexConstraints,, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +                ShardRouting candidate = activeReplica(failedShard.shardId());, +                if (candidate == null) {, +                    ShardRouting primarySwappedCandidate = promoteAssignedReplicaShardToPrimary(candidate);, +                    if (primarySwappedCandidate.relocatingNodeId() != null) {, +                        // its also relocating, make sure to move the other routing to primary, +                        RoutingNode node = node(primarySwappedCandidate.relocatingNodeId());, +                        if (node != null) {, +                            for (ShardRouting shardRouting : node) {, +                                if (shardRouting.shardId().equals(primarySwappedCandidate.shardId()) && !shardRouting.primary()) {, +                                    promoteAssignedReplicaShardToPrimary(shardRouting);, +                                    break;, +                                }, +                            }, +                        }, +                    }, +    private ShardRouting promoteAssignedReplicaShardToPrimary(ShardRouting replicaShard) {, +        assert replicaShard.unassigned() == false : "unassigned shard cannot be promoted to primary: " + replicaShard;, +     * Used in conjunction with {@link #promoteAssignedReplicaShardToPrimary} when an active replica is promoted to primary., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsRequest.java, +                            parseIndexContraints(indexConstraints, parser);, +    private void parseIndexContraints(List<IndexConstraint> indexConstraints,, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +                ShardRouting candidate = activeReplica(failedShard.shardId());, +                if (candidate == null) {, +                    ShardRouting primarySwappedCandidate = promoteAssignedReplicaShardToPrimary(candidate);, +                    if (primarySwappedCandidate.relocatingNodeId() != null) {, +                        // its also relocating, make sure to move the other routing to primary, +                        RoutingNode node = node(primarySwappedCandidate.relocatingNodeId());, +                        if (node != null) {, +                            for (ShardRouting shardRouting : node) {, +                                if (shardRouting.shardId().equals(primarySwappedCandidate.shardId()) && !shardRouting.primary()) {, +                                    promoteAssignedReplicaShardToPrimary(shardRouting);, +                                    break;, +                                }, +                            }, +                        }, +                    }, +    private ShardRouting promoteAssignedReplicaShardToPrimary(ShardRouting replicaShard) {, +        assert replicaShard.unassigned() == false : "unassigned shard cannot be promoted to primary: " + replicaShard;, +     * Used in conjunction with {@link #promoteAssignedReplicaShardToPrimary} when an active replica is promoted to primary., +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java]