[+++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java, +    static class ChildUidCollector extends ParentIdCollector {, +            super(childType, searchContext);, +        public void setScorer(Scorer scorer) throws IOException {, +            this.scorer = scorer;, +        @Override, +        protected void collect(int doc, HashedBytesArray parentUid) throws IOException {, +                    case AVG:, +                        assert false : "AVG has it's own collector";, +                        , +                    default:, +                        assert false : "Are we missing a sore type here? -- " + scoreType;, +                        break;, +    final static class AvgChildUidCollector extends ChildUidCollector {, +        protected void collect(int doc, HashedBytesArray parentUid) throws IOException {, +++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java, +    static class ChildUidCollector extends ParentIdCollector {, +            super(childType, searchContext);, +        public void setScorer(Scorer scorer) throws IOException {, +            this.scorer = scorer;, +        @Override, +        protected void collect(int doc, HashedBytesArray parentUid) throws IOException {, +                    case AVG:, +                        assert false : "AVG has it's own collector";, +                        , +                    default:, +                        assert false : "Are we missing a sore type here? -- " + scoreType;, +                        break;, +    final static class AvgChildUidCollector extends ChildUidCollector {, +        protected void collect(int doc, HashedBytesArray parentUid) throws IOException {, +++ b/src/main/java/org/elasticsearch/index/search/child/HasChildFilter.java, +        final static class ParentDocSet extends MatchDocIdSet {, +        final static class UidCollector extends ParentIdCollector {, +            private final THashSet<HashedBytesArray> collectedUids;, +                super(parentType, context);, +            public void collect(int doc, HashedBytesArray parentIdByDoc){, +                collectedUids.add(parentIdByDoc);, +++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java, +    static class ChildUidCollector extends ParentIdCollector {, +            super(childType, searchContext);, +        public void setScorer(Scorer scorer) throws IOException {, +            this.scorer = scorer;, +        @Override, +        protected void collect(int doc, HashedBytesArray parentUid) throws IOException {, +                    case AVG:, +                        assert false : "AVG has it's own collector";, +                        , +                    default:, +                        assert false : "Are we missing a sore type here? -- " + scoreType;, +                        break;, +    final static class AvgChildUidCollector extends ChildUidCollector {, +        protected void collect(int doc, HashedBytesArray parentUid) throws IOException {, +++ b/src/main/java/org/elasticsearch/index/search/child/HasChildFilter.java, +        final static class ParentDocSet extends MatchDocIdSet {, +        final static class UidCollector extends ParentIdCollector {, +            private final THashSet<HashedBytesArray> collectedUids;, +                super(parentType, context);, +            public void collect(int doc, HashedBytesArray parentIdByDoc){, +                collectedUids.add(parentIdByDoc);, +++ b/src/main/java/org/elasticsearch/index/search/child/ParentIdCollector.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.search.child;, +, +import java.io.IOException;, +, +import org.apache.lucene.index.AtomicReaderContext;, +import org.elasticsearch.common.bytes.HashedBytesArray;, +import org.elasticsearch.common.lucene.search.NoopCollector;, +import org.elasticsearch.index.cache.id.IdReaderTypeCache;, +import org.elasticsearch.search.internal.SearchContext;, +, +/**, + * A simple collector that only collects if the docs parent ID is not, + * <code>null</code>, + */, +abstract class ParentIdCollector extends NoopCollector {, +    protected final String type;, +    protected final SearchContext context;, +    private IdReaderTypeCache typeCache;, +, +    protected ParentIdCollector(String parentType, SearchContext context) {, +        this.type = parentType;, +        this.context = context;]