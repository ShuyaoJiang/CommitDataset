[+++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (!quoted && queryText.length() > 1) {, +            if (queryText.charAt(0) == '>') {, +                if (queryText.length() > 2) {, +                    if (queryText.charAt(1) == '=') {, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true);, +                    }, +                }, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true);, +            } else if (queryText.charAt(0) == '<') {, +                if (queryText.length() > 2) {, +                    if (queryText.charAt(1) == '=') {, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true);, +                    }, +                }, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false);, +            }, +        }, +                    Query rangeQuery = currentMapper.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (!quoted && queryText.length() > 1) {, +            if (queryText.charAt(0) == '>') {, +                if (queryText.length() > 2) {, +                    if (queryText.charAt(1) == '=') {, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true);, +                    }, +                }, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true);, +            } else if (queryText.charAt(0) == '<') {, +                if (queryText.length() > 2) {, +                    if (queryText.charAt(1) == '=') {, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true);, +                    }, +                }, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false);, +            }, +        }, +                    Query rangeQuery = currentMapper.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +, +    @Test, +    public void testSpecialRangeSyntaxInQueryString() {, +        client.admin().indices().prepareDelete().execute().actionGet();, +, +        client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1)).execute().actionGet();, +        client.prepareIndex("test", "type1", "1").setSource("str", "kimchy", "date", "2012-02-01", "num", 12).execute().actionGet();, +        client.prepareIndex("test", "type1", "2").setSource("str", "shay", "date", "2012-02-05", "num", 20).execute().actionGet();, +        client.admin().indices().prepareRefresh().execute().actionGet();, +, +        SearchResponse searchResponse = client.prepareSearch(), +                .setQuery(queryString("num:>19")), +                .execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.shardFailures()), searchResponse.shardFailures().length, equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(1l));, +        assertThat(searchResponse.hits().getAt(0).id(), equalTo("2"));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(queryString("num:>20")), +                .execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.shardFailures()), searchResponse.shardFailures().length, equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(0l));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(queryString("num:>=20")), +                .execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.shardFailures()), searchResponse.shardFailures().length, equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(1l));, +        assertThat(searchResponse.hits().getAt(0).id(), equalTo("2"));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(queryString("num:>11")), +                .execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.shardFailures()), searchResponse.shardFailures().length, equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(2l));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(queryString("num:<20")), +                .execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.shardFailures()), searchResponse.shardFailures().length, equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(1l));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(queryString("num:<=20")), +                .execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.shardFailures()), searchResponse.shardFailures().length, equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(2l));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(queryString("+num:>11 +num:<20")), +                .execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.shardFailures()), searchResponse.shardFailures().length, equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(1l));, +    }]