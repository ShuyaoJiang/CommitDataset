[+++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                NavigableSet<HashedBytesArray> parentTypes = new TreeSet<HashedBytesArray>(UTF8SortedAsUnicodeComparator.utf8SortedAsUnicodeSortOrder);, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                NavigableSet<HashedBytesArray> parentTypes = new TreeSet<HashedBytesArray>(UTF8SortedAsUnicodeComparator.utf8SortedAsUnicodeSortOrder);, +++ b/src/test/java/org/elasticsearch/test/unit/index/cache/id/SimpleIdCacheTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.unit.index.cache.id;, +, +import com.google.common.collect.ImmutableSet;, +import org.apache.lucene.analysis.standard.StandardAnalyzer;, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.StringField;, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexWriter;, +import org.apache.lucene.index.IndexWriterConfig;, +import org.apache.lucene.store.RAMDirectory;, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.bytes.HashedBytesArray;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.inject.Injector;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.IndexShardMissingException;, +import org.elasticsearch.index.aliases.IndexAliasesService;, +import org.elasticsearch.index.analysis.AnalysisService;, +import org.elasticsearch.index.cache.IndexCache;, +import org.elasticsearch.index.cache.id.IdReaderCache;, +import org.elasticsearch.index.cache.id.IdReaderTypeCache;, +import org.elasticsearch.index.cache.id.simple.SimpleIdCache;, +import org.elasticsearch.index.engine.IndexEngine;, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.gateway.IndexGateway;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +import org.elasticsearch.index.mapper.internal.UidFieldMapper;, +import org.elasticsearch.index.percolator.PercolatorService;, +import org.elasticsearch.index.query.IndexQueryParserService;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.index.settings.IndexSettingsService;, +import org.elasticsearch.index.shard.service.IndexShard;, +import org.elasticsearch.index.similarity.SimilarityService;, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.test.unit.index.mapper.MapperTests;, +import org.testng.annotations.Test;, +, +import java.io.IOException;, +import java.util.Iterator;, +import java.util.List;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.nullValue;, +, +/**, + */, +public class SimpleIdCacheTests {, +, +    @Test, +    public void testRefresh() throws Exception {, +        SimpleIdCache idCache = createSimpleIdCache(Tuple.tuple("child", "parent"));, +        IndexWriter writer = createIndexWriter();, +        // Begins with parent, ends with child docs, +        writer.addDocument(doc("parent", "1"));, +        writer.addDocument(childDoc("child", "1", "parent", "1"));, +        writer.addDocument(childDoc("child", "2", "parent", "1"));, +        writer.addDocument(childDoc("child", "3", "parent", "1"));, +        writer.addDocument(childDoc("child", "4", "parent", "1"));, +        writer.commit();, +, +        // Begins with child, ends with parent docs, +        writer.addDocument(childDoc("child", "5", "parent", "2"));, +        writer.addDocument(doc("parent", "2"));, +        writer.addDocument(doc("parent", "3"));, +        writer.addDocument(doc("parent", "4"));, +        writer.addDocument(doc("parent", "5"));, +        writer.commit();, +]