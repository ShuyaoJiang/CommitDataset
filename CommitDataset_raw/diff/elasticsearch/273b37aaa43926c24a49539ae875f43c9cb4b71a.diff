[+++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/DatabaseReaderLazyLoader.java, +, +import java.io.InputStream;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.util.Objects;, +class DatabaseReaderLazyLoader implements Closeable {, +    private final Path databasePath;, +    // cache the database type so that we do not re-read it on every pipeline execution, +    final SetOnce<String> databaseType;, +, +    DatabaseReaderLazyLoader(final Path databasePath, final CheckedSupplier<DatabaseReader, IOException> loader) {, +        this.databasePath = Objects.requireNonNull(databasePath);, +        this.loader = Objects.requireNonNull(loader);, +        this.databaseType = new SetOnce<>();, +    /**, +     * Read the database type from the database. We do this manually instead of relying on the built-in mechanism to avoid reading the, +     * entire database into memory merely to read the type. This is especially important to maintain on master nodes where pipelines are, +     * validated. If we read the entire database into memory, we could potentially run into low-memory constraints on such nodes where, +     * loading this data would otherwise be wasteful if they are not also ingest nodes., +     *, +     * @return the database type, +     * @throws IOException if an I/O exception occurs reading the database type, +     */, +    final String getDatabaseType() throws IOException {, +        if (databaseType.get() == null) {, +            synchronized (databaseType) {, +                if (databaseType.get() == null) {, +                    final long fileSize = databaseFileSize();, +                    if (fileSize <= 512) {, +                        throw new IOException("unexpected file length [" + fileSize + "] for [" + databasePath + "]");, +                    }, +                    final int[] databaseTypeMarker = {'d', 'a', 't', 'a', 'b', 'a', 's', 'e', '_', 't', 'y', 'p', 'e'};, +                    try (InputStream in = databaseInputStream()) {, +                        // read the last 512 bytes, +                        final long skipped = in.skip(fileSize - 512);, +                        if (skipped != fileSize - 512) {, +                            throw new IOException("failed to skip [" + (fileSize - 512) + "] bytes while reading [" + databasePath + "]");, +                        }, +                        final byte[] tail = new byte[512];, +                        int read = 0;, +                        do {, +                            final int actualBytesRead = in.read(tail, read, 512 - read);, +                            if (actualBytesRead == -1) {, +                                throw new IOException("unexpected end of stream [" + databasePath + "] after reading [" + read + "] bytes");, +                            }, +                            read += actualBytesRead;, +                        } while (read != 512);, +, +                        // find the database_type header, +                        int metadataOffset = -1;, +                        int markerOffset = 0;, +                        for (int i = 0; i < tail.length; i++) {, +                            byte b = tail[i];, +, +                            if (b == databaseTypeMarker[markerOffset]) {, +                                markerOffset++;, +                            } else {, +                                markerOffset = 0;, +                            }, +                            if (markerOffset == databaseTypeMarker.length) {, +                                metadataOffset = i + 1;, +                                break;, +                            }, +                        }, +, +                        if (metadataOffset == -1) {, +                            throw new IOException("database type marker not found");, +                        }, +, +                        // read the database type, +                        final int offsetByte = tail[metadataOffset] & 0xFF;, +                        final int type = offsetByte >>> 5;, +                        if (type != 2) {, +                            throw new IOException("type must be UTF-8 string");, +                        }, +                        int size = offsetByte & 0x1f;, +                        databaseType.set(new String(tail, metadataOffset + 1, size, StandardCharsets.UTF_8));, +                    }, +                }, +            }, +        }, +        return databaseType.get();, +    }, +, +    long databaseFileSize() throws IOException {, +        return Files.size(databasePath);, +    }, +, +    InputStream databaseInputStream() throws IOException {, +        return Files.newInputStream(databasePath);, +    }, +, +    DatabaseReader get() throws IOException {, +        if (databaseReader.get() == null) {, +            synchronized (databaseReader) {, +                    LOGGER.debug("loaded [{}] geo-IP database", databasePath);, +                }, +            }]