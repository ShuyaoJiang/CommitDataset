[+++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilter.java, +    void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain);, +    void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain);, +        public final void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionRequest<?> request, ActionListener<?> listener);, +        public final void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionResponse response, ActionListener<?> listener);, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilter.java, +    void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain);, +    void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain);, +        public final void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionRequest<?> request, ActionListener<?> listener);, +        public final void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionResponse response, ActionListener<?> listener);, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +import org.elasticsearch.test.ActionRecordingPlugin;, +import java.util.Collection;, +import java.util.List;, +import java.util.Locale;, +, +        return pluginList(ActionRecordingPlugin.class, GroovyPlugin.class);, +        ActionRecordingPlugin.clear();, +        assertThat(ActionRecordingPlugin.allRequests(), hasSize(greaterThan(0)));, +        List<SearchRequest> searchRequests = ActionRecordingPlugin.requestsOfType(SearchRequest.class);, +    private void assertRequestsContainHeader(Class<? extends ActionRequest<?>> clazz) {, +        List<? extends ActionRequest<?>> classRequests = ActionRecordingPlugin.requestsOfType(clazz);, +        for (ActionRequest<?> request : classRequests) {, +        List<GetRequest> getRequests = ActionRecordingPlugin.requestsOfType(GetRequest.class);, +    private void assertRequestContainsHeader(ActionRequest<?> request) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilter.java, +    void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain);, +    void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain);, +        public final void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionRequest<?> request, ActionListener<?> listener);, +        public final void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionResponse response, ActionListener<?> listener);, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +import org.elasticsearch.test.ActionRecordingPlugin;, +import java.util.Collection;, +import java.util.List;, +import java.util.Locale;, +, +        return pluginList(ActionRecordingPlugin.class, GroovyPlugin.class);, +        ActionRecordingPlugin.clear();, +        assertThat(ActionRecordingPlugin.allRequests(), hasSize(greaterThan(0)));, +        List<SearchRequest> searchRequests = ActionRecordingPlugin.requestsOfType(SearchRequest.class);, +    private void assertRequestsContainHeader(Class<? extends ActionRequest<?>> clazz) {, +        List<? extends ActionRequest<?>> classRequests = ActionRecordingPlugin.requestsOfType(clazz);, +        for (ActionRequest<?> request : classRequests) {, +        List<GetRequest> getRequests = ActionRecordingPlugin.requestsOfType(GetRequest.class);, +    private void assertRequestContainsHeader(ActionRequest<?> request) {, +++ b/modules/lang-mustache/build.gradle, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilter.java, +    void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain);, +    void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain);, +        public final void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionRequest<?> request, ActionListener<?> listener);, +        public final void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionResponse response, ActionListener<?> listener);, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +import org.elasticsearch.test.ActionRecordingPlugin;, +import java.util.Collection;, +import java.util.List;, +import java.util.Locale;, +, +        return pluginList(ActionRecordingPlugin.class, GroovyPlugin.class);, +        ActionRecordingPlugin.clear();, +        assertThat(ActionRecordingPlugin.allRequests(), hasSize(greaterThan(0)));, +        List<SearchRequest> searchRequests = ActionRecordingPlugin.requestsOfType(SearchRequest.class);, +    private void assertRequestsContainHeader(Class<? extends ActionRequest<?>> clazz) {, +        List<? extends ActionRequest<?>> classRequests = ActionRecordingPlugin.requestsOfType(clazz);, +        for (ActionRequest<?> request : classRequests) {, +        List<GetRequest> getRequests = ActionRecordingPlugin.requestsOfType(GetRequest.class);, +    private void assertRequestContainsHeader(ActionRequest<?> request) {, +++ b/modules/lang-mustache/build.gradle, +++ b/modules/lang-mustache/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +import org.elasticsearch.test.ActionRecordingPlugin;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +        return pluginList(ActionRecordingPlugin.class, MustachePlugin.class);, +        ActionRecordingPlugin.clear();, +    private void assertRequestsContainHeader(Class<? extends ActionRequest<?>> clazz) {, +        List<? extends ActionRequest<?>> classRequests = ActionRecordingPlugin.requestsOfType(clazz);, +        for (ActionRequest<?> request : classRequests) {, +        List<GetRequest> getRequests = ActionRecordingPlugin.requestsOfType(GetRequest.class);, +    private void assertRequestContainsHeader(ActionRequest<?> request) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilter.java, +    void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain);, +    void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain);, +        public final void apply(Task task, String action, ActionRequest<?> request, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionRequest<?> request, ActionListener<?> listener);, +        public final void apply(String action, ActionResponse response, ActionListener<?> listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionResponse response, ActionListener<?> listener);, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java]