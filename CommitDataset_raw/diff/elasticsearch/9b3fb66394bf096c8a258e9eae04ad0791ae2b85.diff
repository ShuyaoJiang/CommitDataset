[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/pki/PkiRealm.java, +import org.elasticsearch.common.settings.SecureString;, +        if (SSL_SETTINGS.truststorePassword.exists(settings) == false) {, +            throw new IllegalArgumentException(, +            );, +        }, +        try (SecureString password = SSL_SETTINGS.truststorePassword.get(settings)) {, +                return CertUtils.trustManager(truststorePath, password.getChars(), trustStoreAlgorithm, realmConfig.env());, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/pki/PkiRealm.java, +import org.elasticsearch.common.settings.SecureString;, +        if (SSL_SETTINGS.truststorePassword.exists(settings) == false) {, +            throw new IllegalArgumentException(, +            );, +        }, +        try (SecureString password = SSL_SETTINGS.truststorePassword.get(settings)) {, +                return CertUtils.trustManager(truststorePath, password.getChars(), trustStoreAlgorithm, realmConfig.env());, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ssl/CertUtils.java, +    public static X509ExtendedTrustManager trustManager(String trustStorePath, char[] trustStorePassword, String trustStoreAlgorithm,, +            trustStore.load(in, trustStorePassword);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/pki/PkiRealm.java, +import org.elasticsearch.common.settings.SecureString;, +        if (SSL_SETTINGS.truststorePassword.exists(settings) == false) {, +            throw new IllegalArgumentException(, +            );, +        }, +        try (SecureString password = SSL_SETTINGS.truststorePassword.get(settings)) {, +                return CertUtils.trustManager(truststorePath, password.getChars(), trustStoreAlgorithm, realmConfig.env());, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ssl/CertUtils.java, +    public static X509ExtendedTrustManager trustManager(String trustStorePath, char[] trustStorePassword, String trustStoreAlgorithm,, +            trustStore.load(in, trustStorePassword);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ssl/PEMKeyConfig.java, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.env.Environment;, +, +    private final SecureString keyPassword;, +     * @param keyPassword the password for the key., +    PEMKeyConfig(String keyPath, SecureString keyPassword, String certChainPath) {, +        this.keyPassword = Objects.requireNonNull(keyPassword).clone();, +            PrivateKey privateKey = readPrivateKey(CertUtils.resolvePath(keyPath, environment), keyPassword);, +, +            return CertUtils.keyManager(certificateChain, privateKey, keyPassword.getChars());, +            return Collections.singletonList(readPrivateKey(CertUtils.resolvePath(keyPath, environment), keyPassword));, +    private static PrivateKey readPrivateKey(Path keyPath, SecureString keyPassword) throws IOException {, +        try (Reader reader = Files.newBufferedReader(keyPath, StandardCharsets.UTF_8)) {, +            return CertUtils.readPrivateKey(reader, keyPassword::getChars);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/pki/PkiRealm.java, +import org.elasticsearch.common.settings.SecureString;, +        if (SSL_SETTINGS.truststorePassword.exists(settings) == false) {, +            throw new IllegalArgumentException(, +            );, +        }, +        try (SecureString password = SSL_SETTINGS.truststorePassword.get(settings)) {, +                return CertUtils.trustManager(truststorePath, password.getChars(), trustStoreAlgorithm, realmConfig.env());, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ssl/CertUtils.java, +    public static X509ExtendedTrustManager trustManager(String trustStorePath, char[] trustStorePassword, String trustStoreAlgorithm,, +            trustStore.load(in, trustStorePassword);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ssl/PEMKeyConfig.java, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.env.Environment;, +, +    private final SecureString keyPassword;, +     * @param keyPassword the password for the key., +    PEMKeyConfig(String keyPath, SecureString keyPassword, String certChainPath) {, +        this.keyPassword = Objects.requireNonNull(keyPassword).clone();, +            PrivateKey privateKey = readPrivateKey(CertUtils.resolvePath(keyPath, environment), keyPassword);, +, +            return CertUtils.keyManager(certificateChain, privateKey, keyPassword.getChars());, +            return Collections.singletonList(readPrivateKey(CertUtils.resolvePath(keyPath, environment), keyPassword));, +    private static PrivateKey readPrivateKey(Path keyPath, SecureString keyPassword) throws IOException {, +        try (Reader reader = Files.newBufferedReader(keyPath, StandardCharsets.UTF_8)) {, +            return CertUtils.readPrivateKey(reader, keyPassword::getChars);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ssl/SSLConfiguration.java, +import org.elasticsearch.common.settings.SecureString;, +    static final SSLConfigurationSettings SETTINGS_PARSER = SSLConfigurationSettings.withoutPrefix();, +                // TODO: we should not support loading a keystore from sysprops..., +                try (SecureString keystorePassword = new SecureString(System.getProperty("javax.net.ssl.keyStorePassword", ""))) {, +                        keystorePassword, keystorePassword,, +            }, +            SecureString keyPassword = SETTINGS_PARSER.keyPassword.get(settings);, +            SecureString keyStorePassword = SETTINGS_PARSER.keystorePassword.get(settings);, +            SecureString keyStoreKeyPassword = SETTINGS_PARSER.keystoreKeyPassword.get(settings);;, +            if (keyStoreKeyPassword.length() == 0) {, +                keyStoreKeyPassword = keyStorePassword;, +            }, +            SecureString trustStorePassword = SETTINGS_PARSER.truststorePassword.get(settings);, +            try (SecureString truststorePassword = new SecureString(System.getProperty("javax.net.ssl.trustStorePassword", ""))) {, +                return new StoreTrustConfig(System.getProperty("javax.net.ssl.trustStore"), truststorePassword,, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/pki/PkiRealm.java, +import org.elasticsearch.common.settings.SecureString;]