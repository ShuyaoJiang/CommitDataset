[+++ b/docs/reference/index-modules/fielddata.asciidoc, +The field data format controls how field data should be stored., +, +Here is an example of how to configure the `tag` field to use the `fst` field, +data format., +, +It is possible to change the field data format (and the field data settings, +in general) on a live index by using the update mapping API. When doing so,, +field data which had already been loaded for existing segments will remain, +alive while new segments will use the new field data configuration. Thanks to, +the background merging process, all segments will eventually use the new, +field data format., +, +[float], +==== Disallowing field data loading, +, +Field data can take a lot of RAM so it makes sense to disable field data, +loading on the fields that don't need field data, for example those that are, +used for full-text search only. In order to disable field data loading, just, +change the field data type to `disabled`. Request that will try to load field, +data on any field which is configured with this format will then return an, +error., +, +The `disabled` format is supported by all field types., +, +++ b/docs/reference/index-modules/fielddata.asciidoc, +The field data format controls how field data should be stored., +, +Here is an example of how to configure the `tag` field to use the `fst` field, +data format., +, +It is possible to change the field data format (and the field data settings, +in general) on a live index by using the update mapping API. When doing so,, +field data which had already been loaded for existing segments will remain, +alive while new segments will use the new field data configuration. Thanks to, +the background merging process, all segments will eventually use the new, +field data format., +, +[float], +==== Disallowing field data loading, +, +Field data can take a lot of RAM so it makes sense to disable field data, +loading on the fields that don't need field data, for example those that are, +used for full-text search only. In order to disable field data loading, just, +change the field data type to `disabled`. Request that will try to load field, +data on any field which is configured with this format will then return an, +error., +, +The `disabled` format is supported by all field types., +, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import com.google.common.collect.Maps;, +import java.util.Map;, +    private static final String DISABLED_FORMAT = "disabled";, +    private static final String DOC_VALUES_FORMAT = "doc_values";, +    private static final String ARRAY_FORMAT = "array";, +    private static final String PAGED_BYTES_FORMAT = "paged_bytes";, +    private static final String FST_FORMAT = "fst";, +, +                .put(Tuple.tuple("string", PAGED_BYTES_FORMAT), new PagedBytesIndexFieldData.Builder()), +                .put(Tuple.tuple("string", FST_FORMAT), new FSTBytesIndexFieldData.Builder()), +                .put(Tuple.tuple("string", DOC_VALUES_FORMAT), new DocValuesIndexFieldData.Builder()), +                .put(Tuple.tuple("string", DISABLED_FORMAT), new DisabledIndexFieldData.Builder()), +, +                .put(Tuple.tuple("float", ARRAY_FORMAT), new FloatArrayIndexFieldData.Builder()), +                .put(Tuple.tuple("float", DOC_VALUES_FORMAT), new DocValuesIndexFieldData.Builder().numericType(IndexNumericFieldData.NumericType.FLOAT)), +                .put(Tuple.tuple("float", DISABLED_FORMAT), new DisabledIndexFieldData.Builder()), +, +                .put(Tuple.tuple("double", ARRAY_FORMAT), new DoubleArrayIndexFieldData.Builder()), +                .put(Tuple.tuple("double", DOC_VALUES_FORMAT), new DocValuesIndexFieldData.Builder().numericType(IndexNumericFieldData.NumericType.DOUBLE)), +                .put(Tuple.tuple("double", DISABLED_FORMAT), new DisabledIndexFieldData.Builder()), +, +                .put(Tuple.tuple("byte", ARRAY_FORMAT), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put(Tuple.tuple("byte", DOC_VALUES_FORMAT), new DocValuesIndexFieldData.Builder().numericType(IndexNumericFieldData.NumericType.BYTE)), +                .put(Tuple.tuple("byte", DISABLED_FORMAT), new DisabledIndexFieldData.Builder()), +, +                .put(Tuple.tuple("short", ARRAY_FORMAT), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put(Tuple.tuple("short", DOC_VALUES_FORMAT), new DocValuesIndexFieldData.Builder().numericType(IndexNumericFieldData.NumericType.SHORT)), +                .put(Tuple.tuple("short", DISABLED_FORMAT), new DisabledIndexFieldData.Builder()), +, +                .put(Tuple.tuple("int", ARRAY_FORMAT), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put(Tuple.tuple("int", DOC_VALUES_FORMAT), new DocValuesIndexFieldData.Builder().numericType(IndexNumericFieldData.NumericType.INT)), +                .put(Tuple.tuple("int", DISABLED_FORMAT), new DisabledIndexFieldData.Builder()), +, +                .put(Tuple.tuple("long", ARRAY_FORMAT), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +                .put(Tuple.tuple("long", DOC_VALUES_FORMAT), new DocValuesIndexFieldData.Builder().numericType(IndexNumericFieldData.NumericType.LONG)), +                .put(Tuple.tuple("long", DISABLED_FORMAT), new DisabledIndexFieldData.Builder()), +, +                .put(Tuple.tuple("geo_point", ARRAY_FORMAT), new GeoPointDoubleArrayIndexFieldData.Builder()), +                .put(Tuple.tuple("geo_point", DISABLED_FORMAT), new DisabledIndexFieldData.Builder()), +    private final Map<String, IndexFieldDataCache> fieldDataCaches = Maps.newHashMap(); // no need for concurrency support, always used under lock, +    // public for testing, +            for (IndexFieldDataCache cache : fieldDataCaches.values()) {, +                cache.clear();, +            }, +            fieldDataCaches.clear();, +            IndexFieldDataCache cache = fieldDataCaches.remove(fieldName);, +            if (cache != null) {, +                cache.clear();, +            }]