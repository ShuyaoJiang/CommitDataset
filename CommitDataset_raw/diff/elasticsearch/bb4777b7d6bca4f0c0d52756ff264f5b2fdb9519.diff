[+++ b/elasticsearch/qa/security-example-realm/build.gradle, +    setting 'xpack.security.authc.realms.custom.filtered_setting', 'should be filtered', +++ b/elasticsearch/qa/security-example-realm/build.gradle, +    setting 'xpack.security.authc.realms.custom.filtered_setting', 'should be filtered', +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/ExampleRealmExtension.java, +import java.util.List;, +, +    @Override, +    public List<String> getSettingsFilter() {, +        return Collections.singletonList("xpack.security.authc.realms.*.filtered_setting");, +    }, +++ b/elasticsearch/qa/security-example-realm/build.gradle, +    setting 'xpack.security.authc.realms.custom.filtered_setting', 'should be filtered', +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/ExampleRealmExtension.java, +import java.util.List;, +, +    @Override, +    public List<String> getSettingsFilter() {, +        return Collections.singletonList("xpack.security.authc.realms.*.filtered_setting");, +    }, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +, +    public void testSettingsFiltering() throws Exception {, +        NodesInfoResponse nodeInfos = client().admin().cluster().prepareNodesInfo().clear().setSettings(true).get();, +        for(NodeInfo info : nodeInfos.getNodes()) {, +            Settings settings = info.getSettings();, +            assertNotNull(settings);, +            assertNull(settings.get("xpack.security.authc.realms.custom.filtered_setting"));, +            assertEquals(CustomRealm.TYPE, settings.get("xpack.security.authc.realms.custom.type"));, +        }, +    }, +++ b/elasticsearch/qa/security-example-realm/build.gradle, +    setting 'xpack.security.authc.realms.custom.filtered_setting', 'should be filtered', +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/ExampleRealmExtension.java, +import java.util.List;, +, +    @Override, +    public List<String> getSettingsFilter() {, +        return Collections.singletonList("xpack.security.authc.realms.*.filtered_setting");, +    }, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +, +    public void testSettingsFiltering() throws Exception {, +        NodesInfoResponse nodeInfos = client().admin().cluster().prepareNodesInfo().clear().setSettings(true).get();, +        for(NodeInfo info : nodeInfos.getNodes()) {, +            Settings settings = info.getSettings();, +            assertNotNull(settings);, +            assertNull(settings.get("xpack.security.authc.realms.custom.filtered_setting"));, +            assertEquals(CustomRealm.TYPE, settings.get("xpack.security.authc.realms.custom.type"));, +        }, +    }, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        if (transportClientMode == false) {, +            for (XPackExtension extension : extensionsService.getExtensions()) {, +                filters.addAll(extension.getSettingsFilter());, +            }, +        }, +++ b/elasticsearch/qa/security-example-realm/build.gradle, +    setting 'xpack.security.authc.realms.custom.filtered_setting', 'should be filtered', +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/ExampleRealmExtension.java, +import java.util.List;, +, +    @Override, +    public List<String> getSettingsFilter() {, +        return Collections.singletonList("xpack.security.authc.realms.*.filtered_setting");, +    }, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +, +    public void testSettingsFiltering() throws Exception {, +        NodesInfoResponse nodeInfos = client().admin().cluster().prepareNodesInfo().clear().setSettings(true).get();, +        for(NodeInfo info : nodeInfos.getNodes()) {, +            Settings settings = info.getSettings();, +            assertNotNull(settings);, +            assertNull(settings.get("xpack.security.authc.realms.custom.filtered_setting"));, +            assertEquals(CustomRealm.TYPE, settings.get("xpack.security.authc.realms.custom.type"));, +        }, +    }, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        if (transportClientMode == false) {, +            for (XPackExtension extension : extensionsService.getExtensions()) {, +                filters.addAll(extension.getSettingsFilter());, +            }, +        }, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/extensions/XPackExtension.java, +import java.util.List;, +, +    /**, +     * Returns a list of settings that should be filtered from API calls. In most cases,, +     * these settings are sensitive such as passwords., +     *, +     * The value should be the full name of the setting or a wildcard that matches the, +     * desired setting., +     */, +    public List<String> getSettingsFilter() {, +        return Collections.emptyList();, +    }]