[+++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null");, +, +        String fieldName = null;, +        XContentParser.Token token;, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[common] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentFieldName = parser.currentName();, +                fieldName = parser.currentName();, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null");, +, +        String fieldName = null;, +        XContentParser.Token token;, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[common] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentFieldName = parser.currentName();, +                fieldName = parser.currentName();, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +            throw new IllegalArgumentException("field name cannot be null or empty");, +        String fieldName = null;, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[fuzzy] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                            throw new ParsingException(parser.getTokenLocation(),, +                                    "[fuzzy] query does not support [" + currentFieldName + "]");, +                fieldName = parser.currentName();, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null");, +, +        String fieldName = null;, +        XContentParser.Token token;, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[common] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentFieldName = parser.currentName();, +                fieldName = parser.currentName();, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +            throw new IllegalArgumentException("field name cannot be null or empty");, +        String fieldName = null;, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[fuzzy] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                            throw new ParsingException(parser.getTokenLocation(),, +                                    "[fuzzy] query does not support [" + currentFieldName + "]");, +                fieldName = parser.currentName();, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[geo_distance] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null");, +, +        String fieldName = null;, +        XContentParser.Token token;, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {]