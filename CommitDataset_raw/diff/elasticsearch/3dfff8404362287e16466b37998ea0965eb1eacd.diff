[+++ b/src/main/java/org/elasticsearch/common/Names.java, +import org.elasticsearch.common.io.FileSystemUtils;, +    public static String randomNodeName(URL nodeNames) {, +            try (BufferedReader reader = FileSystemUtils.newBufferedReader(nodeNames, Charsets.UTF_8)) {, +            try (BufferedReader reader = FileSystemUtils.newBufferedReader(nodeNames, Charsets.UTF_8)) {, +++ b/src/main/java/org/elasticsearch/common/Names.java, +import org.elasticsearch.common.io.FileSystemUtils;, +    public static String randomNodeName(URL nodeNames) {, +            try (BufferedReader reader = FileSystemUtils.newBufferedReader(nodeNames, Charsets.UTF_8)) {, +            try (BufferedReader reader = FileSystemUtils.newBufferedReader(nodeNames, Charsets.UTF_8)) {, +++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.net.URL;, +import java.nio.charset.Charset;, +import java.nio.charset.CharsetDecoder;, +     * Opens the given url for reading returning a {@code BufferedReader} that may be, +     * used to read text from the URL in an efficient manner. Bytes from the, +     * file are decoded into characters using the specified charset., +     */, +    public static BufferedReader newBufferedReader(URL url, Charset cs) throws IOException {, +        CharsetDecoder decoder = cs.newDecoder();, +        Reader reader = new InputStreamReader(url.openStream(), decoder);, +        return new BufferedReader(reader);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/common/Names.java, +import org.elasticsearch.common.io.FileSystemUtils;, +    public static String randomNodeName(URL nodeNames) {, +            try (BufferedReader reader = FileSystemUtils.newBufferedReader(nodeNames, Charsets.UTF_8)) {, +            try (BufferedReader reader = FileSystemUtils.newBufferedReader(nodeNames, Charsets.UTF_8)) {, +++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.net.URL;, +import java.nio.charset.Charset;, +import java.nio.charset.CharsetDecoder;, +     * Opens the given url for reading returning a {@code BufferedReader} that may be, +     * used to read text from the URL in an efficient manner. Bytes from the, +     * file are decoded into characters using the specified charset., +     */, +    public static BufferedReader newBufferedReader(URL url, Charset cs) throws IOException {, +        CharsetDecoder decoder = cs.newDecoder();, +        Reader reader = new InputStreamReader(url.openStream(), decoder);, +        return new BufferedReader(reader);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/env/Environment.java, +import java.nio.file.*;, +import java.util.Collections;, +    public URL resolveConfig(String path) throws FailedToResolveConfigException {, +            try {, +                return f1.toUri().toURL();, +            } catch (MalformedURLException e) {, +                throw new FailedToResolveConfigException("Failed to resolve path [" + f1 + "]", e);, +            }, +                return f2.toUri().toURL();, +            } catch (MalformedURLException e) {, +                throw new FailedToResolveConfigException("Failed to resolve path [" + f1 + "]", e);, +            }, +        }, +            return resource;, +                return resource;, +++ b/src/main/java/org/elasticsearch/common/Names.java, +import org.elasticsearch.common.io.FileSystemUtils;, +    public static String randomNodeName(URL nodeNames) {, +            try (BufferedReader reader = FileSystemUtils.newBufferedReader(nodeNames, Charsets.UTF_8)) {, +            try (BufferedReader reader = FileSystemUtils.newBufferedReader(nodeNames, Charsets.UTF_8)) {, +++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.net.URL;, +import java.nio.charset.Charset;, +import java.nio.charset.CharsetDecoder;, +     * Opens the given url for reading returning a {@code BufferedReader} that may be, +     * used to read text from the URL in an efficient manner. Bytes from the, +     * file are decoded into characters using the specified charset., +     */, +    public static BufferedReader newBufferedReader(URL url, Charset cs) throws IOException {, +        CharsetDecoder decoder = cs.newDecoder();, +        Reader reader = new InputStreamReader(url.openStream(), decoder);, +        return new BufferedReader(reader);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/env/Environment.java, +import java.nio.file.*;, +import java.util.Collections;, +    public URL resolveConfig(String path) throws FailedToResolveConfigException {, +            try {, +                return f1.toUri().toURL();, +            } catch (MalformedURLException e) {, +                throw new FailedToResolveConfigException("Failed to resolve path [" + f1 + "]", e);, +            }, +                return f2.toUri().toURL();]