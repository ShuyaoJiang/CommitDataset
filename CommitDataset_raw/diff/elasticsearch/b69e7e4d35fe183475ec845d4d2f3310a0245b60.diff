[+++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                Collection<FieldMapper<?>> remainingFieldMappers = new LinkedList<>(allFieldMappers);, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                Collection<FieldMapper<?>> remainingFieldMappers = new LinkedList<>(allFieldMappers);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                            FieldMappers fieldMappers = docMapper.mappers().smartName(field);, +                            if (fieldMappers != null) {, +                                fields.add(fieldMappers.mapper().names().indexName());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                Collection<FieldMapper<?>> remainingFieldMappers = new LinkedList<>(allFieldMappers);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                            FieldMappers fieldMappers = docMapper.mappers().smartName(field);, +                            if (fieldMappers != null) {, +                                fields.add(fieldMappers.mapper().names().indexName());, +++ b/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +                sb.append(" to the JVM_OPTS environment variable.");, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                Collection<FieldMapper<?>> remainingFieldMappers = new LinkedList<>(allFieldMappers);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                            FieldMappers fieldMappers = docMapper.mappers().smartName(field);, +                            if (fieldMappers != null) {, +                                fields.add(fieldMappers.mapper().names().indexName());, +++ b/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +                sb.append(" to the JVM_OPTS environment variable.");, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +        if (explanation.getDescription() == null) {, +            throw new ElasticsearchIllegalArgumentException("Explanation descriptions should NOT be null\n[" + explanation.toString() + "]");, +        }, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                Collection<FieldMapper<?>> remainingFieldMappers = new LinkedList<>(allFieldMappers);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                            FieldMappers fieldMappers = docMapper.mappers().smartName(field);, +                            if (fieldMappers != null) {, +                                fields.add(fieldMappers.mapper().names().indexName());, +++ b/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +                sb.append(" to the JVM_OPTS environment variable.");, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +        if (explanation.getDescription() == null) {, +            throw new ElasticsearchIllegalArgumentException("Explanation descriptions should NOT be null\n[" + explanation.toString() + "]");, +        }, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                FieldMappers fieldMapper = docMapper.mappers().smartName(field);, +                } else if (!fieldMapper.mapper().fieldType().stored() && !fieldMapper.mapper().isGenerated()) {, +                            values.set(i, fieldMapper.mapper().valueForSearch(values.get(i)));, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                Collection<FieldMapper<?>> remainingFieldMappers = new LinkedList<>(allFieldMappers);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                            FieldMappers fieldMappers = docMapper.mappers().smartName(field);, +                            if (fieldMappers != null) {, +                                fields.add(fieldMappers.mapper().names().indexName());, +++ b/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +                sb.append(" to the JVM_OPTS environment variable.");, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +        if (explanation.getDescription() == null) {, +            throw new ElasticsearchIllegalArgumentException("Explanation descriptions should NOT be null\n[" + explanation.toString() + "]");, +        }, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                FieldMappers fieldMapper = docMapper.mappers().smartName(field);, +                } else if (!fieldMapper.mapper().fieldType().stored() && !fieldMapper.mapper().isGenerated()) {, +                            values.set(i, fieldMapper.mapper().valueForSearch(values.get(i)));, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +import com.google.common.collect.ForwardingSet;, +import java.util.Set;, +public final class DocumentFieldMappers extends ForwardingSet<FieldMapper<?>> {, +    public FieldMappers smartName(String name) {, +    @Override, +    protected Set<FieldMapper<?>> delegate() {, +        return fieldMappers;, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                Collection<FieldMapper<?>> remainingFieldMappers = new LinkedList<>(allFieldMappers);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                            FieldMappers fieldMappers = docMapper.mappers().smartName(field);, +                            if (fieldMappers != null) {, +                                fields.add(fieldMappers.mapper().names().indexName());, +++ b/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +                sb.append(" to the JVM_OPTS environment variable.");, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +        if (explanation.getDescription() == null) {, +            throw new ElasticsearchIllegalArgumentException("Explanation descriptions should NOT be null\n[" + explanation.toString() + "]");, +        }, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                FieldMappers fieldMapper = docMapper.mappers().smartName(field);, +                } else if (!fieldMapper.mapper().fieldType().stored() && !fieldMapper.mapper().isGenerated()) {, +                            values.set(i, fieldMapper.mapper().valueForSearch(values.get(i)));, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +import com.google.common.collect.ForwardingSet;, +import java.util.Set;, +public final class DocumentFieldMappers extends ForwardingSet<FieldMapper<?>> {, +    public FieldMappers smartName(String name) {, +    @Override, +    protected Set<FieldMapper<?>> delegate() {, +        return fieldMappers;, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +                        MergeContext mergeContext = newMmergeContext(new MergeFlags().simulate(true));, +                            mergeContext = newMmergeContext(new MergeFlags().simulate(false));, +    private MergeContext newMmergeContext(MergeFlags mergeFlags) {, +        final MergeContext mergeContext = newMmergeContext(mergeFlags);, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                Collection<FieldMapper<?>> remainingFieldMappers = new LinkedList<>(allFieldMappers);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java]