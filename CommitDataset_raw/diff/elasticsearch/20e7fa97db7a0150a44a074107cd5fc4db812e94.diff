[+++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/common/hash/MurmurHash3.java, +    @SuppressWarnings("fallthrough") // Intentionally uses fallthrough to implement a well known hashing algorithm, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/common/hash/MurmurHash3.java, +    @SuppressWarnings("fallthrough") // Intentionally uses fallthrough to implement a well known hashing algorithm, +++ b/core/src/main/java/org/elasticsearch/common/inject/assistedinject/FactoryProvider2.java, +    @Override, +    public int hashCode() {, +        // This way both this and its factory hash to the same spot, making hashCode consistent., +        return factory.hashCode();, +    }, +, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/common/hash/MurmurHash3.java, +    @SuppressWarnings("fallthrough") // Intentionally uses fallthrough to implement a well known hashing algorithm, +++ b/core/src/main/java/org/elasticsearch/common/inject/assistedinject/FactoryProvider2.java, +    @Override, +    public int hashCode() {, +        // This way both this and its factory hash to the same spot, making hashCode consistent., +        return factory.hashCode();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/BloomFilter.java, +    @SuppressWarnings("fallthrough") // Uses fallthrough to implement a well know hashing algorithm, +                k1 ^= (key[offset]);, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/common/hash/MurmurHash3.java, +    @SuppressWarnings("fallthrough") // Intentionally uses fallthrough to implement a well known hashing algorithm, +++ b/core/src/main/java/org/elasticsearch/common/inject/assistedinject/FactoryProvider2.java, +    @Override, +    public int hashCode() {, +        // This way both this and its factory hash to the same spot, making hashCode consistent., +        return factory.hashCode();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/BloomFilter.java, +    @SuppressWarnings("fallthrough") // Uses fallthrough to implement a well know hashing algorithm, +                k1 ^= (key[offset]);, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/SingleFieldsVisitor.java, +            case UidFieldMapper.NAME:, +                addValue(field, uid.toString());, +                break;, +            case IdFieldMapper.NAME:, +                addValue(field, uid.id());, +                break;, +            case TypeFieldMapper.NAME:, +                addValue(field, uid.type());, +                break;, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/common/hash/MurmurHash3.java, +    @SuppressWarnings("fallthrough") // Intentionally uses fallthrough to implement a well known hashing algorithm, +++ b/core/src/main/java/org/elasticsearch/common/inject/assistedinject/FactoryProvider2.java, +    @Override, +    public int hashCode() {, +        // This way both this and its factory hash to the same spot, making hashCode consistent., +        return factory.hashCode();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/BloomFilter.java, +    @SuppressWarnings("fallthrough") // Uses fallthrough to implement a well know hashing algorithm, +                k1 ^= (key[offset]);, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/SingleFieldsVisitor.java, +            case UidFieldMapper.NAME:, +                addValue(field, uid.toString());, +                break;, +            case IdFieldMapper.NAME:, +                addValue(field, uid.id());, +                break;, +            case TypeFieldMapper.NAME:, +                addValue(field, uid.type());, +                break;, +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/RandomExceptionCircuitBreakerIT.java, +            if (random().nextBoolean()) {, +            searchRequestBuilder.addSort("test-num", SortOrder.ASC);, +                        break;, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/common/hash/MurmurHash3.java, +    @SuppressWarnings("fallthrough") // Intentionally uses fallthrough to implement a well known hashing algorithm, +++ b/core/src/main/java/org/elasticsearch/common/inject/assistedinject/FactoryProvider2.java, +    @Override, +    public int hashCode() {, +        // This way both this and its factory hash to the same spot, making hashCode consistent., +        return factory.hashCode();, +    }]