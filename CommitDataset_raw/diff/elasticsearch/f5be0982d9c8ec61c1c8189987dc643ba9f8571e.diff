[+++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +// We switch modes after a dot to ensure there are not conflicts, +// between shortcuts and decimal values.  Without the mode switch, +// shortcuts such as id.0.0 will fail because 0.0 will be interpreted, +// as a decimal value instead of two individual list-style shortcuts., +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +// We switch modes after a dot to ensure there are not conflicts, +// between shortcuts and decimal values.  Without the mode switch, +// shortcuts such as id.0.0 will fail because 0.0 will be interpreted, +// as a decimal value instead of two individual list-style shortcuts., +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +, +            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception);, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +// We switch modes after a dot to ensure there are not conflicts, +// between shortcuts and decimal values.  Without the mode switch, +// shortcuts such as id.0.0 will fail because 0.0 will be interpreted, +// as a decimal value instead of two individual list-style shortcuts., +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +, +            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +    /**, +     * Adds stack trace and other useful information to exceptiosn thrown, +     * from a Painless script., +     * @param t The throwable to build an exception around., +     * @return The generated ScriptException., +     */, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +// We switch modes after a dot to ensure there are not conflicts, +// between shortcuts and decimal values.  Without the mode switch, +// shortcuts such as id.0.0 will fail because 0.0 will be interpreted, +// as a decimal value instead of two individual list-style shortcuts., +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +, +            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +    /**, +     * Adds stack trace and other useful information to exceptiosn thrown, +     * from a Painless script., +     * @param t The throwable to build an exception around., +     * @return The generated ScriptException., +     */, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java, +                // For the case where a cast is not required and a constant is not set, +                // or the node is already an EConstant no changes are required to the tree., +, +                // For the case where a cast is not required but a, +                // constant is set, an EConstant replaces this node, +                // with the constant copied from this node.  Note that, +                // for constants output data does not need to be copied, +                // from this node because the output data for the EConstant, +                // will already be the same., +, +                EConstant econstant = new EConstant(line, offset, location, constant);, +                // For the case where a cast is required and a constant is not set., +                // Modify the tree to add an ECast between this node and its parent., +                // The output data from this node is copied to the ECast for, +                // further reads done by the parent., +, +                ECast ecast = new ECast(line, offset, location, this, cast);, +                    // For the case where a cast is required, a constant is set,, +                    // and the constant can be immediately cast to the expected type., +                    // An EConstant replaces this node with the constant cast appropriately, +                    // from the constant value defined by this node.  Note that, +                    // for constants output data does not need to be copied, +                    // from this node because the output data for the EConstant, +                    // will already be the same., +, +                    EConstant econstant = new EConstant(line, offset, location, constant);, +                    // For the case where a cast is required, a constant is set,, +                    // the constant cannot be immediately cast to the expected type,, +                    // and this node is already an EConstant.  Modify the tree to add, +                    // an ECast between this node and its parent.  Note that, +                    // for constants output data does not need to be copied, +                    // from this node because the output data for the EConstant, +                    // will already be the same., +, +                    ECast ecast = new ECast(line, offset, location, this, cast);, +                    // For the case where a cast is required, a constant is set,, +                    // the constant cannot be immediately cast to the expected type,, +                    // and this node is not an EConstant.  Replace this node with, +                    // an Econstant node copying the constant from this node., +                    // Modify the tree to add an ECast between the EConstant node, +                    // and its parent.  Note that for constants output data does not, +                    // need to be copied from this node because the output data for, +                    // the EConstant will already be the same., +, +                    EConstant econstant = new EConstant(line, offset, location, constant);, +                    ECast ecast = new ECast(line, offset, location, econstant, cast);, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +// We switch modes after a dot to ensure there are not conflicts, +// between shortcuts and decimal values.  Without the mode switch, +// shortcuts such as id.0.0 will fail because 0.0 will be interpreted, +// as a decimal value instead of two individual list-style shortcuts., +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +, +            throw new IllegalStateException("An internal error occurred attempting to define the script [" + name + "].", exception);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +    /**]