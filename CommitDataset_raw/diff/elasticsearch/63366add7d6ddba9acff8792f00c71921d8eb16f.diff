[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String pathSeparator = System.getProperty("path.separator");, +        String fileSeparator = System.getProperty("file.separator");, +        String elements[] = classPath.split(pathSeparator);, +            // we should be able to just Paths.get() each element, but unfortunately this is not the, +            // whole story on how classpath parsing works: if you want to know, start at sun.misc.Launcher,, +            // be sure to stop before you tear out your eyes. we just handle the "alternative" filename, +            // specification which java seems to allow, explicitly, right here..., +            if (element.startsWith("/") && "\\".equals(fileSeparator)) {, +                // "correct" the entry to become a normal entry, +                // change to correct file separators, +                element = element.replace("/", "\\");, +                // if there is a drive letter, nuke the leading separator, +                if (element.length() >= 3 && element.charAt(2) == ':') {, +                    element = element.substring(1);, +                }, +            }, +            // now just parse as ordinary file, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String pathSeparator = System.getProperty("path.separator");, +        String fileSeparator = System.getProperty("file.separator");, +        String elements[] = classPath.split(pathSeparator);, +            // we should be able to just Paths.get() each element, but unfortunately this is not the, +            // whole story on how classpath parsing works: if you want to know, start at sun.misc.Launcher,, +            // be sure to stop before you tear out your eyes. we just handle the "alternative" filename, +            // specification which java seems to allow, explicitly, right here..., +            if (element.startsWith("/") && "\\".equals(fileSeparator)) {, +                // "correct" the entry to become a normal entry, +                // change to correct file separators, +                element = element.replace("/", "\\");, +                // if there is a drive letter, nuke the leading separator, +                if (element.length() >= 3 && element.charAt(2) == ':') {, +                    element = element.substring(1);, +                }, +            }, +            // now just parse as ordinary file, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +            float weightSum = 0;, +                FilterFunction filterFunction = filterFunctions[i];, +, +                if (filterFunction.function instanceof WeightFactorFunction) {, +                    weightSum += ((WeightFactorFunction) filterFunction.function).getWeight();, +                } else {, +                    weightSum++;, +                }, +, +            // Second: Compute the factor that would have been computed by the, +            // filters, +            double factor = 1.0;, +            switch (scoreMode) {, +            case FIRST:, +                factor = filterExplanations.get(0).getValue();, +                break;, +            case MAX:, +                factor = Double.NEGATIVE_INFINITY;, +                for (Explanation filterExplanation : filterExplanations) {, +                    factor = Math.max(filterExplanation.getValue(), factor);, +                }, +                break;, +            case MIN:, +                factor = Double.POSITIVE_INFINITY;, +                for (Explanation filterExplanation : filterExplanations) {, +                    factor = Math.min(filterExplanation.getValue(), factor);, +                }, +                break;, +            case MULTIPLY:, +                for (Explanation filterExplanation : filterExplanations) {, +                    factor *= filterExplanation.getValue();, +                }, +                break;, +            default:, +                double totalFactor = 0.0f;, +                for (Explanation filterExplanation : filterExplanations) {, +                    totalFactor += filterExplanation.getValue();, +                }, +                if (weightSum != 0) {, +                    factor = totalFactor;, +                    if (scoreMode == ScoreMode.AVG) {, +                        factor /= weightSum;, +                    }, +                }, +            }, +                    CombineFunction.toFloat(factor),, +            double factor = 1.0f;, +                    float weightSum = 0;, +                                weightSum++;, +            return scoreCombiner.combine(subQueryScore, factor, maxBoost);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String pathSeparator = System.getProperty("path.separator");, +        String fileSeparator = System.getProperty("file.separator");, +        String elements[] = classPath.split(pathSeparator);, +            // we should be able to just Paths.get() each element, but unfortunately this is not the, +            // whole story on how classpath parsing works: if you want to know, start at sun.misc.Launcher,, +            // be sure to stop before you tear out your eyes. we just handle the "alternative" filename, +            // specification which java seems to allow, explicitly, right here..., +            if (element.startsWith("/") && "\\".equals(fileSeparator)) {, +                // "correct" the entry to become a normal entry, +                // change to correct file separators, +                element = element.replace("/", "\\");, +                // if there is a drive letter, nuke the leading separator]