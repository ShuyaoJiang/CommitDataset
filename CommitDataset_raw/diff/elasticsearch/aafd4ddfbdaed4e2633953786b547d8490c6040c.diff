[+++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        this.snapshotsBlobContainer = blobStore().immutableBlobContainer(basePath());, +        indexShardRepository.initialize(blobStore(), basePath(), chunkSize());, +     * Returns base path of the repository, +     */, +    abstract protected BlobPath basePath();, +, +    /**, +                BlobPath indexPath = basePath().add("indices").add(index);, +                BlobPath indexPath = basePath().add("indices").add(index);, +        BlobStoreSnapshot snapshot = (BlobStoreSnapshot)readSnapshot(snapshotId);, +            BlobPath indexPath = basePath().add("indices").add(index);, +    public Snapshot readSnapshot(SnapshotId snapshotId) {, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        this.snapshotsBlobContainer = blobStore().immutableBlobContainer(basePath());, +        indexShardRepository.initialize(blobStore(), basePath(), chunkSize());, +     * Returns base path of the repository, +     */, +    abstract protected BlobPath basePath();, +, +    /**, +                BlobPath indexPath = basePath().add("indices").add(index);, +                BlobPath indexPath = basePath().add("indices").add(index);, +        BlobStoreSnapshot snapshot = (BlobStoreSnapshot)readSnapshot(snapshotId);, +            BlobPath indexPath = basePath().add("indices").add(index);, +    public Snapshot readSnapshot(SnapshotId snapshotId) {, +++ b/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +import org.elasticsearch.common.blobstore.BlobPath;, +    private final BlobPath basePath;, +, +        this.basePath = BlobPath.cleanPath();, +    @Override, +    protected BlobPath basePath() {, +        return basePath;, +    }, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        this.snapshotsBlobContainer = blobStore().immutableBlobContainer(basePath());, +        indexShardRepository.initialize(blobStore(), basePath(), chunkSize());, +     * Returns base path of the repository, +     */, +    abstract protected BlobPath basePath();, +, +    /**, +                BlobPath indexPath = basePath().add("indices").add(index);, +                BlobPath indexPath = basePath().add("indices").add(index);, +        BlobStoreSnapshot snapshot = (BlobStoreSnapshot)readSnapshot(snapshotId);, +            BlobPath indexPath = basePath().add("indices").add(index);, +    public Snapshot readSnapshot(SnapshotId snapshotId) {, +++ b/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +import org.elasticsearch.common.blobstore.BlobPath;, +    private final BlobPath basePath;, +, +        this.basePath = BlobPath.cleanPath();, +    @Override, +    protected BlobPath basePath() {, +        return basePath;, +    }, +++ b/src/main/java/org/elasticsearch/repositories/uri/URLRepository.java, +import org.elasticsearch.common.blobstore.BlobPath;, +    private final BlobPath basePath;, +, +        basePath = BlobPath.cleanPath();, +, +    @Override, +    protected BlobPath basePath() {, +        return basePath;, +    }]