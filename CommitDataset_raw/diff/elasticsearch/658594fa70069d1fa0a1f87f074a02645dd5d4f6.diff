[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                        ClusterBlockException blockException = checkBlock(request, clusterService.state());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                        ClusterBlockException blockException = checkBlock(request, clusterService.state());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                if (!request.rerouteAfterCreation) {, +                    listener.onResponse(new Response(true, clusterState.metaData().index(request.index)));, +                    return;, +                }, +        boolean rerouteAfterCreation = true;, +, +, +        public Request rerouteAfterCreation(boolean rerouteAfterCreation) {, +            this.rerouteAfterCreation = rerouteAfterCreation;, +            return this;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                        ClusterBlockException blockException = checkBlock(request, clusterService.state());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                if (!request.rerouteAfterCreation) {, +                    listener.onResponse(new Response(true, clusterState.metaData().index(request.index)));, +                    return;, +                }, +        boolean rerouteAfterCreation = true;, +, +, +        public Request rerouteAfterCreation(boolean rerouteAfterCreation) {, +            this.rerouteAfterCreation = rerouteAfterCreation;, +            return this;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/GatewayService.java, +import org.elasticsearch.cluster.routing.IndexRoutingTable;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +import org.elasticsearch.cluster.routing.allocation.ShardsAllocation;, +    private final ShardsAllocation shardsAllocation;, +, +    @Inject public GatewayService(Settings settings, Gateway gateway, ShardsAllocation shardsAllocation, ClusterService clusterService, DiscoveryService discoveryService, MetaDataCreateIndexService createIndexService, ThreadPool threadPool) {, +        this.shardsAllocation = shardsAllocation;, +, +                    // also, don't reroute (or even initialize the routing table) for the indices created, we will do it, +                    // in one batch once creating those indices is done, +                                    .rerouteAfterCreation(false), +        clusterService.submitStateUpdateTask("gateway (marked as read, reroute, reason=" + reason + ")", new ProcessedClusterStateUpdateTask() {, +                // initialize all index routing tables as empty, +                RoutingTable.Builder routingTableBuilder = RoutingTable.builder().routingTable(currentState.routingTable());, +                for (IndexMetaData indexMetaData : currentState.metaData().indices().values()) {, +                    if (indexMetaData.state() == IndexMetaData.State.OPEN) {, +                        IndexRoutingTable.Builder indexRoutingBuilder = new IndexRoutingTable.Builder(indexMetaData.index()), +                                .initializeEmpty(currentState.metaData().index(indexMetaData.index()), false);, +                        routingTableBuilder.add(indexRoutingBuilder);, +                    }, +                }, +, +                RoutingAllocation.Result routingResult = shardsAllocation.reroute(newClusterStateBuilder().state(currentState).routingTable(routingTableBuilder).build());, +, +                return newClusterStateBuilder().state(currentState).blocks(blocks).routingResult(routingResult).build();, +            }, +, +            @Override public void clusterStateProcessed(ClusterState clusterState) {, +                logger.info("all indices created and rerouting has begun");]