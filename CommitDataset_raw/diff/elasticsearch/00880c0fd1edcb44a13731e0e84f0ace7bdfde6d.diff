[+++ b/server/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeAggregatorTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations.pipeline;, +, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.NumericDocValuesField;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.RandomIndexWriter;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.MatchAllDocsQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.store.Directory;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.search.SearchPhaseExecutionException;, +import org.elasticsearch.common.CheckedConsumer;, +import org.elasticsearch.index.mapper.DateFieldMapper;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.NumberFieldMapper;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +import org.elasticsearch.search.aggregations.AggregatorTestCase;, +import org.elasticsearch.search.aggregations.InternalAggregation;, +import org.elasticsearch.search.aggregations.InternalMultiBucketAggregation;, +import org.elasticsearch.search.aggregations.bucket.filter.FiltersAggregationBuilder;, +import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;, +import org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.AvgAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.Stats;, +import org.elasticsearch.search.aggregations.metrics.StatsAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.Sum;, +import org.elasticsearch.search.aggregations.metrics.SumAggregationBuilder;, +import org.elasticsearch.search.aggregations.support.AggregationPath;, +import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.function.Consumer;, +, +import static org.hamcrest.core.IsEqual.equalTo;, +import static org.hamcrest.core.IsNull.notNullValue;, +import static org.hamcrest.core.IsNull.nullValue;, +import static org.hamcrest.number.IsCloseTo.closeTo;, +, +public class DerivativeAggregatorTests extends AggregatorTestCase {, +, +    private static final String SINGLE_VALUED_FIELD_NAME = "l_value";, +    private static int interval = 5;, +    private static int numValueBuckets;, +    private static int numFirstDerivValueBuckets;, +    private static int numSecondDerivValueBuckets;, +    private static long[] valueCounts;, +    private static long[] firstDerivValueCounts;, +    private static long[] secondDerivValueCounts;, +, +    private static Long[] valueCounts_empty;, +    private static long numDocsEmptyIdx;, +    private static Double[] firstDerivValueCounts_empty;, +, +    // expected bucket values for random setup with gaps, +    private static int numBuckets_empty_rnd;, +    private static Long[] valueCounts_empty_rnd;, +    private static Double[] firstDerivValueCounts_empty_rnd;, +    private static long numDocsEmptyIdx_rnd;, +, +, +    private void setupValueCounts() {, +        numDocsEmptyIdx = 0L;, +        numDocsEmptyIdx_rnd = 0L;, +        interval = 5;, +        numValueBuckets = randomIntBetween(6, 80);, +, +        valueCounts = new long[numValueBuckets];, +        for (int i = 0; i < numValueBuckets; i++) {, +            valueCounts[i] = randomIntBetween(1, 20);, +        }, +, +        numFirstDerivValueBuckets = numValueBuckets - 1;, +        firstDerivValueCounts = new long[numFirstDerivValueBuckets];, +        Long lastValueCount = null;, +        for (int i = 0; i < numValueBuckets; i++) {, +            long thisValue = valueCounts[i];]