[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        checks.add(new ClientJvmCheck());, +    static class ClientJvmCheck implements BootstrapCheck.Check {, +, +        @Override, +        public boolean check() {, +            return getVmName().toLowerCase(Locale.ROOT).contains("client");, +        }, +, +        // visible for testing, +        String getVmName() {, +            return JvmInfo.jvmInfo().getVmName();, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                    Locale.ROOT,, +                    "JVM is using the client VM [%s] but should be using a server VM for the best performance",, +                    getVmName());, +        }, +, +        @Override, +        public final boolean isSystemCheck() {, +            return false;, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        checks.add(new ClientJvmCheck());, +    static class ClientJvmCheck implements BootstrapCheck.Check {, +, +        @Override, +        public boolean check() {, +            return getVmName().toLowerCase(Locale.ROOT).contains("client");, +        }, +, +        // visible for testing, +        String getVmName() {, +            return JvmInfo.jvmInfo().getVmName();, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                    Locale.ROOT,, +                    "JVM is using the client VM [%s] but should be using a server VM for the best performance",, +                    getVmName());, +        }, +, +        @Override, +        public final boolean isSystemCheck() {, +            return false;, +        }, +, +    }, +, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapCheckTests.java, +import java.util.concurrent.atomic.AtomicReference;, +    public void testClientJvmCheck() {, +        final AtomicReference<String> vmName = new AtomicReference<>("Java HotSpot(TM) 32-Bit Client VM");, +        final BootstrapCheck.Check check = new BootstrapCheck.ClientJvmCheck() {, +            @Override, +            String getVmName() {, +                return vmName.get();, +            }, +        };, +, +        RuntimeException e = expectThrows(, +                RuntimeException.class,, +                () -> BootstrapCheck.check(true, false, Collections.singletonList(check), "testClientJvmCheck"));, +        assertThat(, +                e.getMessage(),, +                containsString("JVM is using the client VM [Java HotSpot(TM) 32-Bit Client VM] " +, +                        "but should be using a server VM for the best performance"));, +, +        vmName.set("Java HotSpot(TM) 32-Bit Server VM");, +        BootstrapCheck.check(true, false, Collections.singletonList(check), "testClientJvmCheck");, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        checks.add(new ClientJvmCheck());, +    static class ClientJvmCheck implements BootstrapCheck.Check {, +, +        @Override, +        public boolean check() {, +            return getVmName().toLowerCase(Locale.ROOT).contains("client");, +        }, +, +        // visible for testing, +        String getVmName() {, +            return JvmInfo.jvmInfo().getVmName();, +        }, +, +        @Override]