[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorService.java, +    private final RealTimePercolatorOperationListener realTimePercolatorOperationListener = new RealTimePercolatorOperationListener();, +, +, +        // clean up any index that has registered real time updated from the percolator shards allocated on this node, +        IndexService percolatorIndexService = percolatorIndexService();, +        if (percolatorIndexService != null) {, +            for (IndexShard indexShard : percolatorIndexService) {, +                try {, +                    indexShard.removeListener(realTimePercolatorOperationListener);, +                } catch (Exception e) {, +                    // ignore, +                }, +            }, +        }, +            // add a listener that will update based on changes done to the _percolate index, +            // the relevant indices with loaded queries, +                indexShard.addListener(realTimePercolatorOperationListener);, +                        // only load queries for "this" index percolator service, +                        if (indexService.index().equals(index())) {, +                    }, +            if (create.type().equals(index().name())) {, +            }, +            if (index.type().equals(index().name())) {, +            }, +            if (delete.type().equals(index().name())) {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorService.java, +    private final RealTimePercolatorOperationListener realTimePercolatorOperationListener = new RealTimePercolatorOperationListener();, +, +, +        // clean up any index that has registered real time updated from the percolator shards allocated on this node, +        IndexService percolatorIndexService = percolatorIndexService();, +        if (percolatorIndexService != null) {, +            for (IndexShard indexShard : percolatorIndexService) {, +                try {, +                    indexShard.removeListener(realTimePercolatorOperationListener);, +                } catch (Exception e) {, +                    // ignore, +                }, +            }, +        }, +            // add a listener that will update based on changes done to the _percolate index, +            // the relevant indices with loaded queries, +                indexShard.addListener(realTimePercolatorOperationListener);, +                        // only load queries for "this" index percolator service, +                        if (indexService.index().equals(index())) {, +                    }, +            if (create.type().equals(index().name())) {, +            }, +            if (index.type().equals(index().name())) {, +            }, +            if (delete.type().equals(index().name())) {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +        listeners.clear();, +        listeners = null;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/percolator/PercolatorService.java, +    private final RealTimePercolatorOperationListener realTimePercolatorOperationListener = new RealTimePercolatorOperationListener();, +, +, +        // clean up any index that has registered real time updated from the percolator shards allocated on this node, +        IndexService percolatorIndexService = percolatorIndexService();, +        if (percolatorIndexService != null) {, +            for (IndexShard indexShard : percolatorIndexService) {, +                try {, +                    indexShard.removeListener(realTimePercolatorOperationListener);, +                } catch (Exception e) {, +                    // ignore, +                }, +            }, +        }, +            // add a listener that will update based on changes done to the _percolate index, +            // the relevant indices with loaded queries, +                indexShard.addListener(realTimePercolatorOperationListener);, +                        // only load queries for "this" index percolator service, +                        if (indexService.index().equals(index())) {, +                    }, +            if (create.type().equals(index().name())) {, +            }, +            if (index.type().equals(index().name())) {, +            }, +            if (delete.type().equals(index().name())) {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +        listeners.clear();, +        listeners = null;, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/percolator/SimplePercolatorTests.java, +    @Test public void percolateOnRecreatedIndex() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +        try {, +            client.admin().indices().prepareDelete("_percolator").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +]