[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                File srcConfigFile = project.file(extraConfigFile.getValue()), +            copyConfig.from({ extraConfigFile.getValue() }) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                File srcConfigFile = project.file(extraConfigFile.getValue()), +            copyConfig.from({ extraConfigFile.getValue() }) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.fieldstats.TransportFieldStatsTransportAction;, +        registerAction(FieldStatsAction.INSTANCE, TransportFieldStatsTransportAction.class);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                File srcConfigFile = project.file(extraConfigFile.getValue()), +            copyConfig.from({ extraConfigFile.getValue() }) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.fieldstats.TransportFieldStatsTransportAction;, +        registerAction(FieldStatsAction.INSTANCE, TransportFieldStatsTransportAction.class);, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                File srcConfigFile = project.file(extraConfigFile.getValue()), +            copyConfig.from({ extraConfigFile.getValue() }) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.fieldstats.TransportFieldStatsTransportAction;, +        registerAction(FieldStatsAction.INSTANCE, TransportFieldStatsTransportAction.class);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.fieldstats;, +, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.ShardOperationFailedException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.DefaultShardOperationFailedException;, +import org.elasticsearch.action.support.broadcast.BroadcastShardOperationFailedException;, +import org.elasticsearch.action.support.broadcast.TransportBroadcastAction;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.routing.GroupShardsIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.regex.Regex;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.engine.Engine;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +, +import java.io.IOException;, +, +import java.util.Map;, +import java.util.HashMap;, +import java.util.List;, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.Set;, +import java.util.HashSet;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicReferenceArray;, +, +public class TransportFieldStatsTransportAction extends, +    TransportBroadcastAction<FieldStatsRequest, FieldStatsResponse, FieldStatsShardRequest, FieldStatsShardResponse> {, +, +    private final IndicesService indicesService;, +, +    @Inject, +    public TransportFieldStatsTransportAction(Settings settings, ThreadPool threadPool, ClusterService clusterService,, +                                              TransportService transportService, ActionFilters actionFilters,, +                                              IndexNameExpressionResolver indexNameExpressionResolver,, +                                              IndicesService indicesService) {, +        super(settings, FieldStatsAction.NAME, threadPool, clusterService, transportService,, +            actionFilters, indexNameExpressionResolver, FieldStatsRequest::new,, +            FieldStatsShardRequest::new, ThreadPool.Names.MANAGEMENT);, +        this.indicesService = indicesService;, +    }]