[+++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, interval.getMillis());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, interval.getMillis());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/MonitoringBulkDoc.java, +    private final long intervalMillis;, +                             final long intervalMillis,, +        this.intervalMillis = intervalMillis;, +            out.writeVLong(intervalMillis);, +    public long getIntervalMillis() {, +        return intervalMillis;, +                && intervalMillis == that.intervalMillis, +        return Objects.hash(system, type, id, timestamp, intervalMillis, source, xContentType);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, interval.getMillis());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/MonitoringBulkDoc.java, +    private final long intervalMillis;, +                             final long intervalMillis,, +        this.intervalMillis = intervalMillis;, +            out.writeVLong(intervalMillis);, +    public long getIntervalMillis() {, +        return intervalMillis;, +                && intervalMillis == that.intervalMillis, +        return Objects.hash(system, type, id, timestamp, intervalMillis, source, xContentType);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringBulkAction.java, +            final long intervalMillis = bulkDoc.getIntervalMillis();, +            return new BytesReferenceMonitoringDoc(defaultClusterUUID, timestamp, intervalMillis,, +                                                   defaultNode, system, type, id, xContentType, source);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, interval.getMillis());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/MonitoringBulkDoc.java, +    private final long intervalMillis;, +                             final long intervalMillis,, +        this.intervalMillis = intervalMillis;, +            out.writeVLong(intervalMillis);, +    public long getIntervalMillis() {, +        return intervalMillis;, +                && intervalMillis == that.intervalMillis, +        return Objects.hash(system, type, id, timestamp, intervalMillis, source, xContentType);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringBulkAction.java, +            final long intervalMillis = bulkDoc.getIntervalMillis();, +            return new BytesReferenceMonitoringDoc(defaultClusterUUID, timestamp, intervalMillis,, +                                                   defaultNode, system, type, id, xContentType, source);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/Collector.java, +    public Collection<MonitoringDoc> collect(final long timestamp, final long interval) {, +                return doCollect(convertNode(timestamp, clusterService.localNode()), interval);, +    protected abstract Collection<MonitoringDoc> doCollect(MonitoringDoc.Node sourceNode, long interval) throws Exception;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, interval.getMillis());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/MonitoringBulkDoc.java, +    private final long intervalMillis;, +                             final long intervalMillis,, +        this.intervalMillis = intervalMillis;, +            out.writeVLong(intervalMillis);, +    public long getIntervalMillis() {, +        return intervalMillis;, +                && intervalMillis == that.intervalMillis, +        return Objects.hash(system, type, id, timestamp, intervalMillis, source, xContentType);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringBulkAction.java, +            final long intervalMillis = bulkDoc.getIntervalMillis();, +            return new BytesReferenceMonitoringDoc(defaultClusterUUID, timestamp, intervalMillis,, +                                                   defaultNode, system, type, id, xContentType, source);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/Collector.java, +    public Collection<MonitoringDoc> collect(final long timestamp, final long interval) {, +                return doCollect(convertNode(timestamp, clusterService.localNode()), interval);, +    protected abstract Collection<MonitoringDoc> doCollect(MonitoringDoc.Node sourceNode, long interval) throws Exception;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +    protected Collection<MonitoringDoc> doCollect(final MonitoringDoc.Node node, final long interval) throws Exception {, +                new ClusterStatsMonitoringDoc(clusterUUID(), timestamp(), interval, node, clusterName, version,  clusterStats.getStatus(),, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, interval.getMillis());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/MonitoringBulkDoc.java, +    private final long intervalMillis;, +                             final long intervalMillis,, +        this.intervalMillis = intervalMillis;, +            out.writeVLong(intervalMillis);, +    public long getIntervalMillis() {, +        return intervalMillis;, +                && intervalMillis == that.intervalMillis, +        return Objects.hash(system, type, id, timestamp, intervalMillis, source, xContentType);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringBulkAction.java, +            final long intervalMillis = bulkDoc.getIntervalMillis();, +            return new BytesReferenceMonitoringDoc(defaultClusterUUID, timestamp, intervalMillis,, +                                                   defaultNode, system, type, id, xContentType, source);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/Collector.java, +    public Collection<MonitoringDoc> collect(final long timestamp, final long interval) {, +                return doCollect(convertNode(timestamp, clusterService.localNode()), interval);, +    protected abstract Collection<MonitoringDoc> doCollect(MonitoringDoc.Node sourceNode, long interval) throws Exception;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +    protected Collection<MonitoringDoc> doCollect(final MonitoringDoc.Node node, final long interval) throws Exception {, +                new ClusterStatsMonitoringDoc(clusterUUID(), timestamp(), interval, node, clusterName, version,  clusterStats.getStatus(),, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsMonitoringDoc.java, +                              final long intervalMillis,, +        super(cluster, timestamp, intervalMillis, node, MonitoredSystem.ES, TYPE, null);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringService.java, +                            Collection<MonitoringDoc> result = collector.collect(timestamp, interval.getMillis());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/action/MonitoringBulkDoc.java, +    private final long intervalMillis;, +                             final long intervalMillis,, +        this.intervalMillis = intervalMillis;]