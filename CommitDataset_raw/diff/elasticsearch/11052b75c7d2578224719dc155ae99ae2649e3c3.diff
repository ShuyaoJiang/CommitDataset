[+++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockLevel globalBlockLevel() {, +        // resync should never be blocked because it's an internal action, +        return null;, +    }, +, +    @Override, +    protected ClusterBlockLevel indexBlockLevel() {, +        // resync should never be blocked because it's an internal action, +        return null;, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockLevel globalBlockLevel() {, +        // resync should never be blocked because it's an internal action, +        return null;, +    }, +, +    @Override, +    protected ClusterBlockLevel indexBlockLevel() {, +        // resync should never be blocked because it's an internal action, +        return null;, +    }, +, +    @Override, +++ b/server/src/test/java/org/elasticsearch/action/resync/TransportResyncReplicationActionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.action.resync;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.BigArrays;, +import org.elasticsearch.discovery.DiscoverySettings;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.ReplicationGroup;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.index.translog.Translog;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.transport.MockTransportService;, +import org.elasticsearch.threadpool.TestThreadPool;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.MockTcpTransport;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +, +import java.nio.charset.Charset;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.concurrent.TimeUnit;, +, +import static java.util.Collections.emptyList;, +import static org.elasticsearch.action.support.replication.ClusterStateCreationUtils.state;, +import static org.elasticsearch.test.ClusterServiceUtils.createClusterService;, +import static org.elasticsearch.test.ClusterServiceUtils.setState;, +import static org.elasticsearch.transport.TransportService.NOOP_TRANSPORT_INTERCEPTOR;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.nullValue;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.anyString;]