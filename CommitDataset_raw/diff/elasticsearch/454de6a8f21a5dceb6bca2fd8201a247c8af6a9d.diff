[+++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testRequiredJDKVersionIsOK() throws Exception {, +        Path dir = createTempDir();, +        Manifest manifest = new Manifest();, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.7");, +        URL[] jars = {makeJar(dir, "foo.jar", manifest, "Foo.class")};, +, +        JarHell.checkJarHell(jars);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testRequiredJDKVersionIsOK() throws Exception {, +        Path dir = createTempDir();, +        Manifest manifest = new Manifest();, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.7");, +        URL[] jars = {makeJar(dir, "foo.jar", manifest, "Foo.class")};, +, +        JarHell.checkJarHell(jars);, +    }, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testRequiredJDKVersionIsOK() throws Exception {, +        Path dir = createTempDir();, +        Manifest manifest = new Manifest();, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.7");, +        URL[] jars = {makeJar(dir, "foo.jar", manifest, "Foo.class")};, +, +        JarHell.checkJarHell(jars);, +    }, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testRequiredJDKVersionIsOK() throws Exception {, +        Path dir = createTempDir();, +        Manifest manifest = new Manifest();, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.7");, +        URL[] jars = {makeJar(dir, "foo.jar", manifest, "Foo.class")};, +, +        JarHell.checkJarHell(jars);, +    }, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +        byte[] bytes = Writer.write(settings, name, source, variables, root, expressions);, +            throw new IllegalStateException(, +                    "An internal error occurred attempting to define the script [" + name + "].", exception);, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testRequiredJDKVersionIsOK() throws Exception {, +        Path dir = createTempDir();, +        Manifest manifest = new Manifest();, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.7");, +        URL[] jars = {makeJar(dir, "foo.jar", manifest, "Foo.class")};, +, +        JarHell.checkJarHell(jars);, +    }, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +        byte[] bytes = Writer.write(settings, name, source, variables, root, expressions);, +            throw new IllegalStateException(, +                    "An internal error occurred attempting to define the script [" + name + "].", exception);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +    public void testRequiredJDKVersionIsOK() throws Exception {, +        Path dir = createTempDir();, +        Manifest manifest = new Manifest();, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.7");, +        URL[] jars = {makeJar(dir, "foo.jar", manifest, "Foo.class")};, +, +        JarHell.checkJarHell(jars);, +    }, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +        byte[] bytes = Writer.write(settings, name, source, variables, root, expressions);, +            throw new IllegalStateException(, +                    "An internal error occurred attempting to define the script [" + name + "].", exception);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java, +      setState(121);, +        _localctx = new DeclContext(_localctx);, +        declaration();, +        delimiter();]