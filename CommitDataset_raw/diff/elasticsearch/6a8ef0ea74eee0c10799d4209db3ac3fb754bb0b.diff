[+++ b/test/framework/src/main/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java, +import java.util.concurrent.atomic.AtomicInteger;, +        final String ACTION = "action";, +        serviceA.registerRequestHandler(ACTION, TransportRequest.Empty::new, ThreadPool.Names.GENERIC,, +        serviceB.registerRequestHandler(ACTION, TransportRequest.Empty::new, ThreadPool.Names.GENERIC,, +            AtomicInteger requestsReceived = new AtomicInteger();, +            AtomicInteger requestsSent = new AtomicInteger();, +            AtomicInteger responseReceived = new AtomicInteger();, +            AtomicInteger responseSent = new AtomicInteger();, +                if (action.equals(ACTION)) {, +                    requestsReceived.incrementAndGet();, +                }, +                if (action.equals(ACTION)) {, +                    responseSent.incrementAndGet();, +                }, +                if (action.equals(ACTION)) {, +                    responseSent.incrementAndGet();, +                }, +                if (action.equals(ACTION)) {, +                    responseReceived.incrementAndGet();, +                }, +                if (action.equals(ACTION)) {, +                    requestsSent.incrementAndGet();, +                .submitRequest(nodeB, ACTION, TransportRequest.Empty.INSTANCE, EmptyTransportResponseHandler.INSTANCE_SAME).get();, +            assertThat(tracerA.requestsReceived.get(), equalTo(0));, +            assertThat(tracerA.requestsSent.get(), equalTo(1));, +            assertThat(tracerA.responseReceived.get(), equalTo(1));, +            assertThat(tracerA.responseSent.get(), equalTo(0));, +            assertThat(tracerB.requestsReceived.get(), equalTo(1));, +            assertThat(tracerB.requestsSent.get(), equalTo(0));, +            assertThat(tracerB.responseReceived.get(), equalTo(0));, +            assertThat(tracerB.responseSent.get(), equalTo(1));, +                .submitRequest(nodeA, ACTION, TransportRequest.Empty.INSTANCE, EmptyTransportResponseHandler.INSTANCE_SAME).get();, +            assertThat(tracerA.requestsReceived.get(), equalTo(1));, +            assertThat(tracerA.requestsSent.get(), equalTo(2));, +            assertThat(tracerA.responseReceived.get(), equalTo(2));, +            assertThat(tracerA.responseSent.get(), equalTo(1));, +            assertThat(tracerB.requestsReceived.get(), equalTo(1));, +            assertThat(tracerB.requestsSent.get(), equalTo(0));, +            assertThat(tracerB.responseReceived.get(), equalTo(0));, +            assertThat(tracerB.responseSent.get(), equalTo(1));]