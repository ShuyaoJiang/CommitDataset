[+++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME);, +    boolean isSnapshot() {, +        return Build.CURRENT.isSnapshot();, +, +    /** Returns the url for an official elasticsearch plugin. */, +    private String getElasticUrl(, +            final Terminal terminal,, +            final String stagingHash,, +            final Version version,, +            final boolean isSnapshot,, +            final String pluginId,, +            final String platform) throws IOException, UserException {, +        final String baseUrl;, +        if (isSnapshot && stagingHash == null) {, +            throw new UserException(, +                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch");, +        }, +        if (stagingHash != null) {, +            if (isSnapshot) {, +                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId);, +            } else {, +                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId);, +            }, +        } else {, +            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId);, +        }, +        final String platformUrl =, +                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Version.displayVersion(version, isSnapshot));, +        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Version.displayVersion(version, isSnapshot));, +    }, +, +    private String nonReleaseUrl(final String hostname, final Version version, final String stagingHash, final String pluginId) {, +        return String.format(, +                Locale.ROOT, "https://%s.elastic.co/%s-%s/downloads/elasticsearch-plugins/%s", hostname, version, stagingHash, pluginId);, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +            final String url = getElasticUrl(terminal, getStagingHash(), Version.CURRENT, isSnapshot(), pluginId, Platforms.PLATFORM_NAME);, +    boolean isSnapshot() {, +        return Build.CURRENT.isSnapshot();, +, +    /** Returns the url for an official elasticsearch plugin. */, +    private String getElasticUrl(, +            final Terminal terminal,, +            final String stagingHash,, +            final Version version,, +            final boolean isSnapshot,, +            final String pluginId,, +            final String platform) throws IOException, UserException {, +        final String baseUrl;, +        if (isSnapshot && stagingHash == null) {, +            throw new UserException(, +                    ExitCodes.CONFIG, "attempted to install release build of official plugin on snapshot build of Elasticsearch");, +        }, +        if (stagingHash != null) {, +            if (isSnapshot) {, +                baseUrl = nonReleaseUrl("snapshots", version, stagingHash, pluginId);, +            } else {, +                baseUrl = nonReleaseUrl("staging", version, stagingHash, pluginId);, +            }, +        } else {, +            baseUrl = String.format(Locale.ROOT, "https://artifacts.elastic.co/downloads/elasticsearch-plugins/%s", pluginId);, +        }, +        final String platformUrl =, +                String.format(Locale.ROOT, "%s/%s-%s-%s.zip", baseUrl, pluginId, platform, Version.displayVersion(version, isSnapshot));, +        return String.format(Locale.ROOT, "%s/%s-%s.zip", baseUrl, pluginId, Version.displayVersion(version, isSnapshot));, +    }, +, +    private String nonReleaseUrl(final String hostname, final Version version, final String stagingHash, final String pluginId) {, +        return String.format(, +                Locale.ROOT, "https://%s.elastic.co/%s-%s/downloads/elasticsearch-plugins/%s", hostname, version, stagingHash, pluginId);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +    void assertInstallPluginFromUrl(String pluginId, String name, String url, String stagingHash, boolean isSnapshot,, +, +            @Override, +            boolean isSnapshot() {, +                return isSnapshot;, +            }, +, +    public void assertInstallPluginFromUrl(, +            final String pluginId, final String name, final String url, final String stagingHash, boolean isSnapshot) throws Exception {, +        assertInstallPluginFromUrl(pluginId, name, url, stagingHash, isSnapshot, ".sha512", checksumAndFilename(digest, url));, +        assertInstallPluginFromUrl("analysis-icu", "analysis-icu", url, null, false);, +    }, +, +    public void testOfficialPluginSnapshot() throws Exception {, +        String url = String.format(, +                Locale.ROOT,, +                "https://snapshots.elastic.co/%s-abc123/downloads/elasticsearch-plugins/analysis-icu/analysis-icu-%s.zip",, +                Version.CURRENT,, +                Version.displayVersion(Version.CURRENT, true));, +        assertInstallPluginFromUrl("analysis-icu", "analysis-icu", url, "abc123", true);, +    }, +, +    public void testInstallReleaseBuildOfPluginOnSnapshotBuild() {, +        String url = String.format(, +                Locale.ROOT,, +                "https://snapshots.elastic.co/%s-abc123/downloads/elasticsearch-plugins/analysis-icu/analysis-icu-%s.zip",, +                Version.CURRENT,, +                Version.displayVersion(Version.CURRENT, true));, +        // attemping to install a release build of a plugin (no staging ID) on a snapshot build should throw a user exception]