[+++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkPrimaryExecutionContext.java, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkPrimaryExecutionContext.java, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +            context.markAsCompleted(executionResult);, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkPrimaryExecutionContext.java, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +            context.markAsCompleted(executionResult);, +++ b/server/src/test/java/org/elasticsearch/action/bulk/TransportShardBulkActionTests.java, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +, +        randomlySetIgnoredPrimaryResponse(items[0]);, +, +        randomlySetIgnoredPrimaryResponse(items[0]);, +, +        randomlySetIgnoredPrimaryResponse(items[0]);, +, +        randomlySetIgnoredPrimaryResponse(items[0]);, +, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +    private void randomlySetIgnoredPrimaryResponse(BulkItemRequest primaryRequest) {, +        if (randomBoolean()) {, +            // add a response to the request and thereby check that it is ignored for the primary., +            primaryRequest.setPrimaryResponse(new BulkItemResponse(0, DocWriteRequest.OpType.INDEX, new IndexResponse(null, "_doc",, +                "ignore-primary-response-on-primary", 42, 42, 42, false)));, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkPrimaryExecutionContext.java, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +            context.markAsCompleted(executionResult);, +++ b/server/src/test/java/org/elasticsearch/action/bulk/TransportShardBulkActionTests.java, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +, +        randomlySetIgnoredPrimaryResponse(items[0]);, +, +        randomlySetIgnoredPrimaryResponse(items[0]);, +, +        randomlySetIgnoredPrimaryResponse(items[0]);, +, +        randomlySetIgnoredPrimaryResponse(items[0]);, +, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +        randomlySetIgnoredPrimaryResponse(primaryRequest);, +    private void randomlySetIgnoredPrimaryResponse(BulkItemRequest primaryRequest) {, +        if (randomBoolean()) {, +            // add a response to the request and thereby check that it is ignored for the primary., +            primaryRequest.setPrimaryResponse(new BulkItemResponse(0, DocWriteRequest.OpType.INDEX, new IndexResponse(null, "_doc",, +                "ignore-primary-response-on-primary", 42, 42, 42, false)));, +        }, +    }, +, +++ b/server/src/test/java/org/elasticsearch/discovery/ClusterDisruptionIT.java, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.index.VersionType;, +    private enum ConflictMode {, +        none,, +        external,, +        create;, +, +, +        static ConflictMode randomMode() {, +            ConflictMode[] values = values();, +            return values[randomInt(values.length-1)];, +        }, +    }, +, +        final ConflictMode conflictMode = ConflictMode.randomMode();, +, +        logger.info("starting indexers using conflict mode " + conflictMode);, +                                IndexRequestBuilder indexRequestBuilder = client.prepareIndex("test", "type", id), +                                    .setTimeout(timeout);, +, +                                if (conflictMode == ConflictMode.external) {, +                                    indexRequestBuilder.setVersion(randomIntBetween(1,10)).setVersionType(VersionType.EXTERNAL);, +                                } else if (conflictMode == ConflictMode.create) {, +                                    indexRequestBuilder.setCreate(true);, +                                }, +, +                                IndexResponse response = indexRequestBuilder.get(timeout);]