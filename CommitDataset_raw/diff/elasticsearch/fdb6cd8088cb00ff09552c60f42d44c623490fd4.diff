[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +    private static final DeprecationLogger DEPRECATION_LOGGER =, +        new DeprecationLogger(Loggers.getLogger(IndexNameExpressionResolver.class));, +            boolean plusSeen = false;, +                    plusSeen = true;, +            if (plusSeen) {, +              DEPRECATION_LOGGER.deprecated("support for '+' as part of index expressions is deprecated");, +            }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +    private static final DeprecationLogger DEPRECATION_LOGGER =, +        new DeprecationLogger(Loggers.getLogger(IndexNameExpressionResolver.class));, +            boolean plusSeen = false;, +                    plusSeen = true;, +            if (plusSeen) {, +              DEPRECATION_LOGGER.deprecated("support for '+' as part of index expressions is deprecated");, +            }, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java, +        assertThat(newHashSet(indexNameExpressionResolver.concreteIndexNames(context, "testXXX", "testXXY", "testYYY", "-testYYY")),, +                                "testXXX", "testXXY", "testXYY", "-testXXY")),, +        String[] indicesOrAliases = new String[]{"-index1", "index1"};, +        String[] indicesOrAliases = new String[]{"index*", "-index1", "index1"};, +, +    public void testConcreteIndicesForDeprecatedPattern() {, +        MetaData.Builder mdBuilder = MetaData.builder(), +            .put(indexBuilder("testXXX").state(State.OPEN)), +            .put(indexBuilder("testXXY").state(State.OPEN)), +            .put(indexBuilder("testYYY").state(State.OPEN));, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();, +, +        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state,, +            IndicesOptions.fromOptions(true, true, true, true));, +        assertThat(newHashSet(indexNameExpressionResolver.concreteIndexNames(context, "+testX*")),, +            equalTo(newHashSet("testXXX", "testXXY")));, +        assertThat(newHashSet(indexNameExpressionResolver.concreteIndexNames(context, "+testXXX", "+testXXY", "+testYYY", "-testYYY")),, +            equalTo(newHashSet("testXXX", "testXXY", "testYYY")));, +        assertThat(newHashSet(indexNameExpressionResolver.concreteIndexNames(context, "+testXX*", "+testY*")),, +            equalTo(newHashSet("testXXX", "testXXY", "testYYY")));, +        assertWarnings("support for '+' as part of index expressions is deprecated");, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +    private static final DeprecationLogger DEPRECATION_LOGGER =, +        new DeprecationLogger(Loggers.getLogger(IndexNameExpressionResolver.class));, +            boolean plusSeen = false;, +                    plusSeen = true;, +            if (plusSeen) {, +              DEPRECATION_LOGGER.deprecated("support for '+' as part of index expressions is deprecated");, +            }, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java, +        assertThat(newHashSet(indexNameExpressionResolver.concreteIndexNames(context, "testXXX", "testXXY", "testYYY", "-testYYY")),, +                                "testXXX", "testXXY", "testXYY", "-testXXY")),, +        String[] indicesOrAliases = new String[]{"-index1", "index1"};, +        String[] indicesOrAliases = new String[]{"index*", "-index1", "index1"};, +, +    public void testConcreteIndicesForDeprecatedPattern() {, +        MetaData.Builder mdBuilder = MetaData.builder(), +            .put(indexBuilder("testXXX").state(State.OPEN)), +            .put(indexBuilder("testXXY").state(State.OPEN)), +            .put(indexBuilder("testYYY").state(State.OPEN));, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();, +, +        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state,, +            IndicesOptions.fromOptions(true, true, true, true));, +        assertThat(newHashSet(indexNameExpressionResolver.concreteIndexNames(context, "+testX*")),, +            equalTo(newHashSet("testXXX", "testXXY")));, +        assertThat(newHashSet(indexNameExpressionResolver.concreteIndexNames(context, "+testXXX", "+testXXY", "+testYYY", "-testYYY")),, +            equalTo(newHashSet("testXXX", "testXXY", "testYYY")));, +        assertThat(newHashSet(indexNameExpressionResolver.concreteIndexNames(context, "+testXX*", "+testY*")),, +            equalTo(newHashSet("testXXX", "testXXY", "testYYY")));, +        assertWarnings("support for '+' as part of index expressions is deprecated");, +    }, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/WildcardExpressionResolverTests.java, +        assertThat(newHashSet(resolver.resolve(context, Arrays.asList("testXXX", "testYYY"))), equalTo(newHashSet("testXXX", "testYYY")));, +        assertThat(newHashSet(resolver.resolve(context, Arrays.asList("testXXX", "testY*"))), equalTo(newHashSet("testXXX", "testYYY")));, +        assertThat(newHashSet(resolver.resolve(context, Arrays.asList("test*", "-testYYY"))), equalTo(newHashSet("testXXX", "testXYY")));, +        assertThat(newHashSet(resolver.resolve(context, Arrays.asList("testX*", "testYYY"))), equalTo(newHashSet("testXXX", "testXYY", "testYYY")));, +        assertThat(newHashSet(resolver.resolve(context, Arrays.asList("testYYY", "testX*"))), equalTo(newHashSet("testXXX", "testXYY", "testYYY")));, +    public void testForDeprecatedPlusPattern() {, +        MetaData.Builder mdBuilder = MetaData.builder(), +            .put(indexBuilder("testXXX").state(IndexMetaData.State.OPEN)), +            .put(indexBuilder("testXYY").state(IndexMetaData.State.OPEN)), +            .put(indexBuilder("testYYY").state(IndexMetaData.State.OPEN));, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();, +        IndexNameExpressionResolver.WildcardExpressionResolver resolver = new IndexNameExpressionResolver.WildcardExpressionResolver();, +, +        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.fromOptions(true, true, true, true));, +        assertThat(newHashSet(resolver.resolve(context, Arrays.asList("+testX*", "-testYYY"))), equalTo(newHashSet("testXXX", "testXYY")));, +        assertThat(newHashSet(resolver.resolve(context, Arrays.asList("+testYYY", "+testXY*"))), equalTo(newHashSet("testYYY", "testXYY")));, +        assertThat(newHashSet(resolver.resolve(context, Arrays.asList("testYYY", "+testXX*"))), equalTo(newHashSet("testXXX", "testYYY")));, +        assertWarnings("support for '+' as part of index expressions is deprecated");, +    }, +]