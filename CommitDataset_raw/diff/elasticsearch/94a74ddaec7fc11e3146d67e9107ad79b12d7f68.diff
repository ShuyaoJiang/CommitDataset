[+++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +                    } catch (TruncatedTranslogException|EOFException e) {, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +                    } catch (TruncatedTranslogException|EOFException e) {, +++ b/src/main/java/org/elasticsearch/index/translog/ChecksummedTranslogStream.java, +        } catch (EOFException e) {, +            throw new TruncatedTranslogException("reached premature end of file, translog is truncated", e);, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +                    } catch (TruncatedTranslogException|EOFException e) {, +++ b/src/main/java/org/elasticsearch/index/translog/ChecksummedTranslogStream.java, +        } catch (EOFException e) {, +            throw new TruncatedTranslogException("reached premature end of file, translog is truncated", e);, +++ b/src/test/java/org/elasticsearch/index/translog/AbstractSimpleTranslogTests.java, +import java.io.EOFException;, +    @Test, +    public void testTruncatedTranslogs() throws Exception {, +        List<Translog.Location> locations = newArrayList();, +, +        int translogOperations = randomIntBetween(10, 100);, +        for (int op = 0; op < translogOperations; op++) {, +            String ascii = randomAsciiOfLengthBetween(1, 50);, +            locations.add(translog.add(new Translog.Create("test", "" + op, ascii.getBytes("UTF-8"))));, +        }, +        translog.sync();, +, +        truncateTranslogs(translogFileDirectory());, +, +        AtomicInteger truncations = new AtomicInteger(0);, +        for (Translog.Location location : locations) {, +            try {, +                translog.read(location);, +            } catch (ElasticsearchException e) {, +                if (e.getCause() instanceof EOFException) {, +                    truncations.incrementAndGet();, +                } else {, +                    throw e;, +                }, +            }, +        }, +        assertThat("at least one truncation was caused and caught", truncations.get(), greaterThanOrEqualTo(1));, +    }, +, +    /**, +     * Randomly truncate some bytes in the translog files, +     */, +    private void truncateTranslogs(Path directory) throws Exception {, +        Path[] files = FileSystemUtils.files(directory, "translog-*");, +        for (Path file : files) {, +            try (FileChannel f = FileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE)) {, +                long prevSize = f.size();, +                long newSize = prevSize - randomIntBetween(1, (int) prevSize / 2);, +                logger.info("--> truncating {}, prev: {}, now: {}", file, prevSize, newSize);, +                f.truncate(newSize);, +            }, +        }, +    }, +, +, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +                    } catch (TruncatedTranslogException|EOFException e) {, +++ b/src/main/java/org/elasticsearch/index/translog/ChecksummedTranslogStream.java, +        } catch (EOFException e) {, +            throw new TruncatedTranslogException("reached premature end of file, translog is truncated", e);, +++ b/src/test/java/org/elasticsearch/index/translog/AbstractSimpleTranslogTests.java, +import java.io.EOFException;, +    @Test, +    public void testTruncatedTranslogs() throws Exception {, +        List<Translog.Location> locations = newArrayList();, +, +        int translogOperations = randomIntBetween(10, 100);, +        for (int op = 0; op < translogOperations; op++) {, +            String ascii = randomAsciiOfLengthBetween(1, 50);, +            locations.add(translog.add(new Translog.Create("test", "" + op, ascii.getBytes("UTF-8"))));, +        }, +        translog.sync();, +, +        truncateTranslogs(translogFileDirectory());, +, +        AtomicInteger truncations = new AtomicInteger(0);, +        for (Translog.Location location : locations) {, +            try {, +                translog.read(location);, +            } catch (ElasticsearchException e) {, +                if (e.getCause() instanceof EOFException) {, +                    truncations.incrementAndGet();, +                } else {, +                    throw e;, +                }, +            }, +        }, +        assertThat("at least one truncation was caused and caught", truncations.get(), greaterThanOrEqualTo(1));, +    }, +, +    /**, +     * Randomly truncate some bytes in the translog files, +     */, +    private void truncateTranslogs(Path directory) throws Exception {, +        Path[] files = FileSystemUtils.files(directory, "translog-*");, +        for (Path file : files) {, +            try (FileChannel f = FileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE)) {]