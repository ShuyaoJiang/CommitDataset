[+++ b/README.asciidoc, +- If you don't work on the UI side of x-plugins, you can force gradle to skip building kibana by adding, +  `xpack.kibana.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false`, +++ b/README.asciidoc, +- If you don't work on the UI side of x-plugins, you can force gradle to skip building kibana by adding, +  `xpack.kibana.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false`, +++ b/build.gradle, +++ b/README.asciidoc, +- If you don't work on the UI side of x-plugins, you can force gradle to skip building kibana by adding, +  `xpack.kibana.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false`, +++ b/build.gradle, +++ b/elasticsearch/build.gradle, +++ b/README.asciidoc, +- If you don't work on the UI side of x-plugins, you can force gradle to skip building kibana by adding, +  `xpack.kibana.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false`, +++ b/build.gradle, +++ b/elasticsearch/build.gradle, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/License.java, +public class License implements ToXContent {, +++ b/README.asciidoc, +- If you don't work on the UI side of x-plugins, you can force gradle to skip building kibana by adding, +  `xpack.kibana.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false`, +++ b/build.gradle, +++ b/elasticsearch/build.gradle, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/License.java, +public class License implements ToXContent {, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/LicensesMetaData.java, +class LicensesMetaData extends AbstractDiffable<MetaData.Custom> implements MetaData.Custom,, +    public static final LicensesMetaData PROTO = new LicensesMetaData(null);, +, +    public String type() {, +    @Override, +    public LicensesMetaData fromXContent(XContentParser parser) throws IOException {, +    @Override, +    public LicensesMetaData readFrom(StreamInput streamInput) throws IOException {, +        License license = LICENSE_TOMBSTONE;, +        return new LicensesMetaData(license);, +++ b/README.asciidoc, +- If you don't work on the UI side of x-plugins, you can force gradle to skip building kibana by adding, +  `xpack.kibana.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false`, +++ b/build.gradle, +++ b/elasticsearch/build.gradle, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/License.java, +public class License implements ToXContent {, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/LicensesMetaData.java, +class LicensesMetaData extends AbstractDiffable<MetaData.Custom> implements MetaData.Custom,, +    public static final LicensesMetaData PROTO = new LicensesMetaData(null);, +, +    public String type() {, +    @Override, +    public LicensesMetaData fromXContent(XContentParser parser) throws IOException {, +    @Override, +    public LicensesMetaData readFrom(StreamInput streamInput) throws IOException {, +        License license = LICENSE_TOMBSTONE;, +        return new LicensesMetaData(license);, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/Licensing.java, +    static {, +        // we have to make sure we don't override the prototype, if we already, +        // registered. This causes class cast exceptions while casting license, +        // meta data on tribe node, as the registration happens for every tribe, +        // client nodes and the tribe node itself, +        if (MetaData.lookupPrototype(LicensesMetaData.TYPE) == null) {, +            MetaData.registerPrototype(LicensesMetaData.TYPE, LicensesMetaData.PROTO);, +        }, +++ b/README.asciidoc, +- If you don't work on the UI side of x-plugins, you can force gradle to skip building kibana by adding, +  `xpack.kibana.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false`, +++ b/build.gradle, +++ b/elasticsearch/build.gradle, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/License.java, +public class License implements ToXContent {, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/LicensesMetaData.java, +class LicensesMetaData extends AbstractDiffable<MetaData.Custom> implements MetaData.Custom,, +    public static final LicensesMetaData PROTO = new LicensesMetaData(null);, +, +    public String type() {, +    @Override, +    public LicensesMetaData fromXContent(XContentParser parser) throws IOException {, +    @Override, +    public LicensesMetaData readFrom(StreamInput streamInput) throws IOException {, +        License license = LICENSE_TOMBSTONE;, +        return new LicensesMetaData(license);, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/Licensing.java, +    static {, +        // we have to make sure we don't override the prototype, if we already, +        // registered. This causes class cast exceptions while casting license, +        // meta data on tribe node, as the registration happens for every tribe, +        // client nodes and the tribe node itself, +        if (MetaData.lookupPrototype(LicensesMetaData.TYPE) == null) {, +            MetaData.registerPrototype(LicensesMetaData.TYPE, LicensesMetaData.PROTO);, +        }, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/XPackInfoResponse.java, +    public static class BuildInfo implements ToXContent, Writeable {, +    public static class FeatureSetsInfo implements ToXContent, Writeable {, +++ b/README.asciidoc, +- If you don't work on the UI side of x-plugins, you can force gradle to skip building kibana by adding, +  `xpack.kibana.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false`, +++ b/build.gradle, +++ b/elasticsearch/build.gradle, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/License.java]