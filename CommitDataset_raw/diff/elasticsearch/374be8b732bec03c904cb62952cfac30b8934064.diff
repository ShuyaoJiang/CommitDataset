[+++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/input/http/ExecutableHttpInput.java, +                    // special handling if a list is returned, i.e. JSON like [ {},{} ], +                    XContentParser.Token token = parser.nextToken();, +                    if (token == XContentParser.Token.START_ARRAY) {, +                        payloadMap.put("data", parser.listOrderedMap());, +                    } else {, +                }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/input/http/ExecutableHttpInput.java, +                    // special handling if a list is returned, i.e. JSON like [ {},{} ], +                    XContentParser.Token token = parser.nextToken();, +                    if (token == XContentParser.Token.START_ARRAY) {, +                        payloadMap.put("data", parser.listOrderedMap());, +                    } else {, +                }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/watcher/input/http/HttpInputTests.java, +import java.util.Collections;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.instanceOf;, +    @SuppressWarnings("unchecked"), +    public void testThatArrayJsonResponseIsHandled() throws Exception {, +        Map<String, String[]> headers = Collections.singletonMap("Content-Type", new String[]{"application/json"});, +        HttpResponse response = new HttpResponse(200, "[ { \"foo\":  \"first\" }, {  \"foo\":  \"second\"}]", headers);, +        when(httpClient.execute(any(HttpRequest.class))).thenReturn(response);, +, +        HttpRequestTemplate.Builder request = HttpRequestTemplate.builder("localhost", 8080);, +        HttpInput httpInput = InputBuilders.httpInput(request.build()).build();, +        ExecutableHttpInput input = new ExecutableHttpInput(httpInput, logger, httpClient, templateEngine);, +, +        WatchExecutionContext ctx = createWatchExecutionContext();, +        HttpInput.Result result = input.execute(ctx, new Payload.Simple());, +        assertThat(result.statusCode, is(200));, +        assertThat(result.payload().data(), not(hasKey("_value")));, +        assertThat(result.payload().data(), hasKey("data"));, +        assertThat(result.payload().data().get("data"), instanceOf(List.class));, +        List<Map<String, String>> data = (List<Map<String, String>>) result.payload().data().get("data");, +        assertThat(data, hasSize(2));, +        assertThat(data.get(0).get("foo"), is("first"));, +        assertThat(data.get(1).get("foo"), is("second"));, +    }, +, +]