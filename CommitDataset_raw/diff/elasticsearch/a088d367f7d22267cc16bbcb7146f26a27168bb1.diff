[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.action.support.WriteResponse;, +import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;, +import org.elasticsearch.action.support.replication.ReplicationResponse;, +import org.elasticsearch.index.IndexSettings;, +public abstract class DocWriteResponse extends ReplicationResponse implements WriteResponse, StatusToXContent {, +    private boolean forcedRefresh;, +    /**, +     * Did this request force a refresh? Requests that set {@link WriteRequest#setRefreshPolicy(RefreshPolicy)} to, +     * {@link RefreshPolicy#IMMEDIATE} will always return true for this. Requests that set it to {@link RefreshPolicy#WAIT_UNTIL} will, +     * only return true here if they run out of refresh listener slots (see {@link IndexSettings#MAX_REFRESH_LISTENERS_PER_SHARD})., +     */, +    public boolean forcedRefresh() {, +        return forcedRefresh;, +    }, +, +    @Override, +    public void setForcedRefresh(boolean forcedRefresh) {, +        this.forcedRefresh = forcedRefresh;, +    }, +, +        forcedRefresh = in.readBoolean();, +        out.writeBoolean(forcedRefresh);, +            .field(Fields._VERSION, version), +            .field("forced_refresh", forcedRefresh);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.action.support.WriteResponse;, +import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;, +import org.elasticsearch.action.support.replication.ReplicationResponse;, +import org.elasticsearch.index.IndexSettings;, +public abstract class DocWriteResponse extends ReplicationResponse implements WriteResponse, StatusToXContent {, +    private boolean forcedRefresh;, +    /**, +     * Did this request force a refresh? Requests that set {@link WriteRequest#setRefreshPolicy(RefreshPolicy)} to, +     * {@link RefreshPolicy#IMMEDIATE} will always return true for this. Requests that set it to {@link RefreshPolicy#WAIT_UNTIL} will, +     * only return true here if they run out of refresh listener slots (see {@link IndexSettings#MAX_REFRESH_LISTENERS_PER_SHARD})., +     */, +    public boolean forcedRefresh() {, +        return forcedRefresh;, +    }, +, +    @Override, +    public void setForcedRefresh(boolean forcedRefresh) {, +        this.forcedRefresh = forcedRefresh;, +    }, +, +        forcedRefresh = in.readBoolean();, +        out.writeBoolean(forcedRefresh);, +            .field(Fields._VERSION, version), +            .field("forced_refresh", forcedRefresh);, +++ /dev/null]