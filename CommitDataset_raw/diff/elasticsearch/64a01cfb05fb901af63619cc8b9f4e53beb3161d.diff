[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +        int allocatedProcessors;, +            allocatedProcessors += nodeInfo.getOs().getAllocatedProcessors();, +, +        public int getAllocatedProcessors() {, +            return allocatedProcessors;, +        }, +, +            allocatedProcessors = in.readVInt();, +            out.writeVInt(allocatedProcessors);, +            static final XContentBuilderString ALLOCATED_PROCESSORS = new XContentBuilderString("allocated_processors");, +            builder.field(Fields.ALLOCATED_PROCESSORS, allocatedProcessors);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +        int allocatedProcessors;, +            allocatedProcessors += nodeInfo.getOs().getAllocatedProcessors();, +, +        public int getAllocatedProcessors() {, +            return allocatedProcessors;, +        }, +, +            allocatedProcessors = in.readVInt();, +            out.writeVInt(allocatedProcessors);, +            static final XContentBuilderString ALLOCATED_PROCESSORS = new XContentBuilderString("allocated_processors");, +            builder.field(Fields.ALLOCATED_PROCESSORS, allocatedProcessors);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +        int allocatedProcessors;, +            allocatedProcessors += nodeInfo.getOs().getAllocatedProcessors();, +, +        public int getAllocatedProcessors() {, +            return allocatedProcessors;, +        }, +, +            allocatedProcessors = in.readVInt();, +            out.writeVInt(allocatedProcessors);, +            static final XContentBuilderString ALLOCATED_PROCESSORS = new XContentBuilderString("allocated_processors");, +            builder.field(Fields.ALLOCATED_PROCESSORS, allocatedProcessors);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +        int allocatedProcessors;, +            allocatedProcessors += nodeInfo.getOs().getAllocatedProcessors();, +, +        public int getAllocatedProcessors() {, +            return allocatedProcessors;, +        }, +, +            allocatedProcessors = in.readVInt();, +            out.writeVInt(allocatedProcessors);, +            static final XContentBuilderString ALLOCATED_PROCESSORS = new XContentBuilderString("allocated_processors");, +            builder.field(Fields.ALLOCATED_PROCESSORS, allocatedProcessors);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +        int allocatedProcessors;, +            allocatedProcessors += nodeInfo.getOs().getAllocatedProcessors();, +, +        public int getAllocatedProcessors() {, +            return allocatedProcessors;, +        }, +, +            allocatedProcessors = in.readVInt();, +            out.writeVInt(allocatedProcessors);, +            static final XContentBuilderString ALLOCATED_PROCESSORS = new XContentBuilderString("allocated_processors");, +            builder.field(Fields.ALLOCATED_PROCESSORS, allocatedProcessors);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        this(phaseName, msg, null, shardFailures);, +        super(msg, deduplicateCause(cause, shardFailures));, +        out.writeVInt(shardFailures.length);, +, +    private static final Throwable deduplicateCause(Throwable cause, ShardSearchFailure[] shardFailures) {, +        if (shardFailures == null) {, +            throw new IllegalArgumentException("shardSearchFailures must not be null");, +        }, +        // if the cause of this exception is also the cause of one of the shard failures we don't add it, +        // to prevent duplication in stack traces rendered to the REST layer, +        if (cause != null) {, +            for (ShardSearchFailure failure : shardFailures) {, +                if (failure.getCause() == cause) {, +                    return null;, +                }]