[+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomReflectionObjectHandler.java, +        CollectionUtils.ensureNoSelfReferences(object, "CustomReflectionObjectHandler stringify");, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomReflectionObjectHandler.java, +        CollectionUtils.ensureNoSelfReferences(object, "CustomReflectionObjectHandler stringify");, +++ b/server/src/main/java/org/elasticsearch/common/util/CollectionUtils.java, +import java.util.Locale;, +import org.elasticsearch.common.Strings;, +    /**, +     * Deeply inspects a Map, Iterable, or Object array looking for references back to itself., +     * @throws IllegalArgumentException if a self-reference is found, +     * @param value The object to evaluate looking for self references, +     * @param messageHint A string to be included in the exception message if the call fails, to provide, +     *                    more context to the handler of the exception, +     */, +    public static void ensureNoSelfReferences(Object value, String messageHint) {, +            ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>()), messageHint);, +    private static void ensureNoSelfReferences(final Iterable<?> value, Object originalReference, final Set<Object> ancestors,, +                                               String messageHint) {, +                String suffix = Strings.isNullOrEmpty(messageHint) ? "" : String.format(Locale.ROOT, " (%s)", messageHint);, +                throw new IllegalArgumentException("Iterable object is self-referencing itself" + suffix);, +                ensureNoSelfReferences(convert(o), o, ancestors, messageHint);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomReflectionObjectHandler.java, +        CollectionUtils.ensureNoSelfReferences(object, "CustomReflectionObjectHandler stringify");, +++ b/server/src/main/java/org/elasticsearch/common/util/CollectionUtils.java, +import java.util.Locale;, +import org.elasticsearch.common.Strings;, +    /**, +     * Deeply inspects a Map, Iterable, or Object array looking for references back to itself., +     * @throws IllegalArgumentException if a self-reference is found, +     * @param value The object to evaluate looking for self references, +     * @param messageHint A string to be included in the exception message if the call fails, to provide, +     *                    more context to the handler of the exception, +     */, +    public static void ensureNoSelfReferences(Object value, String messageHint) {, +            ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>()), messageHint);, +    private static void ensureNoSelfReferences(final Iterable<?> value, Object originalReference, final Set<Object> ancestors,, +                                               String messageHint) {, +                String suffix = Strings.isNullOrEmpty(messageHint) ? "" : String.format(Locale.ROOT, " (%s)", messageHint);, +                throw new IllegalArgumentException("Iterable object is self-referencing itself" + suffix);, +                ensureNoSelfReferences(convert(o), o, ancestors, messageHint);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/InternalScriptedMetric.java, +import org.elasticsearch.common.util.CollectionUtils;, +, +            Object scriptResult = script.run();, +            CollectionUtils.ensureNoSelfReferences(scriptResult, "reduce script");, +, +            aggregation = Collections.singletonList(scriptResult);, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomReflectionObjectHandler.java, +        CollectionUtils.ensureNoSelfReferences(object, "CustomReflectionObjectHandler stringify");, +++ b/server/src/main/java/org/elasticsearch/common/util/CollectionUtils.java, +import java.util.Locale;, +import org.elasticsearch.common.Strings;, +    /**, +     * Deeply inspects a Map, Iterable, or Object array looking for references back to itself., +     * @throws IllegalArgumentException if a self-reference is found, +     * @param value The object to evaluate looking for self references, +     * @param messageHint A string to be included in the exception message if the call fails, to provide, +     *                    more context to the handler of the exception, +     */, +    public static void ensureNoSelfReferences(Object value, String messageHint) {, +            ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>()), messageHint);, +    private static void ensureNoSelfReferences(final Iterable<?> value, Object originalReference, final Set<Object> ancestors,, +                                               String messageHint) {, +                String suffix = Strings.isNullOrEmpty(messageHint) ? "" : String.format(Locale.ROOT, " (%s)", messageHint);, +                throw new IllegalArgumentException("Iterable object is self-referencing itself" + suffix);, +                ensureNoSelfReferences(convert(o), o, ancestors, messageHint);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/InternalScriptedMetric.java, +import org.elasticsearch.common.util.CollectionUtils;, +, +            Object scriptResult = script.run();, +            CollectionUtils.ensureNoSelfReferences(scriptResult, "reduce script");, +, +            aggregation = Collections.singletonList(scriptResult);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregator.java, +                CollectionUtils.ensureNoSelfReferences(params, "Scripted metric aggs map script");, +            CollectionUtils.ensureNoSelfReferences(aggregation, "Scripted metric aggs combine script");, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomReflectionObjectHandler.java, +        CollectionUtils.ensureNoSelfReferences(object, "CustomReflectionObjectHandler stringify");, +++ b/server/src/main/java/org/elasticsearch/common/util/CollectionUtils.java, +import java.util.Locale;, +import org.elasticsearch.common.Strings;, +    /**, +     * Deeply inspects a Map, Iterable, or Object array looking for references back to itself., +     * @throws IllegalArgumentException if a self-reference is found, +     * @param value The object to evaluate looking for self references, +     * @param messageHint A string to be included in the exception message if the call fails, to provide, +     *                    more context to the handler of the exception, +     */, +    public static void ensureNoSelfReferences(Object value, String messageHint) {, +            ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>()), messageHint);, +    private static void ensureNoSelfReferences(final Iterable<?> value, Object originalReference, final Set<Object> ancestors,, +                                               String messageHint) {, +                String suffix = Strings.isNullOrEmpty(messageHint) ? "" : String.format(Locale.ROOT, " (%s)", messageHint);, +                throw new IllegalArgumentException("Iterable object is self-referencing itself" + suffix);, +                ensureNoSelfReferences(convert(o), o, ancestors, messageHint);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/InternalScriptedMetric.java, +import org.elasticsearch.common.util.CollectionUtils;, +, +            Object scriptResult = script.run();, +            CollectionUtils.ensureNoSelfReferences(scriptResult, "reduce script");]