[+++ b/src/main/java/org/elasticsearch/action/GenericAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +++ b/src/main/java/org/elasticsearch/action/GenericAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.transport.TransportRequestOptions;, +public class TransportActionNodeProxy<Request extends ActionRequest, Response extends ActionResponse> extends AbstractComponent {, +    private final TransportRequestOptions transportOptions;, +, +    public TransportActionNodeProxy(Settings settings, GenericAction<Request, Response> action, TransportService transportService) {, +        super(settings);, +        this.transportOptions = action.transportOptions(settings);, +        transportService.sendRequest(node, action.name(), request, transportOptions, new BaseTransportResponseHandler<Response>() {, +++ b/src/main/java/org/elasticsearch/action/GenericAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.transport.TransportRequestOptions;, +public class TransportActionNodeProxy<Request extends ActionRequest, Response extends ActionResponse> extends AbstractComponent {, +    private final TransportRequestOptions transportOptions;, +, +    public TransportActionNodeProxy(Settings settings, GenericAction<Request, Response> action, TransportService transportService) {, +        super(settings);, +        this.transportOptions = action.transportOptions(settings);, +        transportService.sendRequest(node, action.name(), request, transportOptions, new BaseTransportResponseHandler<Response>() {, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +        return TransportRequestOptions.options(), +                .withType(TransportRequestOptions.Type.fromString(settings.get("action.bulk.transport.type", TransportRequestOptions.Type.LOW.toString()))), +                .withCompress(settings.getAsBoolean("action.bulk.compress", true), +                );, +++ b/src/main/java/org/elasticsearch/action/GenericAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.transport.TransportRequestOptions;, +public class TransportActionNodeProxy<Request extends ActionRequest, Response extends ActionResponse> extends AbstractComponent {, +    private final TransportRequestOptions transportOptions;, +, +    public TransportActionNodeProxy(Settings settings, GenericAction<Request, Response> action, TransportService transportService) {, +        super(settings);, +        this.transportOptions = action.transportOptions(settings);, +        transportService.sendRequest(node, action.name(), request, transportOptions, new BaseTransportResponseHandler<Response>() {, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +        return TransportRequestOptions.options(), +                .withType(TransportRequestOptions.Type.fromString(settings.get("action.bulk.transport.type", TransportRequestOptions.Type.LOW.toString()))), +                .withCompress(settings.getAsBoolean("action.bulk.compress", true), +                );, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +        return BulkAction.INSTANCE.transportOptions(settings);, +++ b/src/main/java/org/elasticsearch/action/GenericAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.transport.TransportRequestOptions;, +public class TransportActionNodeProxy<Request extends ActionRequest, Response extends ActionResponse> extends AbstractComponent {, +    private final TransportRequestOptions transportOptions;, +, +    public TransportActionNodeProxy(Settings settings, GenericAction<Request, Response> action, TransportService transportService) {, +        super(settings);, +        this.transportOptions = action.transportOptions(settings);, +        transportService.sendRequest(node, action.name(), request, transportOptions, new BaseTransportResponseHandler<Response>() {, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +        return TransportRequestOptions.options(), +                .withType(TransportRequestOptions.Type.fromString(settings.get("action.bulk.transport.type", TransportRequestOptions.Type.LOW.toString()))), +                .withCompress(settings.getAsBoolean("action.bulk.compress", true), +                );, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +        return BulkAction.INSTANCE.transportOptions(settings);, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +    protected final TransportRequestOptions transportOptions;, +, +        this.transportOptions = transportOptions();, +, +                    transportService.sendRequest(node, transportAction, request, transportOptions, new BaseTransportResponseHandler<Response>() {, +                transportService.sendRequest(node, transportReplicaAction, shardRequest, transportOptions, new VoidTransportResponseHandler(ThreadPool.Names.SAME) {, +++ b/src/main/java/org/elasticsearch/action/GenericAction.java, +import org.elasticsearch.common.settings.Settings;, +    public TransportRequestOptions transportOptions(Settings settings) {, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.transport.TransportRequestOptions;, +public class TransportActionNodeProxy<Request extends ActionRequest, Response extends ActionResponse> extends AbstractComponent {, +    private final TransportRequestOptions transportOptions;]