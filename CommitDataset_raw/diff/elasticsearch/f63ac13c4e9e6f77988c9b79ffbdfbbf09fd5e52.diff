[+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +    private static BigInteger LONG_MAX_VALUE_AS_BIGINTEGER = BigInteger.valueOf(Long.MAX_VALUE);, +    private static BigInteger LONG_MIN_VALUE_AS_BIGINTEGER = BigInteger.valueOf(Long.MIN_VALUE);, +    // weak bounds on the BigDecimal representation to allow for coercion, +    private static BigDecimal BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE = BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);, +    private static BigDecimal BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(BigDecimal.ONE);, +, +            final BigDecimal bigDecimalValue = new BigDecimal(stringValue);, +            if (bigDecimalValue.compareTo(BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE) >= 0 ||, +                bigDecimalValue.compareTo(BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE) <= 0) {, +                throw new IllegalArgumentException("Value [" + stringValue + "] is out of range for a long");, +            }, +        if (bigIntegerValue.compareTo(LONG_MAX_VALUE_AS_BIGINTEGER) > 0 || bigIntegerValue.compareTo(LONG_MIN_VALUE_AS_BIGINTEGER) < 0) {, +        assert bigIntegerValue.longValueExact() <= Long.MAX_VALUE; // asserting that no ArithmeticException is thrown, +++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +    private static BigInteger LONG_MAX_VALUE_AS_BIGINTEGER = BigInteger.valueOf(Long.MAX_VALUE);, +    private static BigInteger LONG_MIN_VALUE_AS_BIGINTEGER = BigInteger.valueOf(Long.MIN_VALUE);, +    // weak bounds on the BigDecimal representation to allow for coercion, +    private static BigDecimal BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE = BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);, +    private static BigDecimal BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(BigDecimal.ONE);, +, +            final BigDecimal bigDecimalValue = new BigDecimal(stringValue);, +            if (bigDecimalValue.compareTo(BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE) >= 0 ||, +                bigDecimalValue.compareTo(BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE) <= 0) {, +                throw new IllegalArgumentException("Value [" + stringValue + "] is out of range for a long");, +            }, +        if (bigIntegerValue.compareTo(LONG_MAX_VALUE_AS_BIGINTEGER) > 0 || bigIntegerValue.compareTo(LONG_MIN_VALUE_AS_BIGINTEGER) < 0) {, +        assert bigIntegerValue.longValueExact() <= Long.MAX_VALUE; // asserting that no ArithmeticException is thrown, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +    // weak bounds on the BigDecimal representation to allow for coercion, +    private static BigDecimal BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE = BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);, +    private static BigDecimal BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(BigDecimal.ONE);, +, +            if (bigDecimalValue.compareTo(BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE) >= 0 ||, +                bigDecimalValue.compareTo(BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE) <= 0) {, +                throw new IllegalArgumentException("Value [" + stringValue + "] is out of range for a long");, +            }, +++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +    private static BigInteger LONG_MAX_VALUE_AS_BIGINTEGER = BigInteger.valueOf(Long.MAX_VALUE);, +    private static BigInteger LONG_MIN_VALUE_AS_BIGINTEGER = BigInteger.valueOf(Long.MIN_VALUE);, +    // weak bounds on the BigDecimal representation to allow for coercion, +    private static BigDecimal BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE = BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);, +    private static BigDecimal BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(BigDecimal.ONE);, +, +            final BigDecimal bigDecimalValue = new BigDecimal(stringValue);, +            if (bigDecimalValue.compareTo(BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE) >= 0 ||, +                bigDecimalValue.compareTo(BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE) <= 0) {, +                throw new IllegalArgumentException("Value [" + stringValue + "] is out of range for a long");, +            }, +        if (bigIntegerValue.compareTo(LONG_MAX_VALUE_AS_BIGINTEGER) > 0 || bigIntegerValue.compareTo(LONG_MIN_VALUE_AS_BIGINTEGER) < 0) {, +        assert bigIntegerValue.longValueExact() <= Long.MAX_VALUE; // asserting that no ArithmeticException is thrown, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +    // weak bounds on the BigDecimal representation to allow for coercion, +    private static BigDecimal BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE = BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);, +    private static BigDecimal BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(BigDecimal.ONE);, +, +            if (bigDecimalValue.compareTo(BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE) >= 0 ||, +                bigDecimalValue.compareTo(BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE) <= 0) {, +                throw new IllegalArgumentException("Value [" + stringValue + "] is out of range for a long");, +            }, +++ b/server/src/test/java/org/elasticsearch/common/NumbersTests.java, +import com.carrotsearch.randomizedtesting.annotations.Timeout;, +    @Timeout(millis = 10000), +        assertEquals(9223372036854775807L, Numbers.toLong("9223372036854775807.00", true));, +        assertEquals(-9223372036854775808L, Numbers.toLong("-9223372036854775808.00", true));, +        assertEquals(9223372036854775807L, Numbers.toLong("9223372036854775807.99", true));, +        assertEquals(-9223372036854775808L, Numbers.toLong("-9223372036854775808.99", true));, +        assertEquals("Value [9223372036854775808] is out of range for a long", expectThrows(IllegalArgumentException.class,, +            () -> Numbers.toLong("9223372036854775808", false)).getMessage());, +        assertEquals("Value [-9223372036854775809] is out of range for a long", expectThrows(IllegalArgumentException.class,, +            () -> Numbers.toLong("-9223372036854775809", false)).getMessage());, +        assertEquals("Value [1e99999999] is out of range for a long", expectThrows(IllegalArgumentException.class,, +            () -> Numbers.toLong("1e99999999", false)).getMessage());, +        assertEquals("Value [-1e99999999] is out of range for a long", expectThrows(IllegalArgumentException.class,, +            () -> Numbers.toLong("-1e99999999", false)).getMessage());, +++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +    private static BigInteger LONG_MAX_VALUE_AS_BIGINTEGER = BigInteger.valueOf(Long.MAX_VALUE);, +    private static BigInteger LONG_MIN_VALUE_AS_BIGINTEGER = BigInteger.valueOf(Long.MIN_VALUE);, +    // weak bounds on the BigDecimal representation to allow for coercion, +    private static BigDecimal BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE = BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);, +    private static BigDecimal BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(BigDecimal.ONE);, +, +            final BigDecimal bigDecimalValue = new BigDecimal(stringValue);, +            if (bigDecimalValue.compareTo(BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE) >= 0 ||, +                bigDecimalValue.compareTo(BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE) <= 0) {, +                throw new IllegalArgumentException("Value [" + stringValue + "] is out of range for a long");, +            }, +        if (bigIntegerValue.compareTo(LONG_MAX_VALUE_AS_BIGINTEGER) > 0 || bigIntegerValue.compareTo(LONG_MIN_VALUE_AS_BIGINTEGER) < 0) {, +        assert bigIntegerValue.longValueExact() <= Long.MAX_VALUE; // asserting that no ArithmeticException is thrown, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +    // weak bounds on the BigDecimal representation to allow for coercion, +    private static BigDecimal BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE = BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);, +    private static BigDecimal BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE).subtract(BigDecimal.ONE);, +, +            if (bigDecimalValue.compareTo(BIGDECIMAL_GREATER_THAN_LONG_MAX_VALUE) >= 0 ||, +                bigDecimalValue.compareTo(BIGDECIMAL_LESS_THAN_LONG_MIN_VALUE) <= 0) {, +                throw new IllegalArgumentException("Value [" + stringValue + "] is out of range for a long");, +            }, +++ b/server/src/test/java/org/elasticsearch/common/NumbersTests.java, +import com.carrotsearch.randomizedtesting.annotations.Timeout;]