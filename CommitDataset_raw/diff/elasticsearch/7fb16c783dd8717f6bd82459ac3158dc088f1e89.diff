[+++ b/docs/reference/query-dsl/filters/geohash-cell-filter.asciidoc, +, +[float], +==== Caching, +, +coming[1.3.0], +, +The result of the filter is not cached by default. The, +`_cache` parameter can be set to `true` to turn caching on., +By default the filter uses the resulting geohash cells as a cache key., +This can be changed by using the `_cache_key` option., +++ b/docs/reference/query-dsl/filters/geohash-cell-filter.asciidoc, +, +[float], +==== Caching, +, +coming[1.3.0], +, +The result of the filter is not cached by default. The, +`_cache` parameter can be set to `true` to turn caching on., +By default the filter uses the resulting geohash cells as a cache key., +This can be changed by using the `_cache_key` option., +++ b/src/main/java/org/elasticsearch/index/query/GeohashCellFilter.java, +import org.elasticsearch.index.cache.filter.support.CacheKeyFilter;, +    public static final String CACHE = "_cache";, +    public static final String CACHE_KEY = "_cache_key";, +        private Boolean cache;, +        private String cacheKey;, +, +        /**, +         * Should the filter be cached or not. Defaults to <tt>false</tt>., +         */, +        public Builder cache(boolean cache) {, +            this.cache = cache;, +            return this;, +        }, +, +        public Builder cacheKey(String cacheKey) {, +            this.cacheKey = cacheKey;, +            return this;, +        }, +, +            if (cache != null) {, +                builder.field(CACHE, cache);, +            }, +            if (cacheKey != null) {, +                builder.field(CACHE_KEY, cacheKey);, +            }, +            boolean cache = false;, +            CacheKeyFilter.Key cacheKey = null;, +, +                    } else if (CACHE.equals(field)) {, +                        parser.nextToken();, +                        cache = parser.booleanValue();, +                    } else if (CACHE_KEY.equals(field)) {, +                        parser.nextToken();, +                        cacheKey = new CacheKeyFilter.Key(parser.text());, +            Filter filter;, +                filter = create(parseContext, geoMapper, geohash, GeoHashUtils.addNeighbors(geohash, new ArrayList<CharSequence>(8)));, +                filter = create(parseContext, geoMapper, geohash, null);, +, +            if (cache) {, +                filter = parseContext.cacheFilter(filter, cacheKey);, +            }, +, +            return filter;, +++ b/docs/reference/query-dsl/filters/geohash-cell-filter.asciidoc, +, +[float], +==== Caching, +, +coming[1.3.0], +, +The result of the filter is not cached by default. The, +`_cache` parameter can be set to `true` to turn caching on., +By default the filter uses the resulting geohash cells as a cache key., +This can be changed by using the `_cache_key` option., +++ b/src/main/java/org/elasticsearch/index/query/GeohashCellFilter.java, +import org.elasticsearch.index.cache.filter.support.CacheKeyFilter;, +    public static final String CACHE = "_cache";, +    public static final String CACHE_KEY = "_cache_key";, +        private Boolean cache;, +        private String cacheKey;, +, +        /**, +         * Should the filter be cached or not. Defaults to <tt>false</tt>., +         */, +        public Builder cache(boolean cache) {, +            this.cache = cache;, +            return this;, +        }, +, +        public Builder cacheKey(String cacheKey) {, +            this.cacheKey = cacheKey;, +            return this;, +        }, +, +            if (cache != null) {, +                builder.field(CACHE, cache);, +            }]