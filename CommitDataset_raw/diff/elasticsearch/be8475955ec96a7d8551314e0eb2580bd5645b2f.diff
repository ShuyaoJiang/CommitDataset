[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +            Map<String, Object> context = new HashMap<>();, +            UpdateScript.Factory factory = scriptService.compile(script, UpdateScript.CONTEXT);, +            UpdateScript updateScript = factory.newInstance(params, context);, +            updateScript.execute();, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +            Map<String, Object> context = new HashMap<>();, +            UpdateScript.Factory factory = scriptService.compile(script, UpdateScript.CONTEXT);, +            UpdateScript updateScript = factory.newInstance(params, context);, +            updateScript.execute();, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollActionScriptTestCase.java, +        UpdateScript.Factory factory = (params, ctx) -> new UpdateScript(Collections.emptyMap(), ctx) {, +            public void execute() {, +        };;, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +            Map<String, Object> context = new HashMap<>();, +            UpdateScript.Factory factory = scriptService.compile(script, UpdateScript.CONTEXT);, +            UpdateScript updateScript = factory.newInstance(params, context);, +            updateScript.execute();, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollActionScriptTestCase.java, +        UpdateScript.Factory factory = (params, ctx) -> new UpdateScript(Collections.emptyMap(), ctx) {, +            public void execute() {, +        };;, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.LongSupplier;, +                UpdateScript executableScript = factory.newInstance(script.getParams(), ctx);, +                executableScript.execute();, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +            Map<String, Object> context = new HashMap<>();, +            UpdateScript.Factory factory = scriptService.compile(script, UpdateScript.CONTEXT);, +            UpdateScript updateScript = factory.newInstance(params, context);, +            updateScript.execute();, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollActionScriptTestCase.java, +        UpdateScript.Factory factory = (params, ctx) -> new UpdateScript(Collections.emptyMap(), ctx) {, +            public void execute() {, +        };;, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.LongSupplier;, +                UpdateScript executableScript = factory.newInstance(script.getParams(), ctx);, +                executableScript.execute();, +++ b/server/src/main/java/org/elasticsearch/script/UpdateScript.java, +import java.util.Collections;, +import java.util.HashMap;, +    public static final String[] PARAMETERS = { };, +, +    private static final Map<String, String> DEPRECATIONS;, +    static {, +        Map<String, String> deprecations = new HashMap<>();, +        deprecations.put(, +            "ctx",, +            "Accessing variable [ctx] via [params.ctx] from within a update script " +, +                "is deprecated in favor of directly accessing [ctx].", +        );, +        DEPRECATIONS = Collections.unmodifiableMap(deprecations);, +    }, +    /** The update context for the script. */, +    private final Map<String, Object> ctx;, +, +    public UpdateScript(Map<String, Object> params, Map<String, Object> ctx) {, +        Map<String, Object> paramsWithCtx = new HashMap<>(params);, +        paramsWithCtx.put("ctx", ctx);, +        this.params = new ParameterMap(paramsWithCtx, DEPRECATIONS);, +        this.ctx = ctx;, +    /** Return the update context for this script. */, +    public Map<String, Object> getCtx() {, +        return ctx;, +    }, +, +    public abstract void execute();, +        UpdateScript newInstance(Map<String, Object> params, Map<String, Object> ctx);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +            Map<String, Object> context = new HashMap<>();, +            UpdateScript.Factory factory = scriptService.compile(script, UpdateScript.CONTEXT);, +            UpdateScript updateScript = factory.newInstance(params, context);, +            updateScript.execute();, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollActionScriptTestCase.java, +        UpdateScript.Factory factory = (params, ctx) -> new UpdateScript(Collections.emptyMap(), ctx) {, +            public void execute() {, +        };;, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.LongSupplier;, +                UpdateScript executableScript = factory.newInstance(script.getParams(), ctx);, +                executableScript.execute();, +++ b/server/src/main/java/org/elasticsearch/script/UpdateScript.java, +import java.util.Collections;, +import java.util.HashMap;, +    public static final String[] PARAMETERS = { };, +]