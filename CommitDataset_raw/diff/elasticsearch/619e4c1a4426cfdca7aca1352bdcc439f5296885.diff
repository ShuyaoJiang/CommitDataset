[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +                Objects.equals(splitOnWhitespace, other.splitOnWhitespace);, +                timeZone == null ? 0 : timeZone.getID(), escape, maxDeterminizedStates, splitOnWhitespace);, +        Map<String, Float> resolvedFields = new TreeMap<>();, +        qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +                Objects.equals(splitOnWhitespace, other.splitOnWhitespace);, +                timeZone == null ? 0 : timeZone.getID(), escape, maxDeterminizedStates, splitOnWhitespace);, +        Map<String, Float> resolvedFields = new TreeMap<>();, +        qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient);, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +                Objects.equals(splitOnWhitespace, other.splitOnWhitespace);, +                timeZone == null ? 0 : timeZone.getID(), escape, maxDeterminizedStates, splitOnWhitespace);, +        Map<String, Float> resolvedFields = new TreeMap<>();, +        qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient);, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +    public static Script parse(XContentParser parser, ParseFieldMatcher matcher) {, +        return parse(parser, matcher, null);, +        return parse(parser, context.getParseFieldMatcher(), null);, +    public static Script parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, @Nullable String lang) {, +        try {, +        } catch (IOException e) {, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing [" + ScriptField.SCRIPT.getPreferredName() + "] field", e);, +        }, +, +                + lang + ", params: " + params + ", contentType: " + contentType + "]";, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +                Objects.equals(splitOnWhitespace, other.splitOnWhitespace);, +                timeZone == null ? 0 : timeZone.getID(), escape, maxDeterminizedStates, splitOnWhitespace);, +        Map<String, Float> resolvedFields = new TreeMap<>();, +        qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient);, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +    public static Script parse(XContentParser parser, ParseFieldMatcher matcher) {, +        return parse(parser, matcher, null);, +        return parse(parser, context.getParseFieldMatcher(), null);, +    public static Script parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, @Nullable String lang) {, +        try {, +        } catch (IOException e) {, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing [" + ScriptField.SCRIPT.getPreferredName() + "] field", e);, +        }, +, +                + lang + ", params: " + params + ", contentType: " + contentType + "]";, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +                Objects.equals(splitOnWhitespace, other.splitOnWhitespace);, +                timeZone == null ? 0 : timeZone.getID(), escape, maxDeterminizedStates, splitOnWhitespace);, +        Map<String, Float> resolvedFields = new TreeMap<>();, +        qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient);, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +    public static Script parse(XContentParser parser, ParseFieldMatcher matcher) {, +        return parse(parser, matcher, null);, +        return parse(parser, context.getParseFieldMatcher(), null);, +    public static Script parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, @Nullable String lang) {, +        try {, +        } catch (IOException e) {, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing [" + ScriptField.SCRIPT.getPreferredName() + "] field", e);, +        }, +, +                + lang + ", params: " + params + ", contentType: " + contentType + "]";, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +                Objects.equals(splitOnWhitespace, other.splitOnWhitespace);]