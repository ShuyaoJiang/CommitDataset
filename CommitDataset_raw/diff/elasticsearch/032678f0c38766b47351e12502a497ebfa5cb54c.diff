[+++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +        MultiTermVectorsResponse responses = fetchResponse(context.getClient(), likeItems, unlikeItems, SearchContext.current());, +, +        mltQuery.setLikeText(getFieldsFor(responses, likeItems));, +            org.apache.lucene.index.Fields[] unlikeFields = getFieldsFor(responses, unlikeItems);, +    private MultiTermVectorsResponse fetchResponse(Client client, Item[] likeItems, @Nullable Item[] unlikeItems,, +                                                   SearchContext searchContext) throws IOException {, +        for (Item item : likeItems) {, +        for (Item item : unlikeItems) {, +            request.add(item.toTermVectorsRequest());, +        }, +    private static Fields[] getFieldsFor(MultiTermVectorsResponse responses, Item[] items) throws IOException {, +        Set<Item> selectedItems = new HashSet<>();, +        for (Item request : items) {, +            selectedItems.add(new Item(request.index(), request.type(), request.id()));, +        }, +, +            if (!hasResponseFromRequest(response, selectedItems)) {, +                continue;, +            }, +++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +        MultiTermVectorsResponse responses = fetchResponse(context.getClient(), likeItems, unlikeItems, SearchContext.current());, +, +        mltQuery.setLikeText(getFieldsFor(responses, likeItems));, +            org.apache.lucene.index.Fields[] unlikeFields = getFieldsFor(responses, unlikeItems);, +    private MultiTermVectorsResponse fetchResponse(Client client, Item[] likeItems, @Nullable Item[] unlikeItems,, +                                                   SearchContext searchContext) throws IOException {, +        for (Item item : likeItems) {, +        for (Item item : unlikeItems) {, +            request.add(item.toTermVectorsRequest());, +        }, +    private static Fields[] getFieldsFor(MultiTermVectorsResponse responses, Item[] items) throws IOException {, +        Set<Item> selectedItems = new HashSet<>();, +        for (Item request : items) {, +            selectedItems.add(new Item(request.index(), request.type(), request.id()));, +        }, +, +            if (!hasResponseFromRequest(response, selectedItems)) {, +                continue;, +            }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +        MultiTermVectorsResponse responses = fetchResponse(context.getClient(), likeItems, unlikeItems, SearchContext.current());, +, +        mltQuery.setLikeText(getFieldsFor(responses, likeItems));, +            org.apache.lucene.index.Fields[] unlikeFields = getFieldsFor(responses, unlikeItems);, +    private MultiTermVectorsResponse fetchResponse(Client client, Item[] likeItems, @Nullable Item[] unlikeItems,, +                                                   SearchContext searchContext) throws IOException {, +        for (Item item : likeItems) {, +        for (Item item : unlikeItems) {, +            request.add(item.toTermVectorsRequest());, +        }, +    private static Fields[] getFieldsFor(MultiTermVectorsResponse responses, Item[] items) throws IOException {, +        Set<Item> selectedItems = new HashSet<>();, +        for (Item request : items) {, +            selectedItems.add(new Item(request.index(), request.type(), request.id()));, +        }, +, +            if (!hasResponseFromRequest(response, selectedItems)) {, +                continue;, +            }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +++ b/core/src/test/java/org/elasticsearch/search/morelikethis/MoreLikeThisIT.java]