[+++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_7_4_ID = 1070499;, +    public static final Version V_1_7_4 = new Version(V_1_7_4_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_7_4_ID:, +                return V_1_7_4;, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_7_4_ID = 1070499;, +    public static final Version V_1_7_4 = new Version(V_1_7_4_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_7_4_ID:, +                return V_1_7_4;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_7_4_ID = 1070499;, +    public static final Version V_1_7_4 = new Version(V_1_7_4_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_7_4_ID:, +                return V_1_7_4;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_7_4_ID = 1070499;, +    public static final Version V_1_7_4 = new Version(V_1_7_4_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_7_4_ID:, +                return V_1_7_4;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        BytesReference source = null;, +                        if (request.searchRequest().source() != null && request.searchRequest().source().length() > 0) {, +                            source = request.searchRequest().source();, +                        } else if (request.searchRequest().extraSource() != null && request.searchRequest().extraSource().length() > 0) {, +                            source = request.searchRequest().extraSource();, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_7_3 = new Version(V_1_7_3_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_7_4_ID = 1070499;, +    public static final Version V_1_7_4 = new Version(V_1_7_4_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_7_4_ID:, +                return V_1_7_4;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBytesReference()), +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +                BytesReference source = in.readBytesReference();, +                out.writeBytesReference(warmerEntry.source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        BytesReference source = null;, +                        if (request.searchRequest().source() != null && request.searchRequest().source().length() > 0) {, +                            source = request.searchRequest().source();, +                        } else if (request.searchRequest().extraSource() != null && request.searchRequest().extraSource().length() > 0) {, +                            source = request.searchRequest().extraSource();, +++ b/core/src/main/java/org/elasticsearch/action/count/CountRequest.java, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.action.support.QuerySourceBuilder;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import java.util.Map;, +, +import static org.elasticsearch.search.internal.SearchContext.DEFAULT_TERMINATE_AFTER;, + * <p>, + * The request requires the query source to be set either using {@link #source(QuerySourceBuilder)},, + * or {@link #source(byte[])}., +    public static final float DEFAULT_MIN_SCORE = -1f;, +, +    private float minScore = DEFAULT_MIN_SCORE;, +, +    private BytesReference source;, +, +    private int terminateAfter = DEFAULT_TERMINATE_AFTER;, +    public float minScore() {, +        return minScore;, +        this.minScore = minScore;, +    /**, +     * The source to execute., +     */, +    public BytesReference source() {, +        return source;, +    }]