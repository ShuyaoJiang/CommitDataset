[+++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                this.throttle = new IndexThrottle(mergeScheduler, logger, indexingService);, +, +                        this.throttle = new IndexThrottle(mergeScheduler, this.logger, indexingService);, +, +    static final class IndexThrottle implements MergeSchedulerProvider.Listener {, +        private final ShardIndexingService indexingService;, +        public IndexThrottle(MergeSchedulerProvider mergeScheduler, ESLogger logger, ShardIndexingService indexingService) {, +            this.indexingService = indexingService;, +                    indexingService.throttlingActivated();, +                    indexingService.throttlingDeactivated();, +, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                this.throttle = new IndexThrottle(mergeScheduler, logger, indexingService);, +, +                        this.throttle = new IndexThrottle(mergeScheduler, this.logger, indexingService);, +, +    static final class IndexThrottle implements MergeSchedulerProvider.Listener {, +        private final ShardIndexingService indexingService;, +        public IndexThrottle(MergeSchedulerProvider mergeScheduler, ESLogger logger, ShardIndexingService indexingService) {, +            this.indexingService = indexingService;, +                    indexingService.throttlingActivated();, +                    indexingService.throttlingDeactivated();, +, +++ b/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java, +        private long throttleTimeInMillis;, +        private boolean isThrottled;, +, +        public Stats(long indexCount, long indexTimeInMillis, long indexCurrent, long deleteCount, long deleteTimeInMillis, long deleteCurrent, long noopUpdateCount, boolean isThrottled, long throttleTimeInMillis) {, +            this.isThrottled = isThrottled;, +            this.throttleTimeInMillis = throttleTimeInMillis;, +            throttleTimeInMillis += stats.throttleTimeInMillis;, +            if (isThrottled != stats.isThrottled) {, +                isThrottled = true; //When combining if one is throttled set result to throttled., +            }, +        /**, +         * Returns if the index is under merge throttling control, +         * @return, +         */, +        public boolean isThrottled() {, +            return isThrottled;, +        }, +, +        /**, +         * Gets the amount of time in milliseconds that the index has been under merge throttling control, +         * @return, +         */, +        public long getThrottleTimeInMillis() {, +            return throttleTimeInMillis;, +        }, +, +        /**, +         * Gets the amount of time in a TimeValue that the index has been under merge throttling control, +         * @return, +         */, +        public TimeValue getThrottleTime() {, +            return new TimeValue(throttleTimeInMillis);, +        }, +, +, +            if (in.getVersion().onOrAfter(Version.V_1_4_0)) {, +                isThrottled = in.readBoolean();, +                throttleTimeInMillis = in.readLong();, +            }, +, +            if (out.getVersion().onOrAfter(Version.V_1_4_0)) {, +                out.writeBoolean(isThrottled);, +                out.writeLong(throttleTimeInMillis);, +            }, +, +            builder.field(Fields.IS_THROTTLED, isThrottled);, +            builder.timeValueField(Fields.THROTTLED_TIME_IN_MILLIS, Fields.THROTTLED_TIME, throttleTimeInMillis);, +        static final XContentBuilderString IS_THROTTLED = new XContentBuilderString("is_throttled");, +        static final XContentBuilderString THROTTLED_TIME_IN_MILLIS = new XContentBuilderString("throttle_time_in_millis");, +        static final XContentBuilderString THROTTLED_TIME = new XContentBuilderString("throttle_time");, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                this.throttle = new IndexThrottle(mergeScheduler, logger, indexingService);, +, +                        this.throttle = new IndexThrottle(mergeScheduler, this.logger, indexingService);, +, +    static final class IndexThrottle implements MergeSchedulerProvider.Listener {, +        private final ShardIndexingService indexingService;, +        public IndexThrottle(MergeSchedulerProvider mergeScheduler, ESLogger logger, ShardIndexingService indexingService) {, +            this.indexingService = indexingService;, +                    indexingService.throttlingActivated();, +                    indexingService.throttlingDeactivated();, +, +++ b/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java, +        private long throttleTimeInMillis;, +        private boolean isThrottled;, +, +        public Stats(long indexCount, long indexTimeInMillis, long indexCurrent, long deleteCount, long deleteTimeInMillis, long deleteCurrent, long noopUpdateCount, boolean isThrottled, long throttleTimeInMillis) {, +            this.isThrottled = isThrottled;, +            this.throttleTimeInMillis = throttleTimeInMillis;, +            throttleTimeInMillis += stats.throttleTimeInMillis;, +            if (isThrottled != stats.isThrottled) {, +                isThrottled = true; //When combining if one is throttled set result to throttled., +            }, +        /**, +         * Returns if the index is under merge throttling control]