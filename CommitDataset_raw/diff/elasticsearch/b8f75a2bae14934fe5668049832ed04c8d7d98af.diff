[+++ b/src/main/java/org/elasticsearch/shield/transport/SSLExceptionHelper.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.shield.transport;, +, +import org.elasticsearch.common.netty.handler.ssl.NotSslRecordException;, +, +import javax.net.ssl.SSLException;, +, +public class SSLExceptionHelper {, +, +    private SSLExceptionHelper() {, +    }, +, +    public static boolean isNotSslRecordException(Throwable e) {, +        return e instanceof NotSslRecordException && e.getCause() == null;, +    }, +, +    public static boolean isCloseDuringHandshakeException(Throwable e) {, +        return e instanceof SSLException, +                && e.getCause() == null, +                && "Received close_notify during handshake".equals(e.getMessage());, +    }, +}, +++ b/src/main/java/org/elasticsearch/shield/transport/SSLExceptionHelper.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.shield.transport;, +, +import org.elasticsearch.common.netty.handler.ssl.NotSslRecordException;, +, +import javax.net.ssl.SSLException;, +, +public class SSLExceptionHelper {, +, +    private SSLExceptionHelper() {, +    }, +, +    public static boolean isNotSslRecordException(Throwable e) {, +        return e instanceof NotSslRecordException && e.getCause() == null;, +    }, +, +    public static boolean isCloseDuringHandshakeException(Throwable e) {, +        return e instanceof SSLException, +                && e.getCause() == null, +                && "Received close_notify during handshake".equals(e.getMessage());, +    }, +}, +++ b/src/main/java/org/elasticsearch/shield/transport/netty/ShieldNettyHttpServerTransport.java, +import static org.elasticsearch.shield.transport.SSLExceptionHelper.*;, +, +        if (!lifecycle.started()) {, +            return;, +        }, +, +        Throwable t = e.getCause();, +        if (isNotSslRecordException(t)) {, +                logger.trace("received plaintext http traffic on a https channel, closing connection {}", t, ctx.getChannel());, +        } else if (isCloseDuringHandshakeException(t)) {, +            if (logger.isTraceEnabled()) {, +                logger.trace("connection {} closed during handshake", t, ctx.getChannel());, +            } else {, +                logger.warn("connection {} closed during handshake", ctx.getChannel());, +            }, +            ctx.getChannel().close();, +++ b/src/main/java/org/elasticsearch/shield/transport/SSLExceptionHelper.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.shield.transport;, +, +import org.elasticsearch.common.netty.handler.ssl.NotSslRecordException;, +, +import javax.net.ssl.SSLException;, +, +public class SSLExceptionHelper {, +, +    private SSLExceptionHelper() {, +    }, +, +    public static boolean isNotSslRecordException(Throwable e) {, +        return e instanceof NotSslRecordException && e.getCause() == null;, +    }, +, +    public static boolean isCloseDuringHandshakeException(Throwable e) {, +        return e instanceof SSLException, +                && e.getCause() == null, +                && "Received close_notify during handshake".equals(e.getMessage());, +    }, +}, +++ b/src/main/java/org/elasticsearch/shield/transport/netty/ShieldNettyHttpServerTransport.java, +import static org.elasticsearch.shield.transport.SSLExceptionHelper.*;]