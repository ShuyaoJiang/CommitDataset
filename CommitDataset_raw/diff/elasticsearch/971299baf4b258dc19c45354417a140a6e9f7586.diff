[+++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | SYS TYPES ((PLUS | MINUS)?  type=number)?                                                           #sysTypes, +++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | SYS TYPES ((PLUS | MINUS)?  type=number)?                                                           #sysTypes, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +import org.elasticsearch.xpack.sql.expression.Literal;, +        int type = 0;, +        if (ctx.type != null) {, +            Literal value = (Literal) visit(ctx.type);, +            type = ((Number) value.fold()).intValue();, +        }, +, +        return new SysTypes(source(ctx), Integer.valueOf(type));, +++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | SYS TYPES ((PLUS | MINUS)?  type=number)?                                                           #sysTypes, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +import org.elasticsearch.xpack.sql.expression.Literal;, +        int type = 0;, +        if (ctx.type != null) {, +            Literal value = (Literal) visit(ctx.type);, +            type = ((Number) value.fold()).intValue();, +        }, +, +        return new SysTypes(source(ctx), Integer.valueOf(type));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +import org.elasticsearch.xpack.sql.expression.literal.IntervalYearMonth;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.SysTypesContext;, +        Object val = Long.valueOf(value);, +            val = Integer.valueOf((int) value);, +        return new Literal(source(ctx), val, type);, +            } else if (parentCtx instanceof SqlBaseParser.SysTypesContext) {, +                return ((SysTypesContext) parentCtx).MINUS() != null;, +++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | SYS TYPES ((PLUS | MINUS)?  type=number)?                                                           #sysTypes, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +import org.elasticsearch.xpack.sql.expression.Literal;, +        int type = 0;, +        if (ctx.type != null) {, +            Literal value = (Literal) visit(ctx.type);, +            type = ((Number) value.fold()).intValue();, +        }, +, +        return new SysTypes(source(ctx), Integer.valueOf(type));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +import org.elasticsearch.xpack.sql.expression.literal.IntervalYearMonth;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.SysTypesContext;, +        Object val = Long.valueOf(value);, +            val = Integer.valueOf((int) value);, +        return new Literal(source(ctx), val, type);, +            } else if (parentCtx instanceof SqlBaseParser.SysTypesContext) {, +                return ((SysTypesContext) parentCtx).MINUS() != null;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java, +    public NumberContext type;, +    public NumberContext number() {, +      return getRuleContext(NumberContext.class,0);, +    }, +    public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }, +    public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }, +      setState(218);, +      switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {, +        setState(213);, +        _la = _input.LA(1);, +        if (((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (PLUS - 104)) | (1L << (MINUS - 104)) | (1L << (INTEGER_VALUE - 104)) | (1L << (DECIMAL_VALUE - 104)))) != 0)) {, +          {, +          setState(210);, +          _la = _input.LA(1);, +          if (_la==PLUS || _la==MINUS) {, +            {, +            setState(209);, +            _la = _input.LA(1);, +            if ( !(_la==PLUS || _la==MINUS) ) {, +            _errHandler.recoverInline(this);, +            } else {, +              consume();, +            }, +            }, +          }, +, +          setState(212);, +          ((SysTypesContext)_localctx).type = number();, +          }, +        }, +, +        setState(215);, +        setState(216);, +        setState(217);, +      setState(229);, +        match(WITH);, +        setState(221);, +        namedQuery();, +        setState(226);, +          setState(222);, +          setState(223);, +          setState(228);, +      setState(231);, +      setState(233);, +      setState(244);, +        setState(234);, +        match(BY);, +        setState(236);]