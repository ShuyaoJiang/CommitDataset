[+++ b/x-pack/plugin/sql/build.gradle, +    extendedPlugins = ['x-pack-core', 'lang-painless'], +    compileOnly project(':modules:lang-painless'), +++ b/x-pack/plugin/sql/build.gradle, +    extendedPlugins = ['x-pack-core', 'lang-painless'], +    compileOnly project(':modules:lang-painless'), +++ /dev/null, +++ b/x-pack/plugin/sql/build.gradle, +    extendedPlugins = ['x-pack-core', 'lang-painless'], +    compileOnly project(':modules:lang-painless'), +++ /dev/null, +++ /dev/null, +++ b/x-pack/plugin/sql/build.gradle, +    extendedPlugins = ['x-pack-core', 'lang-painless'], +    compileOnly project(':modules:lang-painless'), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/x-pack/plugin/sql/build.gradle, +    extendedPlugins = ['x-pack-core', 'lang-painless'], +    compileOnly project(':modules:lang-painless'), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFunction.java, +, +    @Override, +    protected TypeResolution resolveType() {, +        if (field().dataType() == DataType.DATE) {, +            return TypeResolution.TYPE_RESOLVED;, +        }, +        return new TypeResolution("Function [" + functionName() + "] cannot be applied on a non-date expression ([", +                + Expressions.name(field()) + "] of type [" + field().dataType().esType + "])");, +    }, +, +        return dateTimeChrono(folded.getMillis(), timeZone.getID(), chronoField().name());, +    public static Integer dateTimeChrono(long millis, String tzId, String chronoName) {, +        ZonedDateTime time = ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), ZoneId.of(tzId));, +        return Integer.valueOf(time.get(ChronoField.valueOf(chronoName)));, +        template = formatTemplate("{sql}.dateTimeChrono(doc[{}].value.millis, {}, {})");, +++ b/x-pack/plugin/sql/build.gradle, +    extendedPlugins = ['x-pack-core', 'lang-painless'], +    compileOnly project(':modules:lang-painless'), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFunction.java, +, +    @Override, +    protected TypeResolution resolveType() {, +        if (field().dataType() == DataType.DATE) {, +            return TypeResolution.TYPE_RESOLVED;, +        }, +        return new TypeResolution("Function [" + functionName() + "] cannot be applied on a non-date expression ([", +                + Expressions.name(field()) + "] of type [" + field().dataType().esType + "])");, +    }, +, +        return dateTimeChrono(folded.getMillis(), timeZone.getID(), chronoField().name());, +    public static Integer dateTimeChrono(long millis, String tzId, String chronoName) {, +        ZonedDateTime time = ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), ZoneId.of(tzId));, +        return Integer.valueOf(time.get(ChronoField.valueOf(chronoName)));, +        template = formatTemplate("{sql}.dateTimeChrono(doc[{}].value.millis, {}, {})");, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/script/ScriptTemplate.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils;, +        return template.replace("{sql}", InternalSqlScriptUtils.class.getSimpleName()).replace("{}", "params.%s");, +++ b/x-pack/plugin/sql/build.gradle, +    extendedPlugins = ['x-pack-core', 'lang-painless'], +    compileOnly project(':modules:lang-painless'), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFunction.java, +, +    @Override, +    protected TypeResolution resolveType() {, +        if (field().dataType() == DataType.DATE) {, +            return TypeResolution.TYPE_RESOLVED;, +        }, +        return new TypeResolution("Function [" + functionName() + "] cannot be applied on a non-date expression ([", +                + Expressions.name(field()) + "] of type [" + field().dataType().esType + "])");, +    }, +, +        return dateTimeChrono(folded.getMillis(), timeZone.getID(), chronoField().name());, +    public static Integer dateTimeChrono(long millis, String tzId, String chronoName) {, +        ZonedDateTime time = ZonedDateTime.ofInstant(Instant.ofEpochMilli(millis), ZoneId.of(tzId));, +        return Integer.valueOf(time.get(ChronoField.valueOf(chronoName)));, +        template = formatTemplate("{sql}.dateTimeChrono(doc[{}].value.millis, {}, {})");, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/script/ScriptTemplate.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.whitelist.InternalSqlScriptUtils;, +        return template.replace("{sql}", InternalSqlScriptUtils.class.getSimpleName()).replace("{}", "params.%s");, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/whitelist/InternalSqlScriptUtils.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.sql.expression.function.scalar.whitelist;, +, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DateTimeFunction;, +]