[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;, +, +    /**, +     * Get current tasks using the Task Management API, +     * <p>, +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>, +     */, +    public ListTasksResponse listTasks(ListTasksRequest request, Header... headers) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::listTasks, ListTasksResponse::fromXContent,, +                emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously get current tasks using the Task Management API, +     * <p>, +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>, +     */, +    public void listTasksAsync(ListTasksRequest request, ActionListener<ListTasksResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::listTasks, ListTasksResponse::fromXContent,, +                listener, emptySet(), headers);, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ClusterClient.java, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;, +, +    /**, +     * Get current tasks using the Task Management API, +     * <p>, +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>, +     */, +    public ListTasksResponse listTasks(ListTasksRequest request, Header... headers) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::listTasks, ListTasksResponse::fromXContent,, +                emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously get current tasks using the Task Management API, +     * <p>, +     * See, +     * <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html"> Task Management API on elastic.co</a>, +     */, +    public void listTasksAsync(ListTasksRequest request, ActionListener<ListTasksResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::listTasks, ListTasksResponse::fromXContent,, +                listener, emptySet(), headers);, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;, +import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;, +import org.elasticsearch.tasks.TaskId;, +    static Request listTasks(ListTasksRequest listTaskRequest) {, +        if (listTaskRequest.getTaskId() != null && listTaskRequest.getTaskId().isSet()) {, +            throw new IllegalArgumentException("TaskId cannot be used for list tasks request");, +        }, +        Request request  = new Request(HttpGet.METHOD_NAME, "/_tasks");, +        Params params = new Params(request);, +        params.withTimeout(listTaskRequest.getTimeout()), +            .withDetailed(listTaskRequest.getDetailed()), +            .withWaitForCompletion(listTaskRequest.getWaitForCompletion()), +            .withParentTaskId(listTaskRequest.getParentTaskId()), +            .withNodes(listTaskRequest.getNodes()), +            .withActions(listTaskRequest.getActions()), +            .putParam("group_by", "none");, +        return request;, +    }, +, +        Params withDetailed(boolean detailed) {, +            if (detailed) {, +                return putParam("detailed", Boolean.TRUE.toString());, +            }, +            return this;, +        }, +, +        Params withWaitForCompletion(boolean waitForCompletion) {, +            if (waitForCompletion) {, +                return putParam("wait_for_completion", Boolean.TRUE.toString());, +            }, +            return this;, +        }, +, +        Params withNodes(String[] nodes) {, +            if (nodes != null && nodes.length > 0) {, +                return putParam("nodes", String.join(",", nodes));, +            }, +            return this;, +        }, +, +        Params withActions(String[] actions) {, +            if (actions != null && actions.length > 0) {, +                return putParam("actions", String.join(",", actions));, +            }, +            return this;, +        }, +, +        Params withParentTaskId(TaskId parentTaskId) {, +            if (parentTaskId != null && parentTaskId.isSet()) {]