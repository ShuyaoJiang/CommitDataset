[+++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/CreatedLocationHeaderIT.java, +        Request request = new Request("POST", "test/test/1/_update");, +        request.setJsonEntity("{", +            + "\"doc_as_upsert\": true}");, +        locationTestCase(client().performRequest(request));, +        final Request request = new Request(method, url);, +        request.setJsonEntity("{\"test\": \"test\"}");, +        locationTestCase(client().performRequest(request));, +        final Request withRouting = new Request(method, url);, +        withRouting.addParameter("routing", "cat");, +        withRouting.setJsonEntity("{\"test\": \"test\"}");, +        locationTestCase(client().performRequest(withRouting));, +        Response getResponse = client().performRequest(new Request("GET", location));, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/CreatedLocationHeaderIT.java, +        Request request = new Request("POST", "test/test/1/_update");, +        request.setJsonEntity("{", +            + "\"doc_as_upsert\": true}");, +        locationTestCase(client().performRequest(request));, +        final Request request = new Request(method, url);, +        request.setJsonEntity("{\"test\": \"test\"}");, +        locationTestCase(client().performRequest(request));, +        final Request withRouting = new Request(method, url);, +        withRouting.addParameter("routing", "cat");, +        withRouting.setJsonEntity("{\"test\": \"test\"}");, +        locationTestCase(client().performRequest(withRouting));, +        Response getResponse = client().performRequest(new Request("GET", location));, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/NodeRestUsageIT.java, +import org.elasticsearch.client.Request;, +        String path = randomFrom("_nodes/usage", "_nodes/usage/rest_actions", "_nodes/usage/_all");, +        Response beforeResponse = client().performRequest(new Request("GET", path));, +        client().performRequest(new Request("PUT", "/test"));, +        for (int i = 0; i < 3; i++) {, +            final Request index = new Request("POST", "/test/doc/1");, +            index.setJsonEntity("{\"foo\": \"bar\"}");, +            client().performRequest(index);, +        }, +        client().performRequest(new Request("GET", "/test/_search"));, +        final Request index4 = new Request("POST", "/test/doc/4");, +        index4.setJsonEntity("{\"foo\": \"bar\"}");, +        client().performRequest(index4);, +        client().performRequest(new Request("POST", "/test/_refresh"));, +        client().performRequest(new Request("GET", "/_cat/indices"));, +        client().performRequest(new Request("GET", "/_nodes"));, +        client().performRequest(new Request("GET", "/test/_search"));, +        client().performRequest(new Request("GET", "/_nodes/stats"));, +        client().performRequest(new Request("DELETE", "/test"));, +        Response response = client().performRequest(new Request("GET", "_nodes/usage"));, +                () -> client().performRequest(new Request("GET", "_nodes/usage/_all,rest_actions")));, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/CreatedLocationHeaderIT.java, +        Request request = new Request("POST", "test/test/1/_update");, +        request.setJsonEntity("{", +            + "\"doc_as_upsert\": true}");, +        locationTestCase(client().performRequest(request));, +        final Request request = new Request(method, url);, +        request.setJsonEntity("{\"test\": \"test\"}");, +        locationTestCase(client().performRequest(request));, +        final Request withRouting = new Request(method, url);, +        withRouting.addParameter("routing", "cat");, +        withRouting.setJsonEntity("{\"test\": \"test\"}");, +        locationTestCase(client().performRequest(withRouting));, +        Response getResponse = client().performRequest(new Request("GET", location));, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/NodeRestUsageIT.java, +import org.elasticsearch.client.Request;, +        String path = randomFrom("_nodes/usage", "_nodes/usage/rest_actions", "_nodes/usage/_all");, +        Response beforeResponse = client().performRequest(new Request("GET", path));, +        client().performRequest(new Request("PUT", "/test"));, +        for (int i = 0; i < 3; i++) {, +            final Request index = new Request("POST", "/test/doc/1");, +            index.setJsonEntity("{\"foo\": \"bar\"}");, +            client().performRequest(index);, +        }, +        client().performRequest(new Request("GET", "/test/_search"));, +        final Request index4 = new Request("POST", "/test/doc/4");, +        index4.setJsonEntity("{\"foo\": \"bar\"}");, +        client().performRequest(index4);, +        client().performRequest(new Request("POST", "/test/_refresh"));, +        client().performRequest(new Request("GET", "/_cat/indices"));, +        client().performRequest(new Request("GET", "/_nodes"));, +        client().performRequest(new Request("GET", "/test/_search"));, +        client().performRequest(new Request("GET", "/_nodes/stats"));, +        client().performRequest(new Request("DELETE", "/test"));, +        Response response = client().performRequest(new Request("GET", "_nodes/usage"));, +                () -> client().performRequest(new Request("GET", "_nodes/usage/_all,rest_actions")));, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/RequestsWithoutContentIT.java, +import org.elasticsearch.client.Request;, +        ResponseException responseException = expectThrows(ResponseException.class, () ->, +                client().performRequest(new Request(randomBoolean() ? "POST" : "PUT", "/idx/type/123")));, +        ResponseException responseException = expectThrows(ResponseException.class, () ->, +                client().performRequest(new Request(randomBoolean() ? "POST" : "PUT", "/_bulk")));, +        ResponseException responseException = expectThrows(ResponseException.class, () ->, +                client().performRequest(new Request("PUT", "/_settings")));, +        ResponseException responseException = expectThrows(ResponseException.class, () ->, +                client().performRequest(new Request(randomBoolean() ? "POST" : "PUT", "/test_index/test_type/_mapping")));, +        ResponseException responseException = expectThrows(ResponseException.class, () ->, +                client().performRequest(new Request(randomBoolean() ? "PUT" : "POST", "/_template/my_template")));, +        ResponseException responseException = expectThrows(ResponseException.class, () ->, +                client().performRequest(new Request(randomBoolean() ? "POST" : "GET", "/_msearch")));, +        ResponseException responseException = expectThrows(ResponseException.class, () ->, +                client().performRequest(new Request("PUT", "/_ingest/pipeline/my_pipeline")));, +        ResponseException responseException = expectThrows(ResponseException.class, () ->]