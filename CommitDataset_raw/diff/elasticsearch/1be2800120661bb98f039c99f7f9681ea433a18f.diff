[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_SINGLE_TYPE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_SINGLE_TYPE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +    public static final Setting<Boolean> INDEX_MAPPING_SINGLE_TYPE_SETTING;, +    static {, +        Function<Settings, String> defValue = settings -> {, +            // TODO: uncomment this, +            /*boolean singleType = true;, +            if (settings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null) != null) {, +                singleType = Version.indexCreated(settings).onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED);, +            }*/, +            boolean singleType = false;, +            return Boolean.valueOf(singleType).toString();, +        };, +        INDEX_MAPPING_SINGLE_TYPE_SETTING = Setting.boolSetting("index.mapping.single_type", defValue, Property.IndexScope, Property.Final);, +    }, +        if (indexSettings.getValue(INDEX_MAPPING_SINGLE_TYPE_SETTING)) {, +            Set<String> actualTypes = new HashSet<>(mappers.keySet());, +            actualTypes.remove(DEFAULT_MAPPING);, +            if (actualTypes.size() > 1) {, +                throw new IllegalArgumentException(, +                        "Rejecting mapping update to [" + index().getName() + "] as the final mapping would have more than 1 type: " + actualTypes);, +            }, +        }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_SINGLE_TYPE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +    public static final Setting<Boolean> INDEX_MAPPING_SINGLE_TYPE_SETTING;, +    static {, +        Function<Settings, String> defValue = settings -> {, +            // TODO: uncomment this, +            /*boolean singleType = true;, +            if (settings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null) != null) {, +                singleType = Version.indexCreated(settings).onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED);, +            }*/, +            boolean singleType = false;, +            return Boolean.valueOf(singleType).toString();, +        };, +        INDEX_MAPPING_SINGLE_TYPE_SETTING = Setting.boolSetting("index.mapping.single_type", defValue, Property.IndexScope, Property.Final);, +    }, +        if (indexSettings.getValue(INDEX_MAPPING_SINGLE_TYPE_SETTING)) {, +            Set<String> actualTypes = new HashSet<>(mappers.keySet());, +            actualTypes.remove(DEFAULT_MAPPING);, +            if (actualTypes.size() > 1) {, +                throw new IllegalArgumentException(, +                        "Rejecting mapping update to [" + index().getName() + "] as the final mapping would have more than 1 type: " + actualTypes);, +            }, +        }, +, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/create/ShrinkIndexIT.java, +            client().prepareIndex("source", "type"), +            client().prepareIndex("target", "type"), +            client().prepareIndex("source", "type"), +            .addMapping("type", "id", "type=keyword,doc_values=true"), +            client().prepareIndex("source", "type", Integer.toString(i)), +            client().prepareIndex("target", "type"), +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_SINGLE_TYPE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +    public static final Setting<Boolean> INDEX_MAPPING_SINGLE_TYPE_SETTING;, +    static {, +        Function<Settings, String> defValue = settings -> {, +            // TODO: uncomment this, +            /*boolean singleType = true;, +            if (settings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null) != null) {, +                singleType = Version.indexCreated(settings).onOrAfter(Version.V_6_0_0_alpha1_UNRELEASED);, +            }*/, +            boolean singleType = false;, +            return Boolean.valueOf(singleType).toString();, +        };, +        INDEX_MAPPING_SINGLE_TYPE_SETTING = Setting.boolSetting("index.mapping.single_type", defValue, Property.IndexScope, Property.Final);, +    }, +        if (indexSettings.getValue(INDEX_MAPPING_SINGLE_TYPE_SETTING)) {, +            Set<String> actualTypes = new HashSet<>(mappers.keySet());, +            actualTypes.remove(DEFAULT_MAPPING);, +            if (actualTypes.size() > 1) {, +                throw new IllegalArgumentException(, +                        "Rejecting mapping update to [" + index().getName() + "] as the final mapping would have more than 1 type: " + actualTypes);, +            }, +        }, +, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/create/ShrinkIndexIT.java, +            client().prepareIndex("source", "type"), +            client().prepareIndex("target", "type"), +            client().prepareIndex("source", "type"), +            .addMapping("type", "id", "type=keyword,doc_values=true"), +            client().prepareIndex("source", "type", Integer.toString(i)), +            client().prepareIndex("target", "type"), +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkWithUpdatesIT.java, +                .setSettings("index.mapping.single_type", false), +                .setSettings("index.mapping.single_type", false)]