[+++ b/plugin/security/src/test/java/org/elasticsearch/test/SecuritySettingsSource.java, +import java.io.UncheckedIOException;, +        try {, +            Files.createDirectories(xpackConf);, +        } catch (IOException e) {, +            throw new UncheckedIOException(e);, +        }, +        writeFile(xpackConf, "roles.yml", configRoles());, +++ b/plugin/security/src/test/java/org/elasticsearch/test/SecuritySettingsSource.java, +import java.io.UncheckedIOException;, +        try {, +            Files.createDirectories(xpackConf);, +        } catch (IOException e) {, +            throw new UncheckedIOException(e);, +        }, +        writeFile(xpackConf, "roles.yml", configRoles());, +++ b/plugin/security/src/test/java/org/elasticsearch/xpack/security/test/SecurityTestUtils.java, +import org.apache.lucene.util.IOUtils;, +import java.io.UncheckedIOException;, +import java.nio.file.AtomicMoveNotSupportedException;, +import java.util.Locale;, +import static java.nio.file.StandardCopyOption.ATOMIC_MOVE;, +import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;, +import static java.nio.file.StandardOpenOption.CREATE;, +import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;, +import static java.nio.file.StandardOpenOption.WRITE;, +    public static String writeFile(Path folder, String name, byte[] content) {, +        final Path path = folder.resolve(name);, +        Path tempFile = null;, +            tempFile = Files.createTempFile(path.getParent(), path.getFileName().toString(), "tmp");, +            try (OutputStream os = Files.newOutputStream(tempFile, CREATE, TRUNCATE_EXISTING, WRITE)) {, +                Streams.copy(content, os);, +            try {, +                Files.move(tempFile, path, REPLACE_EXISTING, ATOMIC_MOVE);, +            } catch (final AtomicMoveNotSupportedException e) {, +                Files.move(tempFile, path, REPLACE_EXISTING);, +        } catch (final IOException e) {, +            throw new UncheckedIOException(String.format(Locale.ROOT, "could not write file [%s]", path.toAbsolutePath()), e);, +        } finally {, +            // we are ignoring exceptions here, so we do not need handle whether or not tempFile was initialized nor if the file exists, +            IOUtils.deleteFilesIgnoringExceptions(tempFile);, +        }, +        return path.toAbsolutePath().toString();]