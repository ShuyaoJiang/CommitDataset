[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                            case PARTIAL:, +                                // Translating both PARTIAL and SUCCESS to SUCCESS for now, +                                // TODO: add the differentiation on the metadata level in the next major release, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                            case PARTIAL:, +                                // Translating both PARTIAL and SUCCESS to SUCCESS for now, +                                // TODO: add the differentiation on the metadata level in the next major release, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                if (shardFailures.isEmpty()) {, +                } else {, +                    updatedSnapshot.partial();, +                }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                            case PARTIAL:, +                                // Translating both PARTIAL and SUCCESS to SUCCESS for now, +                                // TODO: add the differentiation on the metadata level in the next major release, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                if (shardFailures.isEmpty()) {, +                } else {, +                    updatedSnapshot.partial();, +                }, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreSnapshot.java, +         * Marks snapshot as partially successful, +         *, +         * @return this builder, +         */, +        public Builder partial() {, +            this.state = SnapshotState.PARTIAL;, +            return this;, +        }, +, +        /**, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                            case PARTIAL:, +                                // Translating both PARTIAL and SUCCESS to SUCCESS for now, +                                // TODO: add the differentiation on the metadata level in the next major release, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                if (shardFailures.isEmpty()) {, +                } else {, +                    updatedSnapshot.partial();, +                }, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreSnapshot.java, +         * Marks snapshot as partially successful, +         *, +         * @return this builder, +         */, +        public Builder partial() {, +            this.state = SnapshotState.PARTIAL;, +            return this;, +        }, +, +        /**, +++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +            if (!snapshot.state().restorable()) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                            case PARTIAL:, +                                // Translating both PARTIAL and SUCCESS to SUCCESS for now, +                                // TODO: add the differentiation on the metadata level in the next major release, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                if (shardFailures.isEmpty()) {, +                } else {, +                    updatedSnapshot.partial();, +                }, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreSnapshot.java, +         * Marks snapshot as partially successful, +         *, +         * @return this builder, +         */, +        public Builder partial() {, +            this.state = SnapshotState.PARTIAL;, +            return this;, +        }, +, +        /**, +++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +            if (!snapshot.state().restorable()) {, +++ b/src/main/java/org/elasticsearch/snapshots/SnapshotState.java, +    IN_PROGRESS((byte) 0, false, false),, +    SUCCESS((byte) 1, true, true),, +    FAILED((byte) 2, true, false),, +    /**, +     * Snapshot was partial successful, +     */, +    PARTIAL((byte) 3, true, true);, +    private boolean completed;, +, +    private boolean restorable;, +, +    private SnapshotState(byte value, boolean completed, boolean restorable) {, +        this.completed = completed;, +        this.restorable = restorable;, +        return completed;, +    }, +, +, +    /**, +     * Returns true if snapshot can be restored (at least partially), +     *, +     * @return true if snapshot can be restored, false otherwise]