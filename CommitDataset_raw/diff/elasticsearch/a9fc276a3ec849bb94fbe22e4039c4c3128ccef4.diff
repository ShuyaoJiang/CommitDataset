[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        } else if (sourceQuery instanceof FunctionScoreQuery) {, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), flatQueries);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        } else if (sourceQuery instanceof FunctionScoreQuery) {, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), flatQueries);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/CustomBoostFactorQueryParser.java, +import org.elasticsearch.util.lucene.search.function.BoostFactorFunctionProvider;, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        FunctionScoreQuery functionScoreQuery = new FunctionScoreQuery(query, new BoostFactorFunctionProvider(boostFactor));, +        functionScoreQuery.setBoost(boost);, +        return functionScoreQuery;, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        } else if (sourceQuery instanceof FunctionScoreQuery) {, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), flatQueries);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/CustomBoostFactorQueryParser.java, +import org.elasticsearch.util.lucene.search.function.BoostFactorFunctionProvider;, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        FunctionScoreQuery functionScoreQuery = new FunctionScoreQuery(query, new BoostFactorFunctionProvider(boostFactor));, +        functionScoreQuery.setBoost(boost);, +        return functionScoreQuery;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.elasticsearch.util.lucene.search.function.BoostFactorFunctionProvider;, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +            context.query(new FunctionScoreQuery(context.query(), new BoostFactorFunctionProvider(context.queryBoost())));, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        } else if (sourceQuery instanceof FunctionScoreQuery) {, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), flatQueries);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/CustomBoostFactorQueryParser.java, +import org.elasticsearch.util.lucene.search.function.BoostFactorFunctionProvider;, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        FunctionScoreQuery functionScoreQuery = new FunctionScoreQuery(query, new BoostFactorFunctionProvider(boostFactor));, +        functionScoreQuery.setBoost(boost);, +        return functionScoreQuery;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.elasticsearch.util.lucene.search.function.BoostFactorFunctionProvider;, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +            context.query(new FunctionScoreQuery(context.query(), new BoostFactorFunctionProvider(context.queryBoost())));, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        } else if (sourceQuery instanceof FunctionScoreQuery) {, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), flatQueries);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/CustomBoostFactorQueryParser.java, +import org.elasticsearch.util.lucene.search.function.BoostFactorFunctionProvider;, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +        FunctionScoreQuery functionScoreQuery = new FunctionScoreQuery(query, new BoostFactorFunctionProvider(boostFactor));, +        functionScoreQuery.setBoost(boost);, +        return functionScoreQuery;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.elasticsearch.util.lucene.search.function.BoostFactorFunctionProvider;, +import org.elasticsearch.util.lucene.search.function.FunctionScoreQuery;, +            context.query(new FunctionScoreQuery(context.query(), new BoostFactorFunctionProvider(context.queryBoost())));, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/lucene/search/function/BoostFactorFunctionProvider.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.util.lucene.search.function;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.search.Explanation;, +, +/**, + * @author kimchy (shay.banon), + */, +public class BoostFactorFunctionProvider implements FunctionProvider, Function {, +, +    private final float boost;, +, +    public BoostFactorFunctionProvider(float boost) {, +        this.boost = boost;, +    }, +, +, +    public float getBoost() {, +        return boost;, +    }, +, +    @Override public Function function(IndexReader reader) {]