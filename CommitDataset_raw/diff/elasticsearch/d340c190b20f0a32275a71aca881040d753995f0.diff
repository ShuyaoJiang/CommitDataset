[+++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionCoordinator.java, +                for (PersistentTaskInProgress<?> taskInProgress : tasks.tasks()) {, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionCoordinator.java, +                for (PersistentTaskInProgress<?> taskInProgress : tasks.tasks()) {, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTaskClusterService.java, +import org.elasticsearch.persistent.PersistentTasksInProgress.PersistentTaskInProgress;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +                long nextId;, +                return createPersistentTask(currentState, new PersistentTaskInProgress<>(nextId, action, request, executorNodeId));, +                    PersistentTaskInProgress<?> taskInProgress = tasksInProgress.getTask(id);, +                    if (taskInProgress != null) {, +                        return updatePersistentTask(currentState, new PersistentTaskInProgress<>(taskInProgress, executorNode));, +                    return currentState;, +                    return removePersistentTask(currentState, id);, +, +                PersistentTaskInProgress<?> task = tasksInProgress.getTask(id);, +                if (task != null) {, +                    return updatePersistentTask(currentState, new PersistentTaskInProgress<>(task, status));, +                return currentState;, +    private ClusterState updatePersistentTask(ClusterState oldState, PersistentTaskInProgress<?> newTask) {, +        Map<Long, PersistentTaskInProgress<?>> taskMap = new HashMap<>();, +        taskMap.putAll(oldTasks.taskMap());, +        taskMap.put(newTask.getId(), newTask);, +        ClusterState.Builder builder = ClusterState.builder(oldState);, +        PersistentTasksInProgress newTasks = new PersistentTasksInProgress(oldTasks.getCurrentId(), Collections.unmodifiableMap(taskMap));, +        return builder.putCustom(PersistentTasksInProgress.TYPE, newTasks).build();, +    }, +, +    private ClusterState createPersistentTask(ClusterState oldState, PersistentTaskInProgress<?> newTask) {, +        PersistentTasksInProgress oldTasks = oldState.custom(PersistentTasksInProgress.TYPE);, +        Map<Long, PersistentTaskInProgress<?>> taskMap = new HashMap<>();, +        if (oldTasks != null) {, +            taskMap.putAll(oldTasks.taskMap());, +        }, +        taskMap.put(newTask.getId(), newTask);, +        ClusterState.Builder builder = ClusterState.builder(oldState);, +        PersistentTasksInProgress newTasks = new PersistentTasksInProgress(newTask.getId(), Collections.unmodifiableMap(taskMap));, +        return builder.putCustom(PersistentTasksInProgress.TYPE, newTasks).build();, +    }, +, +    private ClusterState removePersistentTask(ClusterState oldState, long taskId) {, +        PersistentTasksInProgress oldTasks = oldState.custom(PersistentTasksInProgress.TYPE);, +        if (oldTasks != null) {, +            Map<Long, PersistentTaskInProgress<?>> taskMap = new HashMap<>();, +            ClusterState.Builder builder = ClusterState.builder(oldState);, +            taskMap.putAll(oldTasks.taskMap());, +            taskMap.remove(taskId);, +            PersistentTasksInProgress newTasks =, +                    new PersistentTasksInProgress(oldTasks.getCurrentId(), Collections.unmodifiableMap(taskMap));, +            return builder.putCustom(PersistentTasksInProgress.TYPE, newTasks).build();, +            // no tasks - nothing to do, +                for (PersistentTaskInProgress<?> taskInProgress : tasks.tasks()) {, +                    for (PersistentTaskInProgress<?> task : tasks.tasks()) {, +                                newClusterState = updatePersistentTask(newClusterState, new PersistentTaskInProgress<>(task, executorNode));, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionCoordinator.java, +                for (PersistentTaskInProgress<?> taskInProgress : tasks.tasks()) {, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTaskClusterService.java, +import org.elasticsearch.persistent.PersistentTasksInProgress.PersistentTaskInProgress;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +                long nextId;, +                return createPersistentTask(currentState, new PersistentTaskInProgress<>(nextId, action, request, executorNodeId));, +                    PersistentTaskInProgress<?> taskInProgress = tasksInProgress.getTask(id);, +                    if (taskInProgress != null) {, +                        return updatePersistentTask(currentState, new PersistentTaskInProgress<>(taskInProgress, executorNode));, +                    return currentState;, +                    return removePersistentTask(currentState, id);, +, +                PersistentTaskInProgress<?> task = tasksInProgress.getTask(id);, +                if (task != null) {, +                    return updatePersistentTask(currentState, new PersistentTaskInProgress<>(task, status));, +                return currentState;, +    private ClusterState updatePersistentTask(ClusterState oldState, PersistentTaskInProgress<?> newTask) {, +        Map<Long, PersistentTaskInProgress<?>> taskMap = new HashMap<>();, +        taskMap.putAll(oldTasks.taskMap());, +        taskMap.put(newTask.getId(), newTask);, +        ClusterState.Builder builder = ClusterState.builder(oldState);, +        PersistentTasksInProgress newTasks = new PersistentTasksInProgress(oldTasks.getCurrentId(), Collections.unmodifiableMap(taskMap));, +        return builder.putCustom(PersistentTasksInProgress.TYPE, newTasks).build();, +    }, +, +    private ClusterState createPersistentTask(ClusterState oldState, PersistentTaskInProgress<?> newTask) {, +        PersistentTasksInProgress oldTasks = oldState.custom(PersistentTasksInProgress.TYPE);, +        Map<Long, PersistentTaskInProgress<?>> taskMap = new HashMap<>();, +        if (oldTasks != null) {, +            taskMap.putAll(oldTasks.taskMap());, +        }, +        taskMap.put(newTask.getId(), newTask);, +        ClusterState.Builder builder = ClusterState.builder(oldState);, +        PersistentTasksInProgress newTasks = new PersistentTasksInProgress(newTask.getId(), Collections.unmodifiableMap(taskMap));, +        return builder.putCustom(PersistentTasksInProgress.TYPE, newTasks).build();, +    }, +, +    private ClusterState removePersistentTask(ClusterState oldState, long taskId) {, +        PersistentTasksInProgress oldTasks = oldState.custom(PersistentTasksInProgress.TYPE);, +        if (oldTasks != null) {, +            Map<Long, PersistentTaskInProgress<?>> taskMap = new HashMap<>();]