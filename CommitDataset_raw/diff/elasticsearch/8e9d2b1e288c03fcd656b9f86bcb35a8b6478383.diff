[+++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RepositoryPlugin.java, +            S3ClientSettings.USE_THROTTLE_RETRIES_SETTING,, +            S3Repository.ACCESS_KEY_SETTING,, +            S3Repository.SECRET_KEY_SETTING);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RepositoryPlugin.java, +            S3ClientSettings.USE_THROTTLE_RETRIES_SETTING,, +            S3Repository.ACCESS_KEY_SETTING,, +            S3Repository.SECRET_KEY_SETTING);, +++ b/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobStoreRepositoryTests.java, +, +import org.elasticsearch.client.node.NodeClient;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.rest.AbstractRestChannel;, +import org.elasticsearch.rest.RestController;, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.rest.RestResponse;, +import org.elasticsearch.rest.action.admin.cluster.RestGetRepositoriesAction;, +import org.elasticsearch.test.rest.FakeRestRequest;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicReference;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.not;, +import static org.mockito.Mockito.mock;, +                .put(S3Repository.STORAGE_CLASS_SETTING.getKey(), storageClass), +                .put(S3Repository.ACCESS_KEY_SETTING.getKey(), "not_used_but_this_is_a_secret"), +                .put(S3Repository.SECRET_KEY_SETTING.getKey(), "not_used_but_this_is_a_secret")));, +, +    public void testInsecureRepositoryCredentials() throws Exception {, +        final String repositoryName = "testInsecureRepositoryCredentials";, +        createTestRepository(repositoryName);, +        final NodeClient nodeClient = internalCluster().getInstance(NodeClient.class);, +        final RestGetRepositoriesAction getRepoAction = new RestGetRepositoriesAction(Settings.EMPTY, mock(RestController.class),, +                internalCluster().getInstance(SettingsFilter.class));, +        final RestRequest getRepoRequest = new FakeRestRequest();, +        getRepoRequest.params().put("repository", repositoryName);, +        final CountDownLatch getRepoLatch = new CountDownLatch(1);, +        final AtomicReference<AssertionError> getRepoError = new AtomicReference<>();, +        getRepoAction.handleRequest(getRepoRequest, new AbstractRestChannel(getRepoRequest, true) {, +            @Override, +            public void sendResponse(RestResponse response) {, +                try {, +                    assertThat(response.content().utf8ToString(), not(containsString("not_used_but_this_is_a_secret")));, +                } catch (final AssertionError ex) {, +                    getRepoError.set(ex);, +                }, +                getRepoLatch.countDown();, +            }, +        }, nodeClient);, +        getRepoLatch.await();, +        if (getRepoError.get() != null) {, +            throw getRepoError.get();, +        }, +    }, +]