[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +import org.elasticsearch.common.Priority;, +    private Priority waitForEvents = null;, +    public ClusterHealthRequest waitForEvents(Priority waitForEvents) {, +        this.waitForEvents = waitForEvents;, +        return this;, +    }, +, +    public Priority waitForEvents() {, +        return this.waitForEvents;, +    }, +, +        if (in.readBoolean()) {, +            waitForEvents = Priority.fromByte(in.readByte());, +        }, +        if (waitForEvents == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            out.writeByte(waitForEvents.value());, +        }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +import org.elasticsearch.common.Priority;, +    private Priority waitForEvents = null;, +    public ClusterHealthRequest waitForEvents(Priority waitForEvents) {, +        this.waitForEvents = waitForEvents;, +        return this;, +    }, +, +    public Priority waitForEvents() {, +        return this.waitForEvents;, +    }, +, +        if (in.readBoolean()) {, +            waitForEvents = Priority.fromByte(in.readByte());, +        }, +        if (waitForEvents == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            out.writeByte(waitForEvents.value());, +        }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequestBuilder.java, +import org.elasticsearch.common.Priority;, +    public ClusterHealthRequestBuilder setWaitForEvents(Priority waitForEvents) {, +        request.waitForEvents(waitForEvents);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +import org.elasticsearch.common.Priority;, +    private Priority waitForEvents = null;, +    public ClusterHealthRequest waitForEvents(Priority waitForEvents) {, +        this.waitForEvents = waitForEvents;, +        return this;, +    }, +, +    public Priority waitForEvents() {, +        return this.waitForEvents;, +    }, +, +        if (in.readBoolean()) {, +            waitForEvents = Priority.fromByte(in.readByte());, +        }, +        if (waitForEvents == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            out.writeByte(waitForEvents.value());, +        }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequestBuilder.java, +import org.elasticsearch.common.Priority;, +    public ClusterHealthRequestBuilder setWaitForEvents(Priority waitForEvents) {, +        request.waitForEvents(waitForEvents);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, +        long endTime = System.currentTimeMillis() + request.timeout().millis();, +, +        if (request.waitForEvents() != null) {, +            final CountDownLatch latch = new CountDownLatch(1);, +            clusterService.submitStateUpdateTask("cluster_reroute (api)", request.waitForEvents(), new ProcessedClusterStateUpdateTask() {, +                @Override, +                public ClusterState execute(ClusterState currentState) {, +                    return currentState;, +                }, +, +                @Override, +                public void clusterStateProcessed(ClusterState clusterState) {, +                    latch.countDown();, +                }, +            });, +, +            try {, +                latch.await(request.timeout().millis(), TimeUnit.MILLISECONDS);]