[+++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.aggregations.bucket;, +, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.Scorer;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.action.search.SearchPhaseExecutionException;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.joda.DateMathParser;, +import org.elasticsearch.common.joda.Joda;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.mapper.core.DateFieldMapper;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.script.CompiledScript;, +import org.elasticsearch.script.ExecutableScript;, +import org.elasticsearch.script.LeafSearchScript;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptEngineService;, +import org.elasticsearch.script.ScriptModule;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.script.ScriptService.ScriptType;, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;, +import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;, +import org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket;, +import org.elasticsearch.search.aggregations.metrics.max.Max;, +import org.elasticsearch.search.aggregations.metrics.sum.Sum;, +import org.elasticsearch.search.lookup.LeafSearchLookup;, +import org.elasticsearch.search.lookup.SearchLookup;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.hamcrest.Matchers;, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +import org.joda.time.format.DateTimeFormat;, +import org.junit.After;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.dateHistogram;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.max;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.stats;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.sum;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.core.IsNull.notNullValue;, +, +/**, + *, + */, +@ESIntegTestCase.SuiteScopeTestCase, +public class DateHistogramIT extends ESIntegTestCase {, +, +    private DateTime date(int month, int day) {, +        return new DateTime(2012, month, day, 0, 0, DateTimeZone.UTC);, +    }, +, +    private DateTime date(String date) {, +        return DateFieldMapper.Defaults.DATE_TIME_FORMATTER.parser().parseDateTime(date);, +    }, +, +    private static String format(DateTime date, String pattern) {]