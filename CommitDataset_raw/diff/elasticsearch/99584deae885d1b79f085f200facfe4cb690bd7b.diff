[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +    private final DocumentParser documentParser;, +, +        this.documentParser = new DocumentParser(index, indexSettings, docMapperParser, this);, +        return documentParser.parseDocument(source, null);, +    // NOTE: do not use this method, it will be removed in the future once, +    // https://github.com/elastic/elasticsearch/issues/10736 is done (MLT api is the only user of this listener), +        return documentParser.parseDocument(source, listener);, +        return DocumentParser.transformSourceAsMap(mapping, sourceAsMap);, +        documentParser.close();, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +    private final DocumentParser documentParser;, +, +        this.documentParser = new DocumentParser(index, indexSettings, docMapperParser, this);, +        return documentParser.parseDocument(source, null);, +    // NOTE: do not use this method, it will be removed in the future once, +    // https://github.com/elastic/elasticsearch/issues/10736 is done (MLT api is the only user of this listener), +        return documentParser.parseDocument(source, listener);, +        return DocumentParser.transformSourceAsMap(mapping, sourceAsMap);, +        documentParser.close();, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper;, +, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Sets;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.index.IndexableField;, +import org.apache.lucene.util.CloseableThreadLocal;, +import org.elasticsearch.ElasticsearchIllegalStateException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.joda.FormatDateTimeFormatter;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.mapper.internal.TypeFieldMapper;, +import org.elasticsearch.index.mapper.internal.UidFieldMapper;, +import org.elasticsearch.index.mapper.object.ArrayValueMapperParser;, +import org.elasticsearch.index.mapper.object.ObjectMapper;, +import org.elasticsearch.index.mapper.object.RootObjectMapper;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.Collections;, +import java.util.Map;, +import java.util.Set;, +, +/** A parser for documents, given mappings from a DocumentMapper */, +class DocumentParser implements Closeable {, +, +    private CloseableThreadLocal<ParseContext.InternalParseContext> cache = new CloseableThreadLocal<ParseContext.InternalParseContext>() {, +        @Override, +        protected ParseContext.InternalParseContext initialValue() {, +            return new ParseContext.InternalParseContext(index, indexSettings, docMapperParser, docMapper, new ContentPath(0));, +        }, +    };, +, +    private String index;, +    private Settings indexSettings;, +    private DocumentMapperParser docMapperParser;, +    private DocumentMapper docMapper;, +, +    public DocumentParser(String index, Settings indexSettings, DocumentMapperParser docMapperParser, DocumentMapper docMapper) {, +        this.index = index;, +        this.indexSettings = indexSettings;, +        this.docMapperParser = docMapperParser;, +        this.docMapper = docMapper;, +    }, +, +    public ParsedDocument parseDocument(SourceToParse source, @Nullable DocumentMapper.ParseListener listener) throws MapperParsingException {, +        ParseContext.InternalParseContext context = cache.get();, +, +        final Mapping mapping = docMapper.mapping();, +        if (source.type() != null && !source.type().equals(docMapper.type())) {, +            throw new MapperParsingException("Type mismatch, provide type [" + source.type() + "] but mapper is of type [" + docMapper.type() + "]");, +        }, +        source.type(docMapper.type());, +]