[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +, +    /**, +     * Creates a new transport client with pre-installed plugins., +     * @param settings the settings passed to this transport client, +     * @param plugins an optional array of additional plugins to run with this client, +     */, +, +    /**, +     * Creates a new transport client with pre-installed plugins., +     * @param settings the settings passed to this transport client, +     * @param plugins a collection of additional plugins to run with this client, +     */, +        this(settings, plugins, null);, +    }, +, +    /**, +     * Creates a new transport client with pre-installed plugins., +     * @param settings the settings passed to this transport client, +     * @param plugins a collection of additional plugins to run with this client, +     * @param hostFailureListener a failure listener that is invoked if a node is disconnected. This can be <code>null</code>, +     */, +    public PreBuiltTransportClient(Settings settings, Collection<Class<? extends Plugin>> plugins,, +                                   HostFailureListener hostFailureListener) {, +        super(settings, Settings.EMPTY, addPlugins(plugins, PRE_INSTALLED_PLUGINS), hostFailureListener);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +, +    /**, +     * Creates a new transport client with pre-installed plugins., +     * @param settings the settings passed to this transport client, +     * @param plugins an optional array of additional plugins to run with this client, +     */, +, +    /**, +     * Creates a new transport client with pre-installed plugins., +     * @param settings the settings passed to this transport client, +     * @param plugins a collection of additional plugins to run with this client, +     */, +        this(settings, plugins, null);, +    }, +, +    /**, +     * Creates a new transport client with pre-installed plugins., +     * @param settings the settings passed to this transport client, +     * @param plugins a collection of additional plugins to run with this client, +     * @param hostFailureListener a failure listener that is invoked if a node is disconnected. This can be <code>null</code>, +     */, +    public PreBuiltTransportClient(Settings settings, Collection<Class<? extends Plugin>> plugins,, +                                   HostFailureListener hostFailureListener) {, +        super(settings, Settings.EMPTY, addPlugins(plugins, PRE_INSTALLED_PLUGINS), hostFailureListener);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.unit.TimeValue;, +import static org.elasticsearch.common.unit.TimeValue.timeValueSeconds;, +, +    public static final Setting<TimeValue> CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL =, +        Setting.positiveTimeSetting("client.transport.nodes_sampler_interval", timeValueSeconds(5), Setting.Property.NodeScope);, +    public static final Setting<TimeValue> CLIENT_TRANSPORT_PING_TIMEOUT =, +        Setting.positiveTimeSetting("client.transport.ping_timeout", timeValueSeconds(5), Setting.Property.NodeScope);, +    public static final Setting<Boolean> CLIENT_TRANSPORT_IGNORE_CLUSTER_NAME =, +        Setting.boolSetting("client.transport.ignore_cluster_name", false, Setting.Property.NodeScope);, +    public static final Setting<Boolean> CLIENT_TRANSPORT_SNIFF =, +        Setting.boolSetting("client.transport.sniff", false, Setting.Property.NodeScope);, +, +                                                Collection<Class<? extends Plugin>> plugins, HostFailureListener failureListner) {, +                new TransportClientNodesService(settings, transportService, threadPool, failureListner == null, +                    ? (t, e) -> {} : failureListner);, +        this(buildTemplate(settings, Settings.EMPTY, plugins, null));, +    protected TransportClient(Settings settings, Settings defaultSettings, Collection<Class<? extends Plugin>> plugins,, +                              HostFailureListener hostFailureListener) {, +        this(buildTemplate(settings, defaultSettings, plugins, hostFailureListener));, +, +    /**, +     * Listener that allows to be notified whenever a node failure / disconnect happens, +     */, +    @FunctionalInterface, +    public interface HostFailureListener {, +        /**, +         * Called once a node disconnect is detected., +         * @param node the node that has been disconnected, +         * @param ex the exception causing the disconnection, +         */, +        void onNodeDisconnected(DiscoveryNode node, Exception ex);, +    }, +, +    // pkg private for testing, +    TransportClientNodesService getNodesService() {, +        return nodesService;, +    }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +, +    /**, +     * Creates a new transport client with pre-installed plugins., +     * @param settings the settings passed to this transport client, +     * @param plugins an optional array of additional plugins to run with this client, +     */, +]