[+++ b/src/main/java/org/apache/lucene/index/memory/ReusableMemoryIndex.java, +package org.apache.lucene.index.memory;, +, +import org.apache.lucene.search.IndexSearcher;, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +/**, + * This class overwrites {@link MemoryIndex} to make the reuse constructor , + * visible. , + */, +public final class ReusableMemoryIndex extends MemoryIndex {, +    private final long maxReuseBytes;, +    public ReusableMemoryIndex(boolean storeOffsets, long maxReusedBytes) {, +        super(storeOffsets, maxReusedBytes);, +        this.maxReuseBytes = maxReusedBytes;, +    }, +    , +    public long getMaxReuseBytes() {, +        return maxReuseBytes;, +    }, +, +}, +++ b/src/main/java/org/apache/lucene/index/memory/ReusableMemoryIndex.java, +package org.apache.lucene.index.memory;, +, +import org.apache.lucene.search.IndexSearcher;, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +/**, + * This class overwrites {@link MemoryIndex} to make the reuse constructor , + * visible. , + */, +public final class ReusableMemoryIndex extends MemoryIndex {, +    private final long maxReuseBytes;, +    public ReusableMemoryIndex(boolean storeOffsets, long maxReusedBytes) {, +        super(storeOffsets, maxReusedBytes);, +        this.maxReuseBytes = maxReusedBytes;, +    }, +    , +    public long getMaxReuseBytes() {, +        return maxReuseBytes;, +    }, +, +}, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorExecutor.java, +import org.apache.lucene.index.memory.ReusableMemoryIndex;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.settings.IndexSettingsService;, +import java.util.Queue;, +import java.util.concurrent.ArrayBlockingQueue;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +    /**, +     * Realtime index setting to control the number of MemoryIndex instances used to handle, +     * Percolate requests. The default is <tt>10</tt>, +     */, +    public static final String PERCOLATE_POOL_SIZE = "index.percolate.pool.size";, +    , +    /**, +     * Realtime index setting to control the upper memory reuse limit across all {@link MemoryIndex} instances, +     * pooled to handle Percolate requests. This is NOT a peak upper bound, percolate requests can use more memory than this upper, +     * bound. Yet, if all pooled {@link MemoryIndex} instances are returned to the pool this marks the upper memory bound use ]