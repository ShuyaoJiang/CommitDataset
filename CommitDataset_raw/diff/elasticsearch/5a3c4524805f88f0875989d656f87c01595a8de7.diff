[+++ b/docs/plugins/discovery-azure-classic.asciidoc, +The Azure Classic Discovery plugin uses the Azure Classic API to identify the, +addresses of seed hosts., +Azure VM discovery allows to use the Azure APIs to perform automatic discovery., +Here is a simple sample configuration:, +++ b/docs/plugins/discovery-azure-classic.asciidoc, +The Azure Classic Discovery plugin uses the Azure Classic API to identify the, +addresses of seed hosts., +Azure VM discovery allows to use the Azure APIs to perform automatic discovery., +Here is a simple sample configuration:, +++ b/docs/plugins/discovery-ec2.asciidoc, +The EC2 discovery plugin uses the https://github.com/aws/aws-sdk-java[AWS API], +to identify the addresses of seed hosts., +The plugin adds a seed hosts provider named `ec2`. This seed hosts provider, +finds other Elasticsearch instances in EC2 by querying the AWS metadata, +service.  Authentication is done using, +Role] credentials by default. To enable the plugin, configure {es} to use the, +`ec2` seed hosts provider:, +EC2 discovery supports a number of settings.  Some settings are sensitive and, +must be stored in the {ref}/secure-settings.html[elasticsearch keystore].  For, +example, to use explicit AWS access keys:, +The ec2 discovery plugin can also filter machines to include in the cluster, +based on tags (and not just groups). The settings to use include the, +`discovery.ec2.tag.` prefix. For example, if you defined a tag `stage` in EC2, +and set it to `dev`, setting `discovery.ec2.tag.stage` to `dev` will only, +filter instances with a tag key set to `stage`, and a value of `dev`. Adding, +multiple `discovery.ec2.tag` settings will require all of those tags to be set, +for the instance to be included., +One practical use for tag filtering is when an ec2 cluster contains many nodes, +that are not master-eligible {es} nodes. In this case, tagging the ec2, +instances that _are_ running the master-eligible {es} nodes, and then filtering, +by that tag, will help discovery to run more efficiently., +++ b/docs/plugins/discovery-azure-classic.asciidoc, +The Azure Classic Discovery plugin uses the Azure Classic API to identify the, +addresses of seed hosts., +Azure VM discovery allows to use the Azure APIs to perform automatic discovery., +Here is a simple sample configuration:, +++ b/docs/plugins/discovery-ec2.asciidoc, +The EC2 discovery plugin uses the https://github.com/aws/aws-sdk-java[AWS API], +to identify the addresses of seed hosts., +The plugin adds a seed hosts provider named `ec2`. This seed hosts provider, +finds other Elasticsearch instances in EC2 by querying the AWS metadata, +service.  Authentication is done using, +Role] credentials by default. To enable the plugin, configure {es} to use the, +`ec2` seed hosts provider:, +EC2 discovery supports a number of settings.  Some settings are sensitive and, +must be stored in the {ref}/secure-settings.html[elasticsearch keystore].  For, +example, to use explicit AWS access keys:, +The ec2 discovery plugin can also filter machines to include in the cluster, +based on tags (and not just groups). The settings to use include the, +`discovery.ec2.tag.` prefix. For example, if you defined a tag `stage` in EC2, +and set it to `dev`, setting `discovery.ec2.tag.stage` to `dev` will only, +filter instances with a tag key set to `stage`, and a value of `dev`. Adding, +multiple `discovery.ec2.tag` settings will require all of those tags to be set, +for the instance to be included., +One practical use for tag filtering is when an ec2 cluster contains many nodes, +that are not master-eligible {es} nodes. In this case, tagging the ec2, +instances that _are_ running the master-eligible {es} nodes, and then filtering, +by that tag, will help discovery to run more efficiently., +++ b/docs/plugins/discovery-gce.asciidoc, +The Google Compute Engine Discovery plugin uses the GCE API to identify the, +addresses of seed hosts., +Google Compute Engine VM discovery allows to use the google APIs to perform, +automatic discovery of seed hosts. Here is a simple sample configuration:, +One practical use for tag filtering is when a GCE cluster contains many nodes, +that are not master-eligible {es} nodes. In this case, tagging the GCE, +instances that _are_ running the master-eligible {es} nodes, and then filtering, +by that tag, will help discovery to run more efficiently., +++ b/docs/plugins/discovery-azure-classic.asciidoc, +The Azure Classic Discovery plugin uses the Azure Classic API to identify the, +addresses of seed hosts., +Azure VM discovery allows to use the Azure APIs to perform automatic discovery., +Here is a simple sample configuration:, +++ b/docs/plugins/discovery-ec2.asciidoc, +The EC2 discovery plugin uses the https://github.com/aws/aws-sdk-java[AWS API], +to identify the addresses of seed hosts., +The plugin adds a seed hosts provider named `ec2`. This seed hosts provider, +finds other Elasticsearch instances in EC2 by querying the AWS metadata, +service.  Authentication is done using, +Role] credentials by default. To enable the plugin, configure {es} to use the, +`ec2` seed hosts provider:, +EC2 discovery supports a number of settings.  Some settings are sensitive and, +must be stored in the {ref}/secure-settings.html[elasticsearch keystore].  For, +example, to use explicit AWS access keys:, +The ec2 discovery plugin can also filter machines to include in the cluster, +based on tags (and not just groups). The settings to use include the, +`discovery.ec2.tag.` prefix. For example, if you defined a tag `stage` in EC2, +and set it to `dev`, setting `discovery.ec2.tag.stage` to `dev` will only, +filter instances with a tag key set to `stage`, and a value of `dev`. Adding, +multiple `discovery.ec2.tag` settings will require all of those tags to be set, +for the instance to be included., +One practical use for tag filtering is when an ec2 cluster contains many nodes, +that are not master-eligible {es} nodes. In this case, tagging the ec2, +instances that _are_ running the master-eligible {es} nodes, and then filtering, +by that tag, will help discovery to run more efficiently., +++ b/docs/plugins/discovery-gce.asciidoc, +The Google Compute Engine Discovery plugin uses the GCE API to identify the, +addresses of seed hosts., +Google Compute Engine VM discovery allows to use the google APIs to perform, +automatic discovery of seed hosts. Here is a simple sample configuration:]