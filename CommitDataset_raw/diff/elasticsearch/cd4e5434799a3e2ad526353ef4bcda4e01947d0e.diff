[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +            DiscoveryNode discoveryNode = selectNode(logger, request.getDatafeedId(), clusterState);, +            throw new ElasticsearchStatusException("datafeed [{}] already started, expected datafeed state [{}], but got [{}]",, +                    RestStatus.CONFLICT, datafeedId, DatafeedState.STOPPED, DatafeedState.STARTED);, +    public static DiscoveryNode selectNode(Logger logger, String datafeedId, ClusterState clusterState) {, +        DatafeedConfig datafeed = mlMetadata.getDatafeed(datafeedId);, +        PersistentTaskInProgress<?> jobTask = MlMetadata.getJobTask(datafeed.getJobId(), tasks);, +        if (jobTask == null) {, +            logger.debug("cannot start datafeed [{}], job task doesn't yet exist", datafeed.getId());, +        if (jobTask.needsReassignment(nodes)) {, +            logger.debug("cannot start datafeed [{}], job [{}] is unassigned or unassigned to a non existing node",, +                    datafeed.getId(), datafeed.getJobId());, +            return null;, +        }, +        if (jobTask.getStatus() != JobState.OPENED) {, +            // lets try again later when the job has been opened:, +            logger.debug("cannot start datafeed [{}], because job's [{}] state is [{}] while state [{}] is required",, +                    datafeed.getId(), datafeed.getJobId(), jobTask.getStatus(), JobState.OPENED);, +            return null;, +        }, +        return nodes.get(jobTask.getExecutorNode());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +            DiscoveryNode discoveryNode = selectNode(logger, request.getDatafeedId(), clusterState);, +            throw new ElasticsearchStatusException("datafeed [{}] already started, expected datafeed state [{}], but got [{}]",, +                    RestStatus.CONFLICT, datafeedId, DatafeedState.STOPPED, DatafeedState.STARTED);, +    public static DiscoveryNode selectNode(Logger logger, String datafeedId, ClusterState clusterState) {, +        DatafeedConfig datafeed = mlMetadata.getDatafeed(datafeedId);, +        PersistentTaskInProgress<?> jobTask = MlMetadata.getJobTask(datafeed.getJobId(), tasks);, +        if (jobTask == null) {, +            logger.debug("cannot start datafeed [{}], job task doesn't yet exist", datafeed.getId());, +        if (jobTask.needsReassignment(nodes)) {, +            logger.debug("cannot start datafeed [{}], job [{}] is unassigned or unassigned to a non existing node",, +                    datafeed.getId(), datafeed.getJobId());, +            return null;, +        }, +        if (jobTask.getStatus() != JobState.OPENED) {, +            // lets try again later when the job has been opened:, +            logger.debug("cannot start datafeed [{}], because job's [{}] state is [{}] while state [{}] is required",, +                    datafeed.getId(), datafeed.getJobId(), jobTask.getStatus(), JobState.OPENED);, +            return null;, +        }, +        return nodes.get(jobTask.getExecutorNode());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/TransportJobTaskAction.java, +        ClusterState state = clusterService.state();, +        PersistentTasksInProgress tasks = state.metaData().custom(PersistentTasksInProgress.TYPE);, +            logger.warn("Unexpected job state based on cluster state version [{}]", state.getVersion());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +            DiscoveryNode discoveryNode = selectNode(logger, request.getDatafeedId(), clusterState);, +            throw new ElasticsearchStatusException("datafeed [{}] already started, expected datafeed state [{}], but got [{}]",, +                    RestStatus.CONFLICT, datafeedId, DatafeedState.STOPPED, DatafeedState.STARTED);, +    public static DiscoveryNode selectNode(Logger logger, String datafeedId, ClusterState clusterState) {, +        DatafeedConfig datafeed = mlMetadata.getDatafeed(datafeedId);, +        PersistentTaskInProgress<?> jobTask = MlMetadata.getJobTask(datafeed.getJobId(), tasks);, +        if (jobTask == null) {, +            logger.debug("cannot start datafeed [{}], job task doesn't yet exist", datafeed.getId());, +        if (jobTask.needsReassignment(nodes)) {, +            logger.debug("cannot start datafeed [{}], job [{}] is unassigned or unassigned to a non existing node",, +                    datafeed.getId(), datafeed.getJobId());, +            return null;, +        }, +        if (jobTask.getStatus() != JobState.OPENED) {, +            // lets try again later when the job has been opened:, +            logger.debug("cannot start datafeed [{}], because job's [{}] state is [{}] while state [{}] is required",, +                    datafeed.getId(), datafeed.getJobId(), jobTask.getStatus(), JobState.OPENED);, +            return null;, +        }, +        return nodes.get(jobTask.getExecutorNode());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/TransportJobTaskAction.java, +        ClusterState state = clusterService.state();, +        PersistentTasksInProgress tasks = state.metaData().custom(PersistentTasksInProgress.TYPE);, +            logger.warn("Unexpected job state based on cluster state version [{}]", state.getVersion());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobRunner.java, +import org.elasticsearch.ElasticsearchStatusException;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.rest.RestStatus;, +        String datafeedId = task.getDatafeedId();, +        ClusterState state = clusterService.state();, +        // CS on master node can be ahead on the node where job and datafeed tasks run,, +        // so check again and fail if in case of unexpected cs. Persist tasks will retry later then., +        if (StartDatafeedAction.selectNode(logger, datafeedId, state) == null) {, +            handler.accept(new ElasticsearchStatusException("Local cs [{}] isn't ready to start datafeed [{}] yet",, +                    RestStatus.CONFLICT, state.getVersion(), datafeedId));, +            return;, +        }, +        logger.info("Attempt to start datafeed based on cluster state version [{}]", state.getVersion());, +        MlMetadata mlMetadata = state.metaData().custom(MlMetadata.TYPE);, +        DatafeedConfig datafeed = mlMetadata.getDatafeed(datafeedId);, +            updateDatafeedState(task.getPersistentTaskId(), DatafeedState.STARTED, e -> {, +                if (e != null) {, +                    handler.accept(e);, +                } else {, +                }, +            });, +    private void updateDatafeedState(long persistentTaskId, DatafeedState datafeedState, Consumer<Exception> handler) {, +        UpdatePersistentTaskStatusAction.Request request = new UpdatePersistentTaskStatusAction.Request(persistentTaskId, datafeedState);, +        client.execute(UpdatePersistentTaskStatusAction.INSTANCE, request, ActionListener.wrap(r -> {, +            handler.accept(null);, +        }, handler));, +    }, +]