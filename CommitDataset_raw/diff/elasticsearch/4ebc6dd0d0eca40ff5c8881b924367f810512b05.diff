[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.delete.DeleteRequest;, +import org.elasticsearch.action.delete.DeleteResponse;, +import java.util.Collections;, +    private <Req extends ActionRequest, Resp> Resp performRequestAndParseEntity(Req request,, +                                                                            CheckedFunction<Req, Request, IOException> requestConverter,, +                                                                            CheckedFunction<XContentParser, Resp, IOException> entityParser,, +                                                                            Set<Integer> ignores, Header... headers) throws IOException {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.delete.DeleteRequest;, +import org.elasticsearch.action.delete.DeleteResponse;, +import java.util.Collections;, +    private <Req extends ActionRequest, Resp> Resp performRequestAndParseEntity(Req request,, +                                                                            CheckedFunction<Req, Request, IOException> requestConverter,, +                                                                            CheckedFunction<XContentParser, Resp, IOException> entityParser,, +                                                                            Set<Integer> ignores, Header... headers) throws IOException {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.elasticsearch.ElasticsearchStatusException;, +import org.elasticsearch.action.delete.DeleteResponse;, +            assertEquals("Elasticsearch exception [type=version_conflict_engine_exception, reason=[type][" + docId + "]: " +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.delete.DeleteRequest;, +import org.elasticsearch.action.delete.DeleteResponse;, +import java.util.Collections;, +    private <Req extends ActionRequest, Resp> Resp performRequestAndParseEntity(Req request,, +                                                                            CheckedFunction<Req, Request, IOException> requestConverter,, +                                                                            CheckedFunction<XContentParser, Resp, IOException> entityParser,, +                                                                            Set<Integer> ignores, Header... headers) throws IOException {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.elasticsearch.ElasticsearchStatusException;, +import org.elasticsearch.action.delete.DeleteResponse;, +            assertEquals("Elasticsearch exception [type=version_conflict_engine_exception, reason=[type][" + docId + "]: " +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestTests.java, +        setRandomTimeout(deleteRequest, expectedParams);, +        setRandomRefreshPolicy(deleteRequest, expectedParams);, +        setRandomVersion(deleteRequest, expectedParams);, +        setRandomVersionType(deleteRequest, expectedParams);, +        assertNull(request.entity);, +        setRandomTimeout(indexRequest, expectedParams);, +        setRandomRefreshPolicy(indexRequest, expectedParams);, +, +        // There is some logic around _create endpoint and version/version type, +        if (indexRequest.opType() == DocWriteRequest.OpType.CREATE) {, +            indexRequest.version(randomFrom(Versions.MATCH_ANY, Versions.MATCH_DELETED));, +            expectedParams.put("version", Long.toString(Versions.MATCH_DELETED));, +        } else {, +            setRandomVersion(indexRequest, expectedParams);, +            setRandomVersionType(indexRequest, expectedParams);, +        }, +    private static void setRandomTimeout(ReplicationRequest<?> request, Map<String, String> expectedParams) {, +    }, +    private static void setRandomRefreshPolicy(ReplicatedWriteRequest<?> request, Map<String, String> expectedParams) {, +    private static void setRandomVersion(DocWriteRequest<?> request, Map<String, String> expectedParams) {, +    }, +, +    private static void setRandomVersionType(DocWriteRequest<?> request, Map<String, String> expectedParams) {]