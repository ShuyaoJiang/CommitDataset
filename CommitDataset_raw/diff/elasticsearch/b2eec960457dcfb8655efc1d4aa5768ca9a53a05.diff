[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkIndexByScrollResponseContentListener.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.search.ShardSearchFailure;, +        /*, +         * Return the highest numbered rest status under the assumption that higher numbered statuses are "more error" and thus more, +         * interesting to the user., +         */, +        for (ShardSearchFailure failure: response.getSearchFailures()) {, +            RestStatus failureStatus = ExceptionsHelper.status(failure.getCause());, +            if (failureStatus.getStatus() > status.getStatus()) {, +                status = failureStatus;, +            }, +        }, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkIndexByScrollResponseContentListener.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.search.ShardSearchFailure;, +        /*, +         * Return the highest numbered rest status under the assumption that higher numbered statuses are "more error" and thus more, +         * interesting to the user., +         */, +        for (ShardSearchFailure failure: response.getSearchFailures()) {, +            RestStatus failureStatus = ExceptionsHelper.status(failure.getCause());, +            if (failureStatus.getStatus() > status.getStatus()) {, +                status = failureStatus;, +            }, +        }, +++ b/modules/reindex/src/test/resources/rest-api-spec/test/reindex/10_basic.yaml, +  # Use a regex so we don't mind if the version isn't always 1. Sometimes it comes out 2., +  - match: {failures.0.cause.reason: "/\\[foo\\]\\[1\\]:.version.conflict,.document.already.exists.\\(current.version.\\[\\d+\\]\\)/"}, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkIndexByScrollResponseContentListener.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.search.ShardSearchFailure;, +        /*, +         * Return the highest numbered rest status under the assumption that higher numbered statuses are "more error" and thus more, +         * interesting to the user., +         */, +        for (ShardSearchFailure failure: response.getSearchFailures()) {, +            RestStatus failureStatus = ExceptionsHelper.status(failure.getCause());, +            if (failureStatus.getStatus() > status.getStatus()) {, +                status = failureStatus;, +            }, +        }, +++ b/modules/reindex/src/test/resources/rest-api-spec/test/reindex/10_basic.yaml, +  # Use a regex so we don't mind if the version isn't always 1. Sometimes it comes out 2., +  - match: {failures.0.cause.reason: "/\\[foo\\]\\[1\\]:.version.conflict,.document.already.exists.\\(current.version.\\[\\d+\\]\\)/"}, +++ b/modules/reindex/src/test/resources/rest-api-spec/test/update-by-query/10_basic.yaml, +  # Use a regex so we don't mind if the current version isn't always 1. Sometimes it comes out 2., +  - match: {failures.0.cause.reason: "/\\[foo\\]\\[1\\]:.version.conflict,.current.version.\\[\\d+\\].is.different.than.the.one.provided.\\[\\d+\\]/"}, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkIndexByScrollResponseContentListener.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.search.ShardSearchFailure;, +        /*, +         * Return the highest numbered rest status under the assumption that higher numbered statuses are "more error" and thus more, +         * interesting to the user., +         */, +        for (ShardSearchFailure failure: response.getSearchFailures()) {, +            RestStatus failureStatus = ExceptionsHelper.status(failure.getCause());, +            if (failureStatus.getStatus() > status.getStatus()) {, +                status = failureStatus;, +            }, +        }, +++ b/modules/reindex/src/test/resources/rest-api-spec/test/reindex/10_basic.yaml, +  # Use a regex so we don't mind if the version isn't always 1. Sometimes it comes out 2., +  - match: {failures.0.cause.reason: "/\\[foo\\]\\[1\\]:.version.conflict,.document.already.exists.\\(current.version.\\[\\d+\\]\\)/"}, +++ b/modules/reindex/src/test/resources/rest-api-spec/test/update-by-query/10_basic.yaml, +  # Use a regex so we don't mind if the current version isn't always 1. Sometimes it comes out 2., +  - match: {failures.0.cause.reason: "/\\[foo\\]\\[1\\]:.version.conflict,.current.version.\\[\\d+\\].is.different.than.the.one.provided.\\[\\d+\\]/"}, +++ b/qa/smoke-test-reindex-with-groovy/src/test/resources/rest-api-spec/test/reindex/40_search_failures.yaml, +---, +"Response format search failures":, +  - do:, +      index:, +        index:   source, +        type:    foo, +        id:      1, +        body:    { "text": "test" }, +  - do:, +      indices.refresh: {}, +, +  - do:, +      catch: request, +      reindex:, +        body:, +          source:, +            index:   source, +            query:, +              script:, +                script: 1/0 # Divide by 0 to cause a search time exception, +          dest:, +            index:   dest, +  - match: {created: 0}, +  - match: {updated: 0}, +  - match: {version_conflicts: 0}, +  - match: {batches: 0}, +  - is_true: failures.0.shard, +  - match: {failures.0.index:  source}, +  - is_true: failures.0.node, +  - match: {failures.0.reason.type:   script_exception}, +  - match: {failures.0.reason.reason: "failed to run inline script [1/0] using lang [groovy]"}, +  - match: {failures.0.reason.caused_by.type:   arithmetic_exception}]