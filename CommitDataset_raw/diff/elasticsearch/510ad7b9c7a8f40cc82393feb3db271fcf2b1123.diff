[+++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +import org.apache.lucene.util.SetOnce;, +import java.io.Closeable;, +import java.io.PrintWriter;, +import java.io.StringWriter;, +public abstract class Command implements Closeable {, +    private final OptionSpec<Void> verboseOption =, +        parser.acceptsAll(Arrays.asList("v", "verbose"), "show verbose output").availableUnless(silentOption);, +    final SetOnce<Thread> shutdownHookThread = new SetOnce<>();, +, +        if (addShutdownHook()) {, +            shutdownHookThread.set(new Thread(() -> {, +                try {, +                    this.close();, +                } catch (final IOException e) {, +                    try (, +                        final StringWriter sw = new StringWriter();, +                        final PrintWriter pw = new PrintWriter(sw)) {, +                        e.printStackTrace(pw);, +                        terminal.println(sw.toString());, +                    } catch (final IOException impossible) {, +                        // StringWriter#close declares a checked IOException from the Closeable interface but the Javadocs for StringWriter, +                        // say that an exception here is impossible, +                        throw new AssertionError(impossible);, +                    }, +                }, +            }));, +            Runtime.getRuntime().addShutdownHook(shutdownHookThread.get());, +        }, +, +    /**, +     * Return whether or not to install the shutdown hook to cleanup resources on exit. This method should only be overridden in test, +     * classes., +     *, +     * @return whether or not to install the shutdown hook, +     */, +    protected boolean addShutdownHook() {, +        return true;, +    }, +, +    @Override, +    public void close() throws IOException {, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +import org.apache.lucene.util.SetOnce;, +import java.io.Closeable;, +import java.io.PrintWriter;, +import java.io.StringWriter;, +public abstract class Command implements Closeable {, +    private final OptionSpec<Void> verboseOption =, +        parser.acceptsAll(Arrays.asList("v", "verbose"), "show verbose output").availableUnless(silentOption);, +    final SetOnce<Thread> shutdownHookThread = new SetOnce<>();, +, +        if (addShutdownHook()) {, +            shutdownHookThread.set(new Thread(() -> {, +                try {, +                    this.close();, +                } catch (final IOException e) {, +                    try (, +                        final StringWriter sw = new StringWriter();, +                        final PrintWriter pw = new PrintWriter(sw)) {, +                        e.printStackTrace(pw);, +                        terminal.println(sw.toString());, +                    } catch (final IOException impossible) {, +                        // StringWriter#close declares a checked IOException from the Closeable interface but the Javadocs for StringWriter, +                        // say that an exception here is impossible, +                        throw new AssertionError(impossible);, +                    }, +                }, +            }));, +            Runtime.getRuntime().addShutdownHook(shutdownHookThread.get());, +        }, +, +    /**, +     * Return whether or not to install the shutdown hook to cleanup resources on exit. This method should only be overridden in test, +     * classes., +     *, +     * @return whether or not to install the shutdown hook, +     */, +    protected boolean addShutdownHook() {, +        return true;, +    }, +, +    @Override, +    public void close() throws IOException {, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        pathsToDeleteOnShutdown.add(zip);, +        pathsToDeleteOnShutdown.add(target);, +, +    private final List<Path> pathsToDeleteOnShutdown = new ArrayList<>();, +, +    @Override, +    public void close() throws IOException {, +        IOUtils.rm(pathsToDeleteOnShutdown.toArray(new Path[pathsToDeleteOnShutdown.size()]));, +    }]