[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        params.putParam("ccs_minimize_roundtrips", Boolean.toString(searchRequest.isCcsMinimizeRoundtrips()));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        params.putParam("ccs_minimize_roundtrips", Boolean.toString(searchRequest.isCcsMinimizeRoundtrips()));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +                REQUEST_BODY_CONTENT_TYPE.xContent(), consumer, null, multiSearchRequest.indicesOptions(), null, null, null, null,, +        if (randomBoolean()) {, +            searchRequest.setCcsMinimizeRoundtrips(randomBoolean());, +        }, +        expectedParams.put("ccs_minimize_roundtrips", Boolean.toString(searchRequest.isCcsMinimizeRoundtrips()));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        params.putParam("ccs_minimize_roundtrips", Boolean.toString(searchRequest.isCcsMinimizeRoundtrips()));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +                REQUEST_BODY_CONTENT_TYPE.xContent(), consumer, null, multiSearchRequest.indicesOptions(), null, null, null, null,, +        if (randomBoolean()) {, +            searchRequest.setCcsMinimizeRoundtrips(randomBoolean());, +        }, +        expectedParams.put("ccs_minimize_roundtrips", Boolean.toString(searchRequest.isCcsMinimizeRoundtrips()));, +++ b/docs/reference/modules/cross-cluster-search.asciidoc, +  "num_reduce_phases": 2,, +  "num_reduce_phases": 3,, +  "num_reduce_phases": 3,, +, +[float], +[[ccs-reduction]], +=== CCS reduction phase, +, +Cross-cluster search requests can be executed in two ways:, +, +- the CCS coordinating node minimizes network round-trips by sending one search, +request to each cluster. Each cluster performs the search independently,, +reducing and fetching results. Once the CCS node has received all the, +responses, it performs another reduction and returns the relevant results back, +to the user. This strategy is beneficial when there is network latency between, +the CCS coordinating node and the remote clusters involved, which is typically, +the case. A single request is sent to each remote cluster, at the cost of, +retrieving `from` + `size` already fetched results. This is the default, +strategy, used whenever possible. In case a scroll is provided, or inner hits, +are requested as part of field collapsing, this strategy is not supported hence, +network round-trips cannot be minimized and the following strategy is used, +instead., +, +- the CCS coordinating node sends a <<search-shards,search shards>> request to, +each remote cluster, in order to collect information about their corresponding, +remote indices involved in the search request and the shards where their data, +is located. Once each cluster has responded to such request, the search, +executes as if all shards were part of the same cluster. The coordinating node, +sends one request to each shard involved, each shard executes the query and, +returns its own results which are then reduced (and fetched, depending on the, +<<search-request-search-type, search type>>) by the CCS coordinating node., +This strategy may be beneficial whenever there is very low network latency, +between the CCS coordinating node and the remote clusters involved, as it, +treats all shards the same, at the cost of sending many requests to each remote, +cluster, which is problematic in presence of network latency., +, +The <<search-request-body, search API>> supports the `ccs_minimize_roundtrips`, +parameter, which defaults to `true` and can be set to `false` in case, +minimizing network round-trips is not desirable., +, +Note that all the communication between the nodes, regardless of which cluster, +they belong to and the selected reduce mode, happens through the, +<<modules-transport,transport layer>>., +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +        params.putParam("ccs_minimize_roundtrips", Boolean.toString(searchRequest.isCcsMinimizeRoundtrips()));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +                REQUEST_BODY_CONTENT_TYPE.xContent(), consumer, null, multiSearchRequest.indicesOptions(), null, null, null, null,, +        if (randomBoolean()) {, +            searchRequest.setCcsMinimizeRoundtrips(randomBoolean());, +        }, +        expectedParams.put("ccs_minimize_roundtrips", Boolean.toString(searchRequest.isCcsMinimizeRoundtrips()));, +++ b/docs/reference/modules/cross-cluster-search.asciidoc, +  "num_reduce_phases": 2,, +  "num_reduce_phases": 3,, +  "num_reduce_phases": 3,, +, +[float], +[[ccs-reduction]], +=== CCS reduction phase, +, +Cross-cluster search requests can be executed in two ways:, +, +- the CCS coordinating node minimizes network round-trips by sending one search, +request to each cluster. Each cluster performs the search independently,, +reducing and fetching results. Once the CCS node has received all the, +responses, it performs another reduction and returns the relevant results back, +to the user. This strategy is beneficial when there is network latency between, +the CCS coordinating node and the remote clusters involved, which is typically, +the case. A single request is sent to each remote cluster, at the cost of, +retrieving `from` + `size` already fetched results. This is the default, +strategy, used whenever possible. In case a scroll is provided, or inner hits, +are requested as part of field collapsing, this strategy is not supported hence, +network round-trips cannot be minimized and the following strategy is used, +instead., +, +- the CCS coordinating node sends a <<search-shards,search shards>> request to, +each remote cluster, in order to collect information about their corresponding, +remote indices involved in the search request and the shards where their data, +is located. Once each cluster has responded to such request, the search, +executes as if all shards were part of the same cluster. The coordinating node, +sends one request to each shard involved, each shard executes the query and]