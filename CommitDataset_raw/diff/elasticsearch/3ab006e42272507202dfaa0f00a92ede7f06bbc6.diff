[+++ b/core/src/test/java/org/elasticsearch/search/sort/GeoDistanceSortBuilderTests.java, +import org.elasticsearch.test.ESTestCase;, +            result.unit(ESTestCase.randomValueOtherThan(result.unit(), () -> randomFrom(DistanceUnit.values())));, +            result.sortMode(ESTestCase.randomValueOtherThan(SortMode.SUM, () -> randomFrom(SortMode.values())));, +            result.validation(ESTestCase.randomValueOtherThan(result.validation(), () -> randomFrom(GeoValidationMethod.values())));, +            result.unit(ESTestCase.randomValueOtherThan(result.unit(), () -> randomFrom(DistanceUnit.values())));, +            result.sortMode(ESTestCase.randomValueOtherThanMany(, +                    Arrays.asList(SortMode.SUM, result.sortMode()),, +                    () -> randomFrom(SortMode.values())));, +            result.validation(ESTestCase.randomValueOtherThan(result.validation(), () -> randomFrom(GeoValidationMethod.values())));, +++ b/core/src/test/java/org/elasticsearch/search/sort/GeoDistanceSortBuilderTests.java, +import org.elasticsearch.test.ESTestCase;, +            result.unit(ESTestCase.randomValueOtherThan(result.unit(), () -> randomFrom(DistanceUnit.values())));, +            result.sortMode(ESTestCase.randomValueOtherThan(SortMode.SUM, () -> randomFrom(SortMode.values())));, +            result.validation(ESTestCase.randomValueOtherThan(result.validation(), () -> randomFrom(GeoValidationMethod.values())));, +            result.unit(ESTestCase.randomValueOtherThan(result.unit(), () -> randomFrom(DistanceUnit.values())));, +            result.sortMode(ESTestCase.randomValueOtherThanMany(, +                    Arrays.asList(SortMode.SUM, result.sortMode()),, +                    () -> randomFrom(SortMode.values())));, +            result.validation(ESTestCase.randomValueOtherThan(result.validation(), () -> randomFrom(GeoValidationMethod.values())));, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +     * helper to get a random value in a certain range that's different from the input, +     */, +    public static <T> T randomValueOtherThanMany(Collection<T> input, Supplier<T> randomSupplier) {, +        T randomValue = null;, +        do {, +            randomValue = randomSupplier.get();, +        } while (input.contains(randomValue));, +        return randomValue;, +    }, +, +    /**]