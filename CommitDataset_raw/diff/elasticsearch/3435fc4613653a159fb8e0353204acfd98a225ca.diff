[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutUserRequest.java, +    private final @Nullable char[] passwordHash;, +     * Create or update a user in the native realm, with the user's new or updated password specified in plaintext., +     * @param user the user to be created or updated, +     * @param password the password of the user. The password array is not modified by this class., +     *                 It is the responsibility of the caller to clear the password after receiving, +     *                 a response., +     * @param enabled true if the user is enabled and allowed to access elasticsearch, +     * @param refreshPolicy the refresh policy for the request., +     */, +    public static PutUserRequest withPassword(User user, char[] password, boolean enabled, RefreshPolicy refreshPolicy) {, +        return new PutUserRequest(user, password, null, enabled, refreshPolicy);, +    }, +, +    /**, +     * Create or update a user in the native realm, with the user's new or updated password specified as a cryptographic hash., +     * @param user the user to be created or updated, +     * @param passwordHash the hash of the password of the user. It must be in the correct format for the password hashing algorithm in, +     *                     use on this elasticsearch cluster. The array is not modified by this class., +     *                     It is the responsibility of the caller to clear the hash after receiving a response., +     * @param enabled true if the user is enabled and allowed to access elasticsearch, +     * @param refreshPolicy the refresh policy for the request., +     */, +    public static PutUserRequest withPasswordHash(User user, char[] passwordHash, boolean enabled, RefreshPolicy refreshPolicy) {, +        return new PutUserRequest(user, null, passwordHash, enabled, refreshPolicy);, +    }, +, +    /**, +     * Update an existing user in the native realm without modifying their password., +     * @param user the user to be created or updated, +     * @param enabled true if the user is enabled and allowed to access elasticsearch, +     * @param refreshPolicy the refresh policy for the request., +     */, +    public static PutUserRequest updateUser(User user, boolean enabled, RefreshPolicy refreshPolicy) {, +        return new PutUserRequest(user, null, null, enabled, refreshPolicy);, +    }, +, +    /**, +     * @deprecated Use {@link #withPassword(User, char[], boolean, RefreshPolicy)} or, +     *             {@link #updateUser(User, boolean, RefreshPolicy)} instead., +    @Deprecated, +        this(user, password, null, enabled, refreshPolicy);, +    }, +, +    /**, +     * Creates a new request that is used to create or update a user in the native realm., +     * @param user the user to be created or updated, +     * @param password the password of the user. The password array is not modified by this class., +     *                 It is the responsibility of the caller to clear the password after receiving, +     *                 a response., +     * @param passwordHash the hash of the password. Only one of "password" or "passwordHash" may be populated., +     *                     The other parameter must be {@code null}., +     * @param enabled true if the user is enabled and allowed to access elasticsearch, +     * @param refreshPolicy the refresh policy for the request., +     */, +    private PutUserRequest(User user, @Nullable char[] password, @Nullable char[] passwordHash, boolean enabled,, +                           RefreshPolicy refreshPolicy) {, +        if (password != null && passwordHash != null) {, +            throw new IllegalArgumentException("cannot specify both password and passwordHash");, +        }, +        this.passwordHash = passwordHash;, +                && Arrays.equals(passwordHash, that.passwordHash), +        result = 31 * result + Arrays.hashCode(passwordHash);, +            charField(builder, "password", password);, +        if (passwordHash != null) {, +            charField(builder, "password_hash", passwordHash);, +, +    private void charField(XContentBuilder builder, String fieldName, char[] chars) throws IOException {, +        byte[] charBytes = CharArrays.toUtf8Bytes(chars);, +        try {, +            builder.field(fieldName).utf8Value(charBytes, 0, charBytes.length);, +        } finally {, +            Arrays.fill(charBytes, (byte) 0);, +        }, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutUserRequest.java, +    private final @Nullable char[] passwordHash;, +     * Create or update a user in the native realm, with the user's new or updated password specified in plaintext., +     * @param user the user to be created or updated, +     * @param password the password of the user. The password array is not modified by this class., +     *                 It is the responsibility of the caller to clear the password after receiving, +     *                 a response., +     * @param enabled true if the user is enabled and allowed to access elasticsearch, +     * @param refreshPolicy the refresh policy for the request., +     */, +    public static PutUserRequest withPassword(User user, char[] password, boolean enabled, RefreshPolicy refreshPolicy) {, +        return new PutUserRequest(user, password, null, enabled, refreshPolicy);, +    }, +, +    /**, +     * Create or update a user in the native realm, with the user's new or updated password specified as a cryptographic hash., +     * @param user the user to be created or updated, +     * @param passwordHash the hash of the password of the user. It must be in the correct format for the password hashing algorithm in, +     *                     use on this elasticsearch cluster. The array is not modified by this class., +     *                     It is the responsibility of the caller to clear the hash after receiving a response., +     * @param enabled true if the user is enabled and allowed to access elasticsearch, +     * @param refreshPolicy the refresh policy for the request., +     */, +    public static PutUserRequest withPasswordHash(User user, char[] passwordHash, boolean enabled, RefreshPolicy refreshPolicy) {, +        return new PutUserRequest(user, null, passwordHash, enabled, refreshPolicy);]