[+++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilter.java, +    void apply(Task task, String action, ActionRequest request, ActionListener listener, ActionFilterChain chain);, +    void apply(String action, ActionResponse response, ActionListener listener, ActionFilterChain chain);, +        public final void apply(Task task, String action, ActionRequest request, ActionListener listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionRequest request, ActionListener listener);, +        public final void apply(String action, ActionResponse response, ActionListener listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionResponse response, ActionListener listener);, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilter.java, +    void apply(Task task, String action, ActionRequest request, ActionListener listener, ActionFilterChain chain);, +    void apply(String action, ActionResponse response, ActionListener listener, ActionFilterChain chain);, +        public final void apply(Task task, String action, ActionRequest request, ActionListener listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionRequest request, ActionListener listener);, +        public final void apply(String action, ActionResponse response, ActionListener listener, ActionFilterChain chain) {, +        protected abstract boolean apply(String action, ActionResponse response, ActionListener listener);, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.concurrent.CopyOnWriteArrayList;, +, +import org.elasticsearch.action.ActionModule;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.inject.Module;, +    private static final List<ActionRequest> requests =  new CopyOnWriteArrayList<>();, +        return pluginList(ActionLoggingPlugin.class, GroovyPlugin.class);, +        requests.clear();, +        assertThat(requests, hasSize(greaterThan(0)));, +        List<SearchRequest> searchRequests = getRequests(SearchRequest.class);, +    private <T> List<T> getRequests(Class<T> clazz) {, +        List<T> results = new ArrayList<>();, +        for (ActionRequest request : requests) {, +            if (request.getClass().equals(clazz)) {, +                results.add((T) request);, +            }, +        }, +, +        return results;, +    }, +, +    private void assertRequestsContainHeader(Class<? extends ActionRequest> clazz) {, +        List<? extends ActionRequest> classRequests = getRequests(clazz);, +        for (ActionRequest request : classRequests) {, +        List<GetRequest> getRequests = getRequests(GetRequest.class);, +    private void assertRequestContainsHeader(ActionRequest request) {, +, +    public static class ActionLoggingPlugin extends Plugin {, +, +        @Override, +        public String name() {, +            return "test-action-logging";, +        }, +, +        @Override, +        public String description() {, +            return "Test action logging";, +        }, +, +        @Override, +        public Collection<Module> nodeModules() {, +            return Collections.<Module>singletonList(new ActionLoggingModule());, +        }, +, +        public void onModule(ActionModule module) {, +            module.registerFilter(LoggingFilter.class);, +        }, +    }, +, +    public static class ActionLoggingModule extends AbstractModule {, +        @Override, +        protected void configure() {, +            bind(LoggingFilter.class).asEagerSingleton();, +        }, +, +    }, +, +    public static class LoggingFilter extends ActionFilter.Simple {, +, +        @Inject, +        public LoggingFilter(Settings settings) {, +            super(settings);, +        }, +, +        @Override, +        public int order() {, +            return 999;, +        }, +, +        @Override, +        protected boolean apply(String action, ActionRequest request, ActionListener listener) {, +            requests.add(request);, +            return true;, +        }, +, +        @Override, +        protected boolean apply(String action, ActionResponse response, ActionListener listener) {, +            return true;]