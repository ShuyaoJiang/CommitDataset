[+++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +        return new InternalAggregation.ReduceContext(bigArrays, scriptService,, +            finalReduce ? multiBucketConsumerService.create() : bucketCount -> {}, finalReduce);, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +        return new InternalAggregation.ReduceContext(bigArrays, scriptService,, +            finalReduce ? multiBucketConsumerService.create() : bucketCount -> {}, finalReduce);, +++ b/server/src/test/java/org/elasticsearch/search/SearchServiceTests.java, +import org.elasticsearch.search.aggregations.InternalAggregation;, +import org.elasticsearch.search.aggregations.MultiBucketConsumerService;, +    public void testClearOnClose() {, +    public void testClearOnStop() {, +    public void testClearIndexDelete() {, +    public void testSearchWhileIndexDeleted() throws InterruptedException {, +        protected void doWriteTo(StreamOutput out) {, +        protected void doXContent(XContentBuilder builder, Params params) {, +        protected Query doToQuery(QueryShardContext context) {, +, +    public void testCreateReduceContext() {, +        final SearchService service = getInstanceFromNode(SearchService.class);, +        {, +            InternalAggregation.ReduceContext reduceContext = service.createReduceContext(true);, +            expectThrows(MultiBucketConsumerService.TooManyBucketsException.class,, +                () -> reduceContext.consumeBucketsAndMaybeBreak(MultiBucketConsumerService.DEFAULT_MAX_BUCKETS + 1));, +        }, +        {, +            InternalAggregation.ReduceContext reduceContext = service.createReduceContext(false);, +            reduceContext.consumeBucketsAndMaybeBreak(MultiBucketConsumerService.DEFAULT_MAX_BUCKETS + 1);, +        }, +    }]