[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregator.java, +        return new LeafBucketCollectorBase(sub, leafMapScript) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregator.java, +        return new LeafBucketCollectorBase(sub, leafMapScript) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregatorTests.java, +import org.elasticsearch.script.ScoreAccessor;, +, +    private static final Script INIT_SCRIPT_SCORE = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "initScriptScore", Collections.emptyMap());, +    private static final Script MAP_SCRIPT_SCORE = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "mapScriptScore", Collections.emptyMap());, +    private static final Script COMBINE_SCRIPT_SCORE = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "combineScriptScore",, +            Collections.emptyMap());, +, +        SCRIPTS.put("initScriptScore", params -> {, +            Map<String, Object> agg = (Map<String, Object>) params.get("_agg");, +            agg.put("collector", new ArrayList<Double>());, +            return agg;, +            });, +        SCRIPTS.put("mapScriptScore", params -> {, +            Map<String, Object> agg = (Map<String, Object>) params.get("_agg");, +            ((List<Double>) agg.get("collector")).add(((ScoreAccessor) params.get("_score")).doubleValue());, +            return agg;, +        });, +        SCRIPTS.put("combineScriptScore", params -> {, +            Map<String, Object> agg = (Map<String, Object>) params.get("_agg");, +            return ((List<Double>) agg.get("collector")).stream().mapToDouble(Double::doubleValue).sum();, +        });, +     * test that uses the score of the documents, +     */, +    public void testScriptedMetricWithCombineAccessesScores() throws IOException {, +        try (Directory directory = newDirectory()) {, +            Integer numDocs = randomInt(100);, +            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {, +                for (int i = 0; i < numDocs; i++) {, +                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)));, +                }, +            }, +            try (IndexReader indexReader = DirectoryReader.open(directory)) {, +                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME);, +                aggregationBuilder.initScript(INIT_SCRIPT_SCORE).mapScript(MAP_SCRIPT_SCORE).combineScript(COMBINE_SCRIPT_SCORE);, +                ScriptedMetric scriptedMetric = search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder);, +                assertEquals(AGG_NAME, scriptedMetric.getName());, +                assertNotNull(scriptedMetric.aggregation());, +                // all documents have score of 1.0, +                assertEquals((double) numDocs, scriptedMetric.aggregation());, +            }, +        }, +    }, +, +    /**]