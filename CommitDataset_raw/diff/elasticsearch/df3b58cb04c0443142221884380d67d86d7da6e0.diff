[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +import org.elasticsearch.xpack.core.ml.action.MlUpgradeAction;, +                MlUpgradeAction.INSTANCE,, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +import org.elasticsearch.xpack.core.ml.action.MlUpgradeAction;, +                MlUpgradeAction.INSTANCE,, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/MlUpgradeAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.core.ml.action;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +import org.elasticsearch.action.support.master.MasterNodeReadOperationRequestBuilder;, +import org.elasticsearch.action.support.master.MasterNodeReadRequest;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndexFields;, +, +import java.io.IOException;, +import java.util.Map;, +import java.util.Objects;, +, +, +public class MlUpgradeAction extends Action<AcknowledgedResponse> {, +    public static final MlUpgradeAction INSTANCE = new MlUpgradeAction();, +    public static final String NAME = "cluster:admin/xpack/ml/upgrade";, +, +    private MlUpgradeAction() {, +        super(NAME);, +    }, +, +    @Override, +    public AcknowledgedResponse newResponse() {, +        return new AcknowledgedResponse();, +    }, +, +    public static class Request extends MasterNodeReadRequest<Request> implements ToXContentObject {, +, +        private static final ParseField REINDEX_BATCH_SIZE = new ParseField("reindex_batch_size");, +, +        public static ObjectParser<Request, Void> PARSER = new ObjectParser<>("ml_upgrade", true, Request::new);, +        static {, +            PARSER.declareInt(Request::setReindexBatchSize, REINDEX_BATCH_SIZE);, +        }, +, +        static final String INDEX = AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "*";, +        private int reindexBatchSize = 1000;, +, +        /**, +         * Should this task store its result?, +         */, +        private boolean shouldStoreResult;, +, +        // for serialization, +        public Request() {, +        }, +, +        public Request(StreamInput in) throws IOException {, +            super(in);, +            reindexBatchSize = in.readInt();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            out.writeInt(reindexBatchSize);, +        }, +, +        public String[] indices() {, +            return new String[]{INDEX};, +        }, +, +        public IndicesOptions indicesOptions() {, +            return IndicesOptions.strictExpandOpenAndForbidClosed();, +        }, +, +        /**, +         * Should this task store its result after it has finished?, +         */, +        public Request setShouldStoreResult(boolean shouldStoreResult) {, +            this.shouldStoreResult = shouldStoreResult;, +            return this;, +        }, +, +        @Override, +        public boolean getShouldStoreResult() {]