[+++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeFieldMapper.java, +, +        if (fieldType().treeLevels() != 0) {, +        } else if(includeDefaults && fieldType().precisionInMeters() == -1) { // defaults only make sense if precision is not specified, +            if ("geohash".equals(fieldType().tree())) {, +                builder.field(Names.TREE_LEVELS, Defaults.GEOHASH_LEVELS);, +            } else if ("legacyquadtree".equals(fieldType().tree())) {, +                builder.field(Names.TREE_LEVELS, Defaults.QUADTREE_LEVELS);, +            } else if ("quadtree".equals(fieldType().tree())) {, +                builder.field(Names.TREE_LEVELS, Defaults.QUADTREE_LEVELS);, +            } else {, +                throw new IllegalArgumentException("Unknown prefix tree type [" + fieldType().tree() + "]");, +        }, +        if (fieldType().precisionInMeters() != -1) {, +        } else if (includeDefaults && fieldType().treeLevels() == 0) { // defaults only make sense if tree levels are not specified, +            builder.field(Names.TREE_PRESISION, DistanceUnit.METERS.toString(50));, +++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeFieldMapper.java, +, +        if (fieldType().treeLevels() != 0) {, +        } else if(includeDefaults && fieldType().precisionInMeters() == -1) { // defaults only make sense if precision is not specified, +            if ("geohash".equals(fieldType().tree())) {, +                builder.field(Names.TREE_LEVELS, Defaults.GEOHASH_LEVELS);, +            } else if ("legacyquadtree".equals(fieldType().tree())) {, +                builder.field(Names.TREE_LEVELS, Defaults.QUADTREE_LEVELS);, +            } else if ("quadtree".equals(fieldType().tree())) {, +                builder.field(Names.TREE_LEVELS, Defaults.QUADTREE_LEVELS);, +            } else {, +                throw new IllegalArgumentException("Unknown prefix tree type [" + fieldType().tree() + "]");, +        }, +        if (fieldType().precisionInMeters() != -1) {, +        } else if (includeDefaults && fieldType().treeLevels() == 0) { // defaults only make sense if tree levels are not specified, +            builder.field(Names.TREE_PRESISION, DistanceUnit.METERS.toString(50));, +++ b/server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.Collections;, +    public void testSerializeDefaults() throws Exception {, +        DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("location"), +                .field("type", "geo_shape"), +                .field("tree", "quadtree"), +                .endObject().endObject(), +                .endObject().endObject());, +            DocumentMapper defaultMapper = parser.parse("type1", new CompressedXContent(mapping));, +            String serialized = toXContentString((GeoShapeFieldMapper) defaultMapper.mappers().getMapper("location"));, +            assertTrue(serialized, serialized.contains("\"precision\":\"50.0m\""));, +            assertTrue(serialized, serialized.contains("\"tree_levels\":21"));, +        }, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("location"), +                .field("type", "geo_shape"), +                .field("tree", "geohash"), +                .endObject().endObject(), +                .endObject().endObject());, +            DocumentMapper defaultMapper = parser.parse("type1", new CompressedXContent(mapping));, +            String serialized = toXContentString((GeoShapeFieldMapper) defaultMapper.mappers().getMapper("location"));, +            assertTrue(serialized, serialized.contains("\"precision\":\"50.0m\""));, +            assertTrue(serialized, serialized.contains("\"tree_levels\":9"));, +        }, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("location"), +                .field("type", "geo_shape"), +                .field("tree", "quadtree"), +                .field("tree_levels", "6"), +                .endObject().endObject(), +                .endObject().endObject());, +            DocumentMapper defaultMapper = parser.parse("type1", new CompressedXContent(mapping));, +            String serialized = toXContentString((GeoShapeFieldMapper) defaultMapper.mappers().getMapper("location"));, +            assertFalse(serialized, serialized.contains("\"precision\":"));, +            assertTrue(serialized, serialized.contains("\"tree_levels\":6"));, +        }, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("location"), +                .field("type", "geo_shape"), +                .field("tree", "quadtree"), +                .field("precision", "6"), +                .endObject().endObject(), +                .endObject().endObject());, +            DocumentMapper defaultMapper = parser.parse("type1", new CompressedXContent(mapping));, +            String serialized = toXContentString((GeoShapeFieldMapper) defaultMapper.mappers().getMapper("location"));, +            assertTrue(serialized, serialized.contains("\"precision\":\"6.0m\""));, +            assertFalse(serialized, serialized.contains("\"tree_levels\":"));, +        }, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("location"), +                .field("type", "geo_shape"), +                .field("tree", "quadtree"), +                .field("precision", "6m"), +                .field("tree_levels", "5"), +                .endObject().endObject(), +                .endObject().endObject());, +            DocumentMapper defaultMapper = parser.parse("type1", new CompressedXContent(mapping));, +            String serialized = toXContentString((GeoShapeFieldMapper) defaultMapper.mappers().getMapper("location"));, +            assertTrue(serialized, serialized.contains("\"precision\":\"6.0m\""));]