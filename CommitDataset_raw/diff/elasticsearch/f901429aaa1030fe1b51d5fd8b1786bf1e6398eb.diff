[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/CacheStats.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.cache;, +, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Streamable;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +, +import java.io.IOException;, +, +/**, + *, + */, +public class CacheStats implements Streamable, ToXContent {, +, +    long fieldEvictions;, +    long fieldSize = 0;, +    long filterSize = 0;, +    long bloomSize = 0;, +, +    public CacheStats() {, +    }, +, +    public CacheStats(long fieldEvictions, long fieldSize, long filterSize, long bloomSize) {, +        this.fieldEvictions = fieldEvictions;, +        this.fieldSize = fieldSize;, +        this.filterSize = filterSize;, +        this.bloomSize = bloomSize;, +    }, +, +    public void add(CacheStats stats) {, +        this.fieldEvictions += stats.fieldEvictions;, +        this.fieldSize += stats.fieldSize;, +        this.filterSize += stats.filterSize;, +        this.bloomSize += stats.bloomSize;, +    }, +, +    public long fieldEvictions() {, +        return this.fieldEvictions;, +    }, +, +    public long getFieldEvictions() {, +        return this.fieldEvictions();, +    }, +, +    public long fieldSizeInBytes() {, +        return this.fieldSize;, +    }, +, +    public long getFieldSizeInBytes() {, +        return fieldSizeInBytes();, +    }, +, +    public ByteSizeValue fieldSize() {, +        return new ByteSizeValue(fieldSize);, +    }, +, +    public ByteSizeValue getFieldSize() {, +        return this.fieldSize();, +    }, +, +    public long filterSizeInBytes() {, +        return this.filterSize;, +    }, +, +    public long getFilterSizeInBytes() {, +        return this.filterSizeInBytes();, +    }, +, +    public ByteSizeValue filterSize() {, +        return new ByteSizeValue(filterSize);, +    }, +, +    public ByteSizeValue getFilterSize() {, +        return filterSize();, +    }, +, +    public long bloomSizeInBytes() {]