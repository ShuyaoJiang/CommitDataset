[+++ b/server/src/main/java/org/elasticsearch/Version.java, +    public static final int V_6_6_0_ID = 6060099;, +    public static final Version V_6_6_0 = new Version(V_6_6_0_ID, org.apache.lucene.util.Version.LUCENE_7_5_0);, +            case V_6_6_0_ID:, +                return V_6_6_0;, +++ b/server/src/main/java/org/elasticsearch/Version.java, +    public static final int V_6_6_0_ID = 6060099;, +    public static final Version V_6_6_0 = new Version(V_6_6_0_ID, org.apache.lucene.util.Version.LUCENE_7_5_0);, +            case V_6_6_0_ID:, +                return V_6_6_0;, +++ b/server/src/test/java/org/elasticsearch/VersionTests.java, +        Version lastVersion = Version.V_6_6_0; // TODO: remove this once min compat version is a constant instead of method, +        assertFalse(isCompatible(Version.V_6_5_0, Version.V_7_0_0_alpha1));, +        assertTrue(isCompatible(Version.V_6_6_0, Version.V_7_0_0_alpha1));, +++ b/server/src/main/java/org/elasticsearch/Version.java, +    public static final int V_6_6_0_ID = 6060099;, +    public static final Version V_6_6_0 = new Version(V_6_6_0_ID, org.apache.lucene.util.Version.LUCENE_7_5_0);, +            case V_6_6_0_ID:, +                return V_6_6_0;, +++ b/server/src/test/java/org/elasticsearch/VersionTests.java, +        Version lastVersion = Version.V_6_6_0; // TODO: remove this once min compat version is a constant instead of method, +        assertFalse(isCompatible(Version.V_6_5_0, Version.V_7_0_0_alpha1));, +        assertTrue(isCompatible(Version.V_6_6_0, Version.V_7_0_0_alpha1));, +++ b/server/src/test/java/org/elasticsearch/transport/TcpTransportTests.java, +        final Version version = Version.fromString("7.0.0");, +        TcpTransport.ensureVersionCompatibility(Version.fromString("6.0.0"), version, true);, +            TcpTransport.ensureVersionCompatibility(Version.fromString("6.0.0"), version, false));, +        assertEquals("Received message from unsupported version: [6.0.0] minimal compatible version is: [", +            + version.minimumCompatibilityVersion() + "]", ise.getMessage());, +        TcpTransport.ensureVersionCompatibility(Version.fromString("5.6.0"), version, true);, +            TcpTransport.ensureVersionCompatibility(Version.fromString("5.6.0"), version, false));, +        assertEquals("Received message from unsupported version: [5.6.0] minimal compatible version is: [", +                + version.minimumCompatibilityVersion() + "]", ise.getMessage());, +            TcpTransport.ensureVersionCompatibility(Version.fromString("2.3.0"), version, true));, +        assertEquals("Received handshake message from unsupported version: [2.3.0] minimal compatible version is: [", +            + version.minimumCompatibilityVersion() + "]", ise.getMessage());, +            TcpTransport.ensureVersionCompatibility(Version.fromString("2.3.0"), version, false));, +        assertEquals("Received message from unsupported version: [2.3.0] minimal compatible version is: [", +            + version.minimumCompatibilityVersion() + "]", ise.getMessage());]