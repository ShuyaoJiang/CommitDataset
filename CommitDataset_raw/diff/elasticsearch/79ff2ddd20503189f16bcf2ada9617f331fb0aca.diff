[+++ b/core/src/main/java/org/elasticsearch/indices/cache/query/IndicesQueryCache.java, +                // onDocIdSetEviction might sometimes be called with a number, +                // of entries equal to zero if the cache for the given segment, +                // was already empty when the close listener was called, +                if (numEntries > 0) {, +            }, +++ b/core/src/main/java/org/elasticsearch/indices/cache/query/IndicesQueryCache.java, +                // onDocIdSetEviction might sometimes be called with a number, +                // of entries equal to zero if the cache for the given segment, +                // was already empty when the close listener was called, +                if (numEntries > 0) {, +            }, +++ b/core/src/test/java/org/elasticsearch/indices/cache/query/IndicesQueryCacheTests.java, +package org.elasticsearch.indices.cache.query;, +, +import java.io.IOException;, +, +import org.apache.lucene.document.Document;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexWriter;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.ConstantScoreScorer;, +import org.apache.lucene.search.ConstantScoreWeight;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.QueryCachingPolicy;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.search.Weight;, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.common.lucene.index.ElasticsearchDirectoryReader;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.cache.query.QueryCacheStats;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.test.ESTestCase;, +, +public class IndicesQueryCacheTests extends ESTestCase {, +, +    private static class DummyQuery extends Query {, +, +        private final int id;, +, +        DummyQuery(int id) {, +            this.id = id;, +        }, +, +        @Override, +        public boolean equals(Object obj) {, +            return super.equals(obj) && id == ((DummyQuery) obj).id;, +        }, +, +        @Override, +        public int hashCode() {, +            return 31 * super.hashCode() + id;, +        }, +, +        @Override, +        public String toString(String field) {, +            return "dummy";, +        }, +, +        @Override, +        public Weight createWeight(IndexSearcher searcher, boolean needsScores), +                throws IOException {, +            return new ConstantScoreWeight(this) {, +                @Override, +                public Scorer scorer(LeafReaderContext context) throws IOException {, +                    return new ConstantScoreScorer(this, score(), DocIdSetIterator.all(context.reader().maxDoc()));, +                }, +            };, +        }, +, +    }, +, +    public void testBasics() throws IOException {, +        Directory dir = newDirectory();, +        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());, +        w.addDocument(new Document());, +        DirectoryReader r = DirectoryReader.open(w, false);, +        w.close();, +        ShardId shard = new ShardId(new Index("index"), 0);, +        r = ElasticsearchDirectoryReader.wrap(r, shard);, +        IndexSearcher s = new IndexSearcher(r);, +        s.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);, +, +        Settings settings = Settings.builder(), +                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT, 10), +                .build();, +        IndicesQueryCache cache = new IndicesQueryCache(settings);, +        s.setQueryCache(cache);, +, +        QueryCacheStats stats = cache.getStats(shard);, +        assertEquals(0L, stats.getCacheSize());, +        assertEquals(0L, stats.getCacheCount());, +        assertEquals(0L, stats.getHitCount());, +        assertEquals(0L, stats.getMissCount());, +, +        assertEquals(1, s.count(new DummyQuery(0)));]