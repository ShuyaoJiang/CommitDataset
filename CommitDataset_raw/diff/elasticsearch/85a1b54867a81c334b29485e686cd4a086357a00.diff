[+++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestBasePlugin.groovy, +        project.idea.module.testSourceDirs += project.sourceSets.test.java.srcDirs, +        project.idea.module.scopes['TEST'] = [plus: [project.configurations.testRuntime]], +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestBasePlugin.groovy, +        project.idea.module.testSourceDirs += project.sourceSets.test.java.srcDirs, +        project.idea.module.scopes['TEST'] = [plus: [project.configurations.testRuntime]], +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.cluster.settings;, +, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.common.regex.Regex;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.Settings;, +, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +, +import static org.elasticsearch.cluster.ClusterState.builder;, +, +/**, + * Updates transient and persistent cluster state settings if there are any changes, + * due to the update., + */, +final class SettingsUpdater {, +    final Settings.Builder transientUpdates = Settings.settingsBuilder();, +    final Settings.Builder persistentUpdates = Settings.settingsBuilder();, +    private final ClusterSettings clusterSettings;, +, +    SettingsUpdater(ClusterSettings clusterSettings) {, +        this.clusterSettings = clusterSettings;, +    }, +, +    synchronized Settings getTransientUpdates() {, +        return transientUpdates.build();, +    }, +, +    synchronized Settings getPersistentUpdate() {, +        return persistentUpdates.build();, +    }, +, +    synchronized ClusterState updateSettings(final ClusterState currentState, Settings transientToApply, Settings persistentToApply) {, +        boolean changed = false;, +        Settings.Builder transientSettings = Settings.settingsBuilder();, +        transientSettings.put(currentState.metaData().transientSettings());, +        changed |= apply(transientToApply, transientSettings, transientUpdates, "transient");, +, +        Settings.Builder persistentSettings = Settings.settingsBuilder();, +        persistentSettings.put(currentState.metaData().persistentSettings());, +        changed |= apply(persistentToApply, persistentSettings, persistentUpdates, "persistent");, +, +        if (!changed) {, +            return currentState;, +        }, +, +        MetaData.Builder metaData = MetaData.builder(currentState.metaData()), +            .persistentSettings(persistentSettings.build()), +            .transientSettings(transientSettings.build());]