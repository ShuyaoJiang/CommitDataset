[+++ b/docs/reference/modules.asciidoc, +<<modules-scripting-painless,Painless>>::, +, +    A built-in scripting language for Elasticsearch that's designed to be as secure as possible. , +, +    Javascript. You can also write scripts in the built-in scripting language, , +    <<modules-scripting-painless, Painless>>., +include::modules/painless.asciidoc[], +, +++ b/docs/reference/modules.asciidoc, +<<modules-scripting-painless,Painless>>::, +, +    A built-in scripting language for Elasticsearch that's designed to be as secure as possible. , +, +    Javascript. You can also write scripts in the built-in scripting language, , +    <<modules-scripting-painless, Painless>>., +include::modules/painless.asciidoc[], +, +++ b/docs/reference/modules/painless.asciidoc, +[[modules-scripting-painless]], +== Painless Scripting Language, +, +_Painless_ is a simple, secure scripting language built in to Elasticsearch as a module. , +It is designed specifically for use with Elasticsearch and can safely be used dynamically., +, +A Painless script is essentially a single function. Painless does not provide support , +for defining multiple functions within a script. The Painless syntax is similar to , +http://groovy-lang.org/index.html[Groovy]. , +, +You can use Painless anywhere a script can be used in Elasticsearch--simply set the `lang` parameter , +to `painless`., +, +[[painless-features]], +[float], +=== Painless Features, +, +* Control flow: `for` loops, `while` loops, `do/while` loops, `if/else`, +, +* Fully Typed: all available types/methods described in <<painless-api, Painless API>>, +, +* Arithmetic operators: multiplication `*`, division `/`, addition `+`, subtraction `-`, precedence `( )`, +, +* Comparison operators: less than `<`, less than or equal to `<=`, greater than `>`, greater than or equal to `>=`, equal to `==`, and not equal to `!=`, reference equals `===`, reference not equals `!==`, +, +* Boolean operators: not `!`, and `&&`, or `||`, +, +* Bitwise operators: shift left `<<`, shift right `>>`, unsigned shift `>>>`, and `&`, or `|`, xor `^`, not `~`, +, +* Shortcuts for list, map access using the dot `.` operator, +, +, +[[painless-examples]], +[float], +=== Painless Examples, +, +To illustrate how Painless works, let's load some hockey stats into an Elasticsearch index:, +, +[source,sh], +----------------------------------------------------------------, +curl -XDELETE http://localhost:9200/hockey-stats, +curl -XPUT http://localhost:9200/hockey-stats, +curl -XPUT http://localhost:9200/hockey-stats/player/1 -d '{"first":"johnny", "last":"gaudreau", "goals":[9, 27, 1], "assists":[17, 46, 0], "gp":[26, 82, 1]}', +curl -XPUT http://localhost:9200/hockey-stats/player/2 -d '{"first":"sean", "last":"monohan", "goals":[7, 54, 26], "assists":[11, 26, 13], "gp":[26, 82, 82]}', +curl -XPUT http://localhost:9200/hockey-stats/player/3 -d '{"first":"jiri", "last":"hudler", "goals":[5, 34, 36], "assists":[11, 62, 42], "gp":[24, 80, 79]}', +curl -XPUT http://localhost:9200/hockey-stats/player/4 -d '{"first":"micheal", "last":"frolik", "goals":[4, 6, 15], "assists":[8, 23, 15], "gp":[26, 82, 82]}', +curl -XPUT http://localhost:9200/hockey-stats/player/5 -d '{"first":"sam", "last":"bennett", "goals":[5, 0, 0], "assists":[8, 1, 0], "gp":[26, 1, 0]}', +curl -XPUT http://localhost:9200/hockey-stats/player/6 -d '{"first":"dennis", "last":"wideman", "goals":[0, 26, 15], "assists":[11, 30, 24], "gp":[26, 81, 82]}', +curl -XPUT http://localhost:9200/hockey-stats/player/7 -d '{"first":"david", "last":"jones", "goals":[7, 19, 5], "assists":[3, 17, 4], "gp":[26, 45, 34]}', +curl -XPUT http://localhost:9200/hockey-stats/player/8 -d '{"first":"tj", "last":"brodie", "goals":[2, 14, 7], "assists":[8, 42, 30], "gp":[26, 82, 82]}', +curl -XPUT http://localhost:9200/hockey-stats/player/9 -d '{"first":"mark", "last":"giordano", "goals":[6, 30, 15], "assists":[3, 30, 24], "gp":[26, 60, 63]}', +curl -XPUT http://localhost:9200/hockey-stats/player/10 -d '{"first":"mikael", "last":"backlund", "goals":[3, 15, 13], "assists":[6, 24, 18], "gp":[26, 82, 82]}', +curl -XPUT http://localhost:9200/hockey-stats/player/11 -d '{"first":"joe", "last":"colborne", "goals":[3, 18, 13], "assists":[6, 20, 24], "gp":[26, 67, 82]}', +----------------------------------------------------------------, +, +[float], +==== Accessing Doc Values from Painless, +, +All Painless scripts take in a `Map<String,def>` of values called `input`.  Document values can be accessed through another `Map<String,def>` within the `input` variable.  , +, +For example, the following script calculates a player's total goals. This example uses a strongly typed `int` and a `for` loop.  , +, +[source,sh], +----------------------------------------------------------------, +curl -XGET http://localhost:9200/hockey-stats/_search -d '{, +   "query": {, +      "function_score": {, +         "script_score" : {, +            "script" : {, +               "inline": , +                  "int total = 0; for (int i = 0; i < input.doc.goals.size(); ++i) { total += input.doc.goals[i]; } return total;", , +               "lang": "painless", +            }, +        }, +    }, +   }, +}', +----------------------------------------------------------------, +, +Alternatively, you could do the same thing using a script field instead of a function score:, +]