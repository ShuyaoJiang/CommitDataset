[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger, threadPool.getThreadContext());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger, threadPool.getThreadContext());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +            super(nodeId);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger, threadPool.getThreadContext());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/TransportNodesInfoAction.java, +            super(nodeId);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger, threadPool.getThreadContext());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/TransportNodesInfoAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/TransportNodesStatsAction.java, +            super(nodeId);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger, threadPool.getThreadContext());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/TransportNodesInfoAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/TransportNodesStatsAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +        public Request(String[] nodesIds) {, +            super(nodesIds);, +            super(nodeId);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<T extends ActionRequest> extends TransportRequest {, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger, threadPool.getThreadContext());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/TransportNodesInfoAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/TransportNodesStatsAction.java, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +        public Request(String[] nodesIds) {, +            super(nodesIds);, +            super(nodeId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            TransportNodesSnapshotsStatus.Request nodesRequest = new TransportNodesSnapshotsStatus.Request(nodesIds.toArray(new String[nodesIds.size()])), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java]