[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java, +                IndexMetaData indexMetaData = clusterService.state().metaData().index(shardId.getIndex());, +                if (indexMetaData != null) {, +                    errorHandler.accept(new ShardNotFoundException(shardId));, +                } else {, +                }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java, +                IndexMetaData indexMetaData = clusterService.state().metaData().index(shardId.getIndex());, +                if (indexMetaData != null) {, +                    errorHandler.accept(new ShardNotFoundException(shardId));, +                } else {, +                }, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksAction;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.tasks.TaskInfo;, +import org.elasticsearch.xpack.core.ccr.action.PauseFollowAction;, +import org.elasticsearch.xpack.core.ccr.action.PutFollowAction;, +import org.elasticsearch.xpack.core.ccr.action.ResumeFollowAction;, +import java.util.Map;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.hamcrest.Matchers.empty;, +    protected void pauseFollow(String... indices) throws Exception {, +        for (String index : indices) {, +            final PauseFollowAction.Request unfollowRequest = new PauseFollowAction.Request(index);, +            followerClient().execute(PauseFollowAction.INSTANCE, unfollowRequest).get();, +        }, +        ensureNoCcrTasks();, +    }, +, +    protected void ensureNoCcrTasks() throws Exception {, +        assertBusy(() -> {, +            final ClusterState clusterState = followerClient().admin().cluster().prepareState().get().getState();, +            final PersistentTasksCustomMetaData tasks = clusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);, +            assertThat(tasks.tasks(), empty());, +, +            ListTasksRequest listTasksRequest = new ListTasksRequest();, +            listTasksRequest.setDetailed(true);, +            ListTasksResponse listTasksResponse = followerClient().admin().cluster().listTasks(listTasksRequest).get();, +            int numNodeTasks = 0;, +            for (TaskInfo taskInfo : listTasksResponse.getTasks()) {, +                if (taskInfo.getAction().startsWith(ListTasksAction.NAME) == false) {, +                    numNodeTasks++;, +                }, +            }, +            assertThat(numNodeTasks, equalTo(0));, +        }, 30, TimeUnit.SECONDS);, +    }, +, +    protected String getIndexSettings(final int numberOfShards, final int numberOfReplicas,, +                                    final Map<String, String> additionalIndexSettings) throws IOException {, +        final String settings;, +        try (XContentBuilder builder = jsonBuilder()) {, +            builder.startObject();, +            {, +                builder.startObject("settings");, +                {, +                    builder.field("index.number_of_shards", numberOfShards);, +                    builder.field("index.number_of_replicas", numberOfReplicas);, +                    for (final Map.Entry<String, String> additionalSetting : additionalIndexSettings.entrySet()) {, +                        builder.field(additionalSetting.getKey(), additionalSetting.getValue());, +                    }, +                }, +                builder.endObject();, +                builder.startObject("mappings");, +                {, +                    builder.startObject("doc");, +                    {, +                        builder.startObject("properties");, +                        {, +                            builder.startObject("f");, +                            {, +                                builder.field("type", "integer");, +                            }, +                            builder.endObject();, +                        }, +                        builder.endObject();, +                    }, +                    builder.endObject();, +                }, +                builder.endObject();, +            }, +            builder.endObject();, +            settings = BytesReference.bytes(builder).utf8ToString();, +        }, +        return settings;, +    }, +, +    public static PutFollowAction.Request putFollow(String leaderIndex, String followerIndex) {, +        PutFollowAction.Request request = new PutFollowAction.Request();, +        request.setRemoteCluster("leader_cluster");, +        request.setLeaderIndex(leaderIndex);, +        request.setFollowRequest(resumeFollow(followerIndex));, +        return request;, +    }, +, +    public static ResumeFollowAction.Request resumeFollow(String followerIndex) {]