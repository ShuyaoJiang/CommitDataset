[+++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.index.query.functionscore.factor.FactorParser;, +import java.util.Arrays;, +    // For better readability of error message, +    static final String MISPLACED_FUNCTION_MESSAGE_PREFIX = "You can either define \"functions\":[...] or a single function, not both. ";, +    static final String MISPLACED_BOOST_FUNCTION_MESSAGE_SUFFIX = " Did you mean \"boost\" instead?";, +        // Either define array of functions and filters or only one function, +        boolean functionArrayFound = false;, +        boolean singleFunctionFound = false;, +        String singleFunctionName = null;, +, +                if (singleFunctionFound) {, +                    String errorString = "Found \"" + singleFunctionName + "\" already, now encountering \"functions\": [...].";, +                    handleMisplacedFunctionsDeclaration(errorString, singleFunctionName);, +                }, +                functionArrayFound = true;, +                // we try to parse a score function. If there is no score, +                // functionParserMapper.get() will throw an Exception., +                ScoreFunctionParser currentFunctionParser = funtionParserMapper.get(parseContext.index(), currentFieldName);, +                singleFunctionName = currentFieldName;, +                if (functionArrayFound) {, +                    String errorString = "Found \"functions\": [...] already, now encountering \"" + currentFieldName + "\".";, +                    handleMisplacedFunctionsDeclaration(errorString, currentFieldName);, +                }, +                filterFunctions.add(new FiltersFunctionScoreQuery.FilterFunction(null, currentFunctionParser.parse(parseContext, parser)));, +                singleFunctionFound = true;, +    private void handleMisplacedFunctionsDeclaration(String errorString, String functionName) {, +        errorString = MISPLACED_FUNCTION_MESSAGE_PREFIX + errorString;, +        if (Arrays.asList(FactorParser.NAMES).contains(functionName)) {, +            errorString = errorString + MISPLACED_BOOST_FUNCTION_MESSAGE_SUFFIX;, +        }, +        throw new ElasticsearchParseException(errorString);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.index.query.functionscore.factor.FactorParser;, +import java.util.Arrays;, +    // For better readability of error message, +    static final String MISPLACED_FUNCTION_MESSAGE_PREFIX = "You can either define \"functions\":[...] or a single function, not both. ";, +    static final String MISPLACED_BOOST_FUNCTION_MESSAGE_SUFFIX = " Did you mean \"boost\" instead?";, +        // Either define array of functions and filters or only one function, +        boolean functionArrayFound = false;, +        boolean singleFunctionFound = false;, +        String singleFunctionName = null;, +, +                if (singleFunctionFound) {, +                    String errorString = "Found \"" + singleFunctionName + "\" already, now encountering \"functions\": [...].";, +                    handleMisplacedFunctionsDeclaration(errorString, singleFunctionName);, +                }, +                functionArrayFound = true;, +                // we try to parse a score function. If there is no score, +                // functionParserMapper.get() will throw an Exception., +                ScoreFunctionParser currentFunctionParser = funtionParserMapper.get(parseContext.index(), currentFieldName);, +                singleFunctionName = currentFieldName;, +                if (functionArrayFound) {, +                    String errorString = "Found \"functions\": [...] already, now encountering \"" + currentFieldName + "\".";, +                    handleMisplacedFunctionsDeclaration(errorString, currentFieldName);, +                }, +                filterFunctions.add(new FiltersFunctionScoreQuery.FilterFunction(null, currentFunctionParser.parse(parseContext, parser)));, +                singleFunctionFound = true;, +    private void handleMisplacedFunctionsDeclaration(String errorString, String functionName) {, +        errorString = MISPLACED_FUNCTION_MESSAGE_PREFIX + errorString;, +        if (Arrays.asList(FactorParser.NAMES).contains(functionName)) {, +            errorString = errorString + MISPLACED_BOOST_FUNCTION_MESSAGE_SUFFIX;, +        }, +        throw new ElasticsearchParseException(errorString);, +    }, +, +++ b/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +, +    @Test, +    public void errorMessageForFaultyFunctionScoreBody() throws Exception {, +        assertAcked(prepareCreate("test").addMapping(, +                "type",, +                jsonBuilder().startObject().startObject("type").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("num").field("type", "double").endObject().endObject().endObject().endObject()));, +        ensureYellow();, +        client().index(, +                indexRequest("test").type("type").source(jsonBuilder().startObject().field("test", "value").field("num", 1.0).endObject())), +                .actionGet();, +        refresh();, +, +        XContentBuilder query = XContentFactory.jsonBuilder();, +        // query that contains a functions[] array but also a single function, +        query.startObject().startObject("function_score").startArray("functions").startObject().field("boost_factor", "1.3").endObject().endArray().field("boost_factor", "1").endObject().endObject();, +        try {, +            client().search(, +                    searchRequest().source(, +                            searchSource().query(query))).actionGet();, +            fail("Search should result in SearchPhaseExecutionException");, +        } catch (SearchPhaseExecutionException e) {, +            logger.info(e.shardFailures()[0].reason());, +            assertTrue(e.shardFailures()[0].reason().contains("Found \"functions\": [...] already, now encountering \"boost_factor\". Did you mean \"boost\" instead?"));, +        }, +, +        query = XContentFactory.jsonBuilder();]