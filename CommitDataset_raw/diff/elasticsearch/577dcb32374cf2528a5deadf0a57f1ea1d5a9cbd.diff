[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.zen.ElectMasterService;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.zen.ElectMasterService;, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.discovery.zen.ElectMasterService;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.zen.ElectMasterService;, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.discovery.zen.ElectMasterService;, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ElectMasterService.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.discovery.zen;, +, +import com.carrotsearch.hppc.ObjectContainer;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.CollectionUtils;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Objects;, +import java.util.stream.Collectors;, +, +/**, + *, + */, +public class ElectMasterService extends AbstractComponent {, +, +    public static final Setting<Integer> DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING =, +        Setting.intSetting("discovery.zen.minimum_master_nodes", -1, Property.Dynamic, Property.NodeScope);, +, +    private volatile int minimumMasterNodes;, +, +    /**, +     * a class to encapsulate all the information about a candidate in a master election, +     * that is needed to decided which of the candidates should win, +     */, +    public static class MasterCandidate {, +, +        public static final long UNRECOVERED_CLUSTER_VERSION = -1;, +, +        final DiscoveryNode node;, +, +        final long clusterStateVersion;, +, +        public MasterCandidate(DiscoveryNode node, long clusterStateVersion) {, +            Objects.requireNonNull(node);, +            assert clusterStateVersion >= -1 : "got: " + clusterStateVersion;, +            assert node.isMasterNode();, +            this.node = node;, +            this.clusterStateVersion = clusterStateVersion;, +        }, +, +        public DiscoveryNode getNode() {, +            return node;, +        }, +, +        public long getClusterStateVersion() {, +            return clusterStateVersion;, +        }, +, +        @Override, +        public String toString() {, +            return "Candidate{" +, +                "node=" + node +, +                ", clusterStateVersion=" + clusterStateVersion +, +                '}';, +        }, +, +        /**, +         * compares two candidates to indicate which the a better master., +         * A higher cluster state version is better]