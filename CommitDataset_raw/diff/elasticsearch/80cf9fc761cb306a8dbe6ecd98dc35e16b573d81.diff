[+++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java, +import com.amazonaws.http.IdleConnectionReaper;, +, +        // Ensure that IdleConnectionReaper is shutdown, +        IdleConnectionReaper.shutdown();, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java, +import com.amazonaws.http.IdleConnectionReaper;, +, +        // Ensure that IdleConnectionReaper is shutdown, +        IdleConnectionReaper.shutdown();, +++ b/plugins/discovery-ec2/src/test/java/org/elasticsearch/discovery/ec2/Ec2DiscoveryClusterFormationTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.discovery.ec2;, +, +import com.amazonaws.util.IOUtils;, +import com.sun.net.httpserver.Headers;, +import com.sun.net.httpserver.HttpServer;, +import org.elasticsearch.cloud.aws.AwsEc2Service;, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.io.FileSystemUtils;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.plugin.discovery.ec2.Ec2DiscoveryPlugin;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.jboss.netty.handler.codec.http.QueryStringDecoder;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +, +import javax.xml.XMLConstants;, +import javax.xml.stream.XMLOutputFactory;, +import javax.xml.stream.XMLStreamException;, +import javax.xml.stream.XMLStreamWriter;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.io.StringWriter;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.UUID;, +import java.util.concurrent.ExecutionException;, +, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoTimeout;, +import static org.hamcrest.Matchers.equalTo;, +, +@ESIntegTestCase.SuppressLocalMode, +@ESIntegTestCase.ClusterScope(numDataNodes = 2, numClientNodes = 0), +@SuppressForbidden(reason = "use http server"), +// TODO this should be a IT but currently all ITs in this project run against a real cluster, +public class Ec2DiscoveryClusterFormationTests extends ESIntegTestCase {, +, +    public static class TestPlugin extends Plugin {, +, +        @Override, +        public String name() {, +            return Ec2DiscoveryClusterFormationTests.class.getName();, +        }, +, +        @Override, +        public String description() {, +            return Ec2DiscoveryClusterFormationTests.class.getName();, +        }, +    }, +, +    private static HttpServer httpServer;, +    private static Path logDir;, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return pluginList(Ec2DiscoveryPlugin.class, TestPlugin.class);, +    }, +, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        Path resolve = logDir.resolve(Integer.toString(nodeOrdinal));, +        try {]