[+++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +    };, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +    };, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/AbstractTermVectorsTestCase.java, +                .putArray("index.analysis.analyzer.tv_test.filter", "lowercase");, +                    assertNull("Missing payload test failed" + failDesc, esDocsPosEnum.getPayload());, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +    };, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/AbstractTermVectorsTestCase.java, +                .putArray("index.analysis.analyzer.tv_test.filter", "lowercase");, +                    assertNull("Missing payload test failed" + failDesc, esDocsPosEnum.getPayload());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +    };, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/AbstractTermVectorsTestCase.java, +                .putArray("index.analysis.analyzer.tv_test.filter", "lowercase");, +                    assertNull("Missing payload test failed" + failDesc, esDocsPosEnum.getPayload());, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));, +                // We never configure an analyzer with payloads for this test so this is never returned, +                assertNull("term: " + string, docsAndPositions.getPayload());, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +    };, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/AbstractTermVectorsTestCase.java, +                .putArray("index.analysis.analyzer.tv_test.filter", "lowercase");, +                    assertNull("Missing payload test failed" + failDesc, esDocsPosEnum.getPayload());, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));, +                // We never configure an analyzer with payloads for this test so this is never returned, +                assertNull("term: " + string, docsAndPositions.getPayload());, +++ b/core/src/test/java/org/elasticsearch/index/termvectors/TermVectorsServiceTests.java, +import org.apache.lucene.index.Terms;, +import org.apache.lucene.index.TermsEnum;, +import org.elasticsearch.action.bulk.BulkRequestBuilder;, +import java.io.IOException;, +, +    public void testDocFreqs() throws IOException {, +        XContentBuilder mapping = jsonBuilder(), +            .startObject(), +                .startObject("doc"), +                    .startObject("properties"), +                        .startObject("text"), +                            .field("type", "text"), +                            .field("term_vector", "with_positions_offsets_payloads"), +                        .endObject(), +                    .endObject(), +                .endObject(), +            .endObject();, +        Settings settings = Settings.builder(), +                .put("number_of_shards", 1), +                .build();, +        createIndex("test", settings, "doc", mapping);, +        ensureGreen();, +, +        int max = between(3, 10);, +        BulkRequestBuilder bulk = client().prepareBulk();, +        for (int i = 0; i < max; i++) {, +            bulk.add(client().prepareIndex("test", "doc", Integer.toString(i)), +                    .setSource("text", "the quick brown fox jumped over the lazy dog"));, +        }, +        bulk.get();, +, +        TermVectorsRequest request = new TermVectorsRequest("test", "doc", "0").termStatistics(true);, +, +        IndicesService indicesService = getInstanceFromNode(IndicesService.class);, +        IndexService test = indicesService.indexService(resolveIndex("test"));, +        IndexShard shard = test.getShardOrNull(0);, +        assertThat(shard, notNullValue());, +        TermVectorsResponse response = TermVectorsService.getTermVectors(shard, request);, +, +        Terms terms = response.getFields().terms("text");, +        TermsEnum iterator = terms.iterator();, +        while (iterator.next() != null) {, +            assertEquals(max, iterator.docFreq());, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +    };, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/AbstractTermVectorsTestCase.java, +                .putArray("index.analysis.analyzer.tv_test.filter", "lowercase");, +                    assertNull("Missing payload test failed" + failDesc, esDocsPosEnum.getPayload());, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));, +                        .putArray("index.analysis.analyzer.tv_test.filter", "lowercase")));]