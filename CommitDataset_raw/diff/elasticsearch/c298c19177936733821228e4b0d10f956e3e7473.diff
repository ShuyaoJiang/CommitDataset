[+++ b/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetParser.java, +    private final int ordinalsCacheAbove;, +, +        this.ordinalsCacheAbove = componentSettings.getAsInt("ordinals_cache_above", 10000); // above 40k we want to cache, +                return new TermsStringOrdinalsFacetExecutor((IndexFieldData.WithOrdinals) indexFieldData, size, comparatorType, allTerms, context, excluded, pattern, ordinalsCacheAbove);, +++ b/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetParser.java, +    private final int ordinalsCacheAbove;, +, +        this.ordinalsCacheAbove = componentSettings.getAsInt("ordinals_cache_above", 10000); // above 40k we want to cache, +                return new TermsStringOrdinalsFacetExecutor((IndexFieldData.WithOrdinals) indexFieldData, size, comparatorType, allTerms, context, excluded, pattern, ordinalsCacheAbove);, +++ b/src/main/java/org/elasticsearch/search/facet/terms/strings/TermsStringOrdinalsFacetExecutor.java, +    final int ordinalsCacheAbove;, +                                            ImmutableSet<BytesRef> excluded, Pattern pattern, int ordinalsCacheAbove) {, +        this.ordinalsCacheAbove = ordinalsCacheAbove;, +                if (aggregator.counts.length > ordinalsCacheAbove) {, +            }, +            if (aggregator.counts.length > ordinalsCacheAbove) {, +        }, +            current = new ReaderAggregator(values, ordinalsCacheAbove);, +        public ReaderAggregator(BytesValues.WithOrdinals values, int ordinalsCacheLimit) {, +            if (maxOrd > ordinalsCacheLimit) {, +            } else {, +                this.counts = new int[maxOrd];, +            }]