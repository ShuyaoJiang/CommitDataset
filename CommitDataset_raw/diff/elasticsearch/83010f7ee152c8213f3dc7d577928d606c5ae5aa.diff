[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +        return "shard [" + (shardTarget == null ? "_na" : shardTarget) + "], reason [" + reason + "]";, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +        return "shard [" + (shardTarget == null ? "_na" : shardTarget) + "], reason [" + reason + "]";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +import org.elasticsearch.index.shard.ShardId;, +, +import java.io.IOException;, +import java.util.Iterator;, +import java.util.Map;, +, +    /**, +     * Lists the store files metadata for a shard. Note, this should be able to list also, +     * metadata for shards that are no allocated as well., +     */, +    StoreFilesMetaData listStoreMetaData(ShardId shardId) throws IOException;, +, +    static class StoreFilesMetaData implements Iterable<StoreFileMetaData> {, +        private final boolean allocated;, +        private final Map<String, StoreFileMetaData> files;, +, +        public StoreFilesMetaData(boolean allocated, Map<String, StoreFileMetaData> files) {, +            this.allocated = allocated;, +            this.files = files;, +        }, +, +        public boolean allocated() {, +            return allocated;, +        }, +, +        @Override public Iterator<StoreFileMetaData> iterator() {, +            return files.values().iterator();, +        }, +, +        public StoreFileMetaData file(String name) {, +            return files.get(name);, +        }, +    }, +, +    static class StoreFileMetaData {, +        private final String name;, +        private final long sizeInBytes;, +, +        public StoreFileMetaData(String name, long sizeInBytes) {, +            this.name = name;, +            this.sizeInBytes = sizeInBytes;, +        }, +, +        public String name() {, +            return name;, +        }, +, +        public long sizeInBytes() {, +            return sizeInBytes;, +        }, +    }, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, null, nodeEnvironment));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +        return "shard [" + (shardTarget == null ? "_na" : shardTarget) + "], reason [" + reason + "]";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +import org.elasticsearch.index.shard.ShardId;, +, +import java.io.IOException;, +import java.util.Iterator;, +import java.util.Map;, +, +    /**, +     * Lists the store files metadata for a shard. Note, this should be able to list also, +     * metadata for shards that are no allocated as well., +     */, +    StoreFilesMetaData listStoreMetaData(ShardId shardId) throws IOException;, +, +    static class StoreFilesMetaData implements Iterable<StoreFileMetaData> {, +        private final boolean allocated;, +        private final Map<String, StoreFileMetaData> files;, +, +        public StoreFilesMetaData(boolean allocated, Map<String, StoreFileMetaData> files) {, +            this.allocated = allocated;, +            this.files = files;, +        }, +, +        public boolean allocated() {, +            return allocated;, +        }, +]