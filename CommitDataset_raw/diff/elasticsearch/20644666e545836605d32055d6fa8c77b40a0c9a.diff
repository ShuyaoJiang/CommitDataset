[+++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +    private static final String NAME = "_score";, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +    private static final String NAME = "_score";, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +    private static final String NAME = "_script";, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +    private static final String NAME = "_score";, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +    private static final String NAME = "_script";, +++ b/core/src/main/java/org/elasticsearch/search/sort/SortBuilder.java, +public abstract class SortBuilder<T extends SortBuilder<?>> implements ToXContent {, +, +    protected static Nested resolveNested(QueryShardContext context, String nestedPath, QueryBuilder<?> nestedFilter) throws IOException {, +        Nested nested = null;, +        if (nestedPath != null) {, +            BitSetProducer rootDocumentsFilter = context.bitsetFilter(Queries.newNonNestedFilter());, +            ObjectMapper nestedObjectMapper = context.getObjectMapper(nestedPath);, +            if (nestedObjectMapper == null) {, +                throw new QueryShardException(context, "[nested] failed to find nested object under path [" + nestedPath + "]");, +            }, +            if (!nestedObjectMapper.nested().isNested()) {, +                throw new QueryShardException(context, "[nested] nested object under path [" + nestedPath + "] is not of nested type");, +            }, +            Query innerDocumentsQuery;, +            if (nestedFilter != null) {, +                context.nestedScope().nextLevel(nestedObjectMapper);, +                innerDocumentsQuery = QueryBuilder.rewriteQuery(nestedFilter, context).toFilter(context);, +                context.nestedScope().previousLevel();, +            } else {, +                innerDocumentsQuery = nestedObjectMapper.nestedTypeFilter();, +            }, +            nested = new Nested(rootDocumentsFilter,  innerDocumentsQuery);, +        }, +        return nested;, +    }, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +    private static final String NAME = "_score";, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +    private static final String NAME = "_script";, +++ b/core/src/main/java/org/elasticsearch/search/sort/SortBuilder.java, +public abstract class SortBuilder<T extends SortBuilder<?>> implements ToXContent {, +, +    protected static Nested resolveNested(QueryShardContext context, String nestedPath, QueryBuilder<?> nestedFilter) throws IOException {, +        Nested nested = null;, +        if (nestedPath != null) {, +            BitSetProducer rootDocumentsFilter = context.bitsetFilter(Queries.newNonNestedFilter());, +            ObjectMapper nestedObjectMapper = context.getObjectMapper(nestedPath);, +            if (nestedObjectMapper == null) {, +                throw new QueryShardException(context, "[nested] failed to find nested object under path [" + nestedPath + "]");, +            }, +            if (!nestedObjectMapper.nested().isNested()) {, +                throw new QueryShardException(context, "[nested] nested object under path [" + nestedPath + "] is not of nested type");, +            }, +            Query innerDocumentsQuery;, +            if (nestedFilter != null) {, +                context.nestedScope().nextLevel(nestedObjectMapper);, +                innerDocumentsQuery = QueryBuilder.rewriteQuery(nestedFilter, context).toFilter(context);, +                context.nestedScope().previousLevel();, +            } else {, +                innerDocumentsQuery = nestedObjectMapper.nestedTypeFilter();, +            }, +            nested = new Nested(rootDocumentsFilter,  innerDocumentsQuery);, +        }, +        return nested;, +    }, +++ b/core/src/test/java/org/elasticsearch/recovery/RecoveryWhileUnderLoadIT.java, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.index.shard.ShardId;, +@TestLogging("_root:DEBUG,index.shard:TRACE"), +            ClusterService clusterService = clusterService();, +            final ClusterState state = clusterService.state();, +            for (int shard = 0; shard < numberOfShards; shard++) {, +                // background indexer starts using ids on 1, +                for (int id = 1; id <= numberOfDocs; id++) {, +                    ShardId docShard = clusterService.operationRouting().shardId(state, "test", Long.toString(id), null);, +                    if (docShard.id() == shard) {, +                        for (ShardRouting shardRouting : state.routingTable().shardRoutingTable("test", shard)) {, +                            GetResponse response = client().prepareGet("test", "type", Long.toString(id)), +                                    .setPreference("_only_node:" + shardRouting.currentNodeId()).get();, +                            if (response.isExists()) {, +                                logger.info("missing id [{}] on shard {}", id, shardRouting);, +                            }, +                        }, +                    }, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +    private static final String NAME = "_score";, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +    private static final String NAME = "_script";, +++ b/core/src/main/java/org/elasticsearch/search/sort/SortBuilder.java, +public abstract class SortBuilder<T extends SortBuilder<?>> implements ToXContent {]