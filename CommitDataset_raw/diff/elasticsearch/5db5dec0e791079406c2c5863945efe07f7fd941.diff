[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferringBucketCollector.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferringBucketCollector.java, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java, +import org.elasticsearch.index.fielddata.IndexFieldData;, +            IndexFieldData<?> fieldData = fieldType.fielddataBuilder().build(indexSettings, fieldType,, +                new IndexFieldDataCache.None(), circuitBreakerService, mock(MapperService.class));, +            when(queryShardContext.getForField(fieldType)).thenReturn(fieldData);, +        try (C a = createAggregator(builder, searcher, fieldTypes)) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferringBucketCollector.java, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java, +import org.elasticsearch.index.fielddata.IndexFieldData;, +            IndexFieldData<?> fieldData = fieldType.fielddataBuilder().build(indexSettings, fieldType,, +                new IndexFieldDataCache.None(), circuitBreakerService, mock(MapperService.class));, +            when(queryShardContext.getForField(fieldType)).thenReturn(fieldData);, +        try (C a = createAggregator(builder, searcher, fieldTypes)) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferringBucketCollector.java, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java, +import org.elasticsearch.index.fielddata.IndexFieldData;, +            IndexFieldData<?> fieldData = fieldType.fielddataBuilder().build(indexSettings, fieldType,, +                new IndexFieldDataCache.None(), circuitBreakerService, mock(MapperService.class));, +            when(queryShardContext.getForField(fieldType)).thenReturn(fieldData);, +        try (C a = createAggregator(builder, searcher, fieldTypes)) {, +++ /dev/null, +++ b/qa/backwards-5.0/build.gradle, +    bwcVersion = "5.4.0-SNAPSHOT"]