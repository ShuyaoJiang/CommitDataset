[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +        return new PlainShardIterator(shardId, shards);, +        return new PlainShardIterator(shardId, shards, counter.getAndIncrement());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +        return new PlainShardIterator(shardId, shards);, +        return new PlainShardIterator(shardId, shards, counter.getAndIncrement());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java, +    public PlainShardIterator(ShardId shardId, List<ShardRouting> shards, int index) {, +        super(shards, index);, +        this.shardId = shardId;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +        return new PlainShardIterator(shardId, shards);, +        return new PlainShardIterator(shardId, shards, counter.getAndIncrement());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java, +    public PlainShardIterator(ShardId shardId, List<ShardRouting> shards, int index) {, +        super(shards, index);, +        this.shardId = shardId;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/PlainShardsIterator.java, +    private final int origIndex;, +, +    private volatile int index;, +, +        this(shards, 0);, +    }, +, +    public PlainShardsIterator(List<ShardRouting> shards, int index) {, +        this.index = Math.abs(index);, +        this.origIndex = this.index;, +    @Override public ShardsIterator reset() {, +        counter = 0;, +        index = origIndex;, +        return this;, +    @Override public boolean hasNext() {, +        return counter < size();, +    }, +, +    @Override public ShardRouting next() throws NoSuchElementException {, +        counter++;, +        return shardModulo(index++);, +    }, +, +    @Override public void remove() {, +        throw new UnsupportedOperationException();, +    }, +, +    @Override public int size() {, +        return shards.size();, +        int shardsActive = 0;, +                shardsActive++;, +        return shardsActive;, +        int index = this.index;, +        while (counter++ < size()) {, +            ShardRouting shardRouting = shardModulo(index++);, +            if (shardRouting.active()) {, +        int counter = this.counter;, +        int index = this.index;, +        while (counter++ < size()) {, +            ShardRouting shardRouting = shardModulo(index++);, +                this.counter = counter;, +                this.index = index;, +        this.counter = counter;, +        this.index = index;, +        int shardsAssigned = 0;, +                shardsAssigned++;, +        return shardsAssigned;, +        int index = this.index;, +        while (counter++ < size()) {, +            ShardRouting shardRouting = shardModulo(index++);, +            if (shardRouting.assignedToNode()) {, +        int counter = this.counter;, +        int index = this.index;, +        while (counter++ < size()) {, +            ShardRouting shardRouting = shardModulo(index++);, +                this.counter = counter;, +                this.index = index;, +        this.counter = counter;, +        this.index = index;, +    ShardRouting shardModulo(int counter) {, +        return shards.get((counter % size()));]