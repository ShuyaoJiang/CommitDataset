[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/ExpressionRoleMapping.java, +import java.util.Objects;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +            (List<TemplateRoleName>) args[2], (Map<String, Object>) args[3], (boolean) args[4]));, +        PARSER.declareStringArray(optionalConstructorArg(), Fields.ROLES);, +        PARSER.declareObjectArray(optionalConstructorArg(), (parser, ctx) -> TemplateRoleName.fromXContent(parser), Fields.ROLE_TEMPLATES);, +    private final List<TemplateRoleName> roleTemplates;, +                                 final List<TemplateRoleName> templates, final Map<String, Object> metadata, boolean enabled) {, +        this.roles = roles == null ? Collections.emptyList() : Collections.unmodifiableList(roles);, +        this.roleTemplates = templates == null ? Collections.emptyList() : Collections.unmodifiableList(templates);, +    public List<TemplateRoleName> getRoleTemplates() {, +        return roleTemplates;, +    }, +, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        final ExpressionRoleMapping that = (ExpressionRoleMapping) o;, +        return this.enabled == that.enabled &&, +            Objects.equals(this.name, that.name) &&, +            Objects.equals(this.expression, that.expression) &&, +            Objects.equals(this.roles, that.roles) &&, +            Objects.equals(this.roleTemplates, that.roleTemplates) &&, +            Objects.equals(this.metadata, that.metadata);, +    public int hashCode() {, +        return Objects.hash(name, expression, roles, roleTemplates, metadata, enabled);, +        ParseField ROLE_TEMPLATES = new ParseField("role_templates");, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/ExpressionRoleMapping.java, +import java.util.Objects;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +            (List<TemplateRoleName>) args[2], (Map<String, Object>) args[3], (boolean) args[4]));, +        PARSER.declareStringArray(optionalConstructorArg(), Fields.ROLES);, +        PARSER.declareObjectArray(optionalConstructorArg(), (parser, ctx) -> TemplateRoleName.fromXContent(parser), Fields.ROLE_TEMPLATES);, +    private final List<TemplateRoleName> roleTemplates;, +                                 final List<TemplateRoleName> templates, final Map<String, Object> metadata, boolean enabled) {, +        this.roles = roles == null ? Collections.emptyList() : Collections.unmodifiableList(roles);, +        this.roleTemplates = templates == null ? Collections.emptyList() : Collections.unmodifiableList(templates);, +    public List<TemplateRoleName> getRoleTemplates() {, +        return roleTemplates;, +    }, +, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        final ExpressionRoleMapping that = (ExpressionRoleMapping) o;, +        return this.enabled == that.enabled &&, +            Objects.equals(this.name, that.name) &&, +            Objects.equals(this.expression, that.expression) &&, +            Objects.equals(this.roles, that.roles) &&, +            Objects.equals(this.roleTemplates, that.roleTemplates) &&, +            Objects.equals(this.metadata, that.metadata);, +    public int hashCode() {, +        return Objects.hash(name, expression, roles, roleTemplates, metadata, enabled);, +        ParseField ROLE_TEMPLATES = new ParseField("role_templates");, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleMappingRequest.java, +    private final List<TemplateRoleName> roleTemplates;, +    @Deprecated, +        this(name, enabled, roles, Collections.emptyList(), rules, metadata, refreshPolicy);, +    }, +, +    public PutRoleMappingRequest(final String name, final boolean enabled, final List<String> roles, final List<TemplateRoleName> templates,, +                                 final RoleMapperExpression rules, @Nullable final Map<String, Object> metadata,, +                                 @Nullable final RefreshPolicy refreshPolicy) {, +        this.roles = Collections.unmodifiableList(Objects.requireNonNull(roles, "role-mapping roles cannot be null"));, +        this.roleTemplates = Collections.unmodifiableList(Objects.requireNonNull(templates, "role-mapping role_templates cannot be null"));, +        if (this.roles.isEmpty() && this.roleTemplates.isEmpty()) {, +            throw new IllegalArgumentException("in a role-mapping, one of roles or role_templates is required");, +        if (this.roles.isEmpty() == false && this.roleTemplates.isEmpty() == false) {, +            throw new IllegalArgumentException("in a role-mapping, cannot specify both roles and role_templates");, +        }, +    public List<TemplateRoleName> getRoleTemplates() {, +        return roleTemplates;, +    }, +, +        return Objects.hash(name, enabled, refreshPolicy, roles, roleTemplates, rules, metadata);, +            Objects.equals(roleTemplates, other.roleTemplates) &&, +        builder.field("role_templates", roleTemplates);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/ExpressionRoleMapping.java, +import java.util.Objects;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +            (List<TemplateRoleName>) args[2], (Map<String, Object>) args[3], (boolean) args[4]));, +        PARSER.declareStringArray(optionalConstructorArg(), Fields.ROLES);, +        PARSER.declareObjectArray(optionalConstructorArg(), (parser, ctx) -> TemplateRoleName.fromXContent(parser), Fields.ROLE_TEMPLATES);, +    private final List<TemplateRoleName> roleTemplates;, +                                 final List<TemplateRoleName> templates, final Map<String, Object> metadata, boolean enabled) {, +        this.roles = roles == null ? Collections.emptyList() : Collections.unmodifiableList(roles);, +        this.roleTemplates = templates == null ? Collections.emptyList() : Collections.unmodifiableList(templates);, +    public List<TemplateRoleName> getRoleTemplates() {, +        return roleTemplates;, +    }, +, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        final ExpressionRoleMapping that = (ExpressionRoleMapping) o;, +        return this.enabled == that.enabled &&, +            Objects.equals(this.name, that.name) &&, +            Objects.equals(this.expression, that.expression) &&, +            Objects.equals(this.roles, that.roles) &&, +            Objects.equals(this.roleTemplates, that.roleTemplates) &&]