[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.getRoutingNodes();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.getRoutingNodes();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +     * Returns a built (on demand) routing nodes view of the routing table., +    public RoutingNodes getRoutingNodes() {, +        routingNodes = new RoutingNodes(this);, +        sb.append(getRoutingNodes().prettyPrint());, +            for (ShardRouting shardRouting : getRoutingNodes().unassigned()) {, +            for (RoutingNode routingNode : getRoutingNodes()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.getRoutingNodes();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +     * Returns a built (on demand) routing nodes view of the routing table., +    public RoutingNodes getRoutingNodes() {, +        routingNodes = new RoutingNodes(this);, +        sb.append(getRoutingNodes().prettyPrint());, +            for (ShardRouting shardRouting : getRoutingNodes().unassigned()) {, +            for (RoutingNode routingNode : getRoutingNodes()) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.getRoutingNodes();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +     * Returns a built (on demand) routing nodes view of the routing table., +    public RoutingNodes getRoutingNodes() {, +        routingNodes = new RoutingNodes(this);, +        sb.append(getRoutingNodes().prettyPrint());, +            for (ShardRouting shardRouting : getRoutingNodes().unassigned()) {, +            for (RoutingNode routingNode : getRoutingNodes()) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    private final boolean readOnly;, +, +        this(clusterState, true);, +    }, +, +    public RoutingNodes(ClusterState clusterState, boolean readOnly) {, +        this.readOnly = readOnly;, +                        final ShardRouting sr = getRouting(shard, readOnly);, +                            ShardRouting targetShardRouting = shard.buildTargetRelocatingShard();, +                            if (readOnly) {, +                                targetShardRouting.freeze();, +                            }, +                            entries.add(targetShardRouting);, +                            assignedShardsAdd(targetShardRouting);, +                        final ShardRouting sr =  getRouting(shard, readOnly);, +    private static ShardRouting getRouting(ShardRouting src, boolean readOnly) {, +        if (readOnly) {, +            src.freeze(); // we just freeze and reuse this instance if we are read only, +        } else {, +            src = new ShardRouting(src);, +        }, +        return src;, +    }, +, +        ensureMutable();, +        ensureMutable();, +        ensureMutable();, +        ensureMutable();, +        ensureMutable();, +        ensureMutable();, +        ensureMutable();, +        ensureMutable();, +        ensureMutable();, +                nodes.ensureMutable();, +            ensureMutable();, +            ensureMutable();, +, +    private void ensureMutable() {, +        if (readOnly) {, +            throw new IllegalStateException("can't modify RoutingNodes - readonly");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.getRoutingNodes();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +     * Returns a built (on demand) routing nodes view of the routing table., +    public RoutingNodes getRoutingNodes() {, +        routingNodes = new RoutingNodes(this);, +        sb.append(getRoutingNodes().prettyPrint());, +            for (ShardRouting shardRouting : getRoutingNodes().unassigned()) {, +            for (RoutingNode routingNode : getRoutingNodes()) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    private final boolean readOnly;, +, +        this(clusterState, true);, +    }, +, +    public RoutingNodes(ClusterState clusterState, boolean readOnly) {, +        this.readOnly = readOnly;, +                        final ShardRouting sr = getRouting(shard, readOnly);, +                            ShardRouting targetShardRouting = shard.buildTargetRelocatingShard();, +                            if (readOnly) {, +                                targetShardRouting.freeze();, +                            }, +                            entries.add(targetShardRouting);, +                            assignedShardsAdd(targetShardRouting);, +                        final ShardRouting sr =  getRouting(shard, readOnly);]