[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +            // tag::submit-reindex-task, +            ReindexRequest reindexRequest = new ReindexRequest(); // <1>, +            TaskSubmissionResponse reindexSubmission = highLevelClient(), +                .submitReindexTask(reindexRequest, RequestOptions.DEFAULT); // <2>, +            String taskId = reindexSubmission.getTask(); // <3>, +            // end::submit-reindex-task, +, +            BooleanSupplier hasUpgradeCompleted = checkCompletionStatus(taskId);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +            // tag::submit-reindex-task, +            ReindexRequest reindexRequest = new ReindexRequest(); // <1>, +            TaskSubmissionResponse reindexSubmission = highLevelClient(), +                .submitReindexTask(reindexRequest, RequestOptions.DEFAULT); // <2>, +            String taskId = reindexSubmission.getTask(); // <3>, +            // end::submit-reindex-task, +, +            BooleanSupplier hasUpgradeCompleted = checkCompletionStatus(taskId);, +++ b/docs/java-rest/high-level/document/bulk.asciidoc, +<1> Adds a `DeleteRequest` to the +{request}+. See <<{upid}-delete>>, +<2> Adds an `UpdateRequest` to the +{request}+. See <<{upid}-update>>, +include-tagged::{doc-tests-file}[{api}-request-pipeline], +include-tagged::{doc-tests-file}[{api}-request-routing], +include-tagged::{doc-tests-file}[{api}-request-index-type], +Both parameters are @Nullable and can only be set during +{request}+ creation., +<4> Set a flush interval flushing any +{request}+ pending if the, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +            // tag::submit-reindex-task, +            ReindexRequest reindexRequest = new ReindexRequest(); // <1>, +            TaskSubmissionResponse reindexSubmission = highLevelClient(), +                .submitReindexTask(reindexRequest, RequestOptions.DEFAULT); // <2>, +            String taskId = reindexSubmission.getTask(); // <3>, +            // end::submit-reindex-task, +, +            BooleanSupplier hasUpgradeCompleted = checkCompletionStatus(taskId);, +++ b/docs/java-rest/high-level/document/bulk.asciidoc, +<1> Adds a `DeleteRequest` to the +{request}+. See <<{upid}-delete>>, +<2> Adds an `UpdateRequest` to the +{request}+. See <<{upid}-update>>, +include-tagged::{doc-tests-file}[{api}-request-pipeline], +include-tagged::{doc-tests-file}[{api}-request-routing], +include-tagged::{doc-tests-file}[{api}-request-index-type], +Both parameters are @Nullable and can only be set during +{request}+ creation., +<4> Set a flush interval flushing any +{request}+ pending if the, +++ b/docs/java-rest/high-level/document/reindex.asciidoc, +A +{request}+ can be used to copy documents from one or more indexes into a, ++{request}+ also supports a `script` that modifies the document. It allows you to, +[id="{upid}-{api}-task-submission"], +==== Reindex task submission, +It is also possible to submit a +{request}+ and not wait for it completion with the use of Task API. This is an equivalent of a REST request, +with wait_for_completion flag set to false., +, +["source","java",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{hlrc-tests}/ReindexIT.java[submit-reindex-task], +--------------------------------------------------, +<1> A +{request}+ is constructed the same way as for the synchronous method, +<2> A submit method returns a `TaskSubmissionResponse` which contains a task identifier., +<3> The task identifier can be used to get `response` from a completed task., +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +            // tag::submit-reindex-task, +            ReindexRequest reindexRequest = new ReindexRequest(); // <1>, +            TaskSubmissionResponse reindexSubmission = highLevelClient(), +                .submitReindexTask(reindexRequest, RequestOptions.DEFAULT); // <2>, +            String taskId = reindexSubmission.getTask(); // <3>, +            // end::submit-reindex-task, +, +            BooleanSupplier hasUpgradeCompleted = checkCompletionStatus(taskId);, +++ b/docs/java-rest/high-level/document/bulk.asciidoc, +<1> Adds a `DeleteRequest` to the +{request}+. See <<{upid}-delete>>, +<2> Adds an `UpdateRequest` to the +{request}+. See <<{upid}-update>>, +include-tagged::{doc-tests-file}[{api}-request-pipeline], +include-tagged::{doc-tests-file}[{api}-request-routing], +include-tagged::{doc-tests-file}[{api}-request-index-type], +Both parameters are @Nullable and can only be set during +{request}+ creation., +<4> Set a flush interval flushing any +{request}+ pending if the, +++ b/docs/java-rest/high-level/document/reindex.asciidoc, +A +{request}+ can be used to copy documents from one or more indexes into a, ++{request}+ also supports a `script` that modifies the document. It allows you to, +[id="{upid}-{api}-task-submission"], +==== Reindex task submission, +It is also possible to submit a +{request}+ and not wait for it completion with the use of Task API. This is an equivalent of a REST request, +with wait_for_completion flag set to false., +, +["source","java",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{hlrc-tests}/ReindexIT.java[submit-reindex-task], +--------------------------------------------------, +<1> A +{request}+ is constructed the same way as for the synchronous method, +<2> A submit method returns a `TaskSubmissionResponse` which contains a task identifier., +<3> The task identifier can be used to get `response` from a completed task., +, +++ b/docs/java-rest/high-level/index.asciidoc, +:hlrc-tests: {docdir}/../../client/rest-high-level/src/test/java/org/elasticsearch/client, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +            // tag::submit-reindex-task, +            ReindexRequest reindexRequest = new ReindexRequest(); // <1>, +            TaskSubmissionResponse reindexSubmission = highLevelClient(), +                .submitReindexTask(reindexRequest, RequestOptions.DEFAULT); // <2>, +            String taskId = reindexSubmission.getTask(); // <3>]