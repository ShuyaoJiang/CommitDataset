[+++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import org.elasticsearch.action.search.SearchRequestBuilder;, +        final int numReplicas = randomIntBetween(0, 1);, +        final double topLevelRate;, +        final double lowLevelRate;, +                    lowLevelRate =  1.0/between(2, 10);, +                    topLevelRate = 0.0d;, +                    topLevelRate =  1.0/between(2, 10);, +                    lowLevelRate = 0.0d;, +                lowLevelRate =  1.0/between(2, 10);, +                topLevelRate =  1.0/between(2, 10);, +            topLevelRate = 0d;, +            lowLevelRate = 0d;, +                .put("index.number_of_replicas", numReplicas), +                .put(MockInternalEngine.READER_WRAPPER_TYPE, RandomExceptionDirectoryReaderWrapper.class.getName()), +                .put(EXCEPTION_TOP_LEVEL_RATIO_KEY, topLevelRate), +                .put(EXCEPTION_LOW_LEVEL_RATIO_KEY, lowLevelRate), +                .put(MockInternalEngine.WRAP_READER_RATIO, 1.0d);, +        final int numSearches = atLeast(50);, +        NodesStatsResponse resp = client().admin().cluster().prepareNodesStats(), +                .clear().setBreaker(true).execute().actionGet();, +        for (NodeStats stats : resp.getNodes()) {, +            assertThat("Breaker is set to 0", stats.getBreaker().getEstimated(), equalTo(0L));, +        }, +            SearchRequestBuilder searchRequestBuilder = client().prepareSearch().setQuery(QueryBuilders.matchAllQuery());, +            switch(randomIntBetween(0, 5)) {, +                case 5:, +                case 4:, +                case 3:, +                    searchRequestBuilder.addSort("test-str", SortOrder.ASC);, +                    // fall through - sometimes get both fields, +                case 2:, +                case 1:, +                default:, +                    searchRequestBuilder.addSort("test-num", SortOrder.ASC);, +, +            }, +            boolean success = false;, +                searchRequestBuilder.get();, +                success = true;, +                NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats(), +                    .clear().setBreaker(true).execute().actionGet();, +                for (NodeStats stats : nodeStats.getNodes()) {, +                    assertThat("Breaker reset to 0 last search success: " + success + " mapping: " + mapping, stats.getBreaker().getEstimated(), equalTo(0L));, +            }, +            public boolean wrapTerms(String field) {, +                return field.startsWith("test");, +, +, +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import org.elasticsearch.action.search.SearchRequestBuilder;, +        final int numReplicas = randomIntBetween(0, 1);, +        final double topLevelRate;, +        final double lowLevelRate;, +                    lowLevelRate =  1.0/between(2, 10);, +                    topLevelRate = 0.0d;, +                    topLevelRate =  1.0/between(2, 10);, +                    lowLevelRate = 0.0d;, +                lowLevelRate =  1.0/between(2, 10);, +                topLevelRate =  1.0/between(2, 10);, +            topLevelRate = 0d;, +            lowLevelRate = 0d;, +                .put("index.number_of_replicas", numReplicas), +                .put(MockInternalEngine.READER_WRAPPER_TYPE, RandomExceptionDirectoryReaderWrapper.class.getName()), +                .put(EXCEPTION_TOP_LEVEL_RATIO_KEY, topLevelRate), +                .put(EXCEPTION_LOW_LEVEL_RATIO_KEY, lowLevelRate), +                .put(MockInternalEngine.WRAP_READER_RATIO, 1.0d);, +        final int numSearches = atLeast(50);, +        NodesStatsResponse resp = client().admin().cluster().prepareNodesStats(), +                .clear().setBreaker(true).execute().actionGet();, +        for (NodeStats stats : resp.getNodes()) {, +            assertThat("Breaker is set to 0", stats.getBreaker().getEstimated(), equalTo(0L));, +        }, +            SearchRequestBuilder searchRequestBuilder = client().prepareSearch().setQuery(QueryBuilders.matchAllQuery());, +            switch(randomIntBetween(0, 5)) {, +                case 5:, +                case 4:, +                case 3:, +                    searchRequestBuilder.addSort("test-str", SortOrder.ASC);, +                    // fall through - sometimes get both fields, +                case 2:, +                case 1:, +                default:, +                    searchRequestBuilder.addSort("test-num", SortOrder.ASC);, +, +            }, +            boolean success = false;, +                searchRequestBuilder.get();, +                success = true;, +                NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats(), +                    .clear().setBreaker(true).execute().actionGet();, +                for (NodeStats stats : nodeStats.getNodes()) {, +                    assertThat("Breaker reset to 0 last search success: " + success + " mapping: " + mapping, stats.getBreaker().getEstimated(), equalTo(0L));, +            }, +            public boolean wrapTerms(String field) {, +                return field.startsWith("test");, +, +, +++ b/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsTests.java, +            }]