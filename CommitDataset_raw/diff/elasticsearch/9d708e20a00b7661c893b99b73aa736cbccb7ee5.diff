[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_size` configuration is limited to enabling the field., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_size` configuration is limited to enabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +import org.elasticsearch.Version;, +            SIZE_FIELD_TYPE.setStored(true);, +                } else if (fieldName.equals("store") && parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +        if (!includeDefaults && enabledState == Defaults.ENABLED_STATE && (writePre2xSettings == false || fieldType().stored() == false)) {, +        if (writePre2xSettings && (includeDefaults || fieldType().stored() == true)) {, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_size` configuration is limited to enabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +import org.elasticsearch.Version;, +            SIZE_FIELD_TYPE.setStored(true);, +                } else if (fieldName.equals("store") && parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +        if (!includeDefaults && enabledState == Defaults.ENABLED_STATE && (writePre2xSettings == false || fieldType().stored() == false)) {, +        if (writePre2xSettings && (includeDefaults || fieldType().stored() == true)) {, +++ b/src/test/java/org/elasticsearch/get/GetActionTests.java, +        String[] fieldsList = {"_timestamp"};, +        String[] alwaysStoredFieldsList = {"_routing", "_size"};, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_size` configuration is limited to enabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +import org.elasticsearch.Version;, +            SIZE_FIELD_TYPE.setStored(true);, +                } else if (fieldName.equals("store") && parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +        if (!includeDefaults && enabledState == Defaults.ENABLED_STATE && (writePre2xSettings == false || fieldType().stored() == false)) {, +        if (writePre2xSettings && (includeDefaults || fieldType().stored() == true)) {, +++ b/src/test/java/org/elasticsearch/get/GetActionTests.java, +        String[] fieldsList = {"_timestamp"};, +        String[] alwaysStoredFieldsList = {"_routing", "_size"};, +++ b/src/test/java/org/elasticsearch/index/mapper/size/SizeMappingTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +    public void testSizeEnabledAndStoredBackcompat() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_size").field("enabled", true).field("store", "yes").endObject(), +                .endObject().endObject().string();, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        DocumentMapper docMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse(mapping);, +, +        BytesReference source = XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "value"), +                .endObject(), +                .bytes();, +        ParsedDocument doc = docMapper.parse(SourceToParse.source(source).type("type").id("1"));, +, +        assertThat(doc.rootDoc().getField("_size").fieldType().stored(), equalTo(true));, +        assertThat(doc.rootDoc().getField("_size").tokenStream(docMapper.mappers().indexAnalyzer(), null), notNullValue());, +    }, +    , +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_size` configuration is limited to enabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +import org.elasticsearch.Version;, +            SIZE_FIELD_TYPE.setStored(true);, +                } else if (fieldName.equals("store") && parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +        if (!includeDefaults && enabledState == Defaults.ENABLED_STATE && (writePre2xSettings == false || fieldType().stored() == false)) {, +        if (writePre2xSettings && (includeDefaults || fieldType().stored() == true)) {, +++ b/src/test/java/org/elasticsearch/get/GetActionTests.java, +        String[] fieldsList = {"_timestamp"};, +        String[] alwaysStoredFieldsList = {"_routing", "_size"};, +++ b/src/test/java/org/elasticsearch/index/mapper/size/SizeMappingTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +    public void testSizeEnabledAndStoredBackcompat() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_size").field("enabled", true).field("store", "yes").endObject(), +                .endObject().endObject().string();, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        DocumentMapper docMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse(mapping);, +, +        BytesReference source = XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "value"), +                .endObject(), +                .bytes();, +        ParsedDocument doc = docMapper.parse(SourceToParse.source(source).type("type").id("1"));, +, +        assertThat(doc.rootDoc().getField("_size").fieldType().stored(), equalTo(true));, +        assertThat(doc.rootDoc().getField("_size").tokenStream(docMapper.mappers().indexAnalyzer(), null), notNullValue());, +    }, +    , +++ b/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingTests.java, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_size` configuration is limited to enabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +import org.elasticsearch.Version;, +            SIZE_FIELD_TYPE.setStored(true);, +                } else if (fieldName.equals("store") && parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +        if (!includeDefaults && enabledState == Defaults.ENABLED_STATE && (writePre2xSettings == false || fieldType().stored() == false)) {, +        if (writePre2xSettings && (includeDefaults || fieldType().stored() == true)) {, +++ b/src/test/java/org/elasticsearch/get/GetActionTests.java, +        String[] fieldsList = {"_timestamp"};]