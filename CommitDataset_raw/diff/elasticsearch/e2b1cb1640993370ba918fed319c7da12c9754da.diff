[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/geo/GeoDistanceSearchBenchmark.java, +            run(client, GeoDistance.ARC, "memory");, +        System.err.println("--> Warmup (ARC)  - optimize_bbox (memory) " + (totalTime / NUM_WARM) + "ms");, +        System.err.println("--> Perf (ARC) - optimize_bbox (memory)");, +            run(client, GeoDistance.ARC, "memory");, +        System.err.println("--> Warming up (ARC)  - optimize_bbox (indexed)");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_WARM; i++) {, +            run(client, GeoDistance.ARC, "indexed");, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Warmup (ARC) - optimize_bbox (indexed) " + (totalTime / NUM_WARM) + "ms");, +, +        System.err.println("--> Perf (ARC) - optimize_bbox (indexed)");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_RUNS; i++) {, +            run(client, GeoDistance.ARC, "indexed");, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Perf (ARC) - optimize_bbox (indexed) " + (totalTime / NUM_RUNS) + "ms");, +, +, +            run(client, GeoDistance.ARC, "none");, +            run(client, GeoDistance.ARC, "none");, +            run(client, GeoDistance.PLANE, "memory");, +            run(client, GeoDistance.PLANE, "memory");, +    public static void run(Client client, GeoDistance geoDistance, String optimizeBbox) {, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/geo/GeoDistanceSearchBenchmark.java, +            run(client, GeoDistance.ARC, "memory");, +        System.err.println("--> Warmup (ARC)  - optimize_bbox (memory) " + (totalTime / NUM_WARM) + "ms");, +        System.err.println("--> Perf (ARC) - optimize_bbox (memory)");, +            run(client, GeoDistance.ARC, "memory");, +        System.err.println("--> Warming up (ARC)  - optimize_bbox (indexed)");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_WARM; i++) {, +            run(client, GeoDistance.ARC, "indexed");, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Warmup (ARC) - optimize_bbox (indexed) " + (totalTime / NUM_WARM) + "ms");, +, +        System.err.println("--> Perf (ARC) - optimize_bbox (indexed)");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_RUNS; i++) {, +            run(client, GeoDistance.ARC, "indexed");, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Perf (ARC) - optimize_bbox (indexed) " + (totalTime / NUM_RUNS) + "ms");, +, +, +            run(client, GeoDistance.ARC, "none");, +            run(client, GeoDistance.ARC, "none");, +            run(client, GeoDistance.PLANE, "memory");, +            run(client, GeoDistance.PLANE, "memory");, +    public static void run(Client client, GeoDistance geoDistance, String optimizeBbox) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +    public Filter rangeFilter(Double lowerTerm, Double upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFilter.newDoubleRange(names.indexName(), precisionStep, lowerTerm, upperTerm, includeLower, includeUpper);, +    }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/geo/GeoDistanceSearchBenchmark.java, +            run(client, GeoDistance.ARC, "memory");, +        System.err.println("--> Warmup (ARC)  - optimize_bbox (memory) " + (totalTime / NUM_WARM) + "ms");, +        System.err.println("--> Perf (ARC) - optimize_bbox (memory)");, +            run(client, GeoDistance.ARC, "memory");, +        System.err.println("--> Warming up (ARC)  - optimize_bbox (indexed)");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_WARM; i++) {, +            run(client, GeoDistance.ARC, "indexed");, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Warmup (ARC) - optimize_bbox (indexed) " + (totalTime / NUM_WARM) + "ms");, +, +        System.err.println("--> Perf (ARC) - optimize_bbox (indexed)");, +        start = System.currentTimeMillis();, +        for (int i = 0; i < NUM_RUNS; i++) {, +            run(client, GeoDistance.ARC, "indexed");, +        }, +        totalTime = System.currentTimeMillis() - start;, +        System.err.println("--> Perf (ARC) - optimize_bbox (indexed) " + (totalTime / NUM_RUNS) + "ms");, +, +, +            run(client, GeoDistance.ARC, "none");, +            run(client, GeoDistance.ARC, "none");, +            run(client, GeoDistance.PLANE, "memory");, +            run(client, GeoDistance.PLANE, "memory");, +    public static void run(Client client, GeoDistance geoDistance, String optimizeBbox) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +    public Filter rangeFilter(Double lowerTerm, Double upperTerm, boolean includeLower, boolean includeUpper) {, +        return NumericRangeFilter.newDoubleRange(names.indexName(), precisionStep, lowerTerm, upperTerm, includeLower, includeUpper);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +import org.elasticsearch.index.mapper.core.DoubleFieldMapper;, +            DoubleFieldMapper latMapper = null;, +            DoubleFieldMapper lonMapper = null;, +                latMapper = (DoubleFieldMapper) latMapperBuilder.includeInAll(false).store(store).build(context);, +                lonMapper = (DoubleFieldMapper) lonMapperBuilder.includeInAll(false).store(store).build(context);, +    private final DoubleFieldMapper latMapper;, +    private final DoubleFieldMapper lonMapper;, +    private final GeoStringFieldMapper geoStringMapper;]