[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecyclerModule.java, +import org.elasticsearch.common.Classes;, +public class PageCacheRecyclerModule extends AbstractModule {, +        String impl = settings.get(CACHE_IMPL);, +        if (impl == null) {, +            bind(PageCacheRecycler.class).asEagerSingleton();, +        } else {, +            Class<? extends PageCacheRecycler> implClass = Classes.loadClass(getClass().getClassLoader(), impl);, +            bind(PageCacheRecycler.class).to(implClass).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecyclerModule.java, +import org.elasticsearch.common.Classes;, +public class PageCacheRecyclerModule extends AbstractModule {, +        String impl = settings.get(CACHE_IMPL);, +        if (impl == null) {, +            bind(PageCacheRecycler.class).asEagerSingleton();, +        } else {, +            Class<? extends PageCacheRecycler> implClass = Classes.loadClass(getClass().getClassLoader(), impl);, +            bind(PageCacheRecycler.class).to(implClass).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.search.SearchModule;, +                modules.add(new SearchModule(this.settings) {, +                    @Override, +                    protected void configure() {, +                        // noop, +                    }, +                });, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final String REST_EXCEPTION_SKIP_CAUSE = "rest.exception.cause.skip";, +    public static final String REST_EXCEPTION_SKIP_STACK_TRACE = "rest.exception.stacktrace.skip";, +    private static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = false;, +    private static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(this));, +            }, +        if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE, REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {, +            if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) {, +                builder.field("stack_trace", ExceptionsHelper.stackTrace(ex));, +            }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecyclerModule.java, +import org.elasticsearch.common.Classes;, +public class PageCacheRecyclerModule extends AbstractModule {, +        String impl = settings.get(CACHE_IMPL);, +        if (impl == null) {, +            bind(PageCacheRecycler.class).asEagerSingleton();, +        } else {, +            Class<? extends PageCacheRecycler> implClass = Classes.loadClass(getClass().getClassLoader(), impl);, +            bind(PageCacheRecycler.class).to(implClass).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java]