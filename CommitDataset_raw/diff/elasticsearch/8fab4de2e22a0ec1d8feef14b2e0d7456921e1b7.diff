[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import java.util.EnumSet;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +    private IndexMetaData(String index, long version, State state, Settings settings, ImmutableOpenMap<String, MappingMetaData> mappings, ImmutableOpenMap<String, AliasMetaData> aliases, ImmutableOpenMap<String, Custom> customs) {, +        this.settings = settings;, +            this.settings = settings.build();, +            return this;, +            return new IndexMetaData(index, version, state, tmpSettings, mappings.build(), tmpAliases.build(), customs.build());, +            builder.field("version", indexMetaData.getVersion());, +            builder.field("state", indexMetaData.getState().toString().toLowerCase(Locale.ENGLISH));, +            builder.startObject("settings");, +            builder.startArray("mappings");, +            builder.startObject("aliases");, +                    if ("settings".equals(currentFieldName)) {, +                    } else if ("mappings".equals(currentFieldName)) {, +                    } else if ("aliases".equals(currentFieldName)) {, +                    if ("mappings".equals(currentFieldName)) {, +                    if ("state".equals(currentFieldName)) {, +                    } else if ("version".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import java.util.EnumSet;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +    private IndexMetaData(String index, long version, State state, Settings settings, ImmutableOpenMap<String, MappingMetaData> mappings, ImmutableOpenMap<String, AliasMetaData> aliases, ImmutableOpenMap<String, Custom> customs) {, +        this.settings = settings;, +            this.settings = settings.build();, +            return this;, +            return new IndexMetaData(index, version, state, tmpSettings, mappings.build(), tmpAliases.build(), customs.build());, +            builder.field("version", indexMetaData.getVersion());, +            builder.field("state", indexMetaData.getState().toString().toLowerCase(Locale.ENGLISH));, +            builder.startObject("settings");, +            builder.startArray("mappings");, +            builder.startObject("aliases");, +                    if ("settings".equals(currentFieldName)) {, +                    } else if ("mappings".equals(currentFieldName)) {, +                    } else if ("aliases".equals(currentFieldName)) {, +                    if ("mappings".equals(currentFieldName)) {, +                    if ("state".equals(currentFieldName)) {, +                    } else if ("version".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     * creates a new {@link IndexRoutingTable} with all shard versions normalized, +    public IndexRoutingTable normalizeVersions() {, +            builder.addIndexShard(cursor.value.normalizeVersions());, +                        indexShardRoutingBuilder.addShard(ShardRouting.newUnassigned(index, shardId, null, i == 0, unassignedInfo));, +                        indexShardRoutingBuilder.addShard(ShardRouting.newUnassigned(index, shardId, i == 0 ? restoreSource : null, i == 0, unassignedInfo));, +                    indexShardRoutingBuilder.addShard(ShardRouting.newUnassigned(index, shardId, null, i == 0, unassignedInfo));, +                ShardRouting shard = ShardRouting.newUnassigned(index, shardId, null, false, new UnassignedInfo(UnassignedInfo.Reason.REPLICA_ADDED, null));, +                        new IndexShardRoutingTable.Builder(shards.get(shard.id())).addShard(shard).build(), +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import java.util.EnumSet;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +    private IndexMetaData(String index, long version, State state, Settings settings, ImmutableOpenMap<String, MappingMetaData> mappings, ImmutableOpenMap<String, AliasMetaData> aliases, ImmutableOpenMap<String, Custom> customs) {, +        this.settings = settings;, +            this.settings = settings.build();, +            return this;, +            return new IndexMetaData(index, version, state, tmpSettings, mappings.build(), tmpAliases.build(), customs.build());, +            builder.field("version", indexMetaData.getVersion());, +            builder.field("state", indexMetaData.getState().toString().toLowerCase(Locale.ENGLISH));, +            builder.startObject("settings");, +            builder.startArray("mappings");, +            builder.startObject("aliases");, +                    if ("settings".equals(currentFieldName)) {, +                    } else if ("mappings".equals(currentFieldName)) {, +                    } else if ("aliases".equals(currentFieldName)) {, +                    if ("mappings".equals(currentFieldName)) {, +                    if ("state".equals(currentFieldName)) {, +                    } else if ("version".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     * creates a new {@link IndexRoutingTable} with all shard versions normalized, +    public IndexRoutingTable normalizeVersions() {, +            builder.addIndexShard(cursor.value.normalizeVersions());, +                        indexShardRoutingBuilder.addShard(ShardRouting.newUnassigned(index, shardId, null, i == 0, unassignedInfo));, +                        indexShardRoutingBuilder.addShard(ShardRouting.newUnassigned(index, shardId, i == 0 ? restoreSource : null, i == 0, unassignedInfo));, +                    indexShardRoutingBuilder.addShard(ShardRouting.newUnassigned(index, shardId, null, i == 0, unassignedInfo));, +                ShardRouting shard = ShardRouting.newUnassigned(index, shardId, null, false, new UnassignedInfo(UnassignedInfo.Reason.REPLICA_ADDED, null));, +                        new IndexShardRoutingTable.Builder(shards.get(shard.id())).addShard(shard).build(), +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +     * Normalizes all shard routings to the same version., +    public IndexShardRoutingTable normalizeVersions() {, +            if (shards.get(i).version() != highestVersion) {, +            if (shards.get(i).version() > highestVersion) {, +                highestVersion = shards.get(i).version();, +            }]