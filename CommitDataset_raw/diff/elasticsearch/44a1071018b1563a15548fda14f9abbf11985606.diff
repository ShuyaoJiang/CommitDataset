[+++ b/server/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, +import org.apache.lucene.util.SetOnce;, +    private final SetOnce<OnCancel> onCancel = new SetOnce<>();, +    public void checkForCancel() {, +        checkForCancel(null);, +    }, +    private void checkForCancel(Exception beforeCancelException) {, +            final String reason;, +            final OnCancel onCancel;, +            synchronized (this) {, +                reason = this.reason;, +                onCancel = this.onCancel.get();, +            if (onCancel != null) {, +                onCancel.onCancel(reason, beforeCancelException);, +            // fallback to the default exception, +            final RuntimeException cancelExp = new ExecutionCancelledException("operation was cancelled reason [" + reason + "]");, +            if (beforeCancelException != null) {, +                cancelExp.addSuppressed(beforeCancelException);, +            throw cancelExp;, +        }, +        checkForCancel(ioException != null ? ioException : runtimeException);, +        if (ioException != null) {, +, +    /**, +     * Registers a callback that will be invoked when some running operations are cancelled or {@link #checkForCancel()} is called., +     */, +    public synchronized void setOnCancel(OnCancel onCancel) {, +        this.onCancel.set(onCancel);, +    }, +, +    @FunctionalInterface, +    public interface OnCancel {, +        /**, +         * Called when some running operations are cancelled or {@link #checkForCancel()} is explicitly called., +         * If this method throws an exception, cancelling tasks will fail with that exception; otherwise they, +         * will fail with the default exception {@link ExecutionCancelledException}., +         *, +         * @param reason                the reason of the cancellation, +         * @param beforeCancelException any error that was encountered during the execution before the operations were cancelled., +         * @see #checkForCancel(), +         * @see #setOnCancel(OnCancel), +         */, +        void onCancel(String reason, @Nullable Exception beforeCancelException);, +    }, +++ b/server/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, +import org.apache.lucene.util.SetOnce;, +    private final SetOnce<OnCancel> onCancel = new SetOnce<>();, +    public void checkForCancel() {, +        checkForCancel(null);, +    }, +    private void checkForCancel(Exception beforeCancelException) {, +            final String reason;, +            final OnCancel onCancel;, +            synchronized (this) {, +                reason = this.reason;, +                onCancel = this.onCancel.get();, +            if (onCancel != null) {, +                onCancel.onCancel(reason, beforeCancelException);, +            // fallback to the default exception, +            final RuntimeException cancelExp = new ExecutionCancelledException("operation was cancelled reason [" + reason + "]");, +            if (beforeCancelException != null) {, +                cancelExp.addSuppressed(beforeCancelException);, +            throw cancelExp;, +        }, +        checkForCancel(ioException != null ? ioException : runtimeException);, +        if (ioException != null) {, +, +    /**, +     * Registers a callback that will be invoked when some running operations are cancelled or {@link #checkForCancel()} is called., +     */, +    public synchronized void setOnCancel(OnCancel onCancel) {, +        this.onCancel.set(onCancel);, +    }, +, +    @FunctionalInterface, +    public interface OnCancel {, +        /**, +         * Called when some running operations are cancelled or {@link #checkForCancel()} is explicitly called., +         * If this method throws an exception, cancelling tasks will fail with that exception; otherwise they, +         * will fail with the default exception {@link ExecutionCancelledException}., +         *, +         * @param reason                the reason of the cancellation, +         * @param beforeCancelException any error that was encountered during the execution before the operations were cancelled., +         * @see #checkForCancel(), +         * @see #setOnCancel(OnCancel), +         */, +        void onCancel(String reason, @Nullable Exception beforeCancelException);, +    }, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoverySourceService.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.support.HandledTransportAction;, +    private void recover(StartRecoveryRequest request, ActionListener<RecoveryResponse> listener) throws IOException {, +        handler.recoverToTarget(ActionListener.runAfter(listener, () -> ongoingRecoveries.remove(shard, handler)));, +            recover(request, new HandledTransportAction.ChannelActionListener<>(channel, Actions.START_RECOVERY, request));, +++ b/server/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, +import org.apache.lucene.util.SetOnce;, +    private final SetOnce<OnCancel> onCancel = new SetOnce<>();, +    public void checkForCancel() {, +        checkForCancel(null);, +    }]