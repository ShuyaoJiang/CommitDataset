[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;, +import org.elasticsearch.search.aggregations.support.format.ValueFormatter.DateTime;, +        ValuesSourceConfig config = vsParser.config();, +        if (config.formatter()!=null) {, +            ((DateTime) config.formatter()).setTimeZone(timeZone);, +        }, +        return new HistogramAggregator.Factory(aggregationName, config, rounding, order, keyed, minDocCount, extendedBounds,, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;, +import org.elasticsearch.search.aggregations.support.format.ValueFormatter.DateTime;, +        ValuesSourceConfig config = vsParser.config();, +        if (config.formatter()!=null) {, +            ((DateTime) config.formatter()).setTimeZone(timeZone);, +        }, +        return new HistogramAggregator.Factory(aggregationName, config, rounding, order, keyed, minDocCount, extendedBounds,, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormatter.java, +import org.joda.time.DateTimeZone;, +import java.util.TimeZone;, +        private DateTimeZone timeZone = DateTimeZone.UTC;, +            return formatter.printer().withZone(timeZone).print(time);, +        }, +, +        public void setTimeZone(DateTimeZone timeZone) {, +            this.timeZone = timeZone;, +            timeZone = DateTimeZone.forID(in.readString());, +            out.writeString(timeZone.getID());, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;, +import org.elasticsearch.search.aggregations.support.format.ValueFormatter.DateTime;, +        ValuesSourceConfig config = vsParser.config();, +        if (config.formatter()!=null) {, +            ((DateTime) config.formatter()).setTimeZone(timeZone);, +        }, +        return new HistogramAggregator.Factory(aggregationName, config, rounding, order, keyed, minDocCount, extendedBounds,, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormatter.java, +import org.joda.time.DateTimeZone;, +import java.util.TimeZone;, +        private DateTimeZone timeZone = DateTimeZone.UTC;, +            return formatter.printer().withZone(timeZone).print(time);, +        }, +, +        public void setTimeZone(DateTimeZone timeZone) {, +            this.timeZone = timeZone;, +            timeZone = DateTimeZone.forID(in.readString());, +            out.writeString(timeZone.getID());, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java, +import org.joda.time.tz.DateTimeZoneBuilder;, +        return getBucketKeyAsString(key, DateTimeZone.UTC);, +    }, +, +    private static String getBucketKeyAsString(DateTime key, DateTimeZone tz) {, +        return Joda.forPattern(DateFieldMapper.Defaults.DATE_TIME_FORMATTER.format()).printer().withZone(tz).print(key);, +        DateTimeZone tz = DateTimeZone.forID("+01:00");, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(((DateTime) bucket.getKey()), equalTo(key));, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(((DateTime) bucket.getKey()), equalTo(key));, +                        .format("yyyy-MM-dd:HH-mm-ssZZ")), +        assertThat(bucket.getKeyAsString(), equalTo("2014-03-10:00-00-00-02:00"));, +        assertThat(bucket.getKeyAsString(), equalTo("2014-03-11:00-00-00-02:00"));, +        DateTimeZone tz = DateTimeZone.forID("+01:00");, +, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(bucket.getKeyAsString(), equalTo(getBucketKeyAsString(key, tz)));, +        assertThat(histo.getBuckets().get(0).getKeyAsString(), equalTo("2014-01-01T00:00:00.000+02:00"));]