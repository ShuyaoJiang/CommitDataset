[+++ b/src/main/java/org/elasticsearch/common/io/stream/AdapterStreamInput.java, +    public Text readSharedText() throws IOException {, +        return in.readSharedText();, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/io/stream/AdapterStreamInput.java, +    public Text readSharedText() throws IOException {, +        return in.readSharedText();, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/io/stream/AdapterStreamOutput.java, +    public void writeSharedText(Text text) throws IOException {, +        out.writeSharedText(text);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/io/stream/AdapterStreamInput.java, +    public Text readSharedText() throws IOException {, +        return in.readSharedText();, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/io/stream/AdapterStreamOutput.java, +    public void writeSharedText(Text text) throws IOException {, +        out.writeSharedText(text);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/io/stream/HandlesStreamInput.java, +import org.elasticsearch.common.text.Text;, +    private final TIntObjectHashMap<Text> handlesText = new TIntObjectHashMap<Text>();, +, +    public Text readSharedText() throws IOException {, +        byte b = in.readByte();, +        if (b == 0) {, +            int handle = in.readVInt();, +            Text s = in.readText();, +            handlesText.put(handle, s);, +            return s;, +        } else if (b == 1) {, +            return handlesText.get(in.readVInt());, +        } else if (b == 2) {, +            return in.readText();, +        } else {, +            throw new IOException("Expected handle header, got [" + b + "]");, +        }, +    }, +, +    @Override, +        handlesText.clear();, +        handlesText.clear();, +        handlesText.clear();, +++ b/src/main/java/org/elasticsearch/common/io/stream/AdapterStreamInput.java, +    public Text readSharedText() throws IOException {, +        return in.readSharedText();, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/io/stream/AdapterStreamOutput.java, +    public void writeSharedText(Text text) throws IOException {, +        out.writeSharedText(text);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/io/stream/HandlesStreamInput.java, +import org.elasticsearch.common.text.Text;, +    private final TIntObjectHashMap<Text> handlesText = new TIntObjectHashMap<Text>();, +, +    public Text readSharedText() throws IOException {, +        byte b = in.readByte();, +        if (b == 0) {, +            int handle = in.readVInt();, +            Text s = in.readText();, +            handlesText.put(handle, s);, +            return s;, +        } else if (b == 1) {, +            return handlesText.get(in.readVInt());, +        } else if (b == 2) {, +            return in.readText();, +        } else {, +            throw new IOException("Expected handle header, got [" + b + "]");, +        }, +    }, +, +    @Override, +        handlesText.clear();, +        handlesText.clear();, +        handlesText.clear();, +++ b/src/main/java/org/elasticsearch/common/io/stream/HandlesStreamOutput.java, +import org.elasticsearch.common.text.Text;, +    private final TObjectIntHashMap<Text> handlesText = new TObjectIntHashMap<Text>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR, -1);, +, +    public void writeSharedText(Text text) throws IOException {, +        int length;, +        if (text.hasBytes()) {, +            length = text.bytes().length();, +        } else {, +            length = text.string().length();]