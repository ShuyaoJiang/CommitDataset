[+++ b/docs/reference/sql/limitations.asciidoc, +However this type of aggregation does come with a limitation: sorting can only be applied on the key used for the aggregation's buckets. , +{es-sql} overcomes this limitation by doing client-side sorting however as a safety measure, allows only up to *512* rows., +, +It is recommended to use `LIMIT` for queries that use sorting by aggregation, essentially indicating the top N results that are desired:, +, +[source, sql], +--------------------------------------------------, +SELECT * FROM test GROUP BY age ORDER BY COUNT(*) LIMIT 100;, +--------------------------------------------------, +, +It is possible to run the same queries without a `LIMIT` however in that case if the maximum size (*512*) is passed, an exception will be, +returned as {es-sql} is unable to track (and sort) all the results returned., +++ b/docs/reference/sql/limitations.asciidoc, +However this type of aggregation does come with a limitation: sorting can only be applied on the key used for the aggregation's buckets. , +{es-sql} overcomes this limitation by doing client-side sorting however as a safety measure, allows only up to *512* rows., +, +It is recommended to use `LIMIT` for queries that use sorting by aggregation, essentially indicating the top N results that are desired:, +, +[source, sql], +--------------------------------------------------, +SELECT * FROM test GROUP BY age ORDER BY COUNT(*) LIMIT 100;, +--------------------------------------------------, +, +It is possible to run the same queries without a `LIMIT` however in that case if the maximum size (*512*) is passed, an exception will be, +returned as {es-sql} is unable to track (and sort) all the results returned., +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("  \\_Filter[Equals[?i,2"));, +        assertThat(readLine(), startsWith("    \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("\\_Filter[Equals[i"));, +        assertThat(readLine(), startsWith("\\_Filter[Equals[i"));, +        assertThat(readLine(), startsWith("\\_Project[[?COUNT[?*]]]"));, +        assertThat(readLine(), startsWith("  \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("Aggregate[[],[Count[*=1"));, +        assertThat(readLine(), startsWith("Aggregate[[],[Count[*=1"));, +++ b/docs/reference/sql/limitations.asciidoc, +However this type of aggregation does come with a limitation: sorting can only be applied on the key used for the aggregation's buckets. , +{es-sql} overcomes this limitation by doing client-side sorting however as a safety measure, allows only up to *512* rows., +, +It is recommended to use `LIMIT` for queries that use sorting by aggregation, essentially indicating the top N results that are desired:, +, +[source, sql], +--------------------------------------------------, +SELECT * FROM test GROUP BY age ORDER BY COUNT(*) LIMIT 100;, +--------------------------------------------------, +, +It is possible to run the same queries without a `LIMIT` however in that case if the maximum size (*512*) is passed, an exception will be, +returned as {es-sql} is unable to track (and sort) all the results returned., +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("  \\_Filter[Equals[?i,2"));, +        assertThat(readLine(), startsWith("    \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("\\_Filter[Equals[i"));, +        assertThat(readLine(), startsWith("\\_Filter[Equals[i"));, +        assertThat(readLine(), startsWith("\\_Project[[?COUNT[?*]]]"));, +        assertThat(readLine(), startsWith("  \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("Aggregate[[],[Count[*=1"));, +        assertThat(readLine(), startsWith("Aggregate[[],[Count[*=1"));, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java, +        assertEquals("line 1:54: Cannot order by non-grouped column [SCORE()], expected [foo] or an aggregate function" + END, readLine());, +++ b/docs/reference/sql/limitations.asciidoc, +However this type of aggregation does come with a limitation: sorting can only be applied on the key used for the aggregation's buckets. , +{es-sql} overcomes this limitation by doing client-side sorting however as a safety measure, allows only up to *512* rows., +, +It is recommended to use `LIMIT` for queries that use sorting by aggregation, essentially indicating the top N results that are desired:, +, +[source, sql], +--------------------------------------------------, +SELECT * FROM test GROUP BY age ORDER BY COUNT(*) LIMIT 100;, +--------------------------------------------------, +, +It is possible to run the same queries without a `LIMIT` however in that case if the maximum size (*512*) is passed, an exception will be, +returned as {es-sql} is unable to track (and sort) all the results returned., +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/CliExplainIT.java, +        assertThat(readLine(), startsWith("  \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("  \\_Filter[Equals[?i,2"));, +        assertThat(readLine(), startsWith("    \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("\\_Filter[Equals[i"));, +        assertThat(readLine(), startsWith("\\_Filter[Equals[i"));, +        assertThat(readLine(), startsWith("\\_Project[[?COUNT[?*]]]"));, +        assertThat(readLine(), startsWith("  \\_UnresolvedRelation[test]"));, +        assertThat(readLine(), startsWith("Aggregate[[],[Count[*=1"));, +        assertThat(readLine(), startsWith("Aggregate[[],[Count[*=1"));, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java, +        assertEquals("line 1:54: Cannot order by non-grouped column [SCORE()], expected [foo] or an aggregate function" + END, readLine());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java, +            assertEquals(, +                    "Found 1 problem(s)\nline 1:54: Cannot order by non-grouped column [SCORE()], expected [foo] or an aggregate function",, +                    e.getMessage());, +++ b/docs/reference/sql/limitations.asciidoc, +However this type of aggregation does come with a limitation: sorting can only be applied on the key used for the aggregation's buckets. , +{es-sql} overcomes this limitation by doing client-side sorting however as a safety measure, allows only up to *512* rows., +, +It is recommended to use `LIMIT` for queries that use sorting by aggregation, essentially indicating the top N results that are desired:, +, +[source, sql], +--------------------------------------------------, +SELECT * FROM test GROUP BY age ORDER BY COUNT(*) LIMIT 100;, +--------------------------------------------------]