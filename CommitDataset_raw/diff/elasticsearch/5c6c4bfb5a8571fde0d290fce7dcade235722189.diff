[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/histogram/HistogramFacetCollectorParser.java, +        if (valueScript != null) {, +            return new KeyValueScriptHistogramFacetCollector(facetName, keyField, scriptLang, valueScript, params, interval, comparatorType, context);, +        } else if (valueField == null || keyField.equals(valueField)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/histogram/HistogramFacetCollectorParser.java, +        if (valueScript != null) {, +            return new KeyValueScriptHistogramFacetCollector(facetName, keyField, scriptLang, valueScript, params, interval, comparatorType, context);, +        } else if (valueField == null || keyField.equals(valueField)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/histogram/HistogramScriptFacetBuilder.java, +    private String keyFieldName;, +    public HistogramScriptFacetBuilder keyField(String keyFieldName) {, +        this.keyFieldName = keyFieldName;, +        return this;, +    }, +, +        if (keyScript == null && keyFieldName == null) {, +            throw new SearchSourceBuilderException("key_script or key_field must be set on histogram script facet for facet [" + name + "]");, +        if (keyFieldName != null) {, +            builder.field("key_field", keyFieldName);, +        } else if (keyScript != null) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/histogram/HistogramFacetCollectorParser.java, +        if (valueScript != null) {, +            return new KeyValueScriptHistogramFacetCollector(facetName, keyField, scriptLang, valueScript, params, interval, comparatorType, context);, +        } else if (valueField == null || keyField.equals(valueField)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/histogram/HistogramScriptFacetBuilder.java, +    private String keyFieldName;, +    public HistogramScriptFacetBuilder keyField(String keyFieldName) {, +        this.keyFieldName = keyFieldName;, +        return this;, +    }, +, +        if (keyScript == null && keyFieldName == null) {, +            throw new SearchSourceBuilderException("key_script or key_field must be set on histogram script facet for facet [" + name + "]");, +        if (keyFieldName != null) {, +            builder.field("key_field", keyFieldName);, +        } else if (keyScript != null) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/histogram/KeyValueScriptHistogramFacetCollector.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.facet.histogram;, +, +import org.apache.lucene.index.IndexReader;, +import org.elasticsearch.common.trove.TLongDoubleHashMap;, +import org.elasticsearch.common.trove.TLongLongHashMap;, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.field.data.FieldDataType;, +import org.elasticsearch.index.field.data.NumericFieldData;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.script.search.SearchScript;, +import org.elasticsearch.search.facet.Facet;, +import org.elasticsearch.search.facet.FacetPhaseExecutionException;, +import org.elasticsearch.search.facet.support.AbstractFacetCollector;, +import org.elasticsearch.search.internal.SearchContext;, +, +import java.io.IOException;, +import java.util.Map;, +, +/**, + * A histogram facet collector that uses the same field as the key as well as the, + * value., + *, + * @author kimchy (shay.banon), + */, +public class KeyValueScriptHistogramFacetCollector extends AbstractFacetCollector {, +, +    private final String fieldName;, +, +    private final String indexFieldName;, +, +    private final long interval;, +, +    private final HistogramFacet.ComparatorType comparatorType;, +, +    private final FieldDataCache fieldDataCache;, +, +    private final FieldDataType fieldDataType;, +, +    private NumericFieldData fieldData;, +, +    private final SearchScript valueScript;]