[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.action.ActionListener;, +    public boolean isSecurityIndexUpToDate() {, +        return securityIndex.isIndexUpToDate();, +    }, +, +, +    /**, +     * Creates the security index, if it does not already exist, then runs the given, +     * action on the security index., +     */, +    public <T> void createIndexIfNeededThenExecute(final ActionListener<T> listener, final Runnable andThen) {, +        if (!isSecurityIndexExisting() || isSecurityIndexUpToDate()) {, +            securityIndex.createIndexIfNeededThenExecute(listener, andThen);, +        } else {, +            listener.onFailure(new IllegalStateException(, +                "Security index is not on the current version - please upgrade with the upgrade api"));, +        }, +    }, +, +    /**, +     * Checks if the security index is out of date with the current version., +     */, +    public boolean isSecurityIndexOutOfDate() {, +        return securityIndex.indexExists() && !securityIndex.isIndexUpToDate();, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.action.ActionListener;, +    public boolean isSecurityIndexUpToDate() {, +        return securityIndex.isIndexUpToDate();, +    }, +, +, +    /**, +     * Creates the security index, if it does not already exist, then runs the given, +     * action on the security index., +     */, +    public <T> void createIndexIfNeededThenExecute(final ActionListener<T> listener, final Runnable andThen) {, +        if (!isSecurityIndexExisting() || isSecurityIndexUpToDate()) {, +            securityIndex.createIndexIfNeededThenExecute(listener, andThen);, +        } else {, +            listener.onFailure(new IllegalStateException(, +                "Security index is not on the current version - please upgrade with the upgrade api"));, +        }, +    }, +, +    /**, +     * Checks if the security index is out of date with the current version., +     */, +    public boolean isSecurityIndexOutOfDate() {, +        return securityIndex.indexExists() && !securityIndex.isIndexUpToDate();, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +    public static final String DOC_TYPE = "doc";, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.action.ActionListener;, +    public boolean isSecurityIndexUpToDate() {, +        return securityIndex.isIndexUpToDate();, +    }, +, +, +    /**, +     * Creates the security index, if it does not already exist, then runs the given, +     * action on the security index., +     */, +    public <T> void createIndexIfNeededThenExecute(final ActionListener<T> listener, final Runnable andThen) {, +        if (!isSecurityIndexExisting() || isSecurityIndexUpToDate()) {, +            securityIndex.createIndexIfNeededThenExecute(listener, andThen);, +        } else {, +            listener.onFailure(new IllegalStateException(, +                "Security index is not on the current version - please upgrade with the upgrade api"));, +        }, +    }, +, +    /**, +     * Checks if the security index is out of date with the current version., +     */, +    public boolean isSecurityIndexOutOfDate() {, +        return securityIndex.indexExists() && !securityIndex.isIndexUpToDate();, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +    public static final String DOC_TYPE = "doc";, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ExpiredTokenRemover.java, +import org.elasticsearch.xpack.security.SecurityLifecycleService;, +        SearchRequest searchRequest = new SearchRequest(SecurityLifecycleService.SECURITY_INDEX_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.action.ActionListener;, +    public boolean isSecurityIndexUpToDate() {, +        return securityIndex.isIndexUpToDate();, +    }, +, +, +    /**, +     * Creates the security index, if it does not already exist, then runs the given, +     * action on the security index., +     */, +    public <T> void createIndexIfNeededThenExecute(final ActionListener<T> listener, final Runnable andThen) {, +        if (!isSecurityIndexExisting() || isSecurityIndexUpToDate()) {, +            securityIndex.createIndexIfNeededThenExecute(listener, andThen);, +        } else {]