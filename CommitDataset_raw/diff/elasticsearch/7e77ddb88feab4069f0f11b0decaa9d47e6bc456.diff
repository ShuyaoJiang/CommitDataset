[+++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +import java.util.EnumSet;, +    private EnumSet<Flag> flags = EnumSet.of(Flag.Docs, Flag.Store, Flag.Indexing, Flag.Get, Flag.Search);, +        flags = EnumSet.allOf(Flag.class);, +        flags = EnumSet.noneOf(Flag.class);, +        return !flags.isEmpty();, +    }, +    , +    public Flag[] getFlags() {, +        return flags.toArray(new Flag[flags.size()]);, +    public boolean isSet(Flag flag) {, +        return flags.contains(flag);, +    }, +    , +    boolean unSet(Flag flag) {, +        return flags.remove(flag);, +    }, +    , +    void set(Flag flag) {, +        flags.add(flag);, +    }, +    , +    public CommonStatsFlags set(Flag flag, boolean add) {, +        if (add) {, +            set(flag);, +        } else {, +            unSet(flag);, +        }, +        long longFlags = 0;, +        for (Flag flag : flags) {, +            longFlags |= (1 << flag.ordinal());, +        }, +        out.writeLong(longFlags);, +        final long longFlags = in.readLong();, +        flags.clear();, +        for(Flag flag : Flag.values()) {, +            if ((longFlags & (1 << flag.ordinal())) != 0) {, +                flags.add(flag);, +            }, +        }, +    , +    public static enum Flag {, +        Store("store"),, +        Indexing("indexing"),, +        Get("get"),, +        Search("search"),, +        Merge("merge"),, +        Flush("flush"),, +        Refresh("refresh"),, +        FilterCache("filter_cache"),, +        IdCache("id_cache"),, +        FieldData("fielddata"),, +        Docs("docs"),, +        Warmer("warmer");, +        , +        private final String restName;, +        , +        Flag(String restName) {, +            this.restName = restName;, +        }, +        , +        public String getRestName() {, +            return restName;, +        }, +            , +    }, +++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +import java.util.EnumSet;, +    private EnumSet<Flag> flags = EnumSet.of(Flag.Docs, Flag.Store, Flag.Indexing, Flag.Get, Flag.Search);, +        flags = EnumSet.allOf(Flag.class);, +        flags = EnumSet.noneOf(Flag.class);, +        return !flags.isEmpty();, +    }, +    , +    public Flag[] getFlags() {, +        return flags.toArray(new Flag[flags.size()]);, +    public boolean isSet(Flag flag) {, +        return flags.contains(flag);, +    }, +    , +    boolean unSet(Flag flag) {, +        return flags.remove(flag);, +    }, +    , +    void set(Flag flag) {, +        flags.add(flag);, +    }, +    , +    public CommonStatsFlags set(Flag flag, boolean add) {, +        if (add) {, +            set(flag);, +        } else {, +            unSet(flag);, +        }, +        long longFlags = 0;, +        for (Flag flag : flags) {, +            longFlags |= (1 << flag.ordinal());, +        }, +        out.writeLong(longFlags);, +        final long longFlags = in.readLong();]