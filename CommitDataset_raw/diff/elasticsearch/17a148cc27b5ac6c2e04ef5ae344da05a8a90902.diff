[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterFormationFailureHelper.java, +    private final Runnable logLastFailedJoinAttempt;, +                                         ThreadPool threadPool, Runnable logLastFailedJoinAttempt) {, +        this.logLastFailedJoinAttempt = logLastFailedJoinAttempt;, +                        logLastFailedJoinAttempt.run();, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterFormationFailureHelper.java, +    private final Runnable logLastFailedJoinAttempt;, +                                         ThreadPool threadPool, Runnable logLastFailedJoinAttempt) {, +        this.logLastFailedJoinAttempt = logLastFailedJoinAttempt;, +                        logLastFailedJoinAttempt.run();, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +            transportService.getThreadPool(), joinHelper::logLastFailedJoinAttempt);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterFormationFailureHelper.java, +    private final Runnable logLastFailedJoinAttempt;, +                                         ThreadPool threadPool, Runnable logLastFailedJoinAttempt) {, +        this.logLastFailedJoinAttempt = logLastFailedJoinAttempt;, +                        logLastFailedJoinAttempt.run();, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +            transportService.getThreadPool(), joinHelper::logLastFailedJoinAttempt);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinHelper.java, +import org.apache.logging.log4j.Level;, +import org.elasticsearch.cluster.NotMasterException;, +import java.util.concurrent.atomic.AtomicReference;, +    private AtomicReference<FailedJoinAttempt> lastFailedJoinAttempt = new AtomicReference<>();, +, +    // package-private for testing, +    static class FailedJoinAttempt {, +        private final DiscoveryNode destination;, +        private final JoinRequest joinRequest;, +        private final TransportException exception;, +        private final long timestamp;, +, +        FailedJoinAttempt(DiscoveryNode destination, JoinRequest joinRequest, TransportException exception) {, +            this.destination = destination;, +            this.joinRequest = joinRequest;, +            this.exception = exception;, +            this.timestamp = System.nanoTime();, +        }, +, +        void logNow() {, +            logger.log(getLogLevel(exception),, +                    () -> new ParameterizedMessage("failed to join {} with {}", destination, joinRequest),, +                    exception);, +        }, +, +        static Level getLogLevel(TransportException e) {, +            Throwable cause = e.unwrapCause();, +            if (cause instanceof CoordinationStateRejectedException ||, +                cause instanceof FailedToCommitClusterStateException ||, +                cause instanceof NotMasterException) {, +                return Level.DEBUG;, +            }, +            return Level.INFO;, +        }, +, +        void logWarnWithTimestamp() {, +            logger.info(() -> new ParameterizedMessage("last failed join attempt was {} ms ago, failed to join {} with {}",, +                            TimeValue.timeValueMillis(TimeValue.nsecToMSec(System.nanoTime() - timestamp)),, +                            destination,, +                            joinRequest),, +                    exception);, +        }, +    }, +, +, +    void logLastFailedJoinAttempt() {, +        FailedJoinAttempt attempt = lastFailedJoinAttempt.get();, +        if (attempt != null) {, +            attempt.logWarnWithTimestamp();, +            lastFailedJoinAttempt.compareAndSet(attempt, null);, +        }, +    }, +, +    public void sendJoinRequest(DiscoveryNode destination, Optional<Join> optionalJoin) {, +                        lastFailedJoinAttempt.set(null);, +                        FailedJoinAttempt attempt = new FailedJoinAttempt(destination, joinRequest, exp);, +                        attempt.logNow();, +                        lastFailedJoinAttempt.set(attempt);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterFormationFailureHelper.java, +    private final Runnable logLastFailedJoinAttempt;, +                                         ThreadPool threadPool, Runnable logLastFailedJoinAttempt) {, +        this.logLastFailedJoinAttempt = logLastFailedJoinAttempt;, +                        logLastFailedJoinAttempt.run();, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +            transportService.getThreadPool(), joinHelper::logLastFailedJoinAttempt);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinHelper.java, +import org.apache.logging.log4j.Level;, +import org.elasticsearch.cluster.NotMasterException;, +import java.util.concurrent.atomic.AtomicReference;, +    private AtomicReference<FailedJoinAttempt> lastFailedJoinAttempt = new AtomicReference<>();, +, +    // package-private for testing, +    static class FailedJoinAttempt {, +        private final DiscoveryNode destination;, +        private final JoinRequest joinRequest;, +        private final TransportException exception;, +        private final long timestamp;, +, +        FailedJoinAttempt(DiscoveryNode destination, JoinRequest joinRequest, TransportException exception) {, +            this.destination = destination;]