[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EChain.java, +    Type shiftDistance; // for shifts, the RHS is promoted independently, +        boolean shift = false;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +        if (promote == null || (shift && shiftDistance == null)) {, +        } else if (shift) {, +            if (shiftDistance.sort == Sort.LONG) {, +                expression.expected = shiftDistance;, +            }, +        } else {, +                    // its tricky here as there are possibly explicit casts, too., +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EChain.java, +    Type shiftDistance; // for shifts, the RHS is promoted independently, +        boolean shift = false;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +        if (promote == null || (shift && shiftDistance == null)) {, +        } else if (shift) {, +            if (shiftDistance.sort == Sort.LONG) {, +                expression.expected = shiftDistance;, +            }, +        } else {, +                    // its tricky here as there are possibly explicit casts, too., +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/AdditionTests.java, +    , +    public void testCompoundAssignment() {, +        // byte, +        assertEquals((byte) 15, exec("byte x = 5; x += 10; return x;"));, +        assertEquals((byte) -5, exec("byte x = 5; x += -10; return x;"));, +, +        // short, +        assertEquals((short) 15, exec("short x = 5; x += 10; return x;"));, +        assertEquals((short) -5, exec("short x = 5; x += -10; return x;"));, +        // char, +        assertEquals((char) 15, exec("char x = 5; x += 10; return x;"));, +        assertEquals((char) 5, exec("char x = 10; x += -5; return x;"));, +        // int, +        assertEquals(15, exec("int x = 5; x += 10; return x;"));, +        assertEquals(-5, exec("int x = 5; x += -10; return x;"));, +        // long, +        assertEquals(15L, exec("long x = 5; x += 10; return x;"));, +        assertEquals(-5L, exec("long x = 5; x += -10; return x;"));, +        // float, +        assertEquals(15F, exec("float x = 5f; x += 10; return x;"));, +        assertEquals(-5F, exec("float x = 5f; x += -10; return x;"));, +        // double, +        assertEquals(15D, exec("double x = 5.0; x += 10; return x;"));, +        assertEquals(-5D, exec("double x = 5.0; x += -10; return x;"));, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EChain.java, +    Type shiftDistance; // for shifts, the RHS is promoted independently, +        boolean shift = false;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +            shiftDistance = AnalyzerCaster.promoteNumeric(expression.actual, false);, +            shift = true;, +        if (promote == null || (shift && shiftDistance == null)) {, +        } else if (shift) {, +            if (shiftDistance.sort == Sort.LONG) {, +                expression.expected = shiftDistance;, +            }, +        } else {, +                    // its tricky here as there are possibly explicit casts, too., +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/AdditionTests.java, +    , +    public void testCompoundAssignment() {, +        // byte, +        assertEquals((byte) 15, exec("byte x = 5; x += 10; return x;"));, +        assertEquals((byte) -5, exec("byte x = 5; x += -10; return x;"));, +, +        // short, +        assertEquals((short) 15, exec("short x = 5; x += 10; return x;"));, +        assertEquals((short) -5, exec("short x = 5; x += -10; return x;"));, +        // char, +        assertEquals((char) 15, exec("char x = 5; x += 10; return x;"));, +        assertEquals((char) 5, exec("char x = 10; x += -5; return x;"));, +        // int, +        assertEquals(15, exec("int x = 5; x += 10; return x;"));, +        assertEquals(-5, exec("int x = 5; x += -10; return x;"));, +        // long, +        assertEquals(15L, exec("long x = 5; x += 10; return x;"));, +        assertEquals(-5L, exec("long x = 5; x += -10; return x;"));, +        // float, +        assertEquals(15F, exec("float x = 5f; x += 10; return x;"));, +        assertEquals(-5F, exec("float x = 5f; x += -10; return x;"));, +        // double, +        assertEquals(15D, exec("double x = 5.0; x += 10; return x;"));, +        assertEquals(-5D, exec("double x = 5.0; x += -10; return x;"));, +    }]