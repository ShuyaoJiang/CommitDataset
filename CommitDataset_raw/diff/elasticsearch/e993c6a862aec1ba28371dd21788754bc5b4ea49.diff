[+++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.IndexReaderContext;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.index.TermState;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +        Query query = topLevelQuery(terms, ctx, docFreqs, maxDoc);, +        query.setBoost(getBoost());, +        return query;, +        if (o == null || getClass() != o.getClass()) return false;, +        if (!Arrays.equals(equalsTerms(), that.equalsTerms())) return false;, +, +        return true;, +        int result = super.hashCode();, +        result = 31 * result + Arrays.hashCode(equalsTerms());, +        return result;, +                BooleanQuery.Builder query = new BooleanQuery.Builder();, +                query.setDisableCoord(disableCoord);, +                    TermQuery termQuery = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null) {, +                        termQuery.setBoost(boosts[i]);, +                    query.add(termQuery, BooleanClause.Occur.SHOULD);, +                return query.build();, +                    TermQuery termQuery = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null) {, +                        termQuery.setBoost(boosts[i]);, +                        highBuilder.add(termQuery, BooleanClause.Occur.SHOULD);, +                        lowBuilder.add(termQuery, BooleanClause.Occur.SHOULD);, +                DisjunctionMaxQuery query = new DisjunctionMaxQuery(tieBreakerMultiplier);, +                    TermQuery termQuery = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null) {, +                        termQuery.setBoost(boosts[i]);, +                    query.add(termQuery);, +                return query;, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.IndexReaderContext;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.index.TermState;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +        Query query = topLevelQuery(terms, ctx, docFreqs, maxDoc);, +        query.setBoost(getBoost());, +        return query;, +        if (o == null || getClass() != o.getClass()) return false;, +        if (!Arrays.equals(equalsTerms(), that.equalsTerms())) return false;, +, +        return true;, +        int result = super.hashCode();, +        result = 31 * result + Arrays.hashCode(equalsTerms());, +        return result;, +                BooleanQuery.Builder query = new BooleanQuery.Builder();, +                query.setDisableCoord(disableCoord);, +                    TermQuery termQuery = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null) {, +                        termQuery.setBoost(boosts[i]);, +                    query.add(termQuery, BooleanClause.Occur.SHOULD);, +                return query.build();, +                    TermQuery termQuery = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null) {, +                        termQuery.setBoost(boosts[i]);, +                        highBuilder.add(termQuery, BooleanClause.Occur.SHOULD);, +                        lowBuilder.add(termQuery, BooleanClause.Occur.SHOULD);, +                DisjunctionMaxQuery query = new DisjunctionMaxQuery(tieBreakerMultiplier);, +                    TermQuery termQuery = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null) {, +                        termQuery.setBoost(boosts[i]);, +                    query.add(termQuery);, +                return query;, +++ b/core/src/main/java/org/apache/lucene/queries/MinDocQuery.java, +        return 31 * super.hashCode() + minDoc;, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.IndexReaderContext;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.index.TermState;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +        Query query = topLevelQuery(terms, ctx, docFreqs, maxDoc);, +        query.setBoost(getBoost());]