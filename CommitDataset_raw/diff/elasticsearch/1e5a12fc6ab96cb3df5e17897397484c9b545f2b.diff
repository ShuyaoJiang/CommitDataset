[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/PostDataAction.java, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +    static class PostDataTask extends CancellableTask {, +, +        PostDataTask(long id, String type, String action, TaskId parentTaskId, String jobId) {, +            super(id, type, action, jobId + "_post_data", parentTaskId);, +        }, +, +    }, +, +        public Task createTask(long id, String type, String action, TaskId parentTaskId) {, +            return new PostDataTask(id, type, action, parentTaskId, jobId);, +        }, +, +        @Override, +        protected void doExecute(Task task, Request request, ActionListener<Response> listener) {, +            PostDataTask postDataTask = (PostDataTask) task;, +                    DataCounts dataCounts = processManager.processData(request.getJobId(), request.content.streamInput(), params,, +                            postDataTask::isCancelled);, +                } catch (Exception e) {, +, +        @Override, +        protected final void doExecute(Request request, ActionListener<Response> listener) {, +            throw new UnsupportedOperationException("the task parameter is required");, +        }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/PostDataAction.java, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +    static class PostDataTask extends CancellableTask {, +, +        PostDataTask(long id, String type, String action, TaskId parentTaskId, String jobId) {, +            super(id, type, action, jobId + "_post_data", parentTaskId);, +        }, +, +    }, +, +        public Task createTask(long id, String type, String action, TaskId parentTaskId) {, +            return new PostDataTask(id, type, action, parentTaskId, jobId);, +        }, +, +        @Override, +        protected void doExecute(Task task, Request request, ActionListener<Response> listener) {, +            PostDataTask postDataTask = (PostDataTask) task;, +                    DataCounts dataCounts = processManager.processData(request.getJobId(), request.content.streamInput(), params,, +                            postDataTask::isCancelled);, +                } catch (Exception e) {, +, +        @Override, +        protected final void doExecute(Request request, ActionListener<Response> listener) {, +            throw new UnsupportedOperationException("the task parameter is required");, +        }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/data/DataProcessor.java, +import java.util.function.Supplier;, +     * @param cancelled Whether the data processing has been cancelled, +    DataCounts processData(String jobId, InputStream input, DataLoadParams params, Supplier<Boolean> cancelled);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/PostDataAction.java, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +    static class PostDataTask extends CancellableTask {, +, +        PostDataTask(long id, String type, String action, TaskId parentTaskId, String jobId) {, +            super(id, type, action, jobId + "_post_data", parentTaskId);, +        }, +, +    }, +, +        public Task createTask(long id, String type, String action, TaskId parentTaskId) {, +            return new PostDataTask(id, type, action, parentTaskId, jobId);, +        }, +, +        @Override, +        protected void doExecute(Task task, Request request, ActionListener<Response> listener) {, +            PostDataTask postDataTask = (PostDataTask) task;, +                    DataCounts dataCounts = processManager.processData(request.getJobId(), request.content.streamInput(), params,, +                            postDataTask::isCancelled);, +                } catch (Exception e) {, +, +        @Override, +        protected final void doExecute(Request request, ActionListener<Response> listener) {, +            throw new UnsupportedOperationException("the task parameter is required");, +        }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/data/DataProcessor.java, +import java.util.function.Supplier;, +     * @param cancelled Whether the data processing has been cancelled, +    DataCounts processData(String jobId, InputStream input, DataLoadParams params, Supplier<Boolean> cancelled);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/manager/AutodetectProcessManager.java, +import java.util.function.Supplier;, +    public DataCounts processData(String jobId, InputStream input, DataLoadParams params, Supplier<Boolean> cancelled) {, +            return communicator.writeToJob(input, params, cancelled);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/PostDataAction.java, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +    static class PostDataTask extends CancellableTask {, +, +        PostDataTask(long id, String type, String action, TaskId parentTaskId, String jobId) {]