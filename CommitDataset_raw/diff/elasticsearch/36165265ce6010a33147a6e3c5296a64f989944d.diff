[+++ b/docs/java-api/admin/indices/put-mapping.asciidoc, +You can add mappings for a new type at index creation time:, +<2> Add a `tweet` type with a field called `message` that has the datatype `text`., +There are several variants of the above `addMapping` method, some taking an, +`XContentBuilder` or a `Map` with the mapping definition as arguments. Make sure, +to check the javadocs to pick the simplest one for your use case., +The PUT mapping API also allows to specify the mapping of a type after index, +creation. In this case you can provide the mapping as a String similar to the, +Rest API syntax:, +++ b/docs/java-api/admin/indices/put-mapping.asciidoc, +You can add mappings for a new type at index creation time:, +<2> Add a `tweet` type with a field called `message` that has the datatype `text`., +There are several variants of the above `addMapping` method, some taking an, +`XContentBuilder` or a `Map` with the mapping definition as arguments. Make sure, +to check the javadocs to pick the simplest one for your use case., +The PUT mapping API also allows to specify the mapping of a type after index, +creation. In this case you can provide the mapping as a String similar to the, +Rest API syntax:, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +     * @param type, +     *            the mapping type, +     * @param source, +     *            consisting of field/properties pairs (e.g. "field1",, +     *            "type=string,store=true"), +     * @throws IllegalArgumentException, +     *             if the number of the source arguments is not divisible by two, +++ b/docs/java-api/admin/indices/put-mapping.asciidoc, +You can add mappings for a new type at index creation time:, +<2> Add a `tweet` type with a field called `message` that has the datatype `text`., +There are several variants of the above `addMapping` method, some taking an, +`XContentBuilder` or a `Map` with the mapping definition as arguments. Make sure, +to check the javadocs to pick the simplest one for your use case., +The PUT mapping API also allows to specify the mapping of a type after index, +creation. In this case you can provide the mapping as a String similar to the, +Rest API syntax:, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +     * @param type, +     *            the mapping type, +     * @param source, +     *            consisting of field/properties pairs (e.g. "field1",, +     *            "type=string,store=true"), +     * @throws IllegalArgumentException, +     *             if the number of the source arguments is not divisible by two, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequestTests.java, +    /**, +     * Test that {@link PutMappingRequest#buildFromSimplifiedDef(String, Object...)}, +     * rejects inputs where the {@code Object...} varargs of field name and properties are not, +     * paired correctly, +     */, +++ b/docs/java-api/admin/indices/put-mapping.asciidoc, +You can add mappings for a new type at index creation time:, +<2> Add a `tweet` type with a field called `message` that has the datatype `text`., +There are several variants of the above `addMapping` method, some taking an, +`XContentBuilder` or a `Map` with the mapping definition as arguments. Make sure, +to check the javadocs to pick the simplest one for your use case., +The PUT mapping API also allows to specify the mapping of a type after index, +creation. In this case you can provide the mapping as a String similar to the, +Rest API syntax:, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +     * @param type, +     *            the mapping type, +     * @param source, +     *            consisting of field/properties pairs (e.g. "field1",, +     *            "type=string,store=true"), +     * @throws IllegalArgumentException, +     *             if the number of the source arguments is not divisible by two, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequestTests.java, +    /**, +     * Test that {@link PutMappingRequest#buildFromSimplifiedDef(String, Object...)}, +     * rejects inputs where the {@code Object...} varargs of field name and properties are not, +     * paired correctly, +     */, +++ b/server/src/test/java/org/elasticsearch/client/documentation/IndicesDocumentationIT.java, +import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import java.util.HashMap;, +import java.util.Map;, +, +import static java.util.Collections.singletonMap;, +import static org.hamcrest.Matchers.instanceOf;, +, +                .addMapping("tweet", "message", "type=text") // <2>, +        GetMappingsResponse getMappingsResponse = client.admin().indices().prepareGetMappings("twitter").get();, +        assertEquals(1, getMappingsResponse.getMappings().size());, +        ImmutableOpenMap<String, MappingMetaData> indexMapping = getMappingsResponse.getMappings().get("twitter");, +        assertThat(indexMapping.get("tweet"), instanceOf(MappingMetaData.class));, +        getMappingsResponse = client.admin().indices().prepareGetMappings("twitter").get();, +        assertEquals(1, getMappingsResponse.getMappings().size());, +        indexMapping = getMappingsResponse.getMappings().get("twitter");, +        assertEquals(singletonMap("properties", singletonMap("name", singletonMap("type", "text"))),, +                indexMapping.get("user").getSourceAsMap());, +        getMappingsResponse = client.admin().indices().prepareGetMappings("twitter").get();, +        assertEquals(1, getMappingsResponse.getMappings().size());, +        indexMapping = getMappingsResponse.getMappings().get("twitter");, +        Map<String, Map<?,?>> expected = new HashMap<>();, +        expected.put("name", singletonMap("type", "text"));, +        expected.put("user_name", singletonMap("type", "text"));, +        assertEquals(expected, indexMapping.get("user").getSourceAsMap().get("properties"));]