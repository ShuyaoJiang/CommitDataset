[+++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        filters.addAll(security.getSettingsFilter(extensionsService));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        filters.addAll(security.getSettingsFilter(extensionsService));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.security.authz.SecuritySearchOperationListener;, +    public List<String> getSettingsFilter(@Nullable XPackExtensionsService extensionsService) {, +        final List<XPackExtension> extensions = extensionsService == null ? Collections.emptyList() : extensionsService.getExtensions();, +        settingsFilter.addAll(RealmSettings.getSettingsFilter(extensions));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        filters.addAll(security.getSettingsFilter(extensionsService));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.security.authz.SecuritySearchOperationListener;, +    public List<String> getSettingsFilter(@Nullable XPackExtensionsService extensionsService) {, +        final List<XPackExtension> extensions = extensionsService == null ? Collections.emptyList() : extensionsService.getExtensions();, +        settingsFilter.addAll(RealmSettings.getSettingsFilter(extensions));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/RealmSettings.java, +import java.util.Collection;, +import java.util.stream.Collectors;, +    public static Collection<String> getSettingsFilter(List<XPackExtension> extensions) {, +        return getSettingsByRealm(extensions).values().stream(), +                .flatMap(Collection::stream), +                .filter(Setting::isFiltered), +                .map(setting -> PREFIX + "*." + setting.getKey()), +                .collect(Collectors.toSet());, +    }, +, +        final Map<String, Set<Setting<?>>> childSettings = getSettingsByRealm(extensions);, +        childSettings.forEach(RealmSettings::verify);, +        return validator(childSettings);, +    }, +, +    /**, +     * @return A map from <em>realm-type</em> to a collection of <code>Setting</code> objects., +     * @see InternalRealms#getSettings(), +     */, +    private static Map<String, Set<Setting<?>>> getSettingsByRealm(List<XPackExtension> extensions) {, +        final Map<String, Set<Setting<?>>> settingsByRealm = new HashMap<>(InternalRealms.getSettings());, +                extSettings.keySet().stream().filter(settingsByRealm::containsKey).forEach(type -> {, +                settingsByRealm.putAll(extSettings);, +        return settingsByRealm;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        filters.addAll(security.getSettingsFilter(extensionsService));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.security.authz.SecuritySearchOperationListener;, +    public List<String> getSettingsFilter(@Nullable XPackExtensionsService extensionsService) {, +        final List<XPackExtension> extensions = extensionsService == null ? Collections.emptyList() : extensionsService.getExtensions();, +        settingsFilter.addAll(RealmSettings.getSettingsFilter(extensions));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/RealmSettings.java, +import java.util.Collection;, +import java.util.stream.Collectors;, +    public static Collection<String> getSettingsFilter(List<XPackExtension> extensions) {, +        return getSettingsByRealm(extensions).values().stream(), +                .flatMap(Collection::stream), +                .filter(Setting::isFiltered), +                .map(setting -> PREFIX + "*." + setting.getKey()), +                .collect(Collectors.toSet());, +    }, +, +        final Map<String, Set<Setting<?>>> childSettings = getSettingsByRealm(extensions);, +        childSettings.forEach(RealmSettings::verify);, +        return validator(childSettings);, +    }, +, +    /**, +     * @return A map from <em>realm-type</em> to a collection of <code>Setting</code> objects., +     * @see InternalRealms#getSettings(), +     */, +    private static Map<String, Set<Setting<?>>> getSettingsByRealm(List<XPackExtension> extensions) {, +        final Map<String, Set<Setting<?>>> settingsByRealm = new HashMap<>(InternalRealms.getSettings());, +                extSettings.keySet().stream().filter(settingsByRealm::containsKey).forEach(type -> {, +                settingsByRealm.putAll(extSettings);, +        return settingsByRealm;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java, +    private static final Setting<String> BIND_DN = Setting.simpleString("bind_dn",, +            Setting.Property.NodeScope, Setting.Property.Filtered);, +    private static final Setting<String> BIND_PASSWORD = Setting.simpleString("bind_password",, +            Setting.Property.NodeScope, Setting.Property.Filtered);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        filters.addAll(security.getSettingsFilter(extensionsService));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.security.authz.SecuritySearchOperationListener;, +    public List<String> getSettingsFilter(@Nullable XPackExtensionsService extensionsService) {, +        final List<XPackExtension> extensions = extensionsService == null ? Collections.emptyList() : extensionsService.getExtensions();, +        settingsFilter.addAll(RealmSettings.getSettingsFilter(extensions));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/RealmSettings.java, +import java.util.Collection;, +import java.util.stream.Collectors;, +    public static Collection<String> getSettingsFilter(List<XPackExtension> extensions) {, +        return getSettingsByRealm(extensions).values().stream(), +                .flatMap(Collection::stream), +                .filter(Setting::isFiltered), +                .map(setting -> PREFIX + "*." + setting.getKey()), +                .collect(Collectors.toSet());, +    }, +, +        final Map<String, Set<Setting<?>>> childSettings = getSettingsByRealm(extensions);, +        childSettings.forEach(RealmSettings::verify);, +        return validator(childSettings);, +    }]