[+++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/java/org/elasticsearch/smoketest/WatcherTemplateIT.java, +import org.elasticsearch.xpack.common.text.TextTemplate;, +        engine = new TextTemplateEngine(Settings.EMPTY, scriptService);, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/java/org/elasticsearch/smoketest/WatcherTemplateIT.java, +import org.elasticsearch.xpack.common.text.TextTemplate;, +        engine = new TextTemplateEngine(Settings.EMPTY, scriptService);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +import org.elasticsearch.common.component.LifecycleComponent;, +import org.elasticsearch.common.inject.util.Providers;, +    private final boolean transportClientMode;, +        this.transportClientMode = XPackPlugin.transportClientMode(settings);, +        enabled = enabled(settings);, +    }, +    , +    public static boolean enabled(Settings settings) {, +        return XPackPlugin.featureEnabled(settings, NAME, true);, +, +    @Override, +    public List<Setting<?>> getSettings() {, +        return Collections.singletonList(Setting.boolSetting(XPackPlugin.featureEnabledSetting(NAME), true, Setting.Property.NodeScope));, +    }, +, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/java/org/elasticsearch/smoketest/WatcherTemplateIT.java, +import org.elasticsearch.xpack.common.text.TextTemplate;, +        engine = new TextTemplateEngine(Settings.EMPTY, scriptService);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +import org.elasticsearch.common.component.LifecycleComponent;, +import org.elasticsearch.common.inject.util.Providers;, +    private final boolean transportClientMode;, +        this.transportClientMode = XPackPlugin.transportClientMode(settings);, +        enabled = enabled(settings);, +    }, +    , +    public static boolean enabled(Settings settings) {, +        return XPackPlugin.featureEnabled(settings, NAME, true);, +, +    @Override, +    public List<Setting<?>> getSettings() {, +        return Collections.singletonList(Setting.boolSetting(XPackPlugin.featureEnabledSetting(NAME), true, Setting.Property.NodeScope));, +    }, +, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +        this.enabled = Graph.enabled(settings);, +        return Graph.NAME;, +            super(Graph.NAME, available, enabled);, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/java/org/elasticsearch/smoketest/WatcherTemplateIT.java, +import org.elasticsearch.xpack.common.text.TextTemplate;, +        engine = new TextTemplateEngine(Settings.EMPTY, scriptService);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +import org.elasticsearch.common.component.LifecycleComponent;, +import org.elasticsearch.common.inject.util.Providers;, +    private final boolean transportClientMode;, +        this.transportClientMode = XPackPlugin.transportClientMode(settings);, +        enabled = enabled(settings);, +    }, +    , +    public static boolean enabled(Settings settings) {, +        return XPackPlugin.featureEnabled(settings, NAME, true);, +, +    @Override, +    public List<Setting<?>> getSettings() {, +        return Collections.singletonList(Setting.boolSetting(XPackPlugin.featureEnabledSetting(NAME), true, Setting.Property.NodeScope));, +    }, +, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +        this.enabled = Graph.enabled(settings);, +        return Graph.NAME;, +            super(Graph.NAME, available, enabled);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/action/TransportGraphExploreAction.java, +            listener.onFailure(LicenseUtils.newComplianceException(Graph.NAME));, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/java/org/elasticsearch/smoketest/WatcherTemplateIT.java, +import org.elasticsearch.xpack.common.text.TextTemplate;, +        engine = new TextTemplateEngine(Settings.EMPTY, scriptService);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +import org.elasticsearch.common.component.LifecycleComponent;, +import org.elasticsearch.common.inject.util.Providers;, +    private final boolean transportClientMode;, +        this.transportClientMode = XPackPlugin.transportClientMode(settings);, +        enabled = enabled(settings);, +    }, +    , +    public static boolean enabled(Settings settings) {, +        return XPackPlugin.featureEnabled(settings, NAME, true);, +, +    @Override, +    public List<Setting<?>> getSettings() {, +        return Collections.singletonList(Setting.boolSetting(XPackPlugin.featureEnabledSetting(NAME), true, Setting.Property.NodeScope));, +    }, +, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphFeatureSet.java, +        this.enabled = Graph.enabled(settings);, +        return Graph.NAME;, +            super(Graph.NAME, available, enabled);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/action/TransportGraphExploreAction.java, +            listener.onFailure(LicenseUtils.newComplianceException(Graph.NAME));, +++ b/elasticsearch/x-pack/graph/src/test/java/org/elasticsearch/xpack/graph/test/GraphTests.java, +import org.elasticsearch.action.search.ShardSearchFailure;, +import org.elasticsearch.xpack.monitoring.Monitoring;, +import org.elasticsearch.xpack.security.Security;, +import org.elasticsearch.xpack.watcher.Watcher;]