[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.util.IOUtils;, +        List<String> tlist;, +        TokenStream source = null;, +        try {, +            tlist = new ArrayList<>();, +        } finally {, +            if (source != null) {, +                IOUtils.closeWhileHandlingException(source);, +            }, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                }, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.util.IOUtils;, +        List<String> tlist;, +        TokenStream source = null;, +        try {, +            tlist = new ArrayList<>();, +        } finally {, +            if (source != null) {, +                IOUtils.closeWhileHandlingException(source);, +            }, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      , +      try (TokenStream ts = queryAnalyzer.tokenStream("", key.toString())) {, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.util.IOUtils;, +        List<String> tlist;, +        TokenStream source = null;, +        try {, +            tlist = new ArrayList<>();, +        } finally {, +            if (source != null) {, +                IOUtils.closeWhileHandlingException(source);, +            }, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      , +      try (TokenStream ts = queryAnalyzer.tokenStream("", key.toString())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            try (TokenStream stream = analyzer.tokenStream(field, text)) {, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.util.IOUtils;, +        List<String> tlist;, +        TokenStream source = null;, +        try {, +            tlist = new ArrayList<>();, +        } finally {, +            if (source != null) {, +                IOUtils.closeWhileHandlingException(source);, +            }, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      , +      try (TokenStream ts = queryAnalyzer.tokenStream("", key.toString())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            try (TokenStream stream = analyzer.tokenStream(field, text)) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64, OS X only), +, +    /**, +     * codebase location for untrusted scripts (provide some additional safety), +     * <p>, +     * This is not a full URL, just a path., +     */, +    public static final String UNTRUSTED_CODEBASE = "/untrusted";, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.util.IOUtils;, +        List<String> tlist;, +        TokenStream source = null;, +        try {, +            tlist = new ArrayList<>();, +        } finally {, +            if (source != null) {, +                IOUtils.closeWhileHandlingException(source);, +            }, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      , +      try (TokenStream ts = queryAnalyzer.tokenStream("", key.toString())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +            try (TokenStream stream = analyzer.tokenStream(field, text)) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64, OS X only), +, +    /**, +     * codebase location for untrusted scripts (provide some additional safety), +     * <p>, +     * This is not a full URL, just a path., +     */]