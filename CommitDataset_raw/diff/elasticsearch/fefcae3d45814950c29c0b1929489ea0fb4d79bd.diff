[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +import org.apache.http.HttpEntity;, +import org.apache.http.client.methods.HttpPost;, +import org.elasticsearch.index.get.GetResult;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptType;, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonMap;, +, +    public void testUpdate() throws IOException {, +        RestHighLevelClient client = highLevelClient();, +        {, +            IndexRequest indexRequest = new IndexRequest("posts", "doc", "1").source("field", 0);, +            IndexResponse indexResponse = client.index(indexRequest);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +, +            XContentType xContentType = XContentType.JSON;, +            String script = XContentBuilder.builder(xContentType.xContent()), +                    .startObject(), +                        .startObject("script"), +                            .field("lang", "painless"), +                            .field("code", "ctx._source.field += params.count"), +                        .endObject(), +                    .endObject().string();, +            HttpEntity body = new NStringEntity(script, ContentType.create(xContentType.mediaType()));, +            Response response = client().performRequest(HttpPost.METHOD_NAME, "/_scripts/increment-field", emptyMap(), body);, +            assertEquals(response.getStatusLine().getStatusCode(), RestStatus.OK.getStatus());, +        }, +        {, +            //tag::update-request, +            UpdateRequest request = new UpdateRequest(, +                    "posts", // <1>, +                    "doc",  // <2>, +                    "1");   // <3>, +            //end::update-request, +            request.fetchSource(true);, +            //tag::update-request-with-inline-script, +            Map<String, Object> parameters = singletonMap("count", 4); // <1>, +, +            Script inline = new Script(ScriptType.INLINE, "painless", "ctx._source.field += params.count", parameters);  // <2>, +            request.script(inline);  // <3>, +            //end::update-request-with-inline-script, +            UpdateResponse updateResponse = client.update(request);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(4, updateResponse.getGetResult().getSource().get("field"));, +, +            request = new UpdateRequest("posts", "doc", "1").fetchSource(true);, +            //tag::update-request-with-stored-script, +            Script stored =, +                    new Script(ScriptType.STORED, "painless", "increment-field", parameters);  // <1>, +            request.script(stored);  // <2>, +            //end::update-request-with-stored-script, +            updateResponse = client.update(request);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(8, updateResponse.getGetResult().getSource().get("field"));, +        }, +        {, +            //tag::update-request-with-doc-as-map, +            Map<String, Object> jsonMap = new HashMap<>();, +            jsonMap.put("updated", new Date());, +            jsonMap.put("reason", "daily update");, +            UpdateRequest request = new UpdateRequest("posts", "doc", "1"), +                    .doc(jsonMap); // <1>, +            //end::update-request-with-doc-as-map, +            UpdateResponse updateResponse = client.update(request);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +        }, +        {, +            //tag::update-request-with-doc-as-xcontent, +            XContentBuilder builder = XContentFactory.jsonBuilder();, +            builder.startObject();, +            {, +                builder.field("updated", new Date());, +                builder.field("reason", "daily update");, +            }, +            builder.endObject();, +            UpdateRequest request = new UpdateRequest("posts", "doc", "1"), +                    .doc(builder);  // <1>, +            //end::update-request-with-doc-as-xcontent, +            UpdateResponse updateResponse = client.update(request);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +        }, +        {, +            //tag::update-request-shortcut, +            UpdateRequest request = new UpdateRequest("posts", "doc", "1"), +                    .doc("updated", new Date(),, +                         "reason", "daily update"); // <1>, +            //end::update-request-shortcut, +            UpdateResponse updateResponse = client.update(request);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +        }, +        {, +            //tag::update-request-with-doc-as-string, +            UpdateRequest request = new UpdateRequest("posts", "doc", "1");, +            String jsonString = "{" +, +                    "\"updated\":\"2017-01-01\"," +, +                    "\"reason\":\"daily update\"" +, +                    "}";, +            request.doc(jsonString, XContentType.JSON); // <1>, +            //end::update-request-with-doc-as-string]