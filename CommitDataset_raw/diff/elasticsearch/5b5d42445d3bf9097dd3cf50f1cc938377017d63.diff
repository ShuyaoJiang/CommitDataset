[+++ /dev/null, +++ /dev/null, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/gateway/fs/AbstractSimpleIndexGatewayTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.integration.gateway.fs;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;, +import org.elasticsearch.action.admin.indices.status.IndexShardStatus;, +import org.elasticsearch.action.admin.indices.status.IndicesStatusResponse;, +import org.elasticsearch.action.admin.indices.status.ShardStatus;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.common.collect.MapBuilder;, +import org.elasticsearch.common.io.FileSystemUtils;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.gateway.Gateway;, +import org.elasticsearch.node.internal.InternalNode;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.testng.annotations.AfterMethod;, +import org.testng.annotations.BeforeMethod;, +import org.testng.annotations.Test;, +, +import static org.elasticsearch.client.Requests.*;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.Matchers.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public abstract class AbstractSimpleIndexGatewayTests extends AbstractNodesTests {, +, +    @AfterMethod public void closeNodes() throws Exception {, +        node("server1").stop();, +        // since we store (by default) the index snapshot under the gateway, resetting it will reset the index data as well, +        ((InternalNode) node("server1")).injector().getInstance(Gateway.class).reset();, +        closeAllNodes();, +    }, +, +    @BeforeMethod public void buildNode1() throws Exception {, +        buildNode("server1");, +        // since we store (by default) the index snapshot under the gateway, resetting it will reset the index data as well, +        ((InternalNode) node("server1")).injector().getInstance(Gateway.class).reset();, +        closeAllNodes();, +    }, +, +    @Test public void testSnapshotOperations() throws Exception {, +        startNode("server1");, +, +        // get the environment, so we can clear the work dir when needed, +        Environment environment = ((InternalNode) node("server1")).injector().getInstance(Environment.class);, +, +        // Translog tests, +, +        logger.info("Creating index [{}]", "test");, +        client("server1").admin().indices().prepareCreate("test").execute().actionGet();, +, +        // create a mapping, +        PutMappingResponse putMappingResponse = client("server1").admin().indices().preparePutMapping("test").setType("type1").setSource(mappingSource()).execute().actionGet();, +        assertThat(putMappingResponse.acknowledged(), equalTo(true));, +, +        // verify that mapping is there, +        ClusterStateResponse clusterState = client("server1").admin().cluster().state(clusterStateRequest()).actionGet();, +        assertThat(clusterState.state().metaData().index("test").mapping("type1"), notNullValue());, +, +        // create two and delete the first, +        logger.info("Indexing #1");, +        client("server1").index(Requests.indexRequest("test").type("type1").id("1").source(source("1", "test"))).actionGet();, +        logger.info("Indexing #2");, +        client("server1").index(Requests.indexRequest("test").type("type1").id("2").source(source("2", "test"))).actionGet();, +, +        // perform snapshot to the index, +        logger.info("Gateway Snapshot");, +        client("server1").admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();, +, +        logger.info("Deleting #1");, +        client("server1").delete(deleteRequest("test").type("type1").id("1")).actionGet();, +, +        // perform snapshot to the index]