[+++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import org.elasticsearch.index.shard.TranslogRecoveryPerformer;, +    private final TranslogRecoveryPerformer translogRecoveryPerformer;, +    public EngineConfig(ShardId shardId, boolean optimizeAutoGenerateId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.translogRecoveryPerformer = translogRecoveryPerformer;, +, +    /**, +     * Returns the {@link org.elasticsearch.index.shard.TranslogRecoveryPerformer} for this engine. This class is used, +     * to apply transaction log operations to the engine. It encapsulates all the logic to transfer the translog entry into, +     * an indexing operation., +     */, +    public TranslogRecoveryPerformer getTranslogRecoveryPerformer() {, +        return translogRecoveryPerformer;, +    }, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import org.elasticsearch.index.shard.TranslogRecoveryPerformer;, +    private final TranslogRecoveryPerformer translogRecoveryPerformer;, +    public EngineConfig(ShardId shardId, boolean optimizeAutoGenerateId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.translogRecoveryPerformer = translogRecoveryPerformer;, +, +    /**, +     * Returns the {@link org.elasticsearch.index.shard.TranslogRecoveryPerformer} for this engine. This class is used, +     * to apply transaction log operations to the engine. It encapsulates all the logic to transfer the translog entry into, +     * an indexing operation., +     */, +    public TranslogRecoveryPerformer getTranslogRecoveryPerformer() {, +        return translogRecoveryPerformer;, +    }, +++ b/src/main/java/org/elasticsearch/index/engine/EngineFactory.java, +    public Engine newReadWriteEngine(EngineConfig config, boolean skipTranslogRecovery);, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import org.elasticsearch.index.shard.TranslogRecoveryPerformer;, +    private final TranslogRecoveryPerformer translogRecoveryPerformer;, +    public EngineConfig(ShardId shardId, boolean optimizeAutoGenerateId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.translogRecoveryPerformer = translogRecoveryPerformer;, +, +    /**, +     * Returns the {@link org.elasticsearch.index.shard.TranslogRecoveryPerformer} for this engine. This class is used, +     * to apply transaction log operations to the engine. It encapsulates all the logic to transfer the translog entry into, +     * an indexing operation., +     */, +    public TranslogRecoveryPerformer getTranslogRecoveryPerformer() {, +        return translogRecoveryPerformer;, +    }, +++ b/src/main/java/org/elasticsearch/index/engine/EngineFactory.java, +    public Engine newReadWriteEngine(EngineConfig config, boolean skipTranslogRecovery);, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.index.shard.TranslogRecoveryPerformer;, +import org.elasticsearch.index.translog.TruncatedTranslogException;, +import org.elasticsearch.rest.RestStatus;, +import java.io.FileNotFoundException;, +    public InternalEngine(EngineConfig engineConfig, boolean skipInitialTranslogRecovery) throws EngineException {, +            final Tuple<Long, Long> translogId; // nextTranslogId, currentTranslogId, +                indexWriter = writer;, +                translogId = loadTranslogIds(writer, translog);, +            this.versionMap.setManager(searcherManager);, +            final TranslogRecoveryPerformer transformer = engineConfig.getTranslogRecoveryPerformer();, +            try {, +                long nextTranslogID = translogId.v2();, +                translog.newTranslog(nextTranslogID);, +                translogIdGenerator.set(nextTranslogID);, +                if (skipInitialTranslogRecovery == false) {, +                    transformer.beginTranslogRecovery();, +                    if (translogId.v1() != null) {, +                        recoverFromTranslog(translogId.v1(), transformer);, +                    }, +                } else {, +                    flush(true, true);, +                }, +            } catch (IOException | EngineException ex) {, +                throw new EngineCreationFailureException(shardId, "failed to recover from translog", ex);, +            }, +    /**, +     * Reads the current stored translog ID (v1) from the IW commit data and generates a new/next translog ID (v2), +     * from the largest present translog ID. If there is no stored translog ID v1 is <code>null</code>, +     */, +    private Tuple<Long, Long> loadTranslogIds(IndexWriter writer, Translog translog) throws IOException {, +        // commit on a just opened writer will commit even if there are no changes done to it, +        // we rely on that for the commit data translog id key, +        final long nextTranslogId = Math.max(0, translog.findLargestPresentTranslogId()) + 1;, +        final Map<String, String> commitUserData = writer.getCommitData();, +        if (commitUserData.containsKey(Translog.TRANSLOG_ID_KEY)) {, +            final long currentTranslogId = Long.parseLong(commitUserData.get(Translog.TRANSLOG_ID_KEY));, +            return new Tuple<>(currentTranslogId, nextTranslogId);, +        }, +         // translog id is not in the metadata - fix this inconsistency some code relies on this and old indices might not have it., +        writer.setCommitData(Collections.singletonMap(Translog.TRANSLOG_ID_KEY, Long.toString(nextTranslogId)));, +        commitIndexWriter(writer);, +        logger.debug("no translog ID present in the current commit - creating one");, +        return new Tuple<>(null, nextTranslogId);, +    }, +, +                    IOUtils.close(this.translog);, +                    logger.warn("failed to close translog", ex);, +, +    protected void recoverFromTranslog(long translogId, TranslogRecoveryPerformer handler) throws IOException {, +        final Translog translog = engineConfig.getTranslog();, +        int operationsRecovered = 0;, +        try (Translog.OperationIterator in = translog.openIterator(translogId)) {]