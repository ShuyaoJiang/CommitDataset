[+++ b/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +    private final Name name;, +                                     HierarchyCircuitBreakerService parent, Name name) {, +                                     ESLogger logger, HierarchyCircuitBreakerService parent, Name name) {, +                    logger.warn("[{}] New used memory {} [{}] from field [{}] would be larger than configured breaker: {} [{}], breaking",, +    public Name getName() {, +++ b/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +    private final Name name;, +                                     HierarchyCircuitBreakerService parent, Name name) {, +                                     ESLogger logger, HierarchyCircuitBreakerService parent, Name name) {, +                    logger.warn("[{}] New used memory {} [{}] from field [{}] would be larger than configured breaker: {} [{}], breaking",, +    public Name getName() {, +++ b/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    /**, +     * Enum used for specifying different types of circuit breakers, +     */, +    public static enum Name {, +        PARENT(0),, +        FIELDDATA(1),, +        REQUEST(2);, +, +        private int ordinal;, +, +        Name(int ordinal) {, +            this.ordinal = ordinal;, +        }, +, +        public int getSerializableValue() {, +            return this.ordinal;, +        }, +, +        public static Name readFrom(StreamInput in) throws IOException {, +            int value = in.readVInt();, +            switch (value) {, +                case 0:, +                    return Name.PARENT;, +                case 1:, +                    return Name.FIELDDATA;, +                case 2:, +                    return Name.REQUEST;, +                default:, +                    throw new ElasticsearchIllegalArgumentException("No CircuitBreaker with ordinal: " + value);, +            }, +        }, +, +        public static void writeTo(Name name, StreamOutput out) throws IOException {, +            out.writeVInt(name.getSerializableValue());, +        }, +    }, +    public Name getName();, +++ b/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +    private final Name name;, +                                     HierarchyCircuitBreakerService parent, Name name) {, +                                     ESLogger logger, HierarchyCircuitBreakerService parent, Name name) {, +                    logger.warn("[{}] New used memory {} [{}] from field [{}] would be larger than configured breaker: {} [{}], breaking",, +    public Name getName() {, +++ b/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    /**, +     * Enum used for specifying different types of circuit breakers, +     */, +    public static enum Name {, +        PARENT(0),, +        FIELDDATA(1),, +        REQUEST(2);, +, +        private int ordinal;, +, +        Name(int ordinal) {, +            this.ordinal = ordinal;, +        }, +, +        public int getSerializableValue() {, +            return this.ordinal;, +        }, +, +        public static Name readFrom(StreamInput in) throws IOException {, +            int value = in.readVInt();, +            switch (value) {, +                case 0:, +                    return Name.PARENT;, +                case 1:, +                    return Name.FIELDDATA;, +                case 2:, +                    return Name.REQUEST;, +                default:, +                    throw new ElasticsearchIllegalArgumentException("No CircuitBreaker with ordinal: " + value);, +            }, +        }, +, +        public static void writeTo(Name name, StreamOutput out) throws IOException {, +            out.writeVInt(name.getSerializableValue());, +        }, +    }, +    public Name getName();]