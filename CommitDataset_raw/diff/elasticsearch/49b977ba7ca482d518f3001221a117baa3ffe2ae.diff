[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java, +     * hash prefix and determining the algorithm used for its generation. If no specific algorithm, +     * prefix, can be determined {@code Hasher.NOOP} is returned., +            // This is either a non hashed password from cache or a corrupted hash string., +            return Hasher.NOOP;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java, +     * hash prefix and determining the algorithm used for its generation. If no specific algorithm, +     * prefix, can be determined {@code Hasher.NOOP} is returned., +            // This is either a non hashed password from cache or a corrupted hash string., +            return Hasher.NOOP;, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/file/FileRealmTests.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/Hasher.java, +     * hash prefix and determining the algorithm used for its generation. If no specific algorithm, +     * prefix, can be determined {@code Hasher.NOOP} is returned., +            // This is either a non hashed password from cache or a corrupted hash string., +            return Hasher.NOOP;, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/file/FileRealmTests.java, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/support/HasherTests.java, +        assertThat(Hasher.resolveFromHash("notavalidhashformat".toCharArray()), sameInstance(Hasher.NOOP));]