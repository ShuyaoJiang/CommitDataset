[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +        private String allocationId;, +        private AllocationStatus allocationStatus;, +        public enum AllocationStatus {, +            AllocationStatus(byte id) {, +            private static AllocationStatus fromId(byte id) {, +                    default: throw new IllegalArgumentException("unknown id for allocation status [" + id + "]");, +                    default: throw new IllegalArgumentException("unknown id for allocation status [" + id + "]");, +            private static AllocationStatus readFrom(StreamInput in) throws IOException {, +        public StoreStatus(DiscoveryNode node, long version, String allocationId, AllocationStatus allocationStatus, Throwable storeException) {, +            this.allocationId = allocationId;, +            this.allocationStatus = allocationStatus;, +         * Version of the store, +         * AllocationStatus id of the store, used to select the store that will be, +         * used as a primary., +         */, +        public String getAllocationId() {, +            return allocationId;, +        }, +, +        /**, +         * The allocationStatus status of the store., +         * {@link AllocationStatus#PRIMARY} indicates a primary shard copy, +         * {@link AllocationStatus#REPLICA} indicates a replica shard copy, +         * {@link AllocationStatus#UNUSED} indicates an unused shard copy, +        public AllocationStatus getAllocationStatus() {, +            return allocationStatus;, +            allocationId = in.readOptionalString();, +            allocationStatus = AllocationStatus.readFrom(in);, +            out.writeOptionalString(allocationId);, +            allocationStatus.writeTo(out);, +            builder.field(Fields.ALLOCATION_ID, allocationId);, +            builder.field(Fields.ALLOCATED, allocationStatus.value());, +                    return Integer.compare(allocationStatus.id, other.allocationStatus.id);, +        static final XContentBuilderString ALLOCATION_ID = new XContentBuilderString("allocation_id");, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +        private String allocationId;, +        private AllocationStatus allocationStatus;, +        public enum AllocationStatus {, +            AllocationStatus(byte id) {, +            private static AllocationStatus fromId(byte id) {, +                    default: throw new IllegalArgumentException("unknown id for allocation status [" + id + "]");, +                    default: throw new IllegalArgumentException("unknown id for allocation status [" + id + "]");, +            private static AllocationStatus readFrom(StreamInput in) throws IOException {, +        public StoreStatus(DiscoveryNode node, long version, String allocationId, AllocationStatus allocationStatus, Throwable storeException) {, +            this.allocationId = allocationId;, +            this.allocationStatus = allocationStatus;, +         * Version of the store, +         * AllocationStatus id of the store, used to select the store that will be, +         * used as a primary., +         */, +        public String getAllocationId() {, +            return allocationId;, +        }, +, +        /**, +         * The allocationStatus status of the store., +         * {@link AllocationStatus#PRIMARY} indicates a primary shard copy, +         * {@link AllocationStatus#REPLICA} indicates a replica shard copy, +         * {@link AllocationStatus#UNUSED} indicates an unused shard copy, +        public AllocationStatus getAllocationStatus() {, +            return allocationStatus;, +            allocationId = in.readOptionalString();, +            allocationStatus = AllocationStatus.readFrom(in);, +            out.writeOptionalString(allocationId);, +            allocationStatus.writeTo(out);, +            builder.field(Fields.ALLOCATION_ID, allocationId);, +            builder.field(Fields.ALLOCATED, allocationStatus.value());, +                    return Integer.compare(allocationStatus.id, other.allocationStatus.id);, +        static final XContentBuilderString ALLOCATION_ID = new XContentBuilderString("allocation_id");, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +                            IndicesShardStoresResponse.StoreStatus.AllocationStatus allocationStatus = getAllocationStatus(fetchResponse.shardId.getIndex(), fetchResponse.shardId.id(), response.getNode());, +                            storeStatuses.add(new IndicesShardStoresResponse.StoreStatus(response.getNode(), response.version(), response.allocationId(), allocationStatus, response.storeException()));, +            private IndicesShardStoresResponse.StoreStatus.AllocationStatus getAllocationStatus(String index, int shardID, DiscoveryNode node) {, +                            return IndicesShardStoresResponse.StoreStatus.AllocationStatus.PRIMARY;, +                            return IndicesShardStoresResponse.StoreStatus.AllocationStatus.REPLICA;, +                            return IndicesShardStoresResponse.StoreStatus.AllocationStatus.UNUSED;, +                return IndicesShardStoresResponse.StoreStatus.AllocationStatus.UNUSED;, +                return response.storeException() != null || response.version() != -1 || response.allocationId() != null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +        private String allocationId;, +        private AllocationStatus allocationStatus;, +        public enum AllocationStatus {, +            AllocationStatus(byte id) {, +            private static AllocationStatus fromId(byte id) {, +                    default: throw new IllegalArgumentException("unknown id for allocation status [" + id + "]");, +                    default: throw new IllegalArgumentException("unknown id for allocation status [" + id + "]");, +            private static AllocationStatus readFrom(StreamInput in) throws IOException {, +        public StoreStatus(DiscoveryNode node, long version, String allocationId, AllocationStatus allocationStatus, Throwable storeException) {, +            this.allocationId = allocationId;, +            this.allocationStatus = allocationStatus;, +         * Version of the store, +         * AllocationStatus id of the store, used to select the store that will be, +         * used as a primary., +         */, +        public String getAllocationId() {, +            return allocationId;, +        }, +, +        /**]