[+++ b/docs/reference/query-dsl/span-multi-term-query.asciidoc, +WARNING: `span_multi` queries will hit too many clauses failure if the number of terms that match the query exceeds the, +boolean query limit (defaults to 1024).To avoid an unbounded expansion you can set the <<query-dsl-multi-term-rewrite,, +rewrite method>> of the multi term query to `top_terms_*` rewrite. Or, if you use `span_multi` on `prefix` query only,, +you can activate the <<index-prefix-config,`index_prefixes`>> field option of the `text` field instead. This will, +, +++ b/docs/reference/query-dsl/span-multi-term-query.asciidoc, +WARNING: `span_multi` queries will hit too many clauses failure if the number of terms that match the query exceeds the, +boolean query limit (defaults to 1024).To avoid an unbounded expansion you can set the <<query-dsl-multi-term-rewrite,, +rewrite method>> of the multi term query to `top_terms_*` rewrite. Or, if you use `span_multi` on `prefix` query only,, +you can activate the <<index-prefix-config,`index_prefixes`>> field option of the `text` field instead. This will, +, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilder.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.ScoringRewrite;, +import org.apache.lucene.search.TopTermsRewrite;, +import org.apache.lucene.search.spans.SpanOrQuery;, +import org.elasticsearch.ElasticsearchException;, +import java.util.ArrayList;, +import java.util.List;, +    public static class TopTermSpanBooleanQueryRewriteWithMaxClause extends SpanMultiTermQueryWrapper.SpanRewriteMethod {, +, +        private MultiTermQuery multiTermQuery;, +        private final long maxExpansions;, +, +        TopTermSpanBooleanQueryRewriteWithMaxClause(long max) {, +            maxExpansions = max;, +        }, +, +        @Override, +        public SpanQuery rewrite(IndexReader reader, MultiTermQuery query) throws IOException {, +            multiTermQuery = query;, +            return (SpanQuery) this.delegate.rewrite(reader, multiTermQuery);, +        }, +, +        final ScoringRewrite<List<SpanQuery>> delegate = new ScoringRewrite<List<SpanQuery>>() {, +, +            @Override, +            protected List<SpanQuery> getTopLevelBuilder() {, +                return new ArrayList();, +            }, +, +            @Override, +            protected Query build(List<SpanQuery> builder) {, +                return new SpanOrQuery((SpanQuery[]) builder.toArray(new SpanQuery[builder.size()]));, +            }, +, +            @Override, +            protected void checkMaxClauseCount(int count) {, +                if (count > maxExpansions) {, +                    throw new ElasticsearchException("[" + multiTermQuery.toString() + " ] " +, +                        "exceeds maxClauseCount [ Boolean maxClauseCount is set to " + BooleanQuery.getMaxClauseCount() + "]");, +                }, +            }, +, +            @Override, +            protected void addClause(List<SpanQuery> topLevel, Term term, int docCount, float boost, TermContext states) {, +                SpanTermQuery q = new SpanTermQuery(term, states);, +                topLevel.add(q);, +            }, +        };, +    }, +, +            if (((MultiTermQuery) subQuery).getRewriteMethod() instanceof TopTermsRewrite == false) {, +                ((SpanMultiTermQueryWrapper<MultiTermQuery>) spanQuery).setRewriteMethod(new, +                    TopTermSpanBooleanQueryRewriteWithMaxClause(BooleanQuery.getMaxClauseCount()));, +            }, +, +++ b/docs/reference/query-dsl/span-multi-term-query.asciidoc, +WARNING: `span_multi` queries will hit too many clauses failure if the number of terms that match the query exceeds the, +boolean query limit (defaults to 1024).To avoid an unbounded expansion you can set the <<query-dsl-multi-term-rewrite,, +rewrite method>> of the multi term query to `top_terms_*` rewrite. Or, if you use `span_multi` on `prefix` query only,, +you can activate the <<index-prefix-config,`index_prefixes`>> field option of the `text` field instead. This will, +, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilder.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.ScoringRewrite;, +import org.apache.lucene.search.TopTermsRewrite;, +import org.apache.lucene.search.spans.SpanOrQuery;, +import org.elasticsearch.ElasticsearchException;, +import java.util.ArrayList;, +import java.util.List;, +    public static class TopTermSpanBooleanQueryRewriteWithMaxClause extends SpanMultiTermQueryWrapper.SpanRewriteMethod {, +, +        private MultiTermQuery multiTermQuery;, +        private final long maxExpansions;, +, +        TopTermSpanBooleanQueryRewriteWithMaxClause(long max) {, +            maxExpansions = max;, +        }, +, +        @Override, +        public SpanQuery rewrite(IndexReader reader, MultiTermQuery query) throws IOException {, +            multiTermQuery = query;, +            return (SpanQuery) this.delegate.rewrite(reader, multiTermQuery);, +        }]