[+++ b/server/src/main/java/org/elasticsearch/common/cache/Cache.java, +                Entry<K, V> entry;, +                    entry = future.get();, +                } catch (ExecutionException e) {, +                    assert future.isCompletedExceptionally();, +                } catch (InterruptedException e) {, +                if (isExpired.test(entry)) {, +                    onExpiration.accept(entry);, +                    return null;, +                } else {, +                    segmentStats.hit();, +                    entry.accessTime = now;, +            } else {, +                segmentStats.miss();, +                return null;, +            }, +        }, +         * @param onRemoval a callback for the removed entry, +        void remove(K key, Consumer<CompletableFuture<Entry<K, V>>> onRemoval) {, +                onRemoval.accept(future);, +        segment.remove(key, f -> {, +            try {, +                Entry<K, V> entry = f.get();, +            } catch (ExecutionException e) {, +                // ok, +            } catch (InterruptedException e) {, +                throw new IllegalStateException(e);, +        });, +                segment.remove(entry.key, f -> {});, +            segment.remove(entry.key, f -> {});, +++ b/server/src/main/java/org/elasticsearch/common/cache/Cache.java, +                Entry<K, V> entry;, +                    entry = future.get();, +                } catch (ExecutionException e) {, +                    assert future.isCompletedExceptionally();, +                } catch (InterruptedException e) {, +                if (isExpired.test(entry)) {, +                    onExpiration.accept(entry);, +                    return null;, +                } else {, +                    segmentStats.hit();, +                    entry.accessTime = now;, +            } else {, +                segmentStats.miss();, +                return null;, +            }, +        }, +         * @param onRemoval a callback for the removed entry, +        void remove(K key, Consumer<CompletableFuture<Entry<K, V>>> onRemoval) {, +                onRemoval.accept(future);, +        segment.remove(key, f -> {, +            try {, +                Entry<K, V> entry = f.get();, +            } catch (ExecutionException e) {, +                // ok, +            } catch (InterruptedException e) {, +                throw new IllegalStateException(e);, +        });, +                segment.remove(entry.key, f -> {});, +            segment.remove(entry.key, f -> {});, +++ b/server/src/test/java/org/elasticsearch/common/cache/CacheTests.java]