[+++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +    private static final float DEFAULT_INDEX_BALANCE_FACTOR = 0.5f;, +    private static final float DEFAULT_SHARD_BALANCE_FACTOR  = 0.45f;, +    private static final float DEFAULT_PRIMARY_BALANCE_FACTOR = 0.05f;, +, +            float indexBalance = settings.getAsFloat(SETTING_INDEX_BALANCE_FACTOR, weightFunction.indexBalance);, +            float shardBalance = settings.getAsFloat(SETTING_SHARD_BALANCE_FACTOR, weightFunction.shardBalance);, +            float primaryBalance = settings.getAsFloat(SETTING_PRIMARY_BALANCE_FACTOR, weightFunction.primaryBalance);, +            float threshold = settings.getAsFloat(SETTING_THRESHOLD, BalancedShardsAllocator.this.threshold);, +    private volatile WeightFunction weightFunction = new WeightFunction(DEFAULT_INDEX_BALANCE_FACTOR, DEFAULT_SHARD_BALANCE_FACTOR, DEFAULT_PRIMARY_BALANCE_FACTOR);, +    private volatile float threshold = 1.0f;, +    /**, +     * Returns the currently configured delta threshold, +     */, +    public float getThreshold() {, +        return threshold;, +    }, +    , +    /**, +     * Returns the index related weight factor., +     */, +    public float getIndexBalance() {, +        return weightFunction.indexBalance;, +    }, +    , +    /**, +     * Returns the primary related weight factor., +     */, +    public float getPrimaryBalance() {, +        return weightFunction.primaryBalance;, +    }, +    , +    /**, +     * Returns the shard related weight factor., +     */, +    public float getShardBalance() {, +        return weightFunction.shardBalance;, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +    private static final float DEFAULT_INDEX_BALANCE_FACTOR = 0.5f;, +    private static final float DEFAULT_SHARD_BALANCE_FACTOR  = 0.45f;, +    private static final float DEFAULT_PRIMARY_BALANCE_FACTOR = 0.05f;, +, +            float indexBalance = settings.getAsFloat(SETTING_INDEX_BALANCE_FACTOR, weightFunction.indexBalance);, +            float shardBalance = settings.getAsFloat(SETTING_SHARD_BALANCE_FACTOR, weightFunction.shardBalance);, +            float primaryBalance = settings.getAsFloat(SETTING_PRIMARY_BALANCE_FACTOR, weightFunction.primaryBalance);, +            float threshold = settings.getAsFloat(SETTING_THRESHOLD, BalancedShardsAllocator.this.threshold);, +    private volatile WeightFunction weightFunction = new WeightFunction(DEFAULT_INDEX_BALANCE_FACTOR, DEFAULT_SHARD_BALANCE_FACTOR, DEFAULT_PRIMARY_BALANCE_FACTOR);, +    private volatile float threshold = 1.0f;, +    /**, +     * Returns the currently configured delta threshold, +     */, +    public float getThreshold() {, +        return threshold;, +    }, +    , +    /**, +     * Returns the index related weight factor., +     */, +    public float getIndexBalance() {, +        return weightFunction.indexBalance;, +    }, +    , +    /**, +     * Returns the primary related weight factor., +     */, +    public float getPrimaryBalance() {, +        return weightFunction.primaryBalance;, +    }, +    , +    /**, +     * Returns the shard related weight factor., +     */, +    public float getShardBalance() {, +        return weightFunction.shardBalance;, +    }, +, +++ b/src/test/java/org/elasticsearch/test/unit/cluster/routing/allocation/BalanceConfigurationTests.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +import org.elasticsearch.node.settings.NodeSettingsService.Listener;, +    @Test, +    public void testPersistedSettings() {, +        ImmutableSettings.Builder settings = settingsBuilder();, +        settings.put(BalancedShardsAllocator.SETTING_INDEX_BALANCE_FACTOR, 0.2);, +        settings.put(BalancedShardsAllocator.SETTING_SHARD_BALANCE_FACTOR, 0.3);, +        settings.put(BalancedShardsAllocator.SETTING_PRIMARY_BALANCE_FACTOR, 0.5);, +        settings.put(BalancedShardsAllocator.SETTING_THRESHOLD, 2.0);, +        final NodeSettingsService.Listener[] listeners = new NodeSettingsService.Listener[1];, +        NodeSettingsService service = new NodeSettingsService(settingsBuilder().build()) {, +, +            @Override, +            public void addListener(Listener listener) {, +                assert listeners[0] == null;, +                listeners[0] = listener; , +            }, +            , +        };, +        BalancedShardsAllocator allocator = new BalancedShardsAllocator(settings.build(), service);, +        assertThat(allocator.getIndexBalance(), Matchers.equalTo(0.2f));]