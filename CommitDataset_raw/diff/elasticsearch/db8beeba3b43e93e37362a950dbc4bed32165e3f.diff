[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +    private NameOrDefinition tokenizer;, +    private final List<NameOrDefinition> tokenFilters = new ArrayList<>();, +    private final List<NameOrDefinition> charFilters = new ArrayList<>();, +    public static class NameOrDefinition implements Writeable {, +        // exactly one of these two members is not null, +        public final String name;, +        public final Settings definition;, +, +        NameOrDefinition(String name) {, +            this.name = Objects.requireNonNull(name);, +            this.definition = null;, +        }, +, +        NameOrDefinition(Map<String, ?> definition) {, +            this.name = null;, +            Objects.requireNonNull(definition);, +            try {, +                XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);, +                builder.map(definition);, +                this.definition = Settings.builder().loadFromSource(builder.string()).build();, +            } catch (IOException e) {, +                throw new IllegalArgumentException("Failed to parse [" + definition + "]", e);, +            }, +        }, +, +        NameOrDefinition(StreamInput in) throws IOException {, +            name = in.readOptionalString();, +            if (in.readBoolean()) {, +                definition = Settings.readSettingsFromStream(in);, +            } else {, +                definition = null;, +            }, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(name);, +            boolean isNotNullDefinition = this.definition != null;, +            out.writeBoolean(isNotNullDefinition);, +            if (isNotNullDefinition) {, +                Settings.writeSettingsToStream(definition, out);, +            }, +        }, +    }, +, +        this.tokenizer = new NameOrDefinition(tokenizer);, +    public AnalyzeRequest tokenizer(Map<String, ?> tokenizer) {, +        this.tokenizer = new NameOrDefinition(tokenizer);, +        return this;, +    }, +, +    public NameOrDefinition tokenizer() {, +    public AnalyzeRequest addTokenFilter(String tokenFilter) {, +        this.tokenFilters.add(new NameOrDefinition(tokenFilter));, +    public AnalyzeRequest addTokenFilter(Map<String, ?> tokenFilter) {, +        this.tokenFilters.add(new NameOrDefinition(tokenFilter));, +        return this;, +    }, +, +    public List<NameOrDefinition> tokenFilters() {, +    public AnalyzeRequest addCharFilter(Map<String, ?> charFilter) {, +        this.charFilters.add(new NameOrDefinition(charFilter));, +    public AnalyzeRequest addCharFilter(String charFilter) {, +        this.charFilters.add(new NameOrDefinition(charFilter));, +        return this;, +    }, +    public List<NameOrDefinition> charFilters() {, +        tokenizer = in.readOptionalWriteable(NameOrDefinition::new);, +        tokenFilters.addAll(in.readList(NameOrDefinition::new));, +        charFilters.addAll(in.readList(NameOrDefinition::new));, +        out.writeOptionalWriteable(tokenizer);, +        out.writeList(tokenFilters);, +        out.writeList(charFilters);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +    private NameOrDefinition tokenizer;, +    private final List<NameOrDefinition> tokenFilters = new ArrayList<>();, +    private final List<NameOrDefinition> charFilters = new ArrayList<>();, +    public static class NameOrDefinition implements Writeable {, +        // exactly one of these two members is not null, +        public final String name;, +        public final Settings definition;]