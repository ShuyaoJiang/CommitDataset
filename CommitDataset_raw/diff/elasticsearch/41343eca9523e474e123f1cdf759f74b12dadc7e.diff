[+++ b/src/main/java/org/elasticsearch/transport/TransportService.java, +    volatile DiscoveryNode localNode = null;, +        this.localNode = localNode;, +    DiscoveryNode getLocalNode() {, +        return localNode;, +        return node.equals(localNode) || transport.nodeConnected(node);, +        if (node.equals(localNode)) {, +        if (node.equals(localNode)) {, +        if (node.equals(localNode)) {, +            if (node.equals(localNode)) {, +        final DirectResponseChannel channel = new DirectResponseChannel(logger, localNode, action, requestId, adapter, threadPool);, +        final ESLogger logger;, +        final DiscoveryNode localNode;, +        public DirectResponseChannel(ESLogger logger, DiscoveryNode localNode, String action, long requestId, TransportServiceAdapter adapter, ThreadPool threadPool) {, +            this.logger = logger;, +            this.localNode = localNode;, +        @SuppressWarnings("unchecked"), +                processException(handler, wrapInRemote(new ResponseHandlerFailureTransportException(e)));, +                final RemoteTransportException rtx = wrapInRemote(error);, +        protected RemoteTransportException wrapInRemote(Throwable t) {, +            if (t instanceof RemoteTransportException) {, +                return (RemoteTransportException) t;, +            }, +            return new RemoteTransportException(localNode.name(), localNode.getAddress(), action, t);, +        }, +, +                logger.error("failed to handle exception for action [{}], handler [{}]", e, action, handler);, +++ b/src/main/java/org/elasticsearch/transport/TransportService.java, +    volatile DiscoveryNode localNode = null;, +        this.localNode = localNode;, +    DiscoveryNode getLocalNode() {, +        return localNode;, +        return node.equals(localNode) || transport.nodeConnected(node);, +        if (node.equals(localNode)) {, +        if (node.equals(localNode)) {, +        if (node.equals(localNode)) {, +            if (node.equals(localNode)) {, +        final DirectResponseChannel channel = new DirectResponseChannel(logger, localNode, action, requestId, adapter, threadPool);, +        final ESLogger logger;, +        final DiscoveryNode localNode;, +        public DirectResponseChannel(ESLogger logger, DiscoveryNode localNode, String action, long requestId, TransportServiceAdapter adapter, ThreadPool threadPool) {, +            this.logger = logger;, +            this.localNode = localNode;, +        @SuppressWarnings("unchecked"), +                processException(handler, wrapInRemote(new ResponseHandlerFailureTransportException(e)));, +                final RemoteTransportException rtx = wrapInRemote(error);, +        protected RemoteTransportException wrapInRemote(Throwable t) {, +            if (t instanceof RemoteTransportException) {, +                return (RemoteTransportException) t;, +            }, +            return new RemoteTransportException(localNode.name(), localNode.getAddress(), action, t);, +        }, +, +                logger.error("failed to handle exception for action [{}], handler [{}]", e, action, handler);, +++ b/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java, +        if (((TransportService) serviceA).getLocalNode() != null) {]