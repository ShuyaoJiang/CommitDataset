[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +    /**, +     * This method fails if {@link #setExecutionMode()} is called before on this context., +     * This is used to <i>seal</i>, +     */, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +    /**, +     * This method fails if {@link #setExecutionMode()} is called before on this context., +     * This is used to <i>seal</i>, +     */, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    /**, +     * Compiles (or retrieves from cache) and executes the provided script, +     */, +    /**, +     * Returns a lazily created {@link SearchScript} that is compiled immediately but can be pulled later once all, +     * parameters are available., +     */, +    /**, +     * Compiles (or retrieves from cache) and executes the provided script, +     */, +    /**, +     * Returns a lazily created {@link ExecutableScript} that is compiled immediately but can be pulled later once all, +     * parameters are available., +     */, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +    /**, +     * This method fails if {@link #setExecutionMode()} is called before on this context., +     * This is used to <i>seal</i>, +     */, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    /**, +     * Compiles (or retrieves from cache) and executes the provided script, +     */, +    /**, +     * Returns a lazily created {@link SearchScript} that is compiled immediately but can be pulled later once all, +     * parameters are available., +     */, +    /**, +     * Compiles (or retrieves from cache) and executes the provided script, +     */, +    /**, +     * Returns a lazily created {@link ExecutableScript} that is compiled immediately but can be pulled later once all, +     * parameters are available., +     */, +++ b/core/src/main/java/org/elasticsearch/search/DefaultSearchContext.java, +    DefaultSearchContext(DefaultSearchContext source) {, +        this(source.id(), source.request(), source.shardTarget(), source.engineSearcher, source.indexService, source.indexShard(),, +            source.bigArrays(), source.timeEstimateCounter(), source.parseFieldMatcher(), source.timeout(), source.fetchPhase());, +    }, +, +, +, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +    /**, +     * This method fails if {@link #setExecutionMode()} is called before on this context., +     * This is used to <i>seal</i>, +     */, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    /**, +     * Compiles (or retrieves from cache) and executes the provided script, +     */, +    /**, +     * Returns a lazily created {@link SearchScript} that is compiled immediately but can be pulled later once all, +     * parameters are available., +     */, +    /**, +     * Compiles (or retrieves from cache) and executes the provided script, +     */, +    /**, +     * Returns a lazily created {@link ExecutableScript} that is compiled immediately but can be pulled later once all, +     * parameters are available., +     */, +++ b/core/src/main/java/org/elasticsearch/search/DefaultSearchContext.java, +    DefaultSearchContext(DefaultSearchContext source) {, +        this(source.id(), source.request(), source.shardTarget(), source.engineSearcher, source.indexService, source.indexShard(),, +            source.bigArrays(), source.timeEstimateCounter(), source.parseFieldMatcher(), source.timeout(), source.fetchPhase());, +    }, +, +, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        final DefaultSearchContext context = createSearchContext(request, defaultSearchTimeout, searcher);, +            // we clone the search context here just for rewriting otherwise we, +            // might end up with incorrect state since we are using now() or script services, +            // during rewrite and normalized / evaluate templates etc., +            // NOTE this context doesn't need to be closed - the outer context will, +            // take care of this., +            DefaultSearchContext rewriteContext = new DefaultSearchContext(context);, +            SearchContext.setCurrent(rewriteContext);, +            request.rewrite(rewriteContext.getQueryShardContext());, +            SearchContext.setCurrent(context);, +            assert context.getQueryShardContext().isCachable();]