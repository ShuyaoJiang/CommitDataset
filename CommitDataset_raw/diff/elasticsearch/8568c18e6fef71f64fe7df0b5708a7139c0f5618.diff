[+++ b/core-signatures.txt, +@defaultMessage Pass the precision step from the mappings explicitly instead, +org.apache.lucene.search.NumericRangeQuery#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +, +++ b/core-signatures.txt, +@defaultMessage Pass the precision step from the mappings explicitly instead, +org.apache.lucene.search.NumericRangeQuery#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16` for `long`, `double`,, +`8` for `short`, `integer`, `float`, and `2147483647` for `byte`., +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16`., +++ b/core-signatures.txt, +@defaultMessage Pass the precision step from the mappings explicitly instead, +org.apache.lucene.search.NumericRangeQuery#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16` for `long`, `double`,, +`8` for `short`, `integer`, `float`, and `2147483647` for `byte`., +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16`., +++ b/docs/reference/mapping/types/geo-point-type.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value) for `.lat` and `.lon` fields , +if `lat_lon` is set to `true`., +Defaults to `16`., +++ b/core-signatures.txt, +@defaultMessage Pass the precision step from the mappings explicitly instead, +org.apache.lucene.search.NumericRangeQuery#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16` for `long`, `double`,, +`8` for `short`, `integer`, `float`, and `2147483647` for `byte`., +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16`., +++ b/docs/reference/mapping/types/geo-point-type.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value) for `.lat` and `.lon` fields , +if `lat_lon` is set to `true`., +Defaults to `16`., +++ b/docs/reference/mapping/types/ip-type.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16`., +++ b/core-signatures.txt, +@defaultMessage Pass the precision step from the mappings explicitly instead, +org.apache.lucene.search.NumericRangeQuery#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeQuery#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newDoubleRange(java.lang.String,java.lang.Double,java.lang.Double,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newFloatRange(java.lang.String,java.lang.Float,java.lang.Float,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newIntRange(java.lang.String,java.lang.Integer,java.lang.Integer,boolean,boolean), +org.apache.lucene.search.NumericRangeFilter#newLongRange(java.lang.String,java.lang.Long,java.lang.Long,boolean,boolean), +, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16` for `long`, `double`,, +`8` for `short`, `integer`, `float`, and `2147483647` for `byte`., +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16`., +++ b/docs/reference/mapping/types/geo-point-type.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value) for `.lat` and `.lon` fields , +if `lat_lon` is set to `true`., +Defaults to `16`., +++ b/docs/reference/mapping/types/ip-type.asciidoc, +|`precision_step` |The precision step (influences the number of terms , +generated for each number value). Defaults to `16`.]