[+++ b/build.gradle, +    languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava.toString(), +++ b/build.gradle, +    languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava.toString(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.8'), +                // compile with compact 3 profile by default, +                // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                if (project.compactProfile != 'full') {, +                    options.compilerArgs << '-profile' << project.compactProfile, +                }, +++ b/build.gradle, +    languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava.toString(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.8'), +                // compile with compact 3 profile by default, +                // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                if (project.compactProfile != 'full') {, +                    options.compilerArgs << '-profile' << project.compactProfile, +                }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static enum Origin {, +            RECOVERY, +++ b/build.gradle, +    languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava.toString(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.8'), +                // compile with compact 3 profile by default, +                // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                if (project.compactProfile != 'full') {, +                    options.compilerArgs << '-profile' << project.compactProfile, +                }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static enum Origin {, +            RECOVERY, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            if (index.origin() == Operation.Origin.RECOVERY) {, +                if (index.origin() != Operation.Origin.RECOVERY) {, +            Translog.Location translogLocation = translog.add(new Translog.Index(index));, +            versionMap.putUnderLock(index.uid().bytes(), new VersionValue(updatedVersion, translogLocation));, +                if (delete.origin() == Operation.Origin.RECOVERY) {, +            Translog.Location translogLocation = translog.add(new Translog.Delete(delete));, +            versionMap.putUnderLock(delete.uid().bytes(), new DeleteVersionValue(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), translogLocation));, +++ b/build.gradle, +    languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava.toString(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.8'), +                // compile with compact 3 profile by default, +                // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                if (project.compactProfile != 'full') {, +                    options.compilerArgs << '-profile' << project.compactProfile, +                }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static enum Origin {, +            RECOVERY, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            if (index.origin() == Operation.Origin.RECOVERY) {, +                if (index.origin() != Operation.Origin.RECOVERY) {, +            Translog.Location translogLocation = translog.add(new Translog.Index(index));, +            versionMap.putUnderLock(index.uid().bytes(), new VersionValue(updatedVersion, translogLocation));, +                if (delete.origin() == Operation.Origin.RECOVERY) {, +            Translog.Location translogLocation = translog.add(new Translog.Delete(delete));, +            versionMap.putUnderLock(delete.uid().bytes(), new DeleteVersionValue(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), translogLocation));, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        } else if (origin == Engine.Operation.Origin.RECOVERY) {, +++ b/build.gradle, +    languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava.toString(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.8'), +                // compile with compact 3 profile by default, +                // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                if (project.compactProfile != 'full') {, +                    options.compilerArgs << '-profile' << project.compactProfile, +                }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public static enum Origin {, +            RECOVERY, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            if (index.origin() == Operation.Origin.RECOVERY) {, +                if (index.origin() != Operation.Origin.RECOVERY) {, +            Translog.Location translogLocation = translog.add(new Translog.Index(index));, +            versionMap.putUnderLock(index.uid().bytes(), new VersionValue(updatedVersion, translogLocation));, +                if (delete.origin() == Operation.Origin.RECOVERY) {, +            Translog.Location translogLocation = translog.add(new Translog.Delete(delete));, +            versionMap.putUnderLock(delete.uid().bytes(), new DeleteVersionValue(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), translogLocation));, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        } else if (origin == Engine.Operation.Origin.RECOVERY) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java, +        if (operation.origin() != Engine.Operation.Origin.RECOVERY) {, +        if (index.origin() != Engine.Operation.Origin.RECOVERY) {, +        if (index.origin() != Engine.Operation.Origin.RECOVERY) {, +        if (delete.origin() != Engine.Operation.Origin.RECOVERY) {, +        if (delete.origin() != Engine.Operation.Origin.RECOVERY) {, +        if (delete.origin() != Engine.Operation.Origin.RECOVERY) {, +++ b/build.gradle, +    languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava.toString(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.8'), +                // compile with compact 3 profile by default, +                // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE]