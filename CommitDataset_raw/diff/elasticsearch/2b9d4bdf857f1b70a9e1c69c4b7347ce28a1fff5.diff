[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +import java.util.HashSet;, +import java.util.function.Supplier;, +    /** Creates a DiscoveryNode representing the local node. */, +    public static DiscoveryNode createLocal(Settings settings, TransportAddress publishAddress, String nodeIdSupplier) {, +        Map<String, String> attributes = new HashMap<>(Node.NODE_ATTRIBUTES.get(settings).getAsMap());, +        Set<DiscoveryNode.Role> roles = new HashSet<>();, +        if (Node.NODE_INGEST_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.INGEST);, +        }, +        if (Node.NODE_MASTER_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.MASTER);, +        }, +        if (Node.NODE_DATA_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.DATA);, +        }, +, +        return new DiscoveryNode(Node.NODE_NAME_SETTING.get(settings), nodeIdSupplier, publishAddress,, +                                 attributes, roles, Version.CURRENT);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +import java.util.HashSet;, +import java.util.function.Supplier;, +    /** Creates a DiscoveryNode representing the local node. */, +    public static DiscoveryNode createLocal(Settings settings, TransportAddress publishAddress, String nodeIdSupplier) {, +        Map<String, String> attributes = new HashMap<>(Node.NODE_ATTRIBUTES.get(settings).getAsMap());, +        Set<DiscoveryNode.Role> roles = new HashSet<>();, +        if (Node.NODE_INGEST_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.INGEST);, +        }, +        if (Node.NODE_MASTER_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.MASTER);, +        }, +        if (Node.NODE_DATA_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.DATA);, +        }, +, +        return new DiscoveryNode(Node.NODE_NAME_SETTING.get(settings), nodeIdSupplier, publishAddress,, +                                 attributes, roles, Version.CURRENT);, +    }, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +import java.util.HashSet;, +import java.util.function.Supplier;, +    /** Creates a DiscoveryNode representing the local node. */, +    public static DiscoveryNode createLocal(Settings settings, TransportAddress publishAddress, String nodeIdSupplier) {, +        Map<String, String> attributes = new HashMap<>(Node.NODE_ATTRIBUTES.get(settings).getAsMap());, +        Set<DiscoveryNode.Role> roles = new HashSet<>();, +        if (Node.NODE_INGEST_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.INGEST);, +        }, +        if (Node.NODE_MASTER_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.MASTER);, +        }, +        if (Node.NODE_DATA_SETTING.get(settings)) {, +            roles.add(DiscoveryNode.Role.DATA);, +        }, +, +        return new DiscoveryNode(Node.NODE_NAME_SETTING.get(settings), nodeIdSupplier, publishAddress,, +                                 attributes, roles, Version.CURRENT);, +    }, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/inject/Injector.java, + * <p>, + * Injectors can be {@link #createChildInjector(Iterable) hierarchical}. Child injectors inherit, + * the configuration of their parent injectors, but the converse does not hold., + * <p>, + * The injector's {@link #getBindings() internal bindings} are available for introspection. This, + * enables tools and extensions to operate on an injector reflectively., +     * Returns all explicit bindings., +     * <p>, +     * The returned map does not include bindings inherited from a {@link #getParent() parent, +     * injector}, should one exist. The returned map is guaranteed to iterate (for example, with, +     * its {@link java.util.Map#entrySet()} iterator) in the order of insertion. In other words,, +     * the order in which bindings appear in user Modules., +     * <p>, +     * This method is part of the Guice SPI and is intended for use by tools and extensions., +     */, +    Map<Key<?>, Binding<?>> getBindings();, +, +    /**, +     * Returns the binding for the given injection key. This will be an explicit bindings if the key, +     * was bound explicitly by a module, or an implicit binding otherwise. The implicit binding will, +     * be created if necessary., +     * <p>, +     * This method is part of the Guice SPI and is intended for use by tools and extensions., +     *, +     * @throws ConfigurationException if this injector cannot find or create the binding., +     */, +    <T> Binding<T> getBinding(Key<T> key);, +, +    /**, +     * Returns the binding for the given type. This will be an explicit bindings if the injection key]