[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +// LUCENE MONITOR, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +// LUCENE MONITOR, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +import static org.elasticsearch.common.collect.Maps.*;, +            for (SearchContextHighlight.Field field : context.highlight().fields()) {, +                String fieldName = field.field();, +                FieldMapper mapper = documentMapper.mappers().smartNameFieldMapper(field.field());, +                FastVectorHighlighter highlighter = buildHighlighter(field);, +                FieldQuery fieldQuery = buildFieldQuery(highlighter, context.query(), context.searcher().getIndexReader(), field);, +                    fragments = highlighter.getBestFragments(fieldQuery, context.searcher().getIndexReader(), docId, fieldName, field.fragmentCharSize(), field.numberOfFragments());, +                    throw new FetchPhaseExecutionException(context, "Failed to highlight field [" + field.field() + "]", e);, +                HighlightField highlightField = new HighlightField(field.field(), fragments);, +    private FieldQuery buildFieldQuery(FastVectorHighlighter highlighter, Query query, IndexReader indexReader, SearchContextHighlight.Field field) {, +        CustomFieldQuery.highlightFilters.set(field.highlightFilter());, +        return new CustomFieldQuery(query, highlighter);, +    private FastVectorHighlighter buildHighlighter(SearchContextHighlight.Field field) {, +        if (field.numberOfFragments() == 0) {, +            fragmentsBuilder = new SimpleFragmentsBuilder(field.preTags(), field.postTags());, +            if (field.scoreOrdered()) {, +                fragmentsBuilder = new ScoreOrderFragmentsBuilder(field.preTags(), field.postTags());, +                fragmentsBuilder = new SimpleFragmentsBuilder(field.preTags(), field.postTags());, +        return new FastVectorHighlighter(true, false, fragListBuilder, fragmentsBuilder);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +// LUCENE MONITOR, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +import static org.elasticsearch.common.collect.Maps.*;, +            for (SearchContextHighlight.Field field : context.highlight().fields()) {, +                String fieldName = field.field();, +                FieldMapper mapper = documentMapper.mappers().smartNameFieldMapper(field.field());, +                FastVectorHighlighter highlighter = buildHighlighter(field);, +                FieldQuery fieldQuery = buildFieldQuery(highlighter, context.query(), context.searcher().getIndexReader(), field);, +                    fragments = highlighter.getBestFragments(fieldQuery, context.searcher().getIndexReader(), docId, fieldName, field.fragmentCharSize(), field.numberOfFragments());, +                    throw new FetchPhaseExecutionException(context, "Failed to highlight field [" + field.field() + "]", e);, +                HighlightField highlightField = new HighlightField(field.field(), fragments);, +    private FieldQuery buildFieldQuery(FastVectorHighlighter highlighter, Query query, IndexReader indexReader, SearchContextHighlight.Field field) {, +        CustomFieldQuery.highlightFilters.set(field.highlightFilter());, +        return new CustomFieldQuery(query, highlighter);, +    private FastVectorHighlighter buildHighlighter(SearchContextHighlight.Field field) {, +        if (field.numberOfFragments() == 0) {, +            fragmentsBuilder = new SimpleFragmentsBuilder(field.preTags(), field.postTags());, +            if (field.scoreOrdered()) {]