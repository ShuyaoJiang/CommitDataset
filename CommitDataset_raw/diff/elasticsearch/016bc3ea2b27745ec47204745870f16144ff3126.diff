[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    /**, +     * Set the reason for canceling the task., +     */, +    public CancelTasksRequest setReason(String reason) {, +    /**, +     * The reason for canceling the task., +     */, +    public String getReason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    /**, +     * Set the reason for canceling the task., +     */, +    public CancelTasksRequest setReason(String reason) {, +    /**, +     * The reason for canceling the task., +     */, +    public String getReason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +        if (request.getTaskId().isSet() == false) {, +            CancellableTask task = taskManager.getCancellableTask(request.getTaskId().getId());, +                    throw new IllegalArgumentException("task [" + request.getTaskId() + "] doesn't support this operation");, +                if (taskManager.getTask(request.getTaskId().getId()) != null) {, +                    throw new IllegalArgumentException("task [" + request.getTaskId() + "] doesn't support cancellation");, +                    throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.getTaskId());, +        Set<String> childNodes = taskManager.cancel(cancellableTask, request.getReason(), banLock::onTaskFinished);, +                setBanOnNodes(request.getReason(), cancellableTask, childNodes, banLock);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    /**, +     * Set the reason for canceling the task., +     */, +    public CancelTasksRequest setReason(String reason) {, +    /**, +     * The reason for canceling the task., +     */, +    public String getReason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +        if (request.getTaskId().isSet() == false) {, +            CancellableTask task = taskManager.getCancellableTask(request.getTaskId().getId());, +                    throw new IllegalArgumentException("task [" + request.getTaskId() + "] doesn't support this operation");, +                if (taskManager.getTask(request.getTaskId().getId()) != null) {, +                    throw new IllegalArgumentException("task [" + request.getTaskId() + "] doesn't support cancellation");, +                    throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.getTaskId());, +        Set<String> childNodes = taskManager.cancel(cancellableTask, request.getReason(), banLock::onTaskFinished);, +                setBanOnNodes(request.getReason(), cancellableTask, childNodes, banLock);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequest.java, +    private boolean waitForCompletion = false;, +    public boolean getDetailed() {, +    public ListTasksRequest setDetailed(boolean detailed) {, +    /**, +     * Should this request wait for all found tasks to complete?, +     */, +    public boolean getWaitForCompletion() {, +        return waitForCompletion;, +    }, +, +    /**, +     * Should this request wait for all found tasks to complete?, +     */, +    public ListTasksRequest setWaitForCompletion(boolean waitForCompletion) {, +        this.waitForCompletion = waitForCompletion;, +        return this;, +    }, +, +        waitForCompletion = in.readBoolean();, +        out.writeBoolean(waitForCompletion);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksRequest.java, +    /**, +     * Set the reason for canceling the task., +     */, +    public CancelTasksRequest setReason(String reason) {, +    /**, +     * The reason for canceling the task., +     */, +    public String getReason() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +        if (request.getTaskId().isSet() == false) {, +            CancellableTask task = taskManager.getCancellableTask(request.getTaskId().getId());, +                    throw new IllegalArgumentException("task [" + request.getTaskId() + "] doesn't support this operation");, +                if (taskManager.getTask(request.getTaskId().getId()) != null) {, +                    throw new IllegalArgumentException("task [" + request.getTaskId() + "] doesn't support cancellation");, +                    throw new ResourceNotFoundException("task [{}] doesn't support cancellation", request.getTaskId());, +        Set<String> childNodes = taskManager.cancel(cancellableTask, request.getReason(), banLock::onTaskFinished);, +                setBanOnNodes(request.getReason(), cancellableTask, childNodes, banLock);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksRequest.java, +    private boolean waitForCompletion = false;, +    public boolean getDetailed() {, +    public ListTasksRequest setDetailed(boolean detailed) {, +    /**, +     * Should this request wait for all found tasks to complete?, +     */, +    public boolean getWaitForCompletion() {, +        return waitForCompletion;, +    }, +, +    /**, +     * Should this request wait for all found tasks to complete?, +     */, +    public ListTasksRequest setWaitForCompletion(boolean waitForCompletion) {, +        this.waitForCompletion = waitForCompletion;]