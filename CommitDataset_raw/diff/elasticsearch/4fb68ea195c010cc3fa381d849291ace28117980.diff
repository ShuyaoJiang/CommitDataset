[+++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatter.java, +        // dates starting with 8 will not be using joda but java time formatters, +        input = input.substring(1);, +, +        for (String pattern : Strings.delimitedListToStringArray(input, "||")) {, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatter.java, +        // dates starting with 8 will not be using joda but java time formatters, +        input = input.substring(1);, +, +        for (String pattern : Strings.delimitedListToStringArray(input, "||")) {, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatters.java, +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        DateTimeFormatterBuilder roundupBuilder = new DateTimeFormatterBuilder();, +            dateTimeFormatters.add(javaDateFormatter.getParser());, +            roundupBuilder.appendOptional(javaDateFormatter.getRoundupParser());, +        DateTimeFormatter roundUpParser = roundupBuilder.toFormatter(Locale.ROOT);, +        return new JavaDateFormatter(pattern, printer, builder -> builder.append(roundUpParser),, +            dateTimeFormatters.toArray(new DateTimeFormatter[0]));, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatter.java, +        // dates starting with 8 will not be using joda but java time formatters, +        input = input.substring(1);, +, +        for (String pattern : Strings.delimitedListToStringArray(input, "||")) {, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatters.java, +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        DateTimeFormatterBuilder roundupBuilder = new DateTimeFormatterBuilder();, +            dateTimeFormatters.add(javaDateFormatter.getParser());, +            roundupBuilder.appendOptional(javaDateFormatter.getRoundupParser());, +        DateTimeFormatter roundUpParser = roundupBuilder.toFormatter(Locale.ROOT);, +        return new JavaDateFormatter(pattern, printer, builder -> builder.append(roundUpParser),, +            dateTimeFormatters.toArray(new DateTimeFormatter[0]));, +++ b/server/src/main/java/org/elasticsearch/common/time/EpochTime.java, +        builder -> builder.parseDefaulting(ChronoField.NANO_OF_SECOND, 999_999_999L),, +        builder -> builder.parseDefaulting(EpochTime.NANOS_OF_MILLI, 999_999L),, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatter.java, +        // dates starting with 8 will not be using joda but java time formatters, +        input = input.substring(1);, +, +        for (String pattern : Strings.delimitedListToStringArray(input, "||")) {, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatters.java, +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 3, 3, true), +            .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        .appendFraction(NANO_OF_SECOND, 1, 3, true), +        DateTimeFormatterBuilder roundupBuilder = new DateTimeFormatterBuilder();, +            dateTimeFormatters.add(javaDateFormatter.getParser());, +            roundupBuilder.appendOptional(javaDateFormatter.getRoundupParser());, +        DateTimeFormatter roundUpParser = roundupBuilder.toFormatter(Locale.ROOT);, +        return new JavaDateFormatter(pattern, printer, builder -> builder.append(roundUpParser),, +            dateTimeFormatters.toArray(new DateTimeFormatter[0]));, +++ b/server/src/main/java/org/elasticsearch/common/time/EpochTime.java, +        builder -> builder.parseDefaulting(ChronoField.NANO_OF_SECOND, 999_999_999L),, +        builder -> builder.parseDefaulting(EpochTime.NANOS_OF_MILLI, 999_999L),, +++ b/server/src/main/java/org/elasticsearch/common/time/JavaDateFormatter.java, +import java.util.function.Consumer;]