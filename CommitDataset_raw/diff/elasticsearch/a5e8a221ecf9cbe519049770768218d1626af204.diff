[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.LocalCheckpointTracker;, +    public abstract LocalCheckpointTracker getLocalCheckpointTracker();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.LocalCheckpointTracker;, +    public abstract LocalCheckpointTracker getLocalCheckpointTracker();, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import java.util.function.LongSupplier;, +    private final LongSupplier globalCheckpointSupplier;, +                        TranslogRecoveryRunner translogRecoveryRunner, CircuitBreakerService circuitBreakerService,, +                        LongSupplier globalCheckpointSupplier) {, +        this.globalCheckpointSupplier = globalCheckpointSupplier;, +     * Returns the global checkpoint tracker, +     */, +    public LongSupplier getGlobalCheckpointSupplier() {, +        return globalCheckpointSupplier;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.LocalCheckpointTracker;, +    public abstract LocalCheckpointTracker getLocalCheckpointTracker();, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import java.util.function.LongSupplier;, +    private final LongSupplier globalCheckpointSupplier;, +                        TranslogRecoveryRunner translogRecoveryRunner, CircuitBreakerService circuitBreakerService,, +                        LongSupplier globalCheckpointSupplier) {, +        this.globalCheckpointSupplier = globalCheckpointSupplier;, +     * Returns the global checkpoint tracker, +     */, +    public LongSupplier getGlobalCheckpointSupplier() {, +        return globalCheckpointSupplier;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.index.seqno.LocalCheckpointTracker;, +    private final LocalCheckpointTracker localCheckpointTracker;, +        this(engineConfig, LocalCheckpointTracker::new);, +            final BiFunction<Long, Long, LocalCheckpointTracker> localCheckpointTrackerSupplier) {, +                this.localCheckpointTracker = createLocalCheckpointTracker(localCheckpointTrackerSupplier);, +                translog = openTranslog(engineConfig, translogDeletionPolicy, engineConfig.getGlobalCheckpointSupplier());, +                    new CombinedDeletionPolicy(openMode, translogDeletionPolicy, engineConfig.getGlobalCheckpointSupplier()), +    private LocalCheckpointTracker createLocalCheckpointTracker(, +        BiFunction<Long, Long, LocalCheckpointTracker> localCheckpointTrackerSupplier) throws IOException {, +        final long maxSeqNo;, +        final long localCheckpoint;, +        switch (openMode) {, +            case CREATE_INDEX_AND_TRANSLOG:, +                maxSeqNo = SequenceNumbers.NO_OPS_PERFORMED;, +                localCheckpoint = SequenceNumbers.NO_OPS_PERFORMED;, +                break;, +            case OPEN_INDEX_AND_TRANSLOG:, +            case OPEN_INDEX_CREATE_TRANSLOG:, +                final Tuple<Long, Long> seqNoStats = store.loadSeqNoInfo();, +                maxSeqNo = seqNoStats.v1();, +                localCheckpoint = seqNoStats.v2();, +                logger.trace("recovered maximum sequence number [{}] and local checkpoint [{}]", maxSeqNo, localCheckpoint);, +                break;, +            default: throw new IllegalArgumentException("unknown type: " + openMode);, +        }, +        return localCheckpointTrackerSupplier.apply(maxSeqNo, localCheckpoint);, +    }, +, +            final long localCheckpoint = localCheckpointTracker.getCheckpoint();, +                        localCheckpointTracker.markSeqNoAsCompleted(operation.seqNo());, +            final long localCheckpoint = localCheckpointTracker.getCheckpoint();, +            final long maxSeqNo = localCheckpointTracker.getMaxSeqNo();, +                    seqNo = localCheckpointTracker.getCheckpoint() + 1 /* the local checkpoint might have advanced so we leap-frog */) {, +                assert seqNo <= localCheckpointTracker.getCheckpoint(), +                        : "local checkpoint did not advance; was [" + seqNo + "], now [" + localCheckpointTracker.getCheckpoint() + "]";, +        return localCheckpointTracker.generateSeqNo();, +                    localCheckpointTracker.markSeqNoAsCompleted(indexResult.getSeqNo());, +            if (index.seqNo() <= localCheckpointTracker.getCheckpoint()){, +                localCheckpointTracker.markSeqNoAsCompleted(deleteResult.getSeqNo());, +        if (delete.seqNo() <= localCheckpointTracker.getCheckpoint()) {, +                localCheckpointTracker.markSeqNoAsCompleted(seqNo);, +            final long localCheckpoint = localCheckpointTracker.getCheckpoint();, +                commitData.put(SequenceNumbers.MAX_SEQ_NO, Long.toString(localCheckpointTracker.getMaxSeqNo()));, +    public final LocalCheckpointTracker getLocalCheckpointTracker() {, +        return localCheckpointTracker;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.LocalCheckpointTracker;, +    public abstract LocalCheckpointTracker getLocalCheckpointTracker();]