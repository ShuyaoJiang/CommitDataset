[+++ b/.idea/dictionaries/kimchy.xml, +      <w>datas</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>datas</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="file://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-all" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-client/jars/resteasy-jaxrs-client-1.2.1.GA.jar!/" />, +++ b/.idea/dictionaries/kimchy.xml, +      <w>datas</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="file://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-all" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-client/jars/resteasy-jaxrs-client-1.2.1.GA.jar!/" />, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/jclouds/JCloudsUtils.java, +++ b/.idea/dictionaries/kimchy.xml, +      <w>datas</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="file://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-all" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-client/jars/resteasy-jaxrs-client-1.2.1.GA.jar!/" />, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/jclouds/JCloudsUtils.java, +++ b/plugins/cloud/src/main/java/org/elasticsearch/gateway/cloud/CloudGateway.java, +import static org.jclouds.blobstore.options.ListContainerOptions.Builder.*;, +, +    private final String metaDataDirectory;, +    private final SizeValue chunkSize;, +        this.container = componentSettings.get("container");, +        this.metaDataDirectory = clusterName.value() + "/metadata";, +        logger.debug("Using location [{}], container [{}], metadata_directory [{}]", this.location, this.container, metaDataDirectory);, +        blobStoreContext.getBlobStore().createContainerInLocation(this.location, container);, +            String name = metaDataDirectory + "/metadata-" + (currentIndex + 1);, +            blobStoreContext.getBlobStore().putBlob(container, blob);, +            PageSet<? extends StorageMetadata> pageSet = blobStoreContext.getBlobStore().list(container, inDirectory(metaDataDirectory));, +                if (storageMetadata.getName().contains("metadata-") && !name.equals(storageMetadata.getName())) {, +                    blobStoreContext.getAsyncBlobStore().removeBlob(container, storageMetadata.getName());, +            return readMetaData(metaDataDirectory + "/metadata-" + currentIndex);, +        PageSet<? extends StorageMetadata> pageSet = blobStoreContext.getBlobStore().list(container, inDirectory(metaDataDirectory));, +            if (storageMetadata.getName().contains("metadata-")) {, +                blobStoreContext.getBlobStore().removeBlob(container, storageMetadata.getName());, +        PageSet<? extends StorageMetadata> pageSet = blobStoreContext.getBlobStore().list(container, inDirectory(metaDataDirectory).maxResults(1000));, +            if (!storageMetadata.getName().contains("metadata-")) {, +            int fileIndex = Integer.parseInt(storageMetadata.getName().substring(storageMetadata.getName().lastIndexOf('-') + 1));, +            Blob blob = blobStoreContext.getBlobStore().getBlob(container, name);, +++ b/.idea/dictionaries/kimchy.xml, +      <w>datas</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="file://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-all" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-client/jars/resteasy-jaxrs-client-1.2.1.GA.jar!/" />, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/jclouds/JCloudsUtils.java, +++ b/plugins/cloud/src/main/java/org/elasticsearch/gateway/cloud/CloudGateway.java, +import static org.jclouds.blobstore.options.ListContainerOptions.Builder.*;, +, +    private final String metaDataDirectory;, +    private final SizeValue chunkSize;, +        this.container = componentSettings.get("container");, +        this.metaDataDirectory = clusterName.value() + "/metadata";, +        logger.debug("Using location [{}], container [{}], metadata_directory [{}]", this.location, this.container, metaDataDirectory);, +        blobStoreContext.getBlobStore().createContainerInLocation(this.location, container);, +            String name = metaDataDirectory + "/metadata-" + (currentIndex + 1);, +            blobStoreContext.getBlobStore().putBlob(container, blob);, +            PageSet<? extends StorageMetadata> pageSet = blobStoreContext.getBlobStore().list(container, inDirectory(metaDataDirectory));, +                if (storageMetadata.getName().contains("metadata-") && !name.equals(storageMetadata.getName())) {, +                    blobStoreContext.getAsyncBlobStore().removeBlob(container, storageMetadata.getName());, +            return readMetaData(metaDataDirectory + "/metadata-" + currentIndex);, +        PageSet<? extends StorageMetadata> pageSet = blobStoreContext.getBlobStore().list(container, inDirectory(metaDataDirectory));, +            if (storageMetadata.getName().contains("metadata-")) {, +                blobStoreContext.getBlobStore().removeBlob(container, storageMetadata.getName());, +        PageSet<? extends StorageMetadata> pageSet = blobStoreContext.getBlobStore().list(container, inDirectory(metaDataDirectory).maxResults(1000));, +            if (!storageMetadata.getName().contains("metadata-")) {, +            int fileIndex = Integer.parseInt(storageMetadata.getName().substring(storageMetadata.getName().lastIndexOf('-') + 1));, +            Blob blob = blobStoreContext.getBlobStore().getBlob(container, name);, +++ b/plugins/cloud/src/main/java/org/elasticsearch/index/gateway/cloud/CloudIndexGateway.java, +import org.elasticsearch.cluster.ClusterName;, +    private final String indexDirectory;, +, +    @Inject public CloudIndexGateway(Index index, @IndexSettings Settings indexSettings, ClusterName clusterName, CloudBlobStoreService blobStoreService, Gateway gateway) {, +                container = cloudGateway.container();, +        this.indexDirectory = clusterName.value() + "/" + index.name();, +        logger.debug("Using location [{}], container [{}], index_directory [{}], chunk_size [{}]", this.location, this.indexContainer, this.indexDirectory, this.chunkSize);, +    public String indexDirectory() {, +        return this.indexDirectory;, +    }, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>datas</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="file://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-all" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jboss.resteasy/resteasy-jaxrs-client/jars/resteasy-jaxrs-client-1.2.1.GA.jar!/" />, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/jclouds/JCloudsUtils.java, +++ b/plugins/cloud/src/main/java/org/elasticsearch/gateway/cloud/CloudGateway.java, +import static org.jclouds.blobstore.options.ListContainerOptions.Builder.*;, +, +    private final String metaDataDirectory;, +    private final SizeValue chunkSize;, +        this.container = componentSettings.get("container");, +        this.metaDataDirectory = clusterName.value() + "/metadata";, +        logger.debug("Using location [{}], container [{}], metadata_directory [{}]", this.location, this.container, metaDataDirectory);, +        blobStoreContext.getBlobStore().createContainerInLocation(this.location, container);, +            String name = metaDataDirectory + "/metadata-" + (currentIndex + 1);, +            blobStoreContext.getBlobStore().putBlob(container, blob);, +            PageSet<? extends StorageMetadata> pageSet = blobStoreContext.getBlobStore().list(container, inDirectory(metaDataDirectory));, +                if (storageMetadata.getName().contains("metadata-") && !name.equals(storageMetadata.getName())) {]