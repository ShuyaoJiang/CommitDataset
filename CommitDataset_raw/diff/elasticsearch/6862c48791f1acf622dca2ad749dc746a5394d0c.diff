[+++ b/core/src/main/java/org/elasticsearch/search/highlight/CustomQueryScorer.java, +import org.apache.lucene.spatial.geopoint.search.GeoPointInBBoxQuery;, +        protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {, +            // skip all geo queries, see https://issues.apache.org/jira/browse/LUCENE-7293 and, +            // https://github.com/elastic/elasticsearch/issues/17537, +            if (query instanceof GeoPointInBBoxQuery == false) {, +                super.extract(query, boost, terms);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/search/highlight/CustomQueryScorer.java, +import org.apache.lucene.spatial.geopoint.search.GeoPointInBBoxQuery;, +        protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {, +            // skip all geo queries, see https://issues.apache.org/jira/browse/LUCENE-7293 and, +            // https://github.com/elastic/elasticsearch/issues/17537, +            if (query instanceof GeoPointInBBoxQuery == false) {, +                super.extract(query, boost, terms);, +        }, +    }, +++ b/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java, +    public void testGeoFieldHighlightingWithDifferentHighlighters() throws IOException {, +        // it accidentially with a wildcard, +            .field("geohash", true), +            .endObject(), +            .startObject("text"), +            .field("type", "text"), +            .field("term_vector", "with_positions_offsets_payloads"), +            .field("index_options", "offsets"), +            .setSource(jsonBuilder().startObject().field("text", "Arbitrary text field which will should not cause a failure").endObject()), +        String highlighterType = randomFrom("plain", "fvh", "postings");, +        QueryBuilder query = QueryBuilders.boolQuery().should(QueryBuilders.geoBoundingBoxQuery("geo_point"), +            .setCorners(61.10078883158897, -170.15625, -64.92354174306496, 118.47656249999999)), +            .should(QueryBuilders.termQuery("text", "failure"));, +            new SearchSourceBuilder().query(query), +                .highlighter(new HighlightBuilder().field("*").highlighterType(highlighterType))).get();, +        assertThat(search.getHits().getAt(0).highlightFields().get("text").fragments().length, equalTo(1));, +++ b/core/src/main/java/org/elasticsearch/search/highlight/CustomQueryScorer.java, +import org.apache.lucene.spatial.geopoint.search.GeoPointInBBoxQuery;, +        protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {, +            // skip all geo queries, see https://issues.apache.org/jira/browse/LUCENE-7293 and, +            // https://github.com/elastic/elasticsearch/issues/17537, +            if (query instanceof GeoPointInBBoxQuery == false) {, +                super.extract(query, boost, terms);, +        }, +    }, +++ b/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java, +    public void testGeoFieldHighlightingWithDifferentHighlighters() throws IOException {, +        // it accidentially with a wildcard, +            .field("geohash", true), +            .endObject(), +            .startObject("text"), +            .field("type", "text"), +            .field("term_vector", "with_positions_offsets_payloads"), +            .field("index_options", "offsets"), +            .setSource(jsonBuilder().startObject().field("text", "Arbitrary text field which will should not cause a failure").endObject()), +        String highlighterType = randomFrom("plain", "fvh", "postings");, +        QueryBuilder query = QueryBuilders.boolQuery().should(QueryBuilders.geoBoundingBoxQuery("geo_point"), +            .setCorners(61.10078883158897, -170.15625, -64.92354174306496, 118.47656249999999)), +            .should(QueryBuilders.termQuery("text", "failure"));, +            new SearchSourceBuilder().query(query), +                .highlighter(new HighlightBuilder().field("*").highlighterType(highlighterType))).get();, +        assertThat(search.getHits().getAt(0).highlightFields().get("text").fragments().length, equalTo(1));, +++ b/core/src/test/java/org/elasticsearch/search/highlight/PlainHighlighterTests.java, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.standard.StandardAnalyzer;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.TermQuery;, +import org.apache.lucene.search.highlight.InvalidTokenOffsetsException;, +import org.apache.lucene.spatial.geopoint.search.GeoPointDistanceQuery;, +import org.apache.lucene.spatial.geopoint.search.GeoPointInBBoxQuery;, +import org.apache.lucene.spatial.geopoint.search.GeoPointInPolygonQuery;, +import org.elasticsearch.index.analysis.FieldNameAnalyzer;, +, +import java.io.IOException;, +import java.util.HashMap;, +import java.util.Map;, +, +import static org.hamcrest.Matchers.equalTo;, +    public void checkGeoQueryHighlighting(Query geoQuery) throws IOException, InvalidTokenOffsetsException {, +        Map analysers = new HashMap<String, Analyzer>();, +        analysers.put("text", new StandardAnalyzer());, +        FieldNameAnalyzer fieldNameAnalyzer = new FieldNameAnalyzer(analysers);, +        Query termQuery = new TermQuery(new Term("text", "failure"));, +        Query boolQuery = new BooleanQuery.Builder().add(new BooleanClause(geoQuery, BooleanClause.Occur.SHOULD)), +            .add(new BooleanClause(termQuery, BooleanClause.Occur.SHOULD)).build();, +        org.apache.lucene.search.highlight.Highlighter highlighter =, +            new org.apache.lucene.search.highlight.Highlighter(new CustomQueryScorer(boolQuery));, +        String fragment = highlighter.getBestFragment(fieldNameAnalyzer.tokenStream("text", "Arbitrary text field which should not cause " +, +            "a failure"), "Arbitrary text field which should not cause a failure");, +        assertThat(fragment, equalTo("Arbitrary text field which should not cause a <B>failure</B>"));, +        // TODO: This test will fail if we pass in an instance of GeoPointInBBoxQueryImpl too. Should we also find a way to work around that, +        // or can the query not be rewritten before it is passed into the highlighter?, +    }, +, +    public void testGeoPointInBBoxQueryHighlighting() throws IOException, InvalidTokenOffsetsException {, +        Query geoQuery = new GeoPointDistanceQuery("geo_point", -64.92354174306496, -170.15625, 5576757);, +        checkGeoQueryHighlighting(geoQuery);, +    }, +, +    public void testGeoPointDistanceQueryHighlighting() throws IOException, InvalidTokenOffsetsException {]