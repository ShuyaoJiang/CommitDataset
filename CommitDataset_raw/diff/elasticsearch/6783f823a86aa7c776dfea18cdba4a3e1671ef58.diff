[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StopDatafeedAction.java, +import org.elasticsearch.action.FailedNodeException;, +import org.elasticsearch.action.TaskOperationFailure;, +import org.elasticsearch.action.support.tasks.BaseTasksRequest;, +import org.elasticsearch.action.support.tasks.BaseTasksResponse;, +import org.elasticsearch.action.support.tasks.TransportTasksAction;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.xpack.ml.MachineLearning;, +import org.elasticsearch.xpack.ml.MlMetadata;, +import org.elasticsearch.xpack.ml.utils.DatafeedStateObserver;, +import java.util.List;, +        extends Action<StopDatafeedAction.Request, StopDatafeedAction.Response, StopDatafeedAction.RequestBuilder> {, +    public static final ParseField TIMEOUT = new ParseField("timeout");, +    public Response newResponse() {, +        return new Response();, +    public static class Request extends BaseTasksRequest<Request> implements ToXContent {, +, +        public static ObjectParser<Request, Void> PARSER = new ObjectParser<>(NAME, Request::new);, +, +        static {, +            PARSER.declareString((request, datafeedId) -> request.datafeedId = datafeedId, DatafeedConfig.ID);, +            PARSER.declareString((request, val) ->, +                    request.setTimeout(TimeValue.parseTimeValue(val, TIMEOUT.getPreferredName())), TIMEOUT);, +        }, +, +        public static Request fromXContent(XContentParser parser) {, +            return parseRequest(null, parser);, +        }, +, +        public static Request parseRequest(String datafeedId, XContentParser parser) {, +            Request request = PARSER.apply(parser, null);, +            if (datafeedId != null) {, +                request.datafeedId = datafeedId;, +            }, +            return request;, +        }, +            setActions(StartDatafeedAction.NAME);, +        public boolean match(Task task) {, +            String expectedDescription = "datafeed-" + datafeedId;, +            return task instanceof StartDatafeedAction.DatafeedTask && expectedDescription.equals(task.getDescription());, +        }, +, +        @Override, +            return Objects.hash(datafeedId, getTimeout());, +        }, +, +        @Override, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.startObject();, +            builder.field(DatafeedConfig.ID.getPreferredName(), datafeedId);, +            if (getTimeout() != null) {, +                builder.field(TIMEOUT.getPreferredName(), getTimeout().getStringRep());, +            }, +            builder.endObject();, +            return builder;, +            return Objects.equals(datafeedId, other.datafeedId) &&, +                    Objects.equals(getTimeout(), other.getTimeout());, +    public static class Response extends BaseTasksResponse implements Writeable {, +, +        private boolean stopped;, +, +        public Response(boolean stopped) {, +            super(null, null);, +            this.stopped = stopped;, +        }, +, +        public Response(StreamInput in) throws IOException {, +            readFrom(in);, +        }, +, +        public Response() {, +        }, +, +        public boolean isStopped() {, +            return stopped;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            super.readFrom(in);, +            stopped = in.readBoolean();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            out.writeBoolean(stopped);, +        }, +    }, +, +    static class RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder> {, +    public static class TransportAction extends TransportTasksAction<StartDatafeedAction.DatafeedTask, Request, Response, Response> {]