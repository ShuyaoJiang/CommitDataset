[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                    listener.onFailure(new ResourceNotFoundException("task [{}] isn't running and hasn't stored its results", e,, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.action.support.replication.ReplicationResponse;, +import org.elasticsearch.action.support.replication.TransportReplicationActionTests;, +import org.elasticsearch.tasks.TaskResult;, +     * Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The, +     * goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any, +     * particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the, +     * task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire., +        /* We make sure all indexing tasks wait to start before this lock is *unlocked* so we can fetch their status with both the get and, +         * list APIs. */, +        CountDownLatch letTaskFinish = new CountDownLatch(1);, +        ListenableActionFuture<IndexResponse> indexFuture = null;, +        try {, +                            logger.debug("Blocking [{}] starting", task);, +                            try {, +                                letTaskFinish.await(10, TimeUnit.SECONDS);, +                            } catch (InterruptedException e) {, +                                throw new RuntimeException(e);, +                            }, +                assertEquals(task.getStatus(), fetchedWithGet.getStatus());, +            letTaskFinish.countDown();, +                IndexResponse indexResponse = indexFuture.get();, +                assertArrayEquals(ReplicationResponse.EMPTY, indexResponse.getShardInfo().getFailures());]