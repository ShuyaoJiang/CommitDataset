[+++ b/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +    public static final float DEFAULT_BOOST = 1.f;, +    private float boost = DEFAULT_BOOST;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +    public static final float DEFAULT_BOOST = 1.f;, +    private float boost = DEFAULT_BOOST;, +++ b/src/main/java/org/elasticsearch/index/query/QueryStringQueryParser.java, +            if (qpSettings.boost() != QueryParserSettings.DEFAULT_BOOST) {, +                query.setBoost(query.getBoost() * qpSettings.boost());, +            }, +++ b/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +    public static final float DEFAULT_BOOST = 1.f;, +    private float boost = DEFAULT_BOOST;, +++ b/src/main/java/org/elasticsearch/index/query/QueryStringQueryParser.java, +            if (qpSettings.boost() != QueryParserSettings.DEFAULT_BOOST) {, +                query.setBoost(query.getBoost() * qpSettings.boost());, +            }, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.Query;, +    public static <T extends Query> T assertBooleanSubQuery(Query query, Class<T> subqueryType, int i) {, +        assertThat(query, instanceOf(BooleanQuery.class));, +        BooleanQuery q = (BooleanQuery) query;, +        assertThat(q.getClauses().length, greaterThan(i));, +        assertThat(q.getClauses()[i].getQuery(), instanceOf(subqueryType));, +        return  (T)q.getClauses()[i].getQuery();, +    }, +, +++ b/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +    public static final float DEFAULT_BOOST = 1.f;, +    private float boost = DEFAULT_BOOST;, +++ b/src/main/java/org/elasticsearch/index/query/QueryStringQueryParser.java, +            if (qpSettings.boost() != QueryParserSettings.DEFAULT_BOOST) {, +                query.setBoost(query.getBoost() * qpSettings.boost());, +            }, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.Query;, +    public static <T extends Query> T assertBooleanSubQuery(Query query, Class<T> subqueryType, int i) {, +        assertThat(query, instanceOf(BooleanQuery.class));, +        BooleanQuery q = (BooleanQuery) query;, +        assertThat(q.getClauses().length, greaterThan(i));, +        assertThat(q.getClauses()[i].getQuery(), instanceOf(subqueryType));, +        return  (T)q.getClauses()[i].getQuery();, +    }, +, +++ b/src/test/java/org/elasticsearch/test/unit/index/query/SimpleIndexQueryParserTests.java, +import org.elasticsearch.index.query.QueryStringQueryBuilder;, +import static  org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +    public void testQueryStringBoostsBuilder() throws Exception {, +        IndexQueryParserService queryParser = queryParser();, +        QueryStringQueryBuilder builder = queryString("field:boosted^2");, +        Query parsedQuery = queryParser.parse(builder).query();, +        assertThat(parsedQuery, instanceOf(TermQuery.class));, +        assertThat(((TermQuery) parsedQuery).getTerm(), equalTo(new Term("field", "boosted")));, +        assertThat(parsedQuery.getBoost(), equalTo(2.0f));, +        builder.boost(2.0f);, +        parsedQuery = queryParser.parse(builder).query();, +        assertThat(parsedQuery.getBoost(), equalTo(4.0f));, +        , +        builder = queryString("((field:boosted^2) AND (field:foo^1.5))^3");, +        parsedQuery = queryParser.parse(builder).query();, +        assertThat(parsedQuery, instanceOf(BooleanQuery.class));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 0).getTerm(), equalTo(new Term("field", "boosted")));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 0).getBoost(), equalTo(2.0f));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 1).getTerm(), equalTo(new Term("field", "foo")));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 1).getBoost(), equalTo(1.5f));, +        assertThat(parsedQuery.getBoost(), equalTo(3.0f));, +        builder.boost(2.0f);, +        parsedQuery = queryParser.parse(builder).query();, +        assertThat(parsedQuery.getBoost(), equalTo(6.0f));, +    }, +    , +    @Test, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 0).getTerm(), equalTo(new Term("content", "test")));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 1).getTerm(), equalTo(new Term("name", "test")));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 0).getTerm(), equalTo(new Term("content", "test")));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 1).getTerm(), equalTo(new Term("name", "test")));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 0).getTerm(), equalTo(new Term("name.first", "test")));, +        assertThat(assertBooleanSubQuery(parsedQuery, TermQuery.class, 1).getTerm(), equalTo(new Term("name.last", "test")));]