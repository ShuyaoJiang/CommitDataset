[+++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +                } else if (context.getParseFieldMatcher().match(currentFieldName, RESCORE_FIELD)) {, +                    rescoreBuilders = new ArrayList<>();, +                    rescoreBuilders.add(RescoreBuilder.parseFromXContent(context));, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +                } else if (context.getParseFieldMatcher().match(currentFieldName, RESCORE_FIELD)) {, +                    rescoreBuilders = new ArrayList<>();, +                    rescoreBuilders.add(RescoreBuilder.parseFromXContent(context));, +++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java, +import org.elasticsearch.search.rescore.QueryRescorerBuilder;, +    /**, +     * test that we can parse the `rescore` element either as single object or as array, +     */, +    public void testParseRescore() throws IOException {, +        {, +            String restContent = "{\n" +, +                "    \"query\" : {\n" +, +                "        \"match\": { \"content\": { \"query\": \"foo bar\" }}\n" +, +                "     },\n" +, +                "    \"rescore\": {" +, +                "        \"window_size\": 50,\n" +, +                "        \"query\": {\n" +, +                "            \"rescore_query\" : {\n" +, +                "                \"match\": { \"content\": { \"query\": \"baz\" } }\n" +, +                "            }\n" +, +                "        }\n" +, +                "    }\n" +, +                "}\n";, +            try (XContentParser parser = XContentFactory.xContent(restContent).createParser(restContent)) {, +                SearchSourceBuilder searchSourceBuilder = SearchSourceBuilder.fromXContent(createParseContext(parser),, +                        aggParsers, suggesters);, +                assertEquals(1, searchSourceBuilder.rescores().size());, +                assertEquals(new QueryRescorerBuilder(QueryBuilders.matchQuery("content", "baz")).windowSize(50),, +                        searchSourceBuilder.rescores().get(0));, +            }, +        }, +, +        {, +            String restContent = "{\n" +, +                "    \"query\" : {\n" +, +                "        \"match\": { \"content\": { \"query\": \"foo bar\" }}\n" +, +                "     },\n" +, +                "    \"rescore\": [ {" +, +                "        \"window_size\": 50,\n" +, +                "        \"query\": {\n" +, +                "            \"rescore_query\" : {\n" +, +                "                \"match\": { \"content\": { \"query\": \"baz\" } }\n" +, +                "            }\n" +, +                "        }\n" +, +                "    } ]\n" +, +                "}\n";, +            try (XContentParser parser = XContentFactory.xContent(restContent).createParser(restContent)) {, +                SearchSourceBuilder searchSourceBuilder = SearchSourceBuilder.fromXContent(createParseContext(parser),, +                        aggParsers, suggesters);, +                assertEquals(1, searchSourceBuilder.rescores().size());, +                assertEquals(new QueryRescorerBuilder(QueryBuilders.matchQuery("content", "baz")).windowSize(50),, +                        searchSourceBuilder.rescores().get(0));, +            }, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +                } else if (context.getParseFieldMatcher().match(currentFieldName, RESCORE_FIELD)) {, +                    rescoreBuilders = new ArrayList<>();, +                    rescoreBuilders.add(RescoreBuilder.parseFromXContent(context));, +++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java, +import org.elasticsearch.search.rescore.QueryRescorerBuilder;, +    /**, +     * test that we can parse the `rescore` element either as single object or as array, +     */, +    public void testParseRescore() throws IOException {, +        {, +            String restContent = "{\n" +, +                "    \"query\" : {\n" +, +                "        \"match\": { \"content\": { \"query\": \"foo bar\" }}\n" +, +                "     },\n" +, +                "    \"rescore\": {" +, +                "        \"window_size\": 50,\n" +, +                "        \"query\": {\n" +, +                "            \"rescore_query\" : {\n" +, +                "                \"match\": { \"content\": { \"query\": \"baz\" } }\n" +, +                "            }\n" +, +                "        }\n" +, +                "    }\n" +, +                "}\n";, +            try (XContentParser parser = XContentFactory.xContent(restContent).createParser(restContent)) {, +                SearchSourceBuilder searchSourceBuilder = SearchSourceBuilder.fromXContent(createParseContext(parser),, +                        aggParsers, suggesters);, +                assertEquals(1, searchSourceBuilder.rescores().size());, +                assertEquals(new QueryRescorerBuilder(QueryBuilders.matchQuery("content", "baz")).windowSize(50),, +                        searchSourceBuilder.rescores().get(0));, +            }, +        }, +, +        {, +            String restContent = "{\n" +, +                "    \"query\" : {\n" +, +                "        \"match\": { \"content\": { \"query\": \"foo bar\" }}\n" +, +                "     },\n" +, +                "    \"rescore\": [ {" +]