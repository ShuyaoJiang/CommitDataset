[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +        logger.warn("Unable to lock JVM Memory: error=" + errno + ",reason=" + errMsg + ". This can result in part of the JVM being swapped out.");, +                                "\t# allow user 'esuser' mlockall\n" +, +                                "\tesuser soft memlock unlimited\n" +, +                                "\tesuser hard memlock unlimited", +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +        logger.warn("Unable to lock JVM Memory: error=" + errno + ",reason=" + errMsg + ". This can result in part of the JVM being swapped out.");, +                                "\t# allow user 'esuser' mlockall\n" +, +                                "\tesuser soft memlock unlimited\n" +, +                                "\tesuser hard memlock unlimited", +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                modules.add(new PluginsModule(this.settings, pluginsService));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +        logger.warn("Unable to lock JVM Memory: error=" + errno + ",reason=" + errMsg + ". This can result in part of the JVM being swapped out.");, +                                "\t# allow user 'esuser' mlockall\n" +, +                                "\tesuser soft memlock unlimited\n" +, +                                "\tesuser hard memlock unlimited", +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                modules.add(new PluginsModule(this.settings, pluginsService));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +import com.google.common.base.Predicate;, +        return allSatisfyingPredicateShardsGrouped(indices, includeEmpty, includeRelocationTargets, ACTIVE_PREDICATE);, +        return allSatisfyingPredicateShardsGrouped(indices, includeEmpty, includeRelocationTargets, ASSIGNED_PREDICATE);, +    }, +, +    private static Predicate<ShardRouting> ACTIVE_PREDICATE = new Predicate<ShardRouting>() {, +        @Override, +        public boolean apply(ShardRouting shardRouting) {, +            return shardRouting.active();, +        }, +    };, +, +    private static Predicate<ShardRouting> ASSIGNED_PREDICATE = new Predicate<ShardRouting>() {, +        @Override, +        public boolean apply(ShardRouting shardRouting) {, +            return shardRouting.assignedToNode();, +        }, +    };, +, +    // TODO: replace with JDK 8 native java.util.function.Predicate, +    private GroupShardsIterator allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty, boolean includeRelocationTargets, Predicate<ShardRouting> predicate) {, +                    if (predicate.apply(shardRouting)) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +        logger.warn("Unable to lock JVM Memory: error=" + errno + ",reason=" + errMsg + ". This can result in part of the JVM being swapped out.");, +                                "\t# allow user 'esuser' mlockall\n" +, +                                "\tesuser soft memlock unlimited\n" +, +                                "\tesuser hard memlock unlimited", +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                modules.add(new PluginsModule(this.settings, pluginsService));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java, +import com.google.common.base.Predicate;, +        return allSatisfyingPredicateShardsGrouped(indices, includeEmpty, includeRelocationTargets, ACTIVE_PREDICATE);, +        return allSatisfyingPredicateShardsGrouped(indices, includeEmpty, includeRelocationTargets, ASSIGNED_PREDICATE);, +    }, +, +    private static Predicate<ShardRouting> ACTIVE_PREDICATE = new Predicate<ShardRouting>() {, +        @Override, +        public boolean apply(ShardRouting shardRouting) {, +            return shardRouting.active();, +        }, +    };, +, +    private static Predicate<ShardRouting> ASSIGNED_PREDICATE = new Predicate<ShardRouting>() {, +        @Override, +        public boolean apply(ShardRouting shardRouting) {, +            return shardRouting.assignedToNode();, +        }, +    };, +, +    // TODO: replace with JDK 8 native java.util.function.Predicate, +    private GroupShardsIterator allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty, boolean includeRelocationTargets, Predicate<ShardRouting> predicate) {, +                    if (predicate.apply(shardRouting)) {, +++ b/core/src/main/java/org/elasticsearch/common/inject/Modules.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.inject;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.settings.Settings;, +, +import java.lang.reflect.Constructor;, +]