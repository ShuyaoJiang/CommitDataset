[+++ b/core/src/test/java/org/elasticsearch/transport/ContextAndHeaderTransportIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.transport;, +, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.client.HttpClients;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionModule;, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;, +import org.elasticsearch.action.get.GetRequest;, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.percolate.PercolateResponse;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.action.termvectors.MultiTermVectorsRequest;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.http.HttpServerTransport;, +import org.elasticsearch.index.query.BoolQueryBuilder;, +import org.elasticsearch.index.query.GeoShapeQueryBuilder;, +import org.elasticsearch.index.query.MoreLikeThisQueryBuilder;, +import org.elasticsearch.index.query.MoreLikeThisQueryBuilder.Item;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.index.query.TermsQueryBuilder;, +import org.elasticsearch.indices.cache.query.terms.TermsLookup;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.rest.RestController;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.junit.After;, +import org.junit.Before;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.concurrent.CopyOnWriteArrayList;, +, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;, +import static org.elasticsearch.common.settings.Settings.settingsBuilder;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.node.Node.HTTP_ENABLED;, +import static org.elasticsearch.rest.RestStatus.OK;, +import static org.elasticsearch.test.ESIntegTestCase.Scope.SUITE;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.hasStatus;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.is;, +, +@ClusterScope(scope = SUITE), +public class ContextAndHeaderTransportIT extends ESIntegTestCase {, +    private static final List<RequestAndHeaders> requests =  new CopyOnWriteArrayList<>();, +    private String randomHeaderKey = randomAsciiOfLength(10);, +    private String randomHeaderValue = randomAsciiOfLength(20);, +    private String queryIndex = "query-" + randomAsciiOfLength(10).toLowerCase(Locale.ROOT);, +    private String lookupIndex = "lookup-" + randomAsciiOfLength(10).toLowerCase(Locale.ROOT);, +, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return settingsBuilder(), +            .put(super.nodeSettings(nodeOrdinal)), +            .put("script.indexed", "on"), +            .put(HTTP_ENABLED, true), +            .build();, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {]