[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferringBucketCollector.java, +    /**, +     * Unwrap an aggregator. Used for testing., +     */, +    public static Aggregator unwrap(Aggregator in) {, +        if (in instanceof WrappedAggregator) {, +            return ((WrappedAggregator) in).in;, +        }, +        return in;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferringBucketCollector.java, +    /**, +     * Unwrap an aggregator. Used for testing., +     */, +    public static Aggregator unwrap(Aggregator in) {, +        if (in instanceof WrappedAggregator) {, +            return ((WrappedAggregator) in).in;, +        }, +        return in;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java, +import org.elasticsearch.search.aggregations.bucket.DeferringBucketCollector;, +            when(queryShardContext.getForField(fieldType)).then(invocation -> fieldType.fielddataBuilder().build(, +                    indexSettings, fieldType, new IndexFieldDataCache.None(), circuitBreakerService, mock(MapperService.class)));, +        C a = createAggregator(builder, searcher, fieldTypes);, +        try {, +        } finally {, +            closeAgg(a);, +        agg = DeferringBucketCollector.unwrap(agg);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferringBucketCollector.java, +    /**, +     * Unwrap an aggregator. Used for testing., +     */, +    public static Aggregator unwrap(Aggregator in) {, +        if (in instanceof WrappedAggregator) {, +            return ((WrappedAggregator) in).in;, +        }, +        return in;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java, +import org.elasticsearch.search.aggregations.bucket.DeferringBucketCollector;, +            when(queryShardContext.getForField(fieldType)).then(invocation -> fieldType.fielddataBuilder().build(, +                    indexSettings, fieldType, new IndexFieldDataCache.None(), circuitBreakerService, mock(MapperService.class)));, +        C a = createAggregator(builder, searcher, fieldTypes);, +        try {, +        } finally {, +            closeAgg(a);, +        agg = DeferringBucketCollector.unwrap(agg);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/sampler/SamplerAggregatorTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations.bucket.sampler;, +, +import org.apache.lucene.analysis.standard.StandardAnalyzer;, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.SortedNumericDocValuesField;, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.RandomIndexWriter;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.TermQuery;, +import org.apache.lucene.store.Directory;, +import org.elasticsearch.index.analysis.AnalyzerScope;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.NumberFieldMapper;, +import org.elasticsearch.index.mapper.TextFieldMapper.TextFieldType;, +import org.elasticsearch.search.aggregations.AggregatorTestCase;, +import org.elasticsearch.search.aggregations.metrics.min.Min;, +import org.elasticsearch.search.aggregations.metrics.min.MinAggregationBuilder;, +, +import java.io.IOException;, +, +public class SamplerAggregatorTests extends AggregatorTestCase {, +    /**, +     * Uses the sampler aggregation to find the minimum value of a field out of the top 3 scoring documents in a search., +     */, +    public void testSampler() throws IOException {, +        TextFieldType textFieldType = new TextFieldType();]