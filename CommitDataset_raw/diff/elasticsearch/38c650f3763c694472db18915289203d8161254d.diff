[+++ b/docs/reference/ingest/ingest-node.asciidoc, +| `lang`                 | no        | "painless" | The scripting language, +One of `file`, `id`, `inline` options must be provided in order to properly reference a script to execute., +, +++ b/docs/reference/ingest/ingest-node.asciidoc, +| `lang`                 | no        | "painless" | The scripting language, +One of `file`, `id`, `inline` options must be provided in order to properly reference a script to execute., +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +    Script getScript() {, +        return script;, +    }, +, +            String lang = readOptionalStringProperty(TYPE, processorTag, config, "lang");, +++ b/docs/reference/ingest/ingest-node.asciidoc, +| `lang`                 | no        | "painless" | The scripting language, +One of `file`, `id`, `inline` options must be provided in order to properly reference a script to execute., +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +    Script getScript() {, +        return script;, +    }, +, +            String lang = readOptionalStringProperty(TYPE, processorTag, config, "lang");, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ScriptProcessorFactoryTests.java, +import org.elasticsearch.script.Script;, +import static org.hamcrest.Matchers.equalTo;, +    private static final Map<String, String> ingestScriptParamToType;, +    static {, +        Map<String, String> map = new HashMap<>();, +        map.put("id", "stored");, +        map.put("inline", "inline");, +        map.put("file", "file");, +        ingestScriptParamToType = Collections.unmodifiableMap(map);, +    }, +    public void testFactoryValidationWithDefaultLang() throws Exception {, +        Map<String, Object> configMap = new HashMap<>();, +        String randomType = randomFrom("id", "inline", "file");, +        configMap.put(randomType, "foo");, +        ScriptProcessor processor = factory.create(null, randomAsciiOfLength(10), configMap);, +        assertThat(processor.getScript().getLang(), equalTo(Script.DEFAULT_SCRIPT_LANG));, +        assertThat(processor.getScript().getType().toString(), equalTo(ingestScriptParamToType.get(randomType)));, +        assertThat(processor.getScript().getParams(), equalTo(Collections.emptyMap()));, +    }, +, +    public void testFactoryValidationWithParams() throws Exception {, +        Map<String, Object> configMap = new HashMap<>();, +        String randomType = randomFrom("id", "inline", "file");, +        Map<String, Object> randomParams = Collections.singletonMap(randomAsciiOfLength(10), randomAsciiOfLength(10));, +        configMap.put(randomType, "foo");, +        configMap.put("params", randomParams);, +        ScriptProcessor processor = factory.create(null, randomAsciiOfLength(10), configMap);, +        assertThat(processor.getScript().getLang(), equalTo(Script.DEFAULT_SCRIPT_LANG));, +        assertThat(processor.getScript().getType().toString(), equalTo(ingestScriptParamToType.get(randomType)));, +        assertThat(processor.getScript().getParams(), equalTo(randomParams));, +    }, +++ b/docs/reference/ingest/ingest-node.asciidoc, +| `lang`                 | no        | "painless" | The scripting language, +One of `file`, `id`, `inline` options must be provided in order to properly reference a script to execute., +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +    Script getScript() {, +        return script;, +    }, +, +            String lang = readOptionalStringProperty(TYPE, processorTag, config, "lang");, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ScriptProcessorFactoryTests.java, +import org.elasticsearch.script.Script;, +import static org.hamcrest.Matchers.equalTo;, +    private static final Map<String, String> ingestScriptParamToType;, +    static {, +        Map<String, String> map = new HashMap<>();, +        map.put("id", "stored");, +        map.put("inline", "inline");, +        map.put("file", "file");, +        ingestScriptParamToType = Collections.unmodifiableMap(map);, +    }, +    public void testFactoryValidationWithDefaultLang() throws Exception {, +        Map<String, Object> configMap = new HashMap<>();, +        String randomType = randomFrom("id", "inline", "file");, +        configMap.put(randomType, "foo");, +        ScriptProcessor processor = factory.create(null, randomAsciiOfLength(10), configMap);, +        assertThat(processor.getScript().getLang(), equalTo(Script.DEFAULT_SCRIPT_LANG));, +        assertThat(processor.getScript().getType().toString(), equalTo(ingestScriptParamToType.get(randomType)));, +        assertThat(processor.getScript().getParams(), equalTo(Collections.emptyMap()));, +    }, +, +    public void testFactoryValidationWithParams() throws Exception {, +        Map<String, Object> configMap = new HashMap<>();, +        String randomType = randomFrom("id", "inline", "file");, +        Map<String, Object> randomParams = Collections.singletonMap(randomAsciiOfLength(10), randomAsciiOfLength(10));, +        configMap.put(randomType, "foo");, +        configMap.put("params", randomParams);, +        ScriptProcessor processor = factory.create(null, randomAsciiOfLength(10), configMap);, +        assertThat(processor.getScript().getLang(), equalTo(Script.DEFAULT_SCRIPT_LANG));, +        assertThat(processor.getScript().getType().toString(), equalTo(ingestScriptParamToType.get(randomType)));, +        assertThat(processor.getScript().getParams(), equalTo(randomParams));, +    }, +++ b/qa/smoke-test-ingest-with-all-dependencies/src/test/resources/rest-api-spec/test/ingest/50_script_processor_using_painless.yaml]