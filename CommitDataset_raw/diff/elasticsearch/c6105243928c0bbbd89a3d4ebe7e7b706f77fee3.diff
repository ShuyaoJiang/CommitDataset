[+++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.script.groovy.GroovyScriptEngineService;, +        clusterDynamicSettings.addDynamicSetting(GroovyScriptEngineService.GROOVY_SCRIPT_BLACKLIST_PATCH);, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.script.groovy.GroovyScriptEngineService;, +        clusterDynamicSettings.addDynamicSetting(GroovyScriptEngineService.GROOVY_SCRIPT_BLACKLIST_PATCH);, +++ b/src/main/java/org/elasticsearch/script/ScriptModule.java, +            scriptsBinder.addBinding(entry.getKey()).to(entry.getValue()).asEagerSingleton();, +            scriptsBinder.addBinding(name).to(type).asEagerSingleton();, +            multibinder.addBinding().to(GroovyScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(MustacheScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(ExpressionScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(scriptEngine).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.script.groovy.GroovyScriptEngineService;, +        clusterDynamicSettings.addDynamicSetting(GroovyScriptEngineService.GROOVY_SCRIPT_BLACKLIST_PATCH);, +++ b/src/main/java/org/elasticsearch/script/ScriptModule.java, +            scriptsBinder.addBinding(entry.getKey()).to(entry.getValue()).asEagerSingleton();, +            scriptsBinder.addBinding(name).to(type).asEagerSingleton();, +            multibinder.addBinding().to(GroovyScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(MustacheScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(ExpressionScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(scriptEngine).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +import org.elasticsearch.script.groovy.GroovyScriptEngineService;, +import java.util.Arrays;, +    private final FileWatcher fileWatcher;, +    class ApplySettings implements NodeSettingsService.Listener {, +        @Override, +        public void onRefreshSettings(Settings settings) {, +            GroovyScriptEngineService engine = (GroovyScriptEngineService) ScriptService.this.scriptEngines.get("groovy");, +            String[] patches = settings.getAsArray(GroovyScriptEngineService.GROOVY_SCRIPT_BLACKLIST_PATCH, Strings.EMPTY_ARRAY);, +            if (Arrays.equals(patches, engine.blacklistAdditions()) == false) {, +                logger.info("updating [{}] from {} to {}", GroovyScriptEngineService.GROOVY_SCRIPT_BLACKLIST_PATCH,, +                        engine.blacklistAdditions(), patches);, +                engine.blacklistAdditions(patches);, +                engine.reloadConfig();, +                // Because the GroovyScriptEngineService knows nothing about the, +                // cache, we need to clear it here if the setting changes, +                ScriptService.this.clearCache();, +            }, +        }, +    }, +, +                         ResourceWatcherService resourceWatcherService, NodeSettingsService nodeSettingsService) throws IOException {, +        this.fileWatcher = new FileWatcher(scriptsDirectory);, +        nodeSettingsService.addListener(new ApplySettings());, +    /**, +     * Clear both the in memory and on disk compiled script caches. Files on, +     * disk will be treated as if they are new and recompiled., +     * */, +    public void clearCache() {, +        logger.debug("clearing script cache");, +        // Clear the in-memory script caches, +        this.cache.invalidateAll();, +        this.cache.cleanUp();, +        // Clear the cache of on-disk scripts, +        this.staticCache.clear();, +        // Clear the file watcher's state so it re-compiles on-disk scripts, +        this.fileWatcher.clearState();, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.script.groovy.GroovyScriptEngineService;, +        clusterDynamicSettings.addDynamicSetting(GroovyScriptEngineService.GROOVY_SCRIPT_BLACKLIST_PATCH);, +++ b/src/main/java/org/elasticsearch/script/ScriptModule.java, +            scriptsBinder.addBinding(entry.getKey()).to(entry.getValue()).asEagerSingleton();, +            scriptsBinder.addBinding(name).to(type).asEagerSingleton();, +            multibinder.addBinding().to(GroovyScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(MustacheScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(ExpressionScriptEngineService.class).asEagerSingleton();, +            multibinder.addBinding().to(scriptEngine).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +import org.elasticsearch.script.groovy.GroovyScriptEngineService;, +import java.util.Arrays;, +    private final FileWatcher fileWatcher;, +    class ApplySettings implements NodeSettingsService.Listener {, +        @Override, +        public void onRefreshSettings(Settings settings) {, +            GroovyScriptEngineService engine = (GroovyScriptEngineService) ScriptService.this.scriptEngines.get("groovy");, +            String[] patches = settings.getAsArray(GroovyScriptEngineService.GROOVY_SCRIPT_BLACKLIST_PATCH, Strings.EMPTY_ARRAY);, +            if (Arrays.equals(patches, engine.blacklistAdditions()) == false) {, +                logger.info("updating [{}] from {} to {}", GroovyScriptEngineService.GROOVY_SCRIPT_BLACKLIST_PATCH,, +                        engine.blacklistAdditions(), patches);, +                engine.blacklistAdditions(patches);, +                engine.reloadConfig();, +                // Because the GroovyScriptEngineService knows nothing about the, +                // cache, we need to clear it here if the setting changes, +                ScriptService.this.clearCache();, +            }, +        }, +    }, +, +                         ResourceWatcherService resourceWatcherService, NodeSettingsService nodeSettingsService) throws IOException {, +        this.fileWatcher = new FileWatcher(scriptsDirectory);, +        nodeSettingsService.addListener(new ApplySettings());, +    /**, +     * Clear both the in memory and on disk compiled script caches. Files on]