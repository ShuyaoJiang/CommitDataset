[+++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                    boolBuilder.adjustPureNegative(false);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                    boolBuilder.adjustPureNegative(false);, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +import org.apache.lucene.search.MatchAllDocsQuery;, +    private Boolean adjustPureNegative;, +, +    /**, +     * If a boolean query contains only negative ("must not") clauses should the, +     * BooleanQuery be enhanced with a {@link MatchAllDocsQuery} in order to act, +     * as a pure exclude. The default is <code>true</code>., +     */, +    public BoolQueryBuilder adjustPureNegative(boolean adjustPureNegative) {, +        this.adjustPureNegative = adjustPureNegative;, +        return this;, +    }, +, +        if (adjustPureNegative != null) {, +            builder.field("adjust_pure_negative", adjustPureNegative);, +        }, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                    boolBuilder.adjustPureNegative(false);, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +import org.apache.lucene.search.MatchAllDocsQuery;, +    private Boolean adjustPureNegative;, +, +    /**, +     * If a boolean query contains only negative ("must not") clauses should the, +     * BooleanQuery be enhanced with a {@link MatchAllDocsQuery} in order to act, +     * as a pure exclude. The default is <code>true</code>., +     */, +    public BoolQueryBuilder adjustPureNegative(boolean adjustPureNegative) {, +        this.adjustPureNegative = adjustPureNegative;, +        return this;, +    }, +, +        if (adjustPureNegative != null) {, +            builder.field("adjust_pure_negative", adjustPureNegative);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryParser.java, +        boolean adjustPureNegative = true;, +                } else if ("adjust_pure_negative".equals(currentFieldName) || "adjustPureNegative".equals(currentFieldName)) {, +                    adjustPureNegative = parser.booleanValue();, +        return optimizeQuery(adjustPureNegative ? fixNegativeQueryIfNeeded(query) : query);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                    boolBuilder.adjustPureNegative(false);, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +import org.apache.lucene.search.MatchAllDocsQuery;, +    private Boolean adjustPureNegative;, +, +    /**, +     * If a boolean query contains only negative ("must not") clauses should the, +     * BooleanQuery be enhanced with a {@link MatchAllDocsQuery} in order to act, +     * as a pure exclude. The default is <code>true</code>., +     */, +    public BoolQueryBuilder adjustPureNegative(boolean adjustPureNegative) {, +        this.adjustPureNegative = adjustPureNegative;, +        return this;, +    }, +, +        if (adjustPureNegative != null) {, +            builder.field("adjust_pure_negative", adjustPureNegative);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/BoolQueryParser.java, +        boolean adjustPureNegative = true;, +                } else if ("adjust_pure_negative".equals(currentFieldName) || "adjustPureNegative".equals(currentFieldName)) {, +                    adjustPureNegative = parser.booleanValue();, +        return optimizeQuery(adjustPureNegative ? fixNegativeQueryIfNeeded(query) : query);, +++ b/src/test/java/org/elasticsearch/test/integration/mlt/MoreLikeThisActionTests.java, +    , +    , +    @Test, +    public void testSimpleMoreLikeOnLongField() throws Exception {, +        logger.info("Creating index test");, +        createIndex("test");, +        logger.info("Running Cluster Health");, +        assertThat(ensureGreen(), equalTo(ClusterHealthStatus.GREEN));, +, +        logger.info("Indexing...");, +        client().index(indexRequest("test").type("type1").id("1").source(jsonBuilder().startObject().field("some_long", 1367484649580l).endObject())).actionGet();, +        client().index(indexRequest("test").type("type2").id("2").source(jsonBuilder().startObject().field("some_long", 0).endObject())).actionGet();, +        client().index(indexRequest("test").type("type1").id("3").source(jsonBuilder().startObject().field("some_long", -666).endObject())).actionGet();, +, +, +        client().admin().indices().refresh(refreshRequest()).actionGet();, +, +        logger.info("Running moreLikeThis");, +        SearchResponse mltResponse = client().moreLikeThis(moreLikeThisRequest("test").type("type1").id("1").minTermFreq(1).minDocFreq(1)).actionGet();, +        assertHitCount(mltResponse, 0l);, +    }]