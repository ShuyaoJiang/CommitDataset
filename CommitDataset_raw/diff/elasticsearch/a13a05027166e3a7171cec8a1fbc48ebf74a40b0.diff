[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +import org.elasticsearch.action.ActionListener;, +    protected synchronized void taskOperation(CancelTasksRequest request, CancellableTask cancellableTask,, +            ActionListener<TaskInfo> listener) {, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +import org.elasticsearch.action.ActionListener;, +    protected synchronized void taskOperation(CancelTasksRequest request, CancellableTask cancellableTask,, +            ActionListener<TaskInfo> listener) {, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener);, +                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +import org.elasticsearch.action.ActionListener;, +    protected synchronized void taskOperation(CancelTasksRequest request, CancellableTask cancellableTask,, +            ActionListener<TaskInfo> listener) {, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener);, +                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void taskOperation(ListTasksRequest request, Task task, ActionListener<TaskInfo> listener) {, +        listener.onResponse(task.taskInfo(clusterService.localNode().getId(), request.getDetailed()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +import org.elasticsearch.action.ActionListener;, +    protected synchronized void taskOperation(CancelTasksRequest request, CancellableTask cancellableTask,, +            ActionListener<TaskInfo> listener) {, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener);, +                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void taskOperation(ListTasksRequest request, Task task, ActionListener<TaskInfo> listener) {, +        listener.onResponse(task.taskInfo(clusterService.localNode().getId(), request.getDetailed()));, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/BaseTasksResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.tasks.TaskId;, +import java.util.stream.Stream;, +, +import static java.util.stream.Collectors.toList;, +import static org.elasticsearch.ExceptionsHelper.rethrowAndSuppress;, +    /**, +     * Rethrow task failures if there are any., +     */, +    public void rethrowFailures(String operationName) {, +        rethrowAndSuppress(Stream.concat(, +                    getNodeFailures().stream(),, +                    getTaskFailures().stream().map(f -> new ElasticsearchException(, +                            "{} of [{}] failed", f.getCause(), operationName, new TaskId(f.getNodeId(), f.getTaskId())))), +                .collect(toList()));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +import org.elasticsearch.action.ActionListener;, +    protected synchronized void taskOperation(CancelTasksRequest request, CancellableTask cancellableTask,, +            ActionListener<TaskInfo> listener) {, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +                listener.onResponse(cancellableTask.taskInfo(clusterService.localNode().getId(), false));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode().getId(), true), listener);, +                TaskInfo info = runningTask.taskInfo(clusterService.localNode().getId(), true);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void taskOperation(ListTasksRequest request, Task task, ActionListener<TaskInfo> listener) {, +        listener.onResponse(task.taskInfo(clusterService.localNode().getId(), request.getDetailed()));, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/BaseTasksResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.tasks.TaskId;, +import java.util.stream.Stream;, +, +import static java.util.stream.Collectors.toList;, +import static org.elasticsearch.ExceptionsHelper.rethrowAndSuppress;, +    /**, +     * Rethrow task failures if there are any., +     */, +    public void rethrowFailures(String operationName) {, +        rethrowAndSuppress(Stream.concat(, +                    getNodeFailures().stream(),, +                    getTaskFailures().stream().map(f -> new ElasticsearchException(, +                            "{} of [{}] failed", f.getCause(), operationName, new TaskId(f.getNodeId(), f.getTaskId())))), +                .collect(toList()));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/TasksRequestBuilder.java, +, +    /**, +     * Match all children of the provided task. , +     */, +    @SuppressWarnings("unchecked"), +    public final RequestBuilder setParentTaskId(TaskId taskId) {, +        request.setParentTaskId(taskId);, +        return (RequestBuilder) this;, +    }]