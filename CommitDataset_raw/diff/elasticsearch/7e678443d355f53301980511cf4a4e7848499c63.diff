[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.util.Map;, +    public static ObjectParser<ShrinkRequest, ParseFieldMatcherSupplier> PARSER =, +        new ObjectParser<>("shrink_request", null);, +    static {, +        PARSER.declareField((parser, request, parseFieldMatcherSupplier) ->, +                request.getShrinkIndexRequest().settings(parser.map()),, +            new ParseField("settings"), ObjectParser.ValueType.OBJECT);, +        PARSER.declareField((parser, request, parseFieldMatcherSupplier) ->, +                request.getShrinkIndexRequest().aliases(parser.map()),, +            new ParseField("aliases"), ObjectParser.ValueType.OBJECT);, +    }, +, +, +    public void source(BytesReference source) {, +        XContentType xContentType = XContentFactory.xContentType(source);, +        if (xContentType != null) {, +            try (XContentParser parser = XContentFactory.xContent(xContentType).createParser(source)) {, +                PARSER.parse(parser, this, () -> ParseFieldMatcher.EMPTY);, +            } catch (IOException e) {, +                throw new ElasticsearchParseException("failed to parse source for shrink index", e);, +            }, +        } else {, +            throw new ElasticsearchParseException("failed to parse content type for shrink index source");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.util.Map;, +    public static ObjectParser<ShrinkRequest, ParseFieldMatcherSupplier> PARSER =, +        new ObjectParser<>("shrink_request", null);, +    static {, +        PARSER.declareField((parser, request, parseFieldMatcherSupplier) ->, +                request.getShrinkIndexRequest().settings(parser.map()),, +            new ParseField("settings"), ObjectParser.ValueType.OBJECT);, +        PARSER.declareField((parser, request, parseFieldMatcherSupplier) ->, +                request.getShrinkIndexRequest().aliases(parser.map()),, +            new ParseField("aliases"), ObjectParser.ValueType.OBJECT);, +    }, +, +, +    public void source(BytesReference source) {, +        XContentType xContentType = XContentFactory.xContentType(source);, +        if (xContentType != null) {, +            try (XContentParser parser = XContentFactory.xContent(xContentType).createParser(source)) {, +                PARSER.parse(parser, this, () -> ParseFieldMatcher.EMPTY);, +            } catch (IOException e) {, +                throw new ElasticsearchParseException("failed to parse source for shrink index", e);, +            }, +        } else {, +            throw new ElasticsearchParseException("failed to parse content type for shrink index source");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestShrinkIndexAction.java, +            shrinkIndexRequest.source(request.content());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.util.Map;, +    public static ObjectParser<ShrinkRequest, ParseFieldMatcherSupplier> PARSER =, +        new ObjectParser<>("shrink_request", null);, +    static {, +        PARSER.declareField((parser, request, parseFieldMatcherSupplier) ->, +                request.getShrinkIndexRequest().settings(parser.map()),, +            new ParseField("settings"), ObjectParser.ValueType.OBJECT);, +        PARSER.declareField((parser, request, parseFieldMatcherSupplier) ->, +                request.getShrinkIndexRequest().aliases(parser.map()),, +            new ParseField("aliases"), ObjectParser.ValueType.OBJECT);, +    }, +, +, +    public void source(BytesReference source) {, +        XContentType xContentType = XContentFactory.xContentType(source);, +        if (xContentType != null) {, +            try (XContentParser parser = XContentFactory.xContent(xContentType).createParser(source)) {, +                PARSER.parse(parser, this, () -> ParseFieldMatcher.EMPTY);]