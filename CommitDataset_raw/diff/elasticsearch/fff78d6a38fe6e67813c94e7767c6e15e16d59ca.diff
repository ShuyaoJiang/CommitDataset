[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ScheduledExecutorService;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.SynchronousQueue;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, +        executors.put(Names.CACHED, build(Names.CACHED, "cached", groupSettings.get(Names.CACHED), settingsBuilder().put("keep_alive", "30s").build()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ScheduledExecutorService;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.SynchronousQueue;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, +        executors.put(Names.CACHED, build(Names.CACHED, "cached", groupSettings.get(Names.CACHED), settingsBuilder().put("keep_alive", "30s").build()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import org.elasticsearch.common.netty.channel.Channel;, +import org.elasticsearch.common.netty.channel.ChannelFuture;, +import org.elasticsearch.common.netty.channel.ChannelFutureListener;, +import org.elasticsearch.common.netty.channel.ChannelHandlerContext;, +import org.elasticsearch.common.netty.channel.ChannelPipeline;, +import org.elasticsearch.common.netty.channel.ChannelPipelineFactory;, +import org.elasticsearch.common.netty.channel.Channels;, +import org.elasticsearch.common.netty.channel.ExceptionEvent;, +import org.elasticsearch.transport.BindTransportException;, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.NodeNotConnectedException;, +import org.elasticsearch.transport.Transport;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportServiceAdapter;, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +            NodeChannels existing = connectedNodes.putIfAbsent(node, nodeChannels);, +            if (existing != null) {, +                // we are already connected to a node, close this ones, +                nodeChannels.close();, +            } else {, +            }, +]