[+++ b/docs/reference/search/profile.asciidoc, +                                  "name": "MultiBucketCollector: [[my_scoped_agg, my_global_agg]]",, +++ b/docs/reference/search/profile.asciidoc, +                                  "name": "MultiBucketCollector: [[my_scoped_agg, my_global_agg]]",, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    Collector collector = MultiBucketCollector.wrap(collectors);, +            BucketCollector globalsCollector = MultiBucketCollector.wrap(globals);, +++ b/docs/reference/search/profile.asciidoc, +                                  "name": "MultiBucketCollector: [[my_scoped_agg, my_global_agg]]",, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    Collector collector = MultiBucketCollector.wrap(collectors);, +            BucketCollector globalsCollector = MultiBucketCollector.wrap(globals);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +        collectableSubAggregators = MultiBucketCollector.wrap(collectors);, +++ b/docs/reference/search/profile.asciidoc, +                                  "name": "MultiBucketCollector: [[my_scoped_agg, my_global_agg]]",, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    Collector collector = MultiBucketCollector.wrap(collectors);, +            BucketCollector globalsCollector = MultiBucketCollector.wrap(globals);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +        collectableSubAggregators = MultiBucketCollector.wrap(collectors);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/BucketCollector.java, +++ b/docs/reference/search/profile.asciidoc, +                                  "name": "MultiBucketCollector: [[my_scoped_agg, my_global_agg]]",, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    Collector collector = MultiBucketCollector.wrap(collectors);, +            BucketCollector globalsCollector = MultiBucketCollector.wrap(globals);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +        collectableSubAggregators = MultiBucketCollector.wrap(collectors);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/BucketCollector.java, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/MultiBucketCollector.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations;, +, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.CollectionTerminatedException;, +import org.apache.lucene.search.LeafCollector;, +import org.apache.lucene.search.MultiCollector;, +import org.apache.lucene.search.ScoreCachingWrappingScorer;, +import org.apache.lucene.search.Scorer;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +/**, + * A {@link BucketCollector} which allows running a bucket collection with several, + * {@link BucketCollector}s. It is similar to the {@link MultiCollector} except that the, + * {@link #wrap} method filters out the {@link BucketCollector#NO_OP_COLLECTOR}s and not, + * the null ones., + */, +public class MultiBucketCollector extends BucketCollector {, +, +    /** See {@link #wrap(Iterable)}. */, +    public static BucketCollector wrap(BucketCollector... collectors) {, +        return wrap(Arrays.asList(collectors));, +    }, +, +    /**, +     * Wraps a list of {@link BucketCollector}s with a {@link MultiBucketCollector}. This, +     * method works as follows:, +     * <ul>, +     * <li>Filters out the {@link BucketCollector#NO_OP_COLLECTOR}s collectors, so they are not used, +     * during search time., +     * <li>If the input contains 1 real collector, it is returned., +     * <li>Otherwise the method returns a {@link MultiBucketCollector} which wraps the, +     * non-{@link BucketCollector#NO_OP_COLLECTOR} collectors., +     * </ul>, +     */, +    public static BucketCollector wrap(Iterable<? extends BucketCollector> collectors) {, +        // For the user's convenience, we allow NO_OP collectors to be passed., +        // However, to improve performance, these null collectors are found, +        // and dropped from the array we save for actual collection time., +        int n = 0;, +        for (BucketCollector c : collectors) {, +            if (c != NO_OP_COLLECTOR) {, +                n++;, +            }, +        }, +, +        if (n == 0) {]