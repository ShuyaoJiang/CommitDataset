[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusRequest;, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusResponse;, +import org.elasticsearch.client.indexlifecycle.OperationMode;, +import org.elasticsearch.client.indexlifecycle.StartILMRequest;, +import org.elasticsearch.client.indexlifecycle.StopILMRequest;, +import org.hamcrest.Matchers;, +import static org.hamcrest.Matchers.equalTo;, +, +    public void testStartStopStatus() throws Exception {, +        RestHighLevelClient client = highLevelClient();, +, +        stopILM(client);, +, +        // tag::ilm-status-request, +        LifecycleManagementStatusRequest request =, +            new LifecycleManagementStatusRequest();, +        // end::ilm-status-request, +, +        // Check that ILM has stopped, +        {, +            // tag::ilm-status-execute, +            LifecycleManagementStatusResponse response =, +                client.indexLifecycle(), +                    .lifecycleManagementStatus(request, RequestOptions.DEFAULT);, +            // end::ilm-status-execute, +, +            // tag::ilm-status-response, +            OperationMode operationMode = response.getOperationMode(); // <1>, +            // end::ilm-status-response, +, +            assertThat(operationMode, Matchers.either(equalTo(OperationMode.STOPPING)).or(equalTo(OperationMode.STOPPED)));, +        }, +, +        startILM(client);, +, +        // tag::ilm-status-execute-listener, +        ActionListener<LifecycleManagementStatusResponse> listener =, +            new ActionListener<LifecycleManagementStatusResponse>() {, +                @Override, +                public void onResponse(, +                        LifecycleManagementStatusResponse response) {, +                    OperationMode operationMode = response, +                        .getOperationMode(); // <1>, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    // <2>, +                }, +            };, +        // end::ilm-status-execute-listener, +, +        final CountDownLatch latch = new CountDownLatch(1);, +        listener = new LatchedActionListener<>(listener, latch);, +, +        // tag::ilm-status-execute-async, +        client.indexLifecycle().lifecycleManagementStatusAsync(request,, +            RequestOptions.DEFAULT, listener); // <1>, +        // end::ilm-status-execute-async, +        assertTrue(latch.await(30L, TimeUnit.SECONDS));, +, +        // Check that ILM is running again, +        LifecycleManagementStatusResponse response =, +            client.indexLifecycle(), +                .lifecycleManagementStatus(request, RequestOptions.DEFAULT);, +, +        OperationMode operationMode = response.getOperationMode();, +        assertEquals(OperationMode.RUNNING, operationMode);, +    }, +, +    private void stopILM(RestHighLevelClient client) throws IOException, InterruptedException {, +        // tag::ilm-stop-ilm-request, +        StopILMRequest request = new StopILMRequest();, +        // end::ilm-stop-ilm-request, +, +        // tag::ilm-stop-ilm-execute, +        AcknowledgedResponse response = client.indexLifecycle(), +            .stopILM(request, RequestOptions.DEFAULT);, +        // end::ilm-stop-ilm-execute, +, +        // tag::ilm-stop-ilm-response, +        boolean acknowledged = response.isAcknowledged(); // <1>, +        // end::ilm-stop-ilm-response, +        assertTrue(acknowledged);, +, +        // tag::ilm-stop-ilm-execute-listener, +        ActionListener<AcknowledgedResponse> listener =, +            new ActionListener<AcknowledgedResponse>() {, +                @Override, +                public void onResponse(AcknowledgedResponse response) {, +                    boolean acknowledged = response.isAcknowledged(); // <1>, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    // <2>, +                }, +            };, +        // end::ilm-stop-ilm-execute-listener]