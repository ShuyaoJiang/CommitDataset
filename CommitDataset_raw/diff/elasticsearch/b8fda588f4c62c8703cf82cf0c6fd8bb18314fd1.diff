[+++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +, +        @Override, +        public void checkCompatibility(MappedFieldType other, List<String> conflicts) {, +            super.checkCompatibility(other, conflicts);, +            TextFieldType tft = (TextFieldType) other;, +            if (Objects.equals(this.prefixFieldType, tft.prefixFieldType) == false) {, +                if (this.prefixFieldType == null) {, +                    conflicts.add("mapper [" + name(), +                        + "] has different [index_prefixes] settings, cannot change from disabled to enabled");, +                }, +                else if (tft.prefixFieldType == null) {, +                    conflicts.add("mapper [" + name(), +                        + "] has different [index_prefixes] settings, cannot change from enabled to disabled");, +                }, +                else {, +                    conflicts.add("mapper [" + name() + "] has different [index_prefixes] settings");, +                }, +            }, +        }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +, +        @Override, +        public void checkCompatibility(MappedFieldType other, List<String> conflicts) {, +            super.checkCompatibility(other, conflicts);, +            TextFieldType tft = (TextFieldType) other;, +            if (Objects.equals(this.prefixFieldType, tft.prefixFieldType) == false) {, +                if (this.prefixFieldType == null) {, +                    conflicts.add("mapper [" + name(), +                        + "] has different [index_prefixes] settings, cannot change from disabled to enabled");, +                }, +                else if (tft.prefixFieldType == null) {, +                    conflicts.add("mapper [" + name(), +                        + "] has different [index_prefixes] settings, cannot change from enabled to disabled");, +                }, +                else {, +                    conflicts.add("mapper [" + name() + "] has different [index_prefixes] settings");, +                }, +            }, +        }, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +, +        @Override, +        public void checkCompatibility(MappedFieldType other, List<String> conflicts) {, +            super.checkCompatibility(other, conflicts);, +            TextFieldType tft = (TextFieldType) other;, +            if (Objects.equals(this.prefixFieldType, tft.prefixFieldType) == false) {, +                if (this.prefixFieldType == null) {, +                    conflicts.add("mapper [" + name(), +                        + "] has different [index_prefixes] settings, cannot change from disabled to enabled");, +                }, +                else if (tft.prefixFieldType == null) {, +                    conflicts.add("mapper [" + name(), +                        + "] has different [index_prefixes] settings, cannot change from enabled to disabled");, +                }, +                else {, +                    conflicts.add("mapper [" + name() + "] has different [index_prefixes] settings");, +                }, +            }, +        }, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java, +import org.apache.lucene.search.TermInSetQuery;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +        addModifier(new Modifier("index_prefixes", false) {]