[+++ b/src/main/java/org/elasticsearch/alerts/actions/ActionModule.java, +import org.elasticsearch.alerts.actions.email.EmailSettingsService;, +        bind(EmailSettingsService.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/alerts/actions/ActionModule.java, +import org.elasticsearch.alerts.actions.email.EmailSettingsService;, +        bind(EmailSettingsService.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/alerts/actions/email/EmailAction.java, +public class EmailAction extends Action<EmailAction.Result> {, +    private final EmailSettingsService emailSettingsService;, +    protected EmailAction(ESLogger logger, EmailSettingsService emailSettingsService,, +        this.emailSettingsService = emailSettingsService;, +, +        final EmailSettingsService.EmailServiceConfig emailSettings = emailSettingsService.emailServiceConfig();, +, +        props.put("mail.smtp.host", emailSettings.host());, +        props.put("mail.smtp.port", emailSettings.port());, +        if (emailSettings.password() != null) {, +            if (emailSettings.username() != null) {, +                username = emailSettings.username();, +                username = emailSettings.defaultFromAddress();, +                            return new PasswordAuthentication(username, emailSettings.password());, +            String fromAddressToUse = emailSettings.defaultFromAddress();, +        private final EmailSettingsService emailSettingsService;, +        public Parser(Settings settings, EmailSettingsService emailSettingsService, StringTemplateUtils templateUtils) {, +            this.emailSettingsService = emailSettingsService;, +            return new EmailAction(logger, emailSettingsService, templateUtils, subjectTemplate,, +                    messageTemplate, fromAddress, addresses);, +++ b/src/main/java/org/elasticsearch/alerts/actions/ActionModule.java, +import org.elasticsearch.alerts.actions.email.EmailSettingsService;, +        bind(EmailSettingsService.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/alerts/actions/email/EmailAction.java, +public class EmailAction extends Action<EmailAction.Result> {, +    private final EmailSettingsService emailSettingsService;, +    protected EmailAction(ESLogger logger, EmailSettingsService emailSettingsService,, +        this.emailSettingsService = emailSettingsService;, +, +        final EmailSettingsService.EmailServiceConfig emailSettings = emailSettingsService.emailServiceConfig();, +, +        props.put("mail.smtp.host", emailSettings.host());, +        props.put("mail.smtp.port", emailSettings.port());, +        if (emailSettings.password() != null) {, +            if (emailSettings.username() != null) {, +                username = emailSettings.username();, +                username = emailSettings.defaultFromAddress();, +                            return new PasswordAuthentication(username, emailSettings.password());, +            String fromAddressToUse = emailSettings.defaultFromAddress();, +        private final EmailSettingsService emailSettingsService;, +        public Parser(Settings settings, EmailSettingsService emailSettingsService, StringTemplateUtils templateUtils) {, +            this.emailSettingsService = emailSettingsService;, +            return new EmailAction(logger, emailSettingsService, templateUtils, subjectTemplate,, +                    messageTemplate, fromAddress, addresses);, +++ b/src/main/java/org/elasticsearch/alerts/actions/email/EmailSettingsService.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.alerts.actions.email;, +, +import org.elasticsearch.cluster.settings.DynamicSettings;, +import org.elasticsearch.cluster.settings.Validator;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.node.settings.NodeSettingsService;, +, +/**, + */, +public class EmailSettingsService extends AbstractComponent implements NodeSettingsService.Listener {, +, +    static final String PORT_SETTING = "alerts.action.email.server.port";, +    static final String SERVER_SETTING = "alerts.action.email.server.name";, +    static final String FROM_SETTING = "alerts.action.email.from.address";, +    static final String USERNAME_SETTING = "alerts.action.email.from.username";, +    static final String PASSWORD_SETTING = "alerts.action.email.from.password";, +, +    private static final String DEFAULT_SERVER = "smtp.gmail.com";, +    private static final int DEFAULT_PORT = 578;, +, +    private volatile EmailServiceConfig emailServiceConfig = new EmailServiceConfig(DEFAULT_SERVER, DEFAULT_PORT, null, null, null);, +, +    @Inject, +    public EmailSettingsService(Settings settings, DynamicSettings dynamicSettings, NodeSettingsService nodeSettingsService) {, +        super(settings);, +        //TODO Add validators for hosts and email addresses, +        dynamicSettings.addDynamicSetting(PORT_SETTING, Validator.POSITIVE_INTEGER);, +        dynamicSettings.addDynamicSetting(SERVER_SETTING);, +        dynamicSettings.addDynamicSetting(FROM_SETTING);, +        dynamicSettings.addDynamicSetting(USERNAME_SETTING);, +        dynamicSettings.addDynamicSetting(PASSWORD_SETTING);, +, +        nodeSettingsService.addListener(this);, +, +        updateSettings(settings);, +, +    }, +, +    public EmailServiceConfig emailServiceConfig() {, +        return emailServiceConfig;, +    }]