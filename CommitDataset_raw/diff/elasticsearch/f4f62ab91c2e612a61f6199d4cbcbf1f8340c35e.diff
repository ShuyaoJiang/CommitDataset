[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    String clusterUUID;, +, +    public ClusterStatsResponse(long timestamp, ClusterName clusterName, String clusterUUID,, +                                List<ClusterStatsNodeResponse> nodes, List<FailedNodeException> failures) {, +        this.clusterUUID = clusterUUID;, +        clusterUUID = in.readString();, +        out.writeString(clusterUUID);, +        if (params.paramAsBoolean("output_uuid", false)) {, +            builder.field("uuid", clusterUUID);, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    String clusterUUID;, +, +    public ClusterStatsResponse(long timestamp, ClusterName clusterName, String clusterUUID,, +                                List<ClusterStatsNodeResponse> nodes, List<FailedNodeException> failures) {, +        this.clusterUUID = clusterUUID;, +        clusterUUID = in.readString();, +        out.writeString(clusterUUID);, +        if (params.paramAsBoolean("output_uuid", false)) {, +            builder.field("uuid", clusterUUID);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(System.currentTimeMillis(), clusterService.getClusterName(),, +            clusterService.state().metaData().clusterUUID(), responses, failures);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    String clusterUUID;, +, +    public ClusterStatsResponse(long timestamp, ClusterName clusterName, String clusterUUID,, +                                List<ClusterStatsNodeResponse> nodes, List<FailedNodeException> failures) {, +        this.clusterUUID = clusterUUID;, +        clusterUUID = in.readString();, +        out.writeString(clusterUUID);, +        if (params.paramAsBoolean("output_uuid", false)) {, +            builder.field("uuid", clusterUUID);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(System.currentTimeMillis(), clusterService.getClusterName(),, +            clusterService.state().metaData().clusterUUID(), responses, failures);, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +        if (versionType == VersionType.FORCE) {, +            validationException = addValidationError("version type [force] may no longer be used", validationException);, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    String clusterUUID;, +, +    public ClusterStatsResponse(long timestamp, ClusterName clusterName, String clusterUUID,, +                                List<ClusterStatsNodeResponse> nodes, List<FailedNodeException> failures) {, +        this.clusterUUID = clusterUUID;, +        clusterUUID = in.readString();, +        out.writeString(clusterUUID);, +        if (params.paramAsBoolean("output_uuid", false)) {, +            builder.field("uuid", clusterUUID);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(System.currentTimeMillis(), clusterService.getClusterName(),, +            clusterService.state().metaData().clusterUUID(), responses, failures);, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +        if (versionType == VersionType.FORCE) {, +            validationException = addValidationError("version type [force] may no longer be used", validationException);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +        if (versionType == VersionType.FORCE) {, +            validationException = addValidationError("version type [force] may no longer be used", validationException);, +        }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    String clusterUUID;, +, +    public ClusterStatsResponse(long timestamp, ClusterName clusterName, String clusterUUID,, +                                List<ClusterStatsNodeResponse> nodes, List<FailedNodeException> failures) {, +        this.clusterUUID = clusterUUID;, +        clusterUUID = in.readString();, +        out.writeString(clusterUUID);, +        if (params.paramAsBoolean("output_uuid", false)) {, +            builder.field("uuid", clusterUUID);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(System.currentTimeMillis(), clusterService.getClusterName(),, +            clusterService.state().metaData().clusterUUID(), responses, failures);, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +        if (versionType == VersionType.FORCE) {, +            validationException = addValidationError("version type [force] may no longer be used", validationException);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +        if (versionType == VersionType.FORCE) {, +            validationException = addValidationError("version type [force] may no longer be used", validationException);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        long updateVersion = getResult.getVersion();, +, +        if (request.versionType() != VersionType.INTERNAL) {, +            assert request.versionType() == VersionType.FORCE;]