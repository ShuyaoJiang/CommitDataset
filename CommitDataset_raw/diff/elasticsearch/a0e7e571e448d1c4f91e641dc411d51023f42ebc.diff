[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +            } else if (expected == Short.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, short.class);, +            } else if (expected == Integer.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, int.class);, +            } else if (expected == Long.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, long.class);, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, double.class);, +            if (expected == short.class && internal) {, +            } else if (expected == Integer.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, short.class, int.class);, +            } else if (expected == Long.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, short.class, long.class);, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, short.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, short.class, double.class);, +            if (expected == char.class && internal) {, +            } else if (expected == Integer.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, char.class, int.class);, +            } else if (expected == Long.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, char.class, long.class);, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, char.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, char.class, double.class);, +            if (expected == int.class && internal) {, +            } else if (expected == Long.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, int.class, long.class);, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, int.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, int.class, double.class);, +            if (expected == long.class && internal) {, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, long.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, long.class, double.class);, +            if (expected == float.class && internal) {, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, float.class, double.class);, +            if (expected == double.class && internal) {, +        if (, +                actual == def.class                             ||, +                (actual.isAssignableFrom(expected) && explicit), +        ) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +            } else if (expected == Short.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, short.class);, +            } else if (expected == Integer.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, int.class);, +            } else if (expected == Long.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, long.class);, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, byte.class, double.class);, +            if (expected == short.class && internal) {, +            } else if (expected == Integer.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, short.class, int.class);, +            } else if (expected == Long.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, short.class, long.class);, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, short.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, short.class, double.class);, +            if (expected == char.class && internal) {, +            } else if (expected == Integer.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, char.class, int.class);, +            } else if (expected == Long.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, char.class, long.class);, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, char.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, char.class, double.class);, +            if (expected == int.class && internal) {, +            } else if (expected == Long.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, int.class, long.class);, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, int.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, int.class, double.class);, +            if (expected == long.class && internal) {, +            } else if (expected == Float.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, long.class, float.class);, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, long.class, double.class);, +            if (expected == float.class && internal) {, +            } else if (expected == Double.class && internal) {, +                return PainlessCast.unboxOriginalTypeToBoxTargetType(explicit, float.class, double.class);, +            if (expected == double.class && internal) {, +        if (, +                actual == def.class                             ||, +                (actual.isAssignableFrom(expected) && explicit), +        ) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +            } else if (cast.unboxOriginalType != null && cast.boxTargetType != null) {]