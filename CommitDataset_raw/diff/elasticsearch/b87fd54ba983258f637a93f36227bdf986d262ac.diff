[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +                deleteIndexStore(reason, indexService.index(), indexSettings);, +    /**, +     * Deletes an index that is not assigned to this node. This method cleans up all disk folders relating to the index, +     * but does not deal with in-memory structures. For those call {@link #deleteIndex(Index, String)}, +     */, +    public void deleteUnassignedIndex(String reason, IndexMetaData metaData, ClusterState clusterState) {, +                    throw new IllegalStateException("Can't delete unassigned index store for [" + indexName + "] - it's still part of the cluster state [" + index.getIndexUUID() + "] [" + metaData.getIndexUUID() + "]");, +                deleteIndexStore(reason, metaData, clusterState);, +                logger.warn("[{}] failed to delete unassigned index (reason [{}])", e, metaData.getIndex(), reason);, +     *, +     * Package private for testing, +    void deleteIndexStore(String reason, IndexMetaData metaData, ClusterState clusterState) throws IOException {, +                    throw new IllegalStateException("Can't delete index store for [" + index.getName() + "] - it's still part of the " +, +                                                    "cluster state [" + idxMeta.getIndexUUID() + "] [" + metaData.getIndexUUID() + "], " +, +                                                    "we are master eligible, so will keep the index metadata even if no shards are left.");, +            deleteIndexStore(reason, indexSettings.getIndex(), indexSettings);, +    private void deleteIndexStore(String reason, Index index, IndexSettings indexSettings) throws IOException {, +            if (canDeleteIndexContents(index, indexSettings)) {, +                // its safe to delete all index metadata and shard data, +                canDeleteIndexContents(shardId.getIndex(), indexSettings)) {, +                    deleteIndexStore("no longer used", metaData, clusterState);, +     * This method returns true if the current node is allowed to delete the given index., +     * This is the case if the index is deleted in the metadata or there is no allocation, +     * on the local node and the index isn't on a shared file system., +    public boolean canDeleteIndexContents(Index index, IndexSettings indexSettings) {, +        // index contents can be deleted if the index is not on a shared file system,, +        // or if its on a shared file system but its an already closed index (so all, +        // its resources have already been relinquished), +        if (indexSettings.isOnSharedFilesystem() == false || indexSettings.getIndexMetaData().getState() == IndexMetaData.State.CLOSE) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +                deleteIndexStore(reason, indexService.index(), indexSettings);, +    /**, +     * Deletes an index that is not assigned to this node. This method cleans up all disk folders relating to the index, +     * but does not deal with in-memory structures. For those call {@link #deleteIndex(Index, String)}, +     */, +    public void deleteUnassignedIndex(String reason, IndexMetaData metaData, ClusterState clusterState) {, +                    throw new IllegalStateException("Can't delete unassigned index store for [" + indexName + "] - it's still part of the cluster state [" + index.getIndexUUID() + "] [" + metaData.getIndexUUID() + "]");, +                deleteIndexStore(reason, metaData, clusterState);, +                logger.warn("[{}] failed to delete unassigned index (reason [{}])", e, metaData.getIndex(), reason);, +     *, +     * Package private for testing, +    void deleteIndexStore(String reason, IndexMetaData metaData, ClusterState clusterState) throws IOException {, +                    throw new IllegalStateException("Can't delete index store for [" + index.getName() + "] - it's still part of the " +, +                                                    "cluster state [" + idxMeta.getIndexUUID() + "] [" + metaData.getIndexUUID() + "], " +, +                                                    "we are master eligible, so will keep the index metadata even if no shards are left.");, +            deleteIndexStore(reason, indexSettings.getIndex(), indexSettings);, +    private void deleteIndexStore(String reason, Index index, IndexSettings indexSettings) throws IOException {, +            if (canDeleteIndexContents(index, indexSettings)) {, +                // its safe to delete all index metadata and shard data, +                canDeleteIndexContents(shardId.getIndex(), indexSettings)) {, +                    deleteIndexStore("no longer used", metaData, clusterState);, +     * This method returns true if the current node is allowed to delete the given index., +     * This is the case if the index is deleted in the metadata or there is no allocation, +     * on the local node and the index isn't on a shared file system., +    public boolean canDeleteIndexContents(Index index, IndexSettings indexSettings) {, +        // index contents can be deleted if the index is not on a shared file system,, +        // or if its on a shared file system but its an already closed index (so all, +        // its resources have already been relinquished), +        if (indexSettings.isOnSharedFilesystem() == false || indexSettings.getIndexMetaData().getState() == IndexMetaData.State.CLOSE) {, +++ b/core/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                indicesService.deleteUnassignedIndex("closed index no longer part of the metadata", metaData, event.state());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +                deleteIndexStore(reason, indexService.index(), indexSettings);, +    /**, +     * Deletes an index that is not assigned to this node. This method cleans up all disk folders relating to the index, +     * but does not deal with in-memory structures. For those call {@link #deleteIndex(Index, String)}, +     */, +    public void deleteUnassignedIndex(String reason, IndexMetaData metaData, ClusterState clusterState) {, +                    throw new IllegalStateException("Can't delete unassigned index store for [" + indexName + "] - it's still part of the cluster state [" + index.getIndexUUID() + "] [" + metaData.getIndexUUID() + "]");, +                deleteIndexStore(reason, metaData, clusterState);, +                logger.warn("[{}] failed to delete unassigned index (reason [{}])", e, metaData.getIndex(), reason);, +     *, +     * Package private for testing, +    void deleteIndexStore(String reason, IndexMetaData metaData, ClusterState clusterState) throws IOException {, +                    throw new IllegalStateException("Can't delete index store for [" + index.getName() + "] - it's still part of the " +, +                                                    "cluster state [" + idxMeta.getIndexUUID() + "] [" + metaData.getIndexUUID() + "], " +, +                                                    "we are master eligible, so will keep the index metadata even if no shards are left.");, +            deleteIndexStore(reason, indexSettings.getIndex(), indexSettings);, +    private void deleteIndexStore(String reason, Index index, IndexSettings indexSettings) throws IOException {, +            if (canDeleteIndexContents(index, indexSettings)) {, +                // its safe to delete all index metadata and shard data, +                canDeleteIndexContents(shardId.getIndex(), indexSettings)) {, +                    deleteIndexStore("no longer used", metaData, clusterState);, +     * This method returns true if the current node is allowed to delete the given index., +     * This is the case if the index is deleted in the metadata or there is no allocation, +     * on the local node and the index isn't on a shared file system., +    public boolean canDeleteIndexContents(Index index, IndexSettings indexSettings) {, +        // index contents can be deleted if the index is not on a shared file system,, +        // or if its on a shared file system but its an already closed index (so all, +        // its resources have already been relinquished)]