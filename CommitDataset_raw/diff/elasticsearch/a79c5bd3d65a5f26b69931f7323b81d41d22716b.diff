[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalDateRange.java, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalDateRange.java, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalGeoDistance.java, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalDateRange.java, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalGeoDistance.java, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalRange.java, +import org.elasticsearch.Version;, +        protected final double from;, +        protected final double to;, +        private final long docCount;, +        private final InternalAggregations aggregations;, +        private final String key;, +                DocValueFormat format) {, +            this.keyed = keyed;, +            this.format = format;, +            this.key = key != null ? key : generateKey(from, to, format);, +        private static String generateKey(double from, double to, DocValueFormat format) {, +            StringBuilder builder = new StringBuilder(), +                .append(Double.isInfinite(from) ? "*" : format.format(from)), +                .append("-"), +                .append(Double.isInfinite(to) ? "*" : format.format(to));, +            return builder.toString();, +            if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                out.writeString(key);, +            } else {, +                out.writeOptionalString(key);, +            }, +            out.writeDouble(from);, +            out.writeDouble(to);, +            out.writeVLong(docCount);, +            aggregations.writeTo(out);, +        public R create(String name, List<B> ranges, DocValueFormat format, boolean keyed, List<PipelineAggregator> pipelineAggregators,, +            return (R) new InternalRange<B, R>(name, ranges, format, keyed, pipelineAggregators, metaData);, +                DocValueFormat format) {, +            return (B) new Bucket(key, from, to, docCount, aggregations, keyed, format);, +    private final List<B> ranges;, +    protected final DocValueFormat format;, +    protected final boolean keyed;, +            String key = in.getVersion().onOrAfter(Version.V_7_0_0_alpha1), +                ? in.readString(), +                : in.readOptionalString();, +            bucket.writeTo(out);]