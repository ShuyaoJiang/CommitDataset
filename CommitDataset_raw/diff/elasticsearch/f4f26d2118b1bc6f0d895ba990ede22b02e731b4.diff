[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +        queryFacets.add(new FacetQuery(name, query, null));, +        return this;, +    }, +, +    /**, +     * Adds a query facet (which results in a count facet returned) with an option to, +     * be global on the index or bounded by the search query., +     *, +     * @param name  The logical name of the facet, it will be returned under the name, +     * @param query The query facet, +     */, +    public SearchSourceFacetsBuilder facet(String name, JsonQueryBuilder query, boolean global) {, +        if (queryFacets == null) {, +            queryFacets = newArrayListWithCapacity(2);, +        }, +        queryFacets.add(new FacetQuery(name, query, global));, +                if (facetQuery.global() != null) {, +                    builder.field("global", facetQuery.global());, +                }, +        private final Boolean global;, +        private FacetQuery(String name, JsonQueryBuilder queryBuilder, Boolean global) {, +            this.global = global;, +, +        public Boolean global() {, +            return this.global;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +        queryFacets.add(new FacetQuery(name, query, null));, +        return this;, +    }, +, +    /**, +     * Adds a query facet (which results in a count facet returned) with an option to, +     * be global on the index or bounded by the search query., +     *, +     * @param name  The logical name of the facet, it will be returned under the name, +     * @param query The query facet, +     */, +    public SearchSourceFacetsBuilder facet(String name, JsonQueryBuilder query, boolean global) {, +        if (queryFacets == null) {, +            queryFacets = newArrayListWithCapacity(2);, +        }, +        queryFacets.add(new FacetQuery(name, query, global));, +                if (facetQuery.global() != null) {, +                    builder.field("global", facetQuery.global());, +                }, +        private final Boolean global;, +        private FacetQuery(String name, JsonQueryBuilder queryBuilder, Boolean global) {, +            this.global = global;, +, +        public Boolean global() {, +            return this.global;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/FacetsParseElement.java, + *      query : { ... },, + *      global : false, +        String topLevelFieldName = null;, +                topLevelFieldName = jp.getCurrentName();, +            } else if (token == JsonToken.VALUE_STRING) {, +                }, +            } else if (token == JsonToken.START_OBJECT) {, +                SearchContextFacets.Facet facet = null;, +                boolean global = false;, +                String facetFieldName = null;, +                while ((token = jp.nextToken()) != JsonToken.END_OBJECT) {, +                    if (token == JsonToken.FIELD_NAME) {, +                        facetFieldName = jp.getCurrentName();, +                    } else if (token == JsonToken.START_OBJECT) {, +                        if ("query".equals(facetFieldName)) {, +                            facet = new SearchContextFacets.QueryFacet(topLevelFieldName, facetQuery);, +                            queryFacets.add((SearchContextFacets.QueryFacet) facet);, +                    } else if (token == JsonToken.VALUE_TRUE) {, +                        if ("global".equals(facetFieldName)) {, +                            global = true;, +                    } else if (token == JsonToken.VALUE_NUMBER_INT) {, +                        global = jp.getIntValue() != 0;, +                    }, +                }, +                if (facet == null) {, +                    throw new SearchParseException(context, "No facet type found for [" + topLevelFieldName + "]");, +                }, +                facet.global(global);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +        queryFacets.add(new FacetQuery(name, query, null));, +        return this;, +    }, +, +    /**, +     * Adds a query facet (which results in a count facet returned) with an option to, +     * be global on the index or bounded by the search query., +     *, +     * @param name  The logical name of the facet, it will be returned under the name, +     * @param query The query facet, +     */, +    public SearchSourceFacetsBuilder facet(String name, JsonQueryBuilder query, boolean global) {, +        if (queryFacets == null) {, +            queryFacets = newArrayListWithCapacity(2);, +        }, +        queryFacets.add(new FacetQuery(name, query, global));]