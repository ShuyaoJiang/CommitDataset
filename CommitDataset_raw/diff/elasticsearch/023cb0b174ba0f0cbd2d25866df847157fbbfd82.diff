[+++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), e)));, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), e)));, +            BulkItemResponse bulkItemResponse = new BulkItemResponse(idx, "index", failure);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), e)));, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), e)));, +            BulkItemResponse bulkItemResponse = new BulkItemResponse(idx, "index", failure);, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        } else if ("weekyearWeek".equals(input)) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), e)));, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), e)));, +            BulkItemResponse bulkItemResponse = new BulkItemResponse(idx, "index", failure);, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        } else if ("weekyearWeek".equals(input)) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("dateOptionalTime||epoch_millis", Locale.ROOT);, +            // TODO MOVE ME OUTSIDE OF THIS SPACE?, +            if (Version.indexCreated(context.indexSettings()).before(Version.V_2_0_0)) {, +                boolean includesEpochFormatter = dateTimeFormatter.format().contains("epoch_");, +                if (!includesEpochFormatter) {, +                    String format = fieldType().timeUnit().equals(TimeUnit.SECONDS) ? "epoch_second" : "epoch_millis";, +                    fieldType().setDateTimeFormatter(Joda.forPattern(format + "||" + dateTimeFormatter.format()));, +                }, +            }, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), e)));, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), e)));, +            BulkItemResponse bulkItemResponse = new BulkItemResponse(idx, "index", failure);, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        } else if ("weekyearWeek".equals(input)) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("dateOptionalTime||epoch_millis", Locale.ROOT);, +            // TODO MOVE ME OUTSIDE OF THIS SPACE?, +            if (Version.indexCreated(context.indexSettings()).before(Version.V_2_0_0)) {, +                boolean includesEpochFormatter = dateTimeFormatter.format().contains("epoch_");, +                if (!includesEpochFormatter) {, +                    String format = fieldType().timeUnit().equals(TimeUnit.SECONDS) ? "epoch_second" : "epoch_millis";, +                    fieldType().setDateTimeFormatter(Joda.forPattern(format + "||" + dateTimeFormatter.format()));, +                }, +            }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +import org.elasticsearch.common.Explicit;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +import org.elasticsearch.index.mapper.core.NumberFieldMapper;, +    public static final String DEFAULT_DATE_TIME_FORMAT = "epoch_millis||dateOptionalTime";, +        public static final MappedFieldType PRE_20_FIELD_TYPE;, +        public static final TimestampFieldType FIELD_TYPE = new TimestampFieldType();, +            return new TimestampFieldMapper(fieldType, defaultFieldType, enabledState, path, defaultTimestamp, ignoreMissing, context.indexSettings());, +        if (includeDefaults || !fieldType().dateTimeFormatter().format().equals(Defaults.DATE_TIME_FORMATTER.format())) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), e)));, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), e)));, +            BulkItemResponse bulkItemResponse = new BulkItemResponse(idx, "index", failure);, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        } else if ("weekyearWeek".equals(input)) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("dateOptionalTime||epoch_millis", Locale.ROOT);, +            // TODO MOVE ME OUTSIDE OF THIS SPACE?, +            if (Version.indexCreated(context.indexSettings()).before(Version.V_2_0_0)) {, +                boolean includesEpochFormatter = dateTimeFormatter.format().contains("epoch_");, +                if (!includesEpochFormatter) {, +                    String format = fieldType().timeUnit().equals(TimeUnit.SECONDS) ? "epoch_second" : "epoch_millis";, +                    fieldType().setDateTimeFormatter(Joda.forPattern(format + "||" + dateTimeFormatter.format()));, +                }, +            }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +import org.elasticsearch.common.Explicit;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +import org.elasticsearch.index.mapper.core.NumberFieldMapper;, +    public static final String DEFAULT_DATE_TIME_FORMAT = "epoch_millis||dateOptionalTime";, +        public static final MappedFieldType PRE_20_FIELD_TYPE;, +        public static final TimestampFieldType FIELD_TYPE = new TimestampFieldType();, +            return new TimestampFieldMapper(fieldType, defaultFieldType, enabledState, path, defaultTimestamp, ignoreMissing, context.indexSettings());, +        if (includeDefaults || !fieldType().dateTimeFormatter().format().equals(Defaults.DATE_TIME_FORMATTER.format())) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/RootObjectMapper.java, +                        Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd"), +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.ElasticsearchException;]