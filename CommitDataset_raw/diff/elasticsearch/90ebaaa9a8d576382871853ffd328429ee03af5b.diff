[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.search.profile.ProfileResult;, +import org.elasticsearch.search.profile.ProfileShardResult;, +import org.elasticsearch.search.profile.aggregation.AggregationProfileShardResult;, +import org.elasticsearch.search.profile.query.CollectorResult;, +import org.elasticsearch.search.profile.query.QueryProfileShardResult;, +import static org.hamcrest.Matchers.equalTo;, +            assertSame(RestStatus.OK, bulkResponse.status());, +            assertSame(RestStatus.OK, bulkResponse.status());, +            assertSame(RestStatus.OK, bulkResponse.status());, +            assertSame(RestStatus.OK, bulkResponse.status());, +    public void testSearchRequestProfiling() throws IOException {, +        RestHighLevelClient client = highLevelClient();, +        {, +            IndexRequest request = new IndexRequest("posts", "doc", "1"), +                    .source(XContentType.JSON, "tags", "elasticsearch", "comments", 123);, +            request.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);, +            IndexResponse indexResponse = client.index(request);, +            assertSame(RestStatus.CREATED, indexResponse.status());, +        }, +        {, +            SearchRequest searchRequest = new SearchRequest();, +            // tag::search-request-profiling, +            SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +            searchSourceBuilder.profile(true);, +            // end::search-request-profiling, +            searchSourceBuilder.query(QueryBuilders.termQuery("tags", "elasticsearch"));, +            searchSourceBuilder.aggregation(AggregationBuilders.histogram("by_comments").field("comments").interval(100));, +            searchRequest.source(searchSourceBuilder);, +, +            SearchResponse searchResponse = client.search(searchRequest);, +            // tag::search-request-profiling-get, +            Map<String, ProfileShardResult> profilingResults = searchResponse.getProfileResults(); // <1>, +            for (Map.Entry<String, ProfileShardResult> profilingResult : profilingResults.entrySet()) {  // <2>, +                String key = profilingResult.getKey(); // <3>, +                ProfileShardResult profileShardResult = profilingResult.getValue(); // <4>, +            }, +            // end::search-request-profiling-get, +, +            ProfileShardResult profileShardResult = profilingResults.values().iterator().next();, +            assertNotNull(profileShardResult);, +, +            // tag::search-request-profiling-queries, +            List<QueryProfileShardResult> queryProfileShardResults = profileShardResult.getQueryProfileResults(); // <1>, +            for (QueryProfileShardResult queryProfileResult : queryProfileShardResults) { // <2>, +, +            }, +            // end::search-request-profiling-queries, +            assertThat(queryProfileShardResults.size(), equalTo(1));, +, +            for (QueryProfileShardResult queryProfileResult : queryProfileShardResults) {, +                // tag::search-request-profiling-queries-results, +                for (ProfileResult profileResult : queryProfileResult.getQueryResults()) { // <1>, +                    String queryName = profileResult.getQueryName(); // <2>, +                    long queryTimeInMillis = profileResult.getTime(); // <3>, +                    List<ProfileResult> profiledChildren = profileResult.getProfiledChildren(); // <4>, +                }, +                // end::search-request-profiling-queries-results, +, +                // tag::search-request-profiling-queries-collectors, +                CollectorResult collectorResult = queryProfileResult.getCollectorResult();  // <1>, +                String collectorName = collectorResult.getName();  // <2>, +                Long collectorTimeInMillis = collectorResult.getTime(); // <3>, +                List<CollectorResult> profiledChildren = collectorResult.getProfiledChildren(); // <4>, +                // end::search-request-profiling-queries-collectors, +            }, +, +            // tag::search-request-profiling-aggs, +            AggregationProfileShardResult aggsProfileResults = profileShardResult.getAggregationProfileResults(); // <1>, +            for (ProfileResult profileResult : aggsProfileResults.getProfileResults()) { // <2>, +                String aggName = profileResult.getQueryName(); // <3>, +                long aggTimeInMillis = profileResult.getTime(); // <4>, +                List<ProfileResult> profiledChildren = profileResult.getProfiledChildren(); // <5>, +            }, +            // end::search-request-profiling-aggs, +            assertThat(aggsProfileResults.getProfileResults().size(), equalTo(1));, +        }, +    }, +, +            assertSame(RestStatus.OK, bulkResponse.status());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.search.profile.ProfileResult;, +import org.elasticsearch.search.profile.ProfileShardResult;, +import org.elasticsearch.search.profile.aggregation.AggregationProfileShardResult;, +import org.elasticsearch.search.profile.query.CollectorResult;, +import org.elasticsearch.search.profile.query.QueryProfileShardResult;, +import static org.hamcrest.Matchers.equalTo;, +            assertSame(RestStatus.OK, bulkResponse.status());, +            assertSame(RestStatus.OK, bulkResponse.status());, +            assertSame(RestStatus.OK, bulkResponse.status());, +            assertSame(RestStatus.OK, bulkResponse.status());, +    public void testSearchRequestProfiling() throws IOException {, +        RestHighLevelClient client = highLevelClient();, +        {, +            IndexRequest request = new IndexRequest("posts", "doc", "1"), +                    .source(XContentType.JSON, "tags", "elasticsearch", "comments", 123);, +            request.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);, +            IndexResponse indexResponse = client.index(request);]