[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            /*, +             * We only want to append -XX:-OmitStackTraceInFastThrow if a flag for OmitStackTraceInFastThrow is not already included in, +             * tests.jvm.argline., +             */, +            final String testsJvmArgline = System.getProperty('tests.jvm.argline'), +            if (testsJvmArgline == null) {, +                argLine '-XX:-OmitStackTraceInFastThrow', +            } else if (testsJvmArgline.indexOf("OmitStackTraceInFastThrow") < 0) {, +                argLine testsJvmArgline.trim() + ' ' + '-XX:-OmitStackTraceInFastThrow', +            } else {, +                argLine testsJvmArgline.trim(), +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            /*, +             * We only want to append -XX:-OmitStackTraceInFastThrow if a flag for OmitStackTraceInFastThrow is not already included in, +             * tests.jvm.argline., +             */, +            final String testsJvmArgline = System.getProperty('tests.jvm.argline'), +            if (testsJvmArgline == null) {, +                argLine '-XX:-OmitStackTraceInFastThrow', +            } else if (testsJvmArgline.indexOf("OmitStackTraceInFastThrow") < 0) {, +                argLine testsJvmArgline.trim() + ' ' + '-XX:-OmitStackTraceInFastThrow', +            } else {, +                argLine testsJvmArgline.trim(), +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            /*, +             * We only want to append -XX:-OmitStackTraceInFastThrow if a flag for OmitStackTraceInFastThrow is not already included in, +             * tests.jvm.argline., +             */, +            final String testsJvmArgline = System.getProperty('tests.jvm.argline'), +            if (testsJvmArgline == null) {, +                argLine '-XX:-OmitStackTraceInFastThrow', +            } else if (testsJvmArgline.indexOf("OmitStackTraceInFastThrow") < 0) {, +                argLine testsJvmArgline.trim() + ' ' + '-XX:-OmitStackTraceInFastThrow', +            } else {, +                argLine testsJvmArgline.trim(), +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client.documentation;, +, +import org.apache.lucene.search.join.ScoreMode;, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.common.geo.ShapeRelation;, +import org.elasticsearch.common.geo.builders.CoordinatesBuilder;, +import org.elasticsearch.common.geo.builders.ShapeBuilders;, +import org.elasticsearch.common.unit.DistanceUnit;, +import org.elasticsearch.index.query.GeoShapeQueryBuilder;, +import org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;, +import org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder.FilterFunctionBuilder;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptType;, +import org.elasticsearch.test.ESTestCase;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static java.util.Collections.singletonMap;, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.boostingQuery;, +import static org.elasticsearch.index.query.QueryBuilders.commonTermsQuery;, +import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;, +import static org.elasticsearch.index.query.QueryBuilders.disMaxQuery;, +import static org.elasticsearch.index.query.QueryBuilders.existsQuery;, +import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;, +import static org.elasticsearch.index.query.QueryBuilders.fuzzyQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoBoundingBoxQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoDistanceQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoPolygonQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoShapeQuery;, +import static org.elasticsearch.index.query.QueryBuilders.hasChildQuery;, +import static org.elasticsearch.index.query.QueryBuilders.hasParentQuery;, +import static org.elasticsearch.index.query.QueryBuilders.idsQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchQuery;]