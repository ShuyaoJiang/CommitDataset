[+++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestBuilder.SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestBuilder.SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder;, +    public <T> SuggestRequestBuilder addSuggestion(SuggestionBuilder<T> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestBuilder.SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder;, +    public <T> SuggestRequestBuilder addSuggestion(SuggestionBuilder<T> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.unit.ByteSizeValue;, +    public static final Setting<Type> TYPE_SETTING = new Setting<>("cache.recycler.page.type", Type.CONCURRENT.name(), Type::parse, false, Setting.Scope.CLUSTER);, +    public static final Setting<ByteSizeValue> LIMIT_HEAP_SETTING  = Setting.byteSizeSetting("cache.recycler.page.limit.heap", "10%", false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_BYTES_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.bytes", 1d, 0d, false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_LONG_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.longs", 1d, 0d, false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_INT_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.ints", 1d, 0d, false, Setting.Scope.CLUSTER);, +    // object pages are less useful to us so we give them a lower weight by default, +    public static final Setting<Double> WEIGHT_OBJECTS_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.objects", 0.1d, 0d, false, Setting.Scope.CLUSTER);, +        final Type type = TYPE_SETTING .get(settings);, +        final long limit = LIMIT_HEAP_SETTING .get(settings).bytes();, +        final double bytesWeight = WEIGHT_BYTES_SETTING .get(settings);, +        final double intsWeight = WEIGHT_INT_SETTING .get(settings);, +        final double longsWeight = WEIGHT_LONG_SETTING .get(settings);, +        final double objectsWeight = WEIGHT_OBJECTS_SETTING .get(settings);, +    public enum Type {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestBuilder.SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder;, +    public <T> SuggestRequestBuilder addSuggestion(SuggestionBuilder<T> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.unit.ByteSizeValue;, +    public static final Setting<Type> TYPE_SETTING = new Setting<>("cache.recycler.page.type", Type.CONCURRENT.name(), Type::parse, false, Setting.Scope.CLUSTER);, +    public static final Setting<ByteSizeValue> LIMIT_HEAP_SETTING  = Setting.byteSizeSetting("cache.recycler.page.limit.heap", "10%", false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_BYTES_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.bytes", 1d, 0d, false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_LONG_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.longs", 1d, 0d, false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_INT_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.ints", 1d, 0d, false, Setting.Scope.CLUSTER);, +    // object pages are less useful to us so we give them a lower weight by default, +    public static final Setting<Double> WEIGHT_OBJECTS_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.objects", 0.1d, 0d, false, Setting.Scope.CLUSTER);, +        final Type type = TYPE_SETTING .get(settings);, +        final long limit = LIMIT_HEAP_SETTING .get(settings).bytes();, +        final double bytesWeight = WEIGHT_BYTES_SETTING .get(settings);, +        final double intsWeight = WEIGHT_INT_SETTING .get(settings);, +        final double longsWeight = WEIGHT_LONG_SETTING .get(settings);, +        final double objectsWeight = WEIGHT_OBJECTS_SETTING .get(settings);, +    public enum Type {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestBuilder.SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder;, +    public <T> SuggestRequestBuilder addSuggestion(SuggestionBuilder<T> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.unit.ByteSizeValue;, +    public static final Setting<Type> TYPE_SETTING = new Setting<>("cache.recycler.page.type", Type.CONCURRENT.name(), Type::parse, false, Setting.Scope.CLUSTER);, +    public static final Setting<ByteSizeValue> LIMIT_HEAP_SETTING  = Setting.byteSizeSetting("cache.recycler.page.limit.heap", "10%", false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_BYTES_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.bytes", 1d, 0d, false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_LONG_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.longs", 1d, 0d, false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_INT_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.ints", 1d, 0d, false, Setting.Scope.CLUSTER);, +    // object pages are less useful to us so we give them a lower weight by default, +    public static final Setting<Double> WEIGHT_OBJECTS_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.objects", 0.1d, 0d, false, Setting.Scope.CLUSTER);, +        final Type type = TYPE_SETTING .get(settings);, +        final long limit = LIMIT_HEAP_SETTING .get(settings).bytes();, +        final double bytesWeight = WEIGHT_BYTES_SETTING .get(settings);, +        final double intsWeight = WEIGHT_INT_SETTING .get(settings);, +        final double longsWeight = WEIGHT_LONG_SETTING .get(settings);, +        final double objectsWeight = WEIGHT_OBJECTS_SETTING .get(settings);, +    public enum Type {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestBuilder.SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder;, +    public <T> SuggestRequestBuilder addSuggestion(SuggestionBuilder<T> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.unit.ByteSizeValue;, +    public static final Setting<Type> TYPE_SETTING = new Setting<>("cache.recycler.page.type", Type.CONCURRENT.name(), Type::parse, false, Setting.Scope.CLUSTER);, +    public static final Setting<ByteSizeValue> LIMIT_HEAP_SETTING  = Setting.byteSizeSetting("cache.recycler.page.limit.heap", "10%", false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_BYTES_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.bytes", 1d, 0d, false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_LONG_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.longs", 1d, 0d, false, Setting.Scope.CLUSTER);, +    public static final Setting<Double> WEIGHT_INT_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.ints", 1d, 0d, false, Setting.Scope.CLUSTER);, +    // object pages are less useful to us so we give them a lower weight by default, +    public static final Setting<Double> WEIGHT_OBJECTS_SETTING  = Setting.doubleSetting("cache.recycler.page.weight.objects", 0.1d, 0d, false, Setting.Scope.CLUSTER);, +        final Type type = TYPE_SETTING .get(settings);, +        final long limit = LIMIT_HEAP_SETTING .get(settings).bytes();, +        final double bytesWeight = WEIGHT_BYTES_SETTING .get(settings);]