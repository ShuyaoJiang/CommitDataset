[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.analysis.HunspellService;, +import org.elasticsearch.indices.cache.request.IndicesRequestCache;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +import org.elasticsearch.indices.store.IndicesStore;, +        ScriptService.SCRIPT_CACHE_SIZE_SETTING,, +        IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +        IndicesFieldDataCache.INDICES_FIELDDATA_CACHE_SIZE_KEY,, +        IndicesRequestCache.INDICES_CACHE_QUERY_SIZE,, +        IndicesRequestCache.INDICES_CACHE_QUERY_EXPIRE,, +        HunspellService.HUNSPELL_LAZY_LOAD,, +        HunspellService.HUNSPELL_IGNORE_CASE,, +        HunspellService.HUNSPELL_DICTIONARY_OPTIONS,, +        IndicesStore.INDICES_STORE_DELETE_SHARD_TIMEOUT)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.analysis.HunspellService;, +import org.elasticsearch.indices.cache.request.IndicesRequestCache;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +import org.elasticsearch.indices.store.IndicesStore;, +        ScriptService.SCRIPT_CACHE_SIZE_SETTING,, +        IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +        IndicesFieldDataCache.INDICES_FIELDDATA_CACHE_SIZE_KEY,, +        IndicesRequestCache.INDICES_CACHE_QUERY_SIZE,, +        IndicesRequestCache.INDICES_CACHE_QUERY_EXPIRE,, +        HunspellService.HUNSPELL_LAZY_LOAD,, +        HunspellService.HUNSPELL_IGNORE_CASE,, +        HunspellService.HUNSPELL_DICTIONARY_OPTIONS,, +        IndicesStore.INDICES_STORE_DELETE_SHARD_TIMEOUT)));, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayService.java, +        this.expectedNodes = this.settings.getAsInt("gateway.expected_nodes", -1);, +        this.expectedDataNodes = this.settings.getAsInt("gateway.expected_data_nodes", -1);, +        this.expectedMasterNodes = this.settings.getAsInt("gateway.expected_master_nodes", -1);, +        TimeValue defaultRecoverAfterTime = null;, +        if (expectedNodes >= 0 || expectedDataNodes >= 0 || expectedMasterNodes >= 0) {, +            defaultRecoverAfterTime = DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET;, +, +        this.recoverAfterTime = this.settings.getAsTime("gateway.recover_after_time", defaultRecoverAfterTime);, +        this.recoverAfterNodes = this.settings.getAsInt("gateway.recover_after_nodes", -1);, +        this.recoverAfterDataNodes = this.settings.getAsInt("gateway.recover_after_data_nodes", -1);, +        this.recoverAfterMasterNodes = this.settings.getAsInt("gateway.recover_after_master_nodes", settings.getAsInt("discovery.zen.minimum_master_nodes", -1));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.analysis.HunspellService;, +import org.elasticsearch.indices.cache.request.IndicesRequestCache;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +import org.elasticsearch.indices.store.IndicesStore;, +        ScriptService.SCRIPT_CACHE_SIZE_SETTING,, +        IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +        IndicesFieldDataCache.INDICES_FIELDDATA_CACHE_SIZE_KEY,, +        IndicesRequestCache.INDICES_CACHE_QUERY_SIZE,, +        IndicesRequestCache.INDICES_CACHE_QUERY_EXPIRE,, +        HunspellService.HUNSPELL_LAZY_LOAD,, +        HunspellService.HUNSPELL_IGNORE_CASE,, +        HunspellService.HUNSPELL_DICTIONARY_OPTIONS,, +        IndicesStore.INDICES_STORE_DELETE_SHARD_TIMEOUT)));, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayService.java, +        this.expectedNodes = this.settings.getAsInt("gateway.expected_nodes", -1);, +        this.expectedDataNodes = this.settings.getAsInt("gateway.expected_data_nodes", -1);, +        this.expectedMasterNodes = this.settings.getAsInt("gateway.expected_master_nodes", -1);, +        TimeValue defaultRecoverAfterTime = null;, +        if (expectedNodes >= 0 || expectedDataNodes >= 0 || expectedMasterNodes >= 0) {, +            defaultRecoverAfterTime = DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET;, +, +        this.recoverAfterTime = this.settings.getAsTime("gateway.recover_after_time", defaultRecoverAfterTime);, +        this.recoverAfterNodes = this.settings.getAsInt("gateway.recover_after_nodes", -1);, +        this.recoverAfterDataNodes = this.settings.getAsInt("gateway.recover_after_data_nodes", -1);, +        this.recoverAfterMasterNodes = this.settings.getAsInt("gateway.recover_after_master_nodes", settings.getAsInt("discovery.zen.minimum_master_nodes", -1));, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/HunspellService.java, +import org.elasticsearch.common.settings.Setting;, +    public final static Setting<Boolean> HUNSPELL_LAZY_LOAD = Setting.boolSetting("indices.analysis.hunspell.dictionary.lazy", Boolean.FALSE, false, Setting.Scope.CLUSTER);, +    public final static Setting<Boolean> HUNSPELL_IGNORE_CASE = Setting.boolSetting("indices.analysis.hunspell.dictionary.ignore_case", Boolean.FALSE, false, Setting.Scope.CLUSTER);, +    public final static Setting<Settings> HUNSPELL_DICTIONARY_OPTIONS = Setting.groupSetting("indices.analysis.hunspell.dictionary.", false, Setting.Scope.CLUSTER);, +        this.defaultIgnoreCase = HUNSPELL_IGNORE_CASE.get(settings);, +        if (!HUNSPELL_LAZY_LOAD.get(settings)) {, +        Settings dictSettings = HUNSPELL_DICTIONARY_OPTIONS.get(nodeSettings);, +        nodeSettings = loadDictionarySettings(dicDir, dictSettings.getByPrefix(locale));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.analysis.HunspellService;, +import org.elasticsearch.indices.cache.request.IndicesRequestCache;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +import org.elasticsearch.indices.store.IndicesStore;, +        ScriptService.SCRIPT_CACHE_SIZE_SETTING,, +        IndicesFieldDataCache.INDICES_FIELDDATA_CLEAN_INTERVAL_SETTING,, +        IndicesFieldDataCache.INDICES_FIELDDATA_CACHE_SIZE_KEY,, +        IndicesRequestCache.INDICES_CACHE_QUERY_SIZE,, +        IndicesRequestCache.INDICES_CACHE_QUERY_EXPIRE,, +        HunspellService.HUNSPELL_LAZY_LOAD,, +        HunspellService.HUNSPELL_IGNORE_CASE,, +        HunspellService.HUNSPELL_DICTIONARY_OPTIONS,, +        IndicesStore.INDICES_STORE_DELETE_SHARD_TIMEOUT)));, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayService.java, +        this.expectedNodes = this.settings.getAsInt("gateway.expected_nodes", -1);, +        this.expectedDataNodes = this.settings.getAsInt("gateway.expected_data_nodes", -1);, +        this.expectedMasterNodes = this.settings.getAsInt("gateway.expected_master_nodes", -1);, +        TimeValue defaultRecoverAfterTime = null;, +        if (expectedNodes >= 0 || expectedDataNodes >= 0 || expectedMasterNodes >= 0) {, +            defaultRecoverAfterTime = DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET;, +, +        this.recoverAfterTime = this.settings.getAsTime("gateway.recover_after_time", defaultRecoverAfterTime);, +        this.recoverAfterNodes = this.settings.getAsInt("gateway.recover_after_nodes", -1);, +        this.recoverAfterDataNodes = this.settings.getAsInt("gateway.recover_after_data_nodes", -1);]