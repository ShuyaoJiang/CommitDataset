[+++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/job/RollupIndexer.java, +                .lt(maxBoundary), +                .format("epoch_millis");, +++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/job/RollupIndexer.java, +                .lt(maxBoundary), +                .format("epoch_millis");, +++ b/x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/job/RollupIndexerIndexingTests.java, +import org.elasticsearch.common.joda.DateMathParser;, +import org.elasticsearch.common.joda.Joda;, +                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second"))), +                    null, timeZone, new DateMathParser(Joda.forPattern(range.format())), queryShardContext);, +++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/job/RollupIndexer.java, +                .lt(maxBoundary), +                .format("epoch_millis");, +++ b/x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/job/RollupIndexerIndexingTests.java, +import org.elasticsearch.common.joda.DateMathParser;, +import org.elasticsearch.common.joda.Joda;, +                .dateTimeFormatter(Joda.forPattern(randomFrom("basic_date", "date_optional_time", "epoch_second"))), +                    null, timeZone, new DateMathParser(Joda.forPattern(range.format())), queryShardContext);, +++ b/x-pack/qa/multi-node/src/test/java/org/elasticsearch/multi_node/RollupIT.java, +import org.apache.http.entity.ContentType;, +import org.apache.http.entity.StringEntity;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +        String dateFormat = "strict_date_optional_time";, +, +        // create the test-index index, +        try (XContentBuilder builder = jsonBuilder()) {, +            builder.startObject();, +            {, +                builder.startObject("mappings").startObject("_doc"), +                    .startObject("properties"), +                    .startObject("timestamp"), +                    .field("type", "date"), +                    .field("format", dateFormat), +                    .endObject(), +                    .startObject("value"), +                    .field("type", "integer"), +                    .endObject(), +                    .endObject(), +                    .endObject().endObject();, +            }, +            builder.endObject();, +            final StringEntity entity = new StringEntity(Strings.toString(builder), ContentType.APPLICATION_JSON);, +            Request req = new Request("PUT", "rollup-docs");, +            req.setEntity(entity);, +            client().performRequest(req);, +        }, +, +, +        int pageSize = randomIntBetween(2, 50);, +            + "\"cron\":\"*/1 * * * * ?\","             // fast cron so test runs quickly, +            + "\"page_size\":" + pageSize + ",", +            "        \"interval\": \"1h\",\n" +, +            "        \"format\": \"date_time\"\n" +]