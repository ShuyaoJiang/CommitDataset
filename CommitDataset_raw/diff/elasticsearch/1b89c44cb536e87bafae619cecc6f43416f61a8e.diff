[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/PipelineAggregatorFactory.java, +        if (!overrideBucketsPath() && bucketsPaths != null) {, +    /**, +     * @return <code>true</code> if the {@link PipelineAggregatorFactory}, +     *         overrides the XContent rendering of the bucketPath option., +     */, +    protected boolean overrideBucketsPath() {, +        return false;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/PipelineAggregatorFactory.java, +        if (!overrideBucketsPath() && bucketsPaths != null) {, +    /**, +     * @return <code>true</code> if the {@link PipelineAggregatorFactory}, +     *         overrides the XContent rendering of the bucketPath option., +     */, +    protected boolean overrideBucketsPath() {, +        return false;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketscript/BucketScriptParser.java, +import java.util.Collections;, +        GapPolicy gapPolicy = null;, +        BucketScriptPipelineAggregator.Factory factory = new BucketScriptPipelineAggregator.Factory(reducerName, bucketsPathsMap, script);, +            factory.format(format);, +        }, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +        return factory;, +        return new BucketScriptPipelineAggregator.Factory(null, Collections.emptyMap(), null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/PipelineAggregatorFactory.java, +        if (!overrideBucketsPath() && bucketsPaths != null) {, +    /**, +     * @return <code>true</code> if the {@link PipelineAggregatorFactory}, +     *         overrides the XContent rendering of the bucketPath option., +     */, +    protected boolean overrideBucketsPath() {, +        return false;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketscript/BucketScriptParser.java, +import java.util.Collections;, +        GapPolicy gapPolicy = null;, +        BucketScriptPipelineAggregator.Factory factory = new BucketScriptPipelineAggregator.Factory(reducerName, bucketsPathsMap, script);, +            factory.format(format);, +        }, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +        return factory;, +        return new BucketScriptPipelineAggregator.Factory(null, Collections.emptyMap(), null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketscript/BucketScriptPipelineAggregator.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.script.Script.ScriptField;, +import org.elasticsearch.search.aggregations.support.format.ValueFormat;, +import java.util.Map.Entry;, +import java.util.Objects;, +        private final Script script;, +        private final Map<String, String> bucketsPathsMap;, +        private String format = null;, +        private GapPolicy gapPolicy = GapPolicy.SKIP;, +        public Factory(String name, Map<String, String> bucketsPathsMap, Script script) {, +        }, +, +        /**, +         * Sets the format to use on the output of this aggregation., +         */, +        public void format(String format) {, +            this.format = format;, +        }, +, +        /**, +         * Gets the format to use on the output of this aggregation., +         */, +        public String format() {, +            return format;, +        }, +, +        protected ValueFormatter formatter() {, +            if (format != null) {, +                return ValueFormat.Patternable.Number.format(format).formatter();, +            } else {, +                return ValueFormatter.RAW;, +            }, +        }, +, +        /**, +         * Sets the gap policy to use for this aggregation., +         */, +        public void gapPolicy(GapPolicy gapPolicy) {, +        /**, +         * Gets the gap policy to use for this aggregation., +         */, +        public GapPolicy gapPolicy() {, +            return gapPolicy;, +        }, +, +            return new BucketScriptPipelineAggregator(name, bucketsPathsMap, script, formatter(), gapPolicy, metaData);, +        }]