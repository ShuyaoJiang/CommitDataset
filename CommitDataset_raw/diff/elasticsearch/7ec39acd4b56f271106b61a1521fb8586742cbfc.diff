[+++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        Settings prefixSettings = getByPrefix(settingPrefix);, +        Map<String, Settings> groups = new HashMap<>();, +        for (String groupName : prefixSettings.names()) {, +            Settings groupSettings = prefixSettings.getByPrefix(groupName + ".");, +            if (groupSettings.isEmpty()) {, +                    + settingPrefix + groupName + "] because of a missing '.'");, +            groups.put(groupName, groupSettings);, +, +        return Collections.unmodifiableMap(groups);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +        Settings prefixSettings = getByPrefix(settingPrefix);, +        Map<String, Settings> groups = new HashMap<>();, +        for (String groupName : prefixSettings.names()) {, +            Settings groupSettings = prefixSettings.getByPrefix(groupName + ".");, +            if (groupSettings.isEmpty()) {, +                    + settingPrefix + groupName + "] because of a missing '.'");, +            groups.put(groupName, groupSettings);, +, +        return Collections.unmodifiableMap(groups);, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java, +import static org.hamcrest.Matchers.containsInAnyOrder;, +    public void testGroupPrefix() {, +        MockSecureSettings secureSettings = new MockSecureSettings();, +        secureSettings.setString("test.key1.foo", "somethingsecure");, +        secureSettings.setString("test.key1.bar", "somethingsecure");, +        secureSettings.setString("test.key2.foo", "somethingsecure");, +        secureSettings.setString("test.key2.bog", "somethingsecure");, +        Settings.Builder builder = Settings.builder();, +        builder.put("test.key1.baz", "blah1");, +        builder.put("test.key1.other", "blah2");, +        builder.put("test.key2.baz", "blah3");, +        builder.put("test.key2.else", "blah4");, +        builder.setSecureSettings(secureSettings);, +        Settings settings = builder.build();, +        Map<String, Settings> groups = settings.getGroups("test");, +        assertEquals(2, groups.size());, +        Settings key1 = groups.get("key1");, +        assertNotNull(key1);, +        assertThat(key1.names(), containsInAnyOrder("foo", "bar", "baz", "other"));, +        Settings key2 = groups.get("key2");, +        assertNotNull(key2);, +        assertThat(key2.names(), containsInAnyOrder("foo", "bog", "baz", "else"));, +    }, +]