[+++ b/server/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +    String innerGetRaw(final Settings settings) {, +++ b/server/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +    String innerGetRaw(final Settings settings) {, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public final String getRaw(final Settings settings) {, +        return innerGetRaw(settings);, +    }, +, +    /**, +     * The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the, +     * actual settings value to raw strings., +     *, +     * @param settings the settings instance, +     * @return the raw string representation of the setting value, +     */, +    String innerGetRaw(final Settings settings) {, +        public String innerGetRaw(final Settings settings) {, +        public String innerGetRaw(final Settings settings) {, +        String innerGetRaw(final Settings settings) {, +++ b/server/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +    String innerGetRaw(final Settings settings) {, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public final String getRaw(final Settings settings) {, +        return innerGetRaw(settings);, +    }, +, +    /**, +     * The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the, +     * actual settings value to raw strings., +     *, +     * @param settings the settings instance, +     * @return the raw string representation of the setting value, +     */, +    String innerGetRaw(final Settings settings) {, +        public String innerGetRaw(final Settings settings) {, +        public String innerGetRaw(final Settings settings) {, +        String innerGetRaw(final Settings settings) {, +++ b/server/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +    public void testListSettingsDeprecated() {, +        final Setting<List<String>> deprecatedListSetting =, +                Setting.listSetting(, +                        "foo.deprecated",, +                        Collections.singletonList("foo.deprecated"),, +                        Function.identity(),, +                        Property.Deprecated,, +                        Property.NodeScope);, +        final Setting<List<String>> nonDeprecatedListSetting =, +                Setting.listSetting(, +                        "foo.non_deprecated", Collections.singletonList("foo.non_deprecated"), Function.identity(), Property.NodeScope);, +        final Settings settings = Settings.builder(), +                .put("foo.deprecated", "foo.deprecated1,foo.deprecated2"), +                .put("foo.deprecated", "foo.non_deprecated1,foo.non_deprecated2"), +                .build();, +        deprecatedListSetting.get(settings);, +        nonDeprecatedListSetting.get(settings);, +        assertSettingDeprecationsAndWarnings(new Setting[]{deprecatedListSetting});, +    }, +]