[+++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/TESTING.asciidoc, +to the current version. To run them all use:, +A specific version can be tested as well. For example, to test bwc with, +Tests are ran for versions that are not yet released but with which the current version will be compatible with., +These are automatically checked out and built from source., +See link:./buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java[VersionCollection], +and link:./distribution/bwc/build.gradle[distribution/bwc/build.gradle] , +for more information., +When running `./gradlew check`, minimal bwc checks are also run against compatible versions that are not yet released., +, +==== BWC Testing against a specific remote/branch, +==== Skip fetching latest, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/TESTING.asciidoc, +to the current version. To run them all use:, +A specific version can be tested as well. For example, to test bwc with, +Tests are ran for versions that are not yet released but with which the current version will be compatible with., +These are automatically checked out and built from source., +See link:./buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java[VersionCollection], +and link:./distribution/bwc/build.gradle[distribution/bwc/build.gradle] , +for more information., +When running `./gradlew check`, minimal bwc checks are also run against compatible versions that are not yet released., +, +==== BWC Testing against a specific remote/branch, +==== Skip fetching latest, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return new AllocationService(, +        return new AllocationDeciders(deciders);, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/TESTING.asciidoc, +to the current version. To run them all use:, +A specific version can be tested as well. For example, to test bwc with, +Tests are ran for versions that are not yet released but with which the current version will be compatible with., +These are automatically checked out and built from source., +See link:./buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java[VersionCollection], +and link:./distribution/bwc/build.gradle[distribution/bwc/build.gradle] , +for more information., +When running `./gradlew check`, minimal bwc checks are also run against compatible versions that are not yet released., +, +==== BWC Testing against a specific remote/branch, +==== Skip fetching latest, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return new AllocationService(, +        return new AllocationDeciders(deciders);, +++ b/build.gradle, +  version = VersionProperties.elasticsearch, +    // Read the list from maven central. , +    // Fetch the metadata an parse the xml into Version instances because it's more straight forward here , +    // rather than bwcVersion ( VersionCollection )., +      bwcVersions.compareToAuthoritative(, +              new XmlParser().parse(s), +                      .versioning.versions.version, +                      .collect { it.text() }.findAll { it ==~ /\d+\.\d+\.\d+/ }, +                      .collect { Version.fromString(it) }, +      ), +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +  // substitute unreleased versions with projects that check out and build locally, +  bwcVersions.forPreviousUnreleased { VersionCollection.UnreleasedVersionInfo unreleasedVersion ->, +    Version unreleased = unreleasedVersion.version, +    String snapshotProject = ":distribution:bwc:${unreleasedVersion.gradleProjectName}", +    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${unreleased}"] = snapshotProject, +    if (unreleased.onOrAfter('6.3.0')) {, +      ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch-oss:${unreleased}"] = snapshotProject, +      String artifactsHost = VersionProperties.elasticsearch.endsWith("-SNAPSHOT") ? "https://snapshots.elastic.co" : "https://artifacts.elastic.co", +    /*, +     * Remove assemble/dependenciesInfo on all qa projects because we don't, +     * need to publish artifacts for them., +     */, +    if (project.name.equals('qa') || project.path.contains(':qa:')) {, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/TESTING.asciidoc, +to the current version. To run them all use:, +A specific version can be tested as well. For example, to test bwc with, +Tests are ran for versions that are not yet released but with which the current version will be compatible with., +These are automatically checked out and built from source., +See link:./buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java[VersionCollection], +and link:./distribution/bwc/build.gradle[distribution/bwc/build.gradle] , +for more information., +When running `./gradlew check`, minimal bwc checks are also run against compatible versions that are not yet released., +, +==== BWC Testing against a specific remote/branch, +==== Skip fetching latest, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return new AllocationService(, +        return new AllocationDeciders(deciders);, +++ b/build.gradle, +  version = VersionProperties.elasticsearch, +    // Read the list from maven central. ]