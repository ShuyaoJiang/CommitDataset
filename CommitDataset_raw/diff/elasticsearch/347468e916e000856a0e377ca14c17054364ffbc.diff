[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java, +    private static final List<String> FIELD_NAMES_BLACKLIST = Arrays.asList("_size");, +            // Skip any of the blacklisted field names., +            if (!FIELD_NAMES_BLACKLIST.contains(name)) {, +                    , +                    // Skip internal fields (name starting with underscore and its type reported by field_caps starts with underscore, +                    // as well). A meta field named "_version", for example, has the type named "_version"., +                    if (name.startsWith("_") && fieldCap.getType().startsWith("_")) {, +                        continue;, +                    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java, +    private static final List<String> FIELD_NAMES_BLACKLIST = Arrays.asList("_size");, +            // Skip any of the blacklisted field names., +            if (!FIELD_NAMES_BLACKLIST.contains(name)) {, +                    , +                    // Skip internal fields (name starting with underscore and its type reported by field_caps starts with underscore, +                    // as well). A meta field named "_version", for example, has the type named "_version"., +                    if (name.startsWith("_") && fieldCap.getType().startsWith("_")) {, +                        continue;, +                    }, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolverTests.java, +    public void testMetaFieldsAreIgnored() throws Exception {, +        Map<String, Map<String, FieldCapabilities>> fieldCaps = new HashMap<>();, +        addFieldCaps(fieldCaps, "_version", "_version", false, false);, +        addFieldCaps(fieldCaps, "_meta_field", "integer", true, true);, +        addFieldCaps(fieldCaps, "_size", "integer", true, true);, +        addFieldCaps(fieldCaps, "text", "keyword", true, true);, +        , +        String wildcard = "*";, +        IndexResolution resolution = IndexResolver.mergedMapping(wildcard, fieldCaps);, +        assertTrue(resolution.isValid());, +, +        EsIndex esIndex = resolution.get();, +        assertEquals(wildcard, esIndex.name());, +        assertNull(esIndex.mapping().get("_version"));, +        assertNull(esIndex.mapping().get("_size"));, +        assertEquals(DataType.INTEGER, esIndex.mapping().get("_meta_field").getDataType());, +        assertEquals(DataType.KEYWORD, esIndex.mapping().get("text").getDataType());, +    }, +, +    , +    private void addFieldCaps(Map<String, Map<String, FieldCapabilities>> fieldCaps, String name, String type, boolean isSearchable,, +            boolean isAggregatable) {, +        Map<String, FieldCapabilities> cap = new HashMap<>();, +        cap.put(name, new FieldCapabilities(name, type, isSearchable, isAggregatable));, +        fieldCaps.put(name, cap);, +    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java, +    private static final List<String> FIELD_NAMES_BLACKLIST = Arrays.asList("_size");, +            // Skip any of the blacklisted field names., +            if (!FIELD_NAMES_BLACKLIST.contains(name)) {, +                    , +                    // Skip internal fields (name starting with underscore and its type reported by field_caps starts with underscore, +                    // as well). A meta field named "_version", for example, has the type named "_version"., +                    if (name.startsWith("_") && fieldCap.getType().startsWith("_")) {, +                        continue;, +                    }, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolverTests.java, +    public void testMetaFieldsAreIgnored() throws Exception {, +        Map<String, Map<String, FieldCapabilities>> fieldCaps = new HashMap<>();, +        addFieldCaps(fieldCaps, "_version", "_version", false, false);, +        addFieldCaps(fieldCaps, "_meta_field", "integer", true, true);, +        addFieldCaps(fieldCaps, "_size", "integer", true, true);, +        addFieldCaps(fieldCaps, "text", "keyword", true, true);, +        , +        String wildcard = "*";, +        IndexResolution resolution = IndexResolver.mergedMapping(wildcard, fieldCaps);, +        assertTrue(resolution.isValid());, +, +        EsIndex esIndex = resolution.get();, +        assertEquals(wildcard, esIndex.name());, +        assertNull(esIndex.mapping().get("_version"));, +        assertNull(esIndex.mapping().get("_size"));, +        assertEquals(DataType.INTEGER, esIndex.mapping().get("_meta_field").getDataType());, +        assertEquals(DataType.KEYWORD, esIndex.mapping().get("text").getDataType());, +    }, +, +    , +    private void addFieldCaps(Map<String, Map<String, FieldCapabilities>> fieldCaps, String name, String type, boolean isSearchable,, +            boolean isAggregatable) {, +        Map<String, FieldCapabilities> cap = new HashMap<>();, +        cap.put(name, new FieldCapabilities(name, type, isSearchable, isAggregatable));, +        fieldCaps.put(name, cap);, +    }, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/TypesTests.java, +        assertThat(mapping.size(), is(7));, +        assertThat(mapping.get("_meta_field").getDataType(), is(KEYWORD));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java, +    private static final List<String> FIELD_NAMES_BLACKLIST = Arrays.asList("_size");, +            // Skip any of the blacklisted field names., +            if (!FIELD_NAMES_BLACKLIST.contains(name)) {, +                    , +                    // Skip internal fields (name starting with underscore and its type reported by field_caps starts with underscore, +                    // as well). A meta field named "_version", for example, has the type named "_version"., +                    if (name.startsWith("_") && fieldCap.getType().startsWith("_")) {, +                        continue;, +                    }, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolverTests.java, +    public void testMetaFieldsAreIgnored() throws Exception {, +        Map<String, Map<String, FieldCapabilities>> fieldCaps = new HashMap<>();]