[+++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +        this.functionRegistry = new FunctionRegistry();, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +        this.functionRegistry = new FunctionRegistry();, +++ /dev/null, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +        this.functionRegistry = new FunctionRegistry();, +++ /dev/null, +++ /dev/null, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/PlanExecutor.java, +        this.functionRegistry = new FunctionRegistry();, +++ /dev/null, +++ /dev/null, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.common.Strings;, +, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +import org.elasticsearch.xpack.sql.expression.Expression;, +import org.elasticsearch.xpack.sql.expression.function.Score;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Avg;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Correlation;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Count;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Covariance;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Kurtosis;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.MatrixCount;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.MatrixMean;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.MatrixVariance;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Max;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Mean;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Min;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Percentile;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.PercentileRank;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Skewness;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.StddevPop;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.Sum;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.SumOfSquares;, +import org.elasticsearch.xpack.sql.expression.function.aggregate.VarPop;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DayOfMonth;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DayOfWeek;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DayOfYear;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.HourOfDay;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.MinuteOfDay;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.MinuteOfHour;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.MonthOfYear;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.SecondOfMinute;, +import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.Year;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.ACos;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.ASin;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.ATan;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Abs;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Cbrt;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Ceil;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Cos;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Cosh;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Degrees;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.E;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Exp;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Expm1;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Floor;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Log;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Log10;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Pi;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Radians;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Round;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Sin;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Sinh;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Sqrt;, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.Tan;, +import org.elasticsearch.xpack.sql.parser.ParsingException;, +import org.elasticsearch.xpack.sql.tree.Location;, +import org.elasticsearch.xpack.sql.util.StringUtils;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.function.BiFunction;, +import java.util.regex.Pattern;, +import static java.util.Collections.emptyList;, +import static java.util.Collections.unmodifiableList;, +import static java.util.stream.Collectors.toList;, +public class FunctionRegistry {, +    private static final List<FunctionDefinition> DEFAULT_FUNCTIONS = unmodifiableList(Arrays.asList(, +        // Aggregate functions, +            def(Avg.class, Avg::new),, +            def(Count.class, Count::new),, +            def(Max.class, Max::new),, +            def(Min.class, Min::new),, +            def(Sum.class, Sum::new),, +            // Statistics, +            def(Mean.class, Mean::new),, +            def(StddevPop.class, StddevPop::new),, +            def(VarPop.class, VarPop::new),, +            def(Percentile.class, Percentile::new),, +            def(PercentileRank.class, PercentileRank::new),, +            def(SumOfSquares.class, SumOfSquares::new),, +            // Matrix aggs, +            def(MatrixCount.class, MatrixCount::new),, +            def(MatrixMean.class, MatrixMean::new),, +            def(MatrixVariance.class, MatrixVariance::new),]