[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +     * @return null If no settings set for "settingsPrefix" then return <code>null</code>., +    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {, +        String filePath = settings.get(settingPrefix, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +     * @return null If no settings set for "settingsPrefix" then return <code>null</code>., +    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {, +        String filePath = settings.get(settingPrefix, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/SynonymTokenFilterFactory.java, +import java.io.StringReader;, +        Reader rulesReader = null;, +        if (settings.getAsArray("synonyms", null) != null) {, +            List<String> rules = Analysis.getWordList(env, settings, "synonyms");, +            StringBuilder sb = new StringBuilder();, +            for (String line : rules) {, +                sb.append(line).append(System.getProperty("line.separator"));, +            }, +            rulesReader = new StringReader(sb.toString());, +        } else if (settings.get("synonyms_path") != null) {, +            rulesReader = Analysis.getReaderFromFile(env, settings, "synonyms_path");, +        } else {, +, +            if ("wordnet".equalsIgnoreCase(settings.get("format"))) {, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +     * @return null If no settings set for "settingsPrefix" then return <code>null</code>., +    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {, +        String filePath = settings.get(settingPrefix, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/SynonymTokenFilterFactory.java, +import java.io.StringReader;, +        Reader rulesReader = null;, +        if (settings.getAsArray("synonyms", null) != null) {, +            List<String> rules = Analysis.getWordList(env, settings, "synonyms");, +            StringBuilder sb = new StringBuilder();, +            for (String line : rules) {, +                sb.append(line).append(System.getProperty("line.separator"));, +            }, +            rulesReader = new StringReader(sb.toString());, +        } else if (settings.get("synonyms_path") != null) {, +            rulesReader = Analysis.getReaderFromFile(env, settings, "synonyms_path");, +        } else {, +, +            if ("wordnet".equalsIgnoreCase(settings.get("format"))) {, +, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTest.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.analysis.synonyms;, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.TermAttribute;, +import org.elasticsearch.common.inject.Injector;, +import org.elasticsearch.common.inject.ModulesBuilder;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.lucene.all.AllEntries;, +import org.elasticsearch.common.lucene.all.AllTokenStream;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsModule;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.env.EnvironmentModule;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.IndexNameModule;, +import org.elasticsearch.index.analysis.AnalysisModule;, +import org.elasticsearch.index.analysis.AnalysisService;, +import org.elasticsearch.index.settings.IndexSettingsModule;, +import org.elasticsearch.indices.analysis.IndicesAnalysisModule;, +import org.elasticsearch.indices.analysis.IndicesAnalysisService;, +import org.hamcrest.MatcherAssert;, +import org.testng.annotations.Test;, +, +import java.io.IOException;, +, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +import static org.hamcrest.Matchers.*;, +, +/**, + * @author Lukas Vlcek, + */, +public class SynonymsAnalysisTest {, +, +    protected final ESLogger logger = Loggers.getLogger(getClass());]