[+++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.action.search.type.ScrollIdForNode;, +        final List<ScrollIdForNode[]> contexts = new ArrayList<>();, +                    ScrollIdForNode[] context = parseScrollId(parsedScrollId).getContext();, +                for (ScrollIdForNode[] context : contexts) {, +                    for (ScrollIdForNode target : context) {, +                        final DiscoveryNode node = nodes.get(target.getNode());, +                        searchServiceTransportAction.sendFreeContext(node, target.getScrollId(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.action.search.type.ScrollIdForNode;, +        final List<ScrollIdForNode[]> contexts = new ArrayList<>();, +                    ScrollIdForNode[] context = parseScrollId(parsedScrollId).getContext();, +                for (ScrollIdForNode[] context : contexts) {, +                    for (ScrollIdForNode target : context) {, +                        final DiscoveryNode node = nodes.get(target.getNode());, +                        searchServiceTransportAction.sendFreeContext(node, target.getScrollId(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ParsedScrollId.java, +    private final ScrollIdForNode[] context;, +    public ParsedScrollId(String source, String type, ScrollIdForNode[] context, Map<String, String> attributes) {, +    public ScrollIdForNode[] getContext() {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.action.search.type.ScrollIdForNode;, +        final List<ScrollIdForNode[]> contexts = new ArrayList<>();, +                    ScrollIdForNode[] context = parseScrollId(parsedScrollId).getContext();, +                for (ScrollIdForNode[] context : contexts) {, +                    for (ScrollIdForNode target : context) {, +                        final DiscoveryNode node = nodes.get(target.getNode());, +                        searchServiceTransportAction.sendFreeContext(node, target.getScrollId(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ParsedScrollId.java, +    private final ScrollIdForNode[] context;, +    public ParsedScrollId(String source, String type, ScrollIdForNode[] context, Map<String, String> attributes) {, +    public ScrollIdForNode[] getContext() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ScrollIdForNode.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.search.type;, +, +public class ScrollIdForNode {, +    private final String node;, +    private final long scrollId;, +, +    public ScrollIdForNode(String node, long scrollId) {, +        this.node = node;, +        this.scrollId = scrollId;, +    }, +, +    public String getNode() {, +        return node;, +    }, +, +    public long getScrollId() {, +        return scrollId;, +    }, +}, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.action.search.type.ScrollIdForNode;, +        final List<ScrollIdForNode[]> contexts = new ArrayList<>();, +                    ScrollIdForNode[] context = parseScrollId(parsedScrollId).getContext();, +                for (ScrollIdForNode[] context : contexts) {, +                    for (ScrollIdForNode target : context) {, +                        final DiscoveryNode node = nodes.get(target.getNode());, +                        searchServiceTransportAction.sendFreeContext(node, target.getScrollId(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ParsedScrollId.java, +    private final ScrollIdForNode[] context;, +    public ParsedScrollId(String source, String type, ScrollIdForNode[] context, Map<String, String> attributes) {, +    public ScrollIdForNode[] getContext() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ScrollIdForNode.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations]