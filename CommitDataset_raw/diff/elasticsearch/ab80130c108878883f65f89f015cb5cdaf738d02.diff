[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketscript/BucketScriptPipelineAggregator.java, +            boolean skipBucket = false;, +                if (GapPolicy.SKIP == gapPolicy && (value == null || Double.isNaN(value))) {, +                    skipBucket = true;, +                    break;, +                }, +            if (skipBucket) {, +                newBuckets.add(bucket);, +            } else {, +                        throw new AggregationExecutionException("series_arithmetic script for reducer [" + name(), +                                + "] must return a Number");, +                    aggs.add(new InternalSimpleValue(name(), ((Number) returned).doubleValue(), formatter,, +                            new ArrayList<PipelineAggregator>(), metaData()));, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/bucketscript/BucketScriptPipelineAggregator.java, +            boolean skipBucket = false;, +                if (GapPolicy.SKIP == gapPolicy && (value == null || Double.isNaN(value))) {, +                    skipBucket = true;, +                    break;, +                }, +            if (skipBucket) {, +                newBuckets.add(bucket);, +            } else {, +                        throw new AggregationExecutionException("series_arithmetic script for reducer [" + name(), +                                + "] must return a Number");, +                    aggs.add(new InternalSimpleValue(name(), ((Number) returned).doubleValue(), formatter,, +                            new ArrayList<PipelineAggregator>(), metaData()));, +        }, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/BucketScriptTests.java, +import static org.hamcrest.Matchers.nullValue;, +                assertThat(seriesArithmetic, nullValue());, +                assertThat(seriesArithmetic, nullValue());, +                assertThat(seriesArithmetic, nullValue());, +                assertThat(seriesArithmetic, nullValue());, +                assertThat(seriesArithmetic, nullValue());, +                                                new Script("my_script", ScriptType.INDEXED, null, null)))).execute().actionGet();, +                assertThat(seriesArithmetic, nullValue());, +                assertThat(seriesArithmetic, nullValue());]