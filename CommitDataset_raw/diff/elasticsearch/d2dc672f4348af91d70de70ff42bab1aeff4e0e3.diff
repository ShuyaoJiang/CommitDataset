[+++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +    public static final Settings EMPTY = new Builder().build();, +    private ImmutableMap<String, String> settings;, +    ImmutableSettings(Map<String, String> settings, ClassLoader classLoader) {, +    public String get(String[] settings) {, +        for (String setting : settings) {, +            String retVal = this.settings.get(setting);, +            if (retVal != null) {, +                return retVal;, +            }, +            retVal = this.settings.get(toCamelCase(setting));, +            if (retVal != null) {, +                return retVal;, +            }, +        }, +        return null;, +    }, +, +    @Override, +        String retVal = get(setting);, +        return retVal == null ? defaultValue : retVal;, +    }, +, +    @Override, +    public String get(String[] settings, String defaultValue) {, +        String retVal = get(settings);, +    public Float getAsFloat(String[] settings, Float defaultValue) throws SettingsException {, +        String sValue = get(settings);, +        if (sValue == null) {, +            return defaultValue;, +        }, +        try {, +            return Float.parseFloat(sValue);, +        } catch (NumberFormatException e) {, +            throw new SettingsException("Failed to parse float setting [" + Arrays.toString(settings) + "] with value [" + sValue + "]", e);, +        }, +    }, +, +    @Override, +    public Double getAsDouble(String[] settings, Double defaultValue) {, +        String sValue = get(settings);, +        if (sValue == null) {, +            return defaultValue;, +        }, +        try {, +            return Double.parseDouble(sValue);, +        } catch (NumberFormatException e) {, +            throw new SettingsException("Failed to parse double setting [" + Arrays.toString(settings) + "] with value [" + sValue + "]", e);, +        }, +    }, +, +, +    @Override, +    public Integer getAsInt(String[] settings, Integer defaultValue) {, +        String sValue = get(settings);, +        if (sValue == null) {, +            return defaultValue;, +        }, +        try {, +            return Integer.parseInt(sValue);, +        } catch (NumberFormatException e) {, +            throw new SettingsException("Failed to parse int setting [" + Arrays.toString(settings) + "] with value [" + sValue + "]", e);, +        }, +    }, +, +    @Override, +    public Long getAsLong(String[] settings, Long defaultValue) {, +        String sValue = get(settings);, +        if (sValue == null) {, +            return defaultValue;, +        }, +        try {, +            return Long.parseLong(sValue);, +        } catch (NumberFormatException e) {, +            throw new SettingsException("Failed to parse long setting [" + Arrays.toString(settings) + "] with value [" + sValue + "]", e);, +        }, +    }, +, +    @Override, +    public Boolean getAsBoolean(String[] settings, Boolean defaultValue) {, +        return Booleans.parseBoolean(get(settings), defaultValue);, +    }, +, +    @Override, +    public TimeValue getAsTime(String[] settings, TimeValue defaultValue) {, +        return parseTimeValue(get(settings), defaultValue);, +    }, +, +    @Override, +    public ByteSizeValue getAsBytesSize(String[] settings, ByteSizeValue defaultValue) throws SettingsException {, +        return parseBytesSizeValue(get(settings), defaultValue);, +    }, +, +    @Override, +    @Override, +    public SizeValue getAsSize(String[] settings, SizeValue defaultValue) throws SettingsException {, +        return parseSizeValue(get(settings), defaultValue);, +    }, +, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java]