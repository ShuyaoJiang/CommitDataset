[+++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionService.java, +            historyStore.start();, +            historyStore.stop();, +, +        WatchLockService.Lock lock = watchLockService.acquire(ctx.watch().name());, +        try {, +        } finally {, +            lock.release();, +        }, +            logger.info("Running [{}] [{}]", ctx.watch().name(), ctx.id());, +                logger.warn("Rejecting execution due to service is not started");, +                    logger.warn("failed to execute watch [{}] [{}]", e, watchRecord.name(), ctx.id());, +                        logger.error("failed to update watch record [{}] failure [{}] for [{}] [{}]", e2, watchRecord, ctx.watch().name(), ctx.id(), e.getMessage());, +                logger.info("Finished [{}] [{}]", ctx.watch().name(), ctx.id());, +                if (started()) {, +                    logger.error("failed to execute watch from SchedulerListener [{}]", e, name);, +                } else {, +                    logger.error("failed to execute watch from SchedulerListener [{}] after shutdown", e, name);, +                }, +++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionService.java, +            historyStore.start();, +            historyStore.stop();, +, +        WatchLockService.Lock lock = watchLockService.acquire(ctx.watch().name());, +        try {, +        } finally {, +            lock.release();, +        }, +            logger.info("Running [{}] [{}]", ctx.watch().name(), ctx.id());, +                logger.warn("Rejecting execution due to service is not started");, +                    logger.warn("failed to execute watch [{}] [{}]", e, watchRecord.name(), ctx.id());, +                        logger.error("failed to update watch record [{}] failure [{}] for [{}] [{}]", e2, watchRecord, ctx.watch().name(), ctx.id(), e.getMessage());, +                logger.info("Finished [{}] [{}]", ctx.watch().name(), ctx.id());, +                if (started()) {, +                    logger.error("failed to execute watch from SchedulerListener [{}]", e, name);, +                } else {, +                    logger.error("failed to execute watch from SchedulerListener [{}] after shutdown", e, name);, +                }, +++ b/src/main/java/org/elasticsearch/watcher/history/HistoryStore.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.watcher.WatcherException;, +import org.elasticsearch.watcher.support.TemplateUtils;, +import org.elasticsearch.watcher.support.init.proxy.ClientProxy;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReadWriteLock;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();, +    private final Lock putUpdateLock = readWriteLock.readLock();, +    private final Lock stopLock = readWriteLock.writeLock();, +    private final AtomicBoolean started = new AtomicBoolean(false);, +, +    public void start() {, +        started.set(true);, +    }, +, +    public void stop() {, +        stopLock.lock(); //This will block while put or update actions are underway, +        try {, +            started.set(false);, +        } finally {, +            stopLock.unlock();, +        }, +, +    }, +, +        putUpdateLock.lock();, +        if (!started.get()) {, +            throw new HistoryException("unable to persist watch record history store is not ready");, +        }, +        } finally {, +            putUpdateLock.unlock();, +        putUpdateLock.lock();, +        if (!started.get()) {, +            throw new HistoryException("unable to persist watch record history store is not ready");, +        }, +        } finally {, +            putUpdateLock.unlock();, +++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionService.java, +            historyStore.start();, +            historyStore.stop();, +, +        WatchLockService.Lock lock = watchLockService.acquire(ctx.watch().name());, +        try {, +        } finally {, +            lock.release();, +        }, +            logger.info("Running [{}] [{}]", ctx.watch().name(), ctx.id());, +                logger.warn("Rejecting execution due to service is not started");, +                    logger.warn("failed to execute watch [{}] [{}]", e, watchRecord.name(), ctx.id());, +                        logger.error("failed to update watch record [{}] failure [{}] for [{}] [{}]", e2, watchRecord, ctx.watch().name(), ctx.id(), e.getMessage());, +                logger.info("Finished [{}] [{}]", ctx.watch().name(), ctx.id());, +                if (started()) {, +                    logger.error("failed to execute watch from SchedulerListener [{}]", e, name);]