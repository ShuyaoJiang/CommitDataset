[+++ b/src/main/java/org/elasticsearch/alerts/AlertAckState.java, + * This class represents the ack (acknowleged state of an alert), + *, + * NOT_ACKABLE : This alert cannot be ACKed, + * NOT_TRIGGERED : This alert is in the base line state. A positive trigger will cause the alert to move to the NEEDS_ACK state, + * NEEDS_ACK : This alert is in the fired state and has sent an alert action, subsequent positive triggers will cause more actions to occur, + * ACKED : This alert has been acknowleged, subsequent positive triggers will not cause actions to occur, a negative trigger will move the alert back into NOT_TRIGGERED state, +++ b/src/main/java/org/elasticsearch/alerts/AlertAckState.java, + * This class represents the ack (acknowleged state of an alert), + *, + * NOT_ACKABLE : This alert cannot be ACKed, + * NOT_TRIGGERED : This alert is in the base line state. A positive trigger will cause the alert to move to the NEEDS_ACK state, + * NEEDS_ACK : This alert is in the fired state and has sent an alert action, subsequent positive triggers will cause more actions to occur, + * ACKED : This alert has been acknowleged, subsequent positive triggers will not cause actions to occur, a negative trigger will move the alert back into NOT_TRIGGERED state, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/ack/AckAlertResponse.java, + * This class contains the ackState of the alert, if the alert was successfully acked this will be ACK, +    /**, +     * The Constructor that takes the ack state for the alert, +     * @param alertAckState, +     */, +    /**, +     * @return The ack state for the alert, +     */, +    public void setAlertAckState(AlertAckState alertAckState) {, +        this.alertAckState = alertAckState;, +    }, +]