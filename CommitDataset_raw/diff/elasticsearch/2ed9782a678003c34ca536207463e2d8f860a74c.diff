[+++ b/docs/reference/cat/thread_pool.asciidoc, +// TESTRESPONSE[s/\.\.\./(node-0 .+ 0 0 0\n)+/], +++ b/docs/reference/cat/thread_pool.asciidoc, +// TESTRESPONSE[s/\.\.\./(node-0 .+ 0 0 0\n)+/], +++ b/docs/reference/indices/flush.asciidoc, +                     "max_unsafe_auto_id_timestamp" : "-1", +++ b/docs/reference/cat/thread_pool.asciidoc, +// TESTRESPONSE[s/\.\.\./(node-0 .+ 0 0 0\n)+/], +++ b/docs/reference/indices/flush.asciidoc, +                     "max_unsafe_auto_id_timestamp" : "-1", +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +    final class Loader extends SecureClassLoader {, +        Loader(ClassLoader parent) {, +            if (scriptClass.getName().equals(name)) {, +                return scriptClass;, +            }, +            if (factoryClass != null && factoryClass.getName().equals(name)) {, +                return factoryClass;, +            }, +            if (statefulFactoryClass != null && statefulFactoryClass.getName().equals(name)) {, +                return statefulFactoryClass;, +            }, +        return new Loader(parent);, +     * The class/interface the script will implement., +    private final Class<?> scriptClass;, +, +    /**, +     * The class/interface to create the {@code scriptClass} instance., +     */, +    private final Class<?> factoryClass;, +, +    /**, +     * An optional class/interface to create the {@code factoryClass} instance., +     */, +    private final Class<?> statefulFactoryClass;, +     * @param scriptClass The class/interface the script will implement., +     * @param factoryClass An optional class/interface to create the {@code scriptClass} instance., +     * @param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance., +    Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {, +        this.scriptClass = scriptClass;, +        this.factoryClass = factoryClass;, +        this.statefulFactoryClass = statefulFactoryClass;, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass);, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass);, +++ b/docs/reference/cat/thread_pool.asciidoc, +// TESTRESPONSE[s/\.\.\./(node-0 .+ 0 0 0\n)+/], +++ b/docs/reference/indices/flush.asciidoc, +                     "max_unsafe_auto_id_timestamp" : "-1", +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +    final class Loader extends SecureClassLoader {, +        Loader(ClassLoader parent) {, +            if (scriptClass.getName().equals(name)) {, +                return scriptClass;, +            }, +            if (factoryClass != null && factoryClass.getName().equals(name)) {, +                return factoryClass;, +            }, +            if (statefulFactoryClass != null && statefulFactoryClass.getName().equals(name)) {, +                return statefulFactoryClass;, +            }, +        return new Loader(parent);, +     * The class/interface the script will implement., +    private final Class<?> scriptClass;, +, +    /**, +     * The class/interface to create the {@code scriptClass} instance., +     */, +    private final Class<?> factoryClass;, +, +    /**, +     * An optional class/interface to create the {@code factoryClass} instance., +     */, +    private final Class<?> statefulFactoryClass;, +     * @param scriptClass The class/interface the script will implement., +     * @param factoryClass An optional class/interface to create the {@code scriptClass} instance., +     * @param statefulFactoryClass An optional class/interface to create the {@code factoryClass} instance., +    Compiler(Class<?> scriptClass, Class<?> factoryClass, Class<?> statefulFactoryClass, PainlessLookup painlessLookup) {, +        this.scriptClass = scriptClass;, +        this.factoryClass = factoryClass;, +        this.statefulFactoryClass = statefulFactoryClass;, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass);, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(painlessLookup, scriptClass);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/LambdaBootstrap.java, +        Compiler.Loader loader = (Compiler.Loader)lookup.lookupClass().getClassLoader();, +     * Defines the {@link Class} for the lambda class using the same {@link Compiler.Loader}, +            Compiler.Loader loader,, +++ b/docs/reference/cat/thread_pool.asciidoc, +// TESTRESPONSE[s/\.\.\./(node-0 .+ 0 0 0\n)+/], +++ b/docs/reference/indices/flush.asciidoc, +                     "max_unsafe_auto_id_timestamp" : "-1", +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +    final class Loader extends SecureClassLoader {, +        Loader(ClassLoader parent) {, +            if (scriptClass.getName().equals(name)) {, +                return scriptClass;, +            }, +            if (factoryClass != null && factoryClass.getName().equals(name)) {, +                return factoryClass;, +            }, +            if (statefulFactoryClass != null && statefulFactoryClass.getName().equals(name)) {]