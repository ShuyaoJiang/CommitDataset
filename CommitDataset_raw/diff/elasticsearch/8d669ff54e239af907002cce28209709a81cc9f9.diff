[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +        return cache(type.fieldDataClass(), reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +        return cache(type.fieldDataClass(), reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, +import org.apache.lucene.search.FieldComparator;, +import org.apache.lucene.search.FieldComparatorSource;, +import org.elasticsearch.index.cache.field.data.FieldDataCache;, +import org.elasticsearch.index.field.data.doubles.DoubleFieldDataComparator;, +import org.elasticsearch.index.field.data.floats.FloatFieldDataComparator;, +import org.elasticsearch.index.field.data.ints.IntFieldDataComparator;, +import org.elasticsearch.index.field.data.longs.LongFieldDataComparator;, +import org.elasticsearch.index.field.data.shorts.ShortFieldDataComparator;, +import org.elasticsearch.index.field.data.strings.StringOrdValFieldDataComparator;, +        STRING() {, +            @Override public Class<? extends FieldData> fieldDataClass() {, +                return StringFieldData.class;, +            @Override public boolean isNumeric() {, +                return false;, +, +            @Override public FieldComparatorSource newFieldComparatorSource(final FieldDataCache cache) {, +                return new FieldComparatorSource() {, +                    @Override public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {, +                        return new StringOrdValFieldDataComparator(numHits, fieldname, sortPos, reversed, cache);, +                    }, +                };, +            }},, +        SHORT() {, +            @Override public Class<? extends FieldData> fieldDataClass() {, +                return ShortFieldData.class;, +            }, +, +            @Override public boolean isNumeric() {, +                return true;, +            }, +, +            @Override public FieldComparatorSource newFieldComparatorSource(final FieldDataCache cache) {, +                return new FieldComparatorSource() {, +                    @Override public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {, +                        return new ShortFieldDataComparator(numHits, fieldname, cache);, +                    }, +                };, +            }},, +        INT() {, +            @Override public Class<? extends FieldData> fieldDataClass() {, +                return IntFieldData.class;, +            }, +, +            @Override public boolean isNumeric() {, +                return true;, +            }, +, +            @Override public FieldComparatorSource newFieldComparatorSource(final FieldDataCache cache) {, +                return new FieldComparatorSource() {, +                    @Override public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {, +                        return new IntFieldDataComparator(numHits, fieldname, cache);, +                    }, +                };, +            }},, +        LONG() {, +            @Override public Class<? extends FieldData> fieldDataClass() {, +                return LongFieldData.class;, +            }, +, +            @Override public boolean isNumeric() {, +                return true;, +            }, +, +            @Override public FieldComparatorSource newFieldComparatorSource(final FieldDataCache cache) {, +                return new FieldComparatorSource() {, +                    @Override public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {, +                        return new LongFieldDataComparator(numHits, fieldname, cache);, +                    }, +                };, +            }},, +        FLOAT() {, +            @Override public Class<? extends FieldData> fieldDataClass() {, +                return FloatFieldData.class;, +            }, +, +            @Override public boolean isNumeric() {, +                return true;, +            }, +, +            @Override public FieldComparatorSource newFieldComparatorSource(final FieldDataCache cache) {, +                return new FieldComparatorSource() {, +                    @Override public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {, +                        return new FloatFieldDataComparator(numHits, fieldname, cache);, +                    }, +                };, +            }},, +        DOUBLE() {, +            @Override public Class<? extends FieldData> fieldDataClass() {, +                return DoubleFieldData.class;, +            }, +, +            @Override public boolean isNumeric() {, +                return true;, +            }, +]