[+++ b/docs/reference/search/aggregations/metrics.asciidoc, +, +include::metrics/scripted-metric-aggregation.asciidoc[], +++ b/docs/reference/search/aggregations/metrics.asciidoc, +, +include::metrics/scripted-metric-aggregation.asciidoc[], +++ b/docs/reference/search/aggregations/metrics/scripted-metric-aggregation.asciidoc, +[[search-aggregations-metrics-scripted-metric-aggregation]], +=== Scripted Metric Aggregation, +, +added[1.4.0], +, +A metric aggregation that executes using scripts to provide a metric output., +, +.Experimental!, +[IMPORTANT], +=====, +This feature is marked as experimental, and may be subject to change in the, +future.  If you use this feature, please let us know your experience with it!, +=====, +, +Example:, +, +[source,js], +--------------------------------------------------, +{, +    "query" : {, +        "match_all" : {}, +    },, +    "aggs": {, +        "profit": {, +            "scripted_metric": {, +                "init_script" : "_agg['transactions'] = []",, +                "map_script" : "if (doc['type'].value == \"sale\") { _agg.transactions.add(doc['amount'].value) } else { _agg.transactions.add(-1 * doc['amount'].value) }", <1>, +                "combine_script" : "profit = 0; for (t in _agg.transactions) { profit += t }; return profit",, +                "reduce_script" : "profit = 0; for (a in _aggs) { profit += a }; return profit", +            }, +        }, +    }, +}, +--------------------------------------------------, +, +<1> `map_script` is the only required  parameter, +, +The above aggregation demonstrates how one would use the script aggregation compute the total profit from sale and cost transactions., +, +The response for the above aggregation:, +, +[source,js], +--------------------------------------------------, +{, +    ..., +, +    "aggregations": {, +        "profit": {, +            "aggregation": 170, +        }, +   }, +}, +--------------------------------------------------, +, +==== Scope of scripts, +, +The scripted metric aggregation uses scripts at 4 stages of its execution:, +, +init_script::       Executed prior to any collection of documents. Allows the aggregation to set up any initial state., ++, +In the above example, the `init_script` creates an array `transactions` in the `_agg` object., +, +map_script::        Executed once per document collected. This is the only required script. If no combine_script is specified, the resulting state , +                    needs to be stored in an object named `_agg`., ++, +In the above example, the `map_script` checks the value of the type field. If the value if 'sale' the value of the amount field , +is added to the transactions array. If the value of the type field is not 'sale' the negated value of the amount field is added , +to transactions., +, +combine_script::    Executed once on each shard after document collection is complete. Allows the aggregation to consolidate the state returned from , +                    each shard. If a combine_script is not provided the combine phase will return the aggregation variable., ++, +In the above example, the `combine_script` iterates through all the stored transactions, summing the values in the `profit` variable , +and finally returns `profit`., +, +reduce_script::     Executed once on the coordinating node after all shards have returned their results. The script is provided with access to a , +                    variable `_aggs` which is an array of the result of the combine_script on each shard. If a reduce_script is not provided , +                    the reduce phase will return the `_aggs` variable., ++, +In the above example, the `reduce_script` iterates through the `profit` returned by each shard summing the values before returning the , +final combined profit which will be returned in the response of the aggregation., +, +==== Worked Example, +, +Imagine a situation where you index the following documents into and index with 2 shards:, +, +[source,js], +--------------------------------------------------, +$ curl -XPUT 'http://localhost:9200/transactions/stock/1' -d '{, +{, +    "type": "sale", +    "amount": 80, +}]