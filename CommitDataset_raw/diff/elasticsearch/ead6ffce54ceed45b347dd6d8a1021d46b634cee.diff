[+++ b/server/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +        final Query result;, +        // reset query builder, +        queryBuilder = null;, +++ b/server/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +        final Query result;, +        // reset query builder, +        queryBuilder = null;, +++ b/server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +import org.apache.lucene.queries.BlendedTermQuery;, +        try {, +        } finally {, +    }, +    public void testCrossFields() throws Exception {, +        final QueryShardContext context = createShardContext();, +        context.getIndexSettings().updateIndexMetaData(, +            newIndexMeta("index", context.getIndexSettings().getSettings(),, +                Settings.builder().putList("index.query.default_field",, +                    STRING_FIELD_NAME, STRING_FIELD_NAME_2).build()), +        );, +        try {, +            Term[] blendedTerms = new Term[2];, +            blendedTerms[0] = new Term(STRING_FIELD_NAME, "foo");, +            blendedTerms[1] = new Term(STRING_FIELD_NAME_2, "foo");, +, +            Query query = new QueryStringQueryBuilder("foo"), +                .analyzer("whitespace"), +                .type(MultiMatchQueryBuilder.Type.CROSS_FIELDS), +                .toQuery(createShardContext());, +            Query expected = BlendedTermQuery.dismaxBlendedQuery(blendedTerms, 1.0f);, +            assertEquals(expected, query);, +, +            query = new QueryStringQueryBuilder("foo mapped_string:10"), +                .analyzer("whitespace"), +                .type(MultiMatchQueryBuilder.Type.CROSS_FIELDS), +                .toQuery(createShardContext());, +            expected = new BooleanQuery.Builder(), +                .add(BlendedTermQuery.dismaxBlendedQuery(blendedTerms, 1.0f), Occur.SHOULD), +                .add(new TermQuery(new Term(STRING_FIELD_NAME, "10")), Occur.SHOULD), +                .build();, +            assertEquals(expected, query);, +        } finally {, +            // Reset the default value, +            context.getIndexSettings().updateIndexMetaData(, +                newIndexMeta("index",, +                    context.getIndexSettings().getSettings(),, +                    Settings.builder().putList("index.query.default_field", "*").build()), +            );, +        }, +    }, +]