[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +        SignificanceHeuristic heuristic = getSignificanceHeuristic().rewrite(reduceContext);, +            b.updateScore(heuristic);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +        SignificanceHeuristic heuristic = getSignificanceHeuristic().rewrite(reduceContext);, +            b.updateScore(heuristic);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregationBuilder.java, +        SignificanceHeuristic executionHeuristic = this.significanceHeuristic.rewrite(context.searchContext());, +                bucketCountThresholds, executionHeuristic, context, parent, subFactoriesBuilder, metaData);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +        SignificanceHeuristic heuristic = getSignificanceHeuristic().rewrite(reduceContext);, +            b.updateScore(heuristic);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregationBuilder.java, +        SignificanceHeuristic executionHeuristic = this.significanceHeuristic.rewrite(context.searchContext());, +                bucketCountThresholds, executionHeuristic, context, parent, subFactoriesBuilder, metaData);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/ScriptHeuristic.java, +    private final Script script;, +    , +    // This class holds an executable form of the script with private variables ready for execution, +    // on a single search thread., +    static class ExecutableScriptHeuristic extends ScriptHeuristic {, +        private final ExecutableScript executableScript;, +        ExecutableScriptHeuristic(Script script, ExecutableScript executableScript){, +            super(script);, +            this.executableScript = executableScript;, +            executableScript.setNextVar("_subset_freq", subsetDfHolder);, +            executableScript.setNextVar("_subset_size", subsetSizeHolder);, +            executableScript.setNextVar("_superset_freq", supersetDfHolder);, +            executableScript.setNextVar("_superset_size", supersetSizeHolder);, +        }, +, +        @Override, +        public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) {, +            subsetSizeHolder.value = subsetSize;, +            supersetSizeHolder.value = supersetSize;, +            subsetDfHolder.value = subsetFreq;, +            supersetDfHolder.value = supersetFreq;, +            return ((Number) executableScript.run()).doubleValue();        , +       }, +    }, +, +    public ScriptHeuristic(Script script) {, +    public SignificanceHeuristic rewrite(InternalAggregation.ReduceContext context) {, +        return new ExecutableScriptHeuristic(script, context.scriptService().executable(script, ScriptContext.Standard.AGGS, Collections.emptyMap()));, +    public SignificanceHeuristic rewrite(SearchContext context) {, +        return new ExecutableScriptHeuristic(script, context.getQueryShardContext().getExecutableScript(script, ScriptContext.Standard.AGGS, Collections.emptyMap()));, +        throw new UnsupportedOperationException("This scoring heuristic must have 'rewrite' called on it to provide a version ready for use");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +        SignificanceHeuristic heuristic = getSignificanceHeuristic().rewrite(reduceContext);, +            b.updateScore(heuristic);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregationBuilder.java, +        SignificanceHeuristic executionHeuristic = this.significanceHeuristic.rewrite(context.searchContext());, +                bucketCountThresholds, executionHeuristic, context, parent, subFactoriesBuilder, metaData);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/ScriptHeuristic.java, +    private final Script script;, +    , +    // This class holds an executable form of the script with private variables ready for execution, +    // on a single search thread., +    static class ExecutableScriptHeuristic extends ScriptHeuristic {, +        private final ExecutableScript executableScript;, +        ExecutableScriptHeuristic(Script script, ExecutableScript executableScript){, +            super(script);, +            this.executableScript = executableScript;, +            executableScript.setNextVar("_subset_freq", subsetDfHolder);, +            executableScript.setNextVar("_subset_size", subsetSizeHolder);, +            executableScript.setNextVar("_superset_freq", supersetDfHolder);, +            executableScript.setNextVar("_superset_size", supersetSizeHolder);, +        }, +, +        @Override, +        public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) {, +            subsetSizeHolder.value = subsetSize;, +            supersetSizeHolder.value = supersetSize;, +            subsetDfHolder.value = subsetFreq;, +            supersetDfHolder.value = supersetFreq;, +            return ((Number) executableScript.run()).doubleValue();        , +       }, +    }, +, +    public ScriptHeuristic(Script script) {, +    public SignificanceHeuristic rewrite(InternalAggregation.ReduceContext context) {, +        return new ExecutableScriptHeuristic(script, context.scriptService().executable(script, ScriptContext.Standard.AGGS, Collections.emptyMap()));, +    public SignificanceHeuristic rewrite(SearchContext context) {, +        return new ExecutableScriptHeuristic(script, context.getQueryShardContext().getExecutableScript(script, ScriptContext.Standard.AGGS, Collections.emptyMap()));, +        throw new UnsupportedOperationException("This scoring heuristic must have 'rewrite' called on it to provide a version ready for use");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/SignificanceHeuristic.java, +    /**, +     * Provides a hook for subclasses to provide a version of the heuristic, +     * prepared for execution on data on the coordinating node., +     * @param reduceContext the reduce context on the coordinating node, +     * @return a version of this heuristic suitable for execution, +     */, +    public SignificanceHeuristic rewrite(InternalAggregation.ReduceContext reduceContext) {, +        return this;, +    /**, +     * Provides a hook for subclasses to provide a version of the heuristic, +     * prepared for execution on data on a shard. , +     * @param context the search context on the data node, +     * @return a version of this heuristic suitable for execution, +     */]