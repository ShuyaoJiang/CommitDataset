[+++ b/server/src/test/java/org/elasticsearch/indices/DateMathIndexExpressionsIntegrationIT.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.index.IndexNotFoundException;, +import org.junit.Before;, +, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeFormatter;, +import java.util.Locale;, +    private ZonedDateTime now;, +, +    @Before, +    public void setNow() {, +        now = ZonedDateTime.now(ZoneOffset.UTC);, +    }, +, +    /**, +     * the internal cluster calls System.nanoTime() and System.currentTimeMillis() during evaluations of requests, +     * that need date-math index resolution. These are not mockable in these tests. As is, executing requests as-is, +     * in these test cases can potentially result in invalid responses when day-boundaries are hit mid test run. Instead, +     * of failing when index resolution with `now` is one day off, this method wraps calls with the assumption that, +     * the day did not change during the test run., +     */, +    public <Q extends ActionRequest, R extends ActionResponse> R dateSensitiveGet(ActionRequestBuilder<Q, R> builder) {, +        Runnable dayChangeAssumption = () -> assumeTrue("day changed between requests",, +            ZonedDateTime.now(ZoneOffset.UTC).getDayOfYear() == now.getDayOfYear());, +        R response;, +        try {, +            response = builder.get();, +        } catch (IndexNotFoundException e) {, +            // index resolver throws this if it does not find the exact index due to day changes, +            dayChangeAssumption.run();, +            throw e;, +        }, +        dayChangeAssumption.run();, +        return response;, +    }, +        String index1 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now);, +        String index2 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(1));, +        String index3 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(2));, +        GetSettingsResponse getSettingsResponse = dateSensitiveGet(client().admin().indices().prepareGetSettings(index1, index2, index3));, +        SearchResponse searchResponse = dateSensitiveGet(client().prepareSearch(dateMathExp1, dateMathExp2, dateMathExp3));, +        GetResponse getResponse = dateSensitiveGet(client().prepareGet(dateMathExp1, "type", "1"));, +        getResponse = dateSensitiveGet(client().prepareGet(dateMathExp2, "type", "2"));, +        getResponse = dateSensitiveGet(client().prepareGet(dateMathExp3, "type", "3"));, +        MultiGetResponse mgetResponse = dateSensitiveGet(client().prepareMultiGet(), +            .add(dateMathExp3, "type", "3"));, +        IndicesStatsResponse indicesStatsResponse =, +            dateSensitiveGet(client().admin().indices().prepareStats(dateMathExp1, dateMathExp2, dateMathExp3));, +        DeleteResponse deleteResponse = dateSensitiveGet(client().prepareDelete(dateMathExp1, "type", "1"));, +        deleteResponse = dateSensitiveGet(client().prepareDelete(dateMathExp2, "type", "2"));, +        deleteResponse = dateSensitiveGet(client().prepareDelete(dateMathExp3, "type", "3"));, +    public void testAutoCreateIndexWithDateMathExpression() {, +        String index1 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now);, +        String index2 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(1));, +        String index3 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(2));, +        SearchResponse searchResponse = dateSensitiveGet(client().prepareSearch(dateMathExp1, dateMathExp2, dateMathExp3));, +        IndicesStatsResponse indicesStatsResponse =, +            dateSensitiveGet(client().admin().indices().prepareStats(dateMathExp1, dateMathExp2, dateMathExp3));, +    public void testCreateIndexWithDateMathExpression() {, +        String index1 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now);, +        String index2 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(1));, +        String index3 = ".marvel-" + DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.ROOT).format(now.minusDays(2));, +        GetSettingsResponse getSettingsResponse = dateSensitiveGet(client().admin().indices().prepareGetSettings(index1, index2, index3));]