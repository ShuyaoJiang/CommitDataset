[+++ b/src/main/java/org/elasticsearch/common/collect/ImmutableOpenMap.java, +    /**, +     * @return  An immutable copy of the given map, +     */, +    public static <KType, VType> ImmutableOpenMap<KType, VType> copyOf(ObjectObjectMap<KType, VType> map) {, +        Builder<KType, VType> builder = builder();, +        builder.putAll(map);, +        return builder.build();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/collect/ImmutableOpenMap.java, +    /**, +     * @return  An immutable copy of the given map, +     */, +    public static <KType, VType> ImmutableOpenMap<KType, VType> copyOf(ObjectObjectMap<KType, VType> map) {, +        Builder<KType, VType> builder = builder();, +        builder.putAll(map);, +        return builder.build();, +    }, +, +++ b/src/main/java/org/elasticsearch/transport/TransportMessage.java, +import com.carrotsearch.hppc.ObjectObjectOpenHashMap;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +    private ObjectObjectOpenHashMap<Object, Object> context;, +        if (((TransportMessage<?>) message).context != null) {, +            this.context = new ObjectObjectOpenHashMap<>(((TransportMessage<?>) message).context);, +    /**, +     * Attaches the given transient value to the request - this value will not be serialized, +     * along with the request., +     *, +     * There are many use cases such data is required, for example, when processing the, +     * request headers and building other constructs from them, one could "cache" the, +     * already built construct to avoid reprocessing the header over and over again., +     *, +     * @return  The previous value that was associated with the given key in the context, or, +     *          {@code null} if there was none., +     */, +    @SuppressWarnings("unchecked"), +    public final synchronized <V> V putInContext(Object key, Object value) {, +        if (context == null) {, +            context = new ObjectObjectOpenHashMap<>(2);, +        }, +        return (V) context.put(key, value);, +    }, +, +    /**, +     * @return  The transient value that is associated with the given key in the request context, +     * @see #putInContext(Object, Object), +     */, +    @SuppressWarnings("unchecked"), +    public final synchronized <V> V getFromContext(Object key) {, +        return context != null ? (V) context.get(key) : null;, +    }, +, +    /**, +     * @param defaultValue  The default value that should be returned for the given key, if no, +     *                      value is currently associated with it., +     *, +     * @return  The transient value that is associated with the given key in the request context, +     *, +     * @see #putInContext(Object, Object), +     */, +    @SuppressWarnings("unchecked"), +    public final synchronized <V> V getFromContext(Object key, V defaultValue) {, +        V value = getFromContext(key);, +        return value == null ? defaultValue : value;, +    }, +, +    /**, +     * Checks if the request context contains an entry with the given key, +     */, +    public final synchronized boolean hasInContext(Object key) {, +        return context != null && context.containsKey(key);, +    }, +, +    /**, +     * @return  The number of transient values attached in the request context., +     */, +    public final synchronized int contextSize() {, +        return context != null ? context.size() : 0;, +    }, +, +    /**, +     * Checks if the request context is empty., +     */, +    public final synchronized boolean isContextEmpty() {, +        return context == null || context.isEmpty();, +    }, +, +    /**, +     * @return  A safe immutable copy of the current context of this request., +     */, +    public synchronized ImmutableOpenMap<Object, Object> getContext() {, +        return context != null ? ImmutableOpenMap.copyOf(context) : ImmutableOpenMap.of();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/collect/ImmutableOpenMap.java, +    /**, +     * @return  An immutable copy of the given map, +     */]