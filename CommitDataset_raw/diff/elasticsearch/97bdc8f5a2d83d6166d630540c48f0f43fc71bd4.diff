[+++ b/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +    public static final String NO_MASTER_BLOCK = "discovery.zen.no_master_block";, +    public static final TimeValue DEFAULT_PUBLISH_TIMEOUT = TimeValue.timeValueSeconds(30);, +    public static final String DEFAULT_NO_MASTER_BLOCK = "write";, +    private final static ClusterBlock ALL = new ClusterBlock(NO_MASTER_BLOCK_ID, "no master", true, true, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.ALL);, +    private final static ClusterBlock WRITE = new ClusterBlock(NO_MASTER_BLOCK_ID, "no master", true, false, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.WRITE, ClusterBlockLevel.METADATA);, +    private final static ClusterBlock METADATA = new ClusterBlock(NO_MASTER_BLOCK_ID, "no master", true, false, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.METADATA);, +, +    private volatile ClusterBlock noMasterBlock;, +    private volatile TimeValue publishTimeout = DEFAULT_PUBLISH_TIMEOUT;, +        this.noMasterBlock = parseNoMasterBlock(settings.get(NO_MASTER_BLOCK, DEFAULT_NO_MASTER_BLOCK));, +            String newNoMasterBlockValue = settings.get(NO_MASTER_BLOCK);, +            if (newNoMasterBlockValue != null) {, +                ClusterBlock newNoMasterBlock = parseNoMasterBlock(newNoMasterBlockValue);, +                if (newNoMasterBlock != noMasterBlock) {, +                    noMasterBlock = newNoMasterBlock;, +                }, +            }, +        }, +    }, +, +    private ClusterBlock parseNoMasterBlock(String value) {, +        if ("all".equals(value)) {, +            return ALL;, +        } else if ("write".equals(value)) {, +            return WRITE;, +        } else if ("metadata".equals(value)) {, +            return METADATA;, +        } else {, +            throw new ElasticsearchIllegalArgumentException("invalid master block [" + value + "]");, +++ b/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +    public static final String NO_MASTER_BLOCK = "discovery.zen.no_master_block";, +    public static final TimeValue DEFAULT_PUBLISH_TIMEOUT = TimeValue.timeValueSeconds(30);, +    public static final String DEFAULT_NO_MASTER_BLOCK = "write";, +    private final static ClusterBlock ALL = new ClusterBlock(NO_MASTER_BLOCK_ID, "no master", true, true, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.ALL);, +    private final static ClusterBlock WRITE = new ClusterBlock(NO_MASTER_BLOCK_ID, "no master", true, false, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.WRITE, ClusterBlockLevel.METADATA);, +    private final static ClusterBlock METADATA = new ClusterBlock(NO_MASTER_BLOCK_ID, "no master", true, false, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.METADATA);, +, +    private volatile ClusterBlock noMasterBlock;, +    private volatile TimeValue publishTimeout = DEFAULT_PUBLISH_TIMEOUT;, +        this.noMasterBlock = parseNoMasterBlock(settings.get(NO_MASTER_BLOCK, DEFAULT_NO_MASTER_BLOCK));, +            String newNoMasterBlockValue = settings.get(NO_MASTER_BLOCK);, +            if (newNoMasterBlockValue != null) {, +                ClusterBlock newNoMasterBlock = parseNoMasterBlock(newNoMasterBlockValue);, +                if (newNoMasterBlock != noMasterBlock) {, +                    noMasterBlock = newNoMasterBlock;, +                }, +            }, +        }, +    }, +, +    private ClusterBlock parseNoMasterBlock(String value) {, +        if ("all".equals(value)) {, +            return ALL;, +        } else if ("write".equals(value)) {, +            return WRITE;, +        } else if ("metadata".equals(value)) {, +            return METADATA;, +        } else {, +            throw new ElasticsearchIllegalArgumentException("invalid master block [" + value + "]");, +++ b/src/test/java/org/elasticsearch/cluster/NoMasterNodeTests.java, +import com.google.common.base.Predicate;, +import org.elasticsearch.action.count.CountResponse;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertExists;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +                .put(DiscoverySettings.NO_MASTER_BLOCK, "all"), +, +    @Test, +    public void testNoMasterActions_writeMasterBlock() throws Exception {, +        Settings settings = settingsBuilder(), +                .put("discovery.type", "zen"), +                .put("action.auto_create_index", false), +                .put("discovery.zen.minimum_master_nodes", 2), +                .put("discovery.zen.ping_timeout", "200ms"), +                .put("discovery.initial_state_timeout", "500ms"), +                .put(DiscoverySettings.NO_MASTER_BLOCK, "write"), +                .build();, +, +        internalCluster().startNode(settings);, +        // start a second node, create an index, and then shut it down so we have no master block, +        internalCluster().startNode(settings);, +        prepareCreate("test1").setSettings(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).get();, +        prepareCreate("test2").setSettings(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 2, IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).get();, +        client().admin().cluster().prepareHealth("_all").setWaitForGreenStatus().get();, +        client().prepareIndex("test1", "type1", "1").setSource("field", "value1").get();, +        client().prepareIndex("test2", "type1", "1").setSource("field", "value1").get();, +        refresh();, +, +        internalCluster().stopRandomDataNode();, +        assertThat(awaitBusy(new Predicate<Object>() {, +            public boolean apply(Object o) {, +                ClusterState state = client().admin().cluster().prepareState().setLocal(true).get().getState();, +                return state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID);, +            }, +        }), equalTo(true));]