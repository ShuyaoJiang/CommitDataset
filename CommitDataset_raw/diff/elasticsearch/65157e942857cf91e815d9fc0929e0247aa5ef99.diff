[+++ b/server/src/test/java/org/elasticsearch/common/breaker/MemoryCircuitBreakerTests.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import static org.hamcrest.Matchers.containsString;, +, +    /**, +     * Test that a breaker correctly redistributes to a different breaker, in, +     * this case, the request breaker borrows space from the fielddata breaker, +     */, +    public void testBorrowingSiblingBreakerMemory() throws Exception {, +        Settings clusterSettings = Settings.builder(), +                .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "200mb"), +                .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb"), +                .put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb"), +                .build();, +        try (CircuitBreakerService service = new HierarchyCircuitBreakerService(clusterSettings,, +                new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {, +            CircuitBreaker requestCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.REQUEST);, +            CircuitBreaker fieldDataCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.FIELDDATA);, +, +            assertEquals(new ByteSizeValue(200, ByteSizeUnit.MB).getBytes(),, +                    service.stats().getStats(MemoryCircuitBreaker.PARENT).getLimit());, +            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), requestCircuitBreaker.getLimit());, +            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), fieldDataCircuitBreaker.getLimit());, +, +            double fieldDataUsedBytes = fieldDataCircuitBreaker, +                    .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should not break");, +            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), fieldDataUsedBytes, 0.0);, +            double requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),, +                    "should not break");, +            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0);, +            requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),, +                    "should not break");, +            assertEquals(new ByteSizeValue(100, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0);, +            CircuitBreakingException exception = expectThrows(CircuitBreakingException.class, () -> requestCircuitBreaker, +                    .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should break"));, +            assertThat(exception.getMessage(), containsString("[parent] Data too large, data for [should break] would be"));, +            assertThat(exception.getMessage(), containsString("which is larger than the limit of [209715200/200mb]"));, +        }, +    }, +++ b/server/src/test/java/org/elasticsearch/common/breaker/MemoryCircuitBreakerTests.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import static org.hamcrest.Matchers.containsString;, +, +    /**, +     * Test that a breaker correctly redistributes to a different breaker, in, +     * this case, the request breaker borrows space from the fielddata breaker, +     */, +    public void testBorrowingSiblingBreakerMemory() throws Exception {, +        Settings clusterSettings = Settings.builder(), +                .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "200mb"), +                .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb"), +                .put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "150mb"), +                .build();, +        try (CircuitBreakerService service = new HierarchyCircuitBreakerService(clusterSettings,, +                new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {, +            CircuitBreaker requestCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.REQUEST);, +            CircuitBreaker fieldDataCircuitBreaker = service.getBreaker(MemoryCircuitBreaker.FIELDDATA);, +, +            assertEquals(new ByteSizeValue(200, ByteSizeUnit.MB).getBytes(),, +                    service.stats().getStats(MemoryCircuitBreaker.PARENT).getLimit());, +            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), requestCircuitBreaker.getLimit());, +            assertEquals(new ByteSizeValue(150, ByteSizeUnit.MB).getBytes(), fieldDataCircuitBreaker.getLimit());, +, +            double fieldDataUsedBytes = fieldDataCircuitBreaker, +                    .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should not break");, +            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), fieldDataUsedBytes, 0.0);, +            double requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),, +                    "should not break");, +            assertEquals(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0);, +            requestUsedBytes = requestCircuitBreaker.addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(),, +                    "should not break");, +            assertEquals(new ByteSizeValue(100, ByteSizeUnit.MB).getBytes(), requestUsedBytes, 0.0);, +            CircuitBreakingException exception = expectThrows(CircuitBreakingException.class, () -> requestCircuitBreaker, +                    .addEstimateBytesAndMaybeBreak(new ByteSizeValue(50, ByteSizeUnit.MB).getBytes(), "should break"));, +            assertThat(exception.getMessage(), containsString("[parent] Data too large, data for [should break] would be"));, +            assertThat(exception.getMessage(), containsString("which is larger than the limit of [209715200/200mb]"));, +        }, +    }, +++ b/server/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java]