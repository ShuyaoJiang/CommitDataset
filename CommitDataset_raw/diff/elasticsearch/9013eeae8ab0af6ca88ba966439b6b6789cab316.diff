[+++ b/src/main/java/org/elasticsearch/index/query/FilterBuilders.java, +    /**, +     * Constructs a child filter, with the child type and the filter to run against child documents, with, +     * the result of the filter being the *parent* documents., +     *, +     * @param type   The child type, +     * @param filter The query to run against the child type, +     */, +    public static HasChildFilterBuilder hasChildFilter(String type, FilterBuilder filter) {, +        return new HasChildFilterBuilder(type, filter);, +    }, +, +    /**, +     * Constructs a parent filter, with the parent type and the query to run against parent documents, with, +     * the result of the filter being the *child* documents., +     *, +     * @param parentType The parent type, +     * @param query      The query to run against the parent type, +     */, +    /**, +     * Constructs a parent filter, with the parent type and the filter to run against parent documents, with, +     * the result of the filter being the *child* documents., +     *, +     * @param parentType The parent type, +     * @param filter     The filter to run against the parent type, +     */, +    public static HasParentFilterBuilder hasParentFilter(String parentType, FilterBuilder filter) {, +        return new HasParentFilterBuilder(parentType, filter);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/FilterBuilders.java, +    /**, +     * Constructs a child filter, with the child type and the filter to run against child documents, with, +     * the result of the filter being the *parent* documents., +     *, +     * @param type   The child type, +     * @param filter The query to run against the child type, +     */, +    public static HasChildFilterBuilder hasChildFilter(String type, FilterBuilder filter) {, +        return new HasChildFilterBuilder(type, filter);, +    }, +, +    /**, +     * Constructs a parent filter, with the parent type and the query to run against parent documents, with, +     * the result of the filter being the *child* documents., +     *, +     * @param parentType The parent type, +     * @param query      The query to run against the parent type, +     */, +    /**, +     * Constructs a parent filter, with the parent type and the filter to run against parent documents, with, +     * the result of the filter being the *child* documents., +     *, +     * @param parentType The parent type, +     * @param filter     The filter to run against the parent type, +     */, +    public static HasParentFilterBuilder hasParentFilter(String parentType, FilterBuilder filter) {, +        return new HasParentFilterBuilder(parentType, filter);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterBuilder.java, +    private final FilterBuilder filterBuilder;, +        this.filterBuilder = null;, +    }, +, +    public HasChildFilterBuilder(String type, FilterBuilder filterBuilder) {, +        this.childType = type;, +        this.queryBuilder = null;, +        this.filterBuilder = filterBuilder;, +     * <p/>, +        if (queryBuilder != null) {, +        } else if (filterBuilder != null) {, +            builder.field("filter");, +            filterBuilder.toXContent(builder, params);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/FilterBuilders.java, +    /**, +     * Constructs a child filter, with the child type and the filter to run against child documents, with, +     * the result of the filter being the *parent* documents., +     *, +     * @param type   The child type, +     * @param filter The query to run against the child type, +     */, +    public static HasChildFilterBuilder hasChildFilter(String type, FilterBuilder filter) {, +        return new HasChildFilterBuilder(type, filter);, +    }, +, +    /**, +     * Constructs a parent filter, with the parent type and the query to run against parent documents, with, +     * the result of the filter being the *child* documents., +     *, +     * @param parentType The parent type, +     * @param query      The query to run against the parent type, +     */, +    /**, +     * Constructs a parent filter, with the parent type and the filter to run against parent documents, with, +     * the result of the filter being the *child* documents., +     *, +     * @param parentType The parent type, +     * @param filter     The filter to run against the parent type]