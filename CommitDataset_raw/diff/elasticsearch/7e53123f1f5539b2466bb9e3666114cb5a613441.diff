[+++ b/core/pom.xml, +                        <exclude>src/main/java/org/elasticsearch/common/network/InetAddresses.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/network/InetAddressesTests.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/collect/EvictingQueueTests.java</exclude>, +++ b/core/pom.xml, +                        <exclude>src/main/java/org/elasticsearch/common/network/InetAddresses.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/network/InetAddressesTests.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/collect/EvictingQueueTests.java</exclude>, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +        private final DiscoveryNode[] nodes;, +            ClusterState clusterState = clusterService.state();, +            ImmutableOpenMap<String, DiscoveryNode> nodes = clusterState.nodes().nodes();, +            this.nodes = new DiscoveryNode[nodesIds.length];, +            for (int i = 0; i < nodesIds.length; i++) {, +                this.nodes[i] = nodes.get(nodesIds[i]);, +            }, +                final DiscoveryNode node = nodes[i];, +++ b/core/pom.xml, +                        <exclude>src/main/java/org/elasticsearch/common/network/InetAddresses.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/network/InetAddressesTests.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/collect/EvictingQueueTests.java</exclude>, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +        private final DiscoveryNode[] nodes;, +            ClusterState clusterState = clusterService.state();, +            ImmutableOpenMap<String, DiscoveryNode> nodes = clusterState.nodes().nodes();, +            this.nodes = new DiscoveryNode[nodesIds.length];, +            for (int i = 0; i < nodesIds.length; i++) {, +                this.nodes[i] = nodes.get(nodesIds[i]);, +            }, +                final DiscoveryNode node = nodes[i];, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        m.put("discovery-gce",       "org.elasticsearch.plugin.discovery.gce.GceDiscoveryPlugin");, +++ b/core/pom.xml, +                        <exclude>src/main/java/org/elasticsearch/common/network/InetAddresses.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/network/InetAddressesTests.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/collect/EvictingQueueTests.java</exclude>, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +        private final DiscoveryNode[] nodes;, +            ClusterState clusterState = clusterService.state();, +            ImmutableOpenMap<String, DiscoveryNode> nodes = clusterState.nodes().nodes();, +            this.nodes = new DiscoveryNode[nodesIds.length];, +            for (int i = 0; i < nodesIds.length; i++) {, +                this.nodes[i] = nodes.get(nodesIds[i]);, +            }, +                final DiscoveryNode node = nodes[i];, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        m.put("discovery-gce",       "org.elasticsearch.plugin.discovery.gce.GceDiscoveryPlugin");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.similarity.SimilarityService;, +            SimilarityService similarityService = new SimilarityService(index, settings);, +                try (MapperService mapperService = new MapperService(index, settings, analysisService, similarityService, scriptService)) {, +++ b/core/pom.xml, +                        <exclude>src/main/java/org/elasticsearch/common/network/InetAddresses.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/network/InetAddressesTests.java</exclude>, +                        <exclude>src/test/java/org/elasticsearch/common/collect/EvictingQueueTests.java</exclude>, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +        private final DiscoveryNode[] nodes;, +            ClusterState clusterState = clusterService.state();, +            ImmutableOpenMap<String, DiscoveryNode> nodes = clusterState.nodes().nodes();, +            this.nodes = new DiscoveryNode[nodesIds.length];, +            for (int i = 0; i < nodesIds.length; i++) {, +                this.nodes[i] = nodes.get(nodesIds[i]);, +            }, +                final DiscoveryNode node = nodes[i];, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        m.put("discovery-gce",       "org.elasticsearch.plugin.discovery.gce.GceDiscoveryPlugin");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.similarity.SimilarityService;, +            SimilarityService similarityService = new SimilarityService(index, settings);, +                try (MapperService mapperService = new MapperService(index, settings, analysisService, similarityService, scriptService)) {, +++ b/core/src/main/java/org/elasticsearch/common/collect/EvictingQueue.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.collect;, +, +import java.util.ArrayDeque;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.Queue;]