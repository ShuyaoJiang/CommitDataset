[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        return Strings.toUnderscoreCase(simpleName);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        return Strings.toUnderscoreCase(simpleName);, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        return Strings.toUnderscoreCase(simpleName);, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +                String fieldName = Strings.toUnderscoreCase(entry.getKey());, +                String fieldName = Strings.toUnderscoreCase(entry.getKey());, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        return Strings.toUnderscoreCase(simpleName);, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +                String fieldName = Strings.toUnderscoreCase(entry.getKey());, +                String fieldName = Strings.toUnderscoreCase(entry.getKey());, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +    private final String camelCaseName;, +    private final String underscoreName;, +    public ParseField(String value, String... deprecatedNames) {, +        camelCaseName = Strings.toCamelCase(value);, +        underscoreName = Strings.toUnderscoreCase(value);, +            for (String depName : deprecatedNames) {, +                set.add(Strings.toCamelCase(depName));, +                set.add(Strings.toUnderscoreCase(depName));, +            }, +        allNames.add(camelCaseName);, +        allNames.add(underscoreName);, +        return underscoreName;, +        return new ParseField(this.underscoreName, deprecatedNames);, +        if (allReplacedWith == null && (currentFieldName.equals(camelCaseName) || currentFieldName.equals(underscoreName))) {, +                msg = "Deprecated field [" + currentFieldName + "] used, expected [" + underscoreName + "] instead";, +    public String getCamelCaseName() {, +        return camelCaseName;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        return Strings.toUnderscoreCase(simpleName);, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +                String fieldName = Strings.toUnderscoreCase(entry.getKey());, +                String fieldName = Strings.toUnderscoreCase(entry.getKey());, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +    private final String camelCaseName;, +    private final String underscoreName;, +    public ParseField(String value, String... deprecatedNames) {, +        camelCaseName = Strings.toCamelCase(value);, +        underscoreName = Strings.toUnderscoreCase(value);, +            for (String depName : deprecatedNames) {, +                set.add(Strings.toCamelCase(depName));, +                set.add(Strings.toUnderscoreCase(depName));, +            }, +        allNames.add(camelCaseName);, +        allNames.add(underscoreName);, +        return underscoreName;, +        return new ParseField(this.underscoreName, deprecatedNames);, +        if (allReplacedWith == null && (currentFieldName.equals(camelCaseName) || currentFieldName.equals(underscoreName))) {, +                msg = "Deprecated field [" + currentFieldName + "] used, expected [" + underscoreName + "] instead";, +    public String getCamelCaseName() {, +        return camelCaseName;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +    public static String toCamelCase(String value) {, +        return toCamelCase(value, null);, +    }, +, +    public static String toCamelCase(String value, StringBuilder sb) {, +        boolean changed = false;, +        for (int i = 0; i < value.length(); i++) {, +            char c = value.charAt(i);, +            //e.g. _name stays as-is, _first_name becomes _firstName, +            if (c == '_' && i > 0) {, +                if (!changed) {, +                    if (sb != null) {, +                        sb.setLength(0);, +                    } else {, +                        sb = new StringBuilder();, +                    }, +                    // copy it over here, +                    for (int j = 0; j < i; j++) {, +                        sb.append(value.charAt(j));, +                    }, +                    changed = true;, +                }, +                if (i < value.length() - 1) {, +                    sb.append(Character.toUpperCase(value.charAt(++i)));, +                }, +            } else {, +                if (changed) {, +                    sb.append(c);, +                }, +            }, +        }, +        if (!changed) {, +            return value;, +        }, +        return sb.toString();, +    }]