[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.ElasticsearchException;, +, +                @Override, +                public void onTimeout(TimeValue timeout) {, +                    listener.onFailure(new ElasticsearchException("Opening job [", +                            + request.getJobId() + "] timed out after [" + timeout + "]"));, +                }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.ElasticsearchException;, +, +                @Override, +                public void onTimeout(TimeValue timeout) {, +                    listener.onFailure(new ElasticsearchException("Opening job [", +                            + request.getJobId() + "] timed out after [" + timeout + "]"));, +                }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.ElasticsearchException;, +, +                @Override, +                public void onTimeout(TimeValue timeout) {, +                    listener.onFailure(new ElasticsearchException("Starting datafeed [", +                            + request.getDatafeedId() + "] timed out after [" + timeout + "]"));, +                }, +                Assignment assignment = selectNode(logger, request.getDatafeedId(), clusterState, resolver);, +                if (assignment.getExecutorNode() == null) {, +                    DatafeedConfig datafeed = mlMetadata.getDatafeed(request.getDatafeedId());, +                    String msg = "No node found to start datafeed [" + request.getDatafeedId(), +                            + "], allocation explanation [" + assignment.getExplanation() + "]";, +                    logger.warn("[{}] {}", datafeed.getJobId(), msg);, +                    throw new ElasticsearchException(msg);, +                }, +                        logger.warn("[{}] {}", datafeed.getJobId(), msg);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.ElasticsearchException;, +, +                @Override, +                public void onTimeout(TimeValue timeout) {, +                    listener.onFailure(new ElasticsearchException("Opening job [", +                            + request.getJobId() + "] timed out after [" + timeout + "]"));, +                }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.ElasticsearchException;, +, +                @Override, +                public void onTimeout(TimeValue timeout) {, +                    listener.onFailure(new ElasticsearchException("Starting datafeed [", +                            + request.getDatafeedId() + "] timed out after [" + timeout + "]"));, +                }, +                Assignment assignment = selectNode(logger, request.getDatafeedId(), clusterState, resolver);, +                if (assignment.getExecutorNode() == null) {, +                    DatafeedConfig datafeed = mlMetadata.getDatafeed(request.getDatafeedId());, +                    String msg = "No node found to start datafeed [" + request.getDatafeedId(), +                            + "], allocation explanation [" + assignment.getExplanation() + "]";, +                    logger.warn("[{}] {}", datafeed.getJobId(), msg);, +                    throw new ElasticsearchException(msg);, +                }, +                        logger.warn("[{}] {}", datafeed.getJobId(), msg);, +++ b/plugin/src/test/resources/rest-api-spec/test/ml/start_stop_datafeed.yaml, +, +---, +"Test start given datafeed index does not exist":, +  - do:, +      xpack.ml.update_datafeed:, +        datafeed_id: datafeed-1, +        body:  >, +          {, +            "indexes":["utopia"], +          }, +, +  - do:, +      xpack.ml.open_job:, +        job_id: "datafeed-job", +, +  - do:, +      catch: /No node found to start datafeed \[datafeed-1\].*\[utopia\] does not exist.*/, +      xpack.ml.start_datafeed:, +        datafeed_id: "datafeed-1"]