[+++ b/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum compatible version based on the current, +     * version. Ie a node needs to have at least the return version in order, +     * to communicate with a node running the current version. The returned version, +     * is in most of the cases the smallest major version release unless the current version, +     * is a beta or RC release then the version itself is returned., +     */, +    public Version minimumCompatibilityVersion() {, +        return Version.smallest(this, fromId(major * 1000000 + 99));, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum compatible version based on the current, +     * version. Ie a node needs to have at least the return version in order, +     * to communicate with a node running the current version. The returned version, +     * is in most of the cases the smallest major version release unless the current version, +     * is a beta or RC release then the version itself is returned., +     */, +    public Version minimumCompatibilityVersion() {, +        return Version.smallest(this, fromId(major * 1000000 + 99));, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    TransportClientNodesService nodeService() {, +        return nodesService;, +    }, +, +++ b/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum compatible version based on the current, +     * version. Ie a node needs to have at least the return version in order, +     * to communicate with a node running the current version. The returned version, +     * is in most of the cases the smallest major version release unless the current version, +     * is a beta or RC release then the version itself is returned., +     */, +    public Version minimumCompatibilityVersion() {, +        return Version.smallest(this, fromId(major * 1000000 + 99));, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    TransportClientNodesService nodeService() {, +        return nodesService;, +    }, +, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +    private final Version minCompatibilityVersion;, +        this.minCompatibilityVersion = version.minimumCompatibilityVersion();, +                DiscoveryNode node = new DiscoveryNode("#transport#-" + tempNodeIdGenerator.incrementAndGet(), transportAddress, minCompatibilityVersion);, +++ b/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum compatible version based on the current, +     * version. Ie a node needs to have at least the return version in order, +     * to communicate with a node running the current version. The returned version, +     * is in most of the cases the smallest major version release unless the current version, +     * is a beta or RC release then the version itself is returned., +     */, +    public Version minimumCompatibilityVersion() {, +        return Version.smallest(this, fromId(major * 1000000 + 99));, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    TransportClientNodesService nodeService() {, +        return nodesService;, +    }, +, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +    private final Version minCompatibilityVersion;, +        this.minCompatibilityVersion = version.minimumCompatibilityVersion();, +                DiscoveryNode node = new DiscoveryNode("#transport#-" + tempNodeIdGenerator.incrementAndGet(), transportAddress, minCompatibilityVersion);, +++ b/src/test/java/org/elasticsearch/VersionTests.java, +, +    @Test, +    public void testMinCompatVersion() {, +        assertThat(Version.V_2_0_0.minimumCompatibilityVersion(), equalTo(Version.V_2_0_0));, +        assertThat(Version.V_1_3_0.minimumCompatibilityVersion(), equalTo(Version.V_1_0_0));, +        assertThat(Version.V_1_2_0.minimumCompatibilityVersion(), equalTo(Version.V_1_0_0));, +        assertThat(Version.V_1_2_3.minimumCompatibilityVersion(), equalTo(Version.V_1_0_0));, +        assertThat(Version.V_1_0_0_RC2.minimumCompatibilityVersion(), equalTo(Version.V_1_0_0_RC2));, +    }, +, +++ b/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum compatible version based on the current, +     * version. Ie a node needs to have at least the return version in order, +     * to communicate with a node running the current version. The returned version, +     * is in most of the cases the smallest major version release unless the current version, +     * is a beta or RC release then the version itself is returned., +     */, +    public Version minimumCompatibilityVersion() {, +        return Version.smallest(this, fromId(major * 1000000 + 99));, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    TransportClientNodesService nodeService() {, +        return nodesService;, +    }, +, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java]