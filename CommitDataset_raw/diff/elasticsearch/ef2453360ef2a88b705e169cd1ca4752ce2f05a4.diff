[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +            '\\{lucene_version\\}' : VersionProperties.lucene.replaceAll('-snapshot-\\w+$', ''),, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +            '\\{lucene_version\\}' : VersionProperties.lucene.replaceAll('-snapshot-\\w+$', ''),, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /**, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +     */, +    @Input, +    boolean useMinimumMasterNodes = true, +, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +            '\\{lucene_version\\}' : VersionProperties.lucene.replaceAll('-snapshot-\\w+$', ''),, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /**, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +     */, +    @Input, +    boolean useMinimumMasterNodes = true, +, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +        // we set min master nodes to the total number of nodes in the cluster and, +        // basically skip initial state recovery to allow the cluster to form using a realistic master election, +        // this means all nodes must be up, join the seed node and do a master election. This will also allow new and, +        // old nodes in the BWC case to become the master, +        if (node.config.useMinimumMasterNodes && node.config.numNodes > 1) {, +            esConfig['discovery.zen.minimum_master_nodes'] = node.config.numNodes, +            esConfig['discovery.initial_state_timeout'] = '0s' // don't wait for state.. just start up quickly, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +            '\\{lucene_version\\}' : VersionProperties.lucene.replaceAll('-snapshot-\\w+$', ''),, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /**, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +     */, +    @Input, +    boolean useMinimumMasterNodes = true, +, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +        // we set min master nodes to the total number of nodes in the cluster and, +        // basically skip initial state recovery to allow the cluster to form using a realistic master election, +        // this means all nodes must be up, join the seed node and do a master election. This will also allow new and, +        // old nodes in the BWC case to become the master, +        if (node.config.useMinimumMasterNodes && node.config.numNodes > 1) {, +            esConfig['discovery.zen.minimum_master_nodes'] = node.config.numNodes, +            esConfig['discovery.initial_state_timeout'] = '0s' // don't wait for state.. just start up quickly, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +        // we pass all nodes to the rest cluster to allow the clients to round-robin between them, +        // this is more realistic than just talking to a single node, +        systemProperty('tests.rest.cluster', "${-> nodes.collect{it.httpUri()}.join(",")}"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +            '\\{lucene_version\\}' : VersionProperties.lucene.replaceAll('-snapshot-\\w+$', ''),, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /**, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +     */, +    @Input, +    boolean useMinimumMasterNodes = true, +, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +        // we set min master nodes to the total number of nodes in the cluster and, +        // basically skip initial state recovery to allow the cluster to form using a realistic master election, +        // this means all nodes must be up, join the seed node and do a master election. This will also allow new and, +        // old nodes in the BWC case to become the master, +        if (node.config.useMinimumMasterNodes && node.config.numNodes > 1) {, +            esConfig['discovery.zen.minimum_master_nodes'] = node.config.numNodes, +            esConfig['discovery.initial_state_timeout'] = '0s' // don't wait for state.. just start up quickly]