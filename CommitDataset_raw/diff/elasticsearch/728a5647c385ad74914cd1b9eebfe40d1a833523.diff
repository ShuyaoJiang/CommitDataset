[+++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.indices.fielddata.breaker.InternalCircuitBreakerService;, +        clusterDynamicSettings.addDynamicSetting(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING, Validator.MEMORY_SIZE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.indices.fielddata.breaker.InternalCircuitBreakerService;, +        clusterDynamicSettings.addDynamicSetting(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING, Validator.MEMORY_SIZE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +import static org.elasticsearch.common.unit.MemorySizeValue.parseBytesSizeValueOrHeapRatio;, +, +    public static final Validator MEMORY_SIZE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                parseBytesSizeValueOrHeapRatio(value);, +            } catch (ElasticsearchParseException ex) {, +                return ex.getMessage();, +            }, +            return null;, +        }, +    };, +, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.indices.fielddata.breaker.InternalCircuitBreakerService;, +        clusterDynamicSettings.addDynamicSetting(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING, Validator.MEMORY_SIZE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +import static org.elasticsearch.common.unit.MemorySizeValue.parseBytesSizeValueOrHeapRatio;, +, +    public static final Validator MEMORY_SIZE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                parseBytesSizeValueOrHeapRatio(value);, +            } catch (ElasticsearchParseException ex) {, +                return ex.getMessage();, +            }, +            return null;, +        }, +    };, +, +++ b/src/main/java/org/elasticsearch/common/unit/MemorySizeValue.java, +import org.elasticsearch.ElasticsearchParseException;, +            final String percentAsString = sValue.substring(0, sValue.length() - 1);, +            try {, +                final double percent = Double.parseDouble(percentAsString);, +                if (percent < 0 || percent > 100) {, +                    throw new ElasticsearchParseException("Percentage should be in [0-100], got " + percentAsString);, +                }, +            } catch (NumberFormatException e) {, +                throw new ElasticsearchParseException("Failed to parse [" + percentAsString + "] as a double", e);, +            }, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.indices.fielddata.breaker.InternalCircuitBreakerService;, +        clusterDynamicSettings.addDynamicSetting(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING, Validator.MEMORY_SIZE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +import static org.elasticsearch.common.unit.MemorySizeValue.parseBytesSizeValueOrHeapRatio;, +, +    public static final Validator MEMORY_SIZE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                parseBytesSizeValueOrHeapRatio(value);, +            } catch (ElasticsearchParseException ex) {, +                return ex.getMessage();, +            }, +            return null;, +        }, +    };, +, +++ b/src/main/java/org/elasticsearch/common/unit/MemorySizeValue.java, +import org.elasticsearch.ElasticsearchParseException;, +            final String percentAsString = sValue.substring(0, sValue.length() - 1);, +            try {, +                final double percent = Double.parseDouble(percentAsString);, +                if (percent < 0 || percent > 100) {, +                    throw new ElasticsearchParseException("Percentage should be in [0-100], got " + percentAsString);, +                }, +            } catch (NumberFormatException e) {, +                throw new ElasticsearchParseException("Failed to parse [" + percentAsString + "] as a double", e);, +            }, +++ b/src/main/java/org/elasticsearch/indices/fielddata/breaker/InternalCircuitBreakerService.java, +    private static final String DEFAULT_BREAKER_LIMIT = "80%";, +        this.maxBytes = settings.getAsMemory(CIRCUIT_BREAKER_MAX_BYTES_SETTING, DEFAULT_BREAKER_LIMIT).bytes();, +            long newMaxByteSizeValue = settings.getAsMemory(CIRCUIT_BREAKER_MAX_BYTES_SETTING, DEFAULT_BREAKER_LIMIT).bytes();, +            if (newMaxByteSizeValue != maxBytes) {, +                maxBytes = newMaxByteSizeValue;, +                overhead = newOverhead;, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.indices.fielddata.breaker.InternalCircuitBreakerService;, +        clusterDynamicSettings.addDynamicSetting(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING, Validator.MEMORY_SIZE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +import static org.elasticsearch.common.unit.MemorySizeValue.parseBytesSizeValueOrHeapRatio;, +, +    public static final Validator MEMORY_SIZE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                parseBytesSizeValueOrHeapRatio(value);, +            } catch (ElasticsearchParseException ex) {, +                return ex.getMessage();, +            }]