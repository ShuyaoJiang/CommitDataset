[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.ElasticSearchException;, +                    // rethrow the failure if we are going to retry on primary and let parent failure to handle it, +                    if (retryPrimaryException(e)) {, +                        throw (ElasticSearchException) e;, +                    }, +                    // rethrow the failure if we are going to retry on primary and let parent failure to handle it, +                    if (retryPrimaryException(e)) {, +                        throw (ElasticSearchException) e;, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.ElasticSearchException;, +                    // rethrow the failure if we are going to retry on primary and let parent failure to handle it, +                    if (retryPrimaryException(e)) {, +                        throw (ElasticSearchException) e;, +                    }, +                    // rethrow the failure if we are going to retry on primary and let parent failure to handle it, +                    if (retryPrimaryException(e)) {, +                        throw (ElasticSearchException) e;, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +    protected boolean retryPrimaryException(Throwable e) {, +        Throwable cause = ExceptionsHelper.unwrapCause(e);, +        return cause instanceof IndexShardMissingException ||, +                cause instanceof IllegalIndexShardStateException ||, +                cause instanceof IndexMissingException;, +    }, +, +    /**, +     * Should an exception be ignored when the operation is performed on the replica., +     */, +    boolean ignoreReplicaException(Throwable e) {, +        Throwable cause = ExceptionsHelper.unwrapCause(e);, +        if (cause instanceof IllegalIndexShardStateException) {, +            return true;, +        }, +        if (cause instanceof IndexMissingException) {, +            return true;, +        }, +        if (cause instanceof IndexShardMissingException) {, +            return true;, +        }, +        if (cause instanceof ConnectTransportException) {, +            return true;, +        }, +        // on version conflict or document missing, it means, +        // that a news change has crept into the replica, and its fine, +        if (cause instanceof VersionConflictEngineException) {, +            return true;, +        }, +        // same here, +        if (cause instanceof DocumentAlreadyExistsEngineException) {, +            return true;, +        }, +        return false;, +    }, +, +                if (retryPrimaryException(e)) {]