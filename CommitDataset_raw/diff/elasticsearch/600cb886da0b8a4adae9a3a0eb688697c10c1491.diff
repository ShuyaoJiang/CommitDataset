[+++ /dev/null, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.discovery;, +, +import com.google.common.base.Predicate;, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.*;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.cluster.routing.DjbHashFunction;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Priority;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +import org.elasticsearch.discovery.zen.elect.ElectMasterService;, +import org.elasticsearch.discovery.zen.fd.FaultDetection;, +import org.elasticsearch.discovery.zen.membership.MembershipAction;, +import org.elasticsearch.discovery.zen.ping.ZenPing;, +import org.elasticsearch.discovery.zen.ping.ZenPingService;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +import org.elasticsearch.discovery.zen.publish.PublishClusterStateAction;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.elasticsearch.test.InternalTestCluster;, +import org.elasticsearch.test.discovery.ClusterDiscoveryConfiguration;, +import org.elasticsearch.test.disruption.*;, +import org.elasticsearch.test.junit.annotations.TestLogging;, +import org.elasticsearch.test.transport.MockTransportService;, +import org.elasticsearch.transport.*;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.util.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.hamcrest.Matchers.*;, +, +/**, + */, +@LuceneTestCase.Slow, +@ClusterScope(scope = Scope.TEST, numDataNodes = 0, transportClientRatio = 0), +public class DiscoveryWithServiceDisruptionsTests extends ElasticsearchIntegrationTest {, +, +    private static final TimeValue DISRUPTION_HEALING_OVERHEAD = TimeValue.timeValueSeconds(40); // we use 30s as timeout in many places., +, +    private ClusterDiscoveryConfiguration discoveryConfig;, +, +, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return discoveryConfig.node(nodeOrdinal);, +    }, +, +    @Before, +    public void clearConfig() {, +        discoveryConfig = null;, +    }, +, +    @Override, +    protected int numberOfShards() {, +        return 3;]