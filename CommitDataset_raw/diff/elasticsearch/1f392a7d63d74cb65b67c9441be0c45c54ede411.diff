[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/permission/ApplicationPermission.java, +                final Set<ApplicationPrivilege> checkPrivileges = ApplicationPrivilege.get(applicationName, nameSet, storedPrivileges);, +                logger.trace("Resolved privileges [{}] for [{},{}]", checkPrivileges, applicationName, nameSet);, +                for (ApplicationPrivilege checkPrivilege : checkPrivileges) {, +                    assert Automatons.predicate(applicationName).test(checkPrivilege.getApplication()) : "Privilege " + checkPrivilege +, +                        " should have application " + applicationName;, +        }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/permission/ApplicationPermission.java, +                final Set<ApplicationPrivilege> checkPrivileges = ApplicationPrivilege.get(applicationName, nameSet, storedPrivileges);, +                logger.trace("Resolved privileges [{}] for [{},{}]", checkPrivileges, applicationName, nameSet);, +                for (ApplicationPrivilege checkPrivilege : checkPrivileges) {, +                    assert Automatons.predicate(applicationName).test(checkPrivilege.getApplication()) : "Privilege " + checkPrivilege +, +                        " should have application " + applicationName;, +        }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ApplicationPrivilege.java, +import org.elasticsearch.xpack.core.security.support.Automatons;, +import java.util.function.Predicate;, +            String suffix = parts[1];, +            if (allowWildcard && suffix.endsWith("*")) {, +                suffix = suffix.substring(0, suffix.length() - 1);, +            }, +     * Finds or creates a collection of application privileges with the provided names., +     * If application is a wildcard, it will be expanded to all matching application names in {@code stored}, +    public static Set<ApplicationPrivilege> get(String application, Set<String> name, Collection<ApplicationPrivilegeDescriptor> stored) {, +            return Collections.singleton(NONE.apply(application));, +        } else if (application.contains("*")) {, +            Predicate<String> predicate = Automatons.predicate(application);, +            final Set<ApplicationPrivilege> result = stored.stream(), +                .map(ApplicationPrivilegeDescriptor::getApplication), +                .filter(predicate), +                .distinct(), +                .map(appName -> resolve(appName, name, stored)), +                .collect(Collectors.toSet());, +            if (result.isEmpty()) {, +                return Collections.singleton(resolve(application, name, Collections.emptyMap()));, +                return result;, +            }, +        } else {, +            return Collections.singleton(resolve(application, name, stored));, +        }, +    }, +, +    private static ApplicationPrivilege resolve(String application, Set<String> name, Collection<ApplicationPrivilegeDescriptor> stored) {, +        final Map<String, ApplicationPrivilegeDescriptor> lookup = stored.stream(), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/permission/ApplicationPermission.java, +                final Set<ApplicationPrivilege> checkPrivileges = ApplicationPrivilege.get(applicationName, nameSet, storedPrivileges);, +                logger.trace("Resolved privileges [{}] for [{},{}]", checkPrivileges, applicationName, nameSet);, +                for (ApplicationPrivilege checkPrivilege : checkPrivileges) {, +                    assert Automatons.predicate(applicationName).test(checkPrivilege.getApplication()) : "Privilege " + checkPrivilege +, +                        " should have application " + applicationName;, +        }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ApplicationPrivilege.java, +import org.elasticsearch.xpack.core.security.support.Automatons;, +import java.util.function.Predicate;, +            String suffix = parts[1];, +            if (allowWildcard && suffix.endsWith("*")) {, +                suffix = suffix.substring(0, suffix.length() - 1);, +            }, +     * Finds or creates a collection of application privileges with the provided names., +     * If application is a wildcard, it will be expanded to all matching application names in {@code stored}, +    public static Set<ApplicationPrivilege> get(String application, Set<String> name, Collection<ApplicationPrivilegeDescriptor> stored) {, +            return Collections.singleton(NONE.apply(application));, +        } else if (application.contains("*")) {, +            Predicate<String> predicate = Automatons.predicate(application);, +            final Set<ApplicationPrivilege> result = stored.stream(), +                .map(ApplicationPrivilegeDescriptor::getApplication), +                .filter(predicate), +                .distinct(), +                .map(appName -> resolve(appName, name, stored)), +                .collect(Collectors.toSet());, +            if (result.isEmpty()) {, +                return Collections.singleton(resolve(application, name, Collections.emptyMap()));, +                return result;, +            }, +        } else {, +            return Collections.singleton(resolve(application, name, stored));, +        }, +    }, +, +    private static ApplicationPrivilege resolve(String application, Set<String> name, Collection<ApplicationPrivilegeDescriptor> stored) {, +        final Map<String, ApplicationPrivilegeDescriptor> lookup = stored.stream(), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ApplicationPrivilegeDescriptor.java, +import static org.elasticsearch.common.Strings.collectionToCommaDelimitedString;, +, +    @Override, +    public String toString() {, +        return getClass().getSimpleName() + "{[" + application + "],[" + name + "],[" + collectionToCommaDelimitedString(actions) + "]}";, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/permission/ApplicationPermission.java, +                final Set<ApplicationPrivilege> checkPrivileges = ApplicationPrivilege.get(applicationName, nameSet, storedPrivileges);, +                logger.trace("Resolved privileges [{}] for [{},{}]", checkPrivileges, applicationName, nameSet);, +                for (ApplicationPrivilege checkPrivilege : checkPrivileges) {, +                    assert Automatons.predicate(applicationName).test(checkPrivilege.getApplication()) : "Privilege " + checkPrivilege +, +                        " should have application " + applicationName;, +        }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ApplicationPrivilege.java, +import org.elasticsearch.xpack.core.security.support.Automatons;, +import java.util.function.Predicate;, +            String suffix = parts[1];]