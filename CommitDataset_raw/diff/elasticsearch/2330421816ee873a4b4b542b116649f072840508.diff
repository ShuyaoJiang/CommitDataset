[+++ b/docs/reference/modules/discovery/zen.asciidoc, +with a timeout defaulting at 20 times the ping timeout., +coming[1.3.0,Previously defaulted to 10 times the ping timeout]., +++ b/docs/reference/modules/discovery/zen.asciidoc, +with a timeout defaulting at 20 times the ping timeout., +coming[1.3.0,Previously defaulted to 10 times the ping timeout]., +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        this.joinTimeout = settings.getAsTime("discovery.zen.join_timeout", TimeValue.timeValueMillis(pingTimeout.millis() * 20));, +                    logger.trace("got a new state from master node while joining the cluster, this is a valid state during the last phase of the join process");, +    private void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {, +            ClusterState state = clusterService.state();, +            clusterService.submitStateUpdateTask("zen-disco-receive(join from node[" + node + "])", Priority.IMMEDIATE, new ProcessedClusterStateUpdateTask() {, +                        logger.info("received a join request for an existing node [{}]", node);, +                    callback.onFailure(t);, +                }, +, +                @Override, +                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                    callback.onSuccess(newState);, +        public void onJoin(DiscoveryNode node, MembershipAction.JoinCallback callback) {, +            handleJoinRequest(node, callback);, +++ b/docs/reference/modules/discovery/zen.asciidoc, +with a timeout defaulting at 20 times the ping timeout., +coming[1.3.0,Previously defaulted to 10 times the ping timeout]., +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        this.joinTimeout = settings.getAsTime("discovery.zen.join_timeout", TimeValue.timeValueMillis(pingTimeout.millis() * 20));, +                    logger.trace("got a new state from master node while joining the cluster, this is a valid state during the last phase of the join process");, +    private void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {, +            ClusterState state = clusterService.state();, +            clusterService.submitStateUpdateTask("zen-disco-receive(join from node[" + node + "])", Priority.IMMEDIATE, new ProcessedClusterStateUpdateTask() {, +                        logger.info("received a join request for an existing node [{}]", node);, +                    callback.onFailure(t);, +                }, +, +                @Override, +                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                    callback.onSuccess(newState);, +        public void onJoin(DiscoveryNode node, MembershipAction.JoinCallback callback) {, +            handleJoinRequest(node, callback);, +++ b/src/main/java/org/elasticsearch/discovery/zen/membership/MembershipAction.java, +    public static interface JoinCallback {, +        void onSuccess(ClusterState state);, +, +        void onFailure(Throwable t);, +    }, +, +        void onJoin(DiscoveryNode node, JoinCallback callback);, +        public void messageReceived(final JoinRequest request, final TransportChannel channel) throws Exception {, +            listener.onJoin(request.node, new JoinCallback() {, +                @Override, +                public void onSuccess(ClusterState state) {, +                    try {, +                            channel.sendResponse(new JoinResponse(state));, +                    } catch (Throwable t) {, +                        onFailure(t);, +                    }, +                }, +, +                @Override, +                public void onFailure(Throwable t) {, +                    try {, +                        channel.sendResponse(t);, +                    } catch (Throwable e) {, +                        logger.warn("failed to send back failure on join request", e);, +                    }, +                }, +            });]