[+++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ByteSizeValue implements Writeable {, +    private final long size;, +    private final ByteSizeUnit sizeUnit;, +    public ByteSizeValue(StreamInput in) throws IOException {, +        size = in.readVLong();, +        sizeUnit = ByteSizeUnit.BYTES;, +    }, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVLong(bytes());, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ByteSizeValue implements Writeable {, +    private final long size;, +    private final ByteSizeUnit sizeUnit;, +    public ByteSizeValue(StreamInput in) throws IOException {, +        size = in.readVLong();, +        sizeUnit = ByteSizeUnit.BYTES;, +    }, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVLong(bytes());, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverFilesRecoveryException.java, +        totalFilesSize = new ByteSizeValue(in);, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class ByteSizeValue implements Writeable {, +    private final long size;, +    private final ByteSizeUnit sizeUnit;, +    public ByteSizeValue(StreamInput in) throws IOException {, +        size = in.readVLong();, +        sizeUnit = ByteSizeUnit.BYTES;, +    }, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVLong(bytes());, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverFilesRecoveryException.java, +        totalFilesSize = new ByteSizeValue(in);, +++ b/core/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import java.io.IOException;, +, +, +    public void testSerialization() throws IOException {, +        //negative values cannot be serialized at the moment, we do abs but that is not enough with Long.MIN_VALUE, +        long l = Long.MIN_VALUE;, +        while (l == Long.MIN_VALUE) {, +            l = randomLong();, +        }, +        ByteSizeValue byteSizeValue = new ByteSizeValue(Math.abs(l), randomFrom(ByteSizeUnit.values()));, +        try (BytesStreamOutput out = new BytesStreamOutput()) {, +            byteSizeValue.writeTo(out);, +            try (StreamInput in = out.bytes().streamInput()) {, +                ByteSizeValue deserializedByteSizeValue = new ByteSizeValue(in);, +                assertEquals(byteSizeValue, deserializedByteSizeValue);, +            }, +        }, +    }]