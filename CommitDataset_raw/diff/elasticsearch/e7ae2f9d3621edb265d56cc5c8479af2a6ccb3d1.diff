[+++ b/server/src/main/java/org/elasticsearch/action/resync/ResyncReplicationRequest.java, +import org.elasticsearch.action.index.IndexRequest;, +import java.util.Objects;, +    private long maxSeenAutoIdTimestampOnPrimary;, +    public ResyncReplicationRequest(final ShardId shardId, final long trimAboveSeqNo, final long maxSeenAutoIdTimestampOnPrimary,, +        this.maxSeenAutoIdTimestampOnPrimary = maxSeenAutoIdTimestampOnPrimary;, +    public long getMaxSeenAutoIdTimestampOnPrimary() {, +        return maxSeenAutoIdTimestampOnPrimary;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            maxSeenAutoIdTimestampOnPrimary = in.readZLong();, +        } else {, +            maxSeenAutoIdTimestampOnPrimary = IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP;, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            out.writeZLong(maxSeenAutoIdTimestampOnPrimary);, +        }, +        return trimAboveSeqNo == that.trimAboveSeqNo && maxSeenAutoIdTimestampOnPrimary == that.maxSeenAutoIdTimestampOnPrimary, +        return Objects.hash(trimAboveSeqNo, maxSeenAutoIdTimestampOnPrimary, operations);, +            ", maxSeenAutoIdTimestampOnPrimary=" + maxSeenAutoIdTimestampOnPrimary +, +++ b/server/src/main/java/org/elasticsearch/action/resync/ResyncReplicationRequest.java, +import org.elasticsearch.action.index.IndexRequest;, +import java.util.Objects;, +    private long maxSeenAutoIdTimestampOnPrimary;, +    public ResyncReplicationRequest(final ShardId shardId, final long trimAboveSeqNo, final long maxSeenAutoIdTimestampOnPrimary,, +        this.maxSeenAutoIdTimestampOnPrimary = maxSeenAutoIdTimestampOnPrimary;, +    public long getMaxSeenAutoIdTimestampOnPrimary() {, +        return maxSeenAutoIdTimestampOnPrimary;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            maxSeenAutoIdTimestampOnPrimary = in.readZLong();, +        } else {, +            maxSeenAutoIdTimestampOnPrimary = IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP;, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            out.writeZLong(maxSeenAutoIdTimestampOnPrimary);, +        }, +        return trimAboveSeqNo == that.trimAboveSeqNo && maxSeenAutoIdTimestampOnPrimary == that.maxSeenAutoIdTimestampOnPrimary, +        return Objects.hash(trimAboveSeqNo, maxSeenAutoIdTimestampOnPrimary, operations);, +            ", maxSeenAutoIdTimestampOnPrimary=" + maxSeenAutoIdTimestampOnPrimary +, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        /*, +         * Operations received from resync do not have auto_id_timestamp individually, we need to bootstrap this max_seen_timestamp, +         * (at least the highest timestamp from any of these operations) to make sure that we will disable optimization for the same, +         * append-only requests with timestamp (sources of these operations) that are replicated; otherwise we may have duplicates., +         */, +        replica.updateMaxUnsafeAutoIdTimestamp(request.getMaxSeenAutoIdTimestampOnPrimary());, +++ b/server/src/main/java/org/elasticsearch/action/resync/ResyncReplicationRequest.java, +import org.elasticsearch.action.index.IndexRequest;, +import java.util.Objects;, +    private long maxSeenAutoIdTimestampOnPrimary;, +    public ResyncReplicationRequest(final ShardId shardId, final long trimAboveSeqNo, final long maxSeenAutoIdTimestampOnPrimary,, +        this.maxSeenAutoIdTimestampOnPrimary = maxSeenAutoIdTimestampOnPrimary;, +    public long getMaxSeenAutoIdTimestampOnPrimary() {, +        return maxSeenAutoIdTimestampOnPrimary;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            maxSeenAutoIdTimestampOnPrimary = in.readZLong();, +        } else {, +            maxSeenAutoIdTimestampOnPrimary = IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP;, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            out.writeZLong(maxSeenAutoIdTimestampOnPrimary);, +        }, +        return trimAboveSeqNo == that.trimAboveSeqNo && maxSeenAutoIdTimestampOnPrimary == that.maxSeenAutoIdTimestampOnPrimary, +        return Objects.hash(trimAboveSeqNo, maxSeenAutoIdTimestampOnPrimary, operations);, +            ", maxSeenAutoIdTimestampOnPrimary=" + maxSeenAutoIdTimestampOnPrimary +, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        /*, +         * Operations received from resync do not have auto_id_timestamp individually, we need to bootstrap this max_seen_timestamp, +         * (at least the highest timestamp from any of these operations) to make sure that we will disable optimization for the same, +         * append-only requests with timestamp (sources of these operations) that are replicated; otherwise we may have duplicates., +         */, +        replica.updateMaxUnsafeAutoIdTimestamp(request.getMaxSeenAutoIdTimestampOnPrimary());, +++ b/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +            // We must capture the timestamp after snapshotting a snapshot of operations to make sure, +            // that the auto_id_timestamp of every operation in the snapshot is at most this value., +            final long maxSeenAutoIdTimestamp = indexShard.getMaxSeenAutoIdTimestamp();, +                startingSeqNo, maxSeqNo, maxSeenAutoIdTimestamp, resyncListener);, +                        long startingSeqNo, long maxSeqNo, long maxSeenAutoIdTimestamp, ActionListener<ResyncTask> listener) {, +                startingSeqNo, maxSeqNo, maxSeenAutoIdTimestamp, wrappedListener).run();, +        private final long maxSeenAutoIdTimestamp;, +                       Translog.Snapshot snapshot, int chunkSizeInBytes, long startingSeqNo, long maxSeqNo,, +                       long maxSeenAutoIdTimestamp, ActionListener<Void> listener) {, +            this.maxSeenAutoIdTimestamp = maxSeenAutoIdTimestamp;, +                    new ResyncReplicationRequest(shardId, trimmedAboveSeqNo, maxSeenAutoIdTimestamp, operations.toArray(EMPTY_ARRAY));, +++ b/server/src/main/java/org/elasticsearch/action/resync/ResyncReplicationRequest.java, +import org.elasticsearch.action.index.IndexRequest;, +import java.util.Objects;, +    private long maxSeenAutoIdTimestampOnPrimary;, +    public ResyncReplicationRequest(final ShardId shardId, final long trimAboveSeqNo, final long maxSeenAutoIdTimestampOnPrimary,, +        this.maxSeenAutoIdTimestampOnPrimary = maxSeenAutoIdTimestampOnPrimary;, +    public long getMaxSeenAutoIdTimestampOnPrimary() {, +        return maxSeenAutoIdTimestampOnPrimary;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {]