[+++ b/core-signatures.txt, +, +@defaultMessage Use XNativeFSLockFactory instead of the buggy NativeFSLockFactory see LUCENE-5738 - remove once Lucene 4.9 is released, +org.apache.lucene.store.NativeFSLockFactory, +++ b/core-signatures.txt, +, +@defaultMessage Use XNativeFSLockFactory instead of the buggy NativeFSLockFactory see LUCENE-5738 - remove once Lucene 4.9 is released, +org.apache.lucene.store.NativeFSLockFactory, +++ b/src/main/java/org/apache/lucene/store/XNativeFSLockFactory.java, +package org.apache.lucene.store;, +, +/*, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements.  See the NOTICE file distributed with, + * this work for additional information regarding copyright ownership., + * The ASF licenses this file to You under the Apache License, Version 2.0, + * (the "License"); you may not use this file except in compliance with, + * the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import java.nio.channels.FileChannel;, +import java.nio.channels.FileLock;, +import java.nio.channels.OverlappingFileLockException;, +import java.nio.file.StandardOpenOption;, +import java.io.File;, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.Version;, +, +/**, + * <p>Implements {@link LockFactory} using native OS file, + * locks.  Note that because this LockFactory relies on, + * java.nio.* APIs for locking, any problems with those APIs, + * will cause locking to fail.  Specifically, on certain NFS, + * environments the java.nio.* locks will fail (the lock can, + * incorrectly be double acquired) whereas {@link, + * SimpleFSLockFactory} worked perfectly in those same, + * environments.  For NFS based access to an index, it's, + * recommended that you try {@link SimpleFSLockFactory}, + * first and work around the one limitation that a lock file, + * could be left when the JVM exits abnormally.</p>, + *, + * <p>The primary benefit of {@link XNativeFSLockFactory} is, + * that locks (not the lock file itsself) will be properly, + * removed (by the OS) if the JVM has an abnormal exit.</p>, + * , + * <p>Note that, unlike {@link SimpleFSLockFactory}, the existence of, + * leftover lock files in the filesystem is fine because the OS, + * will free the locks held against these files even though the, + * files still remain. Lucene will never actively remove the lock, + * files, so although you see them, the index may not be locked.</p>, + *, + * <p>Special care needs to be taken if you change the locking, + * implementation: First be certain that no writer is in fact, + * writing to the index otherwise you can easily corrupt, + * your index. Be sure to do the LockFactory change on all Lucene, + * instances and clean up all leftover lock files before starting, + * the new configuration for the first time. Different implementations, + * can not work together!</p>, + *, + * <p>If you suspect that this or any other LockFactory is, + * not working properly in your environment, you can easily, + * test it by using {@link VerifyingLockFactory}, {@link, + * LockVerifyServer} and {@link LockStressTest}.</p>, + *, + * @see LockFactory, + */, +, +public class XNativeFSLockFactory extends FSLockFactory {, +, +   static {, +       assert Version.CURRENT.luceneVersion == org.apache.lucene.util.Version.LUCENE_48 : "Remove this class in Lucene 4.9";, +   }, +, +  /**, +   * Create a XNativeFSLockFactory instance, with null (unset), +   * lock directory. When you pass this factory to a {@link FSDirectory}, +   * subclass, the lock directory is automatically set to the, +   * directory itself. Be sure to create one instance for each directory, +   * your create!, +   */, +  public XNativeFSLockFactory() {, +    this((File) null);, +  }, +, +  /**, +   * Create a XNativeFSLockFactory instance, storing lock, +   * files into the specified lockDirName:]