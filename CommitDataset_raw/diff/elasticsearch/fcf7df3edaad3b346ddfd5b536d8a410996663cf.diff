[+++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +++ b/server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +, +            AccessController.doPrivileged(new PrivilegedAction<Void>() {, +                @SuppressLoggerChecks(reason = "safely delegates to logger"), +                @Override, +                public Void run() {, +                    return null;, +                }, +            });, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +                    "org.elasticsearch.common.logging.DeprecationLogger\\$2\\.run",, +++ b/server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +, +            AccessController.doPrivileged(new PrivilegedAction<Void>() {, +                @SuppressLoggerChecks(reason = "safely delegates to logger"), +                @Override, +                public Void run() {, +                    return null;, +                }, +            });, +++ b/server/src/test/java/org/elasticsearch/common/logging/DeprecationLoggerTests.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.simple.SimpleLoggerContext;, +import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;, +import org.apache.logging.log4j.spi.ExtendedLogger;, +import org.apache.logging.log4j.spi.LoggerContext;, +import org.apache.logging.log4j.spi.LoggerContextFactory;, +import java.net.URI;, +import java.nio.charset.StandardCharsets;, +import java.security.AccessControlContext;, +import java.security.AccessController;, +import java.security.Permissions;, +import java.security.PrivilegedAction;, +import java.security.ProtectionDomain;, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.hamcrest.core.Is.is;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +    public void testLogPermissions() {, +        AtomicBoolean supplierCalled = new AtomicBoolean(false);, +, +        // mocking the logger used inside DeprecationLogger requires heavy hacking..., +        Logger parentLogger = mock(Logger.class);, +        when(parentLogger.getName()).thenReturn("logger");, +        ExtendedLogger mockLogger = mock(ExtendedLogger.class);, +        doAnswer(invocationOnMock -> {, +            supplierCalled.set(true);, +            createTempDir(); // trigger file permission, like rolling logs would, +            return null;, +        }).when(mockLogger).warn("foo", new Object[] {"bar"});, +        final LoggerContext context = new SimpleLoggerContext() {, +            @Override, +            public ExtendedLogger getLogger(String name) {, +                return mockLogger;, +            }, +        };, +, +        final LoggerContextFactory originalFactory = LogManager.getFactory();, +        try {, +            LogManager.setFactory(new SimpleLoggerContextFactory() {, +                @Override, +                public LoggerContext getContext(String fqcn, ClassLoader loader, Object externalContext, boolean currentContext,, +                                                URI configLocation, String name) {, +                    return context;, +                }, +            });, +            DeprecationLogger deprecationLogger = new DeprecationLogger(parentLogger);, +, +            AccessControlContext noPermissionsAcc = new AccessControlContext(, +                new ProtectionDomain[]{new ProtectionDomain(null, new Permissions())}, +            );, +            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {, +                deprecationLogger.deprecated("foo", "bar");, +                return null;, +            }, noPermissionsAcc);, +            assertThat("supplier called", supplierCalled.get(), is(true));, +        } finally {, +            LogManager.setFactory(originalFactory);, +        }]