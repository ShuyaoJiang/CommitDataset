[+++ b/docs/en/commands/certutil.asciidoc, +certificates and keys and packages them into a zip file., +If you specify the `--keep-ca-key`, `--multiple` or `--in` parameters,, +the command produces a zip file containing the generated certificates and keys., +++ b/docs/en/commands/certutil.asciidoc, +certificates and keys and packages them into a zip file., +If you specify the `--keep-ca-key`, `--multiple` or `--in` parameters,, +the command produces a zip file containing the generated certificates and keys., +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/CertificateTool.java, +        OptionSpec<Void> multipleNodesSpec;, +            multipleNodesSpec = parser.accepts("multiple", "generate files for multiple instances");, +            nameSpec = parser.accepts("name", "name of the generated certificate").availableUnless(multipleNodesSpec).withRequiredArg();, +            dnsNamesSpec = parser.accepts("dns", "comma separated DNS names").availableUnless(multipleNodesSpec).withRequiredArg();, +            ipAddressesSpec = parser.accepts("ip", "comma separated IP addresses").availableUnless(multipleNodesSpec).withRequiredArg();, +            if (options.has(multipleNodesSpec)) {, +            terminal.println("If you specify any of the following options:");, +            terminal.println("    * -pem (PEM formatted output)");, +            terminal.println("    * -keep-ca-key (retain generated CA key)");, +            terminal.println("    * -multiple (generate multiple certificates)");, +            terminal.println("    * -in (generate certificates from an input file)");, +            terminal.println("then the output will be be a zip file containing individual certificate/key files");, +            final boolean writeZipFile = options.has(multipleNodesSpec) || options.has(inputFileSpec) || keepCaKey || usePemFormat;, +++ b/docs/en/commands/certutil.asciidoc, +certificates and keys and packages them into a zip file., +If you specify the `--keep-ca-key`, `--multiple` or `--in` parameters,, +the command produces a zip file containing the generated certificates and keys., +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/CertificateTool.java, +        OptionSpec<Void> multipleNodesSpec;, +            multipleNodesSpec = parser.accepts("multiple", "generate files for multiple instances");, +            nameSpec = parser.accepts("name", "name of the generated certificate").availableUnless(multipleNodesSpec).withRequiredArg();, +            dnsNamesSpec = parser.accepts("dns", "comma separated DNS names").availableUnless(multipleNodesSpec).withRequiredArg();, +            ipAddressesSpec = parser.accepts("ip", "comma separated IP addresses").availableUnless(multipleNodesSpec).withRequiredArg();, +            if (options.has(multipleNodesSpec)) {, +            terminal.println("If you specify any of the following options:");, +            terminal.println("    * -pem (PEM formatted output)");, +            terminal.println("    * -keep-ca-key (retain generated CA key)");, +            terminal.println("    * -multiple (generate multiple certificates)");, +            terminal.println("    * -in (generate certificates from an input file)");, +            terminal.println("then the output will be be a zip file containing individual certificate/key files");, +            final boolean writeZipFile = options.has(multipleNodesSpec) || options.has(inputFileSpec) || keepCaKey || usePemFormat;, +++ b/qa/security-tools-tests/src/test/java/org/elasticsearch/xpack/core/ssl/CertificateToolTests.java, +import org.elasticsearch.core.internal.io.IOUtils;, +import java.util.concurrent.atomic.AtomicBoolean;, +    public void testZipOutputFromCommandLineOptions() throws Exception {, +        final Path tempDir = initTempDir();, +, +        final MockTerminal terminal = new MockTerminal();, +        Environment env = TestEnvironment.newEnvironment(Settings.builder().put("path.home", tempDir).build());, +, +        final Path zip = tempDir.resolve("pem.zip");, +, +        final AtomicBoolean isZip = new AtomicBoolean(false);, +        final GenerateCertificateCommand genCommand = new PathAwareGenerateCertificateCommand(null, zip) {, +            @Override, +            void generateAndWriteSignedCertificates(Path output, boolean writeZipFile, OptionSet options,, +                                                    Collection<CertificateInformation> certs, CAInfo caInfo,, +                                                    Terminal terminal) throws Exception {, +                isZip.set(writeZipFile);, +                // do nothing, all we care about is the "zip" flag, +            }, +, +            @Override, +            Collection<CertificateInformation> getCertificateInformationList(Terminal terminal, OptionSet options) throws Exception {, +                // Regardless of the commandline options, just work with a single cert, +                return Collections.singleton(new CertificateInformation("node", "node",, +                        Collections.emptyList(), Collections.emptyList(), Collections.emptyList()));, +            }, +        };, +, +        final String optionThatTriggersZip = randomFrom("-pem", "-keep-ca-key", "-multiple", "-in=input.yml");, +        final OptionSet genOptions = genCommand.getParser().parse(, +                "-out", "<zip>",, +                optionThatTriggersZip, +        );, +        genCommand.execute(terminal, genOptions, env);, +, +        assertThat("For command line option " + optionThatTriggersZip, isZip.get(), equalTo(true));, +    }, +]