[+++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/ExampleRealmExtension.java, +import org.elasticsearch.xpack.security.authc.Realm;, +import java.util.Collections;, +import java.util.Map;, +, +    static {, +        // check that the extension's policy works., +        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {, +            System.getSecurityManager().checkPrintJobAccess();, +            return null;, +        });, +    }, +, +    }, +, +    @Override, +    public Map<String, Realm.Factory> getRealms() {, +        return Collections.singletonMap(CustomRealm.TYPE, CustomRealm::new);, +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/ExampleRealmExtension.java, +import org.elasticsearch.xpack.security.authc.Realm;, +import java.util.Collections;, +import java.util.Map;, +, +    static {, +        // check that the extension's policy works., +        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {, +            System.getSecurityManager().checkPrintJobAccess();, +            return null;, +        });, +    }, +, +    }, +, +    @Override, +    public Map<String, Realm.Factory> getRealms() {, +        return Collections.singletonMap(CustomRealm.TYPE, CustomRealm::new);, +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/realm/CustomRealm.java, +public class CustomRealm extends Realm {, +    public User authenticate(AuthenticationToken authToken) {, +        UsernamePasswordToken token = (UsernamePasswordToken)authToken;, +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/ExampleRealmExtension.java, +import org.elasticsearch.xpack.security.authc.Realm;, +import java.util.Collections;, +import java.util.Map;, +, +    static {, +        // check that the extension's policy works., +        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {, +            System.getSecurityManager().checkPrintJobAccess();, +            return null;, +        });, +    }, +, +    }, +, +    @Override, +    public Map<String, Realm.Factory> getRealms() {, +        return Collections.singletonMap(CustomRealm.TYPE, CustomRealm::new);, +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/realm/CustomRealm.java, +public class CustomRealm extends Realm {, +    public User authenticate(AuthenticationToken authToken) {, +        UsernamePasswordToken token = (UsernamePasswordToken)authToken;, +++ /dev/null, +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/ExampleRealmExtension.java, +import org.elasticsearch.xpack.security.authc.Realm;, +import java.util.Collections;, +import java.util.Map;, +, +    static {, +        // check that the extension's policy works., +        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {, +            System.getSecurityManager().checkPrintJobAccess();, +            return null;, +        });, +    }, +, +    }, +, +    @Override, +    public Map<String, Realm.Factory> getRealms() {, +        return Collections.singletonMap(CustomRealm.TYPE, CustomRealm::new);, +++ b/elasticsearch/qa/security-example-realm/src/main/java/org/elasticsearch/example/realm/CustomRealm.java, +public class CustomRealm extends Realm {, +    public User authenticate(AuthenticationToken authToken) {, +        UsernamePasswordToken token = (UsernamePasswordToken)authToken;, +++ /dev/null, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.util.HashMap;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.extensions.XPackExtension;, +import org.elasticsearch.xpack.security.authc.AuthenticationFailureHandler;, +import org.elasticsearch.xpack.security.authc.DefaultAuthenticationFailureHandler;, +import org.elasticsearch.xpack.security.authc.Realm;, +import org.elasticsearch.xpack.security.authc.activedirectory.ActiveDirectoryRealm;, +import org.elasticsearch.xpack.security.authc.esnative.NativeRealm;, +import org.elasticsearch.xpack.security.authc.esnative.ReservedRealm;, +import org.elasticsearch.xpack.security.authc.file.FileRealm;, +import org.elasticsearch.xpack.security.authc.ldap.LdapRealm;, +import org.elasticsearch.xpack.security.authc.pki.PkiRealm;, +    public Collection<Object> createComponents(InternalClient client, ThreadPool threadPool,]