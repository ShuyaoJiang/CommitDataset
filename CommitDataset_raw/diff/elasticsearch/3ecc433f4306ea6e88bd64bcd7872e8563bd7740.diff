[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/support/LdapSession.java, +    protected final LDAPInterface connection;, +        this.connection = connection;, +        if (connection instanceof LDAPConnection) {, +            ((LDAPConnection) connection).close();, +     * @return the connection to the LDAP/AD server of this session, +     */, +    public LDAPInterface getConnection() {, +        return connection;, +    }, +, +    /**, +        groupsResolver.resolve(connection, userDn, timeout, logger, attributes, listener);, +        metaDataResolver.resolve(connection, userDn, timeout, logger, attributes, listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/support/LdapSession.java, +    protected final LDAPInterface connection;, +        this.connection = connection;, +        if (connection instanceof LDAPConnection) {, +            ((LDAPConnection) connection).close();, +     * @return the connection to the LDAP/AD server of this session, +     */, +    public LDAPInterface getConnection() {, +        return connection;, +    }, +, +    /**, +        groupsResolver.resolve(connection, userDn, timeout, logger, attributes, listener);, +        metaDataResolver.resolve(connection, userDn, timeout, logger, attributes, listener);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/authc/ldap/AbstractActiveDirectoryIntegTests.java, +import com.unboundid.ldap.sdk.LDAPConnection;, +import com.unboundid.ldap.sdk.LDAPConnectionPool;, +import com.unboundid.ldap.sdk.LDAPException;, +import com.unboundid.ldap.sdk.LDAPInterface;, +, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +, +    protected static void assertConnectionCanReconnect(LDAPInterface conn) {, +        AccessController.doPrivileged(new PrivilegedAction<Void>() {, +            @Override, +            public Void run() {, +                try {, +                    if (conn instanceof LDAPConnection) {, +                        ((LDAPConnection) conn).reconnect();, +                    } else if (conn instanceof LDAPConnectionPool) {, +                        try (LDAPConnection c = ((LDAPConnectionPool) conn).getConnection()) {, +                            c.reconnect();, +                        }, +                    }, +                } catch (LDAPException e) {, +                    fail("Connection is not valid. It will not work on follow referral flow.");, +                }, +                return null;, +            }, +        });, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/support/LdapSession.java, +    protected final LDAPInterface connection;, +        this.connection = connection;, +        if (connection instanceof LDAPConnection) {, +            ((LDAPConnection) connection).close();, +     * @return the connection to the LDAP/AD server of this session, +     */, +    public LDAPInterface getConnection() {, +        return connection;, +    }, +, +    /**, +        groupsResolver.resolve(connection, userDn, timeout, logger, attributes, listener);, +        metaDataResolver.resolve(connection, userDn, timeout, logger, attributes, listener);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/authc/ldap/AbstractActiveDirectoryIntegTests.java, +import com.unboundid.ldap.sdk.LDAPConnection;, +import com.unboundid.ldap.sdk.LDAPConnectionPool;, +import com.unboundid.ldap.sdk.LDAPException;, +import com.unboundid.ldap.sdk.LDAPInterface;, +, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +, +    protected static void assertConnectionCanReconnect(LDAPInterface conn) {, +        AccessController.doPrivileged(new PrivilegedAction<Void>() {, +            @Override, +            public Void run() {, +                try {, +                    if (conn instanceof LDAPConnection) {]