[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import java.util.concurrent.TimeUnit;, +        final long startTimeNanos = System.nanoTime();, +        executeBulk(bulkRequest, startTimeNanos, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTimeNanos) {, +        return TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNanos);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTimeNanos, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import java.util.concurrent.TimeUnit;, +        final long startTimeNanos = System.nanoTime();, +        executeBulk(bulkRequest, startTimeNanos, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTimeNanos) {, +        return TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNanos);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTimeNanos, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTimeNanos)));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.Build;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.transport.TransportSettings;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +        enforceOrLogLimits(nodeSettings);, +    static final Set<Setting> ENFORCE_SETTINGS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(, +        TransportSettings.BIND_HOST,, +        TransportSettings.HOST,, +        TransportSettings.PUBLISH_HOST,, +        NetworkService.GLOBAL_NETWORK_HOST_SETTING,, +        NetworkService.GLOBAL_NETWORK_BINDHOST_SETTING,, +        NetworkService.GLOBAL_NETWORK_PUBLISHHOST_SETTING, +    )));, +, +    private static boolean enforceLimits(Settings settings) {, +        if (Build.CURRENT.isSnapshot()) {, +            return false;, +        }, +        for (Setting setting : ENFORCE_SETTINGS) {, +            if (setting.exists(settings)) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +    static void enforceOrLogLimits(Settings settings) { // pkg private for testing, +        /* We enforce limits once any network host is configured. In this case we assume the node is running in production, +         * and all production limit checks must pass. This should be extended as we go to settings like:, +         *   - discovery.zen.minimum_master_nodes, +         *   - discovery.zen.ping.unicast.hosts is set if we use zen disco, +         *   - ensure we can write in all data directories, +         *   - fail if mlockall failed and was configured, +         *   - fail if vm.max_map_count is under a certain limit (not sure if this works cross platform), +         *   - fail if the default cluster.name is used, if this is setup on network a real clustername should be used?*/, +        final boolean enforceLimits = enforceLimits(settings);, +        final ESLogger logger = Loggers.getLogger(Bootstrap.class);, +        final long maxFileDescriptorCount = ProcessProbe.getInstance().getMaxFileDescriptorCount();, +        if (maxFileDescriptorCount != -1) {, +            final int fileDescriptorCountThreshold = (1 << 16);, +            if (maxFileDescriptorCount < fileDescriptorCountThreshold) {, +                if (enforceLimits){, +                    throw new IllegalStateException("max file descriptors [" + maxFileDescriptorCount, +                        + "] for elasticsearch process likely too low, increase it to at least [" + fileDescriptorCountThreshold +"]");, +                }]