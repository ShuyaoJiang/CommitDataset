[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest;, +    static Request deleteRepository(DeleteRepositoryRequest deleteRepositoryRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(deleteRepositoryRequest.name()).build();, +        Request request = new Request(HttpDelete.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(deleteRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(deleteRepositoryRequest.timeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest;, +    static Request deleteRepository(DeleteRepositoryRequest deleteRepositoryRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(deleteRepositoryRequest.name()).build();, +        Request request = new Request(HttpDelete.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(deleteRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(deleteRepositoryRequest.timeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest;, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryResponse;, +, +    /**, +     * Deletes a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public DeleteRepositoryResponse deleteRepository(DeleteRepositoryRequest deleteRepositoryRequest, Header... headers), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(deleteRepositoryRequest, RequestConverters::deleteRepository,, +            DeleteRepositoryResponse::fromXContent, emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously deletes a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public void deleteRepositoryAsync(DeleteRepositoryRequest deleteRepositoryRequest,, +                                      ActionListener<DeleteRepositoryResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(deleteRepositoryRequest, RequestConverters::deleteRepository,, +            DeleteRepositoryResponse::fromXContent, listener, emptySet(), headers);, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest;, +    static Request deleteRepository(DeleteRepositoryRequest deleteRepositoryRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot").addPathPart(deleteRepositoryRequest.name()).build();, +        Request request = new Request(HttpDelete.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(deleteRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(deleteRepositoryRequest.timeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest;, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryResponse;, +, +    /**, +     * Deletes a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public DeleteRepositoryResponse deleteRepository(DeleteRepositoryRequest deleteRepositoryRequest, Header... headers), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(deleteRepositoryRequest, RequestConverters::deleteRepository,, +            DeleteRepositoryResponse::fromXContent, emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously deletes a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public void deleteRepositoryAsync(DeleteRepositoryRequest deleteRepositoryRequest,, +                                      ActionListener<DeleteRepositoryResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(deleteRepositoryRequest, RequestConverters::deleteRepository,, +            DeleteRepositoryResponse::fromXContent, listener, emptySet(), headers);, +    }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest;, +        String repository = randomIndicesNames(1, 1)[0];, +    public void testDeleteRepository() {, +        Map<String, String> expectedParams = new HashMap<>();, +        String repository = randomIndicesNames(1, 1)[0];, +, +        StringBuilder endpoint = new StringBuilder("/_snapshot/" + repository);, +, +        DeleteRepositoryRequest deleteRepositoryRequest = new DeleteRepositoryRequest();]