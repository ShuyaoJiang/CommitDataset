[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetBuilder.java, +     * Define a script field that will control the terms that will be used (and not filtered, as is the, +     * case when the script is provided on top of field / fields)., +     */, +    public TermsFacetBuilder scriptField(String scriptField) {, +        this.script = scriptField;, +        return this;, +    }, +, +    /**, +        if (fieldName == null && fieldsNames == null && script == null) {, +            throw new SearchSourceBuilderException("field/fields/script must be set on terms facet for facet [" + name + "]");, +        } else if (fieldName != null) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetBuilder.java, +     * Define a script field that will control the terms that will be used (and not filtered, as is the, +     * case when the script is provided on top of field / fields)., +     */, +    public TermsFacetBuilder scriptField(String scriptField) {, +        this.script = scriptField;, +        return this;, +    }, +, +    /**, +        if (fieldName == null && fieldsNames == null && script == null) {, +            throw new SearchSourceBuilderException("field/fields/script must be set on terms facet for facet [" + name + "]");, +        } else if (fieldName != null) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetCollectorParser.java, +                } else if ("script_field".equals(fieldName)) {, +                    script = parser.text();, +        if (field == null && fieldsNames == null && script != null) {, +            return new TermsScriptFieldFacetCollector(facetName, size, comparatorType, context, excluded, pattern, scriptLang, script, params);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetBuilder.java, +     * Define a script field that will control the terms that will be used (and not filtered, as is the, +     * case when the script is provided on top of field / fields)., +     */, +    public TermsFacetBuilder scriptField(String scriptField) {, +        this.script = scriptField;, +        return this;, +    }, +, +    /**, +        if (fieldName == null && fieldsNames == null && script == null) {, +            throw new SearchSourceBuilderException("field/fields/script must be set on terms facet for facet [" + name + "]");, +        } else if (fieldName != null) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacetCollectorParser.java, +                } else if ("script_field".equals(fieldName)) {, +                    script = parser.text();, +        if (field == null && fieldsNames == null && script != null) {, +            return new TermsScriptFieldFacetCollector(facetName, size, comparatorType, context, excluded, pattern, scriptLang, script, params);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsScriptFieldFacetCollector.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.facets.terms;, +, +import org.apache.lucene.index.IndexReader;, +import org.elasticsearch.common.collect.BoundedTreeSet;, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.collect.ImmutableSet;, +import org.elasticsearch.common.collect.Maps;, +import org.elasticsearch.common.trove.TObjectIntHashMap;, +import org.elasticsearch.common.trove.TObjectIntIterator;, +import org.elasticsearch.index.field.data.FieldData;, +import org.elasticsearch.script.search.SearchScript;, +import org.elasticsearch.search.facets.Facet;, +import org.elasticsearch.search.facets.support.AbstractFacetCollector;, +import org.elasticsearch.search.internal.SearchContext;, +, +import java.io.IOException;, +import java.util.Map;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +/**, + * @author kimchy (shay.banon), + */, +public class TermsScriptFieldFacetCollector extends AbstractFacetCollector {, +, +    private final InternalTermsFacet.ComparatorType comparatorType;, +, +    private final int size;, +]