[+++ b/core/src/main/java/org/elasticsearch/index/analysis/NamedAnalyzer.java, +import java.util.Objects;, +, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (!(o instanceof NamedAnalyzer)) return false;, +        NamedAnalyzer that = (NamedAnalyzer) o;, +        return Objects.equals(name, that.name);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(name);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NamedAnalyzer.java, +import java.util.Objects;, +, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (!(o instanceof NamedAnalyzer)) return false;, +        NamedAnalyzer that = (NamedAnalyzer) o;, +        return Objects.equals(name, that.name);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(name);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +        // check similarity first because we need to check the name, and it might be null, +        // TODO: SimilarityProvider should have equals?, +        if (similarity == null || fieldType.similarity == null) {, +            if (similarity != fieldType.similarity) {, +                return false;, +            }, +        } else {, +            if (Objects.equals(similarity.name(), fieldType.similarity.name()) == false) {, +                return false;, +            }, +        }, +, +        return Objects.hash(super.hashCode(), names, boost, docValues, indexAnalyzer, searchAnalyzer, searchQuoteAnalyzer,, +            similarity == null ? null : similarity.name(), normsLoading, fieldDataType, nullValue, nullValueAsString);, +            conflicts.add("mapper [" + names().fullName() + "] has different [index] values");, +            conflicts.add("mapper [" + names().fullName() + "] has different [store] values");, +            conflicts.add("mapper [" + names().fullName() + "] has different [doc_values] values, cannot change from disabled to enabled");, +            conflicts.add("mapper [" + names().fullName() + "] has different [omit_norms] values, cannot change from disable to enabled");, +            conflicts.add("mapper [" + names().fullName() + "] has different [store_term_vector] values");, +            conflicts.add("mapper [" + names().fullName() + "] has different [store_term_vector_offsets] values");, +            conflicts.add("mapper [" + names().fullName() + "] has different [store_term_vector_positions] values");, +            conflicts.add("mapper [" + names().fullName() + "] has different [store_term_vector_payloads] values");, +                conflicts.add("mapper [" + names().fullName() + "] has different [analyzer]");, +            conflicts.add("mapper [" + names().fullName() + "] has different [analyzer]");, +            conflicts.add("mapper [" + names().fullName() + "] has different [analyzer]");, +            conflicts.add("mapper [" + names().fullName() + "] has different [index_name]");, +            conflicts.add("mapper [" + names().fullName() + "] has different [similarity]");, +                conflicts.add("mapper [" + names().fullName() + "] is used by multiple types. Set update_all_types to true to update [norms.loading] across all types.");, +            if (Objects.equals(searchQuoteAnalyzer(), other.searchQuoteAnalyzer()) == false) {, +                conflicts.add("mapper [" + names().fullName() + "] is used by multiple types. Set update_all_types to true to update [search_quote_analyzer] across all types.");, +            }, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NamedAnalyzer.java, +import java.util.Objects;, +, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (!(o instanceof NamedAnalyzer)) return false;, +        NamedAnalyzer that = (NamedAnalyzer) o;, +        return Objects.equals(name, that.name);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(name);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +        // check similarity first because we need to check the name, and it might be null, +        // TODO: SimilarityProvider should have equals?, +        if (similarity == null || fieldType.similarity == null) {, +            if (similarity != fieldType.similarity) {, +                return false;, +            }, +        } else {, +            if (Objects.equals(similarity.name(), fieldType.similarity.name()) == false) {, +                return false;, +            }, +        }, +, +        return Objects.hash(super.hashCode(), names, boost, docValues, indexAnalyzer, searchAnalyzer, searchQuoteAnalyzer,, +            similarity == null ? null : similarity.name(), normsLoading, fieldDataType, nullValue, nullValueAsString);, +            conflicts.add("mapper [" + names().fullName() + "] has different [index] values");, +            conflicts.add("mapper [" + names().fullName() + "] has different [store] values");, +            conflicts.add("mapper [" + names().fullName() + "] has different [doc_values] values, cannot change from disabled to enabled");, +            conflicts.add("mapper [" + names().fullName() + "] has different [omit_norms] values, cannot change from disable to enabled");, +            conflicts.add("mapper [" + names().fullName() + "] has different [store_term_vector] values");]