[+++ b/docs/reference/docs/update.asciidoc, +[float], +=== Scripted updates, +, +We can add a tag to the list of tags (note, if the tag exists, it, +In addition to `_source`, the following variables are available through, +the `ctx` map: `_index`, `_type`, `_id`, `_version`, `_routing`,, +`_parent`, `_timestamp`, `_ttl`., +, +Or remove a field from the document:, +And, we can even change the operation that is executed.  This example deletes, +the doc if the `tags` field contain `blue`, otherwise it does nothing, +(`noop`):, +[float], +=== Updates with a partial document, +[float], +=== `detect_noop`, +, +, +, +If the document does not already exist, the contents of the `upsert` element, +will be inserted as a new document.  If the document does exist, then the, +`script` will be executed instead:, +, +[float], +==== `scripted_upsert`, +, +If you would like your script to run regardless of whether the document exists, +or not -- i.e. the script handles initializing the document instead of the, +`upsert` element -- then set `scripted_upsert` to `true`:, +    "upsert" : {}, +[float], +==== `doc_as_upsert`, +Instead of sending a partial `doc` plus an `upsert` doc, setting, +`doc_as_upsert` to `true` will use the contents of `doc` as the `upsert`, +value:, +The update operation supports the following query-string parameters:, +`retry_on_conflict`::, +In between the get and indexing phases of the update, it is possible that, +another process might have already updated the same document.  By default, the, +update will fail with a version conflict exception.  The `retry_on_conflict`, +parameter controls how many times to retry the update before finally throwing, +an exception., +`routing`::, +Routing is used to route the update request to the right shard and sets the, +routing for the upsert request if the document being updated doesn't exist., +Can't be used to update the routing of an existing document., +`parent`::, +Parent is used to route the update request to the right shard and sets the, +parent for the upsert request if the document being updated doesn't exist., +Can't be used to update the `parent` of an existing document., +`timeout`::, +, +Timeout waiting for a shard to become available., +, +`consistency`::, +, +The write consistency of the index/delete operation., +, +`refresh`::, +, +Refresh the relevant primary and replica shards (not the whole index), +immediately after the operation occurs, so that the updated document appears, +in search results  immediately., +, +`fields`::, +, +Return the relevant fields from the updated document. Specify `_source` to, +return the full updated source., +, +`version` & `version_type`::, +, +The Update API uses the Elasticsearch's versioning support internally to make, +sure the document doesn't change during the update. You can use the `version`, +parameter to specify that the document should only be updated if it's version, +matches the one specified. By setting version type to `force` you can force, +the new version of the document after update (use with care! with `force`, +there is no guarantee the document didn't change).Version types `external` &, +`external_gte` are not supported.]