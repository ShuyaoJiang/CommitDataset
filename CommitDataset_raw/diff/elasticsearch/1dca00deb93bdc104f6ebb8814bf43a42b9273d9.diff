[+++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +import java.io.FileNotFoundException;, +        try {, +            if (store.execute(fileContext -> fileContext.delete(new Path(path, blobName), true)) == false) {, +        } catch (FileNotFoundException fnfe) {, +            throw new NoSuchFileException("[" + blobName + "] blob not found");, +        }, +        try {, +        } catch (FileNotFoundException fnfe) {, +            throw new NoSuchFileException("[" + blobName + "] blob not found");, +        }, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +import java.io.FileNotFoundException;, +        try {, +            if (store.execute(fileContext -> fileContext.delete(new Path(path, blobName), true)) == false) {, +        } catch (FileNotFoundException fnfe) {, +            throw new NoSuchFileException("[" + blobName + "] blob not found");, +        }, +        try {, +        } catch (FileNotFoundException fnfe) {, +            throw new NoSuchFileException("[" + blobName + "] blob not found");, +        }, +++ b/test/framework/src/main/java/org/elasticsearch/repositories/ESBlobStoreContainerTestCase.java, +    public void testReadNonExistingPath() throws IOException {, +        try(BlobStore store = newBlobStore()) {, +            final BlobContainer container = store.blobContainer(new BlobPath());, +            expectThrows(NoSuchFileException.class, () -> container.readBlob("non-existing"));, +        }, +    }, +]