[+++ b/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import org.elasticsearch.Version;, +    long nowInMillis;, +, +, +        if (in.getVersion().onOrAfter(Version.V_0_90_6)) {, +            nowInMillis = in.readVLong();, +        } else {, +            nowInMillis = System.currentTimeMillis();, +        }, +, +        if (out.getVersion().onOrAfter(Version.V_0_90_6)) {, +            out.writeVLong(nowInMillis);, +        }, +++ b/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import org.elasticsearch.Version;, +    long nowInMillis;, +, +, +        if (in.getVersion().onOrAfter(Version.V_0_90_6)) {, +            nowInMillis = in.readVLong();, +        } else {, +            nowInMillis = System.currentTimeMillis();, +        }, +, +        if (out.getVersion().onOrAfter(Version.V_0_90_6)) {, +            out.writeVLong(nowInMillis);, +        }, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.action.ActionListener;, +    @Override, +    protected void doExecute(ExplainRequest request, ActionListener<ExplainResponse> listener) {, +        request.nowInMillis = System.currentTimeMillis();, +        super.doExecute(request, listener);, +    }, +, +                        .filteringAliases(request.filteringAlias()), +                        .nowInMillis(request.nowInMillis),, +++ b/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import org.elasticsearch.Version;, +    long nowInMillis;, +, +, +        if (in.getVersion().onOrAfter(Version.V_0_90_6)) {, +            nowInMillis = in.readVLong();, +        } else {, +            nowInMillis = System.currentTimeMillis();, +        }, +, +        if (out.getVersion().onOrAfter(Version.V_0_90_6)) {, +            out.writeVLong(nowInMillis);, +        }, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.action.ActionListener;, +    @Override, +    protected void doExecute(ExplainRequest request, ActionListener<ExplainResponse> listener) {, +        request.nowInMillis = System.currentTimeMillis();, +        super.doExecute(request, listener);, +    }, +, +                        .filteringAliases(request.filteringAlias()), +                        .nowInMillis(request.nowInMillis),, +++ b/src/test/java/org/elasticsearch/explain/ExplainActionTests.java, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +import org.joda.time.format.ISODateTimeFormat;, +import static org.elasticsearch.index.query.QueryBuilders.queryString;, +    @Test, +    public void explainDateRangeInQueryString() {, +        client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1)).get();, +, +        String aMonthAgo = ISODateTimeFormat.yearMonthDay().print(new DateTime(DateTimeZone.UTC).minusMonths(1));, +        String aMonthFromNow = ISODateTimeFormat.yearMonthDay().print(new DateTime(DateTimeZone.UTC).plusMonths(1));, +, +        client().prepareIndex("test", "type", "1").setSource("past", aMonthAgo, "future", aMonthFromNow).get();, +, +        refresh();, +, +        ExplainResponse explainResponse = client().prepareExplain("test", "type", "1").setQuery(queryString("past:[now-2M/d TO now/d]")).get();, +        assertThat(explainResponse.isExists(), equalTo(true));, +        assertThat(explainResponse.isMatch(), equalTo(true));, +    }]