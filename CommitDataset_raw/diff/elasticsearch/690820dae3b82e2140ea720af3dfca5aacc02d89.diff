[+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        this.membership = new MembershipAction(settings, clusterService, transportService, this, new MembershipListener());, +            membership.sendValidateJoinRequestBlocking(node, joinTimeout);, +                    callback.onSuccess();, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        this.membership = new MembershipAction(settings, clusterService, transportService, this, new MembershipListener());, +            membership.sendValidateJoinRequestBlocking(node, joinTimeout);, +                    callback.onSuccess();, +++ b/src/main/java/org/elasticsearch/discovery/zen/membership/MembershipAction.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.ClusterService;, +        void onSuccess();, +    private final ClusterService clusterService;, +, +    public MembershipAction(Settings settings, ClusterService clusterService, TransportService transportService, DiscoveryNodesProvider nodesProvider, MembershipListener listener) {, +        this.clusterService = clusterService;, +        transportService.sendRequest(masterNode, JoinRequestRequestHandler.ACTION, new JoinRequest(node), EmptyTransportResponseHandler.INSTANCE_SAME);, +    public void sendJoinRequestBlocking(DiscoveryNode masterNode, DiscoveryNode node, TimeValue timeout) throws ElasticsearchException {, +        transportService.submitRequest(masterNode, JoinRequestRequestHandler.ACTION, new JoinRequest(node), new FutureTransportResponseHandler<JoinResponse>() {, +        }).txGet(timeout.millis(), TimeUnit.MILLISECONDS);, +    public void sendValidateJoinRequestBlocking(DiscoveryNode node, TimeValue timeout) throws ElasticsearchException {, +        transportService.submitRequest(node, ValidateJoinRequestRequestHandler.ACTION, new ValidateJoinRequest(), EmptyTransportResponseHandler.INSTANCE_SAME), +        // here for backward compatibility. nodes with a version lower than 1.4.0 send this flag, +        boolean withClusterState = false;, +        private JoinRequest(DiscoveryNode node) {, +            if (in.getVersion().before(Version.V_1_4_0)) {, +        }, +            if (out.getVersion().before(Version.V_1_4_0)) {, +                // old with cluster state flag, +                out.writeBoolean(false);, +            }, +, +    // used to reply to nodes from a version older than 1.4.0 which may expect this, +    @Deprecated, +                public void onSuccess() {, +                        // nodes from a version older than 1.4.0 may ask for this, +                            channel.sendResponse(new JoinResponse(clusterService.state()));, +            if (in.getVersion().before(Version.V_1_4_0)) {, +                ClusterState.Builder.readFrom(in, nodesProvider.nodes().localNode());, +            }, +            if (out.getVersion().before(Version.V_1_4_0)) {, +                ClusterState.Builder.writeTo(clusterService.state(), out);, +            }]