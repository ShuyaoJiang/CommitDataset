[+++ b/docs/reference/modules/cluster/misc.asciidoc, +Every time a persistent task is created, the master node takes care of, +tasks to nodes is controlled by the following properties, which can be updated, +, +`cluster.persistent_tasks.allocation.recheck_interval`::, +, +     The master node will automatically check whether persistent tasks need to, +     be assigned when the cluster state changes significantly. However, there, +     may be other factors, such as memory usage, that affect whether persistent, +     tasks can be assigned to nodes but do not cause the cluster state to change., +     This setting controls how often assignment checks are performed to react to, +     these factors. The default is 30 seconds. The minimum permitted value is 10, +     seconds., +++ b/docs/reference/modules/cluster/misc.asciidoc, +Every time a persistent task is created, the master node takes care of, +tasks to nodes is controlled by the following properties, which can be updated, +, +`cluster.persistent_tasks.allocation.recheck_interval`::, +, +     The master node will automatically check whether persistent tasks need to, +     be assigned when the cluster state changes significantly. However, there, +     may be other factors, such as memory usage, that affect whether persistent, +     tasks can be assigned to nodes but do not cause the cluster state to change., +     This setting controls how often assignment checks are performed to react to, +     these factors. The default is 30 seconds. The minimum permitted value is 10, +     seconds., +++ b/server/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.persistent.PersistentTasksClusterService;, +                    PersistentTasksClusterService.CLUSTER_TASKS_ALLOCATION_RECHECK_INTERVAL_SETTING,, +++ b/docs/reference/modules/cluster/misc.asciidoc, +Every time a persistent task is created, the master node takes care of, +tasks to nodes is controlled by the following properties, which can be updated, +, +`cluster.persistent_tasks.allocation.recheck_interval`::, +, +     The master node will automatically check whether persistent tasks need to, +     be assigned when the cluster state changes significantly. However, there, +     may be other factors, such as memory usage, that affect whether persistent, +     tasks can be assigned to nodes but do not cause the cluster state to change., +     This setting controls how often assignment checks are performed to react to, +     these factors. The default is 30 seconds. The minimum permitted value is 10, +     seconds., +++ b/server/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.persistent.PersistentTasksClusterService;, +                    PersistentTasksClusterService.CLUSTER_TASKS_ALLOCATION_RECHECK_INTERVAL_SETTING,, +++ b/server/src/main/java/org/elasticsearch/common/util/concurrent/AbstractAsyncTask.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.common.util.concurrent;, +, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.io.Closeable;, +import java.util.Objects;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +/**, + * A base class for tasks that need to repeat., + */, +public abstract class AbstractAsyncTask implements Runnable, Closeable {, +, +    private final Logger logger;, +    private final ThreadPool threadPool;, +    private final AtomicBoolean closed = new AtomicBoolean(false);, +    private final boolean autoReschedule;, +    private volatile ScheduledFuture<?> scheduledFuture;, +    private volatile boolean isScheduledOrRunning;, +    private volatile Exception lastThrownException;, +    private volatile TimeValue interval;, +, +    protected AbstractAsyncTask(Logger logger, ThreadPool threadPool, TimeValue interval, boolean autoReschedule) {, +        this.logger = logger;, +        this.threadPool = threadPool;, +        this.interval = interval;, +        this.autoReschedule = autoReschedule;, +    }, +, +    /**, +     * Change the interval between runs., +     * If a future run is scheduled then this will reschedule it.]