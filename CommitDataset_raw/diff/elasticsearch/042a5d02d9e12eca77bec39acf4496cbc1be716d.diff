[+++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        boolean changed = applyFailedShard(allocation, failedShard, true);, +        changed |= electPrimariesAndUnassignDanglingReplicas(allocation);, +        changed |= electPrimariesAndUnassignDanglingReplicas(allocation);, +            changed |= electPrimariesAndUnassignDanglingReplicas(allocation);, +    private boolean electPrimariesAndUnassignDanglingReplicas(RoutingAllocation allocation) {, +        RoutingNodes routingNodes = allocation.routingNodes();, +, +        // go over and remove dangling replicas that are initializing, but we couldn't elect primary ones..., +        List<ShardRouting> shardsToFail = null;, +        for (MutableShardRouting shardEntry : routingNodes.unassigned()) {, +            if (shardEntry.primary() && !shardEntry.assignedToNode()) {, +                for (RoutingNode routingNode : routingNodes.nodesToShards().values()) {, +                    for (MutableShardRouting shardEntry2 : routingNode.shards()) {, +                        if (shardEntry.shardId().equals(shardEntry2.shardId()) && !shardEntry2.active()) {, +                            changed = true;, +                            if (shardsToFail == null) {, +                                shardsToFail = new ArrayList<ShardRouting>();, +                            }, +                            shardsToFail.add(shardEntry2);, +                        }, +                    }, +                }, +            }, +        }, +        if (shardsToFail != null) {, +            for (ShardRouting shardToFail : shardsToFail) {, +                applyFailedShard(allocation, shardToFail, false);, +            }, +        }, +                applyFailedShard(allocation, shardRouting, false);, +    private boolean applyFailedShard(RoutingAllocation allocation, ShardRouting failedShard, boolean addToIgnoreList) {, +                            if (addToIgnoreList) {, +                            }, +                            if (addToIgnoreList) {, +                            }, +                        if (addToIgnoreList) {, +                        }, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        boolean changed = applyFailedShard(allocation, failedShard, true);, +        changed |= electPrimariesAndUnassignDanglingReplicas(allocation);, +        changed |= electPrimariesAndUnassignDanglingReplicas(allocation);, +            changed |= electPrimariesAndUnassignDanglingReplicas(allocation);, +    private boolean electPrimariesAndUnassignDanglingReplicas(RoutingAllocation allocation) {, +        RoutingNodes routingNodes = allocation.routingNodes();, +, +        // go over and remove dangling replicas that are initializing, but we couldn't elect primary ones..., +        List<ShardRouting> shardsToFail = null;, +        for (MutableShardRouting shardEntry : routingNodes.unassigned()) {, +            if (shardEntry.primary() && !shardEntry.assignedToNode()) {, +                for (RoutingNode routingNode : routingNodes.nodesToShards().values()) {, +                    for (MutableShardRouting shardEntry2 : routingNode.shards()) {, +                        if (shardEntry.shardId().equals(shardEntry2.shardId()) && !shardEntry2.active()) {, +                            changed = true;, +                            if (shardsToFail == null) {, +                                shardsToFail = new ArrayList<ShardRouting>();, +                            }, +                            shardsToFail.add(shardEntry2);, +                        }, +                    }, +                }, +            }, +        }, +        if (shardsToFail != null) {, +            for (ShardRouting shardToFail : shardsToFail) {, +                applyFailedShard(allocation, shardToFail, false);, +            }, +        }, +                applyFailedShard(allocation, shardRouting, false);, +    private boolean applyFailedShard(RoutingAllocation allocation, ShardRouting failedShard, boolean addToIgnoreList) {, +                            if (addToIgnoreList) {, +                            }, +                            if (addToIgnoreList) {, +                            }, +                        if (addToIgnoreList) {, +                        }, +++ b/src/test/java/org/elasticsearch/test/unit/cluster/routing/allocation/PrimaryElectionRoutingTests.java, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +, +    @Test, +    public void testRemovingInitializingReplicasIfPrimariesFails() {, +        AllocationService allocation = new AllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).build());, +, +        logger.info("Building initial routing table");, +, +        MetaData metaData = newMetaDataBuilder(), +                .put(newIndexMetaDataBuilder("test").numberOfShards(2).numberOfReplicas(1)), +                .build();, +, +        RoutingTable routingTable = routingTable(), +                .addAsNew(metaData.index("test")), +                .build();, +, +        ClusterState clusterState = newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();, +, +        logger.info("Adding two nodes and performing rerouting");, +        clusterState = newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1")).put(newNode("node2"))).build();, +        RoutingAllocation.Result rerouteResult = allocation.reroute(clusterState);, +        clusterState = newClusterStateBuilder().state(clusterState).routingTable(rerouteResult.routingTable()).build();, +]