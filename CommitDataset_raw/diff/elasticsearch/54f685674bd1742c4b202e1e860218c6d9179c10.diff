[+++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        int availableProcessors = Runtime.getRuntime().availableProcessors();, +        int halfProcMaxAt5 = Math.min(((availableProcessors + 1) / 2), 5);, +        int halfProcMaxAt10 = Math.min(((availableProcessors + 1) / 2), 10);, +                .put(Names.INDEX, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.BULK, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.GET, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.SEARCH, settingsBuilder().put("type", "fixed").put("size", availableProcessors * 2).put("queue_size", 1000).build()), +                .put(Names.PERCOLATE, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.FLUSH, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.MERGE, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.REFRESH, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt10).build()), +                .put(Names.WARMER, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.SNAPSHOT, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        int availableProcessors = Runtime.getRuntime().availableProcessors();, +        int halfProcMaxAt5 = Math.min(((availableProcessors + 1) / 2), 5);, +        int halfProcMaxAt10 = Math.min(((availableProcessors + 1) / 2), 10);, +                .put(Names.INDEX, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.BULK, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.GET, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.SEARCH, settingsBuilder().put("type", "fixed").put("size", availableProcessors * 2).put("queue_size", 1000).build()), +                .put(Names.PERCOLATE, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.FLUSH, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.MERGE, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.REFRESH, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt10).build()), +                .put(Names.WARMER, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.SNAPSHOT, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +++ b/src/test/java/org/elasticsearch/test/integration/threadpool/SimpleThreadPoolTests.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +        startNode("node1", ImmutableSettings.settingsBuilder().put("threadpool.search.type", "cached").build());, +        startNode("node2", ImmutableSettings.settingsBuilder().put("threadpool.search.type", "cached").build());, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        int availableProcessors = Runtime.getRuntime().availableProcessors();, +        int halfProcMaxAt5 = Math.min(((availableProcessors + 1) / 2), 5);, +        int halfProcMaxAt10 = Math.min(((availableProcessors + 1) / 2), 10);, +                .put(Names.INDEX, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.BULK, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.GET, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.SEARCH, settingsBuilder().put("type", "fixed").put("size", availableProcessors * 2).put("queue_size", 1000).build()), +                .put(Names.PERCOLATE, settingsBuilder().put("type", "fixed").put("size", availableProcessors).build()), +                .put(Names.FLUSH, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.MERGE, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.REFRESH, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt10).build()), +                .put(Names.WARMER, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +                .put(Names.SNAPSHOT, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build()), +++ b/src/test/java/org/elasticsearch/test/integration/threadpool/SimpleThreadPoolTests.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +        startNode("node1", ImmutableSettings.settingsBuilder().put("threadpool.search.type", "cached").build());, +        startNode("node2", ImmutableSettings.settingsBuilder().put("threadpool.search.type", "cached").build());, +++ b/src/test/java/org/elasticsearch/test/unit/threadpool/UpdateThreadPoolSettingsTests.java, +        ThreadPool threadPool = new ThreadPool(ImmutableSettings.settingsBuilder().put("threadpool.search.type", "cached").build(), null);, +        ThreadPool threadPool = new ThreadPool(ImmutableSettings.settingsBuilder().put("threadpool.search.type", "cached").build(), null);]