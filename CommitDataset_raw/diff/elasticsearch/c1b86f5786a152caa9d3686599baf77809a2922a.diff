[+++ b/pom.xml, +            <version>10.0.1</version>, +            <exclusions>, +                <exclusion>, +                    <groupId>com.google.code.findbugs</groupId>, +                    <artifactId>jsr305</artifactId>, +                </exclusion>, +            </exclusions>, +++ b/pom.xml, +            <version>10.0.1</version>, +            <exclusions>, +                <exclusion>, +                    <groupId>com.google.code.findbugs</groupId>, +                    <artifactId>jsr305</artifactId>, +                </exclusion>, +            </exclusions>, +++ b/src/main/assemblies/common-bin.xml, +++ b/pom.xml, +            <version>10.0.1</version>, +            <exclusions>, +                <exclusion>, +                    <groupId>com.google.code.findbugs</groupId>, +                    <artifactId>jsr305</artifactId>, +                </exclusion>, +            </exclusions>, +++ b/src/main/assemblies/common-bin.xml, +++ b/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java, +import org.elasticsearch.common.util.concurrent.BaseFuture;, +public abstract class AdapterActionFuture<T, L> extends BaseFuture<T> implements ActionFuture<T>, ActionListener<L> {, +++ b/pom.xml, +            <version>10.0.1</version>, +            <exclusions>, +                <exclusion>, +                    <groupId>com.google.code.findbugs</groupId>, +                    <artifactId>jsr305</artifactId>, +                </exclusion>, +            </exclusions>, +++ b/src/main/assemblies/common-bin.xml, +++ b/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java, +import org.elasticsearch.common.util.concurrent.BaseFuture;, +public abstract class AdapterActionFuture<T, L> extends BaseFuture<T> implements ActionFuture<T>, ActionListener<L> {, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/BaseFuture.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.util.concurrent;, +, +import com.google.common.annotations.Beta;, +import org.elasticsearch.common.Nullable;, +, +import java.util.concurrent.*;, +import java.util.concurrent.locks.AbstractQueuedSynchronizer;, +, +import static com.google.common.base.Preconditions.checkNotNull;, +, +/**, + * An abstract implementation of the {@link com.google.common.util.concurrent.ListenableFuture} interface. This, + * class is preferable to {@link java.util.concurrent.FutureTask} for two, + * reasons: It implements {@code ListenableFuture}, and it does not implement, + * {@code Runnable}. (If you want a {@code Runnable} implementation of {@code, + * ListenableFuture}, create a {@link com.google.common.util.concurrent.ListenableFutureTask}, or submit your, + * tasks to a {@link com.google.common.util.concurrent.ListeningExecutorService}.), + * <p/>, + * <p>This class implements all methods in {@code ListenableFuture}., + * Subclasses should provide a way to set the result of the computation through, + * the protected methods {@link #set(Object)} and, + * {@link #setException(Throwable)}. Subclasses may also override {@link, + * #interruptTask()}, which will be invoked automatically if a call to {@link, + * #cancel(boolean) cancel(true)} succeeds in canceling the future., + * <p/>, + * <p>{@code AbstractFuture} uses an {@link AbstractQueuedSynchronizer} to deal, + * with concurrency issues and guarantee thread safety., + * <p/>, + * <p>The state changing methods all return a boolean indicating success or, + * failure in changing the future's state.  Valid states are running,, + * completed, failed, or cancelled., + * <p/>, + * <p>This class uses an {@link com.google.common.util.concurrent.ExecutionList} to guarantee that all registered, + * listeners will be executed, either when the future finishes or, for listeners, + * that are added after the future completes, immediately., + * {@code Runnable}-{@code Executor} pairs are stored in the execution list but, + * are not necessarily executed in the order in which they were added.  (If a, + * listener is added after the Future is complete, it will be executed, + * immediately, even if earlier listeners have not been executed. Additionally,]