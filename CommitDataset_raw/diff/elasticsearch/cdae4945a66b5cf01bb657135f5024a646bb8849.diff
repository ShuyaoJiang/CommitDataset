[+++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.warn", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.info", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.debug", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.trace", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +, +    boolean isReformat() {, +        return reformat;, +    }, +, +    long getIndexWarnThreshold() {, +        return indexWarnThreshold;, +    }, +, +    long getIndexInfoThreshold() {, +        return indexInfoThreshold;, +    }, +, +    long getIndexTraceThreshold() {, +        return indexTraceThreshold;, +    }, +, +    long getIndexDebugThreshold() {, +        return indexDebugThreshold;, +    }, +, +    int getMaxSourceCharsToLog() {, +        return maxSourceCharsToLog;, +    }, +, +    Level getLevel() {, +        return level;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.warn", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.info", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.debug", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.trace", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +, +    boolean isReformat() {, +        return reformat;, +    }, +, +    long getIndexWarnThreshold() {, +        return indexWarnThreshold;, +    }, +, +    long getIndexInfoThreshold() {, +        return indexInfoThreshold;, +    }, +, +    long getIndexTraceThreshold() {, +        return indexTraceThreshold;, +    }, +, +    long getIndexDebugThreshold() {, +        return indexDebugThreshold;, +    }, +, +    int getMaxSourceCharsToLog() {, +        return maxSourceCharsToLog;, +    }, +, +    Level getLevel() {, +        return level;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/index/IndexingSlowLogTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +, +    public void testReformatSetting() {, +        IndexMetaData metaData = newIndexMeta("index", Settings.settingsBuilder(), +            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT), +            .put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_REFORMAT_SETTING.getKey(), false), +            .build());, +        IndexSettings settings = new IndexSettings(metaData, Settings.EMPTY);, +        IndexingSlowLog log = new IndexingSlowLog(settings);, +        assertFalse(log.isReformat());, +        settings.updateIndexMetaData(newIndexMeta("index", Settings.builder().put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_REFORMAT_SETTING.getKey(), "true").build()));, +        assertTrue(log.isReformat());, +, +        settings.updateIndexMetaData(newIndexMeta("index", Settings.builder().put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_REFORMAT_SETTING.getKey(), "false").build()));, +        assertFalse(log.isReformat());, +, +        settings.updateIndexMetaData(newIndexMeta("index", Settings.EMPTY));, +        assertTrue(log.isReformat());, +, +        metaData = newIndexMeta("index", Settings.settingsBuilder(), +            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT), +            .build());, +        settings = new IndexSettings(metaData, Settings.EMPTY);, +        log = new IndexingSlowLog(settings);, +        assertTrue(log.isReformat());, +        try {, +            settings.updateIndexMetaData(newIndexMeta("index", Settings.builder().put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_REFORMAT_SETTING.getKey(), "NOT A BOOLEAN").build()));]