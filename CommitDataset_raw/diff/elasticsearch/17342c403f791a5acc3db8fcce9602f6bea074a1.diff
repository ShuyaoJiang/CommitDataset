[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import static java.util.Collections.unmodifiableMap;, +import static org.elasticsearch.common.lucene.search.Queries.fixNegativeQueryIfNeeded;, +, +import org.apache.lucene.search.GraphQuery;, +            return addSlopToPhrase((PhraseQuery) q, slop);, +        } else if (q instanceof GraphQuery && ((GraphQuery) q).hasPhrase()) {, +            // we have a graph query that has at least one phrase sub-query, +            // re-build and set slop on all phrase queries, +            List<Query> oldQueries = ((GraphQuery) q).getQueries();, +            Query[] queries = new Query[oldQueries.size()];, +            for (int i = 0; i < queries.length; i++) {, +                Query oldQuery = oldQueries.get(i);, +                if (oldQuery instanceof PhraseQuery) {, +                    queries[i] = addSlopToPhrase((PhraseQuery) oldQuery, slop);, +                } else {, +                    queries[i] = oldQuery;, +                }, +            }, +, +            return new GraphQuery(queries);, +    /**, +     * Rebuild a phrase query with a slop value, +     */, +    private PhraseQuery addSlopToPhrase(PhraseQuery query, int slop) {, +        PhraseQuery.Builder builder = new PhraseQuery.Builder();, +        builder.setSlop(slop);, +        final Term[] terms = query.getTerms();, +        final int[] positions = query.getPositions();, +        for (int i = 0; i < terms.length; ++i) {, +            builder.add(terms[i], positions[i]);, +        }, +, +        return builder.build();, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import static java.util.Collections.unmodifiableMap;, +import static org.elasticsearch.common.lucene.search.Queries.fixNegativeQueryIfNeeded;, +, +import org.apache.lucene.search.GraphQuery;, +            return addSlopToPhrase((PhraseQuery) q, slop);, +        } else if (q instanceof GraphQuery && ((GraphQuery) q).hasPhrase()) {, +            // we have a graph query that has at least one phrase sub-query, +            // re-build and set slop on all phrase queries, +            List<Query> oldQueries = ((GraphQuery) q).getQueries();, +            Query[] queries = new Query[oldQueries.size()];, +            for (int i = 0; i < queries.length; i++) {, +                Query oldQuery = oldQueries.get(i);, +                if (oldQuery instanceof PhraseQuery) {, +                    queries[i] = addSlopToPhrase((PhraseQuery) oldQuery, slop);, +                } else {, +                    queries[i] = oldQuery;, +                }, +            }, +, +            return new GraphQuery(queries);, +    /**, +     * Rebuild a phrase query with a slop value, +     */, +    private PhraseQuery addSlopToPhrase(PhraseQuery query, int slop) {, +        PhraseQuery.Builder builder = new PhraseQuery.Builder();, +        builder.setSlop(slop);, +        final Term[] terms = query.getTerms();, +        final int[] positions = query.getPositions();, +        for (int i = 0; i < terms.length; ++i) {, +            builder.add(terms[i], positions[i]);, +        }, +, +        return builder.build();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.settings.SecureSetting;, +import org.elasticsearch.common.settings.SecureSettings;, +    private static SecureSettings loadSecureSettings(Environment initialEnv) throws BootstrapException {, +, +                                                 SecureSettings secureSettings, Settings initialSettings) {, +        if (secureSettings != null) {, +            builder.setSecureSettings(secureSettings);, +        final SecureSettings keystore = loadSecureSettings(initialEnv);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import static java.util.Collections.unmodifiableMap;, +import static org.elasticsearch.common.lucene.search.Queries.fixNegativeQueryIfNeeded;, +, +import org.apache.lucene.search.GraphQuery;, +            return addSlopToPhrase((PhraseQuery) q, slop);, +        } else if (q instanceof GraphQuery && ((GraphQuery) q).hasPhrase()) {, +            // we have a graph query that has at least one phrase sub-query, +            // re-build and set slop on all phrase queries, +            List<Query> oldQueries = ((GraphQuery) q).getQueries();, +            Query[] queries = new Query[oldQueries.size()];, +            for (int i = 0; i < queries.length; i++) {, +                Query oldQuery = oldQueries.get(i);, +                if (oldQuery instanceof PhraseQuery) {, +                    queries[i] = addSlopToPhrase((PhraseQuery) oldQuery, slop);, +                } else {, +                    queries[i] = oldQuery;, +                }, +            }]