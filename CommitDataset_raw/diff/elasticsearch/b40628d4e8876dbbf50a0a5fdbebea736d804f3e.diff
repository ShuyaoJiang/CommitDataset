[+++ b/dev-tools/prepare_release_candidate.py, +    ES_JAVA_OPTS="-Des.plugins.staging=true" bin/elasticsearch-plugin install cloud-aws, +++ b/dev-tools/prepare_release_candidate.py, +    ES_JAVA_OPTS="-Des.plugins.staging=true" bin/elasticsearch-plugin install cloud-aws, +++ b/dev-tools/smoke_test_rc.py, +      run('%s; export ES_JAVA_OPTS="-Des.plugins.staging=true"; %s %s %s' % (java_exe(), es_plugin_path, 'install -b', plugin)), +++ b/dev-tools/prepare_release_candidate.py, +    ES_JAVA_OPTS="-Des.plugins.staging=true" bin/elasticsearch-plugin install cloud-aws, +++ b/dev-tools/smoke_test_rc.py, +      run('%s; export ES_JAVA_OPTS="-Des.plugins.staging=true"; %s %s %s' % (java_exe(), es_plugin_path, 'install -b', plugin)), +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ScoreTests.java, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +import java.util.Collection;, +public class ScoreTests extends ESSingleNodeTestCase {, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return pluginList(PainlessPlugin.class);, +    public void testScore() {, +        createIndex("test", Settings.EMPTY, "type", "t", "type=text");, +        ensureGreen("test");, +, +        client().prepareIndex("test", "type", "1").setSource("t", "a").get();, +        client().prepareIndex("test", "type", "2").setSource("t", "a a b").get();, +        client().prepareIndex("test", "type", "3").setSource("t", "a a a b c").get();, +        client().prepareIndex("test", "type", "4").setSource("t", "a b c d").get();, +        client().prepareIndex("test", "type", "5").setSource("t", "a a b c d e").get();, +        client().admin().indices().prepareRefresh("test").get();, +, +        final Script script = new Script("_score + 1", ScriptService.ScriptType.INLINE, "painless", null);, +, +        final SearchResponse sr = client().prepareSearch("test").setQuery(, +            QueryBuilders.functionScoreQuery(QueryBuilders.matchQuery("t", "a"),, +                ScoreFunctionBuilders.scriptFunction(script))).get();, +        final SearchHit[] hits = sr.getHits().getHits();, +, +        for (final SearchHit hit : hits) {, +            assertTrue(hit.score() > 0.9999F && hit.score() < 2.0001F);, +        assertEquals("1", hits[0].getId());, +        assertEquals("3", hits[1].getId());, +        assertEquals("2", hits[2].getId());, +        assertEquals("5", hits[3].getId());, +        assertEquals("4", hits[4].getId());, +++ b/dev-tools/prepare_release_candidate.py, +    ES_JAVA_OPTS="-Des.plugins.staging=true" bin/elasticsearch-plugin install cloud-aws, +++ b/dev-tools/smoke_test_rc.py, +      run('%s; export ES_JAVA_OPTS="-Des.plugins.staging=true"; %s %s %s' % (java_exe(), es_plugin_path, 'install -b', plugin)), +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ScoreTests.java, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +import java.util.Collection;, +public class ScoreTests extends ESSingleNodeTestCase {, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return pluginList(PainlessPlugin.class);, +    public void testScore() {, +        createIndex("test", Settings.EMPTY, "type", "t", "type=text");, +        ensureGreen("test");, +, +        client().prepareIndex("test", "type", "1").setSource("t", "a").get();, +        client().prepareIndex("test", "type", "2").setSource("t", "a a b").get();, +        client().prepareIndex("test", "type", "3").setSource("t", "a a a b c").get();, +        client().prepareIndex("test", "type", "4").setSource("t", "a b c d").get();, +        client().prepareIndex("test", "type", "5").setSource("t", "a a b c d e").get();, +        client().admin().indices().prepareRefresh("test").get();, +, +        final Script script = new Script("_score + 1", ScriptService.ScriptType.INLINE, "painless", null);, +, +        final SearchResponse sr = client().prepareSearch("test").setQuery(, +            QueryBuilders.functionScoreQuery(QueryBuilders.matchQuery("t", "a"),, +                ScoreFunctionBuilders.scriptFunction(script))).get();, +        final SearchHit[] hits = sr.getHits().getHits();, +, +        for (final SearchHit hit : hits) {, +            assertTrue(hit.score() > 0.9999F && hit.score() < 2.0001F);, +        assertEquals("1", hits[0].getId());, +        assertEquals("3", hits[1].getId());, +        assertEquals("2", hits[2].getId());, +        assertEquals("5", hits[3].getId());, +        assertEquals("4", hits[4].getId());, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptTestCase.java, +        return exec(script, vars, compilerSettings);, +    public Object exec(String script, Map<String, Object> vars, Map<String,String> compileParams) {, +        return scriptEngine.executable(compiled, vars).run();, +++ b/dev-tools/prepare_release_candidate.py, +    ES_JAVA_OPTS="-Des.plugins.staging=true" bin/elasticsearch-plugin install cloud-aws, +++ b/dev-tools/smoke_test_rc.py, +      run('%s; export ES_JAVA_OPTS="-Des.plugins.staging=true"; %s %s %s' % (java_exe(), es_plugin_path, 'install -b', plugin))]