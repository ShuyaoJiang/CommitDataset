[+++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Returns the indexed value used to construct search "values"., +     *  This method is used for the default implementations of most, +     *  query factory methods such as {@link #termQuery}. */, +    protected BytesRef indexedValueForSearch(Object value) {, +    /** Generates a query that will only match documents that contain the given value., +     *  The default implementation returns a {@link TermQuery} over the value bytes,, +     *  boosted by {@link #boost()}., +     *  @throws IllegalArgumentException if {@code value} cannot be converted to the expected data type */, +        TermQuery query = new TermQuery(new Term(name(), indexedValueForSearch(value)));, +        return new FuzzyQuery(new Term(name(), indexedValueForSearch(value)),, +                fuzziness.asDistance(BytesRefs.toString(value)), prefixLength, maxExpansions, transpositions);, +        PrefixQuery query = new PrefixQuery(new Term(name(), indexedValueForSearch(value)));, +        RegexpQuery query = new RegexpQuery(new Term(name(), indexedValueForSearch(value)), flags, maxDeterminizedStates);, +    /**, +     * Extract a {@link Term} from a query created with {@link #termQuery} by, +     * recursively removing {@link BoostQuery} wrappers., +     * @throws IllegalArgumentException if the wrapped query is not a {@link TermQuery}, +     */, +    public static Term extractTerm(Query termQuery) {, +        while (termQuery instanceof BoostQuery) {, +            termQuery = ((BoostQuery) termQuery).getQuery();, +        }, +        if (termQuery instanceof TermQuery == false) {, +            throw new IllegalArgumentException("Cannot extract a term from a query of type ", +                    + termQuery.getClass() + ": " + termQuery);, +        }, +        return ((TermQuery) termQuery).getTerm();, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Returns the indexed value used to construct search "values"., +     *  This method is used for the default implementations of most, +     *  query factory methods such as {@link #termQuery}. */, +    protected BytesRef indexedValueForSearch(Object value) {, +    /** Generates a query that will only match documents that contain the given value., +     *  The default implementation returns a {@link TermQuery} over the value bytes,, +     *  boosted by {@link #boost()}., +     *  @throws IllegalArgumentException if {@code value} cannot be converted to the expected data type */, +        TermQuery query = new TermQuery(new Term(name(), indexedValueForSearch(value)));, +        return new FuzzyQuery(new Term(name(), indexedValueForSearch(value)),, +                fuzziness.asDistance(BytesRefs.toString(value)), prefixLength, maxExpansions, transpositions);, +        PrefixQuery query = new PrefixQuery(new Term(name(), indexedValueForSearch(value)));, +        RegexpQuery query = new RegexpQuery(new Term(name(), indexedValueForSearch(value)), flags, maxDeterminizedStates);, +    /**, +     * Extract a {@link Term} from a query created with {@link #termQuery} by, +     * recursively removing {@link BoostQuery} wrappers., +     * @throws IllegalArgumentException if the wrapped query is not a {@link TermQuery}, +     */, +    public static Term extractTerm(Query termQuery) {, +        while (termQuery instanceof BoostQuery) {, +            termQuery = ((BoostQuery) termQuery).getQuery();, +        }, +        if (termQuery instanceof TermQuery == false) {, +            throw new IllegalArgumentException("Cannot extract a term from a query of type ", +                    + termQuery.getClass() + ": " + termQuery);, +        }, +        return ((TermQuery) termQuery).getTerm();, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +import org.apache.lucene.index.Term;, +            return new PrefixCompletionQuery(searchAnalyzer().analyzer(), new Term(name(), indexedValueForSearch(value)));, +            return new RegexCompletionQuery(new Term(name(), indexedValueForSearch(value)), flags, maxDeterminizedStates);, +            return new FuzzyCompletionQuery(searchAnalyzer().analyzer(), new Term(name(), indexedValueForSearch(value)), null,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Returns the indexed value used to construct search "values"., +     *  This method is used for the default implementations of most, +     *  query factory methods such as {@link #termQuery}. */, +    protected BytesRef indexedValueForSearch(Object value) {, +    /** Generates a query that will only match documents that contain the given value., +     *  The default implementation returns a {@link TermQuery} over the value bytes,, +     *  boosted by {@link #boost()}., +     *  @throws IllegalArgumentException if {@code value} cannot be converted to the expected data type */, +        TermQuery query = new TermQuery(new Term(name(), indexedValueForSearch(value)));, +        return new FuzzyQuery(new Term(name(), indexedValueForSearch(value)),, +                fuzziness.asDistance(BytesRefs.toString(value)), prefixLength, maxExpansions, transpositions);, +        PrefixQuery query = new PrefixQuery(new Term(name(), indexedValueForSearch(value)));, +        RegexpQuery query = new RegexpQuery(new Term(name(), indexedValueForSearch(value)), flags, maxDeterminizedStates);, +    /**, +     * Extract a {@link Term} from a query created with {@link #termQuery} by, +     * recursively removing {@link BoostQuery} wrappers., +     * @throws IllegalArgumentException if the wrapped query is not a {@link TermQuery}, +     */, +    public static Term extractTerm(Query termQuery) {, +        while (termQuery instanceof BoostQuery) {, +            termQuery = ((BoostQuery) termQuery).getQuery();, +        }, +        if (termQuery instanceof TermQuery == false) {, +            throw new IllegalArgumentException("Cannot extract a term from a query of type ", +                    + termQuery.getClass() + ": " + termQuery);, +        }, +        return ((TermQuery) termQuery).getTerm();, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +import org.apache.lucene.index.Term;, +            return new PrefixCompletionQuery(searchAnalyzer().analyzer(), new Term(name(), indexedValueForSearch(value)));, +            return new RegexCompletionQuery(new Term(name(), indexedValueForSearch(value)), flags, maxDeterminizedStates);, +            return new FuzzyCompletionQuery(searchAnalyzer().analyzer(), new Term(name(), indexedValueForSearch(value)), null,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +            return queryStringTermQuery(new Term(name(), indexedValueForSearch(value)));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java]