[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetCategoriesDefinitionAction.java, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +    public static class Request extends ActionRequest implements ToXContent {, +        private static final ObjectParser<Request, ParseFieldMatcherSupplier> PARSER = new ObjectParser<>(NAME, Request::new);, +, +        static {, +            PARSER.declareString((request, jobId) -> request.jobId = jobId, Job.ID);, +            PARSER.declareString(Request::setCategoryId, CATEGORY_ID);, +            PARSER.declareObject(Request::setPageParams, PageParams.PARSER, PageParams.PAGE);, +        }, +, +        public static Request parseRequest(String jobId, XContentParser parser, ParseFieldMatcherSupplier parseFieldMatcherSupplier) {, +            Request request = PARSER.apply(parser, parseFieldMatcherSupplier);, +            if (jobId != null) {, +                request.jobId = jobId;, +            }, +            return request;, +        }, +, +        private PageParams pageParams = new PageParams();, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.startObject();, +            builder.field(Job.ID.getPreferredName(), jobId);, +            if (categoryId != null) {, +                builder.field(CATEGORY_ID.getPreferredName(), categoryId);, +            }, +            builder.field(PageParams.PAGE.getPreferredName(), pageParams);, +            builder.endObject();, +            return builder;, +        }, +, +        @Override, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetCategoriesDefinitionAction.java, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +    public static class Request extends ActionRequest implements ToXContent {, +        private static final ObjectParser<Request, ParseFieldMatcherSupplier> PARSER = new ObjectParser<>(NAME, Request::new);, +, +        static {, +            PARSER.declareString((request, jobId) -> request.jobId = jobId, Job.ID);, +            PARSER.declareString(Request::setCategoryId, CATEGORY_ID);, +            PARSER.declareObject(Request::setPageParams, PageParams.PARSER, PageParams.PAGE);, +        }, +, +        public static Request parseRequest(String jobId, XContentParser parser, ParseFieldMatcherSupplier parseFieldMatcherSupplier) {, +            Request request = PARSER.apply(parser, parseFieldMatcherSupplier);, +            if (jobId != null) {, +                request.jobId = jobId;, +            }, +            return request;, +        }, +, +        private PageParams pageParams = new PageParams();, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.startObject();, +            builder.field(Job.ID.getPreferredName(), jobId);, +            if (categoryId != null) {, +                builder.field(CATEGORY_ID.getPreferredName(), categoryId);, +            }, +            builder.field(PageParams.PAGE.getPreferredName(), pageParams);, +            builder.endObject();, +            return builder;, +        }, +, +        @Override, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/rest/results/RestGetCategoriesAction.java, +, +        controller.registerHandler(RestRequest.Method.POST,, +                PrelertPlugin.BASE_PATH + "results/{" + Job.ID.getPreferredName() + "}/categorydefinitions/{", +                + Request.CATEGORY_ID.getPreferredName() + "}", this);, +        controller.registerHandler(RestRequest.Method.POST,, +                PrelertPlugin.BASE_PATH + "results/{" + Job.ID.getPreferredName() + "}/categorydefinitions", this);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetCategoriesDefinitionAction.java, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.XContentParser;, +    public static class Request extends ActionRequest implements ToXContent {, +        private static final ObjectParser<Request, ParseFieldMatcherSupplier> PARSER = new ObjectParser<>(NAME, Request::new);, +, +        static {, +            PARSER.declareString((request, jobId) -> request.jobId = jobId, Job.ID);, +            PARSER.declareString(Request::setCategoryId, CATEGORY_ID);, +            PARSER.declareObject(Request::setPageParams, PageParams.PARSER, PageParams.PAGE);, +        }, +, +        public static Request parseRequest(String jobId, XContentParser parser, ParseFieldMatcherSupplier parseFieldMatcherSupplier) {, +            Request request = PARSER.apply(parser, parseFieldMatcherSupplier);, +            if (jobId != null) {, +                request.jobId = jobId;, +            }, +            return request;, +        }, +, +        private PageParams pageParams = new PageParams();, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.startObject();, +            builder.field(Job.ID.getPreferredName(), jobId);]