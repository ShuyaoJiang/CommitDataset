[+++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.rest.action.cat.RestCatRecoveryAction;, +        registerHandler.accept(new RestCatRecoveryAction(settings, restController));, +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.rest.action.cat.RestCatRecoveryAction;, +        registerHandler.accept(new RestCatRecoveryAction(settings, restController));, +++ b/server/src/main/java/org/elasticsearch/rest/action/cat/RestCatRecoveryAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest.action.cat;, +, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.action.admin.indices.recovery.RecoveryRequest;, +import org.elasticsearch.action.admin.indices.recovery.RecoveryResponse;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.client.node.NodeClient;, +import org.elasticsearch.cluster.routing.RecoverySource;, +import org.elasticsearch.cluster.routing.RecoverySource.SnapshotRecoverySource;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.Table;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.XContentElasticsearchExtension;, +import org.elasticsearch.indices.recovery.RecoveryState;, +import org.elasticsearch.rest.RestController;, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.rest.RestResponse;, +import org.elasticsearch.rest.action.RestResponseListener;, +, +import java.util.Comparator;, +import java.util.List;, +import java.util.Locale;, +, +import static org.elasticsearch.rest.RestRequest.Method.GET;, +, +/**, + * RestRecoveryAction provides information about the status of replica recovery, + * in a string format, designed to be used at the command line. An Index can, + * be specified to limit output to a particular index or indices., + */, +public class RestCatRecoveryAction extends AbstractCatAction {, +    public RestCatRecoveryAction(Settings settings, RestController restController) {, +        super(settings);, +        restController.registerHandler(GET, "/_cat/recovery", this);, +        restController.registerHandler(GET, "/_cat/recovery/{index}", this);, +    }, +, +    @Override, +    public String getName() {, +        return "cat_recovery_action";, +    }, +, +    @Override, +    protected void documentation(StringBuilder sb) {, +        sb.append("/_cat/recovery\n");, +        sb.append("/_cat/recovery/{index}\n");, +    }, +, +    @Override, +    public RestChannelConsumer doCatRequest(final RestRequest request, final NodeClient client) {, +        final RecoveryRequest recoveryRequest = new RecoveryRequest(Strings.splitStringByCommaToArray(request.param("index")));, +        recoveryRequest.detailed(request.paramAsBoolean("detailed", false));, +        recoveryRequest.activeOnly(request.paramAsBoolean("active_only", false));, +        recoveryRequest.indicesOptions(IndicesOptions.fromRequest(request, recoveryRequest.indicesOptions()));, +, +        return channel -> client.admin().indices().recoveries(recoveryRequest, new RestResponseListener<RecoveryResponse>(channel) {, +            @Override, +            public RestResponse buildResponse(final RecoveryResponse response) throws Exception {, +                return RestTable.buildResponse(buildRecoveryTable(request, response), channel);, +            }, +        });, +    }, +, +    @Override, +    protected Table getTableWithHeader(RestRequest request) {, +        Table t = new Table();, +        t.startHeaders(), +                .addCell("index", "alias:i,idx;desc:index name"), +                .addCell("shard", "alias:s,sh;desc:shard name"), +                .addCell("start_time", "default:false;alias:start;desc:recovery start time"), +                .addCell("start_time_millis", "default:false;alias:start_millis;desc:recovery start time in epoch milliseconds"), +                .addCell("stop_time", "default:false;alias:stop;desc:recovery stop time"), +                .addCell("stop_time_millis", "default:false;alias:stop_millis;desc:recovery stop time in epoch milliseconds")]