[+++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state());, +    public static License getLicense(final ClusterState state) {, +        final LicensesMetaData licensesMetaData = state.metaData().custom(LicensesMetaData.TYPE);, +        return getLicense(licensesMetaData);, +    }, +, +    static License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state());, +    public static License getLicense(final ClusterState state) {, +        final LicensesMetaData licensesMetaData = state.metaData().custom(LicensesMetaData.TYPE);, +        return getLicense(licensesMetaData);, +    }, +, +    static License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import java.util.function.BiConsumer;, +public class XPackPlugin extends Plugin implements ScriptPlugin, ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin, DiscoveryPlugin {, +, +    @Override, +    public BiConsumer<DiscoveryNode, ClusterState> getJoinValidator() {, +        return security.getJoinValidator();, +    }, +++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state());, +    public static License getLicense(final ClusterState state) {, +        final LicensesMetaData licensesMetaData = state.metaData().custom(LicensesMetaData.TYPE);, +        return getLicense(licensesMetaData);, +    }, +, +    static License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import java.util.function.BiConsumer;, +public class XPackPlugin extends Plugin implements ScriptPlugin, ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin, DiscoveryPlugin {, +, +    @Override, +    public BiConsumer<DiscoveryNode, ClusterState> getJoinValidator() {, +        return security.getJoinValidator();, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +    public static final Setting<Boolean> TRANSPORT_SSL_ENABLED =, +++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state());, +    public static License getLicense(final ClusterState state) {, +        final LicensesMetaData licensesMetaData = state.metaData().custom(LicensesMetaData.TYPE);, +        return getLicense(licensesMetaData);, +    }, +, +    static License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import java.util.function.BiConsumer;, +public class XPackPlugin extends Plugin implements ScriptPlugin, ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin, DiscoveryPlugin {, +, +    @Override, +    public BiConsumer<DiscoveryNode, ClusterState> getJoinValidator() {, +        return security.getJoinValidator();, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +    public static final Setting<Boolean> TRANSPORT_SSL_ENABLED =, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.license.License;, +import org.elasticsearch.license.LicenseService;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +public class Security implements ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin, DiscoveryPlugin {, +, +    @Override, +    public BiConsumer<DiscoveryNode, ClusterState> getJoinValidator() {, +        return enabled ? new ValidateTLSOnJoin(XPackSettings.TRANSPORT_SSL_ENABLED.get(settings)) : null;, +    }, +, +    static final class ValidateTLSOnJoin implements BiConsumer<DiscoveryNode, ClusterState> {, +        private final boolean isTLSEnabled;, +, +        ValidateTLSOnJoin(boolean isTLSEnabled) {, +            this.isTLSEnabled = isTLSEnabled;, +        }, +, +        @Override, +        public void accept(DiscoveryNode node, ClusterState state) {, +            License license = LicenseService.getLicense(state);, +            validateLicense(license);, +        }, +, +        void validateLicense(License license) {, +            if (license != null) {, +                switch (license.operationMode()) {, +                    case MISSING:, +                    case TRIAL:, +                    case BASIC:, +                        break;, +                    case STANDARD:, +                    case GOLD:]