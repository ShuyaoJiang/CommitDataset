[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +import org.elasticsearch.client.indexlifecycle.RetryLifecyclePolicyRequest;, +, +    /**, +     * Retry lifecycle step for given indices, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public AcknowledgedResponse retryLifecycleStep(RetryLifecyclePolicyRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::retryLifecycle, options,, +            AcknowledgedResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously retry the lifecycle step for given indices, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void retryLifecycleStepAsync(RetryLifecyclePolicyRequest request, RequestOptions options,, +        ActionListener<AcknowledgedResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::retryLifecycle, options,, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +import org.elasticsearch.client.indexlifecycle.RetryLifecyclePolicyRequest;, +, +    /**, +     * Retry lifecycle step for given indices, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public AcknowledgedResponse retryLifecycleStep(RetryLifecyclePolicyRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::retryLifecycle, options,, +            AcknowledgedResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously retry the lifecycle step for given indices, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void retryLifecycleStepAsync(RetryLifecyclePolicyRequest request, RequestOptions options,, +        ActionListener<AcknowledgedResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::retryLifecycle, options,, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import java.util.List;, +import org.elasticsearch.client.indexlifecycle.RetryLifecyclePolicyRequest;, +    static Request retryLifecycle(RetryLifecyclePolicyRequest retryLifecyclePolicyRequest) {, +        Request request = new Request(HttpPost.METHOD_NAME,, +            new EndpointBuilder(), +                .addCommaSeparatedPathParts(retryLifecyclePolicyRequest.getIndices()), +                .addPathPartAsIs("_ilm"), +                .addPathPartAsIs("retry"), +                .build());, +        Params params = new Params(request);, +        params.withMasterTimeout(retryLifecyclePolicyRequest.masterNodeTimeout());, +        params.withTimeout(retryLifecyclePolicyRequest.timeout());, +        return request;, +    }, +, +        EndpointBuilder addCommaSeparatedPathParts(List<String> parts) {, +            addPathPart(String.join(",", parts));, +            return this;, +        }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +import org.elasticsearch.client.indexlifecycle.RetryLifecyclePolicyRequest;, +, +    /**, +     * Retry lifecycle step for given indices, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public AcknowledgedResponse retryLifecycleStep(RetryLifecyclePolicyRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::retryLifecycle, options,, +            AcknowledgedResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously retry the lifecycle step for given indices]