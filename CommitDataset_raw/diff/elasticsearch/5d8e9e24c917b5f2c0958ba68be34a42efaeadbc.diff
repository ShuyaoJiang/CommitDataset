[+++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +, +        // return not found instead of forbidden to prevent malicious requests to find out if files exist or dont exist, +        if (!Files.exists(file) || Files.isHidden(file) || !file.toAbsolutePath().normalize().startsWith(siteFile.toAbsolutePath())) {, +, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +, +        // return not found instead of forbidden to prevent malicious requests to find out if files exist or dont exist, +        if (!Files.exists(file) || Files.isHidden(file) || !file.toAbsolutePath().normalize().startsWith(siteFile.toAbsolutePath())) {, +, +++ b/src/test/java/org/elasticsearch/plugins/SitePluginTests.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Locale;, +     * Test normalizing of path, +     */, +    @Test, +    public void testThatPathsAreNormalized() throws Exception {, +        // more info: https://www.owasp.org/index.php/Path_Traversal, +        List<String> notFoundUris = new ArrayList<>();, +        notFoundUris.add("/_plugin/dummy/../../../../../log4j.properties");, +        notFoundUris.add("/_plugin/dummy/../../../../../%00log4j.properties");, +        notFoundUris.add("/_plugin/dummy/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%aflog4j.properties");, +        notFoundUris.add("/_plugin/dummy/%2E%2E/%2E%2E/%2E%2E/%2E%2E/index.html");, +        notFoundUris.add("/_plugin/dummy/%2e%2e/%2e%2e/%2e%2e/%2e%2e/index.html");, +        notFoundUris.add("/_plugin/dummy/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2findex.html");, +        notFoundUris.add("/_plugin/dummy/%2E%2E/%2E%2E/%2E%2E/%2E%2E/index.html");, +        notFoundUris.add("/_plugin/dummy/..\\..\\..\\..\\..\\log4j.properties");, +, +        for (String uri : notFoundUris) {, +            HttpResponse response = httpClient().path(uri).execute();, +            String message = String.format(Locale.ROOT, "URI [%s] expected to be not found", uri);, +            assertThat(message, response.getStatusCode(), equalTo(RestStatus.NOT_FOUND.getStatus()));, +        }, +, +        // using relative path inside of the plugin should work, +        HttpResponse response = httpClient().path("/_plugin/dummy/dir1/../dir1/../index.html").execute();, +        assertThat(response.getStatusCode(), equalTo(RestStatus.OK.getStatus()));, +        assertThat(response.getBody(), containsString("<title>Dummy Site Plugin</title>"));, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +, +        // return not found instead of forbidden to prevent malicious requests to find out if files exist or dont exist, +        if (!Files.exists(file) || Files.isHidden(file) || !file.toAbsolutePath().normalize().startsWith(siteFile.toAbsolutePath())) {, +, +++ b/src/test/java/org/elasticsearch/plugins/SitePluginTests.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Locale;, +     * Test normalizing of path, +     */, +    @Test, +    public void testThatPathsAreNormalized() throws Exception {, +        // more info: https://www.owasp.org/index.php/Path_Traversal, +        List<String> notFoundUris = new ArrayList<>();, +        notFoundUris.add("/_plugin/dummy/../../../../../log4j.properties");, +        notFoundUris.add("/_plugin/dummy/../../../../../%00log4j.properties");, +        notFoundUris.add("/_plugin/dummy/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%aflog4j.properties");, +        notFoundUris.add("/_plugin/dummy/%2E%2E/%2E%2E/%2E%2E/%2E%2E/index.html");, +        notFoundUris.add("/_plugin/dummy/%2e%2e/%2e%2e/%2e%2e/%2e%2e/index.html");, +        notFoundUris.add("/_plugin/dummy/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2findex.html");, +        notFoundUris.add("/_plugin/dummy/%2E%2E/%2E%2E/%2E%2E/%2E%2E/index.html");, +        notFoundUris.add("/_plugin/dummy/..\\..\\..\\..\\..\\log4j.properties");, +, +        for (String uri : notFoundUris) {, +            HttpResponse response = httpClient().path(uri).execute();, +            String message = String.format(Locale.ROOT, "URI [%s] expected to be not found", uri);, +            assertThat(message, response.getStatusCode(), equalTo(RestStatus.NOT_FOUND.getStatus()));, +        }, +, +        // using relative path inside of the plugin should work, +        HttpResponse response = httpClient().path("/_plugin/dummy/dir1/../dir1/../index.html").execute();, +        assertThat(response.getStatusCode(), equalTo(RestStatus.OK.getStatus()));, +        assertThat(response.getBody(), containsString("<title>Dummy Site Plugin</title>"));, +    }, +, +    /**, +++ b/src/test/resources/org/elasticsearch/plugins/dummy/_site/dir1/.empty]