[+++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +        try (RestClient restClient = RestClient.builder(httpHost).build()) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +        try (RestClient restClient = RestClient.builder(httpHost).build()) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/SnifferBuilderTests.java, +        try (RestClient client = RestClient.builder(hosts).build()) {, +                assertEquals("scheme cannot be null", e.getMessage());, +                assertEquals("scheme must be either http or https", e.getMessage());, +                assertEquals("sniffInterval must be greater than 0", e.getMessage());, +                assertEquals("sniffRequestTimeout must be greater than 0", e.getMessage());, +                assertEquals("sniffAfterFailureDelay must be greater than 0", e.getMessage());, +                assertEquals("restClient cannot be null", e.getMessage());, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +        try (RestClient restClient = RestClient.builder(httpHost).build()) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/SnifferBuilderTests.java, +        try (RestClient client = RestClient.builder(hosts).build()) {, +                assertEquals("scheme cannot be null", e.getMessage());, +                assertEquals("scheme must be either http or https", e.getMessage());, +                assertEquals("sniffInterval must be greater than 0", e.getMessage());, +                assertEquals("sniffRequestTimeout must be greater than 0", e.getMessage());, +                assertEquals("sniffAfterFailureDelay must be greater than 0", e.getMessage());, +                assertEquals("restClient cannot be null", e.getMessage());, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +    public static Builder builder(HttpHost... hosts) {, +        return new Builder(hosts);, +        private final HttpHost[] hosts;, +        /**, +         * Creates a new builder instance and sets the hosts that the client will send requests to., +         */, +        private Builder(HttpHost... hosts) {, +            if (hosts == null || hosts.length == 0) {, +                throw new IllegalArgumentException("no hosts provided");, +            }, +            this.hosts = hosts;, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +        try (RestClient restClient = RestClient.builder(httpHost).build()) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/SnifferBuilderTests.java, +        try (RestClient client = RestClient.builder(hosts).build()) {, +                assertEquals("scheme cannot be null", e.getMessage());, +                assertEquals("scheme must be either http or https", e.getMessage());, +                assertEquals("sniffInterval must be greater than 0", e.getMessage());, +                assertEquals("sniffRequestTimeout must be greater than 0", e.getMessage());, +                assertEquals("sniffAfterFailureDelay must be greater than 0", e.getMessage());, +                assertEquals("restClient cannot be null", e.getMessage());, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +    public static Builder builder(HttpHost... hosts) {, +        return new Builder(hosts);, +        private final HttpHost[] hosts;, +        /**, +         * Creates a new builder instance and sets the hosts that the client will send requests to., +         */, +        private Builder(HttpHost... hosts) {, +            if (hosts == null || hosts.length == 0) {, +                throw new IllegalArgumentException("no hosts provided");, +            }, +            this.hosts = hosts;, +++ b/client/src/test/java/org/elasticsearch/client/RestClientBuilderTests.java, +            RestClient.builder((HttpHost[])null);, +            assertEquals("no hosts provided", e.getMessage());, +            RestClient.builder();, +            assertEquals("no hosts provided", e.getMessage());, +            RestClient.builder(new HttpHost[]{new HttpHost("localhost", 9200), null}).build();, +            assertEquals("host cannot be null", e.getMessage());, +            RestClient.builder(new HttpHost("localhost", 9200)).setMaxRetryTimeout(RandomInts.randomIntBetween(random(), Integer.MIN_VALUE, 0));, +        } catch(IllegalArgumentException e) {, +            assertEquals("maxRetryTimeout must be greater than 0", e.getMessage());, +            RestClient.builder(new HttpHost("localhost", 9200)).setDefaultHeaders(null);, +            assertEquals("default headers must not be null", e.getMessage());, +        try {, +            RestClient.builder(new HttpHost("localhost", 9200)).setDefaultHeaders(new Header[]{null});, +            fail("should have failed");, +        } catch(NullPointerException e) {, +            assertEquals("default header must not be null", e.getMessage());, +        }, +, +        RestClient.Builder builder = RestClient.builder(hosts);, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +        try (RestClient restClient = RestClient.builder(httpHost).build()) {, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/SnifferBuilderTests.java, +        try (RestClient client = RestClient.builder(hosts).build()) {, +                assertEquals("scheme cannot be null", e.getMessage());, +                assertEquals("scheme must be either http or https", e.getMessage());, +                assertEquals("sniffInterval must be greater than 0", e.getMessage());, +                assertEquals("sniffRequestTimeout must be greater than 0", e.getMessage());, +                assertEquals("sniffAfterFailureDelay must be greater than 0", e.getMessage());, +                assertEquals("restClient cannot be null", e.getMessage());, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +    public static Builder builder(HttpHost... hosts) {, +        return new Builder(hosts);, +        private final HttpHost[] hosts;, +        /**, +         * Creates a new builder instance and sets the hosts that the client will send requests to., +         */, +        private Builder(HttpHost... hosts) {, +            if (hosts == null || hosts.length == 0) {, +                throw new IllegalArgumentException("no hosts provided");, +            }, +            this.hosts = hosts;, +++ b/client/src/test/java/org/elasticsearch/client/RestClientBuilderTests.java, +            RestClient.builder((HttpHost[])null);]