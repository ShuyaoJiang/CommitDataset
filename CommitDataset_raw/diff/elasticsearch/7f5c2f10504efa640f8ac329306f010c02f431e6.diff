[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(settings, client, threadPool, clusterService));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(settings, client, threadPool, clusterService));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private String followerHistoryUUID;, +        final String followerHistoryUUID,, +            this.followerHistoryUUID = followerHistoryUUID;, +        innerSendBulkShardOperationsRequest(followerHistoryUUID, operations, leaderMaxSeqNoOfUpdatesOrDeletes,, +    protected abstract void innerSendBulkShardOperationsRequest(String followerHistoryUUID,, +                                                                List<Translog.Operation> operations,, +                                                                long leaderMaxSeqNoOfUpdatesOrDeletes,, +                                                                Consumer<BulkShardOperationsResponse> handler,, +                                                                Consumer<Exception> errorHandler);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(settings, client, threadPool, clusterService));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private String followerHistoryUUID;, +        final String followerHistoryUUID,, +            this.followerHistoryUUID = followerHistoryUUID;, +        innerSendBulkShardOperationsRequest(followerHistoryUUID, operations, leaderMaxSeqNoOfUpdatesOrDeletes,, +    protected abstract void innerSendBulkShardOperationsRequest(String followerHistoryUUID,, +                                                                List<Translog.Operation> operations,, +                                                                long leaderMaxSeqNoOfUpdatesOrDeletes,, +                                                                Consumer<BulkShardOperationsResponse> handler,, +                                                                Consumer<Exception> errorHandler);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTask.java, +                (int) a[10], (int) a[11], (TimeValue) a[12], (TimeValue) a[13], (Map<String, String>) a[14]));, +                headers, +        );, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(settings, client, threadPool, clusterService));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private String followerHistoryUUID;, +        final String followerHistoryUUID,, +            this.followerHistoryUUID = followerHistoryUUID;, +        innerSendBulkShardOperationsRequest(followerHistoryUUID, operations, leaderMaxSeqNoOfUpdatesOrDeletes,, +    protected abstract void innerSendBulkShardOperationsRequest(String followerHistoryUUID,, +                                                                List<Translog.Operation> operations,, +                                                                long leaderMaxSeqNoOfUpdatesOrDeletes,, +                                                                Consumer<BulkShardOperationsResponse> handler,, +                                                                Consumer<Exception> errorHandler);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTask.java, +                (int) a[10], (int) a[11], (TimeValue) a[12], (TimeValue) a[13], (Map<String, String>) a[14]));, +                headers, +        );, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.index.engine.CommitStats;, +import org.elasticsearch.index.engine.Engine;, +import static org.elasticsearch.xpack.ccr.action.TransportResumeFollowAction.extractLeaderShardHistoryUUIDs;, +    private final ClusterService clusterService;, +    public ShardFollowTasksExecutor(Settings settings, Client client, ThreadPool threadPool, ClusterService clusterService) {, +        this.clusterService = clusterService;, +, +        final String recordedLeaderShardHistoryUUID = getLeaderShardHistoryUUID(params);, +        return new ShardFollowNodeTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers, params,, +            scheduler, System::nanoTime) {, +                final String followerHistoryUUID,, +, +                final BulkShardOperationsRequest request = new BulkShardOperationsRequest(params.getFollowShardId(),, +                    followerHistoryUUID, operations, maxSeqNoOfUpdatesOrDeletes);, +                    new ShardChangesAction.Request(params.getLeaderShardId(), recordedLeaderShardHistoryUUID);, +    private String getLeaderShardHistoryUUID(ShardFollowTask params) {, +        IndexMetaData followIndexMetaData = clusterService.state().metaData().index(params.getFollowShardId().getIndex());, +        Map<String, String> ccrIndexMetadata = followIndexMetaData.getCustomData(Ccr.CCR_CUSTOM_METADATA_KEY);, +        String[] recordedLeaderShardHistoryUUIDs = extractLeaderShardHistoryUUIDs(ccrIndexMetadata);, +        return recordedLeaderShardHistoryUUIDs[params.getLeaderShardId().id()];, +    }, +, +    interface FollowerStatsInfoHandler {, +        void accept(String followerHistoryUUID, long globalCheckpoint, long maxSeqNo);, +        FollowerStatsInfoHandler handler = (followerHistoryUUID, followerGCP, maxSeqNo) -> {, +            shardFollowNodeTask.start(followerHistoryUUID, followerGCP, maxSeqNo, followerGCP, maxSeqNo);, +        };, +        fetchFollowerShardInfo(followerClient, params.getFollowShardId(), handler, errorHandler);, +    private void fetchFollowerShardInfo(, +            final FollowerStatsInfoHandler handler,, +                final ShardStats shardStats = filteredShardStats.get();, +                final CommitStats commitStats = shardStats.getCommitStats();, +                final String historyUUID = commitStats.getUserData().get(Engine.HISTORY_UUID_KEY);, +, +                final SeqNoStats seqNoStats = shardStats.getSeqNoStats();, +                handler.accept(historyUUID, globalCheckpoint, maxSeqNo);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(settings, client, threadPool, clusterService));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private String followerHistoryUUID;, +        final String followerHistoryUUID,, +            this.followerHistoryUUID = followerHistoryUUID;, +        innerSendBulkShardOperationsRequest(followerHistoryUUID, operations, leaderMaxSeqNoOfUpdatesOrDeletes,, +    protected abstract void innerSendBulkShardOperationsRequest(String followerHistoryUUID,, +                                                                List<Translog.Operation> operations,, +                                                                long leaderMaxSeqNoOfUpdatesOrDeletes,, +                                                                Consumer<BulkShardOperationsResponse> handler,, +                                                                Consumer<Exception> errorHandler);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTask.java, +                (int) a[10], (int) a[11], (TimeValue) a[12], (TimeValue) a[13], (Map<String, String>) a[14]));, +                headers, +        );]