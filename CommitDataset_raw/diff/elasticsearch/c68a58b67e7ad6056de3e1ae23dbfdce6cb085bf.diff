[+++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +    public static final ParseField QUERY_NAME_FIELD = new ParseField(NAME);, +    public static final ExistsQueryBuilder PROTOTYPE = new ExistsQueryBuilder("field");, +, +    public static final ParseField FIELD_FIELD = new ParseField("field");, +        builder.field(FIELD_FIELD.getPreferredName(), fieldName);, +    public static ExistsQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {, +        XContentParser parser = parseContext.parser();, +, +        String fieldPattern = null;, +        String queryName = null;, +        float boost = AbstractQueryBuilder.DEFAULT_BOOST;, +, +        XContentParser.Token token;, +        String currentFieldName = null;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (parseContext.parseFieldMatcher().match(currentFieldName, FIELD_FIELD)) {, +                    fieldPattern = parser.text();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {, +                    queryName = parser.text();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {, +                    boost = parser.floatValue();, +                } else {, +                    throw new ParsingException(parser.getTokenLocation(), "[" + ExistsQueryBuilder.NAME +, +                            "] query does not support [" + currentFieldName + "]");, +                }, +            } else {, +                throw new ParsingException(parser.getTokenLocation(), "[" + ExistsQueryBuilder.NAME +, +                        "] unknown token [" + token + "] after [" + currentFieldName + "]");, +            }, +        }, +, +        if (fieldPattern == null) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + ExistsQueryBuilder.NAME + "] must be provided with a [field]");, +        }, +, +        ExistsQueryBuilder builder = new ExistsQueryBuilder(fieldPattern);, +        builder.queryName(queryName);, +        builder.boost(boost);, +        return builder;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +    public static final ParseField QUERY_NAME_FIELD = new ParseField(NAME);, +    public static final ExistsQueryBuilder PROTOTYPE = new ExistsQueryBuilder("field");, +, +    public static final ParseField FIELD_FIELD = new ParseField("field");, +        builder.field(FIELD_FIELD.getPreferredName(), fieldName);, +    public static ExistsQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {, +        XContentParser parser = parseContext.parser();, +, +        String fieldPattern = null;, +        String queryName = null;, +        float boost = AbstractQueryBuilder.DEFAULT_BOOST;, +, +        XContentParser.Token token;, +        String currentFieldName = null;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (parseContext.parseFieldMatcher().match(currentFieldName, FIELD_FIELD)) {, +                    fieldPattern = parser.text();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) {, +                    queryName = parser.text();, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {, +                    boost = parser.floatValue();, +                } else {, +                    throw new ParsingException(parser.getTokenLocation(), "[" + ExistsQueryBuilder.NAME +, +                            "] query does not support [" + currentFieldName + "]");, +                }, +            } else {, +                throw new ParsingException(parser.getTokenLocation(), "[" + ExistsQueryBuilder.NAME +, +                        "] unknown token [" + token + "] after [" + currentFieldName + "]");, +            }, +        }, +, +        if (fieldPattern == null) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + ExistsQueryBuilder.NAME + "] must be provided with a [field]");, +        }, +, +        ExistsQueryBuilder builder = new ExistsQueryBuilder(fieldPattern);, +        builder.queryName(queryName);, +        builder.boost(boost);, +        return builder;, +    }, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParsingException;]