[+++ b/server/src/main/java/org/elasticsearch/action/support/GroupedActionListener.java, +            failure.accumulateAndGet(e, (previous, current) -> {, +                previous.addSuppressed(current);, +                return previous;, +            });, +++ b/server/src/main/java/org/elasticsearch/action/support/GroupedActionListener.java, +            failure.accumulateAndGet(e, (previous, current) -> {, +                previous.addSuppressed(current);, +                return previous;, +            });, +++ b/server/src/test/java/org/elasticsearch/action/support/GroupedActionListenerTests.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import static org.hamcrest.CoreMatchers.instanceOf;, +, +            threads[i] = new Thread(() -> {, +            });, +        Collection<Integer> defaults = randomBoolean() ? Collections.singletonList(-1) : Collections.emptyList();, +        GroupedActionListener<Integer> listener = new GroupedActionListener<>(result, size, defaults);, +, +    public void testConcurrentFailures() throws InterruptedException {, +        AtomicReference<Exception> finalException = new AtomicReference<>();, +        int numGroups = randomIntBetween(10, 100);, +        GroupedActionListener<Void> listener = new GroupedActionListener<>(, +            ActionListener.wrap(r -> {}, finalException::set), numGroups, Collections.emptyList());, +        ExecutorService executorService = Executors.newFixedThreadPool(numGroups);, +        for (int i = 0; i < numGroups; i++) {, +            executorService.submit(() -> listener.onFailure(new IOException()));, +        }, +, +        executorService.shutdown();, +        executorService.awaitTermination(10, TimeUnit.SECONDS);, +, +        Exception exception = finalException.get();, +        assertNotNull(exception);, +        assertThat(exception, instanceOf(IOException.class));, +        assertEquals(numGroups - 1, exception.getSuppressed().length);, +    }]