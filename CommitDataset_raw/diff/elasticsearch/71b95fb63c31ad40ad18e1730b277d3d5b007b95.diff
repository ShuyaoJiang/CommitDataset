[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +import org.elasticsearch.indices.analysis.AnalysisModule.AnalysisProvider;, +import static java.util.Collections.unmodifiableMap;, +, +    private final PrebuiltAnalysis prebuiltAnalysis = new PrebuiltAnalysis();, +, +    private final Map<String, AnalysisProvider<CharFilterFactory>> charFilters;, +    private final Map<String, AnalysisProvider<TokenFilterFactory>> tokenFilters;, +    private final Map<String, AnalysisProvider<TokenizerFactory>> tokenizers;, +    private final Map<String, AnalysisProvider<AnalyzerProvider<?>>> analyzers;, +    public AnalysisRegistry(Environment environment,, +                            Map<String, AnalysisProvider<CharFilterFactory>> charFilters,, +                            Map<String, AnalysisProvider<TokenFilterFactory>> tokenFilters,, +                            Map<String, AnalysisProvider<TokenizerFactory>> tokenizers,, +                            Map<String, AnalysisProvider<AnalyzerProvider<?>>> analyzers) {, +        this.charFilters = unmodifiableMap(charFilters);, +        this.tokenFilters = unmodifiableMap(tokenFilters);, +        this.tokenizers = unmodifiableMap(tokenizers);, +        this.analyzers = unmodifiableMap(analyzers);, +        AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> analyzerProvider = this.prebuiltAnalysis.getAnalyzerProvider(analyzer);, +            AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> provider = analyzers.get(analyzer);, +        final Map<String, AnalyzerProvider<?>> analyzierFactories = buildMapping(true, "analyzer", indexSettings, analyzersSettings,, +                analyzers, prebuiltAnalysis.analyzerProviderFactories);, +    private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap,, +            Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance), +            throws IOException {, +        final Map<String, AnalysisModule.AnalysisProvider<AnalyzerProvider<?>>> analyzerProviderFactories;, +        public AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> getAnalyzerProvider(String name) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +import org.elasticsearch.indices.analysis.AnalysisModule.AnalysisProvider;, +import static java.util.Collections.unmodifiableMap;, +, +    private final PrebuiltAnalysis prebuiltAnalysis = new PrebuiltAnalysis();, +, +    private final Map<String, AnalysisProvider<CharFilterFactory>> charFilters;, +    private final Map<String, AnalysisProvider<TokenFilterFactory>> tokenFilters;, +    private final Map<String, AnalysisProvider<TokenizerFactory>> tokenizers;, +    private final Map<String, AnalysisProvider<AnalyzerProvider<?>>> analyzers;, +    public AnalysisRegistry(Environment environment,, +                            Map<String, AnalysisProvider<CharFilterFactory>> charFilters,, +                            Map<String, AnalysisProvider<TokenFilterFactory>> tokenFilters,, +                            Map<String, AnalysisProvider<TokenizerFactory>> tokenizers,, +                            Map<String, AnalysisProvider<AnalyzerProvider<?>>> analyzers) {, +        this.charFilters = unmodifiableMap(charFilters);, +        this.tokenFilters = unmodifiableMap(tokenFilters);, +        this.tokenizers = unmodifiableMap(tokenizers);, +        this.analyzers = unmodifiableMap(analyzers);, +        AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> analyzerProvider = this.prebuiltAnalysis.getAnalyzerProvider(analyzer);, +            AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> provider = analyzers.get(analyzer);, +        final Map<String, AnalyzerProvider<?>> analyzierFactories = buildMapping(true, "analyzer", indexSettings, analyzersSettings,, +                analyzers, prebuiltAnalysis.analyzerProviderFactories);, +    private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap,, +            Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance), +            throws IOException {, +        final Map<String, AnalysisModule.AnalysisProvider<AnalyzerProvider<?>>> analyzerProviderFactories;, +        public AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> getAnalyzerProvider(String name) {, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +                           Map<String, AnalyzerProvider<?>> analyzerProviders,, +        for (Map.Entry<String, AnalyzerProvider<?>> entry : analyzerProviders.entrySet()) {, +            AnalyzerProvider<?> analyzerFactory = entry.getValue();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +import org.elasticsearch.indices.analysis.AnalysisModule.AnalysisProvider;, +import static java.util.Collections.unmodifiableMap;, +, +    private final PrebuiltAnalysis prebuiltAnalysis = new PrebuiltAnalysis();, +, +    private final Map<String, AnalysisProvider<CharFilterFactory>> charFilters;, +    private final Map<String, AnalysisProvider<TokenFilterFactory>> tokenFilters;, +    private final Map<String, AnalysisProvider<TokenizerFactory>> tokenizers;, +    private final Map<String, AnalysisProvider<AnalyzerProvider<?>>> analyzers;, +    public AnalysisRegistry(Environment environment,, +                            Map<String, AnalysisProvider<CharFilterFactory>> charFilters,, +                            Map<String, AnalysisProvider<TokenFilterFactory>> tokenFilters,, +                            Map<String, AnalysisProvider<TokenizerFactory>> tokenizers,, +                            Map<String, AnalysisProvider<AnalyzerProvider<?>>> analyzers) {, +        this.charFilters = unmodifiableMap(charFilters);, +        this.tokenFilters = unmodifiableMap(tokenFilters);, +        this.tokenizers = unmodifiableMap(tokenizers);, +        this.analyzers = unmodifiableMap(analyzers);, +        AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> analyzerProvider = this.prebuiltAnalysis.getAnalyzerProvider(analyzer);, +            AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> provider = analyzers.get(analyzer);, +        final Map<String, AnalyzerProvider<?>> analyzierFactories = buildMapping(true, "analyzer", indexSettings, analyzersSettings,, +                analyzers, prebuiltAnalysis.analyzerProviderFactories);, +    private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap,, +            Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance), +            throws IOException {, +        final Map<String, AnalysisModule.AnalysisProvider<AnalyzerProvider<?>>> analyzerProviderFactories;, +        public AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> getAnalyzerProvider(String name) {, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +                           Map<String, AnalyzerProvider<?>> analyzerProviders,, +        for (Map.Entry<String, AnalyzerProvider<?>> entry : analyzerProviders.entrySet()) {, +            AnalyzerProvider<?> analyzerFactory = entry.getValue();, +++ b/core/src/main/java/org/elasticsearch/index/analysis/PreBuiltAnalyzerProviderFactory.java, +public class PreBuiltAnalyzerProviderFactory implements AnalysisModule.AnalysisProvider<AnalyzerProvider<?>> {, +    public AnalyzerProvider<?> create(String name, Settings settings) {, +    public AnalyzerProvider<?> get(IndexSettings indexSettings, Environment environment, String name, Settings settings)]