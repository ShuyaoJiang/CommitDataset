[+++ b/x-pack/plugin/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.bulk.BulkShardOperationsAction;, +import org.elasticsearch.xpack.ccr.action.bulk.TransportBulkShardOperationsAction;, +                new ActionHandler<>(UnfollowIndexAction.INSTANCE, UnfollowIndexAction.TransportAction.class),, +                new ActionHandler<>(BulkShardOperationsAction.INSTANCE, TransportBulkShardOperationsAction.class));, +++ b/x-pack/plugin/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.bulk.BulkShardOperationsAction;, +import org.elasticsearch.xpack.ccr.action.bulk.TransportBulkShardOperationsAction;, +                new ActionHandler<>(UnfollowIndexAction.INSTANCE, UnfollowIndexAction.TransportAction.class),, +                new ActionHandler<>(BulkShardOperationsAction.INSTANCE, TransportBulkShardOperationsAction.class));, +++ b/x-pack/plugin/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +import java.util.Arrays;, +    public static final class Response extends ActionResponse {, +        private Translog.Operation[] operations;, +        Response(final Translog.Operation[] operations) {, +        public Translog.Operation[] getOperations() {, +        public void readFrom(final StreamInput in) throws IOException {, +            operations = in.readArray(Translog.Operation::readOperation, Translog.Operation[]::new);, +        public void writeTo(final StreamOutput out) throws IOException {, +            out.writeArray(Translog.Operation::writeOperation, operations);, +        public boolean equals(final Object o) {, +            final Response response = (Response) o;, +            return Arrays.equals(operations, response.operations);, +            return Arrays.hashCode(operations);, +            Translog.Operation[] operations = getOperationsBetween(indexShard, request.minSeqNo, request.maxSeqNo);, +    private static final Translog.Operation[] EMPTY_OPERATIONS_ARRAY = new Translog.Operation[0];, +, +    static Translog.Operation[] getOperationsBetween(IndexShard indexShard, long minSeqNo, long maxSeqNo) throws IOException {, +            return operations.toArray(EMPTY_OPERATIONS_ARRAY);, +++ b/x-pack/plugin/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.bulk.BulkShardOperationsAction;, +import org.elasticsearch.xpack.ccr.action.bulk.TransportBulkShardOperationsAction;, +                new ActionHandler<>(UnfollowIndexAction.INSTANCE, UnfollowIndexAction.TransportAction.class),, +                new ActionHandler<>(BulkShardOperationsAction.INSTANCE, TransportBulkShardOperationsAction.class));, +++ b/x-pack/plugin/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +import java.util.Arrays;, +    public static final class Response extends ActionResponse {, +        private Translog.Operation[] operations;, +        Response(final Translog.Operation[] operations) {, +        public Translog.Operation[] getOperations() {, +        public void readFrom(final StreamInput in) throws IOException {, +            operations = in.readArray(Translog.Operation::readOperation, Translog.Operation[]::new);, +        public void writeTo(final StreamOutput out) throws IOException {, +            out.writeArray(Translog.Operation::writeOperation, operations);, +        public boolean equals(final Object o) {, +            final Response response = (Response) o;, +            return Arrays.equals(operations, response.operations);, +            return Arrays.hashCode(operations);, +            Translog.Operation[] operations = getOperationsBetween(indexShard, request.minSeqNo, request.maxSeqNo);, +    private static final Translog.Operation[] EMPTY_OPERATIONS_ARRAY = new Translog.Operation[0];, +, +    static Translog.Operation[] getOperationsBetween(IndexShard indexShard, long minSeqNo, long maxSeqNo) throws IOException {, +            return operations.toArray(EMPTY_OPERATIONS_ARRAY);, +++ b/x-pack/plugin/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java, +import org.elasticsearch.xpack.ccr.action.bulk.BulkShardOperationsAction;, +import org.elasticsearch.xpack.ccr.action.bulk.BulkShardOperationsRequest;, +import org.elasticsearch.xpack.ccr.action.bulk.BulkShardOperationsResponse;, +        prepare(task, params.getLeaderShardId(), params.getFollowShardId(), followGlobalCheckPoint);, +    void prepare(AllocatedPersistentTask task, ShardId leaderShard, ShardId followerShard, long followGlobalCheckPoint) {, +                    retry(task, leaderShard, followerShard, followGlobalCheckPoint);, +                    ChunksCoordinator coordinator = new ChunksCoordinator(leaderShard, followerShard, e -> {, +                                    persistentTask -> prepare(task, leaderShard, followerShard, leaderGlobalCheckPoint), task::markAsFailed), +    private void retry(AllocatedPersistentTask task, ShardId leaderShard, ShardId followerShard, long followGlobalCheckPoint) {, +                prepare(task, leaderShard, followerShard, followGlobalCheckPoint);, +        private final ShardId followerShard;, +        ChunksCoordinator(ShardId leaderShard, ShardId followerShard, Consumer<Exception> handler) {, +            this.followerShard = followerShard;, +            long[] chunk = chunks.poll();, +            if (chunk == null) {, +            ChunkProcessor processor = new ChunkProcessor(leaderShard, followerShard, e -> {, +                if (e == null) {, +            processor.start(chunk[0], chunk[1]);, +        private final ShardId leaderShard;, +        private final ShardId followerShard;, +        private final Consumer<Exception> handler;, +        ChunkProcessor(ShardId leaderShard, ShardId followerShard, Consumer<Exception> handler) {, +            this.leaderShard = leaderShard;, +            this.followerShard = followerShard;, +            ShardChangesAction.Request request = new ShardChangesAction.Request(leaderShard);, +                    assert e != null;, +                    handler.accept(e);, +                    assert e != null;, +                    handler.accept(e);, +                    final BulkShardOperationsRequest request = new BulkShardOperationsRequest(followerShard, response.getOperations());, +                    client.execute(BulkShardOperationsAction.INSTANCE, request, new ActionListener<BulkShardOperationsResponse>() {, +                        @Override, +                        public void onResponse(final BulkShardOperationsResponse bulkShardOperationsResponse) {, +                            handler.accept(null);, +, +                        @Override, +                        public void onFailure(final Exception e) {, +                            assert e != null;, +                            handler.accept(e);, +                    });, +, +++ b/x-pack/plugin/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.bulk.BulkShardOperationsAction;, +import org.elasticsearch.xpack.ccr.action.bulk.TransportBulkShardOperationsAction;, +                new ActionHandler<>(UnfollowIndexAction.INSTANCE, UnfollowIndexAction.TransportAction.class),, +                new ActionHandler<>(BulkShardOperationsAction.INSTANCE, TransportBulkShardOperationsAction.class));]