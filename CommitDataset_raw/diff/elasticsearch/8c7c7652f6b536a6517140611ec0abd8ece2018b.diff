[+++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +        String rewrite = this.rewrite;, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +        String rewrite = this.rewrite;, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +        this.shell = new ArrayList<>(points);, +        if (!shell.get(shell.size() - 1).equals(shell.get(0))) {, +            shell.add(shell.get(0));, +        }, +        List<GeoPoint> shell = new ArrayList<GeoPoint>();, +        for (GeoPoint geoPoint : this.shell) {, +            shell.add(new GeoPoint(geoPoint));, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +        String rewrite = this.rewrite;, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +        this.shell = new ArrayList<>(points);, +        if (!shell.get(shell.size() - 1).equals(shell.get(0))) {, +            shell.add(shell.get(0));, +        }, +        List<GeoPoint> shell = new ArrayList<GeoPoint>();, +        for (GeoPoint geoPoint : this.shell) {, +            shell.add(new GeoPoint(geoPoint));, +++ b/core/src/main/java/org/elasticsearch/index/query/GeohashCellQuery.java, +            String geohash = this.geohash;, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +        String rewrite = this.rewrite;, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +        this.shell = new ArrayList<>(points);, +        if (!shell.get(shell.size() - 1).equals(shell.get(0))) {, +            shell.add(shell.get(0));, +        }, +        List<GeoPoint> shell = new ArrayList<GeoPoint>();, +        for (GeoPoint geoPoint : this.shell) {, +            shell.add(new GeoPoint(geoPoint));, +++ b/core/src/main/java/org/elasticsearch/index/query/GeohashCellQuery.java, +            String geohash = this.geohash;, +++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +import org.elasticsearch.action.termvectors.MultiTermVectorsItemResponse;, +import org.elasticsearch.action.termvectors.MultiTermVectorsRequest;, +import org.elasticsearch.action.termvectors.MultiTermVectorsResponse;, +import org.elasticsearch.action.termvectors.TermVectorsRequest;, +import org.elasticsearch.action.termvectors.TermVectorsResponse;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Objects;, +import java.util.Optional;, +import java.util.Set;, +        Item(Item copy) {, +            if (copy.id == null && copy.doc == null) {, +                throw new IllegalArgumentException("Item requires either id or doc to be non-null");, +            }, +            this.index = copy.index;, +            this.type = copy.type;, +            this.id = copy.id;, +            this.doc = copy.doc;, +            this.fields = copy.fields;, +            this.perFieldAnalyzer = copy.perFieldAnalyzer;, +            this.version = copy.version;, +            this.versionType = copy.versionType;, +        }, +, +        Item[] likeItems = new Item[this.likeItems.length];, +        for (int i = 0; i < likeItems.length; i++) {, +            likeItems[i] = new Item(this.likeItems[i]);, +        }, +        Item[] unlikeItems = new Item[this.unlikeItems.length];, +        for (int i = 0; i < unlikeItems.length; i++) {, +            unlikeItems[i] = new Item(this.unlikeItems[i]);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java, +        String rewrite = this.rewrite;, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +        this.shell = new ArrayList<>(points);, +        if (!shell.get(shell.size() - 1).equals(shell.get(0))) {, +            shell.add(shell.get(0));, +        }, +        List<GeoPoint> shell = new ArrayList<GeoPoint>();, +        for (GeoPoint geoPoint : this.shell) {, +            shell.add(new GeoPoint(geoPoint));, +++ b/core/src/main/java/org/elasticsearch/index/query/GeohashCellQuery.java, +            String geohash = this.geohash;, +++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +import org.elasticsearch.action.termvectors.MultiTermVectorsItemResponse;, +import org.elasticsearch.action.termvectors.MultiTermVectorsRequest;, +import org.elasticsearch.action.termvectors.MultiTermVectorsResponse;, +import org.elasticsearch.action.termvectors.TermVectorsRequest;, +import org.elasticsearch.action.termvectors.TermVectorsResponse;, +import org.elasticsearch.common.xcontent.ToXContent;]