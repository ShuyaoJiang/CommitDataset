[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                 * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +                 * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +                 * under the various other subprojects. So here we create another publication using the same, +                 * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                 * in alphabetical order. This lets us publish the zip file and even though the pom says the, +                 * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +                 * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +                 * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                 * maven local work, since we publish to maven central externally. */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                 * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +                 * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +                 * under the various other subprojects. So here we create another publication using the same, +                 * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                 * in alphabetical order. This lets us publish the zip file and even though the pom says the, +                 * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +                 * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +                 * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                 * maven local work, since we publish to maven central externally. */, +++ b/distribution/integ-test-zip/build.gradle, +    /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +     * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +     * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +     * under the various other subprojects. So here we create another publication using the same, +     * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +     * in alphabetical order. This lets us publish the zip file and even though the pom says the, +     * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +     * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +     * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +     * maven local work, since we publish to maven central externally. */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                 * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +                 * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +                 * under the various other subprojects. So here we create another publication using the same, +                 * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                 * in alphabetical order. This lets us publish the zip file and even though the pom says the, +                 * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +                 * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +                 * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                 * maven local work, since we publish to maven central externally. */, +++ b/distribution/integ-test-zip/build.gradle, +    /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +     * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +     * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +     * under the various other subprojects. So here we create another publication using the same, +     * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +     * in alphabetical order. This lets us publish the zip file and even though the pom says the, +     * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +     * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +     * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +     * maven local work, since we publish to maven central externally. */, +++ b/distribution/zip/build.gradle, +    /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +     * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +     * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +     * under the various other subprojects. So here we create another publication using the same, +     * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +     * in alphabetical order. This lets us publish the zip file and even though the pom says the, +     * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +     * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +     * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +     * maven local work, since we publish to maven central externally. */]