[+++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +        this.availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +        this.availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        // this should be plenty for machines up to 256 cores, +        private final long maxNumberOfThreadsThreshold = 1 << 12;, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +        this.availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        // this should be plenty for machines up to 256 cores, +        private final long maxNumberOfThreadsThreshold = 1 << 12;, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +        final int availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +        this.availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        // this should be plenty for machines up to 256 cores, +        private final long maxNumberOfThreadsThreshold = 1 << 12;, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +        final int availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        Setting.intSetting("processors", Runtime.getRuntime().availableProcessors(), 1, Property.NodeScope);, +     * Returns the number of available processors. Defaults to, +     * {@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}, +     * instance with the key "processors" set to the desired value., +     *, +     * @param settings a {@link Settings} instance from which to derive the available processors, +     * @return the number of available processors, +    public static int numberOfProcessors(final Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +        this.availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        // this should be plenty for machines up to 256 cores, +        private final long maxNumberOfThreadsThreshold = 1 << 12;, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +        final int availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        Setting.intSetting("processors", Runtime.getRuntime().availableProcessors(), 1, Property.NodeScope);, +     * Returns the number of available processors. Defaults to, +     * {@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}, +     * instance with the key "processors" set to the desired value., +     *, +     * @param settings a {@link Settings} instance from which to derive the available processors, +     * @return the number of available processors, +    public static int numberOfProcessors(final Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/index/MergeSchedulerConfig.java, +            (s) -> Integer.toString(Math.max(1, Math.min(4, EsExecutors.numberOfProcessors(s) / 2))),, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +        this.availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        // this should be plenty for machines up to 256 cores, +        private final long maxNumberOfThreadsThreshold = 1 << 12;, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +        final int availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        Setting.intSetting("processors", Runtime.getRuntime().availableProcessors(), 1, Property.NodeScope);, +     * Returns the number of available processors. Defaults to, +     * {@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}, +     * instance with the key "processors" set to the desired value., +     *, +     * @param settings a {@link Settings} instance from which to derive the available processors, +     * @return the number of available processors, +    public static int numberOfProcessors(final Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/index/MergeSchedulerConfig.java, +            (s) -> Integer.toString(Math.max(1, Math.min(4, EsExecutors.numberOfProcessors(s) / 2))),, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsService.java, +        this.info = probe.osInfo(refreshInterval.millis(), EsExecutors.numberOfProcessors(settings));, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +        this.availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        // this should be plenty for machines up to 256 cores, +        private final long maxNumberOfThreadsThreshold = 1 << 12;, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +        final int availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        Setting.intSetting("processors", Runtime.getRuntime().availableProcessors(), 1, Property.NodeScope);, +     * Returns the number of available processors. Defaults to, +     * {@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}, +     * instance with the key "processors" set to the desired value., +     *, +     * @param settings a {@link Settings} instance from which to derive the available processors, +     * @return the number of available processors, +    public static int numberOfProcessors(final Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/index/MergeSchedulerConfig.java, +            (s) -> Integer.toString(Math.max(1, Math.min(4, EsExecutors.numberOfProcessors(s) / 2))),, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsService.java, +        this.info = probe.osInfo(refreshInterval.millis(), EsExecutors.numberOfProcessors(settings));, +++ b/core/src/main/java/org/elasticsearch/threadpool/FixedExecutorBuilder.java, +            return 1 + EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportMultiSearchAction.java, +        this.availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        // this should be plenty for machines up to 256 cores, +        private final long maxNumberOfThreadsThreshold = 1 << 12;, +++ b/core/src/main/java/org/elasticsearch/common/util/PageCacheRecycler.java, +        final int availableProcessors = EsExecutors.numberOfProcessors(settings);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +        Setting.intSetting("processors", Runtime.getRuntime().availableProcessors(), 1, Property.NodeScope);, +     * Returns the number of available processors. Defaults to]