[+++ b/src/main/java/org/elasticsearch/action/TransportActions.java, +            public static final String VALIDATE_QUERY = "indices/validateQuery";, +++ b/src/main/java/org/elasticsearch/action/TransportActions.java, +            public static final String VALIDATE_QUERY = "indices/validateQuery";, +++ b/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ShardValidateQueryRequest.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.indices.validate.query;, +, +import org.elasticsearch.action.support.broadcast.BroadcastShardOperationRequest;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +, +/**, + * Internal validate request executed directly against a specific index shard., + *, + *, + */, +class ShardValidateQueryRequest extends BroadcastShardOperationRequest {, +, +    private byte[] querySource;, +    private int querySourceOffset;, +    private int querySourceLength;, +, +    private String[] types = Strings.EMPTY_ARRAY;, +, +    @Nullable, +    private String[] filteringAliases;, +, +    ShardValidateQueryRequest() {, +, +    }, +, +    public ShardValidateQueryRequest(String index, int shardId, @Nullable String[] filteringAliases, ValidateQueryRequest request) {, +        super(index, shardId);, +        this.querySource = request.querySource();, +        this.querySourceOffset = request.querySourceOffset();, +        this.querySourceLength = request.querySourceLength();, +        this.types = request.types();, +        this.filteringAliases = filteringAliases;, +    }, +, +    public byte[] querySource() {, +        return querySource;, +    }, +, +    public int querySourceOffset() {, +        return querySourceOffset;, +    }, +, +    public int querySourceLength() {, +        return querySourceLength;, +    }, +, +    public String[] types() {, +        return this.types;, +    }, +, +    public String[] filteringAliases() {, +        return filteringAliases;, +    }, +, +    @Override, +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        querySourceLength = in.readVInt();, +        querySourceOffset = 0;, +        querySource = new byte[querySourceLength];, +        in.readFully(querySource);, +        int typesSize = in.readVInt();, +        if (typesSize > 0) {, +            types = new String[typesSize];, +            for (int i = 0; i < typesSize; i++) {, +                types[i] = in.readUTF();, +            }, +        }, +        int aliasesSize = in.readVInt();, +        if (aliasesSize > 0) {, +            filteringAliases = new String[aliasesSize];]