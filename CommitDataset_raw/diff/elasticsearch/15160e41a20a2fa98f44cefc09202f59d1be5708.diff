[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessor.java, +import org.joda.time.base.BaseDateTime;, +            Object timestamp = bucket.getKey();, +            if (timestamp instanceof BaseDateTime) {, +                timestamp = ((BaseDateTime) timestamp).getMillis();, +            }, +            keyValuePairs.put(histogram.getName(), timestamp);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessor.java, +import org.joda.time.base.BaseDateTime;, +            Object timestamp = bucket.getKey();, +            if (timestamp instanceof BaseDateTime) {, +                timestamp = ((BaseDateTime) timestamp).getMillis();, +            }, +            keyValuePairs.put(histogram.getName(), timestamp);, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationTestUtils.java, +import org.joda.time.DateTime;, +    static Histogram.Bucket createDateHistogramBucket(DateTime timestamp, long docCount) {, +        Histogram.Bucket bucket = mock(Histogram.Bucket.class);, +        when(bucket.getKey()).thenReturn(timestamp);, +        when(bucket.getDocCount()).thenReturn(docCount);, +        return bucket;, +    }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessor.java, +import org.joda.time.base.BaseDateTime;, +            Object timestamp = bucket.getKey();, +            if (timestamp instanceof BaseDateTime) {, +                timestamp = ((BaseDateTime) timestamp).getMillis();, +            }, +            keyValuePairs.put(histogram.getName(), timestamp);, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationTestUtils.java, +import org.joda.time.DateTime;, +    static Histogram.Bucket createDateHistogramBucket(DateTime timestamp, long docCount) {, +        Histogram.Bucket bucket = mock(Histogram.Bucket.class);, +        when(bucket.getKey()).thenReturn(timestamp);, +        when(bucket.getDocCount()).thenReturn(docCount);, +        return bucket;, +    }, +, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessorTests.java, +import org.joda.time.DateTime;, +import static org.elasticsearch.xpack.ml.datafeed.extractor.aggregation.AggregationTestUtils.createDateHistogramBucket;, +    public void testProcessGivenHistogramWithDateTimeKeys() throws IOException {, +        List<Histogram.Bucket> histogramBuckets = Arrays.asList(, +                createDateHistogramBucket(new DateTime(1000L), 3),, +                createDateHistogramBucket(new DateTime(2000L), 5), +        );, +        Histogram histogram = mock(Histogram.class);, +        when(histogram.getName()).thenReturn("time");, +        when(histogram.getBuckets()).thenReturn(histogramBuckets);, +, +        String json = aggToString(histogram);, +, +        assertThat(json, equalTo("{\"time\":1000,\"doc_count\":3} {\"time\":2000,\"doc_count\":5}"));, +    }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessor.java, +import org.joda.time.base.BaseDateTime;, +            Object timestamp = bucket.getKey();, +            if (timestamp instanceof BaseDateTime) {, +                timestamp = ((BaseDateTime) timestamp).getMillis();, +            }, +            keyValuePairs.put(histogram.getName(), timestamp);, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationTestUtils.java, +import org.joda.time.DateTime;, +    static Histogram.Bucket createDateHistogramBucket(DateTime timestamp, long docCount) {, +        Histogram.Bucket bucket = mock(Histogram.Bucket.class);, +        when(bucket.getKey()).thenReturn(timestamp);, +        when(bucket.getDocCount()).thenReturn(docCount);, +        return bucket;, +    }, +, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationToJsonProcessorTests.java, +import org.joda.time.DateTime;, +import static org.elasticsearch.xpack.ml.datafeed.extractor.aggregation.AggregationTestUtils.createDateHistogramBucket;, +    public void testProcessGivenHistogramWithDateTimeKeys() throws IOException {, +        List<Histogram.Bucket> histogramBuckets = Arrays.asList(, +                createDateHistogramBucket(new DateTime(1000L), 3),, +                createDateHistogramBucket(new DateTime(2000L), 5), +        );, +        Histogram histogram = mock(Histogram.class);, +        when(histogram.getName()).thenReturn("time");, +        when(histogram.getBuckets()).thenReturn(histogramBuckets);, +, +        String json = aggToString(histogram);, +, +        assertThat(json, equalTo("{\"time\":1000,\"doc_count\":3} {\"time\":2000,\"doc_count\":5}"));, +    }, +, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/ml/integration/DatafeedJobIT.java, +    public void testLookbackOnlyGivenAggregationsWithHistogram() throws Exception {, +        String jobId = "aggs-histogram-job";, +    public void testLookbackOnlyGivenAggregationsWithDateHistogram() throws Exception {, +        String jobId = "aggs-date-histogram-job";, +        String job = "{\"description\":\"Aggs job\",\"analysis_config\" :{\"bucket_span\":3600,\"summary_count_field_name\":\"doc_count\",", +                + "\"detectors\":[{\"function\":\"mean\",\"field_name\":\"responsetime\",\"by_field_name\":\"airline\"}]},", +                + "\"data_description\" : {\"time_field\":\"time stamp\"}", +                + "}";, +        client().performRequest("put", MlPlugin.BASE_PATH + "anomaly_detectors/" + jobId, Collections.emptyMap(), new StringEntity(job));, +]