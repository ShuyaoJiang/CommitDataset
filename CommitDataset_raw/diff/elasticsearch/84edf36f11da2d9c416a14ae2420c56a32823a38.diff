[+++ b/core/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +            private float nextDown(float f) {, +                // HalfFloatPoint.nextDown considers that -0 is the same as +0, +                // while point ranges are consistent with Float.compare, so, +                // they consider that -0 < +0, so we explicitly make sure, +                // that nextDown(+0) returns -0, +                if (Float.floatToIntBits(f) == Float.floatToIntBits(0f)) {, +                    return -0f;, +                } else {, +                    return HalfFloatPoint.nextDown(f);, +                }, +            }, +, +            private float nextUp(float f) {, +                // HalfFloatPoint.nextUp considers that -0 is the same as +0, +                // while point ranges are consistent with Float.compare, so, +                // they consider that -0 < +0, so we explicitly make sure, +                // that nextUp(-0) returns +0, +                if (Float.floatToIntBits(f) == Float.floatToIntBits(-0f)) {, +                    return +0f;, +                } else {, +                    return HalfFloatPoint.nextUp(f);, +                }, +            }, +, +                        l = nextDown(l);, +                        u = nextUp(u);, +                    u = nextDown(u);, +            private float nextDown(float f) {, +                // Math.nextDown considers that -0 is the same as +0, +                // while point ranges are consistent with Float.compare, so, +                // they consider that -0 < +0, so we explicitly make sure, +                // that nextDown(+0) returns -0, +                if (Float.floatToIntBits(f) == Float.floatToIntBits(0f)) {, +                    return -0f;, +                } else {, +                    return Math.nextDown(f);, +                }, +            }, +, +            private float nextUp(float f) {, +                // Math.nextUp considers that -0 is the same as +0, +                // while point ranges are consistent with Float.compare, so, +                // they consider that -0 < +0, so we explicitly make sure, +                // that nextUp(-0) returns +0, +                if (Float.floatToIntBits(f) == Float.floatToIntBits(-0f)) {, +                    return +0f;, +                } else {, +                    return Math.nextUp(f);, +                }, +            }, +, +                        l = nextUp(l);, +                        u = nextDown(u);, +            private double nextDown(double d) {, +                // Math.nextDown considers that -0 is the same as +0, +                // while point ranges are consistent with Double.compare, so, +                // they consider that -0 < +0, so we explicitly make sure, +                // that nextDown(+0) returns -0, +                if (Double.doubleToLongBits(d) == Double.doubleToLongBits(0d)) {, +                    return -0d;, +                } else {, +                    return Math.nextDown(d);, +                }, +            }, +, +            private double nextUp(double d) {, +                // Math.nextUp considers that -0 is the same as +0, +                // while point ranges are consistent with Double.compare, so, +                // they consider that -0 < +0, so we explicitly make sure, +                // that nextUp(-0) returns +0, +                if (Double.doubleToLongBits(d) == Double.doubleToLongBits(-0d)) {, +                    return +0d;, +                } else {, +                    return Math.nextUp(d);, +                }, +            }, +, +                        l = nextUp(l);, +                        u = nextDown(u);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +            private float nextDown(float f) {, +                // HalfFloatPoint.nextDown considers that -0 is the same as +0, +                // while point ranges are consistent with Float.compare, so, +                // they consider that -0 < +0, so we explicitly make sure, +                // that nextDown(+0) returns -0, +                if (Float.floatToIntBits(f) == Float.floatToIntBits(0f)) {, +                    return -0f;, +                } else {, +                    return HalfFloatPoint.nextDown(f);, +                }, +            }, +, +            private float nextUp(float f) {, +                // HalfFloatPoint.nextUp considers that -0 is the same as +0, +                // while point ranges are consistent with Float.compare, so, +                // they consider that -0 < +0, so we explicitly make sure, +                // that nextUp(-0) returns +0, +                if (Float.floatToIntBits(f) == Float.floatToIntBits(-0f)) {, +                    return +0f;]