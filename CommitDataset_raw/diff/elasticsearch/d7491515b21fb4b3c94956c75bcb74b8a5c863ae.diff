[+++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            return new MatchNoDocsQuery();, +        }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            return new MatchNoDocsQuery();, +        }, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            return new MatchNoDocsQuery();, +        }, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +     * @param metaData the shards index metadata. This is required to access the indexes settings etc., +    public void deleteShardStore(String reason, ShardId shardId, IndexMetaData metaData) throws IOException {, +        logger.trace("{} deleting shard reason [{}]", shardId, reason);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            return new MatchNoDocsQuery();, +        }, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +     * @param metaData the shards index metadata. This is required to access the indexes settings etc., +    public void deleteShardStore(String reason, ShardId shardId, IndexMetaData metaData) throws IOException {, +        logger.trace("{} deleting shard reason [{}]", shardId, reason);, +++ b/core/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +            clusterService.submitStateUpdateTask("indices_store", new ClusterStateNonMasterUpdateTask() {, +                    IndexMetaData indexMeta = clusterState.getMetaData().indices().get(shardId.getIndex());, +                        indicesService.deleteShardStore("no longer used", shardId, indexMeta);, +                    // if the index doesn't exists anymore, delete its store as well, but only if its a non master node, since master, +                    // nodes keep the index metadata around , +                    if (indicesService.hasIndex(shardId.getIndex()) == false && currentState.nodes().localNode().masterNode() == false) {, +                        try {, +                            indicesService.deleteIndexStore("no longer used", indexMeta, currentState);, +                        } catch (Throwable ex) {, +                            logger.debug("{} failed to delete unallocated index, ignoring", ex, shardId.getIndex());, +                        }, +                    }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            return new MatchNoDocsQuery();, +        }, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +     * @param metaData the shards index metadata. This is required to access the indexes settings etc., +    public void deleteShardStore(String reason, ShardId shardId, IndexMetaData metaData) throws IOException {, +        logger.trace("{} deleting shard reason [{}]", shardId, reason);, +++ b/core/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +            clusterService.submitStateUpdateTask("indices_store", new ClusterStateNonMasterUpdateTask() {, +                    IndexMetaData indexMeta = clusterState.getMetaData().indices().get(shardId.getIndex());, +                        indicesService.deleteShardStore("no longer used", shardId, indexMeta);, +                    // if the index doesn't exists anymore, delete its store as well, but only if its a non master node, since master, +                    // nodes keep the index metadata around , +                    if (indicesService.hasIndex(shardId.getIndex()) == false && currentState.nodes().localNode().masterNode() == false) {, +                        try {, +                            indicesService.deleteIndexStore("no longer used", indexMeta, currentState);, +                        } catch (Throwable ex) {, +                            logger.debug("{} failed to delete unallocated index, ignoring", ex, shardId.getIndex());, +                        }, +                    }, +++ b/core/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegrationTests.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            return new MatchNoDocsQuery();, +        }, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java]