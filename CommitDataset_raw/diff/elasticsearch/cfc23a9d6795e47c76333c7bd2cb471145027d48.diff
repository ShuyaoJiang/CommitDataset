[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.transport.BoundTransportAddress;, +        node = new Node(nodeSettings) {, +            @Override, +            protected void validateNodeBeforeAcceptingRequests(Settings settings, BoundTransportAddress boundTransportAddress) {, +                BootstrapCheck.check(settings, boundTransportAddress);, +            }, +        };, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.transport.BoundTransportAddress;, +        node = new Node(nodeSettings) {, +            @Override, +            protected void validateNodeBeforeAcceptingRequests(Settings settings, BoundTransportAddress boundTransportAddress) {, +                BootstrapCheck.check(settings, boundTransportAddress);, +            }, +        };, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +import org.elasticsearch.common.transport.BoundTransportAddress;, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.node.Node;, +     * @param boundTransportAddress the node network bindings, +    static void check(final Settings settings, final BoundTransportAddress boundTransportAddress) {, +        check(enforceLimits(boundTransportAddress), checks(settings), Node.NODE_NAME_SETTING.get(settings));, +     * @param nodeName      the node name to be used as a logging prefix, +    static void check(final boolean enforceLimits, final List<Check> checks, final String nodeName) {, +        final ESLogger logger = Loggers.getLogger(BootstrapCheck.class, nodeName);, +     * @param boundTransportAddress the node network bindings, +    static boolean enforceLimits(BoundTransportAddress boundTransportAddress) {, +        return !(Arrays.stream(boundTransportAddress.boundAddresses()).allMatch(TransportAddress::isLoopbackOrLinkLocalAddress) &&, +                boundTransportAddress.publishAddress().isLoopbackOrLinkLocalAddress());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.transport.BoundTransportAddress;, +        node = new Node(nodeSettings) {, +            @Override, +            protected void validateNodeBeforeAcceptingRequests(Settings settings, BoundTransportAddress boundTransportAddress) {, +                BootstrapCheck.check(settings, boundTransportAddress);, +            }, +        };, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +import org.elasticsearch.common.transport.BoundTransportAddress;, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.node.Node;, +     * @param boundTransportAddress the node network bindings, +    static void check(final Settings settings, final BoundTransportAddress boundTransportAddress) {, +        check(enforceLimits(boundTransportAddress), checks(settings), Node.NODE_NAME_SETTING.get(settings));, +     * @param nodeName      the node name to be used as a logging prefix, +    static void check(final boolean enforceLimits, final List<Check> checks, final String nodeName) {, +        final ESLogger logger = Loggers.getLogger(BootstrapCheck.class, nodeName);, +     * @param boundTransportAddress the node network bindings, +    static boolean enforceLimits(BoundTransportAddress boundTransportAddress) {, +        return !(Arrays.stream(boundTransportAddress.boundAddresses()).allMatch(TransportAddress::isLoopbackOrLinkLocalAddress) &&, +                boundTransportAddress.publishAddress().isLoopbackOrLinkLocalAddress());, +++ b/core/src/main/java/org/elasticsearch/common/transport/DummyTransportAddress.java, +    public boolean isLoopbackOrLinkLocalAddress() {, +        return false;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.transport.BoundTransportAddress;, +        node = new Node(nodeSettings) {, +            @Override, +            protected void validateNodeBeforeAcceptingRequests(Settings settings, BoundTransportAddress boundTransportAddress) {, +                BootstrapCheck.check(settings, boundTransportAddress);, +            }, +        };, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +import org.elasticsearch.common.transport.BoundTransportAddress;, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.node.Node;, +     * @param boundTransportAddress the node network bindings, +    static void check(final Settings settings, final BoundTransportAddress boundTransportAddress) {, +        check(enforceLimits(boundTransportAddress), checks(settings), Node.NODE_NAME_SETTING.get(settings));, +     * @param nodeName      the node name to be used as a logging prefix, +    static void check(final boolean enforceLimits, final List<Check> checks, final String nodeName) {, +        final ESLogger logger = Loggers.getLogger(BootstrapCheck.class, nodeName);, +     * @param boundTransportAddress the node network bindings, +    static boolean enforceLimits(BoundTransportAddress boundTransportAddress) {, +        return !(Arrays.stream(boundTransportAddress.boundAddresses()).allMatch(TransportAddress::isLoopbackOrLinkLocalAddress) &&, +                boundTransportAddress.publishAddress().isLoopbackOrLinkLocalAddress());, +++ b/core/src/main/java/org/elasticsearch/common/transport/DummyTransportAddress.java, +    public boolean isLoopbackOrLinkLocalAddress() {, +        return false;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +    public boolean isLoopbackOrLinkLocalAddress() {, +        return address.getAddress().isLinkLocalAddress() || address.getAddress().isLoopbackAddress();, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.transport.BoundTransportAddress;, +        node = new Node(nodeSettings) {, +            @Override, +            protected void validateNodeBeforeAcceptingRequests(Settings settings, BoundTransportAddress boundTransportAddress) {, +                BootstrapCheck.check(settings, boundTransportAddress);, +            }, +        };]