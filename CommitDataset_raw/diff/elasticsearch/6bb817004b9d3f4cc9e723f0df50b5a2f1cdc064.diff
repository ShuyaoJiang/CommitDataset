[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                final ClusterState clusterState =, +                        updater.updateSettings(, +                                currentState,, +                                clusterSettings.upgradeSettings(request.transientSettings()),, +                                clusterSettings.upgradeSettings(request.persistentSettings()),, +                                logger);, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                final ClusterState clusterState =, +                        updater.updateSettings(, +                                currentState,, +                                clusterSettings.upgradeSettings(request.transientSettings()),, +                                clusterSettings.upgradeSettings(request.persistentSettings()),, +                                logger);, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.core.internal.io.IOUtils;, +            SettingsModule settingsModule =, +                    new SettingsModule(settings, additionalSettings, additionalSettingsFilter, Collections.emptySet());, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                final ClusterState clusterState =, +                        updater.updateSettings(, +                                currentState,, +                                clusterSettings.upgradeSettings(request.transientSettings()),, +                                clusterSettings.upgradeSettings(request.persistentSettings()),, +                                logger);, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.core.internal.io.IOUtils;, +            SettingsModule settingsModule =, +                    new SettingsModule(settings, additionalSettings, additionalSettingsFilter, Collections.emptySet());, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import java.util.AbstractMap;, +import java.util.function.Function;, +    private final Map<Setting<?>, Function<Map.Entry<String, String>, Map.Entry<String, String>>> settingUpgraders;, +    protected AbstractScopedSettings(, +            final Settings settings,, +            final Set<Setting<?>> settingsSet,, +            final Set<SettingUpgrader<?>> settingUpgraders,, +            final Setting.Property scope) {, +, +        this.settingUpgraders =, +                Collections.unmodifiableMap(, +                        settingUpgraders, +                                .stream(), +                                .collect(, +                                        Collectors.toMap(, +                                                SettingUpgrader::getSetting,, +                                                u -> e -> new AbstractMap.SimpleEntry<>(u.getKey(e.getKey()), u.getValue(e.getValue())))));, +, +        settingUpgraders = Collections.unmodifiableMap(new HashMap<>(other.settingUpgraders));, +     * Upgrade all settings eligible for upgrade in the specified settings instance., +     *, +     * @param settings the settings instance that might contain settings to be upgraded, +     * @return a new settings instance if any settings required upgrade, otherwise the same settings instance as specified, +     */, +    public Settings upgradeSettings(final Settings settings) {, +        final Settings.Builder builder = Settings.builder();, +        boolean changed = false; // track if any settings were upgraded, +        for (final String key : settings.keySet()) {, +            final Setting<?> setting = getRaw(key);, +            final Function<Map.Entry<String, String>, Map.Entry<String, String>> upgrader = settingUpgraders.get(setting);, +            if (upgrader == null) {, +                // the setting does not have an upgrader, copy the setting, +                builder.copy(key, settings);, +            } else {, +                // the setting has an upgrader, so mark that we have changed a setting and apply the upgrade logic, +                changed = true;, +                final Map.Entry<String, String> upgrade = upgrader.apply(new Entry(key, settings));, +                builder.put(upgrade.getKey(), upgrade.getValue());, +            }, +        }, +        // we only return a new instance if there was an upgrade, +        return changed ? builder.build() : settings;, +    }, +, +    /**, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                final ClusterState clusterState =, +                        updater.updateSettings(, +                                currentState,, +                                clusterSettings.upgradeSettings(request.transientSettings()),, +                                clusterSettings.upgradeSettings(request.persistentSettings()),, +                                logger);, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.core.internal.io.IOUtils;, +            SettingsModule settingsModule =, +                    new SettingsModule(settings, additionalSettings, additionalSettingsFilter, Collections.emptySet());, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import java.util.AbstractMap;, +import java.util.function.Function;, +    private final Map<Setting<?>, Function<Map.Entry<String, String>, Map.Entry<String, String>>> settingUpgraders;, +    protected AbstractScopedSettings(, +            final Settings settings,, +            final Set<Setting<?>> settingsSet,, +            final Set<SettingUpgrader<?>> settingUpgraders,, +            final Setting.Property scope) {, +, +        this.settingUpgraders =, +                Collections.unmodifiableMap(, +                        settingUpgraders]