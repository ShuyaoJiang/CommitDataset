[+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java, +, +        // Assert at least one state doc for each job, +        assertThat(stateDocsResponse.getHits().getTotalHits().value, greaterThanOrEqualTo(5L));, +, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java, +, +        // Assert at least one state doc for each job, +        assertThat(stateDocsResponse.getHits().getTotalHits().value, greaterThanOrEqualTo(5L));, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/UnusedStateRemover.java, +import org.elasticsearch.xpack.core.ml.job.config.Job;, +import org.elasticsearch.xpack.ml.job.persistence.BatchedJobsIterator;, +import java.util.HashSet;, +        Set<String> jobIds = new HashSet<>();, +, +        // TODO Once at 8.0, we can stop searching for jobs in cluster state, +        // and remove cluster service as a member all together., +        jobIds.addAll(MlMetadata.getMlMetadata(clusterService.state()).getJobs().keySet());, +, +        BatchedJobsIterator jobsIterator = new BatchedJobsIterator(client, AnomalyDetectorsIndex.configIndexName());, +        while (jobsIterator.hasNext()) {, +            Deque<Job.Builder> jobs = jobsIterator.next();, +            jobs.stream().map(Job.Builder::getId).forEach(jobIds::add);, +        }, +        return jobIds;]