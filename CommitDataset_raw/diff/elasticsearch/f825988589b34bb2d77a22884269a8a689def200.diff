[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +        clusterConfig.distribution = 'zip', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +        clusterConfig.distribution = 'zip', +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    public ClusterStatsResponse(long timestamp,, +                                ClusterName clusterName,, +                                List<ClusterStatsNodeResponse> nodes,, +                                List<FailedNodeException> failures) {, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +        clusterConfig.distribution = 'zip', +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    public ClusterStatsResponse(long timestamp,, +                                ClusterName clusterName,, +                                List<ClusterStatsNodeResponse> nodes,, +                                List<FailedNodeException> failures) {, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(, +            System.currentTimeMillis(),, +            clusterService.getClusterName(),, +            responses,, +            failures);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +        clusterConfig.distribution = 'zip', +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    public ClusterStatsResponse(long timestamp,, +                                ClusterName clusterName,, +                                List<ClusterStatsNodeResponse> nodes,, +                                List<FailedNodeException> failures) {, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(, +            System.currentTimeMillis(),, +            clusterService.getClusterName(),, +            responses,, +            failures);, +++ b/core/src/main/java/org/elasticsearch/client/node/NodeClient.java, +    public void initialize(Map<GenericAction, TransportAction> actions) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +        clusterConfig.distribution = 'zip', +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    public ClusterStatsResponse(long timestamp,, +                                ClusterName clusterName,, +                                List<ClusterStatsNodeResponse> nodes,, +                                List<FailedNodeException> failures) {, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(, +            System.currentTimeMillis(),, +            clusterService.getClusterName(),, +            responses,, +            failures);, +++ b/core/src/main/java/org/elasticsearch/client/node/NodeClient.java, +    public void initialize(Map<GenericAction, TransportAction> actions) {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * the type of discovery. In the Zen Discovery it is handled in the {@link PublishClusterStateAction#publish} method. The, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +        clusterConfig.distribution = 'zip', +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    public ClusterStatsResponse(long timestamp,, +                                ClusterName clusterName,, +                                List<ClusterStatsNodeResponse> nodes,, +                                List<FailedNodeException> failures) {, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(, +            System.currentTimeMillis(),, +            clusterService.getClusterName(),, +            responses,, +            failures);, +++ b/core/src/main/java/org/elasticsearch/client/node/NodeClient.java, +    public void initialize(Map<GenericAction, TransportAction> actions) {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * the type of discovery. In the Zen Discovery it is handled in the {@link PublishClusterStateAction#publish} method. The, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +            boolean wildcardSeen = false;, +                    // if there is a negation without a wildcard being previously seen, add it verbatim,, +                    // otherwise return the expression, +                    if (wildcardSeen) {, +                    } else {, +                        add = true;, +                    }, +, +                if (Regex.isSimpleMatchPattern(expression)) {, +                    wildcardSeen = true;, +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RunTask.groovy, +        clusterConfig.distribution = 'zip', +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsResponse.java, +    public ClusterStatsResponse(long timestamp,, +                                ClusterName clusterName,, +                                List<ClusterStatsNodeResponse> nodes,, +                                List<FailedNodeException> failures) {, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        return new ClusterStatsResponse(, +            System.currentTimeMillis(),, +            clusterService.getClusterName(),]