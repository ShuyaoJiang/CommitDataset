[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.gateway.PriorityComparator;, +            final PriorityComparator secondaryComparator = PriorityComparator.getAllocationComparator(allocation);, +                    // this comparator is more expensive than all the others up there, +                    // that's why it's added last even though it could be easier to read, +                    // if we'd apply it earlier. this comparator will only differentiate across, +                    // indices all shards of the same index is treated equally., +                    final int secondary = secondaryComparator.compare(o1, o2);, +                    return secondary == 0 ? indexCmp : secondary;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.gateway.PriorityComparator;, +            final PriorityComparator secondaryComparator = PriorityComparator.getAllocationComparator(allocation);, +                    // this comparator is more expensive than all the others up there, +                    // that's why it's added last even though it could be easier to read, +                    // if we'd apply it earlier. this comparator will only differentiate across, +                    // indices all shards of the same index is treated equally., +                    final int secondary = secondaryComparator.compare(o1, o2);, +                    return secondary == 0 ? indexCmp : secondary;, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +        unassigned.sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.gateway.PriorityComparator;, +            final PriorityComparator secondaryComparator = PriorityComparator.getAllocationComparator(allocation);, +                    // this comparator is more expensive than all the others up there, +                    // that's why it's added last even though it could be easier to read, +                    // if we'd apply it earlier. this comparator will only differentiate across, +                    // indices all shards of the same index is treated equally., +                    final int secondary = secondaryComparator.compare(o1, o2);, +                    return secondary == 0 ? indexCmp : secondary;, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +        unassigned.sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering, +++ b/core/src/main/java/org/elasticsearch/gateway/PriorityComparator.java, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +public abstract class PriorityComparator implements Comparator<ShardRouting> {, +, +    /**, +     * Returns a PriorityComparator that uses the RoutingAllocation index metadata to access the index setting per index., +     */, +    public static PriorityComparator getAllocationComparator(final RoutingAllocation allocation) {, +        return new PriorityComparator() {, +            @Override, +            protected Settings getIndexSettings(String index) {, +                IndexMetaData indexMetaData = allocation.metaData().index(index);, +                return indexMetaData.getSettings();, +            }, +        };, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.gateway.PriorityComparator;, +            final PriorityComparator secondaryComparator = PriorityComparator.getAllocationComparator(allocation);, +                    // this comparator is more expensive than all the others up there, +                    // that's why it's added last even though it could be easier to read, +                    // if we'd apply it earlier. this comparator will only differentiate across, +                    // indices all shards of the same index is treated equally., +                    final int secondary = secondaryComparator.compare(o1, o2);, +                    return secondary == 0 ? indexCmp : secondary;, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +        unassigned.sort(PriorityComparator.getAllocationComparator(allocation)); // sort for priority ordering, +++ b/core/src/main/java/org/elasticsearch/gateway/PriorityComparator.java, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +public abstract class PriorityComparator implements Comparator<ShardRouting> {, +, +    /**, +     * Returns a PriorityComparator that uses the RoutingAllocation index metadata to access the index setting per index., +     */, +    public static PriorityComparator getAllocationComparator(final RoutingAllocation allocation) {, +        return new PriorityComparator() {, +            @Override, +            protected Settings getIndexSettings(String index) {, +                IndexMetaData indexMetaData = allocation.metaData().index(index);, +                return indexMetaData.getSettings();, +            }, +        };, +    }, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocationPriorityTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.cluster.routing.allocation;, +, +import org.elasticsearch.Version;]