[+++ b/src/main/java/org/elasticsearch/search/fetch/source/FetchSourceParseElement.java, +import java.io.IOException;, +        context.fetchSourceContext(parse(parser));, +    }, +, +    public FetchSourceContext parse(XContentParser parser) throws IOException {, +            return new FetchSourceContext(parser.booleanValue());, +            return new FetchSourceContext(new String[]{parser.text()});, +        return new FetchSourceContext(, +                excludes == null ? Strings.EMPTY_ARRAY : excludes.toArray(new String[excludes.size()]));, +++ b/src/main/java/org/elasticsearch/search/fetch/source/FetchSourceParseElement.java, +import java.io.IOException;, +        context.fetchSourceContext(parse(parser));, +    }, +, +    public FetchSourceContext parse(XContentParser parser) throws IOException {, +            return new FetchSourceContext(parser.booleanValue());, +            return new FetchSourceContext(new String[]{parser.text()});, +        return new FetchSourceContext(, +                excludes == null ? Strings.EMPTY_ARRAY : excludes.toArray(new String[excludes.size()]));, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlighterParseElement.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.index.query.IndexQueryParserService;, +        try {, +            context.highlight(parse(parser, context.queryParserService()));, +        } catch (ElasticsearchIllegalArgumentException ex) {, +            throw new SearchParseException(context, "Error while trying to parse Highlighter element in request");, +        }, +    }, +, +    public SearchContextHighlight parse(XContentParser parser, IndexQueryParserService queryParserService) throws IOException {, +        final List<Tuple<String, SearchContextHighlight.FieldOptions.Builder>> fieldsOptions = newArrayList();, +        final SearchContextHighlight.FieldOptions.Builder globalOptionsBuilder = new SearchContextHighlight.FieldOptions.Builder(), +                                        throw new ElasticsearchIllegalArgumentException("If highlighter fields is an array it must contain objects containing a single field");, +                                    fieldsOptions.add(Tuple.tuple(highlightFieldName, parseFields(parser, queryParserService)));, +                            throw new ElasticsearchIllegalArgumentException("If highlighter fields is an array it must contain objects containing a single field");, +                            fieldsOptions.add(Tuple.tuple(highlightFieldName, parseFields(parser, queryParserService)));, +                    globalOptionsBuilder.highlightQuery(queryParserService.parse(parser).query());, +        final SearchContextHighlight.FieldOptions globalOptions = globalOptionsBuilder.build();, +            throw new ElasticsearchIllegalArgumentException("Highlighter global preTags are set, but global postTags are not set");, +        final List<SearchContextHighlight.Field> fields = Lists.newArrayList();, +        for (final Tuple<String, SearchContextHighlight.FieldOptions.Builder> tuple : fieldsOptions) {, +        return new SearchContextHighlight(fields);, +    protected SearchContextHighlight.FieldOptions.Builder parseFields(XContentParser parser, IndexQueryParserService queryParserService) throws IOException {, +        final SearchContextHighlight.FieldOptions.Builder fieldOptionsBuilder = new SearchContextHighlight.FieldOptions.Builder();, +                    fieldOptionsBuilder.highlightQuery(queryParserService.parse(parser).query());, +++ b/src/main/java/org/elasticsearch/search/fetch/source/FetchSourceParseElement.java, +import java.io.IOException;, +        context.fetchSourceContext(parse(parser));, +    }, +, +    public FetchSourceContext parse(XContentParser parser) throws IOException {, +            return new FetchSourceContext(parser.booleanValue());, +            return new FetchSourceContext(new String[]{parser.text()});, +        return new FetchSourceContext(, +                excludes == null ? Strings.EMPTY_ARRAY : excludes.toArray(new String[excludes.size()]));, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlighterParseElement.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.index.query.IndexQueryParserService;, +        try {, +            context.highlight(parse(parser, context.queryParserService()));, +        } catch (ElasticsearchIllegalArgumentException ex) {, +            throw new SearchParseException(context, "Error while trying to parse Highlighter element in request");, +        }, +    }, +, +    public SearchContextHighlight parse(XContentParser parser, IndexQueryParserService queryParserService) throws IOException {, +        final List<Tuple<String, SearchContextHighlight.FieldOptions.Builder>> fieldsOptions = newArrayList();, +        final SearchContextHighlight.FieldOptions.Builder globalOptionsBuilder = new SearchContextHighlight.FieldOptions.Builder(), +                                        throw new ElasticsearchIllegalArgumentException("If highlighter fields is an array it must contain objects containing a single field");, +                                    fieldsOptions.add(Tuple.tuple(highlightFieldName, parseFields(parser, queryParserService)));, +                            throw new ElasticsearchIllegalArgumentException("If highlighter fields is an array it must contain objects containing a single field");, +                            fieldsOptions.add(Tuple.tuple(highlightFieldName, parseFields(parser, queryParserService)));, +                    globalOptionsBuilder.highlightQuery(queryParserService.parse(parser).query());, +        final SearchContextHighlight.FieldOptions globalOptions = globalOptionsBuilder.build();, +            throw new ElasticsearchIllegalArgumentException("Highlighter global preTags are set, but global postTags are not set");, +        final List<SearchContextHighlight.Field> fields = Lists.newArrayList();, +        for (final Tuple<String, SearchContextHighlight.FieldOptions.Builder> tuple : fieldsOptions) {, +        return new SearchContextHighlight(fields);, +    protected SearchContextHighlight.FieldOptions.Builder parseFields(XContentParser parser, IndexQueryParserService queryParserService) throws IOException {, +        final SearchContextHighlight.FieldOptions.Builder fieldOptionsBuilder = new SearchContextHighlight.FieldOptions.Builder();, +                    fieldOptionsBuilder.highlightQuery(queryParserService.parse(parser).query());, +++ b/src/main/java/org/elasticsearch/search/rescore/RescoreParseElement.java, +    public void parseSingleRescoreContext(XContentParser parser, SearchContext context) throws Exception {]