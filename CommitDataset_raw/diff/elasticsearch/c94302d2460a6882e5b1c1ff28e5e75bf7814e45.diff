[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoGridAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.geodistance.GeoDistanceAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.geobounds.GeoBoundsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.geocentroid.GeoCentroidAggregatorBuilder;, +        registerAggregation(GeoDistanceAggregatorBuilder::new, new GeoDistanceParser(),, +                GeoDistanceAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(GeoGridAggregatorBuilder::new, new GeoHashGridParser(), GeoGridAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(GeoBoundsAggregatorBuilder::new, new GeoBoundsParser(), GeoBoundsAggregatorBuilder.AGGREGATION_NAME_FIED);, +        registerAggregation(GeoCentroidAggregatorBuilder::new, new GeoCentroidParser(),, +                GeoCentroidAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoGridAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.geodistance.GeoDistanceAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.geobounds.GeoBoundsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.geocentroid.GeoCentroidAggregatorBuilder;, +        registerAggregation(GeoDistanceAggregatorBuilder::new, new GeoDistanceParser(),, +                GeoDistanceAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(GeoGridAggregatorBuilder::new, new GeoHashGridParser(), GeoGridAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(GeoBoundsAggregatorBuilder::new, new GeoBoundsParser(), GeoBoundsAggregatorBuilder.AGGREGATION_NAME_FIED);, +        registerAggregation(GeoCentroidAggregatorBuilder::new, new GeoCentroidParser(),, +                GeoCentroidAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregatorBuilder.java, +import org.elasticsearch.common.ParseField;, +    public static final String NAME = InternalGeoHashGrid.TYPE.name();, +    public static final ParseField AGGREGATION_NAME_FIELD = new ParseField(NAME);, +    /**, +     * Read from a stream., +     */, +    public GeoGridAggregatorBuilder(StreamInput in) throws IOException {, +        super(in, InternalGeoHashGrid.TYPE, ValuesSourceType.GEOPOINT, ValueType.GEOPOINT);, +        precision = in.readVInt();, +        requiredSize = in.readVInt();, +        shardSize = in.readVInt();, +    }, +, +    @Override, +    protected void innerWriteTo(StreamOutput out) throws IOException {, +        out.writeVInt(precision);, +        out.writeVInt(requiredSize);, +        out.writeVInt(shardSize);, +    }, +, +    @Override, +    protected boolean usesNewStyleSerialization() {, +        return true;, +    }, +, +    @Override, +    public String getWriteableName() {, +        return NAME;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoGridAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.geodistance.GeoDistanceAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.geobounds.GeoBoundsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.geocentroid.GeoCentroidAggregatorBuilder;, +        registerAggregation(GeoDistanceAggregatorBuilder::new, new GeoDistanceParser(),, +                GeoDistanceAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(GeoGridAggregatorBuilder::new, new GeoHashGridParser(), GeoGridAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(GeoBoundsAggregatorBuilder::new, new GeoBoundsParser(), GeoBoundsAggregatorBuilder.AGGREGATION_NAME_FIED);, +        registerAggregation(GeoCentroidAggregatorBuilder::new, new GeoCentroidParser(),, +                GeoCentroidAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregatorBuilder.java, +import org.elasticsearch.common.ParseField;, +    public static final String NAME = InternalGeoHashGrid.TYPE.name();, +    public static final ParseField AGGREGATION_NAME_FIELD = new ParseField(NAME);, +    /**, +     * Read from a stream., +     */, +    public GeoGridAggregatorBuilder(StreamInput in) throws IOException {, +        super(in, InternalGeoHashGrid.TYPE, ValuesSourceType.GEOPOINT, ValueType.GEOPOINT);, +        precision = in.readVInt();, +        requiredSize = in.readVInt();, +        shardSize = in.readVInt();, +    }, +, +    @Override, +    protected void innerWriteTo(StreamOutput out) throws IOException {, +        out.writeVInt(precision);, +        out.writeVInt(requiredSize);, +        out.writeVInt(shardSize);, +    }, +, +    @Override, +    protected boolean usesNewStyleSerialization() {, +        return true;, +    }, +, +    @Override, +    public String getWriteableName() {, +        return NAME;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoGridAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.geodistance.GeoDistanceAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.geobounds.GeoBoundsAggregatorBuilder;]