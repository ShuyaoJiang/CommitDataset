[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import org.elasticsearch.common.geo.ShapeRelation;, +            Query query = rangeQuery(value, value, true, true, ShapeRelation.INTERSECTS, null, null, context);, +        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, ShapeRelation relation,, +            if (relation == ShapeRelation.DISJOINT) {, +                throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() +, +                        "] does not support DISJOINT ranges");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import org.elasticsearch.common.geo.ShapeRelation;, +            Query query = rangeQuery(value, value, true, true, ShapeRelation.INTERSECTS, null, null, context);, +        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, ShapeRelation relation,, +            if (relation == ShapeRelation.DISJOINT) {, +                throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() +, +                        "] does not support DISJOINT ranges");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java, +    public static final class IpFieldType extends SimpleMappedFieldType {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import org.elasticsearch.common.geo.ShapeRelation;, +            Query query = rangeQuery(value, value, true, true, ShapeRelation.INTERSECTS, null, null, context);, +        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, ShapeRelation relation,, +            if (relation == ShapeRelation.DISJOINT) {, +                throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() +, +                        "] does not support DISJOINT ranges");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java, +    public static final class IpFieldType extends SimpleMappedFieldType {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.geo.ShapeRelation;, +    /**, +     * Factory method for range queries., +     * @param relation the relation, nulls should be interpreted like INTERSECTS, +     */, +    public Query rangeQuery(, +            Object lowerTerm, Object upperTerm,, +            boolean includeLower, boolean includeUpper,, +            ShapeRelation relation, DateTimeZone timeZone, DateMathParser parser,, +            QueryShardContext context) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import org.elasticsearch.common.geo.ShapeRelation;, +            Query query = rangeQuery(value, value, true, true, ShapeRelation.INTERSECTS, null, null, context);, +        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, ShapeRelation relation,, +            if (relation == ShapeRelation.DISJOINT) {, +                throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() +, +                        "] does not support DISJOINT ranges");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java, +    public static final class IpFieldType extends SimpleMappedFieldType {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.geo.ShapeRelation;, +    /**, +     * Factory method for range queries., +     * @param relation the relation, nulls should be interpreted like INTERSECTS, +     */, +    public Query rangeQuery(, +            Object lowerTerm, Object upperTerm,, +            boolean includeLower, boolean includeUpper,, +            ShapeRelation relation, DateTimeZone timeZone, DateMathParser parser,, +            QueryShardContext context) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +    public static final class NumberFieldType extends SimpleMappedFieldType {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import org.elasticsearch.common.geo.ShapeRelation;, +            Query query = rangeQuery(value, value, true, true, ShapeRelation.INTERSECTS, null, null, context);, +        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, ShapeRelation relation,, +            if (relation == ShapeRelation.DISJOINT) {, +                throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() +, +                        "] does not support DISJOINT ranges");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java, +    public static final class IpFieldType extends SimpleMappedFieldType {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.geo.ShapeRelation;, +    /**, +     * Factory method for range queries., +     * @param relation the relation, nulls should be interpreted like INTERSECTS, +     */, +    public Query rangeQuery(, +            Object lowerTerm, Object upperTerm,, +            boolean includeLower, boolean includeUpper,, +            ShapeRelation relation, DateTimeZone timeZone, DateMathParser parser,, +            QueryShardContext context) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +    public static final class NumberFieldType extends SimpleMappedFieldType {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java, +    public static final class ScaledFloatFieldType extends SimpleMappedFieldType {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java, +import org.elasticsearch.common.geo.ShapeRelation;, +            Query query = rangeQuery(value, value, true, true, ShapeRelation.INTERSECTS, null, null, context);, +        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, ShapeRelation relation,, +            if (relation == ShapeRelation.DISJOINT) {, +                throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() +, +                        "] does not support DISJOINT ranges");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/IpFieldMapper.java, +    public static final class IpFieldType extends SimpleMappedFieldType {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.common.geo.ShapeRelation;, +    /**, +     * Factory method for range queries., +     * @param relation the relation, nulls should be interpreted like INTERSECTS, +     */, +    public Query rangeQuery(, +            Object lowerTerm, Object upperTerm,, +            boolean includeLower, boolean includeUpper,]