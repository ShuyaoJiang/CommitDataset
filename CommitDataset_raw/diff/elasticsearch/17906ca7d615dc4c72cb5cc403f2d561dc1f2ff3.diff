[+++ b/core/src/main/java/org/elasticsearch/Version.java, +            throw new IllegalStateException("[" + IndexMetaData.SETTING_VERSION_CREATED + "] is not present in the index settings for index with uuid: [" + indexSettings.get(IndexMetaData.SETTING_INDEX_UUID) + "]");, +++ b/core/src/main/java/org/elasticsearch/Version.java, +            throw new IllegalStateException("[" + IndexMetaData.SETTING_VERSION_CREATED + "] is not present in the index settings for index with uuid: [" + indexSettings.get(IndexMetaData.SETTING_INDEX_UUID) + "]");, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.stateUUID(currentState.stateUUID());, +++ b/core/src/main/java/org/elasticsearch/Version.java, +            throw new IllegalStateException("[" + IndexMetaData.SETTING_VERSION_CREATED + "] is not present in the index settings for index with uuid: [" + indexSettings.get(IndexMetaData.SETTING_INDEX_UUID) + "]");, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.stateUUID(currentState.stateUUID());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                clusterService.state().metaData().clusterUUID(), nodeStats.toArray(new ClusterStatsNodeResponse[nodeStats.size()]));, +++ b/core/src/main/java/org/elasticsearch/Version.java, +            throw new IllegalStateException("[" + IndexMetaData.SETTING_VERSION_CREATED + "] is not present in the index settings for index with uuid: [" + indexSettings.get(IndexMetaData.SETTING_INDEX_UUID) + "]");, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.stateUUID(currentState.stateUUID());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                clusterService.state().metaData().clusterUUID(), nodeStats.toArray(new ClusterStatsNodeResponse[nodeStats.size()]));, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +            throw new IllegalStateException("[" + IndexMetaData.SETTING_VERSION_CREATED + "] is not present in the index settings for index with uuid: [" + indexSettings.get(IndexMetaData.SETTING_INDEX_UUID) + "]");, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.stateUUID(currentState.stateUUID());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                clusterService.state().metaData().clusterUUID(), nodeStats.toArray(new ClusterStatsNodeResponse[nodeStats.size()]));, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(),, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * correct version of the cluster state, each cluster state version update generates {@link #stateUUID} that uniquely, +    private final String stateUUID;, +    public ClusterState(long version, String stateUUID, ClusterState state) {, +        this(state.clusterName, version, stateUUID, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.customs(), false);, +    public ClusterState(ClusterName clusterName, long version, String stateUUID, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, ImmutableOpenMap<String, Custom> customs, boolean wasReadFromDiff) {, +        this.stateUUID = stateUUID;, +     * This stateUUID is automatically generated for for each version of cluster state. It is used to make sure that, +    public String stateUUID() {, +        return this.stateUUID;, +        sb.append("state uuid: ").append(stateUUID).append("\n");, +            builder.field("state_uuid", stateUUID);, +            this.uuid = state.stateUUID();, +        public Builder stateUUID(String uuid) {, +        out.writeString(stateUUID);, +            fromUuid = before.stateUUID;, +            toUuid = after.stateUUID;, +            if (toUuid.equals(state.stateUUID)) {, +            if (fromUuid.equals(state.stateUUID) == false) {, +                throw new IncompatibleClusterStateVersionException(state.version, state.stateUUID, toVersion, fromUuid);, +            builder.stateUUID(toUuid);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +            throw new IllegalStateException("[" + IndexMetaData.SETTING_VERSION_CREATED + "] is not present in the index settings for index with uuid: [" + indexSettings.get(IndexMetaData.SETTING_INDEX_UUID) + "]");, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.stateUUID(currentState.stateUUID());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                clusterService.state().metaData().clusterUUID(), nodeStats.toArray(new ClusterStatsNodeResponse[nodeStats.size()]));, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(),, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * correct version of the cluster state, each cluster state version update generates {@link #stateUUID} that uniquely, +    private final String stateUUID;, +    public ClusterState(long version, String stateUUID, ClusterState state) {, +        this(state.clusterName, version, stateUUID, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.customs(), false);, +    public ClusterState(ClusterName clusterName, long version, String stateUUID, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, ImmutableOpenMap<String, Custom> customs, boolean wasReadFromDiff) {, +        this.stateUUID = stateUUID;, +     * This stateUUID is automatically generated for for each version of cluster state. It is used to make sure that, +    public String stateUUID() {, +        return this.stateUUID;, +        sb.append("state uuid: ").append(stateUUID).append("\n");, +            builder.field("state_uuid", stateUUID);, +            this.uuid = state.stateUUID();, +        public Builder stateUUID(String uuid) {, +        out.writeString(stateUUID);, +            fromUuid = before.stateUUID;, +            toUuid = after.stateUUID;, +            if (toUuid.equals(state.stateUUID)) {, +            if (fromUuid.equals(state.stateUUID) == false) {, +                throw new IncompatibleClusterStateVersionException(state.version, state.stateUUID, toVersion, fromUuid);, +            builder.stateUUID(toUuid);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                logger.debug("{} ignoring shard {}, different index uuid, current {}, got {}", shardRouting.shardId(), type, indexMetaData.getIndexUUID(), shardRoutingEntry);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +            throw new IllegalStateException("[" + IndexMetaData.SETTING_VERSION_CREATED + "] is not present in the index settings for index with uuid: [" + indexSettings.get(IndexMetaData.SETTING_INDEX_UUID) + "]");, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.stateUUID(currentState.stateUUID());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                clusterService.state().metaData().clusterUUID(), nodeStats.toArray(new ClusterStatsNodeResponse[nodeStats.size()]));, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(),, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * correct version of the cluster state, each cluster state version update generates {@link #stateUUID} that uniquely, +    private final String stateUUID;, +    public ClusterState(long version, String stateUUID, ClusterState state) {, +        this(state.clusterName, version, stateUUID, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.customs(), false);, +    public ClusterState(ClusterName clusterName, long version, String stateUUID, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, ImmutableOpenMap<String, Custom> customs, boolean wasReadFromDiff) {, +        this.stateUUID = stateUUID;, +     * This stateUUID is automatically generated for for each version of cluster state. It is used to make sure that, +    public String stateUUID() {, +        return this.stateUUID;, +        sb.append("state uuid: ").append(stateUUID).append("\n");, +            builder.field("state_uuid", stateUUID);]