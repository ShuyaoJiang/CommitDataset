[+++ b/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_4_3 = new Version(V_1_4_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_2);, +++ b/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_4_3 = new Version(V_1_4_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_2);, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +public class BloomFilterPostingsFormat extends PostingsFormat {, +    public BloomFilteredFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {, +        throw new UnsupportedOperationException("this codec can only be used for reading");, +++ b/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_4_3 = new Version(V_1_4_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_2);, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +public class BloomFilterPostingsFormat extends PostingsFormat {, +    public BloomFilteredFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {, +        throw new UnsupportedOperationException("this codec can only be used for reading");, +++ b/src/main/resources/META-INF/services/org.apache.lucene.codecs.PostingsFormat, +org.elasticsearch.index.codec.postingsformat.BloomFilterPostingsFormat, +++ b/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_4_3 = new Version(V_1_4_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_2);, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +public class BloomFilterPostingsFormat extends PostingsFormat {, +    public BloomFilteredFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {, +        throw new UnsupportedOperationException("this codec can only be used for reading");, +++ b/src/main/resources/META-INF/services/org.apache.lucene.codecs.PostingsFormat, +org.elasticsearch.index.codec.postingsformat.BloomFilterPostingsFormat, +++ b/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityTests.java, +        "index-0.90.0.Beta1.zip",, +                if (v.equals(Version.V_1_2_0)) continue;, +++ b/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_4_3 = new Version(V_1_4_3_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_2);, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +public class BloomFilterPostingsFormat extends PostingsFormat {, +    public BloomFilteredFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {, +        throw new UnsupportedOperationException("this codec can only be used for reading");, +++ b/src/main/resources/META-INF/services/org.apache.lucene.codecs.PostingsFormat, +org.elasticsearch.index.codec.postingsformat.BloomFilterPostingsFormat, +++ b/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityTests.java, +        "index-0.90.0.Beta1.zip",, +                if (v.equals(Version.V_1_2_0)) continue;, +++ b/src/test/java/org/elasticsearch/index/codec/postingformat/Elasticsearch090RWPostingsFormat.java, +import org.apache.lucene.codecs.PostingsFormat;, +import org.elasticsearch.common.util.BloomFilter;, +import org.elasticsearch.index.codec.postingsformat.BloomFilterPostingsFormat;, +        final PostingsFormat delegate = getDefaultWrapped();, +        final BloomFilteredFieldsConsumer fieldsConsumer = new BloomFilterPostingsFormat(delegate, BloomFilter.Factory.DEFAULT) {, +            @Override, +            public BloomFilteredFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {, +                return new BloomFilteredFieldsConsumer(delegate.fieldsConsumer(state), state,delegate);, +            } , +        }.fieldsConsumer(state);]