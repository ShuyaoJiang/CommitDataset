[+++ b/src/main/java/org/elasticsearch/common/geo/builders/GeometryCollectionBuilder.java, +import org.elasticsearch.ElasticsearchException;, +    public ShapeBuilder getShapeAt(int i) {, +        if (i >= this.shapes.size() || i < 0) {, +            throw new ElasticsearchException("GeometryCollection contains " + this.shapes.size() + " shapes. + " +, +                    "No shape found at index " + i);, +        }, +        return this.shapes.get(i);, +    }, +, +    public int numShapes() {, +        return this.shapes.size();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/geo/builders/GeometryCollectionBuilder.java, +import org.elasticsearch.ElasticsearchException;, +    public ShapeBuilder getShapeAt(int i) {, +        if (i >= this.shapes.size() || i < 0) {, +            throw new ElasticsearchException("GeometryCollection contains " + this.shapes.size() + " shapes. + " +, +                    "No shape found at index " + i);, +        }, +        return this.shapes.get(i);, +    }, +, +    public int numShapes() {, +        return this.shapes.size();, +    }, +, +++ b/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationTests.java, +import org.elasticsearch.test.geo.RandomShapeGenerator;, +import org.elasticsearch.common.geo.builders.GeometryCollectionBuilder;, +    public void testShapeFetchingPath() throws Exception {, +    public void testShapeFilterWithRandomGeoCollection() throws Exception {, +        // Create a random geometry collection., +        GeometryCollectionBuilder gcb = RandomShapeGenerator.createGeometryCollection(getRandom());, +, +        logger.info("Created Random GeometryCollection containing " + gcb.numShapes() + " shapes");, +, +        createIndex("randshapes");, +        assertAcked(prepareCreate("test").addMapping("type", "location", "type=geo_shape"));, +, +        XContentBuilder docSource = gcb.toXContent(jsonBuilder().startObject().field("location"), null).endObject();, +        indexRandom(true, client().prepareIndex("test", "type", "1").setSource(docSource));, +, +        ensureSearchable("test");, +, +        ShapeBuilder filterShape = (gcb.getShapeAt(randomIntBetween(0, gcb.numShapes() - 1)));, +, +        GeoShapeFilterBuilder filter = FilterBuilders.geoShapeFilter("location", filterShape, ShapeRelation.INTERSECTS);, +        SearchResponse result = client().prepareSearch("test").setQuery(QueryBuilders.matchAllQuery()), +                .setPostFilter(filter).get();, +        assertSearchResponse(result);, +        assertHitCount(result, 1);, +    }, +, +    @Test, +    public void testShapeFilterWithDefinedGeoCollection() throws Exception {, +++ b/src/main/java/org/elasticsearch/common/geo/builders/GeometryCollectionBuilder.java, +import org.elasticsearch.ElasticsearchException;, +    public ShapeBuilder getShapeAt(int i) {, +        if (i >= this.shapes.size() || i < 0) {, +            throw new ElasticsearchException("GeometryCollection contains " + this.shapes.size() + " shapes. + " +, +                    "No shape found at index " + i);, +        }, +        return this.shapes.get(i);, +    }, +, +    public int numShapes() {, +        return this.shapes.size();, +    }, +, +++ b/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationTests.java, +import org.elasticsearch.test.geo.RandomShapeGenerator;, +import org.elasticsearch.common.geo.builders.GeometryCollectionBuilder;, +    public void testShapeFetchingPath() throws Exception {, +    public void testShapeFilterWithRandomGeoCollection() throws Exception {, +        // Create a random geometry collection., +        GeometryCollectionBuilder gcb = RandomShapeGenerator.createGeometryCollection(getRandom());, +, +        logger.info("Created Random GeometryCollection containing " + gcb.numShapes() + " shapes");, +, +        createIndex("randshapes");, +        assertAcked(prepareCreate("test").addMapping("type", "location", "type=geo_shape"));, +, +        XContentBuilder docSource = gcb.toXContent(jsonBuilder().startObject().field("location"), null).endObject();, +        indexRandom(true, client().prepareIndex("test", "type", "1").setSource(docSource));, +, +        ensureSearchable("test");, +, +        ShapeBuilder filterShape = (gcb.getShapeAt(randomIntBetween(0, gcb.numShapes() - 1)));, +, +        GeoShapeFilterBuilder filter = FilterBuilders.geoShapeFilter("location", filterShape, ShapeRelation.INTERSECTS);, +        SearchResponse result = client().prepareSearch("test").setQuery(QueryBuilders.matchAllQuery()), +                .setPostFilter(filter).get();, +        assertSearchResponse(result);, +        assertHitCount(result, 1);, +    }, +, +    @Test, +    public void testShapeFilterWithDefinedGeoCollection() throws Exception {]