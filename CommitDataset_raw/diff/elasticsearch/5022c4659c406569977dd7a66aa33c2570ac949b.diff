[+++ b/src/main/java/org/elasticsearch/search/rescore/QueryRescorer.java, +import java.lang.Math;, +    private static enum ScoreMode {, +        Avg {, +            @Override, +            public float combine(float primary, float secondary) {, +                return (primary + secondary) / 2;, +            }, +            @Override, +            public String toString() {, +                return "avg";, +            }, +        },, +        Max {, +            @Override, +            public float combine(float primary, float secondary) {, +                return Math.max(primary, secondary);, +            }, +            @Override, +            public String toString() {, +                return "max";, +            }, +        },, +        Min {, +            @Override, +            public float combine(float primary, float secondary) {, +                return Math.min(primary, secondary);, +            }, +            @Override, +            public String toString() {, +                return "min";, +            }, +        },, +        Total {, +            @Override, +            public float combine(float primary, float secondary) {, +                return primary + secondary;, +            }, +            @Override, +            public String toString() {, +                return "sum";, +            }, +        },, +        Multiply {, +            @Override, +            public float combine(float primary, float secondary) {, +                return primary * secondary;, +            }, +            @Override, +            public String toString() {, +                return "product";, +            }, +        };, +, +        public abstract float combine(float primary, float secondary);, +    }, +, +, +        if (rescoreExplain != null && rescoreExplain.isMatch()) {, +            ScoreMode scoreMode = rescore.scoreMode();, +            ComplexExplanation calcExpl = new ComplexExplanation();, +            calcExpl.setDescription(scoreMode + " of:");, +            calcExpl.addDetail(prim);, +            calcExpl.setMatch(prim.isMatch());, +            calcExpl.addDetail(sec);, +            calcExpl.setValue(scoreMode.combine(prim.getValue(), sec.getValue()));, +            return calcExpl;, +                } else if ("score_mode".equals(fieldName)) {, +                    String sScoreMode = parser.text();, +                    if ("avg".equals(sScoreMode)) {, +                        rescoreContext.setScoreMode(ScoreMode.Avg);, +                    } else if ("max".equals(sScoreMode)) {, +                        rescoreContext.setScoreMode(ScoreMode.Max);, +                    } else if ("min".equals(sScoreMode)) {, +                        rescoreContext.setScoreMode(ScoreMode.Min);, +                    } else if ("total".equals(sScoreMode)) {, +                        rescoreContext.setScoreMode(ScoreMode.Total);, +                    } else if ("multiply".equals(sScoreMode)) {, +                        rescoreContext.setScoreMode(ScoreMode.Multiply);, +                    } else {, +                        throw new ElasticSearchIllegalArgumentException("[rescore] illegal score_mode [" + sScoreMode + "]");, +                    }, +            this.scoreMode = ScoreMode.Total;, +        private ScoreMode scoreMode;, +        public ScoreMode scoreMode() {, +            return scoreMode;, +        }, +, +        public void setScoreMode(ScoreMode scoreMode) {, +            this.scoreMode = scoreMode;, +        }, +        , +        ScoreMode scoreMode = context.scoreMode();, +        for (int i = 0; i < primaryDocs.length; i++) {, +            if (j < secondaryDocs.length && primaryDocs[i].doc == secondaryDocs[j].doc) {, +                primaryDocs[i].score = scoreMode.combine(primaryDocs[i].score * primaryWeight, secondaryDocs[j++].score * secondaryWeight);, +++ b/src/main/java/org/elasticsearch/search/rescore/QueryRescorer.java, +import java.lang.Math;, +    private static enum ScoreMode {, +        Avg {]