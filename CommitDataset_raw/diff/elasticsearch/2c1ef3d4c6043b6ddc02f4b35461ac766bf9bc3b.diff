[+++ b/server/src/main/java/org/elasticsearch/index/engine/CommitStats.java, +     * The synced-flush id of the commit if existed., +     */, +    public String syncId() {, +        return userData.get(InternalEngine.SYNC_COMMIT_ID);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/CommitStats.java, +     * The synced-flush id of the commit if existed., +     */, +    public String syncId() {, +        return userData.get(InternalEngine.SYNC_COMMIT_ID);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/indices/flush/SyncedFlushService.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import java.util.HashMap;, +                                // 3. now send the sync request to all the shards;, +                                final String sharedSyncId = sharedExistingSyncId(presyncResponses);, +                                if (sharedSyncId != null) {, +                                    assert presyncResponses.values().stream().allMatch(r -> r.existingSyncId.equals(sharedSyncId)) :, +                                        "Not all shards have the same existing sync id [" + sharedSyncId + "], responses [" + presyncResponses + "]";, +                                    reportSuccessWithExistingSyncId(shardId, sharedSyncId, activeShards, totalShards, presyncResponses, actionListener);, +                                }else {, +                        }, +    private String sharedExistingSyncId(Map<String, PreSyncedFlushResponse> preSyncedFlushResponses) {, +        String existingSyncId = null;, +        for (PreSyncedFlushResponse resp : preSyncedFlushResponses.values()) {, +            if (Strings.isNullOrEmpty(resp.existingSyncId)) {, +                return null;, +            }, +            if (existingSyncId == null) {, +                existingSyncId = resp.existingSyncId;, +            }, +            if (existingSyncId.equals(resp.existingSyncId) == false) {, +                return null;, +            }, +        }, +        return existingSyncId;, +    }, +, +    private void reportSuccessWithExistingSyncId(ShardId shardId, String existingSyncId, List<ShardRouting> shards, int totalShards,, +                                                 Map<String, PreSyncedFlushResponse> preSyncResponses, ActionListener<ShardsSyncedFlushResult> listener) {, +        final Map<ShardRouting, ShardSyncedFlushResponse> results = new HashMap<>();, +        for (final ShardRouting shard : shards) {, +            if (preSyncResponses.containsKey(shard.currentNodeId())) {, +                results.put(shard, new ShardSyncedFlushResponse());, +            }, +        }, +        listener.onResponse(new ShardsSyncedFlushResult(shardId, existingSyncId, totalShards, results));, +    }, +, +        return new PreSyncedFlushResponse(commitId, commitStats.getNumDocs(), commitStats.syncId());, +        @Nullable String existingSyncId = null;, +        PreSyncedFlushResponse(Engine.CommitId commitId, int numDocs, String existingSyncId) {, +            this.existingSyncId = existingSyncId;, +        boolean includeExistingSyncId(Version version) {, +            return version.onOrAfter(Version.V_7_0_0_alpha1);, +        }, +, +            if (includeExistingSyncId(in.getVersion())) {, +                existingSyncId = in.readOptionalString();, +            }, +            if (includeExistingSyncId(out.getVersion())) {, +                out.writeOptionalString(existingSyncId);, +            }, +++ b/server/src/main/java/org/elasticsearch/index/engine/CommitStats.java, +     * The synced-flush id of the commit if existed., +     */, +    public String syncId() {, +        return userData.get(InternalEngine.SYNC_COMMIT_ID);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/indices/flush/SyncedFlushService.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import java.util.HashMap;, +                                // 3. now send the sync request to all the shards;, +                                final String sharedSyncId = sharedExistingSyncId(presyncResponses);, +                                if (sharedSyncId != null) {, +                                    assert presyncResponses.values().stream().allMatch(r -> r.existingSyncId.equals(sharedSyncId)) :, +                                        "Not all shards have the same existing sync id [" + sharedSyncId + "], responses [" + presyncResponses + "]";, +                                    reportSuccessWithExistingSyncId(shardId, sharedSyncId, activeShards, totalShards, presyncResponses, actionListener);, +                                }else {, +                        }, +    private String sharedExistingSyncId(Map<String, PreSyncedFlushResponse> preSyncedFlushResponses) {, +        String existingSyncId = null;, +        for (PreSyncedFlushResponse resp : preSyncedFlushResponses.values()) {, +            if (Strings.isNullOrEmpty(resp.existingSyncId)) {, +                return null;, +            }, +            if (existingSyncId == null) {, +                existingSyncId = resp.existingSyncId;, +            }, +            if (existingSyncId.equals(resp.existingSyncId) == false) {, +                return null;]