[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ConditionalWaitStep.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.index.Index;, +import java.util.function.LongSupplier;, +    public ConditionalWaitStep(String name, String phase, String action, Step nextStep, Function<ClusterState, Boolean> condition) {, +        super(name, action, phase, nextStep);, +    public StepResult execute(ClusterService clusterService, ClusterState currentState, Index index, Client client, LongSupplier nowSupplier) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ConditionalWaitStep.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.index.Index;, +import java.util.function.LongSupplier;, +    public ConditionalWaitStep(String name, String phase, String action, Step nextStep, Function<ClusterState, Boolean> condition) {, +        super(name, action, phase, nextStep);, +    public StepResult execute(ClusterService clusterService, ClusterState currentState, Index index, Client client, LongSupplier nowSupplier) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecycleAction.java, +    List<Step> toSteps(String phase);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ConditionalWaitStep.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.index.Index;, +import java.util.function.LongSupplier;, +    public ConditionalWaitStep(String name, String phase, String action, Step nextStep, Function<ClusterState, Boolean> condition) {, +        super(name, action, phase, nextStep);, +    public StepResult execute(ClusterService clusterService, ClusterState currentState, Index index, Client client, LongSupplier nowSupplier) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecycleAction.java, +    List<Step> toSteps(String phase);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicy.java, +import java.util.ArrayList;, +        this.type.validate(phases.values());, +        List<Step> steps = new ArrayList<>();, +        for (Phase phase : type.getOrderedPhases(phases)) {, +            for (LifecycleAction action : type.getOrderedActions(phase)) {, +                // TODO(talevy): correctly set `nextStep` between actions and phases, +                steps.addAll(action.toSteps(phase.getName()));, +            }, +        }, +        return steps;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ConditionalWaitStep.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.index.Index;, +import java.util.function.LongSupplier;, +    public ConditionalWaitStep(String name, String phase, String action, Step nextStep, Function<ClusterState, Boolean> condition) {, +        super(name, action, phase, nextStep);, +    public StepResult execute(ClusterService clusterService, ClusterState currentState, Index index, Client client, LongSupplier nowSupplier) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecycleAction.java, +    List<Step> toSteps(String phase);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicy.java, +import java.util.ArrayList;, +        this.type.validate(phases.values());, +        List<Step> steps = new ArrayList<>();, +        for (Phase phase : type.getOrderedPhases(phases)) {, +            for (LifecycleAction action : type.getOrderedActions(phase)) {, +                // TODO(talevy): correctly set `nextStep` between actions and phases, +                steps.addAll(action.toSteps(phase.getName()));, +            }, +        }, +        return steps;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecycleType.java, +import java.util.List;, +    List<Phase> getOrderedPhases(Map<String, Phase> phases);, +    List<LifecycleAction> getOrderedActions(Phase phase);, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ConditionalWaitStep.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.index.Index;, +import java.util.function.LongSupplier;, +    public ConditionalWaitStep(String name, String phase, String action, Step nextStep, Function<ClusterState, Boolean> condition) {, +        super(name, action, phase, nextStep);, +    public StepResult execute(ClusterService clusterService, ClusterState currentState, Index index, Client client, LongSupplier nowSupplier) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecycleAction.java, +    List<Step> toSteps(String phase);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecyclePolicy.java, +import java.util.ArrayList;, +        this.type.validate(phases.values());, +        List<Step> steps = new ArrayList<>();, +        for (Phase phase : type.getOrderedPhases(phases)) {, +            for (LifecycleAction action : type.getOrderedActions(phase)) {, +                // TODO(talevy): correctly set `nextStep` between actions and phases, +                steps.addAll(action.toSteps(phase.getName()));, +            }, +        }, +        return steps;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/LifecycleType.java, +import java.util.List;, +    List<Phase> getOrderedPhases(Map<String, Phase> phases);, +    List<LifecycleAction> getOrderedActions(Phase phase);, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/Phase.java, +     *            by the {@link LifecycleType}, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ConditionalWaitStep.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.index.Index;, +import java.util.function.LongSupplier;, +    public ConditionalWaitStep(String name, String phase, String action, Step nextStep, Function<ClusterState, Boolean> condition) {, +        super(name, action, phase, nextStep);]