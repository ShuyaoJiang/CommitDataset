[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +import org.elasticsearch.search.internal.SearchContext;, +    private final Aggregator parentAggregator;, +    private Filter parentFilter;, +    public NestedAggregator(String name, AggregatorFactories factories, String nestedPath, AggregationContext aggregationContext, Aggregator parentAggregator) {, +        super(name, factories, aggregationContext, parentAggregator);, +        this.parentAggregator = parentAggregator;, +, +    private NestedAggregator findClosestNestedAggregator(Aggregator parent) {, +        for (; parent != null; parent = parent.parent()) {, +            if (parent instanceof NestedAggregator) {, +                return (NestedAggregator) parent;, +            }, +        }, +        return null;, +    }, +, +        if (parentFilter == null) {, +            NestedAggregator closestNestedAggregator = findClosestNestedAggregator(parentAggregator);, +            final Filter parentFilterNotCached;, +            if (closestNestedAggregator == null) {, +                parentFilterNotCached = NonNestedDocsFilter.INSTANCE;, +            } else {, +                // The aggs are instantiated in reverse, first the most inner nested aggs and lastly the top level aggs, +                // So at the time a nested 'nested' aggs is parsed its closest parent nested aggs hasn't been constructed., +                // So the trick to set at the last moment just before needed and we can use its child filter as the, +                // parent filter., +                parentFilterNotCached = closestNestedAggregator.childFilter;, +            }, +            parentFilter = SearchContext.current().filterCache().cache(parentFilterNotCached);, +        }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +import org.elasticsearch.search.internal.SearchContext;, +    private final Aggregator parentAggregator;, +    private Filter parentFilter;, +    public NestedAggregator(String name, AggregatorFactories factories, String nestedPath, AggregationContext aggregationContext, Aggregator parentAggregator) {, +        super(name, factories, aggregationContext, parentAggregator);, +        this.parentAggregator = parentAggregator;, +, +    private NestedAggregator findClosestNestedAggregator(Aggregator parent) {, +        for (; parent != null; parent = parent.parent()) {, +            if (parent instanceof NestedAggregator) {, +                return (NestedAggregator) parent;, +            }, +        }, +        return null;, +    }, +, +        if (parentFilter == null) {, +            NestedAggregator closestNestedAggregator = findClosestNestedAggregator(parentAggregator);, +            final Filter parentFilterNotCached;, +            if (closestNestedAggregator == null) {, +                parentFilterNotCached = NonNestedDocsFilter.INSTANCE;, +            } else {, +                // The aggs are instantiated in reverse, first the most inner nested aggs and lastly the top level aggs, +                // So at the time a nested 'nested' aggs is parsed its closest parent nested aggs hasn't been constructed., +                // So the trick to set at the last moment just before needed and we can use its child filter as the, +                // parent filter., +                parentFilterNotCached = closestNestedAggregator.childFilter;, +            }, +            parentFilter = SearchContext.current().filterCache().cache(parentFilterNotCached);, +        }, +, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedTests.java, +import org.elasticsearch.search.aggregations.bucket.terms.StringTerms;, +import org.elasticsearch.search.aggregations.bucket.terms.Terms;, +import org.elasticsearch.search.aggregations.metrics.sum.Sum;, +, +        assertAcked(prepareCreate("idx_nested_nested_aggs"), +                .addMapping("type", jsonBuilder().startObject().startObject("type").startObject("properties"), +                        .startObject("nested1"), +                            .field("type", "nested"), +                            .startObject("properties"), +                                .startObject("nested2"), +                                    .field("type", "nested"), +                                .endObject(), +                            .endObject(), +                        .endObject(), +                        .endObject().endObject().endObject()));, +, +        builders.add(, +                client().prepareIndex("idx_nested_nested_aggs", "type", "1"), +                        .setSource(jsonBuilder().startObject(), +                                .startArray("nested1"), +                                    .startObject(), +                                    .field("a", "a"), +                                        .startArray("nested2"), +                                            .startObject(), +                                                .field("b", 2), +                                            .endObject(), +                                        .endArray(), +                                    .endObject(), +                                    .startObject(), +                                        .field("a", "b"), +                                        .startArray("nested2"), +                                            .startObject(), +                                                .field("b", 2), +                                            .endObject(), +                                        .endArray()]