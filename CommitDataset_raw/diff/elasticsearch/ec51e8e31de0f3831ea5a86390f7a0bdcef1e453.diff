[+++ b/core/pom.xml, +                                <include>org/elasticsearch/index/MockEngineFactoryPlugin.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.util.IOUtils;, +        List<String> tlist;, +        TokenStream source = null;, +        try {, +            tlist = new ArrayList<>();, +        } finally {, +            if (source != null) {, +                IOUtils.closeWhileHandlingException(source);, +            }, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                }, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.util.IOUtils;, +        List<String> tlist;, +        TokenStream source = null;, +        try {, +            tlist = new ArrayList<>();, +        } finally {, +            if (source != null) {, +                IOUtils.closeWhileHandlingException(source);, +            }, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      , +      try (TokenStream ts = queryAnalyzer.tokenStream("", key.toString())) {, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.util.IOUtils;, +        List<String> tlist;, +        TokenStream source = null;, +        try {, +            tlist = new ArrayList<>();, +        } finally {, +            if (source != null) {, +                IOUtils.closeWhileHandlingException(source);, +            }, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      , +      try (TokenStream ts = queryAnalyzer.tokenStream("", key.toString())) {, +++ b/core/src/main/java/org/elasticsearch/SpecialPermission.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch;, +, +import java.security.BasicPermission;, +, +/**, + * Elasticsearch-specific permission to check before entering , + * {@code AccessController.doPrivileged()} blocks. , + * <p>, + * We try to avoid these blocks in our code and keep security simple, , + * but we need them for a few special places to contain hacks for third , + * party code, or dangerous things used by scripting engines., + * <p>, + * All normal code has this permission, but checking this before truncating the stack, + * prevents unprivileged code (e.g. scripts), which do not have it, from gaining elevated , + * privileges., + * <p>, + * In other words, don't do this:, + * <br>, + * <pre><code>, + *   // throw away all information about caller and run with our own privs, + *   AccessController.doPrivileged(, + *    ..., + *   );, + * </code></pre>, + * <br>, + * Instead do this;, + * <br>]