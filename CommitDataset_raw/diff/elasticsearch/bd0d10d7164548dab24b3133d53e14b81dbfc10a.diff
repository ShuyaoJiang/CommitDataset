[+++ b/core/src/main/java/org/elasticsearch/search/rescore/QueryRescorerBuilder.java, +        QueryRescorerBuilder queryRescoreBuilder = new QueryRescorerBuilder(rewrite);, +        queryRescoreBuilder.setQueryWeight(queryWeight);, +        queryRescoreBuilder.setRescoreQueryWeight(rescoreQueryWeight);, +        queryRescoreBuilder.setScoreMode(scoreMode);, +        return queryRescoreBuilder;, +++ b/core/src/main/java/org/elasticsearch/search/rescore/QueryRescorerBuilder.java, +        QueryRescorerBuilder queryRescoreBuilder = new QueryRescorerBuilder(rewrite);, +        queryRescoreBuilder.setQueryWeight(queryWeight);, +        queryRescoreBuilder.setRescoreQueryWeight(rescoreQueryWeight);, +        queryRescoreBuilder.setScoreMode(scoreMode);, +        return queryRescoreBuilder;, +++ b/core/src/test/java/org/elasticsearch/search/rescore/QueryRescorerBuilderTests.java, +import org.apache.lucene.search.MatchAllDocsQuery;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.index.query.BoolQueryBuilder;, +import org.elasticsearch.index.query.MatchQueryBuilder;, +import org.elasticsearch.index.query.QueryRewriteContext;, +    class AlwaysRewriteQueryBuilder extends MatchAllQueryBuilder {, +, +        protected QueryBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {, +            return new MatchAllQueryBuilder();, +        }, +    }, +, +    public void testRewritingKeepsSettings() throws IOException {, +, +        final long nowInMillis = randomNonNegativeLong();, +        Settings indexSettings = Settings.builder(), +            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();, +        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(randomAlphaOfLengthBetween(1, 10), indexSettings);, +        // shard context will only need indicesQueriesRegistry for building Query objects nested in query rescorer, +        QueryShardContext mockShardContext = new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),, +            namedWriteableRegistry, null, null, () -> nowInMillis, null) {, +            @Override, +            public MappedFieldType fieldMapper(String name) {, +                TextFieldMapper.Builder builder = new TextFieldMapper.Builder(name);, +                return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(), new ContentPath(1))).fieldType();, +            }, +        };, +, +        QueryBuilder rewriteQb = new AlwaysRewriteQueryBuilder();, +        org.elasticsearch.search.rescore.QueryRescorerBuilder rescoreBuilder = new, +            org.elasticsearch.search.rescore.QueryRescorerBuilder(rewriteQb);, +, +        rescoreBuilder.setQueryWeight(randomFloat());, +        rescoreBuilder.setRescoreQueryWeight(randomFloat());, +        rescoreBuilder.setScoreMode(QueryRescoreMode.Max);, +, +        QueryRescoreContext rescoreContext = (QueryRescoreContext) rescoreBuilder.buildContext(mockShardContext);, +        QueryRescorerBuilder rescoreRewritten = rescoreBuilder.rewrite(mockShardContext);, +        assertEquals(rescoreRewritten.getQueryWeight(), rescoreBuilder.getQueryWeight(), 0.01f);, +        assertEquals(rescoreRewritten.getRescoreQueryWeight(), rescoreBuilder.getRescoreQueryWeight(), 0.01f);, +        assertEquals(rescoreRewritten.getScoreMode(), rescoreBuilder.getScoreMode());, +, +    }, +]