[+++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/LicenseVerifier.java, +import org.elasticsearch.common.io.Streams;, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +, +    public static boolean verifyLicense(final License license) {, +        final byte[] publicKeyBytes;, +        try (InputStream is = LicenseVerifier.class.getResourceAsStream("/public.key")) {, +            ByteArrayOutputStream out = new ByteArrayOutputStream();, +            Streams.copy(is, out);, +            publicKeyBytes = out.toByteArray();, +        } catch (IOException ex) {, +            throw new IllegalStateException(ex);, +        }, +        return verifyLicense(license, publicKeyBytes);, +    }, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/LicenseVerifier.java, +import org.elasticsearch.common.io.Streams;, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +, +    public static boolean verifyLicense(final License license) {, +        final byte[] publicKeyBytes;, +        try (InputStream is = LicenseVerifier.class.getResourceAsStream("/public.key")) {, +            ByteArrayOutputStream out = new ByteArrayOutputStream();, +            Streams.copy(is, out);, +            publicKeyBytes = out.toByteArray();, +        } catch (IOException ex) {, +            throw new IllegalStateException(ex);, +        }, +        return verifyLicense(license, publicKeyBytes);, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/LicenseVerifier.java, +import org.elasticsearch.common.io.Streams;, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +, +    public static boolean verifyLicense(final License license) {, +        final byte[] publicKeyBytes;, +        try (InputStream is = LicenseVerifier.class.getResourceAsStream("/public.key")) {, +            ByteArrayOutputStream out = new ByteArrayOutputStream();, +            Streams.copy(is, out);, +            publicKeyBytes = out.toByteArray();, +        } catch (IOException ex) {, +            throw new IllegalStateException(ex);, +        }, +        return verifyLicense(license, publicKeyBytes);, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +        licensesService.registerLicense(request, listener);, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/LicenseVerifier.java, +import org.elasticsearch.common.io.Streams;, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +, +    public static boolean verifyLicense(final License license) {, +        final byte[] publicKeyBytes;, +        try (InputStream is = LicenseVerifier.class.getResourceAsStream("/public.key")) {, +            ByteArrayOutputStream out = new ByteArrayOutputStream();, +            Streams.copy(is, out);, +            publicKeyBytes = out.toByteArray();, +        } catch (IOException ex) {, +            throw new IllegalStateException(ex);, +        }, +        return verifyLicense(license, publicKeyBytes);, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +        licensesService.registerLicense(request, listener);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/ExpirationCallback.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.license.plugin.core;, +, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.license.core.License;, +, +import java.util.UUID;, +]