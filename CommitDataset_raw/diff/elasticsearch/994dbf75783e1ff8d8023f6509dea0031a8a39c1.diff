[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskActionRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskActionRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskActionRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/BaseTasksRequest.java, +        taskId = TaskId.readFromStream(in);, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskActionRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/BaseTasksRequest.java, +        taskId = TaskId.readFromStream(in);, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/tasks/TaskId.java, +    public final static TaskId EMPTY_TASK_ID = new TaskId();, +        if (nodeId.isEmpty()) {, +            throw new IllegalArgumentException("0 length nodeIds are reserved for EMPTY_TASK_ID and are otherwise invalid.");, +        }, +    /**, +     * Builds {@link #EMPTY_TASK_ID}., +     */, +    private TaskId() {, +        nodeId = "";, +        id = -1;, +    }, +, +    /**, +     * Read a {@linkplain TaskId} from a stream. {@linkplain TaskId} has this rather than the usual constructor that takes a, +     * {@linkplain StreamInput} so we can return the {@link #EMPTY_TASK_ID} without allocating., +     */, +    public static TaskId readFromStream(StreamInput in) throws IOException {, +        String nodeId = in.readString();, +        if (nodeId.isEmpty()) {, +            /*, +             * The only TaskId allowed to have the empty string as its nodeId is the EMPTY_TASK_ID and there is only ever one of it and it, +             * never writes its taskId to save bytes on the wire because it is by far the most common TaskId., +             */, +            return EMPTY_TASK_ID;, +        }, +        return new TaskId(nodeId, in.readLong());, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(nodeId);, +        if (nodeId.isEmpty()) {, +            // Shortcut the EMPTY_TASK_ID, the only TaskId allowed to have the empty string as its nodeId., +            return;, +        }, +        out.writeLong(id);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskActionRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/ChildTaskRequest.java, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/BaseTasksRequest.java, +        taskId = TaskId.readFromStream(in);, +        parentTaskId = TaskId.readFromStream(in);, +++ b/core/src/main/java/org/elasticsearch/tasks/TaskId.java, +    public final static TaskId EMPTY_TASK_ID = new TaskId();, +        if (nodeId.isEmpty()) {, +            throw new IllegalArgumentException("0 length nodeIds are reserved for EMPTY_TASK_ID and are otherwise invalid.");, +        }, +    /**, +     * Builds {@link #EMPTY_TASK_ID}., +     */, +    private TaskId() {, +        nodeId = "";]