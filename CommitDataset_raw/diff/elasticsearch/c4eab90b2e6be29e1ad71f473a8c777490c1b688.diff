[+++ b/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +    public Query parse(Type type, String fieldName, Object value) throws IOException {, +        final TokenStream source = analyzer.tokenStream(field, new FastStringReader(value.toString()));, +        final CachingTokenFilter buffer = new CachingTokenFilter(source);, +        final CharTermAttribute termAtt = buffer.addAttribute(CharTermAttribute.class);, +        final PositionIncrementAttribute posIncrAtt = buffer.addAttribute(PositionIncrementAttribute.class);, +        boolean hasMoreTokens =  buffer.incrementToken();, +            int positionIncrement = posIncrAtt.getPositionIncrement();, +                final Query q = newTermQuery(mapper, new Term(field, termToByteRef(termAtt, new BytesRef())));, +                final Query currentQuery = newTermQuery(mapper, new Term(field, termToByteRef(termAtt, new BytesRef())));, +                final MultiPhraseQuery mpq = new MultiPhraseQuery();, +                final List<Term> multiTerms = new ArrayList<Term>();, +        UnicodeUtil.UTF16toUTF8(attr.buffer(), 0, attr.length(), ref);, +++ b/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +    public Query parse(Type type, String fieldName, Object value) throws IOException {, +        final TokenStream source = analyzer.tokenStream(field, new FastStringReader(value.toString()));, +        final CachingTokenFilter buffer = new CachingTokenFilter(source);, +        final CharTermAttribute termAtt = buffer.addAttribute(CharTermAttribute.class);, +        final PositionIncrementAttribute posIncrAtt = buffer.addAttribute(PositionIncrementAttribute.class);, +        boolean hasMoreTokens =  buffer.incrementToken();, +            int positionIncrement = posIncrAtt.getPositionIncrement();, +                final Query q = newTermQuery(mapper, new Term(field, termToByteRef(termAtt, new BytesRef())));, +                final Query currentQuery = newTermQuery(mapper, new Term(field, termToByteRef(termAtt, new BytesRef())));, +                final MultiPhraseQuery mpq = new MultiPhraseQuery();, +                final List<Term> multiTerms = new ArrayList<Term>();, +        UnicodeUtil.UTF16toUTF8(attr.buffer(), 0, attr.length(), ref);, +++ b/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +import java.io.IOException;, +    public Query parse(Type type, Map<String, Float> fieldNames, Object value) throws IOException {]