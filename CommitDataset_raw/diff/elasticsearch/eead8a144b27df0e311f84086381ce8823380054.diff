[+++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +        request.setJsonEntity("{\"query\": \"SELECT COUNT(*) FROM test\"" + mode(mode) + "}");, +++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +        request.setJsonEntity("{\"query\": \"SELECT COUNT(*) FROM test\"" + mode(mode) + "}");, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/RestSqlSecurityIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +            Map<String, Object> adminResponse = runSql(null,, +                    new StringEntity("{\"query\": \"" + adminSql + "\", \"fetch_size\": 1" + mode(mode) + "}",, +                            ContentType.APPLICATION_JSON));, +            Map<String, Object> otherResponse = runSql(user,, +                    new StringEntity("{\"query\": \"" + adminSql + "\", \"fetch_size\": 1" + mode(mode) + "}",, +                            ContentType.APPLICATION_JSON));, +                adminResponse = runSql(null,, +                        new StringEntity("{\"cursor\": \"" + adminCursor + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +                otherResponse = runSql(user,, +                        new StringEntity("{\"cursor\": \"" + otherCursor + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +            return runSql(asUser, new StringEntity("{\"query\": \"" + sql + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +        private static Map<String, Object> runSql(@Nullable String asUser, HttpEntity entity) throws IOException {, +        Map<String, Object> adminResponse = RestActions.runSql(null,, +                new StringEntity("{\"query\": \"SELECT * FROM test\", \"fetch_size\": 1" + mode(randomMode()) + "}",, +                        ContentType.APPLICATION_JSON));, +        ResponseException e = expectThrows(ResponseException.class, () -> RestActions.runSql("full_access",, +                new StringEntity("{\"cursor\":\"" + cursor + "\"" + mode(randomMode()) + "}", ContentType.APPLICATION_JSON)));, +++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +        request.setJsonEntity("{\"query\": \"SELECT COUNT(*) FROM test\"" + mode(mode) + "}");, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/RestSqlSecurityIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +            Map<String, Object> adminResponse = runSql(null,, +                    new StringEntity("{\"query\": \"" + adminSql + "\", \"fetch_size\": 1" + mode(mode) + "}",, +                            ContentType.APPLICATION_JSON));, +            Map<String, Object> otherResponse = runSql(user,, +                    new StringEntity("{\"query\": \"" + adminSql + "\", \"fetch_size\": 1" + mode(mode) + "}",, +                            ContentType.APPLICATION_JSON));, +                adminResponse = runSql(null,, +                        new StringEntity("{\"cursor\": \"" + adminCursor + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +                otherResponse = runSql(user,, +                        new StringEntity("{\"cursor\": \"" + otherCursor + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +            return runSql(asUser, new StringEntity("{\"query\": \"" + sql + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +        private static Map<String, Object> runSql(@Nullable String asUser, HttpEntity entity) throws IOException {, +        Map<String, Object> adminResponse = RestActions.runSql(null,, +                new StringEntity("{\"query\": \"SELECT * FROM test\", \"fetch_size\": 1" + mode(randomMode()) + "}",, +                        ContentType.APPLICATION_JSON));, +        ResponseException e = expectThrows(ResponseException.class, () -> RestActions.runSql("full_access",, +                new StringEntity("{\"cursor\":\"" + cursor + "\"" + mode(randomMode()) + "}", ContentType.APPLICATION_JSON)));, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/UserFunctionIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.randomMode;, +        return runSql(asUser, new StringEntity("{\"query\": \"" + sql + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +    private Map<String, Object> runSql(String asUser, HttpEntity entity) throws IOException {, +++ b/x-pack/plugin/sql/qa/multi-node/src/test/java/org/elasticsearch/xpack/sql/qa/multi_node/RestSqlMultinodeIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +        request.setJsonEntity("{\"query\": \"SELECT COUNT(*) FROM test\"" + mode(mode) + "}");, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/RestSqlSecurityIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +            Map<String, Object> adminResponse = runSql(null,, +                    new StringEntity("{\"query\": \"" + adminSql + "\", \"fetch_size\": 1" + mode(mode) + "}",, +                            ContentType.APPLICATION_JSON));, +            Map<String, Object> otherResponse = runSql(user,, +                    new StringEntity("{\"query\": \"" + adminSql + "\", \"fetch_size\": 1" + mode(mode) + "}",, +                            ContentType.APPLICATION_JSON));, +                adminResponse = runSql(null,, +                        new StringEntity("{\"cursor\": \"" + adminCursor + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +                otherResponse = runSql(user,, +                        new StringEntity("{\"cursor\": \"" + otherCursor + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +            return runSql(asUser, new StringEntity("{\"query\": \"" + sql + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +        private static Map<String, Object> runSql(@Nullable String asUser, HttpEntity entity) throws IOException {, +        Map<String, Object> adminResponse = RestActions.runSql(null,, +                new StringEntity("{\"query\": \"SELECT * FROM test\", \"fetch_size\": 1" + mode(randomMode()) + "}",, +                        ContentType.APPLICATION_JSON));, +        ResponseException e = expectThrows(ResponseException.class, () -> RestActions.runSql("full_access",, +                new StringEntity("{\"cursor\":\"" + cursor + "\"" + mode(randomMode()) + "}", ContentType.APPLICATION_JSON)));, +++ b/x-pack/plugin/sql/qa/security/src/test/java/org/elasticsearch/xpack/sql/qa/security/UserFunctionIT.java, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.randomMode;, +        return runSql(asUser, new StringEntity("{\"query\": \"" + sql + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON));, +    private Map<String, Object> runSql(String asUser, HttpEntity entity) throws IOException {, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.xpack.sql.proto.StringUtils;, +                response = runSql(new StringEntity(sqlRequest, ContentType.APPLICATION_JSON), "");, +                response = runSql(new StringEntity("{\"cursor\":\"" + cursor + "\"" + mode(mode) + "}",, +                        ContentType.APPLICATION_JSON), StringUtils.EMPTY);, +        assertResponse(expected, runSql(new StringEntity("{ \"cursor\":\"" + cursor + "\"" + mode(mode) + "}",, +                ContentType.APPLICATION_JSON), StringUtils.EMPTY));, +        assertResponse(expected, runSql(mode, "SELECT DAY_OF_YEAR(test), COUNT(*) FROM test"));, +        return runSql(mode, sql, StringUtils.EMPTY);, +        return runSql(new StringEntity("{\"query\":\"" + sql + "\"" + mode(mode) + "}", ContentType.APPLICATION_JSON), suffix);, +    private Map<String, Object> runSql(HttpEntity sql, String suffix) throws IOException {, +, +        assertResponse(expected, runSql(new StringEntity("{\"query\":\"SELECT * FROM test\", " +, +                "\"filter\":{\"match\": {\"test\": \"foo\"}}" + mode(mode) + "}",, +                ContentType.APPLICATION_JSON), StringUtils.EMPTY));, +        assertResponse(expected, runSql(new StringEntity("{\"query\":\"SELECT test, ? param FROM test WHERE test = ?\", " +, +                "\"params\":[{\"type\": \"integer\", \"value\": 10}, {\"type\": \"keyword\", \"value\": \"foo\"}]", +                + mode(mode) + "}", ContentType.APPLICATION_JSON), StringUtils.EMPTY));, +        Map<String, Object> response = runSql(, +        Map<String, Object> response = runSql(]