[+++ b/server/src/test/java/org/elasticsearch/discovery/SnapshotDisruptionIT.java, +            SnapshotsInProgress snapshots = dataNodeClient().admin().cluster().prepareState().setLocal(false).get().getState(), +                assertSnapshotExists("test-repo", "test-snap-2");, +                logger.info("--> done verifying, snapshot doesn't exist");, +, +        logger.info("--> verify that snapshot eventually will be created due to retries");, +        assertBusy(() -> {, +            assertSnapshotExists("test-repo", "test-snap-2");, +        }, 1, TimeUnit.MINUTES);, +    }, +, +    private void assertSnapshotExists(String repository, String snapshot) {, +        GetSnapshotsResponse snapshotsStatusResponse = dataNodeClient().admin().cluster().prepareGetSnapshots(repository), +                .setSnapshots(snapshot).get();, +        SnapshotInfo snapshotInfo = snapshotsStatusResponse.getSnapshots().get(0);, +        assertEquals(SnapshotState.SUCCESS, snapshotInfo.state());, +        assertEquals(snapshotInfo.totalShards(), snapshotInfo.successfulShards());, +        assertEquals(0, snapshotInfo.failedShards());, +        logger.info("--> done verifying, snapshot exists");, +++ b/server/src/test/java/org/elasticsearch/discovery/SnapshotDisruptionIT.java, +            SnapshotsInProgress snapshots = dataNodeClient().admin().cluster().prepareState().setLocal(false).get().getState(), +                assertSnapshotExists("test-repo", "test-snap-2");, +                logger.info("--> done verifying, snapshot doesn't exist");, +, +        logger.info("--> verify that snapshot eventually will be created due to retries");, +        assertBusy(() -> {, +            assertSnapshotExists("test-repo", "test-snap-2");, +        }, 1, TimeUnit.MINUTES);, +    }, +, +    private void assertSnapshotExists(String repository, String snapshot) {, +        GetSnapshotsResponse snapshotsStatusResponse = dataNodeClient().admin().cluster().prepareGetSnapshots(repository), +                .setSnapshots(snapshot).get();, +        SnapshotInfo snapshotInfo = snapshotsStatusResponse.getSnapshots().get(0);, +        assertEquals(SnapshotState.SUCCESS, snapshotInfo.state());, +        assertEquals(snapshotInfo.totalShards(), snapshotInfo.successfulShards());, +        assertEquals(0, snapshotInfo.failedShards());, +        logger.info("--> done verifying, snapshot exists");, +++ b/server/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java, +        /*TODO This test test does not work with Zen2, because once master node looses its cluster state during restart, +        it will start with term = 1, which is the same as the term data node has. Data node won't accept cluster state from master, +        after the restart, because the term is the same, but version of the cluster state is greater on the data node., +        Consider adding term to JoinRequest, so that master node can bump its term if its current term is less than JoinRequest#term., +        */, +            Settings.builder().put(IndexGraveyard.SETTING_MAX_TOMBSTONES.getKey(), randomIntBetween(10, 100)).build());, +                logger.info("--> index deleted");, +++ b/server/src/test/java/org/elasticsearch/discovery/SnapshotDisruptionIT.java, +            SnapshotsInProgress snapshots = dataNodeClient().admin().cluster().prepareState().setLocal(false).get().getState(), +                assertSnapshotExists("test-repo", "test-snap-2");, +                logger.info("--> done verifying, snapshot doesn't exist");, +, +        logger.info("--> verify that snapshot eventually will be created due to retries");, +        assertBusy(() -> {, +            assertSnapshotExists("test-repo", "test-snap-2");, +        }, 1, TimeUnit.MINUTES);, +    }, +, +    private void assertSnapshotExists(String repository, String snapshot) {, +        GetSnapshotsResponse snapshotsStatusResponse = dataNodeClient().admin().cluster().prepareGetSnapshots(repository), +                .setSnapshots(snapshot).get();, +        SnapshotInfo snapshotInfo = snapshotsStatusResponse.getSnapshots().get(0);, +        assertEquals(SnapshotState.SUCCESS, snapshotInfo.state());, +        assertEquals(snapshotInfo.totalShards(), snapshotInfo.successfulShards());, +        assertEquals(0, snapshotInfo.failedShards());, +        logger.info("--> done verifying, snapshot exists");, +++ b/server/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java, +        /*TODO This test test does not work with Zen2, because once master node looses its cluster state during restart, +        it will start with term = 1, which is the same as the term data node has. Data node won't accept cluster state from master, +        after the restart, because the term is the same, but version of the cluster state is greater on the data node., +        Consider adding term to JoinRequest, so that master node can bump its term if its current term is less than JoinRequest#term., +        */, +            Settings.builder().put(IndexGraveyard.SETTING_MAX_TOMBSTONES.getKey(), randomIntBetween(10, 100)).build());, +                logger.info("--> index deleted");, +++ b/server/src/test/java/org/elasticsearch/index/shard/RemoveCorruptedShardDataCommandIT.java, +@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0), +        internalCluster().startNodes(2);, +        internalCluster().startMasterOnlyNode();, +        final String node1 = internalCluster().startDataOnlyNode();, +        final String node2 = internalCluster().startDataOnlyNode();, +        // stop data nodes. After the restart the 1st node will be primary and the 2nd node will be replica, +        // Corrupt the translog file(s) on the replica, +++ b/server/src/test/java/org/elasticsearch/discovery/SnapshotDisruptionIT.java, +            SnapshotsInProgress snapshots = dataNodeClient().admin().cluster().prepareState().setLocal(false).get().getState(), +                assertSnapshotExists("test-repo", "test-snap-2");, +                logger.info("--> done verifying, snapshot doesn't exist");, +, +        logger.info("--> verify that snapshot eventually will be created due to retries");, +        assertBusy(() -> {, +            assertSnapshotExists("test-repo", "test-snap-2");, +        }, 1, TimeUnit.MINUTES);, +    }, +, +    private void assertSnapshotExists(String repository, String snapshot) {, +        GetSnapshotsResponse snapshotsStatusResponse = dataNodeClient().admin().cluster().prepareGetSnapshots(repository), +                .setSnapshots(snapshot).get();, +        SnapshotInfo snapshotInfo = snapshotsStatusResponse.getSnapshots().get(0);, +        assertEquals(SnapshotState.SUCCESS, snapshotInfo.state());, +        assertEquals(snapshotInfo.totalShards(), snapshotInfo.successfulShards());, +        assertEquals(0, snapshotInfo.failedShards());, +        logger.info("--> done verifying, snapshot exists");]