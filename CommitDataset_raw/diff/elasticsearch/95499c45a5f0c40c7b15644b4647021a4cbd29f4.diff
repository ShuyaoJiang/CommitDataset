[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        NOT_MASTER_EXCEPTION(org.elasticsearch.cluster.NotMasterException.class, org.elasticsearch.cluster.NotMasterException::new, 144);, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        NOT_MASTER_EXCEPTION(org.elasticsearch.cluster.NotMasterException.class, org.elasticsearch.cluster.NotMasterException::new, 144);, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +import org.elasticsearch.common.io.stream.StreamOutput;, +public class ElasticsearchSecurityException extends ElasticsearchException {, +, +    private final RestStatus status;, +, +        super(msg, cause, args);, +        this.status = status ;, +        this(msg, RestStatus.INTERNAL_SERVER_ERROR, null, args);, +        this(msg, status, null, args);, +        status = RestStatus.readFrom(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        RestStatus.writeTo(out, status);, +    }, +, +    @Override, +    public final RestStatus status() {, +        return status;, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        NOT_MASTER_EXCEPTION(org.elasticsearch.cluster.NotMasterException.class, org.elasticsearch.cluster.NotMasterException::new, 144);, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +import org.elasticsearch.common.io.stream.StreamOutput;, +public class ElasticsearchSecurityException extends ElasticsearchException {, +, +    private final RestStatus status;, +, +        super(msg, cause, args);, +        this.status = status ;, +        this(msg, RestStatus.INTERNAL_SERVER_ERROR, null, args);, +        this(msg, status, null, args);, +        status = RestStatus.readFrom(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        RestStatus.writeTo(out, status);, +    }, +, +    @Override, +    public final RestStatus status() {, +        return status;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        NOT_MASTER_EXCEPTION(org.elasticsearch.cluster.NotMasterException.class, org.elasticsearch.cluster.NotMasterException::new, 144);, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +import org.elasticsearch.common.io.stream.StreamOutput;, +public class ElasticsearchSecurityException extends ElasticsearchException {, +, +    private final RestStatus status;, +, +        super(msg, cause, args);, +        this.status = status ;, +        this(msg, RestStatus.INTERNAL_SERVER_ERROR, null, args);, +        this(msg, status, null, args);, +        status = RestStatus.readFrom(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        RestStatus.writeTo(out, status);, +    }, +, +    @Override, +    public final RestStatus status() {, +        return status;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/ingest/WriteableIngestDocument.java, +        @SuppressWarnings("unchecked"), +        Map<String, String> ingestMetadata = (Map<String, String>) in.readGenericValue();, +        out.writeGenericValue(ingestDocument.getIngestMetadata());, +        builder.startObject("_ingest");, +        for (Map.Entry<String, String> ingestMetadata : ingestDocument.getIngestMetadata().entrySet()) {, +            builder.field(ingestMetadata.getKey(), ingestMetadata.getValue());, +        }, +        builder.endObject();, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        NOT_MASTER_EXCEPTION(org.elasticsearch.cluster.NotMasterException.class, org.elasticsearch.cluster.NotMasterException::new, 144);, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchSecurityException.java, +import org.elasticsearch.common.io.stream.StreamOutput;, +public class ElasticsearchSecurityException extends ElasticsearchException {, +, +    private final RestStatus status;, +, +        super(msg, cause, args);, +        this.status = status ;]