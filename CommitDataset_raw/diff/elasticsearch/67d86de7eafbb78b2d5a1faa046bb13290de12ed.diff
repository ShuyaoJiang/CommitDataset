[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.codehaus.jackson.JsonParser;, +import org.codehaus.jackson.JsonToken;, +import org.elasticsearch.util.Nullable;, +import org.elasticsearch.util.json.JsonBuilder;, +import org.elasticsearch.util.json.ToJson;, +        Preconditions.checkArgument(settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1) != -1, "must specify numberOfShards for index [" + index + "]");, +        Preconditions.checkArgument(settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1) != -1, "must specify numberOfReplicas for index [" + index + "]");, +            settings = settingsBuilder().putAll(settings).putInt(SETTING_NUMBER_OF_SHARDS, numberOfShards).build();, +            settings = settingsBuilder().putAll(settings).putInt(SETTING_NUMBER_OF_REPLICAS, numberOfReplicas).build();, +        public Builder settings(Settings.Builder settings) {, +            this.settings = settings.build();, +            return this;, +        }, +, +        public static void toJson(IndexMetaData indexMetaData, JsonBuilder builder, ToJson.Params params) throws IOException {, +            builder.startObject(indexMetaData.index());, +, +            builder.startObject("settings");, +            for (Map.Entry<String, String> entry : indexMetaData.settings().getAsMap().entrySet()) {, +                builder.field(entry.getKey(), entry.getValue());, +            }, +            builder.endObject();, +, +            builder.startObject("mappings");, +            for (Map.Entry<String, String> entry : indexMetaData.mappings().entrySet()) {, +                builder.startObject(entry.getKey());, +                builder.field("source", entry.getValue());, +                builder.endObject();, +            }, +            builder.endObject();, +, +            builder.endObject();, +        }, +, +        public static IndexMetaData fromJson(JsonParser jp, @Nullable Settings globalSettings) throws IOException {, +            Builder builder = new Builder(jp.getCurrentName());, +, +            String currentFieldName = null;, +            JsonToken token = jp.nextToken();, +            while ((token = jp.nextToken()) != JsonToken.END_OBJECT) {, +                if (token == JsonToken.FIELD_NAME) {, +                    currentFieldName = jp.getCurrentName();, +                } else if (token == JsonToken.START_OBJECT) {, +                    if ("settings".equals(currentFieldName)) {, +                        ImmutableSettings.Builder settingsBuilder = settingsBuilder().globalSettings(globalSettings);, +                        while ((token = jp.nextToken()) != JsonToken.END_OBJECT) {, +                            String key = jp.getCurrentName();, +                            token = jp.nextToken();, +                            String value = jp.getText();, +                            settingsBuilder.put(key, value);, +                        }, +                        builder.settings(settingsBuilder.build());, +                    } else if ("mappings".equals(currentFieldName)) {, +                        while ((token = jp.nextToken()) != JsonToken.END_OBJECT) {, +                            String mappingType = jp.getCurrentName();, +                            String mappingSource = null;, +                            while ((token = jp.nextToken()) != JsonToken.END_OBJECT) {, +                                if (token == JsonToken.FIELD_NAME) {, +                                    if ("source".equals(jp.getCurrentName())) {, +                                        jp.nextToken();, +                                        mappingSource = jp.getText();, +                                    }, +                                }, +                            }, +                            if (mappingSource == null) {, +                                // crap, no mapping source, warn?, +                            } else {, +                                builder.putMapping(mappingType, mappingSource);, +                            }, +                        }, +                    }, +                }, +            }, +            return builder.build();, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.codehaus.jackson.JsonParser;, +import org.codehaus.jackson.JsonToken;, +import org.elasticsearch.util.Nullable;, +import org.elasticsearch.util.json.JsonBuilder;, +import org.elasticsearch.util.json.ToJson;, +        Preconditions.checkArgument(settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1) != -1, "must specify numberOfShards for index [" + index + "]");, +        Preconditions.checkArgument(settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1) != -1, "must specify numberOfReplicas for index [" + index + "]");, +            settings = settingsBuilder().putAll(settings).putInt(SETTING_NUMBER_OF_SHARDS, numberOfShards).build();, +            settings = settingsBuilder().putAll(settings).putInt(SETTING_NUMBER_OF_REPLICAS, numberOfReplicas).build();, +        public Builder settings(Settings.Builder settings) {, +            this.settings = settings.build();, +            return this;, +        }, +, +        public static void toJson(IndexMetaData indexMetaData, JsonBuilder builder, ToJson.Params params) throws IOException {, +            builder.startObject(indexMetaData.index());, +, +            builder.startObject("settings");, +            for (Map.Entry<String, String> entry : indexMetaData.settings().getAsMap().entrySet()) {, +                builder.field(entry.getKey(), entry.getValue());, +            }, +            builder.endObject();]