[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +            JarHell.checkVersionFormat(javaVersionString);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +            JarHell.checkVersionFormat(javaVersionString);, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java, +    public void testReadFromPropertiesBadJavaVersionFormat() throws Exception {, +        String pluginName = "fake-plugin";, +        Path pluginDir = createTempDir().resolve(pluginName);, +        writeProperties(pluginDir,, +                "description", "fake desc",, +                "name", pluginName,, +                "elasticsearch.version", Version.CURRENT.toString(),, +                "java.version", "1.7.0_80",, +                "classname", "FakePlugin",, +                "version", "1.0",, +                "jvm", "true");, +        try {, +            PluginInfo.readFromProperties(pluginDir);, +            fail("expected bad java version format exception");, +        } catch (IllegalStateException e) {, +            assertTrue(e.getMessage(), e.getMessage().equals("version string must be a sequence of nonnegative decimal integers separated by \".\"'s and may have leading zeros but was 1.7.0_80"));, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +            JarHell.checkVersionFormat(javaVersionString);, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java, +    public void testReadFromPropertiesBadJavaVersionFormat() throws Exception {, +        String pluginName = "fake-plugin";, +        Path pluginDir = createTempDir().resolve(pluginName);, +        writeProperties(pluginDir,, +                "description", "fake desc",, +                "name", pluginName,, +                "elasticsearch.version", Version.CURRENT.toString(),, +                "java.version", "1.7.0_80",, +                "classname", "FakePlugin",, +                "version", "1.0",, +                "jvm", "true");, +        try {, +            PluginInfo.readFromProperties(pluginDir);, +            fail("expected bad java version format exception");, +        } catch (IllegalStateException e) {, +            assertTrue(e.getMessage(), e.getMessage().equals("version string must be a sequence of nonnegative decimal integers separated by \".\"'s and may have leading zeros but was 1.7.0_80"));, +        }, +    }, +, +++ b/dev-tools/src/main/resources/plugin-metadata/plugin-descriptor.properties, +# use the system property java.specification.version, +# version string must be a sequence of nonnegative decimal integers, +# separated by "."'s and may have leading zeros]