[+++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value, "Argument 'value' must not be null.");, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value, "Argument 'value' must not be null.");, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +        return value;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value, "Argument 'value' must not be null.");, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +        return value;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                String value = propertyPlaceholder.replacePlaceholders(entry.getValue(), placeholderResolver);, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value, "Argument 'value' must not be null.");, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +        return value;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                String value = propertyPlaceholder.replacePlaceholders(entry.getValue(), placeholderResolver);, +++ b/core/src/test/java/org/elasticsearch/common/property/PropertyPlaceholderTests.java, +        assertEquals("bar1", propertyPlaceholder.replacePlaceholders("{foo1}", placeholderResolver));, +        assertEquals("a bar1b", propertyPlaceholder.replacePlaceholders("a {foo1}b", placeholderResolver));, +        assertEquals("bar1bar2", propertyPlaceholder.replacePlaceholders("{foo1}{foo2}", placeholderResolver));, +        assertEquals("a bar1 b bar2 c", propertyPlaceholder.replacePlaceholders("a {foo1} b {foo2} c", placeholderResolver));, +        assertEquals("bar", ppEqualsPrefix.replacePlaceholders("{foo}", placeholderResolver));, +        assertEquals("bar", ppLongerPrefix.replacePlaceholders("${foo}", placeholderResolver));, +        assertEquals("bar", ppShorterPrefix.replacePlaceholders("{foo}}", placeholderResolver));, +        assertEquals("bar", propertyPlaceholder.replacePlaceholders("${foo:bar}", placeholderResolver));, +        assertEquals("", propertyPlaceholder.replacePlaceholders("${foo:}", placeholderResolver));, +        assertEquals("${foo}", propertyPlaceholder.replacePlaceholders("${foo}", placeholderResolver));, +            propertyPlaceholder.replacePlaceholders("${foo}", placeholderResolver);, +        assertEquals("bar", propertyPlaceholder.replacePlaceholders("bar${foo}", placeholderResolver));, +        assertEquals("bar", propertyPlaceholder.replacePlaceholders("${foo}", placeholderResolver));, +        assertEquals("abarb", propertyPlaceholder.replacePlaceholders("a${foo}b", placeholderResolver));]