[+++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/java-api/query-dsl-filters.asciidoc, +<5> distance computation mode: `GeoDistance.SLOPPY_ARC` (default), `GeoDistance.ARC` (slightly more precise but, +++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/java-api/query-dsl-filters.asciidoc, +<5> distance computation mode: `GeoDistance.SLOPPY_ARC` (default), `GeoDistance.ARC` (slightly more precise but, +++ b/docs/reference/aggregations/bucket/daterange-aggregation.asciidoc, +Note that this aggregation includes the `from` value and excludes the `to` value for each range., +++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/java-api/query-dsl-filters.asciidoc, +<5> distance computation mode: `GeoDistance.SLOPPY_ARC` (default), `GeoDistance.ARC` (slightly more precise but, +++ b/docs/reference/aggregations/bucket/daterange-aggregation.asciidoc, +Note that this aggregation includes the `from` value and excludes the `to` value for each range., +++ b/docs/reference/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                and network bandwidth if there are many buckets., +++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/java-api/query-dsl-filters.asciidoc, +<5> distance computation mode: `GeoDistance.SLOPPY_ARC` (default), `GeoDistance.ARC` (slightly more precise but, +++ b/docs/reference/aggregations/bucket/daterange-aggregation.asciidoc, +Note that this aggregation includes the `from` value and excludes the `to` value for each range., +++ b/docs/reference/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                and network bandwidth if there are many buckets., +++ b/docs/reference/aggregations/bucket/global-aggregation.asciidoc, +The response for the above aggregation:, +++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/java-api/query-dsl-filters.asciidoc, +<5> distance computation mode: `GeoDistance.SLOPPY_ARC` (default), `GeoDistance.ARC` (slightly more precise but, +++ b/docs/reference/aggregations/bucket/daterange-aggregation.asciidoc, +Note that this aggregation includes the `from` value and excludes the `to` value for each range., +++ b/docs/reference/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                and network bandwidth if there are many buckets., +++ b/docs/reference/aggregations/bucket/global-aggregation.asciidoc, +The response for the above aggregation:, +++ b/docs/reference/aggregations/bucket/histogram-aggregation.asciidoc, +By default the returned buckets are sorted by their `key` ascending, though the order behaviour can be controlled, +++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/java-api/query-dsl-filters.asciidoc, +<5> distance computation mode: `GeoDistance.SLOPPY_ARC` (default), `GeoDistance.ARC` (slightly more precise but, +++ b/docs/reference/aggregations/bucket/daterange-aggregation.asciidoc, +Note that this aggregation includes the `from` value and excludes the `to` value for each range., +++ b/docs/reference/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                and network bandwidth if there are many buckets., +++ b/docs/reference/aggregations/bucket/global-aggregation.asciidoc, +The response for the above aggregation:, +++ b/docs/reference/aggregations/bucket/histogram-aggregation.asciidoc, +By default the returned buckets are sorted by their `key` ascending, though the order behaviour can be controlled, +++ b/docs/reference/aggregations/reducer.asciidoc, +[[gap-policy]], +_skip_::, +include::reducer/avg-bucket-aggregation.asciidoc[], +++ b/docs/community/clients.asciidoc, +  chainable query and filter construction built on top of official client., +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/java-api/query-dsl-filters.asciidoc, +<5> distance computation mode: `GeoDistance.SLOPPY_ARC` (default), `GeoDistance.ARC` (slightly more precise but, +++ b/docs/reference/aggregations/bucket/daterange-aggregation.asciidoc, +Note that this aggregation includes the `from` value and excludes the `to` value for each range., +++ b/docs/reference/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                and network bandwidth if there are many buckets.]