[+++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +            String redirectUrl = request.rawPath() + "/";, +            BytesRestResponse restResponse = new BytesRestResponse(RestStatus.MOVED_PERMANENTLY, "text/html", "<head><meta http-equiv=\"refresh\" content=\"0; URL=" + redirectUrl + "></head>");, +            restResponse.addHeader("Location", redirectUrl);, +            channel.sendResponse(restResponse);, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +            String redirectUrl = request.rawPath() + "/";, +            BytesRestResponse restResponse = new BytesRestResponse(RestStatus.MOVED_PERMANENTLY, "text/html", "<head><meta http-equiv=\"refresh\" content=\"0; URL=" + redirectUrl + "></head>");, +            restResponse.addHeader("Location", redirectUrl);, +            channel.sendResponse(restResponse);, +++ b/src/test/java/org/elasticsearch/options/jsonp/JsonpOptionDisabledTest.java, +import org.apache.http.impl.client.HttpClients;, +import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class)), +                .path("/"), +                .addParam("callback", "DisabledJSONPCallback").execute();, +, +        assertThat(response.getHeaders().get("Content-Type"), is("application/javascript"));, +        assertThat(response.getBody(), containsString("DisabledJSONPCallback("));, +        assertThat(response.getBody(), containsString("JSONP is disabled"));, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +            String redirectUrl = request.rawPath() + "/";, +            BytesRestResponse restResponse = new BytesRestResponse(RestStatus.MOVED_PERMANENTLY, "text/html", "<head><meta http-equiv=\"refresh\" content=\"0; URL=" + redirectUrl + "></head>");, +            restResponse.addHeader("Location", redirectUrl);, +            channel.sendResponse(restResponse);, +++ b/src/test/java/org/elasticsearch/options/jsonp/JsonpOptionDisabledTest.java, +import org.apache.http.impl.client.HttpClients;, +import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class)), +                .path("/"), +                .addParam("callback", "DisabledJSONPCallback").execute();, +, +        assertThat(response.getHeaders().get("Content-Type"), is("application/javascript"));, +        assertThat(response.getBody(), containsString("DisabledJSONPCallback("));, +        assertThat(response.getBody(), containsString("JSONP is disabled"));, +++ b/src/test/java/org/elasticsearch/options/jsonp/JsonpOptionEnabledTest.java, +import org.apache.http.impl.client.HttpClients;, +import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class)).path("/").addParam("callback", "EnabledJSONPCallback").execute();, +        assertThat(response.getHeaders().get("Content-Type"), is("application/javascript"));, +        assertThat(response.getBody(), containsString("EnabledJSONPCallback("));, +        assertThat(response.getBody(), containsString("You Know, for Search"));, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +            String redirectUrl = request.rawPath() + "/";, +            BytesRestResponse restResponse = new BytesRestResponse(RestStatus.MOVED_PERMANENTLY, "text/html", "<head><meta http-equiv=\"refresh\" content=\"0; URL=" + redirectUrl + "></head>");, +            restResponse.addHeader("Location", redirectUrl);, +            channel.sendResponse(restResponse);, +++ b/src/test/java/org/elasticsearch/options/jsonp/JsonpOptionDisabledTest.java, +import org.apache.http.impl.client.HttpClients;, +import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class)), +                .path("/"), +                .addParam("callback", "DisabledJSONPCallback").execute();, +, +        assertThat(response.getHeaders().get("Content-Type"), is("application/javascript"));, +        assertThat(response.getBody(), containsString("DisabledJSONPCallback("));, +        assertThat(response.getBody(), containsString("JSONP is disabled"));, +++ b/src/test/java/org/elasticsearch/options/jsonp/JsonpOptionEnabledTest.java, +import org.apache.http.impl.client.HttpClients;, +import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +        HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class)).path("/").addParam("callback", "EnabledJSONPCallback").execute();, +        assertThat(response.getHeaders().get("Content-Type"), is("application/javascript"));, +        assertThat(response.getBody(), containsString("EnabledJSONPCallback("));, +        assertThat(response.getBody(), containsString("You Know, for Search"));, +++ b/src/test/java/org/elasticsearch/plugin/PluginManagerTests.java, +import org.apache.http.impl.client.HttpClients;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;, +import org.elasticsearch.test.rest.client.http.HttpResponse;, +    private void assertPluginAvailable(String pluginName) throws InterruptedException, IOException {, +        final HttpRequestBuilder httpRequestBuilder = getHttpRequestBuilder();, +                try {, +                    HttpResponse response = httpRequestBuilder.method("GET").path("/").execute();, +                    if (response.getStatusCode() != RestStatus.OK.getStatus()) {, +                        logger.info("--> error caught [{}], headers [{}]", response.getStatusCode(), response.getHeaders());, +                } catch (IOException e) {, +                    throw new ElasticsearchException("HTTP problem", e);, +                }, +        HttpResponse response = getHttpRequestBuilder().method("GET").path("/_plugin/" + pluginName + "/").execute();, +        assertThat(response.getStatusCode(), equalTo(RestStatus.OK.getStatus()));, +    }, +, +    private HttpRequestBuilder getHttpRequestBuilder() {, +        return new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class));, +        assumeTrue(isDownloadServiceWorking("download.elasticsearch.org", 80, "/elasticsearch/ci-test.txt"));, +        assumeTrue(isDownloadServiceWorking("search.maven.org", 80, "/"));, +        assumeTrue(isDownloadServiceWorking("github.com", 443, "/"));, +    private boolean isDownloadServiceWorking(String host, int port, String resource) {, +            String protocol = port == 443 ? "https" : "http";, +            HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).protocol(protocol).host(host).port(port).path(resource).execute();, +            if (response.getStatusCode() != 200) {, +                logger.warn("[{}{}] download service is not working. Disabling current test.", host, resource);, +            logger.warn("[{}{}] download service is not working. Disabling current test.", host, resource);, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +            String redirectUrl = request.rawPath() + "/";]