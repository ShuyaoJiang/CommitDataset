[+++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +    @FunctionalInterface, +    private static final class ThreadContextStruct {, +    private class ContextPreservingRunnable implements Runnable {, +        private ContextPreservingRunnable(Runnable in) {, +    private class ContextPreservingAbstractRunnable extends AbstractRunnable {, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +    @FunctionalInterface, +    private static final class ThreadContextStruct {, +    private class ContextPreservingRunnable implements Runnable {, +        private ContextPreservingRunnable(Runnable in) {, +    private class ContextPreservingAbstractRunnable extends AbstractRunnable {, +++ b/core/src/main/java/org/elasticsearch/search/suggest/DirectSpellcheckerSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +    @FunctionalInterface, +    private static final class ThreadContextStruct {, +    private class ContextPreservingRunnable implements Runnable {, +        private ContextPreservingRunnable(Runnable in) {, +    private class ContextPreservingAbstractRunnable extends AbstractRunnable {, +++ b/core/src/main/java/org/elasticsearch/search/suggest/DirectSpellcheckerSettings.java, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.suggest;, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;, +import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;, +import org.apache.lucene.search.spell.DirectSpellChecker;, +import org.apache.lucene.search.spell.JaroWinklerDistance;, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.search.spell.LuceneLevenshteinDistance;, +import org.apache.lucene.search.spell.NGramDistance;, +import org.apache.lucene.search.spell.StringDistance;, +import org.apache.lucene.search.spell.SuggestMode;, +import org.apache.lucene.search.spell.SuggestWord;, +import org.apache.lucene.search.spell.SuggestWordFrequencyComparator;, +import org.apache.lucene.search.spell.SuggestWordQueue;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.BytesRefBuilder;, +import org.apache.lucene.util.CharsRef;, +import org.apache.lucene.util.CharsRefBuilder;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.FastCharArrayReader;, +import org.elasticsearch.index.analysis.CustomAnalyzer;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.analysis.ShingleTokenFilterFactory;, +import org.elasticsearch.index.analysis.TokenFilterFactory;, +, +import java.io.IOException;, +import java.util.Comparator;, +import java.util.Locale;, +, +public final class SuggestUtils {, +    public static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    public static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +, +    private SuggestUtils() {, +        // utils!!, +    }, +, +    public static DirectSpellChecker getDirectSpellChecker(DirectSpellcheckerSettings suggestion) {, +, +        DirectSpellChecker directSpellChecker = new DirectSpellChecker();, +        directSpellChecker.setAccuracy(suggestion.accuracy());, +        Comparator<SuggestWord> comparator;, +        switch (suggestion.sort()) {, +            case SCORE:, +                comparator = SCORE_COMPARATOR;, +                break;, +            case FREQUENCY:, +                comparator = LUCENE_FREQUENCY;]