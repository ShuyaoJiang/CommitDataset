[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaVendor = System.getProperty('java.vendor'), +            String javaVersion = System.getProperty('java.version'), +            String gradleJavaVersionDetails = "${javaVendor} ${javaVersion}" +, +                javaVendor = findJavaVendor(project, javaHome), +            // this block of code detecting buggy JDK 8 compiler versions can be removed when minimum Java version is incremented, +            assert minimumJava == JavaVersion.VERSION_1_8 : "Remove JDK compiler bug detection only applicable to JDK 8", +            if (javaVersionEnum == JavaVersion.VERSION_1_8) {, +                if (Objects.equals("Oracle Corporation", javaVendor)) {, +                    def matcher = javaVersion =~ /1\.8\.0(?:_(\d+))?/, +                    if (matcher.matches()) {, +                        int update;, +                        if (matcher.group(1) == null) {, +                            update = 0, +                        } else {, +                            update = matcher.group(1).toInteger(), +                        }, +                        if (update < 40) {, +                            throw new GradleException("JDK ${javaVendor} ${javaVersion} has compiler bug JDK-8052388, update your JDK to at least 8u40"), +                        }, +                    }, +                }, +            }, +, +    private static String findJavaVendor(Project project, String javaHome) {, +        String vendorScript = 'print(java.lang.System.getProperty("java.vendor"));', +        return runJavascript(project, javaHome, vendorScript), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaVendor = System.getProperty('java.vendor'), +            String javaVersion = System.getProperty('java.version'), +            String gradleJavaVersionDetails = "${javaVendor} ${javaVersion}" +, +                javaVendor = findJavaVendor(project, javaHome), +            // this block of code detecting buggy JDK 8 compiler versions can be removed when minimum Java version is incremented, +            assert minimumJava == JavaVersion.VERSION_1_8 : "Remove JDK compiler bug detection only applicable to JDK 8", +            if (javaVersionEnum == JavaVersion.VERSION_1_8) {, +                if (Objects.equals("Oracle Corporation", javaVendor)) {, +                    def matcher = javaVersion =~ /1\.8\.0(?:_(\d+))?/, +                    if (matcher.matches()) {, +                        int update;, +                        if (matcher.group(1) == null) {, +                            update = 0, +                        } else {, +                            update = matcher.group(1).toInteger(), +                        }, +                        if (update < 40) {, +                            throw new GradleException("JDK ${javaVendor} ${javaVersion} has compiler bug JDK-8052388, update your JDK to at least 8u40"), +                        }, +                    }, +                }, +            }, +, +    private static String findJavaVendor(Project project, String javaHome) {, +        String vendorScript = 'print(java.lang.System.getProperty("java.vendor"));', +        return runJavascript(project, javaHome, vendorScript), +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import static java.util.Collections.unmodifiableMap;, +    public boolean contains(Class<? extends Throwable> exType) {, +    /**, +     * This is the list of Exceptions Elasticsearch can throw over the wire or save into a corruption marker. Each value in the enum is a, +     * single exception tying the Class to an id for use of the encode side and the id back to a constructor for use on the decode side. As, +     * such its ok if the exceptions to change names so long as their constructor can still read the exception. Each exception is listed, +     * in id order below. If you want to remove an exception leave a tombstone comment and mark the id as null in, +     * ExceptionSerializationTests.testIds.ids., +     */, +        INDEX_SHARD_SNAPSHOT_FAILED_EXCEPTION(org.elasticsearch.index.snapshots.IndexShardSnapshotFailedException.class,, +                org.elasticsearch.index.snapshots.IndexShardSnapshotFailedException::new, 0),, +        DFS_PHASE_EXECUTION_EXCEPTION(org.elasticsearch.search.dfs.DfsPhaseExecutionException.class,, +                org.elasticsearch.search.dfs.DfsPhaseExecutionException::new, 1),, +        EXECUTION_CANCELLED_EXCEPTION(org.elasticsearch.common.util.CancellableThreads.ExecutionCancelledException.class,, +                org.elasticsearch.common.util.CancellableThreads.ExecutionCancelledException::new, 2),, +        MASTER_NOT_DISCOVERED_EXCEPTION(org.elasticsearch.discovery.MasterNotDiscoveredException.class,, +                org.elasticsearch.discovery.MasterNotDiscoveredException::new, 3),, +        ELASTICSEARCH_SECURITY_EXCEPTION(org.elasticsearch.ElasticsearchSecurityException.class,, +                org.elasticsearch.ElasticsearchSecurityException::new, 4),, +        INDEX_SHARD_RESTORE_EXCEPTION(org.elasticsearch.index.snapshots.IndexShardRestoreException.class,, +                org.elasticsearch.index.snapshots.IndexShardRestoreException::new, 5),, +        INDEX_CLOSED_EXCEPTION(org.elasticsearch.indices.IndexClosedException.class,, +                org.elasticsearch.indices.IndexClosedException::new, 6),, +        BIND_HTTP_EXCEPTION(org.elasticsearch.http.BindHttpException.class,, +                org.elasticsearch.http.BindHttpException::new, 7),, +        REDUCE_SEARCH_PHASE_EXCEPTION(org.elasticsearch.action.search.ReduceSearchPhaseException.class,, +                org.elasticsearch.action.search.ReduceSearchPhaseException::new, 8),, +        NODE_CLOSED_EXCEPTION(org.elasticsearch.node.NodeClosedException.class,, +                org.elasticsearch.node.NodeClosedException::new, 9),, +        SNAPSHOT_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.SnapshotFailedEngineException.class,, +                org.elasticsearch.index.engine.SnapshotFailedEngineException::new, 10),, +        SHARD_NOT_FOUND_EXCEPTION(org.elasticsearch.index.shard.ShardNotFoundException.class,, +                org.elasticsearch.index.shard.ShardNotFoundException::new, 11),, +        CONNECT_TRANSPORT_EXCEPTION(org.elasticsearch.transport.ConnectTransportException.class,, +                org.elasticsearch.transport.ConnectTransportException::new, 12),, +        NOT_SERIALIZABLE_TRANSPORT_EXCEPTION(org.elasticsearch.transport.NotSerializableTransportException.class,, +                org.elasticsearch.transport.NotSerializableTransportException::new, 13),, +        RESPONSE_HANDLER_FAILURE_TRANSPORT_EXCEPTION(org.elasticsearch.transport.ResponseHandlerFailureTransportException.class,, +                org.elasticsearch.transport.ResponseHandlerFailureTransportException::new, 14),, +        INDEX_CREATION_EXCEPTION(org.elasticsearch.indices.IndexCreationException.class,, +                org.elasticsearch.indices.IndexCreationException::new, 15),]