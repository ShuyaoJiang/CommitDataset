[+++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/node/NodeStatsCollector.java, +import org.elasticsearch.env.NodeEnvironment;, +    private final NodeEnvironment nodeEnvironment;, +                              NodeService nodeService, DiscoveryService discoveryService, NodeEnvironment nodeEnvironment,, +        this.nodeEnvironment = nodeEnvironment;, +    protected boolean canCollect() {, +        return super.canCollect() && nodeEnvironment.hasNodeFile();, +    }, +, +    @Override, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/node/NodeStatsCollector.java, +import org.elasticsearch.env.NodeEnvironment;, +    private final NodeEnvironment nodeEnvironment;, +                              NodeService nodeService, DiscoveryService discoveryService, NodeEnvironment nodeEnvironment,, +        this.nodeEnvironment = nodeEnvironment;, +    protected boolean canCollect() {, +        return super.canCollect() && nodeEnvironment.hasNodeFile();, +    }, +, +    @Override, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +                .put(MarvelSettings.INTERVAL, "-1"), +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/node/NodeStatsCollector.java, +import org.elasticsearch.env.NodeEnvironment;, +    private final NodeEnvironment nodeEnvironment;, +                              NodeService nodeService, DiscoveryService discoveryService, NodeEnvironment nodeEnvironment,, +        this.nodeEnvironment = nodeEnvironment;, +    protected boolean canCollect() {, +        return super.canCollect() && nodeEnvironment.hasNodeFile();, +    }, +, +    @Override, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +                .put(MarvelSettings.INTERVAL, "-1"), +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterStateCollectorTests.java, +, +        securedFlush();, +        securedRefresh();, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/node/NodeStatsCollector.java, +import org.elasticsearch.env.NodeEnvironment;, +    private final NodeEnvironment nodeEnvironment;, +                              NodeService nodeService, DiscoveryService discoveryService, NodeEnvironment nodeEnvironment,, +        this.nodeEnvironment = nodeEnvironment;, +    protected boolean canCollect() {, +        return super.canCollect() && nodeEnvironment.hasNodeFile();, +    }, +, +    @Override, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +                .put(MarvelSettings.INTERVAL, "-1"), +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterStateCollectorTests.java, +, +        securedFlush();, +        securedRefresh();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/indices/IndexRecoveryCollectorTests.java, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +@ClusterScope(numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0.0), +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/node/NodeStatsCollector.java, +import org.elasticsearch.env.NodeEnvironment;, +    private final NodeEnvironment nodeEnvironment;, +                              NodeService nodeService, DiscoveryService discoveryService, NodeEnvironment nodeEnvironment,, +        this.nodeEnvironment = nodeEnvironment;, +    protected boolean canCollect() {, +        return super.canCollect() && nodeEnvironment.hasNodeFile();, +    }, +, +    @Override, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +                .put(MarvelSettings.INTERVAL, "-1"), +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterStateCollectorTests.java, +, +        securedFlush();, +        securedRefresh();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/indices/IndexRecoveryCollectorTests.java, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +@ClusterScope(numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0.0), +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/node/NodeStatsCollectorTests.java, +import org.elasticsearch.env.NodeEnvironment;, +                internalCluster().getInstance(NodeEnvironment.class, nodeId),, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/node/NodeStatsCollector.java, +import org.elasticsearch.env.NodeEnvironment;, +    private final NodeEnvironment nodeEnvironment;, +                              NodeService nodeService, DiscoveryService discoveryService, NodeEnvironment nodeEnvironment,, +        this.nodeEnvironment = nodeEnvironment;, +    protected boolean canCollect() {, +        return super.canCollect() && nodeEnvironment.hasNodeFile();, +    }, +, +    @Override, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +                .put(MarvelSettings.INTERVAL, "-1"), +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterStateCollectorTests.java, +, +        securedFlush();, +        securedRefresh();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/indices/IndexRecoveryCollectorTests.java, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +@ClusterScope(numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0.0), +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/node/NodeStatsCollectorTests.java, +import org.elasticsearch.env.NodeEnvironment;]