[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/TransportXPackUsageAction.java, +    protected void masterOperation(XPackUsageRequest request, ClusterState state, ActionListener<XPackUsageResponse> listener) {, +                    // the value sent back doesn't matter since our predicate keeps iterating, +                    iteratingListener.onResponse(Collections.emptyList());, +                        threadPool.getThreadContext(), (ignore) -> {, +                }, (ignore) -> true);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/TransportXPackUsageAction.java, +    protected void masterOperation(XPackUsageRequest request, ClusterState state, ActionListener<XPackUsageResponse> listener) {, +                    // the value sent back doesn't matter since our predicate keeps iterating, +                    iteratingListener.onResponse(Collections.emptyList());, +                        threadPool.getThreadContext(), (ignore) -> {, +                }, (ignore) -> true);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/IteratingActionListener.java, +import java.util.Objects;, +import java.util.function.Function;, +import java.util.function.Predicate;, +    private final Function<T, T> finalResultFunction;, +    private final Predicate<T> iterationPredicate;, +        this(delegate, consumer, consumables, threadContext, Function.identity());, +     * @param finalResultFunction a function that maps the response which terminated iteration to a response that will be sent to the, +     *                            delegate listener. This is useful if the delegate listener should receive some other value (perhaps, +     *                            a concatenation of the results of all the called consumables)., +                                   ThreadContext threadContext, Function<T, T> finalResultFunction) {, +        this(delegate, consumer, consumables, threadContext, finalResultFunction, Objects::isNull);, +    }, +, +    /**, +     * Constructs an {@link IteratingActionListener}., +     *, +     * @param delegate the delegate listener to call when all consumables have finished executing, +     * @param consumer the consumer that is executed for each consumable instance, +     * @param consumables the instances that can be consumed to produce a response which is ultimately sent on the delegate listener, +     * @param threadContext the thread context for the thread pool that created the listener, +     * @param finalResultFunction a function that maps the response which terminated iteration to a response that will be sent to the, +     *                            delegate listener. This is useful if the delegate listener should receive some other value (perhaps, +     *                            a concatenation of the results of all the called consumables)., +     * @param iterationPredicate a {@link Predicate} that checks if iteration should continue based on the returned result, +     */, +    public IteratingActionListener(ActionListener<T> delegate, BiConsumer<U, ActionListener<T>> consumer, List<U> consumables,, +                                   ThreadContext threadContext, Function<T, T> finalResultFunction,, +                                   Predicate<T> iterationPredicate) {, +        this.finalResultFunction = finalResultFunction;, +        this.iterationPredicate = iterationPredicate;, +            final boolean continueIteration = iterationPredicate.test(response);, +            if (continueIteration) {, +                    delegate.onResponse(finalResultFunction.apply(response));, +                delegate.onResponse(finalResultFunction.apply(response));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/TransportXPackUsageAction.java, +    protected void masterOperation(XPackUsageRequest request, ClusterState state, ActionListener<XPackUsageResponse> listener) {, +                    // the value sent back doesn't matter since our predicate keeps iterating, +                    iteratingListener.onResponse(Collections.emptyList());, +                        threadPool.getThreadContext(), (ignore) -> {, +                }, (ignore) -> true);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/IteratingActionListener.java, +import java.util.Objects;, +import java.util.function.Function;, +import java.util.function.Predicate;, +    private final Function<T, T> finalResultFunction;, +    private final Predicate<T> iterationPredicate;, +        this(delegate, consumer, consumables, threadContext, Function.identity());, +     * @param finalResultFunction a function that maps the response which terminated iteration to a response that will be sent to the, +     *                            delegate listener. This is useful if the delegate listener should receive some other value (perhaps, +     *                            a concatenation of the results of all the called consumables)., +                                   ThreadContext threadContext, Function<T, T> finalResultFunction) {, +        this(delegate, consumer, consumables, threadContext, finalResultFunction, Objects::isNull);, +    }, +, +    /**, +     * Constructs an {@link IteratingActionListener}., +     *, +     * @param delegate the delegate listener to call when all consumables have finished executing, +     * @param consumer the consumer that is executed for each consumable instance, +     * @param consumables the instances that can be consumed to produce a response which is ultimately sent on the delegate listener, +     * @param threadContext the thread context for the thread pool that created the listener, +     * @param finalResultFunction a function that maps the response which terminated iteration to a response that will be sent to the, +     *                            delegate listener. This is useful if the delegate listener should receive some other value (perhaps, +     *                            a concatenation of the results of all the called consumables)., +     * @param iterationPredicate a {@link Predicate} that checks if iteration should continue based on the returned result, +     */, +    public IteratingActionListener(ActionListener<T> delegate, BiConsumer<U, ActionListener<T>> consumer, List<U> consumables,, +                                   ThreadContext threadContext, Function<T, T> finalResultFunction,, +                                   Predicate<T> iterationPredicate) {, +        this.finalResultFunction = finalResultFunction;, +        this.iterationPredicate = iterationPredicate;, +            final boolean continueIteration = iterationPredicate.test(response);, +            if (continueIteration) {, +                    delegate.onResponse(finalResultFunction.apply(response));, +                delegate.onResponse(finalResultFunction.apply(response));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/SecurityExtension.java, +import org.elasticsearch.xpack.core.security.authz.store.RoleRetrievalResult;, +     * implementation must wrap the set of {@link RoleDescriptor} instances in a, +     * {@link RoleRetrievalResult} using {@link RoleRetrievalResult#success(Set)} and then invoke, +     * {@link ActionListener#onResponse(Object)}.  If a failure was encountered, the, +     * implementation should wrap the failure in a {@link RoleRetrievalResult} using, +     * {@link RoleRetrievalResult#failure(Exception)} and then invoke, +     * {@link ActionListener#onResponse(Object)} unless the failure needs to terminate the request,, +     * in which case the implementation should invoke {@link ActionListener#onFailure(Exception)}., +    default List<BiConsumer<Set<String>, ActionListener<RoleRetrievalResult>>>, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/TransportXPackUsageAction.java, +    protected void masterOperation(XPackUsageRequest request, ClusterState state, ActionListener<XPackUsageResponse> listener) {]