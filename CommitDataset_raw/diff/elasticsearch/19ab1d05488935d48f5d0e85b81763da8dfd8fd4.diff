[+++ b/src/main/java/org/elasticsearch/common/lucene/search/EmptyScorer.java, +import org.apache.lucene.search.Weight;, +    public EmptyScorer(Weight weight) {, +        super(weight);, +    public float freq() throws IOException {, +        return 0;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/lucene/search/EmptyScorer.java, +import org.apache.lucene.search.Weight;, +    public EmptyScorer(Weight weight) {, +        super(weight);, +    public float freq() throws IOException {, +        return 0;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/lucene/search/NoopCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        throw new UnsupportedOperationException();, +++ b/src/main/java/org/elasticsearch/common/lucene/search/EmptyScorer.java, +import org.apache.lucene.search.Weight;, +    public EmptyScorer(Weight weight) {, +        super(weight);, +    public float freq() throws IOException {, +        return 0;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/lucene/search/NoopCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        throw new UnsupportedOperationException();, +++ b/src/main/java/org/elasticsearch/index/cache/id/IdCache.java, +import org.apache.lucene.index.AtomicReader;, +    IdReaderCache reader(AtomicReader reader);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/EmptyScorer.java, +import org.apache.lucene.search.Weight;, +    public EmptyScorer(Weight weight) {, +        super(weight);, +    public float freq() throws IOException {, +        return 0;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/lucene/search/NoopCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        throw new UnsupportedOperationException();, +++ b/src/main/java/org/elasticsearch/index/cache/id/IdCache.java, +import org.apache.lucene.index.AtomicReader;, +    IdReaderCache reader(AtomicReader reader);, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +    public IdReaderCache reader(AtomicReader reader) {, +                Map<Object, Map<String, TypeBuilder>> builders = new HashMap<Object, Map<String, TypeBuilder>>();, +                    Map<String, TypeBuilder> readerBuilder = new HashMap<String, TypeBuilder>();, +                        TypeBuilder typeBuilder = readerBuilder.get(typeAndId[0].toUtf8());, +                            readerBuilder.put(typeAndId[0].toUtf8(), typeBuilder);, +                    Map<String, TypeBuilder> readerBuilder = builders.get(reader.getCoreCacheKey());, +                        TypeBuilder typeBuilder = readerBuilder.get(typeAndId[0].toUtf8());, +                            readerBuilder.put(typeAndId[0].toUtf8(), typeBuilder);, +                for (Map.Entry<Object, Map<String, TypeBuilder>> entry : builders.entrySet()) {, +                    MapBuilder<String, SimpleIdReaderTypeCache> types = MapBuilder.newMapBuilder();, +                    for (Map.Entry<String, TypeBuilder> typeBuilderEntry : entry.getValue().entrySet()) {, +    private HashedBytesArray checkIfCanReuse(Map<Object, Map<String, TypeBuilder>> builders, HashedBytesArray idAsBytes) {, +        for (Map<String, TypeBuilder> map : builders.values()) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/EmptyScorer.java, +import org.apache.lucene.search.Weight;, +    public EmptyScorer(Weight weight) {, +        super(weight);, +    public float freq() throws IOException {, +        return 0;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/lucene/search/NoopCollector.java, +import org.apache.lucene.index.AtomicReaderContext;, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        throw new UnsupportedOperationException();, +++ b/src/main/java/org/elasticsearch/index/cache/id/IdCache.java, +import org.apache.lucene.index.AtomicReader;, +    IdReaderCache reader(AtomicReader reader);, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +    public IdReaderCache reader(AtomicReader reader) {, +                Map<Object, Map<String, TypeBuilder>> builders = new HashMap<Object, Map<String, TypeBuilder>>();, +                    Map<String, TypeBuilder> readerBuilder = new HashMap<String, TypeBuilder>();, +                        TypeBuilder typeBuilder = readerBuilder.get(typeAndId[0].toUtf8());, +                            readerBuilder.put(typeAndId[0].toUtf8(), typeBuilder);, +                    Map<String, TypeBuilder> readerBuilder = builders.get(reader.getCoreCacheKey());, +                        TypeBuilder typeBuilder = readerBuilder.get(typeAndId[0].toUtf8());, +                            readerBuilder.put(typeAndId[0].toUtf8(), typeBuilder);, +                for (Map.Entry<Object, Map<String, TypeBuilder>> entry : builders.entrySet()) {, +                    MapBuilder<String, SimpleIdReaderTypeCache> types = MapBuilder.newMapBuilder();, +                    for (Map.Entry<String, TypeBuilder> typeBuilderEntry : entry.getValue().entrySet()) {, +    private HashedBytesArray checkIfCanReuse(Map<Object, Map<String, TypeBuilder>> builders, HashedBytesArray idAsBytes) {, +        for (Map<String, TypeBuilder> map : builders.values()) {, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdReaderCache.java, +    private final ImmutableMap<String, SimpleIdReaderTypeCache> types;]