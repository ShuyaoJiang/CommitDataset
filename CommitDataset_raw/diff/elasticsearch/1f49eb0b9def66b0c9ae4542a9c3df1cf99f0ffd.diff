[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/GatewayService.java, +    private final int expectedNodes;, +    private final int expectedDataNodes;, +    private final int expectedMasterNodes;, +    private final AtomicBoolean recovered = new AtomicBoolean();, +    private final AtomicBoolean scheduledRecovery = new AtomicBoolean();, +        this.expectedNodes = componentSettings.getAsInt("expected_nodes", -1);, +        this.expectedDataNodes = componentSettings.getAsInt("expected__data_nodes", -1);, +        this.expectedMasterNodes = componentSettings.getAsInt("expected__master_nodes", -1);, +                    boolean ignoreTimeout;, +                    if (expectedNodes == -1 && expectedMasterNodes == -1 && expectedDataNodes == -1) {, +                        // no expected is set, don't ignore the timeout, +                        ignoreTimeout = false;, +                    } else {, +                        // one of the expected is set, see if all of them meet the need, and ignore the timeout in this case, +                        ignoreTimeout = true;, +                        if (expectedNodes != -1 && (nodes.masterAndDataNodes().size() < expectedNodes)) { // does not meet the expected..., +                            ignoreTimeout = false;, +                        }, +                        if (expectedMasterNodes != -1 && (nodes.masterNodes().size() < expectedMasterNodes)) { // does not meet the expected..., +                            ignoreTimeout = false;, +                        }, +                        if (expectedDataNodes != -1 && (nodes.dataNodes().size() < expectedDataNodes)) { // does not meet the expected..., +                            ignoreTimeout = false;, +                        }, +                    }, +                    final boolean fIgnoreTimeout = ignoreTimeout;, +                            performStateRecovery(null, fIgnoreTimeout);, +        performStateRecovery(null, false);, +    }, +, +    private void performStateRecovery(@Nullable TimeValue timeout, boolean ignoreTimeout) {, +        if (!ignoreTimeout && recoverAfterTime != null) {, +            if (scheduledRecovery.compareAndSet(false, true)) {, +                        if (recovered.compareAndSet(false, true)) {, +                    }, +            }, +            if (recovered.compareAndSet(false, true)) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/GatewayService.java, +    private final int expectedNodes;, +    private final int expectedDataNodes;, +    private final int expectedMasterNodes;, +    private final AtomicBoolean recovered = new AtomicBoolean();, +    private final AtomicBoolean scheduledRecovery = new AtomicBoolean();, +        this.expectedNodes = componentSettings.getAsInt("expected_nodes", -1);, +        this.expectedDataNodes = componentSettings.getAsInt("expected__data_nodes", -1);, +        this.expectedMasterNodes = componentSettings.getAsInt("expected__master_nodes", -1);, +                    boolean ignoreTimeout;, +                    if (expectedNodes == -1 && expectedMasterNodes == -1 && expectedDataNodes == -1) {, +                        // no expected is set, don't ignore the timeout, +                        ignoreTimeout = false;, +                    } else {, +                        // one of the expected is set, see if all of them meet the need, and ignore the timeout in this case, +                        ignoreTimeout = true;, +                        if (expectedNodes != -1 && (nodes.masterAndDataNodes().size() < expectedNodes)) { // does not meet the expected..., +                            ignoreTimeout = false;, +                        }, +                        if (expectedMasterNodes != -1 && (nodes.masterNodes().size() < expectedMasterNodes)) { // does not meet the expected..., +                            ignoreTimeout = false;, +                        }, +                        if (expectedDataNodes != -1 && (nodes.dataNodes().size() < expectedDataNodes)) { // does not meet the expected..., +                            ignoreTimeout = false;, +                        }, +                    }, +                    final boolean fIgnoreTimeout = ignoreTimeout;, +                            performStateRecovery(null, fIgnoreTimeout);, +        performStateRecovery(null, false);, +    }, +, +    private void performStateRecovery(@Nullable TimeValue timeout, boolean ignoreTimeout) {, +        if (!ignoreTimeout && recoverAfterTime != null) {, +            if (scheduledRecovery.compareAndSet(false, true)) {, +                        if (recovered.compareAndSet(false, true)) {, +                    }, +            }, +            if (recovered.compareAndSet(false, true)) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/none/NoneGateway.java, +        logger.debug("performing state recovery");]