[+++ b/src/main/java/org/elasticsearch/script/groovy/GroovySandboxExpressionChecker.java, +import org.codehaus.groovy.ast.expr.GStringExpression;, +            String methodName = mce.getMethodAsString();, +            if (methodBlacklist.contains(methodName)) {, +                return false;, +            } else if (methodName == null && mce.getMethod() instanceof GStringExpression) {, +                // We do not allow GStrings for method invocation, they are a security risk, +++ b/src/main/java/org/elasticsearch/script/groovy/GroovySandboxExpressionChecker.java, +import org.codehaus.groovy.ast.expr.GStringExpression;, +            String methodName = mce.getMethodAsString();, +            if (methodBlacklist.contains(methodName)) {, +                return false;, +            } else if (methodName == null && mce.getMethod() instanceof GStringExpression) {, +                // We do not allow GStrings for method invocation, they are a security risk, +++ b/src/test/java/org/elasticsearch/script/GroovySandboxScriptTests.java, +        testFailure("d = new DateTime(); d.\\\"${'get' + 'Class'}\\\"()." +, +                        "\\\"${'getDeclared' + 'Method'}\\\"(\\\"now\\\").\\\"${'set' + 'Accessible'}\\\"(false)",, +                "Expression [MethodCallExpression] is not allowed: d.$(get + Class)().$(getDeclared + Method)(now).$(set + Accessible)(false)");, +, +, +        testFailure("def methodName = 'ex'; Runtime.\\\"${'get' + 'Runtime'}\\\"().\\\"${methodName}ec\\\"(\\\"touch /tmp/gotcha2\\\")",, +                "Expression [MethodCallExpression] is not allowed: java.lang.Runtime.$(get + Runtime)().$methodNameec(touch /tmp/gotcha2)");]