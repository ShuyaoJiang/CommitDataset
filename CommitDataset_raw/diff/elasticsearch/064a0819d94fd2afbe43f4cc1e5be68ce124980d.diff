[+++ /dev/null, +++ /dev/null, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/support/xcontent/WatcherXContentParser.java, +import org.joda.time.DateTime;, +    private final DateTime parseTime;, +    public WatcherXContentParser(XContentParser parser, DateTime parseTime, @Nullable CryptoService cryptoService) {, +        this.parseTime = parseTime;, +    public DateTime getParseDateTime() { return parseTime; }, +++ /dev/null, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/support/xcontent/WatcherXContentParser.java, +import org.joda.time.DateTime;, +    private final DateTime parseTime;, +    public WatcherXContentParser(XContentParser parser, DateTime parseTime, @Nullable CryptoService cryptoService) {, +        this.parseTime = parseTime;, +    public DateTime getParseDateTime() { return parseTime; }, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/watch/WatchStatus.java, +    public static WatchStatus parse(String watchId, WatcherXContentParser parser) throws IOException {, +                    state = State.parse(parser);, +            state = new State(true, parser.getParseDateTime());, +        public static State parse(XContentParser parser) throws IOException {, +            DateTime timestamp = DateTime.now(UTC);, +++ /dev/null, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/support/xcontent/WatcherXContentParser.java, +import org.joda.time.DateTime;, +    private final DateTime parseTime;, +    public WatcherXContentParser(XContentParser parser, DateTime parseTime, @Nullable CryptoService cryptoService) {, +        this.parseTime = parseTime;, +    public DateTime getParseDateTime() { return parseTime; }, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/watch/WatchStatus.java, +    public static WatchStatus parse(String watchId, WatcherXContentParser parser) throws IOException {, +                    state = State.parse(parser);, +            state = new State(true, parser.getParseDateTime());, +        public static State parse(XContentParser parser) throws IOException {, +            DateTime timestamp = DateTime.now(UTC);, +++ b/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutRequestMessageBuilderTests.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +        Clock fixedClock = Clock.fixed(Instant.now(), ZoneOffset.UTC);, +        final SamlLogoutRequestMessageBuilder builder = new SamlLogoutRequestMessageBuilder(fixedClock, sp, idp, nameId, session);, +        assertThat(logoutRequest.getIssueInstant().getMillis(), equalTo(fixedClock.millis()));, +++ /dev/null, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/support/xcontent/WatcherXContentParser.java, +import org.joda.time.DateTime;, +    private final DateTime parseTime;, +    public WatcherXContentParser(XContentParser parser, DateTime parseTime, @Nullable CryptoService cryptoService) {, +        this.parseTime = parseTime;, +    public DateTime getParseDateTime() { return parseTime; }, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/watch/WatchStatus.java, +    public static WatchStatus parse(String watchId, WatcherXContentParser parser) throws IOException {, +                    state = State.parse(parser);, +            state = new State(true, parser.getParseDateTime());, +        public static State parse(XContentParser parser) throws IOException {, +            DateTime timestamp = DateTime.now(UTC);, +++ b/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutRequestMessageBuilderTests.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +        Clock fixedClock = Clock.fixed(Instant.now(), ZoneOffset.UTC);, +        final SamlLogoutRequestMessageBuilder builder = new SamlLogoutRequestMessageBuilder(fixedClock, sp, idp, nameId, session);, +        assertThat(logoutRequest.getIssueInstant().getMillis(), equalTo(fixedClock.millis()));, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/watch/WatchParser.java, +    private final Clock clock;, +        this.clock = clock;, +        try (WatcherXContentParser parser = new WatcherXContentParser(xContentType.xContent().createParser(NamedXContentRegistry.EMPTY,, +                    source), now, withSecrets ? cryptoService : null)) {, +    public Watch parse(String id, boolean includeStatus, WatcherXContentParser parser) throws IOException {, +                    status = WatchStatus.parse(id, parser);, +                actionsStatuses.put(action.id(), new ActionStatus(parser.getParseDateTime()));, +            status = new WatchStatus(parser.getParseDateTime(), unmodifiableMap(actionsStatuses));, +++ /dev/null, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/support/xcontent/WatcherXContentParser.java, +import org.joda.time.DateTime;, +    private final DateTime parseTime;, +    public WatcherXContentParser(XContentParser parser, DateTime parseTime, @Nullable CryptoService cryptoService) {, +        this.parseTime = parseTime;, +    public DateTime getParseDateTime() { return parseTime; }, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/watch/WatchStatus.java, +    public static WatchStatus parse(String watchId, WatcherXContentParser parser) throws IOException {, +                    state = State.parse(parser);, +            state = new State(true, parser.getParseDateTime());, +        public static State parse(XContentParser parser) throws IOException {, +            DateTime timestamp = DateTime.now(UTC);, +++ b/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlLogoutRequestMessageBuilderTests.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +        Clock fixedClock = Clock.fixed(Instant.now(), ZoneOffset.UTC);, +        final SamlLogoutRequestMessageBuilder builder = new SamlLogoutRequestMessageBuilder(fixedClock, sp, idp, nameId, session);, +        assertThat(logoutRequest.getIssueInstant().getMillis(), equalTo(fixedClock.millis()));, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/watch/WatchParser.java, +    private final Clock clock;, +        this.clock = clock;, +        try (WatcherXContentParser parser = new WatcherXContentParser(xContentType.xContent().createParser(NamedXContentRegistry.EMPTY,, +                    source), now, withSecrets ? cryptoService : null)) {, +    public Watch parse(String id, boolean includeStatus, WatcherXContentParser parser) throws IOException {, +                    status = WatchStatus.parse(id, parser);, +                actionsStatuses.put(action.id(), new ActionStatus(parser.getParseDateTime()));, +            status = new WatchStatus(parser.getParseDateTime(), unmodifiableMap(actionsStatuses));, +++ b/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/watch/WatchTests.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +        Clock clock = Clock.fixed(Instant.now(), ZoneOffset.UTC);]