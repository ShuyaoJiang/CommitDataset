[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/arithmetic/Neg.java, +public class Neg extends UnaryScalarFunction {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/arithmetic/Neg.java, +public class Neg extends UnaryScalarFunction {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/In.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.ScalarFunction;, +public class In extends ScalarFunction {, +        super(location, CollectionUtils.combine(list, value));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/arithmetic/Neg.java, +public class Neg extends UnaryScalarFunction {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/In.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.ScalarFunction;, +public class In extends ScalarFunction {, +        super(location, CollectionUtils.combine(list, value));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +import org.elasticsearch.xpack.sql.expression.predicate.nulls.IsNull;, +import java.util.function.Supplier;, +                query = handleQuery(not, not.field(),, +                    () -> new NotQuery(not.location(), toQuery(not.field(), false).query));, +                query = handleQuery(isNotNull, isNotNull.field(),, +                    () -> new ExistsQuery(isNotNull.location(), nameOf(isNotNull.field())));, +                query = handleQuery(isNull, isNull.field(),, +                    () -> new NotQuery(isNull.location(), new ExistsQuery(isNull.location(), nameOf(isNull.field()))));, +                    query = handleQuery(bc, ne, () -> translateQuery(bc));, +                    aggFilter = new AggFilter(at.id().toString(), in.asScript());, +                    query = handleQuery(in, ne, () -> new TermsQuery(in.location(), ne.name(), in.list()));, +                    query = handleQuery(r, r.value(),, +                        () -> new RangeQuery(r.location(), nameOf(r.value()), valueOf(r.lower()), r.includeLower(),, +                            valueOf(r.upper()), r.includeUpper(), dateFormat(r.value())));, +, +        protected static Query handleQuery(ScalarFunction sf, Expression field, Supplier<Query> query) {, +            if (field instanceof FieldAttribute) {, +                return wrapIfNested(query.get(), field);, +            }, +            return new ScriptQuery(sf.location(), sf.asScript());, +        }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/arithmetic/Neg.java, +public class Neg extends UnaryScalarFunction {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/In.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.ScalarFunction;, +public class In extends ScalarFunction {, +        super(location, CollectionUtils.combine(list, value));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +import org.elasticsearch.xpack.sql.expression.predicate.nulls.IsNull;, +import java.util.function.Supplier;, +                query = handleQuery(not, not.field(),, +                    () -> new NotQuery(not.location(), toQuery(not.field(), false).query));, +                query = handleQuery(isNotNull, isNotNull.field(),, +                    () -> new ExistsQuery(isNotNull.location(), nameOf(isNotNull.field())));, +                query = handleQuery(isNull, isNull.field(),, +                    () -> new NotQuery(isNull.location(), new ExistsQuery(isNull.location(), nameOf(isNull.field()))));, +                    query = handleQuery(bc, ne, () -> translateQuery(bc));, +                    aggFilter = new AggFilter(at.id().toString(), in.asScript());, +                    query = handleQuery(in, ne, () -> new TermsQuery(in.location(), ne.name(), in.list()));, +                    query = handleQuery(r, r.value(),, +                        () -> new RangeQuery(r.location(), nameOf(r.value()), valueOf(r.lower()), r.includeLower(),, +                            valueOf(r.upper()), r.includeUpper(), dateFormat(r.value())));, +, +        protected static Query handleQuery(ScalarFunction sf, Expression field, Supplier<Query> query) {, +            if (field instanceof FieldAttribute) {, +                return wrapIfNested(query.get(), field);, +            }, +            return new ScriptQuery(sf.location(), sf.asScript());, +        }, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +    public void testTranslateNotExpression_WhereClause_Painless() {, +        LogicalPlan p = plan("SELECT * FROM test WHERE NOT(POSITION('x', keyword) = 0)");, +        assertTrue(p instanceof Project);, +        assertTrue(p.children().get(0) instanceof Filter);, +        Expression condition = ((Filter) p.children().get(0)).condition();, +        assertFalse(condition.foldable());, +        QueryTranslation translation = QueryTranslator.toQuery(condition, false);, +        assertTrue(translation.query instanceof ScriptQuery);, +        ScriptQuery sc = (ScriptQuery) translation.query;, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.not(" +, +            "InternalSqlScriptUtils.eq(InternalSqlScriptUtils.position(" +, +            "params.v0,InternalSqlScriptUtils.docValue(doc,params.v1)),params.v2)))",, +            sc.script().toString());, +        assertEquals("[{v=x}, {v=keyword}, {v=0}]", sc.script().params().toString());, +    }, +, +    public void testTranslateIsNullExpression_WhereClause_Painless() {, +        LogicalPlan p = plan("SELECT * FROM test WHERE POSITION('x', keyword) IS NULL");, +        assertTrue(p instanceof Project);, +        assertTrue(p.children().get(0) instanceof Filter);, +        Expression condition = ((Filter) p.children().get(0)).condition();, +        assertFalse(condition.foldable());, +        QueryTranslation translation = QueryTranslator.toQuery(condition, false);, +        assertTrue(translation.query instanceof ScriptQuery);, +        ScriptQuery sc = (ScriptQuery) translation.query;, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.isNull(" +, +            "InternalSqlScriptUtils.position(params.v0,InternalSqlScriptUtils.docValue(doc,params.v1))))",, +            sc.script().toString());, +        assertEquals("[{v=x}, {v=keyword}]", sc.script().params().toString());, +    }, +, +    public void testTranslateIsNotNullExpression_WhereClause_Painless() {, +        LogicalPlan p = plan("SELECT * FROM test WHERE POSITION('x', keyword) IS NOT NULL");]