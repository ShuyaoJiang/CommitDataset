[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +    private final transient ImmutableList<ShardRouting> asList;, +, +    ImmutableShardRouting() {, +        this.asList = ImmutableList.of((ShardRouting) this);, +    public ImmutableShardRouting(String index, int shardId, String currentNodeId,, +                                 String relocatingNodeId, boolean primary, ShardRoutingState state) {, +        this(index, shardId, currentNodeId, primary, state);, +        this.relocatingNodeId = relocatingNodeId;, +    }, +, +        this.asList = ImmutableList.of((ShardRouting) this);, +        return new PlainShardIterator(shardId(), asList);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +    private final transient ImmutableList<ShardRouting> asList;, +, +    ImmutableShardRouting() {, +        this.asList = ImmutableList.of((ShardRouting) this);, +    public ImmutableShardRouting(String index, int shardId, String currentNodeId,, +                                 String relocatingNodeId, boolean primary, ShardRoutingState state) {, +        this(index, shardId, currentNodeId, primary, state);, +        this.relocatingNodeId = relocatingNodeId;, +    }, +, +        this.asList = ImmutableList.of((ShardRouting) this);, +        return new PlainShardIterator(shardId(), asList);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +        return new IndexShardIterator(Math.abs(nextCounter()));, +    ShardRouting shardModulo(int counter) {, +        return shards.get((counter % size()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +    private final transient ImmutableList<ShardRouting> asList;, +, +    ImmutableShardRouting() {, +        this.asList = ImmutableList.of((ShardRouting) this);, +    public ImmutableShardRouting(String index, int shardId, String currentNodeId,, +                                 String relocatingNodeId, boolean primary, ShardRoutingState state) {, +        this(index, shardId, currentNodeId, primary, state);, +        this.relocatingNodeId = relocatingNodeId;, +    }, +, +        this.asList = ImmutableList.of((ShardRouting) this);, +        return new PlainShardIterator(shardId(), asList);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +        return new IndexShardIterator(Math.abs(nextCounter()));, +    ShardRouting shardModulo(int counter) {, +        return shards.get((counter % size()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +    private final transient ImmutableList<ShardRouting> asList;, +, +    ImmutableShardRouting() {, +        this.asList = ImmutableList.of((ShardRouting) this);, +    public ImmutableShardRouting(String index, int shardId, String currentNodeId,, +                                 String relocatingNodeId, boolean primary, ShardRoutingState state) {, +        this(index, shardId, currentNodeId, primary, state);, +        this.relocatingNodeId = relocatingNodeId;, +    }, +, +        this.asList = ImmutableList.of((ShardRouting) this);, +        return new PlainShardIterator(shardId(), asList);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +        return new IndexShardIterator(Math.abs(nextCounter()));, +    ShardRouting shardModulo(int counter) {, +        return shards.get((counter % size()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java, +public class PlainShardIterator extends PlainShardsIterator implements ShardIterator {, +        super(shards);, +        super.reset();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +    private final transient ImmutableList<ShardRouting> asList;, +, +    ImmutableShardRouting() {, +        this.asList = ImmutableList.of((ShardRouting) this);, +    public ImmutableShardRouting(String index, int shardId, String currentNodeId,, +                                 String relocatingNodeId, boolean primary, ShardRoutingState state) {, +        this(index, shardId, currentNodeId, primary, state);, +        this.relocatingNodeId = relocatingNodeId;, +    }, +, +        this.asList = ImmutableList.of((ShardRouting) this);, +        return new PlainShardIterator(shardId(), asList);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +        return new IndexShardIterator(Math.abs(nextCounter()));, +    ShardRouting shardModulo(int counter) {, +        return shards.get((counter % size()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java, +public class PlainShardIterator extends PlainShardsIterator implements ShardIterator {, +        super(shards);, +        super.reset();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/PlainShardsIterator.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance]