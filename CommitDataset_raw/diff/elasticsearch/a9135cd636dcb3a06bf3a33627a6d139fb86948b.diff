[+++ b/core/src/main/java/org/elasticsearch/index/query/RangeQueryBuilder.java, +            if (from != null || to != null || format != null || timeZone != null) {, +                newRangeQuery.format = null;, +                newRangeQuery.timeZone = null;, +++ b/core/src/main/java/org/elasticsearch/index/query/RangeQueryBuilder.java, +            if (from != null || to != null || format != null || timeZone != null) {, +                newRangeQuery.format = null;, +                newRangeQuery.timeZone = null;, +++ b/core/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java, +, +    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {, +        String fieldName = randomAsciiOfLengthBetween(1, 20);, +        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {, +            @Override, +            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) throws IOException {, +                return Relation.WITHIN;, +            }, +        };, +        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());, +        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());, +        query.from(queryFromValue);, +        query.to(queryToValue);, +        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));, +        query.format("yyyy-MM-dd");, +        QueryShardContext queryShardContext = createShardContext();, +        QueryBuilder rewritten = query.rewrite(queryShardContext);, +        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));, +        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;, +        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));, +        assertThat(rewrittenRange.from(), equalTo(null));, +        assertThat(rewrittenRange.to(), equalTo(null));, +        assertThat(rewrittenRange.timeZone(), equalTo(null));, +        assertThat(rewrittenRange.format(), equalTo(null));, +    }, +]