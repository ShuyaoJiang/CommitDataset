[+++ b/server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            Objects.equals(nullValueAsString, fieldType.nullValueAsString) &&, +            Objects.equals(similarity, fieldType.similarity);, +++ b/server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            Objects.equals(nullValueAsString, fieldType.nullValueAsString) &&, +            Objects.equals(similarity, fieldType.similarity);, +++ b/server/src/main/java/org/elasticsearch/index/similarity/SimilarityProvider.java, +import java.util.Objects;, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        SimilarityProvider that = (SimilarityProvider) o;, +        /**, +         * We check <code>name</code> only because the <code>similarity</code> is, +         * re-created for each new instance and they don't implement equals., +         * This is not entirely correct though but we only use equality checks, +         * for similarities inside the same index and names are unique in this case., +         **/, +        return Objects.equals(name, that.name);, +    }, +, +    @Override, +    public int hashCode() {, +        /**, +         * We use <code>name</code> only because the <code>similarity</code> is, +         * re-created for each new instance and they don't implement equals., +         * This is not entirely correct though but we only use equality checks, +         * for similarities a single index and names are unique in this case., +         **/, +        return Objects.hash(name);, +    }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            Objects.equals(nullValueAsString, fieldType.nullValueAsString) &&, +            Objects.equals(similarity, fieldType.similarity);, +++ b/server/src/main/java/org/elasticsearch/index/similarity/SimilarityProvider.java, +import java.util.Objects;, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        SimilarityProvider that = (SimilarityProvider) o;, +        /**, +         * We check <code>name</code> only because the <code>similarity</code> is, +         * re-created for each new instance and they don't implement equals., +         * This is not entirely correct though but we only use equality checks, +         * for similarities inside the same index and names are unique in this case., +         **/, +        return Objects.equals(name, that.name);, +    }, +, +    @Override, +    public int hashCode() {, +        /**, +         * We use <code>name</code> only because the <code>similarity</code> is, +         * re-created for each new instance and they don't implement equals., +         * This is not entirely correct though but we only use equality checks, +         * for similarities a single index and names are unique in this case., +         **/, +        return Objects.hash(name);, +    }, +++ b/test/framework/src/main/java/org/elasticsearch/index/mapper/FieldTypeTestCase.java, +        // check that we can update if the analyzer is unchanged, +        new Modifier("analyzer", true) {, +            @Override, +            public void modify(MappedFieldType ft) {, +                ft.setIndexAnalyzer(new NamedAnalyzer("foo", AnalyzerScope.INDEX, new StandardAnalyzer()));, +            }, +            @Override, +            public void normalizeOther(MappedFieldType other) {, +                other.setIndexAnalyzer(new NamedAnalyzer("foo", AnalyzerScope.INDEX, new StandardAnalyzer()));, +            }, +        },, +        // check that we can update if the similarity is unchanged, +        new Modifier("similarity", true) {, +            @Override, +            public void modify(MappedFieldType ft) {, +                ft.setSimilarity(new SimilarityProvider("foo", new BM25Similarity()));, +            }, +            @Override, +            public void normalizeOther(MappedFieldType other) {, +                other.setSimilarity(new SimilarityProvider("foo", new BM25Similarity()));, +            }, +        },]