[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/bulk/TransportBulkShardOperationsAction.java, +        if (logger.isTraceEnabled()) {, +            logger.trace("index [{}] on the following primary shard {}", request.getOperations(), primary.routingEntry());, +        }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("operation [{}] was processed before on following primary shard {} with existing term {}",, +                            targetOp, primary.routingEntry(), failure.getExistingPrimaryTerm());, +                    }, +        if (logger.isTraceEnabled()) {, +            logger.trace("index [{}] on the following replica shard {}", request.getOperations(), replica.routingEntry());, +        }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/bulk/TransportBulkShardOperationsAction.java, +        if (logger.isTraceEnabled()) {, +            logger.trace("index [{}] on the following primary shard {}", request.getOperations(), primary.routingEntry());, +        }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("operation [{}] was processed before on following primary shard {} with existing term {}",, +                            targetOp, primary.routingEntry(), failure.getExistingPrimaryTerm());, +                    }, +        if (logger.isTraceEnabled()) {, +            logger.trace("index [{}] on the following replica shard {}", request.getOperations(), replica.routingEntry());, +        }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/index/engine/FollowingEngine.java, +            if (logger.isTraceEnabled()) {, +                logger.trace("index operation [id={} seq_no={} origin={}] was processed before", index.id(), index.seqNo(), index.origin());, +            }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/bulk/TransportBulkShardOperationsAction.java, +        if (logger.isTraceEnabled()) {, +            logger.trace("index [{}] on the following primary shard {}", request.getOperations(), primary.routingEntry());, +        }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("operation [{}] was processed before on following primary shard {} with existing term {}",, +                            targetOp, primary.routingEntry(), failure.getExistingPrimaryTerm());, +                    }, +        if (logger.isTraceEnabled()) {, +            logger.trace("index [{}] on the following replica shard {}", request.getOperations(), replica.routingEntry());, +        }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/index/engine/FollowingEngine.java, +            if (logger.isTraceEnabled()) {, +                logger.trace("index operation [id={} seq_no={} origin={}] was processed before", index.id(), index.seqNo(), index.origin());, +            }, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +        logger.info("--> asserting <<docId,seqNo>> between {} and {}", leaderIndex, followerIndex);, +        assertBusy(() -> {, +            Map<Integer, List<DocIdSeqNoAndTerm>> docsOnFollower = getDocIdAndSeqNos(clusterGroup.followerCluster, followerIndex);, +            logger.info("--> docs on the follower {}", docsOnFollower);, +            assertThat(docsOnFollower, equalTo(getDocIdAndSeqNos(clusterGroup.leaderCluster, leaderIndex)));, +        }, 120, TimeUnit.SECONDS);, +, +            assertThat(followerStats, equalTo(leaderStats));, +        }, 120, TimeUnit.SECONDS);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/bulk/TransportBulkShardOperationsAction.java, +        if (logger.isTraceEnabled()) {, +            logger.trace("index [{}] on the following primary shard {}", request.getOperations(), primary.routingEntry());, +        }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("operation [{}] was processed before on following primary shard {} with existing term {}",, +                            targetOp, primary.routingEntry(), failure.getExistingPrimaryTerm());, +                    }, +        if (logger.isTraceEnabled()) {, +            logger.trace("index [{}] on the following replica shard {}", request.getOperations(), replica.routingEntry());, +        }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/index/engine/FollowingEngine.java, +            if (logger.isTraceEnabled()) {, +                logger.trace("index operation [id={} seq_no={} origin={}] was processed before", index.id(), index.seqNo(), index.origin());, +            }, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +        logger.info("--> asserting <<docId,seqNo>> between {} and {}", leaderIndex, followerIndex);, +        assertBusy(() -> {, +            Map<Integer, List<DocIdSeqNoAndTerm>> docsOnFollower = getDocIdAndSeqNos(clusterGroup.followerCluster, followerIndex);, +            logger.info("--> docs on the follower {}", docsOnFollower);, +            assertThat(docsOnFollower, equalTo(getDocIdAndSeqNos(clusterGroup.leaderCluster, leaderIndex)));, +        }, 120, TimeUnit.SECONDS);, +, +            assertThat(followerStats, equalTo(leaderStats));, +        }, 120, TimeUnit.SECONDS);, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/FollowerFailOverIT.java, +import org.elasticsearch.test.junit.annotations.TestLogging;, +@TestLogging("org.elasticsearch.xpack.ccr:TRACE,org.elasticsearch.index.shard:DEBUG")]