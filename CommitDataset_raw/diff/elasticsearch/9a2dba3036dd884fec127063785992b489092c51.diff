[+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4BadRequestIT.java, +        final ObjectPath objectPath = ObjectPath.createFromResponse(response);, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4BadRequestIT.java, +        final ObjectPath objectPath = ObjectPath.createFromResponse(response);, +++ b/qa/backwards-5.0/src/test/java/org/elasticsearch/backwards/IndexingIT.java, +        final int actualCount = Integer.parseInt(ObjectPath.createFromResponse(response).evaluate("count").toString());, +        final int actualVersion = Integer.parseInt(ObjectPath.createFromResponse(response).evaluate("_version").toString());, +        List<Object> shardStats = ObjectPath.createFromResponse(response).evaluate("indices.test.shards.0");, +        ObjectPath objectPath = ObjectPath.createFromResponse(response);, +        nodes.setMasterNodeId(ObjectPath.createFromResponse(response).evaluate("master_node"));, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4BadRequestIT.java, +        final ObjectPath objectPath = ObjectPath.createFromResponse(response);, +++ b/qa/backwards-5.0/src/test/java/org/elasticsearch/backwards/IndexingIT.java, +        final int actualCount = Integer.parseInt(ObjectPath.createFromResponse(response).evaluate("count").toString());, +        final int actualVersion = Integer.parseInt(ObjectPath.createFromResponse(response).evaluate("_version").toString());, +        List<Object> shardStats = ObjectPath.createFromResponse(response).evaluate("indices.test.shards.0");, +        ObjectPath objectPath = ObjectPath.createFromResponse(response);, +        nodes.setMasterNodeId(ObjectPath.createFromResponse(response).evaluate("master_node"));, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import java.io.UncheckedIOException;, +    private final byte[] body;, +    private final XContentType bodyContentType;, +    private String bodyAsString;, +            String contentType = response.getHeader("Content-Type");, +            this.bodyContentType = XContentType.fromMediaTypeOrFormat(contentType);, +                byte[] bytes = EntityUtils.toByteArray(response.getEntity());, +                //skip parsing if we got text back (e.g. if we called _cat apis), +                if (bodyContentType != null) {, +                    this.parsedResponse = ObjectPath.createFromXContent(bodyContentType.xContent(), new BytesArray(bytes));, +                }, +                this.body = bytes;, +                throw e;, +            this.bodyContentType = null;, +        //we only get here if there is no response body or the body is text, +        assert bodyContentType == null;, +        return getBodyAsString();, +        if (bodyAsString == null && body != null) {, +            //content-type null means that text was returned, +            if (bodyContentType == null || bodyContentType == XContentType.JSON || bodyContentType == XContentType.YAML) {, +                bodyAsString = new String(body, StandardCharsets.UTF_8);, +            } else {, +                //if the body is in a binary format and gets requested as a string (e.g. to log a test failure), we convert it to json, +                try (XContentBuilder jsonBuilder = XContentFactory.jsonBuilder()) {, +                    try (XContentParser parser = bodyContentType.xContent().createParser(NamedXContentRegistry.EMPTY, body)) {, +                        jsonBuilder.copyCurrentStructure(parser);, +                    }, +                    bodyAsString = jsonBuilder.string();, +                } catch (IOException e) {, +                    throw new UncheckedIOException("unable to convert response body to a string format", e);, +                }, +            }, +        }, +        return bodyAsString;, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4BadRequestIT.java, +        final ObjectPath objectPath = ObjectPath.createFromResponse(response);, +++ b/qa/backwards-5.0/src/test/java/org/elasticsearch/backwards/IndexingIT.java, +        final int actualCount = Integer.parseInt(ObjectPath.createFromResponse(response).evaluate("count").toString());, +        final int actualVersion = Integer.parseInt(ObjectPath.createFromResponse(response).evaluate("_version").toString());, +        List<Object> shardStats = ObjectPath.createFromResponse(response).evaluate("indices.test.shards.0");, +        ObjectPath objectPath = ObjectPath.createFromResponse(response);, +        nodes.setMasterNodeId(ObjectPath.createFromResponse(response).evaluate("master_node"));, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import java.io.UncheckedIOException;, +    private final byte[] body;, +    private final XContentType bodyContentType;, +    private String bodyAsString;, +            String contentType = response.getHeader("Content-Type");, +            this.bodyContentType = XContentType.fromMediaTypeOrFormat(contentType);, +                byte[] bytes = EntityUtils.toByteArray(response.getEntity());, +                //skip parsing if we got text back (e.g. if we called _cat apis), +                if (bodyContentType != null) {, +                    this.parsedResponse = ObjectPath.createFromXContent(bodyContentType.xContent(), new BytesArray(bytes));, +                }, +                this.body = bytes;, +                throw e;, +            this.bodyContentType = null;, +        //we only get here if there is no response body or the body is text, +        assert bodyContentType == null;, +        return getBodyAsString();, +        if (bodyAsString == null && body != null) {, +            //content-type null means that text was returned, +            if (bodyContentType == null || bodyContentType == XContentType.JSON || bodyContentType == XContentType.YAML) {, +                bodyAsString = new String(body, StandardCharsets.UTF_8);, +            } else {, +                //if the body is in a binary format and gets requested as a string (e.g. to log a test failure), we convert it to json, +                try (XContentBuilder jsonBuilder = XContentFactory.jsonBuilder()) {, +                    try (XContentParser parser = bodyContentType.xContent().createParser(NamedXContentRegistry.EMPTY, body)) {, +                        jsonBuilder.copyCurrentStructure(parser);, +                    }, +                    bodyAsString = jsonBuilder.string();]