[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        snapshotsService.createSnapshot(request, new SnapshotsService.CreateSnapshotListener() {, +            public void onResponse(Snapshot snapshotCreated) {, +                            if (snapshotCreated.equals(snapshot)) {, +                            if (snapshotCreated.equals(snapshot)) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        snapshotsService.createSnapshot(request, new SnapshotsService.CreateSnapshotListener() {, +            public void onResponse(Snapshot snapshotCreated) {, +                            if (snapshotCreated.equals(snapshot)) {, +                            if (snapshotCreated.equals(snapshot)) {, +++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;, + * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, CreateSnapshotListener)} is called and makes sure that, + * no snapshot is currently running and registers the new snapshot in cluster state</li>, +    public void createSnapshot(final CreateSnapshotRequest request, final CreateSnapshotListener listener) {, +        final String repositoryName = request.repository();, +        final String snapshotName = indexNameExpressionResolver.resolveDateMathExpression(request.snapshot());, +        clusterService.submitStateUpdateTask("create_snapshot [" + snapshotName + ']', new ClusterStateUpdateTask() {, +                validate(repositoryName, snapshotName, currentState);, +     * @param repositoryName repository name, +     * @param snapshotName snapshot name, +    private void validate(String repositoryName, String snapshotName, ClusterState state) {, +        if (repositoriesMetaData == null || repositoriesMetaData.repository(repositoryName) == null) {, +            throw new RepositoryMissingException(repositoryName);, +        validate(repositoryName, snapshotName);, +                    userCreateSnapshotListener.onResponse(snapshot.snapshot());, +                        userCreateSnapshotListener.onResponse(snapshot.snapshot());, +         *, +         * @param snapshot snapshot that was created, +        void onResponse(Snapshot snapshot);]