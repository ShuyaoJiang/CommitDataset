[+++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +        double newDistance = DistanceUnit.parse(distance, unit, DistanceUnit.DEFAULT);, +        if (newDistance <= 0.0) {, +            throw new IllegalArgumentException("distance must be greater than zero");, +        }, +        this.distance = newDistance;, +            throw new IllegalArgumentException("optimizeBbox must not be null");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +        double newDistance = DistanceUnit.parse(distance, unit, DistanceUnit.DEFAULT);, +        if (newDistance <= 0.0) {, +            throw new IllegalArgumentException("distance must be greater than zero");, +        }, +        this.distance = newDistance;, +            throw new IllegalArgumentException("optimizeBbox must not be null");, +++ b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceQueryBuilderTests.java, +import static org.hamcrest.Matchers.*;, +            assertThat(ex.getMessage(), equalTo("fieldName must not be null or empty"));, +            assertThat(ex.getMessage(), equalTo("distance must not be null or empty"));, +            fail("distance must not be null or empty");, +            assertThat(ex.getMessage(), equalTo("distance must not be null or empty"));, +            if (randomBoolean()) {, +            } else {, +            }, +            fail("distance must not be null");, +            assertThat(ex.getMessage(), equalTo("distance unit must not be null"));, +            query.distance(randomIntBetween(Integer.MIN_VALUE, 0), DistanceUnit.DEFAULT);, +            fail("distance must be greater than zero");, +        } catch (IllegalArgumentException ex) {, +            assertThat(ex.getMessage(), equalTo("distance must be greater than zero"));, +        }, +, +        try {, +            if (randomBoolean()) {, +            } else {, +                query.geohash("");, +            }, +            assertThat(ex.getMessage(), equalTo("geohash must not be null or empty"));, +            assertThat(ex.getMessage(), equalTo("geoDistance must not be null"));, +            assertThat(ex.getMessage(), equalTo("optimizeBbox must not be null"));, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +        double newDistance = DistanceUnit.parse(distance, unit, DistanceUnit.DEFAULT);, +        if (newDistance <= 0.0) {, +            throw new IllegalArgumentException("distance must be greater than zero");, +        }, +        this.distance = newDistance;, +            throw new IllegalArgumentException("optimizeBbox must not be null");, +++ b/core/src/test/java/org/elasticsearch/index/query/GeoDistanceQueryBuilderTests.java, +import static org.hamcrest.Matchers.*;, +            assertThat(ex.getMessage(), equalTo("fieldName must not be null or empty"));, +            assertThat(ex.getMessage(), equalTo("distance must not be null or empty"));, +            fail("distance must not be null or empty");, +            assertThat(ex.getMessage(), equalTo("distance must not be null or empty"));, +            if (randomBoolean()) {, +            } else {, +            }, +            fail("distance must not be null");, +            assertThat(ex.getMessage(), equalTo("distance unit must not be null"));, +            query.distance(randomIntBetween(Integer.MIN_VALUE, 0), DistanceUnit.DEFAULT);, +            fail("distance must be greater than zero");, +        } catch (IllegalArgumentException ex) {, +            assertThat(ex.getMessage(), equalTo("distance must be greater than zero"));, +        }, +, +        try {, +            if (randomBoolean()) {, +            } else {, +                query.geohash("");, +            }, +            assertThat(ex.getMessage(), equalTo("geohash must not be null or empty"));, +            assertThat(ex.getMessage(), equalTo("geoDistance must not be null"));, +            assertThat(ex.getMessage(), equalTo("optimizeBbox must not be null"));, +++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/GeoDistanceTests.java, +            final String distance = DistanceUnit.KILOMETERS.toString(randomIntBetween(1, 10000));]