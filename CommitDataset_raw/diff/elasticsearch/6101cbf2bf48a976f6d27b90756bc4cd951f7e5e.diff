[+++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import java.util.HashSet;, +import java.util.Set;, +    public static void assertSearchHits(SearchResponse searchResponse, String... ids) {, +        assertThat("Expected different hit count", searchResponse.getHits().hits().length, equalTo(ids.length));, +, +        Set<String> idsSet = new HashSet<String>(Arrays.asList(ids));, +        for (SearchHit hit : searchResponse.getHits()) {, +            assertThat("Expected id: " + hit.getId() + " in the result but wasn't", idsSet.remove(hit.getId()), equalTo(true));, +        }, +        assertThat("Expected ids: " + Arrays.toString(idsSet.toArray(new String[0])) + " in the result - result size differs", idsSet.size(), equalTo(0));, +    }, +, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import java.util.HashSet;, +import java.util.Set;, +    public static void assertSearchHits(SearchResponse searchResponse, String... ids) {, +        assertThat("Expected different hit count", searchResponse.getHits().hits().length, equalTo(ids.length));, +, +        Set<String> idsSet = new HashSet<String>(Arrays.asList(ids));, +        for (SearchHit hit : searchResponse.getHits()) {, +            assertThat("Expected id: " + hit.getId() + " in the result but wasn't", idsSet.remove(hit.getId()), equalTo(true));, +        }, +        assertThat("Expected ids: " + Arrays.toString(idsSet.toArray(new String[0])) + " in the result - result size differs", idsSet.size(), equalTo(0));, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +        // this uses dismax so scores are equal and the order can be arbitrary, +        assertSearchHits(searchResponse, "1", "2");]