[+++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                // Delete temporary index files first, as we might otherwise fail in the next step creating the new index file if an earlier, +                // attempt to write an index file with this generation failed mid-way after creating the temporary file., +                for (final String blobName : blobs.keySet()) {, +                    if (indexShardSnapshotsFormat.isTempBlobName(blobName)) {, +                        try {, +                            blobContainer.deleteBlobIgnoringIfNotExists(blobName);, +                        } catch (IOException e) {, +                            logger.warn(() -> new ParameterizedMessage("[{}][{}] failed to delete index blob [{}] during finalization",, +                                snapshotId, shardId, blobName), e);, +                            throw e;, +                        }, +                    }, +                }, +, +                    if (blobName.startsWith(SNAPSHOT_INDEX_PREFIX)) {, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                // Delete temporary index files first, as we might otherwise fail in the next step creating the new index file if an earlier, +                // attempt to write an index file with this generation failed mid-way after creating the temporary file., +                for (final String blobName : blobs.keySet()) {, +                    if (indexShardSnapshotsFormat.isTempBlobName(blobName)) {, +                        try {, +                            blobContainer.deleteBlobIgnoringIfNotExists(blobName);, +                        } catch (IOException e) {, +                            logger.warn(() -> new ParameterizedMessage("[{}][{}] failed to delete index blob [{}] during finalization",, +                                snapshotId, shardId, blobName), e);, +                            throw e;, +                        }, +                    }, +                }, +, +                    if (blobName.startsWith(SNAPSHOT_INDEX_PREFIX)) {, +++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                // Delete temporary index files first, as we might otherwise fail in the next step creating the new index file if an earlier, +                // attempt to write an index file with this generation failed mid-way after creating the temporary file., +                for (final String blobName : blobs.keySet()) {, +                    if (indexShardSnapshotsFormat.isTempBlobName(blobName)) {, +                        try {, +                            blobContainer.deleteBlobIgnoringIfNotExists(blobName);, +                        } catch (IOException e) {, +                            logger.warn(() -> new ParameterizedMessage("[{}][{}] failed to delete index blob [{}] during finalization",, +                                snapshotId, shardId, blobName), e);, +                            throw e;, +                        }, +                    }, +                }, +, +                    if (blobName.startsWith(SNAPSHOT_INDEX_PREFIX)) {, +++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                // Delete temporary index files first, as we might otherwise fail in the next step creating the new index file if an earlier, +                // attempt to write an index file with this generation failed mid-way after creating the temporary file., +                for (final String blobName : blobs.keySet()) {, +                    if (indexShardSnapshotsFormat.isTempBlobName(blobName)) {, +                        try {, +                            blobContainer.deleteBlobIgnoringIfNotExists(blobName);, +                        } catch (IOException e) {, +                            logger.warn(() -> new ParameterizedMessage("[{}][{}] failed to delete index blob [{}] during finalization",, +                                snapshotId, shardId, blobName), e);, +                            throw e;, +                        }, +                    }, +                }, +, +                    if (blobName.startsWith(SNAPSHOT_INDEX_PREFIX)) {, +++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +++ /dev/null, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                // Delete temporary index files first, as we might otherwise fail in the next step creating the new index file if an earlier, +                // attempt to write an index file with this generation failed mid-way after creating the temporary file., +                for (final String blobName : blobs.keySet()) {, +                    if (indexShardSnapshotsFormat.isTempBlobName(blobName)) {, +                        try {, +                            blobContainer.deleteBlobIgnoringIfNotExists(blobName);, +                        } catch (IOException e) {, +                            logger.warn(() -> new ParameterizedMessage("[{}][{}] failed to delete index blob [{}] during finalization",, +                                snapshotId, shardId, blobName), e);, +                            throw e;, +                        }, +                    }, +                }, +, +                    if (blobName.startsWith(SNAPSHOT_INDEX_PREFIX)) {, +++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                // Delete temporary index files first, as we might otherwise fail in the next step creating the new index file if an earlier, +                // attempt to write an index file with this generation failed mid-way after creating the temporary file., +                for (final String blobName : blobs.keySet()) {, +                    if (indexShardSnapshotsFormat.isTempBlobName(blobName)) {, +                        try {, +                            blobContainer.deleteBlobIgnoringIfNotExists(blobName);, +                        } catch (IOException e) {, +                            logger.warn(() -> new ParameterizedMessage("[{}][{}] failed to delete index blob [{}] during finalization",, +                                snapshotId, shardId, blobName), e);]