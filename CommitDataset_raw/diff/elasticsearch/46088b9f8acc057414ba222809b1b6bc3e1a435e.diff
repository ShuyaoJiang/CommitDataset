[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/CacheRecycler.java, +import org.elasticsearch.common.trove.ExtTLongObjectHashMap;, +        longObjectHashMap.remove();, +        longObjectHashMap2.remove();, +        longLongHashMap.remove();, +    // ----- ExtTLongObjectHashMap ----, +, +    private static ThreadLocal<SoftReference<Deque<ExtTLongObjectHashMap>>> longObjectHashMap2 = new ThreadLocal<SoftReference<Deque<ExtTLongObjectHashMap>>>();, +, +    public static <T> ExtTLongObjectHashMap<T> popLongObjectMap2() {, +        SoftReference<Deque<ExtTLongObjectHashMap>> ref = longObjectHashMap2.get();, +        Deque<ExtTLongObjectHashMap> deque = ref == null ? null : ref.get();, +        if (deque == null) {, +            deque = new ArrayDeque<ExtTLongObjectHashMap>();, +            longObjectHashMap2.set(new SoftReference<Deque<ExtTLongObjectHashMap>>(deque));, +        }, +        if (deque.isEmpty()) {, +            return new ExtTLongObjectHashMap();, +        }, +        ExtTLongObjectHashMap map = deque.pollFirst();, +        map.clear();, +        return map;, +    }, +, +    public static void pushLongObjectMap2(ExtTLongObjectHashMap map) {, +        SoftReference<Deque<ExtTLongObjectHashMap>> ref = longObjectHashMap2.get();, +        Deque<ExtTLongObjectHashMap> deque = ref == null ? null : ref.get();, +        if (deque == null) {, +            deque = new ArrayDeque<ExtTLongObjectHashMap>();, +            longObjectHashMap2.set(new SoftReference<Deque<ExtTLongObjectHashMap>>(deque));, +        }, +        deque.add(map);, +    }, +, +, +    // ----- ExtTLongObjectHashMap ----, +, +    private static ThreadLocal<SoftReference<Deque<ExtTLongObjectHashMap>>> longObjectHashMap = new ThreadLocal<SoftReference<Deque<ExtTLongObjectHashMap>>>();, +, +    public static <T> ExtTLongObjectHashMap<T> popLongObjectMap() {, +        SoftReference<Deque<ExtTLongObjectHashMap>> ref = longObjectHashMap.get();, +        Deque<ExtTLongObjectHashMap> deque = ref == null ? null : ref.get();, +        if (deque == null) {, +            deque = new ArrayDeque<ExtTLongObjectHashMap>();, +            longObjectHashMap.set(new SoftReference<Deque<ExtTLongObjectHashMap>>(deque));, +        }, +        if (deque.isEmpty()) {, +            return new ExtTLongObjectHashMap();, +        }, +        ExtTLongObjectHashMap map = deque.pollFirst();, +        map.clear();, +        return map;, +    }, +, +    public static void pushLongObjectMap(ExtTLongObjectHashMap map) {, +        SoftReference<Deque<ExtTLongObjectHashMap>> ref = longObjectHashMap.get();, +        Deque<ExtTLongObjectHashMap> deque = ref == null ? null : ref.get();, +        if (deque == null) {, +            deque = new ArrayDeque<ExtTLongObjectHashMap>();, +            longObjectHashMap.set(new SoftReference<Deque<ExtTLongObjectHashMap>>(deque));, +        }, +        deque.add(map);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/CacheRecycler.java, +import org.elasticsearch.common.trove.ExtTLongObjectHashMap;, +        longObjectHashMap.remove();, +        longObjectHashMap2.remove();, +        longLongHashMap.remove();, +    // ----- ExtTLongObjectHashMap ----, +, +    private static ThreadLocal<SoftReference<Deque<ExtTLongObjectHashMap>>> longObjectHashMap2 = new ThreadLocal<SoftReference<Deque<ExtTLongObjectHashMap>>>();, +, +    public static <T> ExtTLongObjectHashMap<T> popLongObjectMap2() {, +        SoftReference<Deque<ExtTLongObjectHashMap>> ref = longObjectHashMap2.get();, +        Deque<ExtTLongObjectHashMap> deque = ref == null ? null : ref.get();, +        if (deque == null) {, +            deque = new ArrayDeque<ExtTLongObjectHashMap>();, +            longObjectHashMap2.set(new SoftReference<Deque<ExtTLongObjectHashMap>>(deque));, +        }, +        if (deque.isEmpty()) {, +            return new ExtTLongObjectHashMap();, +        }, +        ExtTLongObjectHashMap map = deque.pollFirst();, +        map.clear();, +        return map;, +    }, +, +    public static void pushLongObjectMap2(ExtTLongObjectHashMap map) {, +        SoftReference<Deque<ExtTLongObjectHashMap>> ref = longObjectHashMap2.get();, +        Deque<ExtTLongObjectHashMap> deque = ref == null ? null : ref.get();, +        if (deque == null) {, +            deque = new ArrayDeque<ExtTLongObjectHashMap>();, +            longObjectHashMap2.set(new SoftReference<Deque<ExtTLongObjectHashMap>>(deque));, +        }, +        deque.add(map);, +    }, +, +, +    // ----- ExtTLongObjectHashMap ----]