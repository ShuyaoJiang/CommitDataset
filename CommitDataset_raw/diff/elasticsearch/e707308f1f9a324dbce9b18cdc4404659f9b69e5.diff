[+++ b/src/main/java/org/elasticsearch/index/fielddata/GeoPointValues.java, +public abstract class GeoPointValues {, +    public static final GeoPointValues EMPTY = new Empty();, +    , +    private final boolean multiValued;, +    public final boolean isMultiValued() {, +        return multiValued;, +    }, +    public abstract boolean hasValue(int docId);, +    public abstract GeoPoint getValue(int docId);, +    public abstract GeoPoint getValueSafe(int docId);, +    public abstract Iter getIter(int docId);, +    public abstract Iter getIterSafe(int docId);, +    , +    protected GeoPointValues(boolean multiValued) {, +        this.multiValued = multiValued;, +    }, +, +    public GeoPoint getValueMissing(int docId, GeoPoint defaultGeoPoint) {, +        if (hasValue(docId)) {, +            return getValue(docId);, +        } , +        return defaultGeoPoint;, +    }, +    public static interface Iter {, +    static class Empty extends GeoPointValues {, +        protected Empty() {, +            super(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/GeoPointValues.java, +public abstract class GeoPointValues {, +    public static final GeoPointValues EMPTY = new Empty();, +    , +    private final boolean multiValued;, +    public final boolean isMultiValued() {, +        return multiValued;, +    }, +    public abstract boolean hasValue(int docId);, +    public abstract GeoPoint getValue(int docId);, +    public abstract GeoPoint getValueSafe(int docId);, +    public abstract Iter getIter(int docId);, +    public abstract Iter getIterSafe(int docId);, +    , +    protected GeoPointValues(boolean multiValued) {, +        this.multiValued = multiValued;, +    }, +, +    public GeoPoint getValueMissing(int docId, GeoPoint defaultGeoPoint) {, +        if (hasValue(docId)) {, +            return getValue(docId);, +        } , +        return defaultGeoPoint;, +    }, +    public static interface Iter {, +    static class Empty extends GeoPointValues {, +        protected Empty() {, +            super(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/GeoPointDoubleArrayAtomicFieldData.java, +    static class WithOrdinals extends GeoPointDoubleArrayAtomicFieldData {, +            return new GeoPointValuesWithOrdinals(lon, lat, ordinals.ordinals());, +        public static class GeoPointValuesWithOrdinals extends GeoPointValues {, +            GeoPointValuesWithOrdinals(BigDoubleArrayList lon, BigDoubleArrayList lat, Ordinals.Docs ordinals) {, +                super(ordinals.isMultiValued());, +            return new GeoPointValuesSingleFixedSet(lon, lat, set);, +        static class GeoPointValuesSingleFixedSet extends GeoPointValues {, +, +            GeoPointValuesSingleFixedSet(BigDoubleArrayList lon, BigDoubleArrayList lat, FixedBitSet set) {, +                super(false);, +            return new GeoPointValuesSingle(lon, lat);, +        static class GeoPointValuesSingle extends GeoPointValues {, +, +            GeoPointValuesSingle(BigDoubleArrayList lon, BigDoubleArrayList lat) {, +                super(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/GeoPointValues.java, +public abstract class GeoPointValues {, +    public static final GeoPointValues EMPTY = new Empty();, +    , +    private final boolean multiValued;, +    public final boolean isMultiValued() {, +        return multiValued;, +    }, +    public abstract boolean hasValue(int docId);, +    public abstract GeoPoint getValue(int docId);, +    public abstract GeoPoint getValueSafe(int docId);, +    public abstract Iter getIter(int docId);, +    public abstract Iter getIterSafe(int docId);, +    , +    protected GeoPointValues(boolean multiValued) {, +        this.multiValued = multiValued;, +    }, +, +    public GeoPoint getValueMissing(int docId, GeoPoint defaultGeoPoint) {, +        if (hasValue(docId)) {, +            return getValue(docId);, +        } , +        return defaultGeoPoint;, +    }, +    public static interface Iter {, +    static class Empty extends GeoPointValues {, +        protected Empty() {, +            super(false);]