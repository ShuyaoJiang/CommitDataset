[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName), +                        .addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));, +                builder = new TextFieldMapper.Builder(currentFieldName), +                        .addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName), +                        .addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));, +                builder = new TextFieldMapper.Builder(currentFieldName), +                        .addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +            // this check will only be performed on the master node when there is, +            // a call to the update mapping API. For all other cases like, +            // the master node restoring mappings from disk or data nodes, +            // deserializing cluster state that was sent by the master node,, +            // this check will be skipped., +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName), +                        .addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));, +                builder = new TextFieldMapper.Builder(currentFieldName), +                        .addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +            // this check will only be performed on the master node when there is, +            // a call to the update mapping API. For all other cases like, +            // the master node restoring mappings from disk or data nodes, +            // deserializing cluster state that was sent by the master node,, +            // this check will be skipped., +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.search.MatchAllDocsQuery;, +import java.util.Objects;, +                throw new AssertionError();, +            return new TypeQuery(indexedValueForSearch(value));, +    public static class TypeQuery extends Query {, +, +        private final BytesRef type;, +, +        public TypeQuery(BytesRef type) {, +            this.type = Objects.requireNonNull(type);, +        }, +, +        @Override, +        public Query rewrite(IndexReader reader) throws IOException {, +            Term term = new Term(CONTENT_TYPE, type);, +            TermContext context = TermContext.build(reader.getContext(), term);, +            if (context.docFreq() == reader.maxDoc()) {, +                // All docs have the same type., +                // Using a match_all query will help Lucene perform some optimizations, +                // For instance, match_all queries as filter clauses are automatically removed, +                return new MatchAllDocsQuery();, +            } else {, +                return new ConstantScoreQuery(new TermQuery(term, context));, +            }, +        }, +, +        @Override, +        public boolean equals(Object obj) {, +            if (super.equals(obj) == false) {, +                return false;, +            }, +            TypeQuery that = (TypeQuery) obj;, +            return type.equals(that.type);, +        }, +, +        @Override, +        public int hashCode() {, +            return 31 * super.hashCode() + type.hashCode();, +        }, +, +        @Override, +        public String toString(String field) {, +            return "_type:" + type;, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                builder = new TextFieldMapper.Builder(currentFieldName), +                        .addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));, +                builder = new TextFieldMapper.Builder(currentFieldName), +                        .addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +            // this check will only be performed on the master node when there is, +            // a call to the update mapping API. For all other cases like, +            // the master node restoring mappings from disk or data nodes, +            // deserializing cluster state that was sent by the master node,, +            // this check will be skipped., +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.search.MatchAllDocsQuery;, +import java.util.Objects;, +                throw new AssertionError();, +            return new TypeQuery(indexedValueForSearch(value));, +    public static class TypeQuery extends Query {, +, +        private final BytesRef type;, +, +        public TypeQuery(BytesRef type) {]