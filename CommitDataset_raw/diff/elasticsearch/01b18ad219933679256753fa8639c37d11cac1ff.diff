[+++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +    public Aggregator[] subAggregators() {, +        return subAggregators;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +    public Aggregator[] subAggregators() {, +        return subAggregators;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/Bucket.java, +    static class SubAggregationComparator<B extends Bucket> implements java.util.Comparator<B> {, +        public SubAggregationComparator(String expression, boolean asc) {, +        public SubAggregationComparator(String aggName, String valueName, boolean asc) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +    public Aggregator[] subAggregators() {, +        return subAggregators;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/Bucket.java, +    static class SubAggregationComparator<B extends Bucket> implements java.util.Comparator<B> {, +        public SubAggregationComparator(String expression, boolean asc) {, +        public SubAggregationComparator(String aggName, String valueName, boolean asc) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +import java.util.ArrayList;, +import java.util.List;, +    private final Aggregator[] collectableSugAggregators;, +, +        List<Aggregator> collectables = new ArrayList<Aggregator>(subAggregators.length);, +        for (int i = 0; i < subAggregators.length; i++) {, +            if (subAggregators[i].shouldCollect()) {, +                collectables.add((subAggregators[i]));, +            }, +        }, +        collectableSugAggregators = collectables.toArray(new Aggregator[collectables.size()]);, +        for (int i = 0; i < collectableSugAggregators.length; i++) {, +            collectableSugAggregators[i].collect(doc, bucketOrd);, +        for (int i = 0; i < collectableSugAggregators.length; i++) {, +            collectableSugAggregators[i].collect(doc, bucketOrd);, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +    public Aggregator[] subAggregators() {, +        return subAggregators;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/Bucket.java, +    static class SubAggregationComparator<B extends Bucket> implements java.util.Comparator<B> {, +        public SubAggregationComparator(String expression, boolean asc) {, +        public SubAggregationComparator(String aggName, String valueName, boolean asc) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +import java.util.ArrayList;, +import java.util.List;, +    private final Aggregator[] collectableSugAggregators;, +, +        List<Aggregator> collectables = new ArrayList<Aggregator>(subAggregators.length);, +        for (int i = 0; i < subAggregators.length; i++) {, +            if (subAggregators[i].shouldCollect()) {, +                collectables.add((subAggregators[i]));, +            }, +        }, +        collectableSugAggregators = collectables.toArray(new Aggregator[collectables.size()]);, +        for (int i = 0; i < collectableSugAggregators.length; i++) {, +            collectableSugAggregators[i].collect(doc, bucketOrd);, +        for (int i = 0; i < collectableSugAggregators.length; i++) {, +            collectableSugAggregators[i].collect(doc, bucketOrd);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalOrder.java, +import org.elasticsearch.search.aggregations.bucket.Bucket;, +            super(ID, key, asc, new Bucket.SubAggregationComparator<HistogramBase.Bucket>(key, asc));, +            super(ID, key(aggName, valueName), asc, new Bucket.SubAggregationComparator<HistogramBase.Bucket>(aggName, valueName, asc));, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +    public Aggregator[] subAggregators() {, +        return subAggregators;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/Bucket.java, +    static class SubAggregationComparator<B extends Bucket> implements java.util.Comparator<B> {, +        public SubAggregationComparator(String expression, boolean asc) {, +        public SubAggregationComparator(String aggName, String valueName, boolean asc) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketsAggregator.java, +import java.util.ArrayList;, +import java.util.List;, +    private final Aggregator[] collectableSugAggregators;, +, +        List<Aggregator> collectables = new ArrayList<Aggregator>(subAggregators.length);, +        for (int i = 0; i < subAggregators.length; i++) {, +            if (subAggregators[i].shouldCollect()) {, +                collectables.add((subAggregators[i]));, +            }, +        }, +        collectableSugAggregators = collectables.toArray(new Aggregator[collectables.size()]);, +        for (int i = 0; i < collectableSugAggregators.length; i++) {, +            collectableSugAggregators[i].collect(doc, bucketOrd);, +        for (int i = 0; i < collectableSugAggregators.length; i++) {, +            collectableSugAggregators[i].collect(doc, bucketOrd);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalOrder.java, +import org.elasticsearch.search.aggregations.bucket.Bucket;, +            super(ID, key, asc, new Bucket.SubAggregationComparator<HistogramBase.Bucket>(key, asc));, +            super(ID, key(aggName, valueName), asc, new Bucket.SubAggregationComparator<HistogramBase.Bucket>(aggName, valueName, asc));, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +        BucketPriorityQueue ordered = new BucketPriorityQueue(size, order.comparator(null));, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java]