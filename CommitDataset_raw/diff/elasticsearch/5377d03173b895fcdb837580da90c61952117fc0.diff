[+++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    protected int end;, +        this.end = pos + bytes.length();, +        this.end = offset + length;, +        if (pos + n > end) {, +            n = end - pos;, +        return (pos < end) ? (buf[pos++] & 0xff) : -1;, +        if (pos >= end) {, +        if (pos + len > end) {, +            len = end - pos;, +        if (pos >= end) {, +        if (pos >= end) {, +        if (pos + len > end) {, +            len = end - pos;, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    protected int end;, +        this.end = pos + bytes.length();, +        this.end = offset + length;, +        if (pos + n > end) {, +            n = end - pos;, +        return (pos < end) ? (buf[pos++] & 0xff) : -1;, +        if (pos >= end) {, +        if (pos + len > end) {, +            len = end - pos;, +        if (pos >= end) {, +        if (pos >= end) {, +        if (pos + len > end) {, +            len = end - pos;, +++ b/src/test/java/org/elasticsearch/common/io/StreamsTests.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +    @Test, +    public void testBytesStreamInput() throws IOException {, +        byte stuff[] = new byte[] { 0, 1, 2, 3 };, +        BytesRef stuffRef = new BytesRef(stuff, 2, 2);, +        BytesArray stuffArray = new BytesArray(stuffRef);, +        BytesStreamInput input = new BytesStreamInput(stuffArray);, +        assertEquals(2, input.read());, +        assertEquals(3, input.read());, +        assertEquals(-1, input.read());, +        input.close();, +    }, +]