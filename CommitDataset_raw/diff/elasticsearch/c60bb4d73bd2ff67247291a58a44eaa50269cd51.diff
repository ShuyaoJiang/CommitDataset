[+++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +import java.util.Collections;, +import java.util.List;, +    protected List<Reducer> reducers = Collections.emptyList();, +    protected abstract Aggregator createInternal(AggregationContext context, Aggregator parent, boolean collectsFromSingleBucket,, +            List<Reducer> reducers, Map<String, Object> metaData) throws IOException;, +        return createInternal(context, parent, collectsFromSingleBucket, this.reducers, this.metaData);, +, +    public void setReducers(List<Reducer> reducers) {, +        this.reducers = reducers;, +    }, +, +, +        final Aggregator first = factory.create(context, parent, truegator> aggregators;, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +import java.util.Collections;, +import java.util.List;, +    protected List<Reducer> reducers = Collections.emptyList();, +    protected abstract Aggregator createInternal(AggregationContext context, Aggregator parent, boolean collectsFromSingleBucket,, +            List<Reducer> reducers, Map<String, Object> metaData) throws IOException;, +        return createInternal(context, parent, collectsFromSingleBucket, this.reducers, this.metaData);, +, +    public void setReducers(List<Reducer> reducers) {, +        this.reducers = reducers;, +    }, +, +, +        final Aggregator first = factory.create(context, parent, truegator> aggregators;, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +    private List<Reducer> reducers;, +, +    protected InternalAggregation(String name, List<Reducer> reducers, Map<String, Object> metaData) {, +        this.reducers = reducers;, +        InternalAggregation aggResult = doReduce(reduceContext);, +        for (Reducer reducer : reducers) {, +            aggResult = reducer.reduce(aggResult, reduceContext);, +        }, +        return aggResult;, +    public List<Reducer> reducers() {, +        return reducers;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +import java.util.Collections;, +import java.util.List;, +    protected List<Reducer> reducers = Collections.emptyList();, +    protected abstract Aggregator createInternal(AggregationContext context, Aggregator parent, boolean collectsFromSingleBucket,, +            List<Reducer> reducers, Map<String, Object> metaData) throws IOException;, +        return createInternal(context, parent, collectsFromSingleBucket, this.reducers, this.metaData);, +, +    public void setReducers(List<Reducer> reducers) {, +        this.reducers = reducers;, +    }, +, +, +        final Aggregator first = factory.create(context, parent, truegator> aggregators;, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +    private List<Reducer> reducers;, +, +    protected InternalAggregation(String name, List<Reducer> reducers, Map<String, Object> metaData) {, +        this.reducers = reducers;, +        InternalAggregation aggResult = doReduce(reduceContext);, +        for (Reducer reducer : reducers) {, +            aggResult = reducer.reduce(aggResult, reduceContext);, +        }, +        return aggResult;, +    public List<Reducer> reducers() {, +        return reducers;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +    public InternalMultiBucketAggregation(String name, List<Reducer> reducers, Map<String, Object> metaData) {, +        super(name, reducers, metaData);, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +import java.util.Collections;, +import java.util.List;, +    protected List<Reducer> reducers = Collections.emptyList();, +    protected abstract Aggregator createInternal(AggregationContext context, Aggregator parent, boolean collectsFromSingleBucket,, +            List<Reducer> reducers, Map<String, Object> metaData) throws IOException;, +        return createInternal(context, parent, collectsFromSingleBucket, this.reducers, this.metaData);, +, +    public void setReducers(List<Reducer> reducers) {, +        this.reducers = reducers;, +    }, +, +, +        final Aggregator first = factory.create(context, parent, truegator> aggregators;, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java]