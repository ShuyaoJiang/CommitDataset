[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    /**, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +     */, +    @Deprecated, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    /**, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +     */, +    @Deprecated, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            String[] includeFields = new String[] {"title", "innerObject.*"};, +            String[] excludeFields = new String[] {"user"};, +            assertNull(hits.getHits()[0].getSourceAsMap().get("user"));, +            // tag::count-request-args, +            CountRequest countRequest = new CountRequest("blog") // <1>, +                .routing("routing") // <2>, +                .indicesOptions(IndicesOptions.lenientExpandOpen()) // <3>, +                .preference("_local"); // <4>, +            // end::count-request-args, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    /**, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +     */, +    @Deprecated, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            String[] includeFields = new String[] {"title", "innerObject.*"};, +            String[] excludeFields = new String[] {"user"};, +            assertNull(hits.getHits()[0].getSourceAsMap().get("user"));, +            // tag::count-request-args, +            CountRequest countRequest = new CountRequest("blog") // <1>, +                .routing("routing") // <2>, +                .indicesOptions(IndicesOptions.lenientExpandOpen()) // <3>, +                .preference("_local"); // <4>, +            // end::count-request-args, +++ b/docs/java-rest/high-level/search/count.asciidoc, +A +{request}+ also takes the following optional arguments:, +include-tagged::{doc-tests-file}[{api}-request-args], +<2> Set a routing parameter, +<3> Setting `IndicesOptions` controls how unavailable indices are resolved and how wildcard expressions are expanded, +<4> Use the preference parameter e.g. to execute the search to prefer local shards. The default is to randomize across shards., +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    /**, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +     */, +    @Deprecated, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            String[] includeFields = new String[] {"title", "innerObject.*"};, +            String[] excludeFields = new String[] {"user"};, +            assertNull(hits.getHits()[0].getSourceAsMap().get("user"));, +            // tag::count-request-args, +            CountRequest countRequest = new CountRequest("blog") // <1>, +                .routing("routing") // <2>, +                .indicesOptions(IndicesOptions.lenientExpandOpen()) // <3>, +                .preference("_local"); // <4>, +            // end::count-request-args, +++ b/docs/java-rest/high-level/search/count.asciidoc, +A +{request}+ also takes the following optional arguments:, +include-tagged::{doc-tests-file}[{api}-request-args], +<2> Set a routing parameter, +<3> Setting `IndicesOptions` controls how unavailable indices are resolved and how wildcard expressions are expanded, +<4> Use the preference parameter e.g. to execute the search to prefer local shards. The default is to randomize across shards., +++ b/docs/java-rest/high-level/search/search.asciidoc, +The `SearchHit` provides access to basic information like index, document ID, +and score of each search hit:, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +    /**, +     * @deprecated Types are in the process of being removed. Instead of using a type, prefer to, +     * filter on a field on the document., +     */, +    @Deprecated, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            String[] includeFields = new String[] {"title", "innerObject.*"};, +            String[] excludeFields = new String[] {"user"};, +            assertNull(hits.getHits()[0].getSourceAsMap().get("user"));, +            // tag::count-request-args, +            CountRequest countRequest = new CountRequest("blog") // <1>, +                .routing("routing") // <2>, +                .indicesOptions(IndicesOptions.lenientExpandOpen()) // <3>, +                .preference("_local"); // <4>, +            // end::count-request-args, +++ b/docs/java-rest/high-level/search/count.asciidoc, +A +{request}+ also takes the following optional arguments:, +include-tagged::{doc-tests-file}[{api}-request-args], +<2> Set a routing parameter, +<3> Setting `IndicesOptions` controls how unavailable indices are resolved and how wildcard expressions are expanded]