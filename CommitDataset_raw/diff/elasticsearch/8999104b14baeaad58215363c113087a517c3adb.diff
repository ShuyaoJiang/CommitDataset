[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +    public abstract boolean needs_score();, +    public abstract boolean needsCtx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +    public abstract boolean needs_score();, +    public abstract boolean needsCtx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +                    return painlessScript.needs_score();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +    public abstract boolean needs_score();, +    public abstract boolean needsCtx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +                    return painlessScript.needs_score();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +import static org.elasticsearch.painless.WriterConstants.NEEDS_PARAMETER_METHOD_TYPE;, +    private final List<org.objectweb.asm.commons.Method> needsMethods;, +        List<org.objectweb.asm.commons.Method> needsMethods = new ArrayList<>();, +            if (m.getName().startsWith("needs") && m.getReturnType().equals(boolean.class) && m.getParameterTypes().length == 0) {, +                needsMethods.add(new org.objectweb.asm.commons.Method(m.getName(), NEEDS_PARAMETER_METHOD_TYPE.toMethodDescriptorString()));, +        this.needsMethods = unmodifiableList(needsMethods);, +    public List<org.objectweb.asm.commons.Method> getNeedsMethods() {, +        return needsMethods;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +    public abstract boolean needs_score();, +    public abstract boolean needsCtx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +                    return painlessScript.needs_score();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +import static org.elasticsearch.painless.WriterConstants.NEEDS_PARAMETER_METHOD_TYPE;, +    private final List<org.objectweb.asm.commons.Method> needsMethods;, +        List<org.objectweb.asm.commons.Method> needsMethods = new ArrayList<>();, +            if (m.getName().startsWith("needs") && m.getReturnType().equals(boolean.class) && m.getParameterTypes().length == 0) {, +                needsMethods.add(new org.objectweb.asm.commons.Method(m.getName(), NEEDS_PARAMETER_METHOD_TYPE.toMethodDescriptorString()));, +        this.needsMethods = unmodifiableList(needsMethods);, +    public List<org.objectweb.asm.commons.Method> getNeedsMethods() {, +        return needsMethods;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +        scoreLookup = script.needs_score() ? this::getScore : () -> 0.0;, +        ctxLookup = script.needsCtx() ? variables -> (Map<?, ?>) variables.get("ctx") : variables -> null;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +    public abstract boolean needs_score();, +    public abstract boolean needsCtx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +                    return painlessScript.needs_score();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +import static org.elasticsearch.painless.WriterConstants.NEEDS_PARAMETER_METHOD_TYPE;, +    private final List<org.objectweb.asm.commons.Method> needsMethods;, +        List<org.objectweb.asm.commons.Method> needsMethods = new ArrayList<>();, +            if (m.getName().startsWith("needs") && m.getReturnType().equals(boolean.class) && m.getParameterTypes().length == 0) {, +                needsMethods.add(new org.objectweb.asm.commons.Method(m.getName(), NEEDS_PARAMETER_METHOD_TYPE.toMethodDescriptorString()));, +        this.needsMethods = unmodifiableList(needsMethods);, +    public List<org.objectweb.asm.commons.Method> getNeedsMethods() {, +        return needsMethods;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +        scoreLookup = script.needs_score() ? this::getScore : () -> 0.0;, +        ctxLookup = script.needsCtx() ? variables -> (Map<?, ?>) variables.get("ctx") : variables -> null;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    public static final MethodType NEEDS_PARAMETER_METHOD_TYPE = MethodType.methodType(boolean.class);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +    public abstract boolean needs_score();, +    public abstract boolean needsCtx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +                    return painlessScript.needs_score();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +import static org.elasticsearch.painless.WriterConstants.NEEDS_PARAMETER_METHOD_TYPE;, +    private final List<org.objectweb.asm.commons.Method> needsMethods;, +        List<org.objectweb.asm.commons.Method> needsMethods = new ArrayList<>();, +            if (m.getName().startsWith("needs") && m.getReturnType().equals(boolean.class) && m.getParameterTypes().length == 0) {, +                needsMethods.add(new org.objectweb.asm.commons.Method(m.getName(), NEEDS_PARAMETER_METHOD_TYPE.toMethodDescriptorString()));, +        this.needsMethods = unmodifiableList(needsMethods);, +    public List<org.objectweb.asm.commons.Method> getNeedsMethods() {, +        return needsMethods;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +        scoreLookup = script.needs_score() ? this::getScore : () -> 0.0;, +        ctxLookup = script.needsCtx() ? variables -> (Map<?, ?>) variables.get("ctx") : variables -> null;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    public static final MethodType NEEDS_PARAMETER_METHOD_TYPE = MethodType.methodType(boolean.class);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SSource.java, +        // Write any needsVarName methods for used variables, +        for (org.objectweb.asm.commons.Method needsMethod : scriptClassInfo.getNeedsMethods()) {, +            String name = needsMethod.getName();, +            name = name.substring(5);, +            name = Character.toLowerCase(name.charAt(0)) + name.substring(1);, +            MethodWriter ifaceMethod = new MethodWriter(Opcodes.ACC_PUBLIC, needsMethod, visitor, globals.getStatements(), settings);, +            ifaceMethod.push(reserved.getUsedVariables().contains(name));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +    public abstract boolean needs_score();, +    public abstract boolean needsCtx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +                    return painlessScript.needs_score();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +import static org.elasticsearch.painless.WriterConstants.NEEDS_PARAMETER_METHOD_TYPE;, +    private final List<org.objectweb.asm.commons.Method> needsMethods;, +        List<org.objectweb.asm.commons.Method> needsMethods = new ArrayList<>();, +            if (m.getName().startsWith("needs") && m.getReturnType().equals(boolean.class) && m.getParameterTypes().length == 0) {, +                needsMethods.add(new org.objectweb.asm.commons.Method(m.getName(), NEEDS_PARAMETER_METHOD_TYPE.toMethodDescriptorString()));, +        this.needsMethods = unmodifiableList(needsMethods);, +    public List<org.objectweb.asm.commons.Method> getNeedsMethods() {, +        return needsMethods;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java]