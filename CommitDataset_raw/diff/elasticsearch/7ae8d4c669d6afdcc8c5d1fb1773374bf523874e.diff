[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    if (!nodesDelta.removedNodes().isEmpty()) {, +                        threadPool.cached().execute(new Runnable() {, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    if (!nodesDelta.removedNodes().isEmpty()) {, +                        threadPool.cached().execute(new Runnable() {, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.concurrent.*;, +    public static ExecutorService newCachedThreadPool(TimeValue keepAlive, ThreadFactory threadFactory) {, +        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,, +                keepAlive.millis(), TimeUnit.MILLISECONDS,, +                new SynchronousQueue<Runnable>(),, +                threadFactory);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    if (!nodesDelta.removedNodes().isEmpty()) {, +                        threadPool.cached().execute(new Runnable() {, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.concurrent.*;, +    public static ExecutorService newCachedThreadPool(TimeValue keepAlive, ThreadFactory threadFactory) {, +        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,, +                keepAlive.millis(), TimeUnit.MILLISECONDS,, +                new SynchronousQueue<Runnable>(),, +                threadFactory);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/TransferThreadPoolExecutor.java, + * A thread pool based on {@link org.elasticsearch.common.util.concurrent.jsr166y.TransferQueue}., + *, + * <p>Limited compared to ExecutorServer in what it does, but focused on speed., + *, +                            + TimeUnit.NANOSECONDS.toSeconds(blockingTime) + "s for task [" + command.getClass() + "] to be executed.");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    if (!nodesDelta.removedNodes().isEmpty()) {, +                        threadPool.cached().execute(new Runnable() {, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.concurrent.*;, +    public static ExecutorService newCachedThreadPool(TimeValue keepAlive, ThreadFactory threadFactory) {, +        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,, +                keepAlive.millis(), TimeUnit.MILLISECONDS,, +                new SynchronousQueue<Runnable>(),, +                threadFactory);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/TransferThreadPoolExecutor.java, + * A thread pool based on {@link org.elasticsearch.common.util.concurrent.jsr166y.TransferQueue}., + *, + * <p>Limited compared to ExecutorServer in what it does, but focused on speed., + *, +                            + TimeUnit.NANOSECONDS.toSeconds(blockingTime) + "s for task [" + command.getClass() + "] to be executed.");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    if (!nodesDelta.removedNodes().isEmpty()) {, +                        threadPool.cached().execute(new Runnable() {, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.concurrent.*;, +    public static ExecutorService newCachedThreadPool(TimeValue keepAlive, ThreadFactory threadFactory) {, +        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,, +                keepAlive.millis(), TimeUnit.MILLISECONDS,, +                new SynchronousQueue<Runnable>(),, +                threadFactory);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/TransferThreadPoolExecutor.java, + * A thread pool based on {@link org.elasticsearch.common.util.concurrent.jsr166y.TransferQueue}., + *, + * <p>Limited compared to ExecutorServer in what it does, but focused on speed., + *, +                            + TimeUnit.NANOSECONDS.toSeconds(blockingTime) + "s for task [" + command.getClass() + "] to be executed.");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPoolModule.java, +        return ImmutableList.of(Modules.createModule(settings.getAsClass("threadpool.type", CachedThreadPoolModule.class, "org.elasticsearch.threadpool.", "ThreadPoolModule"), settings));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    if (!nodesDelta.removedNodes().isEmpty()) {, +                        threadPool.cached().execute(new Runnable() {, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.concurrent.*;, +    public static ExecutorService newCachedThreadPool(TimeValue keepAlive, ThreadFactory threadFactory) {, +        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,, +                keepAlive.millis(), TimeUnit.MILLISECONDS,]