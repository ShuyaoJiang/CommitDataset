[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +        return HttpHeaderValues.CLOSE.contentEqualsIgnoreCase(nettyRequest.headers().get(HttpHeaderNames.CONNECTION)) ||, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +        return HttpHeaderValues.CLOSE.contentEqualsIgnoreCase(nettyRequest.headers().get(HttpHeaderNames.CONNECTION)) ||, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpChannelTests.java, +import io.netty.channel.embedded.EmbeddedChannel;, +import io.netty.handler.codec.http.HttpHeaderValues;, +    public void testConnectionClose() throws Exception {, +        final Settings settings = Settings.builder().build();, +        try (Netty4HttpServerTransport httpServerTransport =, +                 new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool)) {, +            httpServerTransport.start();, +            final FullHttpRequest httpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/");, +            httpRequest.headers().add(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);, +            final EmbeddedChannel embeddedChannel = new EmbeddedChannel();, +            final Netty4HttpRequest request = new Netty4HttpRequest(httpRequest, embeddedChannel);, +, +            // send a response, the channel should close, +            assertTrue(embeddedChannel.isOpen());, +            final Netty4HttpChannel channel =, +                new Netty4HttpChannel(httpServerTransport, request, null, randomBoolean(), threadPool.getThreadContext());, +            final TestResponse resp = new TestResponse();, +            channel.sendResponse(resp);, +            assertFalse(embeddedChannel.isOpen());, +        }, +    }, +]