[+++ b/test/framework/src/main/java/org/elasticsearch/test/junit/listeners/LoggingListener.java, +            if (loggerAndLevelArray.length == 2) {, +            } else {, +                throw new IllegalArgumentException("invalid test logging annotation [" + loggerAndLevel + "]");, +++ b/test/framework/src/main/java/org/elasticsearch/test/junit/listeners/LoggingListener.java, +            if (loggerAndLevelArray.length == 2) {, +            } else {, +                throw new IllegalArgumentException("invalid test logging annotation [" + loggerAndLevel + "]");, +++ b/test/framework/src/test/java/org/elasticsearch/test/test/LoggingListenerTests.java, +    public void testInvalidClassTestLoggingAnnotation() throws Exception {, +        final LoggingListener loggingListener = new LoggingListener();, +, +        final Description suiteDescription = Description.createSuiteDescription(InvalidClass.class);, +, +        final IllegalArgumentException e =, +            expectThrows(IllegalArgumentException.class, () -> loggingListener.testRunStarted(suiteDescription));, +        assertThat(e.getMessage(), equalTo("invalid test logging annotation [abc]"));, +    }, +, +    public void testInvalidMethodTestLoggingAnnotation() throws Exception {, +        final LoggingListener loggingListener = new LoggingListener();, +, +        final Description suiteDescription = Description.createSuiteDescription(InvalidMethod.class);, +, +        loggingListener.testRunStarted(suiteDescription);, +, +        final Method method = InvalidMethod.class.getMethod("invalidMethod");, +        final TestLogging annotation = method.getAnnotation(TestLogging.class);, +        Description testDescription = Description.createTestDescription(InvalidMethod.class, "invalidMethod", annotation);, +        final IllegalArgumentException e =, +            expectThrows(IllegalArgumentException.class, () -> loggingListener.testStarted(testDescription));, +        assertThat(e.getMessage(), equalTo("invalid test logging annotation [abc:INFO:WARN]"));, +    }, +, +     * Dummy class used to create a JUnit suite description that has the {@link TestLogging} annotation., +     * Dummy class used to create a JUnit suite description that doesn't have the {@link TestLogging} annotation, but its test methods have, +     * it., +        public void annotatedTestMethod() {, +, +        }, +        public void annotatedTestMethod2() {, +, +        }, +, +    }, +, +    /**, +     * Dummy class with an invalid {@link TestLogging} annotation., +     */, +    @TestLogging("abc"), +    public static class InvalidClass {, +, +    }, +, +    /**, +     * Dummy class with an invalid {@link TestLogging} annotation on a method., +     */, +    public static class InvalidMethod {, +, +        @SuppressWarnings("unused"), +        @TestLogging("abc:INFO:WARN"), +        public void invalidMethod() {, +, +        }]