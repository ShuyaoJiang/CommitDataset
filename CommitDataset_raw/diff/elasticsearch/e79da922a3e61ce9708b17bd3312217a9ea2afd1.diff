[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/dataframe/transforms/DataFrameTransformState.java, +    private static final ParseField INDEXER_STATE = new ParseField("indexer_state");, +    private static final ParseField TASK_STATE = new ParseField("task_state");, +                    args -> new DataFrameTransformState((DataFrameTransformTaskState) args[0],, +                        (IndexerState) args[1],, +                        (HashMap<String, Object>) args[2],, +                        (long) args[3]));, +        PARSER.declareField(constructorArg(),, +            p -> DataFrameTransformTaskState.fromString(p.text()),, +            TASK_STATE,, +            ObjectParser.ValueType.STRING);, +        PARSER.declareField(constructorArg(), p -> IndexerState.fromString(p.text()), INDEXER_STATE, ObjectParser.ValueType.STRING);, +    private final DataFrameTransformTaskState taskState;, +    private final IndexerState indexerState;, +    public DataFrameTransformState(DataFrameTransformTaskState taskState,, +                                   IndexerState indexerState,, +                                   @Nullable Map<String, Object> position,, +                                   long generation) {, +        this.taskState = taskState;, +        this.indexerState = indexerState;, +        return indexerState;, +    }, +, +    public DataFrameTransformTaskState getTaskState() {, +        return taskState;, +        return Objects.equals(this.taskState, that.taskState) &&, +            Objects.equals(this.indexerState, that.indexerState) &&, +            Objects.equals(this.currentPosition, that.currentPosition) &&, +            this.generation == that.generation;, +        return Objects.hash(taskState, indexerState, currentPosition, generation);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/dataframe/transforms/DataFrameTransformState.java, +    private static final ParseField INDEXER_STATE = new ParseField("indexer_state");, +    private static final ParseField TASK_STATE = new ParseField("task_state");, +                    args -> new DataFrameTransformState((DataFrameTransformTaskState) args[0],, +                        (IndexerState) args[1],, +                        (HashMap<String, Object>) args[2],, +                        (long) args[3]));, +        PARSER.declareField(constructorArg(),, +            p -> DataFrameTransformTaskState.fromString(p.text()),, +            TASK_STATE,, +            ObjectParser.ValueType.STRING);, +        PARSER.declareField(constructorArg(), p -> IndexerState.fromString(p.text()), INDEXER_STATE, ObjectParser.ValueType.STRING);, +    private final DataFrameTransformTaskState taskState;, +    private final IndexerState indexerState;, +    public DataFrameTransformState(DataFrameTransformTaskState taskState,, +                                   IndexerState indexerState,, +                                   @Nullable Map<String, Object> position,, +                                   long generation) {, +        this.taskState = taskState;, +        this.indexerState = indexerState;, +        return indexerState;, +    }, +, +    public DataFrameTransformTaskState getTaskState() {, +        return taskState;, +        return Objects.equals(this.taskState, that.taskState) &&, +            Objects.equals(this.indexerState, that.indexerState) &&, +            Objects.equals(this.currentPosition, that.currentPosition) &&, +            this.generation == that.generation;, +        return Objects.hash(taskState, indexerState, currentPosition, generation);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/dataframe/transforms/DataFrameTransformTaskState.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client.dataframe.transforms;, +, +import java.util.Locale;, +, +public enum DataFrameTransformTaskState {, +    STOPPED, STARTED, FAILED;, +, +    public static DataFrameTransformTaskState fromString(String name) {, +        return valueOf(name.trim().toUpperCase(Locale.ROOT));, +    }, +, +    public String value() {, +        return name().toLowerCase(Locale.ROOT);, +    }, +}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/dataframe/transforms/DataFrameTransformState.java, +    private static final ParseField INDEXER_STATE = new ParseField("indexer_state");, +    private static final ParseField TASK_STATE = new ParseField("task_state");, +                    args -> new DataFrameTransformState((DataFrameTransformTaskState) args[0],, +                        (IndexerState) args[1],]