[+++ b/docs/reference/search.asciidoc, +, +include::search/termvectors.asciidoc[], +++ b/docs/reference/search.asciidoc, +, +include::search/termvectors.asciidoc[], +++ b/docs/reference/search/termvectors.asciidoc, +[[search-termvectors]], +== Term Vectors, +, +added[1.00.Beta], +, +Returns information and statistics on terms in the fields of a, +particular document as stored in the index., +, +[source,js], +--------------------------------------------------, +curl -XGET 'http://localhost:9200/twitter/tweet/1/_termvector?pretty=true', +--------------------------------------------------, +, +Optionally, you can specify the fields for which the information is, +retrieved either with a parameter in the url, +, +[source,js], +--------------------------------------------------, +curl -XGET 'http://localhost:9200/twitter/tweet/1/_termvector?fields=text,...', +--------------------------------------------------, +, +or adding by adding the requested fields in the request body (see, +example below). , +, +[float], +=== Return values, +, +Three types of values can be requested: _term information_, _term statistics_, +and _field statistics_. By default, all term information and field , +statistics are returned for all fields but no term statistics., +, +[float], +==== Term information, +, + * term frequency in the field (always returned) , + * term positions (`positions` : true) , + * start and end offsets (`offsets` : true) , + * term payloads (`payloads` : true), as base64 encoded bytes , +, +If the requested information wasn't stored in the index, it will be, +omitted without further warning. See <<mapping-types,type mapping>> , +for how to configure your index to store term vectors. , +, +[float], +==== Term statistics, +, +Setting `term_statistics` to `true` (default is `false`) will, +return , +, + * total term frequency (how often a term occurs in all documents) +, + * document frequency (the number of documents containing the current, +   term) , +, +By default these values are not returned since term statistics can, +have a serious performance impact. , +, +[float], +==== Field statistics, +, +Setting `field_statistics` to `false` (default is `true`) will, +omit :, +, + * document count (how many documents contain this field) , + * sum of document frequencies (the sum of document frequencies for all, +   terms in this field) , + * sum of total term frequencies (the sum of total term frequencies of, +   each term in this field) , +, +[float], +=== Behaviour, +, +The term and field statistics are not accurate. Deleted documents, +are not taken into account. The information is only retrieved for the, +shard the requested document resides in. The term and field statistics, +are therefore only useful as relative measures whereas the absolute, +numbers have no meaning in this context. , +, +[float], +=== Example , +, +First, we create an index that stores term vectors, payloads etc. :, +, +[source,js], +--------------------------------------------------, +curl -s -XPUT 'http://localhost:9200/twitter/' -d '{, +  "mappings": {, +    "tweet": {, +      "properties": {, +        "text": {, +          "type": "string",, +          "term_vector": "with_positions_offsets_payloads",, +          "store" : "yes",, +          "index_analyzer" : "fulltext_analyzer"]