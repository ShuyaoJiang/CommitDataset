[+++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +    private final boolean readOnly;, +, +        this.readOnly = settings.getAsBoolean("readonly", false);, +        if (!this.readOnly) {, +        }, +        if (!readOnly) {, +        }, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +    private final boolean readOnly;, +, +        this.readOnly = settings.getAsBoolean("readonly", false);, +        if (!this.readOnly) {, +        }, +        if (!readOnly) {, +        }, +++ b/core/src/test/java/org/elasticsearch/common/blobstore/FsBlobStoreTests.java, +import org.elasticsearch.common.bytes.BytesArray;, +import java.nio.file.Files;, +, +    public void testReadOnly() throws Exception {, +        Settings settings = Settings.builder().put("readonly", true).build();, +        Path tempDir = createTempDir();, +        Path path = tempDir.resolve("bar");, +, +        try (FsBlobStore store = new FsBlobStore(settings, path)) {, +            assertFalse(Files.exists(path));, +            BlobPath blobPath = BlobPath.cleanPath().add("foo");, +            store.blobContainer(blobPath);, +            Path storePath = store.path();, +            for (String d : blobPath) {, +                storePath = storePath.resolve(d);, +            }, +            assertFalse(Files.exists(storePath));, +        }, +, +        settings = randomBoolean() ? Settings.EMPTY : Settings.builder().put("readonly", false).build();, +        try (FsBlobStore store = new FsBlobStore(settings, path)) {, +            assertTrue(Files.exists(path));, +            BlobPath blobPath = BlobPath.cleanPath().add("foo");, +            BlobContainer container = store.blobContainer(blobPath);, +            Path storePath = store.path();, +            for (String d : blobPath) {, +                storePath = storePath.resolve(d);, +            }, +            assertTrue(Files.exists(storePath));, +            assertTrue(Files.isDirectory(storePath));, +, +            byte[] data = randomBytes(randomIntBetween(10, scaledRandomIntBetween(1024, 1 << 16)));, +            writeBlob(container, "test", new BytesArray(data));, +            assertArrayEquals(readBlobFully(container, "test", data.length), data);, +            assertTrue(container.blobExists("test"));, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +    private final boolean readOnly;, +, +        this.readOnly = settings.getAsBoolean("readonly", false);, +        if (!this.readOnly) {, +        }, +        if (!readOnly) {, +        }, +++ b/core/src/test/java/org/elasticsearch/common/blobstore/FsBlobStoreTests.java, +import org.elasticsearch.common.bytes.BytesArray;, +import java.nio.file.Files;, +, +    public void testReadOnly() throws Exception {, +        Settings settings = Settings.builder().put("readonly", true).build();, +        Path tempDir = createTempDir();, +        Path path = tempDir.resolve("bar");, +, +        try (FsBlobStore store = new FsBlobStore(settings, path)) {, +            assertFalse(Files.exists(path));, +            BlobPath blobPath = BlobPath.cleanPath().add("foo");, +            store.blobContainer(blobPath);, +            Path storePath = store.path();, +            for (String d : blobPath) {, +                storePath = storePath.resolve(d);, +            }, +            assertFalse(Files.exists(storePath));, +        }, +, +        settings = randomBoolean() ? Settings.EMPTY : Settings.builder().put("readonly", false).build();, +        try (FsBlobStore store = new FsBlobStore(settings, path)) {, +            assertTrue(Files.exists(path));, +            BlobPath blobPath = BlobPath.cleanPath().add("foo");, +            BlobContainer container = store.blobContainer(blobPath);, +            Path storePath = store.path();, +            for (String d : blobPath) {, +                storePath = storePath.resolve(d);, +            }, +            assertTrue(Files.exists(storePath));, +            assertTrue(Files.isDirectory(storePath));, +, +            byte[] data = randomBytes(randomIntBetween(10, scaledRandomIntBetween(1024, 1 << 16)));, +            writeBlob(container, "test", new BytesArray(data));, +            assertArrayEquals(readBlobFully(container, "test", data.length), data);, +            assertTrue(container.blobExists("test"));, +        }, +    }]