[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +                modules.add(b -> b.bind(ThreadPool.class).toInstance(threadPool));, +                final List<Setting<?>> additionalSettings = new ArrayList<>();, +                final List<String> additionalSettingsFilter = new ArrayList<>();, +                additionalSettings.addAll(pluginsService.getPluginSettings());, +                additionalSettingsFilter.addAll(pluginsService.getPluginSettingsFilter());, +                for (final ExecutorBuilder<?> builder : threadPool.builders()) {, +                    additionalSettings.addAll(builder.getRegisteredSettings());, +                }, +                SettingsModule settingsModule = new SettingsModule(settings, additionalSettings, additionalSettingsFilter);, +                CircuitBreakerService circuitBreakerService = Node.createCircuitBreakerService(settingsModule.getSettings(),, +                    settingsModule.getClusterSettings());, +                modules.add(settingsModule);, +                modules.add((b -> b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +                modules.add(b -> b.bind(ThreadPool.class).toInstance(threadPool));, +                final List<Setting<?>> additionalSettings = new ArrayList<>();, +                final List<String> additionalSettingsFilter = new ArrayList<>();, +                additionalSettings.addAll(pluginsService.getPluginSettings());, +                additionalSettingsFilter.addAll(pluginsService.getPluginSettingsFilter());, +                for (final ExecutorBuilder<?> builder : threadPool.builders()) {, +                    additionalSettings.addAll(builder.getRegisteredSettings());, +                }, +                SettingsModule settingsModule = new SettingsModule(settings, additionalSettings, additionalSettingsFilter);, +                CircuitBreakerService circuitBreakerService = Node.createCircuitBreakerService(settingsModule.getSettings(),, +                    settingsModule.getClusterSettings());, +                modules.add(settingsModule);, +                modules.add((b -> b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING,, +                    Node.BREAKER_TYPE_KEY, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +                modules.add(b -> b.bind(ThreadPool.class).toInstance(threadPool));, +                final List<Setting<?>> additionalSettings = new ArrayList<>();, +                final List<String> additionalSettingsFilter = new ArrayList<>();, +                additionalSettings.addAll(pluginsService.getPluginSettings());, +                additionalSettingsFilter.addAll(pluginsService.getPluginSettingsFilter());, +                for (final ExecutorBuilder<?> builder : threadPool.builders()) {, +                    additionalSettings.addAll(builder.getRegisteredSettings());, +                }, +                SettingsModule settingsModule = new SettingsModule(settings, additionalSettings, additionalSettingsFilter);, +                CircuitBreakerService circuitBreakerService = Node.createCircuitBreakerService(settingsModule.getSettings(),, +                    settingsModule.getClusterSettings());, +                modules.add(settingsModule);, +                modules.add((b -> b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING,, +                    Node.BREAKER_TYPE_KEY, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +         * iff this setting is shared with more than one module ie. can be defined multiple times., +         */, +        Shared,, +, +        /**, +     * Returns <code>true</code> if this setting is shared with more than one other module or plugin, otherwise <code>false</code>, +     */, +    public boolean isShared() {, +        return properties.contains(Property.Shared);, +    }, +, +    /**, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +                modules.add(b -> b.bind(ThreadPool.class).toInstance(threadPool));, +                final List<Setting<?>> additionalSettings = new ArrayList<>();, +                final List<String> additionalSettingsFilter = new ArrayList<>();, +                additionalSettings.addAll(pluginsService.getPluginSettings());, +                additionalSettingsFilter.addAll(pluginsService.getPluginSettingsFilter());, +                for (final ExecutorBuilder<?> builder : threadPool.builders()) {, +                    additionalSettings.addAll(builder.getRegisteredSettings());, +                }, +                SettingsModule settingsModule = new SettingsModule(settings, additionalSettings, additionalSettingsFilter);, +                CircuitBreakerService circuitBreakerService = Node.createCircuitBreakerService(settingsModule.getSettings(),, +                    settingsModule.getClusterSettings());, +                modules.add(settingsModule);, +                modules.add((b -> b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    ThreadPool.ESTIMATED_TIME_INTERVAL_SETTING,, +                    Node.BREAKER_TYPE_KEY, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java]