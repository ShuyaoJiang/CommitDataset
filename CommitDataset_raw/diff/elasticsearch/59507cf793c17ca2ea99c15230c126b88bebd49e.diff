[+++ b/docs/reference/query-dsl/queries/function-score-query.asciidoc, +    "boost_mode": "(multiply|replace|...)",, +    "min_score" : number, +The newly computed score is combined with the score of the, +coming[1.5.0], +, +By default, modifying the score does not change which documents match. To exclude, +documents that do not meet a certain score threshold the `min_score` parameter can be set to the desired score threshold.  , +++ b/docs/reference/query-dsl/queries/function-score-query.asciidoc, +    "boost_mode": "(multiply|replace|...)",, +    "min_score" : number, +The newly computed score is combined with the score of the, +coming[1.5.0], +, +By default, modifying the score does not change which documents match. To exclude, +documents that do not meet a certain score threshold the `min_score` parameter can be set to the desired score threshold.  , +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/CustomBoostFactorScorer.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.search.function;, +, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.search.Weight;, +, +import java.io.IOException;, +, +abstract class CustomBoostFactorScorer extends Scorer {, +, +    final float subQueryBoost;, +    final Scorer scorer;, +    final float maxBoost;, +    final CombineFunction scoreCombiner;, +, +    Float minScore;, +    NextDoc nextDoc;, +, +    CustomBoostFactorScorer(Weight w, Scorer scorer, float maxBoost, CombineFunction scoreCombiner, Float minScore), +            throws IOException {, +        super(w);, +        if (minScore == null) {, +            nextDoc = new AnyNextDoc();, +        } else {, +            nextDoc = new MinScoreNextDoc();, +        }, +        this.subQueryBoost = w.getQuery().getBoost();, +        this.scorer = scorer;, +        this.maxBoost = maxBoost;, +        this.scoreCombiner = scoreCombiner;, +        this.minScore = minScore;, +    }, +, +    @Override, +    public int docID() {, +        return scorer.docID();, +    }, +, +    @Override, +    public int advance(int target) throws IOException {, +        return nextDoc.advance(target);, +    }, +, +    @Override, +    public int nextDoc() throws IOException {, +        return nextDoc.nextDoc();, +    }, +, +    public abstract float innerScore() throws IOException;, +, +    @Override, +    public float score() throws IOException {, +        return nextDoc.score();, +    }, +, +    @Override, +    public int freq() throws IOException {, +        return scorer.freq();, +    }, +, +    @Override, +    public long cost() {, +        return scorer.cost();, +    }, +]