[+++ b/marvel/src/test/java/org/elasticsearch/marvel/MarvelLauncher.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.node.MockNode;, +import org.elasticsearch.node.Node;, +, +import java.util.Arrays;, +import java.util.concurrent.CountDownLatch;, +        Settings.Builder settings = Settings.builder();, +        settings.put("script.inline", "on");, +        settings.put("security.manager.enabled", "false");, +        settings.put("plugins.load_classpath_plugins", "false");, +        settings.put("cluster.name", MarvelLauncher.class.getSimpleName());, +        final CountDownLatch latch = new CountDownLatch(1);, +        final Node node = new MockNode(settings.build(), false, Version.CURRENT, Arrays.asList(MarvelPlugin.class, LicensePlugin.class));, +        Runtime.getRuntime().addShutdownHook(new Thread() {, +, +            @Override, +            public void run() {, +                node.close();, +                latch.countDown();, +            }, +        });, +        node.start();, +        latch.await();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/MarvelLauncher.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.node.MockNode;, +import org.elasticsearch.node.Node;, +, +import java.util.Arrays;, +import java.util.concurrent.CountDownLatch;, +        Settings.Builder settings = Settings.builder();, +        settings.put("script.inline", "on");, +        settings.put("security.manager.enabled", "false");, +        settings.put("plugins.load_classpath_plugins", "false");, +        settings.put("cluster.name", MarvelLauncher.class.getSimpleName());, +        final CountDownLatch latch = new CountDownLatch(1);, +        final Node node = new MockNode(settings.build(), false, Version.CURRENT, Arrays.asList(MarvelPlugin.class, LicensePlugin.class));, +        Runtime.getRuntime().addShutdownHook(new Thread() {, +, +            @Override, +            public void run() {, +                node.close();, +                latch.countDown();, +            }, +        });, +        node.start();, +        latch.await();, +++ b/watcher/src/test/java/org/elasticsearch/watcher/WatcherF.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.node.MockNode;, +import org.elasticsearch.node.Node;, +, +import java.util.Arrays;, +import java.util.concurrent.CountDownLatch;, +        Settings.Builder settings = Settings.builder();, +        settings.put("http.cors.enabled", "true");, +        settings.put("http.cors.allow-origin", "*");, +        settings.put("script.inline", "on");, +        settings.put("shield.enabled", "false");, +        settings.put("security.manager.enabled", "false");, +        settings.put("cluster.name", WatcherF.class.getSimpleName());, +        settings.put("watcher.actions.hipchat.service.account.integration.profile", "integration");, +        settings.put("watcher.actions.hipchat.service.account.integration.auth_token", "huuS9v7ccuOy3ZBWWWr1vt8Lqu3sQnLUE81nrLZU");, +        settings.put("watcher.actions.hipchat.service.account.integration.room", "test-watcher");, +        settings.put("watcher.actions.hipchat.service.account.user.profile", "user");, +        settings.put("watcher.actions.hipchat.service.account.user.auth_token", "FYVx16oDH78ZW9r13wtXbcszyoyA7oX5tiMWg9X0");, +        settings.put("watcher.actions.hipchat.service.account.v1.profile", "v1");, +        settings.put("watcher.actions.hipchat.service.account.v1.auth_token", "a734baf62df618b96dda55b323fc30");, +        final CountDownLatch latch = new CountDownLatch(1);, +        final Node node = new MockNode(settings.build(), false, Version.CURRENT, Arrays.asList(WatcherPlugin.class, LicensePlugin.class));, +        Runtime.getRuntime().addShutdownHook(new Thread() {, +            @Override, +            public void run() {, +                node.close();, +                latch.countDown();, +            }, +        });, +        node.start();, +        latch.await();]