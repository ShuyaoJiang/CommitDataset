[+++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +        assert Math.abs(score - score(path, candidates)) < 0.00001 : "cur_score=" + score + ", path_score=" + score(path,candidates);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +        assert Math.abs(score - score(path, candidates)) < 0.00001 : "cur_score=" + score + ", path_score=" + score(path,candidates);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/LaplaceScorer.java, +    protected double scoreUnigram(Candidate word) throws IOException {, +        return (alpha + frequency(word.term)) / (vocabluarySize + alpha * numTerms);, +    }, +, +    @Override, +        return (alpha + frequency(spare.get())) / (w_1.frequency + alpha * numTerms);, +        return (alpha + trigramCount) / (frequency(spare.get()) + alpha * numTerms);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +        assert Math.abs(score - score(path, candidates)) < 0.00001 : "cur_score=" + score + ", path_score=" + score(path,candidates);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/LaplaceScorer.java, +    protected double scoreUnigram(Candidate word) throws IOException {, +        return (alpha + frequency(word.term)) / (vocabluarySize + alpha * numTerms);, +    }, +, +    @Override, +        return (alpha + frequency(spare.get())) / (w_1.frequency + alpha * numTerms);, +        return (alpha + trigramCount) / (frequency(spare.get()) + alpha * numTerms);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/WordScorer.java, +    protected final long numTerms;, +        // terms.size() might be -1 if it's a MultiTerms instance. In that case,, +        // use reader.maxDoc() as an approximation. This also protects from, +        // division by zero, by scoreUnigram., +        final long nTerms = terms.size();, +        this.numTerms = nTerms == -1 ? reader.maxDoc() : nTerms;, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +        assert Math.abs(score - score(path, candidates)) < 0.00001 : "cur_score=" + score + ", path_score=" + score(path,candidates);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/LaplaceScorer.java, +    protected double scoreUnigram(Candidate word) throws IOException {, +        return (alpha + frequency(word.term)) / (vocabluarySize + alpha * numTerms);, +    }, +, +    @Override, +        return (alpha + frequency(spare.get())) / (w_1.frequency + alpha * numTerms);, +        return (alpha + trigramCount) / (frequency(spare.get()) + alpha * numTerms);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/WordScorer.java, +    protected final long numTerms;, +        // terms.size() might be -1 if it's a MultiTerms instance. In that case,, +        // use reader.maxDoc() as an approximation. This also protects from, +        // division by zero, by scoreUnigram., +        final long nTerms = terms.size();, +        this.numTerms = nTerms == -1 ? reader.maxDoc() : nTerms;, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +          "score" : 0.48614594]