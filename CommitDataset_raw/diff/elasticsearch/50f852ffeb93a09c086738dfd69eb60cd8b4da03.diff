[+++ b/pom.xml, +                            <excludes>, +                                <!-- start exclude for test GC simulation using Thread.suspend -->, +                                <exclude>org/elasticsearch/test/disruption/LongGCDisruption.class</exclude>, +                                <!-- end exclude for Channels -->, +                            </excludes>, +++ b/pom.xml, +                            <excludes>, +                                <!-- start exclude for test GC simulation using Thread.suspend -->, +                                <exclude>org/elasticsearch/test/disruption/LongGCDisruption.class</exclude>, +                                <!-- end exclude for Channels -->, +                            </excludes>, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +, +    /**, +     * returns true if there is a currently a background thread active for (re)joining the cluster, +     * used for testing., +     */, +    public boolean joiningCluster() {, +        return currentJoinThread != null;, +    }, +, +                        logger.trace("failed to send join request to master [{}]", t, masterNode);, +++ b/pom.xml, +                            <excludes>, +                                <!-- start exclude for test GC simulation using Thread.suspend -->, +                                <exclude>org/elasticsearch/test/disruption/LongGCDisruption.class</exclude>, +                                <!-- end exclude for Channels -->, +                            </excludes>, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +, +    /**, +     * returns true if there is a currently a background thread active for (re)joining the cluster, +     * used for testing., +     */, +    public boolean joiningCluster() {, +        return currentJoinThread != null;, +    }, +, +                        logger.trace("failed to send join request to master [{}]", t, masterNode);, +++ b/src/test/java/org/elasticsearch/discovery/ClusterDiscoveryConfiguration.java, +            String mode = baseSettings.get("node.mode", InternalTestCluster.NODE_MODE);, +            if (mode.equals("local")) {, +++ b/pom.xml, +                            <excludes>, +                                <!-- start exclude for test GC simulation using Thread.suspend -->, +                                <exclude>org/elasticsearch/test/disruption/LongGCDisruption.class</exclude>, +                                <!-- end exclude for Channels -->, +                            </excludes>, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +, +    /**, +     * returns true if there is a currently a background thread active for (re)joining the cluster, +     * used for testing., +     */, +    public boolean joiningCluster() {, +        return currentJoinThread != null;, +    }, +, +                        logger.trace("failed to send join request to master [{}]", t, masterNode);, +++ b/src/test/java/org/elasticsearch/discovery/ClusterDiscoveryConfiguration.java, +            String mode = baseSettings.get("node.mode", InternalTestCluster.NODE_MODE);, +            if (mode.equals("local")) {, +++ /dev/null, +++ b/pom.xml, +                            <excludes>, +                                <!-- start exclude for test GC simulation using Thread.suspend -->, +                                <exclude>org/elasticsearch/test/disruption/LongGCDisruption.class</exclude>, +                                <!-- end exclude for Channels -->, +                            </excludes>, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +, +    /**, +     * returns true if there is a currently a background thread active for (re)joining the cluster, +     * used for testing., +     */, +    public boolean joiningCluster() {, +        return currentJoinThread != null;, +    }, +, +                        logger.trace("failed to send join request to master [{}]", t, masterNode);, +++ b/src/test/java/org/elasticsearch/discovery/ClusterDiscoveryConfiguration.java, +            String mode = baseSettings.get("node.mode", InternalTestCluster.NODE_MODE);, +            if (mode.equals("local")) {, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptions.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY]