[+++ b/server/src/main/java/org/elasticsearch/common/settings/Settings.java, +        public Builder put(final String setting, final long value, final TimeUnit timeUnit) {, +            put(setting, new TimeValue(value, timeUnit));, +++ b/server/src/main/java/org/elasticsearch/common/settings/Settings.java, +        public Builder put(final String setting, final long value, final TimeUnit timeUnit) {, +            put(setting, new TimeValue(value, timeUnit));, +++ b/server/src/test/java/org/elasticsearch/common/settings/SettingsTests.java, +import java.util.concurrent.TimeUnit;, +    public void testSetByTimeUnit() {, +        final Setting<TimeValue> setting =, +                Setting.timeSetting("key", TimeValue.parseTimeValue(randomTimeValue(0, 24, "h"), "key"), TimeValue.ZERO);, +        final TimeValue expected = new TimeValue(1500, TimeUnit.MICROSECONDS);, +        final Settings settings = Settings.builder().put("key", expected.getMicros(), TimeUnit.MICROSECONDS).build();, +        /*, +         * Previously we would internally convert the duration to a string by converting to milliseconds which could lose precision  (e.g.,, +         * 1500 microseconds would be converted to 1ms). Effectively this test is then asserting that we no longer make this mistake when, +         * doing the internal string conversion. Instead, we convert to a duration using a method that does not lose the original unit., +         */, +        final TimeValue actual = setting.get(settings);, +        assertThat(actual, equalTo(expected));, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/settings/Settings.java, +        public Builder put(final String setting, final long value, final TimeUnit timeUnit) {, +            put(setting, new TimeValue(value, timeUnit));, +++ b/server/src/test/java/org/elasticsearch/common/settings/SettingsTests.java, +import java.util.concurrent.TimeUnit;, +    public void testSetByTimeUnit() {, +        final Setting<TimeValue> setting =, +                Setting.timeSetting("key", TimeValue.parseTimeValue(randomTimeValue(0, 24, "h"), "key"), TimeValue.ZERO);, +        final TimeValue expected = new TimeValue(1500, TimeUnit.MICROSECONDS);, +        final Settings settings = Settings.builder().put("key", expected.getMicros(), TimeUnit.MICROSECONDS).build();, +        /*, +         * Previously we would internally convert the duration to a string by converting to milliseconds which could lose precision  (e.g.,, +         * 1500 microseconds would be converted to 1ms). Effectively this test is then asserting that we no longer make this mistake when, +         * doing the internal string conversion. Instead, we convert to a duration using a method that does not lose the original unit., +         */, +        final TimeValue actual = setting.get(settings);, +        assertThat(actual, equalTo(expected));, +    }, +, +++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +        assertThat(getSettingsResponse.getSetting("test-idx", "index.refresh_interval"), equalTo("10s"));]