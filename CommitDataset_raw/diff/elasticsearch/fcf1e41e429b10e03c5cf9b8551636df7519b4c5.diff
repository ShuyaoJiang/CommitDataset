[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.http.HttpChannel;, +import org.elasticsearch.http.HttpResponse;, +import java.net.InetSocketAddress;, +public class Netty4HttpChannel implements HttpChannel {, +    Netty4HttpChannel(Channel channel) {, +        this.channel = channel;, +    public void sendResponse(HttpResponse response, ActionListener<Void> listener) {, +        ChannelPromise writePromise = channel.newPromise();, +        writePromise.addListener(f -> {, +            if (f.isSuccess()) {, +                listener.onResponse(null);, +            } else {, +                final Throwable cause = f.cause();, +                Netty4Utils.maybeDie(cause);, +                if (cause instanceof Error) {, +                    listener.onFailure(new Exception(cause));, +                } else {, +                    listener.onFailure((Exception) cause);, +                }, +            }, +        });, +        channel.writeAndFlush(response, writePromise);, +    public InetSocketAddress getLocalAddress() {, +        return (InetSocketAddress) channel.localAddress();, +    @Override, +    public InetSocketAddress getRemoteAddress() {, +        return (InetSocketAddress) channel.remoteAddress();, +    @Override, +    public void close() {, +        channel.close();, +    public Channel getNettyChannel() {, +        return channel;, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.http.HttpChannel;, +import org.elasticsearch.http.HttpResponse;, +import java.net.InetSocketAddress;, +public class Netty4HttpChannel implements HttpChannel {, +    Netty4HttpChannel(Channel channel) {, +        this.channel = channel;, +    public void sendResponse(HttpResponse response, ActionListener<Void> listener) {, +        ChannelPromise writePromise = channel.newPromise();, +        writePromise.addListener(f -> {, +            if (f.isSuccess()) {, +                listener.onResponse(null);, +            } else {, +                final Throwable cause = f.cause();, +                Netty4Utils.maybeDie(cause);, +                if (cause instanceof Error) {, +                    listener.onFailure(new Exception(cause));, +                } else {, +                    listener.onFailure((Exception) cause);, +                }, +            }, +        });, +        channel.writeAndFlush(response, writePromise);, +    public InetSocketAddress getLocalAddress() {, +        return (InetSocketAddress) channel.localAddress();, +    @Override, +    public InetSocketAddress getRemoteAddress() {, +        return (InetSocketAddress) channel.remoteAddress();, +    @Override, +    public void close() {, +        channel.close();, +    public Channel getNettyChannel() {, +        return channel;, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpPipeliningHandler.java, +                ctx.write(readyResponse.v1(), readyResponse.v2());, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpChannel.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.http.HttpChannel;, +import org.elasticsearch.http.HttpResponse;, +import java.net.InetSocketAddress;, +public class Netty4HttpChannel implements HttpChannel {, +    Netty4HttpChannel(Channel channel) {, +        this.channel = channel;, +    public void sendResponse(HttpResponse response, ActionListener<Void> listener) {, +        ChannelPromise writePromise = channel.newPromise();, +        writePromise.addListener(f -> {, +            if (f.isSuccess()) {, +                listener.onResponse(null);, +            } else {, +                final Throwable cause = f.cause();, +                Netty4Utils.maybeDie(cause);, +                if (cause instanceof Error) {, +                    listener.onFailure(new Exception(cause));, +                } else {, +                    listener.onFailure((Exception) cause);, +                }, +            }, +        });, +        channel.writeAndFlush(response, writePromise);, +    public InetSocketAddress getLocalAddress() {, +        return (InetSocketAddress) channel.localAddress();, +    @Override, +    public InetSocketAddress getRemoteAddress() {, +        return (InetSocketAddress) channel.remoteAddress();, +    @Override]