[+++ b/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/indexlifecycle/TimeSeriesLifecycleActionsIT.java, +import org.hamcrest.Matchers;, +    public void testDeletePolicyInUse() throws IOException {, +        String managedIndex1 = randomAlphaOfLength(7).toLowerCase(Locale.ROOT);, +        String managedIndex2 = randomAlphaOfLength(8).toLowerCase(Locale.ROOT);, +        String unmanagedIndex = randomAlphaOfLength(9).toLowerCase(Locale.ROOT);, +        String managedByOtherPolicyIndex = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);, +, +        createNewSingletonPolicy("delete", new DeleteAction(), TimeValue.timeValueHours(12));, +        String originalPolicy = policy;, +        String otherPolicy = randomValueOtherThan(policy, () -> randomAlphaOfLength(5));, +        policy = otherPolicy;, +        createNewSingletonPolicy("delete", new DeleteAction(), TimeValue.timeValueHours(13));, +, +        createIndexWithSettingsNoAlias(managedIndex1, Settings.builder(), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,10)), +            .put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), originalPolicy));, +        createIndexWithSettingsNoAlias(managedIndex2, Settings.builder(), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,10)), +            .put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), originalPolicy));, +        createIndexWithSettingsNoAlias(unmanagedIndex, Settings.builder(), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,10)));, +        createIndexWithSettingsNoAlias(managedByOtherPolicyIndex, Settings.builder(), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,10)), +            .put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), otherPolicy));, +, +        Request deleteRequest = new Request("DELETE", "_ilm/policy/" + originalPolicy);, +        ResponseException ex = expectThrows(ResponseException.class, () -> client().performRequest(deleteRequest));, +        assertThat(ex.getCause().getMessage(),, +            Matchers.allOf(, +                containsString("Cannot delete policy [" + originalPolicy + "]. It is in use by one or more indices: ["),, +                containsString(managedIndex1),, +                containsString(managedIndex2),, +                not(containsString(unmanagedIndex)),, +                not(containsString(managedByOtherPolicyIndex))));, +    }, +, +    private void createIndexWithSettingsNoAlias(String index, Settings.Builder settings) throws IOException {, +            + "}");, +        client().performRequest(request);, +        // wait for the shards to initialize, +        ensureGreen(index);, +    }, +, +    private void createIndexWithSettings(String index, Settings.Builder settings) throws IOException {, +        Request request = new Request("PUT", "/" + index);, +, +        request.setJsonEntity("{\n \"settings\": " + Strings.toString(settings.build()), +++ b/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/indexlifecycle/TimeSeriesLifecycleActionsIT.java, +import org.hamcrest.Matchers;, +    public void testDeletePolicyInUse() throws IOException {, +        String managedIndex1 = randomAlphaOfLength(7).toLowerCase(Locale.ROOT);, +        String managedIndex2 = randomAlphaOfLength(8).toLowerCase(Locale.ROOT);, +        String unmanagedIndex = randomAlphaOfLength(9).toLowerCase(Locale.ROOT);, +        String managedByOtherPolicyIndex = randomAlphaOfLength(10).toLowerCase(Locale.ROOT);, +, +        createNewSingletonPolicy("delete", new DeleteAction(), TimeValue.timeValueHours(12));, +        String originalPolicy = policy;, +        String otherPolicy = randomValueOtherThan(policy, () -> randomAlphaOfLength(5));, +        policy = otherPolicy;, +        createNewSingletonPolicy("delete", new DeleteAction(), TimeValue.timeValueHours(13));, +, +        createIndexWithSettingsNoAlias(managedIndex1, Settings.builder(), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,10)), +            .put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), originalPolicy));, +        createIndexWithSettingsNoAlias(managedIndex2, Settings.builder(), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,10)), +            .put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), originalPolicy));, +        createIndexWithSettingsNoAlias(unmanagedIndex, Settings.builder(), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,10)));, +        createIndexWithSettingsNoAlias(managedByOtherPolicyIndex, Settings.builder(), +            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, randomIntBetween(1,10)), +            .put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), otherPolicy));, +, +        Request deleteRequest = new Request("DELETE", "_ilm/policy/" + originalPolicy);, +        ResponseException ex = expectThrows(ResponseException.class, () -> client().performRequest(deleteRequest));, +        assertThat(ex.getCause().getMessage(),, +            Matchers.allOf(, +                containsString("Cannot delete policy [" + originalPolicy + "]. It is in use by one or more indices: ["),, +                containsString(managedIndex1),, +                containsString(managedIndex2),, +                not(containsString(unmanagedIndex)),, +                not(containsString(managedByOtherPolicyIndex))));, +    }, +, +    private void createIndexWithSettingsNoAlias(String index, Settings.Builder settings) throws IOException {, +            + "}");, +        client().performRequest(request);, +        // wait for the shards to initialize, +        ensureGreen(index);, +    }, +, +    private void createIndexWithSettings(String index, Settings.Builder settings) throws IOException {, +        Request request = new Request("PUT", "/" + index);, +, +        request.setJsonEntity("{\n \"settings\": " + Strings.toString(settings.build()), +++ b/x-pack/plugin/ilm/qa/rest/src/test/resources/rest-api-spec/test/ilm/10_basic.yml, +  - match: { error.root_cause.0.reason: "Cannot delete policy [my_timeseries_lifecycle]. It is in use by one or more indices: [my_timeseries_index]" }, +++ b/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/indexlifecycle/TimeSeriesLifecycleActionsIT.java, +import org.hamcrest.Matchers;]