[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/UpdateJobAction.java, +            JobUpdate update = JobUpdate.EXTERNAL_PARSER.apply(parser, null).setJobId(jobId).build();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/UpdateJobAction.java, +            JobUpdate update = JobUpdate.EXTERNAL_PARSER.apply(parser, null).setJobId(jobId).build();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/JobUpdate.java, +    // For internal updates, +    static final ConstructingObjectParser<Builder, Void> INTERNAL_PARSER = new ConstructingObjectParser<>(, +            "job_update", args -> new Builder((String) args[0]));, +, +    // For parsing REST requests, +    public static final ConstructingObjectParser<Builder, Void> EXTERNAL_PARSER = new ConstructingObjectParser<>(, +        for (ConstructingObjectParser<Builder, Void> parser : Arrays.asList(INTERNAL_PARSER, EXTERNAL_PARSER)) {, +            parser.declareString(ConstructingObjectParser.optionalConstructorArg(), Job.ID);, +            parser.declareStringArray(Builder::setGroups, Job.GROUPS);, +            parser.declareStringOrNull(Builder::setDescription, Job.DESCRIPTION);, +            parser.declareObjectArray(Builder::setDetectorUpdates, DetectorUpdate.PARSER, DETECTORS);, +            parser.declareObject(Builder::setModelPlotConfig, ModelPlotConfig.CONFIG_PARSER, Job.MODEL_PLOT_CONFIG);, +            parser.declareObject(Builder::setAnalysisLimits, AnalysisLimits.CONFIG_PARSER, Job.ANALYSIS_LIMITS);, +            parser.declareString((builder, val) -> builder.setBackgroundPersistInterval(, +            parser.declareLong(Builder::setRenormalizationWindowDays, Job.RENORMALIZATION_WINDOW_DAYS);, +            parser.declareLong(Builder::setResultsRetentionDays, Job.RESULTS_RETENTION_DAYS);, +            parser.declareLong(Builder::setModelSnapshotRetentionDays, Job.MODEL_SNAPSHOT_RETENTION_DAYS);, +            parser.declareStringArray(Builder::setCategorizationFilters, AnalysisConfig.CATEGORIZATION_FILTERS);, +            parser.declareField(Builder::setCustomSettings, (p, c) -> p.map(), Job.CUSTOM_SETTINGS, ObjectParser.ValueType.OBJECT);, +        }, +        // These fields should not be set by a REST request, +        INTERNAL_PARSER.declareString(Builder::setModelSnapshotId, Job.MODEL_SNAPSHOT_ID);, +        INTERNAL_PARSER.declareLong(Builder::setEstablishedModelMemory, Job.ESTABLISHED_MODEL_MEMORY);, +        INTERNAL_PARSER.declareString(Builder::setModelSnapshotMinVersion, Job.MODEL_SNAPSHOT_MIN_VERSION);, +        INTERNAL_PARSER.declareString(Builder::setJobVersion, Job.JOB_VERSION);, +    private final Version jobVersion;, +                      @Nullable Version modelSnapshotMinVersion, @Nullable Long establishedModelMemory,, +                      @Nullable Version jobVersion) {, +        this.jobVersion = jobVersion;, +        if (in.getVersion().onOrAfter(Version.V_6_3_0) && in.readBoolean()) {, +            jobVersion = Version.readVersion(in);, +        } else {, +            jobVersion = null;, +        }, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1) && in.readBoolean()) {, +            modelSnapshotMinVersion = Version.readVersion(in);, +        } else {, +            modelSnapshotMinVersion = null;, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_1_0)) {, +            out.writeOptionalLong(establishedModelMemory);, +        }, +            if (jobVersion != null) {, +                out.writeBoolean(true);, +                Version.writeVersion(jobVersion, out);, +            } else {, +                out.writeBoolean(false);, +            }, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +    public Version getJobVersion() {, +        return jobVersion;, +    }, +, +        if (jobVersion != null) {, +            builder.field(Job.JOB_VERSION.getPreferredName(), jobVersion);, +        }, +        if (jobVersion != null) {, +            updateFields.add(Job.JOB_VERSION.getPreferredName());, +        }, +        if (jobVersion != null) {, +            builder.setJobVersion(jobVersion);, +        }, +                && Objects.equals(this.establishedModelMemory, that.establishedModelMemory), +                && Objects.equals(this.jobVersion, that.jobVersion);, +                modelSnapshotId, modelSnapshotMinVersion, establishedModelMemory, jobVersion);, +        private Version jobVersion;, +        public Builder setJobVersion(Version version) {, +            this.jobVersion = version;, +            return this;, +        }, +, +        public Builder setJobVersion(String version) {, +            this.jobVersion = Version.fromString(version);, +            return this;, +        }, +, +                    modelSnapshotId, modelSnapshotMinVersion, establishedModelMemory, jobVersion);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/UpdateJobAction.java, +            JobUpdate update = JobUpdate.EXTERNAL_PARSER.apply(parser, null).setJobId(jobId).build();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/JobUpdate.java, +    // For internal updates, +    static final ConstructingObjectParser<Builder, Void> INTERNAL_PARSER = new ConstructingObjectParser<>(, +            "job_update", args -> new Builder((String) args[0]));, +, +    // For parsing REST requests, +    public static final ConstructingObjectParser<Builder, Void> EXTERNAL_PARSER = new ConstructingObjectParser<>(, +        for (ConstructingObjectParser<Builder, Void> parser : Arrays.asList(INTERNAL_PARSER, EXTERNAL_PARSER)) {, +            parser.declareString(ConstructingObjectParser.optionalConstructorArg(), Job.ID);, +            parser.declareStringArray(Builder::setGroups, Job.GROUPS);, +            parser.declareStringOrNull(Builder::setDescription, Job.DESCRIPTION);, +            parser.declareObjectArray(Builder::setDetectorUpdates, DetectorUpdate.PARSER, DETECTORS);, +            parser.declareObject(Builder::setModelPlotConfig, ModelPlotConfig.CONFIG_PARSER, Job.MODEL_PLOT_CONFIG);, +            parser.declareObject(Builder::setAnalysisLimits, AnalysisLimits.CONFIG_PARSER, Job.ANALYSIS_LIMITS);, +            parser.declareString((builder, val) -> builder.setBackgroundPersistInterval(]