[+++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                                        if (value instanceof List) {, +                                            List list = (List) value;, +                                            for (int i = 0; i < list.size(); i++) {, +                                                list.set(i, x.valueForSearch(list.get(i)));, +                                            }, +                                        } else {, +                        }, +                            if (value instanceof List) {, +                                List list = (List) value;, +                                for (int i = 0; i < list.size(); i++) {, +                                    list.set(i, x.mapper().valueForSearch(list.get(i)));, +                                }, +                            } else {, +                }, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                                        if (value instanceof List) {, +                                            List list = (List) value;, +                                            for (int i = 0; i < list.size(); i++) {, +                                                list.set(i, x.valueForSearch(list.get(i)));, +                                            }, +                                        } else {, +                        }, +                            if (value instanceof List) {, +                                List list = (List) value;, +                                for (int i = 0; i < list.size(); i++) {, +                                    list.set(i, x.mapper().valueForSearch(list.get(i)));, +                                }, +                            } else {, +                }, +++ b/src/test/java/org/elasticsearch/test/integration/get/GetActionTests.java, +                        .startObject("strs").field("type", "string").field("store", "yes").endObject(), +                        .startObject("ints").field("type", "integer").field("store", "yes").endObject(), +        client.prepareIndex("test", "type1", "1").setSource(, +                jsonBuilder().startObject(), +                        .field("str", "test"), +                        .field("strs", new String[]{"A", "B", "C"}), +                        .field("int", 42), +                        .field("ints", new int[]{1, 2, 3, 4}), +                        .field("date", "2012-11-13T15:26:14.000Z"), +                        .field("binary", Base64.encodeBytes(new byte[]{1, 2, 3})), +                        .endObject()).execute().actionGet();, +, +        client.prepareIndex("test", "type2", "1").setSource(, +                jsonBuilder().startObject(), +                        .field("str", "test"), +                        .field("strs", new String[]{"A", "B", "C"}), +                        .field("int", 42), +                        .field("ints", new int[]{1, 2, 3, 4}), +                        .field("date", "2012-11-13T15:26:14.000Z"), +                        .field("binary", Base64.encodeBytes(new byte[]{1, 2, 3})), +                        .endObject()).execute().actionGet();, +        GetResponse getResponse = client.prepareGet("test", "type1", "1").setFields("str", "strs", "int", "ints", "date", "binary").execute().actionGet();, +        assertThat((List<String>) getResponse.getField("strs").getValue(), contains("A", "B", "C"));, +        assertThat((List<Long>) getResponse.getField("ints").getValue(), contains(1L, 2L, 3L, 4L));, +        getResponse = client.prepareGet("test", "type2", "1").setFields("str", "strs", "int", "ints", "date", "binary").execute().actionGet();, +        assertThat((List<String>) getResponse.getField("strs").getValue(), contains("A", "B", "C"));, +        assertThat((List<Integer>) getResponse.getField("ints").getValue(), contains(1, 2, 3, 4));, +        getResponse = client.prepareGet("test", "type1", "1").setFields("str", "strs", "int", "ints", "date", "binary").execute().actionGet();, +        assertThat((List<String>) getResponse.getField("strs").getValue(), contains("A", "B", "C"));, +        assertThat((List<Long>) getResponse.getField("ints").getValue(), contains(1L, 2L, 3L, 4L));, +        getResponse = client.prepareGet("test", "type2", "1").setFields("str", "strs", "int", "ints", "date", "binary").execute().actionGet();, +        assertThat(getResponse.getField("strs").getValues(), contains((Object) "A", "B", "C"));, +        assertThat(getResponse.getField("ints").getValues(), contains((Object) 1, 2, 3, 4));]