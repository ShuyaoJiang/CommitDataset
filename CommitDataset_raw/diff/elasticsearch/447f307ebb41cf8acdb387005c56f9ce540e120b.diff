[+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.node.NodeClosedException;, +import java.util.HashSet;, +import static java.util.Collections.emptyMap;, +, +            // Attempt to create all the indices that we're going to need during the bulk before we start., +            // Step 1: collect all the indices in the request, +            final Set<String> indices = bulkRequest.requests.stream(), +            /* Step 2: filter that to indices that don't exist and we can create. At the same time build a map of indices we can't create, +             * that we'll use when we try to run the requests. */, +            final Map<String, IndexNotFoundException> indicesThatCannotBeCreated = new HashMap<>();, +            Set<String> autoCreateIndices = new HashSet<>();, +            for (String index : indices) {, +                boolean shouldAutoCreate;, +                try {, +                    shouldAutoCreate = shouldAutoCreate(index, state);, +                } catch (IndexNotFoundException e) {, +                    shouldAutoCreate = false;, +                    indicesThatCannotBeCreated.put(index, e);, +                }, +                if (shouldAutoCreate) {, +                    autoCreateIndices.add(index);, +                }, +            }, +            // Step 3: create all the indices that are missing, if there are any missing. start the bulk after all the creates come back., +            if (autoCreateIndices.isEmpty()) {, +                executeBulk(task, bulkRequest, startTime, listener, responses, indicesThatCannotBeCreated);, +            } else {, +                final AtomicInteger counter = new AtomicInteger(autoCreateIndices.size());, +                    createIndex(index, bulkRequest.timeout(), new ActionListener<CreateIndexResponse>() {, +                                executeBulk(task, bulkRequest, startTime, listener, responses, indicesThatCannotBeCreated);, +                                // fail all requests involving this index, if create didn't work, +                                }), responses, indicesThatCannotBeCreated);, +            executeBulk(task, bulkRequest, startTime, listener, responses, emptyMap());, +    void createIndex(String index, TimeValue timeout, ActionListener<CreateIndexResponse> listener) {, +        CreateIndexRequest createIndexRequest = new CreateIndexRequest();, +        createIndexRequest.index(index);, +        createIndexRequest.cause("auto(bulk api)");, +        createIndexRequest.masterNodeTimeout(timeout);, +        createIndexAction.execute(createIndexRequest, listener);, +    }, +, +        private final Map<String, IndexNotFoundException> indicesThatCannotBeCreated;, +        BulkOperation(Task task, BulkRequest bulkRequest, ActionListener<BulkResponse> listener, AtomicArray<BulkItemResponse> responses,, +                long startTimeNanos, Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {, +            this.indicesThatCannotBeCreated = indicesThatCannotBeCreated;, +                if (addFailureIfIndexIsUnavailable(docWriteRequest, i, concreteIndices, metaData)) {, +        private boolean addFailureIfIndexIsUnavailable(DocWriteRequest request, int idx, final ConcreteIndices concreteIndices,, +            IndexNotFoundException cannotCreate = indicesThatCannotBeCreated.get(request.index());, +            if (cannotCreate != null) {, +                addFailure(request, idx, cannotCreate);, +                return true;, +            }, +                    addFailure(request, idx, ex);, +                    return true;, +                addFailure(request, idx, new IndexClosedException(concreteIndex));, +                return true;, +            return false;, +, +        private void addFailure(DocWriteRequest request, int idx, Exception unavailableException) {, +    }, +, +    void executeBulk(Task task, final BulkRequest bulkRequest, final long startTimeNanos, final ActionListener<BulkResponse> listener,, +            final AtomicArray<BulkItemResponse> responses, Map<String, IndexNotFoundException> indicesThatCannotBeCreated) {, +        new BulkOperation(task, bulkRequest, listener, responses, startTimeNanos, indicesThatCannotBeCreated).run();, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.node.NodeClosedException;, +import java.util.HashSet;, +import static java.util.Collections.emptyMap;, +, +            // Attempt to create all the indices that we're going to need during the bulk before we start., +            // Step 1: collect all the indices in the request, +            final Set<String> indices = bulkRequest.requests.stream(), +            /* Step 2: filter that to indices that don't exist and we can create. At the same time build a map of indices we can't create, +             * that we'll use when we try to run the requests. */, +            final Map<String, IndexNotFoundException> indicesThatCannotBeCreated = new HashMap<>();, +            Set<String> autoCreateIndices = new HashSet<>();, +            for (String index : indices) {, +                boolean shouldAutoCreate;, +                try {, +                    shouldAutoCreate = shouldAutoCreate(index, state);, +                } catch (IndexNotFoundException e) {, +                    shouldAutoCreate = false;, +                    indicesThatCannotBeCreated.put(index, e);, +                }, +                if (shouldAutoCreate) {, +                    autoCreateIndices.add(index);, +                }, +            }, +            // Step 3: create all the indices that are missing, if there are any missing. start the bulk after all the creates come back., +            if (autoCreateIndices.isEmpty()) {, +                executeBulk(task, bulkRequest, startTime, listener, responses, indicesThatCannotBeCreated);, +            } else {, +                final AtomicInteger counter = new AtomicInteger(autoCreateIndices.size());, +                    createIndex(index, bulkRequest.timeout(), new ActionListener<CreateIndexResponse>() {, +                                executeBulk(task, bulkRequest, startTime, listener, responses, indicesThatCannotBeCreated);, +                                // fail all requests involving this index, if create didn't work, +                                }), responses, indicesThatCannotBeCreated);, +            executeBulk(task, bulkRequest, startTime, listener, responses, emptyMap());, +    void createIndex(String index, TimeValue timeout, ActionListener<CreateIndexResponse> listener) {]