[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                indexRequest.process(metaData, aliasOrIndex, mappingMd, allowIdGeneration);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                indexRequest.process(metaData, aliasOrIndex, mappingMd, allowIdGeneration);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.common.UUID;, +    public void process(MetaData metaData, String aliasOrIndex, @Nullable MappingMetaData mappingMd, boolean allowIdGeneration) throws ElasticSearchException {, +            MappingMetaData.ParseContext parseContext = mappingMd.createParseContext(id, routing, timestamp);, +                    if (parseContext.shouldParseId()) {, +                        id = parseContext.id();, +                    }, +, +, +        // generate id if not already provided and id generation is allowed, +        if (allowIdGeneration) {, +            if (id == null) {, +                id(UUID.randomBase64UUID());, +                // since we generate the id, change it to CREATE, +                opType(IndexRequest.OpType.CREATE);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                indexRequest.process(metaData, aliasOrIndex, mappingMd, allowIdGeneration);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.common.UUID;, +    public void process(MetaData metaData, String aliasOrIndex, @Nullable MappingMetaData mappingMd, boolean allowIdGeneration) throws ElasticSearchException {, +            MappingMetaData.ParseContext parseContext = mappingMd.createParseContext(id, routing, timestamp);, +                    if (parseContext.shouldParseId()) {, +                        id = parseContext.id();, +                    }, +, +, +        // generate id if not already provided and id generation is allowed, +        if (allowIdGeneration) {, +            if (id == null) {, +                id(UUID.randomBase64UUID());, +                // since we generate the id, change it to CREATE, +                opType(IndexRequest.OpType.CREATE);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        request.process(metaData, aliasOrIndex, mappingMd, allowIdGeneration);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                indexRequest.process(metaData, aliasOrIndex, mappingMd, allowIdGeneration);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.common.UUID;, +    public void process(MetaData metaData, String aliasOrIndex, @Nullable MappingMetaData mappingMd, boolean allowIdGeneration) throws ElasticSearchException {, +            MappingMetaData.ParseContext parseContext = mappingMd.createParseContext(id, routing, timestamp);, +                    if (parseContext.shouldParseId()) {, +                        id = parseContext.id();, +                    }, +, +, +        // generate id if not already provided and id generation is allowed, +        if (allowIdGeneration) {, +            if (id == null) {, +                id(UUID.randomBase64UUID());, +                // since we generate the id, change it to CREATE, +                opType(IndexRequest.OpType.CREATE);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        request.process(metaData, aliasOrIndex, mappingMd, allowIdGeneration);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +    public static class Id {, +, +        public static final Id EMPTY = new Id(null);, +, +        private final String path;, +, +        private final String[] pathElements;, +, +        public Id(String path) {, +            this.path = path;, +            if (path == null) {, +                pathElements = Strings.EMPTY_ARRAY;, +            } else {, +                pathElements = Strings.delimitedListToStringArray(path, ".");, +            }, +        }, +, +        public boolean hasPath() {, +            return path != null;, +        }, +, +        public String path() {, +            return this.path;, +        }, +, +        public String[] pathElements() {, +            return this.pathElements;, +        }, +    }, +, +    private final Id id;]