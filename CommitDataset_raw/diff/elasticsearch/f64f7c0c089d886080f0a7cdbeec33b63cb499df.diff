[+++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +        context.externalValue(Double.toString(point.lat()) + ',' + Double.toString(point.lon()));, +++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +        context.externalValue(Double.toString(point.lat()) + ',' + Double.toString(point.lon()));, +++ b/src/test/java/org/elasticsearch/test/integration/search/geo/GeoDistanceTests.java, +import java.io.IOException;, +, +import org.elasticsearch.common.geo.GeoHashUtils;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.index.query.FilterBuilders;, +import org.elasticsearch.index.query.QueryBuilders;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +    /**, +     * Issue 3073, +     */, +    @Test, +    public void testGeoDistanceFilter() throws IOException {, +        double lat = 40.720611;, +        double lon = -73.998776;, +, +        XContentBuilder mapping = JsonXContent.contentBuilder(), +                .startObject(), +                    .startObject("location"), +                        .startObject("properties"), +                            .startObject("pin"), +                                .field("type", "geo_point"), +                                .field("geohash", true), +                                .field("geohash_precision", 24), +                                .field("lat_lon", true), +                            .endObject(), +                        .endObject(), +                    .endObject(), +                .endObject();, +, +        XContentBuilder source = JsonXContent.contentBuilder(), +                .startObject(), +                    .field("pin", GeoHashUtils.encode(lat, lon)), +                .endObject();, +        , +        ensureYellow();, +        , +        client().admin().indices().prepareCreate("locations").addMapping("location", mapping).execute().actionGet();, +        client().prepareIndex("locations", "location", "1").setCreate(true).setSource(source).execute().actionGet();, +        client().admin().indices().prepareRefresh("locations").execute().actionGet();, +        client().prepareGet("locations", "location", "1").execute().actionGet();, +, +        SearchResponse result = client().prepareSearch("locations"), +                .setQuery(QueryBuilders.matchAllQuery()), +                .setFilter(FilterBuilders.geoDistanceFilter("pin"), +                        .geoDistance(GeoDistance.ARC), +                        .lat(lat).lon(lon), +                        .distance("1m")), +                .execute().actionGet();, +, +        assertHitCount(result, 1);, +    } , +]