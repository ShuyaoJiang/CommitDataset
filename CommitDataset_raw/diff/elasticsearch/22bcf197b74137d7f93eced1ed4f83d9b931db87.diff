[+++ b/build.gradle, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +    static EnumMap<TestStatus, String> statusNames;, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +    static EnumMap<TestStatus, String> statusNames;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +    static EnumMap<TestStatus, String> statusNames;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    LinkedHashMap<String, FileCollection> plugins = new LinkedHashMap<>(), +        plugins.put(name, file), +    @Input, +    void systemProperty(String property, String value) {, +        systemProperties.put(property, value), +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +    static EnumMap<TestStatus, String> statusNames;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                    plugin project.name, project.bundlePlugin.outputs.files, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    LinkedHashMap<String, FileCollection> plugins = new LinkedHashMap<>(), +        plugins.put(name, file), +    @Input, +    void systemProperty(String property, String value) {, +        systemProperties.put(property, value), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.file.FileCollection, +     * Adds dependent tasks to the given task to start and stop a cluster with the given configuration., +            // no need to add cluster formation tasks if the task won't run!, +            File nodeDir = new File(project.buildDir, "cluster/${task.name} node${i}"), +            configureTasks(project, task, config, nodeDir), +    /** Adds a dependency on the given distribution */, +    static void configureDistributionDependency(Project project, String distro) {, +        String elasticsearchVersion = ElasticsearchProperties.version, +        String packaging = distro == 'tar' ? 'tar.gz' : distro, +        project.configurations {, +            elasticsearchDistro, +        }, +        project.dependencies {, +            elasticsearchDistro "org.elasticsearch.distribution.${distro}:elasticsearch:${elasticsearchVersion}@${packaging}", +        }, +    }, +, +    /**, +     * Adds dependent tasks to start an elasticsearch cluster before the given task is executed,, +     * and stop it after it has finished executing., +     *, +     * The setup of the cluster involves the following:, +     * <ol>, +     *   <li>Cleanup the extraction directory</li>, +     *   <li>Extract a fresh copy of elasticsearch</li>, +     *   <li>Write an elasticsearch.yml config file</li>, +     *   <li>Copy plugins that will be installed to a temporary dir (which contains spaces)</li>, +     *   <li>Install plugins</li>, +     *   <li>Run additional setup commands</li>, +     *   <li>Start elasticsearch<li>, +     * </ol>, +     */, +    static void configureTasks(Project project, Task task, ClusterConfiguration config, File baseDir) {, +        File pidFile = pidFile(baseDir), +        File cwd = new File(baseDir, "cwd"), +        File pluginsTmpDir = new File(baseDir, "plugins tmp"), +, +        // tasks are chained so their execution order is maintained, +        Task setup = project.tasks.create(name: "${task.name}#clean", type: Delete, dependsOn: task.dependsOn.collect()) {, +            delete home, +            doLast {, +                cwd.mkdirs(), +            }, +        }, +        setup = configureCheckPreviousTask("${task.name}#checkPrevious", project, setup, pidFile), +        setup = configureStopTask("${task.name}#stopPrevious", project, setup, pidFile), +        setup = configureExtractTask("${task.name}#extract", project, setup, baseDir, config.distribution), +        setup = configureWriteConfigTask("${task.name}#configure", project, setup, home, config, clusterName, pidFile), +        setup = configureCopyPluginsTask("${task.name}#copyPlugins", project, setup, pluginsTmpDir, config), +, +        // install plugins, +        for (Map.Entry<String, FileCollection> plugin : config.plugins.entrySet()) {, +            // replace every dash followed by a character with just the uppercase character, +            String camelName = plugin.getKey().replaceAll(/-(\w)/) { _, c -> c.toUpperCase(Locale.ROOT) }, +            String taskName = "${task.name}#install${camelName[0].toUpperCase(Locale.ROOT) + camelName.substring(1)}", +            // delay reading the file location until execution time by wrapping in a closure within a GString, +            String file = "${ -> new File(pluginsTmpDir, plugin.getValue().singleFile.getName()).toURI().toURL().toString() }", +            Object[] args = [new File(home, 'bin/plugin'), 'install', file], +            setup = configureExecTask(taskName, project, setup, cwd, args), +        }, +, +        // extra setup commands, +        for (Map.Entry<String, Object[]> command : config.setupCommands.entrySet()) {, +            setup = configureExecTask("${task.name}#${command.getKey()}", project, setup, cwd, command.getValue()), +        }, +, +        Task start = configureStartTask("${task.name}#start", project, setup, cwd, config, clusterName, pidFile, home), +        task.dependsOn(start)]